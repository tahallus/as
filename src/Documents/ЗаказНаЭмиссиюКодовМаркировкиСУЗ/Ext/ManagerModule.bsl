#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Статусы

// Возвращает конечные статусы.
//
// Возвращаемое значение:
//  Массив - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	Возврат Статусы;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка);
	Статусы.Добавить(Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ОшибкаКонтрольноЛогическаяПроверкаНеПройдена);
	Статусы.Добавить(Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ОшибкаОбработки);
	Статусы.Добавить(Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ОшибкаОтклоненОператором);
	Статусы.Добавить(Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ОшибкаПроверкаФорматаНеПройдена);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статус по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт

	Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Черновик;

КонецФункции
	
// Возвращает дальнейшее действие по умолчанию.
//
/// Параметры:
// 	СтруктураПараметров - Неопределено, Структура - Параметры для расчета:
// 	 ОбъектРасчета - ДокументСсылка, ДанныеФормыОбъект - Объект для расчета допустимых действий.
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров = Неопределено) Экспорт
	
	ДальнейшиеДействия = Новый Массив;
	
	Если СтруктураПараметров <> Неопределено И СтруктураПараметров.Свойство("ОбъектРасчета") Тогда
		ДобавитьВМассивДоступныеДействия(ДальнейшиеДействия, СтруктураПараметров.ОбъектРасчета);
	Иначе
		ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки);
	КонецЕсли;
	
	Возврат ДальнейшиеДействия;

КонецФункции

Функция ДопустимыеДействия(Объект) Экспорт
	
	ДопустимыеДействия = Новый Массив;
	
	ДобавитьВМассивДоступныеДействия(ДопустимыеДействия, Объект);
	
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеПередачуДанных);
	
	Возврат ДопустимыеДействия;
	
КонецФункции

// Конвертирует общий статус документа ИС МП в статус текущего документа.
// 
// Параметры:
// 	ИсходныйСтатус - ПеречислениеСсылка.СтатусыДокументовИСМП - Исходный статус.
// Возвращаемое значение:
// 	ПеречислениеСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП,
// 	ПеречислениеСсылка.СтатусыДокументовИСМП - Конвертированный статус.
//
Функция КонвертированныйОбщийСтатус(ИсходныйСтатус) Экспорт
	
	Если ИсходныйСтатус = Перечисления.СтатусыДокументовИСМП.ЕстьОшибки
		Или ИсходныйСтатус = Перечисления.СтатусыДокументовИСМП.Ошибка Тогда
		ИтоговыйСтатус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка;
	ИначеЕсли ИсходныйСтатус = Перечисления.СтатусыДокументовИСМП.Неопределен Тогда
		ИтоговыйСтатус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПНаРассмотренииОператором;
	ИначеЕсли ИсходныйСтатус = Перечисления.СтатусыДокументовИСМП.НеПроверен Тогда
		ИтоговыйСтатус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ОшибкаПроверкаФорматаНеПройдена;
	ИначеЕсли ИсходныйСтатус = Перечисления.СтатусыДокументовИСМП.Обрабатывается Тогда
		ИтоговыйСтатус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПОбрабатывается;
	ИначеЕсли ИсходныйСтатус = Перечисления.СтатусыДокументовИСМП.Проверен Тогда
		ИтоговыйСтатус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПGTINНаОстаткиПолучены;
	Иначе 
		ИтоговыйСтатус = ИсходныйСтатус;
	КонецЕсли;
	
	Возврат ИтоговыйСтатус;
	
КонецФункции

// Возвращет признак отправки документа в сервис.
// 
// Параметры:
// 	СсылкаНаОбъект - ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ - Ссылка на документ.
// Возвращаемое значение:
// 	Булево - Документ отправлен и статус не ошибочный.
Функция ДокументОтправлен(СсылкаНаОбъект) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Статусы.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусыДокументовИСМП КАК Статусы
	|ГДЕ
	|	Статусы.Документ = &Документ");
	
	Запрос.УстановитьПараметр("Документ", СсылкаНаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Статус = Выборка.Статус;
		
		Если (Статус <> Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Черновик
			И Статус <> Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПGTINНаОстаткиПолучены
			И СтатусыОшибок().Найти(Статус) = Неопределено) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеИСМП

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИСМП
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус         - ПеречислениеСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки
	 Или Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки Тогда
		
		ВидПродукцииИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ВидПродукции");
		
		Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукцииИС) Тогда
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
				ДокументСсылка,
				Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.КПередачеВСУЗ);
		ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукцииИС) Тогда
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
				ДокументСсылка,
				Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.КПередачеВИСМП);
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ПолучениеКодовМаркировкиИзСУЗ Тогда
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ПовторноеПолучениеКодовМаркировкиИзСУЗ Тогда
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиРасчетСтатуса Тогда
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ЗакрытиеПодзаказаНаЭмиссиюКодовМаркировкиСУЗ Тогда
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка  - ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ  - Ссылка на документ
//  Операция        - ПеречислениеСсылка.ВидыОперацийИСМП              - Операция ИСМП
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * ФорматОбмена              - ПеречислениеСсылка.ВерсииФорматаОбменаСУЗ      - Формат обмена с СУЗ
//   * СтанцияУправленияЗаказами - СправочникСсылка.СтанцииУправленияЗаказамиИСМП - СУЗ
//   * Назначение                - ПеречислениеСсылка.НазначениеСообщенийИСМП     - Назначение сообщения.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки Тогда
		
		ВидПродукцииИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ВидПродукции");
		
		Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукцииИС) Тогда
			
			СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
			
			СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗПринятКОбработке;
			СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
			
			СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка;
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки);
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
			
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
			
		ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукцииИС) Тогда
			
			СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
			
			Если ДополнительныеПараметры <> Неопределено
				И ДополнительныеПараметры.Назначение = Перечисления.НазначениеСообщенийИСМП.ИСМП Тогда
				СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПКПроверкеФормата;
			Иначе
				СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗПринятКОбработке;
			КонецЕсли;
			
			СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
			
			Если ДополнительныеПараметры <> Неопределено
				И ДополнительныеПараметры.Назначение = Перечисления.НазначениеСообщенийИСМП.ИСМП Тогда
				СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ОшибкаПроверкаФорматаНеПройдена;
			Иначе
				СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка;
			КонецЕсли;
			
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки);
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
			
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
			
		КонецЕсли;
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
			
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
			СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка;
		Иначе
			СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПОписаниеОстатков;
		КонецЕсли;
		
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ПолучениеКодовМаркировкиИзСУЗ Тогда
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ПолучениеСтатусаПулаКодовМаркировкиИзСУЗ Тогда
		
		ОчередьСообщений = РегистрыСведений.ОчередьСообщенийИСМП.ОчередьСообщенийПоДокументу(ДокументСсылка);
		
		Если ОчередьСообщений.Количество() > 0 Тогда
			
			СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
			
			СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗПринятКПроизводству;
			
			СтатусыБазовыйПроцесс.Обрабатывается = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗПринятКОбработке;
			СтатусыБазовыйПроцесс.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
			
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки);
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
			
			СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка;
			
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиРасчетСтатуса Тогда
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ЗакрытиеПодзаказаНаЭмиссиюКодовМаркировкиСУЗ Тогда
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ИСМП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ИСМП.
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиЗаказаНаЭмиссиюКодовМаркировки
		Или Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента 
		Или Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки Тогда
		
		Если ЗначениеЗаполнено(ДополнительныеПараметры.Статус) Тогда
			
			Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
			Статусы.Принят         = ДополнительныеПараметры.Статус;
			
			Статусы.Обрабатывается = ДополнительныеПараметры.Статус;
			
			Статусы.Ошибка = ДополнительныеПараметры.Статус;
			
			Если ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки Тогда
				Статусы.ОшибкаДействия.Добавить(
					Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки);
				Статусы.ПринятДействия.Добавить(
					Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки);
				Статусы.ОбрабатываетсяДействия.Добавить(
					Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки);
			Иначе
				Статусы.ОбрабатываетсяДействия.Добавить(
					Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
				Статусы.ОшибкаДействия.Добавить(
					Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки);
			КонецЕсли;
				
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
			
		Иначе
			
			Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
			Статусы.Принят = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированы;
			
			Статусы.Обрабатывается = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПОбрабатывается;
			Статусы.ОбрабатываетсяДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
			
			Статусы.Ошибка = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка;
			
			Если ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки Тогда
				Статусы.ОшибкаДействия.Добавить(
					Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки);
			Иначе
				Статусы.ОшибкаДействия.Добавить(
					Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки);
			КонецЕсли;
			
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
			
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
	
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка          - ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ - Ссылка на документ
//  Операция                - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИСМП
//  ДополнительныеПараметры - Структура - 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт

	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(
		ДокументСсылка, Операция, ДополнительныеПараметры);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;

КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка  - ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ - Ссылка на документ
//  Операция        - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИСМП
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * ФорматОбмена - ПеречислениеСсылка.ВерсииФорматаОбменаСУЗ - Формат обмена с СУЗ
//   * СтанцияУправленияЗаказами - СправочникСсылка.СтанцииУправленияЗаказамиИСМП - СУЗ
//   * Назначение - ПеречислениеСсылка.НазначениеСообщенийИСМП - Назначение сообщения.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт

	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;

КонецФункции

// Обновить статус после получения данных из ИСМП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ИСМП.
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт

	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;

КонецФункции

// Изменяет и возвращает статус документа ИС МП.
//
// Параметры:
//  ДокументСсылка      - ДокументСсылка - Документ ИС МП.
//  ПараметрыОбновления - Структура      - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП - новый статус документа ИС МП.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ - Документ, для которого требуется обновить статус.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияИСМП.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка, ЛинейныйСписок = Ложь) Экспорт
	
	Таблица = ИнтеграцияИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	ОперацияВПоследовательности = ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиРасчетСтатуса);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 12,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 12,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки);
	
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияИСМП.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияИСМППереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	//Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус)<>Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус)=Неопределено Тогда
		РасчетСтатусовОформленияИСМП.РассчитатьСтатусыОформленияДокументов(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сообщения

// Сообщение к передаче JSON
//
// Параметры:
//  ДокументСсылка          - ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ - Ссылка на документ эмиссии.
//  ДальнейшееДействие      - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие.
//  ДополнительныеПараметры - Структура -
//  
// Возвращаемое значение:
//  Структура - Данные JSON сообщения.
//
Функция СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки Тогда
		
		Возврат ЗаявкаНаЭмиссиюКодовМаркировкиJSON(ДокументСсылка, ДополнительныеПараметры);
	
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки Тогда
		
		Возврат ПолучениеGTINНаОстаткиJSON(ДокументСсылка, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменИСМП

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - дальшейшие действия.
//
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеОбмен);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
	
	Возврат МассивДействий;
	
КонецФункции

Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область ОбработкаКодовМаркировки

Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		
		Результат = ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
		
	ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции, Истина) Тогда
		
		Результат = ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если Результат.ДобавленныеСтроки.Количество() Тогда
		ЗаполнениеОбъектовПоСтатистикеИСМП.ЗаполнитьДанныеПоТоварамЗаказаНаЭмиссиюКодовМаркировкиСУЗ(
			Форма.Объект.Товары, Форма.Объект, "СпособФормированияСерийногоНомера", "GTIN");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды)
	
	РезультатОбработки = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	ПараметрыЗаполнения = ПараметрыЗаполнения();
	
	ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыЗаполнения);
	
	РезультатОбработки.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	РезультатОбработки.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
	
	Возврат РезультатОбработки;
	
КонецФункции

Процедура ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ДеревоУпаковок, ПараметрыЗаполнения, УпаковкаВерхнегоУровня = Неопределено)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(
			Форма, СтрокаДерева, ПараметрыЗаполнения, УпаковкаВерхнегоУровняСтрокиДерева);
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			ПараметрыЗаполнения.РодительскийШтрихкод = УпаковкаВерхнегоУровня;
			ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, СтрокаДерева, Неопределено, ПараметрыЗаполнения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыЗаполнения()
	
	Возврат Новый Структура("ИзмененныеСтроки, ДобавленныеСтроки, РодительскийШтрихкод", Новый Массив, Новый Массив);
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования, ПараметрыЗаполнения = Неопределено)
	
	ИсточникДанных = Форма.Объект;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, "Количество")
		И ЗначениеЗаполнено(ДанныеШтрихкода.Количество) Тогда
		Количество = ДанныеШтрихкода.Количество;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, "Коэффициент")
		И ЗначениеЗаполнено(ДанныеШтрихкода.Коэффициент) Тогда
		Количество = ДанныеШтрихкода.Коэффициент;
	Иначе
		Количество = 1;
	КонецЕсли;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		
		ПараметрыЗаполнения  = ПараметрыЗаполнения();
		РезультатОбработки   = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
		РодительскийШтрихкод = Неопределено;
		
	Иначе
		
		РезультатОбработки   = ПараметрыЗаполнения;
		РодительскийШтрихкод = ПараметрыЗаполнения.РодительскийШтрихкод;
		
	КонецЕсли;
	
	ОбновляемаяСтрока = ПроверкаИПодборПродукцииИС.ДанныеШтрихкодаДляДобавленияВКеш(ДанныеШтрихкода, "ЗаказНаЭмиссию");
	ОбновляемаяСтрока.Количество = Количество;
	
	ВидУпаковки    = ДанныеШтрихкода.ВидУпаковки;
	ОписаниеGTIN   = РегистрыСведений.ОписаниеGTINИС.ПолучитьОписание(ДанныеШтрихкода.GTIN);
	ДанныеОписания = ОписаниеGTIN.Получить(ДанныеШтрихкода.GTIN);
	
	Если ДанныеОписания <> Неопределено
		И (ДанныеОписания.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
		Или ДанныеОписания.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская) Тогда
		ВидУпаковки = ДанныеОписания.ВидУпаковки;
	КонецЕсли;
	
	Шаблон = ИнтеграцияИСМПСлужебныйКлиентСервер.ШаблонКодаМаркировкиПоВидуУпаковки(
		ВидУпаковки, ДанныеШтрихкода.ВидПродукции);
	
	ОбновляемаяСтрока.Вставить("Шаблон", Шаблон);
	
	Если РодительскийШтрихкод <> Неопределено Тогда
		ОбновляемаяСтрока.ШтрихкодУпаковки = РодительскийШтрихкод;
	КонецЕсли;
	
	ПараметрыПоиска = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(Ложь, Истина);
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ДанныеШтрихкода);
	
	НайденныеСтрокиТовары = ИсточникДанных.Товары.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтрокиТовары.Количество() > 0 Тогда
		
		ОбработатьНайденныеСтрокиВТаблицеТовары(Форма, НайденныеСтрокиТовары, ОбновляемаяСтрока, РезультатОбработки);
		
	Иначе
		
		СтрокаТовары = ИсточникДанных.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, ОбновляемаяСтрока);
		СтрокаТовары.КоличествоУпаковок = СтрокаТовары.Количество;
		
		Если ИсточникДанных.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков
			И Не ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(СтрокаТовары.GTIN) Тогда
			СтрокаТовары.ПолноеОписаниеОстатков = Истина;
		Иначе
			СтрокаТовары.ПолноеОписаниеОстатков = Ложь;
		КонецЕсли;
		
		РезультатОбработки.ДобавленныеСтроки.Добавить(СтрокаТовары);
		
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
		
		РегистрыСведений.КэшОписанияОстатковИСМП.ЗаполнитьТаблицуПредставленийGTINОстатки(
			ИсточникДанных.Товары, ИсточникДанных.Организация, ИсточникДанных.ВидПродукции);
		
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

Процедура ОбработатьНайденныеСтрокиВТаблицеТовары(Форма, НайденныеСтрокиТоваров, ОбновляемаяСтрока, РезультатОбработки)
	
	КоличествоМаркируемойПродукции = ОбновляемаяСтрока.Количество;
	
	ВсегоПоПараметрамПоиска = 0;
	Для Каждого ПодходящаяСтрока Из НайденныеСтрокиТоваров Цикл
		ВсегоПоПараметрамПоиска = ВсегоПоПараметрамПоиска + ПодходящаяСтрока.Количество;
	КонецЦикла;
		
	СтрокаТовары = НайденныеСтрокиТоваров[0];
	
	СтрокаТовары.Количество         = СтрокаТовары.Количество + КоличествоМаркируемойПродукции;
	СтрокаТовары.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок + КоличествоМаркируемойПродукции;
	
	Если КоличествоМаркируемойПродукции > 0 Тогда
		РезультатОбработки.ИзмененныеСтроки.Добавить(СтрокаТовары);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область GTINМаркировкаОстатков

Функция ТребуетсяЗапросGTIN(Объект) Экспорт
	
	Если Не Объект.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьРеквизитПолноеОписаниеОстатков = Ложь;
	Если Объект.Товары.Количество() > 0 Тогда
		ЕстьРеквизитПолноеОписаниеОстатков = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			Объект.Товары[0], "ПолноеОписаниеОстатков");
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовары.GTIN)
			И (ЕстьРеквизитПолноеОписаниеОстатков
			И Не СтрокаТовары.ПолноеОписаниеОстатков
			Или Не ЕстьРеквизитПолноеОписаниеОстатков) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры      - Структура       - 
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ, Ограничение);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует JSON сообщения для заказа на эмиссию кодов маркировки
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ - Документ Маркировка товаров ИСМП.
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция ЗаявкаНаЭмиссиюКодовМаркировкиJSON(ДокументСсылка, ДополнительныеПараметры) Экспорт
	
	Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки;
	
	СообщенияJSON = Новый Массив;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.ВладелецФайла КАК Ссылка,
	|	КОЛИЧЕСТВО(ИСМППрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.ВладелецФайла
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	Шапка.Ссылка                             КАК Документ,
	|
	|	// Общие реквизиты для табака и обуви
	|	Шапка.ВидПродукции                         КАК ВидПродукции,
	|	Шапка.ИдентификаторПроизводственногоЗаказа КАК ИдентификаторПроизводственногоЗаказа,
	|	Шапка.СпособВводаВОборот                   КАК СпособВводаВОборот,
	|	Шапка.ВвезенПослеДатыОбязательнойМаркировки               КАК ВвезенПослеДатыОбязательнойМаркировки,
	|	Шапка.ПриобретенПроизведенПослеДатыОбязательнойМаркировки КАК ПриобретенПроизведенПослеДатыОбязательнойМаркировки,
	|
	|	Шапка.СервисПровайдер                                             КАК СервисПровайдер,
	|	ЕСТЬNULL(Шапка.СервисПровайдер.Идентификатор, """")               КАК СервисПровайдерИдентификатор,
	|	ЕСТЬNULL(Шапка.СервисПровайдер.ВидСервисПровайдера, Неопределено) КАК ВидСервисПровайдера,
	|
	|	// Основные реквизиты
	|	Шапка.Организация                КАК Организация,
	|	Шапка.Контрагент                 КАК Контрагент,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|	Шапка.ПроизводственныйОбъект     КАК ПроизводственныйОбъект,
	|
	|	Шапка.Ответственный                КАК Ответственный,
	|	Представление(Шапка.Ответственный) КАК ОтветственныйПредставление
	|	
	|ИЗ
	|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА
	|			ТЧТовары.СпособФормированияСерийногоНомера = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСерийногоНомераСУЗ.Самостоятельно)
	|				ИЛИ &ЭтоТабачнаяПродукция
	|				ИЛИ ТЧТовары.Шаблон = ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИС)
	|				ИЛИ ТЧТовары.Шаблон = ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.СкоропортящаясяМолочнаяПродукцияВЕТИС)
	|				ТОГДА ТЧТовары.ИдентификаторСтроки
	|		ИНАЧЕ """"
	|	КОНЕЦ                                    КАК ИдентификаторСтроки,
	|	
	|	// Универсальные реквизиты
	|	ВЫБОР
	|		КОГДА НЕ &ЭтоТабачнаяПродукция И Шапка.БезУчетаНоменклатуры И ПОДСТРОКА(ТЧТовары.GTIN, 1, 3) = &НачалоGTIN
	|			ТОГДА &ПустаяНоменклатура
	|		ИНАЧЕ ТЧТовары.Номенклатура
	|	КОНЕЦ                                      КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ &ЭтоТабачнаяПродукция И Шапка.БезУчетаНоменклатуры И ПОДСТРОКА(ТЧТовары.GTIN, 1, 3) = &НачалоGTIN
	|			ТОГДА &ПустаяХарактеристика
	|		ИНАЧЕ ТЧТовары.Характеристика
	|	КОНЕЦ                                      КАК Характеристика,
	|	ТЧТовары.GTIN                              КАК GTIN,
	|	ТЧТовары.КодТНВЭД                          КАК КодТНВЭД,
	|	ТЧТовары.ТоварныйЗнак                      КАК ТоварныйЗнак,
	|	СУММА(ТЧТовары.Количество)                 КАК Количество,
	|	ТЧТовары.СпособФормированияСерийногоНомера КАК СпособФормированияСерийногоНомера,
	|	1                                          КАК КоличествоСтрок,
	|	ЛОЖЬ                                       КАК СтрокаДобавлена,
	|	ЕСТЬNULL(ТЧТовары.ШаблонЭтикетки.Идентификатор, """") КАК ШаблонЭтикеткиИдентификатор,
	|	
	|	// Табачная продукция
	|	Представление(ТЧТовары.Ссылка.ПроизводственныйОбъект) КАК ПроизводственныйОбъектПредставление,
	|	ТЧТовары.Ссылка.ПроизводственныйОбъектИдентификатор   КАК ПроизводственныйОбъектИдентификатор,
	|	ТЧТовары.Ссылка.ПроизводственныйОбъектАдресСтрокой    КАК ПроизводственныйОбъектАдресСтрокой,
	|	ТЧТовары.Ссылка.ИдентификаторПроизводственнойЛинии    КАК ИдентификаторПроизводственнойЛинии,
	|	ТЧТовары.Ссылка.ОжидаемаяДатаНачалаПроизводства       КАК ОжидаемаяДатаНачалаПроизводства,
	|	
	|	ТЧТовары.МаксимальнаяРозничнаяЦена КАК МРЦ,
	|	ТЧТовары.Шаблон                    КАК Шаблон,
	|	
	|	// Молочная продукция
	|	ТЧТовары.СрокГодности              КАК СрокГодности
	|	
	|ИЗ
	|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Товары КАК ТЧТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК Шапка
	|		ПО Шапка.Ссылка = ТЧТовары.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧТовары.Шаблон,
	|	ТЧТовары.Ссылка.ПроизводственныйОбъектИдентификатор,
	|	ТЧТовары.СрокГодности,
	|	ЕСТЬNULL(ТЧТовары.ШаблонЭтикетки.Идентификатор, """"),
	|	ТЧТовары.СпособФормированияСерийногоНомера,
	|	ТЧТовары.КодТНВЭД,
	|	ВЫБОР
	|		КОГДА ТЧТовары.СпособФормированияСерийногоНомера = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСерийногоНомераСУЗ.Самостоятельно)
	|				ИЛИ &ЭтоТабачнаяПродукция
	|				ИЛИ ТЧТовары.Шаблон = ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИС)
	|				ИЛИ ТЧТовары.Шаблон = ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.СкоропортящаясяМолочнаяПродукцияВЕТИС)
	|			ТОГДА ТЧТовары.ИдентификаторСтроки
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ТЧТовары.ТоварныйЗнак,
	|	ТЧТовары.Ссылка.ИдентификаторПроизводственнойЛинии,
	|	ВЫБОР
	|		КОГДА НЕ &ЭтоТабачнаяПродукция И Шапка.БезУчетаНоменклатуры И ПОДСТРОКА(ТЧТовары.GTIN, 1, 3) = &НачалоGTIN
	|			ТОГДА &ПустаяНоменклатура
	|		ИНАЧЕ ТЧТовары.Номенклатура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &ЭтоТабачнаяПродукция И Шапка.БезУчетаНоменклатуры И ПОДСТРОКА(ТЧТовары.GTIN, 1, 3) = &НачалоGTIN
	|			ТОГДА &ПустаяХарактеристика
	|		ИНАЧЕ ТЧТовары.Характеристика
	|	КОНЕЦ,
	|	ТЧТовары.Ссылка.ПроизводственныйОбъектАдресСтрокой,
	|	ТЧТовары.Ссылка.ОжидаемаяДатаНачалаПроизводства,
	|	ТЧТовары.МаксимальнаяРозничнаяЦена,
	|	ТЧТовары.GTIN,
	|	ПРЕДСТАВЛЕНИЕ(ТЧТовары.Ссылка.ПроизводственныйОбъект)",
	"Товары");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	СерийныеНомера.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СерийныеНомера.СерийныйНомер       КАК СерийныйНомер
	|ИЗ
	|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.СерийныеНомера КАК СерийныеНомера
	|ГДЕ
	|	СерийныеНомера.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|",
	"СерийныеНомера");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",     ДокументСсылка);
	Запрос.УстановитьПараметр("НачалоGTIN", ИнтеграцияИСМПСлужебныйКлиентСервер.НачалоGTINМаркировкиОстатков());
	Запрос.УстановитьПараметр(
		"ПустаяНоменклатура",
		ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	Запрос.УстановитьПараметр(
		"ПустаяХарактеристика",
		ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"));
	
	ВидПродукции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ВидПродукции");
	Запрос.УстановитьПараметр(
		"ЭтоТабачнаяПродукция",
		ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции));
		
	РезультатЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	
	//@skip-warning
	ТабличнаяЧастьТовары         = РезультатЗапроса["Товары"].Выгрузить();
	//@skip-warning
	ТабличнаяЧастьСерийныеНомера = РезультатЗапроса["СерийныеНомера"].Выгрузить();
	
	Если ТабличнаяЧастьТовары.Количество() = 0 Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Документ    = ДокументСсылка;
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.Описание    = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	НомерВерсии                        = Шапка.ПоследнийНомерВерсии + 1;
	СтанцияУправленияЗаказами          = Неопределено;
	
	СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	СообщениеJSON.Организация       = Шапка.Организация;
	СообщениеJSON.Документ          = ДокументСсылка;
	СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
	
	СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	РезультатОпределенияСУЗ = ИнтеграцияИСМПСлужебный.ОпределитьСтанциюУправленияЗаказами(
		СообщенияJSON, СообщениеJSON, Шапка, ДополнительныеПараметры);
	Если Не РезультатОпределенияСУЗ.Успешно Тогда
		Возврат СообщенияJSON;
	КонецЕсли;
	СтанцияУправленияЗаказами = РезультатОпределенияСУЗ.СтанцияУправленияЗаказами;
	
	МаксимальноеКоличествоКодовВЗаказе = 25000;
	Если ЗначениеЗаполнено(РезультатОпределенияСУЗ.НастройкаОбмена.МаксимальноеКоличествоКодовВЗаказе) Тогда
		МаксимальноеКоличествоКодовВЗаказе = РезультатОпределенияСУЗ.НастройкаОбмена.МаксимальноеКоличествоКодовВЗаказе;
	КонецЕсли;
	
	ЭтоМаркировкаОстатков = (Шапка.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков);
	АбстрактнаяОперация   = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиРасчетСтатуса;
		
	Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(Шапка.ВидПродукции) Тогда
		
		Если МаксимальноеКоличествоКодовВЗаказе > 150000 Тогда
			МаксимальноеКоличествоКодовВЗаказе = 150000;
		КонецЕсли;
		
		АбстрактноеСообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		АбстрактноеСообщениеJSON.Организация               = Шапка.Организация;
		АбстрактноеСообщениеJSON.Документ                  = ДокументСсылка;
		АбстрактноеСообщениеJSON.ДокументОснование         = Шапка.ДокументОснование;
		АбстрактноеСообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
		АбстрактноеСообщениеJSON.Операция                  = АбстрактнаяОперация;
		АбстрактноеСообщениеJSON.Версия                    = НомерВерсии;
		АбстрактноеСообщениеJSON.ПараметрыЗапроса          = Новый Массив;
		АбстрактноеСообщениеJSON.ИдентификаторЗаявки       = ИнтеграцияИСМПСлужебный.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
		АбстрактноеСообщениеJSON.Идентификатор             = СокрЛП(Новый УникальныйИдентификатор());
		АбстрактноеСообщениеJSON.ТипСообщения              = Перечисления.ТипыЗапросовИС.Исходящий;
		АбстрактноеСообщениеJSON.ТребуетсяПодписание       = Ложь;
		АбстрактноеСообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
		АбстрактноеСообщениеJSON.ПроизводственныйОбъект    = Шапка.ПроизводственныйОбъект;
		АбстрактноеСообщениеJSON.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
		АбстрактноеСообщениеJSON.Описание   = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			АбстрактнаяОперация, ДокументСсылка, НомерВерсии);
		
		СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
		
		РаспределитьКоличествоПоНовымСтрокам(ТабличнаяЧастьТовары, МаксимальноеКоличествоКодовВЗаказе);
		
		Для Каждого СтрокаТЧ Из ТабличнаяЧастьТовары Цикл
			
			СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
			СообщениеJSON.Организация       = Шапка.Организация;
			СообщениеJSON.Документ          = ДокументСсылка;
			СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
			СообщениеJSON.ЗагружатьДо       = АбстрактноеСообщениеJSON.Идентификатор;
			
			СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
				Операция, ДокументСсылка, НомерВерсии);
			
			ТелоЗапроса = Новый Структура;
			
			Если ЭтоМаркировкаОстатков Тогда
				
				ТелоЗапроса.Вставить("factoryId",          "NONE"); 
				ТелоЗапроса.Вставить("factoryCountry",     "NONE");
				ТелоЗапроса.Вставить("productionLineId",   "NONE");
				ТелоЗапроса.Вставить("productCode",        "NONE");
				ТелоЗапроса.Вставить("productDescription", "NONE");
				
			Иначе
				
				ТелоЗапроса.Вставить("factoryId", СтрокаТЧ.ПроизводственныйОбъектИдентификатор); // GLN фабрики
				Если ЗначениеЗаполнено(СтрокаТЧ.ПроизводственныйОбъектПредставление) Тогда
					ТелоЗапроса.Вставить("factoryName", СтрокаТЧ.ПроизводственныйОбъектПредставление); // Наименование производства
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТЧ.ПроизводственныйОбъектАдресСтрокой) Тогда
					ТелоЗапроса.Вставить("factoryAddress", СтрокаТЧ.ПроизводственныйОбъектАдресСтрокой);  // Адрес производства
				КонецЕсли;
				ТелоЗапроса.Вставить("factoryCountry",     НСтр("ru = 'Россия'"));                     // Страна производства
				ТелоЗапроса.Вставить("productionLineId",   СтрокаТЧ.ИдентификаторПроизводственнойЛинии);
				
				ТелоЗапроса.Вставить("productCode",        Строка(СтрокаТЧ.Номенклатура.УникальныйИдентификатор()));      // Код продукта, SKU
				ТелоЗапроса.Вставить("productDescription", Строка(СтрокаТЧ.Номенклатура)); // Описание продукции
			
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.ТоварныйЗнак) Тогда
				ТелоЗапроса.Вставить("brandcode", СтрокаТЧ.ТоварныйЗнак);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Шапка.ИдентификаторПроизводственногоЗаказа) Тогда
				ТелоЗапроса.Вставить("poNumber", Шапка.ИдентификаторПроизводственногоЗаказа);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТЧ.ОжидаемаяДатаНачалаПроизводства) Тогда
				ТелоЗапроса.Вставить("expectedStartDate", Формат(СтрокаТЧ.ОжидаемаяДатаНачалаПроизводства, "ДФ=yyyy-MM-dd;")); // Дата начала производства продукции
			КонецЕсли;
			ТелоЗапроса.Вставить("products", Новый Массив);
			
			СтрокаЗаказаКодовМаркировки = Новый Структура;
			СтрокаЗаказаКодовМаркировки.Вставить("gtin",       СтрокаТЧ.GTIN);
			СтрокаЗаказаКодовМаркировки.Вставить("quantity",   СтрокаТЧ.Количество);
			СтрокаЗаказаКодовМаркировки.Вставить("templateId", ИнтерфейсСУЗСлужебный.ШаблонКодаМаркировки(СтрокаТЧ.Шаблон));
			
			СтрокаЗаказаКодовМаркировки.Вставить("serialNumberType", ИнтерфейсСУЗСлужебный.СпособФормированияСерийногоНомера(СтрокаТЧ.СпособФормированияСерийногоНомера)); // OPERATOR или SELF_MADE
			Если СтрокаТЧ.СпособФормированияСерийногоНомера = Перечисления.СпособыФормированияСерийногоНомераСУЗ.Самостоятельно Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ИдентификаторСтроки", СтрокаТЧ.ИдентификаторСтроки);
				СтрокаЗаказаКодовМаркировки.Вставить("serialNumbers", ТабличнаяЧастьСерийныеНомера.Скопировать(ПараметрыОтбора).ВыгрузитьКолонку("СерийныйНомер"));
			КонецЕсли;
			
			Если СтрокаТЧ.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка Тогда
				
				Если ЗначениеЗаполнено(СтрокаТЧ.МРЦ) Тогда
					СтрокаМРЦ = ИнтерфейсМОТП.ЗначениеМРЦСтрокой(СтрокаТЧ.МРЦ);
				Иначе
					СтрокаМРЦ = "0000";
				КонецЕсли;
				
				СтрокаЗаказаКодовМаркировки.Вставить("mrp", СтрокаМРЦ);
				
			ИначеЕсли СтрокаТЧ.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.БлокТабачныхПачек Тогда
				
				Если ЗначениеЗаполнено(СтрокаТЧ.МРЦ) Тогда
					СтрокаМРЦ = ИнтерфейсМОТП.ЗначениеМРЦСтрокой(СтрокаТЧ.МРЦ);
				Иначе
					СтрокаМРЦ = "000000";
				КонецЕсли;
				
				СтрокаЗаказаКодовМаркировки.Вставить("mrp", СтрокаМРЦ);
				
			КонецЕсли;
			
			Если Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
				
				СтрокаЗаказаКодовМаркировки.Вставить("cisType", ИнтерфейсСУЗСлужебный.ТипКодаМаркировки(СтрокаТЧ.Шаблон));
				
				ТелоЗапроса.Вставить("contactPerson",     Шапка.ОтветственныйПредставление);
				ТелоЗапроса.Вставить("releaseMethodType", ИнтерфейсСУЗСлужебный.СпособВыпускаВОборот(Шапка.СпособВводаВОборот, "СУЗ"));
				ТелоЗапроса.Вставить("createMethodType",  ИнтерфейсСУЗСлужебный.СпособИзготовленияКодовМаркировки(Шапка.ВидСервисПровайдера));
				ТелоЗапроса.Вставить("productionOrderId", Шапка.ИдентификаторПроизводственногоЗаказа);
				
			КонецЕсли;
			
			ТелоЗапроса["products"].Добавить(СтрокаЗаказаКодовМаркировки);
			
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("ИдентификаторБизнесЗаказа", "");
			ПараметрыЗапроса.Вставить("ИдентификаторСтрокиЗаказа", СтрокаТЧ.ИдентификаторСтроки);
			ПараметрыЗапроса.Вставить("GTIN",                      СтрокаТЧ.GTIN);
			ПараметрыЗапроса.Вставить("Шаблон",                    СтрокаТЧ.Шаблон);
			ПараметрыЗапроса.Вставить("Количество",                СтрокаТЧ.Количество);
			
			ПараметрыЗапросов = Новый Массив;
			ПараметрыЗапросов.Добавить(ПараметрыЗапроса);
			
			ТелоСообщенияJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса, Истина);
			
			СообщениеJSON.ТекстСообщенияJSON = ТелоСообщенияJSON;
			СообщениеJSON.ТипСообщения       = Перечисления.ТипыЗапросовИС.Исходящий;
			
			СообщениеJSON.ВидПродукции       = Шапка.ВидПродукции;
			СообщениеJSON.Операция           = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки;
			
			СообщениеJSON.Версия             = НомерВерсии;
			СообщениеJSON.ПараметрыЗапроса   = ПараметрыЗапросов;
			
			СообщениеJSON.ТребуетсяПодписание       = (Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак);
			СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
			СообщениеJSON.ФорматОбмена              = Перечисления.ВерсииФорматаОбменаСУЗ.V2;
			СообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
			СообщениеJSON.ПроизводственныйОбъект    = Шапка.ПроизводственныйОбъект;
			
			СообщенияJSON.Добавить(СообщениеJSON);
			
		КонецЦикла;
		
	ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(Шапка.ВидПродукции) Тогда
		
		Шаблон               = ИнтеграцияИСМПКлиентСервер.ШаблонКодаМаркировкиПоВидуПродукции(Шапка.ВидПродукции);
		ИдентификаторШаблона = ИнтерфейсСУЗСлужебный.ШаблонКодаМаркировки(Шаблон);
		
		ИспользуетсяСервисПровайдер = ЗначениеЗаполнено(Шапка.СервисПровайдер);
		
		ТабличнаяЧастьТовары.Индексы.Добавить("СпособФормированияСерийногоНомера");
		
		МассивЗаказов = МассивЗаказовПоТаблицеТоваров(ТабличнаяЧастьТовары, МаксимальноеКоличествоКодовВЗаказе);
		
		НалоговыйНомерВСтранеРегистрации = Неопределено;
		Если Шапка.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.ТрансграничнаяТорговля Тогда
			
			СведенияОКонтрагенте = Новый Структура();
			СведенияОКонтрагенте.Вставить("НалоговыйНомерВСтранеРегистрации", "");
			СведенияОКонтрагенте.Вставить("Наименование",                     "");
			ИнтеграцияИСПереопределяемый.ЗаполнитьСведенияОбОрганизации(Шапка.Контрагент, СведенияОКонтрагенте);
			НалоговыйНомерВСтранеРегистрации = СведенияОКонтрагенте.НалоговыйНомерВСтранеРегистрации;
			
			Если Не ЗначениеЗаполнено(СведенияОКонтрагенте.НалоговыйНомерВСтранеРегистрации) Тогда
				
				СообщениеJSON                   = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
				СообщениеJSON.Организация       = Шапка.Организация;
				СообщениеJSON.Документ          = ДокументСсылка;
				СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
				
				СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
					Операция, ДокументСсылка, НомерВерсии);
				
				ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
						СтрШаблон(
							НСтр("ru = 'Не заполнено поле ""Налоговый номер в стране регистрации"".
									   |Контрагент: %1'"),
							Шапка.Контрагент));
				
				СообщенияJSON.Добавить(СообщениеJSON);
				
				Возврат СообщенияJSON;
				
			КонецЕсли;
			
		КонецЕсли;
		
		АбстрактноеСообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		АбстрактноеСообщениеJSON.Организация               = Шапка.Организация;
		АбстрактноеСообщениеJSON.Документ                  = ДокументСсылка;
		АбстрактноеСообщениеJSON.ДокументОснование         = Шапка.ДокументОснование;
		АбстрактноеСообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
		АбстрактноеСообщениеJSON.Операция                  = АбстрактнаяОперация;
		АбстрактноеСообщениеJSON.Версия                    = НомерВерсии;
		АбстрактноеСообщениеJSON.ПараметрыЗапроса          = Новый Массив;
		АбстрактноеСообщениеJSON.ИдентификаторЗаявки       = ИнтеграцияИСМПСлужебный.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
		АбстрактноеСообщениеJSON.Идентификатор             = СокрЛП(Новый УникальныйИдентификатор());
		АбстрактноеСообщениеJSON.ТипСообщения              = Перечисления.ТипыЗапросовИС.Исходящий;
		АбстрактноеСообщениеJSON.ТребуетсяПодписание       = Ложь;
		АбстрактноеСообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
		АбстрактноеСообщениеJSON.ПроизводственныйОбъект    = Шапка.ПроизводственныйОбъект;
		АбстрактноеСообщениеJSON.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
		АбстрактноеСообщениеJSON.Описание   = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			АбстрактнаяОперация, ДокументСсылка, НомерВерсии);
		
		СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
		
		Для Каждого СодержаниеЗаказа Из МассивЗаказов Цикл
			
			СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
			СообщениеJSON.Организация       = Шапка.Организация;
			СообщениеJSON.Документ          = ДокументСсылка;
			СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
			СообщениеJSON.ПараметрыЗапроса  = Новый Массив;
			СообщениеJSON.ЗагружатьДо       = АбстрактноеСообщениеJSON.Идентификатор;
			
			СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
				Операция, ДокументСсылка, НомерВерсии);
			
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("contactPerson",     Шапка.ОтветственныйПредставление);
			ТелоЗапроса.Вставить("releaseMethodType", ИнтерфейсСУЗСлужебный.СпособВыпускаВОборот(Шапка.СпособВводаВОборот, "СУЗ"));
			ТелоЗапроса.Вставить("createMethodType",  ИнтерфейсСУЗСлужебный.СпособИзготовленияКодовМаркировки(Шапка.ВидСервисПровайдера));
			
			Если ИспользуетсяСервисПровайдер Тогда
				ТелоЗапроса.Вставить("serviceProviderId", Шапка.СервисПровайдерИдентификатор);
			КонецЕсли;
			
			ТелоЗапроса.Вставить("productionOrderId", Шапка.ИдентификаторПроизводственногоЗаказа);
			ТелоЗапроса.Вставить("products",          Новый Массив);
			
			Если Шапка.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков
				И (Шапка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность")
				Или Шапка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь")) Тогда
				ТелоЗапроса.Вставить("remainsAvailable", Шапка.ПриобретенПроизведенПослеДатыОбязательнойМаркировки);
			КонецЕсли;
			
			Для Каждого СтрокаТЧ Из СодержаниеЗаказа Цикл
				
				СтрокаЗаказаКодовМаркировки = Новый Структура;
				СтрокаЗаказаКодовМаркировки.Вставить("gtin",             СтрокаТЧ.GTIN);
				СтрокаЗаказаКодовМаркировки.Вставить("quantity",         СтрокаТЧ.Количество);
				СтрокаЗаказаКодовМаркировки.Вставить("serialNumberType", ИнтерфейсСУЗСлужебный.СпособФормированияСерийногоНомера(СтрокаТЧ.СпособФормированияСерийногоНомера)); // OPERATOR или SELF_MADE
				СтрокаЗаказаКодовМаркировки.Вставить("templateId",       ИдентификаторШаблона);
			
				Если ИспользуетсяСервисПровайдер Тогда
					СтрокаЗаказаКодовМаркировки.Вставить("stickerId", СтрокаТЧ.ШаблонЭтикеткиИдентификатор);
				КонецЕсли;
				
				Если СтрокаТЧ.СпособФормированияСерийногоНомера = Перечисления.СпособыФормированияСерийногоНомераСУЗ.Самостоятельно Тогда
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("ИдентификаторСтроки", СтрокаТЧ.ИдентификаторСтроки);
					СтрокаЗаказаКодовМаркировки.Вставить(
						"serialNumbers",
						ТабличнаяЧастьСерийныеНомера.Скопировать(ПараметрыОтбора).ВыгрузитьКолонку("СерийныйНомер"));
				КонецЕсли;
				
				Если Шапка.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.ТрансграничнаяТорговля Тогда
					СтрокаЗаказаКодовМаркировки.Вставить("exporterTaxpayerId", НалоговыйНомерВСтранеРегистрации);
				КонецЕсли;
				
				Если СтрокаТЧ.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
					
					СтрокаЗаказаКодовМаркировки.Вставить("expDate", Формат(СтрокаТЧ.СрокГодности, "ДФ=yyMMdd;"));
					
				ИначеЕсли СтрокаТЧ.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.СкоропортящаясяМолочнаяПродукцияВЕТИС Тогда
					
					СтрокаЗаказаКодовМаркировки.Вставить("expDate72", Формат(СтрокаТЧ.СрокГодности, "ДФ=yyMMddHHmm;"));
					
				КонецЕсли;
				
				Если Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Духи
					Или Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак
					Или Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Фотоаппараты
					Или Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность
					Или Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.УпакованнаяВода
					Или Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС
					Или Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
					СтрокаЗаказаКодовМаркировки.Вставить("cisType", ИнтерфейсСУЗСлужебный.ТипКодаМаркировки(СтрокаТЧ.Шаблон));
				КонецЕсли;
				
				ТелоЗапроса["products"].Добавить(СтрокаЗаказаКодовМаркировки);
				
				Если Не ИспользуетсяСервисПровайдер Тогда
					ПараметрыЗапроса = Новый Структура;
					ПараметрыЗапроса.Вставить("GTIN",                      СтрокаТЧ.GTIN);
					ПараметрыЗапроса.Вставить("ИдентификаторБизнесЗаказа", "");
					ПараметрыЗапроса.Вставить("ИдентификаторСтрокиЗаказа", СтрокаТЧ.ИдентификаторСтроки);
					ПараметрыЗапроса.Вставить("Шаблон",                    СтрокаТЧ.Шаблон);
					ПараметрыЗапроса.Вставить("Количество",                СтрокаТЧ.Количество);
					
					СообщениеJSON.ПараметрыЗапроса.Добавить(ПараметрыЗапроса);
				КонецЕсли;
				
			КонецЦикла;
			
			ТелоСообщенияJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса, Истина);
			
			СообщениеJSON.ТекстСообщенияJSON = ТелоСообщенияJSON;
			СообщениеJSON.ТипСообщения       = Перечисления.ТипыЗапросовИС.Исходящий;
			
			СообщениеJSON.ВидПродукции       = Шапка.ВидПродукции;
			СообщениеJSON.Операция           = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки;
			
			СообщениеJSON.Версия             = НомерВерсии;
			
			СообщениеJSON.ТребуетсяПодписание       = Истина;
			СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
			СообщениеJSON.ФорматОбмена              = Перечисления.ВерсииФорматаОбменаСУЗ.V2;
			СообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
			СообщениеJSON.ПроизводственныйОбъект    = Шапка.ПроизводственныйОбъект;
			
			СообщенияJSON.Добавить(СообщениеJSON);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СообщенияJSON;
	
КонецФункции

Процедура РаспределитьКоличествоПоНовымСтрокам(ВходнаяТаблицаТовары, МаксимальноеКоличествоКодовПоСтроке)

	РаспеределениеЗавершено = Ложь;
	
	ИндексРаспределения = 0;
	Пока Не РаспеределениеЗавершено Цикл
		
		КонечныйИндекс = ВходнаяТаблицаТовары.Количество() - 1;
		
		РаспеределениеЗавершено = Истина;
		
		Для ИндексСтроки = ИндексРаспределения По КонечныйИндекс Цикл
			
			ТекущаяСтрока = ВходнаяТаблицаТовары.Получить(ИндексСтроки);
			Если ТекущаяСтрока.Количество <= МаксимальноеКоличествоКодовПоСтроке Тогда
				Продолжить;
			КонецЕсли;
			РаспеределениеЗавершено = Ложь;
			
			НоваяСтрока = ВходнаяТаблицаТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			НоваяСтрока.Количество   = НоваяСтрока.Количество - МаксимальноеКоличествоКодовПоСтроке;
			ТекущаяСтрока.Количество = МаксимальноеКоличествоКодовПоСтроке;
			
		КонецЦикла;
		
		ИндексРаспределения = КонечныйИндекс + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция МассивЗаказовПоТаблицеТоваров(ВходнаяТаблицаТовары, МаксимальноеКоличествоКодовПоСтроке)
	
	МассивЗаказов                       = Новый Массив;
	МаксимальноеКоличествоСтрокВЗаказе  = 10;

	ТабличнаяЧастьТовары = ВходнаяТаблицаТовары.Скопировать(
		Новый Структура("СпособФормированияСерийногоНомера",
		Перечисления.СпособыФормированияСерийногоНомераСУЗ.ПустаяСсылка()));
	ТабличнаяЧастьТовары.Очистить();
	
	Для Каждого СтрокаТаблицы Из ВходнаяТаблицаТовары Цикл
		
		Если Не СтрокаТаблицыГруппируетсяВЗаказеНаЭмиссию(СтрокаТаблицы) Тогда
			
			НоваяСтрока = ТабличнаяЧастьТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			СтрокаТаблицы.СтрокаДобавлена = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВременнаТаблицаТовары = ВходнаяТаблицаТовары.Скопировать(
		Новый Структура("СтрокаДобавлена", Ложь));
	ВременнаТаблицаТовары.Свернуть(
		"GTIN, СтрокаДобавлена, СпособФормированияСерийногоНомера, Шаблон, ШаблонЭтикеткиИдентификатор, СрокГодности",
		"Количество, КоличествоСтрок");
	ВременнаТаблицаТовары.ЗаполнитьЗначения(1, "КоличествоСтрок");
	ВременнаТаблицаТовары.Колонки.Добавить(
		"ИдентификаторСтроки", Метаданные.ОпределяемыеТипы["УникальныйИдентификаторИС"].Тип);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВременнаТаблицаТовары, ТабличнаяЧастьТовары);

	ТаблицаПодсчетаGTIN = ТабличнаяЧастьТовары.Скопировать(, "GTIN, КоличествоСтрок, Количество");
	ТаблицаПодсчетаGTIN.Свернуть("GTIN", "КоличествоСтрок, Количество");
	ТабличнаяЧастьТовары.Индексы.Добавить("GTIN, СтрокаДобавлена");
	
	Пока Истина Цикл
		
		ТаблицаПодсчетаGTIN.Сортировать("КоличествоСтрок Убыв, Количество Убыв");
		
		СодержаниеЗаказа = Новый Массив;
		
		Для Каждого СтрокаТаблицыПодсчета Из ТаблицаПодсчетаGTIN Цикл
			
			Если СтрокаТаблицыПодсчета.КоличествоСтрок = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоискаСтрок = Новый Структура();
			СтруктураПоискаСтрок.Вставить("GTIN",            СтрокаТаблицыПодсчета.GTIN);
			СтруктураПоискаСтрок.Вставить("СтрокаДобавлена", Ложь);
			
			ПоискСтрокТовары = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоискаСтрок);
			
			ВсеСтрокиПоGTINВыбраны = Истина;
			Для Каждого СтрокаТаблицы Из ПоискСтрокТовары Цикл
				
				Если СодержаниеЗаказа.Количество() = МаксимальноеКоличествоСтрокВЗаказе Тогда
					
					ВсеСтрокиПоGTINВыбраны = Ложь;
					
				ИначеЕсли СтрокаТаблицы.Количество > МаксимальноеКоличествоКодовПоСтроке Тогда
					
					ВсеСтрокиПоGTINВыбраны = Ложь;
					
					СодержаниеЗаказа.Добавить(СтрокаТаблицы);
					
					НоваяСтрока = ТабличнаяЧастьТовары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					НоваяСтрока.Количество        = СтрокаТаблицы.Количество - МаксимальноеКоличествоКодовПоСтроке;
					
					СтрокаТаблицы.СтрокаДобавлена = Истина;
					СтрокаТаблицы.Количество      = МаксимальноеКоличествоКодовПоСтроке;
					
				Иначе
					
					СодержаниеЗаказа.Добавить(СтрокаТаблицы);
					СтрокаТаблицы.СтрокаДобавлена = Истина;
					
				КонецЕсли;
				
				Прервать;
				
			КонецЦикла;
			
			Если ВсеСтрокиПоGTINВыбраны Тогда
				СтрокаТаблицыПодсчета.КоличествоСтрок = СтрокаТаблицыПодсчета.КоличествоСтрок - 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СодержаниеЗаказа.Количество() Тогда
			МассивЗаказов.Добавить(СодержаниеЗаказа);
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивЗаказов;
	
КонецФункции

Функция СтрокаТаблицыГруппируетсяВЗаказеНаЭмиссию(СтрокаТаблицы)
	
	Если СтрокаТаблицы.СпособФормированияСерийногоНомера = Перечисления.СпособыФормированияСерийногоНомераСУЗ.Самостоятельно
			Или СтрокаТаблицы.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИС
			Или СтрокаТаблицы.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.СкоропортящаясяМолочнаяПродукцияВЕТИС Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Формирует JSON сообщения для получения GTIN на остатки товаров
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ - Документ Маркировка товаров ИСМП.
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция ПолучениеGTINНаОстаткиJSON(ДокументСсылка, ДополнительныеПараметры) Экспорт
	
	Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки;
	
	СообщенияJSON = Новый Массив;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.ВладелецФайла КАК Ссылка,
	|	КОЛИЧЕСТВО(ИСМППрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.ВладелецФайла
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	
	|	// Общие реквизиты для табака и обуви
	|	Шапка.ВидПродукции                         КАК ВидПродукции,
	|	Шапка.ИдентификаторПроизводственногоЗаказа КАК ИдентификаторПроизводственногоЗаказа,
	|
	|	// Основные реквизиты
	|	Шапка.Организация                КАК Организация,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление
	|	
	|ИЗ
	|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	АбстрактноеСообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	
	АбстрактноеСообщениеJSON.Организация               = Шапка.Организация;
	АбстрактноеСообщениеJSON.Документ                  = ДокументСсылка;
	АбстрактноеСообщениеJSON.ДокументОснование         = Шапка.ДокументОснование;
	АбстрактноеСообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
	
	АбстрактноеСообщениеJSON.Операция                  = Операция;
	АбстрактноеСообщениеJSON.Версия                    = НомерВерсии;
	АбстрактноеСообщениеJSON.ПараметрыЗапроса          = Новый Массив;
	
	АбстрактноеСообщениеJSON.ИдентификаторЗаявки       = ИнтеграцияИСМПСлужебный.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
	АбстрактноеСообщениеJSON.Идентификатор             = СокрЛП(Новый УникальныйИдентификатор());
	АбстрактноеСообщениеJSON.ТипСообщения              = Перечисления.ТипыЗапросовИС.Входящий;
	
	АбстрактноеСообщениеJSON.ТребуетсяПодписание = Ложь;
	АбстрактноеСообщениеJSON.Назначение          = Перечисления.НазначениеСообщенийИСМП.ИСМП;
	
	АбстрактноеСообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

Функция ОписаниеОстатковJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено) Экспорт
	
	Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки;
	
	СообщенияJSON = Новый Массив;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.ВладелецФайла КАК Ссылка,
	|	КОЛИЧЕСТВО(ИСМППрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.ВладелецФайла
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	
	|	// Общие реквизиты для табака и обуви
	|	Шапка.ВидПродукции                         КАК ВидПродукции,
	|	Шапка.ИдентификаторПроизводственногоЗаказа КАК ИдентификаторПроизводственногоЗаказа,
	|
	|	// Основные реквизиты
	|	Шапка.Организация                КАК Организация,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|	Шапка.ПроизводственныйОбъект     КАК ПроизводственныйОбъект,
	|
	|	Шапка.Ответственный                КАК Ответственный,
	|	Представление(Шапка.Ответственный) КАК ОтветственныйПредставление
	|
	|ИЗ
	|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	ЗапросТовары ="
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.КодТНВЭД КАК КодТНВЭД,
	|	%1
	|ИЗ
	|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.GTIN = """"
	|";
	
	ШаблонПоляЗапроса = "Товары.%1 КАК %1";
	МассивПолейТовары = Новый Массив();
	МассивПолейТовары.Добавить(СтрШаблон(ШаблонПоляЗапроса, "GTIN"));
	
	ВидПродукции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ВидПродукции");
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.Шины
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.Духи
		Или ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции) Тогда
		МассивПолейТовары.Добавить(СтрШаблон(ШаблонПоляЗапроса, "ТоварныйЗнак"));
	КонецЕсли;
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Обувь Тогда
		МассивПолейТовары.Добавить(СтрШаблон(ШаблонПоляЗапроса, "ЦелевойПол"));
		МассивПолейТовары.Добавить(СтрШаблон(ШаблонПоляЗапроса, "СпособВводаВОборот"));
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Шины Тогда
		МассивПолейТовары.Добавить(СтрШаблон(ШаблонПоляЗапроса, "Модель"));
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность Тогда
		МассивПолейТовары.Добавить(СтрШаблон(ШаблонПоляЗапроса, "ЦелевойПол"));
		МассивПолейТовары.Добавить(СтрШаблон(ШаблонПоляЗапроса, "ВозрастнаяКатегория"));
		МассивПолейТовары.Добавить(СтрШаблон(ШаблонПоляЗапроса, "СпособВводаВОборот"));
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Духи
		Или ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции) Тогда
		МассивПолейТовары.Добавить("ВЫБОР
			                       |	КОГДА Товары.Наименование = """" ТОГДА Товары.Номенклатура
			                       |	ИНАЧЕ """"
			                       |КОНЕЦ КАК Номенклатура");
		МассивПолейТовары.Добавить("ВЫБОР
			                       |	КОГДА Товары.Наименование = """" ТОГДА Товары.Характеристика
			                       |	ИНАЧЕ """" КОНЕЦ
			                       |КАК Характеристика");
		МассивПолейТовары.Добавить(СтрШаблон(ШаблонПоляЗапроса, "Наименование"));
	КонецЕсли;
	
	ДополнениеТекстаЗапроса = СтрСоединить(
		МассивПолейТовары,
		СтрШаблон(",%1%2", Символы.ПС, Символы.Таб));
	
	СписокЗапросов.Добавить(
		СтрШаблон(
			ЗапросТовары,
			ДополнениеТекстаЗапроса),
		"Товары");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	
	//@skip-warning
	ТабличнаяЧастьТовары = РезультатЗапроса["Товары"].Выгрузить();
	Если ТабличнаяЧастьТовары.Количество() = 0 Тогда
		
		СообщениеJSON             = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Документ    = ДокументСсылка;
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.Описание    = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	РеквизитыОрганизации = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Организация);
	
	СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	СообщениеJSON.Организация       = Шапка.Организация;
	СообщениеJSON.Документ          = ДокументСсылка;
	СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
	
	СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("products_list",         Новый Массив);
	ТелоЗапроса.Вставить("trade_participant_inn", РеквизитыОрганизации.ИНН);
	
	ДобавленныеСтроки = Новый Соответствие();
	
	Для Каждого СтрокаТЧ Из ТабличнаяЧастьТовары Цикл
		
		СтрокаЗаказа = ИнтеграцияИСМПСлужебный.ОбязательныеПоляОписанияОстатковПоСтрокеДокумента(
			СтрокаТЧ, Шапка.ВидПродукции);
		
		Если Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
			СтрокаЗаказа.Вставить("product_group", "TOBACCO");
		ИначеЕсли Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
			СтрокаЗаказа.Вставить("product_group", "OTP");
		КонецЕсли;
		
		КлючПоиска = "";
		Для Каждого КлючИЗначение Из СтрокаЗаказа Цикл
			КлючПоиска = СтрШаблон(
				"%1%2%3",
				КлючПоиска,
				КлючИЗначение.Ключ,
				ИнтеграцияИСМПСлужебный.НормализованноеСтроковоеЗначение(КлючИЗначение.Значение));
		КонецЦикла;
		
		Если ДобавленныеСтроки.Получить(КлючПоиска) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТелоЗапроса["products_list"].Добавить(СтрокаЗаказа);
		ДобавленныеСтроки.Вставить(КлючПоиска, СтрокаЗаказа);
		
	КонецЦикла;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ИдентификаторБизнесЗаказа", "");
	ПараметрыЗапроса.Вставить("ИдентификаторСтрокиЗаказа", "");
	
	ПараметрыЗапросов = Новый Массив;
	ПараметрыЗапросов.Добавить(ПараметрыЗапроса);
	
	ТелоСообщенияJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса, Истина);
	
	СообщениеJSON.ТекстСообщенияJSON = ТелоСообщенияJSON;
	СообщениеJSON.ТипСообщения       = Перечисления.ТипыЗапросовИС.Исходящий;
	
	СообщениеJSON.ВидПродукции       = Шапка.ВидПродукции;
	СообщениеJSON.Операция           = Операция;
	
	СообщениеJSON.Версия             = НомерВерсии;
	СообщениеJSON.ПараметрыЗапроса   = ПараметрыЗапросов;
	
	СообщениеJSON.ТребуетсяПодписание       = Истина;
	СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.ИСМП;
	СообщениеJSON.ФорматОбмена              = Неопределено;
	СообщениеJSON.СтанцияУправленияЗаказами = Неопределено;
	
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

Процедура ДобавитьВМассивДоступныеДействия(ДопустимыеДействия, Объект)
	
	ЗапроситьGTIN = Ложь;
	
	Если ТребуетсяЗапросGTIN(Объект) Тогда
		ЗапроситьGTIN = Истина;
	КонецЕсли;
		
	Если ЗапроситьGTIN Тогда
		ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки);
	Иначе
		ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#КонецЕсли