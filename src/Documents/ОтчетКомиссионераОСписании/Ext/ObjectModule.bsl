#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыЗаполненияДокумента

// Процедура заполнения документа на основании заказа покупателя.
//
// Параметры:
//	ДанныеЗаполнения - Структура, ДокументСсылка.ЗаказПокупателя
//	
Процедура ЗаполнитьПоЗаказуПокупателя(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения = Документы.ЗаказПокупателя.ПустаяСсылка() Тогда Возврат КонецЕсли;
	
	// Заполнение шапки.
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, 
			Новый Структура("Организация, Контрагент, Договор, ВалютаДокумента, Курс, Кратность"));
			
	ЗначенияРеквизитов.Вставить("ЗаказНарядВозврат");
	Документы.ЗаказПокупателя.ПроверитьВозможностьВводаНаОснованииЗаказаПокупателя(ДанныеЗаполнения, ЗначенияРеквизитов);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияРеквизитов,
		"Организация, Контрагент, Договор, ВалютаДокумента, Курс, Кратность");
	ДокументОснование = ДанныеЗаполнения;
	
	НеУчитыватьЗаказы = Договор.НеУчитыватьЗаказыПриПередачеНаКомиссию;
	
	Если НеУчитыватьЗаказы Тогда
		ВызватьИсключение НСтр(
			"ru = 'По договору не ведется учет заказов при передачу на комиссию. Ввод на основании не возможен'");
	КонецЕсли;
	
	Если НЕ ВалютаДокумента = Константы.НациональнаяВалюта.Получить() Тогда
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()), Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
	// Заполнение табличной части.
	Запасы.Очистить();
	ЗаполнитьПоЗаказуПокупателяНаПродажу(ДанныеЗаполнения);
	
КонецПроцедуры // ЗаполнитьПоЗаказПокупателя()

// Процедура заполнения документа на основании заказа покупателя.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоЗаказуПокупателяНаПродажу(ДанныеЗаполнения)
	
	ПараметрыОтбора = Новый Структура("НомерВариантаКП", ДанныеЗаполнения.ОсновнойВариантКП);
	СтрокиДляДобавления = ДанныеЗаполнения.Запасы.НайтиСтроки(ПараметрыОтбора);
	
	ЗаказВТабличнойЧасти = ?(ПоложениеЗаказа = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти, Истина, Ложь);
	
	ДополнительныеПараметры = Новый Структура("Заказ", ДанныеЗаполнения);
	ТаблицаОстатков = РаботаСКомиссионерамиКомитентамиСервер.ТаблицаОстатковТоваровУКомиссионера(ЭтотОбъект, ДополнительныеПараметры,,, Ложь);
	
	ПараметрыПоиска = Новый Структура("Номенклатура, Характеристика, Партия");
	
	Для Каждого СтрокаЗаказа Из СтрокиДляДобавления Цикл
		
		ПараметрыПоиска.Номенклатура = СтрокаЗаказа.Номенклатура;
		ПараметрыПоиска.Характеристика = СтрокаЗаказа.Характеристика;
		ПараметрыПоиска.Партия = СтрокаЗаказа.Партия;

		НайденныеСтроки = ТаблицаОстатков.НайтиСтроки(ПараметрыПоиска);
		
		Если Не НайденныеСтроки.Количество() Тогда Продолжить КонецЕсли;
		
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗаказа);

		Если ЗаказВТабличнойЧасти Тогда
			НоваяСтрока.Заказ = ДанныеЗаполнения;
		КонецЕсли;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			Если НайденнаяСтрока.Количество = 0 Тогда Продолжить КонецЕсли;
			
			Если НоваяСтрока.Количество >= НайденнаяСтрока.Количество Тогда
				НоваяСтрока.Количество = НайденнаяСтрока.Количество;
				НоваяСтрока.Цена = Окр(НайденнаяСтрока.СуммаРасчетов / НайденнаяСтрока.Количество, 2, РежимОкругления.Окр15как20);
				НоваяСтрока.Сумма = НайденнаяСтрока.СуммаРасчетов;
				ТаблицаОстатков.Удалить(НайденнаяСтрока);
			Иначе
				НоваяСтрока.Цена = Окр(НайденнаяСтрока.СуммаРасчетов / НайденнаяСтрока.Количество, 2, РежимОкругления.Окр15как20);
				НоваяСтрока.Сумма = Окр(НоваяСтрока.Цена * НоваяСтрока.Количество, 2, РежимОкругления.Окр15как20);
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - НоваяСтрока.Количество;
				НайденнаяСтрока.СуммаРасчетов = НайденнаяСтрока.СуммаРасчетов - НоваяСтрока.Сумма;
				
				Если НайденнаяСтрока.СуммаРасчетов <= 0.01 Тогда 
					НоваяСтрока.Сумма = НоваяСтрока.Сумма + НайденнаяСтрока.СуммаРасчетов;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НоваяСтрока.Количество = 0 Тогда Запасы.Удалить(НоваяСтрока) КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоЗаказПокупателяНаПродажу()

// Процедура заполнения документа на основании заказа покупателя.
//
// Параметры:
//	ДанныеЗаполнения - Структура, ДокументСсылка.ЗаказПокупателя
//	
Процедура ЗаполнитьПоРасходнаяНакладная(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения = Документы.ЗаказПокупателя.ПустаяСсылка() Тогда Возврат КонецЕсли;
	
	// Заполнение шапки.
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, 
			Новый Структура("Организация, Контрагент, Договор, ВалютаДокумента, Курс, Кратность, Заказ"));
			
	Документы.ЗаказПокупателя.ПроверитьВозможностьВводаНаОснованииЗаказаПокупателя(ДанныеЗаполнения, ЗначенияРеквизитов);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияРеквизитов, "Организация, Контрагент, Договор, ВалютаДокумента, Курс, Кратность, Заказ");
	ДокументОснование = ДанныеЗаполнения;
	
	Если НЕ ВалютаДокумента = Константы.НациональнаяВалюта.Получить() Тогда
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()), Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Договор) Тогда
		ВидЦенКонтрагента = Договор.ВидЦенКонтрагента;
	КонецЕсли;
	
	ЗаказВШапке = ДанныеЗаполнения.ПоложениеЗаказаПокупателя;
	
	Если ПоложениеЗаказа = ЗаказВШапке Тогда
		 Заказ = ДанныеЗаполнения.Заказ;
	 КонецЕсли;
	
	// Заполнение табличной части.
	Запасы.Очистить();
	СерииНоменклатуры.Очистить();
	
	СерииНоменклатурыДокОснование = ДанныеЗаполнения.СерииНоменклатуры;
	
	ТаблицаОстатков = РаботаСКомиссионерамиКомитентамиСервер.ТаблицаОстатковТоваровУКомиссионера(ЭтотОбъект, ,,, Ложь);
	ПараметрыПоиска = Новый Структура("Номенклатура, Характеристика, Партия, ЗаказПокупателя");
	ПараметрыПоискаСерии = Новый Структура("КлючСвязи", 0);
	
	НеУчитыватьЗаказы = Договор.НеУчитыватьЗаказыПриПередачеНаКомиссию;
	
	Если НеУчитыватьЗаказы Тогда
		Заказ = Неопределено;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Запасы Цикл
		
		ПараметрыПоиска.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
		ПараметрыПоиска.Характеристика = СтрокаТабличнойЧасти.Характеристика;
		ПараметрыПоиска.Партия = СтрокаТабличнойЧасти.Партия;
		
		Если НеУчитыватьЗаказы Тогда
			ПараметрыПоиска.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
		Иначе
			Если СтрокаТабличнойЧасти.Заказ = Неопределено Тогда
				ПараметрыПоиска.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
			Иначе
				ПараметрыПоиска.ЗаказПокупателя = СтрокаТабличнойЧасти.Заказ;
			КонецЕсли;
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаОстатков.НайтиСтроки(ПараметрыПоиска);
		
		Если Не НайденныеСтроки.Количество() Тогда Продолжить КонецЕсли;
		
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		
		ПараметрыПоискаСерии.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
		НайденныеСтрокиСерии = СерииНоменклатурыДокОснование.НайтиСтроки(ПараметрыПоискаСерии);
		
		Если НайденныеСтрокиСерии.Количество() Тогда 
			Для Каждого НайденнаяСерия Из НайденныеСтрокиСерии Цикл
				НоваяСтрокаСерии = СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, НайденнаяСерия);
			КонецЦикла;
		КонецЕсли;
		
		НоваяСтрока.Заказ = ?(НеУчитыватьЗаказы, Неопределено, СтрокаТабличнойЧасти.Заказ);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			Если НайденнаяСтрока.Количество = 0 Тогда Продолжить КонецЕсли;
			
			Если НоваяСтрока.Количество >= НайденнаяСтрока.Количество Тогда
				НоваяСтрока.Количество = НайденнаяСтрока.Количество;
				НоваяСтрока.Цена = Окр(НайденнаяСтрока.СуммаРасчетов / НайденнаяСтрока.Количество, 2, РежимОкругления.Окр15как20);
				НоваяСтрока.Сумма = НайденнаяСтрока.СуммаРасчетов;
				ТаблицаОстатков.Удалить(НайденнаяСтрока);
			Иначе
				НоваяСтрока.Цена = Окр(НайденнаяСтрока.СуммаРасчетов / НайденнаяСтрока.Количество, 2, РежимОкругления.Окр15как20);
				НоваяСтрока.Сумма = Окр(НоваяСтрока.Цена * НоваяСтрока.Количество, 2, РежимОкругления.Окр15как20);
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - НоваяСтрока.Количество;
				НайденнаяСтрока.СуммаРасчетов = НайденнаяСтрока.СуммаРасчетов - НоваяСтрока.Сумма;
				
				Если НайденнаяСтрока.СуммаРасчетов <= 0.01 Тогда 
					НоваяСтрока.Сумма = НоваяСтрока.Сумма + НайденнаяСтрока.СуммаРасчетов;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НоваяСтрока.Количество = 0 Тогда Запасы.Удалить(НоваяСтрока) КонецЕсли;
		
	КонецЦикла;
	
	СерииНоменклатурыУНФ.УдалитьСерииНоменклатурыВТабличнойЧастиВЗависимостиОтПолитики(ЭтотОбъект);
	
КонецПроцедуры // ЗаполнитьПоЗаказПокупателя()

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ПриКопировании объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ОчиститьДатуНомерВходящегоДокумента(ЭтотОбъект);
КонецПроцедуры // ПриКопировании()

// Процедура - обработчик события ОбработкаЗаполнения.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	// Прослеживаемость
	СведенияПрослеживаемости.Очистить();
	// Конец Прослеживаемость
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПокупателя")] = "ЗаполнитьПоЗаказуПокупателя";
	СтратегияЗаполнения[Тип("ДокументСсылка.РасходнаяНакладная")] = "ЗаполнитьПоРасходнаяНакладная";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
	ПрослеживаемостьУНФ.ОбновитьПризнакПрослеживаемости(Запасы, Дата);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда Возврат КонецЕсли;
	
	СуммаДокумента = Запасы.Итог("Сумма");
	
	// Прослеживаемость
	// Для реализации не в страны ЕАЭС очистим колонку "Код ТН ВЭД"
	РеализацияВЕАЭС = Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Контрагент);
	
	Если НЕ РеализацияВЕАЭС Тогда 
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Запасы Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.КодТНВЭД) Тогда
				СтрокаТаблицы.КодТНВЭД = Неопределено;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Запасы Цикл
			Если СтрокаТаблицы.ПрослеживаемыйТовар Тогда
				СтрокаТаблицы.НомерГТД = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Автоматический подбор РНПТ и очистка признака прослеживаемого товара.
	ПрослеживаемыйТовар = Запасы.НайтиСтроки(Новый Структура("ПрослеживаемыйТовар", Истина));
	ЕстьПрослеживаемыйТовар = ПрослеживаемыйТовар.Количество() <> 0;
	Если ЕстьПрослеживаемыйТовар Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ПрослеживаемостьУНФ.ПодобратьРНПТКомиссия(ЭтотОбъект, Отказ);
		КонецЕсли; 
	Иначе
		СведенияПрослеживаемости.Очистить();
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
		КонецЦикла; 
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НоменклатураВДокументахСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, Отказ, Истина);
	СерииНоменклатурыУНФ.ПроверкаЗаполненияСерийНоменклатуры(Отказ, Запасы, СерииНоменклатуры, Неопределено, ЭтотОбъект);
	
	// Прослеживаемость
	РеализацияВЕАЭС = Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Контрагент);
	// Исключаем из проверки те реквизиты табличных частей, обязательность которых
	//  зависит от значений других реквизитов в строках табличных частей:
	ИсключаемыеРеквизиты = Новый Массив;
	ИсключаемыеРеквизиты.Добавить("Запасы.КодТНВЭД");
	
	// Проверяем табличную часть "Товары":
	Если Запасы.Количество() > 0 Тогда
		ИмяСписка = НСтр("ru = 'Запасы'");
		
		Для каждого СтрокаЗапасы Из Запасы Цикл
			
			Если Не СтрокаЗапасы.ПрослеживаемыйТовар Тогда
				Продолжить;
			КонецЕсли;
			
			// Проверка кода ТН ВЭД.
			Если РеализацияВЕАЭС
				И СтрокаЗапасы.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль()
				И НЕ ЗначениеЗаполнено(СтрокаЗапасы.КодТНВЭД) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Код ТН ВЭД'"),
				СтрокаЗапасы.НомерСтроки, ИмяСписка);
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", СтрокаЗапасы.НомерСтроки, "КодТНВЭД");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			// Для прослеживаемого товара обязательно указывается страна происхождения.
			Если СтрокаЗапасы.ПрослеживаемыйТовар
				И НЕ ЗначениеЗаполнено(СтрокаЗапасы.СтранаПроисхождения) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Страна происхождения'"),
				СтрокаЗапасы.НомерСтроки, ИмяСписка);
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", СтрокаЗапасы.НомерСтроки, "СтранаПроисхождения");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	// Конец Прослеживаемость
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, ИсключаемыеРеквизиты);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ОтчетКомиссионераОСписании.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыПереданные", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("Запасы", ТаблицыДляДвижений, Движения, Отказ);
	
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыВРазрезеГТД", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыПереданныеВРазрезеГТД", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДвиженияСерииНоменклатуры", ТаблицыДляДвижений, Движения, Отказ);
	
	// Прослеживаемость
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПрослеживаемыеТовары", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОперацииСПрослеживаемымиТоварами", ТаблицыДляДвижений, Движения, Отказ);
	
	// Запись наборов записей.
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.ОтчетКомиссионераОСписании.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	// Контроль
	Документы.ОтчетКомиссионераОСписании.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли