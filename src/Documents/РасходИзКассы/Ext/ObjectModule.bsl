#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыЗаполненияДокумента

// Процедура заполняет расшифровку платежа.
//
Процедура ЗаполнитьРасшифровкуПлатежа() Экспорт
	
	Компания = Константы.УчетПоКомпании.Компания(Организация);
	
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.СтавкаНДС(Организация.ВидСтавкиНДСПоУмолчанию);
	ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	Иначе
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
	КонецЕсли;
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ВалютаДенежныхСредств));
	КурсВалютыДС = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Курс
	);
	КратностьВалютыДС = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Кратность
	);
	
	// Заполнение расшифровки расчетов по умолчанию.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетыСПоставщикамиОстатки.Организация КАК Организация,
	|	РасчетыСПоставщикамиОстатки.Контрагент КАК Контрагент,
	|	РасчетыСПоставщикамиОстатки.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстатки.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПоставщикамиОстатки.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстатки.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА РасчетыСПоставщикамиОстатки.Заказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|	КОНЕЦ КАК Заказ,
	|	РасчетыСПоставщикамиОстатки.ТипРасчетов КАК ТипРасчетов,
	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток,
	|	РасчетыСПоставщикамиОстатки.Документ.Дата КАК ДокументДата,
	|	СУММА(ВЫРАЗИТЬ(РасчетыСПоставщикамиОстатки.СуммаВалОстаток * КурсыВалютРасчетов.Курс * КурсыВалютДокумента.Кратность / (КурсыВалютДокумента.Курс * КурсыВалютРасчетов.Кратность) КАК ЧИСЛО(15, 2))) КАК СуммаВалДокумента,
	|	КурсыВалютДокумента.Курс КАК КурсДенежныхСредств,
	|	КурсыВалютДокумента.Кратность КАК КратностьДенежныхСредств,
	|	КурсыВалютРасчетов.Курс КАК Курс,
	|	КурсыВалютРасчетов.Кратность КАК Кратность,
	|	РасчетыСПоставщикамиОстатки.Договор.СтатьяДДСПоУмолчанию КАК СтатьяДДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПоставщикамиОстатки.Организация КАК Организация,
	|		РасчетыСПоставщикамиОстатки.Контрагент КАК Контрагент,
	|		РасчетыСПоставщикамиОстатки.Договор КАК Договор,
	|		РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|		РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|		РасчетыСПоставщикамиОстатки.ТипРасчетов КАК ТипРасчетов,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками.Остатки(
	|				,
	|				Организация = &Организация
	|					И Контрагент = &Контрагент
	|					И (НЕ &НуженОтборПоВидуДоговора
	|						ИЛИ &НуженОтборПоВидуДоговора
	|							И Договор.ВидДоговора В (&СписокВидовДоговоров))
	|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)) КАК РасчетыСПоставщикамиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРасчетыСПоставщиками.Организация,
	|		ДвиженияДокументаРасчетыСПоставщиками.Контрагент,
	|		ДвиженияДокументаРасчетыСПоставщиками.Договор,
	|		ДвиженияДокументаРасчетыСПоставщиками.Документ,
	|		ДвиженияДокументаРасчетыСПоставщиками.Заказ,
	|		ДвиженияДокументаРасчетыСПоставщиками.ТипРасчетов,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.Сумма, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.Сумма, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.СуммаВал, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.СуммаВал, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками КАК ДвиженияДокументаРасчетыСПоставщиками
	|	ГДЕ
	|		ДвиженияДокументаРасчетыСПоставщиками.Регистратор = &Ссылка
	|		И ДвиженияДокументаРасчетыСПоставщиками.Период <= &Период
	|		И ДвиженияДокументаРасчетыСПоставщиками.Организация = &Организация
	|		И ДвиженияДокументаРасчетыСПоставщиками.Контрагент = &Контрагент
	|		И ДвиженияДокументаРасчетыСПоставщиками.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)) КАК РасчетыСПоставщикамиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &Валюта) КАК КурсыВалютДокумента
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютРасчетов
	|		ПО РасчетыСПоставщикамиОстатки.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|ГДЕ
	|	РасчетыСПоставщикамиОстатки.СуммаВалОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщикамиОстатки.Организация,
	|	РасчетыСПоставщикамиОстатки.Контрагент,
	|	РасчетыСПоставщикамиОстатки.Договор,
	|	РасчетыСПоставщикамиОстатки.Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ,
	|	РасчетыСПоставщикамиОстатки.ТипРасчетов,
	|	РасчетыСПоставщикамиОстатки.Документ.Дата,
	|	КурсыВалютДокумента.Курс,
	|	КурсыВалютДокумента.Кратность,
	|	КурсыВалютРасчетов.Курс,
	|	КурсыВалютРасчетов.Кратность,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстатки.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПоставщикамиОстатки.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстатки.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА РасчетыСПоставщикамиОстатки.Заказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|	КОНЕЦ,
	|	РасчетыСПоставщикамиОстатки.Договор.СтатьяДДСПоУмолчанию
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата";
	
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Валюта", ВалютаДенежныхСредств);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	НуженОтборПоДоговорам = УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов();
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Ссылка, ВидОперации);
	Запрос.УстановитьПараметр("СписокВидовДоговоров", СписокВидовДоговоров);
	Запрос.УстановитьПараметр("НуженОтборПоВидуДоговора", (НуженОтборПоДоговорам И Контрагент.ВестиРасчетыПоДоговорам));
	
	ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(
		Контрагент,
		Организация,
		СписокВидовДоговоров
	);
	
	СтруктураКурсВалютыДоговораПоУмолчанию = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
		Дата,
		Новый Структура("Валюта", ДоговорПоУмолчанию.ВалютаРасчетов)
	);
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	РасшифровкаПлатежа.Очистить();
	
	СуммаОсталосьРаспределить = СуммаДокумента;
	
	Пока СуммаОсталосьРаспределить > 0 Цикл
		
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		НоваяСтрока.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
		
		Если ВыборкаРезультатаЗапроса.Следующий() Тогда
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			
			Если ВыборкаРезультатаЗапроса.СуммаВалДокумента <= СуммаОсталосьРаспределить Тогда // сумма остатка меньше или равна чем осталось распределить
				
				НоваяСтрока.СуммаРасчетов = ВыборкаРезультатаЗапроса.СуммаВалОстаток;
				НоваяСтрока.СуммаПлатежа = ВыборкаРезультатаЗапроса.СуммаВалДокумента;
				НоваяСтрока.СтавкаНДС = СтавкаНДСПоУмолчанию;
				НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаПлатежа - (НоваяСтрока.СуммаПлатежа) / ((СтавкаНДСПоУмолчанию.Ставка + 100) / 100);
				СуммаОсталосьРаспределить = СуммаОсталосьРаспределить - ВыборкаРезультатаЗапроса.СуммаВалДокумента;
				
			Иначе // сумма остатка больше чем нужно распределить
				
				НоваяСтрока.СуммаРасчетов = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
					СуммаОсталосьРаспределить,
					ВыборкаРезультатаЗапроса.КурсДенежныхСредств,
					ВыборкаРезультатаЗапроса.Курс,
					ВыборкаРезультатаЗапроса.КратностьДенежныхСредств,
					ВыборкаРезультатаЗапроса.Кратность
				);
				НоваяСтрока.СуммаПлатежа = СуммаОсталосьРаспределить;
				НоваяСтрока.СтавкаНДС = СтавкаНДСПоУмолчанию;
				НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаПлатежа - (НоваяСтрока.СуммаПлатежа) / ((СтавкаНДСПоУмолчанию.Ставка + 100) / 100);
				СуммаОсталосьРаспределить = 0;
				
			КонецЕсли;
			
		Иначе
			
			НоваяСтрока.Договор = ДоговорПоУмолчанию;
			НоваяСтрока.Курс = ?(
				СтруктураКурсВалютыДоговораПоУмолчанию.Курс = 0,
				1,
				СтруктураКурсВалютыДоговораПоУмолчанию.Курс
			);
			НоваяСтрока.Кратность = ?(
				СтруктураКурсВалютыДоговораПоУмолчанию.Кратность = 0,
				1,
				СтруктураКурсВалютыДоговораПоУмолчанию.Кратность
			);
			НоваяСтрока.СуммаРасчетов = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
				СуммаОсталосьРаспределить,
				КурсВалютыДС,
				НоваяСтрока.Курс,
				КратностьВалютыДС,
				НоваяСтрока.Кратность
			);
			НоваяСтрока.ПризнакАванса = Истина;
			НоваяСтрока.СуммаПлатежа = СуммаОсталосьРаспределить;
			НоваяСтрока.СтавкаНДС = СтавкаНДСПоУмолчанию;
			НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаПлатежа - (НоваяСтрока.СуммаПлатежа) / ((СтавкаНДСПоУмолчанию.Ставка + 100) / 100);
			НоваяСтрока.СтатьяДДС = ДвиженияДенежныхСредствВызовСервера.ПолучитьСтатьюДДСПоУмолчаниюДляСтрокиРасшифровки(НоваяСтрока.Договор,
				НоваяСтрока.ДокументПланирования,
				НоваяСтрока.СтатьяДДС);
			СуммаОсталосьРаспределить = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		РасшифровкаПлатежа.Добавить();
		РасшифровкаПлатежа[0].СуммаПлатежа = СуммаДокумента;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРасшифровкуПлатежа()

// Процедура заполняет расшифровку платежа.
//
Процедура ЗаполнитьРасшифровкуПлатежаАвтоЗачетДолгов() Экспорт
	
	Компания = Константы.УчетПоКомпании.Компания(Организация);
	
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.СтавкаНДС(Организация.ВидСтавкиНДСПоУмолчанию);
	ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	Иначе
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
	КонецЕсли;
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ВалютаДенежныхСредств));
	
	КурсВалютыДС = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Курс
	);
	КратностьВалютыДС = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Кратность
	);
	
	// Заполнение расшифровки расчетов по умолчанию.
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	РасходСоСчетаДоговорыАвтоЗачетаДолгов.Договор,
	|	РасходСоСчетаДоговорыАвтоЗачетаДолгов.СуммаПлатежа КАК СуммаПлатежа
	|ПОМЕСТИТЬ ВременнаяТаблицаДоговорыАвтоЗачетаПредварительная
	|ИЗ
	|	&ДоговорыАвтоЗачетаДолгов КАК РасходСоСчетаДоговорыАвтоЗачетаДолгов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаДоговорыАвтоЗачетаПредварительная.Договор,
	|	СУММА(ВременнаяТаблицаДоговорыАвтоЗачетаПредварительная.СуммаПлатежа) КАК СуммаПлатежа
	|ПОМЕСТИТЬ ВременнаяТаблицаДоговорыАвтоЗачета
	|ИЗ
	|	ВременнаяТаблицаДоговорыАвтоЗачетаПредварительная КАК ВременнаяТаблицаДоговорыАвтоЗачетаПредварительная
	|ГДЕ
	|	ВременнаяТаблицаДоговорыАвтоЗачетаПредварительная.Договор <> Неопределено
	|	И ВременнаяТаблицаДоговорыАвтоЗачетаПредварительная.Договор <> Значение(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаДоговорыАвтоЗачетаПредварительная.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПоставщикамиОстатки.Организация КАК Организация,
	|	РасчетыСПоставщикамиОстатки.Контрагент КАК Контрагент,
	|	РасчетыСПоставщикамиОстатки.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстатки.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПоставщикамиОстатки.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстатки.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА РасчетыСПоставщикамиОстатки.Заказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|	КОНЕЦ КАК Заказ,
	|	РасчетыСПоставщикамиОстатки.ТипРасчетов КАК ТипРасчетов,
	|	СУММА(ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаОстаток, 0)) КАК СуммаОстаток,
	|	СУММА(ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаВалОстаток, 0)) КАК СуммаВалОстаток,
	|	РасчетыСПоставщикамиОстатки.Документ.Дата КАК ДокументДата,
	|	СУММА(ВЫРАЗИТЬ(РасчетыСПоставщикамиОстатки.СуммаВалОстаток * КурсыВалютРасчетов.Курс * КурсыВалютДокумента.Кратность / (КурсыВалютДокумента.Курс * КурсыВалютРасчетов.Кратность) КАК ЧИСЛО(15, 2))) КАК СуммаВалДокумента,
	|	КурсыВалютДокумента.Курс КАК КурсДенежныхСредств,
	|	КурсыВалютДокумента.Кратность КАК КратностьДенежныхСредств,
	|	КурсыВалютРасчетов.Курс КАК Курс,
	|	КурсыВалютРасчетов.Кратность КАК Кратность,
	|	ВременнаяТаблицаДоговорыАвтоЗачета.СуммаПлатежа КАК СуммаПлатежаАвто,
	|	ВременнаяТаблицаДоговорыАвтоЗачета.Договор КАК ДоговорАвто
	|ИЗ
	|	ВременнаяТаблицаДоговорыАвтоЗачета КАК ВременнаяТаблицаДоговорыАвтоЗачета
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|		РасчетыСПоставщикамиОстатки.Организация КАК Организация,
	|		РасчетыСПоставщикамиОстатки.Контрагент КАК Контрагент,
	|		РасчетыСПоставщикамиОстатки.Договор КАК Договор,
	|		РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|		РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|		РасчетыСПоставщикамиОстатки.ТипРасчетов КАК ТипРасчетов,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками.Остатки(
	|				,
	|				Организация = &Организация
	|					И Контрагент = &Контрагент
	|					// ТекстДоговорОтбор
	|					// ТекстДоговорАвтозаполнениеОтбор
	|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)) КАК РасчетыСПоставщикамиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРасчетыСПоставщиками.Организация,
	|		ДвиженияДокументаРасчетыСПоставщиками.Контрагент,
	|		ДвиженияДокументаРасчетыСПоставщиками.Договор,
	|		ДвиженияДокументаРасчетыСПоставщиками.Документ,
	|		ДвиженияДокументаРасчетыСПоставщиками.Заказ,
	|		ДвиженияДокументаРасчетыСПоставщиками.ТипРасчетов,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.Сумма, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.Сумма, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.СуммаВал, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.СуммаВал, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками КАК ДвиженияДокументаРасчетыСПоставщиками
	|	ГДЕ
	|		ДвиженияДокументаРасчетыСПоставщиками.Регистратор = &Ссылка
	|		И ДвиженияДокументаРасчетыСПоставщиками.Период <= &Период
	|		И ДвиженияДокументаРасчетыСПоставщиками.Организация = &Организация
	|		И ДвиженияДокументаРасчетыСПоставщиками.Контрагент = &Контрагент
	|		// ТекстДоговорДвиженийАвтозаполнениеОтбор
	|		И ДвиженияДокументаРасчетыСПоставщиками.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)) КАК РасчетыСПоставщикамиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &Валюта) КАК КурсыВалютДокумента
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютРасчетов
	|		ПО РасчетыСПоставщикамиОстатки.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|	ПО ВременнаяТаблицаДоговорыАвтоЗачета.Договор = РасчетыСПоставщикамиОстатки.Договор
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщикамиОстатки.Организация,
	|	РасчетыСПоставщикамиОстатки.Контрагент,
	|	РасчетыСПоставщикамиОстатки.Договор,
	|	РасчетыСПоставщикамиОстатки.Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ,
	|	РасчетыСПоставщикамиОстатки.ТипРасчетов,
	|	РасчетыСПоставщикамиОстатки.Документ.Дата,
	|	КурсыВалютДокумента.Курс,
	|	КурсыВалютДокумента.Кратность,
	|	КурсыВалютРасчетов.Курс,
	|	КурсыВалютРасчетов.Кратность,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстатки.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПоставщикамиОстатки.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстатки.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА РасчетыСПоставщикамиОстатки.Заказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВременнаяТаблицаДоговорыАвтоЗачета.Договор,
	|	ВременнаяТаблицаДоговорыАвтоЗачета.СуммаПлатежа
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата
	|ИТОГИ
	|	СУММА(СуммаОстаток),
	|	СУММА(СуммаВалОстаток),
	|	СУММА(СуммаВалДокумента),
	|	МАКСИМУМ(СуммаПлатежаАвто)
	|ПО
	|	ДоговорАвто";
		
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Валюта", ВалютаДенежныхСредств);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДоговорыАвтоЗачетаДолгов", ДоговорыАвтоЗачетаДолгов.Выгрузить());
	
	НуженОтборПоДоговорам = УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов();
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Ссылка, ВидОперации);
	Если НуженОтборПоДоговорам
	   И Контрагент.ВестиРасчетыПоДоговорам Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ТекстДоговорОтбор", "И Договор.ВидДоговора В (&СписокВидовДоговоров)");
		Запрос.УстановитьПараметр("СписокВидовДоговоров", СписокВидовДоговоров);
	КонецЕсли;
	
	Если Контрагент.ВестиРасчетыПоДоговорам Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ТекстДоговорАвтозаполнениеОтбор", "И Договор В (&ТаблицаДоговоровАвтоЗачета)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ТекстДоговорДвиженийАвтозаполнениеОтбор", "И ДвиженияДокументаРасчетыСПоставщиками.Договор В (&ТаблицаДоговоровАвтоЗачета)");
		Запрос.УстановитьПараметр("ТаблицаДоговоровАвтоЗачета", ДоговорыАвтоЗачетаДолгов.ВыгрузитьКолонку("Договор"));
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РасшифровкаПлатежа.Очистить();
	
	ВыборкаИтоги = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтоги.Следующий() Цикл
		
		ТекущийДоговор = ВыборкаИтоги.ДоговорАвто;
		
		СтруктураКурсВалютыДоговораПоУмолчанию = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
			Дата,
			Новый Структура("Валюта", ТекущийДоговор.ВалютаРасчетов)
		);
		
		ВыборкаРезультатаЗапроса = ВыборкаИтоги.Выбрать();
		
		СуммаОсталосьРаспределить = ВыборкаИтоги.СуммаПлатежаАвто;
		
		Пока СуммаОсталосьРаспределить > 0 Цикл
			
			Если ВыборкаРезультатаЗапроса.Следующий() Тогда
				
				Если ВыборкаРезультатаЗапроса.СуммаВалОстаток <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = РасшифровкаПлатежа.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
				
				Если ВыборкаРезультатаЗапроса.СуммаВалДокумента <= СуммаОсталосьРаспределить Тогда // сумма остатка меньше или равна чем осталось распределить
					
					НоваяСтрока.СуммаРасчетов = ВыборкаРезультатаЗапроса.СуммаВалОстаток;
					НоваяСтрока.СуммаПлатежа = ВыборкаРезультатаЗапроса.СуммаВалДокумента;
					НоваяСтрока.СтавкаНДС = СтавкаНДСПоУмолчанию;
					НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаПлатежа - (НоваяСтрока.СуммаПлатежа) / ((СтавкаНДСПоУмолчанию.Ставка + 100) / 100);
					СуммаОсталосьРаспределить = СуммаОсталосьРаспределить - ВыборкаРезультатаЗапроса.СуммаВалДокумента;
					
				Иначе // сумма остатка больше чем нужно распределить
					
					НоваяСтрока.СуммаРасчетов = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
						СуммаОсталосьРаспределить,
						ВыборкаРезультатаЗапроса.КурсДенежныхСредств,
						ВыборкаРезультатаЗапроса.Курс,
						ВыборкаРезультатаЗапроса.КратностьДенежныхСредств,
						ВыборкаРезультатаЗапроса.Кратность
					);
					НоваяСтрока.СуммаПлатежа = СуммаОсталосьРаспределить;
					НоваяСтрока.СтавкаНДС = СтавкаНДСПоУмолчанию;
					НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаПлатежа - (НоваяСтрока.СуммаПлатежа) / ((СтавкаНДСПоУмолчанию.Ставка + 100) / 100);
					СуммаОсталосьРаспределить = 0;
					
				КонецЕсли;
				
			Иначе
				
				НоваяСтрока = РасшифровкаПлатежа.Добавить();
				НоваяСтрока.Договор = ТекущийДоговор;
				
				НоваяСтрока.Курс = ?(
					СтруктураКурсВалютыДоговораПоУмолчанию.Курс = 0,
					1,
					СтруктураКурсВалютыДоговораПоУмолчанию.Курс
				);
				НоваяСтрока.Кратность = ?(
					СтруктураКурсВалютыДоговораПоУмолчанию.Кратность = 0,
					1,
					СтруктураКурсВалютыДоговораПоУмолчанию.Кратность
				);
				НоваяСтрока.СуммаРасчетов = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
					СуммаОсталосьРаспределить,
					КурсВалютыДС,
					НоваяСтрока.Курс,
					КратностьВалютыДС,
					НоваяСтрока.Кратность
				);
				НоваяСтрока.ПризнакАванса = Истина;
				НоваяСтрока.СуммаПлатежа = СуммаОсталосьРаспределить;
				НоваяСтрока.СтавкаНДС = СтавкаНДСПоУмолчанию;
				НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаПлатежа - (НоваяСтрока.СуммаПлатежа) / ((СтавкаНДСПоУмолчанию.Ставка + 100) / 100);
				СуммаОсталосьРаспределить = 0;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла; // Пока ВыборкаИтоги.Следующий() Цикл
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		РасшифровкаПлатежа.Добавить();
		РасшифровкаПлатежа[0].СуммаПлатежа = СуммаДокумента;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРасшифровкуПлатежа()

// Обработчик заполнения документа по структуре.
//
// Параметры:
//  ДанныеЗаполнения - Структура.
//
Процедура ЗаполнитьПоСтруктуре(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.Свойство("Основание") Тогда
		
		ЗаполнитьПоСвойствуОснование(ДанныеЗаполнения);
		
	ИначеЕсли ДанныеЗаполнения.Свойство("Документ") Тогда
		
		ЗаполнитьПоСвойствуДокумент(ДанныеЗаполнения);
		
	ИначеЕсли ДанныеЗаполнения.Свойство("ВидОперации") И ТипЗнч(ДанныеЗаполнения.ВидОперации) = Тип("ФиксированныйМассив") Тогда
		
		Для Каждого ТекущийВидОперации Из ДанныеЗаполнения.ВидОперации Цикл
			Если ТипЗнч(ТекущийВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийРасходИзКассы") Тогда
				ДанныеЗаполнения.Вставить("ВидОперации", ТекущийВидОперации);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик заполнения документа по структуре со свойством Основание
//
// Параметры:
//  ДанныеЗаполнения - Структура.
//
Процедура ЗаполнитьПоСвойствуОснование(ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.Свойство("УчитыватьОстатки") 
		И ТипЗнч(ДанныеЗаполнения.Основание)= Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		ЗаполнитьПоЗаказуПоставщикуСУчетомОстатковКОплате(ДанныеЗаполнения.Основание);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения.Основание)= Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		ЗаполнитьПоСчетНаОплатуПоставщикаИНомеруСтроки(ДанныеЗаполнения, ДанныеЗаполнения.НомерСтроки);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения.Основание)= Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		ЗаполнитьПоЗаказПоставщикуИНомеруСтроки(ДанныеЗаполнения.Основание, ДанныеЗаполнения.НомерСтроки);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.РасходДСПлан") Тогда
		
		ЗаполнитьПоРасходДСПлан(ДанныеЗаполнения.Основание, ДанныеЗаполнения.Сумма);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик заполнения документа по структуре со свойством Документ
//
// Параметры:
//  ДанныеЗаполнения - Структура.
//
Процедура ЗаполнитьПоСвойствуДокумент(ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения.Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		ЗаполнитьПоСчетНаОплатуПоставщикаИСумме(ДанныеЗаполнения.Документ, ДанныеЗаполнения.Сумма);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения.Документ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		ЗаполнитьПоЗаказПоставщикуИСумме(ДанныеЗаполнения.Документ, ДанныеЗаполнения.Сумма);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения.Документ) = Тип("ДокументСсылка.РасходДСПлан") Тогда
		
		ЗаполнитьПоРасходДСПлан(ДанныеЗаполнения.Документ, ДанныеЗаполнения.Сумма);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения.Документ) = Тип("ДокументСсылка.ПеремещениеДСПлан") Тогда
		
		ЗаполнитьПоПеремещениеДСПлан(ДанныеЗаполнения.Документ, ДанныеЗаполнения.Сумма);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения.Документ) = Тип("ДокументСсылка.НачисленияПоКредитамИЗаймам") Тогда
		
		ЗаполнитьПоНачисленияПоКредитамИЗаймам(ДанныеЗаполнения); // Здесь в параметре передаётся структура ДанныеЗаполнения
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик заполнения на основании документа РасходДСПлан.
//
// Параметры:
//	ДокументСсылкаРасходДСПлан - ДокументСсылка.РасходДСПлан.
//	
Процедура ЗаполнитьПоРасходДСПлан(ДокументСсылкаРасходДСПлан, Сумма = Неопределено) Экспорт
	
	Если ДокументСсылкаРасходДСПлан.СтатусУтвержденияПлатежа = Перечисления.СтатусыУтвержденияПлатежей.НеУтвержден Тогда
		ВызватьИсключение НСтр("ru = 'Нельзя ввести расход денег на основании неутвержденной заявки!'");
	КонецЕсли;
	Если ДокументСсылкаРасходДСПлан.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
		ВызватьИсключение НСтр("ru = 'Нельзя ввести расход денег. В заявке указан неверный способ оплаты (тип денежных средств)!'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументСсылкаРасходДСПлан.ДокументОснование) Тогда
		
		ЗаполненПоОснованиюЗаявкиНаРасход = Истина;
		
		Если ТипЗнч(ДокументСсылкаРасходДСПлан.ДокументОснование) = Тип("ДокументСсылка.ДоговорКредитаИЗайма") Тогда
			ЗаполнитьПоДоговоруКредитаЗайма(ДокументСсылкаРасходДСПлан.ДокументОснование);
		ИначеЕсли ТипЗнч(ДокументСсылкаРасходДСПлан.ДокументОснование) = Тип("ДокументСсылка.ПлатежнаяВедомость") Тогда
			ЗаполнитьПоПлатежнаяВедомость(ДокументСсылкаРасходДСПлан.ДокументОснование);
		ИначеЕсли ТипЗнч(ДокументСсылкаРасходДСПлан.ДокументОснование) = Тип("ДокументСсылка.НачислениеНалогов") Тогда
			ЗаполнитьПоНачислениеНалогов(ДокументСсылкаРасходДСПлан.ДокументОснование);
		ИначеЕсли ТипЗнч(ДокументСсылкаРасходДСПлан.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			ЗаполнитьПоАвансовыйОтчет(ДокументСсылкаРасходДСПлан.ДокументОснование);
			Если НЕ ЗначениеЗаполнено(Документ) Тогда
				Документ = ДокументСсылкаРасходДСПлан.ДокументОснование
			КонецЕсли;
		Иначе
			ЗаполненПоОснованиюЗаявкиНаРасход = Ложь;
		КонецЕсли;
		
		Если ЗаполненПоОснованиюЗаявкиНаРасход Тогда
			Статья = ДокументСсылкаРасходДСПлан.СтатьяДвиженияДенежныхСредств;
			ДокументОснование = ДокументСсылкаРасходДСПлан;
			СуммаДокумента = ДокументСсылкаРасходДСПлан.СуммаДокумента;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос( Справочники.СтавкиНДС.ПолучитьТекстЗапросаСозданияВТСтавкиНДС(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса())) +
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(&Ссылка) КАК Основание,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.Поставщику) КАК ВидОперации,
	|	&Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.ДокументОснование КАК ДокументОснованиеЗаявки,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.СтатьяДвиженияДенежныхСредств КАК Статья,
	|	ТаблицаДокумента.Касса КАК Касса,
	|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДенежныхСредств,
	|	ТаблицаДокумента.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.Договор КАК Договор,
	|	ТаблицаДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ТаблицаДокумента.СуммаДокумента КАК СуммаПлатежа,
	|	ВТСтавкиНДС.СтавкаНДС КАК СтавкаНДС,
	|	ЕСТЬNULL(КурсыВалютРасчетов.Курс, 1) КАК Курс,
	|	ЕСТЬNULL(КурсыВалютРасчетов.Кратность, 1) КАК Кратность,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.СуммаДокумента * ВЫБОР
	|			КОГДА ТаблицаДокумента.ВалютаДокумента <> ТаблицаДокумента.Договор.ВалютаРасчетов
	|					И КурсыВалютРасчетов.Курс <> 0
	|					И КурсыВалютДокумента.Кратность <> 0
	|				ТОГДА КурсыВалютДокумента.Курс * КурсыВалютРасчетов.Кратность / (ЕСТЬNULL(КурсыВалютРасчетов.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1))
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРасчетов,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.СуммаДокумента * (1 - 1 / ((ЕСТЬNULL(ВТСтавкиНДС.СтавкаНДС.Ставка, 0) + 100) / 100)) КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	ТаблицаДокумента.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС
	|ИЗ
	|	Документ.РасходДСПлан КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютРасчетов
	|		ПО ТаблицаДокумента.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютДокумента
	|		ПО ТаблицаДокумента.ВалютаДокумента = КурсыВалютДокумента.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДС
	|		ПО (ТаблицаДокумента.Организация.ВидСтавкиНДСПоУмолчанию  = ВТСтавкиНДС.ВидСтавкиНДС)
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка");
	
	Если Сумма <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаДокумента.СуммаДокумента", "&Сумма");
		Запрос.УстановитьПараметр("Сумма", Сумма);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаРасходДСПлан);
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	Если ЗначениеЗаполнено(Выборка.ДокументОснованиеЗаявки) 
		И ТипЗнч(Выборка.ДокументОснованиеЗаявки) = Тип("ДокументСсылка.НачислениеЗарплаты") Тогда
		
		ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") Тогда
		ЭтотОбъект.Касса = Справочники.Кассы.ПолучитьКассуСУчетомПравДоступаНаУровнеЗаписей(Выборка.Касса);
	КонецЕсли;
	
	НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Организация, , Дата);
	
	РасшифровкаПлатежа.Очистить();
	НоваяСтрока = РасшифровкаПлатежа.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	НоваяСтрока.ПризнакАванса = Истина;
	НоваяСтрока.ДокументПланирования = ДокументСсылкаРасходДСПлан;
	
	Если ЗначениеЗаполнено(ДокументСсылкаРасходДСПлан.ДокументОснование)
		И ТипЗнч(ДокументСсылкаРасходДСПлан.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику")
		И Контрагент.ВестиРасчетыПоЗаказам Тогда
		
		НоваяСтрока.Заказ = ДокументСсылкаРасходДСПлан.ДокументОснование;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.ДокументОснованиеЗаявки)
		И ТипЗнч(Выборка.ДокументОснованиеЗаявки) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")
		И Контрагент.ВестиУчетОплатыПоСчетам Тогда
		
		НоваяСтрока.СчетНаОплату = Выборка.ДокументОснованиеЗаявки;
		
	КонецЕсли;
	
	ЗаполнитьПриложение(ДокументСсылкаРасходДСПлан);
	
КонецПроцедуры // ЗаполнитьПоРасходДСПлан()

// Обработчик заполнения на основании документа РасходДСПлан.
//
// Параметры:
//	ДокументСсылкаРасходДСПлан - ДокументСсылка.РасходДСПлан.
//	
Процедура ЗаполнитьПоАвансовыйОтчет(ДокументСсылкаАвансовыйОтчет) Экспорт
	
	Запрос = Новый Запрос( Справочники.СтавкиНДС.ПолучитьТекстЗапросаСозданияВТСтавкиНДС(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса())) +
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(&Ссылка) КАК Основание,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.Подотчетнику) КАК ВидОперации,
	|	&Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.ДокументОснование КАК ДокументОснованиеЗаявки,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.Прочее) КАК Статья,
	|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДенежныхСредств,
	|	ТаблицаДокумента.Сотрудник КАК Подотчетник,
	|	-РасчетыСПодотчетникамиОстатки.СуммаВалОстаток КАК СуммаДокумента,
	|	-РасчетыСПодотчетникамиОстатки.СуммаВалОстаток КАК СуммаПлатежа,
	|	ВТСтавкиНДС.СтавкаНДС КАК СтавкаНДС,
	|	ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) КАК Курс,
	|	ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1) КАК Кратность,
	|	ТаблицаДокумента.СуммаДокумента КАК СуммаРасчетов,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.СуммаДокумента * (1 - 1 / ((ЕСТЬNULL(ВТСтавкиНДС.СтавкаНДС.Ставка, 0) + 100) / 100)) КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	РасчетыСПодотчетникамиОстатки.СуммаВалОстаток
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютДокумента
	|		ПО ТаблицаДокумента.ВалютаДокумента = КурсыВалютДокумента.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПодотчетниками.Остатки(, Документ = &Ссылка) КАК РасчетыСПодотчетникамиОстатки
	|		ПО (РасчетыСПодотчетникамиОстатки.Документ = ТаблицаДокумента.Ссылка)
	|			И ТаблицаДокумента.Сотрудник = РасчетыСПодотчетникамиОстатки.Сотрудник
	|			И ТаблицаДокумента.ВалютаДокумента = РасчетыСПодотчетникамиОстатки.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДС
	|		ПО (ТаблицаДокумента.Организация.ВидСтавкиНДСПоУмолчанию  = ВТСтавкиНДС.ВидСтавкиНДС)
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаАвансовыйОтчет);
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	ЭтотОбъект.Касса = Справочники.Кассы.ПолучитьКассуПоУмолчанию(ЭтотОбъект.Организация);
	
	НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Организация, , Дата);
	
	РасшифровкаПлатежа.Очистить();
	НоваяСтрока = РасшифровкаПлатежа.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	НоваяСтрока.ПризнакАванса = Истина;
	
	ЗаполнитьПриложение(ДокументСсылкаАвансовыйОтчет);
	
КонецПроцедуры // ЗаполнитьПоРасходДСПлан()

// Обработчик заполнения на основании документа ПеремещениеДСПлан.
//
// Параметры:
//	ДокументСсылкаПеремещениеДСПлан - ДокументСсылка.ПеремещениеДСПлан.
//	
Процедура ЗаполнитьПоПеремещениеДСПлан(ДокументСсылкаПеремещениеДСПлан, Сумма = Неопределено) Экспорт
	
	Если ДокументСсылкаПеремещениеДСПлан.СтатусУтвержденияПлатежа = Перечисления.СтатусыУтвержденияПлатежей.НеУтвержден Тогда
		ВызватьИсключение НСтр("ru = 'Нельзя ввести перемещение денег на основании неутвержденного планового документа!'");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаПеремещениеДСПлан);

	// Заполним данные шапки документа.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(&Ссылка) КАК Основание,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные)
	|				И ТаблицаДокумента.ТипДенежныхСредствПолучатель = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.ВзносНаличнымиВБанк)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.Прочее)
	|	КОНЕЦ КАК ВидОперации,
	|	&Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС) КАК НалогообложениеНДС,
	|	ТаблицаДокумента.СтатьяДвиженияДенежныхСредств КАК Статья,
	|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДенежныхСредств,
	|	ТаблицаДокумента.Касса КАК Касса,
	|	ТаблицаДокумента.БанковскийСчетПолучатель КАК СчетОрганизации,
	|	ТаблицаДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ТаблицаДокумента.СуммаДокумента КАК СуммаПлатежа,
	|	ТаблицаДокумента.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС
	|ИЗ
	|	Документ.ПеремещениеДСПлан КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	Если ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") Тогда
		ЭтотОбъект.Касса = Справочники.Кассы.ПолучитьКассуСУчетомПравДоступаНаУровнеЗаписей(Выборка.Касса);
	КонецЕсли;
	НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Организация, , Дата);
	Если Сумма <> Неопределено Тогда
		ЭтотОбъект.СуммаДокумента = Сумма;
	КонецЕсли;
	РасшифровкаПлатежа.Очистить();
	НоваяСтрока = РасшифровкаПлатежа.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	НоваяСтрока.ДокументПланирования = ДокументСсылкаПеремещениеДСПлан;
	
	ЗаполнитьПриложение(ДокументСсылкаПеремещениеДСПлан);
	
КонецПроцедуры // ЗаполнитьПоПеремещениеДСПлан()

// Обработчик заполнения на основании документа ПриходнаяНакладная.
//
// Параметры:
//	ДокументСсылкаПриходнаяНакладная - ДокументСсылка.ПриходнаяНакладная.
//	
Процедура ЗаполнитьПоПриходнаяНакладная(ДокументСсылкаПриходнаяНакладная) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаПриходнаяНакладная);
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("СсылкаНаТекущийДокумент", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.Покупателю)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.Поставщику)
	|	КОНЕЦ КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам)
	|	КОНЕЦ КАК Статья,
	|	&Ссылка КАК ДокументОснование,
	|	ШапкаДокумента.Организация КАК Организация,
	|	ШапкаДокумента.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ШапкаДокумента.Организация.КассаПоУмолчанию КАК Касса,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(&Ссылка) КАК Основание,
	|	ШапкаДокумента.Контрагент КАК Контрагент,
	|	ШапкаДокумента.ВалютаДокумента КАК ВалютаДенежныхСредств,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА ВЫБОР
	|					КОГДА ШапкаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|						ТОГДА ВложенныйЗапрос.ЗаказПокупателя
	|					ИНАЧЕ ВложенныйЗапрос.ЗаказПоставщику
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ШапкаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|					ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК Заказ,
	|	ШапкаДокумента.Договор КАК Договор,
	|	ЛОЖЬ КАК ПризнакАванса,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(ВложенныйЗапрос.ДокументОснование) = ТИП(Документ.РасходнаяНакладная)
	|							И ВложенныйЗапрос.ДокументОснование <> ЗНАЧЕНИЕ(Документ.РасходнаяНакладная.ПустаяСсылка)
	|						ТОГДА ВложенныйЗапрос.ДокументОснование
	|					КОГДА ТИПЗНАЧЕНИЯ(ВложенныйЗапрос.ДокументОснование) = ТИП(Документ.ЗаказПокупателя)
	|							И ВложенныйЗапрос.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|							И ВложенныйЗапрос.ДокументОснование.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|						ТОГДА ВложенныйЗапрос.ДокументОснование
	|					ИНАЧЕ ВложенныйЗапрос.Документ
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.СуммаРасчетов, 0)) КАК СуммаРасчетов,
	|	ВложенныйЗапрос.Курс КАК Курс,
	|	ВложенныйЗапрос.Кратность КАК Кратность,
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.СуммаПлатежа, 0)) КАК СуммаПлатежа,
	|	ВложенныйЗапрос.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.СуммаНДС, 0)) КАК СуммаНДС
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ШапкаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|						ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Заказ) = ТИП(Документ.ЗаказПокупателя)
	|					ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|				ИНАЧЕ ТаблицаДокумента.Заказ
	|			КОНЕЦ КАК ЗаказПоставщику,
	|			ВЫБОР
	|				КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|						ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Заказ) = ТИП(Документ.ЗаказПоставщику)
	|					ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				ИНАЧЕ ТаблицаДокумента.Заказ
	|			КОНЕЦ КАК ЗаказПокупателя,
	|			ТаблицаДокумента.Ссылка.ДокументОснование КАК ДокументОснование,
	|			&Ссылка КАК Документ,
	|			ВЫРАЗИТЬ(ТаблицаДокумента.Всего * ВЫБОР
	|					КОГДА ТаблицаДокумента.Ссылка.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|						ТОГДА КурсыРегВалют.Курс * ТаблицаДокумента.Ссылка.Кратность / (ТаблицаДокумента.Ссылка.Курс * ЕСТЬNULL(КурсыРегВалют.Кратность, 1))
	|					ИНАЧЕ 1
	|				КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРасчетов,
	|			ВЫБОР
	|				КОГДА ТаблицаДокумента.Ссылка.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|					ТОГДА ТаблицаДокумента.Ссылка.Курс
	|				ИНАЧЕ КурсыВалютыРасчетов.Курс
	|			КОНЕЦ КАК Курс,
	|			ВЫБОР
	|				КОГДА ТаблицаДокумента.Ссылка.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|					ТОГДА ТаблицаДокумента.Ссылка.Кратность
	|				ИНАЧЕ КурсыВалютыРасчетов.Кратность
	|			КОНЕЦ КАК Кратность,
	|			ТаблицаДокумента.Всего КАК СуммаПлатежа,
	|			ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|			ТаблицаДокумента.СуммаНДС КАК СуммаНДС
	|		ИЗ
	|			Документ.ПриходнаяНакладная.Запасы КАК ТаблицаДокумента
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|						&Дата,
	|						Валюта В
	|							(ВЫБРАТЬ
	|								КонстантаНациональнаяВалюта.Значение
	|							ИЗ
	|								Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта)) КАК КурсыРегВалют
	|				ПО (ИСТИНА)
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыРасчетов
	|				ПО ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов = КурсыВалютыРасчетов.Валюта,
	|			Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта
	|		ГДЕ
	|			ТаблицаДокумента.Ссылка = &Ссылка
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаДокумента.ЗаказПоставщику,
	|			ТаблицаДокумента.Заказ,
	|			ТаблицаДокумента.Ссылка.ДокументОснование,
	|			&Ссылка,
	|			ВЫРАЗИТЬ(ТаблицаДокумента.Всего * ВЫБОР
	|					КОГДА ТаблицаДокумента.Ссылка.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|						ТОГДА КурсыРегВалют.Курс * ТаблицаДокумента.Ссылка.Кратность / (ТаблицаДокумента.Ссылка.Курс * ЕСТЬNULL(КурсыРегВалют.Кратность, 1))
	|					ИНАЧЕ 1
	|				КОНЕЦ КАК ЧИСЛО(15, 2)),
	|			ВЫБОР
	|				КОГДА ТаблицаДокумента.Ссылка.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|					ТОГДА ТаблицаДокумента.Ссылка.Курс
	|				ИНАЧЕ КурсыВалютыРасчетов.Курс
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА ТаблицаДокумента.Ссылка.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|					ТОГДА ТаблицаДокумента.Ссылка.Кратность
	|				ИНАЧЕ КурсыВалютыРасчетов.Кратность
	|			КОНЕЦ,
	|			ТаблицаДокумента.Всего,
	|			ТаблицаДокумента.СтавкаНДС,
	|			ТаблицаДокумента.СуммаНДС
	|		ИЗ
	|			Документ.ПриходнаяНакладная.Расходы КАК ТаблицаДокумента
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|						&Дата,
	|						Валюта В
	|							(ВЫБРАТЬ
	|								КонстантаНациональнаяВалюта.Значение
	|							ИЗ
	|								Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта)) КАК КурсыРегВалют
	|				ПО (ИСТИНА)
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыРасчетов
	|				ПО ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов = КурсыВалютыРасчетов.Валюта,
	|			Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта
	|		ГДЕ
	|			ТаблицаДокумента.Ссылка = &Ссылка) КАК ВложенныйЗапрос
	|		ПО ШапкаДокумента.Ссылка = ВложенныйЗапрос.Документ
	|ГДЕ
	|	ШапкаДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ШапкаДокумента.Организация,
	|	ШапкаДокумента.НалогообложениеНДС,
	|	ШапкаДокумента.Организация.КассаПоУмолчанию,
	|	ШапкаДокумента.Контрагент,
	|	ШапкаДокумента.ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА ВЫБОР
	|					КОГДА ШапкаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|						ТОГДА ВложенныйЗапрос.ЗаказПокупателя
	|					ИНАЧЕ ВложенныйЗапрос.ЗаказПоставщику
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ШапкаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|					ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ШапкаДокумента.Договор,
	|	ВложенныйЗапрос.Документ,
	|	ВложенныйЗапрос.Курс,
	|	ВложенныйЗапрос.Кратность,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.Покупателю)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.Поставщику)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(ВложенныйЗапрос.ДокументОснование) = ТИП(Документ.РасходнаяНакладная)
	|							И ВложенныйЗапрос.ДокументОснование <> ЗНАЧЕНИЕ(Документ.РасходнаяНакладная.ПустаяСсылка)
	|						ТОГДА ВложенныйЗапрос.ДокументОснование
	|					КОГДА ТИПЗНАЧЕНИЯ(ВложенныйЗапрос.ДокументОснование) = ТИП(Документ.ЗаказПокупателя)
	|							И ВложенныйЗапрос.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|							И ВложенныйЗапрос.ДокументОснование.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|						ТОГДА ВложенныйЗапрос.ДокументОснование
	|					ИНАЧЕ ВложенныйЗапрос.Документ
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОплатаДокументов.СуммаАванса + ОплатаДокументов.СуммаОплаты КАК ОплаченоВалДок
	|ИЗ
	|	РегистрНакопления.ОплатаДокументов КАК ОплатаДокументов
	|ГДЕ
	|	ОплатаДокументов.Документ = &Ссылка
	|	И ОплатаДокументов.Регистратор <> &СсылкаНаТекущийДокумент
	|	И ОплатаДокументов.СуммаАванса + ОплатаДокументов.СуммаОплаты <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходДСПлан.Ссылка КАК ДокументПланирования
	|ИЗ
	|	Документ.РасходДСПлан КАК РасходДСПлан
	|ГДЕ
	|	РасходДСПлан.ДокументОснование = &Ссылка
	|	И РасходДСПлан.Проведен";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатЗапроса = МассивРезультатов[0];
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДанных = РасчетыСлужебный.УчестьОплатуДругимиДокументами(МассивРезультатов, 1);
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	ЭтотОбъект.Касса = Справочники.Кассы.ПолучитьКассуПоУмолчанию(ЭтотОбъект.Организация);
	РасшифровкаПлатежа.Очистить();
	
	// Попробуем найти планируемое поступление, созданное по тому же документу основанию
	ДокументПланирования = Документы.РасходДСПлан.ПустаяСсылка();
	Если ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь") И НЕ МассивРезультатов[2].Пустой() Тогда
		
		ВыборкаПланирование = МассивРезультатов[2].Выбрать();
		Если ВыборкаПланирование.Количество() = 1 И ВыборкаПланирование.Следующий() Тогда
			ДокументПланирования = ВыборкаПланирование.ДокументПланирования;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из ТаблицаДанных Цикл
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.ДокументПланирования = ДокументПланирования;
	КонецЦикла;
	
	ЭтотОбъект.СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ЗаполнитьПриложение(ДокументСсылкаПриходнаяНакладная);
	
КонецПроцедуры // ЗаполнитьПоПриходнаяНакладная()

// Обработчик заполнения на основании документа ПередачаТоваровМеждуОрганизациями.
//
// Параметры:
//	ДокументСсылкаПриходнаяНакладная - ДокументСсылка.ПриходнаяНакладная.
//	
Процедура ЗаполнитьПоПередачаТоваровМеждуОрганизациями(ДокументСсылкаПередачаТоваровМеждуОрганизациями) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаПередачаТоваровМеждуОрганизациями);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылкаПередачаТоваровМеждуОрганизациями, "ОрганизацияПолучатель"));
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("СсылкаНаТекущийДокумент", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.НашейОрганизации) КАК ВидОперации,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам) КАК Статья,
	|	&Ссылка КАК ДокументОснование,
	|	ШапкаДокумента.ОрганизацияПолучатель КАК Организация,
	|	ШапкаДокумента.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ШапкаДокумента.ОрганизацияПолучатель.КассаПоУмолчанию КАК Касса,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(&Ссылка) КАК Основание,
	|	ШапкаДокумента.КонтрагентВладелец КАК Контрагент,
	|	ШапкаДокумента.ВалютаДокумента КАК ВалютаДенежныхСредств,
	|	 ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка) КАК Заказ,
	|	ШапкаДокумента.Договор КАК Договор,
	|	ЛОЖЬ КАК ПризнакАванса,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.КонтрагентВладелец.ВестиРасчетыПоДокументам
	|			ТОГДА  ВложенныйЗапрос.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.СуммаРасчетов, 0)) КАК СуммаРасчетов,
	|	ВложенныйЗапрос.Курс КАК Курс,
	|	ВложенныйЗапрос.Кратность КАК Кратность,
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.СуммаПлатежа, 0)) КАК СуммаПлатежа,
	|	ВложенныйЗапрос.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.СуммаНДС, 0)) КАК СуммаНДС
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ШапкаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка) КАК ЗаказПоставщику,
	|			ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя,
	|			ТаблицаДокумента.Ссылка.ДокументОснование КАК ДокументОснование,
	|			&Ссылка КАК Документ,
	|			ВЫРАЗИТЬ(ТаблицаДокумента.Всего * ВЫБОР
	|					КОГДА ТаблицаДокумента.Ссылка.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|						ТОГДА КурсыРегВалют.Курс * ТаблицаДокумента.Ссылка.Кратность / (ТаблицаДокумента.Ссылка.Курс * ЕСТЬNULL(КурсыРегВалют.Кратность, 1))
	|					ИНАЧЕ 1
	|				КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРасчетов,
	|			ВЫБОР
	|				КОГДА ТаблицаДокумента.Ссылка.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|					ТОГДА ТаблицаДокумента.Ссылка.Курс
	|				ИНАЧЕ КурсыВалютыРасчетов.Курс
	|			КОНЕЦ КАК Курс,
	|			ВЫБОР
	|				КОГДА ТаблицаДокумента.Ссылка.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|					ТОГДА ТаблицаДокумента.Ссылка.Кратность
	|				ИНАЧЕ КурсыВалютыРасчетов.Кратность
	|			КОНЕЦ КАК Кратность,
	|			ТаблицаДокумента.Всего КАК СуммаПлатежа,
	|			ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|			ТаблицаДокумента.СуммаНДС КАК СуммаНДС
	|		ИЗ
	|			Документ.ПередачаТоваровМеждуОрганизациями.Запасы КАК ТаблицаДокумента
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|						&Дата,
	|						Валюта В
	|							(ВЫБРАТЬ
	|								КонстантаНациональнаяВалюта.Значение
	|							ИЗ
	|								Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта)) КАК КурсыРегВалют
	|				ПО (ИСТИНА)
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыРасчетов
	|				ПО ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов = КурсыВалютыРасчетов.Валюта,
	|			Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта
	|		ГДЕ
	|			ТаблицаДокумента.Ссылка = &Ссылка ) КАК ВложенныйЗапрос
	|		ПО ШапкаДокумента.Ссылка = ВложенныйЗапрос.Документ
	|ГДЕ
	|	ШапкаДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ШапкаДокумента.ОрганизацияПолучатель,
	|	ШапкаДокумента.НалогообложениеНДС,
	|	ШапкаДокумента.ОрганизацияПолучатель.КассаПоУмолчанию,
	|	ШапкаДокумента.КонтрагентВладелец,
	|	ШапкаДокумента.ВалютаДокумента,
	|	ШапкаДокумента.Договор,
	|	ВложенныйЗапрос.Документ,
	|	ВложенныйЗапрос.Курс,
	|	ВложенныйЗапрос.Кратность,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.КонтрагентВладелец.ВестиРасчетыПоДокументам
	|			ТОГДА  ВложенныйЗапрос.Документ
	|				
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОплатаДокументов.СуммаАванса + ОплатаДокументов.СуммаОплаты КАК ОплаченоВалДок
	|ИЗ
	|	РегистрНакопления.ОплатаДокументов КАК ОплатаДокументов
	|ГДЕ
	|	ОплатаДокументов.Документ = &Ссылка
	|	И ОплатаДокументов.Регистратор <> &СсылкаНаТекущийДокумент
	|	И ОплатаДокументов.Организация = &Организация
	|	И ОплатаДокументов.СуммаАванса + ОплатаДокументов.СуммаОплаты <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходДСПлан.Ссылка КАК ДокументПланирования
	|ИЗ
	|	Документ.РасходДСПлан КАК РасходДСПлан
	|ГДЕ
	|	РасходДСПлан.ДокументОснование = &Ссылка
	|	И РасходДСПлан.Проведен";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатЗапроса = МассивРезультатов[0];
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДанных = РасчетыСлужебный.УчестьОплатуДругимиДокументами(МассивРезультатов, 1);
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	ЭтотОбъект.Касса = Справочники.Кассы.ПолучитьКассуПоУмолчанию(ЭтотОбъект.Организация);
	РасшифровкаПлатежа.Очистить();
	
	// Попробуем найти планируемое поступление, созданное по тому же документу основанию
	ДокументПланирования = Документы.РасходДСПлан.ПустаяСсылка();
	Если ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь") И НЕ МассивРезультатов[2].Пустой() Тогда
		
		ВыборкаПланирование = МассивРезультатов[2].Выбрать();
		Если ВыборкаПланирование.Количество() = 1 И ВыборкаПланирование.Следующий() Тогда
			ДокументПланирования = ВыборкаПланирование.ДокументПланирования;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из ТаблицаДанных Цикл
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.ДокументПланирования = ДокументПланирования;
	КонецЦикла;
	
	ЭтотОбъект.СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ЗаполнитьПриложение(ДокументСсылкаПередачаТоваровМеждуОрганизациями);
	
КонецПроцедуры // ЗаполнитьПоПриходнаяНакладная()

// Обработчик заполнение на основании документа ДополнительныеРасходы.
//
// Параметры:
//	ДокументСсылкаДополнительныеРасходы - ДокументСсылка.ДополнительныеРасходы.
//	
Процедура ЗаполнитьПоДополнительныеРасходы(ДокументСсылкаДополнительныеРасходы) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаДополнительныеРасходы);
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШапкаДокумента.Организация КАК Организация,
	|	ШапкаДокумента.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.Поставщику) КАК ВидОперации,
	|	&Ссылка КАК ДокументОснование,
	|	ШапкаДокумента.Организация.КассаПоУмолчанию КАК Касса,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(&Ссылка) КАК Основание,
	|	ШапкаДокумента.Контрагент КАК Контрагент,
	|	ШапкаДокумента.ВалютаДокумента КАК ВалютаДенежныхСредств,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА ШапкаДокумента.ЗаказПоставщику
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|	КОНЕЦ КАК Заказ,
	|	ШапкаДокумента.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	СУММА(ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаДокумента.Всего * ВЫБОР
	|					КОГДА ШапкаДокумента.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|						ТОГДА КурсыРегВалют.Курс * ШапкаДокумента.Кратность / (ШапкаДокумента.Курс * ЕСТЬNULL(КурсыРегВалют.Кратность, 1))
	|					ИНАЧЕ 1
	|				КОНЕЦ КАК ЧИСЛО(15, 2)), 0)) КАК СуммаРасчетов,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|			ТОГДА ШапкаДокумента.Курс
	|		ИНАЧЕ КурсыВалютыРасчетов.Курс
	|	КОНЕЦ КАК Курс,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|			ТОГДА ШапкаДокумента.Кратность
	|		ИНАЧЕ КурсыВалютыРасчетов.Кратность
	|	КОНЕЦ КАК Кратность,
	|	СУММА(ЕСТЬNULL(ТаблицаДокумента.Всего, 0)) КАК СуммаПлатежа,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ЕСТЬNULL(ТаблицаДокумента.СуммаНДС, 0)) КАК СуммаНДС
	|ИЗ
	|	Документ.ДополнительныеРасходы КАК ШапкаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДополнительныеРасходы.Расходы КАК ТаблицаДокумента
	|		ПО ШапкаДокумента.Ссылка = ТаблицаДокумента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&Дата,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						КонстантаНациональнаяВалюта.Значение
	|					ИЗ
	|						Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта)) КАК КурсыРегВалют
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыРасчетов
	|		ПО ШапкаДокумента.Договор.ВалютаРасчетов = КурсыВалютыРасчетов.Валюта,
	|	Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта
	|ГДЕ
	|	ШапкаДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ШапкаДокумента.Организация,
	|	ШапкаДокумента.НалогообложениеНДС,
	|	ШапкаДокумента.Организация.КассаПоУмолчанию,
	|	ШапкаДокумента.Контрагент,
	|	ШапкаДокумента.ВалютаДокумента,
	|	ШапкаДокумента.ЗаказПоставщику,
	|	ШапкаДокумента.Договор,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|			ТОГДА ШапкаДокумента.Курс
	|		ИНАЧЕ КурсыВалютыРасчетов.Курс
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|			ТОГДА ШапкаДокумента.Кратность
	|		ИНАЧЕ КурсыВалютыРасчетов.Кратность
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА ШапкаДокумента.ЗаказПоставщику
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	ЭтотОбъект.Касса = Справочники.Кассы.ПолучитьКассуПоУмолчанию(ЭтотОбъект.Организация);
	РасшифровкаПлатежа.Очистить();
	НоваяСтрока = РасшифровкаПлатежа.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	ЭтотОбъект.СуммаДокумента = Выборка.СуммаПлатежа;
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ЭтотОбъект.СуммаДокумента = ЭтотОбъект.СуммаДокумента + Выборка.СуммаПлатежа;
	КонецЦикла;
	
	ЗаполнитьПриложение(ДокументСсылкаДополнительныеРасходы);
	
КонецПроцедуры // ЗаполнитьПоДополнительныеРасходы()

// Обработчик заполнения на основании документа ОтчетКомиссионера.
//
// Параметры:
//	ДокументСсылкаОтчетКомиссионера - ДокументСсылка.ОтчетКомиссионера.
//	
Процедура ЗаполнитьПоОтчетКомиссионера(ДокументСсылкаОтчетКомиссионера) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаОтчетКомиссионера);
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШапкаДокумента.Организация КАК Организация,
	|	ШапкаДокумента.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.Покупателю) КАК ВидОперации,
	|	&Ссылка КАК ДокументОснование,
	|	ШапкаДокумента.Организация.КассаПоУмолчанию КАК Касса,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(&Ссылка) КАК Основание,
	|	ШапкаДокумента.Контрагент КАК Контрагент,
	|	ШапкаДокумента.ВалютаДокумента КАК ВалютаДенежныхСредств,
	|	ШапкаДокумента.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА ТаблицаДокумента.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК Заказ,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	СУММА(ВЫБОР
	|			КОГДА ШапкаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионера)
	|				ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|								КОГДА ШапкаДокумента.СуммаВключаетНДС
	|									ТОГДА ТаблицаДокумента.СуммаВознаграждения
	|								ИНАЧЕ ТаблицаДокумента.СуммаВознаграждения + ТаблицаДокумента.СуммаНДСВознаграждения
	|							КОНЕЦ * ВЫБОР
	|								КОГДА ШапкаДокумента.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|									ТОГДА КурсыРегВалют.Курс * ШапкаДокумента.Кратность / (ШапкаДокумента.Курс * ЕСТЬNULL(КурсыРегВалют.Кратность, 1))
	|								ИНАЧЕ 1
	|							КОНЕЦ КАК ЧИСЛО(15, 2)), 0)
	|			ИНАЧЕ ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|							КОГДА ШапкаДокумента.СуммаВключаетНДС
	|								ТОГДА ТаблицаДокумента.Сумма - ТаблицаДокумента.СуммаВознаграждения
	|							ИНАЧЕ ТаблицаДокумента.Сумма - (ТаблицаДокумента.СуммаВознаграждения + ТаблицаДокумента.СуммаНДСВознаграждения)
	|						КОНЕЦ * ВЫБОР
	|							КОГДА ШапкаДокумента.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|								ТОГДА КурсыРегВалют.Курс * ШапкаДокумента.Кратность / (ШапкаДокумента.Курс * ЕСТЬNULL(КурсыРегВалют.Кратность, 1))
	|							ИНАЧЕ 1
	|						КОНЕЦ КАК ЧИСЛО(15, 2)), 0)
	|		КОНЕЦ) КАК СуммаРасчетов,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|			ТОГДА ШапкаДокумента.Курс
	|		ИНАЧЕ КурсыВалютыРасчетов.Курс
	|	КОНЕЦ КАК Курс,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|			ТОГДА ШапкаДокумента.Кратность
	|		ИНАЧЕ КурсыВалютыРасчетов.Кратность
	|	КОНЕЦ КАК Кратность,
	|	СУММА(ВЫБОР
	|			КОГДА ШапкаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионера)
	|				ТОГДА ЕСТЬNULL(ВЫБОР
	|							КОГДА ШапкаДокумента.СуммаВключаетНДС
	|								ТОГДА ТаблицаДокумента.СуммаВознаграждения
	|							ИНАЧЕ ТаблицаДокумента.СуммаВознаграждения + ТаблицаДокумента.СуммаНДСВознаграждения
	|						КОНЕЦ, 0)
	|			ИНАЧЕ ЕСТЬNULL(ВЫБОР
	|						КОГДА ШапкаДокумента.СуммаВключаетНДС
	|							ТОГДА ТаблицаДокумента.Сумма - ТаблицаДокумента.СуммаВознаграждения
	|						ИНАЧЕ ТаблицаДокумента.Сумма - (ТаблицаДокумента.СуммаВознаграждения + ТаблицаДокумента.СуммаНДСВознаграждения)
	|					КОНЕЦ, 0)
	|		КОНЕЦ) КАК СуммаПлатежа,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ВЫБОР
	|			КОГДА ШапкаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионера)
	|				ТОГДА ЕСТЬNULL(ТаблицаДокумента.СуммаНДСВознаграждения, 0)
	|			ИНАЧЕ ЕСТЬNULL(ТаблицаДокумента.СуммаНДС, 0) - ЕСТЬNULL(ТаблицаДокумента.СуммаНДСВознаграждения, 0)
	|		КОНЕЦ) КАК СуммаНДС
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ШапкаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионера.Запасы КАК ТаблицаДокумента
	|		ПО ШапкаДокумента.Ссылка = ТаблицаДокумента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&Дата,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						КонстантаНациональнаяВалюта.Значение
	|					ИЗ
	|						Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта)) КАК КурсыРегВалют
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыРасчетов
	|		ПО ШапкаДокумента.Договор.ВалютаРасчетов = КурсыВалютыРасчетов.Валюта,
	|	Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта
	|ГДЕ
	|	ШапкаДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ШапкаДокумента.Организация,
	|	ШапкаДокумента.НалогообложениеНДС,
	|	ШапкаДокумента.Организация.КассаПоУмолчанию,
	|	ШапкаДокумента.Контрагент,
	|	ШапкаДокумента.ВалютаДокумента,
	|	ТаблицаДокумента.ЗаказПокупателя,
	|	ШапкаДокумента.Договор,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|			ТОГДА ШапкаДокумента.Курс
	|		ИНАЧЕ КурсыВалютыРасчетов.Курс
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|			ТОГДА ШапкаДокумента.Кратность
	|		ИНАЧЕ КурсыВалютыРасчетов.Кратность
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА ТаблицаДокумента.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	Если ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") Тогда
		ЭтотОбъект.Касса = Справочники.Кассы.ПолучитьКассуСУчетомПравДоступаНаУровнеЗаписей(Выборка.Касса);
	КонецЕсли;
	РасшифровкаПлатежа.Очистить();
	НоваяСтрока = РасшифровкаПлатежа.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	ЭтотОбъект.СуммаДокумента = Выборка.СуммаПлатежа;
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ЭтотОбъект.СуммаДокумента = ЭтотОбъект.СуммаДокумента + Выборка.СуммаПлатежа;
	КонецЦикла;
	
	ЗаполнитьПриложение(ДокументСсылкаОтчетКомиссионера);
	
КонецПроцедуры // ЗаполнитьПоДополнительныеРасходы()

// Обработчик заполнения на основании документа ОтчетКомитенту.
//
// Параметры:
//	ДокументСсылкаОтчетКомитенту - ДокументСсылка.ОтчетКомитенту.
//	
Процедура ЗаполнитьПоОтчетКомитенту(ДокументСсылкаОтчетКомитенту) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаОтчетКомитенту);
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШапкаДокумента.Организация КАК Организация,
	|	ШапкаДокумента.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.Поставщику) КАК ВидОперации,
	|	&Ссылка КАК ДокументОснование,
	|	ШапкаДокумента.Организация.КассаПоУмолчанию КАК Касса,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(&Ссылка) КАК Основание,
	|	ШапкаДокумента.Контрагент КАК Контрагент,
	|	ШапкаДокумента.ВалютаДокумента КАК ВалютаДенежныхСредств,
	|	ШапкаДокумента.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА ТаблицаДокумента.ЗаказПоставщику
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|	КОНЕЦ КАК Заказ,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	СУММА(ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НЕ ШапкаДокумента.СуммаВключаетНДС
	|						ТОГДА ВЫБОР
	|								КОГДА ШапкаДокумента.УдержатьКомиссионноеВознаграждение
	|									ТОГДА ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС - ТаблицаДокумента.СуммаВознаграждения - ТаблицаДокумента.СуммаНДСВознаграждения
	|								ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ШапкаДокумента.УдержатьКомиссионноеВознаграждение
	|								ТОГДА ТаблицаДокумента.Сумма - ТаблицаДокумента.СуммаВознаграждения
	|							ИНАЧЕ ТаблицаДокумента.Сумма
	|						КОНЕЦ
	|				КОНЕЦ * ВЫБОР
	|					КОГДА ШапкаДокумента.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|						ТОГДА КурсыРегВалют.Курс * ШапкаДокумента.Кратность / (ШапкаДокумента.Курс * ЕСТЬNULL(КурсыРегВалют.Кратность, 1))
	|					ИНАЧЕ 1
	|				КОНЕЦ КАК ЧИСЛО(15, 2)), 0)) КАК СуммаРасчетов,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|			ТОГДА ШапкаДокумента.Курс
	|		ИНАЧЕ КурсыВалютыРасчетов.Курс
	|	КОНЕЦ КАК Курс,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|			ТОГДА ШапкаДокумента.Кратность
	|		ИНАЧЕ КурсыВалютыРасчетов.Кратность
	|	КОНЕЦ КАК Кратность,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА НЕ ШапкаДокумента.СуммаВключаетНДС
	|					ТОГДА ВЫБОР
	|							КОГДА ШапкаДокумента.УдержатьКомиссионноеВознаграждение
	|								ТОГДА ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС - ТаблицаДокумента.СуммаВознаграждения - ТаблицаДокумента.СуммаНДСВознаграждения
	|							ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ШапкаДокумента.УдержатьКомиссионноеВознаграждение
	|							ТОГДА ТаблицаДокумента.Сумма - ТаблицаДокумента.СуммаВознаграждения
	|						ИНАЧЕ ТаблицаДокумента.Сумма
	|					КОНЕЦ
	|			КОНЕЦ, 0)) КАК СуммаПлатежа,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ШапкаДокумента.УдержатьКомиссионноеВознаграждение
	|					ТОГДА ТаблицаДокумента.СуммаНДС - ТаблицаДокумента.СуммаНДСВознаграждения
	|				ИНАЧЕ ТаблицаДокумента.СуммаНДС
	|			КОНЕЦ, 0)) КАК СуммаНДС
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ШапкаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомитенту.Запасы КАК ТаблицаДокумента
	|		ПО ШапкаДокумента.Ссылка = ТаблицаДокумента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&Дата,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						КонстантаНациональнаяВалюта.Значение
	|					ИЗ
	|						Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта)) КАК КурсыРегВалют
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыРасчетов
	|		ПО ШапкаДокумента.Договор.ВалютаРасчетов = КурсыВалютыРасчетов.Валюта,
	|	Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта
	|ГДЕ
	|	ШапкаДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ШапкаДокумента.Организация,
	|	ШапкаДокумента.НалогообложениеНДС,
	|	ШапкаДокумента.Организация.КассаПоУмолчанию,
	|	ШапкаДокумента.Контрагент,
	|	ШапкаДокумента.ВалютаДокумента,
	|	ТаблицаДокумента.ЗаказПоставщику,
	|	ШапкаДокумента.Договор,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|			ТОГДА ШапкаДокумента.Курс
	|		ИНАЧЕ КурсыВалютыРасчетов.Курс
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|			ТОГДА ШапкаДокумента.Кратность
	|		ИНАЧЕ КурсыВалютыРасчетов.Кратность
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА ТаблицаДокумента.ЗаказПоставщику
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	Если ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") Тогда
		ЭтотОбъект.Касса = Справочники.Кассы.ПолучитьКассуСУчетомПравДоступаНаУровнеЗаписей(Выборка.Касса);
	КонецЕсли;
	РасшифровкаПлатежа.Очистить();
	НоваяСтрока = РасшифровкаПлатежа.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	ЭтотОбъект.СуммаДокумента = Выборка.СуммаПлатежа;
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ЭтотОбъект.СуммаДокумента = ЭтотОбъект.СуммаДокумента + Выборка.СуммаПлатежа;
	КонецЦикла;
	
	ЗаполнитьПриложение(ДокументСсылкаОтчетКомитенту);
	
КонецПроцедуры // ЗаполнитьПоОтчетКомитенту()

// Обработчик заполнения на основании документа СчетНаОплатуПоставщика.
//
// Параметры:
//	ДокументСсылкаСчетНаОплатуПоставщика - ДокументСсылка.СчетНаОплатуПоставщика.
//	
Процедура ЗаполнитьПоСчетНаОплатуПоставщика(ДокументСсылкаСчетНаОплатуПоставщика) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСчетНаОплатуПоставщика);
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Если ТипЗнч(ДокументСсылкаСчетНаОплатуПоставщика.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Запрос.УстановитьПараметр("Заказ", ДокументСсылкаСчетНаОплатуПоставщика.ДокументОснование);
	Иначе
		Запрос.УстановитьПараметр("Заказ", Документы.ЗаказПоставщику.ПустаяСсылка());
	КонецЕсли;
	
	// Заполним данные табличных частей документа.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(&Ссылка) КАК Основание,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.Поставщику) КАК ВидОперации,
	|	&Ссылка КАК ДокументОснование,
	|	ШапкаДокумента.Организация КАК Организация,
	|	ШапкаДокумента.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ШапкаДокумента.ВалютаДокумента КАК ВалютаДенежныхСредств,
	|	ШапкаДокумента.Касса КАК Касса,
	|	ШапкаДокумента.Контрагент КАК Контрагент,
	|	ШапкаДокумента.Договор КАК Договор,
	|	ИСТИНА КАК ПризнакАванса,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ШапкаДокумента.ДокументОснование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.Контрагент.ВестиУчетОплатыПоСчетам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)
	|	КОНЕЦ КАК СчетНаОплату,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	КурсыВалютРасчетов.Курс КАК Курс,
	|	КурсыВалютРасчетов.Кратность КАК Кратность,
	|	СУММА(ТаблицаДокумента.Всего) КАК СуммаДокумента,
	|	СУММА(ТаблицаДокумента.Всего) КАК СуммаПлатежа,
	|	СУММА(ВЫРАЗИТЬ(ТаблицаДокумента.Всего * ВЫБОР
	|				КОГДА ШапкаДокумента.ВалютаДокумента <> ШапкаДокумента.Договор.ВалютаРасчетов
	|						И КурсыВалютРасчетов.Курс <> 0
	|						И КурсыВалютДокумента.Кратность <> 0
	|					ТОГДА КурсыВалютДокумента.Курс * КурсыВалютРасчетов.Кратность / (ЕСТЬNULL(КурсыВалютРасчетов.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1))
	|				ИНАЧЕ 1
	|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК СуммаРасчетов,
	|	СУММА(ВЫРАЗИТЬ(ТаблицаДокумента.Всего * (1 - 1 / ((ЕСТЬNULL(ТаблицаДокумента.СтавкаНДС.Ставка, 0) + 100) / 100)) КАК ЧИСЛО(15, 2))) КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА &Заказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|	КОНЕЦ КАК Заказ
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика КАК ШапкаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПоставщика.Запасы КАК ТаблицаДокумента
	|		ПО ШапкаДокумента.Ссылка = ТаблицаДокумента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютРасчетов
	|		ПО ШапкаДокумента.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютДокумента
	|		ПО ШапкаДокумента.ВалютаДокумента = КурсыВалютДокумента.Валюта
	|ГДЕ
	|	ШапкаДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ШапкаДокумента.Организация,
	|	ШапкаДокумента.НалогообложениеНДС,
	|	ШапкаДокумента.ВалютаДокумента,
	|	ШапкаДокумента.Касса,
	|	ШапкаДокумента.Контрагент,
	|	ШапкаДокумента.Договор,
	|	ШапкаДокумента.ДокументОснование,
	|	ТаблицаДокумента.СтавкаНДС,
	|	КурсыВалютРасчетов.Курс,
	|	КурсыВалютРасчетов.Кратность,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ШапкаДокумента.ДокументОснование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.Контрагент.ВестиУчетОплатыПоСчетам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.СчетНаОплату.ПустаяСсылка)
	|	КОНЕЦ";
	
	Если ЗначениеЗаполнено(Запрос.Параметры.Заказ) Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////"
		+ Символы.ПС +
		"ВЫБРАТЬ
		|	ПриходнаяНакладная.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
		|ГДЕ
		|	ПриходнаяНакладная.Заказ = &Заказ
		|	И ПриходнаяНакладная.СуммаДокумента = &СуммаЗаказа
		|	И ПриходнаяНакладная.Проведен
		|	И ПриходнаяНакладная.Контрагент.ВестиРасчетыПоДокументам";
		
		Запрос.УстановитьПараметр("СуммаЗаказа", Запрос.Параметры.Заказ.СуммаДокумента);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		Выборка = МассивРезультатов[0].Выбрать();
		ЭтоПакетЗапросов = Истина;
	Иначе
		Выборка = Запрос.Выполнить().Выбрать();
		ЭтоПакетЗапросов = Ложь;
	КонецЕсли;
	
	РасшифровкаПлатежа.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		Если ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") Тогда
			ЭтотОбъект.Касса = Справочники.Кассы.ПолучитьКассуСУчетомПравДоступаНаУровнеЗаписей(Выборка.Касса);
		КонецЕсли;
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если НЕ НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС(НоваяСтрока);
		КонецЕсли;
		
		Если ЭтоПакетЗапросов Тогда
			ВыборкаДокумент = МассивРезультатов[1].Выбрать();
			Если ВыборкаДокумент.Следующий() Тогда
				НоваяСтрока.Документ = ВыборкаДокумент.Ссылка;
				НоваяСтрока.ПризнакАванса = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ЗаполнитьПриложение(ДокументСсылкаСчетНаОплатуПоставщика);
	
КонецПроцедуры // ЗаполнитьПоСчетНаОплатуПоставщика()

// Процедура заполнения на основании документа СчетНаОплатуПоставщика с указанием номера строки.
//
// Параметры:
//	ДокументСсылкаСчетНаОплатуПоставщика - ДокументСсылка.СчетНаОплатуПоставщика.
//	НомерСтроки - Число.
//	
Процедура ЗаполнитьПоСчетНаОплатуПоставщикаИНомеруСтроки(ДокументСсылкаСчетНаОплатуПоставщика, НомерСтроки)
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСчетНаОплатуПоставщика.Основание);
	Запрос.УстановитьПараметр("НомерСтроки", НомерСтроки);
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Если ТипЗнч(ДокументСсылкаСчетНаОплатуПоставщика.Основание.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Запрос.УстановитьПараметр("Заказ", ДокументСсылкаСчетНаОплатуПоставщика.Основание.ДокументОснование);
	Иначе
		Запрос.УстановитьПараметр("Заказ", Документы.ЗаказПоставщику.ПустаяСсылка());
	КонецЕсли;
	
	// Заполним данные шапки документа.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(&Ссылка) КАК Основание,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.Поставщику) КАК ВидОперации,
	|	&Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ТаблицаДокумента.Ссылка.ВалютаДокумента КАК ВалютаДенежныхСредств,
	|	ТаблицаДокумента.Ссылка.Касса КАК Касса,
	|	ТаблицаДокумента.Ссылка.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.Ссылка.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.ДокументОснование = НЕОПРЕДЕЛЕНО
	|				ИЛИ ТаблицаДокумента.Ссылка.ДокументОснование = ЗНАЧЕНИЕ(Документ.АктВыполненныхРабот.ПустаяСсылка)
	|				ИЛИ ТаблицаДокумента.Ссылка.ДокументОснование = ЗНАЧЕНИЕ(Документ.РасходнаяНакладная.ПустаяСсылка)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Ссылка.ДокументОснование) = ТИП(Документ.ЗаказПокупателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакАванса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Ссылка.ДокументОснование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам
	|			ТОГДА ТаблицаДокумента.Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)
	|	КОНЕЦ КАК СчетНаОплату,
	|	ЕСТЬNULL(ТаблицаДокументаСтавкиНДС.СтавкаНДС, СтавкиНДС.СтавкаНДС) КАК СтавкаНДС,
	|	КурсыВалютРасчетов.Курс КАК Курс,
	|	КурсыВалютРасчетов.Кратность КАК Кратность,
	|	ТаблицаДокумента.СуммаОплаты КАК СуммаДокумента,
	|	ТаблицаДокумента.СуммаОплаты КАК СуммаПлатежа,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.СуммаОплаты * ВЫБОР
	|			КОГДА ТаблицаДокумента.Ссылка.ВалютаДокумента <> ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов
	|					И КурсыВалютРасчетов.Курс <> 0
	|					И КурсыВалютДокумента.Кратность <> 0
	|				ТОГДА КурсыВалютДокумента.Курс * КурсыВалютРасчетов.Кратность / (ЕСТЬNULL(КурсыВалютРасчетов.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1))
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРасчетов,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.СуммаОплаты * (1 - 1 / ((ЕСТЬNULL(СтавкиНДС.СтавкаНДС.Ставка, 0) + 100) / 100)) КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА &Заказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|	КОНЕЦ КАК Заказ
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.ПлатежныйКалендарь КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			СтавкиНДС.Ссылка КАК СтавкаНДС
	|		ИЗ
	|			Справочник.СтавкиНДС КАК СтавкиНДС
	|		ГДЕ
	|			СтавкиНДС.Ставка = 18
	|			И СтавкиНДС.ПометкаУдаления = ЛОЖЬ
	|			И СтавкиНДС.Расчетная = ЛОЖЬ) КАК СтавкиНДС
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			ТаблицаДокумента.Ссылка КАК Ссылка,
	|			ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС
	|		ИЗ
	|			Документ.СчетНаОплатуПоставщика.Запасы КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.Ссылка = &Ссылка) КАК ТаблицаДокументаСтавкиНДС
	|		ПО ТаблицаДокумента.Ссылка = ТаблицаДокументаСтавкиНДС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютРасчетов
	|		ПО ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютДокумента
	|		ПО ТаблицаДокумента.Ссылка.ВалютаДокумента = КурсыВалютДокумента.Валюта
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.НомерСтроки = &НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	РасшифровкаПлатежа.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		Если ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") Тогда
			ЭтотОбъект.Касса = Справочники.Кассы.ПолучитьКассуСУчетомПравДоступаНаУровнеЗаписей(Выборка.Касса);
		КонецЕсли;
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если НЕ НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ЗаполнитьПриложение(ДокументСсылкаСчетНаОплатуПоставщика);
	
КонецПроцедуры // ЗаполнитьПоСчетНаОплатуПоставщика()

// Процедура заполнения на основании документа СчетНаОплатуПоставщика с указанием суммы.
//
// Параметры:
//	ДокументСсылкаСчетНаОплатуПоставщика - ДокументСсылка.СчетНаОплатуПоставщика.
//	Сумма - Число.
//	
Процедура ЗаполнитьПоСчетНаОплатуПоставщикаИСумме(ДокументСсылкаСчетНаОплатуПоставщика, Сумма)
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСчетНаОплатуПоставщика);
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Сумма", Сумма);
	Если ТипЗнч(ДокументСсылкаСчетНаОплатуПоставщика.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Запрос.УстановитьПараметр("Заказ", ДокументСсылкаСчетНаОплатуПоставщика.ДокументОснование);
	Иначе
		Запрос.УстановитьПараметр("Заказ", Документы.ЗаказПоставщику.ПустаяСсылка());
	КонецЕсли;
	
	// Заполним данные табличных частей документа.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(&Ссылка) КАК Основание,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСоСчета.Поставщику) КАК ВидОперации,
	|	&Ссылка КАК ДокументОснование,
	|	ШапкаДокумента.Организация КАК Организация,
	|	ШапкаДокумента.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ШапкаДокумента.ВалютаДокумента КАК ВалютаДенежныхСредств,
	|	ШапкаДокумента.Касса КАК Касса,
	|	ШапкаДокумента.Контрагент КАК Контрагент,
	|	ШапкаДокумента.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.ДокументОснование = НЕОПРЕДЕЛЕНО
	|				ИЛИ ШапкаДокумента.ДокументОснование = ЗНАЧЕНИЕ(Документ.АктВыполненныхРабот.ПустаяСсылка)
	|				ИЛИ ШапкаДокумента.ДокументОснование = ЗНАЧЕНИЕ(Документ.РасходнаяНакладная.ПустаяСсылка)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ШапкаДокумента.ДокументОснование) = ТИП(Документ.ЗаказПокупателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакАванса,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ШапкаДокумента.ДокументОснование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.Контрагент.ВестиУчетОплатыПоСчетам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)
	|	КОНЕЦ КАК СчетНаОплату,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	КурсыВалютРасчетов.Курс КАК Курс,
	|	КурсыВалютРасчетов.Кратность КАК Кратность,
	|	&Сумма КАК СуммаДокумента,
	|	&Сумма КАК СуммаПлатежа,
	|	ВЫРАЗИТЬ(&Сумма * ВЫБОР
	|			КОГДА ШапкаДокумента.ВалютаДокумента <> ШапкаДокумента.Договор.ВалютаРасчетов
	|					И КурсыВалютРасчетов.Курс <> 0
	|					И КурсыВалютДокумента.Кратность <> 0
	|				ТОГДА КурсыВалютДокумента.Курс * КурсыВалютРасчетов.Кратность / (ЕСТЬNULL(КурсыВалютРасчетов.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1))
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРасчетов,
	|	ВЫРАЗИТЬ(&Сумма * (1 - 1 / ((ЕСТЬNULL(ТаблицаДокумента.СтавкаНДС.Ставка, 0) + 100) / 100)) КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА &Заказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|	КОНЕЦ КАК Заказ
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика КАК ШапкаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПоставщика.Запасы КАК ТаблицаДокумента
	|		ПО ШапкаДокумента.Ссылка = ТаблицаДокумента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютРасчетов
	|		ПО ШапкаДокумента.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютДокумента
	|		ПО ШапкаДокумента.ВалютаДокумента = КурсыВалютДокумента.Валюта
	|ГДЕ
	|	ШапкаДокумента.Ссылка = &Ссылка
	|	И ЕСТЬNULL(ТаблицаДокумента.НомерСтроки, 1) = 1";
	
	Выборка = Запрос.Выполнить().Выбрать();
	РасшифровкаПлатежа.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		Если ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") Тогда
			ЭтотОбъект.Касса = Справочники.Кассы.ПолучитьКассуСУчетомПравДоступаНаУровнеЗаписей(Выборка.Касса);
		КонецЕсли;
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если НЕ НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ЗаполнитьПриложение(ДокументСсылкаСчетНаОплатуПоставщика);
	
КонецПроцедуры // ЗаполнитьПоСчетНаОплатуПоставщика()

// Обработчик заполнения на основании документа ЗаказПоставщику.
//
// Параметры:
//	ДокументСсылкаЗаказПоставщику - ДокументСсылка.ЗаказПоставщику.
//	
Процедура ЗаполнитьПоЗаказПоставщику(ДанныеЗаполнения) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("СсылкаНаТекущийДокумент", Ссылка);
	
	// Заполним данные из табличной части документа.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(&Ссылка) КАК Основание,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.Поставщику) КАК ВидОперации,
	|	&Ссылка КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|	КОНЕЦ КАК Заказ,
	|	ШапкаДокумента.Организация КАК Организация,
	|	ШапкаДокумента.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ШапкаДокумента.ВалютаДокумента КАК ВалютаДенежныхСредств,
	|	ШапкаДокумента.Касса КАК Касса,
	|	ШапкаДокумента.Контрагент КАК Контрагент,
	|	ШапкаДокумента.Договор КАК Договор,
	|	ИСТИНА КАК ПризнакАванса,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	КурсыВалютРасчетов.Курс КАК Курс,
	|	КурсыВалютРасчетов.Кратность КАК Кратность,
	|	СУММА(ТаблицаДокумента.Всего) КАК СуммаДокумента,
	|	СУММА(ТаблицаДокумента.Всего) КАК СуммаПлатежа,
	|	СУММА(ВЫРАЗИТЬ(ТаблицаДокумента.Всего * ВЫБОР
	|				КОГДА ШапкаДокумента.ВалютаДокумента <> ШапкаДокумента.Договор.ВалютаРасчетов
	|						И КурсыВалютРасчетов.Курс <> 0
	|						И КурсыВалютДокумента.Кратность <> 0
	|					ТОГДА КурсыВалютДокумента.Курс * КурсыВалютРасчетов.Кратность / (ЕСТЬNULL(КурсыВалютРасчетов.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1))
	|				ИНАЧЕ 1
	|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК СуммаРасчетов,
	|	СУММА(ВЫРАЗИТЬ(ТаблицаДокумента.Всего * (1 - 1 / ((ЕСТЬNULL(ТаблицаДокумента.СтавкаНДС.Ставка, 0) + 100) / 100)) КАК ЧИСЛО(15, 2))) КАК СуммаНДС
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ШапкаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Запасы КАК ТаблицаДокумента
	|		ПО ШапкаДокумента.Ссылка = ТаблицаДокумента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютРасчетов
	|		ПО ШапкаДокумента.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютДокумента
	|		ПО ШапкаДокумента.ВалютаДокумента = КурсыВалютДокумента.Валюта
	|ГДЕ
	|	ШапкаДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ШапкаДокумента.Организация,
	|	ШапкаДокумента.НалогообложениеНДС,
	|	ШапкаДокумента.ВалютаДокумента,
	|	ШапкаДокумента.Касса,
	|	ШапкаДокумента.Контрагент,
	|	ШапкаДокумента.Договор,
	|	ТаблицаДокумента.СтавкаНДС,
	|	КурсыВалютРасчетов.Курс,
	|	КурсыВалютРасчетов.Кратность,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|	КОНЕЦ;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОплатаСчетовИЗаказов.СуммаАванса + ОплатаСчетовИЗаказов.СуммаОплаты КАК ОплаченоВалДок
	|ИЗ
	|	РегистрНакопления.ОплатаСчетовИЗаказов КАК ОплатаСчетовИЗаказов
	|ГДЕ
	|	ОплатаСчетовИЗаказов.СчетНаОплату = &Ссылка
	|	И ОплатаСчетовИЗаказов.Регистратор <> &СсылкаНаТекущийДокумент
	|	И ОплатаСчетовИЗаказов.СуммаАванса + ОплатаСчетовИЗаказов.СуммаОплаты <> 0";
	
	Если ЗначениеЗаполнено(Запрос.Параметры.Ссылка) Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////"
		+ Символы.ПС +
		"ВЫБРАТЬ
		|	ПриходнаяНакладная.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
		|ГДЕ
		|	ПриходнаяНакладная.Заказ = &Ссылка
		|	И ПриходнаяНакладная.СуммаДокумента = &СуммаЗаказа
		|	И ПриходнаяНакладная.Проведен
		|	И ПриходнаяНакладная.Контрагент.ВестиРасчетыПоДокументам;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыСПоставщикамиОстатки.Документ КАК Документ
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
		|			,
		|			Заказ = &Ссылка
		|				И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
		|				И Документ.МоментВремени < &ДатаОплаты) КАК РасчетыСПоставщикамиОстатки";
		
		Запрос.УстановитьПараметр("СуммаЗаказа", Запрос.Параметры.Ссылка.СуммаДокумента);
		Запрос.УстановитьПараметр("ДатаОплаты", Новый МоментВремени(Запрос.Параметры.Дата, Ссылка));
		
		ЕстьПараметрСсылка = Истина;
	КонецЕсли;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	РезультатЗапроса = МассивРезультатов[0];
	Выборка = РезультатЗапроса.Выбрать();
	
	РасшифровкаПлатежа.Очистить();
	
	ТаблицаДанных = РасчетыСлужебный.УчестьОплатуДругимиДокументами(МассивРезультатов, 1);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ДокументДляСтроки = Неопределено;
		Если ЕстьПараметрСсылка Тогда
			ВыборкаДокумент = МассивРезультатов[2].Выбрать();
			Если ВыборкаДокумент.Следующий() Тогда
				ДокументДляСтроки = ВыборкаДокумент.Ссылка;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДокументДляСтроки) Тогда
				ВыборкаДокумент = МассивРезультатов[3].Выбрать();
				Если ВыборкаДокумент.Количество() = 1 И ВыборкаДокумент.Следующий() Тогда
					ДокументДляСтроки = ВыборкаДокумент.Документ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Заполним реквизиты шапки.
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		Если ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") Тогда
			ЭтотОбъект.Касса = Справочники.Кассы.ПолучитьКассуСУчетомПравДоступаНаУровнеЗаписей(Выборка.Касса);
		КонецЕсли;
		
		// Заполним расшифровку платежа
		Для Каждого ТекущаяСтрока Из ТаблицаДанных Цикл
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			
			Если НЕ НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
				ЗаполнитьСтавкуНДСПоНалогообложениеНДС(НоваяСтрока);
			КонецЕсли;
			
			Если ДокументДляСтроки <> Неопределено Тогда
				НоваяСтрока.Документ = ДокументДляСтроки;
				НоваяСтрока.ПризнакАванса = Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	ЗаполнитьАналитикуПоЗаказу(ДанныеЗаполнения);
	ЗаполнитьПриложение(ДанныеЗаполнения);
	
КонецПроцедуры // ЗаполнитьПоЗаказПоставщику()

// Процедура заполнения на основании документа ЗаказПоставщику с указанием номера строки.
//
// Параметры:
//	ДокументСсылкаЗаказПоставщику - ДокументСсылка.ЗаказПоставщику.
//	НомерСтроки - Число.
//	
Процедура ЗаполнитьПоЗаказПоставщикуИНомеруСтроки(ДокументСсылкаЗаказПоставщику, НомерСтроки)
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПоставщику);
	Запрос.УстановитьПараметр("НомерСтроки", НомерСтроки);
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	
	// Заполним данные шапки документа.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(&Ссылка) КАК Основание,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.Поставщику) КАК ВидОперации,
	|	&Ссылка КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|	КОНЕЦ КАК Заказ,
	|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ТаблицаДокумента.Ссылка.ВалютаДокумента КАК ВалютаДенежныхСредств,
	|	ТаблицаДокумента.Ссылка.Касса КАК Касса,
	|	ТаблицаДокумента.Ссылка.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.Ссылка.Договор КАК Договор,
	|	ИСТИНА КАК ПризнакАванса,
	|	ЕСТЬNULL(ТаблицаДокументаСтавкиНДС.СтавкаНДС, СтавкиНДС.СтавкаНДС) КАК СтавкаНДС,
	|	КурсыВалютРасчетов.Курс КАК Курс,
	|	КурсыВалютРасчетов.Кратность КАК Кратность,
	|	ТаблицаДокумента.СуммаОплаты КАК СуммаДокумента,
	|	ТаблицаДокумента.СуммаОплаты КАК СуммаПлатежа,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.СуммаОплаты * ВЫБОР
	|			КОГДА ТаблицаДокумента.Ссылка.ВалютаДокумента <> ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов
	|					И КурсыВалютРасчетов.Курс <> 0
	|					И КурсыВалютДокумента.Кратность <> 0
	|				ТОГДА КурсыВалютДокумента.Курс * КурсыВалютРасчетов.Кратность / (ЕСТЬNULL(КурсыВалютРасчетов.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1))
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРасчетов,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.СуммаОплаты * (1 - 1 / ((ЕСТЬNULL(СтавкиНДС.СтавкаНДС.Ставка, 0) + 100) / 100)) КАК ЧИСЛО(15, 2)) КАК СуммаНДС
	|ИЗ
	|	Документ.ЗаказПоставщику.ПлатежныйКалендарь КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			СтавкиНДС.Ссылка КАК СтавкаНДС
	|		ИЗ
	|			Справочник.СтавкиНДС КАК СтавкиНДС
	|		ГДЕ
	|			СтавкиНДС.Ставка = 18
	|			И СтавкиНДС.ПометкаУдаления = ЛОЖЬ
	|			И СтавкиНДС.Расчетная = ЛОЖЬ) КАК СтавкиНДС
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			ТаблицаДокумента.Ссылка КАК Ссылка,
	|			ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС
	|		ИЗ
	|			Документ.ЗаказПоставщику.Запасы КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.Ссылка = &Ссылка) КАК ТаблицаДокументаСтавкиНДС
	|		ПО ТаблицаДокумента.Ссылка = ТаблицаДокументаСтавкиНДС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютРасчетов
	|		ПО ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютДокумента
	|		ПО ТаблицаДокумента.Ссылка.ВалютаДокумента = КурсыВалютДокумента.Валюта
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.НомерСтроки = &НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	РасшифровкаПлатежа.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		Если ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") Тогда
			ЭтотОбъект.Касса = Справочники.Кассы.ПолучитьКассуСУчетомПравДоступаНаУровнеЗаписей(Выборка.Касса);
		КонецЕсли;
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если НЕ НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьАналитикуПоЗаказу(ДокументСсылкаЗаказПоставщику);
	
	СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ЗаполнитьПриложение(ДокументСсылкаЗаказПоставщику);
	
КонецПроцедуры // ЗаполнитьПоЗаказПоставщику()

// Процедура заполнения на основании документа ЗаказПоставщику с указанием суммы.
//
// Параметры:
//	ДокументСсылкаЗаказПоставщику - ДокументСсылка.ЗаказПоставщику.
//	Сумма - Число.
//	
Процедура ЗаполнитьПоЗаказПоставщикуИСумме(ДанныеЗаполнения, Сумма)
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Сумма", Сумма);
	
	// Заполним данные табличных частей документа.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(&Ссылка) КАК Основание,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСоСчета.Поставщику) КАК ВидОперации,
	|	&Ссылка КАК ДокументОснование,
	|	ШапкаДокумента.Организация КАК Организация,
	|	ШапкаДокумента.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ШапкаДокумента.ВалютаДокумента КАК ВалютаДенежныхСредств,
	|	ШапкаДокумента.Касса КАК Касса,
	|	ШапкаДокумента.Контрагент КАК Контрагент,
	|	ШапкаДокумента.Договор КАК Договор,
	|	ИСТИНА КАК ПризнакАванса,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|	КОНЕЦ КАК Заказ,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	КурсыВалютРасчетов.Курс КАК Курс,
	|	КурсыВалютРасчетов.Кратность КАК Кратность,
	|	&Сумма КАК СуммаДокумента,
	|	&Сумма КАК СуммаПлатежа,
	|	ВЫРАЗИТЬ(&Сумма * ВЫБОР
	|			КОГДА ШапкаДокумента.ВалютаДокумента <> ШапкаДокумента.Договор.ВалютаРасчетов
	|					И КурсыВалютРасчетов.Курс <> 0
	|					И КурсыВалютДокумента.Кратность <> 0
	|				ТОГДА КурсыВалютДокумента.Курс * КурсыВалютРасчетов.Кратность / (ЕСТЬNULL(КурсыВалютРасчетов.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1))
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРасчетов,
	|	ВЫРАЗИТЬ(&Сумма * (1 - 1 / ((ЕСТЬNULL(ТаблицаДокумента.СтавкаНДС.Ставка, 0) + 100) / 100)) КАК ЧИСЛО(15, 2)) КАК СуммаНДС
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ШапкаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Запасы КАК ТаблицаДокумента
	|		ПО ШапкаДокумента.Ссылка = ТаблицаДокумента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютРасчетов
	|		ПО ШапкаДокумента.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютДокумента
	|		ПО ШапкаДокумента.ВалютаДокумента = КурсыВалютДокумента.Валюта
	|ГДЕ
	|	ШапкаДокумента.Ссылка = &Ссылка
	|	И ЕСТЬNULL(ТаблицаДокумента.НомерСтроки, 1) = 1";
		
	Выборка = Запрос.Выполнить().Выбрать();
	РасшифровкаПлатежа.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		Если ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") Тогда
			ЭтотОбъект.Касса = Справочники.Кассы.ПолучитьКассуСУчетомПравДоступаНаУровнеЗаписей(Выборка.Касса);
		КонецЕсли;
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если НЕ НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьАналитикуПоЗаказу(ДанныеЗаполнения);
	
	СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ЗаполнитьПриложение(ДанныеЗаполнения);
	
КонецПроцедуры // ЗаполнитьПоЗаказПоставщику()

// Процедура заполнения на основании документа ЗаказПоставщику.
//
// Параметры:
//	ДокументСсылкаЗаказПоставщику - ДокументСсылка.ЗаказПоставщику.
//
Процедура ЗаполнитьПоЗаказуПоставщикуСУчетомОстатковКОплате(ДокументСсылкаЗаказПоставщику)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПоставщику);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(&Ссылка) КАК Основание,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.Поставщику) КАК ВидОперации,
	|	&Дата КАК Дата,
	|	&Ссылка КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|	КОНЕЦ КАК Заказ,
	|	ШапкаДокумента.Организация КАК Организация,
	|	ШапкаДокумента.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ШапкаДокумента.ВалютаДокумента КАК ВалютаДенежныхСредств,
	|	ШапкаДокумента.Касса КАК Касса,
	|	ШапкаДокумента.Контрагент КАК Контрагент,
	|	ШапкаДокумента.Договор КАК Договор,
	|	ИСТИНА КАК ПризнакАванса,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	КурсыВалютРасчетов.Курс КАК Курс,
	|	КурсыВалютРасчетов.Кратность КАК Кратность,
	|	ОплатаСчетовИЗаказовОбороты.СуммаОборот - ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот - ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот КАК СуммаДокумента,
	|	ОплатаСчетовИЗаказовОбороты.СуммаОборот - ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот - ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот КАК СуммаПлатежа,
	|	ВЫРАЗИТЬ((ОплатаСчетовИЗаказовОбороты.СуммаОборот - ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот - ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот) * ВЫБОР
	|			КОГДА ШапкаДокумента.ВалютаДокумента <> ШапкаДокумента.Договор.ВалютаРасчетов
	|					И КурсыВалютРасчетов.Курс <> 0
	|					И КурсыВалютДокумента.Кратность <> 0
	|				ТОГДА КурсыВалютДокумента.Курс * КурсыВалютРасчетов.Кратность / (ЕСТЬNULL(КурсыВалютРасчетов.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1))
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРасчетов,
	|	ВЫРАЗИТЬ((ОплатаСчетовИЗаказовОбороты.СуммаОборот - ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот - ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот) * (1 - 1 / ((ЕСТЬNULL(ТаблицаДокумента.СтавкаНДС.Ставка, 0) + 100) / 100)) КАК ЧИСЛО(15, 2)) КАК СуммаНДС
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ШапкаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			&Ссылка КАК Ссылка,
	|			ЗаказПоставщикуЗапасы.СтавкаНДС КАК СтавкаНДС
	|		ИЗ
	|			Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщикуЗапасы
	|		ГДЕ
	|			ЗаказПоставщикуЗапасы.Ссылка = &Ссылка) КАК ТаблицаДокумента
	|		ПО ШапкаДокумента.Ссылка = ТаблицаДокумента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОплатаСчетовИЗаказов.Обороты КАК ОплатаСчетовИЗаказовОбороты
	|		ПО ШапкаДокумента.Ссылка = ОплатаСчетовИЗаказовОбороты.СчетНаОплату
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютРасчетов
	|		ПО ШапкаДокумента.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютДокумента
	|		ПО ШапкаДокумента.ВалютаДокумента = КурсыВалютДокумента.Валюта
	|ГДЕ
	|	ШапкаДокумента.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		Если ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") Тогда
			ЭтотОбъект.Касса = Справочники.Кассы.ПолучитьКассуСУчетомПравДоступаНаУровнеЗаписей(Выборка.Касса);
		КонецЕсли;
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если НЕ НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьАналитикуПоЗаказу(ДокументСсылкаЗаказПоставщику);
	
	СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ЗаполнитьПриложение(ДокументСсылкаЗаказПоставщику);
	
КонецПроцедуры // ЗаполнитьПоЗаказуПоставщикуСУчетомОстатковКОплате()

// Обработчик заполнения на основании документа ПлатежнаяВедомость.
//
// Параметры:
//	ДокументСсылкаПлатежнаяВедомость - ДокументСсылка.ПлатежнаяВедомость.
//	
Процедура ЗаполнитьПоПлатежнаяВедомость(ДокументСсылкаПлатежнаяВедомость) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаПлатежнаяВедомость);
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
	|	ТаблицаДокумента.СтруктурнаяЕдиница КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.Прочее) КАК Статья,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.Зарплата) КАК ВидОперации,
	|	&Ссылка КАК ДокументОснование,
	|	&Ссылка КАК Ведомость,
	|	ТаблицаДокумента.Ссылка.Организация.КассаПоУмолчанию КАК Касса,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ТаблицаДокумента.Ссылка) КАК Основание,
	|	ТаблицаДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ТаблицаДокумента.СуммаДокумента КАК СуммаПлатежа,
	|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДенежныхСредств
	|ИЗ
	|	Документ.ПлатежнаяВедомость КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	Если ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") Тогда
		ЭтотОбъект.Касса = Справочники.Кассы.ПолучитьКассуСУчетомПравДоступаНаУровнеЗаписей(Выборка.Касса);
	КонецЕсли;
	ВыплатаЗаработнойПлаты.Очистить();
	НоваяСтрока = ВыплатаЗаработнойПлаты.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	ЗаполнитьПриложение(ДокументСсылкаПлатежнаяВедомость);
	
КонецПроцедуры // ЗаполнитьПоПлатежнаяВедомость()

// Процедура заполнения на основании документа НачислениеНалогов.
//
// Параметры:
//	ДокументСсылкаНачислениеНалогов - ДокументСсылка.НачислениеНалогов.
//	
Процедура ЗаполнитьПоНачислениеНалогов(ДокументСсылкаНачислениеНалогов) Экспорт
	
	Если ДокументСсылкаНачислениеНалогов.ВидОперации <> Перечисления.ВидыОперацийНачислениеНалогов.Начисление Тогда
		ВызватьИсключение НСтр("ru='Расход из кассы можно ввести только на основании начисления налогов, а не возмещения.'");
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаНачислениеНалогов);
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("КонстантаНациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
	Запрос.УстановитьПараметр("КонстантаВалютаУчета", Константы.ВалютаУчета.Получить());
	
	Запрос.Текст = Справочники.СтавкиНДС.ПолучитьТекстЗапросаСозданияВТСтавкиНДС(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса())) +
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(&Ссылка) КАК Основание,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.Налоги) КАК ВидОперации,
	|	&Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.Прочее) КАК Статья,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Организация.КассаПоУмолчанию КАК Касса,
	|	&КонстантаНациональнаяВалюта КАК ВалютаДенежныхСредств,
	|	ВТСтавкиНДС.СтавкаНДС КАК СтавкаНДС,
	|	1 КАК Курс,
	|	1 КАК Кратность,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.СуммаДокумента * КурсыВалютУчета.Курс * 1 / (1 * ЕСТЬNULL(КурсыВалютУчета.Кратность, 1)) КАК ЧИСЛО(15, 2)) КАК СуммаДокумента,
	|	ТаблицаДокументаНалоги.ВидНалога КАК ВидНалога,
	|	ТаблицаДокументаНалоги.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.НачислениеНалогов КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			ТаблицаДокумента.Ссылка КАК Ссылка,
	|			ТаблицаДокумента.ВидНалога КАК ВидНалога,
	|			ТаблицаДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности
	|		ИЗ
	|			Документ.НачислениеНалогов.Налоги КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.Ссылка = &Ссылка) КАК ТаблицаДокументаНалоги
	|		ПО ТаблицаДокумента.Ссылка = ТаблицаДокументаНалоги.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &КонстантаВалютаУчета) КАК КурсыВалютУчета
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДС
	|		ПО (ТаблицаДокумента.Организация.ВидСтавкиНДСПоУмолчанию  = ВТСтавкиНДС.ВидСтавкиНДС)
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	Если ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") Тогда
		ЭтотОбъект.Касса = Справочники.Кассы.ПолучитьКассуСУчетомПравДоступаНаУровнеЗаписей(Выборка.Касса);
	КонецЕсли;
	НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Организация, , Дата);
	РасшифровкаПлатежа.Очистить();
	ЭтотОбъект.УчитыватьВНУ = Истина;
	ЗаполнитьПриложение(ДокументСсылкаНачислениеНалогов);
	
КонецПроцедуры // ЗаполнитьПоНачислениеНалогов()

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС(СтрокаТабличнойЧасти)
	
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда	
		СтрокаТабличнойЧасти.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		СтрокаТабличнойЧасти.СуммаНДС = 0;
	ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НаЭкспорт Тогда	
		СтрокаТабличнойЧасти.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		СтрокаТабличнойЧасти.СуммаНДС = 0;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события При копировании.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	НомерЧекаККМ = 0;
	Телефон = "";
	АдресЭП = "";

КонецПроцедуры // ПриКопировании()

// Процедура - обработчик события ОбработкаЗаполнения.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("Структура")] = "ЗаполнитьПоСтруктуре";
	СтратегияЗаполнения[Тип("ДокументСсылка.РасходДСПлан")] = "ЗаполнитьПоРасходДСПлан";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПеремещениеДСПлан")] = "ЗаполнитьПоПеремещениеДСПлан";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриходнаяНакладная")] = "ЗаполнитьПоПриходнаяНакладная";
	СтратегияЗаполнения[Тип("ДокументСсылка.ДополнительныеРасходы")] = "ЗаполнитьПоДополнительныеРасходы";
	СтратегияЗаполнения[Тип("ДокументСсылка.ОтчетКомиссионера")] = "ЗаполнитьПоОтчетКомиссионера";
	СтратегияЗаполнения[Тип("ДокументСсылка.ОтчетКомитенту")] = "ЗаполнитьПоОтчетКомитенту";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПоставщику")] = "ЗаполнитьПоЗаказПоставщику";
	СтратегияЗаполнения[Тип("ДокументСсылка.СчетНаОплатуПоставщика")] = "ЗаполнитьПоСчетНаОплатуПоставщика";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПлатежнаяВедомость")] = "ЗаполнитьПоПлатежнаяВедомость";
	СтратегияЗаполнения[Тип("ДокументСсылка.НачислениеНалогов")] = "ЗаполнитьПоНачислениеНалогов";
	СтратегияЗаполнения[Тип("ДокументСсылка.ДоговорКредитаИЗайма")] = "ЗаполнитьПоДоговоруКредитаЗайма";
	СтратегияЗаполнения[Тип("ДокументСсылка.НачисленияПоКредитамИЗаймам")] = "ЗаполнитьПоНачисленияПоКредитамИЗаймам";
	СтратегияЗаполнения[Тип("ДокументСсылка.АвансовыйОтчет")] = "ЗаполнитьПоАвансовыйОтчет";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")] = "ЗаполнитьПоПередачаТоваровМеждуОрганизациями";
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПеремещениеДСПлан") Тогда
		ИсключаяСвойства = "Касса, АналитикаПрочихДоходовИРасходов";
	Иначе
		ИсключаяСвойства = "АналитикаПрочихДоходовИРасходов";
	КонецЕсли;
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения, ИсключаяСвойства);
	
	ЗаполнитьПолеВыдать();
	РасчетыПроведениеДокументов.ЗаполнитьСпособЗачетаВРасшифровкеПлатежа(ЭтотОбъект);
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЛичныеСредстваПредпринимателя
		И Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
	    Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата Тогда
		ПоложениеСтатьи = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьДокументыПланирования = Истина;
	
	// Удаление проверяемых реквизитов из структуры, в зависимости от вида
	// операции.
	Если ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику
	ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
	ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации Тогда
		
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подотчетник");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Корреспонденция");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ВидНалога");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подразделение");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ПериодРегистрации");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "КассаККМ");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорКредитаЗайма");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.ТипСуммы");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СчетОрганизации");
		
		Если НЕ ((ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации)И
			ВариантЗаполненияРасшифровки = Перечисления.ВариантыЗаполненияРасшифровкиПлатежа.СПомощником) Тогда
			ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорДляЗачетаАвансаСПомощником");
		Иначе
			// Если нет строки с авансом, то и договор аванса заполнять не нужно.
			ЕстьАванс = Ложь;
			Для Каждого ТекущаяСтрока Из РасшифровкаПлатежа Цикл
				Если ТекущаяСтрока.ПризнакАванса Тогда
					ЕстьАванс = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ЕстьАванс Тогда
				ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорДляЗачетаАвансаСПомощником");
			КонецЕсли;
		КонецЕсли;
		
		ПогашатьАвтоматически = ((ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации)И 
			ВариантЗаполненияРасшифровки = Перечисления.ВариантыЗаполненияРасшифровкиПлатежа.Автоматически);
			
		Если Не ПогашатьАвтоматически Тогда
			
			ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорыАвтоЗачетаДолгов");
			ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорыАвтоЗачетаДолгов.Договор");
			ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорыАвтоЗачетаДолгов.СуммаПлатежа");
			
		Иначе
			
			ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа");
			ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Договор");
			ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.ПризнакАванса");
			ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.СуммаРасчетов");
			
			Для каждого СтрокаДоговоры Из ДоговорыАвтоЗачетаДолгов Цикл
				
				Если (СтрокаДоговоры.Договор.Пустая() И СтрокаДоговоры.СуммаПлатежа > 0) ИЛИ
					(НЕ СтрокаДоговоры.Договор.Пустая() И СтрокаДоговоры.СуммаПлатежа = 0) Тогда
					
					ТекстСообщения = СтрШаблон(НСтр(
						"ru = 'Для договора под №%1 нужно очистить сумму или выбрать договор.'"),
						СтрокаДоговоры.НомерСтроки);
					КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РасшифровкаПлатежа",
						СтрокаДоговоры.НомерСтроки, "Документ");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ПогашатьАвтоматическиСРазнесениемПоДоговорам = (ПогашатьАвтоматически И (ДоговорыАвтоЗачетаДолгов.Количество() > 1));
		Если ПогашатьАвтоматическиСРазнесениемПоДоговорам Тогда
			СуммаПлатежа = ДоговорыАвтоЗачетаДолгов.Итог("СуммаПлатежа");
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Сумма документа: %1 %3, не соответствует сумме разнесенных платежей по договорам: %2 %3.'"),
				СуммаДокумента, СуммаПлатежа, СокрЛП(ВалютаДенежныхСредств));
		Иначе
			СуммаПлатежа = РасшифровкаПлатежа.Итог("СуммаПлатежа");
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Сумма документа: %1 %3, не соответствует сумме разнесенных платежей в табличной части: %2 %3.'"),
				СуммаДокумента, СуммаПлатежа, СокрЛП(ВалютаДенежныхСредств));
		КонецЕсли;
		Если СуммаПлатежа <> СуммаДокумента Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", , Отказ);
		КонецЕсли;
		
		Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
			ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Договор");
		КонецЕсли;
		
		// В случае возврата нужно обязательно указать документ, если учет по документам ведется.
		Если Контрагент.ВестиРасчетыПоДокументам
			И ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю Тогда
			Для Каждого СтрокаРасшифровкаПлатежа Из РасшифровкаПлатежа Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаРасшифровкаПлатежа.Документ) Тогда
					Если РасшифровкаПлатежа.Количество() = 1 Тогда
						ТекстСообщения = НСтр("ru = 'Укажите документ расчетов.'");
					Иначе
						ТекстСообщения = СтрШаблон(НСтр(
							"ru = 'Укажите документ расчетов в строке %1 списка ""Расшифровка платежа"".'"),
							СтрокаРасшифровкаПлатежа.НомерСтроки);
					КонецЕсли;
					КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РасшифровкаПлатежа",
						СтрокаРасшифровкаПлатежа.НомерСтроки, "Документ");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ПроверитьДокументыПланирования = Ложь;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Подотчетнику Тогда
		
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Корреспонденция");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ВидНалога");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подразделение");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ПериодРегистрации");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "КассаККМ");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Договор");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.ПризнакАванса");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.СуммаРасчетов");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Курс");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Кратность");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.СтавкаНДС");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорКредитаЗайма");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.ТипСуммы");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорДляЗачетаАвансаСПомощником");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорыАвтоЗачетаДолгов");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СчетОрганизации");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата Тогда
		
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Корреспонденция");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ВидНалога");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Договор");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.ПризнакАванса");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.СуммаРасчетов");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Курс");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Кратность");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.СтавкаНДС");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подотчетник");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подразделение");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ПериодРегистрации");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "КассаККМ");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорКредитаЗайма");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.ТипСуммы");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорДляЗачетаАвансаСПомощником");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорыАвтоЗачетаДолгов");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СчетОрганизации");
		
		СуммаПлатежа = ВыплатаЗаработнойПлаты.Итог("СуммаПлатежа");
		Если СуммаПлатежа <> СуммаДокумента Тогда
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Сумма документа: %1 %3, не соответствует сумме разнесенных платежей в табличной части: %2 %3.'"),
				СуммаДокумента, СуммаПлатежа, СокрЛП(ВалютаДенежныхСредств));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", , Отказ);
		КонецЕсли;
		
		Для Каждого СтрокаВедомости Из ВыплатаЗаработнойПлаты Цикл
			Если СтрокаВедомости.Ведомость.ВалютаДокумента <> ВалютаДенежныхСредств Тогда
				ТекстСообщения = СтрШаблон(НСтр(
					"ru = 'Валюта документа (%1) не соответствует валюте платежной ведомости (%2).'"),
					СокрЛП(ВалютаДенежныхСредств), СокрЛП(ВалютаДенежныхСредств));
				КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыплатаЗаработнойПлаты",
					СтрокаВедомости.НомерСтроки, "Ведомость");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
			КонецЕсли;
		КонецЦикла;
		
		ПроверитьДокументыПланирования = Ложь;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику Тогда
		
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Корреспонденция");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ВидНалога");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "КассаККМ");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Договор");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.ПризнакАванса");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.СуммаРасчетов");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Курс");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Кратность");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.СтавкаНДС");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорКредитаЗайма");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.ТипСуммы");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорДляЗачетаАвансаСПомощником");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорыАвтоЗачетаДолгов");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СчетОрганизации");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее Тогда
		
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подотчетник");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ВидНалога");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ПериодРегистрации");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "КассаККМ");
		Если Корреспонденция.ТипСчета <> Перечисления.ТипыСчетов.Расходы Тогда
			ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подразделение");
		КонецЕсли;
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Договор");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.ПризнакАванса");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.СуммаРасчетов");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Курс");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Кратность");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.СтавкаНДС");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорКредитаЗайма");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.ТипСуммы");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорДляЗачетаАвансаСПомощником");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорыАвтоЗачетаДолгов");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СчетОрганизации");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЛичныеСредстваПредпринимателя Тогда
		
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подотчетник");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ВидНалога");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ПериодРегистрации");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "КассаККМ");
		Если Корреспонденция.ТипСчета <> Перечисления.ТипыСчетов.Расходы Тогда
			ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подразделение");
		КонецЕсли;
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Договор");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.ПризнакАванса");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.СуммаРасчетов");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Курс");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Кратность");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.СтавкаНДС");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорКредитаЗайма");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.ТипСуммы");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорДляЗачетаАвансаСПомощником");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорыАвтоЗачетаДолгов");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СчетОрганизации");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ВзносНаличнымиВБанк Тогда
		
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подотчетник");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ВидНалога");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ПериодРегистрации");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "КассаККМ");
		Если Корреспонденция.ТипСчета <> Перечисления.ТипыСчетов.Расходы Тогда
			ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подразделение");
		КонецЕсли;
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Договор");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.ПризнакАванса");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.СуммаРасчетов");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Курс");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Кратность");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.СтавкаНДС");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорКредитаЗайма");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.ТипСуммы");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорДляЗачетаАвансаСПомощником");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорыАвтоЗачетаДолгов");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Корреспонденция");
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОписьСдаваемыхДенег") Тогда
			ПроверяемыеРеквизиты.Добавить("НомерСумки");
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы Тогда
		
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подотчетник");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ВидНалога");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ПериодРегистрации");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "КассаККМ");
		Если Корреспонденция.ТипСчета <> Перечисления.ТипыСчетов.Расходы Тогда
			ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подразделение");
		КонецЕсли;
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Договор");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.ПризнакАванса");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.СуммаРасчетов");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Курс");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Кратность");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.СтавкаНДС");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорКредитаЗайма");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.ТипСуммы");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорДляЗачетаАвансаСПомощником");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорыАвтоЗачетаДолгов");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СчетОрганизации");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПеремещениеВКассуККМ Тогда
		
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подотчетник");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Корреспонденция");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подразделение");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ПериодРегистрации");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ВидНалога");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Договор");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.ПризнакАванса");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.СуммаРасчетов");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Курс");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Кратность");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.СтавкаНДС");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорКредитаЗайма");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.ТипСуммы");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорДляЗачетаАвансаСПомощником");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорыАвтоЗачетаДолгов");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СчетОрганизации");
		
	// Прочие расчеты
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику Тогда
		
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Корреспонденция");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ВидНалога");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подразделение");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ПериодРегистрации");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "КассаККМ");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Договор");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.ПризнакАванса");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.СуммаРасчетов");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Курс");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Кратность");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.СтавкаНДС");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.ТипСуммы");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорДляЗачетаАвансаСПомощником");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорыАвтоЗачетаДолгов");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СчетОрганизации");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам Тогда
		
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подотчетник");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Корреспонденция");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ВидНалога");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подразделение");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ПериодРегистрации");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "КассаККМ");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Договор");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.ПризнакАванса");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.СтавкаНДС");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорДляЗачетаАвансаСПомощником");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорыАвтоЗачетаДолгов");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СчетОрганизации");
		
		СуммаПлатежа = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		Если СуммаПлатежа <> СуммаДокумента Тогда
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Сумма документа: %1 %3, не соответствует сумме разнесенных платежей в табличной части: %2 %3.'"),
				СуммаДокумента, СуммаПлатежа, СокрЛП(ВалютаДенежныхСредств));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", , Отказ);
		КонецЕсли;
		
		ПроверитьДокументыПланирования = Ложь;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты Тогда
		
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подотчетник");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ВидНалога");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ПериодРегистрации");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "КассаККМ");
		Если Корреспонденция.ТипСчета <> Перечисления.ТипыСчетов.Расходы Тогда
			ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подразделение");
			ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Подразделение");
		КонецЕсли;
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Договор");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.ПризнакАванса");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.СуммаРасчетов");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Курс");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Кратность");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.СтавкаНДС");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.ТипСуммы");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорКредитаЗайма");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорДляЗачетаАвансаСПомощником");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорыАвтоЗачетаДолгов");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СчетОрганизации");
		
		СуммаПлатежа = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		Если СуммаПлатежа <> СуммаДокумента Тогда
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Сумма документа: %1 %3, не соответствует сумме разнесенных платежей в табличной части: %2 %3.'"),
				СуммаДокумента, СуммаПлатежа, СокрЛП(ВалютаДенежныхСредств));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", , Отказ);
		КонецЕсли;
		
		ПроверитьДокументыПланирования = Ложь;
		
	// Конец Прочие расчеты
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги Тогда
		
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подотчетник");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Корреспонденция");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подразделение");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ПериодРегистрации");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "КассаККМ");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Договор");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.ПризнакАванса");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.СуммаРасчетов");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Курс");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Кратность");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.СтавкаНДС");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорКредитаЗайма");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.ТипСуммы");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорДляЗачетаАвансаСПомощником");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорыАвтоЗачетаДолгов");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СчетОрганизации");
		
	Иначе
		
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подотчетник");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Корреспонденция");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Подразделение");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ПериодРегистрации");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "КассаККМ");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Договор");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.ПризнакАванса");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.СуммаРасчетов");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Курс");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.Кратность");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.СтавкаНДС");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорКредитаЗайма");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РасшифровкаПлатежа.ТипСуммы");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорДляЗачетаАвансаСПомощником");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорыАвтоЗачетаДолгов");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СчетОрганизации");
		
	КонецЕсли;
	
	// Платежный календарь
	Если ПроверитьДокументыПланирования Тогда
		Если ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь") Тогда
			
			ЕстьОшибка = Ложь;
			СуммаПлатежа = РасшифровкаПлатежа.Итог("СуммаПлатежа");
			СуммаДляСообщения = 0;
			
			Если СуммаПлатежа > СуммаДокумента Тогда
				ЕстьОшибка = Истина;
				СуммаДляСообщения = СуммаПлатежа;
			КонецЕсли;
			
			Если ЕстьОшибка Тогда
				ТекстСообщения = СтрШаблон(НСтр(
					"ru = 'Сумма документа: %1 %3 меньше суммы разнесенных платежей в табличной части: %2 %3.'"),
					СуммаДокумента, СуммаДляСообщения, СокрЛП(ВалютаДенежныхСредств));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", , Отказ);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьЗаполнениеКорреспонденцииПоДоговоруОбслуживания(Отказ);
	
	Если ПоложениеСтатьи = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Статья");
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.СтатьяДДС");
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимНаправлениямДеятельности.Получить()
		  И Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.Расходы Тогда
		
		НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
		
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(Контрагент)
		И НЕ Контрагент.ВестиРасчетыПоДоговорам
		И НЕ ЗначениеЗаполнено(СтрокаТЧ.Договор) Тогда
			СтрокаТЧ.Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
		КонецЕсли;
		
		// Прочие расчеты
		Если (ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам)
			И СтрокаТЧ.СтавкаНДС.Пустая() Тогда
			СтрокаТЧ.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			СтрокаТЧ.СуммаНДС = 0;
		КонецЕсли;
		// Конец Прочие расчеты
		
		// Признак аванса
		Если (ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику) Тогда
			СтрокаТЧ.ПризнакАванса = Ложь;
		КонецЕсли;
		// Конец Признак аванса
	КонецЦикла;
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ВзносНаличнымиВБанк Тогда
		Если РегистрыСведений.ПрименениеПереводовВПути.ИспользуютсяПереводыВПути(Дата,Константы.УчетПоКомпании.Компания(Организация)) Тогда
			Корреспонденция = ПланыСчетов.Управленческий.ПереводыВПути;
		Иначе
			Корреспонденция = СчетОрганизации.СчетУчета;
		КонецЕсли;
	КонецЕсли;
	
	// Зачет долгов. Авто
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И
		
		ВариантЗаполненияРасшифровки = Перечисления.ВариантыЗаполненияРасшифровкиПлатежа.Автоматически И
		ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику Тогда
		
		РасшифровкаПлатежа.Очистить();
		ЗаполнитьРасшифровкуПлатежаАвтоЗачетДолгов();
		
	КонецЕсли;
	
	РасчетыПроведениеДокументов.ОбработатьРасшифровкуПлатежаПередЗаписью(ЭтотОбъект);
	// Конец Зачет долгов. Авто
	
	РасчетыПроведениеДокументов.ОбработатьРеквизитыШапкаТабличнаяЧастьПередЗаписью(ЭтотОбъект);
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность()
		И НЕ ПометкаУдаления Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	// Конец МобильноеПриложение
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	// Взаиморасчеты
	РасчетыПроведениеДокументов.ИнициализироватьДополнительныеСвойстваДляПроведения(ЭтотОбъект, ДополнительныеСвойства, Отказ, Истина);
	// Конец Взаиморасчеты
	
	// Инициализация данных документа.
	Документы.РасходИзКассы.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Взаиморасчеты
	// Проверим, можно ли продолжать и не было ли отказа в процедурах
	// формирования движений по взаиморасчетам.
	Отказ = ДополнительныеСвойства.Свойство("Отказ") И ДополнительныеСвойства.Отказ;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// Конец Взаиморасчеты
	
	// Подготовка наборов записей.
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДенежныеСредства", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДвиженияДенежныхСредств", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДенежныеСредстваВКассахККМ", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДенежныеСредстваКПоступлению", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыСПоставщиками", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыСПокупателями", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыСПодотчетниками", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыСПерсоналом", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПлатежныйКалендарь", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДенежныеСредстваВРезерве", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаСчетовИЗаказов", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыКассовыйМетод", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыНераспределенные", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыОтложенные", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыПоНалогам", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	// Прочие расчеты
	ПрочиеРасчетыУНФ.ОтразитьРасчетыСПрочимиКонтрагентами(ДополнительныеСвойства, Движения, Отказ);
	ПрочиеРасчетыУНФ.ОтразитьРасчетыПоКредитамИЗаймам(ДополнительныеСвойства, Движения, Отказ);
	// Конец Прочие расчеты
	Сотрудники.ОтразитьРасчетыСФондамиПоСтраховымВзносам(ДополнительныеСвойства, Движения, Отказ);
	Сотрудники.ОтразитьНДФЛРасчетыНалоговыхАгентовСБюджетом(ДополнительныеСвойства, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗакупкиДляКУДиР", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаДокументов", ТаблицыДляДвижений, Движения, Отказ);
	
	// Биллинг
	Если ТаблицыДляДвижений.Свойство("ТаблицаВыполнениеДоговоровОбслуживания") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("ВыполнениеДоговоровОбслуживания", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли;
	
	// Запись наборов записей.
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Взаиморасчеты
	Если ДополнительныеСвойства.Свойство("ТаблицаДокументовДляИзменения")
		И ДополнительныеСвойства.ТаблицаДокументовДляИзменения.Количество() > 0 Тогда
		РасчетыПроведениеДокументов.ОбработатьТаблицуДокументовДляИзмененияПриОплате(ДополнительныеСвойства, Отказ);
	КонецЕсли;
	// Конец Взаиморасчеты
	
	// Контроль возникновения отрицательного остатка.
	Документы.РасходИзКассы.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа.
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей.
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Взаиморасчеты
	Если ДополнительныеСвойства.Свойство("ТаблицаДокументовДляИзменения")
		И ДополнительныеСвойства.ТаблицаДокументовДляИзменения.Количество() > 0 Тогда
		РасчетыПроведениеДокументов.ОбработатьТаблицуДокументовДляИзмененияПриОплате(ДополнительныеСвойства, Отказ);
	КонецЕсли;
	// Конец Взаиморасчеты
	
	// Контроль возникновения отрицательного остатка.
	Документы.РасходИзКассы.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
	// Подчиненный счет-фактура (полученный)
	Если Не Отказ Тогда
		СчетаФактурыУНФ.ОтменитьПроведениеПодчиненногоСчетаФактуры(Ссылка, Номер, Дата, ДополнительныеСвойства, Истина);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СчетаФактурыУНФ.ПриЗаписиДокументаОснованияСчетаФактуры(Ссылка, ДополнительныеСвойства, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеРасчеты

// Обработчик заполнения на основании документа ДоговорКредитаИЗайма.
//
// Параметры:
//	ДокументСсылкаДоговорКредитаИЗайма - ДокументСсылка.ДоговорКредитаИЗайма.
//	
Процедура ЗаполнитьПоДоговоруКредитаЗайма(ДокументСсылкаДоговорКредитаИЗайма) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаДоговорКредитаИЗайма);
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКредитаИЗайма.ДоговорЗаймаСотруднику);
	
	Запрос.Текст =  Справочники.СтавкиНДС.ПолучитьТекстЗапросаСозданияВТСтавкиНДС(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса())) +
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(&Ссылка) КАК Основание,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКредитаИЗайма.КредитПолученный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.РасчетыПоКредитам)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику)
	|	КОНЕЦ КАК ВидОперации,
	|	&Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.ВалютаРасчетов КАК ВалютаДенежныхСредств,
	|	ТаблицаДокумента.Сотрудник КАК Подотчетник,
	|	ТаблицаДокумента.Контрагент КАК Контрагент,
	|	&Ссылка КАК ДоговорКредитаЗайма,
	|	ТаблицаДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ТаблицаДокумента.СуммаДокумента КАК СуммаПлатежа,
	|	ВТСтавкиНДС.СтавкаНДС КАК СтавкаНДС,
	|	ЕСТЬNULL(КурсыВалютРасчетов.Курс, 1) КАК Курс,
	|	ЕСТЬNULL(КурсыВалютРасчетов.Кратность, 1) КАК Кратность,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.СуммаДокумента КАК ЧИСЛО(15, 2)) КАК СуммаРасчетов,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.СуммаДокумента * (1 - 1 / ((ЕСТЬNULL(ВТСтавкиНДС.СтавкаНДС.Ставка, 0) + 100) / 100)) КАК ЧИСЛО(15, 2)) КАК СуммаНДС
	|ИЗ
	|	Документ.ДоговорКредитаИЗайма КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютРасчетов
	|		ПО ТаблицаДокумента.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДС
	|		ПО (ТаблицаДокумента.Организация.ВидСтавкиНДСПоУмолчанию  = ВТСтавкиНДС.ВидСтавкиНДС)
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Организация, , Дата);
	
	РасшифровкаПлатежа.Очистить();
	Если ДокументСсылкаДоговорКредитаИЗайма.ВидДоговора = Перечисления.ВидыДоговоровКредитаИЗайма.ДоговорЗаймаСотруднику Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	Иначе
		СуммаДокумента = 0;
	КонецЕсли;
	
	Касса = Справочники.Кассы.ПолучитьКассуПоУмолчанию(Организация);
	
	ЗаполнитьПриложение(ДокументСсылкаДоговорКредитаИЗайма);
	
КонецПроцедуры // ЗаполнитьПоПоступлениеДСПлан()

// Процедура заполнения документа на основании договора кредита (займа).
//
// Параметры:
//	ДанныеЗаполнения - Структура.
//	
Процедура ЗаполнитьПоНачисленияПоКредитамИЗаймам(ДанныеЗаполнения) Экспорт
	
	Запрос = Новый Запрос;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения.Документ);
		Запрос.УстановитьПараметр("Сотрудник", ДанныеЗаполнения.Сотрудник);
		Запрос.УстановитьПараметр("Контрагент", ДанныеЗаполнения.Контрагент);
		Запрос.УстановитьПараметр("ДоговорКредитаЗайма", ДанныеЗаполнения.ДоговорКредитаЗайма);
		Запрос.УстановитьПараметр("ВалютаРасчетов", ДанныеЗаполнения.ВалютаРасчетов);
	ИначеЕсли ДанныеЗаполнения.Начисления.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
		Запрос.УстановитьПараметр("Сотрудник", ДанныеЗаполнения.Начисления[0].Сотрудник);
		Запрос.УстановитьПараметр("Контрагент", ДанныеЗаполнения.Начисления[0].Контрагент);
		Запрос.УстановитьПараметр("ДоговорКредитаЗайма", ДанныеЗаполнения.Начисления[0].ДоговорКредитаЗайма);
		Запрос.УстановитьПараметр("ВалютаРасчетов", ДанныеЗаполнения.Начисления[0].ВалютаРасчетов);
	Иначе
		Возврат;
	КонецЕсли;
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()));
	
	Запрос.Текст = Справочники.СтавкиНДС.ПолучитьТекстЗапросаСозданияВТСтавкиНДС(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса())) +
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(&Ссылка) КАК Основание,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.РасчетыПоКредитам) КАК ВидОперации,
	|	&Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
	|	ТаблицаДокумента.ВалютаРасчетов КАК ВалютаДенежныхСредств,
	|	ТаблицаДокумента.ДоговорКредитаЗайма КАК ДоговорКредитаЗайма,
	|	ТаблицаДокумента.ТипСуммы КАК ТипСуммы,
	|	ТаблицаДокумента.Сумма КАК СуммаПлатежа,
	|	ВТСтавкиНДС.СтавкаНДС КАК СтавкаНДС,
	|	ЕСТЬNULL(КурсыВалютРасчетов.Курс, 1) КАК Курс,
	|	ЕСТЬNULL(КурсыВалютРасчетов.Кратность, 1) КАК Кратность,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.Сумма КАК ЧИСЛО(15, 2)) КАК СуммаРасчетов,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.Сумма * (1 - 1 / ((ЕСТЬNULL(ВТСтавкиНДС.СтавкаНДС.Ставка, 0) + 100) / 100)) КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	&Контрагент КАК Контрагент,
	|	&Сотрудник КАК Сотрудник
	|ИЗ
	|	Документ.НачисленияПоКредитамИЗаймам.Начисления КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютРасчетов
	|		ПО ТаблицаДокумента.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДС
	|		ПО (ТаблицаДокумента.Ссылка.Организация.ВидСтавкиНДСПоУмолчанию  = ВТСтавкиНДС.ВидСтавкиНДС)
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.ДоговорКредитаЗайма = &ДоговорКредитаЗайма
	|	И ТаблицаДокумента.ВалютаРасчетов = &ВалютаРасчетов
	|	И ТаблицаДокумента.Контрагент = &Контрагент
	|	И ТаблицаДокумента.Сотрудник = &Сотрудник";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Организация, , Дата);
	
	РасшифровкаПлатежа.Очистить();
	
	НоваяСтрока = РасшифровкаПлатежа.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	Касса = Справочники.Кассы.ПолучитьКассуПоУмолчанию(Организация);
	СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	ЗаполнитьПриложение(ДокументОснование);
	
КонецПроцедуры // ЗаполнитьПоПоступлениеДСПлан()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПолеВыдать()
	
	Если ЗначениеЗаполнено(Выдать) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийРасходИзКассы.Поставщику
		И ВидОперации <> Перечисления.ВидыОперацийРасходИзКассы.Покупателю
		И ВидОперации <> Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент.НаименованиеПолное) Тогда
		Выдать = Контрагент.НаименованиеПолное;
	Иначе
		Выдать = Контрагент.Наименование;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьАналитикуПоЗаказу(Заказ)
	
	Аналитика = ДвижениеДенежныхСредствСервер.АналитикаДокументаДляДвиженияДенежныхСредств(Заказ);
	Проект = Аналитика.Проект;
	Подразделение = Аналитика.Подразделение;
	
	Для каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаРасшифровки.Заказ) Тогда
			Аналитика = ДвижениеДенежныхСредствСервер.АналитикаДокументаДляДвиженияДенежныхСредств(СтрокаРасшифровки.Заказ);
			СтрокаРасшифровки.Проект = Аналитика.Проект;
			СтрокаРасшифровки.Подразделение = Аналитика.Подразделение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеКорреспонденцииПоДоговоруОбслуживания(Отказ)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБиллинг") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Константы.БиллингВестиУчетРасходовПоДоговорамОбслуживания.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаправлениеДеятельности) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоОперацияПоДоговоруОбслуживания = ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы
		Или ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее;
	Если Не ЭтоОперацияПоДоговоруОбслуживания Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ЭтоДоговорОбслуживания
	|	И ДоговорыКонтрагентов.ДоговорОбслуживанияНаправлениеДеятельности = &НаправлениеДеятельности";
	Запрос.УстановитьПараметр("НаправлениеДеятельности", НаправлениеДеятельности);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		РазрешеноПроведениеКорреспонденции = Справочники.ДоговорыКонтрагентов.РазрешенаПродажаНоменклатурыПоДоговоруОбслуживания(
			Выборка.Ссылка, Корреспонденция);
		Если Не РазрешеноПроведениеКорреспонденции Тогда
			ТекстСообщения = НСтр("ru = 'Запрещено проводить незапланированные расходы по текущему договору обслуживания.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Корреспонденция", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПриложение(Основание)
	
	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;
	
	Приложение = Строка(Основание);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли