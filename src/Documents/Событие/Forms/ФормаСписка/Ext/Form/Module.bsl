
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	УстановитьУсловноеОформлениеПоСостояниямСобытий();
	
	УстановитьОтборТекущиеДела();
	УстановитьОтборТипСобытия();
	
	ЕстьДоступКЛидам = ПравоДоступа("Чтение",Метаданные.Справочники.Лиды);
	Если НЕ ЕстьДоступКЛидам Тогда
		Список.Параметры.УстановитьЗначениеПараметра("НетДоступаКЛидам",Истина);
	КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра("ОтборСпам", ОтборСпам);
	
	Если Элементы.СписокГруппаСоздать.Видимость Тогда
		Элементы.СписокГруппаСоздать.Видимость = ПравоДоступа("Добавление", Метаданные.Документы.Событие);
	КонецЕсли;
	
	Если Параметры.Свойство("Контакт") И ЗначениеЗаполнено(Параметры.Контакт) Тогда
		КонтекстКонтакт = Параметры.Контакт;
	КонецЕсли;
	УстановитьОтборПоКонтактам();
	
	Если Параметры.Свойство("ДокументОснование") И ЗначениеЗаполнено(Параметры.ДокументОснование) Тогда
		УстановитьОтборПоДокументОснование(Параметры.ДокументОснование);
	КонецЕсли;
	
	КонтекстноеОткрытие = Параметры.Свойство("ТекущиеДела") Или Параметры.Свойство("Контакт") Или Параметры.Свойство("ДокументОснование");
	
	// УНФ.ОтборыСписка
	РаботаСОтборами.ОпределитьПорядокПредопределенныхОтборов(ЭтотОбъект);
	// Конец УНФ.ОтборыСписка
	Если НЕ КонтекстноеОткрытие Тогда
		
		// УНФ.ОтборыСписка
		СтруктураИменПолейОтборов = Новый Структура("ОтборПериод", "НачалоСобытия");
		РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, Список,,,СтруктураИменПолейОтборов,ОтборТипСобытия);
		// Конец УНФ.ОтборыСписка
		
	ИначеЕсли ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		РаботаСОтборами.НастроитьПанельОтборовМобильныйКлиент(ЭтотОбъект,,,
			"ОтборКонтрагент,ОтборОтветственный,ОтборТипСобытия,ОтборСостояние,ОтборВажность,ОтборПроект,ОтборУчетнаяЗапись",,Истина);
	КонецЕсли;
	
	НастроитьГруппуПочтоваяСлужба();
	
	ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(ОтборПериод);
	
	// УНФ.ПанельКонтактнойИнформации
	КонтактнаяИнформацияПанельУНФ.ПриСозданииНаСервере(ЭтотОбъект, "КонтактнаяИнформация", "СписокКонтекстноеМеню");
	// Конец УНФ.ПанельКонтактнойИнформации
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Элементы.Список.РежимВыбора = Параметры.РежимВыбора;
	ЭтаФорма.РежимОткрытияОкна = ?(Параметры.РежимВыбора,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца, РежимОткрытияОкнаФормы.Независимый);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСоздатьЗапись", "Видимость", ПолучитьФункциональнуюОпцию("ПланироватьЗагрузкуРесурсовПредприятияЖурналЗаписи"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы И НЕ КонтекстноеОткрытие Тогда
		//УНФ.ОтборыСписка
		СохранитьНастройкиОтборов();
		//Конец УНФ.ОтборыСписка
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_СостоянияСобытий" Тогда
		УстановитьУсловноеОформлениеПоСостояниямСобытий();
	КонецЕсли;
	
	Если ИмяСобытия = ЭлектроннаяПочтаУНФКлиентСервер.ИмяСобытияУчетнаяЗаписьОбновлена() Тогда
		Если НЕ ПочтовыеСлужбыПодключены Тогда
			НастроитьГруппуПочтоваяСлужба();
			НачатьПроверкуПочтыНаКлиенте(ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения());
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = ЭлектроннаяПочтаУНФКлиентСервер.ИмяСобытияИзмененСоставПодключенныхУчетныхЗаписей() Тогда
		НастроитьГруппуПочтоваяСлужба();
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьСеансовыеДанные" Тогда
		ОбработатьРезультатЗапросаТокена(Параметр, );
	КонецЕсли;
	
	// УНФ.ПанельКонтактнойИнформации
	Если КонтактнаяИнформацияПанельУНФКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьПанельКонтактнойИнформацииСервер();
	КонецЕсли;
	// Конец УНФ.ПанельКонтактнойИнформации
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	КонтактнаяИнформацияПанельУНФКлиент.ПриАктивизацииДинамическогоСписка(ЭтотОбъект, Элемент, ТекущееСобытие,
		"Ссылка");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормы"
		+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	
	ЗаполняемоеЗначение = Новый Структура;
	Если Копирование Тогда
		ЗаполняемоеЗначение.Вставить("ТипСобытия", Элемент.ТекущиеДанные.ТипСобытия);
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.ТипСобытия)Тогда
		ЗаполняемоеЗначение.Вставить("ТипСобытия", Параметры.ТипСобытия);
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	
	Если ЗначениеЗаполнено(ОтборОснование) Тогда
		
		Отказ = Истина;
		
		ЗаполняемоеЗначение.Вставить("ОснованиеЗаполнения", ОтборОснование);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗаполняемоеЗначение);
		ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы);
		
	ИначеЕсли ЗначениеЗаполнено(КонтекстКонтакт) Тогда
		
		Отказ = Истина;
		
		ЗаполняемоеЗначение.Вставить("ОснованиеЗаполнения", КонтекстКонтакт);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗаполняемоеЗначение);
		ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы);
		
	Иначе
		
		ОтборПоКонтрагенту = ПолучитьОтборПоКонтрагенту();
		
		Если ОтборПоКонтрагенту <> Неопределено Тогда
			
			Отказ = Истина;
			
			ЗаполняемоеЗначение.Вставить("ОснованиеЗаполнения", ОтборПоКонтрагенту);
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗаполняемоеЗначение);
			ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормы"
		+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ОбновитьСкрепку(Строки);
	ОбновитьСвойстваПрочитанныхПисем(Строки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, , "НачалоСобытия");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ОтборКонтакты = Новый Массив;
	ОтборКонтакты.Добавить(ВыбранноеЗначение);
	
	ДополнитьОтборПоКонтрагентуЛидами(ОтборКонтакты, КонтекстКонтакт);
	ДополнитьОтборПоКонтрагентуКонтактами(ОтборКонтакты, ВыбранноеЗначение);
	
	УстановитьМеткуИОтборСписка("ТЧУчастники.Контакт", Элемент.Родитель.Имя, ОтборКонтакты, Строка(ВыбранноеЗначение));
	
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПропущенныеПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Неотвеченный", ОтборПропущенные, , ,
	ОтборПропущенные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСпамПриИзменении(Элемент)
	
	Список.Параметры.УстановитьЗначениеПараметра("ОтборСпам", ОтборСпам);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Ответственный", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипСобытияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ТипСобытия", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Состояние", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВажностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Важность", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПроектОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Проект", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборовНажатие(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьСобытие(Команда)
	
	ЗаполняемоеЗначение = Новый Структура;
	ЗаполняемоеЗначение.Вставить("ТипСобытия", ПредопределенноеЗначение("Перечисление.ТипыСобытий." + Сред(Команда.Имя, 8)));
	Если ЗначениеЗаполнено(ОтборОснование) Тогда
		ЗаполняемоеЗначение.Вставить("ОснованиеЗаполнения", ОтборОснование);
	ИначеЕсли ЗначениеЗаполнено(КонтекстКонтакт) Тогда
		ЗаполняемоеЗначение.Вставить("ОснованиеЗаполнения", КонтекстКонтакт);
	Иначе
		ЗаполняемоеЗначение.Вставить("ОснованиеЗаполнения", Новый Структура);
		Если ЗначениеЗаполнено(ОтборОтветственный) Тогда
			ЗаполняемоеЗначение.ОснованиеЗаполнения.Вставить("Ответственный", ОтборОтветственный);
		КонецЕсли;
		Если ЗначениеЗаполнено(ОтборСостояние) Тогда
			ЗаполняемоеЗначение.ОснованиеЗаполнения.Вставить("Состояние", ОтборСостояние);
		КонецЕсли;
		ОтборПоКонтрагенту = ПолучитьОтборПоКонтрагенту();
		Если ЗначениеЗаполнено(ОтборПоКонтрагенту) Тогда
			ЗаполняемоеЗначение.ОснованиеЗаполнения.Вставить("Контакт", ОтборПоКонтрагенту);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗаполняемоеЗначение);
	Если ЗначениеЗаполнено("КонтекстКонтакт") Тогда
		ПараметрыФормы.Вставить("КонтекстКонтакт", КонтекстКонтакт);
	КонецЕсли;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗаполняемоеЗначение);
	
	ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьКакПрочтенныеНепрочтенные(Команда)
	
	ПометитьКакПрочтенныеНепрочтенныеНаСервере(Элементы.Список.ВыделенныеСтроки);
	
	ОповеститьОбИзменении(Тип("ДокументСсылка.Событие"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьКакСпамНеСпам(Команда)
	
	ПометитьКакСпамНеСпамНаСервереБезКонтекста(Элементы.Список.ВыделенныеСтроки);
	
	ОповеститьОбИзменении(Тип("ДокументСсылка.Событие"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Список.ЭтоЗвонок", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.СписокОкончаниеСобытия.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Формат", "ДФ='Ч:мм:сс'; ДП=0:00:00");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПоСостояниямСобытий()
	
	// Раскраска списка
	СписокУдаляемыхЭлементов = Новый СписокЗначений;
	Для каждого ЭлементУсловногоОформления Из Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный" Тогда
			СписокУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для каждого Элемент Из СписокУдаляемыхЭлементов Цикл
		Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Удалить(Элемент.Значение);
	КонецЦикла;
	
	ВыборкаСостоянияСобытия = Справочники.СостоянияСобытий.Выбрать();
	Пока ВыборкаСостоянияСобытия.Следующий() Цикл
		
		ЦветФона = ВыборкаСостоянияСобытия.Цвет.Получить();
		Если ТипЗнч(ЦветФона) <> Тип("Цвет") Тогда
			Продолжить;
		КонецЕсли; 
		
		ЭлементУсловногоОформления = Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ВыборкаСостоянияСобытия.Ссылка;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветФона);
		ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
		ЭлементУсловногоОформления.Представление = "По состоянию события " + ВыборкаСостоянияСобытия.Наименование;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборТекущиеДела()
	
	Если НЕ Параметры.Свойство("ТекущиеДела") Тогда
		Возврат;
	КонецЕсли;
	
	АвтоЗаголовок = Ложь;
	Заголовок = НСтр("ru='События'");
	ТекДата = ТекущаяДатаСеанса();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ПометкаУдаления",
		Ложь
	);
	
	СписокСостояний = Новый Массив;
	СписокСостояний.Добавить(Справочники.СостоянияСобытий.Отменено);
	СписокСостояний.Добавить(Справочники.СостоянияСобытий.Завершено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияСобытий.Ссылка
		|ИЗ
		|	Справочник.СостоянияСобытий КАК СостоянияСобытий
		|ГДЕ
		|	СостоянияСобытий.ПометкаУдаления = ЛОЖЬ
		|	И НЕ СостоянияСобытий.Ссылка В(&СписокСостояний)";
	
	Запрос.УстановитьПараметр("СписокСостояний", СписокСостояний);
	Выборка = Запрос.Выполнить().Выбрать();
	СписокСостояний.Очистить();
	
	Пока Выборка.Следующий() Цикл
		СписокСостояний.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	СотрудникиПользователя = РегистрыСведений.СотрудникиПользователя.ПолучитьСотрудниковПользователя();
	
	РаботаСОтборами.ПрикрепитьМеткиОтбораИзМассива(ЭтотОбъект, "Состояние", "Состояния", СписокСостояний);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, "Состояние");
	
	РаботаСОтборами.ПрикрепитьМеткиОтбораИзМассива(ЭтотОбъект, "Ответственный", "Ответственные", СотрудникиПользователя);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, "Ответственный");
	
	Если Параметры.Свойство("ПросроченоВыполнение") Тогда
		
		Заголовок = Заголовок + ": " + НСтр("ru='просрочено выполнение'");
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"НачалоСобытия",
			'00010101',
			ВидСравненияКомпоновкиДанных.НеРавно
		);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"ОкончаниеСобытия",
			НачалоДня(ТекДата),
			ВидСравненияКомпоновкиДанных.Меньше
		);
		Элементы.ПредставлениеПериода.Видимость = Ложь;
		
	ИначеЕсли Параметры.Свойство("НаСегодня") Тогда
		
		Заголовок = Заголовок + ": " + НСтр("ru='на сегодня'");
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"НачалоСобытия",
			КонецДня(ТекДата),
			ВидСравненияКомпоновкиДанных.МеньшеИлиРавно
		);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"ОкончаниеСобытия",
			НачалоДня(ТекДата),
			ВидСравненияКомпоновкиДанных.БольшеИлиРавно
		);
		Элементы.ПредставлениеПериода.Видимость = Ложь;
		
	ИначеЕсли Параметры.Свойство("ВРаботе") Тогда
		
		Заголовок = Заголовок + ": " + НСтр("ru='в работе'");
		
	КонецЕсли;
	
	Если Элементы.ПредставлениеПериода.Видимость Тогда
		ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(ОтборПериод);
	КонецЕсли;
	
	РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборТипСобытия()
	
	Если НЕ ЗначениеЗаполнено(Параметры.ТипСобытия) Тогда
		Возврат;
	Иначе
		ОтборТипСобытия = Параметры.ТипСобытия;
	КонецЕсли;
	
	АвтоЗаголовок = Ложь;
	Элементы.ОтборТипСобытия.Видимость = Ложь;
	Элементы.СписокГруппаСоздать.Видимость = Ложь;
	Элементы.ФормаГруппаСоздать.Видимость = Истина;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "ТипСобытия", Параметры.ТипСобытия);
	
	Элементы.ГруппаПочтоваяСлужба.Видимость = Параметры.ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо;
	Элементы.УчетнаяЗапись.Видимость= Элементы.ГруппаПочтоваяСлужба.Видимость;
	Элементы.ФормаУчетныеЗаписи.Видимость = Элементы.ГруппаПочтоваяСлужба.Видимость;
	Элементы.ФормаПометитьКакПрочтенныеНепрочтенные.Видимость = Элементы.ГруппаПочтоваяСлужба.Видимость;
	Элементы.ЗагрузитьПредыдущиеПисьма.Видимость = Элементы.ГруппаПочтоваяСлужба.Видимость;
	Элементы.ВходящееИсходящее.Видимость = Параметры.ТипСобытия <> Перечисления.ТипыСобытий.СообщениеSMS;
	Элементы.Проекты.Видимость = Не (Параметры.ТипСобытия = Перечисления.ТипыСобытий.СообщениеSMS
		Или Параметры.ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо);
	
	Если Параметры.ТипСобытия = Перечисления.ТипыСобытий.ТелефонныйЗвонок Тогда
		Заголовок = НСтр("ru='События: телефонные звонки'");
	ИначеЕсли Параметры.ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		Заголовок = НСтр("ru='События: электронные письма'");
	ИначеЕсли Параметры.ТипСобытия = Перечисления.ТипыСобытий.СообщениеSMS Тогда
		Заголовок = НСтр("ru='События: сообщения SMS'");
	ИначеЕсли Параметры.ТипСобытия = Перечисления.ТипыСобытий.ЛичнаяВстреча Тогда
		Заголовок = НСтр("ru='События: личные встречи'");
	ИначеЕсли Параметры.ТипСобытия = Перечисления.ТипыСобытий.Прочее Тогда
		Заголовок = НСтр("ru='События: прочие'");
	ИначеЕсли Параметры.ТипСобытия = Перечисления.ТипыСобытий.Запись Тогда
		Заголовок = НСтр("ru='События: запись'");
		Элементы.СписокТема.Видимость = Ложь;
		Элементы.ОтборВходящееИсходящее.Видимость = Ложь;
		Элементы.ОтборПроект.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоКонтактам()
	
	Если Не ЗначениеЗаполнено(КонтекстКонтакт) Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ОтборУчастники", Ложь);
		Список.Параметры.УстановитьЗначениеПараметра("ОтобранныеКонтакты", Новый Массив);
		Возврат;
	КонецЕсли;
	
	ОтборКонтакты = Новый Массив;
	ОтборКонтакты.Добавить(КонтекстКонтакт);
	
	Если ТипЗнч(КонтекстКонтакт) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДополнитьОтборПоКонтрагентуЛидами(ОтборКонтакты, КонтекстКонтакт);
		ДополнитьОтборПоКонтрагентуКонтактами(ОтборКонтакты, КонтекстКонтакт);
	КонецЕсли;
	
	Если ТипЗнч(КонтекстКонтакт) = Тип("СправочникСсылка.Лиды") Тогда
		ДополнитьОтборПоЛидуКонтактамиЛида(ОтборКонтакты, КонтекстКонтакт);
	КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра("ОтборУчастники", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("ОтобранныеКонтакты", ОтборКонтакты);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьОтборПоКонтрагентуЛидами(Отбор, Контрагент)
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.Лиды) Тогда
		Возврат;
	КонецЕсли;
	
	ЛидОснование = Справочники.Контрагенты.ЛидОснование(Контрагент);
	
	Если НЕ ЗначениеЗаполнено(ЛидОснование) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор.Добавить(ЛидОснование);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьОтборПоКонтрагентуКонтактами(Отбор, Контрагент)
	
	СвязанныеКонтакты = Справочники.Контрагенты.СвязанныеКонтакты(Контрагент);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Отбор, СвязанныеКонтакты);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьОтборПоЛидуКонтактамиЛида(ОтборКонтакты, КонтекстКонтакт);
	
	КонтактыЛида = Справочники.КонтактыЛидов.КонтактыЛида(КонтекстКонтакт);
	Для Каждого Контакт Из КонтактыЛида Цикл
		ОтборКонтакты.Добавить(Контакт.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоДокументОснование(ДокументОснование)
	
	ОтборОснование = ДокументОснование;
	СобытияОснования = СобытияОснованияДокумента(ОтборОснование);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ДокументОснование", ОтборОснование);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "СобытияОснования", СобытияОснования);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОтборПоКонтрагенту()
	
	НайденныеСтроки = ДанныеМеток.НайтиСтроки(Новый Структура("ИмяПоляОтбора", "ТЧУчастники.Контакт"));
	ОтборПоКонтрагенту = Неопределено;
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если ТипЗнч(НайденнаяСтрока.Метка) = Тип("СписокЗначений") Тогда
			Для Каждого ЭлементСписка Из НайденнаяСтрока.Метка Цикл
				Если ТипЗнч(ЭлементСписка.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда
					ОтборПоКонтрагенту = ЭлементСписка.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОтборПоКонтрагенту;
	
КонецФункции

&НаСервере
Функция СобытияОснованияДокумента(Документ)
	
	МетаданныеДокумента = Документ.Метаданные();
	СобытияОснования = Новый СписокЗначений;
	
	Для Каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
		Если НЕ Реквизит.Тип.СодержитТип(Тип("ДокументСсылка.Событие")) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеРеквизита = Документ[Реквизит.Имя];
		Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СобытияОснования.НайтиПоЗначению(ЗначениеРеквизита) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СобытияОснования.Добавить(ЗначениеРеквизита);
	КонецЦикла;
	
	Для Каждого ТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
		
		СтрРеквизитов = "";
		Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
			Если НЕ Реквизит.Тип.СодержитТип(Тип("ДокументСсылка.Событие")) Тогда
				Продолжить;
			КонецЕсли;
			СтрРеквизитов = СтрРеквизитов + ?(СтрРеквизитов = "", "", ", ") + Реквизит.Имя;
		КонецЦикла;
		
		Если СтрРеквизитов = "" Тогда
			Продолжить;
		КонецЕсли;
		
		СодержимоеТЧ = Документ[ТЧ.Имя].Выгрузить(,СтрРеквизитов);
		СодержимоеТЧ.Свернуть(СтрРеквизитов);
		Для Каждого КолонкаТЧ Из СодержимоеТЧ.Колонки Цикл
			Для Каждого СтрокаТЧ Из СодержимоеТЧ Цикл
				ЗначениеРеквизита = СтрокаТЧ[КолонкаТЧ.Имя];
				Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					Продолжить;
				КонецЕсли;
				Если СобытияОснования.НайтиПоЗначению(ЗначениеРеквизита) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СобытияОснования.Добавить(ЗначениеРеквизита);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СобытияОснования;
	
КонецФункции

&НаКлиенте
Процедура УправлениеФормой()
	
	Элементы.Контрагенты.Видимость = НЕ ЗначениеЗаполнено(КонтекстКонтакт);
	
	Элементы.ОтборПропущенные.Видимость = ОтборТипСобытия = ПредопределенноеЗначение("Перечисление.ТипыСобытий.ТелефонныйЗвонок")
		И ОтборВходящееИсходящее = ПредопределенноеЗначение("Перечисление.ВходящееИсходящееСобытие.Входящее");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьСкрепку(СтрокиСписка)
	
	Если СтрокиСписка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтключенаКолонкаЕстьФайлы(СтрокиСписка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НаличиеФайлов.ОбъектСФайлами КАК Событие,
	|	НаличиеФайлов.ЕстьФайлы КАК ЕстьФайлы
	|ИЗ
	|	РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
	|ГДЕ
	|	НаличиеФайлов.ОбъектСФайлами В(&События)
	|	И НаличиеФайлов.ЕстьФайлы");
	Запрос.УстановитьПараметр("События", СтрокиСписка.ПолучитьКлючи());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокиСписка[Выборка.Событие].Данные.ЕстьФайлы = 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтключенаКолонкаЕстьФайлы(СтрокиСписка)
	
	Для Каждого ТекСтрока Из СтрокиСписка Цикл
		Возврат Не ТекСтрока.Значение.Данные.Свойство("ЕстьФайлы");
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбновитьСвойстваПрочитанныхПисем(СтрокиСписка)
	
	Если СтрокиСписка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПросмотрСобытий.Событие КАК Событие,
	|	ПросмотрСобытий.Просмотрено КАК Просмотрено
	|ИЗ
	|	РегистрСведений.ПросмотрСобытий КАК ПросмотрСобытий
	|ГДЕ
	|	ПросмотрСобытий.Событие В(&События)");
	Запрос.УстановитьПараметр("События", СтрокиСписка.ПолучитьКлючи());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Просмотрено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаСписка = СтрокиСписка[Выборка.Событие];
		Для Каждого ТекЯчейка Из СтрокаСписка.Оформление Цикл
			ТекЯчейка.Значение.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина));
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПанельКонтактнойИнформации

// УНФ.ПанельКонтактнойИнформации
&НаКлиенте
Процедура Подключаемый_ОбработатьАктивизациюСтрокиСписка()
	
	ОбновитьПанельКонтактнойИнформацииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПанельКонтактнойИнформацииСервер()
	
	Если НЕ ЗначениеЗаполнено(ТекущееСобытие) Тогда
		КонтактнаяИнформацияПанельУНФ.ОбновитьДанныеПанели(ЭтотОбъект, ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Документ.Событие.Участники КАК СобытиеУчастники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО СобытиеУчастники.Контакт = Контрагенты.Ссылка
	|ГДЕ
	|	СобытиеУчастники.Ссылка = &Событие";
	
	Запрос.УстановитьПараметр("Событие", ТекущееСобытие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекущийВладелецКИ = Выборка.Контрагент;
	Иначе
		ТекущийВладелецКИ = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	КонтактнаяИнформацияПанельУНФ.ОбновитьДанныеПанели(ЭтотОбъект, ТекущийВладелецКИ);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииВыбор(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(Элемент)
	
	КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(ЭтотОбъект, Элемент);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыполнитьКоманду(Команда)
	
	КонтактнаяИнформацияПанельУНФКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, ТекущийВладелецКИ);
	
КонецПроцедуры
// Конец УНФ.ПанельКонтактнойИнформации

#КонецОбласти

#Область Отборы

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения = "" Тогда
		ПредставлениеЗначения = Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, ИмяПоляОтбораСписка);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_") + 1);
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Список, МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект,,, ОтборТипСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборы(Команда)
	
	ИмяРеквизитаСписка = "Список";
	ИмяТЧДанныеМеток = "ДанныеМеток";
	ИмяТЧДанныеОтборов = "ДанныеОтборов";
	ИмяГруппыОтборов = "ГруппаОтборы";
	ИмяПредопределенныеОтборыПоУмолчанию = "ПредопределенныеОтборыПоУмолчанию";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизитаСписка", ИмяРеквизитаСписка);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеМеток", ИмяТЧДанныеМеток);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеОтборов", ИмяТЧДанныеОтборов);
	ДополнительныеПараметры.Вставить("ИмяГруппыОтборов", ИмяГруппыОтборов);
	ДополнительныеПараметры.Вставить("ИмяПредопределенныеОтборыПоУмолчанию", ИмяПредопределенныеОтборыПоУмолчанию);
	
	ОтборыДляИсключения = Новый Массив;
	ОтборыДляИсключения.Добавить("Просмотрено");
	ОтборыДляИсключения.Добавить("Неотвеченный");
	ДополнительныеПараметры.Вставить("ОтборыДляИсключения", ОтборыДляИсключения);
	
	РаботаСОтборамиКлиент.НастроитьОтборыНажатие(ЭтотОбъект, ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры), ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры)
	
	Возврат РаботаСОтборами.ПараметрыДляОткрытияФормыСНастройкамиОтборов(ЭтотОбъект, ДополнительныеПараметры);
	
КонецФункции

&НаКлиенте
Процедура НастройкаОтборовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОтборовЗавершениеНаСервере(Результат.АдресВыбранныеОтборы, Результат.АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура НастройкаОтборовЗавершениеНаСервере(АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ИмяРеквизитаСписка = "Список";
		ИмяТЧДанныеМеток = "ДанныеМеток";
		ИмяТЧДанныеОтборов = "ДанныеОтборов";
	Иначе
		ИмяРеквизитаСписка = ДополнительныеПараметры.ИмяРеквизитаСписка;
		ИмяТЧДанныеМеток = ДополнительныеПараметры.ИмяТЧДанныеМеток;
		ИмяТЧДанныеОтборов = ДополнительныеПараметры.ИмяТЧДанныеОтборов;
	КонецЕсли;
	
	РаботаСОтборами.НастройкаОтборовЗавершение(ЭтотОбъект, АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОтборПриИзменении(Элемент)
	
	Подключаемый_ОтборПриИзмененииНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборПриИзмененииНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	РаботаСОтборами.Подключаемый_ОтборПриИзменении(ЭтотОбъект, ЭлементИмя, ЭлементРодительИмя);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОтборОчистка(Элемент)
	
	Подключаемый_ОтборОчисткаНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборОчисткаНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	РаботаСОтборами.Подключаемый_ОтборОчистка(ЭтотОбъект, ЭлементИмя);

КонецПроцедуры

#КонецОбласти

#Область ЭлектроннаяПочтаУНФ

&НаКлиенте
Процедура ОтборВходящееИсходящееПриИзменении(Элемент)
	
	УстановитьОтборВходящееИсходящее();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборУчетнаяЗаписьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("УчетнаяЗапись", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПриОшибкеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "повторить" Тогда
		
		СтандартнаяОбработка = Ложь;
		НачатьПроверкуПочтыНаКлиенте(РежимЗагрузки);
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПочту(Команда)
	
	Если Не ПочтовыеСлужбыПодключены Тогда
		Возврат;
	КонецЕсли;
	
	НачатьПроверкуПочтыНаКлиенте(ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПредыдущиеПисьма(Команда)
	
	Если Не ПочтовыеСлужбыПодключены Тогда
		Возврат;
	КонецЕсли;
	
	НачатьПроверкуПочтыНаКлиенте(ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиПредыдущиеСообщения());
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьПочтовуюСлужбуОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "IMAP" Тогда
		ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.ФормаОбъекта");
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Gmail" Тогда
		НачатьАвторизацию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборВходящееИсходящее()
	
	Если ЗначениеЗаполнено(ОтборВходящееИсходящее) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ВходящееИсходящее",
			ОтборВходящееИсходящее);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "ВходящееИсходящее");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьГруппуПочтоваяСлужба()
	
	Если ЗначениеЗаполнено(Параметры.ТипСобытия)
		И Параметры.ТипСобытия <> Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПодключитьУчетнуюЗапись.Видимость = ПравоДоступа("Добавление", Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты);
	
	ПочтовыеСлужбыПодключены = РегистрыСведений.УчетныеЗаписиПользователя.ПочтовыеСлужбыПодключены();
	
	Если ПочтовыеСлужбыПодключены Тогда
		Элементы.ГруппаПочтоваяСлужба.Видимость = Истина;
		Элементы.ГруппаПочтоваяСлужба.ТекущаяСтраница = Элементы.СтраницаЗагрузитьПочту;
		Элементы.ГруппаУчетныеЗаписиОтключены.Видимость = ВидимостьГруппыУчетныеЗаписиОтключены();
		Если ЗначениеЗаполнено(КонтекстКонтакт) Тогда
			Команды.ПроверитьПочту.Заголовок = НСтр("ru = 'Загрузить переписку'");
			Команды.ПроверитьПочту.Подсказка = СтрШаблон(НСтр("ru = 'Загрузить переписку с ""%1""'"), КонтекстКонтакт);
			Элементы.ЗагрузитьПредыдущиеПисьма.Видимость = Ложь;
		Иначе
			Элементы.ЗагрузитьПредыдущиеПисьма.Видимость = Истина;
		КонецЕсли;
	ИначеЕсли РегистрыСведений.УчетныеЗаписиПользователя.ПочтовыеСлужбыДоступны() Тогда
		Элементы.ГруппаПочтоваяСлужба.Видимость = Истина;
		Элементы.ГруппаПочтоваяСлужба.ТекущаяСтраница = Элементы.СтраницаНастроитьУчетныеЗаписи;
	Иначе
		Элементы.ГруппаПочтоваяСлужба.Видимость = Элементы.ПодключитьУчетнуюЗапись.Видимость;
		Элементы.ГруппаПочтоваяСлужба.ТекущаяСтраница = Элементы.СтраницаПодключитьПочтовуюСлужбу;
		Элементы.ЗагрузитьПредыдущиеПисьма.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВидимостьГруппыУчетныеЗаписиОтключены()
	
	Для Каждого ТекНастройка Из РегистрыСведений.УчетныеЗаписиПользователя.НастройкаПользователя(Пользователи.ТекущийПользователь()) Цикл
		
		КоличествоОшибокПодключения = РегистрыСведений.ОшибкиПодключенияЭлектроннойПочтыУНФ.КоличествоОшибокПодключения(ТекНастройка.УчетнаяЗапись);
		Если КоличествоОшибокПодключения = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекНастройка.ЗагружатьПочту Тогда
			Продолжить;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура НачатьПроверкуПочтыНаКлиенте(Режим)
	
	РежимЗагрузки = Режим;
	
	Элементы.ГруппаПочтоваяСлужба.ТекущаяСтраница = Элементы.СтраницаВыполняетсяСинхронизация;
	Прогресс = "";
	Элементы.ДекорацияПрогресс.Заголовок = ЗаголовокПрогресса(Режим, КонтекстКонтакт);
	ПодключитьОбработчикОжидания("ЗагрузитьЗаголовкиСообщений", 0.1, Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокПрогресса(Режим, Контакт)
	
	Если ЗначениеЗаполнено(Контакт) Тогда
		Возврат НСтр("ru = 'Загрузка переписки'");
	КонецЕсли;
	
	Если Режим = ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения() Тогда
		Возврат НСтр("ru = 'Проверка почты'");
	КонецЕсли;
	
	Если Режим = ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения() Тогда
		Возврат НСтр("ru = 'Загрузка предыдущих сообщений'");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьЗаголовкиСообщений()
	
	Задание = ЗаданиеЗагрузитьЗаголовкиСообщенийНаСервере();
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеЗадания", ЭтотОбъект);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ОтобразитьПрогресс", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Задание, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПрогресс(СостояниеЗадания, Параметры) Экспорт
	
	Если ПустаяСтрока(Прогресс) Тогда
		Прогресс = ЗаголовокПрогресса(РежимЗагрузки, КонтекстКонтакт);
	КонецЕсли;
	
	Если ТипЗнч(СостояниеЗадания) = Тип("Структура") 
		И ТипЗнч(СостояниеЗадания.Прогресс) = Тип("Структура") Тогда
		ПрогрессТекст = "";
		СостояниеЗадания.Прогресс.Свойство("Текст", ПрогрессТекст);
		Если ЗначениеЗаполнено(ПрогрессТекст) Тогда
			Прогресс = ПрогрессТекст;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДекорацияПрогресс.Заголовок = Прогресс;
	
КонецПроцедуры

&НаСервере
Функция ЗаданиеЗагрузитьЗаголовкиСообщенийНаСервере()
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("РежимЗагрузки", РежимЗагрузки);
	ПараметрыПроцедуры.Вставить("ОтборПоКонтакту", КонтекстКонтакт);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
	"ЭлектроннаяПочтаУНФ.ЗагрузитьПочтуПоКомандеПользователя",
	ПараметрыПроцедуры,
	ПараметрыВыполнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗавершениеЗадания(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Результат.Свойство("Статус") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		Элементы.ГруппаПочтоваяСлужба.ТекущаяСтраница = Элементы.СтраницаПроизошлаОшибка;
		Элементы.ПроизошлаОшибка.Подсказка = Результат.ПодробноеПредставлениеОшибки;
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ОбработатьРезультатВыполненияЗаданияНаСервере(Результат.АдресРезультата);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатВыполненияЗаданияНаСервере(АдресРезультата)
	
	НастроитьГруппуПочтоваяСлужба();
	
	Элементы.Список.Обновить();
	РезультатыЗагрузкиЗаголовков = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если ТипЗнч(РезультатыЗагрузкиЗаголовков) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	ЗагруженоПисем = 0;
	СсылкаНаПоследнееЗагруженноеСобытие = Документы.Событие.ПустаяСсылка();
	
	Для Каждого ТекРезультат Из РезультатыЗагрузкиЗаголовков Цикл
		ЗагруженоПисем = ЗагруженоПисем + ТекРезультат.Загружено;
		СсылкаНаПоследнееЗагруженноеСобытие = ТекРезультат.СсылкаНаСобытие;
	КонецЦикла;
	
	ШаблонСообщения = НСтр("ru = ';%1 письмо;;%1 письма;%1 писем;%1 письма'");
	ЗагруженоПрописью = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
	ШаблонСообщения, ЗагруженоПисем, ВидЧисловогоЗначения.Количественное, "ЧН=0");
	
	Элементы.РезультатЗагрузки.Заголовок = СтрШаблон(НСтр("ru = 'Загружено %1'"), ЗагруженоПрописью);
	
	Если ЗначениеЗаполнено(СсылкаНаПоследнееЗагруженноеСобытие) Тогда
		Элементы.Список.ТекущаяСтрока = СсылкаНаПоследнееЗагруженноеСобытие;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗаписьУчетнойЗаписи(Результат, Параметры) Экспорт
	
	НачатьПроверкуПочтыНаКлиенте(ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения());
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьАвторизацию()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатЗапросаТокена", ЭтотОбъект);
	ОткрытьФорму(
	"РегистрСведений.СеансовыеДанныеGoogle.Форма.ЗапросТокена",
	Новый Структура("ОписанияОбластейДоступа", ОбменСGoogleКлиентСервер.ОписанияОбластейДоступаПочта()),
	ЭтаФорма,,,,
	ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗапросаТокена(Результат, Параметры) Экспорт
	
	Если ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьУчетнуюЗаписьGoogleНаСервере(Результат);
	
	НачатьПроверкуПочтыНаКлиенте(ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения());
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУчетнуюЗаписьGoogleНаСервере(СеансовыеДанные)
	
	УчетнаяЗаписьGoogle = ОбменСGoogle.СоздатьУчетнуюЗаписьGoogle(СеансовыеДанные);
	
	РегистрыСведений.СеансовыеДанныеGoogle.ЗаписатьСеансовыеДанные(
	СеансовыеДанные,
	Пользователи.ТекущийПользователь(),
	Перечисления.ОбластиДоступаGoogle.Почта,
	УчетнаяЗаписьGoogle);
	
	НастроитьГруппуПочтоваяСлужба();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПометитьКакПрочтенныеНепрочтенныеНаСервере(Знач События)
	
	Если Не ЗначениеЗаполнено(События) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСобытие.Ссылка КАК СобытиеСсылка,
	|	ЕСТЬNULL(ПросмотрСобытий.Просмотрено, ИСТИНА) КАК Просмотрено
	|ИЗ
	|	Документ.Событие КАК ДокументСобытие
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПросмотрСобытий КАК ПросмотрСобытий
	|		ПО (ДокументСобытие.Ссылка = ПросмотрСобытий.Событие)
	|ГДЕ
	|	ДокументСобытие.Ссылка В(&МассивСобытий)
	|	И ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.ЭлектронноеПисьмо)");
	Запрос.УстановитьПараметр("МассивСобытий", События);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Просмотрено Тогда
			РегистрыСведений.ПросмотрСобытий.ДобавитьОжиданиеПросмотра(Выборка.СобытиеСсылка);
		Иначе
			РегистрыСведений.ПросмотрСобытий.ОтметитьКакПросмотрено(Выборка.СобытиеСсылка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПометитьКакСпамНеСпамНаСервереБезКонтекста(Знач События)
	
	Если Не ЗначениеЗаполнено(События) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСобытие.Ссылка КАК СобытиеСсылка,
	|	ЕСТЬNULL(СпамСобытий.Спам, ЛОЖЬ) КАК Спам
	|ИЗ
	|	Документ.Событие КАК ДокументСобытие
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпамСобытий КАК СпамСобытий
	|		ПО ДокументСобытие.Ссылка = СпамСобытий.Событие
	|ГДЕ
	|	ДокументСобытие.Ссылка В(&МассивСобытий)
	|	И ДокументСобытие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.ЭлектронноеПисьмо)");
	Запрос.УстановитьПараметр("МассивСобытий", События);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Спам Тогда
			РегистрыСведений.СпамСобытий.УбратьИзСпама(Выборка.СобытиеСсылка);
		Иначе
			РегистрыСведений.СпамСобытий.ПометитьКакСпам(Выборка.СобытиеСсылка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
