
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Документы.Событие.ПроверитьВозможностьВводаПоЛиду(Объект, Параметры.ЗначенияЗаполнения, Отказ);
	КонецЕсли;
	
	Элементы.КонтактыКонтакт.ОграничениеТипа = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	Элементы.Тема.ОграничениеТипа			 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200));
	
	ДоступнаРаботаСЛидами = ПравоДоступа("Добавление", Метаданные.Справочники.Лиды);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСоздатьКонтрагент", "Видимость",
		Объект.ТипСобытия = Перечисления.ТипыСобытий.ТелефонныйЗвонок);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСоздатьКонтакт", "Видимость",
		Объект.ТипСобытия = Перечисления.ТипыСобытий.ТелефонныйЗвонок);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСоздатьЛид", "Видимость",
		Объект.ТипСобытия = Перечисления.ТипыСобытий.ТелефонныйЗвонок И ДоступнаРаботаСЛидами);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПривязатьКСуществующемуКонтрагенту",
		"Видимость", Объект.ТипСобытия = Перечисления.ТипыСобытий.ТелефонныйЗвонок);
	
	УстановитьУсловноеОформлениеФормы();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДатаДокумента = Объект.Дата;
	Иначе
		ПриСозданииПриЧтенииНаСервере(Объект);
		АвтоЗаголовок = Ложь;
		Заголовок = СтрШаблон(
		НСтр("ru = 'Событие: %1 (создание)'"),
		Объект.ТипСобытия);
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ОповеститьРабочийКалендарь = Ложь;
	
	СобытияУНФКлиентСервер.ЗаполнитьСписокВыбораВремени(Элементы.НачалоСобытияВремя);
	СобытияУНФКлиентСервер.ЗаполнитьСписокВыбораВремени(Элементы.ОкончаниеСобытияВремя);
	
	Если Параметры.ЗначенияЗаполнения.Свойство("ДанныеЗаписиКалендаря") Тогда
		Параметры.ЗначенияЗаполнения.ДанныеЗаписиКалендаря.Свойство("КолонкаКалендаря", КолонкаКалендаря);
	КонецЕсли;
	
	ОбязательноЗаполнятьИсточникВЗвонках = 
		РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательностьЗаполненияРеквизита("ТелефонныйЗвонок", "ИсточникПривлечения")
		И Объект.ТипСобытия = Перечисления.ТипыСобытий.ТелефонныйЗвонок;
		
	ОбязательноЗаполнятьИсточникВоВстречах = 
		РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательностьЗаполненияРеквизита("Встреча", "ИсточникПривлечения")
		И Объект.ТипСобытия = Перечисления.ТипыСобытий.ЛичнаяВстреча;
		
	ОбязательноЗаполнятьИсточникВПрочихСобытиях = 
		РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательностьЗаполненияРеквизита("ПрочиеСобытия", "ИсточникПривлечения")
		И Объект.ТипСобытия = Перечисления.ТипыСобытий.Прочее;

	// История темы для автоподбора
	ЗагрузитьИсториюТемСтрокой();
	
	СформироватьПредставлениеПродолжительности(ЭтотОбъект);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	//
	НастроитьФормуМобильныйКлиент();
	
	НачалоСобытияПередИзменением = Объект.НачалоСобытия;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если СобытиеПривязаноКЗвонку 
		И ИсточникВыбора.ИмяФормы = "Справочник.Контрагенты.Форма.ФормаЭлемента" 
		И НЕ ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Контрагент = ВыбранноеЗначение;
		КонтрагентПриИзмененииСервер();
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(СопоставитьКонтактКакСвязаться) Тогда
		СтандартнаяОбработка = Ложь;
		СопоставитьКонтактКонтактнуюИнформацию(НовыйОбъект, СопоставитьКонтактКакСвязаться);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииПриЧтенииНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("Запись" + РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(
		ЭтотОбъект.ИмяФормы));
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Модифицированность Тогда
		ОповеститьРабочийКалендарь = Истина;
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("КолонкаКалендаря", КолонкаКалендаря);
	ЗаписатьРеквизиты(ТекущийОбъект);
	
	СохранитьТемуСобытияВИсторииАвтоподбора(ТекущийОбъект.Тема, ИсторияТемСтрокой);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	Заголовок = "";
	АвтоЗаголовок = Истина;
	
	// УНФ.КалендарьСотрудника
	Оповестить("Запись_ИсточникЗаписейКалендаряСотрудника");
	// Конец УНФ.КалендарьСотрудника
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьДанныеЗвонкаПослеЗаписиНаСервере();
	ПриСозданииПриЧтенииНаСервере(ТекущийОбъект);
	
	// Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);	
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Для Каждого СтрокаКонтакты Из Контакты Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаКонтакты.Контакт) И НЕ ЗначениеЗаполнено(СтрокаКонтакты.КакСвязаться) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение", "Контакт", Контакты.Индекс(СтрокаКонтакты) + 1, "Участники"),
				,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Контакты[%1].Контакт", Контакты.Индекс(СтрокаКонтакты)),
				,
				Отказ
			);
		КонецЕсли;
	КонецЦикла;
	
	ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ОповеститьРабочийКалендарь Тогда
		Оповестить("ИзмененоСобытие", Объект.Ответственный);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если ДатаДокумента <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоСобытияВремяПриИзменении(Элемент)
	
	УправлениеНебольшойФирмойКлиент.ПересчитатьДатуОкончания(ЭтотОбъект, "НачалоСобытия", "ОкончаниеСобытия");
	СформироватьПредставлениеПродолжительности(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоСобытияВремяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыбранноеЗначение = НачалоДня(Объект.НачалоСобытия) + (ВыбранноеЗначение - НачалоДня(ВыбранноеЗначение));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоСобытияДатаПриИзменении(Элемент)
	
	УправлениеНебольшойФирмойКлиент.ПересчитатьДатуОкончания(ЭтотОбъект, "НачалоСобытия", "ОкончаниеСобытия");
	СформироватьПредставлениеПродолжительности(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеСобытияВремяПриИзменении(Элемент)
	
	СформироватьПредставлениеПродолжительности(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеСобытияВремяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыбранноеЗначение = НачалоДня(Объект.ОкончаниеСобытия) + (ВыбранноеЗначение - НачалоДня(ВыбранноеЗначение));
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеСобытияДатаПриИзменении(Элемент)
	
	СформироватьПредставлениеПродолжительности(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Тип") Тогда
		ОпределитьТипПоляКонтрагент(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентСоздание(Элемент, СтандартнаяОбработка)
	
	Если НЕ СобытиеПривязаноКЗвонку Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Записать();
	
	ЗначенияЗаполнения = Новый Структура("Покупатель", Истина);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Если Объект.Участники.Количество() > 0 Тогда
		КонтактКакСвязаться = Новый Структура;
		КонтактКакСвязаться.Вставить("ВидКонтакта", "КонтактноеЛицо");
		КонтактКакСвязаться.Вставить("Контакт", "");
		КонтактКакСвязаться.Вставить("КакСвязаться", Объект.Участники[0].КакСвязаться);
		КонтактКакСвязаться.Вставить("ТипКИ", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));		
		ПараметрыОткрытия.Вставить("КонтактКакСвязаться", КонтактКакСвязаться);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОчистка(Элемент, СтандартнаяОбработка)
	
	ОпределитьТипПоляКонтрагент(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	Если ТипЗнч(Объект.Тема) = Тип("СправочникСсылка.ТемыСобытий") И ЗначениеЗаполнено(Объект.Тема) Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.Тема);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ТемыСобытий.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.Тема = ВыбранноеЗначение;
		ЗаполнитьСодержаниеСобытия(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание <> 0 И НЕ ПустаяСтрока(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьСписокВыбораТемы(Текст, ИсторияТемСтрокой);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйЗаЗвонокПриИзменении(Элемент)
	ОтветственныйЗаЗвонокИзменен = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтакты

&НаКлиенте
Процедура КонтактыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле <> Элементы.КонтактыИндексПиктограммы Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаКонтакта = Контакты.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрокаКонтакта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ВыбратьКонтактныеДанныеИПозвонить(СтрокаКонтакта.Контакт, СтрокаКонтакта.КакСвязаться);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыКонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Контрагент", Контрагент));
	КонецЕсли;
	ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.Контакты.ТекущиеДанные.Контакт);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.КонтактныеЛица.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыКонтактОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Элементы.Контакты.ТекущиеДанные.Контакт) Тогда
		Контакт = Контакты.НайтиПоИдентификатору(Элементы.Контакты.ТекущаяСтрока).Контакт;
		
		Если (ТипЗнч(Контакт) = Тип("Строка") ИЛИ ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактыЛидов"))
			И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Лиды") И ЗначениеЗаполнено(Контрагент) Тогда
			ПоказатьЗначение(, Контрагент);
		Иначе
			ПоказатьЗначение(,Контакт);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыКонтактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		КакСвязаться = ПолучитьКакСвязаться(ВыбранноеЗначение, Объект.ТипСобытия);
	КонецЕсли;
	
	СтрокаКонтакты = Контакты.НайтиПоИдентификатору(Элементы.Контакты.ТекущаяСтрока);
	СтрокаКонтакты.Контакт = ВыбранноеЗначение;
	СтрокаКонтакты.КакСвязаться = КакСвязаться;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыКонтактАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание <> 0 И НЕ ПустаяСтрока(Текст) И ЗначениеЗаполнено(Контрагент) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьСписокВыбораКонтактов(Текст, Контрагент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Не указано основание для заполнения.'"));
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Документ будет полностью перезаполнен по ""Основанию"". Продолжить выполнение операции?'");
	Продолжение = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Продолжение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСодержание(Команда)
	
	Если ЗначениеЗаполнено(Объект.Тема) Тогда
		ЗаполнитьСодержаниеСобытия(Объект.Тема);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКонтрагенту(Команда)
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Лиды") Тогда
			ТекстВопроса = НСтр("ru = 'Не указан лид для заполнения.'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Не указан контрагент для заполнения.'")
		КонецЕсли;
		ПоказатьПредупреждение(Неопределено, ТекстВопроса);
		Возврат;
	КонецЕсли;
	
	Если Контакты.Количество() > 0 Тогда
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Лиды") Тогда
			ТекстВопроса = НСтр("ru = 'Контакты будут полностью перезаполнены по лиду! Продолжить выполнение операции?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Контакты будут полностью перезаполнены по контрагенту! Продолжить выполнение операции?'")
		КонецЕсли;
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоКонтрагентуЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		ЗаполнитьПоКонтрагентуФрагмент(КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтрагент(Команда)
	
	Если НЕ ПроверитьМожноСоздатьКонтакт(Контрагент, "Контрагент") Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Контакты.ТекущиеДанные <> Неопределено Тогда
		СтрокаКонтакт = Элементы.Контакты.ТекущиеДанные;
	ИначеЕсли Контакты.Количество() <> 0 Тогда
		СтрокаКонтакт = Контакты[0];
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Список контактов не заполнен.'"),, "Контакты");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполненоКакСвязаться(СтрокаКонтакт) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьМожноСоздатьКонтакт(СтрокаКонтакт.Контакт, СтрШаблон("Контакты[%1].Контакт", Формат(Контакты.Индекс(СтрокаКонтакт), "ЧГ="))) Тогда
		Возврат;
	КонецЕсли;
	
	СопоставитьКонтактКакСвязаться = СтрокаКонтакт.КакСвязаться;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтактКакСвязаться", Новый Структура);
	ПараметрыФормы.КонтактКакСвязаться.Вставить("ВидКонтакта", "КонтактноеЛицо");
	ПараметрыФормы.КонтактКакСвязаться.Вставить("Контакт", СтрокаКонтакт.Контакт);
	ПараметрыФормы.КонтактКакСвязаться.Вставить("КакСвязаться", СтрокаКонтакт.КакСвязаться);
	ПараметрыФормы.КонтактКакСвязаться.Вставить("ТипКИ", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
		
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ИсточникПривлеченияПокупателя", Объект.ИсточникПривлечения);
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтакт(Команда)
	
	Если НЕ ПроверитьМожноСоздатьКонтакт(Контрагент, "Контрагент", Ложь, Ложь, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Контакты.ТекущиеДанные <> Неопределено Тогда
		СтрокаКонтакт = Элементы.Контакты.ТекущиеДанные;
	ИначеЕсли Контакты.Количество() <> 0 Тогда
		СтрокаКонтакт = Контакты[0];
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Список контактов не заполнен.'"),, "Контакты");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполненоКакСвязаться(СтрокаКонтакт) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьМожноСоздатьКонтакт(СтрокаКонтакт.Контакт, СтрШаблон("Контакты[%1].Контакт", Формат(Контакты.Индекс(СтрокаКонтакт), "ЧГ="))) Тогда
		Возврат;
	КонецЕсли;
	
	СопоставитьКонтактКакСвязаться = СтрокаКонтакт.КакСвязаться;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтактКакСвязаться", Новый Структура);
	ПараметрыФормы.КонтактКакСвязаться.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.КонтактКакСвязаться.Вставить("Контакт", СтрокаКонтакт.Контакт);
	ПараметрыФормы.КонтактКакСвязаться.Вставить("КакСвязаться", СтрокаКонтакт.КакСвязаться);
	ПараметрыФормы.КонтактКакСвязаться.Вставить("ТипКИ", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ИсточникПривлечения", Объект.ИсточникПривлечения);
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Справочник.КонтактныеЛица.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЛид(Команда)
	
	Если НЕ ПроверитьМожноСоздатьКонтакт(Контрагент, "Контрагент") Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Контакты.ТекущиеДанные <> Неопределено Тогда
		СтрокаКонтакт = Элементы.Контакты.ТекущиеДанные;
	ИначеЕсли Контакты.Количество() <> 0 Тогда
		СтрокаКонтакт = Контакты[0];
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Список контактов не заполнен.'"),, "Контакты");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполненоКакСвязаться(СтрокаКонтакт) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьМожноСоздатьКонтакт(СтрокаКонтакт.Контакт, СтрШаблон("Контакты[%1].Контакт", Формат(Контакты.Индекс(СтрокаКонтакт), "ЧГ="))) Тогда
		Возврат;
	КонецЕсли;
	
	СопоставитьКонтактКакСвязаться = СтрокаКонтакт.КакСвязаться;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтактКакСвязаться", Новый Структура);
	ПараметрыФормы.КонтактКакСвязаться.Вставить("Контакт", СтрокаКонтакт.Контакт);
	ПараметрыФормы.КонтактКакСвязаться.Вставить("КакСвязаться", СтрокаКонтакт.КакСвязаться);
	ПараметрыФормы.КонтактКакСвязаться.Вставить("ТипКИ", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ИсточникПривлечения", Объект.ИсточникПривлечения);
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Справочник.Лиды.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПривязатьКСуществующемуКонтрагенту(Команда)
	
	СтрокаКонтакт = Элементы.Контакты.ТекущиеДанные;
	
	Если Элементы.Контакты.ТекущиеДанные <> Неопределено Тогда
		СтрокаКонтакт = Элементы.Контакты.ТекущиеДанные;
	ИначеЕсли Контакты.Количество() <> 0 Тогда
		СтрокаКонтакт = Контакты[0];
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Список контактов не заполнен.'"),, "Контакты");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаКонтакт.Контакт) <> Тип("СправочникСсылка.КонтактныеЛица") Тогда
		ИндексСтроки = Контакты.Индекс(СтрокаКонтакт);
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru='Не выбран контакт.'"),,
			СтрШаблон("Контакты[%1].Контакт", Формат(ИндексСтроки, "ЧГ=")));
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПривязатьКСуществующемуКонтрагентуЗавершение", ЭтотОбъект,
		Новый Структура("Контакт", СтрокаКонтакт.Контакт)); 
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект, , , , ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПривязатьКСуществующемуКонтрагентуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ПривязатьСобытиеКонтактаККонтрагенту(Результат, ДополнительныеПараметры.Контакт);
	
КонецПроцедуры

&НаКлиенте
Процедура НабратьНомер(Команда)
	
	Если НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ВыбратьКонтактныеДанныеИПозвонить(Контрагент, КонтрагентКакСвязаться);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрослушатьЗапись(Команда)
	
	ТелефонияКлиент.ПрослушатьЗаписьРазговора(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеЗвонка(Команда)
	
	ОбновитьДанныеЗвонкаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НабратьНомерКонтекстноеМеню(Команда)
	
	КонтактыТекущиеДанные = Элементы.Контакты.ТекущиеДанные;
	
	Если НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтактыТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбратьКонтактныеДанныеИПозвонить(КонтактыТекущиеДанные.Контакт, КонтактыТекущиеДанные.КакСвязаться);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_Событие"));
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеВторичныхДанных

&НаКлиенте
Процедура ЗаполнитьСодержаниеСобытия(ТемаСобытия)
	
	Если ТипЗнч(ТемаСобытия) <> Тип("СправочникСсылка.ТемыСобытий") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Объект.Содержание) Тогда
		ТекстВопроса = НСтр("ru = 'Перезаполнить содержание по выбранной теме?'"); 
		Продолжение = Новый ОписаниеОповещения("ЗаполнитьСодержаниеСобытияЗавершение", ЭтотОбъект, Новый Структура("ТемаСобытия", ТемаСобытия));
		ПоказатьВопрос(Продолжение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСодержаниеСобытияФрагмент(ТемаСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСодержаниеСобытияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСодержаниеСобытияФрагмент(ДополнительныеПараметры.ТемаСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСодержаниеСобытияФрагмент(Знач ТемаСобытия)
	
	Объект.Содержание = ПолучитьСодержаниеТемы(ТемаСобытия);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСодержаниеТемы(ТемаСобытия)
	
	Возврат ТемаСобытия.Содержание;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоКонтрагентуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьПоКонтрагентуФрагмент(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКонтрагентуФрагмент(Знач Ответ)
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоКонтрагентуСервер(Контрагент);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоКонтрагентуСервер(Контрагент)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(Новый Структура("ОснованиеЗаполнения, ТипСобытия, Ответственный", Контрагент, Объект.ТипСобытия, Объект.Ответственный));
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	ПрочитатьРеквизиты(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоОснованиюСервер(Объект.ДокументОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованиюСервер(ДокументОснование)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Новый Структура("ОснованиеЗаполнения, ТипСобытия, Ответственный", ДокументОснование, Объект.ТипСобытия, Объект.Ответственный));
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ПрочитатьРеквизиты(ДокументОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПродолжительности(Форма)
	
	Форма.ПредставлениеПродолжительности = "";
	
	Начало = Форма.Объект.НачалоСобытия;
	Окончание = Форма.Объект.ОкончаниеСобытия;
	
	Если Не ЗначениеЗаполнено(Начало)
		Или Не ЗначениеЗаполнено(Окончание) Тогда
		
		Возврат;
	КонецЕсли;
	
	ДлительностьСек = Окончание - Начало;
	
	Дней = Цел(ДлительностьСек / 86400);
	ПодписьДней = СтрокаСЧислом(НСтр("ru = ';%1 день;;%1 дня;%1 дней;%1 дня'"), Дней,
		ВидЧисловогоЗначения.Количественное);
	
	Часов = Цел((ДлительностьСек - Дней * 86400) / 3600);
	ПодписьЧасов = СтрокаСЧислом(НСтр("ru = ';%1 час;;%1 часа;%1 часов;%1 часа'"), Часов,
		ВидЧисловогоЗначения.Количественное);

	Минут = Цел((ДлительностьСек - Дней * 86400 - Часов * 3600) / 60);
	ПодписьМинут = СтрокаСЧислом(НСтр("ru = ';%1 минута;;%1 минуты;%1 минут;%1 минуты'"), Минут,
		ВидЧисловогоЗначения.Количественное);
	
	Если Дней > 0 Тогда 
		Форма.ПредставлениеПродолжительности = Форма.ПредставлениеПродолжительности + ПодписьДней;
	КонецЕсли;
	
	Если Часов > 0 Тогда 
		
		Если Дней > 0 Тогда
			Форма.ПредставлениеПродолжительности = Форма.ПредставлениеПродолжительности + " ";
		КонецЕсли;
		
		Форма.ПредставлениеПродолжительности = Форма.ПредставлениеПродолжительности + ПодписьЧасов;
	КонецЕсли;
	
	Если Минут > 0 Тогда 
		
		Если Дней > 0 Или Часов > 0 Тогда
			Форма.ПредставлениеПродолжительности = Форма.ПредставлениеПродолжительности + " ";
		КонецЕсли;
		
		Форма.ПредставлениеПродолжительности = Форма.ПредставлениеПродолжительности + ПодписьМинут;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
// @skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


// СтандартныеПодсистемы.Свойства
// @skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область НастройкаВидимостьЭлементовФормы

// Процедура выполняет настройку элементов формы для корректного отображения в мобильном клиенте
//
&НаСервере
Процедура НастроитьФормуМобильныйКлиент()
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаУчастники", "ОтображатьЗаголовок",
		Истина);
	Элементы.КонтекстноеМенюНабратьНомер.Видимость = Истина;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПриСозданииПриЧтенииНаСервере(ТекущийОбъект)
	
	ИспользоватьОблачнуюТелефонию = ПолучитьФункциональнуюОпцию("ИспользоватьОблачнуюТелефонию");
	ИспользоватьМобильнуюТелефонию = ПолучитьФункциональнуюОпцию("ИспользоватьМобильнуюТелефонию");
	Если ИспользоватьМобильнуюТелефонию Тогда
		ПерсональноеМобильноеУстройство = ТелефонияСервер.ПерсональноеМобильноеУстройство();
	КонецЕсли;
	
	ПрочитатьРеквизиты(ТекущийОбъект);
	ОбновитьДанныеЗвонкаСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ)
	
	Если Объект.ТипСобытия = Перечисления.ТипыСобытий.ТелефонныйЗвонок Тогда
		ОбязательныеДляЗаполненияРеквизиты = РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательныеДляЗаполненияРеквизитыОбъекта("ТелефонныйЗвонок");
	ИначеЕсли Объект.ТипСобытия = Перечисления.ТипыСобытий.ЛичнаяВстреча Тогда
		ОбязательныеДляЗаполненияРеквизиты = РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательныеДляЗаполненияРеквизитыОбъекта("Встреча");
	ИначеЕсли Объект.ТипСобытия = Перечисления.ТипыСобытий.Прочее Тогда
		ОбязательныеДляЗаполненияРеквизиты = РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательныеДляЗаполненияРеквизитыОбъекта("ПрочиеСобытия");
	Иначе
		Возврат;
	КонецЕсли;


	Для Каждого Реквизит Из ОбязательныеДляЗаполненияРеквизиты Цикл
				
		Если ЗначениеЗаполнено(Объект[Реквизит]) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(
			ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", 
			"Источник привлечения"),,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Объект[%1]", Реквизит),,
			Отказ);
			
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	УсловноеОформление.Элементы.Очистить();
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, Элементы.КонтактыКонтакт.ПутьКДанным, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, Элементы.КонтактыКакСвязаться.ПутьКДанным, Неопределено, ВидСравненияКомпоновкиДанных.Заполнено);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КонтактыКонтакт.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru='<Неизвестный контакт>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРеквизиты(Объект)
	
	Контакты.Очистить();
	ПерваяСтрока = Истина;
	
	Для Каждого СтрокаУчастники Из Объект.Участники Цикл
		
		Если ПерваяСтрока И ТипЗнч(СтрокаУчастники.Контакт) <> Тип("Строка") Тогда
			Контрагент = СтрокаУчастники.Контакт;
			КонтрагентКакСвязаться = СтрокаУчастники.КакСвязаться;
			ПерваяСтрока = Ложь;
			Продолжить;
		КонецЕсли;
		
		СтрокаКонтакты = Контакты.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКонтакты, СтрокаУчастники);
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	ОпределитьТипПоляКонтрагент(ТипЗнч(Контрагент));
	
	ДокументСозданСлужебнымПользователем = Ложь;
	Если ИспользоватьОблачнуюТелефонию ИЛИ ИспользоватьМобильнуюТелефонию Тогда
		ДокументСозданСлужебнымПользователем =
			Объект.Автор = Пользователи.НайтиПоИмени(ТелефонияСервер.СлужебныйПользовательТелефонииЛогин());
	КонецЕсли;
	
	Если ДокументСозданСлужебнымПользователем Тогда
		АвторДокумента = НСтр("ru='# создан автоматически'");
	Иначе
		АвторДокумента = Объект.Автор;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРеквизиты(Объект)
	
	Объект.Участники.Очистить();
	
	СтрокаУчастники = Объект.Участники.Добавить();
	СтрокаУчастники.Контакт = Контрагент;
	СтрокаУчастники.КакСвязаться = КонтрагентКакСвязаться;
	
	Для Каждого СтрокаКонтакты Из Контакты Цикл
		ЗаполнитьЗначенияСвойств(Объект.Участники.Добавить(), СтрокаКонтакты);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКакСвязаться()
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		КонтрагентКакСвязаться = "";
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Лиды") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактыЛидов.Наименование КАК Наименование,
		|	КонтактыЛидов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КонтактыЛидов КАК КонтактыЛидов
		|ГДЕ
		|	КонтактыЛидов.Владелец = &Лид";
		Запрос.УстановитьПараметр("Лид", Контрагент);

		Выборка = Запрос.Выполнить().Выбрать();
		
		ТипКИ = Неопределено;
		Если Объект.ТипСобытия = Перечисления.ТипыСобытий.ТелефонныйЗвонок Тогда
			ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		КонецЕсли;

		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Контакты.Добавить();
			НоваяСтрока.Контакт = Выборка.Наименование;
			НоваяСтрока.КакСвязаться = Документы.Событие.ПолучитьКакСвязаться(Выборка.Ссылка, ТипКИ);
		КонецЦикла;
		
		КонтрагентКакСвязаться = Документы.Событие.ПолучитьКакСвязаться(Контрагент, ТипКИ);

	Иначе
		
		КонтрагентКакСвязаться = ПолучитьКакСвязаться(Контрагент, Объект.ТипСобытия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКакСвязаться(Контакт, ТипСобытия)
	
	Если ТипЗнч(Контакт) = Тип("Строка") Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контакт) Тогда
		Возврат "";
	КонецЕсли;
	
	ТипКИ = Неопределено;
	Если ТипСобытия = Перечисления.ТипыСобытий.ТелефонныйЗвонок Тогда
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
	КонецЕсли;
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Контрагенты")
		ИЛИ ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Возврат Документы.Событие.ПолучитьКакСвязаться(Контакт, ТипКИ);
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.Лиды") Тогда
		Возврат Документы.Событие.ПолучитьКакСвязатьсяКонтактов(Контакт, ТипКИ);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", ДокументыУНФ.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	// Очистим контактные лица прочих контрагентов
	СтрокиКУдалению = Новый Массив;
	КонтактыКонтрагента = Справочники.Контрагенты.СвязанныеКонтакты(Контрагент);
	Для Каждого СтрокаКонтакты Из Контакты Цикл
		Если ТипЗнч(СтрокаКонтакты.Контакт) = Тип("СправочникСсылка.КонтактныеЛица")
			И ЗначениеЗаполнено(СтрокаКонтакты.Контакт)
			И КонтактыКонтрагента.Найти(СтрокаКонтакты.Контакт) = Неопределено Тогда
			СтрокиКУдалению.Добавить(СтрокаКонтакты);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из СтрокиКУдалению Цикл
		Контакты.Удалить(Строка);
	КонецЦикла;
	
	ОбновитьКакСвязаться();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИсториюТемСтрокой()
	
	СписокВыбораТемы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("СписокВыбораТемыСобытия", "");
	Если СписокВыбораТемы <> Неопределено Тогда
		ИсторияТемСтрокой.ЗагрузитьЗначения(СписокВыбораТемы);
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьСписокВыбораТемыСобытия()

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораТемы(знач СтрокаПоиска, знач ИсторияТемСтрокой)
	
	СписокВыбораТемы = Новый СписокЗначений;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ПометкаУдаления", Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	ПараметрыВыбора.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	
	ДанныеВыбораТемы = Справочники.ТемыСобытий.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораТемы Цикл
		СписокВыбораТемы.Добавить(ЭлементСписка.Значение, Новый ФорматированнаяСтрока(ЭлементСписка.Представление, " (тема события)"));
	КонецЦикла;
	
	Для Каждого ЭлементИстории Из ИсторияТемСтрокой Цикл
		Если Лев(ЭлементИстории.Значение, СтрДлина(СтрокаПоиска)) = СтрокаПоиска Тогда
			СписокВыбораТемы.Добавить(ЭлементИстории.Значение, 
				Новый ФорматированнаяСтрока(Новый ФорматированнаяСтрока(СтрокаПоиска,Новый Шрифт(,,Истина),WebЦвета.Зеленый), Сред(ЭлементИстории.Значение, СтрДлина(СтрокаПоиска)+1)));
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокВыбораТемы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораКонтактов(знач СтрокаПоиска, Контрагент)
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("Владелец, ПометкаУдаления", Контрагент, Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	
	ДанныеВыбораКонтактныхЛиц = Справочники.КонтактныеЛица.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Возврат ДанныеВыбораКонтактныхЛиц;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьКонтактныеДанныеИПозвонить(Контакт, Номер)
	
	Если ПустаяСтрока(Номер) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не заполнен номер телефона для связи.'"));
		Возврат;
	КонецЕсли;
	
	Номера = СтрРазделить(Номер, ";", Ложь);
	
	Если Номера.Количество() > 1 Тогда
		
		СписокКИ = Новый СписокЗначений;
		Для Каждого ЗначениеКИ Из Номера Цикл
			СписокКИ.Добавить(СокрЛП(ЗначениеКИ));
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КонтактнаяИнформация", СписокКИ);
		ПараметрыФормы.Вставить("ЗаголовокКнопки", НСтр("ru='Позвонить'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьКонтактныеДанныеИПозвонитьЗавершение", ЭтотОбъект, Новый Структура("Контакт", Контакт));
		ОткрытьФорму("ОбщаяФорма.ВыборЗначенияКонтактнойИнформации", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
		
		Возврат;
		
	КонецЕсли;
	
	НабратьНомерКлиент(Контакт, Номер);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКонтактныеДанныеИПозвонитьЗавершение(Номер, ДополнительныеПараметры) Экспорт
	
	Если Номер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НабратьНомерКлиент(ДополнительныеПараметры.Контакт, Номер);
	
КонецПроцедуры

&НаКлиенте
Процедура НабратьНомерКлиент(Контакт, Номер)
	
	Если СобытиеПривязаноКЗвонку Тогда
		ТелефонияКлиент.ПозвонитьПоНомеру(Номер, Контакт);
	Иначе
		ТелефонияКлиент.ПозвонитьПоНомеру(Номер, Контакт,, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()
	
	ИспользуетсяТелефония = ИспользоватьОблачнуюТелефонию ИЛИ ИспользоватьМобильнуюТелефонию И ЗначениеЗаполнено(ПерсональноеМобильноеУстройство);
	
	Элементы.НабратьНомер.Видимость = ИспользуетсяТелефония;
	Элементы.КонтактыИндексПиктограммы.Видимость = ИспользуетсяТелефония;
	
	Если СобытиеПривязаноКЗвонку Тогда
		Элементы.ВходящееИсходящееСобытие.Видимость = Ложь;
		Элементы.Период.Видимость = Ложь;
	Иначе
		Элементы.ВходящееИсходящееСобытие.Видимость = Истина;
		Элементы.Период.Видимость = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) И Объект.Участники.Количество() <> 0 Тогда
		Элементы.Контрагент.ПодсказкаВвода = НСтр("ru='Неизвестный контрагент: создайте нового'");
	КонецЕсли;
	
	Элементы.ОтветственныйЗаЗвонок.Видимость = СобытиеПривязаноКЗвонку;
	Элементы.Ответственный.Видимость = НЕ СобытиеПривязаноКЗвонку;
	
	Если ОбязательноЗаполнятьИсточникВоВстречах ИЛИ ОбязательноЗаполнятьИсточникВЗвонках ИЛИ ОбязательноЗаполнятьИсточникВПрочихСобытиях Тогда
		Элементы.ИсточникПривлечения.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеЗвонкаСервер()
	
	ДанныеЗвонка = Неопределено;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДанныеЗвонка = ТелефонияСервер.ДанныеЗвонка(Объект.Ссылка);
	КонецЕсли;
	
	Если ДанныеЗвонка = Неопределено Тогда
		СобытиеПривязаноКЗвонку = Ложь;
		Элементы.ДанныеЗвонка.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	СобытиеПривязаноКЗвонку = Истина;
	
	НомерАбонента = ДанныеЗвонка.НомерКонтакта;
	ДлительностьРазговораСтрокой = ПолучитьСтрокуВремени(ДанныеЗвонка.ДлительностьРазговора);
	
	Элементы.ПрослушатьЗапись.Видимость = ЗначениеЗаполнено(ДанныеЗвонка.ЗаписьРазговора.Ссылка) ИЛИ ДанныеЗвонка.ЗаписьРазговора.ТребуетсяЗапросить;
	Элементы.ЗаписьРазговораОтсутствует.Видимость = НЕ Элементы.ПрослушатьЗапись.Видимость;
	
	Элементы.ОбновитьДанныеЗвонка.Видимость = НЕ ДанныеЗвонка.ВызовЗавершен;
	Элементы.ТелефонныйЗвонокВходящий.Видимость = НЕ Неотвеченный И ДанныеЗвонка.Направление = Перечисления.ВходящееИсходящееСобытие.Входящее;
	Элементы.ТелефонныйЗвонокИсходящий.Видимость = НЕ Неотвеченный И ДанныеЗвонка.Направление = Перечисления.ВходящееИсходящееСобытие.Исходящее;
	Элементы.ТелефонныйЗвонокНеотвеченный.Видимость = Неотвеченный;
	
	ОтветственныйЗаЗвонок = ДанныеЗвонка.Пользователь.Сотрудник;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуВремени(Знач Секунд) Экспорт
	
	Часов = Цел(Секунд / 3600);
	Минут = Цел((Секунд - Часов * 3600) / 60);
	Секунд = Число((Секунд - Часов * 3600 - Минут * 60));
	Возврат Формат(Часов, "ЧЦ=2; ЧН=00; ЧВН=") + ":" + Формат(Минут,"ЧЦ=2; ЧН=00; ЧВН=") + ":" + Формат(Секунд,"ЧЦ=2; ЧН=00; ЧВН=");
	
КонецФункции

&НаСервере
Процедура ОпределитьТипПоляКонтрагент(Тип)
	
	Если Тип = Тип("СправочникСсылка.Контрагенты") Тогда
		Элементы.Контрагент.ВыбиратьТип = Ложь;
		Элементы.Контрагент.Заголовок = НСтр("ru='Контрагент'");
		Элементы.КонтактыКонтакт.КнопкаВыбора = Истина;
	ИначеЕсли Тип = Тип("СправочникСсылка.Лиды") Тогда
		Элементы.Контрагент.ВыбиратьТип = Ложь;
		Элементы.Контрагент.Заголовок = НСтр("ru='Лид'");
		Элементы.КонтактыКонтакт.КнопкаВыбора = Ложь;
	Иначе
		Элементы.Контрагент.ВыбиратьТип = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru='Контрагент'");
		Элементы.КонтактыКонтакт.КнопкаВыбора = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗначениеЗаполненоКакСвязаться(СтрокаКонтакт)
	
	Если ЗначениеЗаполнено(СтрокаКонтакт.КакСвязаться) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИндексСтроки = Контакты.Индекс(СтрокаКонтакт);
	ОбщегоНазначенияКлиент.СообщитьПользователю(
		НСтр("ru='Не заполнена колонка ""Как связаться"".'"),,
		СтрШаблон("Контакты[%1].КакСвязаться", Формат(ИндексСтроки, "ЧГ=")));
		
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура СопоставитьКонтактКонтактнуюИнформацию(НовыйКонтакт, КакСвязаться)
	
	Если ТипЗнч(НовыйКонтакт) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			Возврат;
		КонецЕсли;
		
		Контрагент = НовыйКонтакт;
		ОбновитьКакСвязаться();
		
		СопоставитьКонтактыСобытияСКонтактнымиЛицами(Справочники.Контрагенты.СвязанныеКонтакты(НовыйКонтакт), КакСвязаться);
		
	ИначеЕсли ТипЗнч(НовыйКонтакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		Если ЗначениеЗаполнено(Контрагент) И НЕ Справочники.Контрагенты.КонтрагентСвязанСКонтактом(Контрагент, НовыйКонтакт) Тогда
			Возврат;
		КонецЕсли;
		
		СопоставитьКонтактыСобытияСКонтактнымиЛицами(НовыйКонтакт, КакСвязаться);
		
	ИначеЕсли ТипЗнч(НовыйКонтакт) = Тип("СправочникСсылка.Лиды") Тогда
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			Возврат;
		КонецЕсли;
		
		Контрагент = НовыйКонтакт;
		Контакты.Очистить();
		ОбновитьКакСвязаться();
		
	КонецЕсли;
	
	Записать();
	
КонецПроцедуры

&НаСервере
Процедура СопоставитьКонтактыСобытияСКонтактнымиЛицами(Знач КонтактныеЛица, КакСвязаться)
	
	Если ТипЗнч(КонтактныеЛица) <> Тип("Массив") Тогда
		КонтактныеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КонтактныеЛица);
	КонецЕсли;
	
	Если КонтактныеЛица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТелефонКонтактаСопоставляемый = КонтактнаяИнформацияУНФ.ПреобразоватьНомерДляКонтактнойИнформации(КакСвязаться);
	СопоставляемыеКонтактыСобытия = Контакты.НайтиСтроки(Новый Структура("КакСвязаться", КакСвязаться));
	
	КонтактнаяИнформацияКонтактныхЛиц = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(КонтактныеЛица, 
		Перечисления.ТипыКонтактнойИнформации.Телефон, , ТекущаяДатаСеанса());
	
	Для каждого КонтактСобытия Из СопоставляемыеКонтактыСобытия Цикл
		
		КонтактНайден = Ложь;
		
		Для каждого СопоставляемыйКонтакт Из КонтактнаяИнформацияКонтактныхЛиц Цикл
			
			Если ТелефонКонтактаСопоставляемый = КонтактнаяИнформацияУНФ.ПреобразоватьНомерДляКонтактнойИнформации(СопоставляемыйКонтакт.Представление) Тогда
				КонтактНайден = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ КонтактНайден Тогда
			Продолжить;
		КонецЕсли;
		
		КонтактСобытия.Контакт = СопоставляемыйКонтакт.Объект;
		КонтактСобытия.КакСвязаться = СопоставляемыйКонтакт.Представление;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПривязатьСобытиеКонтактаККонтрагенту(НовыйКонтрагент, Контакт)
	
	НачатьТранзакцию();
	
	Попытка
		Контрагент = НовыйКонтрагент;
		ОбновитьКакСвязаться();
		Справочники.Контрагенты.ДобавитьСвязьСКонтактом(НовыйКонтрагент, Контакт);
		Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьМожноСоздатьКонтакт(ЗначениеКонтакт, ПолеНаФорме, ПроверятьКонтрагент = Истина, ПроверятьКонтакт = Истина, ПроверятьЛид = Истина)
	
	ТекстСообщения = Неопределено;
	
	Если ПроверятьКонтакт И ЗначениеЗаполнено(ЗначениеКонтакт) И ТипЗнч(ЗначениеКонтакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		ТекстСообщения = НСтр("ru='Контакт уже создан.'");
	КонецЕсли;
	
	Если ПроверятьКонтрагент И ЗначениеЗаполнено(ЗначениеКонтакт) И ТипЗнч(ЗначениеКонтакт) = Тип("СправочникСсылка.Контрагенты") Тогда
		ТекстСообщения = НСтр("ru='Контрагент уже создан.'");
	КонецЕсли;
	
	Если ПроверятьЛид И ЗначениеЗаполнено(ЗначениеКонтакт) И ТипЗнч(ЗначениеКонтакт) = Тип("СправочникСсылка.Лиды") Тогда
		ТекстСообщения = НСтр("ru='Лид уже создан.'");
	КонецЕсли;
	
	Если ТекстСообщения <> Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, ПолеНаФорме);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьТемуСобытияВИсторииАвтоподбора(Знач Тема, ИсторияТемСтрокой)
	
	Если ТипЗнч(Тема) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	Тема = СокрЛП(Тема);
	ЭлементИстории = ИсторияТемСтрокой.НайтиПоЗначению(Тема);
	Если ЭлементИстории <> Неопределено Тогда
		ИсторияТемСтрокой.Удалить(ЭлементИстории);
	КонецЕсли;
	ИсторияТемСтрокой.Вставить(0, Тема);
	ИсторияТем = ИсторияТемСтрокой.ВыгрузитьЗначения();
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("СписокВыбораТемыСобытия", "", ИсторияТем);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеЗвонкаПослеЗаписиНаСервере()
	
	Если Не ОтветственныйЗаЗвонокИзменен Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗвонка = ТелефонияСервер.ДанныеЗвонка(Объект.Ссылка);
	ДанныеЗвонка.Пользователь.Сотрудник = ОтветственныйЗаЗвонок;
	ТелефонияСервер.ИзменитьОтветственного(ДанныеЗвонка);
	
КонецПроцедуры

#КонецОбласти
