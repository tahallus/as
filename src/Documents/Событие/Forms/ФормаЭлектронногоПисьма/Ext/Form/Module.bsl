
// ------------------------------------------------------------------------------
// СПЕЦИФИКАЦИЯ ПАРАМЕТРОВ ПЕРЕДАВАЕМЫХ В ФОРМУ
//
// см. ОбщиеФормы.ОтправкаСообщения
// ------------------------------------------------------------------------------
// СПЕЦИФИКАЦИЯ ФУНКЦИОНИРОВАНИЯ ФОРМЫ
//
//   Если учетные записи не передаются, то учетная запись заполняется значением 
// настройки пользователя по умолчанию. Если настройка не задана, то пользователю
// предлагаются доступные ему учетные записи. 
//
//   Если файлы для вложения существует на сервере 1С:Предприятие, в качестве
// параметра необходимо не двоичные данные, а ссылку на данные во временном
// хранилище.
//
// ------------------------------------------------------------------------------

#Область ОписаниеПеременных

&НаКлиенте
Перем ПриведенныйПочтовыйАдресКому; // Преобразованный почтовый адрес Кому

&НаКлиенте
Перем ПриведенныйПочтовыйАдресКопия; // Преобразованный почтовый адрес Копия

&НаКлиенте
Перем ПриведенныйПочтовыйАдресСкрытаяКопия; // Преобразованный почтовый адрес Скрытая копия

&НаКлиенте
Перем КонтрагентЗаписан; // Контрагент, по которому было получено оповещение "Запись_Контрагент"

&НаКлиенте
Перем КонтактЗаписан;

&НаКлиенте
Перем ЛидЗаписан;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Документы.Событие.ПроверитьВозможностьВводаПоЛиду(Объект, Параметры.ЗначенияЗаполнения, Отказ);
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	Элементы.ПолучателиКонтакт.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыСтроки(100));
	Элементы.Тема.ОграничениеТипа 			   = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыСтроки(200));
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗаполнитьНовоеПисьмоПоУмолчанию(Параметры);
		
		Если Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			ОбработатьПереданныеПараметры(Параметры);
			
		Иначе // Копирование
			
			ДополнитьКартинкиHTML(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЗначениеКопирования, "КартинкиHTML").Получить());
			
			ПрочитатьВложения(Параметры.ЗначениеКопирования);
			
		КонецЕсли;
		
		УстановитьКартинкиУчастников();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		СеансовыеДанные = РегистрыСведений.СеансовыеДанныеGoogle.СеансовыеДанные(
		Пользователи.ТекущийПользователь(),
		Перечисления.ОбластиДоступаGoogle.Почта,
		Объект.УчетнаяЗапись);
	КонецЕсли;
	
	Содержание = Объект.Содержание;
	СодержаниеHTML = Гипертекст.ОбработатьТекстHTML(Объект.СодержаниеHTML,, ТаблицаВложений());
	
	ИдентификаторСобытия = РегистрыСведений.ИдентификаторыСобытий.ИдентификаторСобытия(Объект.УчетнаяЗапись, Объект.Ссылка);
	
	Если Объект.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее
		Или ЗначениеЗаполнено(ИдентификаторСобытия)
		Или ПисьмоСозданоНаОснованииРассылкиСервиса() Тогда
		НастроитьФормуПолученногоПисьма();
	Иначе
		НастроитьФормуИсходящегоПисьма();
	КонецЕсли;
	
	УстановитьЗаголовокГиперссылкиДокументовОснований();
	
	ОбязательноЗаполнятьИсточникВПисьмах = 
	РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательностьЗаполненияРеквизита("ЭлектронноеПисьмо", "ИсточникПривлечения");
	
	Если ОбязательноЗаполнятьИсточникВПисьмах Тогда
		Элементы.ИсточникПривлечения.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	// История темы для автоподбора
	ЗагрузитьИсториюТемСтрокой();
	ЗаполнитьСтатусПисьмаМассовойРассылки();
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не Объект.ЗагрузитьПриОткрытии Тогда
		РегистрыСведений.ПросмотрСобытий.ОтметитьКакПросмотрено(Объект.Ссылка);
	КонецЕсли;
	
	Если Объект.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
		Элементы.ПолучателиТипПолучателяЭлектронногоПисьма.ТолькоПросмотр = Истина;
		Элементы.ПолучателиКонтакт.ТолькоПросмотр = Истина;
		
		Элементы.ПолучателиТипПолучателяЭлектронногоПисьма.СписокВыбора.Добавить(
		Перечисления.ТипыПолучателейЭлектронногоПисьма.ОтКого, НСтр("ru = 'От кого:'"));
		
	КонецЕсли;
	
	НастроитьФормуМобильныйКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	НачатьОжиданиеЗавершенияДлительнойОперации();
	НачатьЗагрузкуСообщенияСПочтовогоСервера();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОповеститьОбИзменении(Объект.Ссылка);
	
	ОбновитьКонтактСтрокойНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Контрагент" Тогда
		КонтрагентЗаписан = Параметр;
	КонецЕсли;
	Если ИмяСобытия = "Запись_КонтактноеЛицо" Тогда
		КонтактЗаписан = Параметр.КонтактноеЛицо;
	КонецЕсли;
	Если ИмяСобытия = "Запись_Лид" Тогда
		ЛидЗаписан = Параметр;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьДокументОснованиеПисьма(ТекущийОбъект);
	ДополнитьКартинкиHTML(ТекущийОбъект.КартинкиHTML.Получить());
	
	УстановитьКартинкиУчастников();
	ПрочитатьВложения(Объект.Ссылка);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее
		ИЛИ ЗначениеЗаполнено(РегистрыСведений.ИдентификаторыСобытий.ИдентификаторСобытия(ТекущийОбъект.УчетнаяЗапись, ТекущийОбъект.Ссылка)) Тогда
		
		ПередЗаписьюНаСервереВходящегоСобытия(ТекущийОбъект);
	Иначе
		ПередЗаписьюНаСервереИсходящегоСобытия(ТекущийОбъект);
	КонецЕсли;
	
	СопоставитьКонтактИАдресЭППередЗаписьюНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Вложения.Ссылка КАК Ссылка,
	|	Вложения.АдресВоВременномХранилище КАК АдресВоВременномХранилище,
	|	Вложения.Представление КАК Представление,
	|	Вложения.Идентификатор КАК Идентификатор,
	|	Вложения.ЭтоВложениеЭлектронногоПисьма КАК ЭтоВложениеЭлектронногоПисьма
	|ПОМЕСТИТЬ втВложения
	|ИЗ
	|	&Вложения КАК Вложения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СобытиеПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втПрисоединенныеФайлы
	|ИЗ
	|	Справочник.СобытиеПрисоединенныеФайлы КАК СобытиеПрисоединенныеФайлы
	|ГДЕ
	|	СобытиеПрисоединенныеФайлы.ВладелецФайла = &СобытиеСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВложения.Ссылка КАК ВложениеСсылка,
	|	втПрисоединенныеФайлы.Ссылка КАК ПрисоединенныйФайлСсылка,
	|	втВложения.АдресВоВременномХранилище КАК АдресВоВременномХранилище,
	|	втВложения.Представление КАК Представление,
	|	втВложения.Идентификатор КАК Идентификатор,
	|	втВложения.ЭтоВложениеЭлектронногоПисьма КАК ЭтоВложениеЭлектронногоПисьма
	|ИЗ
	|	втВложения КАК втВложения
	|		ПОЛНОЕ СОЕДИНЕНИЕ втПрисоединенныеФайлы КАК втПрисоединенныеФайлы
	|		ПО втВложения.Ссылка = втПрисоединенныеФайлы.Ссылка");
	
	Запрос.УстановитьПараметр("Вложения", Вложения.Выгрузить());
	Запрос.УстановитьПараметр("СобытиеСсылка", ТекущийОбъект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПрисоединенныйФайлСсылка = NULL Тогда
			
			ДобавитьВложениеВПрисоединенныеФайлы(Выборка, ТекущийОбъект);
			
		ИначеЕсли Выборка.ВложениеСсылка = NULL Тогда
			
			УдалитьВложениеИзПрисоединенныхФайлов(Выборка);
			
		Иначе
			
			ОбновитьВложениеВПрисоединенныхФайлах(Выборка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(КонтактИАдресЭПДляСопоставления) Тогда
		
		ЭлектроннаяПочтаУНФ.СопоставитьВФонеКонтактИАдресЭПВСобытиях(
		КонтактИАдресЭПДляСопоставления.Контакт,
		КонтактИАдресЭПДляСопоставления.АдресЭП,
		УникальныйИдентификатор);
		
		КонтактИАдресЭПДляСопоставления = Неопределено;
		
	КонецЕсли;
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Для Каждого Стр Из Объект.Участники Цикл
		ОбновитьПредставлениеСтрокиПолучателя(Стр);
	КонецЦикла;
	ПолучателиКонтактОбработкаПослеВыборкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	Заголовок = "";
	АвтоЗаголовок = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТемаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	Если ТипЗнч(Объект.Тема) = Тип("СправочникСсылка.ТемыСобытий") И ЗначениеЗаполнено(Объект.Тема) Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.Тема);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ТемыСобытий.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.Тема = ВыбранноеЗначение;
		ЗаполнитьСодержаниеСобытия(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание <> 0 И НЕ ПустаяСтрока(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьСписокВыбораТемы(Текст, ИсторияТемСтрокой);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьПриИзменении(Элемент)
	УчетнаяЗаписьПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолучатели

&НаКлиенте
Процедура ПолучателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	Если ТекущиеДанные.ИндексКартинки = 0 Тогда
		ТекущиеДанные.ИндексКартинки = 1;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ТипПолучателяЭлектронногоПисьма) Тогда
		ТекущиеДанные.ТипПолучателяЭлектронногоПисьма =
		ПредопределенноеЗначение("Перечисление.ТипыПолучателейЭлектронногоПисьма.Кому");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если КонтрагентЗаписан <> ВыбранноеЗначение И КонтактЗаписан <> ВыбранноеЗначение И ЛидЗаписан <> ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	КонтактИАдресЭПДляСопоставления = Новый Структура;
	КонтактИАдресЭПДляСопоставления.Вставить("Контакт", ВыбранноеЗначение);
	КонтактИАдресЭПДляСопоставления.Вставить("АдресЭП", Элементы.Получатели.ТекущиеДанные.КакСвязаться);
	Записать();
	ПолучателиКонтактОбработкаПослеВыборкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипКИ", "АдресЭлектроннойПочты");
	Если ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт) Тогда
		Контакт = Объект.Участники.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока).Контакт;
		Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Контрагенты") Тогда
			ПараметрыФормы.Вставить("ТекущийКонтрагент", Контакт);
		КонецЕсли;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучателиКонтактВыборЗавершение", ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.ФормаАдреснойКниги", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактОчистка(Элемент, СтандартнаяОбработка)
	
	Если Элементы.ПолучателиКакСвязаться.ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
	Иначе
		Элементы.Получатели.ТекущиеДанные.ИндексКартинки = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт) Тогда
		Контакт = Объект.Участники.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока).Контакт;
		Если ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактыЛидов") Тогда
			ПоказатьЗначение(, ПолучитьЛидаПоКонтакту(Контакт));
		Иначе
			ПоказатьЗначение(,Контакт);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.Контакт = ТекущиеДанные.КонтактСтрокой;
		ТекущиеДанные.КакСвязаться = ТекущиеДанные.КонтактСтрокой;
		ОбновитьПредставлениеСтрокиПолучателя(ТекущиеДанные);
		ПолучателиКонтактОбработкаПослеВыборкиНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Лиды") Тогда
		
		// Выбор осуществлен механизмом автоподбора
		ЭлектронныеПочтыКонтакта = ПолучитьЭлектронныеПочтыКонтактаНаСервереБезКонтекста(ВыбранноеЗначение);
		
		ТекстРедактирования = Элемент.ТекстРедактирования;
		Если СтрНайти(ТекстРедактирования, "@") <> 0 И ЭлектронныеПочтыКонтакта.Количество() > 1 Тогда
			
			УбратьДублиЭлектронныхПочтКонтакта(ЭлектронныеПочтыКонтакта, ТекстРедактирования);
			
		КонецЕсли;
		
		Если ЭлектронныеПочтыКонтакта.Количество() Тогда
			
			ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
			
			ТекущиеДанные.Контакт = ВыбранноеЗначение;
			ТекущиеДанные.КакСвязаться = ЭлектронныеПочтыКонтакта[0];
			
			ОбновитьПредставлениеСтрокиПолучателя(ТекущиеДанные);
			
			Для Н = 1 По ЭлектронныеПочтыКонтакта.ВГраница() Цикл
				НовСтр = Объект.Участники.Добавить();
				НовСтр.ТипПолучателяЭлектронногоПисьма = ТекущиеДанные.ТипПолучателяЭлектронногоПисьма;
				НовСтр.Контакт = ВыбранноеЗначение;
				НовСтр.КакСвязаться = ЭлектронныеПочтыКонтакта[Н];
				
				ОбновитьПредставлениеСтрокиПолучателя(НовСтр);
			КонецЦикла;
			
			ПолучателиКонтактОбработкаПослеВыборкиНаСервере();
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторКонтактов") Тогда
		
		ЗаполнитьЗначенияСвойств(Элементы.Получатели.ТекущиеДанные, КонтактКакСвязаться(ВыбранноеЗначение));
		ОбновитьПредставлениеСтрокиПолучателя(Элементы.Получатели.ТекущиеДанные);
		ПолучателиКонтактОбработкаПослеВыборкиНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьДублиЭлектронныхПочтКонтакта(ЭлектронныеПочтыКонтакта, ТекстРедактирования)
	
	ДляУдаления = Новый Массив;
	Для Каждого ЭлЭлектроннаяПочта Из ЭлектронныеПочтыКонтакта Цикл
		Если СтрНайти(ЭлЭлектроннаяПочта, ТекстРедактирования) = 0 Тогда
			ДляУдаления.Добавить(ЭлЭлектроннаяПочта);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлЭлектроннаяПочта Из ДляУдаления Цикл
		ЭлектронныеПочтыКонтакта.Удалить(ЭлектронныеПочтыКонтакта.Найти(ЭлЭлектроннаяПочта));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеСтрокиПолучателя(ТекСтр)
	
	ТекСтр.КакСвязаться = СокрЛП(ТекСтр.КакСвязаться);
	
	Если СокрЛП(ТекСтр.Контакт) = ТекСтр.КакСвязаться Тогда 
		ТекСтр.КонтактСтрокой = ТекСтр.КакСвязаться;
	Иначе
		ТекСтр.КонтактСтрокой = СтрШаблон("%1 <%2>", СокрЛП(ТекСтр.Контакт), ТекСтр.КакСвязаться);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучателиКонтактОбработкаПослеВыборкиНаСервере()
	
	УстановитьКартинкиУчастников();
	
	СвернутьТаблицуУчастниковНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СвернутьТаблицуУчастниковНаСервере()
	
	ТаблицаЗначенийУчастники = Объект.Участники.Выгрузить();
	ТаблицаЗначенийУчастники.Свернуть("Контакт,КакСвязаться,КонтактСтрокой,ТипПолучателяЭлектронногоПисьма,
	|КакСвязаться,НомерДляОтправки,ИдентификаторСообщения,СтатусДоставки,ИндексКартинки");
	Объект.Участники.Загрузить(ТаблицаЗначенийУчастники);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЭлектронныеПочтыКонтактаНаСервереБезКонтекста(Контакт)
	
	ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.Лиды") Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКомпанииЛида;
	Иначе
		ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
	КонецЕсли;
	
	ТаблицаВсехЭлектронныхПочт = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Контакт, ВидКИ, ТекущаяДатаСеанса(), Ложь);
	
	ТаблицаВсехЭлектронныхПочт.Свернуть("Представление");
	
	Возврат ТаблицаВсехЭлектронныхПочт.ВыгрузитьКолонку("Представление");
	
КонецФункции

&НаКлиенте
Процедура ПолучателиКонтактАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание <> 0 И НЕ ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьСписокВыбораКонтактов(Текст);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВложения

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ДобавлениеФайлаКВложениям();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВложенияПеретаскиваниеЗавершение", ЭтотОбъект, Новый Структура("Имя", ПараметрыПеретаскивания.Значение.Имя));
		НачатьПомещениеФайла(ОписаниеОповещения, , ПараметрыПеретаскивания.Значение.ПолноеИмя, Ложь);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскиваниеЗавершение(Результат, АдресВременногоХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Файлы = Новый Массив;
	ПередаваемыйФайл = Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.Имя, АдресВременногоХранилища);
	Файлы.Добавить(ПередаваемыйФайл);
	ДобавитьФайлыВСписок(Файлы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Отправить(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.УчетнаяЗапись)
		И ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(СеансовыеДанные) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		НСтр("ru = 'Выберите учетную запись для отправки почты.'"), ,
		"Объект.УчетнаяЗапись");
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	АдресаПолучателейКому = Новый Массив;
	ЗаполнитьАдресаПолучателейПоТипу(АдресаПолучателейКому,
	ПредопределенноеЗначение("Перечисление.ТипыПолучателейЭлектронногоПисьма.Кому"));
	
	Попытка
		ПриведенныйПочтовыйАдресКому = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(СтрСоединить(АдресаПолучателейКому, "; "));
	Исключение
		ОбщегоНазначенияКлиент.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	АдресаПолучателейКопия = Новый Массив;
	ЗаполнитьАдресаПолучателейПоТипу(АдресаПолучателейКопия,
	ПредопределенноеЗначение("Перечисление.ТипыПолучателейЭлектронногоПисьма.Копия"));
	
	Попытка
		ПриведенныйПочтовыйАдресКопия = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(СтрСоединить(АдресаПолучателейКопия, "; "));
	Исключение
		ОбщегоНазначенияКлиент.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	АдресаПолучателейСкрытаяКопия = Новый Массив;
	ЗаполнитьАдресаПолучателейПоТипу(АдресаПолучателейСкрытаяКопия,
	ПредопределенноеЗначение("Перечисление.ТипыПолучателейЭлектронногоПисьма.СкрытаяКопия"));
	
	Попытка
		ПриведенныйПочтовыйАдресСкрытаяКопия = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(
		СтрСоединить(АдресаПолучателейСкрытаяКопия, "; "));
	Исключение
		ОбщегоНазначенияКлиент.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьОтправкуПисьма", ЭтотОбъект);
	СписокОтветов = Новый СписокЗначений;
	СписокОтветов.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Продублировать отправку'"));
	СписокОтветов.Добавить(КодВозвратаДиалога.Отмена);
	Если ЗначениеЗаполнено(ИдентификаторСобытия) Тогда
		ПоказатьВопрос(
		ОписаниеОповещения,
		СтрШаблон(НСтр("ru = 'Это письмо уже отправлялось %1'"), Объект.НачалоСобытия),
		СписокОтветов, 30,
		КодВозвратаДиалога.Отмена,
		НСтр("ru = 'Это письмо уже отправлялось'"),
		КодВозвратаДиалога.Отмена)
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.ОК);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАдресаПолучателейПоТипу(АдресаПолучателей, ТипКонтакта)
	
	УчастникиПоТипу = Объект.Участники.НайтиСтроки(Новый Структура("ТипПолучателяЭлектронногоПисьма", ТипКонтакта));
	Для Каждого Получатель Из УчастникиПоТипу Цикл
		Если ЗначениеЗаполнено(Получатель.КакСвязаться) Тогда
			АдресаПолучателей.Добавить(Получатель.КакСвязаться);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Ответить(Команда)
	
	ОтветитьПереслать(ЭлектроннаяПочтаУНФКлиентСервер.КомандаОтветить());
	
КонецПроцедуры

&НаКлиенте
Процедура Переслать(Команда)
	
	ОтветитьПереслать(ЭлектроннаяПочтаУНФКлиентСервер.КомандаПереслать());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСодержание(Команда)
	
	Если ЗначениеЗаполнено(Объект.Тема) Тогда
		ЗаполнитьСодержаниеСобытия(Объект.Тема);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	ОткрытьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыОснования(Команда)
	
	АдресВХранилищеДокументовОснований = ПоместитьДокументыОснованияВХранилище();
	ПараметрыФормы = Новый Структура("АдресВХранилищеДокументовОснований", АдресВХранилищеДокументовОснований);
	ОткрытьФорму("Документ.Событие.Форма.ДокументыОснованияЭлектронногоПисьма", ПараметрыФормы
	,,,,, Новый ОписаниеОповещения("ОткрытьДокументыОснованияЗавершение", ЭтотОбъект, Новый Структура("АдресВХранилищеДокументовОснований", АдресВХранилищеДокументовОснований)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	Если Объект.ДокументыОснования.Количество() = 0 Тогда
		
		Участники = ПолучитьУчастниковСсылочногоТипа();
		
		Если Участники.Количество() = 0 Тогда
			
			ОткрытьВыборШаблонаПоПредмету();
			
		ИначеЕсли Участники.Количество() = 1 Тогда
			
			ОткрытьВыборШаблонаПоПредмету(Участники[0]);
			
		Иначе
			
			СписокПредметов = Новый СписокЗначений;
			СписокПредметов.ЗагрузитьЗначения(Участники);
			ОткрытьВыборПредметаШаблона(СписокПредметов);
			
		КонецЕсли;
		
	ИначеЕсли Объект.ДокументыОснования.Количество() = 1 Тогда
		
		ОткрытьВыборШаблонаПоПредмету(Объект.ДокументыОснования[0].ДокументОснование);
		
	Иначе
		
		СписокПредметов = Новый СписокЗначений;
		Для Каждого Основание Из Объект.ДокументыОснования Цикл
			СписокПредметов.Добавить(Основание.ДокументОснование);
		КонецЦикла;
		
		ОткрытьВыборПредметаШаблона(СписокПредметов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьПодпись(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВставитьПодписьЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ПодписиПисем.Форма.ФормаВыбора", ,
	ЭтаФорма, , , ,
	ОписаниеОповещения,
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПовторитьЗагрузкуСообщения(Команда)
	ПовторитьЗагрузкуСообщения();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтакты(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипКИ", "АдресЭлектроннойПочты");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучателиКонтактВыборЗавершение", ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.ФормаАдреснойКниги", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_Событие"));
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлИзОснования(Команда)
	
	ВладельцыПрисоединенныхФайлов = ДоступныеОснованияДляВыбораФайлов();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладельцыПрисоединенныхФайлов", ВладельцыПрисоединенныхФайлов);
	СохранениеФайловПослеВыбора = Новый ОписаниеОповещения("ПослеВыбораФайловОснований", ЭтотОбъект);
	ОткрытьФорму(
	"Документ.Событие.Форма.ВыборФайловДляЭлектронногоПисьмаИзОснований",
	ПараметрыФормы,,,,,
	СохранениеФайловПослеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлВОсновании(Команда)
	
	ВыбранныеПрисоединенныеФайлы = Новый Массив;
	Для каждого ИдентификаторСтроки Из Элементы.Вложения.ВыделенныеСтроки Цикл
		СтрокаТаблицы = Вложения.НайтиПоИдентификатору(ИдентификаторСтроки);
		ВыбранныеПрисоединенныеФайлы.Добавить(СтрокаТаблицы.Ссылка);
	КонецЦикла;
	
	Для каждого ВыбранныйФайл Из ВыбранныеПрисоединенныеФайлы Цикл
		Если НЕ ЗначениеЗаполнено(ВыбранныйФайл) Тогда
			ТекстПредупреждения = НСтр("ru='Некоторые файлы еще не записаны.
			|Работа с присоединенными файлами возможна только после записи данных.
			|Данные будут записаны.'");
			ПредложитьСохранитьДокумент(ТекстПредупреждения);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Если Элементы.Вложения.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОснованияДляСохраненияФайлов = ДоступныеОснованияДляСохраненияФайлов();
	
	Если ОснованияДляСохраненияФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьВыборОснованияДляСохраненияВНемФайлов(ОснованияДляСохраненияФайлов, ВыбранныеПрисоединенныеФайлы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонтакт(Команда)
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(,ТекущиеДанные.Контакт);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДлительнаяОперация

&НаКлиенте
Процедура НачатьОжиданиеЗавершенияДлительнойОперации()
	
	Если Не ЗначениеЗаполнено(ДлительнаяОперацияЗавершение) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗавершенияДлительнойОперации", ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперацияЗавершение = "ПолучитьСтатусПисьмаМассовойРассылкиЗавершение" Тогда
		ПолучитьСтатусПисьмаМассовойРассылкиЗавершение(Результат.АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МассоваяРассылкаСервиса

&НаСервере
Процедура ЗаполнитьДокументОснованиеПисьма(ТекущийОбъект)
	
	ДокументОснование = Неопределено;
	
	Если ТекущийОбъект.ДокументыОснования.Количество() = 1 Тогда
		ДокументОснование = ТекущийОбъект.ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПисьмоСозданоНаОснованииРассылкиСервиса()
	
	Возврат ЗначениеЗаполнено(ДокументОснование)
	И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.МассоваяРассылка")
	И ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "СервисРассылкиИдентификатор"));
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтатусПисьмаМассовойРассылки()
	
	Если Не ПисьмоСозданоНаОснованииРассылкиСервиса() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПодсказки = СтрШаблон(
	НСтр("ru='Письмо сформировано автоматически из <a href = ""%1"">%2</a>'"),
	ПолучитьНавигационнуюСсылку(ДокументОснование),
	Строка(ДокументОснование));
	Элементы.СтатусПисьмаПодсказка.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ТекстПодсказки);
	
	НачатьПолучениеСтатусаПисьмаМассовойРассылки();
	
КонецПроцедуры

&НаСервере
Процедура НачатьПолучениеСтатусаПисьмаМассовойРассылки()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = Ложь;
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(
	ПараметрыВыполнения,
	"Документы.Событие.ЗагрузитьДанныеРассылкиСервисаДляДанныхФормы",
	ДокументОснование,
	Объект.Ссылка);
	ДлительнаяОперацияЗавершение = "ПолучитьСтатусПисьмаМассовойРассылкиЗавершение";
	
	Элементы.СтатусПисьмаМассовойРассылкиОжидание.Видимость = Истина;
	Элементы.СтатусПисьмаМассовойРассылки.Видимость = Ложь;
	Элементы.СодержаниеВходящегоПисьма.ТекущаяСтраница = Элементы.Загрузка;
	Элементы.СтраницыВложения.ТекущаяСтраница = Элементы.СтраницаВложенияЗагрузка;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтатусПисьмаМассовойРассылкиЗавершение(АдресРезультата)
	
	ДанныеРассылки = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	СтатусПисьмаМассовойРассылки = "";
	Если ДанныеРассылки.Получатели.Количество() <> 0 Тогда
		СтатусПисьмаМассовойРассылки = ДанныеРассылки.Получатели[0].Состояние;
	КонецЕсли;
	
	СодержаниеHTML = ПредпросмотрВебВерсииПисьмаСервисаРассылок(ДанныеРассылки.ВнешниеСсылки.ВебВерсияПисьма);
	
	Элементы.СтатусПисьмаМассовойРассылки.Заголовок = СтатусПисьмаМассовойРассылки;
	Элементы.СтатусПисьмаМассовойРассылкиОжидание.Видимость = Ложь;
	Элементы.СтатусПисьмаМассовойРассылки.Видимость = Истина;
	Элементы.СодержаниеВходящегоПисьма.ТекущаяСтраница = Элементы.HTML;
	Элементы.СтраницыВложения.ТекущаяСтраница = Элементы.СтраницаВложения;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредпросмотрВебВерсииПисьмаСервисаРассылок(Url)
	
	Если ЗначениеЗаполнено(Url) Тогда
		Возврат Url;
	Иначе
		ТекстПодсказки = НСтр("ru='Нет данных для просмотра письма, возможно сообщение еще не отправлялось.'");
		ПустойПредпросмотр =
		"<html>
		|<body>
		|<p>%1</p>
		|</body>
		|</html>";
		Возврат СтрШаблон(ПустойПредпросмотр, ТекстПодсказки);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СохранениеДобавлениеФайловВОснования

&НаКлиенте
Процедура ПослеВыбораФайловОснований(ВыбранныеПрисоединенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеПрисоединенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПрисоединенныеФайлыВСписок(ВыбранныеПрисоединенныеФайлы);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПрисоединенныеФайлыВСписок(ВыбранныеПрисоединенныеФайлы)
	
	Для каждого ПрисоединенныйФайл Из ВыбранныеПрисоединенныеФайлы Цикл
		ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ПараметрыДанныхФайла = УникальныйИдентификатор;
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, ПараметрыДанныхФайла);
		
		Вложение = Вложения.Добавить();
		Вложение.Представление = ДанныеФайла.ИмяФайла;
		Вложение.АдресВоВременномХранилище = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
		Вложение.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
	КонецЦикла;
	
	НастроитьФормуМобильныйКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборОснованияДляСохраненияВНемФайлов(ДокументыДляВыбора, ВыбранныеПрисоединенныеФайлы)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьФайлыПослеВыбораОснования", ЭтотОбъект, ВыбранныеПрисоединенныеФайлы);
	ПоказатьВыборИзМеню(ОписаниеОповещения, ДокументыДляВыбора, Элементы.ВложенияПредставление);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлыПослеВыбораОснования(ВыбранныйДокумент, ВыбранныеПрисоединенныеФайлы) Экспорт
	
	Если ВыбранныйДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьПрисоединенныйФайлИзВложенийВОбъекте(ВыбранныйДокумент.Значение, ВыбранныеПрисоединенныеФайлы);
	
	Если ВыбранныеПрисоединенныеФайлы.Количество() = 1 Тогда
		ТекстОповещения = НСтр("ru='Сохранение файла'");
	Иначе
		ТекстОповещения = НСтр("ru='Сохранение файлов'");
	КонецЕсли;
	ПоказатьОповещениеПользователя(
	ТекстОповещения,
	ПолучитьНавигационнуюСсылку(ВыбранныйДокумент.Значение),
	Строка(ВыбранныйДокумент.Значение));
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПрисоединенныйФайлИзВложенийВОбъекте(ВладелецФайлов, ВыбранныеПрисоединенныеФайлы)
	
	Для каждого ВыбранныйПрисоединенныйФайл Из ВыбранныеПрисоединенныеФайлы Цикл
		ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ДополнительныеПараметры.ИдентификаторФормы = УникальныйИдентификатор;
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ВыбранныйПрисоединенныйФайл, ДополнительныеПараметры);
		
		ПараметрыДобавления = РаботаСФайлами.ПараметрыДобавленияФайла();
		ПараметрыДобавления.ВладелецФайлов = ВладелецФайлов;
		ПараметрыДобавления.ИмяБезРасширения = ДанныеФайла.ИмяФайла;
		ПараметрыДобавления.РасширениеБезТочки = ДанныеФайла.Расширение;
		ПараметрыДобавления.ВремяИзмененияУниверсальное = ДанныеФайла.ДатаМодификацииУниверсальная;
		РаботаСФайлами.ДобавитьФайл(ПараметрыДобавления, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДоступныеОснованияДляВыбораФайлов()
	
	ВсеОснования = УчастникиСпискомЗначений();
	Для каждого Значение Из ДокументыОснованияСпискомЗначений() Цикл
		ВсеОснования.Добавить(Значение.Значение);
	КонецЦикла;
	
	ТипВладельцаФайлов = Метаданные.ОпределяемыеТипы.ВладелецПрисоединенныхФайлов.Тип;
	ВсеОснованияВладельцыФайлов = Новый СписокЗначений;
	Для каждого Значение Из ВсеОснования Цикл
		Если НЕ ТипВладельцаФайлов.СодержитТип(ТипЗнч(Значение.Значение)) Тогда
			Продолжить;
		КонецЕсли;
		ВсеОснованияВладельцыФайлов.Добавить(Значение.Значение);
	КонецЦикла;
	
	Возврат ВсеОснованияВладельцыФайлов;
	
КонецФункции

&НаСервере
Функция ДоступныеОснованияДляСохраненияФайлов()
	
	ВсеОснования = УчастникиСпискомЗначений();
	Для каждого Значение Из ДокументыОснованияСпискомЗначений() Цикл
		ВсеОснования.Добавить(Значение.Значение);
	КонецЦикла;
	
	ТипВладельцаФайлов = Метаданные.ОпределяемыеТипы.ВладелецПрисоединенныхФайлов.Тип;
	ВсеОснованияВладельцыФайлов = Новый СписокЗначений;
	Для каждого Значение Из ВсеОснования Цикл
		Если НЕ ТипВладельцаФайлов.СодержитТип(ТипЗнч(Значение.Значение)) Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(Значение.Значение) = Тип("ДокументСсылка.Событие")
			И ЭтоСобытиеЭлектронноеПисьмо(Значение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		ВсеОснованияВладельцыФайлов.Добавить(Значение.Значение);
	КонецЦикла;
	
	Возврат ВсеОснованияВладельцыФайлов;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ЗаполнитьНовоеПисьмоПоУмолчанию(Параметры)
	
	АвтоЗаголовок = Ложь;
	Заголовок = НСтр("ru = 'Исходящее письмо  (создание)'");
	
	Объект.НачалоСобытия = '00010101';
	Объект.ОкончаниеСобытия = '00010101';
	
	Если Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		Объект.УчетнаяЗапись = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.Автор,
		"ОсновнаяУчетнаяЗаписьЭлектроннойПочты");
	КонецЕсли;
	
	Если ВключатьПодписьДляНовыхСообщений(Параметры) Тогда
		
		СтруктураПодписи = Справочники.ПодписиПисем.ПолучитьПодпись(Объект.УчетнаяЗапись);
		Если СтруктураПодписи <> Неопределено И СтруктураПодписи.ВключатьПодписьДляНовыхСообщений Тогда
			
			ПодписьПриОтветеHTML = "";
			КартинкиHTML = Новый Структура;
			СтруктураПодписи.ПодписьДляНовыхФорматированныйДокумент.Получить().ПолучитьHTML(ПодписьПриОтветеHTML, КартинкиHTML);
			
			Объект.СодержаниеHTML = ПодписьПриОтветеHTML;
			
			ДополнитьКартинкиHTML(КартинкиHTML);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьОтветНаПисьмо();
	
КонецПроцедуры

&НаСервере
Функция ВключатьПодписьДляНовыхСообщений(Параметры)
	
	Если Параметры.Свойство("Тело") 
		И ЗначениеЗаполнено(Параметры.Тело) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Параметры.ЗначенияЗаполнения.Свойство("Команда") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВводитсяНаОснованииПисьма(Параметры.Основание) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Ложь;
	
	СтруктураПодписи = Справочники.ПодписиПисем.ПолучитьПодпись(Объект.УчетнаяЗапись);
	Если СтруктураПодписи <> Неопределено Тогда
		Результат = СтруктураПодписи.ВключатьПодписьДляНовыхСообщений;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВводитсяНаОснованииПисьма(Знач Основание)
	
	ОснованиеЗаполнения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Основание, "ОснованиеЗаполнения");
	
	Если ТипЗнч(ОснованиеЗаполнения) = Тип("ДокументСсылка.Событие") Тогда
		
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеЗаполнения, "ТипСобытия") =
		Перечисления.ТипыСобытий.ЭлектронноеПисьмо;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбработатьПереданныеПараметры(Параметры)
	
	Если Не ЗначениеЗаполнено(Объект.Тема) Тогда
		Объект.Тема = Параметры.Тема;
	КонецЕсли;
	
	Если СтрНайти(ВРег(Параметры.Тело), ВРег("doctype html")) > 0 Тогда
		Если Не ЗначениеЗаполнено(Объект.СодержаниеHTML) Тогда
			Объект.СодержаниеHTML = Параметры.Тело;
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(Объект.Содержание) Тогда
			Объект.Содержание = Параметры.Тело;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.ДокументыОснования) = Тип("Массив") 
		ИЛИ ТипЗнч(Параметры.ДокументыОснования) = Тип("ФиксированныйМассив") Тогда
		
		ДопустимыеТипыОснований = 
		Метаданные.Документы.Событие.ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип;
		
		Для Каждого Документ Из Параметры.ДокументыОснования Цикл
			Если ДопустимыеТипыОснований.СодержитТип(ТипЗнч(Документ)) Тогда
				НоваяСтрока = Объект.ДокументыОснования.Добавить();
				НоваяСтрока.ДокументОснование = Документ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.УчетнаяЗапись) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
			// учетная запись не передана - выбираем первую доступную
			
			ДоступныеУчетныеЗаписи = РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(Истина);
			
			Если ДоступныеУчетныеЗаписи.Количество() > 0 Тогда
				
				Объект.УчетнаяЗапись = ДоступныеУчетныеЗаписи[0].Ссылка;
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Параметры.УчетнаяЗапись) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
		
		Объект.УчетнаяЗапись = Параметры.УчетнаяЗапись;
		
	КонецЕсли;
	
	ТипПолучателяЭлектронногоПисьмаКому = Перечисления.ТипыПолучателейЭлектронногоПисьма.Кому;
	
	Если ТипЗнч(Параметры.Кому) = Тип("СписокЗначений") Тогда
		ПочтовыйАдресПолучателя = "";
		Для Каждого ЭлементПочтовыйАдрес Из Параметры.Кому Цикл
			НоваяСтрока = Объект.Участники.Добавить();
			НоваяСтрока.КакСвязаться = ЭлементПочтовыйАдрес.Значение;
			Если ЗначениеЗаполнено(ЭлементПочтовыйАдрес.Представление) Тогда
				НоваяСтрока.Контакт = ЭлементПочтовыйАдрес.Представление;
			КонецЕсли;
			НоваяСтрока.ТипПолучателяЭлектронногоПисьма = ТипПолучателяЭлектронногоПисьмаКому;
			
			ОбновитьПредставлениеСтрокиПолучателя(НоваяСтрока);
			
		КонецЦикла;
	ИначеЕсли ТипЗнч(Параметры.Кому) = Тип("Строка") Тогда
		НоваяСтрока = Объект.Участники.Добавить();
		НоваяСтрока.КакСвязаться = Параметры.Кому;
		НоваяСтрока.ТипПолучателяЭлектронногоПисьма = ТипПолучателяЭлектронногоПисьмаКому;
		
		ОбновитьПредставлениеСтрокиПолучателя(НоваяСтрока);
		
	ИначеЕсли ТипЗнч(Параметры.Кому) = Тип("Массив") Тогда
		Для Каждого СтруктураПолучателя Из Параметры.Кому Цикл
			НоваяСтрока = Объект.Участники.Добавить();
			НоваяСтрока.Контакт = ?(СтруктураПолучателя.Свойство("ИсточникКонтактнойИнформации")
			И ЗначениеЗаполнено(СтруктураПолучателя.ИсточникКонтактнойИнформации),
			СтруктураПолучателя.ИсточникКонтактнойИнформации,
			СтруктураПолучателя.Представление
			);
			НоваяСтрока.КакСвязаться = СтруктураПолучателя.Адрес;
			НоваяСтрока.ТипПолучателяЭлектронногоПисьма = ТипПолучателяЭлектронногоПисьмаКому;
			
			ОбновитьПредставлениеСтрокиПолучателя(НоваяСтрока);
			
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьВложенияИзПараметров(Параметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВложенияИзПараметров(Параметры)
	
	Если ТипЗнч(Параметры.Вложения) <> Тип("СписокЗначений")
		И ТипЗнч(Параметры.Вложения) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	КартинкиИзВложений = Новый Структура;
	
	Для Каждого Вложение Из Параметры.Вложения Цикл
		
		Если ТипЗнч(Параметры.Вложения) = Тип("СписокЗначений") Тогда
			
			ОписаниеВложения = Вложения.Добавить();
			ОписаниеВложения.Представление = Вложение.Представление;
			ЧастиИмениФайла = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Вложение.Представление, ".", Ложь);
			
			Если ЧастиИмениФайла.Количество() > 1 Тогда
				РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество()-1];
				ОписаниеВложения.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(РасширениеБезТочки);
			КонецЕсли;
			
			Если ТипЗнч(Вложение.Значение) = Тип("ДвоичныеДанные") Тогда
				ОписаниеВложения.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Вложение.Значение, УникальныйИдентификатор);
			ИначеЕсли ЭтоАдресВременногоХранилища(Вложение.Значение) Тогда
				ОписаниеВложения.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(
				ПолучитьИзВременногоХранилища(Вложение.Значение), УникальныйИдентификатор);
			Иначе
				ОписаниеВложения.ПутьКФайлу = Вложение.Значение;
			КонецЕсли;
			
		Иначе // ТипЗнч(Параметры.Вложения) = "массив структур"
			
			Если Вложение.Свойство("Идентификатор") И ЗначениеЗаполнено(Вложение.Идентификатор) Тогда
				КартинкиИзВложений.Вставить(
				Вложение.Представление,
				Новый Картинка(ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище)));
				
			Иначе
				
				ОписаниеВложения = Вложения.Добавить();
				ЗаполнитьЗначенияСвойств(ОписаниеВложения, Вложение);
				
				ЧастиИмениФайла = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеВложения.Представление, ".", Ложь);
				Если ЧастиИмениФайла.Количество() > 1 Тогда
					РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество()-1];
					
					// АПК:278-выкл Используется механизм БСП обращения к картинке по индексу.
					ОписаниеВложения.ИндексКартинки = 
					РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(РасширениеБезТочки);
					// АПК:278-вкл
				КонецЕсли;
				
				Если Не ПустаяСтрока(ОписаниеВложения.АдресВоВременномХранилище) Тогда
					ОписаниеВложения.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(
					ПолучитьИзВременногоХранилища(ОписаниеВложения.АдресВоВременномХранилище), УникальныйИдентификатор);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДополнитьКартинкиHTML(КартинкиИзВложений);
	
КонецПроцедуры

&НаСервере
Функция СформироватьПараметрыПисьмаНаСервере(ПриведенныйПочтовыйАдресКому, ПриведенныйПочтовыйАдресКопия, ПриведенныйПочтовыйАдресСкрытаяКопия)
	
	ПараметрыПисьма = Новый Структура;
	
	Если ЗначениеЗаполнено(ПриведенныйПочтовыйАдресКому) Тогда
		ПараметрыПисьма.Вставить("Кому", ПриведенныйПочтовыйАдресКому);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПриведенныйПочтовыйАдресКопия) Тогда
		ПараметрыПисьма.Вставить("Копии", ПриведенныйПочтовыйАдресКопия);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Тема) Тогда
		ПараметрыПисьма.Вставить("Тема", Строка(Объект.Тема));
	КонецЕсли;
	
	АдресПолучателяСкрытойКопии = ПолучитьАдресПолучателяСкрытойКопии();
	
	Если ЗначениеЗаполнено(АдресПолучателяСкрытойКопии) Тогда
		ПриведенныйПочтовыйАдресСкрытаяКопияДоп = 
		ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(АдресПолучателяСкрытойКопии);
		Для Каждого СтрАдрес Из ПриведенныйПочтовыйАдресСкрытаяКопияДоп Цикл
			ПриведенныйПочтовыйАдресСкрытаяКопия.Добавить(СтрАдрес);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПриведенныйПочтовыйАдресСкрытаяКопия) Тогда
		ПараметрыПисьма.Вставить("СлепыеКопии", ПриведенныйПочтовыйАдресСкрытаяКопия);
	КонецЕсли;
	
	ИдентификаторОснования = ИдентификаторыОснований(Истина);
	Если ЗначениеЗаполнено(ИдентификаторОснования) Тогда
		ПараметрыПисьма.Вставить("ИдентификаторОснования", ИдентификаторОснования);
	КонецЕсли;
	
	ИдентификаторыОснований = ИдентификаторыОснований(Ложь);
	Если ЗначениеЗаполнено(ИдентификаторыОснований) Тогда
		ПараметрыПисьма.Вставить("ИдентификаторыОснований", ИдентификаторыОснований);
	КонецЕсли;
	
	ВложенияПисьма = Новый Соответствие;
	ТелоПисьма = "";
	ВложенияКартинки = Новый Структура;
	ФорматированныйДокумент.ПолучитьHTML(ТелоПисьма, ВложенияКартинки);
	ПеренестиКартинкиВоВложения(ТелоПисьма, ВложенияПисьма, ВложенияКартинки);
	ДобавитьВложенияФайлыНаСервере(ВложенияПисьма);
	
	ПараметрыПисьма.Вставить("Тело", ТелоПисьма);
	ПараметрыПисьма.Вставить("ТипТекста", "HTML");
	ПараметрыПисьма.Вставить("Вложения", ВложенияПисьма);
	
	Возврат ПараметрыПисьма;
	
КонецФункции

&НаСервере
Функция ИдентификаторыОснований(ТолькоОдин)
	
	Основания = Новый Массив;
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Основания.Добавить(Объект.ДокументОснование);
	КонецЕсли;
	
	ДокументыОснования = Объект.ДокументыОснования.Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Основания, ДокументыОснования, Истина);
	
	МассивИдентификаторов = РегистрыСведений.ИдентификаторыСообщений.ИдентификаторыСообщений(Объект.УчетнаяЗапись, Основания);
	Если Не ЗначениеЗаполнено(МассивИдентификаторов) Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = Новый Массив;
	
	Для Каждого ТекИдентификатор Из МассивИдентификаторов Цикл
		
		Если Не ЗначениеЗаполнено(ТекИдентификатор) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(СтрШаблон("<%1>", ТекИдентификатор));
		
		Если ТолькоОдин Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрСоединить(Результат, " ");
	
КонецФункции

&НаСервере
Процедура ПеренестиКартинкиВоВложения(ТекстHTML, ВложенияПисьма, Знач ВложенияКартинки)
	
	ДокументHTML = УправлениеНебольшойФирмойВзаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
	
	// Картинки из временного хранилища
	Для Каждого Картинка Из ДокументHTML.Картинки Цикл
		
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		
		Если Не ЭтоАдресВременногоХранилища(АтрибутИсточникКартинки.ТекстовоеСодержимое) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеВложения = Новый Структура("ДвоичныеДанные, Идентификатор");
		ОписаниеВложения.ДвоичныеДанные = ПолучитьИзВременногоХранилища(АтрибутИсточникКартинки.ТекстовоеСодержимое);
		ОписаниеВложения.Идентификатор = Новый УникальныйИдентификатор;
		ВложенияПисьма.Вставить(
		СтрШаблон("cid%1", СтрЗаменить(ОписаниеВложения.Идентификатор, "-", "")),
		ОписаниеВложения);
		
		НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
		НовыйАтрибутКартинки.ТекстовоеСодержимое = СтрШаблон("cid:%1", ОписаниеВложения.Идентификатор);
		Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
		
	КонецЦикла;
	
	// Картинки из вложений
	СоответствиеИмениКартинкиИдентификатору = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из ВложенияКартинки Цикл
		
		ИДКартинки = Новый УникальныйИдентификатор;
		СоответствиеИмениКартинкиИдентификатору[КлючИЗначение.Ключ] = ИДКартинки;
		
		ОписаниеВложения = Новый Структура("ДвоичныеДанные, Идентификатор");
		ОписаниеВложения.ДвоичныеДанные = КлючИЗначение.Значение.ПолучитьДвоичныеДанные();
		ОписаниеВложения.Идентификатор = ИДКартинки;
		ВложенияПисьма.Вставить(КлючИЗначение.Ключ, ОписаниеВложения);
		
	КонецЦикла;
	
	Для Каждого Картинка Из ДокументHTML.Картинки Цикл
		
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		
		Если СоответствиеИмениКартинкиИдентификатору[АтрибутИсточникКартинки.ТекстовоеСодержимое] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
		НовыйАтрибутКартинки.ТекстовоеСодержимое = "cid:"
		+ СоответствиеИмениКартинкиИдентификатору[АтрибутИсточникКартинки.ТекстовоеСодержимое];
		Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
		
	КонецЦикла;
	
	ТекстHTML = УправлениеНебольшойФирмойВзаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтправитьПочтовоеСообщение(Знач ПараметрыПисьма, Знач УчетнаяЗапись, Знач СеансовыеДанные)
	
	Возврат ЭлектроннаяПочтаУНФ.ОтправитьПочтовоеСообщение(ПараметрыПисьма, УчетнаяЗапись);
	
КонецФункции

&НаКлиенте
Процедура ПолучателиКонтактВыборЗавершение(АдресВХранилище, ДополнительныеПараметры) Экспорт
	
	Если ЭтоАдресВременногоХранилища(АдресВХранилище) Тогда
		
		ЗаблокироватьДанныеФормыДляРедактирования();
		Модифицированность = Истина;
		ЗаполнитьКонтактыПоАдреснойКниге(АдресВХранилище);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтактыПоАдреснойКниге(АдресВХранилище)
	
	ТаблицаАдресатов = ПолучитьИзВременногоХранилища(АдресВХранилище);
	ОбработатьТекущуюСтроку = Элементы.Получатели.ТекущаяСтрока <> Неопределено;
	
	Для Каждого ПодобраннаяСтрока Из ТаблицаАдресатов Цикл
		СтрокаУчастники = Неопределено;
		
		Если ОбработатьТекущуюСтроку Тогда
			ОбработатьТекущуюСтроку = Ложь;
			СтрокаУчастники = Объект.Участники.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
		КонецЕсли;
		
		Если СтрокаУчастники <> Неопределено 
			И ЗначениеЗаполнено(СтрокаУчастники.Контакт) 
			И ЗначениеЗаполнено(СтрокаУчастники.КакСвязаться) Тогда
			СтрокаУчастники = Неопределено;
		КонецЕсли;
		
		Если СтрокаУчастники = Неопределено Тогда
			СтрокаУчастники = Объект.Участники.Добавить();
		КонецЕсли;
		
		СтрокаУчастники.Контакт = ПодобраннаяСтрока.Контакт;
		СтрокаУчастники.КакСвязаться = ПодобраннаяСтрока.КакСвязаться;
		СтрокаУчастники.ТипПолучателяЭлектронногоПисьма = ПредопределенноеЗначение("Перечисление.ТипыПолучателейЭлектронногоПисьма.Кому");
		
		ОбновитьПредставлениеСтрокиПолучателя(СтрокаУчастники);
		
	КонецЦикла;
	
	ПолучателиКонтактОбработкаПослеВыборкиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьВложения(Событие)
	
	Вложения.Очистить();
	
	Для Каждого ТекОписаниеВложения Из ВложенияСобытия(Событие) Цикл
		НоваяСтрокаВложения = Вложения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаВложения, ТекОписаниеВложения);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВложенияСобытия(Событие)
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СобытиеПрисоединенныеФайлы.Ссылка,
	|	СобытиеПрисоединенныеФайлы.Наименование,
	|	СобытиеПрисоединенныеФайлы.Расширение,
	|	СобытиеПрисоединенныеФайлы.ИндексКартинки,
	|	СобытиеПрисоединенныеФайлы.ИДФайлаЭлектронногоПисьма
	|ИЗ
	|	Справочник.СобытиеПрисоединенныеФайлы КАК СобытиеПрисоединенныеФайлы
	|ГДЕ
	|	СобытиеПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И СобытиеПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ");
	Запрос.УстановитьПараметр("ВладелецФайла", Событие);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОписаниеВложения = Новый Структура;
		ОписаниеВложения.Вставить("Ссылка", Выборка.Ссылка);
		ОписаниеВложения.Вставить("Идентификатор", Выборка.ИДФайлаЭлектронногоПисьма);
		ОписаниеВложения.Вставить("Представление", Выборка.Наименование + ?(ПустаяСтрока(Выборка.Расширение), "", "." + Выборка.Расширение));
		ОписаниеВложения.Вставить("ИндексКартинки", Выборка.ИндексКартинки);
		ОписаниеВложения.Вставить("Данные", РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.Ссылка));
		ОписаниеВложения.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилище(ОписаниеВложения.Данные, УникальныйИдентификатор));
		
		Результат.Добавить(ОписаниеВложения);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьВложенияФайлыНаСервере(ВложенияПисьма)
	
	Для Каждого Вложение Из Вложения Цикл
		ОписаниеВложения = Новый Структура("ДвоичныеДанные, Идентификатор");
		ОписаниеВложения.ДвоичныеДанные = ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище);
		ОписаниеВложения.Идентификатор = "";
		ВложенияПисьма.Вставить(Вложение.Представление, ОписаниеВложения);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаКВложениям()
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ДобавитьФайлВоВложенияПриПомещенииФайлов", ЭтотОбъект);
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.Диалог.МножественныйВыбор = Истина;
	
	ФайловаяСистемаКлиент.ЗагрузитьФайлы(ОбработчикЗавершения, ПараметрыЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлВоВложенияПриПомещенииФайлов(ПомещенныеФайлы, Параметры) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Или ПомещенныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьФайлыВСписок(ПомещенныеФайлы);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФайлыВСписок(ПомещенныеФайлы)
	
	Для Каждого ОписаниеФайла Из ПомещенныеФайлы Цикл
		
		Файл = Новый Файл(ОписаниеФайла.Имя);
		ПозицияТочки = СтрНайти(Файл.Расширение, ".");
		РасширениеБезТочки = Сред(Файл.Расширение, ПозицияТочки + 1);
		
		Вложение = Вложения.Добавить();
		Вложение.Представление = Файл.Имя;
		Вложение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(
		ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение), УникальныйИдентификатор);
		Вложение.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(РасширениеБезТочки);
		Вложение.ЭтоВложениеЭлектронногоПисьма = Истина;
		
	КонецЦикла;
	
	НастроитьФормуМобильныйКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложение()
	
	Если Элементы.Вложения.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеВложение = Вложения.НайтиПоИдентификатору(Элементы.Вложения.ТекущаяСтрока);
	
	#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
		ПолучитьФайл(ВыбранноеВложение.АдресВоВременномХранилище, ВыбранноеВложение.Представление, Истина);
	#Иначе
		ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
		СоздатьКаталог(ИмяВременнойПапки);
		
		ИмяВременногоФайла = 
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ВыбранноеВложение.Представление;
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВыбранноеВложение.АдресВоВременномХранилище);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
		Файл = Новый Файл(ИмяВременногоФайла);
		Файл.УстановитьТолькоЧтение(Истина);
		Если Файл.Расширение = ".mxl" Тогда
			ТабличныйДокумент = ПолучитьТабличныйДокументПоДвоичнымДанным(ВыбранноеВложение.АдресВоВременномХранилище);
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("ИмяДокумента", ВыбранноеВложение.Представление);
			ПараметрыОткрытия.Вставить("ТабличныйДокумент", ТабличныйДокумент);
			ПараметрыОткрытия.Вставить("ПутьКФайлу", ИмяВременногоФайла);
			ОткрытьФорму("ОбщаяФорма.РедактированиеТабличногоДокумента", ПараметрыОткрытия, ЭтотОбъект);
		Иначе
			ФайловаяСистемаКлиент.ОткрытьФайл(ИмяВременногоФайла);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТабличныйДокументПоДвоичнымДанным(Знач ДвоичныеДанные)
	
	Если ТипЗнч(ДвоичныеДанные) = Тип("Строка") Тогда
		// передан адрес двоичных данных во временном хранилище
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДвоичныеДанные);
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("mxl");
	ДвоичныеДанные.Записать(ИмяФайла);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ИмяФайла);
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		ИмяСобытия = НСтр("ru = 'Получение табличного документа'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , 
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервере
Функция ПоместитьДокументыОснованияВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
	Объект.ДокументыОснования.Выгрузить(,
	"ДокументОснование"
	),
	УникальныйИдентификатор
	);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьДокументыОснованияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	АдресВХранилищеДокументовОснований = ДополнительныеПараметры.АдресВХранилищеДокументовОснований;
	
	Если Результат = КодВозвратаДиалога.OK Тогда
		Модифицированность = Истина;
		ПолучитьДокументыОснованияИзХранилища(АдресВХранилищеДокументовОснований);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДокументыОснованияИзХранилища(АдресВХранилищеДокументовОснований)
	
	ТаблицаДокументыОснования = ПолучитьИзВременногоХранилища(АдресВХранилищеДокументовОснований);
	Объект.ДокументыОснования.Очистить();
	Для каждого СтрокаДокументыОснования Из ТаблицаДокументыОснования Цикл
		Строка = Объект.ДокументыОснования.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаДокументыОснования);
	КонецЦикла;
	
	УстановитьЗаголовокГиперссылкиДокументовОснований();
	
КонецПроцедуры // ПолучитьДокументыОснованияИзХранилища()

&НаСервере
Процедура УстановитьЗаголовокГиперссылкиДокументовОснований()
	
	Если Объект.ДокументыОснования.Количество() = 0 Тогда
		Элементы.ОткрытьДокументыОснования.Заголовок = НСтр("ru = 'Список документов оснований'");
		Возврат;
	КонецЕсли;
	
	ПервыйДокумент = Объект.ДокументыОснования[0].ДокументОснование;
	
	Если Объект.ДокументыОснования.Количество() = 1 Тогда
		Элементы.ОткрытьДокументыОснования.Заголовок = ПервыйДокумент;
		Возврат;
	КонецЕсли;
	
	ОснованияПрописью = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(";%1 основание;;%1 основания;%1 оснований;%1 основания", Объект.ДокументыОснования.Количество() - 1);
	Элементы.ОткрытьДокументыОснования.Заголовок = СтрШаблон(НСтр("ru = '%1 и еще %2.'"), ПервыйДокумент, ОснованияПрописью);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьАдресПолучателяСкрытойКопии()
	
	Возврат УправлениеНебольшойФирмойВзаимодействия.ПолучитьАдресПолучателяСкрытойКопии();
	
КонецФункции

&НаСервере
Процедура СохранитьКонтактнуюИнформациюПолучателейПисьма()
	СобытиеОбъект = РеквизитФормыВЗначение("Объект");
	СобытиеОбъект.СохранитьКонтактнуюИнформациюПолучателейПисьма();
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтактКакСвязаться(ЭлементКлассификатораКонтактов)
	
	Возврат Справочники.КлассификаторКонтактов.КонтактКакСвязаться(ЭлементКлассификатораКонтактов);
	
КонецФункции

&НаСервере
Процедура УчетнаяЗаписьПриИзмененииНаСервере()
	
	Если ОбменСGoogle.ЭтоУчетнаяЗаписьGoogle(Объект.УчетнаяЗапись) Тогда
		СеансовыеДанные = РегистрыСведений.СеансовыеДанныеGoogle.СеансовыеДанные(
		Пользователи.ТекущийПользователь(),
		Перечисления.ОбластиДоступаGoogle.Почта,
		Объект.УчетнаяЗапись);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьПереслать(ПараметрКоманды)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", Новый Структура);
	ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("Команда", ПараметрКоманды);
	ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("ТипСобытия", ПредопределенноеЗначение("Перечисление.ТипыСобытий.ЭлектронноеПисьмо"));
	ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("ОснованиеЗаполнения", Объект.Ссылка);
	ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("ПараметрыОснования", Новый Структура);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("НачалоСобытия", Объект.НачалоСобытия);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("СписокУчастников", Объект.СписокУчастников);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("Тема", Объект.Тема);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("Содержание", Объект.Содержание);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("СодержаниеHTML", Объект.СодержаниеHTML);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("КартинкиHTML", КартинкиHTML);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("ИсточникПривлечения", Объект.ИсточникПривлечения);
	
	Если ПараметрКоманды = ЭлектроннаяПочтаУНФКлиентСервер.КомандаПереслать() 
		И Вложения.Количество() > 0 Тогда
		ПараметрыОткрытия.Вставить("Вложения", Новый СписокЗначений);
		Для Каждого ТекВложение Из Вложения Цикл
			ПараметрыОткрытия.Вложения.Добавить(ТекВложение.АдресВоВременномХранилище, ТекВложение.Представление);
		КонецЦикла;
	КонецЕсли;
	
	ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыОткрытия);
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьЗагрузкуСообщения()
	
	Элементы.СодержаниеВходящегоПисьма.ТекущаяСтраница = Элементы.Загрузка;
	Элементы.СтраницыВложения.ТекущаяСтраница = Элементы.СтраницаВложенияЗагрузка;
	НачатьЗагрузкуСообщенияСПочтовогоСервера();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеУчетнойЗаписи(Результат, Параметры) Экспорт
	
	Оповестить(ЭлектроннаяПочтаУНФКлиентСервер.ИмяСобытияУчетнаяЗаписьОбновлена(), Объект.УчетнаяЗапись);
	ПовторитьЗагрузкуСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗапросаТокена(Результат, Параметры) Экспорт
	
	СеансовыеДанные = Результат;
	
	Если ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(СеансовыеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ОбновитьСеансовыеДанные", СеансовыеДанные);
	ПовторитьЗагрузкуСообщения();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтветНаПисьмо(СтруктураПодписи = Неопределено)
	
	ДанныеИсходногоСообщения = ДанныеИсходногоСообщения();
	
	Если Не ЗначениеЗаполнено(ДанныеИсходногоСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Тема = Документы.Событие.ТемаСПрефиксомОтвета(
	ДанныеИсходногоСообщения.Тема,
	ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
	Параметры.ЗначенияЗаполнения,
	"Команда",
	ЭлектроннаяПочтаУНФКлиентСервер.КомандаОтветить()));
	
	Если ДанныеИсходногоСообщения.Свойство("ИдентификаторСобытия") Тогда
		// Содержание исходного события ещё не загружено - сохраняем значения свойств для заполнения после асинхронной загрузки.
		ДанныеИсходногоСобытия = Новый Структура("НачалоСобытия,СписокУчастников,Тема,УчетнаяЗапись,ИдентификаторСобытия");
		ЗаполнитьЗначенияСвойств(ДанныеИсходногоСобытия, ДанныеИсходногоСообщения);
	Иначе
		ЗаполнитьТекстОтвета(ДанныеИсходногоСообщения, СтруктураПодписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекстОтвета(ДанныеИсходногоСообщения, СтруктураПодписи = Неопределено)
	
	Если ЗначениеЗаполнено(ДанныеИсходногоСообщения.СодержаниеHTML) Тогда
		
		ЗаполнитьОтветаКакГипертекст(ДанныеИсходногоСообщения, СтруктураПодписи);
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеИсходногоСообщения.Содержание) Тогда
		
		ЗаполнитьОтветКакПростойТекст(ДанныеИсходногоСообщения, СтруктураПодписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтветаКакГипертекст(Знач ДанныеИсходногоСообщения, СтруктураПодписи = Неопределено)
	
	Если СтруктураПодписи = Неопределено Тогда
		СтруктураПодписи = Справочники.ПодписиПисем.ПолучитьПодпись(Объект.УчетнаяЗапись);
	КонецЕсли;
	
	Если СтруктураПодписи <> Неопределено И СтруктураПодписи.ВключатьПодписьПриОтветеИлиПересылке Тогда
		ПодписьПриОтветеHTML = "";
		КартинкиHTML = Новый Структура;
		СтруктураПодписи.ПодписьПриОтветеФорматированныйДокумент.Получить().ПолучитьHTML(ПодписьПриОтветеHTML, КартинкиHTML);
		ДополнитьКартинкиHTML(КартинкиHTML);
	Иначе
		ПодписьПриОтветеHTML = "";
	КонецЕсли;
	
	ТекстОтвета = СтрШаблон(НСтр(
	"ru = '%1<div>&nbsp;</div>
	|---------- Исходное сообщение ----------<br>
	|Отправлено: %2<br>
	|Участники: %3<br>
	|Тема: %4<br>
	|<div>&nbsp;</div>
	|%5'"),
	Гипертекст.РазложитьТекстHTML(ПодписьПриОтветеHTML).Тело,
	Гипертекст.ЗаменитьСпецСимволыHTML(Формат(ДанныеИсходногоСообщения.НачалоСобытия, "ДФ='dd.MM.yyyy HH:mm'")),
	Гипертекст.ЗаменитьСпецСимволыHTML(ДанныеИсходногоСообщения.СписокУчастников),
	Гипертекст.ЗаменитьСпецСимволыHTML(ДанныеИсходногоСообщения.Тема),
	Гипертекст.РазложитьТекстHTML(ДанныеИсходногоСообщения.СодержаниеHTML).Тело);
	
	Объект.СодержаниеHTML = ТекстОтвета;
	ДополнитьКартинкиHTML(ДанныеИсходногоСообщения.КартинкиHTML);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтветКакПростойТекст(Знач ДанныеИсходногоСообщения, СтруктураПодписи = Неопределено)
	
	КомпонентыПодписи = Новый Массив;
	
	Если СтруктураПодписи = Неопределено Тогда
		СтруктураПодписи = Справочники.ПодписиПисем.ПолучитьПодпись(Объект.УчетнаяЗапись);
	КонецЕсли;
	
	Если СтруктураПодписи <> Неопределено И СтруктураПодписи.ВключатьПодписьПриОтветеИлиПересылке Тогда
		ТекстHTML = "";
		СтруктураПодписи.ПодписьПриОтветеФорматированныйДокумент.Получить().ПолучитьHTML(ТекстHTML, Новый Соответствие);
		КомпонентыПодписи.Добавить(СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(ТекстHTML));
	КонецЕсли;
	
	КомпонентыПодписи.Добавить("");
	
	ТекстОтвета = СтрШаблон(НСтр(
	"ru = '
	|%1---------- Исходное сообщение ----------
	|Отправлено: %2
	|Участники: %3
	|Тема: %4
	|
	|%5'"),
	СтрСоединить(КомпонентыПодписи, Символы.ПС),
	Формат(ДанныеИсходногоСообщения.НачалоСобытия, "ДФ='dd.MM.yyyy HH:mm'"),
	ДанныеИсходногоСообщения.СписокУчастников,
	ДанныеИсходногоСообщения.Тема,
	ДанныеИсходногоСообщения.Содержание);
	
	Объект.Содержание = ТекстОтвета;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьКартинкиHTML(Источник)
	
	Если КартинкиHTML = Неопределено Тогда
		КартинкиHTML = Новый Структура;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(КартинкиHTML, Источник, Истина);
	
КонецПроцедуры

&НаСервере
Функция ДанныеИсходногоСообщения()
	
	Если Параметры.ЗначенияЗаполнения.Свойство("ПараметрыОснования")
		И ТипЗнч(Параметры.ЗначенияЗаполнения.ПараметрыОснования) = Тип("Структура") Тогда
		ПереопределитьИдентификаторыКартинокHTML(Параметры.ЗначенияЗаполнения.ПараметрыОснования);
		Возврат Параметры.ЗначенияЗаполнения.ПараметрыОснования;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Основание) <> Тип("Структура") Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	ОснованиеЗаполнения = Неопределено;
	Параметры.Основание.Свойство("ОснованиеЗаполнения", ОснованиеЗаполнения);
	
	Если ТипЗнч(ОснованиеЗаполнения) <> Тип("ДокументСсылка.Событие") Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	ОснованиеЗаполнения,
	"ТипСобытия,НачалоСобытия,СписокУчастников,Тема,Содержание,СодержаниеHTML,КартинкиHTML,УчетнаяЗапись");
	
	Если Результат.ТипСобытия <> Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	ЗначениеКартинкиHTML = Результат.КартинкиHTML.Получить();
	Если ТипЗнч(ЗначениеКартинкиHTML) = Тип("Структура") Тогда
		Результат.КартинкиHTML = ЗначениеКартинкиHTML;
	Иначе
		Результат.КартинкиHTML = Новый Структура;
	КонецЕсли;
	
	Результат.Вставить("Ссылка", ОснованиеЗаполнения);
	
	Если ЗначениеЗаполнено(Результат.СодержаниеHTML) Тогда
		ПереопределитьИдентификаторыКартинокHTML(Результат);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.Содержание)
		И Не ЗначениеЗаполнено(Результат.СодержаниеHTML) Тогда
		Результат.Вставить("ИдентификаторСобытия",
		РегистрыСведений.ИдентификаторыСобытий.ИдентификаторСобытия(Результат.УчетнаяЗапись, ОснованиеЗаполнения));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПереопределитьИдентификаторыКартинокHTML(Знач ДанныеИсходногоСообщения)
	
	Если ДанныеИсходногоСообщения.Свойство("Вложения") Тогда
		ВложенияИсходногоСообщения = ДанныеИсходногоСообщения.Вложения;
	ИначеЕсли ДанныеИсходногоСообщения.Свойство("Ссылка") Тогда
		ВложенияИсходногоСообщения = ВложенияСобытия(ДанныеИсходногоСообщения.Ссылка);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВложенияИсходногоСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВложенийПоИдентификаторам = Новый Соответствие;
	Для Каждого ТекВложение Из ВложенияИсходногоСообщения Цикл
		Если ЗначениеЗаполнено(ТекВложение.Идентификатор) Тогда
			ДанныеВложенийПоИдентификаторам[СтрШаблон("cid:%1", ТекВложение.Идентификатор)] = ТекВложение.Данные;
		КонецЕсли;
	КонецЦикла;
	
	ДокументHTML = УправлениеНебольшойФирмойВзаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ДанныеИсходногоСообщения.СодержаниеHTML);
	
	Для Каждого Картинка Из ДокументHTML.Картинки Цикл
		
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		
		Если ДанныеВложенийПоИдентификаторам[АтрибутИсточникКартинки.ТекстовоеСодержимое] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Переопределяем идентификаторы картинок, чтобы они могли быть использованы в качестве ключей структуры КартинкиHTML.
		НовыйИдентификаторКартинки = СтрШаблон("cid%1", СтрЗаменить(Новый УникальныйИдентификатор, "-", ""));
		
		ДанныеИсходногоСообщения.КартинкиHTML.Вставить(
		НовыйИдентификаторКартинки,
		Новый Картинка(ДанныеВложенийПоИдентификаторам[АтрибутИсточникКартинки.ТекстовоеСодержимое]));
		
		НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
		НовыйАтрибутКартинки.ТекстовоеСодержимое = НовыйИдентификаторКартинки;
		Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
		
	КонецЦикла;
	
	ДанныеИсходногоСообщения.СодержаниеHTML = УправлениеНебольшойФирмойВзаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПолученногоПисьма()
	
	Если Объект.ТипСобытия <> Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФормаОтправить.Видимость = Ложь;
	Если Объект.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
		Элементы.ФормаОтветить.КнопкаПоУмолчанию = Истина;
		Элементы.ФормаОтветить.Видимость = Истина;
	Иначе
		Элементы.ФормаПереслать.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	Элементы.ФормаПереслать.Видимость = Истина;
	Элементы.Получатели.ИзменятьПорядокСтрок = Ложь;
	Элементы.Получатели.ИзменятьСоставСтрок = Ложь;
	Элементы.ПолучателиКонтакт.РедактированиеТекста = Ложь;
	Элементы.ПолучателиКонтакт.КнопкаВыбора = Ложь;
	Элементы.ДобавитьВложение.Видимость = Ложь;
	Элементы.ДобавитьФайлИзОснования.Видимость = Ложь;
	Элементы.ВложенияКонтекстноеМенюДобавитьФайлИзОснования.Видимость = Ложь;
	Элементы.ДобавитьПолучателя.Видимость = Ложь;
	Элементы.ПолучателиКонтакт.КнопкаОчистки = Ложь;
	Элементы.ПолучателиКакСвязаться.ТолькоПросмотр = Истина;
	Элементы.Вложения.ТолькоПросмотр = Истина;
	Элементы.Тема.ТолькоПросмотр = Истина;
	Элементы.Тема.КнопкаВыбора = Ложь;
	Элементы.ЗаполнитьСодержание.Видимость = Ложь;
	Элементы.ГруппаСтатусПисьмаМассовойРассылки.Видимость = ПисьмоСозданоНаОснованииРассылкиСервиса();
	Элементы.КоманднаяПанельФорматированногоДокумента.Видимость = Ложь;
	Элементы.ФорматированныйДокумент.Видимость = Ложь;
	Элементы.СодержаниеВходящегоПисьма.Видимость = Истина;
	Элементы.УчетнаяЗапись.ТолькоПросмотр = Истина;
	Элементы.УчетнаяЗапись.Видимость = Не Элементы.ГруппаСтатусПисьмаМассовойРассылки.Видимость;
	Элементы.ФормаЗаполнитьПоШаблону.Видимость = Ложь;
	
	Если ЗначениеЗаполнено(СодержаниеHTML) Тогда
		Элементы.СодержаниеВходящегоПисьма.ТекущаяСтраница = Элементы.HTML;
		Элементы.СтраницыВложения.ТекущаяСтраница = 
		?(Объект.ЗагрузитьПриОткрытии, Элементы.СтраницаВложенияЗагрузка, Элементы.СтраницаВложения);
		ТекущийЭлемент = Элементы.СодержаниеHTML;
	ИначеЕсли ЗначениеЗаполнено(Содержание) Тогда
		Элементы.СодержаниеВходящегоПисьма.ТекущаяСтраница = Элементы.ПростойТекст;
		Элементы.СтраницыВложения.ТекущаяСтраница = 
		?(Объект.ЗагрузитьПриОткрытии, Элементы.СтраницаВложенияЗагрузка, Элементы.СтраницаВложения);
		ТекущийЭлемент = Элементы.Содержание;
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторСобытия)
		И ЗначениеЗаполнено(Объект.УчетнаяЗапись)
		И Объект.ЗагрузитьПриОткрытии Тогда
		Элементы.СодержаниеВходящегоПисьма.ТекущаяСтраница = Элементы.Загрузка;
		Элементы.СтраницыВложения.ТекущаяСтраница = Элементы.СтраницаВложенияЗагрузка;
		Элементы.ФормаОтветить.Доступность = Ложь;
		Элементы.ФормаПереслать.Доступность = Ложь;
		Элементы.ФормаЗаписать.Доступность = Ложь;
	КонецЕсли;
	
	НастроитьВидимостьДат();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуИсходящегоПисьма()
	
	Если Объект.ТипСобытия <> Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИсходногоСобытия)
		И Не ДанныеИсходногоСобытия.Свойство("Содержание") Тогда
		Элементы.ФорматированныйДокумент.Видимость = Ложь;
		Элементы.СодержаниеВходящегоПисьма.Видимость = Истина;
		Элементы.СодержаниеВходящегоПисьма.ТекущаяСтраница = Элементы.Загрузка;
		Элементы.СтраницыВложения.ТекущаяСтраница = Элементы.СтраницаВложенияЗагрузка;
		Элементы.ФормаОтветить.Доступность = Ложь;
		Элементы.ФормаПереслать.Доступность = Ложь;
		Элементы.ФормаЗаписать.Доступность = Ложь;
		Элементы.ФормаЗаполнитьПоШаблону.Видимость = Ложь;
		Элементы.ФормаВставитьПодпись.Видимость = Истина;
	Иначе
		Элементы.ФорматированныйДокумент.Видимость = Истина;
		Элементы.СодержаниеВходящегоПисьма.Видимость = Ложь;
		Элементы.ФормаЗаполнитьПоШаблону.Видимость = Истина;
		Элементы.ФормаВставитьПодпись.Видимость = Истина;
		
		Если ЗначениеЗаполнено(Объект.СодержаниеHTML) Тогда
			ФорматированныйДокумент.УстановитьHTML(Объект.СодержаниеHTML, КартинкиHTML);
		Иначе
			ФорматированныйДокумент.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(Объект.Содержание));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Тема) Тогда
			ТекущийЭлемент = Элементы.ФорматированныйДокумент;
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьВидимостьДат();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьДат()
	
	Если Объект.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
		Элементы.ДатаОтправки.Видимость = Ложь;
		Элементы.ДатаПолучения.Видимость = Истина;
	Иначе
		Элементы.ДатаОтправки.Видимость = Истина;
		Элементы.ДатаПолучения.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереВходящегоСобытия(ТекущийОбъект)
	
	Если ЗначениеЗаполнено(Содержание) Тогда
		ТекущийОбъект.Содержание = Содержание;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СодержаниеHTML) Тогда
		ТекущийОбъект.СодержаниеHTML = СодержаниеHTML;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереИсходящегоСобытия(ТекущийОбъект)
	
	Если ЗначениеЗаполнено(ИдентификаторСобытия) Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("Идентификатор", ИдентификаторСобытия);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторыСообщений) Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ИдентификаторыСообщений", ИдентификаторыСообщений);
	КонецЕсли;
	
	ТекстHTML = "";
	Картинки = Новый Структура;
	ТекущийОбъект.Содержание = ФорматированныйДокумент.ПолучитьТекст();
	Если ФорматированныйДокумент.Элементы.Количество() <> 0 Тогда
		ФорматированныйДокумент.ПолучитьHTML(ТекстHTML, Картинки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийОбъект.Содержание)
		Или ЗначениеЗаполнено(Картинки) Тогда
		ТекущийОбъект.СодержаниеHTML = ТекстHTML;
	Иначе
		ТекущийОбъект.СодержаниеHTML = "";
	КонецЕсли;
	
	ТекущийОбъект.КартинкиHTML = Новый ХранилищеЗначения(Картинки);
	
	СохранитьТемуСобытияВИсторииАвтоподбора(ТекущийОбъект.Тема, ИсторияТемСтрокой);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОтправкуПисьма(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПисьма = СформироватьПараметрыПисьмаНаСервере(ПриведенныйПочтовыйАдресКому,
	ПриведенныйПочтовыйАдресКопия,
	ПриведенныйПочтовыйАдресСкрытаяКопия);
	
	Если ПараметрыПисьма = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Ошибка формирования параметров почтового сообщения'"));
		Возврат;
	КонецЕсли;
	
	Попытка
		РезультатОтправки = ОтправитьПочтовоеСообщение(ПараметрыПисьма, Объект.УчетнаяЗапись, СеансовыеДанные);
		ИдентификаторСобытия = РезультатОтправки.Идентификатор;
		ИдентификаторыСообщений = РезультатОтправки.ИдентификаторыСообщений;
		Успешно = Истина;
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрацииНаСервереБезКонтекста(ИнформацияОбОшибке);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Успешно = Ложь;
	КонецПопытки;
	
	Если Не Успешно Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Состояние = ПредопределенноеЗначение("Справочник.СостоянияСобытий.Завершено");
	Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	Объект.НачалоСобытия = Объект.Дата;
	Объект.ОкончаниеСобытия = Объект.Дата;
	Записать();
	
	СохранитьКонтактнуюИнформациюПолучателейПисьма();
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Сообщение успешно отправлено'"), ПолучитьНавигационнуюСсылку(Объект.Ссылка), Строка(Объект.Ссылка), БиблиотекаКартинок.Информация32);
	Закрыть(Успешно);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписьЖурналаРегистрацииНаСервереБезКонтекста(ИнформацияОбОшибке)
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'ОтправитьПочтовоеСообщение'",
	ОбщегоНазначения.КодОсновногоЯзыка()),
	УровеньЖурналаРегистрации.Ошибка,
	Неопределено,
	Неопределено,
	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗагрузкуСообщенияСПочтовогоСервера()
	
	Если ТребуетсяЗагрузитьСообщениеСПочтовогоСервера() Тогда
		ПодключитьОбработчикОжидания("ЗагрузитьСообщениеСПочтовогоСервера", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяЗагрузитьСообщениеСПочтовогоСервера()
	
	Если Объект.ТипСобытия <> ПредопределенноеЗначение("Перечисление.ТипыСобытий.ЭлектронноеПисьмо") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.ЗагрузитьПриОткрытии И ЗначениеЗаполнено(ИдентификаторСобытия) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Объект.ВходящееИсходящееСобытие = ПредопределенноеЗначение("Перечисление.ВходящееИсходящееСобытие.Исходящее")
		И ЗначениеЗаполнено(ДанныеИсходногоСобытия) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьСообщениеСПочтовогоСервера()
	
	Задание = ЗаданиеЗагрузитьСообщениеСПочтовогоСервераНаСервере();
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеЗадания", ЭтотОбъект);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Задание, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ЗаданиеЗагрузитьСообщениеСПочтовогоСервераНаСервере()
	
	ОбменСGoogle.ИнициализироватьСеансовыеДанные(
	СеансовыеДанные,
	Пользователи.ТекущийПользователь(),
	Перечисления.ОбластиДоступаGoogle.Почта,
	Объект.УчетнаяЗапись);
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("СеансовыеДанные", СеансовыеДанные);
	ПараметрыПроцедуры.Вставить("ВходящееИсходящееСобытие", Объект.ВходящееИсходящееСобытие);
	ПараметрыПроцедуры.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
	ПараметрыПроцедуры.Вставить("Идентификатор",
	?(ЗначениеЗаполнено(ДанныеИсходногоСобытия), ДанныеИсходногоСобытия.ИдентификаторСобытия, ИдентификаторСобытия));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
	"ЭлектроннаяПочтаУНФ.ЗагрузитьСодержаниеСообщения",
	ПараметрыПроцедуры,
	ПараметрыВыполнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗавершениеЗадания(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Результат.Свойство("Статус") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		Элементы.СодержаниеВходящегоПисьма.ТекущаяСтраница = Элементы.ПроизошлаОшибка;
		Элементы.СтраницыВложения.ТекущаяСтраница = Элементы.СтраницаВложенияЗагрузка;
		ОписаниеОшибки = Результат.ПодробноеПредставлениеОшибки;
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ОбработатьЗагруженноеСПочтовогоСервераСообщениеНаСервере(Результат.АдресРезультата);
		ОповеститьОбИзменении(Объект.Ссылка);
		
		ОбновитьКонтактСтрокойНаКлиенте();
		
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗагруженноеСПочтовогоСервераСообщениеНаСервере(АдресРезультата)
	
	ДанныеСобытия = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(ДанныеСобытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФормаОтветить.Доступность = Истина;
	Элементы.ФормаПереслать.Доступность = Истина;
	Элементы.ФормаЗаписать.Доступность = Истина;
	
	Если ЗначениеЗаполнено(ДанныеИсходногоСобытия) Тогда
		ДанныеИсходногоСобытия.Вставить("Тема", ДанныеСобытия.Тема);
		ДанныеИсходногоСобытия.Вставить("Содержание", ДанныеСобытия.Содержание);
		ДанныеИсходногоСобытия.Вставить("СодержаниеHTML", ДанныеСобытия.СодержаниеHTML);
		ДанныеИсходногоСобытия.Вставить("КартинкиHTML", Новый Структура);
		Если ДанныеСобытия.Свойство("КартинкиHTML") Тогда
			ДанныеИсходногоСобытия.КартинкиHTML = ДанныеСобытия.КартинкиHTML;
		КонецЕсли;
		Если ДанныеСобытия.Свойство("Вложения") Тогда
			ДанныеИсходногоСобытия.Вставить("Вложения", ДанныеСобытия.Вложения);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеИсходногоСобытия.СодержаниеHTML) Тогда
			ПереопределитьИдентификаторыКартинокHTML(ДанныеИсходногоСобытия);
		КонецЕсли;
		ЗаполнитьТекстОтвета(ДанныеИсходногоСобытия);
		НастроитьФормуИсходящегоПисьма();
	Иначе
		
		ЗаполнитьВложения(ДанныеСобытия);
		Объект.Тема = ДанныеСобытия.Тема;
		Содержание = ДанныеСобытия.Содержание;
		СодержаниеHTML = ДанныеСобытия.СодержаниеHTML;
		Объект.ЗагрузитьПриОткрытии = Ложь;
		Если Не ТолькоПросмотр Тогда
			Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Вложения.Количество() > 0 Тогда
		СодержаниеHTML = Гипертекст.ОбработатьТекстHTML(ДанныеСобытия.СодержаниеHTML,, Вложения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СодержаниеHTML) Тогда
		Элементы.СодержаниеВходящегоПисьма.ТекущаяСтраница = Элементы.HTML;
		ТекущийЭлемент = Элементы.СодержаниеHTML;
	Иначе
		Элементы.СодержаниеВходящегоПисьма.ТекущаяСтраница = Элементы.ПростойТекст;
		ТекущийЭлемент = Элементы.Содержание;
	КонецЕсли;
	
	Элементы.СтраницыВложения.ТекущаяСтраница = 
	?(Объект.ЗагрузитьПриОткрытии, Элементы.СтраницаВложенияЗагрузка, Элементы.СтраницаВложения);
	
	РегистрыСведений.ПросмотрСобытий.ОтметитьКакПросмотрено(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВложения(ДанныеСобытия)
	
	Если Не ДанныеСобытия.Свойство("Вложения") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекВложение Из ДанныеСобытия.Вложения Цикл
		
		Если ТипЗнч(ТекВложение.Данные) = Тип("ДвоичныеДанные") Тогда
			
			ОписаниеВложения = Вложения.Добавить();
			ОписаниеВложения.ЭтоВложениеЭлектронногоПисьма = Истина;
			ОписаниеВложения.Идентификатор = ТекВложение.Идентификатор;
			ОписаниеВложения.Представление = ТекВложение.ИмяФайла;
			ОписаниеВложения.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТекВложение.Данные, УникальныйИдентификатор);
			
			ЧастиИмениФайла = СтрРазделить(ОписаниеВложения.Представление, ".");
			Если ЗначениеЗаполнено(ЧастиИмениФайла) Тогда
				РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.ВГраница()];
				ОписаниеВложения.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(РасширениеБезТочки);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ТекВложение.Данные) = Тип("ИнтернетПочтовоеСообщение") Тогда
			
			ОписаниеВложения = Вложения.Добавить();
			ОписаниеВложения.Идентификатор = ТекВложение.Идентификатор;
			ОписаниеВложения.Представление = СтрШаблон("%1.eml", ТекВложение.Данные.Тема);
			ОписаниеВложения.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТекВложение.Данные.ПолучитьИсходныеДанные(), УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкиУчастников()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	Контрагенты.ВидКонтрагента
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка В(&Контрагенты)");
	Запрос.УстановитьПараметр("Контрагенты", Объект.Участники.Выгрузить().ВыгрузитьКолонку("Контакт"));
	
	ВидыКонтрагентов = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидыКонтрагентов[Выборка.Ссылка] = Выборка.ВидКонтрагента;
	КонецЦикла;
	
	Для Каждого ТекСтрокаУчастники Из Объект.Участники Цикл
		
		Если ТипЗнч(ТекСтрокаУчастники.Контакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			ТекСтрокаУчастники.ИндексКартинки = 4;
		ИначеЕсли ВидыКонтрагентов[ТекСтрокаУчастники.Контакт] = Перечисления.ВидыКонтрагентов.ФизическоеЛицо Тогда
			ТекСтрокаУчастники.ИндексКартинки = 3;
		ИначеЕсли ВидыКонтрагентов[ТекСтрокаУчастники.Контакт] = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель Тогда
			ТекСтрокаУчастники.ИндексКартинки = 3;
		ИначеЕсли ВидыКонтрагентов[ТекСтрокаУчастники.Контакт] <> Неопределено Тогда
			ТекСтрокаУчастники.ИндексКартинки = 2;
		Иначе
			ТекСтрокаУчастники.ИндексКартинки = 1;
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СопоставитьКонтактИАдресЭППередЗаписьюНаСервере(ТекущийОбъект)
	
	Если Не ЗначениеЗаполнено(КонтактИАдресЭПДляСопоставления) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийОбъект.УстановитьСсылкиУчастниковПоАдресуЭП(КонтактИАдресЭПДляСопоставления.Контакт, КонтактИАдресЭПДляСопоставления.АдресЭП);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВложениеВПрисоединенныеФайлы(Знач Выборка, Знач ТекущийОбъект)
	
	Если Не ЭтоАдресВременногоХранилища(Выборка.АдресВоВременномХранилище) Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(Выборка.Представление);
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("Автор", Пользователи.ТекущийПользователь());
	ПараметрыФайла.Вставить("ВладелецФайлов", ТекущийОбъект.Ссылка);
	ПараметрыФайла.Вставить("ИмяБезРасширения", ПолноеИмяФайла.ИмяБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки", ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ПолноеИмяФайла.Расширение));
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяУниверсальнаяДата());
	
	ПрисоединенныйФайлСсылка = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, Выборка.АдресВоВременномХранилище);
	
	Вложения.НайтиСтроки(Новый Структура("Представление, АдресВоВременномХранилище", Выборка.Представление, Выборка.АдресВоВременномХранилище))[0].Ссылка = ПрисоединенныйФайлСсылка;
	
	Если ЗначениеЗаполнено(Выборка.Идентификатор)
		ИЛИ Выборка.ЭтоВложениеЭлектронногоПисьма = Истина Тогда
		
		ПрисоединенныйФайлОбъект = ПрисоединенныйФайлСсылка.ПолучитьОбъект();
		
		Если ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
			ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Выборка.Идентификатор;
		КонецЕсли;
		
		Если Выборка.ЭтоВложениеЭлектронногоПисьма = Истина Тогда
			ПрисоединенныйФайлОбъект.ЭтоВложениеЭлектронногоПисьма = Выборка.ЭтоВложениеЭлектронногоПисьма;
		КонецЕсли;
		
		ПрисоединенныйФайлОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВложениеИзПрисоединенныхФайлов(Знач Выборка)
	
	ПрисоединенныйФайлОбъект = Выборка.ПрисоединенныйФайлСсылка.ПолучитьОбъект();
	ПрисоединенныйФайлОбъект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВложениеВПрисоединенныхФайлах(Знач Выборка)
	
	РаботаСФайлами.ОбновитьФайл(Выборка.ПрисоединенныйФайлСсылка, 
	Новый Структура("АдресФайлаВоВременномХранилище, АдресВременногоХранилищаТекста", Выборка.АдресВоВременномХранилище, ""));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораКонтактов(знач СтрокаПоиска)
	
	МассивКонтрагентов = Новый Массив;
	МассивКонтактов = Новый Массив;
	МассивЛидов = Новый Массив;
	
	ДанныеВыбораКонтактов = Новый СписокЗначений;
	
	НомерВхожденияКонец = СтрНайти(СтрокаПоиска, ">", НаправлениеПоиска.СКонца);
	Если НомерВхожденияКонец <> 0 Тогда
		НомерВхожденияНачало = СтрНайти(СтрокаПоиска, "<", НаправлениеПоиска.СКонца, НомерВхожденияКонец);
		СтрокаЭлектроннаяПочта = Сред(СтрокаПоиска, НомерВхожденияНачало, НомерВхожденияКонец - НомерВхожденияНачало + 1);
		Если СтрНайти(СтрокаЭлектроннаяПочта, "@") <> 0 Тогда
			СтрокаПоиска = СокрЛП(СтрЗаменить(СтрокаПоиска, СтрокаЭлектроннаяПочта, ""));
		КонецЕсли;
	КонецЕсли;
	
	Если СтрДлина(СтрокаПоиска) < 3 Тогда
		Возврат ДанныеВыбораКонтактов;
	КонецЕсли;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ПометкаУдаления", Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	
	ДанныеВыбораКонтрагентов = Справочники.Контрагенты.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораКонтрагентов Цикл
		МассивКонтрагентов.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	
	ДанныеВыбораКонтактныхЛиц = Справочники.КонтактныеЛица.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораКонтактныхЛиц Цикл
		МассивКонтактов.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ВариантЗавершения", Перечисления.ВариантЗавершенияРаботыСЛидом.ПустаяСсылка()));
	ДанныеВыбораКонтактныхЛицЛиды = Справочники.Лиды.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораКонтактныхЛицЛиды Цикл
		МассивЛидов.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.АдресЭПДляПоиска КАК АдресЭПДляПоиска
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка В(&МассивКонтрагентов)
	|	И Контрагенты.АдресЭПДляПоиска <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтактныеЛица.Ссылка КАК Ссылка,
	|	КонтактныеЛица.АдресЭПДляПоиска КАК АдресЭПДляПоиска
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.Ссылка В(&МассивКонтактов)
	|	И КонтактныеЛица.АдресЭПДляПоиска <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтактныеЛица.Ссылка КАК Ссылка,
	|	КонтактныеЛица.АдресЭПДляПоиска КАК АдресЭПДляПоиска
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.Ссылка В(&МассивЛидов)
	|	И КонтактныеЛица.АдресЭПДляПоиска <> """"";
	
	Запрос.УстановитьПараметр("МассивКонтактов", МассивКонтактов);
	Запрос.УстановитьПараметр("МассивКонтрагентов", МассивКонтрагентов);
	Запрос.УстановитьПараметр("МассивЛидов", МассивЛидов);
	
	ПредставлениеКонтрагент = НСтр("ru = '(контрагент)'");
	ПредставлениеКонтактноеЛицо = НСтр("ru = '(контактное лицо)'");
	ПредставлениеЛид = НСтр("ru = '(лид)'");
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаДетальныеЗаписи = РезультатЗапроса[0].Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДанныеВыбораКонтактов.Добавить(ВыборкаДетальныеЗаписи.Ссылка, Новый ФорматированнаяСтрока(
		Новый ФорматированнаяСтрока(ДанныеВыбораКонтрагентов.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Ссылка).Представление,
		ПредставлениеКонтрагент), " <" + ВыборкаДетальныеЗаписи.АдресЭПДляПоиска + ">"));
	КонецЦикла;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[1].Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДанныеВыбораКонтактов.Добавить(ВыборкаДетальныеЗаписи.Ссылка, Новый ФорматированнаяСтрока(
		Новый ФорматированнаяСтрока(ДанныеВыбораКонтактныхЛиц.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Ссылка).Представление,
		ПредставлениеКонтактноеЛицо), " <" + ВыборкаДетальныеЗаписи.АдресЭПДляПоиска + ">"));
	КонецЦикла;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[2].Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДанныеВыбораКонтактов.Добавить(ВыборкаДетальныеЗаписи.Ссылка, Новый ФорматированнаяСтрока(
		Новый ФорматированнаяСтрока(ДанныеВыбораКонтактныхЛицЛиды.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Ссылка).Представление,
		ПредставлениеЛид), " <" + ВыборкаДетальныеЗаписи.АдресЭПДляПоиска + ">"));
	КонецЦикла;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ПометкаУдаления", Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	ДанныеВыбораКлассификатораКонтактов = Справочники.КлассификаторКонтактов.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораКлассификатораКонтактов Цикл
		ДанныеВыбораКонтактов.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление,, ЭлементСписка.Картинка);
	КонецЦикла;
	
	Возврат ДанныеВыбораКонтактов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораТемы(знач СтрокаПоиска, знач ИсторияТемСтрокой)
	
	СписокВыбораТемы = Новый СписокЗначений;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ПометкаУдаления", Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	ПараметрыВыбора.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	
	ДанныеВыбораТемы = Справочники.ТемыСобытий.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораТемы Цикл
		СписокВыбораТемы.Добавить(ЭлементСписка.Значение, Новый ФорматированнаяСтрока(ЭлементСписка.Представление, " (тема события)"));
	КонецЦикла;
	
	Для Каждого ЭлементИстории Из ИсторияТемСтрокой Цикл
		Если Лев(ЭлементИстории.Значение, СтрДлина(СтрокаПоиска)) = СтрокаПоиска Тогда
			СписокВыбораТемы.Добавить(ЭлементИстории.Значение, 
			Новый ФорматированнаяСтрока(Новый ФорматированнаяСтрока(СтрокаПоиска,Новый Шрифт(,,Истина),WebЦвета.Зеленый), Сред(ЭлементИстории.Значение, СтрДлина(СтрокаПоиска)+1)));
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокВыбораТемы;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьИсториюТемСтрокой()
	
	СписокВыбораТемы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("СписокВыбораТемыСобытия", "");
	Если СписокВыбораТемы <> Неопределено Тогда
		ИсторияТемСтрокой.ЗагрузитьЗначения(СписокВыбораТемы);
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьСписокВыбораТемыСобытия()

&НаКлиенте
Процедура ЗаполнитьСодержаниеСобытия(ТемаСобытия)
	
	Если ТипЗнч(ТемаСобытия) <> Тип("СправочникСсылка.ТемыСобытий") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ФорматированныйДокумент.ПолучитьТекст()) Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьСодержаниеСобытияЗавершение", ЭтотОбъект, Новый Структура("ТемаСобытия", ТемаСобытия)),
		НСтр("ru = 'Перезаполнить содержание по выбранной теме?'"), РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьСодержаниеСобытияФрагмент(ТемаСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСодержаниеСобытияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСодержаниеСобытияФрагмент(ДополнительныеПараметры.ТемаСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСодержаниеСобытияФрагмент(Знач ТемаСобытия)
	
	ЗаполнитьФорматированныйДокументПоТемеСобытия(ФорматированныйДокумент, ТемаСобытия);
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ЗаполнитьФорматированныйДокументПоТемеСобытия(ФорматированныйДокумент, ТемаСобытия)
	
	ФорматированныйДокумент.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(ТемаСобытия.Содержание));
	
КонецПроцедуры

&НаСервере
Функция ТаблицаВложений()
	
	Результат = Вложения.Выгрузить();
	
	Если Не ЗначениеЗаполнено(КартинкиHTML) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ТекКартинка Из КартинкиHTML Цикл
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТекКартинка.Значение.ПолучитьДвоичныеДанные(), УникальныйИдентификатор);
		НоваяСтрока.Идентификатор = ТекКартинка.Ключ;
		НоваяСтрока.Представление = ТекКартинка.Ключ;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПисьмоПоШаблону(ДанныеСообщения)
	
	Если ТипЗнч(ДанныеСообщения.Получатель) = Тип("Массив") И ДанныеСообщения.Получатель.Количество() > 0 Тогда
		Объект.Участники.Очистить();
		Для Каждого Получатель Из ДанныеСообщения.Получатель Цикл
			Участник = Объект.Участники.Добавить();
			Участник.Контакт = ?(ЗначениеЗаполнено(Получатель.ИсточникКонтактнойИнформации), Получатель.ИсточникКонтактнойИнформации, Получатель.Представление);
			Участник.КакСвязаться = Получатель.Адрес;
			Участник.ТипПолучателяЭлектронногоПисьма = ПредопределенноеЗначение("Перечисление.ТипыПолучателейЭлектронногоПисьма.Кому");
			
			ОбновитьПредставлениеСтрокиПолучателя(Участник);
			
		КонецЦикла;
	КонецЕсли;
	
	КартинкиФД = Новый Структура;
	Если ДанныеСообщения.Вложения <> Неопределено Тогда
		Для Каждого Вложение Из ДанныеСообщения.Вложения Цикл
			Если ЗначениеЗаполнено(Вложение.Идентификатор) Тогда
				КартинкиФД.Вставить(
				Вложение.Представление,
				Новый Картинка(ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище)));
			Иначе
				
				НовоеВложение = Вложения.Добавить();
				НовоеВложение.Представление = Вложение.Представление;
				НовоеВложение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(
				ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище), ЭтотОбъект.УникальныйИдентификатор);
				
				ЧастиИмениФайла = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Вложение.Представление, ".", Ложь);
				Если ЧастиИмениФайла.Количество() > 1 Тогда
					РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество()-1];
					НовоеВложение.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(РасширениеБезТочки);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Объект.Тема = ДанныеСообщения.Тема;
	ФорматированныйДокумент.УстановитьHTML(ДанныеСообщения.Текст, КартинкиФД);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыборШаблонаПоПредмету(ПредметШаблона = Неопределено)
	
	Если Не ЕстьДоступныеШаблоны(ПредметШаблона) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		НСтр("ru='Нет доступных шаблонов. Добавить новые шаблоны можно в списке шаблонов: CRM — Шаблоны писем, SMS'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоШаблонуПослеВыбораШаблона", ЭтотОбъект);
	ШаблоныСообщенийКлиент.ПодготовитьСообщениеПоШаблону(ПредметШаблона, "Письмо", ОписаниеОповещения,, Новый Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьПодписьЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ВставитьПодписьНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьПодписьНаСервере(ПодписьПисем)
	
	СтруктураПодписи = Справочники.ПодписиПисем.ПолучитьПодпись(Объект.УчетнаяЗапись, ПодписьПисем);
	
	Если СтруктураПодписи <> Неопределено Тогда
		Если СтруктураПодписи.ВключатьПодписьДляНовыхСообщений Тогда
			
			Если СтруктураПодписи <> Неопределено И СтруктураПодписи.ВключатьПодписьДляНовыхСообщений Тогда
				
				ПодписьПриОтветеHTML = "";
				КартинкиHTML = Новый Структура;
				СтруктураПодписи.ПодписьДляНовыхФорматированныйДокумент.Получить().ПолучитьHTML(ПодписьПриОтветеHTML, КартинкиHTML);
				
				Объект.СодержаниеHTML = ПодписьПриОтветеHTML;
				
				ДополнитьКартинкиHTML(КартинкиHTML);
				
				Если ЗначениеЗаполнено(Объект.СодержаниеHTML) Тогда
					ФорматированныйДокумент.УстановитьHTML(Объект.СодержаниеHTML, КартинкиHTML);
				Иначе
					ФорматированныйДокумент.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(Объект.Содержание));
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		ВставитьПодписьНаСервереФорматированныйДокумент(ПодписьПисем, СтруктураПодписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьПодписьНаСервереФорматированныйДокумент(ПодписьПисем, СтруктураПодписи)
	
	Если Не ЗначениеЗаполнено(ДанныеИсходногоСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИсходногоСообщения.Свойство("ИдентификаторСобытия") Тогда
		// Содержание исходного события еще не загружено - сохраняем значения свойств для заполнения после асинхронной загрузки.
		ДанныеИсходногоСобытия = Новый Структура("НачалоСобытия,СписокУчастников,Тема,УчетнаяЗапись,ИдентификаторСобытия");
		ЗаполнитьЗначенияСвойств(ДанныеИсходногоСобытия, ДанныеИсходногоСообщения);
	Иначе
		ЗаполнитьТекстОтвета(ДанныеИсходногоСообщения, СтруктураПодписи);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СодержаниеHTML) Тогда
		ФорматированныйДокумент.УстановитьHTML(Объект.СодержаниеHTML, КартинкиHTML);
	Иначе
		ФорматированныйДокумент.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(Объект.Содержание));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПослеВыбораШаблона(ДанныеСообщения, ДополнительныеПараметры) Экспорт
	
	Если ДанныеСообщения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПисьмоПоШаблону(ДанныеСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыборПредметаШаблона(СписокПредметов)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоШаблонуПослеВыбораПредмета", ЭтотОбъект);
	СписокПредметов.Вставить(0, "Общий", НСтр("ru='<Общие шаблоны>'"));
	
	СписокПредметов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru='Выбор предмета шаблона'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПослеВыбораПредмета(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "Общий" Тогда
		ОткрытьВыборШаблонаПоПредмету();
	Иначе
		ОткрытьВыборШаблонаПоПредмету(ВыбранныйЭлемент.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьДоступныеШаблоны(ПредметШаблона)
	Возврат ШаблоныСообщенийПереопределяемый.ЕстьДоступныеШаблоны(Истина, ПредметШаблона);
КонецФункции

&НаСервере
Функция ПолучитьУчастниковСсылочногоТипа()
	
	Участники = Объект.Участники.Выгрузить(,"Контакт").ВыгрузитьКолонку("Контакт");
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(Участники, Тип("Строка"));
	Индекс = Участники.ВГраница();
	Пока Индекс >= 0 Цикл
		Если Не ЗначениеЗаполнено(Участники[Индекс]) Тогда
			Участники.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Возврат Участники;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ)
	
	ОбязательныеДляЗаполненияРеквизиты = РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательныеДляЗаполненияРеквизитыОбъекта("ЭлектронноеПисьмо");
	
	Для Каждого Реквизит Из ОбязательныеДляЗаполненияРеквизиты Цикл
		
		Если ЗначениеЗаполнено(Объект[Реквизит]) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(
		ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", 
		"Источник привлечения"),,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Объект[%1]", Реквизит),,
		Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЛидаПоКонтакту(Контакт)
	Возврат Справочники.КонтактыЛидов.ВладелецКонтакта(Контакт);
КонецФункции

&НаСервере
Функция УчастникиСпискомЗначений()
	
	Результат = Новый СписокЗначений;
	
	Для каждого Строка Из Объект.Участники Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Контакт) Тогда
			Продолжить;
		КонецЕсли;
		Если Результат.НайтиПоЗначению(Строка.Контакт) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Результат.Добавить(Строка.Контакт);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДокументыОснованияСпискомЗначений()
	
	Результат = Новый СписокЗначений;
	
	Для каждого Строка Из Объект.ДокументыОснования Цикл
		Если Результат.НайтиПоЗначению(Строка.ДокументОснование) = Неопределено Тогда
			Результат.Добавить(Строка.ДокументОснование);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЭтоСобытиеЭлектронноеПисьмо(СобытиеСсылка)
	
	ТипСобытия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеСсылка, "ТипСобытия");
	Возврат ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо;
	
КонецФункции

&НаКлиенте
Процедура ПредложитьСохранитьДокумент(ТекстПредупреждения, ОписаниеОповещения = Неопределено)
	
	ЗаписьОбъектаДляПродолжения = Новый ОписаниеОповещения("ЗаписьОбъектаДляПродолжения", ЭтотОбъект, ОписаниеОповещения);
	ПоказатьВопрос(ЗаписьОбъектаДляПродолжения, ТекстПредупреждения, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьОбъектаДляПродолжения(Результат, ОписаниеОповещения) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектЗаписан = Записать();
	
	Если ОбъектЗаписан И ОписаниеОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКонтактСтрокойНаКлиенте()
	
	Для Каждого Стр Из Объект.Участники Цикл
		Стр.КонтактСтрокой = "" + Стр.Контакт + " <" + Стр.КакСвязаться + ">";
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьТемуСобытияВИсторииАвтоподбора(Знач Тема, ИсторияТемСтрокой)
	
	Если ТипЗнч(Тема) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	Тема = СокрЛП(Тема);
	ЭлементИстории = ИсторияТемСтрокой.НайтиПоЗначению(Тема);
	Если ЭлементИстории <> Неопределено Тогда
		ИсторияТемСтрокой.Удалить(ЭлементИстории);
	КонецЕсли;
	ИсторияТемСтрокой.Вставить(0, Тема);
	ИсторияТем = ИсторияТемСтрокой.ВыгрузитьЗначения();
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("СписокВыбораТемыСобытия", "", ИсторияТем);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область НастройкаВидимостьЭлементовФормы

// Процедура выполняет настройку элементов формы для корректного отображения в мобильном клиенте
//
&НаСервере
Процедура НастроитьФормуМобильныйКлиент()
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПолучатели", "ОтображатьЗаголовок", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаВложения", "ОтображатьЗаголовок", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаВложения", "Заголовок", НСтр("ru = 'Вложения ('") + Строка(Вложения.Количество()) + ")");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДобавитьПолучателя", "Видимость", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаВложения", "Отображение", ОтображениеОбычнойГруппы.СлабоеВыделение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
