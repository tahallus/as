
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	
	Элементы.КонтактыКонтакт.ОграничениеТипа = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДатаДокумента = Объект.Дата;
	Иначе
		ПриСозданииПриЧтенииНаСервере(Объект);
		АвтоЗаголовок = Ложь;
		Заголовок = НСтр("ru = 'Событие: Запись (создание)'");
		
		Объект.ТипСобытия = Перечисления.ТипыСобытий.Запись;
		
		Объект.РесурсыПредприятия.Очистить();
		
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ОбязательноЗаполнятьИсточникВЗаписях = 
		РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательностьЗаполненияРеквизита("Запись", "ИсточникПривлечения");
		
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	//
	НастроитьФормуМобильныйКлиент();
	
	ОткрытИзПланировщика = Параметры.Свойство("ВыбранныеРесурсы");
	
	Если ОткрытИзПланировщика И Не ЭтаФорма.ТолькоПросмотр Тогда
		ЗаполнитьРесурсыИзПланировщика(Параметры.ВыбранныеРесурсы);
		
		Если Параметры.Свойство("Контрагент") И ЗначениеЗаполнено(Параметры.Контрагент) Тогда
			Контрагент = Параметры.Контрагент;
			КонтрагентПриИзмененииСервер();
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаСсылки.Видимость = Ложь;
	
	Если ПолучитьФункциональнуюОпцию("ПланироватьЗагрузкуРесурсовПредприятияРаботы") Тогда
		Элементы.ГруппаСсылки.Видимость = Истина;
		ЗаполнитьПодчиненныеЗаказНаряды();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьДоступностьПовторов(Истина);
	ЗаполнитьДанныеТаблицыРесурсовНаФорме();
	
	ОбновитьСписокПодчиненныеЗаказНаряды();
	
	//Ресурсы
	Если ОткрытИзПланировщика И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не Элементы.Найти("СтраницаРесурсы") = Неопределено Тогда
			ЭтаФорма.ТекущийЭлемент = Элементы.СтраницаРесурсы;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Элементы, "Страницы", "ТекущаяСтраница") = Неопределено Тогда
		Если Элементы.Страницы.ТекущаяСтраница.Имя = "СтраницаРесурсы" Тогда
			УстановитьДоступностьПовторов(Истина);
			ЗаполнитьДанныеТаблицыРесурсовНаФорме();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПодчиненныеЗаказНаряды()
	
	Элементы.СуществующиеЗаказНаряды.Видимость = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда Возврат КонецЕсли;
	
	Элементы.НавигационнаяСсылкаЗаказНаряд.Видимость = Истина;
	
	Если Не СписокЗаказНарядов.Количество() Тогда Возврат КонецЕсли;
	
	ЗначениеЗаказНаряда = СписокЗаказНарядов[0].Значение;
	ПометкаУдаления = СписокЗаказНарядов[0].Пометка;
	
	Если ПометкаУдаления Тогда
		ПредставлениеЗначения = СтрЗаменить(Строка(ЗначениеЗаказНаряда), "Заказ-наряд", "") +"(помечен на удаление)";
	Иначе
		ПредставлениеЗначения = СтрЗаменить(Строка(ЗначениеЗаказНаряда), "Заказ-наряд", "");
	КонецЕсли;
	
	ПредставлениеЗначения = СокрЛП(ПредставлениеЗначения);
	
	Если СписокЗаказНарядов.Количество() > 1 Тогда
		ПредставлениеЗначения = ПредставлениеЗначения + "...";
	КонецЕсли;
	
	Элементы.СуществующиеЗаказНаряды.Заголовок = ПредставлениеЗначения;
	Элементы.СуществующиеЗаказНаряды.Видимость = Истина;
	Элементы.НавигационнаяСсылкаЗаказНаряд.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодчиненныеЗаказНаряды()
	
	СписокЗаказНарядов.Очистить();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Событие", Объект.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ЗаказПокупателя.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|	И ЗаказПокупателя.Событие = &Событие
	|	И ЗаказПокупателя.Проведен";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		СписокЗаказНарядов.Добавить(Результат.Ссылка,,Результат.ПометкаУдаления);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ПроведениеЗаказНаряда" Тогда
		Если ЗначениеЗаполнено(Параметр.СсылкаНаСобытие) И Параметр.СсылкаНаСобытие = Объект.Ссылка Тогда
			НайденноеЗначение = СписокЗаказНарядов.НайтиПоЗначению(Параметр.СсылкаНаЗаказНаряд);
			Если НайденноеЗначение = Неопределено Тогда
				СписокЗаказНарядов.Добавить(Параметр.СсылкаНаЗаказНаряд)
			КонецЕсли;
			ОбновитьСписокПодчиненныеЗаказНаряды();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если СобытиеПривязаноКЗвонку 
		И ИсточникВыбора.ИмяФормы = "Справочник.Контрагенты.Форма.ФормаЭлемента" 
		И НЕ ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Контрагент = ВыбранноеЗначение;
		КонтрагентПриИзмененииСервер();
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(СопоставитьКонтактКакСвязаться) Тогда
		СтандартнаяОбработка = Ложь;
		СопоставитьКонтактКонтактнуюИнформацию(НовыйОбъект, СопоставитьКонтактКакСвязаться);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииПриЧтенииНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПланированиеРесурсовУНФ.ПерезаполнитьСлужебныеРеквизитыТаблицыРесурсов(Объект.РесурсыПредприятия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("Запись" + РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(
		ЭтотОбъект.ИмяФормы));
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Модифицированность Тогда
		ОповеститьРабочийКалендарь = Истина;
	КонецЕсли;
	
	ЗаписатьРеквизиты(ТекущийОбъект);
	
	Если ТипЗнч(ТекущийОбъект.Тема) = Тип("Строка") Тогда
	// Сохранение тем в истории для автоподбора
		
		ЭлементИстории = ИсторияТемСтрокой.НайтиПоЗначению(СокрЛП(ТекущийОбъект.Тема));
		Если ЭлементИстории <> Неопределено Тогда
			ИсторияТемСтрокой.Удалить(ЭлементИстории);
		КонецЕсли;
		ИсторияТемСтрокой.Вставить(0, СокрЛП(ТекущийОбъект.Тема));
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("СписокВыбораТемыСобытия", "", ИсторияТемСтрокой.ВыгрузитьЗначения());
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	Заголовок = "";
	АвтоЗаголовок = Истина;
	
	// УНФ.КалендарьСотрудника
	Оповестить("Запись_ИсточникЗаписейКалендаряСотрудника");
	// Конец УНФ.КалендарьСотрудника
	
	Если ОткрытИзПланировщика Тогда Оповестить("ОбновитьПланировщик") КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПриСозданииПриЧтенииНаСервере(ТекущийОбъект);
	
	// Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец Обсуждения
	
	ПланированиеРесурсовУНФ.ПерезаполнитьСлужебныеРеквизитыТаблицыРесурсов(Объект.РесурсыПредприятия);
	
	АссистентУправления.ВыполнитьТекущиеЗадачиСейчас(ТекущийОбъект.Ссылка);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Для Каждого СтрокаКонтакты Из Контакты Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаКонтакты.Контакт) И НЕ ЗначениеЗаполнено(СтрокаКонтакты.КакСвязаться) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение", "Контакт", Контакты.Индекс(СтрокаКонтакты) + 1, "Участники"),
				,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Контакты[%1].Контакт", Контакты.Индекс(СтрокаКонтакты)),
				,
				Отказ
			);
		КонецЕсли;
	КонецЦикла;
	
	ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ОповеститьРабочийКалендарь Тогда
		Оповестить("ИзмененоСобытие", Объект.Ответственный);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СуществующиеЗаказНарядыНажатие(Элемент)
	
	Если СписокЗаказНарядов.Количество() = 1 Тогда 
		ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаЗаказНаряда", Новый Структура("Ключ", СписокЗаказНарядов[0].Значение),ЭтаФорма);
		Возврат;
	КонецЕсли;
		
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораЭлемента", ЭтаФорма);
	
	СписокЗаказНарядов.ПоказатьВыборЭлемента(Оповещение, "Подчиненные заказ-наряды");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЭлемента(ЭлементСписка, Параметры) Экспорт
	
	Если Не ЭлементСписка = Неопределено И ТипЗнч(ЭлементСписка.Значение) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаЗаказНаряда", Новый Структура("Ключ", ЭлементСписка.Значение),ЭтаФорма)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если ДатаДокумента <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Тип") Тогда
		ОпределитьТипПоляКонтрагент(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентСоздание(Элемент, СтандартнаяОбработка)
	
	Если НЕ СобытиеПривязаноКЗвонку Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Записать();
	
	ПараметрыОткрытия = Новый Структура;
	
	Если Объект.Участники.Количество() > 0 Тогда
		ПараметрыОткрытия.Вставить(
			"КонтактКакСвязаться",
			Новый Структура(
				"ВидКонтакта,Контакт,КакСвязаться,ТипКИ",
				"КонтактноеЛицо", "", Объект.Участники[0].КакСвязаться, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")));
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	
	ЗначенияЗаполнения = Новый Структура("Покупатель", Истина);
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму(
		"Справочник.Контрагенты.ФормаОбъекта",
		ПараметрыОткрытия, ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОчистка(Элемент, СтандартнаяОбработка)
	
	ОпределитьТипПоляКонтрагент(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтакты
&НаКлиенте
Процедура КонтактыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
	Если Поле <> Элементы.КонтактыИндексПиктограммы Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаКонтакта = Контакты.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрокаКонтакта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыКонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Контрагент", Контрагент));
	КонецЕсли;
	ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.Контакты.ТекущиеДанные.Контакт);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.КонтактныеЛица.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыКонтактОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Элементы.Контакты.ТекущиеДанные.Контакт) Тогда
		Контакт = Контакты.НайтиПоИдентификатору(Элементы.Контакты.ТекущаяСтрока).Контакт;
		
		Если ТипЗнч(Контакт) = Тип("Строка") И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Лиды") И ЗначениеЗаполнено(Контрагент) Тогда
			ПоказатьЗначение(, Контрагент);
		Иначе
			ПоказатьЗначение(,Контакт);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыКонтактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		КакСвязаться = ПолучитьКакСвязаться(ВыбранноеЗначение, Объект.ТипСобытия);
	КонецЕсли;
	
	СтрокаКонтакты = Контакты.НайтиПоИдентификатору(Элементы.Контакты.ТекущаяСтрока);
	СтрокаКонтакты.Контакт = ВыбранноеЗначение;
	СтрокаКонтакты.КакСвязаться = КакСвязаться;

КонецПроцедуры

&НаКлиенте
Процедура КонтактыКонтактАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание <> 0 И НЕ ПустаяСтрока(Текст) И ЗначениеЗаполнено(Контрагент) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьСписокВыбораКонтактов(Текст, Контрагент);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Не указано основание для заполнения.'"));
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект),
		НСтр("ru = 'Документ будет полностью перезаполнен по ""Основанию""! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКонтрагенту(Команда)
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Лиды") Тогда
			ТекстВопроса = НСтр("ru = 'Не указан лид для заполнения.'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Не указан контрагент для заполнения.'")
		КонецЕсли;
		ПоказатьПредупреждение(Неопределено, ТекстВопроса);
		Возврат;
	КонецЕсли;
	
	Если Контакты.Количество() > 0 Тогда
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Лиды") Тогда
			ТекстВопроса = НСтр("ru = 'Контакты будут полностью перезаполнены по лиду! Продолжить выполнение операции?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Контакты будут полностью перезаполнены по контрагенту! Продолжить выполнение операции?'")
		КонецЕсли;
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоКонтрагентуЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		ЗаполнитьПоКонтрагентуФрагмент(КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтрагент(Команда)
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(Контрагент) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Контрагент уже выбран (можно создать только если не выбран).'"),, "Контрагент");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Лиды") И ЗначениеЗаполнено(Контрагент) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Лид уже выбран (можно создать только если не выбран).'"),, "Контрагент");
		Возврат;
	КонецЕсли;
	
	Если Элементы.Контакты.ТекущиеДанные <> Неопределено Тогда
		СтрокаКонтакт = Элементы.Контакты.ТекущиеДанные;
	ИначеЕсли Контакты.Количество() <> 0 Тогда
		СтрокаКонтакт = Контакты[0];
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Список контактов не заполнен.'"),, "Контакты");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполненоКакСвязаться(СтрокаКонтакт) Тогда
		Возврат;
	КонецЕсли;
	
	СопоставитьКонтактКакСвязаться = СтрокаКонтакт.КакСвязаться;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтактКакСвязаться", Новый Структура);
	ПараметрыФормы.КонтактКакСвязаться.Вставить("ВидКонтакта", "КонтактноеЛицо");
	ПараметрыФормы.КонтактКакСвязаться.Вставить("Контакт", СтрокаКонтакт.Контакт);
	ПараметрыФормы.КонтактКакСвязаться.Вставить("КакСвязаться", СтрокаКонтакт.КакСвязаться);
	ПараметрыФормы.КонтактКакСвязаться.Вставить("ТипКИ", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ИсточникПривлеченияПокупателя", Объект.ИсточникПривлечения);
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтакт(Команда)
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Лиды") И ЗначениеЗаполнено(Контрагент) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Лид уже выбран (можно создать только если не выбран).'"),, "Контрагент");
		Возврат;
	КонецЕсли;
	
	Если Элементы.Контакты.ТекущиеДанные <> Неопределено Тогда
		СтрокаКонтакт = Элементы.Контакты.ТекущиеДанные;
	ИначеЕсли Контакты.Количество() <> 0 Тогда
		СтрокаКонтакт = Контакты[0];
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Список контактов не заполнен.'"),, "Контакты");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполненоКакСвязаться(СтрокаКонтакт) Тогда
		Возврат;
	КонецЕсли;
	
	СопоставитьКонтактКакСвязаться = СтрокаКонтакт.КакСвязаться;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтактКакСвязаться", Новый Структура);
	ПараметрыФормы.КонтактКакСвязаться.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.КонтактКакСвязаться.Вставить("Контакт", СтрокаКонтакт.Контакт);
	ПараметрыФормы.КонтактКакСвязаться.Вставить("КакСвязаться", СтрокаКонтакт.КакСвязаться);
	ПараметрыФормы.КонтактКакСвязаться.Вставить("ТипКИ", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ИсточникПривлечения", Объект.ИсточникПривлечения);
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Справочник.КонтактныеЛица.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПривязатьКСуществующемуКонтрагенту(Команда)
	
	СтрокаКонтакт = Элементы.Контакты.ТекущиеДанные;
	
	Если Элементы.Контакты.ТекущиеДанные <> Неопределено Тогда
		СтрокаКонтакт = Элементы.Контакты.ТекущиеДанные;
	ИначеЕсли Контакты.Количество() <> 0 Тогда
		СтрокаКонтакт = Контакты[0];
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Список контактов не заполнен.'"),, "Контакты");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаКонтакт.Контакт) <> Тип("СправочникСсылка.КонтактныеЛица") Тогда
		ИндексСтроки = Контакты.Индекс(СтрокаКонтакт);
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru='Не выбран контакт.'"),,
			СтрШаблон("Контакты[%1].Контакт", Формат(ИндексСтроки, "ЧГ=")));
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.Контрагенты.ФормаВыбора",
		Новый Структура("РежимВыбора", Истина),
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ПривязатьКСуществующемуКонтрагентуЗавершение", ЭтотОбъект, Новый Структура("Контакт", СтрокаКонтакт.Контакт)),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПривязатьКСуществующемуКонтрагентуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ПривязатьСобытиеКонтактаККонтрагенту(Результат, ДополнительныеПараметры.Контакт);
	
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылкаЗаказНарядНажатие(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Перед созданием заказ-наряда необходимо записать документ.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура();
	ПолучитьПараметрыЗаполнения(СтруктураЗаполнения);
	
	Оповещение = Новый ОписаниеОповещения("ПослеСозданияЗаказа", ЭтаФорма);
	
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаЗаказНаряда", Новый Структура("ЗначенияЗаполнения", СтруктураЗаполнения),ЭтаФорма,,,,Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияЗаказа(ЭлементСписка, Параметры) Экспорт
	
	ЗаполнитьПодчиненныеЗаказНаряды();
	ОбновитьСписокПодчиненныеЗаказНаряды();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_Событие"));
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПолучитьПараметрыЗаполнения(СтруктураЗаполнения)
	
	Если Объект.Участники.Количество() > 0 И ТипЗнч(Объект.Участники[0].Контакт) = Тип("СправочникСсылка.Контрагенты") Тогда
		СтруктураЗаполнения.Вставить("Контрагент", Объект.Участники[0].Контакт);
		СтруктураЗаполнения.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(СтруктураЗаполнения.Контрагент));
	КонецЕсли;
	СтруктураЗаполнения.Вставить("ВидОперации", Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд);
	СтруктураЗаполнения.Вставить("РесурсыПредприятия", Объект.РесурсыПредприятия);
	СтруктураЗаполнения.Вставить("Событие", Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииПриЧтенииНаСервере(ТекущийОбъект)
	
	ПрочитатьРеквизиты(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	УсловноеОформление.Элементы.Очистить();
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, Элементы.КонтактыКонтакт.ПутьКДанным, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, Элементы.КонтактыКакСвязаться.ПутьКДанным, Неопределено, ВидСравненияКомпоновкиДанных.Заполнено);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КонтактыКонтакт.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru='<Неизвестный контакт>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	//Ресурсы
	ПланированиеРесурсовУНФ.УстановитьУсловноеОформлениеРесурсы("РесурсыПредприятия", ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ)
	
	ОбязательныеДляЗаполненияРеквизиты = РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательныеДляЗаполненияРеквизитыОбъекта("Запись");
	
	Для Каждого Реквизит Из ОбязательныеДляЗаполненияРеквизиты Цикл
				
		Если ЗначениеЗаполнено(Объект[Реквизит]) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(
			ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", 
			"Источник привлечения"),,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Объект[%1]", Реквизит),,
			Отказ);
			
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьРеквизиты(Объект)
	
	Контакты.Очистить();
	ПерваяСтрока = Истина;
	
	Для Каждого СтрокаУчастники Из Объект.Участники Цикл
		
		Если ПерваяСтрока И ТипЗнч(СтрокаУчастники.Контакт) <> Тип("Строка") Тогда
			Контрагент = СтрокаУчастники.Контакт;
			КонтрагентКакСвязаться = СтрокаУчастники.КакСвязаться;
			ПерваяСтрока = Ложь;
			Продолжить;
		КонецЕсли;
		
		СтрокаКонтакты = Контакты.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКонтакты, СтрокаУчастники);
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	ОпределитьТипПоляКонтрагент(ТипЗнч(Контрагент));
	
	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = Объект.Ответственный;
	КонецЕсли;
	
	ДокументСозданСлужебнымПользователем = Ложь;
	Если ИспользоватьОблачнуюТелефонию ИЛИ ИспользоватьМобильнуюТелефонию Тогда
		ДокументСозданСлужебнымПользователем =
			Объект.Автор = Пользователи.НайтиПоИмени(ТелефонияСервер.СлужебныйПользовательТелефонииЛогин());
	КонецЕсли;
	
	Если ДокументСозданСлужебнымПользователем Тогда
		АвторДокумента = НСтр("ru='# создан автоматически'");
	Иначе
		АвторДокумента = Объект.Автор;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРеквизиты(Объект)
	
	Объект.Участники.Очистить();
	
	СтрокаУчастники = Объект.Участники.Добавить();
	СтрокаУчастники.Контакт = Контрагент;
	СтрокаУчастники.КакСвязаться = КонтрагентКакСвязаться;
	
	Для Каждого СтрокаКонтакты Из Контакты Цикл
		ЗаполнитьЗначенияСвойств(Объект.Участники.Добавить(), СтрокаКонтакты);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКакСвязаться()
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		КонтрагентКакСвязаться = "";
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Лиды") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактыЛидов.Наименование КАК Наименование,
		|	КонтактыЛидов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КонтактыЛидов КАК КонтактыЛидов
		|ГДЕ
		|	КонтактыЛидов.Владелец = &Лид";
		Запрос.УстановитьПараметр("Лид", Контрагент);
		Выборка = Запрос.Выполнить().Выбрать();
		
		ТипКИ = Неопределено;
		Если Объект.ТипСобытия = Перечисления.ТипыСобытий.ТелефонныйЗвонок Тогда
			ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		КонецЕсли;

		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Контакты.Добавить();
			НоваяСтрока.Контакт = Выборка.Наименование;
			НоваяСтрока.КакСвязаться = Документы.Событие.ПолучитьКакСвязаться(Выборка.Ссылка, ТипКИ);
		КонецЦикла;
		
	Иначе
		
		КонтрагентКакСвязаться = ПолучитьКакСвязаться(Контрагент, Объект.ТипСобытия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКакСвязаться(Контакт, ТипСобытия)
	
	Если ТипЗнч(Контакт) = Тип("Строка") Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контакт) Тогда
		Возврат "";
	КонецЕсли;
	
	ТипКИ = Неопределено;
	Если ТипСобытия = Перечисления.ТипыСобытий.ТелефонныйЗвонок Тогда
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
	КонецЕсли;
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Контрагенты")
		ИЛИ ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Возврат Документы.Событие.ПолучитьКакСвязаться(Контакт, ТипКИ);
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.Лиды") Тогда
		Возврат Документы.Событие.ПолучитьКакСвязатьсяКонтактов(Контакт, ТипКИ);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", ДокументыУНФ.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	// Очистим контактные лица прочих контрагентов
	СтрокиКУдалению = Новый Массив;
	КонтактыКонтрагента = Справочники.Контрагенты.СвязанныеКонтакты(Контрагент);
	Для Каждого СтрокаКонтакты Из Контакты Цикл
		Если ТипЗнч(СтрокаКонтакты.Контакт) = Тип("СправочникСсылка.КонтактныеЛица")
			И ЗначениеЗаполнено(СтрокаКонтакты.Контакт)
			И КонтактыКонтрагента.Найти(СтрокаКонтакты.Контакт) = Неопределено Тогда
			СтрокиКУдалению.Добавить(СтрокаКонтакты);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из СтрокиКУдалению Цикл
		Контакты.Удалить(Строка);
	КонецЦикла;
	
	ОбновитьКакСвязаться();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораКонтактов(знач СтрокаПоиска, Контрагент)
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("Владелец, ПометкаУдаления", Контрагент, Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	
	ДанныеВыбораКонтактныхЛиц = Справочники.КонтактныеЛица.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Возврат ДанныеВыбораКонтактныхЛиц;
	
КонецФункции

&НаКлиенте
Процедура УправлениеФормой()
	
	Если НЕ ЗначениеЗаполнено(Контрагент) И Объект.Участники.Количество() <> 0 Тогда
		Элементы.Контрагент.ПодсказкаВвода = НСтр("ru='Неизвестный контрагент: создайте нового'");
	КонецЕсли;
	
	Элементы.ОтветственныйЗаЗвонок.Видимость = СобытиеПривязаноКЗвонку;
	Элементы.Ответственный.Видимость = НЕ СобытиеПривязаноКЗвонку;
	
	Если ОбязательноЗаполнятьИсточникВЗаписях Тогда
		Элементы.ИсточникПривлечения.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуВремени(Знач Секунд) Экспорт
	
	Часов = Цел(Секунд / 3600);
	Минут = Цел((Секунд - Часов * 3600) / 60);
	Секунд = Число((Секунд - Часов * 3600 - Минут * 60));
	Возврат Формат(Часов, "ЧЦ=2; ЧН=00; ЧВН=") + ":" + Формат(Минут,"ЧЦ=2; ЧН=00; ЧВН=") + ":" + Формат(Секунд,"ЧЦ=2; ЧН=00; ЧВН=");
	
КонецФункции

&НаСервере
Процедура ОпределитьТипПоляКонтрагент(Тип)
	
	Если Тип = Тип("СправочникСсылка.Контрагенты") Тогда
		Элементы.Контрагент.ВыбиратьТип = Ложь;
		Элементы.Контрагент.Заголовок = НСтр("ru='Контрагент'");
		Элементы.КонтактыКонтакт.КнопкаВыбора = Истина;
	ИначеЕсли Тип = Тип("СправочникСсылка.Лиды") Тогда
		Элементы.Контрагент.ВыбиратьТип = Ложь;
		Элементы.Контрагент.Заголовок = НСтр("ru='Лид'");
		Элементы.КонтактыКонтакт.КнопкаВыбора = Ложь;
	Иначе
		Элементы.Контрагент.ВыбиратьТип = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru='Контрагент'");
		Элементы.КонтактыКонтакт.КнопкаВыбора = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗначениеЗаполненоКакСвязаться(СтрокаКонтакт)
	
	Если ЗначениеЗаполнено(СтрокаКонтакт.КакСвязаться) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИндексСтроки = Контакты.Индекс(СтрокаКонтакт);
	ОбщегоНазначенияКлиент.СообщитьПользователю(
		НСтр("ru='Не заполнена колонка ""Как связаться"".'"),,
		СтрШаблон("Контакты[%1].КакСвязаться", Формат(ИндексСтроки, "ЧГ=")));
		
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура СопоставитьКонтактКонтактнуюИнформацию(НовыйКонтакт, КакСвязаться)
	
	Если ТипЗнч(НовыйКонтакт) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			Возврат;
		КонецЕсли;
		
		Контрагент = НовыйКонтакт;
		ОбновитьКакСвязаться();
		
		СопоставитьКонтактыСобытияСКонтактнымиЛицами(Справочники.Контрагенты.СвязанныеКонтакты(НовыйКонтакт), КакСвязаться);
		
	ИначеЕсли ТипЗнч(НовыйКонтакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		Если ЗначениеЗаполнено(Контрагент) И НЕ Справочники.Контрагенты.КонтрагентСвязанСКонтактом(Контрагент, НовыйКонтакт) Тогда
			Возврат;
		КонецЕсли;
		
		СопоставитьКонтактыСобытияСКонтактнымиЛицами(НовыйКонтакт, КакСвязаться);
		
	ИначеЕсли ТипЗнч(НовыйКонтакт) = Тип("СправочникСсылка.Лиды") Тогда
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			Возврат;
		КонецЕсли;
		
		Контрагент = НовыйКонтакт;
		Контакты.Очистить();
		ОбновитьКакСвязаться();
		
	КонецЕсли;
	
	Записать();
	
КонецПроцедуры

&НаСервере
Процедура СопоставитьКонтактыСобытияСКонтактнымиЛицами(Знач КонтактныеЛица, КакСвязаться)
	
	Если ТипЗнч(КонтактныеЛица) <> Тип("Массив") Тогда
		КонтактныеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КонтактныеЛица);
	КонецЕсли;
	
	Если КонтактныеЛица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТелефонКонтактаСопоставляемый = КонтактнаяИнформацияУНФ.ПреобразоватьНомерДляКонтактнойИнформации(КакСвязаться);
	СопоставляемыеКонтактыСобытия = Контакты.НайтиСтроки(Новый Структура("КакСвязаться", КакСвязаться));
	
	КонтактнаяИнформацияКонтактныхЛиц = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(КонтактныеЛица, 
		Перечисления.ТипыКонтактнойИнформации.Телефон, , ТекущаяДатаСеанса());
	
	Для каждого КонтактСобытия Из СопоставляемыеКонтактыСобытия Цикл
		
		КонтактНайден = Ложь;
		
		Для каждого СопоставляемыйКонтакт Из КонтактнаяИнформацияКонтактныхЛиц Цикл
			
			Если ТелефонКонтактаСопоставляемый = КонтактнаяИнформацияУНФ.ПреобразоватьТелефонДляПоиска(СопоставляемыйКонтакт.Представление) Тогда
				КонтактНайден = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ КонтактНайден Тогда
			Продолжить;
		КонецЕсли;
		
		КонтактСобытия.Контакт = СопоставляемыйКонтакт.Объект;
		КонтактСобытия.КакСвязаться = СопоставляемыйКонтакт.Представление;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПривязатьСобытиеКонтактаККонтрагенту(НовыйКонтрагент, Контакт)
	
	НачатьТранзакцию();
	
	Попытка
		Контрагент = НовыйКонтрагент;
		ОбновитьКакСвязаться();
		Справочники.Контрагенты.ДобавитьСвязьСКонтактом(НовыйКонтрагент, Контакт);
		Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеВторичныхДанных

&НаКлиенте
Процедура ЗаполнитьПоКонтрагентуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьПоКонтрагентуФрагмент(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКонтрагентуФрагмент(Знач Ответ)
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоКонтрагентуСервер(Контрагент);
	
КонецПроцедуры // ЗаполнитьПоКонтрагенту()

&НаСервере
Процедура ЗаполнитьПоКонтрагентуСервер(Контрагент)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(Новый Структура("ОснованиеЗаполнения, ТипСобытия, Ответственный", Контрагент, Объект.ТипСобытия, Объект.Ответственный));
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	ПрочитатьРеквизиты(Объект);
	
	ПланированиеРесурсовУНФ.ПерезаполнитьСлужебныеРеквизитыТаблицыРесурсов(Объект.РесурсыПредприятия);
	
КонецПроцедуры // ЗаполнитьУчастниковПоКонтрагенту()

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоОснованиюСервер(Объект.ДокументОснование);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоОснованию()

&НаСервере
Процедура ЗаполнитьПоОснованиюСервер(ДокументОснование)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Новый Структура("ОснованиеЗаполнения, ТипСобытия, Ответственный", ДокументОснование, Объект.ТипСобытия, Объект.Ответственный));
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ПрочитатьРеквизиты(ДокументОбъект);
	
	ПланированиеРесурсовУНФ.ПерезаполнитьСлужебныеРеквизитыТаблицыРесурсов(Объект.РесурсыПредприятия);
	
КонецПроцедуры // ЗаполнитьПоДокументу()

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
// @skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


// СтандартныеПодсистемы.Свойства
// @skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено,
	СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

// @skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область НастройкаВидимостьЭлементовФормы

// Процедура выполняет настройку элементов формы для корректного отображения в мобильном клиенте
//
&НаСервере
Процедура НастроитьФормуМобильныйКлиент()
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаУчастники", "ОтображатьЗаголовок", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСРесурсами

&НаКлиенте
Процедура РесурсыПредприятияРесурсПредприятияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Ресурс", ТекущиеДанные.РесурсПредприятия);
	
	ТекущиеДанные.Мощность = 1;
	
	ПланированиеРесурсовУНФКлиент.ОчиститьДанныеСтроки(ТекущиеДанные);
	ЗаполнитьДанныеТаблицыРесурсовНаФорме();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеТаблицыРесурсовНаФорме()
	
	ДанныеРесурсов = СоответствиеДанныхРесурсов();
	
	Элементы.РесурсыПредприятияПодборРесурсы.Доступность = Не ЭтаФорма.ТолькоПросмотр;
	Элементы.РесурсыПредприятияГруппаПроверить.Доступность = Не ЭтаФорма.ТолькоПросмотр;
	
	Для Каждого СтрокаРесурсов Из Объект.РесурсыПредприятия Цикл
		
		ДанныеРесурса = ДанныеРесурсов.Получить(СтрокаРесурсов.РесурсПредприятия);
		
		Если Не ДанныеРесурса = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаРесурсов, ДанныеРесурса)
		КонецЕсли;
		
		ВыбранныеДниНедели = ПланированиеРесурсовУНФКлиент.ПредставлениеДнейНедели(СтрокаРесурсов);
		
		ДополнениеПоМесяцуГоду = "";
		
		Старт = СтрокаРесурсов.Старт;
		ДеньНеделиМесяца = СтрокаРесурсов.ДеньНеделиМесяца;
		ДатаПовторения = СтрокаРесурсов.ДатаПовторения;
		
		Если СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежемесячно")
			ИЛИ СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежегодно") Тогда
			
			Если ЗначениеЗаполнено(ДатаПовторения) Тогда
				
				ДополнениеПоМесяцуГоду = СтрШаблон(НСтр("ru = ', каждое %1 %2.'"), Строка(ДатаПовторения), ПланированиеРесурсовУНФКлиент.ПолучитьМесяцПоНомеру(СтрокаРесурсов.НомерМесяца));
				
			ИначеЕсли ЗначениеЗаполнено(ДеньНеделиМесяца) Тогда
				
				Если ПланированиеРесурсовУНФКлиент.ЭтоПоследняяНеделяМесяца(Старт) Тогда
					ДополнениеПоМесяцуГоду = СтрШаблон(НСтр("ru = ', в послед. %1 месяца'"), ПланированиеРесурсовУНФКлиент.СоответствиеНомераДнюНедели(ДеньНеделиМесяца))
				Иначе
					НомерНеделиМесяца = НеделяГода(Старт)-НеделяГода(НачалоМесяца(Старт))+1;
					ДополнениеПоМесяцуГоду = СтрШаблон(НСтр("ru = ' %1 каждой %2 недели'"), ПланированиеРесурсовУНФКлиент.СоответствиеНомераДнюНедели(ДеньНеделиМесяца), Строка(НомерНеделиМесяца));
				КонецЕсли;
				
			ИначеЕсли СтрокаРесурсов.ПоследнийДеньМесяца = Истина Тогда
				ДополнениеПоМесяцуГоду = НСтр("ru = ', последний день месяца.'");
			КонецЕсли;
			
		КонецЕсли;
		
		Междометие = ?(СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Еженедельно"),НСтр("ru='каждую'"), НСтр("ru='каждый'"));
		
		Окончание = "";
		
		Если СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Еженедельно") Тогда
			Окончание = НСтр("ru='неделю'")
		ИначеЕсли СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежедневно") Тогда
			Окончание = НСтр("ru='день'")
		ИначеЕсли СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежемесячно") Тогда
			Окончание = НСтр("ru='месяц'")
		ИначеЕсли СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежегодно") Тогда
			Окончание = НСтр("ru='год'")
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаРесурсов.ВидПовтора) 
			И Не СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.НеПовторять") Тогда
			
			РасписаниеПредставление = Строка(СтрокаРесурсов.ВидПовтора)+", "+Междометие+" "+Строка(СтрокаРесурсов.ИнтервалПовторения)+
			" "+ Окончание+ВыбранныеДниНедели+ДополнениеПоМесяцуГоду;
		Иначе
			РасписаниеПредставление = НСтр("ru='Не повторять'");
		КонецЕсли;
		
		СтрокаРесурсов.РасписаниеПредставление = РасписаниеПредставление;
		
		Если СтрокаРесурсов.ВидЗавершения = ПредопределенноеЗначение("Перечисление.ВидыЗавершенияПовторовРасписания.ПоСчетчику")
			И ЗначениеЗаполнено(СтрокаРесурсов.ЗавершатьПосле) Тогда 
			
			РасшифровкаСчетчика = ПланированиеРесурсовУНФКлиент.ПредметИсчисления(
			СтрокаРесурсов.ЗавершатьПосле,
			НСтр("ru = 'раза'"),
			НСтр("ru = 'раз'"),
			НСтр("ru = 'раз'"),
			"м");
			
			СтрокаРесурсов.РасшифровкаСчетчика = РасшифровкаСчетчика;
		Иначе
			СтрокаРесурсов.РасшифровкаСчетчика = "";
		КонецЕсли;
		
	КонецЦикла;
	
	ПланированиеРесурсовУНФКлиент.ЗаполнитьДлительностьВТаблицеВыбранныхРесурсов(Объект.РесурсыПредприятия);
	
КонецПроцедуры

&НаСервере
Функция СоответствиеДанныхРесурсов()
	
	СвернутаяТаблицаРесурсов = Объект.РесурсыПредприятия.Выгрузить(,"РесурсПредприятия");
	СвернутаяТаблицаРесурсов.Свернуть("РесурсПредприятия");
	
	СоответствиеВозврата = Новый Соответствие();
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	ТаблицаДанных.Колонки.Добавить("РесурсПредприятия");
	ТаблицаДанных.Колонки.Добавить("КонтролироватьШаг");
	ТаблицаДанных.Колонки.Добавить("КратностьПланирования");
	
	Для каждого СтрокаТаблицы Из СвернутаяТаблицаРесурсов Цикл
		
		РесурсПредприятия = СтрокаТаблицы.РесурсПредприятия;
		
		СтруктураДанных = Новый Структура("КонтролироватьШаг,КратностьПланирования"
											,РесурсПредприятия.КонтролироватьШагИнтервалаВДокументах, РесурсПредприятия.КратностьПланирования);
		
		СоответствиеВозврата.Вставить(РесурсПредприятия, СтруктураДанных);
		
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

&НаКлиенте
Процедура РесурсыПредприятияСтартПриИзменении(Элемент)
	ПриИзмененииПериода(Истина)
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияСтартВремяПриИзменении(Элемент)
		ПриИзмененииПериода(Истина)
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияФинишПриИзменении(Элемент)
	ПриИзмененииПериода()
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияФинишВремяПриИзменении(Элемент)
		ПриИзмененииПериода()
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериода(ЭтоДатаНачала = Ложь)
	
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ОстатокСекундДоКонцаДня = КонецДня(ТекущиеДанные.Финиш) - ТекущиеДанные.Финиш;
	
	Если ОстатокСекундДоКонцаДня = 59 Тогда ТекущиеДанные.Финиш = КонецДня(ТекущиеДанные.Финиш) КонецЕсли;
	Если ТекущиеДанные.Финиш = НачалоДня(ТекущиеДанные.Финиш) Тогда ТекущиеДанные.Финиш = ТекущиеДанные.Финиш-1 КонецЕсли; 
	
	ТекущиеДанные.Старт = ?(Минута(ТекущиеДанные.Старт)%5 = 0, ТекущиеДанные.Старт, ТекущиеДанные.Старт - (Минута(ТекущиеДанные.Старт)%5*60));
	
	ОстатокОтДеления = Минута(ТекущиеДанные.Финиш)%5;
	
	Если Не (ОстатокОтДеления = 0 ИЛИ ТекущиеДанные.Финиш = КонецДня(ТекущиеДанные.Финиш)) Тогда
		
		Если ОстатокОтДеления < 3 Тогда
			ТекущиеДанные.Финиш = ТекущиеДанные.Финиш - (ОстатокОтДеления*60);
		ИначеЕсли (КонецДня(ТекущиеДанные.Финиш) - ТекущиеДанные.Финиш)<300 Тогда
			ТекущиеДанные.Финиш = КонецДня(ТекущиеДанные.Финиш);
		Иначе
			ТекущиеДанные.Финиш = ТекущиеДанные.Финиш + (300 - (ОстатокОтДеления*60));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущиеДанные.Старт > ТекущиеДанные.Финиш Тогда 
		Если ЭтоДатаНачала Тогда 
			ТекущиеДанные.Финиш = ТекущиеДанные.Старт+ТекущиеДанные.КратностьПланирования*60;
		Иначе
			ТекущиеДанные.Финиш = ТекущиеДанные.Старт;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущиеДанные.Старт = ?(Секунда(ТекущиеДанные.Старт) = 0, ТекущиеДанные.Старт, ТекущиеДанные.Старт - Секунда(ТекущиеДанные.Старт));
	
	Если Не (Секунда(ТекущиеДанные.Финиш) = 0 ИЛИ ТекущиеДанные.Финиш = КонецДня(ТекущиеДанные.Финиш)) Тогда  
		ТекущиеДанные.Финиш = ТекущиеДанные.Финиш - Секунда(ТекущиеДанные.Финиш)
	КонецЕсли;
	
	ПланированиеРесурсовУНФКлиент.ПроконтролироватьШагПланирования(ТекущиеДанные,ЭтоДатаНачала,Истина);
	
	УстановитьДоступностьПовторов();
	
	Если ТекущиеДанные.ПовторыДоступны Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ДатаПовторения) Тогда
			ТекущиеДанные.ДатаПовторения = День(ТекущиеДанные.Старт);
		КонецЕсли;
		
		Если ТекущиеДанные.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежемесячно") Тогда
			
			Если ЗначениеЗаполнено(ТекущиеДанные.ДеньНеделиМесяца) Тогда
				
				Если КонецДня(ТекущиеДанные.Старт) = КонецМесяца(ТекущиеДанные.Старт) Тогда
					
					ТекущиеДанные.ДеньНеделиМесяца = 0;
					ТекущиеДанные.НомерНеделиМесяца = 0;
					ТекущиеДанные.ПоследнийДеньМесяца = Истина
					
				Иначе
					
					ТекущиеДанные.ДеньНеделиМесяца = ДеньНедели(ТекущиеДанные.Старт);
					
					ТекНомерНедели = НеделяГода(ТекущиеДанные.Старт)-НеделяГода(НачалоМесяца(ТекущиеДанные.Старт))+1;
					
					Если ЗначениеЗаполнено(ТекущиеДанные.НомерНеделиМесяца) И Не ТекущиеДанные.НомерНеделиМесяца = ТекНомерНедели  Тогда
						ТекущиеДанные.НомерНеделиМесяца = ТекНомерНедели;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекущиеДанные.ПоследнийДеньМесяца И Не КонецДня(ТекущиеДанные.Старт) = КонецМесяца(ТекущиеДанные.Старт) Тогда
				
				ТекущиеДанные.ПоследнийДеньМесяца = Ложь;
				ТекущиеДанные.ДеньНеделиМесяца = ДеньНедели(ТекущиеДанные.Старт);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущиеДанные.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежегодно")
										И ЗначениеЗаполнено(ТекущиеДанные.НомерМесяца) Тогда
			
			ТекущиеДанные.НомерМесяца = Месяц(ТекущиеДанные.Старт);
			
		КонецЕсли;
		
	Иначе
		
		ТекущиеДанные.НомерНеделиМесяца = 0;
		ТекущиеДанные.НомерМесяца = 0;
		ТекущиеДанные.ДатаПовторения = 0;
		ТекущиеДанные.ДеньНеделиМесяца = 0;
		ТекущиеДанные.ПоследнийДеньМесяца = Ложь;
		
		ТекущиеДанные.ВидЗавершения = Неопределено;
		ТекущиеДанные.ЗавершатьПосле = Неопределено;
		
		ТекущиеДанные.ИнтервалПовторения = 0;
		ТекущиеДанные.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.НеПовторять");
		ТекущиеДанные.РасшифровкаСчетчика = "";
		
		ТекущиеДанные.Пн = Ложь;
		ТекущиеДанные.Вт = Ложь;
		ТекущиеДанные.Ср = Ложь;
		ТекущиеДанные.Чт = Ложь;
		ТекущиеДанные.Пт = Ложь;
		ТекущиеДанные.Сб = Ложь;
		ТекущиеДанные.Вс = Ложь;
		
	КонецЕсли;
	
	ТекущиеДанные.Длительность = Дата(1,1,1)+(ТекущиеДанные.Финиш - ТекущиеДанные.Старт);
	
	ЗаполнитьДанныеТаблицыРесурсовНаФорме();
	
	Если ЭтоДатаНачала Тогда
		Если ТипЗнч(ТекущиеДанные.ЗавершатьПосле) = Тип("Дата")
			И ЗначениеЗаполнено(ТекущиеДанные.ЗавершатьПосле)
			И ЗначениеЗаполнено(ТекущиеДанные.Старт)
			И ТекущиеДанные.ЗавершатьПосле<НачалоДня(ТекущиеДанные.Старт)
			Тогда
			ТекущиеДанные.ЗавершатьПосле=НачалоДня(ТекущиеДанные.Старт)
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПовторов(ОткрытиеФормы = Ложь, БылПодбор = Ложь)
	
	Если ОткрытиеФормы ИЛИ БылПодбор Тогда
		
		Для Каждого СтрокаРесурсыПредприятия Из Объект.РесурсыПредприятия Цикл
			
			СтрокаРесурсыПредприятия.РасписаниеПредставление = ?(СтрокаРесурсыПредприятия.РасписаниеПредставление = "", "Не повторять", СтрокаРесурсыПредприятия.РасписаниеПредставление);
			
			Если ЗначениеЗаполнено(СтрокаРесурсыПредприятия.Старт) И ЗначениеЗаполнено(СтрокаРесурсыПредприятия.Финиш) Тогда
				
				СтрокаРесурсыПредприятия.ПериодРазличный = ?(Не НачалоДня(СтрокаРесурсыПредприятия.Старт) = НачалоДня(СтрокаРесурсыПредприятия.Финиш), Истина, Ложь);
				
				Если НачалоДня(СтрокаРесурсыПредприятия.Старт) = НачалоДня(СтрокаРесурсыПредприятия.Финиш) Тогда
					СтрокаРесурсыПредприятия.ПовторыДоступны = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ТекущиеДанные.ПовторыДоступны = Ложь;
	ТекущиеДанные.ПериодРазличный = Ложь;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Старт) И ЗначениеЗаполнено(ТекущиеДанные.Финиш) Тогда
		
		ТекущиеДанные.ПериодРазличный = ?(Не НачалоДня(ТекущиеДанные.Старт) = НачалоДня(ТекущиеДанные.Финиш), Истина, Ложь);
		
		Если НачалоДня(ТекущиеДанные.Старт) = НачалоДня(ТекущиеДанные.Финиш) Тогда
			ТекущиеДанные.ПовторыДоступны = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияДниПриИзменении(Элемент)
	ЗадатьОкончаниеПериода();
	УстановитьДоступностьПовторов();
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияВремяПриИзменении(Элемент)
	ЗадатьОкончаниеПериода();
	УстановитьДоступностьПовторов();
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьОкончаниеПериода()
	
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	СекундыПоВремени = ТекущиеДанные.Время - Дата(1,1,1);
	СекундыПоДням = ?(ЗначениеЗаполнено(ТекущиеДанные.Дни), ТекущиеДанные.Дни*1440*60, 0);
	
	ТекущиеДанные.Финиш = ТекущиеДанные.Старт + СекундыПоДням + СекундыПоВремени;
	ТекущиеДанные.Финиш = ?(Не СекундыПоДням = 0 И ТекущиеДанные.Финиш = НачалоДня(ТекущиеДанные.Финиш)
										, ТекущиеДанные.Финиш - 1, ТекущиеДанные.Финиш);
	
	ПланированиеРесурсовУНФКлиент.ПроконтролироватьШагПланирования(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияРасписаниеПредставлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ДатаСтроки = День(ТекущиеДанные.Старт);
	
	ПараметрыОповещения = Новый Структура;
	
	Оповещение = Новый ОписаниеОповещения("ПослеОкончанияРедактированияРасписания", ЭтотОбъект, ПараметрыОповещения);
	
	СтруктураПовторов = Новый Структура("ИнтервалПовторения, Пн, Вт, Ср, Чт, Пт, Сб, Вс, ПоследнийДеньМесяца, ДатаПовторения, ДеньНеделиМесяца, ДатаСтроки, ТекДеньНедели, НомерНеделиМесяца, ПериодСтроки, НомерМесяца"
										,ТекущиеДанные.ИнтервалПовторения, ТекущиеДанные.Пн, ТекущиеДанные.Вт, ТекущиеДанные.Ср
										,ТекущиеДанные.Чт,ТекущиеДанные.Пт, ТекущиеДанные.Сб, ТекущиеДанные.Вс, ТекущиеДанные.ПоследнийДеньМесяца
										,ТекущиеДанные.ДатаПовторения, ТекущиеДанные.ДеньНеделиМесяца, ДатаСтроки, ДеньНедели(ТекущиеДанные.Старт), ТекущиеДанные.НомерНеделиМесяца, ТекущиеДанные.Старт, ТекущиеДанные.НомерМесяца);
	
	ПараметрыОткрытия = Новый Структура("Повторяемость, СтруктураПовторов", ТекущиеДанные.ВидПовтора, СтруктураПовторов);
	
	ОткрытьФорму("Обработка.ПланировщикРесурсов.Форма.ФормаРедактированияРасписания",ПараметрыОткрытия, ЭтаФорма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПослеОкончанияРедактированияРасписания(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения = Неопределено Тогда Возврат КонецЕсли;
	
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ВидПовтора = РезультатВыполнения.ВидПовтора;
	
	ТекущиеДанные.ВидПовтора = ВидПовтора;
	
	Если ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.НеПовторять") Тогда
		 ПланированиеРесурсовУНФКлиент.ОчиститьДанныеСтроки(ТекущиеДанные, Ложь);
		 ЗаполнитьДанныеТаблицыРесурсовНаФорме();
		 Возврат;
	 КонецЕсли;
	
	ТекущиеДанные.ИнтервалПовторения = РезультатВыполнения.ИнтервалПовторения;
	ТекущиеДанные.Пн = РезультатВыполнения.Пн;
	ТекущиеДанные.Вт = РезультатВыполнения.Вт;
	ТекущиеДанные.Ср = РезультатВыполнения.Ср;
	ТекущиеДанные.Чт = РезультатВыполнения.Чт;
	ТекущиеДанные.Пт = РезультатВыполнения.Пт;
	ТекущиеДанные.Сб = РезультатВыполнения.Сб;
	ТекущиеДанные.Вс = РезультатВыполнения.Вс;
	ТекущиеДанные.ПоследнийДеньМесяца = РезультатВыполнения.ПоследнийДеньМесяца;
	ТекущиеДанные.ДатаПовторения = РезультатВыполнения.ДатаПовторения;
	ТекущиеДанные.ДеньНеделиМесяца = РезультатВыполнения.ДеньНеделиМесяца;
	ТекущиеДанные.НомерНеделиМесяца = РезультатВыполнения.НомерНеделиМесяца;
	ТекущиеДанные.НомерМесяца = РезультатВыполнения.НомерМесяца;
	
	ЗаполнитьДанныеТаблицыРесурсовНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияВидЗавершенияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если ТекущиеДанные.ВидЗавершения = ПредопределенноеЗначение("Перечисление.ВидыЗавершенияПовторовРасписания.ПоДате") Тогда
		ТекущиеДанные.ЗавершатьПосле = НачалоДня(ТекущиеДанные.Финиш+86400);
		ТекущиеДанные.РасшифровкаСчетчика = "";
	ИначеЕсли ТекущиеДанные.ВидЗавершения = ПредопределенноеЗначение("Перечисление.ВидыЗавершенияПовторовРасписания.ПоСчетчику") Тогда
		ТекущиеДанные.ЗавершатьПосле = 1;
		ТекущиеДанные.РасшифровкаСчетчика = "раза";
	Иначе
		ТекущиеДанные.РасшифровкаСчетчика = "";
		ТекущиеДанные.ЗавершатьПосле = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияЗавершатьПослеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если ТекущиеДанные.ВидЗавершения = ПредопределенноеЗначение("Перечисление.ВидыЗавершенияПовторовРасписания.ПоСчетчику")
										И ЗначениеЗаполнено(ТекущиеДанные.ЗавершатьПосле) Тогда 
		
		РасшифровкаСчетчика = ПланированиеРесурсовУНФКлиент.ПредметИсчисления(
		ТекущиеДанные.ЗавершатьПосле,
		НСтр("ru = 'раза'"),
		НСтр("ru = 'раз'"),
		НСтр("ru = 'раз'"),
		"м");
		
		ТекущиеДанные.РасшифровкаСчетчика = РасшифровкаСчетчика;
	Иначе
		ТекущиеДанные.РасшифровкаСчетчика = "";
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.ЗавершатьПосле) = Тип("Дата")
			И ЗначениеЗаполнено(ТекущиеДанные.ЗавершатьПосле)
			И ЗначениеЗаполнено(ТекущиеДанные.Старт)
			И ТекущиеДанные.ЗавершатьПосле<НачалоДня(ТекущиеДанные.Старт)
			Тогда
			ТекущиеДанные.ЗавершатьПосле=НачалоДня(ТекущиеДанные.Старт)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольПревышения(Команда)
	КонтрольНаСервере();
КонецПроцедуры

&НаСервере
Процедура КонтрольНаСервере()
	ПланированиеРесурсовУНФ.КонтрольПараметровЗагрузкиРесурсов(Истина,, Объект.РесурсыПредприятия, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольГраниц(Команда)
	КонтрольГраницНаСервере();
КонецПроцедуры

&НаСервере
Процедура КонтрольГраницНаСервере()
	ПланированиеРесурсовУНФ.КонтрольПараметровЗагрузкиРесурсов(,Истина, Объект.РесурсыПредприятия, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольВсе(Команда)
	КонтрольВсеНаСервере();
КонецПроцедуры

Процедура КонтрольВсеНаСервере()
	ПланированиеРесурсовУНФ.КонтрольПараметровЗагрузкиРесурсов(Истина, Истина, Объект.РесурсыПредприятия, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПодборРесурсы(Команда)
	ПараметрыОткрытия = Новый Структура("ЭтоПодбор, РесурсыПредприятия, ГраницыПланирования, НомерПодсистемы", Истина, Объект.РесурсыПредприятия,,3);
	Оповещение = Новый ОписаниеОповещения("ПослеПодбораИзПланировщикаЗавершение", ЭтотОбъект, ПараметрыОткрытия);
	ОткрытьФорму("Обработка.ПланировщикРесурсов.Форма.ФормаПланировщика", ПараметрыОткрытия,,,,,Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодбораИзПланировщикаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		Объект.РесурсыПредприятия.Очистить();
		
		ВыбранныеРесурсы = Результат;
		
		Для Каждого СтрокаРесурсов Из ВыбранныеРесурсы Цикл
			
			НоваяСтрока = Объект.РесурсыПредприятия.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРесурсов);
			
			НоваяСтрока.РесурсПредприятия = СтрокаРесурсов.Ресурс;
			НоваяСтрока.Старт = СтрокаРесурсов.НачалоПериода;
			НоваяСтрока.Финиш = СтрокаРесурсов.ОкончаниеПериода;
			НоваяСтрока.Мощность = СтрокаРесурсов.Загрузка;
			НоваяСтрока.Длительность = Дата(1,1,1)+(НоваяСтрока.Финиш - НоваяСтрока.Старт); 
			
		КонецЦикла;
		
		ЗаполнитьДанныеТаблицыРесурсовНаФорме();
		
		УстановитьДоступностьПовторов(, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя = "СтраницаРесурсы" Тогда
		УстановитьДоступностьПовторов(Истина);
		ЗаполнитьДанныеТаблицыРесурсовНаФорме();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРесурсыИзПланировщика(ВыбранныеРесурсы)
	
	Для Каждого СтрокаРесурсов Из ВыбранныеРесурсы Цикл
		
		
		НоваяСтрока = Объект.РесурсыПредприятия.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРесурсов);
		
		НоваяСтрока.РесурсПредприятия = СтрокаРесурсов.Ресурс;
		НоваяСтрока.Старт = СтрокаРесурсов.НачалоПериода;
		НоваяСтрока.Финиш = СтрокаРесурсов.ОкончаниеПериода;
		НоваяСтрока.Мощность = СтрокаРесурсов.Загрузка;
		НоваяСтрока.Длительность = Дата(1,1,1)+(НоваяСтрока.Финиш - НоваяСтрока.Старт); 
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти