
&НаСервере
Процедура Команда1НаСервере()

	_ЗаявкиКлиентовСервер.ЗапуститьПроцесс(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Команда1(Команда)
	Команда1НаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Команда2(Команда)
	
	ОткрытьФорму("РегистрСведений.ИсполнителиЗадач.Форма.ИсполнителиРолиСОбъектомАдресации", 
		Новый Структура("ОсновнойОбъектАдресации,Роль", 
			Неопределено, 
			ПредопределенноеЗначение("Справочник.РолиИсполнителей.ОтветственныйЗаМедиапланирование")));
	
КонецПроцедуры

&НаКлиенте
Процедура Команда3(Команда)
	
	ОткрытьФорму("РегистрСведений.ИсполнителиЗадач.Форма.ИсполнителиРолиСОбъектомАдресации", 
		Новый Структура("ОсновнойОбъектАдресации,Роль", 
			Неопределено, 
			ПредопределенноеЗначение("Справочник.РолиИсполнителей.ОтветственныйЗаСпецпроекты")));
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииИПриЧтенииНаСервере();
	КонецЕсли;
	
	// УНФ.ПанельКонтактнойИнформации
	КонтактнаяИнформацияПанельУНФ.ПриСозданииНаСервере(ЭтотОбъект, "КонтактнаяИнформация");
	// Конец УНФ.ПанельКонтактнойИнформации
	
	ОбновитьПанельКонтактнойИнформацииСервер();
	
КонецПроцедуры

#Область ПанельКонтактнойИнформации

&НаКлиенте
Процедура Подключаемый_ОбработатьАктивизациюСтрокиСписка()
	
	ОбновитьПанельКонтактнойИнформацииИПанельСвязей();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПанельКонтактнойИнформацииИПанельСвязей()
	ОбновитьПанельКонтактнойИнформацииСервер();
	//ОбновитьПанельСвязей();
КонецПроцедуры

&НаСервере
Процедура ОбновитьПанельКонтактнойИнформацииСервер()
	
	Объект.Контрагент = Объект.КонтактноеЛицо._Контрагент;
	КонтактнаяИнформацияПанельУНФ.ОбновитьДанныеПанели(ЭтотОбъект, Объект.КонтактноеЛицо);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	ОбновитьПанельКонтактнойИнформацииСервер();
КонецПроцедуры

////@skip-warning
//&НаКлиенте
//Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
//	
//	КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииВыбор(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
//	
//КонецПроцедуры

////@skip-warning
//&НаКлиенте
//Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(Элемент)
//	
//	КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(ЭтотОбъект, Элемент);
//	
//КонецПроцедуры

////@skip-warning
//&НаКлиенте
//Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыполнитьКоманду(Команда)
//	
//	КонтактнаяИнформацияПанельУНФКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, КонтактноеЛицо);
//	
//КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОткрытьКартуМаршрутаВыполнить()

	Процесс = ПроцессПродажи(Объект.Ссылка);
	ОткрытьФорму("Обработка.КартаМаршрутаБизнесПроцесса.Форма",
		Новый Структура("БизнесПроцесс", Процесс),);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроцессПродажи(Сделка)

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПроцессПродажи.Ссылка КАК Процесс
		|ИЗ
		|	БизнесПроцесс.ЗаявкаКлиента КАК ПроцессПродажи
		|ГДЕ
		|	ПроцессПродажи.Стартован
		|	И (НЕ ПроцессПродажи.Завершен)
		|	И ПроцессПродажи.Предмет = &Сделка");
	Запрос.УстановитьПараметр("Сделка", Сделка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Процесс;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции	



#Область ОбработчикиСобытийЭлементовТаблицыФормыВложения

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьВложениеВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если Объект.СтатусПисьма <> ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик") Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	МассивФайлов = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		
		МассивФайлов.Добавить(ПараметрыПеретаскивания.Значение);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1
			И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				Если ТипЗнч(ФайлПринятый) = Тип("Файл") Тогда
					МассивФайлов.Добавить(ФайлПринятый);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ВыбранныйФайл Из МассивФайлов Цикл
		
		ДополнительныеПараметры = Новый Структура("ВыбранныйФайл", ВыбранныйФайл);
		ОписаниеОповещение = Новый ОписаниеОповещения("ПроверкаЭтоФайлПослеЗавершения", ЭтотОбъект, ДополнительныеПараметры);
		ВыбранныйФайл.НачатьПроверкуЭтоФайл(ОписаниеОповещение);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСВложениями

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ДобавитьВложениеВыполнить();

КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	
	Если Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик") Тогда
		УдалитьВложениеВыполнить();
	КонецЕсли;
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ВложенияКонтекстноеМенюСвойстваВложения.Доступность = (ТекущиеДанные.Расположение <> 5);
	Элементы.СвойстваВложения.Доступность                        = (ТекущиеДанные.Расположение <> 5);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеВыполнить()
	
	ОписаниеОповещение = Новый ОписаниеОповещения("ДиалогВыбораФайловПослеВыбора", ЭтотОбъект);
	ФайловаяСистемаКлиент.ЗагрузитьФайлы(ОписаниеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВложениеВыполнить()

	ДобавитьВложениеВСписокУдаленных();
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Индекс = Вложения.Индекс(ТекущиеДанные);
		Вложения.Удалить(Индекс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеВСписокУдаленных()

	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если (ТекущиеДанные <> Неопределено) И (ТекущиеДанные.Расположение = 0) Тогда
		УдаленныеВложения.Добавить(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложение(Ссылка, Форма, ДляРедактирования = Ложь) Экспорт

	ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(Ссылка, Форма.УникальныйИдентификатор);
	
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, ДляРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеВыполнить()
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТекущиеДанные.Расположение = 0) ИЛИ (ТекущиеДанные.Расположение = 1) Тогда
		
		ДляРедактирования = Истина;
			
		ОткрытьВложение(ТекущиеДанные.Ссылка,
		                                                  ЭтотОбъект,
		                                                  ДляРедактирования);
		
		Если ДляРедактирования Тогда
			ТекущиеДанные.Редактируется = Истина;
			Модифицированность = Истина;
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.Расположение = 2 Тогда
		
		ПутьКФайлу = ТекущиеДанные.ИмяФайлаНаКомпьютере;
			
		ФайловаяСистемаКлиент.ОткрытьФайл(ПутьКФайлу);
		
	ИначеЕсли ТекущиеДанные.Расположение = 4 Тогда
		
		ФайловаяСистемаКлиент.ОткрытьФайл(ТекущиеДанные.ИмяФайлаНаКомпьютере,, ТекущиеДанные.ИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВложения(ПереданныеПараметры = Неопределено)
		
	Вложения.Очистить();
	ТабВложения = ПолучитьВложенияЭлектронногоПисьма(Объект.Ссылка, Истина);
	Для Каждого СтрокаТаблицыВложений Из ТабВложения Цикл
		НоваяСтрока = Вложения.Добавить();
		НоваяСтрока.Ссылка              = СтрокаТаблицыВложений.Ссылка;
		НоваяСтрока.ИмяФайла            = СтрокаТаблицыВложений.ИмяФайла;
		НоваяСтрока.ИндексКартинки      = СтрокаТаблицыВложений.ИндексКартинки;
		НоваяСтрока.Размер              = СтрокаТаблицыВложений.Размер;
		НоваяСтрока.РазмерПредставление = СтрокаТаблицыВложений.РазмерПредставление;
		НоваяСтрока.ПодписанЭП          = СтрокаТаблицыВложений.ПодписанЭП;
		НоваяСтрока.Расположение        = 0;
	КонецЦикла;
	
	Вложения.Сортировать("ИмяФайла");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвойстваВложения(ТекущийИндексВКоллекции)
	
	ТекущиеДанные = Вложения.Получить(ТекущийИндексВКоллекции);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.Вложения.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
		
	ПараметрыФормы = Новый Структура("ПрисоединенныйФайл, ТолькоПросмотр", ТекущиеДанные.Ссылка, Ложь);
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныйФайл", ПараметрыФормы,, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваВложения(Команда)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийИндексВКоллекции = Вложения.Индекс(ТекущиеДанные);
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ДополнительныеПараметры = Новый Структура("ТекущийИндексВКоллекции", ТекущийИндексВКоллекции);
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ВопросОЗаписиФайлаПослеЗакрытия", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Свойства файла доступны только после его записи. Записать?'");
		ПоказатьВопрос(ОбработчикОповещенияОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ОткрытьСвойстваВложения(ТекущийИндексВКоллекции);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОЗаписиФайлаПослеЗакрытия(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьСвойстваВложения(ДополнительныеПараметры.ТекущийИндексВКоллекции);
	
КонецПроцедуры

// Возникает при окончании получения размера файла
// 
// Параметры:
//  Размер - Число - размер файла.
//  ДополнительныеПараметры - Структура:
//    * СтрокаТаблицыВложений - СтрокаТаблицыЗначений - содержит:
//      ** Размер - Число - размер файла.
//
&НаКлиенте
Процедура ПолучениеРазмераЗавершение(Размер, ДополнительныеПараметры) Экспорт

	СтрокаТаблицыВложений  = ДополнительныеПараметры.СтрокаТаблицыВложений;
	СтрокаТаблицыВложений.Размер = Размер;
	СтрокаТаблицыВложений.РазмерПредставление = ПолучитьСтроковоеПредставлениеРазмераФайла(Размер); 

КонецПроцедуры

// Получает строковое представление размера файла.
//
// Параметры:
//  РазмерВБайтах - Число - размер в байтах вложенного файла электронного письма.
//
// Возвращаемое значение:
//   Строка   - строковое представление размера вложенного файла электронного письма.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтроковоеПредставлениеРазмераФайла(РазмерВБайтах) Экспорт
	
	РазмерМб = РазмерВБайтах / (1024*1024);
	Если РазмерМб > 1 Тогда
		СтрокаРазмер = Формат(РазмерМб,"ЧДЦ=1") + " " + НСтр("ru = 'Мб'");
	Иначе
		СтрокаРазмер = Формат(РазмерВБайтах /1024,"ЧДЦ=0; ЧН=0") + " " + НСтр("ru = 'Кб'");
	КонецЕсли;
	
	Возврат СтрокаРазмер;
	
КонецФункции

&НаКлиенте
Процедура ДиалогВыбораФайловПослеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
		НоваяСтрока = Вложения.Добавить();
		
		#Если ВебКлиент Тогда
			НоваяСтрока.Расположение = 4;
			НоваяСтрока.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(ВыбранныйФайл.Хранение)
			                                                                 , УникальныйИдентификатор);
		#Иначе
			НоваяСтрока.Расположение = 2;
			НоваяСтрока.ИмяФайлаНаКомпьютере = ВыбранныйФайл.ПолноеИмя;
		#КонецЕсли
		
		ИмяФайла = ИмяФайлаБезКаталога(ВыбранныйФайл.ПолноеИмя);
		НоваяСтрока.ИмяФайла = ИмяФайла;
		
		Расширение                      = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла);
		НоваяСтрока.ИндексКартинки      = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
		ДополнительныеПараметры = Новый Структура("СтрокаТаблицыВложений", НоваяСтрока);
		Файл = Новый Файл(ВыбранныйФайл.ПолноеИмя);
		Файл.НачатьПолучениеРазмера(Новый ОписаниеОповещения("ПолучениеРазмераЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	КонецЦикла;
	
	Если ВыбранныеФайлы.Количество() > 0 Тогда
		Элементы.Вложения.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЭтоФайлПослеЗавершения(ЭтоФайл, ДополнительныеПараметры) Экспорт

	Если НЕ ЭтоФайл Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмя = ДополнительныеПараметры.ВыбранныйФайл.ПолноеИмя;
	
	НоваяСтрока = Вложения.Добавить();
	НоваяСтрока.Расположение = 2;
	НоваяСтрока.ИмяФайлаНаКомпьютере = ПолноеИмя;
	
	ИмяФайла = ИмяФайлаБезКаталога(ПолноеИмя);
	НоваяСтрока.ИмяФайла = ИмяФайла;
	
	Расширение                      = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла);
	НоваяСтрока.ИндексКартинки      = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
	ДополнительныеПараметры         = Новый Структура("СтрокаТаблицыВложений", НоваяСтрока);
	Файл = Новый Файл(ПолноеИмя);
	Файл.НачатьПолучениеРазмера(Новый ОписаниеОповещения("ПолучениеРазмераЗавершение", ЭтотОбъект, ДополнительныеПараметры));

КонецПроцедуры

&НаКлиенте
Функция ИмяФайлаБезКаталога(Знач ПолноеИмяФайла)
	
	ИмяФайла = ПолноеИмяФайла;
	Пока Истина Цикл
		
		Позиция = Макс(СтрНайти(ИмяФайла, "\"), СтрНайти(ИмяФайла, "/"));
		Если Позиция = 0 Тогда
			Возврат ИмяФайла;
		КонецЕсли;
		
		ИмяФайла = Сред(ИмяФайла, Позиция + 1);
		
	КонецЦикла;
	Возврат ИмяФайла;
	
КонецФункции

&НаСервере
Процедура ПриСозданииИПриЧтенииНаСервере()
	
	ЗаполнитьВложения(Параметры);
	СформироватьЛогСообщенийНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьВложения();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииИПриЧтенииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	#Если Не ВебКлиент Тогда
		Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
			Если СтрокаТаблицыВложений.Расположение = 2 Тогда
				Попытка
					Данные = Новый ДвоичныеДанные(СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере);
					СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(Данные, "");
					СтрокаТаблицыВложений.Расположение = 4;
				Исключение
					ОбщегоНазначенияКлиент.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),,"Вложения",, Отказ);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	#КонецЕсли
	
	Объект.ЕстьВложения = (Вложения.Количество() <> 0);
	
	Для Каждого Вложение Из Вложения Цикл
		
		Если Вложение.Расположение = 0 
			И Вложение.Редактируется Тогда
			
			ОписаниеОповещенияПомещенияФайла = Новый ОписаниеОповещения("ПослеПомещенияФайла", ЭтотОбъект);
			РаботаСФайламиКлиент.ПоместитьПрисоединенныйФайл(ОписаниеОповещенияПомещенияФайла, Вложение.Ссылка, УникальныйИдентификатор);
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПомещенияФайла(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
			ВызватьИсключение Результат.ОписаниеОшибки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы
		И Модифицированность Тогда
		
		ЕстьРедактируемыеФайлы = Ложь;
		МассивРедактируемыхФайлов = Новый Массив;
		
		Для Каждого Вложение Из Вложения Цикл
			
			Если Вложение.Редактируется Тогда
				ЕстьРедактируемыеФайлы = Истина;
				МассивРедактируемыхФайлов.Добавить(Вложение.Ссылка);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьРедактируемыеФайлы Тогда
			
			Отказ                = Истина;
			СтандартнаяОбработка = Ложь;
			
			ТекстВопроса = НСтр("ru = 'Данные были изменены, Записать?'");
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("МассивРедактируемыхФайлов", МассивРедактируемыхФайлов);
			ОповещениеПослеВопросаОЗакрытии = Новый ОписаниеОповещения("ПослеВопросаПриЗакрытии", ЭтотОбъект, ДополнительныеПараметры);
			
			ПоказатьВопрос(ОповещениеПослеВопросаОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПослеВопросаПриЗакрытии(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписаноУспешно = Записать();
		Если ЗаписаноУспешно Тогда
			Закрыть();
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет 
		И ДополнительныеПараметры.МассивРедактируемыхФайлов.Количество() > 0 Тогда
		
		РаботаСФайламиСлужебныйВызовСервера.ОсвободитьФайлы(ДополнительныеПараметры.МассивРедактируемыхФайлов);
		Модифицированность = Ложь;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Письмо = ТекущийОбъект.Ссылка;
	
	// Удалим удаленные вложения
	Для Каждого УдаленноеВложение Из УдаленныеВложения Цикл
		ОбъектВложение = УдаленноеВложение.Значение.ПолучитьОбъект();
		ОбъектВложение.Удалить();
	КонецЦикла;
	УдаленныеВложения.Очистить();

	
	Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
		
		Размер = 0;
		ИмяФайла = СтрокаТаблицыВложений.ИмяФайла;
		
		Если СтрокаТаблицыВложений.Расположение = 4 Тогда
			// из временного хранилища
			
			ПараметрыВложения = Новый Структура;
			ПараметрыВложения.Вставить("ИмяФайла", ИмяФайла);
			ПараметрыВложения.Вставить("Размер", Размер);
			
			ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
				Письмо, СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере, ПараметрыВложения);
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 3 Тогда
			// из файла на сервере
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 2 Тогда
			// из файла на компьютере
			
			ДвоичныеДанные = Новый ДвоичныеДанные(СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере);
			АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
			
			ПараметрыВложения = Новый Структура;
			ПараметрыВложения.Вставить("ИмяФайла", ИмяФайла);
			ПараметрыВложения.Вставить("Размер", Размер);
			
			ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
				Письмо, АдресВременногоХранилищаФайла, ПараметрыВложения);
				
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 0 Тогда
			// перезаписать вложение
			
		КонецЕсли;
		
		СтрокаТаблицыВложений.Расположение = 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
	Письмо,
	АдресВоВременномХранилище,
	ПараметрыВложения,
	КоличествоПустыхИменВоВложениях = 0) Экспорт
	
	ИмяФайлаДляРазбора = ПараметрыВложения.ИмяФайла;
	РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайлаДляРазбора);
	ИмяБезРасширения = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаДляРазбора);
	
	Если ПустаяСтрока(ИмяБезРасширения) Тогда
		
		ИмяБезРасширения =
			НСтр("ru = 'Вложение без имени'") + ?(КоличествоПустыхИменВоВложениях = 0, ""," " + Строка(КоличествоПустыхИменВоВложениях + 1));
		КоличествоПустыхИменВоВложениях = КоличествоПустыхИменВоВложениях + 1;
		
	Иначе
		ИмяБезРасширения =
			?(РасширениеБезТочки = "",
			ИмяБезРасширения,
			Лев(ИмяБезРасширения, СтрДлина(ИмяБезРасширения) - СтрДлина(РасширениеБезТочки) - 1));
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Массив;
	Если ПараметрыВложения.Свойство("ПодписанЭП") Тогда
		ДополнительныеПараметры.Добавить("ПодписанЭП");
	КонецЕсли;
	
	ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла(ДополнительныеПараметры);
	ПараметрыФайла.ВладелецФайлов = Письмо;
	ПараметрыФайла.ИмяБезРасширения = ИмяБезРасширения;
	ПараметрыФайла.РасширениеБезТочки = РасширениеБезТочки;
	ПараметрыФайла.ВремяИзмененияУниверсальное = Неопределено;
	
	Если ПараметрыВложения.Свойство("ПодписанЭП") Тогда
		ПараметрыФайла.ПодписанЭП = ПараметрыВложения.ПодписанЭП;
	КонецЕсли;
	
	Возврат РаботаСФайлами.ДобавитьФайл(
		ПараметрыФайла,
		АдресВоВременномХранилище,
		"");
	
КонецФункции

&НаСервере
Функция ПолучитьВложенияЭлектронногоПисьма(Письмо,ФормироватьРазмерПредставление = Ложь, ТолькоСПустымИД = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяОбъектаМетаданных = "_ЗаявкаКлиентаПрисоединенныеФайлы";
	ВладелецФайлов       = Письмо;
	
	Если ИмяОбъектаМетаданных = Неопределено Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Если ФормироватьРазмерПредставление Тогда
		ТекстРазмерПредставление = ",
		|ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК РазмерПредставление";
	Иначе
		ТекстРазмерПредставление = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка                    КАК Ссылка,
	|	Файлы.ИндексКартинки            КАК ИндексКартинки,
	|	Файлы.Размер                    КАК Размер,
	|	&ПодписанЭП                     КАК ПодписанЭП,
	|	ВЫБОР
	|		КОГДА Файлы.Расширение = &ПустаяСтрока
	|			ТОГДА Файлы.Наименование
	|		ИНАЧЕ Файлы.Наименование + ""."" + Файлы.Расширение
	|	КОНЕЦ КАК ИмяФайла" + ТекстРазмерПредставление + "
	|ИЗ
	|	Справочник." + ИмяОбъектаМетаданных + " КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &Письмо
	|	И НЕ Файлы.ПометкаУдаления";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		СтрокаПодписанЭП = "Файлы.ПодписанЭП";
	Иначе
		СтрокаПодписанЭП = "ЛОЖЬ";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПодписанЭП", СтрокаПодписанЭП);
	
	Запрос.УстановитьПараметр("Письмо", ВладелецФайлов);
	Запрос.УстановитьПараметр("ПустаяСтрока","");
	
	ТаблицаКВозврату =  Запрос.Выполнить().Выгрузить(); // См. ПолучитьВложенияЭлектронногоПисьма
	
	Если ФормироватьРазмерПредставление Тогда
		Для каждого СтрокаТаблицы Из ТаблицаКВозврату Цикл
		
			СтрокаТаблицы.РазмерПредставление = 
				ПолучитьСтроковоеПредставлениеРазмераФайла(СтрокаТаблицы.Размер);
		
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаКВозврату;
	
КонецФункции


#КонецОбласти

&НаКлиенте
Процедура ДобавитьЦитату(Команда)
	
	Комментарий = Комментарий + "> " + СтрЗаменить(Элементы.Лог.ВыделенныйТекст,Символы.ПС,Символы.ПС+"> ") + Символы.ПС;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	
	Если Комментарий <> "" тогда 
		ТекПользователь = ПолучитьТекущегоПользователя();
		
		Стр = Объект.Переписка.Добавить();
		Стр.Автор = ТекПользователь.Ссылка;
		Стр.Дата = ТекущаяДата();
		Стр.Сообщение = Комментарий;
		
		СформироватьЛогСообщенийНаКлиенте();
		//ДобавитьСообщениеНаКлиенте(ТекПользователь.Наименование,ТекущаяДата(),Комментарий);
		Комментарий = "";
		
		//Записать();
		Модифицированность = Истина;
	КонецЕсли;	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьТекущегоПользователя()
	
	Возврат Новый Структура("Ссылка, Наименование", ПараметрыСеанса.ТекущийПользователь, ПараметрыСеанса.ТекущийПользователь.Наименование);
	
КонецФункции

&НаКлиенте
Процедура ДобавитьСообщениеНаКлиенте(ТекстЛога, Автор, Дата, Текст)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ТекстЛога = ТекстЛога
		+ "<p><span style='font-family: Verdana; font-size: 7pt; color: #536ac2;'>" + Формат(Дата,"ДФ='дд.ММ.гггг ЧЧ:мм:сс'") + "</span></p>"
		+ "<p><span style='font-family: Verdana; font-size: 9pt; font-weight: bold; color: ForestGreen;'>" + Автор + ":</span></p>"
		+ "<p><span style='font-family: Verdana; font-size: 8pt;'>" + Текст + "</span></p>"
		+ "<br>";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЛогСообщенийНаКлиенте()
	
	ТекстЛога = "<html>
	|<head>
	|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">
	|<title></title>
	|</head>
	|<body>";
	
	//добавляем подробное описание (либо тему обращения) задачи от автора
	ДобавитьСообщениеНаКлиенте(ТекстЛога, Строка(Объект.Ответственный), Объект.Дата, ?(Объект.Описание="",Объект.Наименование,СтрЗаменить(Объект.Описание, Символы.ПС, "<br/>")));
	
	//добавляем сообщения из ТЧ Переписка
	Для Каждого Стр Из Объект.Переписка Цикл
		
		ДобавитьСообщениеНаКлиенте(ТекстЛога, Строка(Стр.Автор), Стр.Дата, СтрЗаменить(Стр.Сообщение, Символы.ПС, "<br/>"));
		
	КонецЦикла;
	
	ТекстЛога = ТекстЛога + "
	|</body>
	|</html>";
	
	//Лог.УстановитьHTML(ТекстЛога, Новый Структура("цуу",Новый Картинка));
	УстановитьHTMLНаСервере(Лог, ТекстЛога);
	
	//Элементы.ГруппаОписание.Видимость = Ложь;
	//Элементы.ГруппаТема.Видимость = Ложь;
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура УстановитьHTMLНаСервере(ФорматированныйДокумент, Текст)
	ФорматированныйДокумент.УстановитьHTML(Текст, Новый Структура);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьСообщениеНаСервере(ТекстЛога, Автор, Дата, Текст)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ТекстЛога = ТекстЛога
		+ "<p><span style='font-family: Verdana; font-size: 7pt; color: #536ac2;'>" + Формат(Дата,"ДФ='дд.ММ.гггг ЧЧ:мм:сс'") + "</span></p>"
		+ "<p><span style='font-family: Verdana; font-size: 9pt; font-weight: bold; color: ForestGreen;'>" + Автор + ":</span></p>"
		+ "<p><span style='font-family: Verdana; font-size: 8pt;'>" + Текст + "</span></p>"
		+ "<br>";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЛогСообщенийНаСервере()
	
	ТекстЛога = "<html>
	|<head>
	|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">
	|<title></title>
	|</head>
	|<body>";
	
	//добавляем подробное описание (либо тему обращения) задачи от автора
	ДобавитьСообщениеНаСервере(ТекстЛога, Объект.Ответственный, Объект.Дата, ?(Объект.Описание="",Объект.Наименование,СтрЗаменить(Объект.Описание, Символы.ПС, "<br/>")));
	
	//добавляем сообщения из ТЧ Переписка
	Для Каждого Стр Из Объект.Переписка Цикл
		
		ДобавитьСообщениеНаСервере(ТекстЛога, Стр.Автор.Наименование, Стр.Дата, СтрЗаменить(Стр.Сообщение, Символы.ПС, "<br/>"));

	КонецЦикла;
	
	ТекстЛога = ТекстЛога + "
	|</body>
	|</html>";
	
	//Лог.УстановитьHTML(ТекстЛога, Новый Структура("цуу",Новый Картинка));
	Лог.УстановитьHTML(ТекстЛога, Новый Структура());
	
КонецПроцедуры
