#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Год) Тогда 
		ОтчетныйПериод = Дата(Год, 1, 1);
		ОкончаниеОтчетногоПериода = КонецГода(ОтчетныйПериод);
	КонецЕсли;
	
	Если ТипСведений <> Перечисления.ТипыСведенийСЗВ_СТАЖ.Исходная Тогда 
		ДосрочноеНазначениеПенсии.Очистить();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяФайлаДляПФР) Тогда
		ИмяФайлаДляПФР = Документы.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ИмяФайла(Организация, Дата);
	Иначе		
		УИДИзИмениФайла = Прав(ИмяФайлаДляПФР, 36);
		Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(УИДИзИмениФайла) Тогда
			УИДИзИмениФайла = Строка(Новый УникальныйИдентификатор);	
		КонецЕсли;	
		ИмяФайлаДляПФР = Документы.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ИмяФайла(Организация, Дата, УИДИзИмениФайла);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьВТСТаблицамиОбъекта(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ЗаписиОСтаже", ЗаписиОСтаже);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.НомерСтроки,
	|	Сотрудники.Сотрудник,
	|	Сотрудники.Фамилия,
	|	Сотрудники.Имя,
	|	Сотрудники.Отчество,
	|	Сотрудники.СтраховойНомерПФР
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	&Сотрудники КАК Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Ссылка,
	|	ЗаписиОСтаже.НомерСтроки,
	|	ЗаписиОСтаже.Сотрудник,
	|	ЗаписиОСтаже.НомерОсновнойЗаписи,
	|	ЗаписиОСтаже.НомерДополнительнойЗаписи,
	|	ЗаписиОСтаже.ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда,
	|	ЗаписиОСтаже.КодПозицииСписка,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий
	|ПОМЕСТИТЬ ВТТаблицаСтажа
	|ИЗ
	|	&ЗаписиОСтаже КАК ЗаписиОСтаже
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиОСтаже.Сотрудник,
	|	ЗаписиОСтаже.НомерСтроки,
	|	ЗаписиОСтаже.НомерОсновнойЗаписи,
	|	ЗаписиОСтаже.НомерДополнительнойЗаписи,
	|	ЗаписиОСтаже.ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда,
	|	ЗаписиОСтаже.КодПозицииСписка,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет,
	|	СотрудникиНомераСтрок.НомерСтроки КАК НомерСтрокиСотрудник
	|ПОМЕСТИТЬ ВТЗаписиОСтаже
	|ИЗ
	|	ВТТаблицаСтажа КАК ЗаписиОСтаже
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК СотрудникиНомераСтрок
	|		ПО ЗаписиОСтаже.Сотрудник = СотрудникиНомераСтрок.Сотрудник";
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Функция СформироватьЗапросПоСотрудникамДляПроверкиЗаполнения(МенеджерВременныхТаблиц)
	
	ПериодДанных = ?(ЗначениеЗаполнено(Год), Дата(Год, 1, 1), Дата(1, 1, 1));
		
	НеоплачиваемыеЗначенияТретьегоПараметра = Новый Массив;
    НеоплачиваемыеЗначенияТретьегоПараметра.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.АДМИНИСТР);
    НеоплачиваемыеЗначенияТретьегоПараметра.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДЕТИ);
    НеоплачиваемыеЗначенияТретьегоПараметра.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.УЧОТПУСК);
    НеоплачиваемыеЗначенияТретьегоПараметра.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДЛДЕТИ);
    НеоплачиваемыеЗначенияТретьегоПараметра.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДЛОТПУСК);
    НеоплачиваемыеЗначенияТретьегоПараметра.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ВРНЕТРУД);
    НеоплачиваемыеЗначенияТретьегоПараметра.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДЕКРЕТ);
    НеоплачиваемыеЗначенияТретьегоПараметра.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ЧАЭС);
    НеоплачиваемыеЗначенияТретьегоПараметра.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛ);
    НеоплачиваемыеЗначенияТретьегоПараметра.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛДОГ);
    НеоплачиваемыеЗначенияТретьегоПараметра.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛАВТ);
	
	ИсключительныеОснованияВыслугиЛет = Новый Массив;
	ИсключительныеОснованияВыслугиЛет.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_11ВП);
	ИсключительныеОснованияВыслугиЛет.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_11ГР);
	ИсключительныеОснованияВыслугиЛет.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_14);
	
	ИсключительныеЗначенияТретьегоПараметра = Новый Массив;
	ИсключительныеЗначенияТретьегоПараметра.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ВРНЕТРУД);
	ИсключительныеЗначенияТретьегоПараметра.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДЕКРЕТ);
	ИсключительныеЗначенияТретьегоПараметра.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДЛОТПУСК);
	ИсключительныеЗначенияТретьегоПараметра.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ВАХТА);
	
	ПрочиеПроверяемыеКоды = Новый Массив;
	ПрочиеПроверяемыеКоды.Добавить(Справочники.ОсобыеУсловияТрудаПФР.Ст27_2);
	ПрочиеПроверяемыеКоды.Добавить(Справочники.ОсобыеУсловияТрудаПФР.Ст27_3);
	ПрочиеПроверяемыеКоды.Добавить(Справочники.ОсобыеУсловияТрудаПФР.Ст27_4);
	ПрочиеПроверяемыеКоды.Добавить(Справочники.ОсобыеУсловияТрудаПФР.Ст27_5);
	ПрочиеПроверяемыеКоды.Добавить(Справочники.ОсобыеУсловияТрудаПФР.Ст27_6);
	ПрочиеПроверяемыеКоды.Добавить(Справочники.ОсобыеУсловияТрудаПФР.Ст27_7);
	ПрочиеПроверяемыеКоды.Добавить(Справочники.ОсобыеУсловияТрудаПФР.Ст27_8);
	ПрочиеПроверяемыеКоды.Добавить(Справочники.ОсобыеУсловияТрудаПФР.Ст27_9);
	ПрочиеПроверяемыеКоды.Добавить(Справочники.ОсобыеУсловияТрудаПФР.Ст27_10);
	ПрочиеПроверяемыеКоды.Добавить(Справочники.ОсобыеУсловияТрудаПФР.Ст27_ОС);
	ПрочиеПроверяемыеКоды.Добавить(Справочники.ОсобыеУсловияТрудаПФР.Ст27_ПЖ);
	
	ПрочиеПроверяемыеКоды.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_11ВП);
	ПрочиеПроверяемыеКоды.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_11ГР);
	ПрочиеПроверяемыеКоды.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_12);
	ПрочиеПроверяемыеКоды.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_СП);
	ПрочиеПроверяемыеКоды.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.САМОЛЕТ);
	ПрочиеПроверяемыеКоды.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.СПЕЦАВ);
	ПрочиеПроверяемыеКоды.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.СПАСАВ);
	ПрочиеПроверяемыеКоды.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.УЧЛЕТ);
	ПрочиеПроверяемыеКоды.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.ВЫСШПИЛ);
	ПрочиеПроверяемыеКоды.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.НОРМАПР);
	ПрочиеПроверяемыеКоды.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.НОРМСП);
	ПрочиеПроверяемыеКоды.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.РЕАКТИВН);
	ПрочиеПроверяемыеКоды.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.ЛЕТРАБ);
	ПрочиеПроверяемыеКоды.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_14);
	ПрочиеПроверяемыеКоды.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_15);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ПериодДанных", ПериодДанных);
	Запрос.УстановитьПараметр("Ст27_1", Справочники.ОсобыеУсловияТрудаПФР.Ст27_1);
	Запрос.УстановитьПараметр("Ст27_2", Справочники.ОсобыеУсловияТрудаПФР.Ст27_2);
	Запрос.УстановитьПараметр("КодПозицииСпискаСт27_2", Справочники.СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения.НайтиПоКоду("23307000-17541"));
	Запрос.УстановитьПараметр("НеоплачиваемыеЗначенияТретьегоПараметра", НеоплачиваемыеЗначенияТретьегоПараметра);
	Запрос.УстановитьПараметр("ИсключительныеЗначенияТретьегоПараметра", ИсключительныеЗначенияТретьегоПараметра);
	Запрос.УстановитьПараметр("ИсключительныеОснованияВыслугиЛет", ИсключительныеОснованияВыслугиЛет);
	Запрос.УстановитьПараметр("ПрочиеПроверяемыеКоды", ПрочиеПроверяемыеКоды);
	
	УчетСтраховыхВзносов.СформироватьТаблицуВТФизическиеЛицаРаботавшиеВОрганизации(Запрос.МенеджерВременныхТаблиц, Организация, ПериодДанных, ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаСтажаПерсУчета(ПериодДанных));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТСотрудники.Сотрудник,
	|	МИНИМУМ(ВТСотрудники.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТСотрудникиНомераСтрок
	|ИЗ
	|	ВТСотрудники КАК ВТСотрудники
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСотрудники.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЗаписиОСтаже.НомерОсновнойЗаписи) КАК КоличествоЗаписей,
	|	СУММА(ВЫБОР
	|			КОГДА ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа ЕСТЬ NULL 
	|				ТОГДА 0
	|			КОГДА ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа В (&НеоплачиваемыеЗначенияТретьегоПараметра)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КоличествоОплачиваемыхСтрок,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МЕСЯЦ(ОсновныеЗаписиОстаже.ДатаНачалаПериода) = МЕСЯЦ(&ПериодДанных)
	|					И ЗаписиОСтаже.ОсобыеУсловияТруда = &Ст27_1
	|					И НЕ(ЗаписиОСтаже.ОсобыеУсловияТруда = &Ст27_2
	|							И ЗаписиОСтаже.КодПозицииСписка = &КодПозицииСпискаСт27_2)
	|					И НЕ ЗаписиОСтаже.ОснованиеВыслугиЛет В (&ИсключительныеОснованияВыслугиЛет)
	|					И НЕ ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа В (&ИсключительныеЗначенияТретьегоПараметра)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Ст27_1ВПервомМесяце,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МЕСЯЦ(ОсновныеЗаписиОстаже.ДатаНачалаПериода) = МЕСЯЦ(&ПериодДанных)
	|					И ЗаписиОСтаже.ОсобыеУсловияТруда = &Ст27_1
	|					И (ЗаписиОСтаже.ОснованиеВыслугиЛет В (&ИсключительныеОснованияВыслугиЛет)
	|						ИЛИ ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа В (&ИсключительныеЗначенияТретьегоПараметра)
	|						ИЛИ ЗаписиОСтаже.ОсобыеУсловияТруда = &Ст27_2
	|							И ЗаписиОСтаже.КодПозицииСписка = &КодПозицииСпискаСт27_2)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК НеПроверятьСт27_1ВПервомМесяце,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МЕСЯЦ(ОсновныеЗаписиОстаже.ДатаНачалаПериода) = МЕСЯЦ(&ПериодДанных)
	|					И ОсновныеЗаписиОстаже.ОсобыеУсловияТруда <> &Ст27_1
	|					И НЕ(ЗаписиОСтаже.ОсобыеУсловияТруда = &Ст27_2
	|							И ЗаписиОСтаже.КодПозицииСписка = &КодПозицииСпискаСт27_2)
	|					И (ЗаписиОСтаже.ОсобыеУсловияТруда В (&ПрочиеПроверяемыеКоды)
	|						ИЛИ ЗаписиОСтаже.ОснованиеВыслугиЛет В (&ПрочиеПроверяемыеКоды))
	|					И НЕ ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа В (&ИсключительныеЗначенияТретьегоПараметра)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ОстальныеКодыВПервомМесяце,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МЕСЯЦ(ОсновныеЗаписиОстаже.ДатаНачалаПериода) = МЕСЯЦ(&ПериодДанных)
	|					И ОсновныеЗаписиОстаже.ОсобыеУсловияТруда <> &Ст27_1
	|					И (ЗаписиОСтаже.ОсобыеУсловияТруда В (&ПрочиеПроверяемыеКоды)
	|						ИЛИ ЗаписиОСтаже.ОснованиеВыслугиЛет В (&ПрочиеПроверяемыеКоды))
	|					И (ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа В (&ИсключительныеЗначенияТретьегоПараметра)
	|						ИЛИ ЗаписиОСтаже.ОсобыеУсловияТруда = &Ст27_2
	|							И ЗаписиОСтаже.КодПозицииСписка = &КодПозицииСпискаСт27_2)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК НеПроверятьОстальныеКодыВПервомМесяце,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МЕСЯЦ(ОсновныеЗаписиОстаже.ДатаНачалаПериода) <= МЕСЯЦ(&ПериодДанных) + 1
	|					И МЕСЯЦ(ОсновныеЗаписиОстаже.ДатаОкончанияПериода) >= МЕСЯЦ(&ПериодДанных) + 1
	|					И ЗаписиОСтаже.ОсобыеУсловияТруда = &Ст27_1
	|					И НЕ(ЗаписиОСтаже.ОсобыеУсловияТруда = &Ст27_2
	|							И ЗаписиОСтаже.КодПозицииСписка = &КодПозицииСпискаСт27_2)
	|					И НЕ ЗаписиОСтаже.ОснованиеВыслугиЛет В (&ИсключительныеОснованияВыслугиЛет)
	|					И НЕ ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа В (&ИсключительныеЗначенияТретьегоПараметра)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Ст27_1ВоВторомМесяце,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МЕСЯЦ(ОсновныеЗаписиОстаже.ДатаНачалаПериода) <= МЕСЯЦ(&ПериодДанных) + 1
	|					И МЕСЯЦ(ОсновныеЗаписиОстаже.ДатаОкончанияПериода) >= МЕСЯЦ(&ПериодДанных) + 1
	|					И ЗаписиОСтаже.ОсобыеУсловияТруда = &Ст27_1
	|					И (ЗаписиОСтаже.ОснованиеВыслугиЛет В (&ИсключительныеОснованияВыслугиЛет)
	|						ИЛИ ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа В (&ИсключительныеЗначенияТретьегоПараметра)
	|						ИЛИ ЗаписиОСтаже.ОсобыеУсловияТруда = &Ст27_2
	|							И ЗаписиОСтаже.КодПозицииСписка = &КодПозицииСпискаСт27_2)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК НеПроверятьСт27_1ВоВторомМесяце,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МЕСЯЦ(ОсновныеЗаписиОстаже.ДатаНачалаПериода) <= МЕСЯЦ(&ПериодДанных) + 1
	|					И МЕСЯЦ(ОсновныеЗаписиОстаже.ДатаОкончанияПериода) >= МЕСЯЦ(&ПериодДанных) + 1
	|					И ОсновныеЗаписиОстаже.ОсобыеУсловияТруда <> &Ст27_1
	|					И НЕ(ЗаписиОСтаже.ОсобыеУсловияТруда = &Ст27_2
	|							И ЗаписиОСтаже.КодПозицииСписка = &КодПозицииСпискаСт27_2)
	|					И (ЗаписиОСтаже.ОсобыеУсловияТруда В (&ПрочиеПроверяемыеКоды)
	|						ИЛИ ЗаписиОСтаже.ОснованиеВыслугиЛет В (&ПрочиеПроверяемыеКоды))
	|					И НЕ ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа В (&ИсключительныеЗначенияТретьегоПараметра)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ОстальныеКодыВоВторомМесяце,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МЕСЯЦ(ОсновныеЗаписиОстаже.ДатаНачалаПериода) <= МЕСЯЦ(&ПериодДанных) + 1
	|					И МЕСЯЦ(ОсновныеЗаписиОстаже.ДатаОкончанияПериода) >= МЕСЯЦ(&ПериодДанных) + 1
	|					И ОсновныеЗаписиОстаже.ОсобыеУсловияТруда <> &Ст27_1
	|					И (ЗаписиОСтаже.ОсобыеУсловияТруда В (&ПрочиеПроверяемыеКоды)
	|						ИЛИ ЗаписиОСтаже.ОснованиеВыслугиЛет В (&ПрочиеПроверяемыеКоды))
	|					И (ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа В (&ИсключительныеЗначенияТретьегоПараметра)
	|						ИЛИ ЗаписиОСтаже.ОсобыеУсловияТруда = &Ст27_2
	|							И ЗаписиОСтаже.КодПозицииСписка = &КодПозицииСпискаСт27_2)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК НеПроверятьОстальныеКодыВоВторомМесяце,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МЕСЯЦ(ОсновныеЗаписиОстаже.ДатаОкончанияПериода) = МЕСЯЦ(&ПериодДанных) + 2
	|					И ЗаписиОСтаже.ОсобыеУсловияТруда = &Ст27_1
	|					И НЕ(ЗаписиОСтаже.ОсобыеУсловияТруда = &Ст27_2
	|							И ЗаписиОСтаже.КодПозицииСписка = &КодПозицииСпискаСт27_2)
	|					И НЕ ЗаписиОСтаже.ОснованиеВыслугиЛет В (&ИсключительныеОснованияВыслугиЛет)
	|					И НЕ ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа В (&ИсключительныеЗначенияТретьегоПараметра)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Ст27_1ВТретьемМесяце,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МЕСЯЦ(ОсновныеЗаписиОстаже.ДатаОкончанияПериода) = МЕСЯЦ(&ПериодДанных) + 2
	|					И ЗаписиОСтаже.ОсобыеУсловияТруда = &Ст27_1
	|					И (ЗаписиОСтаже.ОснованиеВыслугиЛет В (&ИсключительныеОснованияВыслугиЛет)
	|						ИЛИ ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа В (&ИсключительныеЗначенияТретьегоПараметра)
	|						ИЛИ ЗаписиОСтаже.ОсобыеУсловияТруда = &Ст27_2
	|							И ЗаписиОСтаже.КодПозицииСписка = &КодПозицииСпискаСт27_2)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК НеПроверятьСт27_1ВТретьемМесяце,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МЕСЯЦ(ОсновныеЗаписиОстаже.ДатаОкончанияПериода) = МЕСЯЦ(&ПериодДанных) + 2
	|					И ОсновныеЗаписиОстаже.ОсобыеУсловияТруда <> &Ст27_1
	|					И НЕ(ЗаписиОСтаже.ОсобыеУсловияТруда = &Ст27_2
	|							И ЗаписиОСтаже.КодПозицииСписка = &КодПозицииСпискаСт27_2)
	|					И (ЗаписиОСтаже.ОсобыеУсловияТруда В (&ПрочиеПроверяемыеКоды)
	|						ИЛИ ЗаписиОСтаже.ОснованиеВыслугиЛет В (&ПрочиеПроверяемыеКоды))
	|					И НЕ ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа В (&ИсключительныеЗначенияТретьегоПараметра)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ОстальныеКодыВТретьемМесяце,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МЕСЯЦ(ОсновныеЗаписиОстаже.ДатаОкончанияПериода) = МЕСЯЦ(&ПериодДанных) + 2
	|					И ОсновныеЗаписиОстаже.ОсобыеУсловияТруда <> &Ст27_1
	|					И (ЗаписиОСтаже.ОсобыеУсловияТруда В (&ПрочиеПроверяемыеКоды)
	|						ИЛИ ЗаписиОСтаже.ОснованиеВыслугиЛет В (&ПрочиеПроверяемыеКоды))
	|					И (ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа В (&ИсключительныеЗначенияТретьегоПараметра)
	|						ИЛИ ЗаписиОСтаже.ОсобыеУсловияТруда = &Ст27_2
	|							И ЗаписиОСтаже.КодПозицииСписка = &КодПозицииСпискаСт27_2)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК НеПроверятьОстальныеКодыВТретьемМесяце,
	|	ЗаписиОСтаже.Сотрудник
	|ПОМЕСТИТЬ ВТПараметрыСтажа
	|ИЗ
	|	ВТЗаписиОСтаже КАК ЗаписиОСтаже
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаписиОСтаже КАК ОсновныеЗаписиОстаже
	|		ПО ЗаписиОСтаже.Сотрудник = ОсновныеЗаписиОстаже.Сотрудник
	|			И ЗаписиОСтаже.НомерОсновнойЗаписи = ОсновныеЗаписиОстаже.НомерОсновнойЗаписи
	|			И (ОсновныеЗаписиОстаже.НомерДополнительнойЗаписи = 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаписиОСтаже.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиДокумента.НомерСтроки,
	|	СотрудникиДокумента.Сотрудник КАК Сотрудник,
	|	СотрудникиДокумента.Фамилия,
	|	СотрудникиДокумента.Имя,
	|	СотрудникиДокумента.Отчество,
	|	СотрудникиДокумента.Сотрудник.Наименование КАК СотрудникНаименование,
	|	СотрудникиДокумента.СтраховойНомерПФР,
	|	МИНИМУМ(ДублиСтрок.НомерСтроки) КАК КонфликтующаяСтрока,
	|	ВЫБОР
	|		КОГДА АктуальныеСотрудники.ФизическоеЛицо ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СотрудникРаботаетВОрганизации,
	|	МИНИМУМ(ДублиСтрокСтраховыеНомера.НомерСтроки) КАК КонфликтующаяСтрокаСтраховойНомер
	|ПОМЕСТИТЬ ВТСотрудникиДокумента
	|ИЗ
	|	ВТСотрудники КАК СотрудникиДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК ДублиСтрок
	|		ПО СотрудникиДокумента.НомерСтроки > ДублиСтрок.НомерСтроки
	|			И СотрудникиДокумента.Сотрудник = ДублиСтрок.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизическиеЛицаРаботавшиеВОрганизации КАК АктуальныеСотрудники
	|		ПО СотрудникиДокумента.Сотрудник = АктуальныеСотрудники.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК ДублиСтрокСтраховыеНомера
	|		ПО СотрудникиДокумента.НомерСтроки > ДублиСтрокСтраховыеНомера.НомерСтроки
	|			И СотрудникиДокумента.СтраховойНомерПФР = ДублиСтрокСтраховыеНомера.СтраховойНомерПФР
	|			И СотрудникиДокумента.Сотрудник <> ДублиСтрокСтраховыеНомера.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиДокумента.НомерСтроки,
	|	СотрудникиДокумента.Сотрудник,
	|	СотрудникиДокумента.Фамилия,
	|	СотрудникиДокумента.Имя,
	|	СотрудникиДокумента.Отчество,
	|	СотрудникиДокумента.Сотрудник.Наименование,
	|	СотрудникиДокумента.СтраховойНомерПФР,
	|	ВЫБОР
	|		КОГДА АктуальныеСотрудники.ФизическоеЛицо ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиДокумента.НомерСтроки КАК НомерСтрокиСотрудник,
	|	СотрудникиДокумента.Сотрудник КАК Сотрудник,
	|	СотрудникиДокумента.СотрудникНаименование,
	|	СотрудникиДокумента.СтраховойНомерПФР,
	|	СотрудникиДокумента.СотрудникРаботаетВОрганизации,
	|	СотрудникиДокумента.КонфликтующаяСтрока,
	|	СотрудникиДокумента.Фамилия,
	|	СотрудникиДокумента.Имя,
	|	СотрудникиДокумента.Отчество,
	|	СотрудникиДокумента.КонфликтующаяСтрокаСтраховойНомер,
	|	"""" КАК АдресДляИнформирования,
	|	ЕСТЬNULL(ПараметрыСтажа.КоличествоЗаписей, 0) КАК КоличествоЗаписей,
	|	ЕСТЬNULL(ПараметрыСтажа.КоличествоОплачиваемыхСтрок, 0) КАК КоличествоОплачиваемыхСтрок,
	|	ЕСТЬNULL(ПараметрыСтажа.Ст27_1ВПервомМесяце, ЛОЖЬ) КАК Ст27_1ВПервомМесяце,
	|	ЕСТЬNULL(ПараметрыСтажа.НеПроверятьСт27_1ВПервомМесяце, ЛОЖЬ) КАК НеПроверятьСт27_1ВПервомМесяце,
	|	ЕСТЬNULL(ПараметрыСтажа.ОстальныеКодыВПервомМесяце, ЛОЖЬ) КАК ОстальныеКодыВПервомМесяце,
	|	ЕСТЬNULL(ПараметрыСтажа.НеПроверятьОстальныеКодыВПервомМесяце, ЛОЖЬ) КАК НеПроверятьОстальныеКодыВПервомМесяце,
	|	ЕСТЬNULL(ПараметрыСтажа.Ст27_1ВоВторомМесяце, ЛОЖЬ) КАК Ст27_1ВоВторомМесяце,
	|	ЕСТЬNULL(ПараметрыСтажа.НеПроверятьСт27_1ВоВторомМесяце, ЛОЖЬ) КАК НеПроверятьСт27_1ВоВторомМесяце,
	|	ЕСТЬNULL(ПараметрыСтажа.ОстальныеКодыВоВторомМесяце, ЛОЖЬ) КАК ОстальныеКодыВоВторомМесяце,
	|	ЕСТЬNULL(ПараметрыСтажа.НеПроверятьОстальныеКодыВоВторомМесяце, ЛОЖЬ) КАК НеПроверятьОстальныеКодыВоВторомМесяце,
	|	ЕСТЬNULL(ПараметрыСтажа.Ст27_1ВТретьемМесяце, ЛОЖЬ) КАК Ст27_1ВТретьемМесяце,
	|	ЕСТЬNULL(ПараметрыСтажа.НеПроверятьСт27_1ВТретьемМесяце, ЛОЖЬ) КАК НеПроверятьСт27_1ВТретьемМесяце,
	|	ЕСТЬNULL(ПараметрыСтажа.ОстальныеКодыВТретьемМесяце, ЛОЖЬ) КАК ОстальныеКодыВТретьемМесяце,
	|	ЕСТЬNULL(ПараметрыСтажа.НеПроверятьОстальныеКодыВТретьемМесяце, ЛОЖЬ) КАК НеПроверятьОстальныеКодыВТретьемМесяце
	|ИЗ
	|	ВТСотрудникиДокумента КАК СотрудникиДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыСтажа КАК ПараметрыСтажа
	|		ПО СотрудникиДокумента.Сотрудник = ПараметрыСтажа.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиСотрудник";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ПроверитьДанныеДокумента(Отказ = Ложь) Экспорт 
	
	Если Не ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;	
	
	Ошибки = Новый Массив;
	

	ПроверитьДанныеШапкиДокумента(Ошибки, Отказ);
	
	ЗапросПоСтрокамДокумента = Неопределено;
	
	ПравилаПроверкиДанныхЗЛ = ДокументыСЗВПравилаПроверкиДанныхЗЛ(Ложь);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТСТаблицамиОбъекта(МенеджерВременныхТаблиц);
	
	ВыборкаПоСтрокамДокумента = СформироватьЗапросПоСотрудникамДляПроверкиЗаполнения(МенеджерВременныхТаблиц).Выбрать();

	Пока ВыборкаПоСтрокамДокумента.СледующийПоЗначениюПоля("НомерСтрокиСотрудник") Цикл
		
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда 
			
			Если ВыборкаПоСтрокамДокумента.КонфликтующаяСтрока <> Null Тогда  
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Информация о сотруднике %1 была введена в документе ранее.'"), ВыборкаПоСтрокамДокумента.СотрудникНаименование);
				
				ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуЗаполненияСпискаСотрудников(
					Ошибки, 
					Ссылка, 
					ВыборкаПоСтрокамДокумента.НомерСтрокиСотрудник,
					ТекстОшибки,
					"Сотрудник",
					Отказ);
																							
			ИначеЕсли ВыборкаПоСтрокамДокумента.КонфликтующаяСтрокаСтраховойНомер <> Null Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: информация о сотруднике с таким же страховым номером была введена в документе ранее.'"), ВыборкаПоСтрокамДокумента.СотрудникНаименование);
				
				ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуЗаполненияСпискаСотрудников(
					Ошибки, 
					Ссылка, 
					ВыборкаПоСтрокамДокумента.НомерСтрокиСотрудник,
					ТекстОшибки,
					"СтраховойНомерПФР",
					Отказ);
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ПроверяемыйПериод = ?(ЗначениеЗаполнено(Год), Дата(Год, 1, 1), Дата(1, 1, 1));
	ПроверитьЗаписиОСтаже(МенеджерВременныхТаблиц, Ссылка, ПроверяемыйПериод, Отказ, Ложь, Истина, Истина);				
	
КонецПроцедуры

Процедура ПроверитьЗаписиОСтаже(МенеджерВременныхТаблиц, Ссылка, ОтчетныйПериод, Отказ, РасширеннаяПроверка = Истина, ИспользоватьНовыйКлассификаторПараметровСтажа = Ложь, ВыделятьСтажДоговорников = Ложь) Экспорт
	Ошибки = Новый Массив;
	
	ДоговорыГПХ = Новый Массив;
	Если ВыделятьСтажДоговорников Тогда
		ДоговорыГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДОГОВОР);
		ДоговорыГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛАВТ);
		ДоговорыГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛДОГ);
	КонецЕсли;	

	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДоговорыГПХ", ДоговорыГПХ);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиОСтаже.НомерСтроки КАК НомерСтрокиСтаж,
	|	ЗаписиОСтаже.НомерСтрокиСотрудник КАК НомерСтрокиСотрудник,
	|	ЗаписиОСтаже.Сотрудник КАК Сотрудник,
	|	ФизическиеЛица.Наименование КАК СотрудникНаименование,
	|	ЗаписиОСтаже.НомерОсновнойЗаписи,
	|	ЗаписиОСтаже.НомерДополнительнойЗаписи,
	|	ЗаписиОСтаже.ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода,
	|	ТерриториальныеУсловияПФР.Код КАК ТерриториальныеУсловияКод,
	|	ЗаписиОСтаже.ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ТерриториальныеУсловияСтавка,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда,
	|	ОсобыеУсловияТрудаПФР.Код КАК ОсобыеУсловияТрудаКод,
	|	ЗаписиОСтаже.КодПозицииСписка,
	|	СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения.Код КАК КодПозицииСпискаКод,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа,
	|	ОснованияИсчисляемогоСтраховогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет,
	|	ОснованияДосрочногоНазначенияПенсии.Код КАК ОснованиеВыслугиЛетКод,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет,
	|	ПараметрыИсчисляемогоСтраховогоСтажа.Код КАК ТретийПараметрИсчисляемогоСтажаКод,
	|	ВЫБОР
	|		КОГДА ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа В (&ДоговорыГПХ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоговорГПХ
	|ИЗ
	|	ВТЗаписиОСтаже КАК ЗаписиОСтаже
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТерриториальныеУсловияПФР КАК ТерриториальныеУсловияПФР
	|		ПО ЗаписиОСтаже.ТерриториальныеУсловия = ТерриториальныеУсловияПФР.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсобыеУсловияТрудаПФР КАК ОсобыеУсловияТрудаПФР
	|		ПО ЗаписиОСтаже.ОсобыеУсловияТруда = ОсобыеУсловияТрудаПФР.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения КАК СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения
	|		ПО ЗаписиОСтаже.КодПозицииСписка = СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОснованияИсчисляемогоСтраховогоСтажа КАК ОснованияИсчисляемогоСтраховогоСтажа
	|		ПО ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа = ОснованияИсчисляемогоСтраховогоСтажа.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОснованияДосрочногоНазначенияПенсии КАК ОснованияДосрочногоНазначенияПенсии
	|		ПО ЗаписиОСтаже.ОснованиеВыслугиЛет = ОснованияДосрочногоНазначенияПенсии.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО ЗаписиОСтаже.Сотрудник = ФизическиеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПараметрыИсчисляемогоСтраховогоСтажа КАК ПараметрыИсчисляемогоСтраховогоСтажа
	|		ПО ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа = ПараметрыИсчисляемогоСтраховогоСтажа.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорГПХ,
	|	НомерСтрокиСотрудник,
	|	НомерСтрокиСтаж";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ДоговорГПХ") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтрокиСотрудник") Цикл
			ПроверитьЗаписиОСтажеПоСотруднику(Ссылка, ОтчетныйПериод, Выборка, РасширеннаяПроверка, Ошибки, Отказ, ИспользоватьНовыйКлассификаторПараметровСтажа, ВыделятьСтажДоговорников)		
		КонецЦикла;	
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ПроверитьЗаписиОСтажеПоСотруднику(Ссылка, ОтчетныйПериод, ВыборкаПоСтрокамДокумента, РасширеннаяПроверкаСтажа, Ошибки, Отказ, ИспользоватьНовыйКлассификаторПараметровСтажа = Ложь, ВыделятьСтажДоговорников = Ложь) Экспорт	
	ПараметрыИсчисляемогоСтраховогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа;
	
	ОкончаниеПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаСтажаПерсУчета(ОтчетныйПериод);
	
	ПараметрыСтажаСПравомНаДосрочнуюПенсию =ПерсонифицированныйУчет.ПараметрыИсчисляемогоСтажаПредусматривающиеПравоНаДосрочнуюПенсию();
	
	ТекущаяОсновнаяЗапись = Новый Структура("Сотрудник, ДатаНачалаПериода, ДатаОкончанияПериода, ОсобыеУсловияТруда, ОснованиеВыслугиЛет, ТерриториальныеУсловия, ОснованиеИсчисляемогоСтажа, ОснованиеВыслугиЛетКод, НомерОсновнойЗаписи, НомерДополнительнойЗаписи");
	СписокТерриториальныеУсловияЗаписи = Новый СписокЗначений;
	СписокУсловияТрудаЗаписи = Новый СписокЗначений;
	СписокВыслугаЛетЗаписи = Новый СписокЗначений;
	
	ПредыдущийНомерОсновнойЗаписи = 0;
	ПредыдущийНомерДополнительнойЗаписи = 0;
	
	НомерСтроки = 0;
	
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.НомерСтрокиСтаж) Тогда
					
		Пока ВыборкаПоСтрокамДокумента.СледующийПоЗначениюПоля("НомерСтрокиСтаж") Цикл
			
			НомерСтроки = НомерСтроки + 1;
									
			// ПРОВЕРКА КОРРЕКТНОГО ЗАПОЛНЕНИЯ ДАТ НАЧАЛА И ОКОНЧАНИЯ ПЕРИОДА
			
			// По умолчанию считаем, что запись основная
			ЭтоОсновнаяЗапись = Истина;
			
			// Проверим, возможно ли появление в текущей позиции дополнительной записи о стаже
			ДополнительнаяЗаписьВозможна = ПредыдущийНомерОсновнойЗаписи <> 0;
			
			// Проверка заполнения реквизитов "ДатаНачалаПериода" и "ДатаОкончанияПериода". 
			Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачалаПериода) И Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончанияПериода) Тогда
				Если ДополнительнаяЗаписьВозможна Тогда
					ЭтоОсновнаяЗапись = Ложь;
				Иначе
					ТекстОшибки = НСтр("ru = 'не указана дата начала периода.'");     
					ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ДатаНачалаПериода");
					
					ТекстОшибки = НСтр("ru = 'не указана дата окончания периода.'");     
					ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ДатаОкончанияПериода");					
				КонецЕсли;	
			ИначеЕсли Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачалаПериода) Тогда
				ТекстОшибки = НСтр("ru = 'при указании даты окончания периода необходимо указывать дату начала периода.'");     
				ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ДатаНачалаПериода");
			ИначеЕсли Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончанияПериода) Тогда
				ТекстОшибки = НСтр("ru = 'при указании даты начала периода необходимо указывать дату окончания периода.'");     
				ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ДатаОкончанияПериода");
				
			Иначе//Обе даты заполнены
				
				// Дата начала периода не должна быть ранее начала периода
				Если ВыборкаПоСтрокамДокумента.ДатаНачалаПериода < ОтчетныйПериод Тогда
					ТекстОшибки = НСтр("ru = 'дата начала периода должна быть не ранее начала периода.'");     
					ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ДатаНачалаПериода");
					
				КонецЕсли;	 
				
				// Дата окончания периода не должна быть позднее окончания периода
				Если ВыборкаПоСтрокамДокумента.ДатаОкончанияПериода > ОкончаниеПериода Тогда
					ТекстОшибки = НСтр("ru = 'дата окончания периода должна быть не позднее окончания периода.'");     
					ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ДатаОкончанияПериода");
				КонецЕсли;	 
				
				// Начало периода не должно быть позже окончания периода 
				Если ВыборкаПоСтрокамДокумента.ДатаНачалаПериода > ВыборкаПоСтрокамДокумента.ДатаОкончанияПериода Тогда
					ТекстОшибки = НСтр("ru = 'дата начала периода не должна превышать дату окончания периода.'");     
					ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ДатаНачалаПериода");
				КонецЕсли;
				
			КонецЕсли;	 
			
			Если РасширеннаяПроверкаСтажа Тогда
				
				Если ЭтоОсновнаяЗапись Тогда
					
					// Проверка на хронологический порядок записей
					Если ТекущаяОсновнаяЗапись.ДатаОкончанияПериода <> Неопределено Тогда
						Если ВыборкаПоСтрокамДокумента.ДатаНачалаПериода <= ТекущаяОсновнаяЗапись.ДатаОкончанияПериода Тогда
							ТекстОшибки = НСтр("ru = 'дата начала периода должна быть больше даты окончания предыдущего периода'");     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ДатаНачалаПериода");
						КонецЕсли;	 
					КонецЕсли;
					
					// Переустановка текущей основной записи
					ТекущаяОсновнаяЗапись.Сотрудник = ВыборкаПоСтрокамДокумента.Сотрудник;
					ТекущаяОсновнаяЗапись.ДатаНачалаПериода = ВыборкаПоСтрокамДокумента.ДатаНачалаПериода;
					ТекущаяОсновнаяЗапись.ДатаОкончанияПериода = ВыборкаПоСтрокамДокумента.ДатаОкончанияПериода;
					ТекущаяОсновнаяЗапись.ОсобыеУсловияТруда = ВыборкаПоСтрокамДокумента.ОсобыеУсловияТруда;
					ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛет = ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет;
					ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛетКод = ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛетКод;
					ТекущаяОсновнаяЗапись.ТерриториальныеУсловия = ВыборкаПоСтрокамДокумента.ТерриториальныеУсловия;
					ТекущаяОсновнаяЗапись.ОснованиеИсчисляемогоСтажа = ВыборкаПоСтрокамДокумента.ОснованиеИсчисляемогоСтажа;
					ТекущаяОсновнаяЗапись.НомерОсновнойЗаписи = ВыборкаПоСтрокамДокумента.НомерОсновнойЗаписи;
					ТекущаяОсновнаяЗапись.НомерДополнительнойЗаписи = 0;
					
					СписокТерриториальныеУсловияЗаписи.Очистить();
					СписокУсловияТрудаЗаписи.Очистить();
					СписокВыслугаЛетЗаписи.Очистить();
				КонецЕсли;	 
				
				// ПРОВЕРКА ПРАВИЛЬНОСТИ НУМЕРАЦИИ ЗАПИСЕЙ
				
				// Проверка нумерации основных и дополнительных записей
				Если (ЭтоОсновнаяЗапись) Тогда
					Если Не ВыделятьСтажДоговорников Тогда  
						ОжидаемыйНомерОсновнойЗаписи = ПредыдущийНомерОсновнойЗаписи +1;
						Если (ВыборкаПоСтрокамДокумента.НомерОсновнойЗаписи <> ОжидаемыйНомерОсновнойЗаписи)  Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'неверный номер основной записи. Ожидается номер: %1'"), ОжидаемыйНомерОсновнойЗаписи);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "НомерОсновнойЗаписи");
						КонецЕсли;
					КонецЕсли;	
				Иначе
					ОжидаемыйНомерДополнительнойЗаписи = ПредыдущийНомерДополнительнойЗаписи +1;
					Если (ВыборкаПоСтрокамДокумента.НомерДополнительнойЗаписи <> ОжидаемыйНомерДополнительнойЗаписи)  Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'неверный номер дополнительной записи. Ожидается номер: %1'"), ОжидаемыйНомерДополнительнойЗаписи);     
						ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "НомерДополнительнойЗаписи");
					КонецЕсли;
				КонецЕсли;
				
				//  ОПРЕДЕЛИМ, ЗАДАНЫ ЛИ РЕКВИЗИТЫ ОТДЕЛЬНЫХ ГРУПП
				
				// Признаки заполнения группы реквизитов "ТерриториальныеУсловия"
				УказаныТерриториальныеУсловия = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ТерриториальныеУсловия);
				
				// Признаки заполнения реквизитов группы "Особые условия труда"
				УказанКодПозицииСписка = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КодПозицииСписка);
				УказаныОсобыеУсловияТруда = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ОсобыеУсловияТруда);
				ЗаданаГруппаУсловияТруда = УказаныОсобыеУсловияТруда;
				
				// Признаки заполнения реквизитов группы "Исчисляемый стаж"
				УказаноОснованиеИсчисляемогоСтажа = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ОснованиеИсчисляемогоСтажа);
				УказанТретийПараметрИсчисляемогоСтажа = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ТретийПараметрИсчисляемогоСтажа);
				ЗаданаГруппаИсчисляемыйСтаж = УказаноОснованиеИсчисляемогоСтажа ИЛИ УказанТретийПараметрИсчисляемогоСтажа;
				
				// Признаки заполнения реквизитов группы "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ"
				УказанПараметрИсчисляемогоСтажа1 = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПервыйПараметрИсчисляемогоСтажа); 
				УказанПараметрИсчисляемогоСтажа2 = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВторойПараметрИсчисляемогоСтажа); 
				ЗаданаГруппаФОВ = УказанПараметрИсчисляемогоСтажа1 ИЛИ УказанПараметрИсчисляемогоСтажа2;
				
				// Признаки заполнения реквизитов группы "ВыслугаЛет"
				УказаноОснованиеВыслугиЛет = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет);
				ЗаданаГруппаВыслугаЛет = УказаноОснованиеВыслугиЛет;
				
				//  ПРОВЕРКА НА ДОПУСТИМЫЕ СОЧЕТАНИЯ МЕЖДУ ГРУППАМИ СТАЖА ОСНОВНОЙ И ДОПОЛНИТЕЛЬНОЙ ЗАПИСЕЙ 
				
				Если НЕ ЭтоОсновнаяЗапись Тогда
					ПерсонифицированныйУчет.ДокументыСЗВПроверитьДополнительнойЗаписиСтажа(Ошибки, Ссылка, ВыборкаПоСтрокамДокумента, ТекущаяОсновнаяЗапись, ВыборкаПоСтрокамДокумента.НомерСтрокиСотрудник, НомерСтроки, Отказ);
				КонецЕсли;	 
				
				// ПРОВЕРКА ОСНОВНЫХ И ДОПОЛНИТЕЛЬНЫХ ЗАПИСЕЙ НА ДУБЛИ ЗНАЧЕНИЙ РЕКВИЗИТОВ
				
				Если УказаныТерриториальныеУсловия Тогда
					ПредставлениеЗначения = ""+ СОКРЛП(ВыборкаПоСтрокамДокумента.ТерриториальныеУсловияКод);
					Если СписокТерриториальныеУсловияЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'указанные в дополнительной записи территориальные условия %1 не должны повторяться в рамках одной основной записи.'"), ПредставлениеЗначения);     
						ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ТерриториальныеУсловия");
					Иначе	
						СписокТерриториальныеУсловияЗаписи.Добавить(ПредставлениеЗначения);
					КонецЕсли;	 
				КонецЕсли;	 
				
				Если УказаныОсобыеУсловияТруда Тогда
					ПредставлениеЗначения = СОКРЛП(ВыборкаПоСтрокамДокумента.ОсобыеУсловияТрудаКод);
					Если СписокУсловияТрудаЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'указанные в дополнительной записи условия труда %1 не должны повторяться в рамках одной основной записи.'"), ПредставлениеЗначения);     
						ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ОсобыеУсловияТруда");
					Иначе	
						СписокУсловияТрудаЗаписи.Добавить(ПредставлениеЗначения);
					КонецЕсли;	 
				КонецЕсли;	 
				
				Если УказаноОснованиеВыслугиЛет Тогда
					ПредставлениеЗначения = СОКРЛП(ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛетКод);
					Если СписокВыслугаЛетЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'указанный в дополнительной записи код выслуги лет %1 не должны повторяться в рамках одной основной записи.'"), ПредставлениеЗначения);     
						ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ОснованиеВыслугиЛет");
					Иначе	
						СписокВыслугаЛетЗаписи.Добавить(ПредставлениеЗначения);
					КонецЕсли;	 
				КонецЕсли;	
				
				//  ПРОВЕРКА ЗНАЧЕНИЙ РЕКВИЗИТОВ ГРУППЫ "Особые условия труда"
				
				КПС = СокрЛП(ВыборкаПоСтрокамДокумента.КодПозицииСпискаКод);
				
				НазваниеСписка ="";
				Если УказанКодПозицииСписка Тогда 
					
					Если НЕ УказаныОсобыеУсловияТруда Тогда
						ТекстОшибки = НСтр("ru = 'код позиции списка не может указываться без указания кода особых условий труда.'");     
						ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "КодПозицииСписка");
					КонецЕсли;	 
					
					ДлинаКПС = СтрДлина(КПС);
					
					Если (ДлинаКПС=8)ИЛИ(ДлинаКПС=14) Тогда
						
						Первые2СимволаКПС = Лев(КПС,2);
						Если (Первые2СимволаКПС = "10")ИЛИ(Первые2СимволаКПС = "11")ИЛИ(Первые2СимволаКПС = "12") Тогда
							НазваниеСписка = "Список№1";
						ИначеЕсли (Первые2СимволаКПС >= "20")И(Первые2СимволаКПС <= "23") Тогда
							НазваниеСписка = "Список№2";
						Иначе	
							ТекстОшибки = НСтр("ru = 'неверный код позиции списка вредных профессий.'");     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "КодПозицииСписка");
						КонецЕсли;	
						
					ИначеЕсли (ДлинаКПС=5) Тогда
						НазваниеСписка = "ПрочиеСписки";
					Иначе	
						ТекстОшибки = НСтр("ru = 'длина кода позиции списка должна быть равна либо 5, либо 8, либо 14 символам.'");     
						ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "КодПозицииСписка");
					КонецЕсли;	 
				КонецЕсли;
				
				Если УказаныОсобыеУсловияТруда Тогда
					
					// Проверки на возможные коды списков для конкретных условий труда
					
					КодОсобыхУсловийТруда = СОКРЛП(ВыборкаПоСтрокамДокумента.ОсобыеУсловияТрудаКод);
					Первые8СимволовКПС = ВРЕГ(Лев(КПС,8));
					
					Если ВыборкаПоСтрокамДокумента.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТрудаПФР.Ст27_1 Тогда
						Если (НазваниеСписка <> "Список№1") Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для особых условий труда с кодом %1 должен быть указан код позиции Списка №1.'"), КодОсобыхУсловийТруда);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "КодПозицииСписка");
						КонецЕсли;	 
						
					ИначеЕсли ВыборкаПоСтрокамДокумента.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТрудаПФР.Ст27_2 Тогда
						
						Если (НЕ УказанКодПозицииСписка) Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для особых условий труда с кодом %1 должен быть указан код позиции Списка №1 или Списка №2.'"), КодОсобыхУсловийТруда);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "КодПозицииСписка");
						КонецЕсли;	 
						
						Если (НазваниеСписка = "Список№1") Тогда
							Если (Первые8СимволовКПС <> "1010300Б")И(Первые8СимволовКПС <> "1010100Г")И(Первые8СимволовКПС <> "1010100Д")  Тогда
								ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для особых условий труда с кодом %1  указан неверный код позиции списка.'"), КодОсобыхУсловийТруда);     
								ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "КодПозицииСписка");
							КонецЕсли;	
						ИначеЕсли (НазваниеСписка <> "Список№2") Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для особых условий труда с кодом %1 указан неверный код позиции списка.'"), КодОсобыхУсловийТруда);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "КодПозицииСписка");
						КонецЕсли;	 
						
					Иначе
						// Для остальных кодов условий труда КПС указываться не должен
						Если УказанКодПозицииСписка Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для особых условий труда с кодом %1 код позиции списка указываться не должен.'"), КодОсобыхУсловийТруда);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "КодПозицииСписка");
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	
				//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Выслуга лет"
				
				УказанПараметр1 = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПервыйПараметрВыслугиЛет);
				УказанПараметр2 = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВторойПараметрВыслугиЛет);
				УказанПараметр3 = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ТретийПараметрВыслугиЛет);
				ПараметрыУказаны = (УказанПараметр1) ИЛИ (УказанПараметр2) ИЛИ (УказанПараметр3);
				
				Если УказаноОснованиеВыслугиЛет Тогда
					
					КодОснования = СокрЛП(ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛетКод);
					
					УказанТолькоТретийПараметр = (НЕ УказанПараметр1) И (НЕ УказанПараметр2) И (УказанПараметр3);
					
					// Медицинские работники
					Если (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_СМ) 
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_ГД)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_СМХР)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_ГДХР) Тогда
						
						Если ДоляСтавкиУказанаНеверно(ВыборкаПоСтрокамДокумента.ТретийПараметрВыслугиЛет) Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 третий параметр должен содержать долю ставки (число от 0.1 до 2)'"), КодОснования);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ТретийПараметрВыслугиЛет");
						Иначе
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 должен указываться только третий параметр'"), КодОснования);  
							Если УказанПараметр1 Тогда    
								ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ПервыйПараметрВыслугиЛет");
							КонецЕсли;	
							Если УказанПараметр2 Тогда
								ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ВторойПараметрВыслугиЛет");	
							КонецЕсли;	
						КонецЕсли;	
						
						// Педагогические работники	
					ИначеЕсли ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_ПД Тогда
						
						Если УказанПараметр2 Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 второй параметр указываться не должен.'"), КодОснования);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка,  ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ВторойПараметрВыслугиЛет");
						ИначеЕсли ДоляСтавкиУказанаНеверно(ВыборкаПоСтрокамДокумента.ТретийПараметрВыслугиЛет) Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 третий параметр должен содержать долю ставки (число от 0.1 до 2).'"), КодОснования);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ТретийПараметрВыслугиЛет");
						КонецЕсли;	
						
					ИначеЕсли ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_ПДРК Тогда
						
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 второй параметр указываться не должен.'"), КодОснования);
						Если УказанПараметр2 Тогда     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ВторойПараметрВыслугиЛет");	
						ИначеЕсли УказанПараметр3 
							И ВыборкаПоСтрокамДокумента.ТретийПараметрВыслугиЛет <> 1 Тогда
							
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 третий параметр может содержать только ставку равную 0 или 1.'"), КодОснования);
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ТретийПараметрВыслугиЛет");
						КонецЕсли;	
						
						//Летчики
					ИначеЕсли (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.САМОЛЕТ) 
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.СПЕЦАВ)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.ИТСИСП)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.ЛЕТИСП) 
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.ИНСПЕКТ)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.ОПЫТИСП)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.ИСПКЛС1)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.ИТСМАВ)Тогда
						
						Если  УказанПараметр3 Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 параметр 3 указываться не должен.'"), КодОснования);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ТретийПараметрВыслугиЛет");
						КонецЕсли;	 
						
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 параметры 1 и 2 должны содержать отработанное время (часы и минуты).'"), КодОснования);  
						Если  (НЕ УказанПараметр1) И (НЕ УказанПараметр2) Тогда   
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ПервыйПараметрВыслугиЛет");
						КонецЕсли;		
						//Парашютисты	
					ИначеЕсли (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.РЕАКТИВН)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.НОРМСП)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.НОРМАПР) Тогда	
						
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 параметры 2 и 3 указываться не должны.'"), КодОснования);
						Если УказанПараметр2 Тогда     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ВторойПараметрВыслугиЛет");
						КонецЕсли;	
						Если УказанПараметр3 Тогда     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа,  "ТретийПараметрВыслугиЛет");
						КонецЕсли;	
						
						// Управление воздушным движением и  инженерно-технический состав 	
					ИначеЕсли (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_14)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_15) Тогда
						
						Если  УказанПараметр3 Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 параметр 3 указываться не должен.'"), КодОснования);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ТретийПараметрВыслугиЛет");
						КонецЕсли;	 
						
						// Прочие коды выслуги лет	
					Иначе
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 параметры выслуги лет 1,2,3 указываться не должны.'"), КодОснования); 
						Если УказанПараметр1 Тогда    
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ПервыйПараметрВыслугиЛет");
						КонецЕсли;	
						Если УказанПараметр2 Тогда    
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ВторойПараметрВыслугиЛет");
						КонецЕсли;	
						Если УказанПараметр3 Тогда    
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа,  "ТретийПараметрВыслугиЛет");
						КонецЕсли;	
					КонецЕсли;	 
				Иначе
					Если ПараметрыУказаны Тогда
						ТекстОшибки = НСтр("ru = 'параметры выслуги лет 1,2,3 без указания основания выслуги лет указываться не должны.'");     
						Если УказанПараметр1 Тогда    
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ПервыйПараметрВыслугиЛет");
						КонецЕсли;	
						Если УказанПараметр2 Тогда    
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ВторойПараметрВыслугиЛет");
						КонецЕсли;	
						Если УказанПараметр3 Тогда    
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа,  "ТретийПараметрВыслугиЛет");
						КонецЕсли;	
					КонецЕсли;	 
				КонецЕсли;	 
				
				
				
				//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Исчисляемый стаж"  (Основание + Третий параметр)
				Если УказанТретийПараметрИсчисляемогоСтажа Тогда
					
					ЭтоПараметрСПравомНаДосрочнуюПенсию = ПараметрыСтажаСПравомНаДосрочнуюПенсию.Найти(ВыборкаПоСтрокамДокумента.ТретийПараметрИсчисляемогоСтажа) <> Неопределено;
					Если Не ЭтоПараметрСПравомНаДосрочнуюПенсию И (УказаноОснованиеИсчисляемогоСтажа Или ЗаданаГруппаФОВ Или УказаноОснованиеВыслугиЛет Или ЗаданаГруппаУсловияТруда) Тогда
						ШаблонТекстаОшибки = НСтр("ru = 'при указании третьего параметра исчисляемого стажа ""%1"" группы реквизитов должны быть пустыми: Исчисляемый стаж: основание, Фактически отработанное время, Выслуга лет'");  
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												ШаблонТекстаОшибки,
												ВыборкаПоСтрокамДокумента.ТретийПараметрИсчисляемогоСтажаКод);
	
						ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа);
					КонецЕсли;
					Если ЭтоПараметрСПравомНаДосрочнуюПенсию И ЗаданаГруппаФОВ Тогда
						ШаблонТекстаОшибки = НСтр("ru = 'при указании третьего параметра исчисляемого стажа ""%1"" группа реквизитов фактически отработанного времени указываться не должна.'");  
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												ШаблонТекстаОшибки,
												ВыборкаПоСтрокамДокумента.ТретийПараметрИсчисляемогоСтажаКод);

						
						ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа);
					КонецЕсли;
					
					Если (ВыборкаПоСтрокамДокумента.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.МЕСЯЦ Или ВыборкаПоСтрокамДокумента.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.МЕДНЕТРУД)
						И Не УказаноОснованиеИсчисляемогоСтажа И Не УказаноОснованиеВыслугиЛет И Не ЗаданаГруппаУсловияТруда И Не УказаныТерриториальныеУсловия Тогда
				
						ШаблонТекстаОшибки = НСтр("ru = 'при указании третьего параметра исчисляемого стажа ""%1"" обязательно заполнение хотя бы одной из групп реквизитов ""Условия труда"", ""Исчисление стажа: код"", ""Досрочное назначение пенсии"".'");  
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												ШаблонТекстаОшибки,
												ВыборкаПоСтрокамДокумента.ТретийПараметрИсчисляемогоСтажаКод);
	
						ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа);
					КонецЕсли;
					
				КонецЕсли;	
						 				
				//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ" (ПАРАМЕТРЫ 1,2 ИСЧИСЛЯЕМОГО СТАЖА)   
				
				Если ЗаданаГруппаФОВ Тогда
					Если (НЕ УказаныОсобыеУсловияТруда) И (НЕ УказаноОснованиеИсчисляемогоСтажа)
						И (НЕ УказаныТерриториальныеУсловия)  Тогда
						
						ТекстОшибки = НСтр("ru = 'параметры 1,2 исчисляемого стажа должны указываться только при заполнении других групп реквизитов (Территориальные условия, Условия труда, Исчисляемый стаж: основание).'");
						
						Если УказанПараметрИсчисляемогоСтажа1 Тогда
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ПервыйПараметрИсчисляемогоСтажа");
						КонецЕсли;
						Если УказанПараметрИсчисляемогоСтажа2 Тогда
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ВторойПараметрИсчисляемогоСтажа");
						КонецЕсли;
					КонецЕсли;	
					
					Если ВыборкаПоСтрокамДокумента.ОснованиеИсчисляемогоСтажа	<>	Справочники.ОснованияИсчисляемогоСтраховогоСтажа.ВОДОЛАЗ Тогда
						
						Если ВыборкаПоСтрокамДокумента.ПервыйПараметрИсчисляемогоСтажа > 11 Тогда
							ТекстОшибки = НСтр("ru = 'первый параметр исчисляемого стажа (Месяцы) не должен быть больше 11.'");     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ПервыйПараметрИсчисляемогоСтажа");							
						КонецЕсли;	 	
						Если ВыборкаПоСтрокамДокумента.ВторойПараметрИсчисляемогоСтажа > 30 Тогда
							ТекстОшибки = НСтр("ru = 'второй параметр исчисляемого стажа (Дни) не должен быть больше 30.'");     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ВторойПараметрИсчисляемогоСтажа");
						КонецЕсли;	 	
						
						Лет = 0;
						Месяцев = 0;
						Дней = 0;
						ПолучитьСтажЗаПериод(ТекущаяОсновнаяЗапись.ДатаОкончанияПериода,	ТекущаяОсновнаяЗапись.ДатаНачалаПериода, Лет,	Месяцев, Дней);			
						ПолучитьПриведенныйСтаж(Лет,Месяцев,Дней);
						КалендарноеВремя = Лет*12*30+Месяцев*30+Дней;
						ФОВДляСравнения = ВыборкаПоСтрокамДокумента.ПервыйПараметрИсчисляемогоСтажа *30 + ВыборкаПоСтрокамДокумента.ВторойПараметрИсчисляемогоСтажа; 
						
						Если (ФОВДляСравнения > КалендарноеВремя) Тогда
							ТекстОшибки = НСтр("ru = 'указанное фактически отработанное время превышает календарное время.'");     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ПервыйПараметрИсчисляемогоСтажа");
						КонецЕсли;	
					КонецЕсли;	 
					
				КонецЕсли;	 
				
				//  ПОДГОТОВКА К СЛЕДУЮЩЕЙ ИТЕРАЦИИ  
				
				// Запомним для следующей итерации
				ПредыдущийНомерОсновнойЗаписи = ВыборкаПоСтрокамДокумента.НомерОсновнойЗаписи;
				ПредыдущийНомерДополнительнойЗаписи = ВыборкаПоСтрокамДокумента.НомерДополнительнойЗаписи;
			КонецЕсли;
		КонецЦикла;//Цикл по записям стажа сотрудника	
	КонецЕсли;						
КонецПроцедуры	

Процедура ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаЗаписейСтажа, Отказ, РасширеннаяПроверка = Истина, Поле = "") Экспорт
	Если РасширеннаяПроверка Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1, записи о стаже, № основной записи %2 %3: %4'"), ВыборкаЗаписейСтажа.СотрудникНаименование, ВыборкаЗаписейСтажа.НомерОсновнойЗаписи, ?(ЗначениеЗаполнено(ВыборкаЗаписейСтажа.НомерДополнительнойЗаписи), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '№ дополнительной записи %1'"), ВыборкаЗаписейСтажа.НомерДополнительнойЗаписи), ""), ТекстОшибки);
	Иначе 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1, записи о стаже: %2'"), ВыборкаЗаписейСтажа.СотрудникНаименование, ТекстОшибки);
	КонецЕсли;	
	
	Если РасширеннаяПроверка Тогда
		НомерОсновнойЗаписи = ВыборкаЗаписейСтажа.НомерОсновнойЗаписи;
		НомерДополнительнойЗаписи = ВыборкаЗаписейСтажа.НомерДополнительнойЗаписи;
	Иначе	
		НомерОсновнойЗаписи = 0;
		НомерДополнительнойЗаписи = 0;
	КонецЕсли;	
		
	ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуДанныхОСтаже(Ошибки, 
			Ссылка, 
			ВыборкаЗаписейСтажа.НомерСтрокиСотрудник,
			ВыборкаЗаписейСтажа.НомерСтрокиСтаж, 
			ТекстСообщения, 
			Поле, 
			Отказ);
	
КонецПроцедуры	

Функция ДокументыСЗВПравилаПроверкиДанныхЗЛ(ПроверятьАдрес) Экспорт 
	ПравилаПроверки = Новый Массив;
	
	ПравилоПроверкиСНИЛС = НовыйПравилоПроверкиДанныхЗЛ();
	ПравилоПроверкиСНИЛС.ОбязательноКЗаполнению = Истина;
	ПравилоПроверкиСНИЛС.ПроверяемыйЭлемент = "СтраховойНомерПФР";
	ПравилоПроверкиСНИЛС.ПутьКДанным = "СтраховойНомерПФР";
	ПравилоПроверкиСНИЛС.ПредставлениеПроверяемогоЭлемента = НСтр("ru = 'СНИЛС'");

	ПравилаПроверки.Добавить(ПравилоПроверкиСНИЛС);
	
	ПравилоПроверкиФамилия = НовыйПравилоПроверкиДанныхЗЛ();
	ПравилоПроверкиФамилия.ОбязательноКЗаполнению = Истина;
	ПравилоПроверкиФамилия.ПроверяемыйЭлемент = "Фамилия";
	ПравилоПроверкиФамилия.ПутьКДанным = "Фамилия";
	ПравилоПроверкиФамилия.ПредставлениеПроверяемогоЭлемента = НСтр("ru = 'Фамилия'");
	
	ПравилаПроверки.Добавить(ПравилоПроверкиФамилия);
	
	ПравилоПроверкиИмя = НовыйПравилоПроверкиДанныхЗЛ();
	ПравилоПроверкиИмя.ОбязательноКЗаполнению = Истина;
	ПравилоПроверкиИмя.ПроверяемыйЭлемент = "Имя";
	ПравилоПроверкиИмя.ПутьКДанным = "Имя";
	ПравилоПроверкиИмя.ПредставлениеПроверяемогоЭлемента = НСтр("ru = 'Имя'");
	
	ПравилаПроверки.Добавить(ПравилоПроверкиИмя);
	
	ПравилоПроверкиОтчество = НовыйПравилоПроверкиДанныхЗЛ();
	ПравилоПроверкиОтчество.ОбязательноКЗаполнению = Ложь;
	ПравилоПроверкиОтчество.ПроверяемыйЭлемент = "Отчество";
	ПравилоПроверкиОтчество.ПутьКДанным = "Отчество";
	ПравилоПроверкиОтчество.ПредставлениеПроверяемогоЭлемента = НСтр("ru = 'Отчество'");
	
	ПравилаПроверки.Добавить(ПравилоПроверкиОтчество);
	
	Если ПроверятьАдрес Тогда
		ПравилоПроверкиАдрес = НовыйПравилоПроверкиДанныхЗЛ();
		ПравилоПроверкиАдрес.ОбязательноКЗаполнению = Ложь;
		ПравилоПроверкиАдрес.ПроверяемыйЭлемент = "Адрес";
		ПравилоПроверкиАдрес.ПутьКДанным = "АдресДляИнформирования";
		ПравилоПроверкиАдрес.ПредставлениеПроверяемогоЭлемента = НСтр("ru = 'Адрес для информирования'");
		
		ПравилаПроверки.Добавить(ПравилоПроверкиАдрес);
	КонецЕсли;	
	
	Возврат ПравилаПроверки;
КонецФункции	

Функция НовыйПравилоПроверкиДанныхЗЛ() Экспорт
	Возврат Новый Структура("ОбязательноКЗаполнению, ПроверяемыйЭлемент, ПутьКДанным, ПредставлениеПроверяемогоЭлемента", Ложь);	
КонецФункции

Процедура ПолучитьПриведенныйСтаж(Лет, Месяцев, Дней) Экспорт	
	ДнейВГоду 		= 12 * 30;
	ВсегоДней 		= Лет*ДнейВГоду + Месяцев*30 + Дней;
	Лет 			= Цел(ВсегоДней / ДнейВГоду);
	ОстатокДней 	= ВсегоДней - Лет * ДнейВГоду;
	Месяцев			= Цел(ОстатокДней / 30);
	Дней			= ОстатокДней % 30;
КонецПроцедуры

Функция ДоляСтавкиУказанаНеверно(ДоляСтавки) Экспорт

	Возврат	ДоляСтавки < 0.1 Или ДоляСтавки > 2

КонецФункции
 
// Вычисляет разность между двумя датами: в годах, месяцах, днях
Процедура ПолучитьСтажЗаПериод(Знач ДатаОкончанияПериода, Знач ДатаНачалаПериода, Лет=0, Месяцев=0, Дней=0) Экспорт 
	
	Если ДатаОкончанияПериода >= ДатаНачалаПериода Тогда
		
		Лет1		=	Год(ДатаОкончанияПериода);
		Месяцев1	=	Месяц(ДатаОкончанияПериода);
		
		Если НачалоДня(ДатаОкончанияПериода) <> НачалоДня(КонецМесяца(ДатаОкончанияПериода)) Тогда
			Дней1		=	День(ДатаОкончанияПериода);
		Иначе
			Дней1		=	30;//В каждом месяце ровно 30 дней
		КонецЕсли;	 
		
		Лет2		=	Год(ДатаНачалаПериода);
		Месяцев2	=	Месяц(ДатаНачалаПериода);
		Если НачалоДня(ДатаНачалаПериода) <> НачалоДня(КонецМесяца(ДатаНачалаПериода)) Тогда
			Дней2		=	День(ДатаНачалаПериода);
		Иначе
			Дней2		=	30;//В каждом месяце ровно 30 дней
		КонецЕсли;	 
		
		Лет		=	Лет1		-	Лет2;
		Месяцев	=	Месяцев1	-	Месяцев2;
		Дней	=	Дней1		-	Дней2 + 1;//1 день на увольнение
	Иначе
		Лет = 0; 
		Месяцев = 0;
		Дней = 0;
	КонецЕсли;	
КонецПроцедуры 

Процедура ПроверитьДанныеШапкиДокумента(Ошибки, Отказ = Ложь)
	
	Если Год < 2017 Тогда
		ТекстОшибки = НСтр("ru = 'Форма СЗВ-СТАЖ предоставляется начиная с 2017 года.'");
		ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуЗаполненияЭлементаДокумента(Ошибки, Ссылка, ТекстОшибки, , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Руководитель) Тогда
		ТекстОшибки = НСтр("ru = 'Не указан руководитель.'");
		ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуЗаполненияЭлементаДокумента(Ошибки, Ссылка, ТекстОшибки, , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДолжностьРуководителя) Тогда
		ТекстОшибки = НСтр("ru = 'Не указана должность руководителя.'");
		ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуЗаполненияЭлементаДокумента(Ошибки, Ссылка, ТекстОшибки, , Отказ);
	КонецЕсли;
	
КонецПроцедуры	

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	Формат2019 = Истина;
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли