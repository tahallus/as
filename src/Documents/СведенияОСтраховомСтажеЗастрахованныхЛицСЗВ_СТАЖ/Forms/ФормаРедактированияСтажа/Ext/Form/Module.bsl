#Область ОписаниеПеременных

&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолейСтаж;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПерсонифицированныйУчет.ХраненияОшибокВДанныхФормыДополнитьФорму(ЭтотОбъект);
	ПерсонифицированныйУчет.ИндикацияОшибокДополнитьФорму(ЭтотОбъект, ОписаниеЭлементовСИндикациейОшибок());
		
	ДокументыСЗВДобавитьКонтрольИсправлений(КонтролируемыеПоля);
	
	РедактируемыйДокументСсылка = Параметры.РедактируемыйДокументСсылка;
	Организация = Параметры.Организация;
	Год = Параметры.Год;
	Сотрудник = Параметры.Сотрудник;
	ДатаВыходаНаПенсию = Параметры.ДатаВыходаНаПенсию;
	
	ИменаДополняемыхТаблиц = Новый Массив;
	ИменаДополняемыхТаблиц.Добавить("ЗаписиОСтаже");
	ДобавитьЗаголовкиКПолямТаблицФормы(ЭтаФорма, ИменаДополняемыхТаблиц, ОписаниеКолонокЗаголовковТаблицФормы());
	
	ДанныеИзВременногоХранилищаВДанныеФормы(Параметры.АдресВоВременномХранилище);
	
	УстановитьЗаголовокФормы();
	
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОтмененаИсправления" Тогда
		ДанныеИзВременногоХранилищаВДанныеФормы(Параметр.АдресХранилища);
		Активизировать();
	ИначеЕсли ИмяСобытия = "ИзменениеДанныхФизическогоЛица" И Не ТолькоПросмотр Тогда 
		ЗаполнитьИзменившиесяДанныеФизическогоЛица(Параметр);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФамилияПриИзменении(Элемент)
	
	ПерсонифицированныйУчетКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Фамилия");
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяПриИзменении(Элемент)
	
	ПерсонифицированныйУчетКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Имя");
	
КонецПроцедуры

&НаКлиенте
Процедура СтраховойНомерПФРПриИзменении(Элемент)
	
	ПерсонифицированныйУчетКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "СтраховойНомерПФР");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоПриИзменении(Элемент)
	
	ПерсонифицированныйУчетКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Отчество");
	
КонецПроцедуры

#Область ОбработчикиСобытийТаблицыФормыЗаписиОСтаже

&НаКлиенте
Процедура ЗаписиОСтажеПриАктивизацииСтроки(Элемент)
	
	СтруктураДанныхПоСотруднику = СтруктураДанныхПоСотруднику(ЭтотОбъект);
	
	ПерсонифицированныйУчетКлиент.ДокументыСЗВЗаписиОСтажеПриАктивацииСтроки(
		Элементы.ЗаписиОСтаже.ТекущиеДанные, 
		КонтролируемыеПоля, 
		СтарыеЗначенияКонтролируемыхПолейСтаж, 
		СтруктураДанныхПоСотруднику);	
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиОСтажеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		УстановитьЗаголовкиВСтрокеТаблицы(
			ЭтотОбъект, 
			Элементы.ЗаписиОСтаже.ТекущиеДанные,
			ОписаниеКолонокЗаголовковТаблицыЗаписиОСтаже(),
			Истина);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиОСтажеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхПоСотруднику = СтруктураДанныхПоСотруднику(ЭтотОбъект);
	
	ПерсонифицированныйУчетКлиент.ДокументыСЗВЗаписиОСтажеПриОкончанииРедактирования(
		Элементы.ЗаписиОСтаже.ТекущиеДанные, 
		НоваяСтрока, 
		КонтролируемыеПоля, 
		СтарыеЗначенияКонтролируемыхПолейСтаж, 
		СтруктураДанныхПоСотруднику);
			
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураДанныхПоСотруднику);	
	
	Если НоваяСтрока Тогда
		ПерсонифицированныйУчетКлиентСервер.ВыполнитьНумерациюЗаписейОСтаже(ЗаписиОСтаже);
	КонецЕсли;
	
	ПерсонифицированныйУчетКлиент.ПриОкончанииРедактированияСтрокиТаблицыСИндикациейОшибок(
		ЭтотОбъект,
		Элемент,
		НоваяСтрока,
		"ЗаписиОСтаже");
		
	УстановитьДоступностьКомандФормы(ЭтаФорма);	
		
КонецПроцедуры
	
&НаКлиенте
Процедура ЗаписиОСтажеПередУдалением(Элемент, Отказ)
	
	ПерсонифицированныйУчетКлиент.ПередУдалениемСтрокиТаблицыСИндикациейОшибок(ЭтотОбъект, Элемент, "ЗаписиОСтаже");
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаписиОСтажеПослеУдаления(Элемент)
	
	ФиксСтаж = Истина;
	УстановитьДоступностьКомандФормы(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	ВыбратьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИсправленияПоСтажу(Команда)
	
	ОтменитьИсправленияПоСтажуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДанныеФизическогоЛица(Команда)
	
	ПараметрыФормы = Новый Структура("Ключ, АктивнаяСтраница, РедактируемоеПоле", Сотрудник, "ЛичныеДанные");
	ОткрытьФорму("Справочник.Сотрудники.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция  СоответствиеДанныхОбъектаДаннымФормы()
	
	ОписаниеСвязиДанных = ПерсонифицированныйУчет.ОписаниеСвязиДанных();
	
	ПерсонифицированныйУчет.ДобавитьОписаниеСвязиДанныхСтрокТаблиц(
		ОписаниеСвязиДанных,
		"ЗаписиОСтаже",
		"*",
		"ЗаписиОСтаже",
		"");
		
	ПерсонифицированныйУчет.ДобавитьОписаниеСвязиРеквизитов(ОписаниеСвязиДанных, "", "Сотрудник");	
	
	Возврат ОписаниеСвязиДанных;
	
КонецФункции	

&НаКлиенте
Процедура ВыбратьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	АдресВоВременномХранилище = ДанныеСотрудникаВоВременноеХранилище();
	
	ПараметрыОповещения = Новый Структура("РедактируемыйДокументСсылка, Сотрудник, АдресВоВременномХранилище");
	ПараметрыОповещения.РедактируемыйДокументСсылка = РедактируемыйДокументСсылка;
	ПараметрыОповещения.Сотрудник = Сотрудник;
	ПараметрыОповещения.АдресВоВременномХранилище = АдресВоВременномХранилище;	
	
	Оповестить("РедактированиеДанныхСтажаПоСотруднику", ПараметрыОповещения, ЭтаФорма);
	
	Модифицированность = Ложь;

	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	
	УстановитьДоступностьКомандФормы(ЭтаФорма);
	
	ИспользоватьЗамещение = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.ПерсонифицированныйУчетРасширенная") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПерсонифицированныйУчетРасширенный");
	    ИспользоватьЗамещение = Модуль.ИспользоватьЗамещениеГосударственныхМуниципальныхДолжностей();
	КонецЕсли;                                                              
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаписиОСтажеЗамещениеГосударственныхМуниципальныхДолжностей", "Видимость", ИспользоватьЗамещение);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаписиОСтажеЗамещениеГосударственныхМуниципальныхДолжностейЗаголовок", "Видимость", ИспользоватьЗамещение);
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандФормы(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ЗаписиОСтажеОтменитьИсправленияПоСтажу", "Доступность", Форма.ФиксСтаж);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Заголовок = НСтр("ru = 'Сведения о стаже'");
	ИнфонадписьЗаголовокКарточки = НСтр("ru = 'Данные застрахованного лица'");
	
КонецПроцедуры	

&НаСервере
Процедура ДанныеИзВременногоХранилищаВДанныеФормы(АдресВоВременномХранилище)
	
	Модифицированность = Ложь;
	
	ДанныеДокументаПоСотруднику = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если ДанныеДокументаПоСотруднику = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось получить редактируемые данные.'");	
	КонецЕсли;
	
	Сотрудник = ДанныеДокументаПоСотруднику.Сотрудник;
	Фамилия = ДанныеДокументаПоСотруднику.Фамилия;
	Имя = ДанныеДокументаПоСотруднику.Имя;
	Отчество = ДанныеДокументаПоСотруднику.Отчество;
	СотрудникУволен = ДанныеДокументаПоСотруднику.СотрудникУволен;
	СтраховойНомерПФР = ДанныеДокументаПоСотруднику.СтраховойНомерПФР;
	ФиксСтаж = ДанныеДокументаПоСотруднику.ФиксСтаж;
	
	ЗаписиОСтаже.Очистить();
	
	Для Каждого СтрокаТаблицы Из ДанныеДокументаПоСотруднику.ЗаписиОСтаже Цикл
		СтрокаТаблицыФормы = ЗаписиОСтаже.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыФормы, СтрокаТаблицы);
	КонецЦикла;	
	
	ПерсонифицированныйУчет.УстановитьЗаголовкиВТаблице(ЭтаФорма, ЗаписиОСтаже, ОписаниеКолонокЗаголовковТаблицы("ЗаписиОСтаже"));
	
	Ошибки = Неопределено;
	ДанныеДокументаПоСотруднику.Свойство("Ошибки", Ошибки);
	
	Если Ошибки <> Неопределено Тогда 
		ПерсонифицированныйУчет.ПреобразоватьПутиКДаннымВСообщенияхПользователю(
			ЭтотОбъект,
			ЭтотОбъект,
			Ошибки,
			СоответствиеДанныхОбъектаДаннымФормы());
			
		ПерсонифицированныйУчет.ПоместитьСообщенияОбОшибкахВДанныеФормы(ЭтотОбъект, Ошибки);	
		ПерсонифицированныйУчет.УстановитьФлагиНаличияОшибокПоСообщениямОбОшибках(ЭтотОбъект, Ошибки, , Истина);	
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере 
Функция ДанныеСотрудникаВоВременноеХранилище()	
	
	ДанныеСотрудника = Новый Структура;
	ДанныеСотрудника.Вставить("Сотрудник", Сотрудник);
	ДанныеСотрудника.Вставить("СтраховойНомерПФР", СтраховойНомерПФР);
	ДанныеСотрудника.Вставить("Фамилия", Фамилия);
	ДанныеСотрудника.Вставить("Имя", Имя);
	ДанныеСотрудника.Вставить("Отчество", Отчество);
	ДанныеСотрудника.Вставить("ФиксСтаж", ФиксСтаж);
	ДанныеСотрудника.Вставить("Модифицированность", Модифицированность);
	ДанныеСотрудника.Вставить("ИсходныйНомерСтроки", ИсходныйНомерСтроки);
	ДанныеСотрудника.Вставить("РедактируемыйДокументСсылка", РедактируемыйДокументСсылка);
	ДанныеСотрудника.Вставить("ИзменилисьДанныеФизическогоЛица", ИзменилисьДанныеФизическогоЛица);
	ДанныеСотрудника.Вставить("СотрудникУволен", СотрудникУволен);
	
	ЗаписиОСтажеСотрудника = Новый Массив;	
	ДанныеСотрудника.Вставить("ЗаписиОСтаже", ЗаписиОСтажеСотрудника);
	
	ПорядокЗаписей = ПорядокЗаписейСтажа();
	
	Для Каждого ЭлементПорядка Из ПорядокЗаписей Цикл
		СтруктураПолейЗаписиОСтаже = СтруктураПолейЗаписиОСтаже();
		СтрокаЗаписиОСтаже = ЗаписиОСтаже[ЭлементПорядка.ИндексСтроки];
		ЗаполнитьЗначенияСвойств(СтруктураПолейЗаписиОСтаже, СтрокаЗаписиОСтаже);
		ЗаписиОСтажеСотрудника.Добавить(СтруктураПолейЗаписиОСтаже);
	КонецЦикла;	
	
	Ошибки = ПерсонифицированныйУчет.СообщенияОбОшибкахИзДанныхФормы(ЭтотОбъект);
	
	ДанныеСотрудника.Вставить("Ошибки", Ошибки);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеСотрудника);
	
КонецФункции	

&НаСервере 
Процедура ОтменитьИсправленияПоСтажуНаСервере()
	
	ФиксСтаж = Ложь;
	ЗаписиОСтаже.Очистить();
	
	Модифицированность = Истина;
	
	ПерсонифицированныйУчетКлиентСервер.ВыполнитьНумерациюЗаписейОСтаже(ЗаписиОСтаже);
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураПолейЗаписиОСтаже()
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерОсновнойЗаписи");
	СтруктураПолей.Вставить("НомерДополнительнойЗаписи");
	СтруктураПолей.Вставить("ДатаНачалаПериода");
	СтруктураПолей.Вставить("ДатаОкончанияПериода");
	СтруктураПолей.Вставить("ОсобыеУсловияТруда");
	СтруктураПолей.Вставить("КодПозицииСписка");
	СтруктураПолей.Вставить("ОснованиеИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ПервыйПараметрИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ВторойПараметрИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ТретийПараметрИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ОснованиеВыслугиЛет");
	СтруктураПолей.Вставить("ПервыйПараметрВыслугиЛет");
	СтруктураПолей.Вставить("ВторойПараметрВыслугиЛет");
	СтруктураПолей.Вставить("ТретийПараметрВыслугиЛет");
	СтруктураПолей.Вставить("ТерриториальныеУсловия");
	СтруктураПолей.Вставить("ПараметрТерриториальныхУсловий");
	СтруктураПолей.Вставить("ЗамещениеГосударственныхМуниципальныхДолжностей");
	СтруктураПолей.Вставить("ИдентификаторИсходнойСтроки");

	Возврат СтруктураПолей;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураДанныхПоСотруднику(Форма)
	
	СтруктураДанныхПоСотруднику = Новый Структура;
	СтруктураДанныхПоСотруднику.Вставить("ФиксСтаж", Форма.ФиксСтаж);

	ЗаполнитьЗначенияСвойств(СтруктураДанныхПоСотруднику, Форма);
	
	Возврат СтруктураДанныхПоСотруднику;
	
КонецФункции	

&НаКлиенте
Процедура ЗаполнитьИзменившиесяДанныеФизическогоЛица(ДанныеФизическогоЛица)	
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеФизическогоЛица);
	ИзменилисьДанныеФизическогоЛица = Истина;
	
КонецПроцедуры	

#Область МеханизмОтображенияОшибок

&НаКлиенте
Процедура ПоказатьОшибки(ИмяПоляИндикацииОшибки, ПоказыватьТекстОшибки) Экспорт
	
	ПоказыватьТекстОшибки = Истина;
	
КонецПроцедуры	

&НаСервере
Функция ОписаниеЭлементовСИндикациейОшибок() Экспорт
	
	КоллекцияОписанийЭлементов = Новый Массив;
	
	ОписаниеЭлемента = ПерсонифицированныйУчет.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "ИнфонадписьЗаголовокКарточки";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ОтображатьНепривязанныеОшибки = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Сотрудник";
	ПерсонифицированныйУчет.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
			
	ОписаниеЭлемента = ПерсонифицированныйУчет.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "Фамилия";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Фамилия";
	ПерсонифицированныйУчет.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ПерсонифицированныйУчет.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "Имя";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Имя";
	ПерсонифицированныйУчет.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
		
	ОписаниеЭлемента = ПерсонифицированныйУчет.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "Отчество";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Отчество";
	ПерсонифицированныйУчет.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ПерсонифицированныйУчет.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "СтраховойНомерПФР";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "СтраховойНомерПФР";
	ПерсонифицированныйУчет.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ПерсонифицированныйУчет.ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы();	
	ОписаниеЭлемента.ИмяЭлемента = "ЗаписиОСтаже";
	ОписаниеЭлемента.ИмяЭлементаТаблица = "ЗаписиОСтаже";	
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "ЗаписиОСтаже";	
	ПерсонифицированныйУчет.ДобавитьОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	Возврат КоллекцияОписанийЭлементов;
	
КонецФункции	

// Добавление полей заголовков.

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицФормы()
	
	ОписаниеКолонокЗаголовковТаблиц = Новый Соответствие;
	ОписаниеКолонокЗаголовковТаблиц.Вставить("ЗаписиОСтаже", ОписаниеКолонокЗаголовковТаблицы("ЗаписиОСтаже")); 
	
	Возврат ОписаниеКолонокЗаголовковТаблиц;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицыЗаписиОСтаже()
	
	ОписаниеЗаголовковКолонок = Новый Массив;
	
	ОписаниеЗаголовка = СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеТерриториальныеУсловия";
	ОписаниеЗаголовка.Заголовок = НСтр("ru = 'Код'");
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеПараметрТерриториальныхУсловий";
	ОписаниеЗаголовка.Заголовок = НСтр("ru = 'Ставка'");
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеОснованиеИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = НСтр("ru = 'Основание'");
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеТретийПараметрИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = НСтр("ru = 'Параметр'");
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеОснованиеВыслугиЛет";
	ОписаниеЗаголовка.Заголовок = НСтр("ru = 'Основание'");
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеПервыйПараметрВыслугиЛет";
	ОписаниеЗаголовка.Заголовок = НСтр("ru = 'Месяцы'");
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеВторойПараметрВыслугиЛет";
	ОписаниеЗаголовка.Заголовок = НСтр("ru = 'Дни'");
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеТретийПараметрВыслугиЛет";
	ОписаниеЗаголовка.Заголовок = НСтр("ru = 'Ставка'");
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеПервыйПараметрИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = НСтр("ru = 'Месяцы'");
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеВторойПараметрИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = НСтр("ru = 'Дни'");
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеЗамещениеГосударственныхМуниципальныхДолжностей";
	ОписаниеЗаголовка.Заголовок = НСтр("ru = 'Код'");
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	Возврат ОписаниеЗаголовковКолонок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицы(ИмяТаблицы)
	
	Если ИмяТаблицы = "ЗаписиОСтаже" Тогда
		ОписаниеКолонок = ОписаниеКолонокЗаголовковТаблицыЗаписиОСтаже();
	КонецЕсли;	
		
	Возврат ОписаниеКолонок;
	
КонецФункции	

&НаКлиенте
Процедура Подключаемый_ЭлементИндикацииОшибкиНажатие(Элемент, СтандартнаяОбработка)
	
	ПерсонифицированныйУчетКлиент.ЭлементИндикацииОшибкиНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_ЭлементИндикацииПриАктивизацииЯчейки(Элемент)
	
	ПерсонифицированныйУчетКлиент.ЭлементИндикацииПриАктивизацииЯчейки(ЭтотОбъект, Элемент);
	
КонецПроцедуры	

&НаСервере
Функция ПорядокЗаписейСтажа()
	
	ВидыСтажаГПХ = Новый Массив;
	
	ВидыСтажаГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДОГОВОР);
	ВидыСтажаГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛАВТ);
	ВидыСтажаГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛДОГ);
	
	ПорядокЗаписейСтажа = Новый ТаблицаЗначений;
	ПорядокЗаписейСтажа.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число"));
	ПорядокЗаписейСтажа.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	
	ОбычныеЗаписиСтажа = Новый Массив;
	
	Для Каждого СтрокаСтажа Из ЗаписиОСтаже Цикл
		Если ВидыСтажаГПХ.Найти(СтрокаСтажа.ТретийПараметрИсчисляемогоСтажа) <> Неопределено Тогда
			ЭлементПорядка = ПорядокЗаписейСтажа.Добавить();
			ЭлементПорядка.ДатаНачала = СтрокаСтажа.ДатаНачалаПериода;
			ЭлементПорядка.ИндексСтроки = ЗаписиОСтаже.Индекс(СтрокаСтажа);
		Иначе
			ОбычныеЗаписиСтажа.Добавить(СтрокаСтажа);	
		КонецЕсли;	
	КонецЦикла;	
	
	ПорядокЗаписейСтажа.Сортировать("ДатаНачала");
	
	Для Каждого СтрокаСтажа Из ОбычныеЗаписиСтажа Цикл
		ЭлементПорядка = ПорядокЗаписейСтажа.Добавить();
		ЭлементПорядка.ИндексСтроки = ЗаписиОСтаже.Индекс(СтрокаСтажа);	
	КонецЦикла;
	
	Возврат ПорядокЗаписейСтажа;
	
КонецФункции	


#КонецОбласти


#КонецОбласти


#Область МеханизмОтображенияЗаголовковКолонокТаблицы

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураОписанияКолонокЗаголовков()
	СтруктураОписания = Новый Структура;
	
	СтруктураОписания.Вставить("ПолеТаблицы");
	СтруктураОписания.Вставить("Заголовок");
	СтруктураОписания.Вставить("Ширина", 0);
	
	Возврат СтруктураОписания;
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Функция УстановитьЗаголовкиВСтрокеТаблицы(Форма, СтрокаТаблицы, ОписаниеКолонокЗаголовков, ЗаполнятьЗаголовкиПоУмолчанию = Истина)
	Если ЗаполнятьЗаголовкиПоУмолчанию Тогда
		ЗаполнитьТекстыЗаголовковКолонокПоУмолчанию(Форма, ОписаниеКолонокЗаголовков);
	КонецЕсли;	

	Для Каждого ОписаниеЗаголовка Из ОписаниеКолонокЗаголовков Цикл
		СтрокаТаблицы[ОписаниеЗаголовка.ПолеТаблицы + "Заголовок"] = ОписаниеЗаголовка.Заголовок + ":";			
	КонецЦикла;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьТекстыЗаголовковКолонокПоУмолчанию(Форма, ОписаниеКолонокЗаголовков)
	Если ОписаниеКолонокЗаголовков <> Неопределено Тогда
		Для Каждого ОписаниеКолонки Из ОписаниеКолонокЗаголовков Цикл
			Если Не ЗначениеЗаполнено(ОписаниеКолонки.Заголовок) Тогда
				ПолеТаблицы = Форма.Элементы.Найти(ОписаниеКолонки.ПолеТаблицы);
				
				Если ПолеТаблицы <> Неопределено Тогда
					ОписаниеКолонки.Заголовок = ПолеТаблицы.Заголовок;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьЗаголовкиКПолямТаблицФормы(Форма, ИменаДополняемыхТаблиц, ОписаниеКолонокЗаголовковТаблицФормы)
	
	ДобавляемыеРеквизиты = Новый Массив;
		
	Для Каждого ИмяТаблицы Из ИменаДополняемыхТаблиц Цикл
		ОписаниеКолонокЗаголовков = ОписаниеКолонокЗаголовковТаблицФормы[ИмяТаблицы];
		
		Таблица = Форма.Элементы.Найти(ИмяТаблицы);
		
		Если Таблица = Неопределено
			Или ОписаниеКолонокЗаголовков = Неопределено Тогда
			
			Продолжить;
		КонецЕсли;	
		
		ЗаполнитьТекстыЗаголовковКолонокПоУмолчанию(Форма, ОписаниеКолонокЗаголовков);
		
		ПутьКДаннымТаблицы = Таблица.ПутьКДанным;
		Для Каждого ОписаниеЗаголовка Из ОписаниеКолонокЗаголовков Цикл
			КлассификаторСтроки = Новый КвалификаторыСтроки(СтрДлина(ОписаниеЗаголовка.Заголовок) + 1);
			
			ТипЗаголовка = Новый ОписаниеТипов("Строка", , КлассификаторСтроки);
			
			РеквизитЗаголовок = Новый РеквизитФормы(ОписаниеЗаголовка.ПолеТаблицы + "Заголовок", ТипЗаголовка, ПутьКДаннымТаблицы);
			
			ДобавляемыеРеквизиты.Добавить(РеквизитЗаголовок);	
		КонецЦикла;
		
	КонецЦикла;	
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	УсловноеОформлениеВидимостиПолей = Новый Соответствие;
	
	Для Каждого ЭлементОформления Из Форма.УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Видимость")).Использование Тогда
			Для Каждого ОформляемоеПоле Из ЭлементОформления.Поля.Элементы Цикл
				Если ОформляемоеПоле.Использование Тогда
					ЭлементыОформленияПоля = УсловноеОформлениеВидимостиПолей.Получить(ОформляемоеПоле.Поле);
					
					Если ЭлементыОформленияПоля = Неопределено Тогда
						ЭлементыОформленияПоля = Новый Массив;
						УсловноеОформлениеВидимостиПолей.Вставить(ОформляемоеПоле.Поле, ЭлементыОформленияПоля);
					КонецЕсли;
					
					ЭлементыОформленияПоля.Добавить(ЭлементОформления);
				КонецЕсли;
			КонецЦикла;		
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого ИмяТаблицы Из ИменаДополняемыхТаблиц Цикл
		ОписаниеКолонокЗаголовков = ОписаниеКолонокЗаголовковТаблицФормы[ИмяТаблицы];
		
		Таблица = Форма.Элементы.Найти(ИмяТаблицы);
		
		Если Таблица = Неопределено
			Или ОписаниеКолонокЗаголовков = Неопределено Тогда
			
			Продолжить;
		КонецЕсли;	
		
		ПутьКДаннымТаблицы = Таблица.ПутьКДанным;
		Для Каждого ОписаниеЗаголовка Из ОписаниеКолонокЗаголовков Цикл
			ПолеТаблицы = Форма.Элементы.Найти(ОписаниеЗаголовка.ПолеТаблицы);
			
			ПолеТаблицы.ОтображатьВШапке = Ложь;
			
			Если ПолеТаблицы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ГруппаЗаголовка = Форма.Элементы.Вставить(ПолеТаблицы.Имя + "ЗаголовокГруппа", Тип("ГруппаФормы"), ПолеТаблицы.Родитель, ПолеТаблицы);
			ГруппаЗаголовка.Вид = ВидГруппыФормы.ГруппаКолонок;
			ГруппаЗаголовка.ОтображатьВШапке = Ложь;
			ГруппаЗаголовка.Группировка = ГруппировкаКолонок.Горизонтальная;
			
			ПолеЗаголовка = Форма.Элементы.Добавить(ПолеТаблицы.Имя + "Заголовок", Тип("ПолеФормы"), ГруппаЗаголовка);
			ПолеЗаголовка.ПутьКДанным = ПутьКДаннымТаблицы + "." + ПолеТаблицы.Имя + "Заголовок";
			ПолеЗаголовка.Вид = ВидПоляФормы.ПолеНадписи;
			ПолеЗаголовка.ТолькоПросмотр = Истина;
			ПолеЗаголовка.ОтображатьВШапке = Ложь;
			ПолеЗаголовка.Шрифт = Новый Шрифт(ПолеТаблицы.Шрифт,,,,Истина);
			ПолеЗаголовка.РастягиватьПоГоризонтали = Ложь;
			
			Если ОписаниеЗаголовка.Ширина = 0 Тогда
				ПолеЗаголовка.Ширина = СтрДлина(ОписаниеЗаголовка.Заголовок) + 1;
			Иначе
				ПолеЗаголовка.Ширина = ОписаниеЗаголовка.Ширина;
			КонецЕсли;	
			
			Форма.Элементы.Переместить(ПолеТаблицы, ГруппаЗаголовка);
			
			ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ПолеТаблицы.Имя);
			
			ЭлементыОформленияПоля = УсловноеОформлениеВидимостиПолей.Получить(ПолеКомпоновки);
			
			Если ЭлементыОформленияПоля <> Неопределено Тогда
				Для Каждого ЭлементОформления Из ЭлементыОформленияПоля Цикл
					ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
					ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПолеЗаголовка.Имя);
				КонецЦикла;	
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ДокументыСЗВДобавитьКонтрольИсправлений(КонтролируемыеПоляРеквизитФормы, РазделыКонтролируемыхПолей = Неопределено) 
	
	КонтролируемыеПоляВзносыНачисленные = Новый Массив;
	КонтролируемыеПоляВзносыНачисленные.Добавить("НачисленоСтраховая");
	КонтролируемыеПоляВзносыНачисленные.Добавить("НачисленоНакопительная");
	КонтролируемыеПоляВзносыНачисленные.Добавить("ДоНачисленоСтраховая");
	КонтролируемыеПоляВзносыНачисленные.Добавить("ДоНачисленоНакопительная");
	
	КонтролируемыеПоляВзносыУплаченные = Новый Массив;
	КонтролируемыеПоляВзносыУплаченные.Добавить("УплаченоСтраховая");
	КонтролируемыеПоляВзносыУплаченные.Добавить("УплаченоНакопительная");
	КонтролируемыеПоляВзносыУплаченные.Добавить("ДоУплаченоСтраховая");
	КонтролируемыеПоляВзносыУплаченные.Добавить("ДоУплаченоНакопительная");
	
	КонтролируемыеПоляСтаж = Новый Массив;
	КонтролируемыеПоляСтаж.Добавить("НомерОсновнойЗаписи");
	КонтролируемыеПоляСтаж.Добавить("НомерДополнительнойЗаписи");
	КонтролируемыеПоляСтаж.Добавить("ДатаНачалаПериода");
	КонтролируемыеПоляСтаж.Добавить("ДатаОкончанияПериода");
	КонтролируемыеПоляСтаж.Добавить("ОсобыеУсловияТруда");
	КонтролируемыеПоляСтаж.Добавить("КодПозицииСписка");
	КонтролируемыеПоляСтаж.Добавить("ОснованиеИсчисляемогоСтажа");
	КонтролируемыеПоляСтаж.Добавить("ПервыйПараметрИсчисляемогоСтажа");
	КонтролируемыеПоляСтаж.Добавить("ВторойПараметрИсчисляемогоСтажа");
	КонтролируемыеПоляСтаж.Добавить("ТретийПараметрИсчисляемогоСтажа");
	КонтролируемыеПоляСтаж.Добавить("ОснованиеВыслугиЛет");
	КонтролируемыеПоляСтаж.Добавить("ПервыйПараметрВыслугиЛет");
	КонтролируемыеПоляСтаж.Добавить("ВторойПараметрВыслугиЛет");
	КонтролируемыеПоляСтаж.Добавить("ТретийПараметрВыслугиЛет");
	КонтролируемыеПоляСтаж.Добавить("ТерриториальныеУсловия");
	КонтролируемыеПоляСтаж.Добавить("ДатаОкончанияПериода");
	КонтролируемыеПоляСтаж.Добавить("ПараметрТерриториальныхУсловий");
	КонтролируемыеПоляСтаж.Добавить("ЗамещениеГосударственныхМуниципальныхДолжностей");
	
	КонтролируемыеПоляЗаработок = Новый Массив;
	КонтролируемыеПоляЗаработок.Добавить("ОблагаетсяВзносами");
	КонтролируемыеПоляЗаработок.Добавить("Заработок");
	КонтролируемыеПоляЗаработок.Добавить("Месяц");
	КонтролируемыеПоляЗаработок.Добавить("ОблагаетсяВзносамиДоПредельнойВеличины");
	КонтролируемыеПоляЗаработок.Добавить("ОблагаетсяВзносамиСвышеПредельнойВеличины");
	КонтролируемыеПоляЗаработок.Добавить("ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах");
	КонтролируемыеПоляЗаработок.Добавить("ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах");
	КонтролируемыеПоляЗаработок.Добавить("КатегорияЗастрахованныхЛиц");
	КонтролируемыеПоляЗаработок.Добавить("ПоДоговорамГПХДоПредельнойВеличины");
	
	КонтролируемыеПоляЗаработокВредный = Новый Массив;
	
	КонтролируемыеПоляЗаработокВредный.Добавить("КлассУсловийТруда");
	КонтролируемыеПоляЗаработокВредный.Добавить("Месяц");
	КонтролируемыеПоляЗаработокВредный.Добавить("ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах");
	КонтролируемыеПоляЗаработокВредный.Добавить("ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах");

	КонтролируемыПоля = Новый Структура;
	
	Если РазделыКонтролируемыхПолей = Неопределено
		Или РазделыКонтролируемыхПолей.Найти("НачисленныеВзносы") <> Неопределено Тогда 
		
		ОписаниеКонтролируемыхПолей = Новый Структура("ИмяПоляФиксДанных, КонтролируемыеПоля", "ФиксНачисленныеВзносы", Новый ФиксированныйМассив(КонтролируемыеПоляВзносыНачисленные));
		
		КонтролируемыПоля.Вставить("НачисленныеВзносы", Новый ФиксированнаяСтруктура(ОписаниеКонтролируемыхПолей));
	КонецЕсли;	
	
	Если РазделыКонтролируемыхПолей = Неопределено
		Или РазделыКонтролируемыхПолей.Найти("УплаченныеВзносы") <> Неопределено Тогда
		
		ОписаниеКонтролируемыхПолей = Новый Структура("ИмяПоляФиксДанных, КонтролируемыеПоля", "ФиксУплаченныеВзносы", Новый ФиксированныйМассив(КонтролируемыеПоляВзносыУплаченные));
		
		КонтролируемыПоля.Вставить("УплаченныеВзносы",  Новый ФиксированнаяСтруктура(ОписаниеКонтролируемыхПолей));
	КонецЕсли;	
	
	Если РазделыКонтролируемыхПолей = Неопределено
		Или РазделыКонтролируемыхПолей.Найти("Стаж") <> Неопределено Тогда
		
		ОписаниеКонтролируемыхПолей = Новый Структура("ИмяПоляФиксДанных, КонтролируемыеПоля", "ФиксСтаж", Новый ФиксированныйМассив(КонтролируемыеПоляСтаж));
		
		КонтролируемыПоля.Вставить("Стаж",  Новый ФиксированнаяСтруктура(ОписаниеКонтролируемыхПолей));	
	КонецЕсли;	
	
	Если РазделыКонтролируемыхПолей = Неопределено
		Или РазделыКонтролируемыхПолей.Найти("Заработок") <> Неопределено Тогда
		
		ОписаниеКонтролируемыхПолей = Новый Структура("ИмяПоляФиксДанных, КонтролируемыеПоля", "ФиксЗаработок", Новый ФиксированныйМассив(КонтролируемыеПоляЗаработок));
		
		КонтролируемыПоля.Вставить("Заработок", Новый ФиксированнаяСтруктура(ОписаниеКонтролируемыхПолей));
	КонецЕсли;	
	
	Если РазделыКонтролируемыхПолей = Неопределено
		Или РазделыКонтролируемыхПолей.Найти("ЗаработокВредный") <> Неопределено Тогда
		
		ОписаниеКонтролируемыхПолей = Новый Структура("ИмяПоляФиксДанных, КонтролируемыеПоля", "ФиксЗаработок", Новый ФиксированныйМассив(КонтролируемыеПоляЗаработокВредный));
		
		КонтролируемыПоля.Вставить("ФиксЗаработокВредный", Новый ФиксированнаяСтруктура(ОписаниеКонтролируемыхПолей));
	КонецЕсли;	
			
	КонтролируемыеПоляРеквизитФормы = Новый ФиксированнаяСтруктура(КонтролируемыПоля);

КонецПроцедуры	

#КонецОбласти


#Область Инициализация

СтарыеЗначенияКонтролируемыхПолейСтаж = Новый Структура;

#КонецОбласти
