#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(КассаККМ)
	|	И ЗначениеРазрешено(Контрагент, ПустаяСсылка КАК Истина)
	|	И ЗначениеРазрешено(СтруктурнаяЕдиница)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПлатежныйКалендарь(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ИспользоватьЗаказыВРозничнойТорговле", ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Заказ КАК СчетНаОплату,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей) КАК Статья,
	|	ТаблицаДокумента.КассаККМ КАК БанковскийСчетКасса,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыУтвержденияПлатежей.Утвержден) КАК СтатусУтвержденияПлатежа,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные) КАК ТипДенежныхСредств,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ.Договор.РасчетыВУсловныхЕдиницах
	|			ТОГДА ТаблицаДокумента.Заказ.Договор.ВалютаРасчетов
	|		ИНАЧЕ ТаблицаДокумента.ВалютаДокумента
	|	КОНЕЦ КАК Валюта,
	|	-СУММА(ВЫБОР
	|			КОГДА ТаблицаДокумента.Заказ.Договор.РасчетыВУсловныхЕдиницах
	|				ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.СуммаВал * ВЫБОР
	|							КОГДА КурсыВалютРасчетов.Курс <> 0
	|									И КурсыВалютКассы.Кратность <> 0
	|								ТОГДА КурсыВалютКассы.Курс * КурсыВалютРасчетов.Кратность / (ЕСТЬNULL(КурсыВалютРасчетов.Курс, 1) * ЕСТЬNULL(КурсыВалютКассы.Кратность, 1))
	|							ИНАЧЕ 1
	|						КОНЕЦ КАК ЧИСЛО(15, 2))
	|			ИНАЧЕ ТаблицаДокумента.СуммаВал
	|		КОНЕЦ) КАК СуммаОплаты
	|ИЗ
	|	ВременнаяТаблицаРасшифровкаПлатежа КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютСчета
	|		ПО ТаблицаДокумента.Заказ.ВалютаДокумента = КурсыВалютСчета.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютКассы
	|		ПО ТаблицаДокумента.ВалютаДокумента = КурсыВалютКассы.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютРасчетов
	|		ПО ТаблицаДокумента.Заказ.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|ГДЕ
	|	ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|	И ТаблицаДокумента.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	И ТаблицаДокумента.Заказ <> НЕОПРЕДЕЛЕНО
	|	И ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Заказ) = ТИП(Документ.ЗаказПокупателя)
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И &ИспользоватьЗаказыВРозничнойТорговле
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Заказ,
	|	ТаблицаДокумента.КассаККМ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ.Договор.РасчетыВУсловныхЕдиницах
	|			ТОГДА ТаблицаДокумента.Заказ.Договор.ВалютаРасчетов
	|		ИНАЧЕ ТаблицаДокумента.ВалютаДокумента
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПлатежныйКалендарь", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаОплатаСчетовИЗаказов()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ИспользоватьЗаказыВРозничнойТорговле", ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле"));
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	Запрос.УстановитьПараметр("СуммаПредоплаты", ДокументСсылкаЧекККМВозврат.Предоплата.Итог("СуммаРасчетов"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.ЗаказПокупателя КАК СчетНаОплату,
	|	0 КАК СуммаАванса,
	|	СУММА(-ВЫБОР
	|			КОГДА ТаблицаДокумента.ВалютаДокумента = ТаблицаДокумента.ЗаказПокупателя.ВалютаДокумента
	|				ТОГДА ТаблицаДокумента.СуммаВал + ТаблицаДокумента.СуммаСкидкиОплатыБонусом
	|			ИНАЧЕ ВЫРАЗИТЬ((ТаблицаДокумента.СуммаВал + ТаблицаДокумента.СуммаСкидкиОплатыБонусом) * КурсыВалютКассы.Курс * КурсыВалютСчета.Кратность / (КурсыВалютСчета.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) КАК СуммаОплаты
	|ПОМЕСТИТЬ ВременнаяТаблицаОплатыСчетов
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютСчета
	|		ПО ТаблицаДокумента.ЗаказПокупателя.ВалютаДокумента = КурсыВалютСчета.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютКассы
	|		ПО ТаблицаДокумента.ВалютаДокумента = КурсыВалютКассы.Валюта
	|ГДЕ
	|	ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|	И ТаблицаДокумента.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	И ТаблицаДокумента.ЗаказПокупателя <> НЕОПРЕДЕЛЕНО
	|	И ТИПЗНАЧЕНИЯ(ТаблицаДокумента.ЗаказПокупателя) = ТИП(Документ.ЗаказПокупателя)
	|	И &ИспользоватьЗаказыВРозничнойТорговле
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.ЗаказПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаОплатыСчетов.Период КАК Период,
	|	ВременнаяТаблицаОплатыСчетов.Организация КАК Организация,
	|	ВременнаяТаблицаОплатыСчетов.СчетНаОплату КАК СчетНаОплату,
	|	ВременнаяТаблицаОплатыСчетов.СуммаАванса КАК СуммаАванса,
	|	ВременнаяТаблицаОплатыСчетов.СуммаОплаты + &СуммаПредоплаты КАК СуммаОплаты
	|ИЗ
	|	ВременнаяТаблицаОплатыСчетов КАК ВременнаяТаблицаОплатыСчетов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаОплатыСчетов.Период,
	|	ВременнаяТаблицаОплатыСчетов.Организация,
	|	ВременнаяТаблицаОплатыСчетов.СчетНаОплату,
	|	ВременнаяТаблицаОплатыСчетов.СуммаАванса,
	|	ВременнаяТаблицаОплатыСчетов.СуммаОплаты + &СуммаПредоплаты
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВременнаяТаблицаОплатыСчетов.СуммаОплаты + &СуммаПредоплаты) <> 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаОплатаСчетовИЗаказов") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса.Выгрузить(), СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОплатаСчетовИЗаказов);
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаСчетовИЗаказов", РезультатЗапроса.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры // СформироватьТаблицаОплатаСчетовИЗаказов()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗаказыПокупателей(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ИспользоватьЗаказыВРозничнойТорговле", ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле"));
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗаказыПокупателей.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗаказыПокупателей.Дата КАК Период,
	|	ТаблицаЗаказыПокупателей.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаЗаказыПокупателей.УчетПотребностиПоСкладам
	|				И ТаблицаЗаказыПокупателей.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ТаблицаЗаказыПокупателей.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ТаблицаЗаказыПокупателей.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика КАК Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя КАК ЗаказПокупателя,
	|	-СУММА(ТаблицаЗаказыПокупателей.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗаказыПокупателей
	|ГДЕ
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя <> НЕОПРЕДЕЛЕНО
	|	И ТаблицаЗаказыПокупателей.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	И &ИспользоватьЗаказыВРозничнойТорговле
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказыПокупателей.Дата,
	|	ТаблицаЗаказыПокупателей.Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаЗаказыПокупателей.УчетПотребностиПоСкладам
	|				И ТаблицаЗаказыПокупателей.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ТаблицаЗаказыПокупателей.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаЗаказыПокупателей.Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя";
	
	РезультатЗапроса = Запрос.Выполнить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказыПокупателей", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗаказыПокупателей()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасы(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства)
	
	// Заполнение происходит аналогично тому, как это реализовано в документе "ПриходнаяНакладная" для вида операции "ВозвратОтПокупателя".
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаЗапасы.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК КоррОрганизация,
	|	ЕСТЬNULL(ТаблицаЗапасы.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК СтруктурнаяЕдиница,
	|	ЕСТЬNULL(ТаблицаЗапасы.КоррСтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|	ТаблицаЗапасы.КоррСчетУчетаЗапасов КАК КоррСчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ТаблицаЗапасы.КоррНоменклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ТаблицаЗапасы.КоррХарактеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.КоррПартия КАК КоррПартия,
	|	ТаблицаЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаЗапасы.Ответственный КАК Ответственный,
	|	ИСТИНА КАК Возврат,
	|	ТаблицаЗапасы.Документ КАК ДокументПродажи,
	|	НЕОПРЕДЕЛЕНО КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПродажи,
	|	ТаблицаЗапасы.Подразделение КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО КАК ИсточникОбеспечения,
	|	НЕОПРЕДЕЛЕНО КАК КоррЗаказПокупателя,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость,
	|	ВЫРАЗИТЬ(&ОприходованиеЗапасов КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	СУММА(-ТаблицаЗапасы.Количество) КАК Количество,
	|	0 КАК Сумма,
	|	0 КАК Себестоимость
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ДвиженияПоЗапасамУдалять
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Дата,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Документ,
	|	ТаблицаЗапасы.Подразделение,
	|	ЕСТЬNULL(ТаблицаЗапасы.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)),
	|	ЕСТЬNULL(ТаблицаЗапасы.КоррСтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)),
	|	ТаблицаЗапасы.СчетУчетаЗапасов,
	|	ТаблицаЗапасы.КоррСчетУчетаЗапасов,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.НоменклатураНабора,
	|	ТаблицаЗапасы.ТипНоменклатуры,
	|	ТаблицаЗапасы.НаправлениеДеятельности,
	|	ТаблицаЗапасы.КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.ХарактеристикаНабора,
	|	ТаблицаЗапасы.КоррХарактеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.КоррПартия,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.СтавкаНДС,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.ТоварыНаКомиссии,
	|	ТаблицаЗапасы.Ответственный";
	
	Запрос.УстановитьПараметр("ОприходованиеЗапасов", НСтр("ru = 'Оприходование запасов'"));
	Запрос.УстановитьПараметр("СписаниеЗапасов", НСтр("ru = 'Списание запасов'"));
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	Запрос.УстановитьПараметр("ДвиженияПоЗапасамУдалять", СтруктураДополнительныеСвойства.ДляПроведения.ДвиженияПоЗапасамУдалять);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗапасы()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыНаСкладах(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекККМЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ЧекККМЗапасы.Дата КАК Период,
	|	ЧекККМЗапасы.Организация КАК Организация,
	|	ЧекККМЗапасы.Номенклатура КАК Номенклатура,
	|	ЧекККМЗапасы.Характеристика КАК Характеристика,
	|	ЧекККМЗапасы.Партия КАК Партия,
	|	ЧекККМЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЧекККМЗапасы.Ячейка КАК Ячейка,
	|	СУММА(ЧекККМЗапасы.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ЧекККМЗапасы
	|ГДЕ
	|	(ЧекККМЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ИЛИ ЧекККМЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМЗапасы.НомерСтроки,
	|	ЧекККМЗапасы.Дата,
	|	ЧекККМЗапасы.Организация,
	|	ЧекККМЗапасы.Номенклатура,
	|	ЧекККМЗапасы.Характеристика,
	|	ЧекККМЗапасы.Партия,
	|	ЧекККМЗапасы.СтруктурнаяЕдиница,
	|	ЧекККМЗапасы.Ячейка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМВозврат);
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыНаСкладах", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗапасыНаСкладах()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДенежныеСредстваВКассахККМ(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК НомерСтроки,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.КассаККМ КАК КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета КАК СчетУчета,
	|	ДанныеДокумента.ВалютаДокумента КАК Валюта,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКонтрагента,
	|	СУММА(ДанныеДокумента.Сумма) КАК Сумма,
	|	СУММА(ДанныеДокумента.СуммаВал) КАК СуммаВал,
	|	-СУММА(ДанныеДокумента.Сумма) КАК СуммаДляОстатка,
	|	-СУММА(ДанныеДокумента.СуммаВал) КАК СуммаВалДляОстатка,
	|	ВЫРАЗИТЬ(&ПоступлениеДенежныхСредств КАК СТРОКА(100)) КАК СодержаниеПроводки
	|ПОМЕСТИТЬ ВременнаяТаблицаДенежныеСредстваВКассахККМ
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ДанныеДокумента
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ДанныеДокумента.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента,
	|	НЕОПРЕДЕЛЕНО,
	|	СУММА(ДанныеДокумента.Сумма),
	|	СУММА(ДанныеДокумента.СуммаВал),
	|	-СУММА(ДанныеДокумента.Сумма),
	|	-СУММА(ДанныеДокумента.СуммаВал),
	|	ВЫРАЗИТЬ(&ПоступлениеДенежныхСредств КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаРасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И &ОперацияСДенежнымиСредствами
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ДанныеДокумента.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента,
	|	НЕОПРЕДЕЛЕНО,
	|	СУММА(ДанныеДокумента.Сумма),
	|	СУММА(ДанныеДокумента.СуммаВал),
	|	СУММА(ДанныеДокумента.Сумма),
	|	СУММА(ДанныеДокумента.СуммаВал),
	|	ВЫРАЗИТЬ(&ОплатаПлатежнымиКартами КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ДанныеДокумента
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ДанныеДокумента.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента,
	|	НЕОПРЕДЕЛЕНО,
	|	СУММА(ДанныеДокумента.Сумма),
	|	СУММА(ДанныеДокумента.СуммаВал),
	|	СУММА(ДанныеДокумента.Сумма),
	|	СУММА(ДанныеДокумента.СуммаВал),
	|	ВЫРАЗИТЬ(&ЗачетПредоплаты КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ДанныеДокумента
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	КассаККМ,
	|	Валюта,
	|	СчетУчета";
	
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМВозврат);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	Запрос.УстановитьПараметр("ПоступлениеДенежныхСредств", НСтр("ru = 'Поступление денежных средств в кассу ККМ'"));
	Запрос.УстановитьПараметр("ОплатаПлатежнымиКартами", НСтр("ru = 'Оплата платежными картами'"));
	Запрос.УстановитьПараметр("ЗачетПредоплаты", НСтр("ru = 'Зачет предоплаты'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	
	Запрос.Выполнить();
	
	// Установка исключительной блокировки контролируемых остатков денежных средств.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаДенежныеСредстваВКассахККМ.Организация КАК Организация,
	|	ВременнаяТаблицаДенежныеСредстваВКассахККМ.КассаККМ КАК КассаККМ
	|ИЗ
	|	ВременнаяТаблицаДенежныеСредстваВКассахККМ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ДенежныеСредстваВКассахККМ");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	НомерЗапроса = 0;
	Запрос.Текст =  КурсовыеРазницыУНФ.ПолучитьТекстЗапросаКурсовыеРазницыДенежныеСредстваВКассахККМ(Запрос.МенеджерВременныхТаблиц, НомерЗапроса);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДенежныеСредстваВКассахККМ", МассивРезультатов[НомерЗапроса].Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДенежныеСредстваВКассахККМ()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходы(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаДоходыИРасходы.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДоходыИРасходы.Дата КАК Период,
	|	ТаблицаДоходыИРасходы.Организация КАК Организация,
	|	ТаблицаДоходыИРасходы.Подразделение КАК СтруктурнаяЕдиница,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаДоходыИРасходы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаДоходыИРасходы.СчетУчетаВыручкиОтПродаж КАК СчетУчета,
	|	НЕОПРЕДЕЛЕНО КАК Аналитика,
	|	ВЫРАЗИТЬ(&ОтражениеДоходов КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	-СУММА(ТаблицаДоходыИРасходы.Сумма) КАК СуммаДоходов,
	|	0 КАК СуммаРасходов,
	|	-СУММА(ТаблицаДоходыИРасходы.Сумма) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДоходыИРасходы
	|ГДЕ
	|	НЕ ТаблицаДоходыИРасходы.ТоварыНаКомиссии
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ ТаблицаДоходыИРасходы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДоходыИРасходы.Дата,
	|	ТаблицаДоходыИРасходы.НомерСтроки,
	|	ТаблицаДоходыИРасходы.Организация,
	|	ТаблицаДоходыИРасходы.Подразделение,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельности,
	|	ТаблицаДоходыИРасходы.ЗаказПокупателя,
	|	ТаблицаДоходыИРасходы.СчетУчетаВыручкиОтПродаж
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Организация,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее),
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА &ПоложительнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ &ОтрицательнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ТаблицаДокумента.Валюта,
	|	&КурсоваяРазница,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА 0
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ
	|ИЗ
	|	ВременнаяТаблицаКурсовыхРазницДенежныеСредстваВКассахККМ КАК ТаблицаДокумента
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ПоложительнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ОтрицательнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеРасходы);
	Запрос.УстановитьПараметр("ОтражениеДоходов", НСтр("ru='Отражение доходов'"));
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходы", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходы()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходыНераспределенные(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМВозврат);
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	0 КАК НомерСтроки,
	|	ТаблицаДокумента.Дата КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей) КАК Статья,
	|	-ТаблицаДокумента.Сумма КАК СуммаДоходов,
	|	0 КАК СуммаРасходов
	|ИЗ
	|	ВременнаяТаблицаРасшифровкаПлатежа КАК ТаблицаДокумента
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И &ОперацияСДенежнымиСредствами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	0,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей),
	|	-ТаблицаДокумента.Сумма,
	|	0
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыНераспределенные", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыНераспределенные()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходыКассовыйМетод(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМВозврат);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаДС", ДокументСсылкаЧекККМВозврат.ВалютаДокумента);
	
	Запрос.УстановитьПараметр("ПлатежныйКалендарь", ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь"));
	Запрос.УстановитьПараметр("УчетВалютныхОпераций", ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций"));
	
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Дата КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей) КАК Статья,
	|	-ТаблицаДокумента.Сумма КАК СуммаДоходов,
	|	0 КАК СуммаРасходов
	|ИЗ
	|	ВременнаяТаблицаРасшифровкаПлатежа КАК ТаблицаДокумента
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И &ОперацияСДенежнымиСредствами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Организация,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей),
	|	ТаблицаДокумента.Сумма,
	|	0
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ОперацияСДенежнымиСредствами";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыКассовыйМетод", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыКассовыйМетод()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажи(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродажи.Дата КАК Период,
	|	ТаблицаПродажи.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаПродажи.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ТаблицаПродажи.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ТаблицаПродажи.Номенклатура КАК Номенклатура,
	|	ТаблицаПродажи.Характеристика КАК Характеристика,
	|	ТаблицаПродажи.НоменклатураНабора КАК НоменклатураНабора,
	|	ТаблицаПродажи.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ТаблицаПродажи.Партия КАК Партия,
	|	ТаблицаПродажи.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаПродажи.Документ КАК Документ,
	|	ТаблицаПродажи.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаПродажи.Подразделение КАК Подразделение,
	|	ТаблицаПродажи.Ответственный КАК Ответственный,
	|	-СУММА(ТаблицаПродажи.Количество) КАК Количество,
	|	-СУММА(ТаблицаПродажи.СуммаНДСЗакупкиПродажи) КАК СуммаНДС,
	|	-СУММА(ТаблицаПродажи.Сумма) КАК Сумма,
	|	СУММА(0) КАК Себестоимость,
	|	-СУММА(ТаблицаПродажи.Сумма + ТаблицаПродажи.СуммаСкидкиНаценки + ТаблицаПродажи.СуммаАвтоматическойСкидки + ТаблицаПродажи.СуммаСкидкиОплатыБонусом) КАК СуммаБезСкидки
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаПродажи
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ ТаблицаПродажи.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродажи.Дата,
	|	ТаблицаПродажи.Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаПродажи.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ТаблицаПродажи.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаПродажи.Номенклатура,
	|	ТаблицаПродажи.Характеристика,
	|	ТаблицаПродажи.НоменклатураНабора,
	|	ТаблицаПродажи.ХарактеристикаНабора,
	|	ТаблицаПродажи.Партия,
	|	ТаблицаПродажи.ЗаказПокупателя,
	|	ТаблицаПродажи.Документ,
	|	ТаблицаПродажи.СтавкаНДС,
	|	ТаблицаПродажи.Подразделение,
	|	ТаблицаПродажи.Ответственный";
	
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажи", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажи()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаУправленческий(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаУправленческий.НомерСтроки КАК НомерСтроки,
	|	ТаблицаУправленческий.Дата КАК Период,
	|	ТаблицаУправленческий.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	&СчетУчетаАвансовПокупателя КАК СчетДт,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
	|	0 КАК СуммаВалДт,
	|	ТаблицаУправленческий.КассаККМСчетУчета КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалКт,
	|	ТаблицаУправленческий.Сумма КАК Сумма,
	|	&ВозникновениеАвансаПокупателя КАК Содержание
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаУправленческий
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ОперацияСДенежнымиСредствами
	|	И ТаблицаУправленческий.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаУправленческий.СчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.КассаККМ.СчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМ.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМ.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.Сумма,
	|	&ВозникновениеАвансаПокупателя
	|ИЗ
	|	ВременнаяТаблицаРасчетыСПокупателями КАК ТаблицаУправленческий
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И &ОперацияСДенежнымиСредствами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаУправленческий.КассаККМСчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	&СчетУчетаАвансовПокупателя,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	ТаблицаУправленческий.Сумма,
	|	&ЗачетАванса
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ТаблицаУправленческий
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И ТаблицаУправленческий.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаУправленческий.КассаККМСчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.Ссылка.Контрагент.СчетУчетаАвансовПокупателя,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.Ссылка.Контрагент.СчетУчетаАвансовПокупателя.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.Ссылка.Контрагент.СчетУчетаАвансовПокупателя.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.Сумма,
	|	&ЗачетАванса
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаУправленческий
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Управленческий.РасчетыСПоставщиками)
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчетаВыручкиОтПродаж
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА ТаблицаУправленческий.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.КассаККМСчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.Сумма,
	|	&ОтражениеВыручки
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаУправленческий
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ОперацияСДенежнымиСредствами
	|	И НЕ ТаблицаУправленческий.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	6,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаУправленческий.КассаККМСчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.ЭквайринговыйТерминалСчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ЭквайринговыйТерминалСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ЭквайринговыйТерминалСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.Сумма,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.БанковскаяКарта)
	|			ТОГДА &ОтражениеОплатыПлатежнымиКартами
	|		КОГДА ТаблицаУправленческий.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.Кредит)
	|			ТОГДА &ОтражениеОплатыКредитом
	|		ИНАЧЕ """"
	|	КОНЕЦ
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ТаблицаУправленческий
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И ТаблицаУправленческий.ВидОплаты В (ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.БанковскаяКарта), ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.Кредит))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	7,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СчетУчета
	|		ИНАЧЕ &ОтрицательнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|				И ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА &ПоложительнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы < 0
	|				И ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаУправленческий.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	&КурсоваяРазница
	|ИЗ
	|	ВременнаяТаблицаКурсовыхРазницДенежныеСредстваВКассахККМ КАК ТаблицаУправленческий
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ОтражениеВыручки", НСтр("ru = 'Выручка от продажи'"));
	Запрос.УстановитьПараметр("ОтражениеОплатыПлатежнымиКартами", НСтр("ru = 'Оплата платежными картами'"));
	Запрос.УстановитьПараметр("ВозникновениеАвансаПокупателя", НСтр("ru = 'Возникновение аванса покупателя'"));
	Запрос.УстановитьПараметр("ЗачетАванса", НСтр("ru='Зачет аванса покупателя'"));
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Запрос.УстановитьПараметр("ПоложительнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ОтрицательнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеРасходы);
	Запрос.УстановитьПараметр("ОтражениеОплатыКредитом", НСтр("ru = 'Оплата кредитом'"));
	Запрос.УстановитьПараметр("СчетУчетаРасчетовСБанком", ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторами);
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	
	Для Каждого КлючИЗначение Из СтруктураДополнительныеСвойства.ДляСертификатов Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл  
		НоваяПроводка = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПроводка, Выборка);
	КонецЦикла;
	
КонецПроцедуры // СформироватьТаблицаУправленческий()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
Процедура ИнициализироватьДанныеДокумента(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	Если НЕ СтруктураДополнительныеСвойства.Свойство("УчетнаяПолитика") Тогда // ЕГАИС
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОстаткиАлкогольнойПродукцииЕГАИС", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекККМВозврат.Ссылка КАК Ссылка,
	|	ЧекККМВозврат.Дата КАК Дата,
	|	ЧекККМВозврат.Дата КАК Период,
	|	ЧекККМВозврат.Организация КАК Организация,
	|	ЧекККМВозврат.Контрагент КАК Контрагент,
	|	ЧекККМВозврат.Договор КАК Договор,
	|	ЧекККМВозврат.Заказ КАК Заказ,
	|	ВЫБОР
	|		КОГДА ЧекККМВозврат.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ЧекККМВозврат.ЧекККМ
	|		ИНАЧЕ ЧекККМВозврат.Заказ
	|	КОНЕЦ КАК Документ,
	|	ЧекККМВозврат.КассаККМ КАК КассаККМ,
	|	ЧекККМВозврат.КассаККМ.СчетУчета КАК КассаККМСчетУчета,
	|	ЧекККМВозврат.ВалютаДокумента КАК ВалютаДокумента,
	|	ЧекККМВозврат.ВалютаДокумента КАК ВалютаДенежныхСредств,
	|	ЧекККМВозврат.Договор.ВалютаРасчетов КАК ДоговорВалютаРасчетов,
	|	ЧекККМВозврат.СуммаДокумента КАК Сумма,
	|	ЧекККМВозврат.СуммаДокумента КАК СуммаВал,
	|	ЗНАЧЕНИЕ(Справочник.ХозяйственныеОперации.ОтПокупателя) КАК ХозяйственнаяОперация,
	|	ЧекККМВозврат.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ЧекККМВозврат.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ЧекККМВозврат.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ЧекККМВозврат.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	ЧекККМВозврат.СпособЗачетаПредоплаты КАК СпособЗачетаПредоплаты,
	|	ЧекККМВозврат.Курс КАК Курс,
	|	ЧекККМВозврат.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВременнаяТаблицаШапка
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	ЧекККМВозврат.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК НомерСтроки,
	|	ЧекККМВозврат.Ссылка КАК Ссылка,
	|	ЧекККМВозврат.Дата КАК Дата,
	|	&Организация КАК Организация,
	|	ЧекККМВозврат.Контрагент КАК Контрагент,
	|	ЧекККМВозврат.Договор КАК Договор,
	|	ЧекККМВозврат.Заказ КАК Заказ,
	|	ЧекККМВозврат.ЧекККМ КАК Документ,
	|	ЧекККМВозврат.КассаККМ КАК КассаККМ,
	|	ЧекККМВозврат.КассаККМ.СчетУчета КАК КассаККМСчетУчета,
	|	ЧекККМВозврат.ВалютаДокумента КАК ВалютаДокумента,
	|	ЧекККМВозврат.ВалютаДокумента КАК ВалютаДенежныхСредств,
	|	ЧекККМВозврат.ВалютаДокумента КАК ВалютаРасчетов,
	|	ЧекККМВозврат.СуммаДокумента КАК СуммаПлатежа,
	|	ЧекККМВозврат.СуммаДокумента КАК СуммаРасчетов,
	|	ЧекККМВозврат.СуммаДокумента КАК СуммаУчета,
	|	ЧекККМВозврат.СуммаДокумента КАК Сумма,
	|	ЧекККМВозврат.СуммаДокумента КАК СуммаВал,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную) КАК СпособЗачета,
	|	ЧекККМВозврат.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ЧекККМВозврат.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ЧекККМВозврат.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ЧекККМВозврат.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	ИСТИНА КАК ПризнакАванса,
	|	1 КАК Курс,
	|	1 КАК Кратность,
	|	&СтавкаБезНДС КАК СтавкаНДС,
	|	0 КАК СуммаНДС,
	|	ЗНАЧЕНИЕ(Документ.СчетНаОплату.ПустаяСсылка) КАК СчетНаОплату,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.Покупателю) КАК ВидОперации
	|ПОМЕСТИТЬ ВременнаяТаблицаРасшифровкаПлатежа
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	ЧекККМВозврат.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЧекККМЗапасы.Ссылка.ЧекККМ КАК Документ,
	|	ЧекККМЗапасы.Ссылка.Дата КАК Дата,
	|	ЧекККМЗапасы.Ссылка.Дата КАК Период,
	|	ЧекККМЗапасы.Заказ КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ЧекККМЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И ЧекККМЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(ЧекККМЗапасы.Заказ КАК Документ.ЗаказПокупателя).УчетПотребностиПоСкладам
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчетПотребностиПоСкладам,
	|	ЧекККМЗапасы.Ссылка.КассаККМ КАК КассаККМ,
	|	ЧекККМЗапасы.Ссылка.КассаККМ.Владелец КАК КассаККМВладелец,
	|	ЧекККМЗапасы.Ссылка.КассаККМ.СчетУчета КАК КассаККМСчетУчета,
	|	ЧекККМЗапасы.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	&Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ЧекККМЗапасы.Ссылка.ПоложениеСклада В (ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке), ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ПустаяСсылка))
	|			ТОГДА ЧекККМЗапасы.Ссылка.СтруктурнаяЕдиница
	|		ИНАЧЕ ЧекККМЗапасы.СтруктурнаяЕдиница
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	ЧекККМЗапасы.Ссылка.Подразделение КАК Подразделение,
	|	ЧекККМЗапасы.Ссылка.Ответственный КАК Ответственный,
	|	ЧекККМЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЧекККМЗапасы.Номенклатура.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЧекККМЗапасы.Номенклатура.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж КАК СчетУчетаВыручкиОтПродаж,
	|	ЧекККМЗапасы.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж КАК СчетУчетаСебестоимость,
	|	ВЫБОР
	|		КОГДА ЧекККМЗапасы.Ссылка.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
	|			ТОГДА ЧекККМЗапасы.Ссылка.Ячейка
	|		ИНАЧЕ ЧекККМЗапасы.Ячейка
	|	КОНЕЦ КАК Ячейка,
	|	ЧекККМЗапасы.Номенклатура.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|				И ЧекККМЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТоварыНаКомиссии,
	|	ЧекККМЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЧекККМЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ЧекККМЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЧекККМЗапасы.ХарактеристикаНабора
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК ХарактеристикаНабора,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ЧекККМЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЧекККМЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЧекККМЗапасы.Количество
	|		ИНАЧЕ ЧекККМЗапасы.Количество * ЧекККМЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ЧекККМЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЧекККМЗапасы.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ЧекККМЗапасы.СуммаНДС * КурсыДокВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыДокВалюты.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ЧекККМЗапасы.СуммаНДС * КурсыДокВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыДокВалюты.Кратность) КАК ЧИСЛО(15, 2)) КАК СуммаНДСЗакупкиПродажи,
	|	ВЫРАЗИТЬ(ЧекККМЗапасы.Всего * КурсыДокВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыДокВалюты.Кратность) КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ(ЧекККМЗапасы.СуммаНДС КАК ЧИСЛО(15, 2)) КАК СуммаНДСВал,
	|	ВЫРАЗИТЬ(ЧекККМЗапасы.Всего КАК ЧИСЛО(15, 2)) КАК СуммаВал,
	|	ВЫРАЗИТЬ(ЧекККМЗапасы.Всего КАК ЧИСЛО(15, 2)) КАК ВсегоВалютаДокумента,
	|	ЧекККМЗапасы.КлючСвязи КАК КлючСвязи,
	|	НЕОПРЕДЕЛЕНО КАК КоррСтруктурнаяЕдиница,
	|	НЕОПРЕДЕЛЕНО КАК КоррНоменклатура,
	|	НЕОПРЕДЕЛЕНО КАК КоррСчетУчетаЗапасов,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЧекККМЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК КоррХарактеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ЧекККМЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК КоррПартия,
	|	ЧекККМЗапасы.Ссылка.КассоваяСмена КАК КассоваяСмена,
	|	ЧекККМЗапасы.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	ЧекККМЗапасы.Ссылка.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЧекККМЗапасы.Номенклатура.ПроизвольныйНоминал
	|				ТОГДА ЧекККМЗапасы.Сумма / ВЫБОР
	|						КОГДА ЧекККМЗапасы.Номенклатура.ИспользоватьСерииНоменклатуры
	|							ТОГДА ЧекККМЗапасы.Количество
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			ИНАЧЕ ЧекККМЗапасы.Номенклатура.Номинал / ВЫБОР
	|					КОГДА ЧекККМЗапасы.Номенклатура.ИспользоватьСерииНоменклатуры
	|						ТОГДА 1
	|					ИНАЧЕ 1 / ЧекККМЗапасы.Количество
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК НоминалСертификата,
	|	ЧекККМЗапасы.Номенклатура.ЧастичноеПогашение КАК ЧастичноеПогашениеСертификата,
	|	ЧекККМЗапасы.Номенклатура.ПроизвольныйНоминал КАК ПроизвольныйНоминал,
	|	ЧекККМЗапасы.Номенклатура.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры,
	|	ЧекККМЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ЧекККМЗапасы.Цена КАК Цена,
	|	ЧекККМЗапасы.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
	|	ЧекККМЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЧекККМЗапасы.Ссылка.Контрагент КАК Контрагент,
	|	ЧекККМЗапасы.Ссылка.Контрагент.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|	ЧекККМЗапасы.Ссылка.Контрагент.СчетУчетаАвансовПоставщику КАК СчетУчетаАвансовПоставщику,
	|	ЧекККМЗапасы.Ссылка.Договор КАК Договор,
	|	ЧекККМЗапасы.Ссылка.ВалютаДокумента КАК ВалютаРасчетов,
	|	ЕСТЬNULL(ПолитикиУчетаСерий.ПолитикаУчетаСерий, ЧекККМЗапасы.Номенклатура.ПолитикаУчетаСерий) КАК ПолитикаУчетаСерий
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	Документ.ЧекККМВозврат.Запасы КАК ЧекККМЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						Константы.ВалютаУчета
	|					ИЗ
	|						Константы КАК Константы)) КАК КурсыУпрВалюты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыДокВалюты
	|		ПО ЧекККМЗапасы.Ссылка.ВалютаДокумента = КурсыДокВалюты.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО ЧекККМЗапасы.Номенклатура = ПолитикиУчетаСерий.Владелец
	|			И ЧекККМЗапасы.СтруктурнаяЕдиница = ПолитикиУчетаСерий.СтруктурнаяЕдиница
	|			И (&Организация = ПолитикиУчетаСерий.Организация)
	|ГДЕ
	|	ЧекККМЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.Ссылка.Дата КАК Дата,
	|	&Ссылка КАК Документ,
	|	&Организация КАК Организация,
	|	ТабличнаяЧасть.Ссылка.КассаККМ КАК КассаККМ,
	|	ТабличнаяЧасть.Ссылка.КассаККМ.СчетУчета КАК КассаККМСчетУчета,
	|	ТабличнаяЧасть.ЭквайринговыйТерминал.СчетУчета КАК ЭквайринговыйТерминалСчетУчета,
	|	ТабличнаяЧасть.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * КурсыВалютКассы.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.СуммаКомиссии * КурсыВалютКассы.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2)) КАК СуммаКомиссии,
	|	ТабличнаяЧасть.Сумма КАК СуммаВал,
	|	ТабличнаяЧасть.СуммаКомиссии КАК СуммаКомиссииВал,
	|	ТабличнаяЧасть.ВидОплаты КАК ВидОплаты,
	|	ТабличнаяЧасть.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
	|	ТабличнаяЧасть.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
	|	ТабличнаяЧасть.ЭквайринговыйТерминал.Эквайрер КАК Эквайрер,
	|	ТабличнаяЧасть.ЭквайринговыйТерминал.Договор КАК Договор,
	|	ТабличнаяЧасть.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	ТабличнаяЧасть.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	ТабличнаяЧасть.НомерСертификата КАК НомерСертификата,
	|	ТабличнаяЧасть.ПодарочныйСертификат.ЧастичноеПогашение КАК ЧастичноеПогашение,
	|	ТабличнаяЧасть.ПодарочныйСертификат.Номинал КАК Номинал,
	|	ТабличнаяЧасть.Сумма КАК СуммаСертификата,
	|	ТабличнаяЧасть.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТабличнаяЧасть.Ссылка.Заказ КАК Заказ,
	|	ТабличнаяЧасть.Ссылка.Контрагент КАК Контрагент,
	|	ТабличнаяЧасть.Ссылка.ЧекККМ.КассоваяСмена = ТабличнаяЧасть.Ссылка.КассоваяСмена КАК ЭтоОтмена
	|ПОМЕСТИТЬ ВременнаяТаблицаОплатаПлатежнымиКартами
	|ИЗ
	|	Документ.ЧекККМВозврат.БезналичнаяОплата КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						Константы.ВалютаУчета
	|					ИЗ
	|						Константы КАК Константы)) КАК КурсыВалютУчетаСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютКассы
	|		ПО ТабличнаяЧасть.Ссылка.ВалютаДокумента = КурсыВалютКассы.Валюта
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМВозвратПредоплата.НомерСтроки КАК НомерСтроки,
	|	ЧекККМВозвратПредоплата.Ссылка.Дата КАК Дата,
	|	ЧекККМВозвратПредоплата.Ссылка.Дата КАК Период,
	|	ЧекККМВозвратПредоплата.Документ КАК Документ,
	|	ЧекККМВозвратПредоплата.Заказ КАК ЗаказПокупателя,
	|	ЧекККМВозвратПредоплата.Курс КАК Курс,
	|	ЧекККМВозвратПредоплата.Кратность КАК Кратность,
	|	ЧекККМВозвратПредоплата.Ссылка.КассаККМ КАК КассаККМ,
	|	ЧекККМВозвратПредоплата.Ссылка.КассаККМ.СчетУчета КАК КассаККМСчетУчета,
	|	&Организация КАК Организация,
	|	ЧекККМВозвратПредоплата.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЧекККМВозвратПредоплата.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ЧекККМВозвратПредоплата.СуммаРасчетов КАК Сумма,
	|	ЧекККМВозвратПредоплата.СуммаРасчетов КАК СуммаВал,
	|	ЧекККМВозвратПредоплата.СуммаРасчетов КАК СуммаРасчетов,
	|	ЧекККМВозвратПредоплата.СуммаПлатежа КАК СуммаПлатежа,
	|	ЧекККМВозвратПредоплата.Ссылка КАК Ссылка,
	|	ЧекККМВозвратПредоплата.Ссылка.Контрагент КАК Контрагент,
	|	ЧекККМВозвратПредоплата.Ссылка.Договор КАК Договор,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс) КАК ТипРасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг) КАК ТипРасчетовКуда,
	|	ЛОЖЬ КАК ОплатаСертификатом,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК НомерСертификата,
	|	ЧекККМВозвратПредоплата.Ссылка.Контрагент.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|	ЧекККМВозвратПредоплата.Ссылка.Контрагент.СчетУчетаАвансовПоставщику КАК СчетУчетаАвансовПоставщику,
	|	ЧекККМВозвратПредоплата.Ссылка.ВалютаДокумента КАК ВалютаРасчетов
	|ПОМЕСТИТЬ ВременнаяТаблицаПредоплата
	|ИЗ
	|	Документ.ЧекККМВозврат.Предоплата КАК ЧекККМВозвратПредоплата
	|ГДЕ
	|	ЧекККМВозвратПредоплата.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМВозвратСкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	ЧекККМВозвратСкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЧекККМВозвратСкидкиНаценки.Ссылка.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|				ТОГДА ЧекККМВозвратСкидкиНаценки.Сумма * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ЧекККМВозвратСкидкиНаценки.Сумма * КурсыУпрВалюты.Кратность / КурсыУпрВалюты.Курс
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ЧекККМВозвратСкидкиНаценки.Ссылка.Дата КАК Период,
	|	ЧекККМВозвратСкидкиНаценки.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВременнаяТаблицаАвтоСкидкиНаценки
	|ИЗ
	|	Документ.ЧекККМВозврат.СкидкиНаценки КАК ЧекККМВозвратСкидкиНаценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						КонстантаВалютаУчета.Значение
	|					ИЗ
	|						Константа.ВалютаУчета КАК КонстантаВалютаУчета)) КАК КурсыУпрВалюты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						КонстантаНациональнаяВалюта.Значение
	|					ИЗ
	|						Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта)) КАК КурсыРегВалюты
	|		ПО (ИСТИНА),
	|	Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта
	|ГДЕ
	|	ЧекККМВозвратСкидкиНаценки.Ссылка = &Ссылка
	|	И ЧекККМВозвратСкидкиНаценки.Сумма <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
	|	МАКСИМУМ(ЭквайринговыеТерминалыВидыПлатежныхКарт.ПроцентКомиссии) КАК ПроцентКомиссии,
	|	МАКСИМУМ(ЭквайринговыеТерминалыВидыПлатежныхКарт.ПроцентКомиссииПриОтмене) КАК ПроцентКомиссииПриОтмене,
	|	МАКСИМУМ(ЭквайринговыеТерминалыВидыПлатежныхКарт.ПроцентКомиссииПриВозврате) КАК ПроцентКомиссииПриВозврате
	|ПОМЕСТИТЬ ВременнаяТаблицаПроцентыКомиссии
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы.ВидыПлатежныхКарт КАК ЭквайринговыеТерминалыВидыПлатежныхКарт
	|ГДЕ
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.Ссылка = &ЭквайринговыйТерминал
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.ВидПлатежнойКарты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМСерииНоменклатуры.КлючСвязи КАК КлючСвязи,
	|	ЧекККМСерииНоменклатуры.Серия КАК Серия,
	|	ВЫБОР
	|		КОГДА ЧекККМСерииНоменклатуры.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЧекККМСерииНоменклатуры.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаЗапасы.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(Справочник.ПолитикаУчетаСерий.ПустаяСсылка)
	|			ТОГДА &ОстаткиСерийНоменклатуры
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВременнаяТаблицаЗапасы.ПолитикаУчетаСерий.ТипПолитики = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК ОстаткиСерийНоменклатуры
	|ПОМЕСТИТЬ ВременнаяТаблицаСерииНоменклатуры
	|ИЗ
	|	Документ.ЧекККМВозврат.СерииНоменклатуры КАК ЧекККМСерииНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ПО (ВременнаяТаблицаЗапасы.КлючСвязи = ЧекККМСерииНоменклатуры.КлючСвязи)
	|ГДЕ
	|	ЧекККМСерииНоменклатуры.Ссылка = &Ссылка
	|	И &ИспользоватьСерииНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаАкцизныеМарки.Ссылка.Дата КАК Период,
	|	ТаблицаАкцизныеМарки.Ссылка КАК Ссылка,
	|	&ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ТаблицаАкцизныеМарки.Справка2 КАК Справка2,
	|	Справки2ЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаАкцизныеМарки.АкцизнаяМарка) КАК Количество,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаАкцизныеМарки.АкцизнаяМарка) КАК СвободныйОстаток
	|ПОМЕСТИТЬ ВременнаяТаблицаАкцизныеМарки
	|ИЗ
	|	Документ.ЧекККМВозврат.АкцизныеМарки КАК ТаблицаАкцизныеМарки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Справки2ЕГАИС КАК Справки2ЕГАИС
	|		ПО (Справки2ЕГАИС.Ссылка = ТаблицаАкцизныеМарки.Справка2)
	|ГДЕ
	|	ТаблицаАкцизныеМарки.Ссылка = &Ссылка
	|	И ТаблицаАкцизныеМарки.Справка2 <> ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаАкцизныеМарки.Ссылка,
	|	ТаблицаАкцизныеМарки.Справка2,
	|	Справки2ЕГАИС.АлкогольнаяПродукция,
	|	ТаблицаАкцизныеМарки.Ссылка.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМВозвратБонусныеБаллыКНачислению.НомерСтроки КАК НомерСтроки,
	|	ЧекККМВозвратБонусныеБаллыКНачислению.Ссылка.Дата КАК Период,
	|	ЧекККМВозвратБонусныеБаллыКНачислению.Ссылка.ДисконтнаяКарта КАК БонуснаяКарта,
	|	ЧекККМВозвратЗапасы.Номенклатура КАК Номенклатура,
	|	ЧекККМВозвратЗапасы.Характеристика КАК Характеристика,
	|	-ЧекККМВозвратБонусныеБаллыКНачислению.КоличествоБонусныхБаллов КАК Количество,
	|	ЧекККМВозвратБонусныеБаллыКНачислению.ДатаНачисления КАК ДатаНачисления,
	|	ЧекККМВозвратБонусныеБаллыКНачислению.ДатаСписания КАК ДатаСгорания,
	|	ЧекККМВозвратБонусныеБаллыКНачислению.Ссылка КАК Ссылка,
	|	ЧекККМВозвратБонусныеБаллыКНачислению.СкидкаНаценка КАК АналитикаНачисленияБонусов
	|ПОМЕСТИТЬ ВременнаяТаблицаНачисленияБонусов
	|ИЗ
	|	Документ.ЧекККМВозврат.БонусныеБаллыКНачислению КАК ЧекККМВозвратБонусныеБаллыКНачислению
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат.Запасы КАК ЧекККМВозвратЗапасы
	|		ПО ЧекККМВозвратБонусныеБаллыКНачислению.Ссылка = ЧекККМВозвратЗапасы.Ссылка
	|			И ЧекККМВозвратБонусныеБаллыКНачислению.КлючСвязи = ЧекККМВозвратЗапасы.КлючСвязи
	|ГДЕ
	|	ЧекККМВозвратБонусныеБаллыКНачислению.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМВозвратБезналичнаяОплата.НомерСтроки КАК НомерСтроки,
	|	НАЧАЛОПЕРИОДА(ЧекККМВозвратБезналичнаяОплата.Ссылка.Дата, ДЕНЬ) КАК Период,
	|	ЧекККМВозвратБезналичнаяОплата.БонуснаяКарта КАК БонуснаяКарта,
	|	ЧекККМВозвратБезналичнаяОплата.СуммаБонусов КАК Количество,
	|	0 КАК КСписанию,
	|	ЧекККМВозвратБезналичнаяОплата.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВременнаяТаблицаСписанияБонусов
	|ИЗ
	|	Документ.ЧекККМВозврат.БезналичнаяОплата КАК ЧекККМВозвратБезналичнаяОплата
	|ГДЕ
	|	ЧекККМВозвратБезналичнаяОплата.Ссылка = &Ссылка
	|	И ЧекККМВозвратБезналичнаяОплата.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.Бонусы)";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМВозврат);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылкаЧекККМВозврат, "Организация,СтруктурнаяЕдиница,ЭквайринговыйТерминал");
	
	Запрос.УстановитьПараметр("ЭквайринговыйТерминал", СтруктураРеквизитов.ЭквайринговыйТерминал);
	Запрос.УстановитьПараметр("ИспользоватьСерииНоменклатуры", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерииНоменклатуры);
	Запрос.УстановитьПараметр("ОстаткиСерийНоменклатуры", СтруктураДополнительныеСвойства.УчетнаяПолитика.ОстаткиСерийНоменклатуры);
	
	ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(СтруктураРеквизитов.Организация, СтруктураРеквизитов.СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("СтавкаБезНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
	
	Запрос.ВыполнитьПакет();
	
	// Формирование проводок документа.
	ПроведениеДокументовУНФ.СформироватьТаблицуПроводок(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаЗапасы(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыНаСкладах(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДенежныеСредстваВКассахККМ(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходы(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходыНераспределенные(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходыКассовыйМетод(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПродажи(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства);
	
	
	// ДисконтныеКарты
	СформироватьТаблицаПродажиПоДисконтнойКарте(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства);
	
	// Скидки
	СформироватьТаблицаПродажиПоПредоставленнымСкидкам(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства);
	
	// Эквайринг
	СформироватьТаблицаОплатаПлатежнымиКартами(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства);
	
	// Серии номенклатуры
	СформироватьТаблицаСерииНоменклатуры(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства);
	
	// Подарочные сертификаты
	СформироватьТаблицаПодарочныеСертификаты(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОплатаПодарочнымиСертификатами(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства);
	СформироватьТаблицаРасчетыСПокупателями(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства);
	
	// Бонусы
	СформироватьТаблицаБонусныеБаллы(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства);
	СформироватьТаблицаНачисленияБонусныхБаллов(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства);
	
	// Заказ покупателя в розничной торговле
	СформироватьТаблицаЗаказыПокупателей(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПлатежныйКалендарь(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства);
	
	Если СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами
		И СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит
		И Не СтруктураДополнительныеСвойства.ДляПроведения.Архивный Тогда
		РасчетыПроведениеДокументов.СформироватьТаблицаОплатаСчетовИЗаказовДенежныеДокументы(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства);
	КонецЕсли;
	СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаОстаткиАлкогольнойПродукцииЕГАИС(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаУправленческий(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Функция возвращает шаблон пакетного запроса.
//
Функция СформироватьШаблонПакетногоЗапроса()
	
	ТекстЗапроса =
	Символы.ПС +
	";
	|
	|////////////////////////////////////////////////////////////////////////////////"
	+ Символы.ПС;
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьШаблонПакетногоЗапроса()

// Функция возвращает текст запроса по остаткам регистра Запасы.
//
Функция СформироватьТекстЗапросаОстаткиЗапасы()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДвиженияЗапасыИзменение.НомерСтроки КАК НомерСтроки,
	|	ДвиженияЗапасыИзменение.Организация КАК ОрганизацияПредставление,
	|	ДвиженияЗапасыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
	|	ДвиженияЗапасыИзменение.СчетУчета КАК СчетУчетаПредставление,
	|	ДвиженияЗапасыИзменение.Номенклатура КАК НоменклатураПредставление,
	|	ДвиженияЗапасыИзменение.Характеристика КАК ХарактеристикаПредставление,
	|	ДвиженияЗапасыИзменение.Партия КАК ПартияПредставление,
	|	ДвиженияЗапасыИзменение.ЗаказПокупателя КАК ЗаказПокупателяПредставление,
	|	ЗапасыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
	|	ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
	|	ЕСТЬNULL(ДвиженияЗапасыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(РезервыТоваровОрганизацийОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасы,
	|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(РезервыТоваровОрганизацийОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасы,
	|	ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) КАК СуммаОстатокЗапасы
	|ИЗ
	|	ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ДвиженияЗапасыИзменение.Организация КАК Организация,
	|						ДвиженияЗапасыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|						ДвиженияЗапасыИзменение.СчетУчета КАК СчетУчета,
	|						ДвиженияЗапасыИзменение.Номенклатура КАК Номенклатура,
	|						ДвиженияЗапасыИзменение.Характеристика КАК Характеристика,
	|						ДвиженияЗапасыИзменение.Партия КАК Партия,
	|						ДвиженияЗапасыИзменение.ЗаказПокупателя КАК ЗаказПокупателя
	|					ИЗ
	|						ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение)) КАК ЗапасыОстатки
	|		ПО ДвиженияЗапасыИзменение.Организация = ЗапасыОстатки.Организация
	|			И ДвиженияЗапасыИзменение.СтруктурнаяЕдиница = ЗапасыОстатки.СтруктурнаяЕдиница
	|			И ДвиженияЗапасыИзменение.СчетУчета = ЗапасыОстатки.СчетУчета
	|			И ДвиженияЗапасыИзменение.Номенклатура = ЗапасыОстатки.Номенклатура
	|			И ДвиженияЗапасыИзменение.Характеристика = ЗапасыОстатки.Характеристика
	|			И ДвиженияЗапасыИзменение.Партия = ЗапасыОстатки.Партия
	|			И ДвиженияЗапасыИзменение.ЗаказПокупателя = ЗапасыОстатки.ЗаказПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервыТоваровОрганизаций.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, Ячейка) В
	|					(ВЫБРАТЬ
	|						ДвиженияЗапасыНаСкладахИзменение.Организация КАК Организация,
	|						ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|						ДвиженияЗапасыНаСкладахИзменение.Номенклатура КАК Номенклатура,
	|						ДвиженияЗапасыНаСкладахИзменение.Характеристика КАК Характеристика,
	|						ДвиженияЗапасыНаСкладахИзменение.Партия КАК Партия,
	|						ДвиженияЗапасыНаСкладахИзменение.Ячейка КАК Ячейка
	|					ИЗ
	|						ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение)) КАК РезервыТоваровОрганизацийОстатки
	|		ПО (&ПередачаТоваровМеждуОрганизациями)
	|			И ДвиженияЗапасыИзменение.Организация = РезервыТоваровОрганизацийОстатки.Организация
	|			И ДвиженияЗапасыИзменение.СтруктурнаяЕдиница = РезервыТоваровОрганизацийОстатки.СтруктурнаяЕдиница
	|			И ДвиженияЗапасыИзменение.Номенклатура = РезервыТоваровОрганизацийОстатки.Номенклатура
	|			И ДвиженияЗапасыИзменение.Характеристика = РезервыТоваровОрганизацийОстатки.Характеристика
	|			И ДвиженияЗапасыИзменение.Партия = РезервыТоваровОрганизацийОстатки.Партия
	|			И (ДвиженияЗапасыИзменение.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))
	|ГДЕ
	|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(РезервыТоваровОрганизацийОстатки.КоличествоОстаток, 0) < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + СформироватьШаблонПакетногоЗапроса();
	
КонецФункции // СформироватьТекстЗапросаОстаткиЗапасы()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылкаЧекККМВозврат, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если ПроведениеДокументовУНФ.КонтрольОстатковВыключен()
	 ИЛИ НЕ Константы.КонтролироватьОстаткиПриПробитииЧековККМ.Получить()
	    ИЛИ ДокументСсылкаЧекККМВозврат.Архивный Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временные таблицы "ДвиженияЗапасыИзменение", необходимо выполнить контроль реализации товаров.
	Если СтруктураВременныеТаблицы.ДвиженияЗапасыНаСкладахИзменение
	 ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыИзменение
	 ИЛИ СтруктураВременныеТаблицы.ДвиженияДенежныеСредстваВКассахККМИзменение
	 ИЛИ СтруктураВременныеТаблицы.ДвиженияПодарочныеСертификатыИзменение Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияЗапасыНаСкладахИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиницаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Ячейка) КАК ЯчейкаПредставление,
		|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыНаСкладахИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(РезервыТоваровОрганизацийОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыНаСкладах,
		|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(РезервыТоваровОрганизацийОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыНаСкладах
		|ИЗ
		|	ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки(
		|				&МоментКонтроля,
		|				(Организация, СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, Ячейка) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыНаСкладахИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|						ДвиженияЗапасыНаСкладахИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыНаСкладахИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыНаСкладахИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыНаСкладахИзменение.Ячейка КАК Ячейка
		|					ИЗ
		|						ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение)) КАК ЗапасыНаСкладахОстатки
		|		ПО ДвиженияЗапасыНаСкладахИзменение.Организация = ЗапасыНаСкладахОстатки.Организация
		|			И ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница = ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыНаСкладахИзменение.Номенклатура = ЗапасыНаСкладахОстатки.Номенклатура
		|			И ДвиженияЗапасыНаСкладахИзменение.Характеристика = ЗапасыНаСкладахОстатки.Характеристика
		|			И ДвиженияЗапасыНаСкладахИзменение.Партия = ЗапасыНаСкладахОстатки.Партия
		|			И ДвиженияЗапасыНаСкладахИзменение.Ячейка = ЗапасыНаСкладахОстатки.Ячейка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервыТоваровОрганизаций.Остатки(
		|				&МоментКонтроля,
		|				(Организация, СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, Ячейка) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыНаСкладахИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|						ДвиженияЗапасыНаСкладахИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыНаСкладахИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыНаСкладахИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыНаСкладахИзменение.Ячейка КАК Ячейка
		|					ИЗ
		|						ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение)) КАК РезервыТоваровОрганизацийОстатки
		|		ПО (&ПередачаТоваровМеждуОрганизациями)
		|			И ДвиженияЗапасыНаСкладахИзменение.Организация = РезервыТоваровОрганизацийОстатки.Организация
		|			И ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница = РезервыТоваровОрганизацийОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыНаСкладахИзменение.Номенклатура = РезервыТоваровОрганизацийОстатки.Номенклатура
		|			И ДвиженияЗапасыНаСкладахИзменение.Характеристика = РезервыТоваровОрганизацийОстатки.Характеристика
		|			И ДвиженияЗапасыНаСкладахИзменение.Партия = РезервыТоваровОрганизацийОстатки.Партия
		|			И ДвиженияЗапасыНаСкладахИзменение.Ячейка = РезервыТоваровОрганизацийОстатки.Ячейка
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(РезервыТоваровОрганизацийОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияДенежныеСредстваВКассахККМИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияДенежныеСредстваВКассахККМИзменение.КассаККМ) КАК КассаККМПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияДенежныеСредстваВКассахККМИзменение.КассаККМ.ВалютаДенежныхСредств) КАК ВалютаПредставление,
		|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
		|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток,
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.СуммаВалИзменение + ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаВалОстаток, 0) КАК ОстатокДенежныхСредств,
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.СуммаПередЗаписью КАК СуммаПередЗаписью,
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.СуммаПриЗаписи КАК СуммаПриЗаписи,
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.СуммаИзменение КАК СуммаИзменение,
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.СуммаВалПередЗаписью КАК СуммаВалПередЗаписью,
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.СуммаВалПриЗаписи КАК СуммаВалПриЗаписи,
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.СуммаВалИзменение КАК СуммаВалИзменение
		|ИЗ
		|	ДвиженияДенежныеСредстваВКассахККМИзменение КАК ДвиженияДенежныеСредстваВКассахККМИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(
		|				&МоментКонтроля,
		|				(Организация, КассаККМ) В
		|					(ВЫБРАТЬ
		|						ДвиженияДенежныеСредстваВКассахККМИзменение.Организация КАК Организация,
		|						ДвиженияДенежныеСредстваВКассахККМИзменение.КассаККМ КАК ТипДенежныхСредств
		|					ИЗ
		|						ДвиженияДенежныеСредстваВКассахККМИзменение КАК ДвиженияДенежныеСредстваВКассахККМИзменение)) КАК ДенежныеСредстваВКассахККМОстатки
		|		ПО ДвиженияДенежныеСредстваВКассахККМИзменение.Организация = ДенежныеСредстваВКассахККМОстатки.Организация
		|			И ДвиженияДенежныеСредстваВКассахККМИзменение.КассаККМ = ДенежныеСредстваВКассахККМОстатки.КассаККМ
		|			И ДвиженияДенежныеСредстваВКассахККМИзменение.ДоговорКонтрагента = ДенежныеСредстваВКассахККМОстатки.ДоговорКонтрагента
		|ГДЕ
		|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаВалОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияПодарочныеСертификатыИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияПодарочныеСертификатыИзменение.ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	ДвиженияПодарочныеСертификатыИзменение.НомерСертификата КАК НомерСертификата,
		|	ЕСТЬNULL(ДвиженияПодарочныеСертификатыИзменение.СуммаИзменение, 0) + ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) КАК ОстатокПодарочныеСертификаты,
		|	ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) КАК СуммаОстатокПодарочныеСертификаты
		|ИЗ
		|	ДвиженияПодарочныеСертификатыИзменение КАК ДвиженияПодарочныеСертификатыИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты.Остатки(&МоментКонтроля, ) КАК ПодарочныеСертификатыОстатки
		|		ПО ДвиженияПодарочныеСертификатыИзменение.ПодарочныйСертификат = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
		|			И ДвиженияПодарочныеСертификатыИзменение.НомерСертификата = ПодарочныеСертификатыОстатки.НомерСертификата
		|			И (ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
		Если Не ДокументСсылкаЧекККМВозврат.ДвиженияПоЗапасамУдалять Тогда
			Запрос.Текст = Запрос.Текст // [0, 1 и 2]
			+ СформироватьШаблонПакетногоЗапроса()
			+ СформироватьТекстЗапросаОстаткиЗапасы(); // [3]
		КонецЕсли;
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		// Интеркампани
		Запрос.УстановитьПараметр("ПередачаТоваровМеждуОрганизациями", ДополнительныеСвойства.УчетнаяПолитика.ПередачаТоваровМеждуОрганизациями);
		// Конец Интеркампани
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Если НЕ МассивРезультатов[0].Пустой()
		 ИЛИ НЕ МассивРезультатов[1].Пустой()
		 ИЛИ НЕ МассивРезультатов[2].Пустой()
		 ИЛИ (Не ДокументСсылкаЧекККМВозврат.ДвиженияПоЗапасамУдалять И НЕ МассивРезультатов[3].Пустой()) Тогда
			ДокументОбъектЧекККМВозврат = ДокументСсылкаЧекККМВозврат.ПолучитьОбъект();
		КонецЕсли;
		
		// Отрицательный остаток запасов на складе.
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[0].Выбрать();
			КонтрольОстатковУНФ.ЗапасыНаСкладахСписком(ДокументОбъектЧекККМВозврат, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по кассе ККМ.
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
			КонтрольОстатковУНФ.ДенежныеСредстваВКассахККМ(ДокументОбъектЧекККМВозврат, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по подарочным сертификатам
		Если Не МассивРезультатов[2].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
			КонтрольОстатковУНФ.ПодарочныеСертификаты(ДокументОбъектЧекККМВозврат, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток учета запасов.
		Если Не ДокументСсылкаЧекККМВозврат.ДвиженияПоЗапасамУдалять Тогда
			Если НЕ МассивРезультатов[3].Пустой() Тогда
				ВыборкаИзРезультатаЗапроса = МассивРезультатов[3].Выбрать();
				КонтрольОстатковУНФ.ЗапасыСписком(ДокументОбъектЧекККМВозврат, ВыборкаИзРезультатаЗапроса, Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКонтроль()

#КонецОбласти

#Область ДисконтныеКарты

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажиПоДисконтнойКарте(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства)
	
	Если ДокументСсылкаЧекККМВозврат.ДисконтнаяКарта.Пустая() Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнымКартам", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Если СтруктураДополнительныеСвойства.ДляПроведения.Архивный
		Или СтруктураДополнительныеСвойства.ДляПроведения.ДвиженияПоЗапасамУдалять
		Или Не СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит
		Или СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнымКартам", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = ДисконтныеКартыУНФСервер.ТекстЗапросаПродажиПоДисконтнойКарте("ЧекККМВозврат");
	
	Запрос.УстановитьПараметр("ПроцентСкидки",ДисконтныеКартыУНФСервер.ВычислитьПроцентСкидкиПоДисконтнойКарте(СтруктураДополнительныеСвойства.ДляПроведения.Дата,
																													  ДокументСсылкаЧекККМВозврат.ДисконтнаяКарта));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнымКартам", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажи()

#КонецОбласти

#Область АвтоматическиеСкидки

Процедура СформироватьТаблицаПродажиПоПредоставленнымСкидкам(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Период КАК Период,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.СкидкаНаценка КАК ВидСкидкиНаценки,
	|	-ВременнаяТаблицаАвтоСкидкиНаценки.Сумма КАК СуммаСкидки,
	|	ВременнаяТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаЗапасы.Документ КАК ДокументСкидки,
	|	ВременнаяТаблицаЗапасы.СтруктурнаяЕдиница КАК ПолучательСкидки,
	|	ВременнаяТаблицаЗапасы.Ответственный КАК Ответственный
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаАвтоСкидкиНаценки КАК ВременнаяТаблицаАвтоСкидкиНаценки
	|		ПО ВременнаяТаблицаЗапасы.КлючСвязи = ВременнаяТаблицаАвтоСкидкиНаценки.КлючСвязи
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ДвиженияПоЗапасамУдалять
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.Дата,
	|	&ВидСкидкиНаценки,
	|	-ВременнаяТаблицаЗапасы.СуммаСкидкиНаценки,
	|	ВременнаяТаблицаЗапасы.Номенклатура,
	|	ВременнаяТаблицаЗапасы.Характеристика,
	|	ВременнаяТаблицаЗапасы.Документ,
	|	ВременнаяТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ВременнаяТаблицаЗапасы.Ответственный
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|ГДЕ
	|	ВременнаяТаблицаЗапасы.СуммаСкидкиНаценки <> 0
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ДвиженияПоЗапасамУдалять
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.Дата,
	|	&БонуснаяПрограмма,
	|	-ВременнаяТаблицаЗапасы.СуммаСкидкиОплатыБонусом,
	|	ВременнаяТаблицаЗапасы.Номенклатура,
	|	ВременнаяТаблицаЗапасы.Характеристика,
	|	ВременнаяТаблицаЗапасы.Документ,
	|	ВременнаяТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ВременнаяТаблицаЗапасы.Ответственный
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ДвиженияПоЗапасамУдалять
	|	И НЕ &ОперацияСДенежнымиСредствами
	|	И ВременнаяТаблицаЗапасы.СуммаСкидкиОплатыБонусом <> 0";
	
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	Запрос.УстановитьПараметр("ВидСкидкиНаценки", ДокументСсылкаЧекККМВозврат.ВидСкидкиНаценки);
	Запрос.УстановитьПараметр("БонуснаяПрограмма", ДокументСсылкаЧекККМВозврат.ДисконтнаяКарта.Владелец.БонуснаяПрограмма);
	Запрос.УстановитьПараметр("ДвиженияПоЗапасамУдалять", СтруктураДополнительныеСвойства.ДляПроведения.ДвиженияПоЗапасамУдалять);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПредоставленныеСкидки", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажи()

#КонецОбласти

#Область Эквайринг

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаПлатежнымиКартами(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМВозврат);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("КомиссияОбработана", СтруктураДополнительныеСвойства.ДляПроведения.КомиссияОбработана);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ДанныеДокумента.ВалютаДокумента КАК Валюта,
	|	ТаблицаРасшифровкаПлатежа.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	ТаблицаРасшифровкаПлатежа.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
	|	ТаблицаРасшифровкаПлатежа.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
	|	-ТаблицаРасшифровкаПлатежа.Сумма КАК Сумма,
	|	-ТаблицаРасшифровкаПлатежа.СуммаВал КАК СуммаВал,
	|	ТаблицаРасшифровкаПлатежа.ЭквайринговыйТерминал.Договор КАК ДоговорЭквайринга,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаРасшифровкаПлатежа.ЭквайринговыйТерминал.Договор.РасчетКомиссииВОтчетеЭквайера
	|			ТОГДА ВЫБОР
	|					КОГДА &КомиссияОбработана
	|						ТОГДА ТаблицаРасшифровкаПлатежа.СуммаКомиссии
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТаблицаРасшифровкаПлатежа.ЭтоОтмена
	|								ТОГДА ТаблицаРасшифровкаПлатежа.Сумма * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссииПриОтмене, 0) / 100
	|							ИНАЧЕ ТаблицаРасшифровкаПлатежа.Сумма * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссииПриВозврате, 0) / 100
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаКомиссииПоДоговору,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаРасшифровкаПлатежа.ЭквайринговыйТерминал.Договор.РасчетКомиссииВОтчетеЭквайера
	|			ТОГДА ВЫБОР
	|					КОГДА &КомиссияОбработана
	|						ТОГДА ТаблицаРасшифровкаПлатежа.СуммаКомиссииВал
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТаблицаРасшифровкаПлатежа.ЭтоОтмена
	|								ТОГДА ТаблицаРасшифровкаПлатежа.СуммаВал * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссииПриОтмене, 0) / 100
	|							ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВал * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссииПриВозврате, 0) / 100
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаКомиссииПоДоговоруВал,
	|	ДанныеДокумента.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ДанныеДокумента.Заказ КАК Заказ,
	|	ДанныеДокумента.Контрагент КАК Контрагент
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОплатаПлатежнымиКартами КАК ТаблицаРасшифровкаПлатежа
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаПроцентыКомиссии КАК ВременнаяТаблицаПроцентыКомиссии
	|			ПО ТаблицаРасшифровкаПлатежа.ВидПлатежнойКарты = ВременнаяТаблицаПроцентыКомиссии.ВидПлатежнойКарты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И ТаблицаРасшифровкаПлатежа.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.БанковскаяКарта)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаПлатежнымиКартами", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПлатежныйКалендарь()

#КонецОбласти

#Область РаботаССериямиНоменклатуры

// Формирует таблицу значений, содержащую данные для проведения по регистру СерииНоменклатурыГарантии.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСерииНоменклатуры(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Если ДокументСсылка.СерииНоменклатуры.Количество()=0 Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатуры", Новый ТаблицаЗначений);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыГарантии", Новый ТаблицаЗначений);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерииНоменклатуры", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВременнаяТаблицаЗапасы.Дата КАК ДатаСобытия,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииСерийНоменклатуры.Возврат) КАК Операция,
	|	СерииНоменклатуры.Серия КАК Серия,
	|	СерииНоменклатуры.ОстаткиСерийНоменклатуры КАК ОстаткиСерийНоменклатуры,
	|	ВременнаяТаблицаЗапасы.Организация КАК Организация,
	|	ВременнаяТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаЗапасы.Партия КАК Партия,
	|	ВременнаяТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВременнаяТаблицаЗапасы.Ячейка КАК Ячейка,
	|	СерииНоменклатуры.Количество КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСерииНоменклатуры КАК СерииНоменклатуры
	|		ПО ВременнаяТаблицаЗапасы.КлючСвязи = СерииНоменклатуры.КлючСвязи
	|			И (&ЧекПробит)
	|			И (НЕ &Архивный)
	|			И (НЕ &ОперацияСДенежнымиСредствами)";
	
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если Не СтруктураДополнительныеСвойства.УчетнаяПолитика.МиграцияСерийНоменклатурыВыполнена Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыГарантии", РезультатЗапроса);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерииНоменклатуры", Новый ТаблицаЗначений);
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерииНоменклатуры", РезультатЗапроса);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыГарантии", Новый ТаблицаЗначений);
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ОстаткиСерийНоменклатуры", Истина);
	ОстаткиСерийНоменклатурыСтроки = РезультатЗапроса.НайтиСтроки(ПараметрыОтбора);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатуры", РезультатЗапроса.Скопировать(ОстаткиСерийНоменклатурыСтроки));
	
КонецПроцедуры // СформироватьТаблицаСерииНоменклатуры()

#КонецОбласти

#Область АкцизныеМарки

Процедура СформироватьТаблицаОстаткиАлкогольнойПродукцииЕГАИС(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВременнаяТаблицаАкцизныеМарки.ВидДвижения КАК ВидДвижения,
	|	ВременнаяТаблицаАкцизныеМарки.Период КАК Период,
	|	ВременнаяТаблицаАкцизныеМарки.Ссылка КАК Ссылка,
	|	ВременнаяТаблицаАкцизныеМарки.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ВременнаяТаблицаАкцизныеМарки.Справка2 КАК Справка2,
	|	ВременнаяТаблицаАкцизныеМарки.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ВременнаяТаблицаАкцизныеМарки.Количество КАК Количество,
	|	ВременнаяТаблицаАкцизныеМарки.СвободныйОстаток КАК СвободныйОстаток
	|ИЗ
	|	ВременнаяТаблицаАкцизныеМарки
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ОперацияСДенежнымиСредствами";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОстаткиАлкогольнойПродукцииЕГАИС", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсПечати

// Функция формирует табличный документ обложки кассовой книги
//
Функция СформироватьПечатнуюФормуТоварногоЧека(МассивОбъектов, ОбъектыПечати)
	Перем ПервыйДокумент, НомерСтрокиНачало, Ошибки;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЧекНаВозврат_Накладная";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЧекККМВозврат.ПФ_MXL_ТоварныйЧек");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекККМВозврат.Ссылка КАК Ссылка,
	|	ЧекККМВозврат.Номер КАК Номер,
	|	ЧекККМВозврат.Дата КАК Дата,
	|	ЧекККМВозврат.КассаККМ КАК КассаККМ,
	|	ЧекККМВозврат.ВалютаДокумента КАК Валюта,
	|	ЧекККМВозврат.КассаККМ.Представление КАК Покупатель,
	|	ЧекККМВозврат.Организация КАК Организация,
	|	ЧекККМВозврат.Организация.Префикс КАК Префикс,
	|	ЧекККМВозврат.Организация.Представление КАК Поставщик,
	|	ЧекККМВозврат.КонтактноеЛицоПодписант.Наименование КАК РасшифровкаПодписиКонтрагента,
	|	ЧекККМВозврат.ПодписьЗаведующегоОтделом.Должность КАК ДолжностьЗаведующегоОтделом,
	|	ЧекККМВозврат.ПодписьЗаведующегоОтделом.РасшифровкаПодписи КАК РасшифровкаПодписиЗаведующегоОтделом,
	|	ЧекККМВозврат.СуммаДокумента КАК СуммаДокумента,
	|	ЧекККМВозврат.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЧекККМВозврат.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		Номенклатура.Представление КАК Запас,
	|		Номенклатура.НаименованиеПолное КАК ЗапасПолноеНаименование,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Штрихкод КАК Штрихкод,
	|		Характеристика КАК Характеристика,
	|		Количество КАК Количество,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА ПроцентСкидкиНаценки <> 0
	|					ИЛИ СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|		Заказ КАК Заказ,
	|		Заказ.Номер КАК ЗаказНомер,
	|		Заказ.Дата КАК ЗаказДата,
	|		КлючСвязи КАК КлючСвязи,
	|		ЛОЖЬ КАК ЭтоНабор,
	|		ВЫБОР
	|			КОГДА НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора
	|	) КАК ТаблицаЗапасы,
	|	ЧекККМВозврат.ДобавленныеНаборы.(
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА НоменклатураНабора.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ЗапасНабора,
	|		НоменклатураНабора.ВариантПечатиНабора КАК ВариантПечатиНабора,
	|		НоменклатураНабора.ТипНоменклатуры КАК ТипНоменклатурыНабора,
	|		НоменклатураНабора.Артикул КАК АртикулНабора,
	|		НоменклатураНабора.Код КАК КодНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияНабора,
	|		ИСТИНА КАК ВыводитьИтоги
	|	) КАК ТаблицаДобавленныеНаборы,
	|	ЧекККМВозврат.Заказ КАК Заказ,
	|	ЧекККМВозврат.ПоложениеЗаказаПокупателя КАК ПоложениеЗаказаПокупателя,
	|	ЧекККМВозврат.ЕстьЗаказы КАК ЕстьЗаказы,
	|	ЧекККМВозврат.Контрагент КАК Контрагент,
	|	ЧекККМВозврат.Заказ.Номер КАК ЗаказНомер,
	|	ЧекККМВозврат.Заказ.Дата КАК ЗаказДата,
	|	ЧекККМВозврат.СерииНоменклатуры.(
	|		Серия КАК Серия,
	|		КлючСвязи КАК КлючСвязи
	|	) КАК ТаблицаСерииНоменклатуры
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	ЧекККМВозврат.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	ДанныеДокументов = Запрос.Выполнить().Выгрузить();
	
	// Наборы
	НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(ДанныеДокументов, "ТаблицаЗапасы");
	
	Для каждого Шапка Из ДанныеДокументов Цикл
		
		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабДокумент, ПервыйДокумент, НомерСтрокиНачало);
		
		// Заказы в розничной торговле
		ИспользоватьЗаказыВРозничнойТорговле = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле");
		Если ИспользоватьЗаказыВРозничнойТорговле И Шапка.ПоложениеЗаказаПокупателя = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
			ЗаказВШапке = Истина;
			ЗаказВТЧ = Ложь;
		Иначе
			ЗаказВШапке = Ложь;
			ЗаказВТЧ = ИспользоватьЗаказыВРозничнойТорговле И Шапка.ЕстьЗаказы;
		КонецЕсли;
		// Конец Заказы в розничной торговле
		
		СведенияОбОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата, ,);
		
		НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Шапка.Дата, Шапка.Номер, Шапка.Префикс);
		
		// Выводим шапку накладной.
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок|ОсновныеДанные");
		ОбластьМакета.Параметры.ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Чек ККМ на возврат № %1 от %2'"), НомерДокумента,
			Формат(Шапка.Дата, "ДЛФ=DD"));

		ТабДокумент.Вывести(ОбластьМакета);
		
		// Заказы в розничной торговле
		Если ЗаказВТЧ Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок|Заказ");
			ТабДокумент.Присоединить(ОбластьМакета);
		КонецЕсли;
		// Конец Заказы в розничной торговле
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ПредставлениеПоставщика = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ОбластьМакета.Параметры.Поставщик = Шапка.Организация;
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Заказы в розничной торговле
		Если ИспользоватьЗаказыВРозничнойТорговле И ЗначениеЗаполнено(Шапка.Контрагент) Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
			
			СведенияОПокупателе = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата, ,);
			
			СтруктураЗаполненияСекции = Новый Структура(Новый ФиксированнаяСтруктура(СведенияОПокупателе));
			
			ПредставлениеПолучателя = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
			СтруктураЗаполненияСекции.Вставить("ПредставлениеПолучателя", ПредставлениеПолучателя);
			СтруктураЗаполненияСекции.Вставить("Получатель", Шапка.Контрагент);
			
			ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
			
			ТабДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		Если ЗаказВШапке Тогда
			Если ЗначениеЗаполнено(Шапка.Контрагент) ИЛИ ЗначениеЗаполнено(Шапка.Заказ) Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ЗаказШапка");
				Если ЗначениеЗаполнено(Шапка.Заказ) Тогда
					ОбластьМакета.Параметры.ПредставлениеЗаказа = СтрШаблон(НСтр("ru = '№ %1 от %2'"),
						ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.ЗаказНомер, Истина, Истина), Формат(
						Шапка.ЗаказДата, "ДЛФ=D"));
				Иначе
					ОбластьМакета.Параметры.ПредставлениеЗаказа = "";
				КонецЕсли;
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
		КонецЕсли;
		// Конец Заказы в розничной торговле
		
		ЕстьСкидки = Шапка.ТаблицаЗапасы.Итог("ЕстьСкидка") <> 0;

		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
		
		ТабДокумент.Вывести(ОбластьНомера);
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьСуммы);
		Если ЗаказВТЧ Тогда
			ОбластьЗаказа = Макет.ПолучитьОбласть("ШапкаТаблицы|ЗаказТЧ");
			ТабДокумент.Присоединить(ОбластьЗаказа);
		КонецЕсли;
		
		ОбластьКолонкаЗапас = Макет.Область("Запас");
		
		Если Не ЕстьСкидки Тогда
			ОбластьКолонкаЗапас.ШиринаКолонки = ОбластьКолонкаЗапас.ШиринаКолонки
											  + Макет.Область("СуммаБезСкидки").ШиринаКолонки
											  + Макет.Область("СуммаСкидки").ШиринаКолонки;
		КонецЕсли;
		
		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
		Если ЕстьСкидки Тогда
			ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
		КонецЕсли; 
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
		Если ЗаказВТЧ Тогда
			ОбластьЗаказВТЧ = Макет.ПолучитьОбласть("Строка|ЗаказТЧ");
		КонецЕсли;
		
		СтруктураИтогов = Новый Структура("Сумма, СуммаНДС, Всего, Количество, НомерСтроки, ВсегоСкидок, ВсегоБезСкидок, ЕстьСкидки, ЗаказВТЧ", 0, 0, 0, 0, 0, 0, 0, ЕстьСкидки, ЗаказВТЧ);
		ПараметрыНоменклатуры = Новый Структура;
		СтруктураЗаполненияСекции = Новый Структура;
		
		Для каждого СтрокаЗапасы Из Шапка.ТаблицаЗапасы Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаЗапасы.Номенклатура) Тогда
				
				ТекстОшибки = НСтр("ru ='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена!'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, СтруктураЗаполненияСекции, ТекстОшибки, "");
				
			КонецЕсли;
			
			ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиТоварныйЧек(СтрокаЗапасы, СтруктураЗаполненияСекции, ПараметрыНоменклатуры, СтруктураИтогов, Шапка);
			
			ОбластьНомера.Параметры.Заполнить(СтрокаЗапасы);
			ОбластьНомера.Параметры.Заполнить(СтруктураЗаполненияСекции);
			ОбластьДанных.Параметры.Заполнить(СтрокаЗапасы);
			ОбластьДанных.Параметры.Заполнить(СтруктураЗаполненияСекции);
			Если ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.Заполнить(СтрокаЗапасы);
				ОбластьСкидок.Параметры.Заполнить(СтруктураЗаполненияСекции);
			КонецЕсли; 
			ОбластьСуммы.Параметры.Заполнить(СтрокаЗапасы);
			ОбластьСуммы.Параметры.Заполнить(СтруктураЗаполненияСекции);
			Если ЗаказВТЧ Тогда
				ОбластьЗаказВТЧ.Параметры.Заполнить(СтрокаЗапасы);
				ОбластьЗаказВТЧ.Параметры.Заполнить(СтруктураЗаполненияСекции);
			КонецЕсли; 
			
			ТабДокумент.Вывести(ОбластьНомера);
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли; 
			ТабДокумент.Присоединить(ОбластьСуммы);
			Если ЗаказВТЧ Тогда
				ТабДокумент.Присоединить(ОбластьЗаказВТЧ);
			КонецЕсли;
			
			// Наборы
			НаборыСервер.УчестьОформлениеСтрокиНабора(ТабДокумент, ОбластьДанных, СтрокаЗапасы);
				
		КонецЦикла;
		
		// Вывести Итого.
		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");
		
		ТабДокумент.Вывести(ОбластьНомера);
		
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.ВсегоСкидок    = СтруктураИтогов.ВсегоСкидок;
			ОбластьСкидок.Параметры.ВсегоБезСкидок = СтруктураИтогов.ВсегоБезСкидок;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.Всего = СтруктураИтогов.Сумма;
		ТабДокумент.Присоединить(ОбластьСуммы);
		Если ЗаказВТЧ Тогда
			ОбластьЗаказВТЧ  = Макет.ПолучитьОбласть("Итого|ЗаказТЧ");
			ТабДокумент.Присоединить(ОбластьЗаказВТЧ);
		КонецЕсли;
		
		// Вывести Сумму прописью.
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = СтруктураИтогов.Всего;
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований "
													+ Строка(СтруктураИтогов.Количество)
													+ ", на сумму "
													+ ПечатьДокументовУНФ.ФорматСумм(СуммаКПрописи, Шапка.Валюта);
																						   
		ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.Валюта);
		ТабДокумент.Вывести(ОбластьМакета);
	
		// Вывести подписи.
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи|ОсновныеДанные");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Заказы в розничной торговле
		Если ЗаказВТЧ Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Подписи|Заказ");
			ТабДокумент.Присоединить(ОбластьМакета);
		КонецЕсли;
		// Конец Заказы в розничной торговле
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	ТабДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабДокумент;
	
КонецФункции // СформироватьПечатнуюФормуОбложкиИПоследнегоЛистаКассовойКниги()

Процедура ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиТоварныйЧек(СтрокаТабличнойЧасти, ДанныеПечати, ПараметрыНоменклатуры, СтруктураИтогов, Шапка)
	
	ДанныеПечати.Очистить();
	
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		НомерСтроки = 0;
	Иначе
		СтруктураИтогов.НомерСтроки = СтруктураИтогов.НомерСтроки+1;
		НомерСтроки = СтруктураИтогов.НомерСтроки;
	КонецЕсли;
	ДанныеПечати.Вставить("НомерСтроки", НомерСтроки);
	
	ПараметрыНоменклатуры.Очистить();
	ПараметрыНоменклатуры.Вставить("Содержание", "");
	ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", СтрокаТабличнойЧасти.Запас);
	ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", СтрокаТабличнойЧасти.Характеристика);
	ПараметрыНоменклатуры.Вставить("ПредставлениеАртикула", СтрокаТабличнойЧасти.Артикул);
	ПараметрыНоменклатуры.Вставить("ПредставлениеСерииНоменклатуры", СерииНоменклатурыУНФ.СтрокаСерииНоменклатуры(Шапка.ТаблицаСерииНоменклатуры, СтрокаТабличнойЧасти.КлючСвязи));
	// Наборы
	ПараметрыНоменклатуры.Вставить("НеобходимоВыделитьКакСоставНабора", СтрокаТабличнойЧасти.НеобходимоВыделитьКакСоставНабора);
	
	ДанныеПечати.Вставить("Запас", ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры));
			
	ДанныеПечати.Вставить("ПредставлениеКодаНоменклатуры", ПечатьДокументовУНФ.ПредставлениеКодаНоменклатуры(СтрокаТабличнойЧасти));
			
	Скидка = 0;
	Если СтруктураИтогов.ЕстьСкидки Тогда
		
		Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
			
			Скидка = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
			ДанныеПечати.Вставить("Скидка", Скидка);
			ДанныеПечати.Вставить("СуммаБезСкидки", Скидка);
			
		ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0 И СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0 Тогда
			
			ДанныеПечати.Вставить("Скидка", 0);
			ДанныеПечати.Вставить("СуммаБезСкидки", СтрокаТабличнойЧасти.Сумма);
			
		Иначе
			
			Скидка = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена - СтрокаТабличнойЧасти.Сумма; // АвтоматическиеСкидки
			ДанныеПечати.Вставить("Скидка", Скидка);
			ДанныеПечати.Вставить("СуммаБезСкидки", СтрокаТабличнойЧасти.Сумма + Скидка);
			
		КонецЕсли;
		
	КонецЕсли;
			
	Если СтруктураИтогов.ЗаказВТЧ Тогда
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Заказ) Тогда
			ДанныеПечатиЗаказ = СтрШаблон(НСтр("ru = '№ %1 от %2'"), ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
				СтрокаТабличнойЧасти.ЗаказНомер, Истина, Истина), Формат(СтрокаТабличнойЧасти.ЗаказДата, "ДЛФ=D"));
		Иначе
			ДанныеПечатиЗаказ = "";
		КонецЕсли;
		ДанныеПечати.Вставить("Заказ", ДанныеПечатиЗаказ);
	КонецЕсли;
	
	Если НЕ СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтруктураИтогов.Сумма			= СтруктураИтогов.Сумма			+ СтрокаТабличнойЧасти.Сумма;
		СтруктураИтогов.СуммаНДС		= СтруктураИтогов.СуммаНДС		+ СтрокаТабличнойЧасти.СуммаНДС;
		СтруктураИтогов.Всего			= СтруктураИтогов.Всего			+ СтрокаТабличнойЧасти.Всего;
		СтруктураИтогов.ВсегоСкидок		= СтруктураИтогов.ВсегоСкидок	+ Скидка;
		СтруктураИтогов.ВсегоБезСкидок	= СтруктураИтогов.Сумма			+ СтруктураИтогов.ВсегоСкидок;
		СтруктураИтогов.Количество		= СтруктураИтогов.Количество	+ 1;
	КонецЕсли; 
			
КонецПроцедуры

// Функция формирует табличный документ с печатной формой КМ3.
//
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция СформироватьПечатнуюФормуКМ3(МассивОбъектов, ОбъектыПечати)
	Перем ПервыйДокумент, НомерСтрокиНачало, Ошибки;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Чек_КМ3";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЧекККМВозврат.ПФ_MXL_КМ3");
	
	Для Каждого ЧекККМВозврат Из МассивОбъектов Цикл
		
		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабДокумент, ПервыйДокумент, НомерСтрокиНачало);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЧекККМВозврат);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокЧек.Номер КАК Номер,
		|	ДокЧек.Дата КАК ДатаДокумента,
		|	ДокЧек.КассаККМ КАК КассаККМ,
		|	ДокЧек.Автор КАК Автор,
		|	ДокЧек.КассаККМ.Представление КАК Покупатель,
		|	ДокЧек.ВалютаДокумента КАК Валюта,
		|	ДокЧек.Организация КАК Организация,
		|	ДокЧек.Организация.Представление КАК Поставщик,
		|	"""" КАК СерийныйНомерККМ,
		|	"""" КАК РегистрационныйНомерККМ,
		|	ДокЧек.ПодписьРуководителя.Должность КАК ДолжностьРуководителя,
		|	ДокЧек.ПодписьРуководителя.РасшифровкаПодписи КАК РасшифровкаПодписиРуководителя,
		|	ДокЧек.ПодписьЗаведующегоОтделом.Должность КАК ДолжностьЗаведующегоОтделом,
		|	ДокЧек.ПодписьЗаведующегоОтделом.РасшифровкаПодписи КАК РасшифровкаПодписиЗаведующегоОтделом,
		|	ДокЧек.ПодписьСтаршегоКассира.Должность КАК ДолжностьСтаршегоКассира,
		|	ДокЧек.ПодписьСтаршегоКассира.РасшифровкаПодписи КАК РасшифровкаПодписиСтаршегоКассира,
		|	ДокЧек.ПодписьКассира.Должность КАК ДолжностьКассира,
		|	ДокЧек.ПодписьКассира.РасшифровкаПодписи КАК РасшифровкаПодписиКассира,
		|	ДокЧек.НомерЧекаККМ КАК НомерЧека,
		|	ДокЧек.СуммаДокумента КАК СуммаДокумента
		|ИЗ
		|	Документ.ЧекККМВозврат КАК ДокЧек
		|ГДЕ
		|	ДокЧек.Ссылка = &ТекущийДокумент";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ОбластьМакета = Макет.ПолучитьОбласть("ОбластьАкта");
		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		СведенияОбОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
		
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,Телефоны,");
		ОбластьМакета.Параметры.СуммаПрописью            = РаботаСКурсамиВалют.СформироватьСуммуПрописью(Шапка.СуммаДокумента, Шапка.Валюта);
		
		ОбластьМакета.Параметры.НомерДокумента           = "";
		
		ОбластьМакета.Параметры.ОрганизацияПоОКПО     = СведенияОбОрганизации.КодПоОКПО;
		ОбластьМакета.Параметры.ОрганизацияИНН        = СведенияОбОрганизации.ИНН;
		ОбластьМакета.Параметры.ВидДеятельностиПоОКДП = "";
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ЧекККМВозврат);
		
	КонецЦикла;
		
	Возврат ТабДокумент;
	
КонецФункции // СформироватьПечатнуюФормуКМ3()

// Процедура печати документа.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КМ3") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "КМ3", "КМ-3",СформироватьПечатнуюФормуКМ3(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТоварныйЧек") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТоварныйЧек", "Товарный чек", СформироватьПечатнуюФормуТоварногоЧека(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	ЭлектроннаяПочтаУНФ.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов,
		КоллекцияПечатныхФорм);
	
КонецПроцедуры // Печать()

// Заполняет список команд печати Заказа покупателя
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КМ3,ТоварныйЧек";
	КомандаПечати.Представление = ПечатьДокументовУНФ.ПредставлениеКомплектаДокументов();
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КМ3";
	КомандаПечати.Представление = НСтр("ru = 'КМ3 (Акт о возврате денежных сумм покупателям)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 4;

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТоварныйЧек";
	КомандаПечати.Представление = НСтр("ru = 'Товарный чек'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 7;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПодарочнымиСертификатами

Процедура СформироватьТаблицаПодарочныеСертификаты(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВременнаяТаблицаЗапасы.Номенклатура КАК ПодарочныйСертификат,
	|	СерииНоменклатуры.Серия КАК НомерСертификата,
	|	-ВременнаяТаблицаЗапасы.НоминалСертификата КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСерииНоменклатуры КАК СерииНоменклатуры
	|		ПО ВременнаяТаблицаЗапасы.КлючСвязи = СерииНоменклатуры.КлючСвязи
	|			И (&ИспользоватьСерииНоменклатуры)
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И ВременнаяТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.ПодарочныйСертификат,
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.НомерСертификата,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.ЧастичноеПогашение
	|			ТОГДА -ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаСертификата
	|		ИНАЧЕ -ВременнаяТаблицаОплатаПлатежнымиКартами.Номинал
	|	КОНЕЦ
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ВременнаяТаблицаОплатаПлатежнымиКартами
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И ВременнаяТаблицаОплатаПлатежнымиКартами.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат)";
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ИспользоватьСерииНоменклатуры", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерииНоменклатуры);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПодарочныеСертификаты", РезультатЗапроса);
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру ОплатаПодарочнымиСертификатами.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаПодарочнымиСертификатами(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	
	Запрос.Текст = РаботаСПодарочнымиСертификатами.СформироватьТекстЗапросаПоОплатеПодарочнымиСертификатами(, Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаПодарочнымиСертификатами", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаОплатаПодарочнымиСертификатами()

// Формирует таблицу значений, содержащую данные для проведения по регистру РасчетыСПокупателями.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРасчетыСПокупателями(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства)
	
	СтруктураДополнительныеСвойства.Вставить("НеобходимПересчет", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМВозврат);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	Запрос.УстановитьПараметр("ВосстановлениеПредоплаты", НСтр("ru='Восстановление предоплаты'"));
	Запрос.УстановитьПараметр("СторнированиеДолга", НСтр("ru='Сторнирование долга'"));
	Запрос.УстановитьПараметр("СторнированиеАвансаПокупателя", НСтр("ru='Сторнирование аванса покупателя'"));
	Запрос.УстановитьПараметр("СторнированиеЗачетаАванса", НСтр("ru='Сторнирование зачета предоплаты'"));
	Запрос.УстановитьПараметр("СторнированиеПредоплаты", НСтр("ru='Сторнирование предоплаты'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	
	Для Каждого КлючИЗначение Из СтруктураДополнительныеСвойства.ДляСертификатов Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	&КонтрагентДляПредоплаты КАК Контрагент,
	|	&ДоговорПоУмолчанию КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК Документ,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК Заказ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс) КАК ТипРасчетов,
	|	СУММА(-ВременнаяТаблицаЗапасы.Сумма) КАК Сумма,
	|	СУММА(-ВременнаяТаблицаЗапасы.СуммаВал) КАК СуммаВал,
	|	&СчетУчетаАвансовПокупателя КАК СчетУчета,
	|	ВременнаяТаблицаЗапасы.ВалютаДокумента КАК Валюта,
	|	&СторнированиеАвансаПокупателя КАК СодержаниеПроводки
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВременнаяТаблицаЗапасы.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И ВременнаяТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаЗапасы.ВалютаДокумента,
	|	ВременнаяТаблицаЗапасы.Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&Организация,
	|	&КонтрагентДляПредоплаты,
	|	&ДоговорПоУмолчанию,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс),
	|	-ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма,
	|	-ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаВал,
	|	&СчетУчетаАвансовПокупателя,
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.ВалютаДокумента,
	|	&СторнированиеЗачетаАванса
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ВременнаяТаблицаОплатаПлатежнымиКартами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВременнаяТаблицаОплатаПлатежнымиКартами.ПодарочныйСертификат = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат)
	|	И &ЧекПробит
	|	И НЕ &Архивный";
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаПоСертификатам = РезультатЗапроса.Выгрузить();
	
	СформироватьТаблицуВзаиморасчетовПоОперацииВозврата(Запрос);
	
	// Установка исключительной блокировки контролируемых остатков расчетов с контрагентами.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаРасчетыСПокупателями.Организация КАК Организация,
	|	ВременнаяТаблицаРасчетыСПокупателями.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаРасчетыСПокупателями.Договор КАК Договор,
	|	ВременнаяТаблицаРасчетыСПокупателями.Документ КАК Документ,
	|	ВременнаяТаблицаРасчетыСПокупателями.Заказ КАК Заказ,
	|	ВременнаяТаблицаРасчетыСПокупателями.ТипРасчетов КАК ТипРасчетов
	|ИЗ
	|	ВременнаяТаблицаРасчетыСПокупателями";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСПокупателями");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	НомерЗапроса = 0;
	Запрос.Текст = КурсовыеРазницыУНФ.ПолучитьТекстЗапросаКурсовыеРазницыРасчетыСПокупателями(Запрос.МенеджерВременныхТаблиц, Ложь, НомерЗапроса);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаПоПредоплате = МассивРезультатов[НомерЗапроса].Выгрузить();
	
	// Объединение таблиц
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоСертификатам, ТаблицаПоПредоплате);
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПокупателями", ТаблицаПоПредоплате);
	
КонецПроцедуры // СформироватьТаблицаРасчетыСПокупателями()

// Помещает в менеджер временных таблиц запроса данные для формирования взаиморасчетов по операции возврата
//
Процедура СформироватьТаблицуВзаиморасчетовПоОперацииВозврата(Запрос)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаДокумента.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&СторнированиеДолга КАК СодержаниеПроводки,
	|	ТаблицаДокумента.Период КАК Дата,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем КАК СчетУчета,
	|	ТаблицаДокумента.Договор КАК Договор,
	|	ТаблицаДокумента.КассаККМ КАК КассаККМ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЗаказПокупателя = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.ЗаказПокупателя
	|	КОНЕЦ КАК Заказ,
	|	ТаблицаДокумента.ВалютаРасчетов КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг) КАК ТипРасчетов,
	|	-СУММА(ТаблицаДокумента.Сумма) КАК Сумма,
	|	-СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВал,
	|	СУММА(0) КАК СуммаРег,
	|	-СУММА(ТаблицаДокумента.Сумма) КАК СуммаДляОстатка,
	|	-СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВалДляОстатка,
	|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДокумента
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПокупателями
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.Договор,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЗаказПокупателя = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.ЗаказПокупателя
	|	КОНЕЦ,
	|	ТаблицаДокумента.КассаККМ,
	|	ТаблицаДокумента.ВалютаДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаДокумента.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	&ВосстановлениеПредоплаты,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|	ТаблицаДокумента.Договор,
	|	ТаблицаДокумента.КассаККМ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЗаказПокупателя = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.ЗаказПокупателя
	|	КОНЕЦ,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.ТипРасчетовКуда,
	|	-СУММА(ТаблицаДокумента.Сумма),
	|	-СУММА(ТаблицаДокумента.СуммаВал),
	|	СУММА(0),
	|	-СУММА(ТаблицаДокумента.Сумма),
	|	-СУММА(ТаблицаДокумента.СуммаВал),
	|	ТаблицаДокумента.ВалютаДокумента
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.Договор,
	|	ТаблицаДокумента.ТипРасчетовКуда,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЗаказПокупателя = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.ЗаказПокупателя
	|	КОНЕЦ,
	|	ТаблицаДокумента.КассаККМ,
	|	ТаблицаДокумента.ВалютаДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаДокумента.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&ВосстановлениеПредоплаты,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.СчетУчетаАвансовПоставщику,
	|	ТаблицаДокумента.Договор,
	|	ТаблицаДокумента.КассаККМ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЗаказПокупателя = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.ЗаказПокупателя
	|	КОНЕЦ,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.ТипРасчетов,
	|	-СУММА(ТаблицаДокумента.Сумма),
	|	-СУММА(ТаблицаДокумента.СуммаВал),
	|	СУММА(0),
	|	СУММА(ТаблицаДокумента.Сумма),
	|	СУММА(ТаблицаДокумента.СуммаВал),
	|	ТаблицаДокумента.ВалютаДокумента
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.ТипРасчетов,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.СчетУчетаАвансовПоставщику,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЗаказПокупателя = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.ЗаказПокупателя
	|	КОНЕЦ,
	|	ТаблицаДокумента.КассаККМ,
	|	ТаблицаДокумента.ВалютаДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаДокумента.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&СторнированиеАвансаПокупателя,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.Контрагент.СчетУчетаАвансовПоставщику,
	|	ТаблицаДокумента.Договор,
	|	ТаблицаДокумента.КассаККМ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс),
	|	СУММА(ТаблицаДокумента.Сумма),
	|	СУММА(ТаблицаДокумента.СуммаВал),
	|	СУММА(0),
	|	СУММА(ТаблицаДокумента.Сумма),
	|	СУММА(ТаблицаДокумента.СуммаВал),
	|	ТаблицаДокумента.ВалютаДокумента
	|ИЗ
	|	ВременнаяТаблицаРасшифровкаПлатежа КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка.ОперацияСДенежнымиСредствами
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ТаблицаДокумента.КассаККМ,
	|	ТаблицаДокумента.ВалютаДокумента,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Контрагент.СчетУчетаАвансовПоставщику,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ";
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область Бонусы

// Формирует таблицу значение, содержащую данные для проведения по регистру.
// Таблицу значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаБонусныеБаллы(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства)
	
	Если СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит
		И Не СтруктураДополнительныеСвойства.ДляПроведения.Архивный
		И Не СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Текст = РаботаСБонусами.СформироватьТекстЗапросаПоБонуснымБаллам();
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		ТаблицаБонусныеБаллы = РезультатЗапроса[0].Выгрузить();
		ТаблицаОплатаБонусами = РезультатЗапроса[1].Выгрузить();
		
		Для Каждого СтрокаОплаты Из ТаблицаОплатаБонусами Цикл
			
			// Начислено
			НоваяСтрока = ТаблицаБонусныеБаллы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплаты);
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
			
			// К списанию
			РевизитыБонуснойПрограммы = РаботаСБонусами.РеквизитыБонуснойПрограммы(СтрокаОплаты.БонуснаяКарта);
			Если РевизитыБонуснойПрограммы.СписаниеНеиспользованных Тогда
				НоваяСтрока = ТаблицаБонусныеБаллы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплаты);
				НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
				НоваяСтрока.Начислено = 0;
				НоваяСтрока.КСписанию = СтрокаОплаты.Начислено;
				НоваяСтрока.ДатаПервоначальногоНачисления = СтрокаОплаты.Период;
				НоваяСтрока.Период = РаботаСБонусами.ПрибавитьКДатеПериод(СтрокаОплаты.Период,
					РевизитыБонуснойПрограммы.КоличествоПериодовСписания,
					РевизитыБонуснойПрограммы.ПериодичностьСписания);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ТаблицаБонусныеБаллы = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаБонусныеБаллы", ТаблицаБонусныеБаллы);
	
КонецПроцедуры

Процедура СформироватьТаблицаНачисленияБонусныхБаллов(ДокументСсылкаЧекККМВозврат, СтруктураДополнительныеСвойства)
	
	Если СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит
		И Не СтруктураДополнительныеСвойства.ДляПроведения.Архивный
		И Не СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Текст = РаботаСБонусами.СформироватьТекстЗапросаПоНачислениямБонусныхБаллов();
		ТаблицаНачисленияБонусныхБаллов = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		ТаблицаНачисленияБонусныхБаллов = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаНачисленияБонусныхБаллов", ТаблицаНачисленияБонусныхБаллов);
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры
// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры
// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.//
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
	Возврат;
	
КонецПроцедуры
// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ЕГАИС

#Область СообщенияЕГАИС

// Сообщение к передаче XML
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС.
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеКПередачеXML(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные Тогда
		
		Возврат ЧекЕГАИСXML(ДокументСсылка, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию Тогда
		
		Возврат ЧекЕГАИСОтменаXML(ДокументСсылка, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

Функция ЧекЕГАИСXML(ДокументСсылка, ДополнительныеПараметры)
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ЕГАИСПрисоединенныеФайлы.Документ      КАК Ссылка,
		|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
		|ПОМЕСТИТЬ Версии
		|ИЗ
		|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
		|ГДЕ
		|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
		|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
		|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
		|СГРУППИРОВАТЬ ПО
		|	ЕГАИСПрисоединенныеФайлы.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Шапка.Номер                          КАК Номер,
		|	Шапка.Дата                           КАК Дата,
		|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)   КАК ПоследнийНомерВерсии,
		|	Шапка.Ссылка                         КАК ДокументОснование,
		|	КлассификаторОрганизацийЕГАИС.Ссылка КАК ОрганизацияЕГАИС,
		|	КлассификаторОрганизацийЕГАИС.Код            КАК ИдентификаторФСРАР,
		|	КлассификаторОрганизацийЕГАИС.ФорматОбмена   КАК ФорматОбмена,
		|	КлассификаторОрганизацийЕГАИС.ИНН            КАК ИНН,
		|	КлассификаторОрганизацийЕГАИС.КПП            КАК КПП,
		|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект,
		|	&АдресТорговогоОбъекта                       КАК АдресТорговогоОбъекта,
		|	Шапка.Ответственный                          КАК Ответственный,
		|	&НомерСмены                                  КАК НомерСмены,
		|	&НомерЧека                                   КАК НомерЧекаККМ,
		|	&СерийныйНомер                               КАК СерийныйНомерККМ
		|ПОМЕСТИТЬ Шапка
		|ИЗ
		|	Документ.ЧекККМВозврат КАК Шапка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
		|		ПО Шапка.Ссылка = Версии.Ссылка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|		ПО Шапка.СтруктурнаяЕдиница = КлассификаторОрганизацийЕГАИС.ТорговыйОбъект
		|		 И Шапка.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
		|ГДЕ
		|	Шапка.Ссылка = &Ссылка
		|;
		|
		|//#РезультатЗапроса#////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	Шапка
		|",
		"Шапка");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Товары.КлючСвязи               КАК ИдентификаторСтроки,
		|	Товары.НомерСтроки             КАК НомерСтроки,
		|	Товары.Количество              КАК Количество,
		|	-Товары.Цена                    КАК Цена,
		|	Товары.Штрихкод                КАК Штрихкод,
		|	Товары.Номенклатура				КАК Номенклатура,
		|	Товары.Характеристика			КАК Характеристика,
		|	Товары.НоменклатураЕГАИС.Объем КАК Объем
		|ИЗ
		|	Документ.ЧекККМВозврат.Запасы КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.Номенклатура.АлкогольнаяПродукция
		|	И Товары.Номенклатура.ВидАлкогольнойПродукции.Маркируемый
		|",
		"Товары");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Шапка.ОрганизацияЕГАИС             КАК ОрганизацияЕГАИС,
		|	ТабличнаяЧасть.КлючСвязи           КАК ИдентификаторСтроки,
		|	ТабличнаяЧасть.Справка2.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	ТабличнаяЧасть.Справка2            КАК Справка2,
		|	ТабличнаяЧасть.АкцизнаяМарка       КАК ШтрихкодУпаковки,
		|	ТабличнаяЧасть.ШтрихкодУпаковки    КАК ШтрихкодРодительскойУпаковки
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	Документ.ЧекККМВозврат.АкцизныеМарки КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Шапка КАК Шапка
		|		ПО ИСТИНА
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|ИНДЕКСИРОВАТЬ ПО
		|	ШтрихкодУпаковки,
		|	ШтрихкодРодительскойУпаковки
		|");
	
	ПараметрыФормированияТекстаЗапроса = ШтрихкодированиеЕГАИС.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Истина;
	ПараметрыФормированияТекстаЗапроса.ИмяПоляАлкогольнаяПродукция     = "НоменклатураЕГАИС";
	ТекстыЗапроса.Добавить(
		ШтрихкодированиеЕГАИС.ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
		"ВложенныеШтрихкоды");
	
	МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Перечисления.ВидыДокументовЕГАИС.ЧекККМ);
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось отправить чек в ЕГАИС'");
	Иначе
		НомерЧека     = ДополнительныеПараметры.НомерЧека;
		НомерСмены    = ДополнительныеПараметры.НомерСмены;
		СерийныйНомер = ДополнительныеПараметры.СерийныйНомер;
		АдресТорговогоОбъекта = ДополнительныеПараметры.АдресТорговогоОбъекта;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НомерЧека",     НомерЧека);
	Запрос.УстановитьПараметр("НомерСмены",    НомерСмены);
	Запрос.УстановитьПараметр("СерийныйНомер", СерийныйНомер);
	Запрос.УстановитьПараметр("АдресТорговогоОбъекта", АдресТорговогоОбъекта);
	Запрос.УстановитьПараметр("ПустыеЗначенияНоменклатуры", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("Номенклатура"));
	
	РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	Возврат ЧекиЕГАИС.ЧекXML(ДокументСсылка, РезультатыЗапроса, МенеджерВременныхТаблиц);
	
КонецФункции

Функция ЧекЕГАИСОтменаXML(ДокументСсылка, ДополнительныеПараметры)
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ЕГАИСПрисоединенныеФайлы.Документ      КАК Ссылка,
		|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
		|ПОМЕСТИТЬ Версии
		|ИЗ
		|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
		|ГДЕ
		|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
		|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
		|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
		|СГРУППИРОВАТЬ ПО
		|	ЕГАИСПрисоединенныеФайлы.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Шапка.Номер                           КАК Номер,
		|	Шапка.Дата                            КАК Дата,
		|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)    КАК ПоследнийНомерВерсии,
		|	Шапка.Ссылка                          КАК ДокументОснование,
		|	КлассификаторОрганизацийЕГАИС.Ссылка  КАК ОрганизацияЕГАИС,
		|	КлассификаторОрганизацийЕГАИС.Код            КАК ИдентификаторФСРАР,
		|	КлассификаторОрганизацийЕГАИС.ФорматОбмена   КАК ФорматОбмена,
		|	КлассификаторОрганизацийЕГАИС.ИНН            КАК ИНН,
		|	КлассификаторОрганизацийЕГАИС.КПП            КАК КПП,
		|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект,
		|	&АдресТорговогоОбъекта                       КАК АдресТорговогоОбъекта,
		|	Шапка.Ответственный                          КАК Ответственный,
		|	&НомерСмены                                  КАК НомерСмены,
		|	&НомерЧека                                   КАК НомерЧекаККМ,
		|	&СерийныйНомер                               КАК СерийныйНомерККМ
		|ПОМЕСТИТЬ Шапка
		|ИЗ
		|	Документ.ЧекККМВозврат КАК Шапка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
		|		ПО Шапка.Ссылка = Версии.Ссылка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|		ПО Шапка.СтруктурнаяЕдиница = КлассификаторОрганизацийЕГАИС.ТорговыйОбъект
		|		 И Шапка.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
		|ГДЕ
		|	Шапка.Ссылка = &Ссылка
		|;
		|
		|//#РезультатЗапроса#////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	Шапка
		|",
		"Шапка");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Товары.КлючСвязи               КАК ИдентификаторСтроки,
		|	Товары.НомерСтроки             КАК НомерСтроки,
		|	Товары.Количество              КАК Количество,
		|	Товары.Цена                    КАК Цена,
		|	Товары.Штрихкод                КАК Штрихкод,
		|	Товары.Номенклатура				КАК Номенклатура,
		|	Товары.Характеристика			КАК Характеристика,
		|	Товары.НоменклатураЕГАИС.Объем КАК Объем
		|ИЗ
		|	Документ.ЧекККМВозврат.Запасы КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.Номенклатура.АлкогольнаяПродукция
		|	И Товары.Номенклатура.ВидАлкогольнойПродукции.Маркируемый
		|",
		"Товары");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Шапка.ОрганизацияЕГАИС                    КАК ОрганизацияЕГАИС,
		|	ТабличнаяЧасть.КлючСвязи                  КАК ИдентификаторСтроки,
		|	ТабличнаяЧасть.Справка2.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	ТабличнаяЧасть.Справка2                   КАК Справка2,
		|	ТабличнаяЧасть.АкцизнаяМарка              КАК ШтрихкодУпаковки,
		|	ТабличнаяЧасть.ШтрихкодУпаковки           КАК ШтрихкодРодительскойУпаковки
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	Документ.ЧекККМВозврат.АкцизныеМарки КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Шапка КАК Шапка
		|		ПО ИСТИНА
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|ИНДЕКСИРОВАТЬ ПО
		|	ШтрихкодУпаковки,
		|	ШтрихкодРодительскойУпаковки
		|");
	
	ПараметрыФормированияТекстаЗапроса = ШтрихкодированиеЕГАИС.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Истина;
	ПараметрыФормированияТекстаЗапроса.ИмяПоляАлкогольнаяПродукция     = "НоменклатураЕГАИС";
	ТекстыЗапроса.Добавить(
		ШтрихкодированиеЕГАИС.ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
		"ВложенныеШтрихкоды");
	
	МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Перечисления.ВидыДокументовЕГАИС.ЧекККМ);
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось отправить чек в ЕГАИС'");
	Иначе
		НомерЧека     = ДополнительныеПараметры.НомерЧека;
		НомерСмены    = ДополнительныеПараметры.НомерСмены;
		СерийныйНомер = ДополнительныеПараметры.СерийныйНомер;
		АдресТорговогоОбъекта = ДополнительныеПараметры.АдресТорговогоОбъекта;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НомерЧека",     НомерЧека);
	Запрос.УстановитьПараметр("НомерСмены",    НомерСмены);
	Запрос.УстановитьПараметр("СерийныйНомер", СерийныйНомер);
	Запрос.УстановитьПараметр("АдресТорговогоОбъекта", АдресТорговогоОбъекта);
	Запрос.УстановитьПараметр("ПустыеЗначенияНоменклатуры", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("Номенклатура"));
	
	РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	Возврат ЧекиЕГАИС.ЧекXML(ДокументСсылка, РезультатыЗапроса, МенеджерВременныхТаблиц);
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеЕГАИС

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
КонецФункции

// Статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции


// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры);
	
КонецФункции

// Обновить статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции


// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Возврат ЧекиЕГАИС.ПоследовательностьОпераций(ДокументСсылка);
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктПостановкиНаБалансЕГАИС - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	Если НЕ ТипЗнч(ПараметрыОбновленияСтатуса) = Тип("Структура") Тогда
		ПараметрыОбновленияСтатуса = Новый Структура;
	КонецЕсли;
	ПараметрыОбновленияСтатуса.Вставить("ОбновлятьДвижения", Ложь);
	
	ЧекиЕГАИС.ПриИзмененииСтатусаЧека(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус);
	
КонецПроцедуры

// Опеределить необходимость перерасчета статуса оформления документов.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Предыдущий статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перерасчета статуса оформления.
//
Функция РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПоУмолчанию();
	
КонецФункции

// Возвращает статусы движений.
//
// Возвращаемое значение:
//  Массив - Статусы.
//
Функция СтатусыДвиженийАкцизныхМарокСвободныйОстаток() Экспорт
	
	Возврат ЧекиЕГАИС.СтатусыДвиженийАкцизныхМарокСвободныйОстаток();
	
КонецФункции

// Возвращает статусы движений.
//
// Возвращаемое значение:
//  Массив - Статусы.
//
Функция СтатусыДвиженийАкцизныхМарокКоличество() Экспорт
	
	Возврат ЧекиЕГАИС.СтатусыДвиженийАкцизныхМарокКоличество();
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат ЧекиЕГАИС.ДальнейшееДействиеПоУмолчанию();
	
КонецФункции

#КонецОбласти

#Область СканированиеАлкогольнойПродукции

Функция ТаблицаАлкогольнойПродукцииКОпределениюСправок2(ДокументСсылка) Экспорт
	
	Возврат Новый ТаблицаЗначений;
	
КонецФункции

Функция ШтрихкодыУпаковок(ДокументСсылка, ЗаполнитьСправки2ИзРегистра = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМЗапасы.Ссылка.Организация КАК Организация,
	|	ЧекККМАкцизныеМарки.АкцизнаяМарка КАК АкцизнаяМарка,
	|	ЧекККМАкцизныеМарки.Справка2 КАК Справка2,
	|	ЧекККМАкцизныеМарки.ШтрихкодУпаковки КАК ШтрихкодУпаковки
	|ПОМЕСТИТЬ Вт_Документ
	|ИЗ
	|	Документ.ЧекККМВозврат.Запасы КАК ЧекККМЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат.АкцизныеМарки КАК ЧекККМАкцизныеМарки
	|		ПО ЧекККМЗапасы.Ссылка = ЧекККМАкцизныеМарки.Ссылка
	|			И ЧекККМЗапасы.КлючСвязи = ЧекККМАкцизныеМарки.КлючСвязи
	|ГДЕ
	|	ЧекККМЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	АкцизныеМаркиЕГАИС.АкцизнаяМарка КАК ШтрихкодУпаковки,
	|	ВЫБОР
	|		КОГДА АкцизныеМаркиЕГАИС.Справка2 = РозничнаяПродажаТовары.Справка2
	|			ТОГДА АкцизныеМаркиЕГАИС.Справка2
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ОшибкаЧтенияСтатуса)
	|	КОНЕЦ КАК Статус,
	|	АкцизныеМаркиЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	РозничнаяПродажаТовары.Справка2 КАК Справка2
	|ИЗ
	|	Вт_Документ КАК РозничнаяПродажаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО РозничнаяПродажаТовары.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|		ПО РозничнаяПродажаТовары.АкцизнаяМарка = АкцизныеМаркиЕГАИС.АкцизнаяМарка";

	
	Если ЗаполнитьСправки2ИзРегистра Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РозничнаяПродажаТовары.Справка2", "АкцизныеМаркиЕГАИС.Справка2");
	КонецЕсли; 
	
	Возврат Новый Структура("МаркированныеТовары", Запрос.Выполнить().Выгрузить());
КонецФункции

Функция ОбработатьДанныеШтрихкодаЕдиницыАлкогольнойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Результат = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
	
	Объект = Форма.Объект;
	
	СтруктураПоискаМарки = Новый Структура;
	СтруктураПоискаМарки.Вставить("АкцизнаяМарка", ДанныеШтрихкода.ШтрихкодУпаковки);
	СтрокиМарок = Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоискаМарки);
	Если СтрокиМарок.Количество() > 0 Тогда 
		Результат.ТекстОшибки = НСтр("ru = 'Такая акцизная марка уже присутствует в чеке.'");
		Возврат Результат;
	КонецЕсли;
	
	НоваяСтрокаТовары = Объект.Запасы.Добавить();
	ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект.Запасы, НоваяСтрокаТовары, "КлючСвязи");
	
	НоваяСтрокаТовары.Номенклатура         = ДанныеШтрихкода.Номенклатура;
	НоваяСтрокаТовары.НоменклатураЕГАИС    = ДанныеШтрихкода.АлкогольнаяПродукция;
	НоваяСтрокаТовары.Количество           = 1;
	НоваяСтрокаТовары.Штрихкод		       = ДанныеШтрихкода.EAN;
	НоваяСтрокаТовары.КодМаркировки	       = ДанныеШтрихкода.ШтрихкодУпаковки.ЗначениеШтрихкода;
	
	НоменклатураВДокументахСервер.ЗаполнитьДанныеВСтрокеТабличнойЧасти(Объект, "Запасы", НоваяСтрокаТовары);
	
	НоваяСтрокаТовары.НеобходимостьВводаАкцизнойМарки = Истина;
	
	Результат.ДобавленныеСтроки.Добавить(НоваяСтрокаТовары);
	
	СтрокаАкцизнаяМарка = Объект.АкцизныеМарки.Добавить();
	СтрокаАкцизнаяМарка.КлючСвязи        = НоваяСтрокаТовары.КлючСвязи;
	СтрокаАкцизнаяМарка.КодАкцизнойМарки = ДанныеШтрихкода.ШтрихкодУпаковки;
	СтрокаАкцизнаяМарка.АкцизнаяМарка    = ДанныеШтрихкода.ШтрихкодУпаковки;
	СтрокаАкцизнаяМарка.Справка2         = ДанныеШтрихкода.Справка2;
	
	Возврат Результат;
	
КонецФункции

// Заполняет табличные части Акцизные марки и Товары по данным дерева упаковок.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ТТНИсходящаяЕГАИС - ТТН ЕГАИС (исходящая).
//  ДеревоУпаковок - ДеревоЗначений - дерево упаковок.
//  ШтрихкодыУпаковок - ТаблицаЗначений - таблица штрихкодов упаковок и их хеш-сумм.
//  УпаковкаВерхнегоУровня - СправочникСсылка.ШтрихкодыУпаковокТоваров - Упаковка верхнего уровня.
//
Процедура ЗаполнитьТоварыИАкцизныеМарки(ДокументОбъект, ДеревоУпаковок, ПараметрыЗаполнения, УпаковкаВерхнегоУровня = Неопределено) Экспорт
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьТоварыИАкцизныеМарки(
			ДокументОбъект, СтрокаДерева, ПараметрыЗаполнения,
			УпаковкаВерхнегоУровняСтрокиДерева);
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьДанныеШтрихкодаЕдиницыСНомеромИСерией(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Результат = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	Результат.ТекстОшибки = НСтр("ru = 'Обработка кодов DataMatrix в документе Чек ККМ не поддерживается. Считайте код акцизной марки.'");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ГосИС

Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Если ДанныеШтрихкода.ВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.Алкогольная) <> Неопределено Тогда
		
		Если ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		
			Возврат ОбработатьДанныеШтрихкодаЕдиницыАлкогольнойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
		ИначеЕсли ДанныеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix Тогда
			
			Возврат ОбработатьДанныеШтрихкодаЕдиницыСНомеромИСерией(Форма, ДанныеШтрихкода, ПараметрыСканирования);
			
		КонецЕсли;
		
	ИначеЕсли ДанныеШтрихкода.ВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.Табак) <> Неопределено Тогда
	
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ДанныеШтрихкода.ТипУпаковки) Тогда
			
			Возврат ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма,ДанныеШтрихкода, ВложенныеШтрихкоды, ПараметрыСканирования);
			
		Иначе
			
			Возврат ОбработатьДанныеШтрихкодаЕдиницыТабачнойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ВложенныеШтрихкоды, ПараметрыСканирования) Экспорт
	
	РезультатОбработки = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	ПараметрыЗаполнения = АкцизныеМаркиЕГАИС.ПараметрыЗаполненияТоваровИАкцизныхМарок(Форма, Истина, ПараметрыСканирования);
	ПараметрыЗаполнения.ЕстьСправка2                   = Ложь;
	ПараметрыЗаполнения.ПараметрыУказанияСерий         = ИнтеграцияМОТПУНФ.ПараметрыУказанияСерий();
	ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция = "НоменклатураЕГАИС";
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Объект = Форма;
	КонецЕсли;
	
	ЗаполнитьТоварыИАкцизныеМаркиМаркируемойпродукции(Объект, ВложенныеШтрихкоды.МаркированныеТовары, ПараметрыЗаполнения);
	
	РезультатОбработки.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	РезультатОбработки.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаЕдиницыТабачнойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования, ПараметрыЗаполнения = Неопределено)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Объект = Форма;
	КонецЕсли;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		
		РезультатОбработки     = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
		РодительскийШтрихкод   = Неопределено;
		ПараметрыУказанияСерий = Неопределено;
		
	Иначе
		РезультатОбработки   = ПараметрыЗаполнения;
		Если ПараметрыЗаполнения.Свойство("РодительскийШтрихкод") Тогда
			РодительскийШтрихкод = ПараметрыЗаполнения.РодительскийШтрихкод
		Иначе
			РодительскийШтрихкод = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// Проверка на наличие подобной марки в документе.
	Штрихкод = ДанныеШтрихкода.ШтрихкодУпаковки;
	СтруктураПоискаМарки = Новый Структура;
	СтруктураПоискаМарки.Вставить("АкцизнаяМарка", Штрихкод);
	СтрокиМарок = Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоискаМарки);
	Если СтрокиМарок.Количество() > 0 Тогда 
		Возврат РезультатОбработки;
	КонецЕсли;
	
	НоваяСтрокаТовары = Объект.Запасы.Добавить();
	НоваяСтрокаТовары.Номенклатура	= ДанныеШтрихкода.Номенклатура;
	НоваяСтрокаТовары.Количество	= ДанныеШтрихкода.КоличествоПачек;
	НоваяСтрокаТовары.Партия		= ДанныеШтрихкода.Серия;
	НоваяСтрокаТовары.Штрихкод		= ДанныеШтрихкода.ШтрихкодУпаковки.ЗначениеШтрихкода;
	НоваяСтрокаТовары.КодМаркировки	= ДанныеШтрихкода.ШтрихкодУпаковки.ЗначениеШтрихкода;
	
	МРЦ = 0;
	Если ДанныеШтрихкода.Свойство("МРЦ", МРЦ) Тогда
		
		Если ДанныеШтрихкода.КоличествоПачек > 1 Тогда
			МРЦ = МРЦ / ДанныеШтрихкода.КоличествоПачек;
		КонецЕсли;
		
		НоваяСтрокаТовары.МРЦ = МРЦ;
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ЗаполнитьДанныеВСтрокеТабличнойЧасти(Объект, "Запасы", НоваяСтрокаТовары);
	
	РезультатОбработки.ДобавленныеСтроки.Добавить(НоваяСтрокаТовары);
	
	Если РодительскийШтрихкод <> Неопределено Тогда
		
		ОтборАкцизныхМарок = Новый Структура("АкцизнаяМарка", РодительскийШтрихкод);
		РодительУказан = Объект.АкцизныеМарки.НайтиСтроки(ОтборАкцизныхМарок).Количество();
		
		Если Не РодительУказан Тогда
			НоваяСтрокаУпаковки = Объект.АкцизныеМарки.Добавить();
			НоваяСтрокаУпаковки.АкцизнаяМарка = РодительскийШтрихкод;
		КонецЕсли;
		
	Иначе
		НоваяСтрокаУпаковки = Объект.АкцизныеМарки.Добавить();
		НоваяСтрокаУпаковки.АкцизнаяМарка = ДанныеШтрихкода.ШтрихкодУпаковки;
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Заполняет табличные части Акцизные марки и Товары по данным дерева упаковок.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ТТНИсходящаяЕГАИС - ТТН ЕГАИС (исходящая).
//  ДеревоУпаковок - ДеревоЗначений - дерево упаковок.
//  ШтрихкодыУпаковок - ТаблицаЗначений - таблица штрихкодов упаковок и их хеш-сумм.
//  УпаковкаВерхнегоУровня - СправочникСсылка.ШтрихкодыУпаковокТоваров - Упаковка верхнего уровня.
//
Процедура ЗаполнитьТоварыИАкцизныеМаркиМаркируемойПродукции(ДокументОбъект, ТаблицаУпаковок, ПараметрыЗаполнения, УпаковкаВерхнегоУровня = Неопределено) Экспорт
	
	Для Каждого СтрокаУпаковки Из ТаблицаУпаковок Цикл 
		
		Если СтрокаУпаковки.ГрупповаяТоварнаяУпаковка Тогда 
			Продолжить;
		КонецЕсли;
		
		ОбработатьДанныеШтрихкодаЕдиницыТабачнойПродукции(ДокументОбъект, СтрокаУпаковки, Неопределено, ПараметрыЗаполнения);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли