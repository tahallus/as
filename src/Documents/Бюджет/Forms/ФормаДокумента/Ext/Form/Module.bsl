
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	Периодичность = ПериодичностьСценарияПланирования(Объект.СценарийПланирования);
	Пользователь = Пользователи.ТекущийПользователь();
	
	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновноеПодразделение");
	ОсновноеПодразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	МобильныйКлиентУНФ.НастроитьФормуОбъектаМобильныйКлиент(Элементы, "Остатки,ПрямыеЗатраты,КосвенныеЗатраты,Поступления,Выбытия,Доходы,Расходы,Операции");
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() ИЛИ Объект.ИспользоватьПродвинутыйРежимПросмотра Тогда
		Элементы.ГруппаПродвинутыйРежим.Видимость = Истина;
		Элементы.ГруппаОбычныйРежим.Видимость =  Ложь;
	Иначе
		Элементы.ГруппаПродвинутыйРежим.Видимость = Ложь;
		Элементы.ГруппаОбычныйРежим.Видимость =  Истина;
		ПриСозданииНаСервереОбычныйРежим();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Объект.Проведен Тогда
		ПараметрыЗакрытия = Новый Структура;
		ПараметрыЗакрытия.Вставить("Ссылка", Объект.Ссылка);
		ПараметрыЗакрытия.Вставить("НачалоПериода", Объект.ДатаНачала);
		ПараметрыЗакрытия.Вставить("КонецПериода", Объект.ДатаОкончания);
		ПараметрыЗакрытия.Вставить("Периодичность", Периодичность);
		ПараметрыЗакрытия.Вставить("СценарийПланирования", Объект.СценарийПланирования);
		Оповестить("ЗакрытиеФормыБюджета",  ПараметрыЗакрытия, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если НЕ Объект.ИспользоватьПродвинутыйРежимПросмотра Тогда
		
		Если ИмяСобытия = "ЗаписьПоказателяФинансовыхОтчетов"  Тогда
		
			ЗагрузитьПоказателиОтчетов();
			ОбновитьДеревьяФормы();
			
			Если Параметр.ВидОтчета = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДоходыРасходы") Тогда
				ИмяДерева = "ДеревоПоказателейДоходыРасходы";
			ИначеЕсли Параметр.ВидОтчета = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДенежныйПоток") Тогда
				ИмяДерева = "ДеревоПоказателейДенежныйПоток";
			Иначе // Баланс
				ИмяДерева = "ДеревоПоказателейБаланс";
			КонецЕсли;
			
			ЭлементыДерева = ЭтаФорма[ИмяДерева].ПолучитьЭлементы();
			
			ИдентификаторСтроки = 0;
			ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
				"Показатель",
				ИдентификаторСтроки,
				ЭлементыДерева,
				Параметр.Ссылка,
				Ложь);
			
			Элементы[ИмяДерева].ТекущаяСтрока = ИдентификаторСтроки;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ПродвинутыйРежимПросмотра

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
	Компания = СтруктураДанные.Компания;
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
Процедура СценарийПланированияПриИзменении(Элемент)
	
	Периодичность = ПериодичностьСценарияПланирования(Объект.СценарийПланирования);
	ВыровнятьДатуПланирования();
	ОбновитьДеревьяФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ВыровнятьДатуПланирования();
	
	ПериодПланирования.ДатаНачала = Объект.ДатаНачала;
	ПриИзмененииПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ВыровнятьДатуПланирования();
	
	ПериодПланирования.ДатаОкончания = Объект.ДатаОкончания;
	ПриИзмененииПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

&НаКлиенте
Процедура ПрямыеЗатратыДатаПланированияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СценарийПланирования)
	   И Элементы.ПрямыеЗатраты.ТекущиеДанные.ДатаПланирования <> '00010101' Тогда
		
		ВыровнятьДатуПланированияПоПериодуПланирования(Элементы.ПрямыеЗатраты.ТекущиеДанные.ДатаПланирования);	
		
	КонецЕсли;	

КонецПроцедуры // ПоступленияДатаПланированияПриИзменении()

&НаКлиенте
Процедура КосвенныеЗатратыДатаПланированияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СценарийПланирования)
	   И Элементы.КосвенныеЗатраты.ТекущиеДанные.ДатаПланирования <> '00010101' Тогда
		
		ВыровнятьДатуПланированияПоПериодуПланирования(Элементы.КосвенныеЗатраты.ТекущиеДанные.ДатаПланирования);	
		
	КонецЕсли;	

КонецПроцедуры // КосвенныеЗатратыДатаПланированияПриИзменении()

&НаКлиенте
Процедура ДоходыДатаПланированияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СценарийПланирования)
	   И Элементы.Доходы.ТекущиеДанные.ДатаПланирования <> '00010101' Тогда
		
		ВыровнятьДатуПланированияПоПериодуПланирования(Элементы.Доходы.ТекущиеДанные.ДатаПланирования);	
		
	КонецЕсли;	

КонецПроцедуры // ДоходыДатаПланированияПриИзменении()

&НаКлиенте
Процедура ДоходыСчетПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Доходы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Счет", СтрокаТабличнойЧасти.Счет);
	
	СтруктураДанные = ПолучитьДанныеТипСчета(СтруктураДанные);
		
	Если СтруктураДанные.ТипСчетаПрочие Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Неопределено;
		СтрокаТабличнойЧасти.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Прочее");
	Иначе
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиница) Тогда
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ОсновноеПодразделение;
		КонецЕсли;
		СтрокаТабличнойЧасти.НаправлениеДеятельности = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ДоходыСчетПриИзменении()

&НаКлиенте
Процедура РасходыДатаПланированияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СценарийПланирования)
	   И Элементы.Расходы.ТекущиеДанные.ДатаПланирования <> '00010101' Тогда
		
		ВыровнятьДатуПланированияПоПериодуПланирования(Элементы.Расходы.ТекущиеДанные.ДатаПланирования);	
		
	КонецЕсли;	

КонецПроцедуры // РасходыДатаПланированияПриИзменении()

&НаКлиенте
Процедура РасходыСчетПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Счет", СтрокаТабличнойЧасти.Счет);
	
	СтруктураДанные = ПолучитьДанныеТипСчета(СтруктураДанные);
		
	Если СтруктураДанные.ТипСчетаПрочие Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Неопределено;
		СтрокаТабличнойЧасти.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Прочее");
	Иначе
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиница) Тогда
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ОсновноеПодразделение;
		КонецЕсли;
		СтрокаТабличнойЧасти.НаправлениеДеятельности = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // РасходыСчетПриИзменении()

&НаКлиенте
Процедура ПоступленияДатаПланированияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СценарийПланирования)
	   И Элементы.Поступления.ТекущиеДанные.ДатаПланирования <> '00010101' Тогда
		
		ВыровнятьДатуПланированияПоПериодуПланирования(Элементы.Поступления.ТекущиеДанные.ДатаПланирования);	
		
	КонецЕсли;	

КонецПроцедуры // ПоступленияДатаПланированияПриИзменении()

&НаКлиенте
Процедура ВыбытияДатаПланированияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СценарийПланирования)
	   И Элементы.Выбытия.ТекущиеДанные.ДатаПланирования <> '00010101' Тогда
	   
		ВыровнятьДатуПланированияПоПериодуПланирования(Элементы.Выбытия.ТекущиеДанные.ДатаПланирования);	
		
	КонецЕсли;	

КонецПроцедуры // ВыбытияДатаПланированияПриИзменении()

&НаКлиенте
Процедура ОперацииДатаПланированияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СценарийПланирования)
	   И Элементы.Операции.ТекущиеДанные.ДатаПланирования <> '00010101' Тогда
		
		ВыровнятьДатуПланированияПоПериодуПланирования(Элементы.Операции.ТекущиеДанные.ДатаПланирования);	
		
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	РазностьДат = ДокументыУНФ.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"Компания",
		Константы.УчетПоКомпании.Компания(Организация)
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

&НаСервереБезКонтекста
Функция ПериодичностьСценарияПланирования(СценарийПланирования)
	
	Если Не ЗначениеЗаполнено(СценарийПланирования) Тогда
		Возврат Перечисления.Периодичность.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СценарийПланирования, "Периодичность");
	
КонецФункции // ПолучитьДанныеПериодаПланирования()

&НаКлиенте
Процедура ВыровнятьДатуПланированияПоПериодуПланирования(ДатаПланирования)
	
	Если Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
		
		ДатаПланирования = НачалоНедели(ДатаПланирования);
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
		
		Если День(ДатаПланирования) < 11 Тогда
			
			ДатаПланирования = Дата(Год(ДатаПланирования), Месяц(ДатаПланирования), 1);
			
		ИначеЕсли День(ДатаПланирования) < 21 Тогда	
			
			ДатаПланирования = Дата(Год(ДатаПланирования), Месяц(ДатаПланирования), 11);
			
		Иначе
			
			ДатаПланирования = Дата(Год(ДатаПланирования), Месяц(ДатаПланирования), 21);
			
		КонецЕсли;
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		
		ДатаПланирования = НачалоМесяца(ДатаПланирования);
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		
		ДатаПланирования = НачалоКвартала(ДатаПланирования);
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
		
		МесяцДатыНачала = Месяц(ДатаПланирования);
		
		ДатаПланирования = НачалоГода(ДатаПланирования);
		
		Если МесяцДатыНачала > 6 Тогда
			
			ДатаПланирования = ДобавитьМесяц(ДатаПланирования, 6);
			
		КонецЕсли;
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		
		ДатаПланирования = НачалоГода(ДатаПланирования);
		
	Иначе
		
		ДатаПланирования = '00010101';
		
	КонецЕсли;
	
	Если Объект.ДатаНачала <> '00010101'
		И (ДатаПланирования < Объект.ДатаНачала
		ИЛИ ДатаПланирования > Объект.ДатаОкончания) Тогда
		
		ДатаПланирования = Объект.ДатаНачала;
		
	КонецЕсли;
	
КонецПроцедуры // ВыровнятьДатуПланированияПоПериодуПланирования()

&НаКлиенте
Процедура ВыровнятьДатуПланирования()
	
	Для каждого СтрокаТабличнойЧасти Из Объект.ПрямыеЗатраты Цикл
		ВыровнятьДатуПланированияПоПериодуПланирования(СтрокаТабличнойЧасти.ДатаПланирования);
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.КосвенныеЗатраты Цикл
		ВыровнятьДатуПланированияПоПериодуПланирования(СтрокаТабличнойЧасти.ДатаПланирования);
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Доходы Цикл
		ВыровнятьДатуПланированияПоПериодуПланирования(СтрокаТабличнойЧасти.ДатаПланирования);
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
		ВыровнятьДатуПланированияПоПериодуПланирования(СтрокаТабличнойЧасти.ДатаПланирования);
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Поступления Цикл
		ВыровнятьДатуПланированияПоПериодуПланирования(СтрокаТабличнойЧасти.ДатаПланирования);
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Выбытия Цикл
		ВыровнятьДатуПланированияПоПериодуПланирования(СтрокаТабличнойЧасти.ДатаПланирования);
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
		ВыровнятьДатуПланированияПоПериодуПланирования(СтрокаТабличнойЧасти.ДатаПланирования);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеТипСчета(СтруктураДанные)
	
	Если СтруктураДанные.Счет.ТипСчета = Перечисления.ТипыСчетов.ПрочиеДоходы
		ИЛИ СтруктураДанные.Счет.ТипСчета = Перечисления.ТипыСчетов.ПрочиеРасходы
		ИЛИ СтруктураДанные.Счет.ТипСчета = Перечисления.ТипыСчетов.ПроцентыПоКредитам Тогда
	
		СтруктураДанные.Вставить("ТипСчетаПрочие", Истина);
		
	Иначе
		
		СтруктураДанные.Вставить("ТипСчетаПрочие", Ложь);
		
	КонецЕсли;	
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеТипСчета()

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбычныйРежимПросмотра

#Область СобытияФормыОбычныйРежим

&НаСервере
Процедура ПриСозданииНаСервереОбычныйРежим()
	
	ИнициализироватьРеквизитыФормы();
	ЗагрузитьПоказателиОтчетов();
	ОбновитьДеревьяФормы();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРеквизитыФормы()
	
	УчетПоНесколькимНаправлениямДеятельности = ПолучитьФункциональнуюОпцию("УчетПоНесколькимНаправлениямДеятельности"); 
	ПериодПланирования.ДатаНачала = Объект.ДатаНачала;
	ПериодПланирования.ДатаОкончания = Объект.ДатаОкончания;
	
	ПоказателиБизнесаФормы.ИнициализироватьСлужебныеРеквизитыФормы(ЭтаФорма);
	ПоказателиБизнесаФормы.УстановитьУсловноеОформление(УсловноеОформление);
	
	ПереключитьСтраницу(Элементы, ВидыОтчетов, "ДекорацияДоходыРасходы");
	
	// Обход ошибки: EDT не поддерживает значение Кольцевая в метаданных.
	ДиаграммаРасходы.ТипДиаграммы = ТипДиаграммы.Кольцевая;
	ДиаграммаДоходы.ТипДиаграммы = ТипДиаграммы.Кольцевая;
	ДиаграммаПоступления.ТипДиаграммы = ТипДиаграммы.Кольцевая;
	ДиаграммаВыбытия.ТипДиаграммы = ТипДиаграммы.Кольцевая;
	ДиаграммаАктивы.ТипДиаграммы = ТипДиаграммы.Кольцевая;
	ДиаграммаПассивы.ТипДиаграммы = ТипДиаграммы.Кольцевая;
	
	// В кольцевые диаграммы необходимо добавить по одной точке
	Если ДиаграммаРасходы.Точки.Количество() = 0 Тогда
		
		ДиаграммаРасходы.Точки.Добавить(НСтр("ru = 'РАСХОДЫ'"));
		ДиаграммаДоходы.Точки.Добавить(НСтр("ru = 'ДОХОДЫ'"));
		ДиаграммаПоступления.Точки.Добавить(НСтр("ru = 'ПРИХОД'"));
		ДиаграммаВыбытия.Точки.Добавить(НСтр("ru = 'ВЫБЫТИЯ'"));
		ДиаграммаАктивы.Точки.Добавить(НСтр("ru = 'АКТИВЫ'"));
		ДиаграммаПассивы.Точки.Добавить(НСтр("ru = 'ПАССИВЫ'"));
		
		ПоказателиБизнесаФормы.ИнициализироватьПустуюДиаграмму(ДиаграммаДоходы);
		ПоказателиБизнесаФормы.ИнициализироватьПустуюДиаграмму(ДиаграммаРасходы);
		ПоказателиБизнесаФормы.ИнициализироватьПустуюДиаграмму(ДиаграммаПоступления);
		ПоказателиБизнесаФормы.ИнициализироватьПустуюДиаграмму(ДиаграммаВыбытия);
		ПоказателиБизнесаФормы.ИнициализироватьПустуюДиаграмму(ДиаграммаАктивы);
		ПоказателиБизнесаФормы.ИнициализироватьПустуюДиаграмму(ДиаграммаПассивы);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПоказателиОтчетов()
	
	ПоказателиБизнесаФормы.ЗагрузитьПоказателиОтчетов(ЭтаФорма, Неопределено, Истина, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормыПростойРежим

&НаКлиенте
Процедура ПереключитьРежимПросмотра(Команда)
	
	Объект.ИспользоватьПродвинутыйРежимПросмотра = НЕ Объект.ИспользоватьПродвинутыйРежимПросмотра;
	Модифицированность = Истина;
	
	Элементы.ГруппаПродвинутыйРежим.Видимость = Объект.ИспользоватьПродвинутыйРежимПросмотра;
	Элементы.ГруппаОбычныйРежим.Видимость =  НЕ Объект.ИспользоватьПродвинутыйРежимПросмотра;
	
	Если НЕ Объект.ИспользоватьПродвинутыйРежимПросмотра Тогда
		ПриСозданииНаСервереОбычныйРежим();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериод(Команда)
	
	ОбщегоНазначенияУНФКлиент.РедактироватьПериод(Объект, Неопределено,
		Новый ОписаниеОповещения("УстановитьПериодЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Период = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Период.ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно выбрать неограниченный период.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	Иначе
		
		ПериодПланирования = Период;
		Объект.ДатаНачала = ПериодПланирования.ДатаНачала;
		Объект.ДатаОкончания = ПериодПланирования.ДатаОкончания;
		
		ВыровнятьДатуПланирования();
		ПриИзмененииПериода();
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПереключениеСтраниц

&НаКлиенте
Процедура ДекорацияВидОтчетаНажатие(Элемент)
	
	Если Элемент.Имя = "ДекорацияДоходыРасходы" Тогда
		ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДоходыРасходы");
	ИначеЕсли Элемент.Имя = "ДекорацияДенежныйПоток" Тогда
		ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДенежныйПоток");
	Иначе // Баланс
		ВыбранныйОтчет =  ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.Баланс");
	КонецЕсли;
	
	ПереключитьСтраницу(Элементы, ВидыОтчетов, Элемент.Имя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереключитьСтраницу(Элементы, ВидыОтчетов, АктивнаяСтраница)
	
	Для каждого ВидОтчета Из ВидыОтчетов Цикл
		
		ИмяДекорации = "Декорация" + ВидОтчета.Представление;
		ИмяГруппы = "ГруппаДерево" + ВидОтчета.Представление;
		ИмяПравойПанели = "ГруппаДиаграммы" + ВидОтчета.Представление;
		
		Если ИмяДекорации = АктивнаяСтраница Тогда
			Элементы[ИмяДекорации].Шрифт = Новый Шрифт(Элементы[ИмяДекорации].Шрифт,,,Истина);
			Элементы.ГруппаВариантыОтчетов.ТекущаяСтраница = Элементы[ИмяГруппы];
			Элементы.ПраваяПанельСтраницы.ТекущаяСтраница = Элементы[ИмяПравойПанели];
		Иначе
			Элементы[ИмяДекорации].Шрифт = Новый Шрифт(Элементы[ИмяДекорации].Шрифт,,,Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборов(Элемент)
	
	Элементы.ПраваяПанельСтраницы.Видимость = НЕ Элементы.ПраваяПанельСтраницы.Видимость;
	Элементы.ДекорацияРазвернутьДиаграммы.Видимость = НЕ Элементы.ПраваяПанельСтраницы.Видимость;
	
	Элементы.ДекорацияЗаголовокТекущегоПоказателя.Видимость = Элементы.ПраваяПанельСтраницы.Видимость;
	Элементы.ДекорацияОписаниеТекущегоПоказателя.Видимость = Элементы.ПраваяПанельСтраницы.Видимость;
	Элементы.СвернутьОтборы.Видимость = Элементы.ПраваяПанельСтраницы.Видимость;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийДеревьевФормы

&НаКлиенте
Процедура ДеревоПоказателейДоходыРасходыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоказателейДенежныйПотокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоказателейБалансПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоказателейДоходыРасходыПередНачаломИзменения(Элемент, Отказ)
	
	ПередНачаломИзмененияСтрокиДерева(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоказателейДенежныйПотокПередНачаломИзменения(Элемент, Отказ)
	
	ПередНачаломИзмененияСтрокиДерева(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоказателейБалансПередНачаломИзменения(Элемент, Отказ)
	
	ПередНачаломИзмененияСтрокиДерева(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоказателейДоходыРасходыПриАктивизацииСтроки(Элемент)
	
	Если ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДоходыРасходы") Тогда
		ПриАктивизацииСтрокиДерева(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоказателейДенежныйПотокПриАктивизацииСтроки(Элемент)
	
	Если ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДенежныйПоток") Тогда
		ПриАктивизацииСтрокиДерева(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоказателейБалансПриАктивизацииСтроки(Элемент)
	
	Если ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.Баланс") Тогда
		ПриАктивизацииСтрокиДерева(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоказателейДоходыРасходыИтогоПланПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПоказателейДоходыРасходы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		РаспределитьИтогПропорциональноПоПодчиненным(ТекущиеДанные, ТекущиеДанные.ИтогоПлан);
		ПриИзмененииИтоговойСуммы(ТекущиеДанные);
		ОбновитьИтогиРекурсивноВверхПоИерархии(ТекущиеДанные, "ИтогоПлан");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоказателейДенежныйПотокИтогоПланПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПоказателейДенежныйПоток.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		РаспределитьИтогПропорциональноПоПодчиненным(ТекущиеДанные, ТекущиеДанные.ИтогоПлан);
		ПриИзмененииИтоговойСуммы(ТекущиеДанные);
		ОбновитьИтогиРекурсивноВверхПоИерархии(ТекущиеДанные, "ИтогоПлан");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоказателейБалансИтогоПланПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПоказателейБаланс.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		РаспределитьИтогПропорциональноПоПодчиненным(ТекущиеДанные, ТекущиеДанные.ИтогоПлан);
		ПриИзмененииИтоговойСуммы(ТекущиеДанные);
		ОбновитьИтогиРекурсивноВверхПоИерархии(ТекущиеДанные, "ИтогоПлан");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииИтоговойСуммы(ТекущиеДанные)
	
	Если ТекущиеДанные <> Неопределено Тогда
		ОбновитьЗависимыеЭлементыПоФормуле(ТекущиеДанные.ИдентификаторПоказателя, "ИтогоПлан");
		ОбновитьСуммуВДиаграмме(ТекущиеДанные.Показатель, ТекущиеДанные.ТипПоказателя, ТекущиеДанные.ИтогоПлан);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗависимыеЭлементыПоФормуле(ИдентификаторПоказателя, ИмяКолонки, ДеревоПоказателей = Неопределено)
	
	// Ищем зависимые
	ЗависимыеЭлементы = ПолучитьЗависимыеЭлементыПоказателя(ИдентификаторПоказателя, СоответствиеЗависимыхЭлементов);
	
	Если ДеревоПоказателей = Неопределено Тогда
		Если ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДоходыРасходы") Тогда
			ДеревоПоказателей = ДеревоПоказателейДоходыРасходы;
		ИначеЕсли ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДенежныйПоток") Тогда
			ДеревоПоказателей = ДеревоПоказателейДенежныйПоток;
		Иначе // Баланс
			ДеревоПоказателей = ДеревоПоказателейБаланс;
		КонецЕсли;
	КонецЕсли;
	
	Если ДеревоПоказателей <> Неопределено Тогда
		Для каждого ИдентификаторФормулы Из ЗависимыеЭлементы Цикл
			
			ИдентификаторСтрокиФормула = ИдентификаторыПоказателейДляФормул.Получить(ИдентификаторФормулы);
			Если ИдентификаторСтрокиФормула = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаРасчетногоПоказателя = ДеревоПоказателей.НайтиПоИдентификатору(ИдентификаторСтрокиФормула);
			Если СтрокаРасчетногоПоказателя = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Формула = СтрокаРасчетногоПоказателя.СтрокаФормулы;
			
			Идентификаторы = Новый Массив;
			СоответствиеОперандов = Новый Соответствие;
			
			ПоказателиБизнесаФормулы.ПарсингФормулыНаИдентификаторыОперандов(Формула, Идентификаторы);
			
			Для каждого Идентификатор Из Идентификаторы Цикл
				ИдентификаторСтроки = ИдентификаторыПоказателейДляФормул.Получить(Идентификатор);
				Если ИдентификаторСтроки = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СтрокаПоказателя = ДеревоПоказателей.НайтиПоИдентификатору(ИдентификаторСтроки);
				Если СтрокаПоказателя = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ЗначениеОперанда = СтрокаПоказателя[ИмяКолонки] ;
				Операнд = "[" + Идентификатор + "]";
				ПоказателиБизнесаФормулы.ДобавитьОперандВСтруктуру(СоответствиеОперандов, Операнд, ЗначениеОперанда);
			КонецЦикла;
			
			Результат = Неопределено;
			ПоказателиБизнесаФормулы.РасчетДанныхПоФормуле(Формула, СоответствиеОперандов, Результат); 
			
			Если НЕ Результат.ОшибкаРасчета Тогда
				СтрокаРасчетногоПоказателя[ИмяКолонки] = Результат.Сумма;
				ОбновитьЗависимыеЭлементыПоФормуле(ИдентификаторФормулы, ИмяКолонки);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗависимыеЭлементыПоФормулеЗаПериодПланирования(ИдентификаторПоказателя)
	
	Для каждого Период Из ПериодыПланирования Цикл
		
		ИмяКолонки = СформироватьИмяКолонкиПоПериоду(Период.Значение);
		ОбновитьЗависимыеЭлементыПоФормуле(ИдентификаторПоказателя, ИмяКолонки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоказателейДоходыРасходыИтогоПланНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоПоказателейДоходыРасходы.ТекущиеДанные;
	
	СписокКоманд = Новый СписокЗначений;
	СписокКоманд.Добавить("РаспределитьРавномерно", 	 НСтр("ru = 'Равномерно по периодам'"),, 	БиблиотекаКартинок.СтрелкаВправоБольшая);
	СписокКоманд.Добавить("РаспределитьПропорционально", НСтр("ru = 'Пропорционально по суммам'"),, БиблиотекаКартинок.СтрелкаВправоБольшая);
	СписокКоманд.Добавить("ОткрытьКалькулятор", 		 НСтр("ru = 'По другому показателю'"),, 	БиблиотекаКартинок.Калькулятор);
	СписокКоманд.Добавить("Очистить", 					 НСтр("ru = 'Очистить'"),, 					БиблиотекаКартинок.ПлатежныйКалендарьОтменить);
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("ОкончаниеВыбораИзСпискаКонтекстногоМеню", ЭтаФорма, ТекущиеДанные);
	ПоказатьВыборИзМеню(ОповещениеОВыборе, СписокКоманд, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеВыбораИзСпискаКонтекстногоМеню(Результат, ТекущиеДанные) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ДеревоПоказателейДоходыРасходы.ЗакончитьРедактированиеСтроки(Ложь);
	Элементы.ДеревоПоказателейДенежныйПоток.ЗакончитьРедактированиеСтроки(Ложь);
	Элементы.ДеревоПоказателейБаланс.ЗакончитьРедактированиеСтроки(Ложь);
	
	Если Результат.Значение = "РаспределитьРавномерно" Тогда
		РаспределитьИтог(ТекущиеДанные);
	ИначеЕсли Результат.Значение = "РаспределитьПропорционально" Тогда
		РаспределитьИтогПропорциональноПоПодчиненным(ТекущиеДанные, ТекущиеДанные.ИтогоПлан);
		ОбновитьИтогиРекурсивноВверхПоИерархии(ТекущиеДанные, "ИтогоПлан");
	ИначеЕсли Результат.Значение = "ОткрытьКалькулятор" Тогда
		РассчитатьСуммуПоДругомуПоказателю(ТекущиеДанные);
	ИначеЕсли Результат.Значение = "Очистить" Тогда
		ОчиститьДанные(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанные(СтрокаДерева)
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонкиИтог = "ИтогоПлан";
	Сумма = 0;
	
	СтрокаДерева[ИмяКолонкиИтог] = Сумма;
	
	Для каждого Период Из ПериодыПланирования Цикл
		
		ИмяКолонки = СформироватьИмяКолонкиПоПериоду(Период.Значение);
		СтрокаДерева[ИмяКолонки] = Сумма;
		
		Если ОбновлятьДанныеВТаблице(СтрокаДерева.ТипПоказателя) Тогда
			ОбновитьДанныеВТаблицахДокумента(СтрокаДерева, Период.Значение, Сумма);
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлементыТекущейСтроки = СтрокаДерева.ПолучитьЭлементы();
	Для каждого ЭлементСтроки Из ЭлементыТекущейСтроки Цикл
		ОчиститьДанные(ЭлементСтроки);
	КонецЦикла;
	
	ОбновитьЗависимыеЭлементыПоФормулеЗаПериодПланирования(СтрокаДерева.ИдентификаторПоказателя);
	
	ПриИзмененииИтоговойСуммы(СтрокаДерева);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоказателейДенежныйПотокИтогоПланНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоПоказателейДенежныйПоток.ТекущиеДанные;
	
	СписокКоманд = Новый СписокЗначений;
	СписокКоманд.Добавить("РаспределитьРавномерно", 	 НСтр("ru = 'Равномерно по периодам'"),, 	БиблиотекаКартинок.СтрелкаВправоБольшая);
	СписокКоманд.Добавить("РаспределитьПропорционально", НСтр("ru = 'Пропорционально по суммам'"),, БиблиотекаКартинок.СтрелкаВправоБольшая);
	СписокКоманд.Добавить("ОткрытьКалькулятор", 		 НСтр("ru = 'По другому показателю'"),, 	БиблиотекаКартинок.Калькулятор);
	СписокКоманд.Добавить("Очистить", 					 НСтр("ru = 'Очистить'"),, 					БиблиотекаКартинок.ПлатежныйКалендарьОтменить);
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("ОкончаниеВыбораИзСпискаКонтекстногоМеню", ЭтаФорма, ТекущиеДанные);
	ПоказатьВыборИзМеню(ОповещениеОВыборе, СписокКоманд, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоказателейБалансИтогоПланНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоПоказателейДоходыРасходы.ТекущиеДанные;
	
	СписокКоманд = Новый СписокЗначений;
	СписокКоманд.Добавить("РаспределитьРавномерно", 	 НСтр("ru = 'Равномерно по периодам'"),, 	БиблиотекаКартинок.СтрелкаВправоБольшая);
	СписокКоманд.Добавить("РаспределитьПропорционально", НСтр("ru = 'Пропорционально по суммам'"),, БиблиотекаКартинок.СтрелкаВправоБольшая);
	СписокКоманд.Добавить("ОткрытьКалькулятор", 		 НСтр("ru = 'По другому показателю'"),, 	БиблиотекаКартинок.Калькулятор);
	СписокКоманд.Добавить("Очистить", 					 НСтр("ru = 'Очистить'"),, 					БиблиотекаКартинок.ПлатежныйКалендарьОтменить);
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("ОкончаниеВыбораИзСпискаКонтекстногоМеню", ЭтаФорма, ТекущиеДанные);
	ПоказатьВыборИзМеню(ОповещениеОВыборе, СписокКоманд, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьИтог(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СуммаКРаспределению = ТекущиеДанные.ИтогоПлан;
		
	ЭлементыТекущейСтроки = ТекущиеДанные.ПолучитьЭлементы();
	КоличествоПодчиненных = ЭлементыТекущейСтроки.Количество();
		
	Для каждого Период Из ПериодыПланирования Цикл
		
		ИмяКолонки = СформироватьИмяКолонкиПоПериоду(Период.Значение);
		
		Сумма = СуммаКРаспределению / ПериодыПланирования.Количество();
		ТекущиеДанные[ИмяКолонки] = Сумма;
		
		Если ОбновлятьДанныеВТаблице(ТекущиеДанные.ТипПоказателя) Тогда
			
			ОбновитьДанныеВТаблицахДокумента(ТекущиеДанные, Период.Значение, Сумма);
			
		КонецЕсли;
		
		Для каждого ЭлементСтроки Из ЭлементыТекущейСтроки Цикл
			СуммаПодчиненного = ТекущиеДанные[ИмяКолонки] / КоличествоПодчиненных;
			ЭлементСтроки[ИмяКолонки] = СуммаПодчиненного;
			Если ОбновлятьДанныеВТаблице(ЭлементСтроки.ТипПоказателя) Тогда
				ОбновитьДанныеВТаблицахДокумента(ЭлементСтроки, Период.Значение, СуммаПодчиненного);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
		
	Для каждого ЭлементСтроки Из ЭлементыТекущейСтроки Цикл
		ЭлементСтроки["ИтогоПлан"] = СуммаКРаспределению / КоличествоПодчиненных;
		РаспределитьИтог(ЭлементСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьИтогПропорциональноПоПодчиненным(ТекущиеДанные, СуммаКРаспределению)
	
	РаспределитьИтогПропорциональноПоПериодам(ТекущиеДанные, СуммаКРаспределению);
	ОбновитьЗависимыеЭлементыПоФормулеЗаПериодПланирования(ТекущиеДанные.ИдентификаторПоказателя);
	
	РаспределеннаяСумма = 0;
	СуммаДоРаспределения = 0;
	КоличествоЗначений = 0;
	КоличествоРаспределенныхЗначений = 0;
	
	ЭлементыТекущейСтроки = ТекущиеДанные.ПолучитьЭлементы();
	КоличествоЭлементов = ЭлементыТекущейСтроки.Количество();
	
	// Получаем итоговую сумму до изменения
	Для каждого ЭлементСтроки Из ЭлементыТекущейСтроки Цикл
		СуммаДоРаспределения = СуммаДоРаспределения + ЭлементСтроки.ИтогоПлан;
		Если ЭлементСтроки.ИтогоПлан <> 0 Тогда
			КоличествоЗначений = КоличествоЗначений + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если СуммаДоРаспределения = 0 Тогда
		КоличествоЗначений = КоличествоЭлементов;
	КонецЕсли;
	
	Для каждого ЭлементСтроки Из ЭлементыТекущейСтроки Цикл
		
		Если СуммаДоРаспределения = 0 Тогда
			Сумма = СуммаКРаспределению / КоличествоЭлементов;
		Иначе
			КоэффициентРаспределения = ЭлементСтроки.ИтогоПлан / СуммаДоРаспределения;
			Сумма = СуммаКРаспределению * КоэффициентРаспределения;
		КонецЕсли;
		
		Если Сумма <> 0 Тогда
			КоличествоРаспределенныхЗначений = КоличествоРаспределенныхЗначений + 1;
		КонецЕсли;
		
		Если КоличествоЗначений = КоличествоРаспределенныхЗначений Тогда
			Сумма = СуммаКРаспределению - РаспределеннаяСумма;
		КонецЕсли;
		
		ЭлементСтроки.ИтогоПлан = Сумма;
		РаспределеннаяСумма = РаспределеннаяСумма + ЭлементСтроки.ИтогоПлан;
		
		РаспределитьИтогПропорциональноПоПодчиненным(ЭлементСтроки, ЭлементСтроки.ИтогоПлан);
		
	КонецЦикла;
	
	ПриИзмененииИтоговойСуммы(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьИтогПропорциональноПоПериодам(ТекущиеДанные, СуммаКРаспределению)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДоРаспределения = 0;
	РаспределеннаяСумма = 0;
	
	КоличествоПериодов = ПериодыПланирования.Количество();
	КоличествоЗначений = 0;
	
	// Получаем итоговую сумму до изменения и количество ранее заполненных сумм
	Для каждого Период Из ПериодыПланирования Цикл
		ИмяКолонки = СформироватьИмяКолонкиПоПериоду(Период.Значение);
		СуммаДоРаспределения = СуммаДоРаспределения + ТекущиеДанные[ИмяКолонки];
		Если ТекущиеДанные[ИмяКолонки] <> 0 Тогда
			КоличествоЗначений = КоличествоЗначений + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если СуммаДоРаспределения = 0 Тогда
		КоличествоЗначений = КоличествоПериодов;
	КонецЕсли;
	
	КоличествоРаспределенныхЗначений = 0;
	
	Для каждого Период Из ПериодыПланирования Цикл
		
		ИмяКолонки = СформироватьИмяКолонкиПоПериоду(Период.Значение);
		
		Если СуммаДоРаспределения = 0 Тогда
			Сумма = СуммаКРаспределению / КоличествоПериодов;
		Иначе
			КоэффициентРаспределения = ТекущиеДанные[ИмяКолонки] / СуммаДоРаспределения;
			Сумма = СуммаКРаспределению * КоэффициентРаспределения;
		КонецЕсли;
		
		Если Сумма <> 0 Тогда
			КоличествоРаспределенныхЗначений = КоличествоРаспределенныхЗначений + 1;
		КонецЕсли;
		
		Если КоличествоЗначений = КоличествоРаспределенныхЗначений Тогда
			Сумма = СуммаКРаспределению - РаспределеннаяСумма;
		КонецЕсли;
		
		ТекущиеДанные[ИмяКолонки] = Сумма;
		РаспределеннаяСумма = РаспределеннаяСумма + ТекущиеДанные[ИмяКолонки];
		
		Если ОбновлятьДанныеВТаблице(ТекущиеДанные.ТипПоказателя) Тогда
			ОбновитьДанныеВТаблицахДокумента(ТекущиеДанные, Период.Значение, Сумма);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииСуммы(Элемент)
	
	ИмяДерева = Элемент.Родитель.Имя;
	
	ТекущиеДанные = Элементы[ИмяДерева].ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ИмяТекущейКолонки = Прав(Элементы[ИмяДерева].ТекущийЭлемент.Имя, 9);
		ОбновитьИтогиРекурсивноВверхПоИерархии(ТекущиеДанные, ИмяТекущейКолонки);
		ОбновитьИтогиРекурсивноВнизПоИерархии(ТекущиеДанные, ИмяТекущейКолонки);
		ОбновитьКолонкуИтого(ТекущиеДанные);
		
		// Обновление данных ТЧ
		Сумма = ТекущиеДанные[ИмяТекущейКолонки];
		Период = СформироватьПериодПоИмениКолонки(ИмяДерева, Элементы[ИмяДерева].ТекущийЭлемент.Имя);
		ОбновитьДанныеВТаблицахДокумента(ТекущиеДанные, Период, Сумма);
		
		ОбновитьЗависимыеЭлементыПоФормуле(ТекущиеДанные.ИдентификаторПоказателя, ИмяТекущейКолонки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ЗаписьДанныхВТабличныеЧасти

&НаКлиенте
Процедура ОбновитьДанныеВТаблицахДокумента(ТекущиеДанные, Период, Сумма)
	
	Если ТекущиеДанные.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Группа") Тогда
		ПодчиненныеЭлементыТекущейСтроки = ТекущиеДанные.ПолучитьЭлементы();
		ИмяТекущейКолонки = СформироватьИмяКолонкиПоПериоду(Период);
		Для каждого ТекущийПодчиненныйЭлемент Из ПодчиненныеЭлементыТекущейСтроки Цикл
			ОбновитьДанныеВТаблицахДокумента(ТекущийПодчиненныйЭлемент, Период, ТекущийПодчиненныйЭлемент[ИмяТекущейКолонки])
		КонецЦикла;
	Иначе
		Если ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДоходыРасходы") Тогда
			ОбновитьДанныеВТаблицахДоходыРасходы(ТекущиеДанные, Период, Сумма);
		ИначеЕсли ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДенежныйПоток") Тогда
			ОбновитьДанныеВТаблицахДенежныйПоток(ТекущиеДанные, Период, Сумма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеВТаблицахДоходыРасходы(СтрокаДерева, Период, Сумма)
	
	ТабличнаяЧасть = ОпределитьТабличнуюЧастьДокумента(СтрокаДерева);
	Если ТабличнаяЧасть = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоЗатраты = (СтрокаДерева.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.КосвенныеЗатраты")
					ИЛИ СтрокаДерева.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.НезавершенноеПроизводство"));
	
	СтрокиТаблицы = ТабличнаяЧасть.НайтиСтроки(Новый Структура("Счет, ДатаПланирования", СтрокаДерева.ИсточникДанных, Период));
	
	Если СтрокиТаблицы.Количество() = 0 Тогда
		
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.Счет = СтрокаДерева.ИсточникДанных;
		НоваяСтрока.КоррСчет = СтрокаДерева.ИсточникДанных;
		
		Если НЕ ЭтоЗатраты Тогда
			ТипСчетаПрочие = (СтрокаДерева.ТипСчета   =  ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПрочиеДоходы")
							ИЛИ СтрокаДерева.ТипСчета =  ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПрочиеРасходы")
							ИЛИ СтрокаДерева.ТипСчета =  ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПроцентыПоКредитам"));
		
			Если ТипСчетаПрочие Тогда
				НоваяСтрока.СтруктурнаяЕдиница = Неопределено;
				НоваяСтрока.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Прочее");
			Иначе
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтруктурнаяЕдиница) Тогда
					Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
						НоваяСтрока.СтруктурнаяЕдиница = Объект.Подразделение;
					Иначе
						НоваяСтрока.СтруктурнаяЕдиница = ОсновноеПодразделение;
					КонецЕсли;
				КонецЕсли;
				Если УчетПоНесколькимНаправлениямДеятельности Тогда
					НоваяСтрока.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.ОсновноеНаправление");
				Иначе
					НоваяСтрока.НаправлениеДеятельности = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.Сумма = Сумма;
		СтрокиТаблицы.Добавить(НоваяСтрока);
		
	КонецЕсли;
	
	РаспределитьСуммуПоСтрокамТаблицы(СтрокиТаблицы, ТабличнаяЧасть, СтрокаДерева.Показатель, Период, Сумма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеВТаблицахДенежныйПоток(СтрокаДерева, Период, Сумма)
	
	КоррСчет = Неопределено;
	
	ТабличнаяЧасть = ОпределитьТабличнуюЧастьДокумента(СтрокаДерева);
	Если ТабличнаяЧасть = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Доход") Тогда
		КоррСчет = ПредопределенноеЗначение("ПланСчетов.Управленческий.РасчетыСПокупателями");
	Иначе
		КоррСчет = ПредопределенноеЗначение("ПланСчетов.Управленческий.РасчетыСПоставщиками");
	КонецЕсли;
	
	СтрокиТаблицы = ТабличнаяЧасть.НайтиСтроки(Новый Структура("Статья, ДатаПланирования", СтрокаДерева.ИсточникДанных, Период));
	
	Если СтрокиТаблицы.Количество() = 0 Тогда
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.Счет = ПредопределенноеЗначение("ПланСчетов.Управленческий.Банк");
		НоваяСтрока.КоррСчет = КоррСчет;
		НоваяСтрока.Статья = СтрокаДерева.ИсточникДанных;
		НоваяСтрока.Сумма = Сумма;
		СтрокиТаблицы.Добавить(НоваяСтрока);
	КонецЕсли;
	
	РаспределитьСуммуПоСтрокамТаблицы(СтрокиТаблицы, ТабличнаяЧасть, СтрокаДерева.Показатель, Период, Сумма);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьСуммуПоСтрокамТаблицы(СтрокиТаблицы, ТабличнаяЧасть, Показатель, Период, Сумма)
	
	СуммаДо = 0;
	Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		СуммаДо = СуммаДо + СтрокаТаблицы.Сумма;
	КонецЦикла;
	
	РаспределеннаяСумма = 0;
	Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		
		Если Сумма = 0 ИЛИ СуммаДо = 0 Тогда
			ТабличнаяЧасть.Удалить(СтрокаТаблицы);
		КонецЕсли;
		
		СтрокаТаблицы.ДатаПланирования = Период;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Комментарий) Тогда
			СтрокаТаблицы.Комментарий = НСтр("ru = 'По показателю'") + " " + Строка(Показатель);
		КонецЕсли;
		
		Если СуммаДо <> 0 Тогда
			СуммаПоСтроке = Сумма * (СтрокаТаблицы.Сумма / СуммаДо);
		Иначе
			СуммаПоСтроке = 0;
		КонецЕсли;
		
		СтрокаТаблицы.Сумма = СуммаПоСтроке;
		РаспределеннаяСумма = РаспределеннаяСумма + СуммаПоСтроке;
		
	КонецЦикла;
	
	Если Сумма <> РаспределеннаяСумма И СтрокиТаблицы.Количество() > 0 Тогда
		ПоследняяСтрока = СтрокиТаблицы[СтрокиТаблицы.Количество() - 1];
		ПоследняяСтрока.Сумма = ПоследняяСтрока.Сумма + (Сумма - РаспределеннаяСумма);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти 

#Область РаботаСДиаграммами

&НаКлиенте
Процедура ОбновитьСуммуВДиаграмме(Показатель, ТипПоказателя, Сумма);
	
	Если ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДоходыРасходы") Тогда
		 
		Если ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Доход") Тогда
			Диаграмма = ДиаграммаДоходы;
			ДиаграммаЭлемент = Элементы.ДиаграммаДоходы;
		ИначеЕсли ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Расход") Тогда
			Диаграмма = ДиаграммаРасходы;
			ДиаграммаЭлемент = Элементы.ДиаграммаРасходы;
		Иначе
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДенежныйПоток") Тогда
		
		Если ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Доход") Тогда
			Диаграмма = ДиаграммаПоступления;
			ДиаграммаЭлемент = Элементы.ДиаграммаПоступления;
		ИначеЕсли ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Расход") Тогда
			Диаграмма = ДиаграммаВыбытия;
			ДиаграммаЭлемент = Элементы.ДиаграммаВыбытия;
		Иначе
			Возврат;
		КонецЕсли;
		
	Иначе // Баланс
		
		Если ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Доход") Тогда
			Диаграмма = ДиаграммаАктивы;
			ДиаграммаЭлемент = Элементы.ДиаграммаАктивы;
		ИначеЕсли ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Расход") Тогда
			Диаграмма = ДиаграммаПассивы;
			ДиаграммаЭлемент = Элементы.ДиаграммаПассивы;
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Удаляем демо-значения
	Если Диаграмма.Серии.Количество() > 0 Тогда
		
		ЗначениеПервойСерии = Диаграмма.Серии[0].Значение;
		
		Если ЗначениеПервойСерии = Неопределено Тогда
			Диаграмма.Серии.Удалить(0);
			Диаграмма.Серии.Удалить(0);
			Диаграмма.Серии.Удалить(0);
			ДиаграммаЭлемент.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Диаграмма <> Неопределено Тогда
		
		ТекущаяСерия = Диаграмма.УстановитьСерию(Показатель);
		Диаграмма.УстановитьЗначение(0, ТекущаяСерия, Сумма);
		
		// Обновление заголовка, в котором отображаются итоги
		ИтоговаяСумма = 0;
		Для каждого Серия Из Диаграмма.Серии Цикл
			ТекущееЗначение = Диаграмма.ПолучитьЗначение(0, Серия);
			Если ТипЗнч(ТекущееЗначение.Значение) = Тип("Число") Тогда
				ИтоговаяСумма = ИтоговаяСумма + ТекущееЗначение.Значение;
			КонецЕсли;
			Диаграмма.ОбластьЗаголовка.Текст = СформироватьЗаголовокДиаграммы(Диаграмма, ИтоговаяСумма);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСуммуВДиаграммеНаСервере(ВидОтчета, СтрокаДерева, Сумма);
	
	Если ВидОтчета = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДоходыРасходы") Тогда
		 
		Если СтрокаДерева.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Доход") Тогда
			Диаграмма = ДиаграммаДоходы;
			ДиаграммаЭлемент = Элементы.ДиаграммаДоходы;
		ИначеЕсли СтрокаДерева.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Расход") Тогда
			Диаграмма = ДиаграммаРасходы;
			ДиаграммаЭлемент = Элементы.ДиаграммаРасходы;
		Иначе
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ВидОтчета = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДенежныйПоток") Тогда
		
		Если СтрокаДерева.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Доход") Тогда
			Диаграмма = ДиаграммаПоступления;
			ДиаграммаЭлемент = Элементы.ДиаграммаПоступления;
		ИначеЕсли СтрокаДерева.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Расход") Тогда
			Диаграмма = ДиаграммаВыбытия;
			ДиаграммаЭлемент = Элементы.ДиаграммаВыбытия;
		Иначе
			Возврат;
		КонецЕсли;
		
	Иначе // Баланс
		
		Если СтрокаДерева.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Доход") Тогда
			Диаграмма = ДиаграммаАктивы;
			ДиаграммаЭлемент = Элементы.ДиаграммаАктивы;
		ИначеЕсли СтрокаДерева.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Расход") Тогда
			Диаграмма = ДиаграммаПассивы;
			ДиаграммаЭлемент = Элементы.ДиаграммаПассивы;
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Удаляем демо-значения
	Если Диаграмма.Серии.Количество() > 0 Тогда
		
		ЗначениеПервойСерии = Диаграмма.Серии[0].Значение;
		
		Если ЗначениеПервойСерии = Неопределено Тогда
			Диаграмма.Серии.Удалить(0);
			Диаграмма.Серии.Удалить(0);
			Диаграмма.Серии.Удалить(0);
			ДиаграммаЭлемент.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Диаграмма <> Неопределено Тогда
		ТекущаяСерия = Диаграмма.УстановитьСерию(СтрокаДерева.Показатель);
		Диаграмма.УстановитьЗначение(0, ТекущаяСерия, Сумма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьЗначениеДиаграммыПриИзмененииСтрокиДерева(Знач ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Очистка предыдущего выделения
	ОчиститьДиаграммы();
	
	Если ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДоходыРасходы") Тогда
		ПерваяДиаграмма = ДиаграммаДоходы;
		ВтораяДиаграмма = ДиаграммаРасходы;
		ЭлементПерваяДиаграмма = Элементы.ДиаграммаДоходы;
		ЭлементВтораяДиаграмма = Элементы.ДиаграммаРасходы;
	ИначеЕсли ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДенежныйПоток") Тогда
		ПерваяДиаграмма = ДиаграммаПоступления;
		ВтораяДиаграмма = ДиаграммаВыбытия;
		ЭлементПерваяДиаграмма = Элементы.ДиаграммаПоступления;
		ЭлементВтораяДиаграмма = Элементы.ДиаграммаВыбытия;
	Иначе // Баланс
		ПерваяДиаграмма = ДиаграммаАктивы;
		ВтораяДиаграмма = ДиаграммаПассивы;
		ЭлементПерваяДиаграмма = Элементы.ДиаграммаАктивы;
		ЭлементВтораяДиаграмма = Элементы.ДиаграммаПассивы;
	КонецЕсли;
	
	ЗначенияПервойДиаграммы = Новый Массив;
	ЗначенияВторойДиаграммы = Новый Массив;
	
	Если ТекущиеДанные.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Группа") Тогда
		ЗаполнитьЗначенияДиаграммыРекурсивно(ТекущиеДанные.ПолучитьЭлементы(), ПерваяДиаграмма, ВтораяДиаграмма, ЗначенияПервойДиаграммы, ЗначенияВторойДиаграммы)
	ИначеЕсли ТекущиеДанные.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Доход") Тогда
		ЗначенияПервойДиаграммы.Добавить(ПерваяДиаграмма.ПолучитьЗначение(0, ПерваяДиаграмма.УстановитьСерию(ТекущиеДанные.Показатель)));
	ИначеЕсли ТекущиеДанные.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Расход") Тогда
		ЗначенияВторойДиаграммы.Добавить(ВтораяДиаграмма.ПолучитьЗначение(0, ВтораяДиаграмма.УстановитьСерию(ТекущиеДанные.Показатель)));
	Иначе // Формулы не выводятся в диаграмму
		Возврат;
	КонецЕсли;
	
	Если ЭлементПерваяДиаграмма.Доступность Тогда
		ЭлементПерваяДиаграмма.УстановитьВыделенныеЭлементы(ЗначенияПервойДиаграммы);
	КонецЕсли;
	
	Если ЭлементВтораяДиаграмма.Доступность Тогда
		ЭлементВтораяДиаграмма.УстановитьВыделенныеЭлементы(ЗначенияВторойДиаграммы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДиаграммы()
	
	Элементы.ДиаграммаДоходы.УстановитьВыделенныеЭлементы(Новый Массив);
	Элементы.ДиаграммаРасходы.УстановитьВыделенныеЭлементы(Новый Массив);
	Элементы.ДиаграммаПоступления.УстановитьВыделенныеЭлементы(Новый Массив);
	Элементы.ДиаграммаВыбытия.УстановитьВыделенныеЭлементы(Новый Массив);
	Элементы.ДиаграммаАктивы.УстановитьВыделенныеЭлементы(Новый Массив);
	Элементы.ДиаграммаПассивы.УстановитьВыделенныеЭлементы(Новый Массив);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначенияДиаграммыРекурсивно(ЭлементыДерева, ПерваяДиаграмма, ВтораяДиаграмма, ЗначенияПервойДиаграммы, ЗначенияВторойДиаграммы)
	
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ЭлементДерева.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Группа") Тогда
			ЗаполнитьЗначенияДиаграммыРекурсивно(ЭлементДерева.ПолучитьЭлементы(), ПерваяДиаграмма, ВтораяДиаграмма, ЗначенияПервойДиаграммы, ЗначенияВторойДиаграммы);
		ИначеЕсли ЭлементДерева.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Доход") Тогда
			ЗначенияПервойДиаграммы.Добавить(ПерваяДиаграмма.ПолучитьЗначение(0, ПерваяДиаграмма.УстановитьСерию(ЭлементДерева.Показатель)));
		ИначеЕсли ЭлементДерева.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Расход") Тогда
			ЗначенияВторойДиаграммы.Добавить(ВтораяДиаграмма.ПолучитьЗначение(0, ВтораяДиаграмма.УстановитьСерию(ЭлементДерева.Показатель)));
		Иначе // Формулы не выводятся в диаграмму
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьЗаголовокДиаграммы(Диаграмма, Сумма)
	
	Если Диаграмма.Точки.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ШаблонЗаголовка = "%1" + Символы.ПС + "%2";
	ЗаголовокДиаграммы = Диаграмма.Точки[0].Текст;
	
	Возврат СтрШаблон(ШаблонЗаголовка, ЗаголовокДиаграммы, Формат(Сумма, "ЧДЦ=0"));
	
КонецФункции

&НаСервере
Процедура ОбновитьЗаголовкиДиаграммПоВидуОтчета(ВидОтчета, СуммаПервойДиаграммы, СуммаВторойДиаграммы)
	
	Если ВидОтчета = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДоходыРасходы") Тогда
		ПерваяДиаграмма = ДиаграммаДоходы;
		ВтораяДиаграмма = ДиаграммаРасходы;
	ИначеЕсли ВидОтчета = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДенежныйПоток") Тогда
		ПерваяДиаграмма = ДиаграммаПоступления;
		ВтораяДиаграмма = ДиаграммаВыбытия;
	Иначе // Баланс
		ПерваяДиаграмма = ДиаграммаАктивы;
		ВтораяДиаграмма = ДиаграммаПассивы;
	КонецЕсли;
	
	ПерваяДиаграмма.ОбластьЗаголовка.Текст = СформироватьЗаголовокДиаграммы(ПерваяДиаграмма, СуммаПервойДиаграммы);
	ВтораяДиаграмма.ОбластьЗаголовка.Текст = СформироватьЗаголовокДиаграммы(ВтораяДиаграмма, СуммаВторойДиаграммы);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммноеОбновлениеПоказателей

&НаКлиенте
Процедура ОбновитьИтогиРекурсивноВверхПоИерархии(СтрокаДерева, ИмяТекущейКолонки)
	
	СтрокаРодителя = СтрокаДерева.ПолучитьРодителя();
	
	Если ТипЗнч(СтрокаРодителя) = Тип("ДанныеФормыЭлементДерева") Тогда
		
		ИтоговаяСуммаПоРодителю = 0;
		ЭлементыРодителя = СтрокаРодителя.ПолучитьЭлементы();
		
		Для Каждого ЭлементРодителя Из ЭлементыРодителя Цикл
			ИтоговаяСуммаПоРодителю = ИтоговаяСуммаПоРодителю + ЭлементРодителя[ИмяТекущейКолонки];
		КонецЦикла;
		
		СтрокаРодителя[ИмяТекущейКолонки] = ИтоговаяСуммаПоРодителю;
		
		Если ИмяТекущейКолонки = "ИтогоПлан" Тогда
			РаспределитьИтогПропорциональноПоПериодам(СтрокаРодителя, СтрокаРодителя[ИмяТекущейКолонки]);
		Иначе
			ОбновитьКолонкуИтого(СтрокаРодителя);
		КонецЕсли;
		
		ОбновитьИтогиРекурсивноВверхПоИерархии(СтрокаРодителя, ИмяТекущейКолонки);
		
		ОбновитьЗависимыеЭлементыПоФормуле(СтрокаРодителя.ИдентификаторПоказателя, ИмяТекущейКолонки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтогиРекурсивноВнизПоИерархии(СтрокаДерева, ИмяТекущейКолонки)
	
	ИтоговаяСумма = СтрокаДерева[ИмяТекущейКолонки];
	ПодчиненныеЭлементыТекущейСтроки = СтрокаДерева.ПолучитьЭлементы();
	КоличествоПодчиненных = ПодчиненныеЭлементыТекущейСтроки.Количество();
	
	Для каждого ТекущийПодчиненныйЭлемент Из ПодчиненныеЭлементыТекущейСтроки Цикл
		ТекущийПодчиненныйЭлемент[ИмяТекущейКолонки] = ИтоговаяСумма / КоличествоПодчиненных;
		ОбновитьКолонкуИтого(ТекущийПодчиненныйЭлемент);
		ОбновитьЗависимыеЭлементыПоФормуле(ТекущийПодчиненныйЭлемент.ИдентификаторПоказателя, ИмяТекущейКолонки);
		ОбновитьИтогиРекурсивноВнизПоИерархии(ТекущийПодчиненныйЭлемент, ИмяТекущейКолонки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКолонкуИтого(СтрокаДерева)
	
	ИмяКолонкиИтог = "ИтогоПлан";
	ИтоговаяСумма = 0;
	
	// по горизонтали
	Для каждого Период Из ПериодыПланирования Цикл
		ИмяКолонки = СформироватьИмяКолонкиПоПериоду(Период.Значение);
		ИтоговаяСумма = ИтоговаяСумма + СтрокаДерева[ИмяКолонки];
	КонецЦикла;
	
	СтрокаДерева[ИмяКолонкиИтог] = ИтоговаяСумма;
	
	ОбновитьСуммуВДиаграмме(СтрокаДерева.Показатель, СтрокаДерева.ТипПоказателя, ИтоговаяСумма);
	ОбновитьЗависимыеЭлементыПоФормуле(СтрокаДерева.ИдентификаторПоказателя, ИмяКолонкиИтог);

КонецПроцедуры

#КонецОбласти 

&НаСервере
Процедура ЗаполнитьДеревьяОтчетовДаннымиДокумента()
	
	ИмяКолонкиИтог = "ИтогоПлан";
	
	Для каждого ВидОтчета Из ВидыОтчетов Цикл
		
		ДеревоПоказателей = Неопределено;
	
		Если ВидОтчета.Значение = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДоходыРасходы") Тогда
			ДеревоПоказателей = ДеревоПоказателейДоходыРасходы;
		ИначеЕсли ВидОтчета.Значение = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДенежныйПоток") Тогда
			ДеревоПоказателей = ДеревоПоказателейДенежныйПоток;
		Иначе // Баланс
			ДеревоПоказателей = ДеревоПоказателейБаланс;
		КонецЕсли;
		
		Если ДеревоПоказателей = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИтогоДоходы = 0;
		ИтогоРасходы = 0;
		МассивПоказателейДляПересчета = Новый Массив;
		БюджетМодифицирован = Модифицированность ИЛИ Объект.Ссылка.Пустая();
		ВыборкаСуммПоказателей = ПоказателиБизнеса.ВыборкаСуммПоказателейБюджета(ВидОтчета.Значение, Объект, БюджетМодифицирован);
		
		Пока ВыборкаСуммПоказателей.Следующий() Цикл
			
			ИдентификаторПоказателя = ИдентификаторыПоказателей.Получить(ВыборкаСуммПоказателей.Показатель);
			Если ИдентификаторПоказателя = Неопределено Тогда
				Продолжить;
			КонецЕсли;
				
			СтрокаДерева = ДеревоПоказателей.НайтиПоИдентификатору(ИдентификаторПоказателя);
			Если СтрокаДерева = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКолонки = СформироватьИмяКолонкиПоПериоду(НачалоМесяца(ВыборкаСуммПоказателей.ДатаПланирования));
			СтрокаДерева[ИмяКолонки] = СтрокаДерева[ИмяКолонки] + ВыборкаСуммПоказателей.Сумма;
			СтрокаДерева[ИмяКолонкиИтог] = СтрокаДерева[ИмяКолонкиИтог] + ВыборкаСуммПоказателей.Сумма;
			
			РодительСтроки = СтрокаДерева.ПолучитьРодителя();
			Пока РодительСтроки <> Неопределено Цикл
				РодительСтроки[ИмяКолонки] = РодительСтроки[ИмяКолонки] + ВыборкаСуммПоказателей.Сумма;
				РодительСтроки[ИмяКолонкиИтог] = РодительСтроки[ИмяКолонкиИтог] + ВыборкаСуммПоказателей.Сумма;
				РодительСтроки = РодительСтроки.ПолучитьРодителя();
			КонецЦикла;
			
			МассивПоказателейДляПересчета.Добавить(ВыборкаСуммПоказателей.ИдентификаторПоказателя);
			
			// Диаграмма
			Если СтрокаДерева.ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Доход Тогда
				ИтогоДоходы = ИтогоДоходы + ВыборкаСуммПоказателей.Сумма;
			ИначеЕсли СтрокаДерева.ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Расход Тогда
				ИтогоРасходы = ИтогоРасходы + ВыборкаСуммПоказателей.Сумма;
			Иначе
				Продолжить;
			КонецЕсли;
			
			ОбновитьСуммуВДиаграммеНаСервере(ВидОтчета.Значение, СтрокаДерева, СтрокаДерева[ИмяКолонкиИтог]);
			
		КонецЦикла;
		
		ОбновитьЗаголовкиДиаграммПоВидуОтчета(ВидОтчета.Значение, ИтогоДоходы, ИтогоРасходы);
		
		// Пересчитываем зависимые элементы
		МассивПоказателейДляПересчета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПоказателейДляПересчета);
		Для каждого ИдентификаторПоказателя Из МассивПоказателейДляПересчета Цикл
			ЗависимыеЭлементы = ПолучитьЗависимыеЭлементыПоказателя(ИдентификаторПоказателя, СоответствиеЗависимыхЭлементов);
			Если ЗависимыеЭлементы.Количество() > 0 Тогда
				Для каждого Период Из ПериодыПланирования Цикл
					ИмяКолонки = СформироватьИмяКолонкиПоПериоду(НачалоМесяца(Период.Значение));
					ОбновитьЗависимыеЭлементыПоФормуле(ИдентификаторПоказателя, ИмяКолонки, ДеревоПоказателей);
				КонецЦикла;
				ОбновитьЗависимыеЭлементыПоФормуле(ИдентификаторПоказателя, "ИтогоПлан", ДеревоПоказателей);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьКолонкиПериодов()
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	МассивИменДеревьев = ПоказателиБизнесаФормы.ИменаДеревьевФормы();
	
	Для каждого Период Из ПериодыПланирования Цикл
		Для каждого ИмяДерева Из МассивИменДеревьев Цикл
			ДобавляемыеРеквизиты.Добавить(ПоказателиБизнесаФормы.НовыйРеквизитПериода(ИмяДерева, Период.Значение));
		КонецЦикла;
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Добавляем отображение реквизитов
	Для каждого Период Из ПериодыПланирования Цикл
		Для каждого ИмяДерева Из МассивИменДеревьев Цикл
			СоздатьКолонкуПериода(ИмяДерева, Период.Значение);
		КонецЦикла;
	КонецЦикла; 
	
	// Служебный реквизит для пустой колонки
	Для каждого ИмяДерева Из МассивИменДеревьев Цикл
		ДобавитьСлужебнуюКолонкуДерева(ИмяДерева);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКолонкуПериода(ИмяДерева, Период)
	
	ШиринаКолонки = 8;
	ИмяКолонки = СформироватьИмяКолонкиПоПериоду(Период);
	РодительЭлемента = Элементы[ИмяДерева];
	
	НовыйЭлемент = Элементы.Добавить(ИмяДерева + ИмяКолонки, Тип("ПолеФормы"), РодительЭлемента);
	НовыйЭлемент.ПутьКДанным = ИмяДерева + "." + ИмяКолонки;
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	
	ЗаголовокЭлемента = ПоказателиБизнесаФормы.ЗаголовокКолонки(Период, Периодичность);
	
	НовыйЭлемент.Заголовок = ЗаголовокЭлемента;
	НовыйЭлемент.ЦветФонаЗаголовка = ЦветаСтиля.ЦветФонаФормы;
	НовыйЭлемент.Ширина = ШиринаКолонки;
	НовыйЭлемент.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
	НовыйЭлемент.ШрифтЗаголовка = ШрифтыСтиля.МелкийШрифтТекста;
	НовыйЭлемент.КартинкаКнопкиВыбора = БиблиотекаКартинок.ОткрытьДетальныеЗаписи;
	
	НовыйЭлемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбораСуммы");
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииСуммы");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСлужебнуюКолонкуДерева(ИмяДерева)
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("_ПустаяКолонка", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)), ИмяДерева));
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	НовыйЭлемент = Элементы.Добавить(ИмяДерева + "_ПустаяКолонка", Тип("ПолеФормы"), Элементы[ИмяДерева]);
	НовыйЭлемент.ПутьКДанным = ИмяДерева + "._ПустаяКолонка";
	НовыйЭлемент.ЦветФонаЗаголовка = Новый Цвет(255,255,255);
	НовыйЭлемент.Заголовок = " ";
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьИмяКолонкиПоПериоду(Знач Период)
	
	Возврат Формат(Период,"ДФ=_ггггММдд");
	
КонецФункции

&НаКлиенте
Функция СформироватьПериодПоИмениКолонки(ИмяДерева, Знач ИмяКолонки)
	
	ИмяКолонки = СтрЗаменить(ИмяКолонки, ИмяДерева + "_", "");
	Возврат Дата(ИмяКолонки);
	
КонецФункции

#Область ОбработкаВыборкаВЯчейке

&НаКлиенте
Процедура Подключаемый_НачалоВыбораСуммы(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеЗаполненияТаблицы = Новый Массив;
	
	СтруктураТекущейЯчейки = СформироватьСтруктуруДанныхВыбраннойЯчейки(Элемент);
	СтруктураТекущейЯчейки.Вставить("Периодичность", Периодичность);
	СтруктураТекущейЯчейки.Вставить("Проект", Объект.Проект);
	СтруктураТекущейЯчейки.Вставить("Подразделение",  Объект.Подразделение);
	
	СтрокаДерева = Элемент.Родитель.ТекущиеДанные;
	ЗаполнитьТаблицуРасшифровкиЗначенияРекурсивно(СтрокаДерева, СтруктураТекущейЯчейки.Период, ДанныеЗаполненияТаблицы);
	
	ИсходныеДанные = Новый Структура;
	ИсходныеДанные.Вставить("Элемент", Элемент);
	ИсходныеДанные.Вставить("ТекущиеДанные", Элементы[Элемент.Родитель.Имя].ТекущиеДанные);
	
	СтруктураТекущейЯчейки.Вставить("ДанныеЗаполненияТаблицы", ДанныеЗаполненияТаблицы);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыРедактированияЗначения", ЭтотОбъект,
		ИсходныеДанные);
	ОткрытьФорму("Документ.Бюджет.Форма.ФормаРедактированияЗначения", СтруктураТекущейЯчейки, Элемент, , , ,
		ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыРедактированияЗначения(ПараметрыЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ПараметрыЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	Сумма = 0;
	Элемент = ДополнительныеПараметры.Элемент;
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	ИмяДерева = Элемент.Родитель.Имя;
	
	Период = ПараметрыЗакрытия.Период;
	ИмяКолонки = СформироватьИмяКолонкиПоПериоду(Период);
	
	ТабличнаяЧасть = ОпределитьТабличнуюЧастьДокумента(ТекущиеДанные);
	
	Если ТабличнаяЧасть = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДенежныйПоток") Тогда
		СтруктураОтбора = Новый Структура("Статья, ДатаПланирования", ТекущиеДанные.ИсточникДанных, Период);
	Иначе 
		СтруктураОтбора = Новый Структура("Счет, ДатаПланирования", ТекущиеДанные.ИсточникДанных, Период);
	КонецЕсли;
	
	СтрокиТаблицы = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
	
	Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		ТабличнаяЧасть.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	Для каждого СтруктураСтроки Из ПараметрыЗакрытия.ДанныеЗаполненияТаблицы Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСтроки);
		Сумма = Сумма + СтруктураСтроки.Сумма;
	КонецЦикла;
	
	ТекущиеДанные[ИмяКолонки] = Сумма;
	
	ОбновитьИтогиРекурсивноВверхПоИерархии(ТекущиеДанные, ИмяКолонки);
	ОбновитьИтогиРекурсивноВнизПоИерархии(ТекущиеДанные, ИмяКолонки);
	ОбновитьКолонкуИтого(ТекущиеДанные);
	ОбновитьЗависимыеЭлементыПоФормуле(ТекущиеДанные.ИдентификаторПоказателя, ИмяКолонки);
	
	Элементы[ИмяДерева].ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуРасшифровкиЗначенияРекурсивно(ТекущаяСтрока, Период, ДанныеЗаполненияТаблицы)
	
	Если ТекущаяСтрока.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Формула") Тогда
		Возврат; // Данные динамические, не хранятся в документе
	ИначеЕсли ТекущаяСтрока.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Группа") Тогда
		
		ПодчиненныеЭлементыСтроки = ТекущаяСтрока.ПолучитьЭлементы();
		
		Для каждого ПодчиненныйЭлементСтроки Из ПодчиненныеЭлементыСтроки Цикл
			ЗаполнитьТаблицуРасшифровкиЗначенияРекурсивно(ПодчиненныйЭлементСтроки, Период, ДанныеЗаполненияТаблицы);
		КонецЦикла;
		
	Иначе // Доходы или Расходы
		
		ТабличнаяЧасть = ОпределитьТабличнуюЧастьДокумента(ТекущаяСтрока);
		Если ТабличнаяЧасть = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДенежныйПоток") Тогда
			Отбор = Новый Структура("Статья, ДатаПланирования", ТекущаяСтрока.ИсточникДанных, Период);
		Иначе
			Отбор = Новый Структура("Счет, ДатаПланирования", ТекущаяСтрока.ИсточникДанных, Период);
		КонецЕсли;
		
		СтрокиТаблицы = ТабличнаяЧасть.НайтиСтроки(Отбор);
		
		Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			СтруктураСтроки = Новый Структура("ДатаПланирования,Счет,Статья,Сумма,КоррСчет,НаправлениеДеятельности,СтруктурнаяЕдиница,Проект,ЗаказПокупателя,Показатель,Комментарий");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТаблицы);
			СтруктураСтроки.Показатель = ТекущаяСтрока.Показатель;
			ДанныеЗаполненияТаблицы.Добавить(СтруктураСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьТабличнуюЧастьДокумента(СтрокаДерева)
	
	ТабличнаяЧасть = Неопределено;
	
	Если ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДоходыРасходы") Тогда
		
		Если СтрокаДерева.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.КосвенныеЗатраты") Тогда
			ТабличнаяЧасть = Объект.КосвенныеЗатраты;
		ИначеЕсли СтрокаДерева.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.НезавершенноеПроизводство") Тогда
			ТабличнаяЧасть = Объект.ПрямыеЗатраты;
		ИначеЕсли СтрокаДерева.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Доход") Тогда
			ТабличнаяЧасть = Объект.Доходы;
		ИначеЕсли СтрокаДерева.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Расход") Тогда
			ТабличнаяЧасть = Объект.Расходы;
		Иначе
			ТабличнаяЧасть = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДенежныйПоток") Тогда
		
		Если СтрокаДерева.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Доход") Тогда
			ТабличнаяЧасть = Объект.Поступления;
		ИначеЕсли СтрокаДерева.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Расход") Тогда
			ТабличнаяЧасть = Объект.Выбытия;
		Иначе
			ТабличнаяЧасть = Неопределено;
		КонецЕсли;
		
	Иначе // Баланс
		ТабличнаяЧасть = Объект.Остатки;
	КонецЕсли;
	
	Возврат ТабличнаяЧасть;
	
КонецФункции 

&НаКлиенте
Функция СформироватьСтруктуруДанныхВыбраннойЯчейки(ТекущаяЯчейка)
	
	ИмяДерева = ТекущаяЯчейка.Родитель.Имя;
	
	СтруктураСтроки = Новый Структура("Период,ТипПоказателя,ТипСчета,Показатель,ИсточникДанных,Сумма"); 
	ТекущиеДанные = Элементы[ИмяДерева].ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		СтруктураСтроки.Период = СформироватьПериодПоИмениКолонки(ИмяДерева, ТекущаяЯчейка.Имя);
		СтруктураСтроки.Сумма = ТекущиеДанные[Прав(ТекущаяЯчейка.Имя, 9)];
		СтруктураСтроки.Показатель  = ТекущиеДанные.Показатель;
		СтруктураСтроки.ИсточникДанных  = ТекущиеДанные.ИсточникДанных;
		СтруктураСтроки.ТипПоказателя = ТекущиеДанные.ТипПоказателя;
		
	КонецЕсли;
	
	Возврат СтруктураСтроки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыОбычныйРежим

&НаКлиенте
Процедура ПриАктивизацииСтрокиДерева(ТекущееДерево)
	
	ТекущиеДанные = ТекущееДерево.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделитьЗначениеДиаграммыПриИзмененииСтрокиДерева(ТекущиеДанные);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ОписаниеПоказателя) Тогда
		Элементы.ДекорацияЗаголовокТекущегоПоказателя.Заголовок = ВРег(Строка(ТекущиеДанные.Показатель));
		Элементы.ДекорацияОписаниеТекущегоПоказателя.Заголовок = ТекущиеДанные.ОписаниеПоказателя;
	Иначе
		Элементы.ДекорацияЗаголовокТекущегоПоказателя.Заголовок = "";
		Элементы.ДекорацияОписаниеТекущегоПоказателя.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередНачаломИзмененияСтрокиДерева(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонкиПоказателя = "Представление"; // Не локализуется
	ЭтоКолонкаПоказатель = (Прав(Элемент.ТекущийЭлемент.Имя, СтрДлина(ИмяКолонкиПоказателя)) = ИмяКолонкиПоказателя);
	ЭтоФормула = (ТекущиеДанные.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Формула"));
	
	Если ЭтоФормула ИЛИ ЭтоКолонкаПоказатель Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если ЭтоКолонкаПоказатель Тогда
		ПоказатьЗначение(,ТекущиеДанные.Показатель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбновлятьДанныеВТаблице(ТипПоказателя)
	
	Возврат (ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Доход")
			ИЛИ ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Расход"));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗависимыеЭлементыПоказателя(Показатель, СоответствиеЗависимыхЭлементов)
	
	ЗависимыеЭлементы = СоответствиеЗависимыхЭлементов.Получить(Показатель);
	Возврат ?(ЗависимыеЭлементы <> Неопределено, ЗависимыеЭлементы, Новый Массив);
	
КонецФункции

#КонецОбласти 

&НаСервере
Процедура ПриИзмененииПериода()
	
	ОбновитьДеревьяФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревьяФормы()
	
	ПоказателиБизнесаФормы.ОчиститьФорму(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Периодичность) И ЗначениеЗаполнено(ПериодПланирования.ДатаНачала)
		И ЗначениеЗаполнено(ПериодПланирования.ДатаОкончания) Тогда
		
		ПоказателиБизнесаФормы.ЗаполнитьСписокПериодов(ПериодыПланирования, ПериодПланирования, Периодичность);
		СформироватьКолонкиПериодов();
		
		// Если документ был записан, восстанавливаем данные
		Если ЕстьДанныеДляОтображения() Тогда
			ЗаполнитьДеревьяОтчетовДаннымиДокумента();
		КонецЕсли;
		
	Иначе // Для корректного отображения
		
		ИменаДеревьев = ПоказателиБизнесаФормы.ИменаДеревьевФормы();
		Для каждого ИмяДерева Из ИменаДеревьев Цикл
			ДобавитьСлужебнуюКолонкуДерева(ИмяДерева);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуПоДругомуПоказателю(СтрокаДерева)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИсходныйПоказатель", СтрокаДерева.Показатель);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеВыбораПоказателяДляРасчетаСуммы", ЭтотОбъект);
	ОткрытьФорму("Документ.Бюджет.Форма.ФормаРаспределенияПоПоказателю",ПараметрыОткрытия,,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПоказателяДляРасчетаСуммы(ПараметрыЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ПараметрыЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Строки показателей в дереве
	Если ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДоходыРасходы") Тогда
		ДеревоПоказателей = ДеревоПоказателейДоходыРасходы;
	ИначеЕсли ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДенежныйПоток") Тогда
		ДеревоПоказателей = ДеревоПоказателейДенежныйПоток;
	Иначе // Баланс
		ДеревоПоказателей = ДеревоПоказателейБаланс;
	КонецЕсли;

	ИдентификаторПоказателя = ИдентификаторыПоказателей.Получить(ПараметрыЗакрытия.ВыбранныйПоказатель);
	Если ИдентификаторПоказателя = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	СтрокаВыбранногоПоказателя = ДеревоПоказателей.НайтиПоИдентификатору(ИдентификаторПоказателя);
	
	ИдентификаторПоказателя = ИдентификаторыПоказателей.Получить(ПараметрыЗакрытия.ИсходныйПоказатель);
	Если ИдентификаторПоказателя = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	СтрокаИсходногоПоказателя = ДеревоПоказателей.НайтиПоИдентификатору(ИдентификаторПоказателя);
	
	Процент = ПараметрыЗакрытия.Процент;
	
	ИтоговаяСумма = 0;
	Для каждого Период Из ПериодыПланирования Цикл
		ИмяКолонки = СформироватьИмяКолонкиПоПериоду(Период.Значение);
		Сумма = СтрокаВыбранногоПоказателя[ИмяКолонки] * (Процент / 100);
		СтрокаИсходногоПоказателя[ИмяКолонки] = Сумма;
		ИтоговаяСумма = ИтоговаяСумма + Сумма;
	КонецЦикла;
	СтрокаИсходногоПоказателя["ИтогоПлан"] = ИтоговаяСумма;
	
	ПриИзмененииИтоговойСуммы(СтрокаИсходногоПоказателя);
	ОбновитьЗависимыеЭлементыПоФормулеЗаПериодПланирования(СтрокаИсходногоПоказателя.ИдентификаторПоказателя);
	
КонецПроцедуры

&НаСервере
Функция ЕстьДанныеДляОтображения()
	
	Возврат 	Объект.Остатки.Количество() > 0
			ИЛИ Объект.ПрямыеЗатраты.Количество() > 0
			ИЛИ Объект.КосвенныеЗатраты.Количество() > 0
			ИЛИ Объект.Поступления.Количество() > 0
			ИЛИ Объект.Выбытия.Количество() > 0
			ИЛИ Объект.Доходы.Количество() > 0
			ИЛИ Объект.Расходы.Количество() > 0
			ИЛИ Объект.Операции.Количество() > 0;
	
КонецФункции

#КонецОбласти 

