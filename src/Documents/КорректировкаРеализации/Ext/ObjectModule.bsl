#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	// Прослеживаемость
	СведенияПрослеживаемости.Очистить();
	// Конец Прослеживаемость
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПокупателя")] = "ЗаполнитьПоЗаказуНаряду";
	СтратегияЗаполнения[Тип("ДокументСсылка.АктВыполненныхРабот")] = "ЗаполнитьПоРеализации";
	СтратегияЗаполнения[Тип("ДокументСсылка.РасходнаяНакладная")] = "ЗаполнитьПоРеализации";
	СтратегияЗаполнения[Тип("ДокументСсылка.КорректировкаРеализации")] = "ЗаполнитьПоРеализации";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
	// Прослеживаемость
	ПрослеживаемостьУНФ.ОбновитьПризнакПрослеживаемости(Запасы, Дата);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьСуммыДоКорректировки();
	
	Если ЗначениеЗаполнено(Контрагент)
		И НЕ Контрагент.ВестиРасчетыПоДоговорам
		И НЕ ЗначениеЗаполнено(Договор) Тогда
		Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	СуммаДокумента = Запасы.Итог("Всего") + СтоимостьДоставки + ?(СуммаВключаетНДС, 0, СуммаНДСДоставки);
	
	// Прослеживаемость
	ПрослеживаемыйТовар = Запасы.НайтиСтроки(Новый Структура("ПрослеживаемыйТовар", Истина));
	ЕстьПрослеживаемыйТовар = ПрослеживаемыйТовар.Количество() <> 0;
	Если ЕстьПрослеживаемыйТовар Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ПрослеживаемостьУНФ.ПодобратьРНПТКорректировка(ЭтотОбъект, Отказ);
		КонецЕсли; 
	Иначе
		СведенияПрослеживаемости.Очистить();
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение 
		ИЛИ НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "НомерИсправления");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДатаИсправления");
	КонецЕсли;
	
	ТаблицаЗапасы = Запасы.Выгрузить(, "Заказ, Всего");
	ТаблицаЗапасы.Свернуть("Заказ", "Всего");
	
	ТаблицаПредоплата = Предоплата.Выгрузить(, "Заказ, СуммаПлатежа");
	ТаблицаПредоплата.Свернуть("Заказ", "СуммаПлатежа");
	
	КоличествоЗапасы = Запасы.Количество();
	
	Для каждого Строка Из ТаблицаПредоплата Цикл
		
		НайденнаяСтрокаЗапасы = Неопределено;
		
		Если Контрагент.ВестиРасчетыПоЗаказам
		   И Строка.Заказ <> Неопределено
		   И Строка.Заказ <> Документы.ЗаказПокупателя.ПустаяСсылка()
		   И Строка.Заказ <> Документы.ЗаказПоставщику.ПустаяСсылка() Тогда
			НайденнаяСтрокаЗапасы = ТаблицаЗапасы.Найти(Строка.Заказ, "Заказ");
		ИначеЕсли Контрагент.ВестиРасчетыПоЗаказам Тогда
			НайденнаяСтрокаЗапасы = ТаблицаЗапасы.Найти(Неопределено, "Заказ");
			НайденнаяСтрокаЗапасы = ?(НайденнаяСтрокаЗапасы = Неопределено, ТаблицаЗапасы.Найти(Документы.ЗаказПокупателя.ПустаяСсылка(), "Заказ"), НайденнаяСтрокаЗапасы);
			НайденнаяСтрокаЗапасы = ?(НайденнаяСтрокаЗапасы = Неопределено, ТаблицаЗапасы.Найти(Документы.ЗаказПоставщику.ПустаяСсылка(), "Заказ"), НайденнаяСтрокаЗапасы);				
		КонецЕсли;
		
		Если НайденнаяСтрокаЗапасы = Неопределено
		   И КоличествоЗапасы > 0
		   И Контрагент.ВестиРасчетыПоЗаказам Тогда
			ТекстСообщения = НСтр(
				"ru = 'Нельзя зачесть аванс по заказу отличному от указанных в табличных частях ""Запасы"" или ""Расходы"".'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
		КонецЕсли;
	КонецЦикла;
	
	РасчетыРаботаСФормамиВызовСервера.ПроверитьЗаполнениеДокументаПредоплаты(Контрагент, ПроверяемыеРеквизиты);
	
	Если Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить() Тогда
		
		Для каждого СтрокаЗапасы Из Запасы Цикл
			
			Если НЕ СтрокаЗапасы.ЕстьВДокументеРеализации
				И СтрокаЗапасы.Резерв > СтрокаЗапасы.Количество Тогда
				
				ТекстСообщения = СтрШаблон(НСтр(
					"ru = 'В строке №%1 табл. части ""Запасы и услуги"" количество отгружаемых позиций из резерва превышает общее количество запасов.'"),
					СтрокаЗапасы.НомерСтроки);
				КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", СтрокаЗапасы.НомерСтроки,
					"Резерв");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, Отказ, Истина);
	
	ГрузовыеТаможенныеДекларацииСервер.ПриОбработкеПроверкиЗаполнения(Отказ, ЭтотОбъект);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	// Взаиморасчеты
	СоответствиеТабличныхЧастейИРеквизитаЗаказ = Новый Соответствие;
	СоответствиеТабличныхЧастейИРеквизитаЗаказ.Вставить("Запасы", "Заказ");
	ДополнительныеСвойства.Вставить("ИмяРеквизитаЗаказ", "Заказ");
	РасчетыПроведениеДокументов.ИнициализироватьДополнительныеСвойстваДляПроведения(ЭтотОбъект, ДополнительныеСвойства,
		Отказ, Ложь, СоответствиеТабличныхЧастейИРеквизитаЗаказ);
	// Конец Взаиморасчеты
	
	Документы.КорректировкаРеализации.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ПроведениеДокументовУНФ.ОтразитьДвижения("Запасы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыВРазрезеГТД", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("Продажи", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ВыпускПродукции", ТаблицыДляДвижений, Движения, Отказ);
	Если ТипЗнч(ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("ГрафикДвиженияЗапасов", ТаблицыДляДвижений, Движения, Отказ);
		ПроведениеДокументовУНФ.ОтразитьДвижения("ПлатежныйКалендарь", ТаблицыДляДвижений, Движения, Отказ);
		ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаСчетовИЗаказов", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли;
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыНаСкладах", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыКРасходуСоСкладов", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыИАгентскиеУслугиПринятые", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗаказыПокупателей", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыКассовыйМетод", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыНераспределенные", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыОтложенные", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыСПокупателями", ТаблицыДляДвижений, Движения, Отказ);
	
	// ДисконтныеКарты
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПродажиПоДисконтнымКартам", ТаблицыДляДвижений, Движения, Отказ);
	
	// Эквайринг
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыКассовыйМетодЭквайринг", ТаблицыДляДвижений, Движения, Отказ);
	
	ПроведениеДокументовУНФ.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	
	// Суммы документов для регламентированного учета
	ПроведениеДокументовУНФ.ОтразитьДвижения("СуммыДокументовРегламентированныйУчет", ТаблицыДляДвижений, Движения, Отказ);
	
	// Прослеживаемость
	УправлениеНебольшойФирмойСервер.ОтразитьПрослеживаемыеТовары(ДополнительныеСвойства, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОперацииСПрослеживаемымиТоварами", ТаблицыДляДвижений, Движения, Отказ);
	// Конец Прослеживаемость
	
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	Документы.КорректировкаРеализации.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.КорректировкаРеализации.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
	// Подчиненный счет-фактура (выданный)
	Если Не Отказ Тогда
		СчетаФактурыУНФ.ОтменитьПроведениеПодчиненногоСчетаФактуры(Ссылка, Номер, Дата, ДополнительныеСвойства, Ложь);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Процедура - обработчик события ПриКопировании объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ОчиститьДатуНомерВходящегоДокумента(ЭтотОбъект);
	Предоплата.Очистить();
	
	// Прослеживаемость
	СведенияПрослеживаемости.Очистить();
	ПрослеживаемостьУНФ.ОбновитьПризнакПрослеживаемости(Запасы, Дата);
	// Конец Прослеживаемость
	
КонецПроцедуры // ПриКопировании()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СчетаФактурыУНФ.ПриЗаписиДокументаОснованияСчетаФактуры(Ссылка, ДополнительныеСвойства, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Заполнение

// Процедура заполняет авансы.
//
Процедура ЗаполнитьПредоплату() Экспорт
	
	Компания = Константы.УчетПоКомпании.Компания(Организация);
	
	// Подготовка таблицы заказов.
	ТаблицаЗаказов = Запасы.Выгрузить(, "Заказ, Всего");
	ТаблицаЗаказов.Колонки.Добавить("ВсегоРасч");
	Для каждого ТекСтрока Из ТаблицаЗаказов Цикл
		Если НЕ Контрагент.ВестиРасчетыПоЗаказам Тогда
			ТекСтрока.Заказ = Документы.ЗаказПокупателя.ПустаяСсылка();
		КонецЕсли;
		ТекСтрока.ВсегоРасч = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
			ТекСтрока.Всего,
			?(Договор.ВалютаРасчетов = ВалютаДокумента, Курс, 1),
			Курс,
			?(Договор.ВалютаРасчетов = ВалютаДокумента, Кратность, 1),
			Кратность
		);
	КонецЦикла;
	ТаблицаЗаказов.Свернуть("Заказ", "Всего, ВсегоРасч");
	ТаблицаЗаказов.Сортировать("Заказ Возр");
	
	// Заполнение расшифровки предоплаты.
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПокупателямиОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.Договор КАК Договор,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.Документ.Дата КАК ДокументДата,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями.Остатки(
	|				,
	|				Организация = &Организация
	|					И Контрагент = &Контрагент
	|					И Договор = &Договор
	|					И Заказ В (&Заказ)
	|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПокупателямиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРасчетыСПокупателями.Договор,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ.Дата,
	|		ДвиженияДокументаРасчетыСПокупателями.Заказ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями КАК ДвиженияДокументаРасчетыСПокупателями
	|	ГДЕ
	|		ДвиженияДокументаРасчетыСПокупателями.Регистратор = &Ссылка
	|		И ДвиженияДокументаРасчетыСПокупателями.Период <= &Период
	|		И ДвиженияДокументаРасчетыСПокупателями.Организация = &Организация
	|		И ДвиженияДокументаРасчетыСПокупателями.Контрагент = &Контрагент
	|		И ДвиженияДокументаРасчетыСПокупателями.Договор = &Договор
	|		И ДвиженияДокументаРасчетыСПокупателями.Заказ В (&Заказ)
	|		И ДвиженияДокументаРасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПокупателямиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата,
	|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаУчета) КАК СуммаУчета,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) КАК СуммаРасчетов,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаПлатежа) КАК СуммаПлатежа,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаУчета / ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРасчетов, 0) <> 0
	|				ТОГДА РасчетыСПокупателямиОстатки.СуммаРасчетов
	|			ИНАЧЕ 1
	|		КОНЕЦ) * (КурсыВалютыУчетаКурс / КурсыВалютыУчетаКратность) КАК Курс,
	|	1 КАК Кратность,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКурс КАК КурсыВалютыДокументаКурс,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКратность КАК КурсыВалютыДокументаКратность
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаУчета,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаРасчетов,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) * КурсыВалютыУчета.Курс * &КратностьВалютыДокумента / (&КурсВалютыДокумента * КурсыВалютыУчета.Кратность) КАК СуммаПлатежа,
	|		КурсыВалютыУчета.Курс КАК КурсыВалютыУчетаКурс,
	|		КурсыВалютыУчета.Кратность КАК КурсыВалютыУчетаКратность,
	|		&КурсВалютыДокумента КАК КурсыВалютыДокументаКурс,
	|		&КратностьВалютыДокумента КАК КурсыВалютыДокументаКратность
	|	ИЗ
	|		ВременнаяТаблицаРасчетыСПокупателямиОстатки КАК РасчетыСПокупателямиОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУчета) КАК КурсыВалютыУчета
	|			ПО (ИСТИНА)) КАК РасчетыСПокупателямиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата,
	|	РасчетыСПокупателямиОстатки.ВалютаРасчетов,
	|	КурсыВалютыУчетаКурс,
	|	КурсыВалютыУчетаКратность,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКурс,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКратность
	|
	|ИМЕЮЩИЕ
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата";

	Запрос.УстановитьПараметр("Заказ", ТаблицаЗаказов.ВыгрузитьКолонку("Заказ"));
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Если Договор.ВалютаРасчетов = ВалютаДокумента Тогда
		Запрос.УстановитьПараметр("КурсВалютыДокумента", Курс);
		Запрос.УстановитьПараметр("КратностьВалютыДокумента", Кратность);
	Иначе
		Запрос.УстановитьПараметр("КурсВалютыДокумента", 1);
		Запрос.УстановитьПараметр("КратностьВалютыДокумента", 1);
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = ТекстЗапроса;
	
	Предоплата.Очистить();
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		
		НайденнаяСтрока = ТаблицаЗаказов.Найти(ВыборкаРезультатаЗапроса.Заказ, "Заказ");
		
		Если НайденнаяСтрока.ВсегоРасч = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаРезультатаЗапроса.СуммаРасчетов <= НайденнаяСтрока.ВсегоРасч Тогда // сумма остатка меньше или равна чем осталось распределить
			
			НоваяСтрока = Предоплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			НайденнаяСтрока.ВсегоРасч = НайденнаяСтрока.ВсегоРасч - ВыборкаРезультатаЗапроса.СуммаРасчетов;
			
		Иначе // сумма остатка больше чем нужно распределить
			
			НоваяСтрока = Предоплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			НоваяСтрока.СуммаРасчетов = НайденнаяСтрока.ВсегоРасч;
			НоваяСтрока.СуммаПлатежа = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
				НоваяСтрока.СуммаРасчетов,
				ВыборкаРезультатаЗапроса.Курс,
				ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКурс,
				ВыборкаРезультатаЗапроса.Кратность,
				ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКратность
			);
			НайденнаяСтрока.ВсегоРасч = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПредоплату()

Процедура ЗаполнитьПоРеализации(ДанныеЗаполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходнаяНакладная")
		И ДанныеЗаполнения.ВидОперации <> Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю Тогда
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить корректировку поступления на основании документа %1.'"),
			ДанныеЗаполнения);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ВидОперацииЗаполнения = Неопределено;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		ВидОперацииЗаполнения = ?(ДанныеЗаполнения.Свойство("ВидОперации"), ДанныеЗаполнения.ВидОперации, Неопределено);
		ДокументОснование = ДанныеЗаполнения.ДокументОснование;
	Иначе
		ДокументОснование = ДанныеЗаполнения;
	КонецЕсли;
	
	ЗаполнитьСвойстваШапки(ВидОперацииЗаполнения);
	
	Запасы.Очистить();
	Предоплата.Очистить();
	
	МетаданныеДокумента = ДанныеЗаполнения.Метаданные();
	ИмяВидаДокумента = МетаданныеДокумента.Имя;
	ИмяТабличнойЧасти = ?(ИмяВидаДокумента = "АктВыполненныхРабот", "РаботыИУслуги", "Запасы");
	
	Запрос = Новый Запрос;
	Текст = 
	"ВЫБРАТЬ
	|	РасходнаяНакладная.Ссылка КАК ДокументОснование,
	|	РасходнаяНакладная.Организация,
	|	РасходнаяНакладная.Контрагент,
	|	РасходнаяНакладная.Договор,
	|	РасходнаяНакладная.ВалютаДокумента,
	|	РасходнаяНакладная.НалогообложениеНДС,
	|	РасходнаяНакладная.СуммаВключаетНДС,
	|	РасходнаяНакладная.НДСВключатьВСтоимость,
	|	РасходнаяНакладная.Курс,
	|	РасходнаяНакладная.Кратность,
	|	РасходнаяНакладная.СуммаДокумента,
	|	РасходнаяНакладная.ДисконтнаяКарта,
	|	РасходнаяНакладная.ВидЦен,";
	Если ИмяВидаДокумента = "АктВыполненныхРабот" Тогда
		Текст = Текст + "
		|	РасходнаяНакладная.ЗаказПокупателя КАК Заказ,";
	Иначе
		Текст = Текст + "
		|	РасходнаяНакладная.СтруктурнаяЕдиница,
		|	РасходнаяНакладная.Ячейка,
		|	РасходнаяНакладная.НомерВходящегоДокумента,
		|	РасходнаяНакладная.ДатаВходящегоДокумента,
		|	РасходнаяНакладная.Заказ,";
	КонецЕсли;
	Если ИмяВидаДокумента = "РасходнаяНакладная" Тогда
		Текст = Текст + "
		|	РасходнаяНакладная.ПодписьРуководителя КАК ПодписьРуководителя,
		|	РасходнаяНакладная.ПодписьГлавногоБухгалтера КАК ПодписьГлавногоБухгалтера,
		|	РасходнаяНакладная.ПодписьКладовщика КАК ПодписьКладовщика,
		|	РасходнаяНакладная.КонтактноеЛицоПодписант КАК КонтактноеЛицоПодписант,";
	КонецЕсли;
	Текст = Текст + "
	|	РасходнаяНакладная.Подразделение,
	|	РасходнаяНакладная.Ответственный
	|ИЗ
	|	Документ." + ИмяВидаДокумента + " КАК РасходнаяНакладная
	|ГДЕ
	|	РасходнаяНакладная.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.Номенклатура,
	|	РасходнаяНакладнаяЗапасы.Характеристика,";
	Если ИмяВидаДокумента = "АктВыполненныхРабот" Тогда
		Текст = Текст + "
		|	ЛОЖЬ КАК ТипНоменклатурыЗапас,
		|	РасходнаяНакладнаяЗапасы.Номенклатура.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	РасходнаяНакладнаяЗапасы.Номенклатура.ТоварнаяНоменклатураВЭД КАК КодТНВЭД,
		|	РасходнаяНакладнаяЗапасы.ЗаказПокупателя КАК Заказ,";
	Иначе
		Текст = Текст + "
		|	РасходнаяНакладнаяЗапасы.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	РасходнаяНакладнаяЗапасы.КодТНВЭД КАК КодТНВЭД,
		|	РасходнаяНакладнаяЗапасы.ТипНоменклатурыЗапас КАК ТипНоменклатурыЗапас,
		|	РасходнаяНакладнаяЗапасы.Партия,
		|	РасходнаяНакладнаяЗапасы.ИдентификаторСтроки,
		|	РасходнаяНакладнаяЗапасы.Заказ,";
	КонецЕсли;
	Если ИмяВидаДокумента = "РасходнаяНакладная" Тогда
		Текст = Текст + "
		|	ВЫБОР
		|		КОГДА РасходнаяНакладнаяЗапасы.Ссылка.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
		|			ТОГДА РасходнаяНакладнаяЗапасы.СтруктурнаяЕдиница
		|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Ссылка.СтруктурнаяЕдиница
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА РасходнаяНакладнаяЗапасы.Ссылка.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
		|			ТОГДА РасходнаяНакладнаяЗапасы.Ячейка
		|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Ссылка.Ячейка
		|	КОНЕЦ КАК Ячейка,";
	ИначеЕсли ИмяВидаДокумента = "КорректировкаРеализации" Тогда
		Текст = Текст + "
		|	РасходнаяНакладнаяЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	РасходнаяНакладнаяЗапасы.Ячейка КАК Ячейка,";
	КонецЕсли;
	Текст = Текст + "
	|	РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения,
	|	РасходнаяНакладнаяЗапасы.Количество,
	|	РасходнаяНакладнаяЗапасы.Цена,
	|	РасходнаяНакладнаяЗапасы.Сумма,
	|	РасходнаяНакладнаяЗапасы.СтавкаНДС,
	|	РасходнаяНакладнаяЗапасы.СуммаНДС,
	|	РасходнаяНакладнаяЗапасы.Всего,
	|	РасходнаяНакладнаяЗапасы.Содержание,
	|	РасходнаяНакладнаяЗапасы.Количество КАК КоличествоДоИзменения,
	|	РасходнаяНакладнаяЗапасы.Цена КАК ЦенаДоИзменения,
	|	РасходнаяНакладнаяЗапасы.Сумма КАК СуммаДоИзменения,
	|	РасходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	РасходнаяНакладнаяЗапасы.СуммаНДС КАК СуммаНДСДоИзменения,
	|	РасходнаяНакладнаяЗапасы.Всего КАК ВсегоДоИзменения,";
	Если ИмяВидаДокумента = "КорректировкаРеализации" Тогда
		Текст = Текст + "
		|	РасходнаяНакладнаяЗапасы.КоличествоДоКорректировки,
		|	РасходнаяНакладнаяЗапасы.ЦенаДоКорректировки,
		|	РасходнаяНакладнаяЗапасы.СуммаДоКорректировки,
		|	РасходнаяНакладнаяЗапасы.СуммаНДСДоКорректировки,
		|	РасходнаяНакладнаяЗапасы.ВсегоДоКорректировки,";
	КонецЕсли;
	Если ИмяВидаДокумента = "КорректировкаРеализации" Тогда
		Текст = Текст + "
		|	РасходнаяНакладнаяЗапасы.КлючСвязи КАК КлючСвязи,";
	Иначе
		Текст = Текст + "
		|	РасходнаяНакладнаяЗапасы.НомерСтроки КАК КлючСвязи,";
	КонецЕсли;
	Если ИмяТабличнойЧасти = "Запасы" Тогда
		Текст = Текст + "
		|	РасходнаяНакладнаяЗапасы.СтранаПроисхождения,
		|	РасходнаяНакладнаяЗапасы.НомерГТД,"
	КонецЕсли;
	Текст = Текст + "
	|	РасходнаяНакладнаяЗапасы.Содержание КАК СодержаниеДоИзменения,
	|	РасходнаяНакладнаяЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	РасходнаяНакладнаяЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ИСТИНА КАК ЕстьВДокументеРеализации
	|ИЗ
	|	Документ." + ИмяВидаДокумента + "." + ИмяТабличнойЧасти +" КАК РасходнаяНакладнаяЗапасы
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяПредоплата.Документ,
	|	РасходнаяНакладнаяПредоплата.Заказ,
	|	РасходнаяНакладнаяПредоплата.СуммаРасчетов,
	|	РасходнаяНакладнаяПредоплата.Курс,
	|	РасходнаяНакладнаяПредоплата.Кратность,
	|	РасходнаяНакладнаяПредоплата.СуммаПлатежа,
	|	РасходнаяНакладнаяПредоплата.СуммаРасчетов КАК СуммаРасчетовДоИзменения,
	|	РасходнаяНакладнаяПредоплата.СуммаПлатежа КАК СуммаПлатежаДоИзменения,";
	Если ИмяВидаДокумента = "КорректировкаРеализации" Тогда
			Текст = Текст + "
		|	РасходнаяНакладнаяПредоплата.СуммаРасчетовДоКорректировки,
		|	РасходнаяНакладнаяПредоплата.СуммаПлатежаДоКорректировки,";
	КонецЕсли;
	Текст = Текст + "
	|	ИСТИНА КАК ЕстьВДокументеРеализации
	|ИЗ
	|	Документ." + ИмяВидаДокумента + ".Предоплата КАК РасходнаяНакладнаяПредоплата
	|ГДЕ
	|	РасходнаяНакладнаяПредоплата.Ссылка = &Ссылка";
	
	Если ИмяВидаДокумента = "РасходнаяНакладная" ИЛИ ИмяВидаДокумента = "КорректировкаРеализации" Тогда
		
		РазделительЗапросов = 
		"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СведенияПрослеживаемости.РНПТ КАК РНПТ,
		|	СведенияПрослеживаемости.Количество КАК Количество,
		|	СведенияПрослеживаемости.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
		|	СведенияПрослеживаемости.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ИЗ
		|	Документ.РасходнаяНакладная.СведенияПрослеживаемости КАК СведенияПрослеживаемости
		|ГДЕ
		|	СведенияПрослеживаемости.Ссылка = &Ссылка";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РасходнаяНакладная", ИмяВидаДокумента);
		Текст = Текст + РазделительЗапросов + ТекстЗапроса;
		
	КонецЕсли;
	
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = МассивРезультатов[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	ВыборкаЗапасы = МассивРезультатов[1].Выбрать();
	Пока ВыборкаЗапасы.Следующий() Цикл
	
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗапасы);
	
	КонецЦикла;
	
	ВыборкаПредоплата = МассивРезультатов[2].Выбрать();
	Пока ВыборкаПредоплата.Следующий() Цикл
	
		НоваяСтрока = Предоплата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПредоплата);
	
	КонецЦикла;
	
	// Прослеживаемость
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходнаяНакладная")
		ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		ВыборкаСведенияПрослеживаемости = МассивРезультатов[3].Выбрать();
		Пока ВыборкаСведенияПрослеживаемости.Следующий() Цикл
			
			НоваяСтрока = СведенияПрослеживаемости.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСведенияПрослеживаемости);
			
		КонецЦикла;
	КонецЕсли; 
	// Конец Прослеживаемость
	
	// Доставка
	Если ИмяВидаДокумента = "РасходнаяНакладная" Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасходнаяНакладная.НоменклатураДоставки,
		|	РасходнаяНакладная.СтоимостьДоставки,
		|	РасходнаяНакладная.СтавкаНДСДоставки,
		|	РасходнаяНакладная.СуммаНДСДоставки,
		|	РасходнаяНакладная.СтоимостьДоставки КАК СтоимостьДоставкиДоИзменения,
		|	РасходнаяНакладная.СтавкаНДСДоставки КАК СтавкаНДСДоставкиДоИзменения,
		|	РасходнаяНакладная.СуммаНДСДоставки КАК СуммаНДСДоставкиДоИзменения,
		|	ВЫБОР
		|		КОГДА РасходнаяНакладная.НоменклатураДоставки <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьВДокументеРеализации
		|ИЗ
		|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
		|ГДЕ
		|	РасходнаяНакладная.Ссылка = &Ссылка";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		КонецЕсли;
	ИначеЕсли ИмяВидаДокумента = "КорректировкаРеализации" Тогда 
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КорректировкаРеализации.НоменклатураДоставки,
		|	КорректировкаРеализации.СтоимостьДоставки,
		|	КорректировкаРеализации.СтавкаНДСДоставки,
		|	КорректировкаРеализации.СуммаНДСДоставки,
		|	КорректировкаРеализации.СтоимостьДоставкиДоИзменения,
		|	КорректировкаРеализации.СтавкаНДСДоставкиДоИзменения,
		|	КорректировкаРеализации.СуммаНДСДоставкиДоИзменения,
		|	КорректировкаРеализации.СтоимостьДоставки КАК СтоимостьДоставкиДоКорректировки,
		|	КорректировкаРеализации.СтавкаНДСДоставки КАК СтавкаНДСДоставкиДоКорректировки,
		|	КорректировкаРеализации.СуммаНДСДоставки КАК СуммаНДСДоставкиДоКорректировки,
		|	ВЫБОР
		|		КОГДА КорректировкаРеализации.НоменклатураДоставки <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьВДокументеРеализации
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|ГДЕ
		|	КорректировкаРеализации.Ссылка = &Ссылка";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		КонецЕсли;
	КонецЕсли; 
	// Конец Доставка
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОснование, "Проект") Тогда
		Проект = ДокументОснование.Проект;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуНаряду(ДанныеЗаполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить корректировку поступления на основании документа %1.'"),
			ДанныеЗаполнения);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "СостояниеЗаказа, ВидЗаказа");
	Если НЕ СостоянияЗаказов.ЭтоСостояниеВыполненияЗаказНаряда(ЗначенияРеквизитов.СостояниеЗаказа, ЗначенияРеквизитов.ВидЗаказа) Тогда
		
		ТекстИсключения = НСтр("ru = 'Корректировка может быть создана только на основании выполненного заказа-наряда.'");
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	ВидОперацииЗаполнения = Неопределено;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		ВидОперацииЗаполнения = ?(ДанныеЗаполнения.Свойство("ВидОперации"), ДанныеЗаполнения.ВидОперации, Неопределено);
		ДокументОснование = ДанныеЗаполнения.ДокументОснование;
	Иначе
		ДокументОснование = ДанныеЗаполнения;
	КонецЕсли;
	
	ЗаполнитьСвойстваШапки(ВидОперацииЗаполнения);
	
	Запасы.Очистить();
	Предоплата.Очистить();
	ПлатежныйКалендарь.Очистить();
	
	Запрос = Новый Запрос;
	Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК ДокументОснование,
	|	ЗаказПокупателя.Организация КАК Организация,
	|	ЗаказПокупателя.Контрагент КАК Контрагент,
	|	ЗаказПокупателя.Договор КАК Договор,
	|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗаказПокупателя.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказПокупателя.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
	|	ЗаказПокупателя.Курс КАК Курс,
	|	ЗаказПокупателя.Кратность КАК Кратность,
	|	ЗаказПокупателя.СуммаДокумента КАК СуммаДокумента,
	|	ЗаказПокупателя.ВидЦен КАК ВидЦен,
	|	ЗаказПокупателя.СтруктурнаяЕдиницаПродажи КАК Подразделение,
	|	ЗаказПокупателя.Ответственный КАК Ответственный,
	|	ЗаказПокупателя.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиница,
	|	ЗаказПокупателя.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ЗаказПокупателя.ТипДенежныхСредств КАК ТипДенежныхСредств,
	|	ЗаказПокупателя.Касса КАК Касса,
	|	ЗаказПокупателя.ЗапланироватьОплату КАК ЗапланироватьОплату
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяРаботы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяРаботы.Характеристика КАК Характеристика,
	|	ЗаказПокупателяРаботы.Количество * ЗаказПокупателяРаботы.Коэффициент * ЗаказПокупателяРаботы.Кратность КАК Количество,
	|	ЗаказПокупателяРаботы.Цена КАК Цена,
	|	ЗаказПокупателяРаботы.Сумма КАК Сумма,
	|	ЗаказПокупателяРаботы.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателяРаботы.СуммаНДС КАК СуммаНДС,
	|	ЗаказПокупателяРаботы.Всего КАК Всего,
	|	ЗаказПокупателяРаботы.Содержание КАК Содержание,
	|	ЗаказПокупателяРаботы.Количество * ЗаказПокупателяРаботы.Коэффициент * ЗаказПокупателяРаботы.Кратность КАК КоличествоДоИзменения,
	|	ЗаказПокупателяРаботы.Цена КАК ЦенаДоИзменения,
	|	ЗаказПокупателяРаботы.Сумма КАК СуммаДоИзменения,
	|	ЗаказПокупателяРаботы.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	ЗаказПокупателяРаботы.СуммаНДС КАК СуммаНДСДоИзменения,
	|	ЗаказПокупателяРаботы.Всего КАК ВсегоДоИзменения,
	|	ЗаказПокупателяРаботы.НоменклатураНабора КАК НоменклатураНабора,
	|	ЗаказПокупателяРаботы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЗаказПокупателяРаботы.Содержание КАК СодержаниеДоИзменения,
	|	ЗаказПокупателяРаботы.Ссылка.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиница,
	|	ЗаказПокупателяРаботы.Ссылка.Ячейка КАК Ячейка,
	|	ЗаказПокупателяРаботы.Ссылка КАК Заказ,
	|	ЗаказПокупателяРаботы.НомерСтроки КАК КлючСвязи,
	|	ИСТИНА КАК ЕстьВДокументеРеализации,
	|	ЗаказПокупателяРаботы.Спецификация КАК Спецификация,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК Партия,
	|	ЗаказПокупателяРаботы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЛОЖЬ КАК ТипНоменклатурыЗапас,
	|	0 КАК Резерв
	|ИЗ
	|	Документ.ЗаказПокупателя.Работы КАК ЗаказПокупателяРаботы
	|ГДЕ
	|	ЗаказПокупателяРаботы.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.Номенклатура,
	|	ЗаказПокупателяЗапасы.Характеристика,
	|	ЗаказПокупателяЗапасы.Количество,
	|	ЗаказПокупателяЗапасы.Цена,
	|	ЗаказПокупателяЗапасы.Сумма,
	|	ЗаказПокупателяЗапасы.СтавкаНДС,
	|	ЗаказПокупателяЗапасы.СуммаНДС,
	|	ЗаказПокупателяЗапасы.Всего,
	|	ЗаказПокупателяЗапасы.Содержание,
	|	ЗаказПокупателяЗапасы.Количество,
	|	ЗаказПокупателяЗапасы.Цена,
	|	ЗаказПокупателяЗапасы.Сумма,
	|	ЗаказПокупателяЗапасы.СтавкаНДС,
	|	ЗаказПокупателяЗапасы.СуммаНДС,
	|	ЗаказПокупателяЗапасы.Всего,
	|	ЗаказПокупателяЗапасы.НоменклатураНабора,
	|	ЗаказПокупателяЗапасы.ХарактеристикаНабора,
	|	ЗаказПокупателяЗапасы.Содержание,
	|	ЗаказПокупателяЗапасы.СтруктурнаяЕдиницаРезерв,
	|	ЗаказПокупателяЗапасы.Ссылка.Ячейка,
	|	ЗаказПокупателяЗапасы.Ссылка,
	|	ЗаказПокупателяЗапасы.НомерСтроки,
	|	ИСТИНА,
	|	ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка),
	|	ЗаказПокупателяЗапасы.Партия,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения,
	|	ЗаказПокупателяЗапасы.ТипНоменклатурыЗапас,
	|	ЗаказПокупателяЗапасы.Резерв
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяПредоплата.Документ КАК Документ,
	|	ЗаказПокупателяПредоплата.СуммаРасчетов КАК СуммаРасчетов,
	|	ЗаказПокупателяПредоплата.Курс КАК Курс,
	|	ЗаказПокупателяПредоплата.Кратность КАК Кратность,
	|	ЗаказПокупателяПредоплата.СуммаПлатежа КАК СуммаПлатежа,
	|	ЗаказПокупателяПредоплата.СуммаРасчетов КАК СуммаРасчетовДоИзменения,
	|	ЗаказПокупателяПредоплата.СуммаПлатежа КАК СуммаПлатежаДоИзменения,
	|	ИСТИНА КАК ЕстьВДокументеРеализации
	|ИЗ
	|	Документ.ЗаказПокупателя.Предоплата КАК ЗаказПокупателяПредоплата
	|ГДЕ
	|	ЗаказПокупателяПредоплата.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяПлатежныйКалендарь.ДатаОплаты КАК ДатаОплаты,
	|	ЗаказПокупателяПлатежныйКалендарь.ПроцентОплаты КАК ПроцентОплаты,
	|	ЗаказПокупателяПлатежныйКалендарь.СуммаОплаты КАК СуммаОплаты,
	|	ЗаказПокупателяПлатежныйКалендарь.СуммаНДСОплаты КАК СуммаНДСОплаты,
	|	ЗаказПокупателяПлатежныйКалендарь.ДатаОплаты КАК ДатаОплатыДоИзменения,
	|	ЗаказПокупателяПлатежныйКалендарь.ПроцентОплаты КАК ПроцентОплатыДоИзменения,
	|	ЗаказПокупателяПлатежныйКалендарь.СуммаОплаты КАК СуммаОплатыДоИзменения,
	|	ЗаказПокупателяПлатежныйКалендарь.СуммаНДСОплаты КАК СуммаНДСДоИзменения,
	|	ИСТИНА КАК ЕстьВДокументеРеализации
	|ИЗ
	|	Документ.ЗаказПокупателя.ПлатежныйКалендарь КАК ЗаказПокупателяПлатежныйКалендарь
	|ГДЕ
	|	ЗаказПокупателяПлатежныйКалендарь.Ссылка = &Ссылка";
	
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = МассивРезультатов[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	ВыборкаЗапасы = МассивРезультатов[1].Выбрать();
	Пока ВыборкаЗапасы.Следующий() Цикл
	
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗапасы);
	
	КонецЦикла;
	
	ВыборкаПредоплата = МассивРезультатов[2].Выбрать();
	Пока ВыборкаПредоплата.Следующий() Цикл
	
		НоваяСтрока = Предоплата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПредоплата);
	
	КонецЦикла;
	
	ВыборкаПлатежныйКалендарь = МассивРезультатов[3].Выбрать();
	Пока ВыборкаПлатежныйКалендарь.Следующий() Цикл
	
		НоваяСтрока = ПлатежныйКалендарь.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПлатежныйКалендарь);
	
	КонецЦикла;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОснование, "Проект") Тогда
		Проект = ДокументОснование.Проект;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет колонку Количество по резервам под заказ.
//
Процедура ЗаполнитьКолонкуРезервПоРезервам() Экспорт
	
	Запасы.ЗагрузитьКолонку(Новый Массив(Запасы.Количество()), "Резерв");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ТаблицаЗапасы.Заказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатурыЗапас";
	
	Запрос.УстановитьПараметр("ТаблицаЗапасы", Запасы.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						&Организация,
	|						&СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.Номенклатура.СчетУчетаЗапасов,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ТаблицаЗапасы.ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|					ГДЕ
	|						ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &Период
	|		И ДвиженияДокументаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Константы.УчетПоКомпании.Компания(Организация));
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Заказ", Выборка.ЗаказПокупателя);
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", Выборка.Партия);
		
		ВсегоОстаток = Выборка.КоличествоОстаток;
		МассивСтрокЗапасы = Запасы.НайтиСтроки(СтруктураДляПоиска);
		Для каждого СтрокаЗапасы Из МассивСтрокЗапасы Цикл
			
			УвеличениеКоличества = СтрокаЗапасы.Количество - СтрокаЗапасы.КоличествоДоИзменения;
			Если УвеличениеКоличества <= 0 Тогда
				Продолжить;
			КонецЕсли;
			Коэффициент = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), 1, СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			ВсегоОстаток = ВсегоОстаток / Коэффициент;
			Если УвеличениеКоличества >= ВсегоОстаток Тогда
				СтрокаЗапасы.Резерв = ВсегоОстаток;
				ВсегоОстаток = 0;
			Иначе
				СтрокаЗапасы.Резерв = УвеличениеКоличества;
				ВсегоОстаток = ВсегоОстаток - УвеличениеКоличества;
				ВсегоОстаток = ВсегоОстаток * Коэффициент;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКолонкуРезервПоРезервам()

Процедура ЗаполнитьСвойстваШапки(ВидОперацииЗаполнения = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
		
	Если ТипЗнч(Документы.КорректировкаРеализации.ПолучитьИсправляемыйДокументРеализации(ДокументОснование, Ложь)) = Тип("ДокументСсылка.КорректировкаРеализации") 
		И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;	
	
	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Если КорректировкаКорректировочногоСчетаФактуры Тогда
			ИсправляемыйДокументРеализации = Документы.КорректировкаРеализации.ПолучитьИсправляемыйДокументРеализации(ДокументОснование, Ложь);
		Иначе
			ИсправляемыйДокументРеализации = Документы.КорректировкаРеализации.ПолучитьИсправляемыйДокументРеализации(ДокументОснование, Истина);
		КонецЕсли;	
	Иначе	
		ИсправляемыйДокументРеализации = Документы.КорректировкаРеализации.ПолучитьИсправляемыйДокументРеализации(ДокументОснование, Ложь);
	КонецЕсли;
	
	ПараметрыИсправления = Документы.КорректировкаРеализации.СформироватьПараметрыИсправленияКорректировочногоДокумента(
		?(ВидОперацииЗаполнения <> Неопределено, ВидОперацииЗаполнения, ВидОперации), ДокументОснование, ИсправляемыйДокументРеализации);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыИсправления);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ОбработатьСуммыДоКорректировки()

	ИсправлениеКорректировки = ЗначениеЗаполнено(ИсправляемыйДокументРеализации)
		И (ТипЗнч(ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации"))
		И (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ИсправляемыйДокументРеализации, "ВидОперации") = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);

	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Запасы.ЗагрузитьКолонку(Запасы.ВыгрузитьКолонку("КоличествоДоИзменения"), 	"КоличествоДоКорректировки");
		Запасы.ЗагрузитьКолонку(Запасы.ВыгрузитьКолонку("ЦенаДоИзменения"), 		"ЦенаДоКорректировки");
		Запасы.ЗагрузитьКолонку(Запасы.ВыгрузитьКолонку("СуммаДоИзменения"), 		"СуммаДоКорректировки");
		Запасы.ЗагрузитьКолонку(Запасы.ВыгрузитьКолонку("СуммаНДСДоИзменения"), 	"СуммаНДСДоКорректировки");
		Запасы.ЗагрузитьКолонку(Запасы.ВыгрузитьКолонку("ВсегоДоИзменения"), 		"ВсегоДоКорректировки");

		Предоплата.ЗагрузитьКолонку(Предоплата.ВыгрузитьКолонку("СуммаРасчетовДоИзменения"), 	"СуммаРасчетовДоКорректировки");
		Предоплата.ЗагрузитьКолонку(Предоплата.ВыгрузитьКолонку("СуммаПлатежаДоИзменения"), 	"СуммаПлатежаДоКорректировки");
		
		ПлатежныйКалендарь.ЗагрузитьКолонку(ПлатежныйКалендарь.ВыгрузитьКолонку("ДатаОплатыДоИзменения"), 	"ДатаОплатыДоКорректировки");
		ПлатежныйКалендарь.ЗагрузитьКолонку(ПлатежныйКалендарь.ВыгрузитьКолонку("ПроцентОплатыДоИзменения"), 	"ПроцентОплатыДоКорректировки");
		ПлатежныйКалендарь.ЗагрузитьКолонку(ПлатежныйКалендарь.ВыгрузитьКолонку("СуммаОплатыДоИзменения"), 	"СуммаОплатыДоКорректировки");
		ПлатежныйКалендарь.ЗагрузитьКолонку(ПлатежныйКалендарь.ВыгрузитьКолонку("СуммаНДСОплатыДоИзменения"), 	"СуммаНДСОплатыДоКорректировки");
		
	ИначеЕсли Не ИсправлениеКорректировки Тогда

		Для Каждого СтрокаТаблицы Из Запасы Цикл
			СтрокаТаблицы.КоличествоДоКорректировки = 0;
			СтрокаТаблицы.ЦенаДоКорректировки       = 0;
			СтрокаТаблицы.СуммаДоКорректировки      = 0;
			СтрокаТаблицы.СуммаНДСДоКорректировки   = 0;
			СтрокаТаблицы.ВсегоДоКорректировки      = 0;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из Предоплата Цикл
			СтрокаТаблицы.СуммаРасчетовДоКорректировки = 0;
			СтрокаТаблицы.СуммаПлатежаДоКорректировки  = 0;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ПлатежныйКалендарь Цикл
			СтрокаТаблицы.ДатаОплатыДоКорректировки = Дата(1,1,1);
			СтрокаТаблицы.ПроцентОплатыДоКорректировки  = 0;
			СтрокаТаблицы.СуммаОплатыДоКорректировки = 0;
			СтрокаТаблицы.СуммаНДСОплатыДоКорректировки  = 0;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли