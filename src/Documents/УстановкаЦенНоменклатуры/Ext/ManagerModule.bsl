
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:  
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение. 
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ДляВсехСтрок(ЗначениеРазрешено(Запасы.ВидЦены))";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
// @skip-warning
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

// Формирует дерево видов цен на основании массива видов цен
//
// Параметры:
//	СтруктураПараметров - Структура:
//  	*ДеревоРезультата - ДеревоЗначений - дерево значений, в которое будет помещен результат формирования
//  	*МассивВидовЦен - Массив из СправочникСсылка.ВидыЦен - виды цен для построения дерева
//  	*ВключаяЦеныНоменклатуры - Булево - признак включения в дерево цен номенклатуры
//  	*ВключаяЦеныКонтрагентов - Булево - признак включения в дерево цен контрагентов
//  	*ВидыЦенВыбраныПриЗаполнении  - Булево - признак выбора вида цен при заполнении
//  	*УникальныйИдентификаторФормы  - УникальныйИдентификатор - уникальный идентификатор формы для заполнения
//
Процедура ПолучитьДеревоВидовЦен(СтруктураПараметров) Экспорт
	
	ДеревоРезультата 				= СтруктураПараметров.ДеревоРезультата;
	МассивВидовЦен 					= СтруктураПараметров.МассивВидовЦен;
	ВключаяЦеныНоменклатуры 		= СтруктураПараметров.ВключаяЦеныНоменклатуры;
	ВключаяЦеныКонтрагентов 		= СтруктураПараметров.ВключаяЦеныКонтрагентов;
	ВидыЦенВыбраныПриЗаполнении 	= СтруктураПараметров.ВидыЦенВыбраныПриЗаполнении;
	УникальныйИдентификаторФормы 	= СтруктураПараметров.УникальныйИдентификаторФормы;
	
	Если УникальныйИдентификаторФормы = Неопределено Тогда
		
		УникальныйИдентификаторФормы = Новый УникальныйИдентификатор;
		
	КонецЕсли;
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыЦен.Ссылка КАК ВидЦен,
	|	ВЫБОР
	|		КОГДА ВидыЦен.Ссылка В (&МассивВидовЦен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Использование,
	|	ПРЕДСТАВЛЕНИЕ(ВидыЦен.Ссылка) КАК Представление,
	|	ИСТИНА КАК ЭтоВидЦенНоменклатуры,
	|	0 КАК Картинка,
	|	ЛОЖЬ КАК РазрешитьВыбирать,
	|	ВидыЦен.БазовыйВидЦен КАК БазовыйВидЦен,
	|	ВЫБОР
	|		КОГДА ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.ДинамическийФормула)
	|			ТОГДА &Формула
	|		КОГДА ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.ДинамическийПроцент)
	|			ТОГДА &Динамический
	|		КОГДА ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.Статический)
	|			ТОГДА &Статический
	|		ИНАЧЕ &Произвольный
	|	КОНЕЦ КАК Вид,
	|	ВидыЦен.ИдентификаторФормул КАК ИдентификаторФормул,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(120)) КАК Параметры,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(120)) КАК АдресСхемыКомпоновкиДанных,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(120)) КАК АдресНастроекСхемыКомпоновкиДанных
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	НЕ ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.Статический)
	|
	|УПОРЯДОЧИТЬ ПО
	|	БазовыйВидЦен УБЫВ
	|ИТОГИ ПО
	|	БазовыйВидЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВидыЦен.Ссылка КАК ВидЦен,
	|	ВЫБОР
	|		КОГДА ВидыЦен.Ссылка В (&МассивВидовЦен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Использование,
	|	ВЫРАЗИТЬ(ВидыЦен.Наименование КАК СТРОКА(200)) КАК Представление,
	|	ИСТИНА КАК ЭтоВидЦенНоменклатуры,
	|	0 КАК Картинка,
	|	ИСТИНА КАК РазрешитьВыбирать,
	|	ЛОЖЬ КАК ТребуетсяЗаполнениеПараметра,
	|	ВЫБОР
	|		КОГДА ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.Статический)
	|			ТОГДА &Статический
	|		КОГДА ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.ПроизвольныйЗапрос)
	|			ТОГДА &Произвольный
	|	КОНЕЦ КАК Вид,
	|	ВидыЦен.ИдентификаторФормул КАК ИдентификаторФормул,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(120)) КАК Параметры,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(120)) КАК АдресСхемыКомпоновкиДанных,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(120)) КАК АдресНастроекСхемыКомпоновкиДанных
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	(ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.Статический)
	|			ИЛИ ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.ПроизвольныйЗапрос))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыЦенКонтрагентов.Ссылка,
	|	ВЫБОР
	|		КОГДА ВидыЦенКонтрагентов.Ссылка В (&МассивВидовЦен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(ВидыЦенКонтрагентов.Наименование КАК СТРОКА(200)),
	|	ЛОЖЬ,
	|	0,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	&Статический,
	|	ВидыЦенКонтрагентов.ИдентификаторФормул,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(120)),
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(120)),
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(120))
	|ИЗ
	|	Справочник.ВидыЦенКонтрагентов КАК ВидыЦенКонтрагентов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Представление
	|ИТОГИ
	|	ВЫБОР
	|		КОГДА ЭтоВидЦенНоменклатуры = ИСТИНА
	|			ТОГДА &ЦеныНоменклатуры
	|		ИНАЧЕ &ЦеныКонтрагентов
	|	КОНЕЦ КАК Представление,
	|	1 КАК Картинка,
	|	ИСТИНА КАК РазрешитьВыбирать
	|ПО
	|	ЭтоВидЦенНоменклатуры";
	
	Запрос.УстановитьПараметр("МассивВидовЦен", МассивВидовЦен);
	
	ПроизвольныйЗапросПредоставление = НСтр("ru = 'Произвольный запрос'");
	ЦеныНоменклатурыПредставление = НСтр("ru = 'Цены номенклатуры'");
	ЦеныКонтрагентовПредставление = НСтр("ru = 'Цены контрагентов'");
	
	Запрос.УстановитьПараметр("Статический", 		НСтр("ru = 'Статический'"));
	Запрос.УстановитьПараметр("Произвольный", 		ПроизвольныйЗапросПредоставление);
	Запрос.УстановитьПараметр("Формула", 			НСтр("ru = 'Формула'"));
	Запрос.УстановитьПараметр("Динамический", 		НСтр("ru = 'Динамический'"));
	Запрос.УстановитьПараметр("ЦеныНоменклатуры", 	ЦеныНоменклатурыПредставление);
	Запрос.УстановитьПараметр("ЦеныКонтрагентов", 	ЦеныКонтрагентовПредставление);
	
	РезультатЗапроса	= Запрос.ВыполнитьПакет();
	ПодчиненныеВидыЦен	= РезультатЗапроса[0].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ДеревоРезультата	= РезультатЗапроса[1].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Для каждого СтрокаГруппы Из ДеревоРезультата.Строки Цикл
		
		Для каждого СтрокаБазовые Из СтрокаГруппы.Строки Цикл
			
			Если СтрокаБазовые.Вид = ПроизвольныйЗапросПредоставление Тогда
				
				ЗаполнитьСлужебныеПоляСКДСтрокиВидаЦены(СтрокаБазовые, УникальныйИдентификаторФормы);
				
			КонецЕсли;
					
		КонецЦикла;	    		
	
	КонецЦикла;
	
	Для каждого СтрокаГруппы Из ПодчиненныеВидыЦен.Строки Цикл
		
		Если ЗначениеЗаполнено(СтрокаГруппы.БазовыйВидЦен) Тогда
			
			СтрокаДереваЗначений = ДеревоРезультата.Строки.Найти(СтрокаГруппы.БазовыйВидЦен, "ВидЦен", Истина);
			Если ТипЗнч(СтрокаДереваЗначений) = Тип("СтрокаДереваЗначений") Тогда
				
				Для каждого СтрокаВидаЦен Из СтрокаГруппы.Строки Цикл
					
					ПодчиненныйВидЦен = СтрокаДереваЗначений.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(ПодчиненныйВидЦен, СтрокаВидаЦен);
					
					Если ПодчиненныйВидЦен.Использование Тогда 						
						ВидыЦенВыбраныПриЗаполнении = Истина; 						
					КонецЕсли;					
										
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			// Формулы
			// 1. Получим таблицу видов цен, которые участвуют в формуле
			// 2. Спозиционируемся в дереве видов цен на родительском элементе
			// 3. Запишем в родительские виды цен формульный вид цен как подчиненный
			
			Для каждого СтрокаФормульногоВидаЦен Из СтрокаГруппы.Строки Цикл
				
				ТаблицаОперандов = ЦенообразованиеФормулыСервер.ПолучитьТаблицуОперандовФормулы(ТекущаяДатаСеанса(), СтрокаФормульногоВидаЦен.ВидЦен.Формула);
				Для каждого СтрокаОперанда Из ТаблицаОперандов Цикл
					
					СтрокаДереваЗначений = ДеревоРезультата.Строки.Найти(СтрокаОперанда.ВидЦен, "ВидЦен", Истина);
					Если ТипЗнч(СтрокаДереваЗначений) = Тип("СтрокаДереваЗначений") Тогда
						
						ПодчиненныйВидЦен = СтрокаДереваЗначений.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(ПодчиненныйВидЦен, СтрокаФормульногоВидаЦен);
					
						Если ПодчиненныйВидЦен.Использование Тогда 						
							ВидыЦенВыбраныПриЗаполнении = Истина; 						
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВключаяЦеныНоменклатуры = Ложь Тогда
		
		НайденнаяСтрока = ДеревоРезультата.Строки.Найти(ЦеныНоменклатурыПредставление, "Представление", Ложь);
		Если НайденнаяСтрока <> Неопределено Тогда
			
			ДеревоРезультата.Строки.Удалить(НайденнаяСтрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВключаяЦеныКонтрагентов = Ложь Тогда
		
		НайденнаяСтрока = ДеревоРезультата.Строки.Найти(ЦеныКонтрагентовПредставление, "Представление", Ложь);
		Если НайденнаяСтрока <> Неопределено Тогда
			
			ДеревоРезультата.Строки.Удалить(НайденнаяСтрока);
			
		КонецЕсли;
		
	КонецЕсли; 
	
	СтруктураПараметров.ДеревоРезультата = ДеревоРезультата;
	
КонецПроцедуры

// Функция - Получить таблицу расчетных цен СКД
//
// Параметры:
//  ТаблицаНоменклатуры	 - ТаблицаЗначений - Таблица для расчета цен СКД
//  ПараметрыВидовЦенСКД - Структура - структура расчета цен
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция ПолучитьТаблицуРасчетныхЦенСКД(ТаблицаНоменклатуры, ПараметрыВидовЦенСКД) Экспорт
	
	КопияТаблицыНоменклатуры = ТаблицаНоменклатуры.Скопировать();

	Если КопияТаблицыНоменклатуры.Колонки.Найти("ВидЦены") = Неопределено
		И КопияТаблицыНоменклатуры.Колонки.Найти("ВидЦен") <> Неопределено Тогда		
		КопияТаблицыНоменклатуры.Колонки.ВидЦен.Имя = "ВидЦены";		
	КонецЕсли;	
	
	Если КопияТаблицыНоменклатуры.Колонки.Найти("ВидЦены") = Неопределено Тогда
		КопияТаблицыНоменклатуры.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	КонецЕсли;

	Если КопияТаблицыНоменклатуры.Колонки.Найти("ЦенаСтарая") = Неопределено Тогда
		КопияТаблицыНоменклатуры.Колонки.Добавить("ЦенаСтарая", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	ЕстьДанныеРасчета = Ложь;
	КопияТаблицыНоменклатуры.Колонки.ЦенаНоваяШаблон.Имя = "Цена";	
	ОбщаяТаблицаНоменклатуры = КопияТаблицыНоменклатуры.СкопироватьКолонки();	
	Для каждого ПараметрВидаЦен Из ПараметрыВидовЦенСКД Цикл
				
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(ПараметрВидаЦен.Значение.АдресСхемыКомпоновкиДанных);
		НастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(ПараметрВидаЦен.Значение.АдресНастроекСхемыКомпоновкиДанных);
		
		РабочийНаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
		
		НаборДанныхНоменклатура = СхемаКомпоновкиДанных.НаборыДанных.Найти("ТаблицаНоменклатуры");
		Если НаборДанныхНоменклатура = Неопределено Тогда
				
			НаборДанныхНоменклатура                = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
			НаборДанныхНоменклатура.Имя            = "ТаблицаНоменклатуры";
			НаборДанныхНоменклатура.ИмяОбъекта     = "ТаблицаНоменклатуры";
			НаборДанныхНоменклатура.ИсточникДанных = РабочийНаборДанных.ИсточникДанных;
			
		КонецЕсли;
				
		ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "Номенклатура", "СправочникСсылка.Номенклатура");
		ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "Характеристика", "СправочникСсылка.ХарактеристикиНоменклатуры");
		ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "КлючСвязи", "Число", Истина);		
		ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "ЦенаСтарая", "Число", Истина);		
		ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "ВидЦены", "СправочникСсылка.ВидыЦен", Истина);
		
		СхемаКомпоновкиДанных.СвязиНаборовДанных.Очистить();
		ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, НаборДанныхНоменклатура, РабочийНаборДанных, "Номенклатура");
		ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, НаборДанныхНоменклатура, РабочийНаборДанных, "Характеристика");
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));  
		
		Если НастройкиКомпоновкиДанных <> Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
			КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
		Иначе
			
			Если ЗначениеЗаполнено(ПараметрВидаЦен.Значение.АдресНастроекСхемыКомпоновкиДанных) Тогда
				НастройкиИзВидаЦены = ПолучитьИзВременногоХранилища(ПараметрВидаЦен.Значение.АдресНастроекСхемыКомпоновкиДанных);
				КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиИзВидаЦены);
				КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
			Иначе
				КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
			КонецЕсли;
			
		КонецЕсли;
		
		КомпоновщикНастроек.Настройки.Структура.Очистить();
		
		ГруппировкаДетальныеЗаписи = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГруппировкаДетальныеЗаписи.Использование = Истина;
		
		КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Номенклатура");		
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Характеристика");		
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Цена");		
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Валюта");
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "КлючСвязи");
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "ВидЦены");
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "ЕдиницаИзмерения");		
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Период");
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "ЦенаСтарая");
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
		
		ВнешниеНаборыДанных = Новый Структура;
		ВнешниеНаборыДанных.Вставить("ТаблицаНоменклатуры", КопияТаблицыНоменклатуры.Скопировать(, "Номенклатура, 
			|Характеристика, КлючСвязи, ВидЦены, ЦенаСтарая"));
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных,,Истина);
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		ДанныеРасчета = Новый ТаблицаЗначений();
		ПроцессорВывода.УстановитьОбъект(ДанныеРасчета);
		ДанныеРасчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		Если НЕ ЕстьДанныеРасчета Тогда
			ЕстьДанныеРасчета = ДанныеРасчета.Количество()>0;
		КонецЕсли;
				
		ДанныеРасчета.ЗаполнитьЗначения(ПараметрВидаЦен.Значение.ВидЦен, "ВидЦены");		
		ДанныеРасчета = СвернутьДанныеРасчетаСКДПоПериоду(ДанныеРасчета);          	
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеРасчета, ОбщаяТаблицаНоменклатуры);
		
	КонецЦикла;	                                         
	
	Если ЕстьДанныеРасчета Тогда
		
		Возврат ОбщаяТаблицаНоменклатуры;
		
	Иначе
		
		Возврат КопияТаблицыНоменклатуры;
		
	КонецЕсли;
		
КонецФункции

#КонецОбласти

#Область ВводНаОсновании

// Заполняет таблицы значений ТаблицаНоменклатуры и ТаблицаХарактеристик по приходным накладным
// и помещает их во временное хранилище по переданному адресу
//
// Параметры:
//  СтруктураПараметров - Структура:
//   * МассивПриходныхНакладных - Массив - массив документов ссылок приходных накладных
//   * ИспользоватьХарактеристики - Булево - признак использования характеристик
//  АдресВременногоХранилища - АдресВременногоХранилища - адрес по которому будет помещены таблицы
//
Процедура ПолучитьНоменклатуруПоПриходнымНакладным(СтруктураПараметров, АдресВременногоХранилища) Экспорт
	
	// 1. Получим СКД
	ИмяСхемыКД = "ПоПриходнымНакладным";
	СхемаКомпоновкиДанных = Документы.УстановкаЦенНоменклатуры.ПолучитьМакет(ИмяСхемыКД);
	
	Запрос = Новый Запрос(СхемаКомпоновкиДанных.НаборыДанных.Номенклатура.Запрос);
	Запрос.УстановитьПараметр("МассивПриходныхНакладных", СтруктураПараметров.МассивПриходныхНакладных);
	ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос(СхемаКомпоновкиДанных.НаборыДанных.ХарактеристикиНоменклатуры.Запрос);
	Запрос.УстановитьПараметр("МассивПриходныхНакладных", СтруктураПараметров.МассивПриходныхНакладных);
	ТаблицаХарактеристик = Запрос.Выполнить().Выгрузить();
	
	Если СтруктураПараметров.ИспользоватьХарактеристики = 0 Тогда
		
		ТаблицаХарактеристик.Очистить();
		
	КонецЕсли;
	
	ЛокальныйКлючСвязи = 0;
	Для каждого СтрокаНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		ЛокальныйКлючСвязи = ЛокальныйКлючСвязи + 1;
		СтрокаНоменклатуры.КлючСвязи = ЛокальныйКлючСвязи;
		
		ПараметрыОтбора = Новый Структура("Номенклатура", СтрокаНоменклатуры.Номенклатура);
		СтрокиХарактеристик = ТаблицаХарактеристик.НайтиСтроки(ПараметрыОтбора);
		Для каждого СтрокаХарактеристики Из СтрокиХарактеристик Цикл
			
			СтрокаХарактеристики.КлючСвязи = ЛокальныйКлючСвязи;
			
		КонецЦикла;
		
	КонецЦикла;
	
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Новый Структура("ТаблицаНоменклатуры, ТаблицаХарактеристик", ТаблицаНоменклатуры, ТаблицаХарактеристик));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти  

#Область СлужебныеПроцедурыИФункции

#Область РаботаСФормулами

Процедура ПолучитьТаблицуПоследнихЦенПоступлений(ПараметрыРасчета, ТаблицаСЦенамиПоступления)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаФормыНоменклатуры", ПараметрыРасчета.КоллекцииДанныхФормы.ТаблицаФормыНоменклатуры);
	Запрос.УстановитьПараметр("ТаблицаФормыХарактеристик", ПараметрыРасчета.КоллекцииДанныхФормы.ТаблицаФормыХарактеристик);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаФормыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатура
	|ИЗ
	|	&ТаблицаФормыНоменклатуры КАК ТаблицаФормыНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаФормыХарактеристик.Номенклатура КАК Номенклатура,
	|	ТаблицаФормыХарактеристик.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаХарактеристики
	|ИЗ
	|	&ТаблицаФормыХарактеристик КАК ТаблицаФормыХарактеристик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатура.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатура.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатураХарактеристики
	|ИЗ
	|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаХарактеристики.Номенклатура,
	|	ТаблицаХарактеристики.Характеристика
	|ИЗ
	|	ТаблицаХарактеристики КАК ТаблицаХарактеристики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПН.Номенклатура КАК Номенклатура,
	|	ПН.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ПН.Ссылка.Дата) КАК Период
	|ПОМЕСТИТЬ ЗапасыПриходныхНакладныхСПериодами
	|ИЗ
	|	ТаблицаНоменклатураХарактеристики КАК ТаблицаНоменклатураХарактеристики
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная.Запасы КАК ПН
	|		ПО ТаблицаНоменклатураХарактеристики.Номенклатура = ПН.Номенклатура
	|			И ТаблицаНоменклатураХарактеристики.Характеристика = ПН.Характеристика
	|			И (ПН.Ссылка.Проведен)
	|ГДЕ
	|	НЕ ПН.Номенклатура ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ПН.Номенклатура,
	|	ПН.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПН.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ПН.Ссылка.Дата) КАК Период
	|ПОМЕСТИТЬ УслугиПриходныхНакладныхСПериодами
	|ИЗ
	|	ТаблицаНоменклатураХарактеристики КАК ТаблицаНоменклатураХарактеристики
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная.Расходы КАК ПН
	|		ПО ТаблицаНоменклатураХарактеристики.Номенклатура = ПН.Номенклатура
	|			И (ПН.Ссылка.Проведен)
	|ГДЕ
	|	НЕ ПН.Номенклатура ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ПН.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПН.Номенклатура КАК Номенклатура,
	|	ПН.Характеристика КАК Характеристика,
	|	ПН.Период КАК Период,
	|	ЦеныИзНакладных.Цена КАК Значение,
	|	ЦеныИзНакладных.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЦеныИзНакладных.Ссылка.Курс КАК Курс,
	|	ЦеныИзНакладных.Ссылка.Кратность КАК Кратность
	|ПОМЕСТИТЬ ЦеныИзНакладныхЗапасы
	|ИЗ
	|	ЗапасыПриходныхНакладныхСПериодами КАК ПН
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная.Запасы КАК ЦеныИзНакладных
	|		ПО ПН.Период = ЦеныИзНакладных.Ссылка.Дата
	|			И ПН.Номенклатура = ЦеныИзНакладных.Номенклатура
	|			И ПН.Характеристика = ЦеныИзНакладных.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПН.Номенклатура КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	ПН.Период КАК Период,
	|	ЦеныИзНакладных.Цена КАК Значение,
	|	ЦеныИзНакладных.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЦеныИзНакладных.Ссылка.Курс КАК Курс,
	|	ЦеныИзНакладных.Ссылка.Кратность КАК Кратность
	|ПОМЕСТИТЬ ЦеныИзНакладныхУслуги
	|ИЗ
	|	УслугиПриходныхНакладныхСПериодами КАК ПН
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная.Расходы КАК ЦеныИзНакладных
	|		ПО ПН.Период = ЦеныИзНакладных.Ссылка.Дата
	|			И ПН.Номенклатура = ЦеныИзНакладных.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныИзНакладныхЗапасы.Номенклатура КАК Номенклатура,
	|	ЦеныИзНакладныхЗапасы.Характеристика КАК Характеристика,
	|	ЦеныИзНакладныхЗапасы.Период КАК Период,
	|	ЦеныИзНакладныхЗапасы.Значение КАК Значение,
	|	ЦеныИзНакладныхЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЦеныИзНакладныхЗапасы.Курс КАК Курс,
	|	ЦеныИзНакладныхЗапасы.Кратность КАК Кратность
	|ИЗ
	|	ЦеныИзНакладныхЗапасы КАК ЦеныИзНакладныхЗапасы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЦеныИзНакладныхУслуги.Номенклатура,
	|	ЦеныИзНакладныхУслуги.Характеристика,
	|	ЦеныИзНакладныхУслуги.Период,
	|	ЦеныИзНакладныхУслуги.Значение,
	|	ЦеныИзНакладныхУслуги.ЕдиницаИзмерения,
	|	ЦеныИзНакладныхУслуги.Курс,
	|	ЦеныИзНакладныхУслуги.Кратность
	|ИЗ
	|	ЦеныИзНакладныхУслуги КАК ЦеныИзНакладныхУслуги";
	
	ТаблицаСЦенамиПоступления = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ПолучитьТаблицуПоследнихЦенРеализаций(ПараметрыРасчета, ТаблицаСЦенамиРеализации)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаФормыНоменклатуры", ПараметрыРасчета.КоллекцииДанныхФормы.ТаблицаФормыНоменклатуры);
	Запрос.УстановитьПараметр("ТаблицаФормыХарактеристик", ПараметрыРасчета.КоллекцииДанныхФормы.ТаблицаФормыХарактеристик);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаФормыНоменклатуры.Номенклатура КАК Номенклатура
	|	,Значение(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатура
	|ИЗ &ТаблицаФормыНоменклатуры КАК ТаблицаФормыНоменклатуры
	|;
	|//////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаФормыХарактеристик.Номенклатура КАК Номенклатура
	|	,ТаблицаФормыХарактеристик.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаХарактеристики
	|ИЗ &ТаблицаФормыХарактеристик КАК ТаблицаФормыХарактеристик
	|;
	|//////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатура.Номенклатура КАК Номенклатура
	|	,ТаблицаНоменклатура.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатураХарактеристики
	|ИЗ ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ТаблицаХарактеристики.Номенклатура КАК Номенклатура
	|	,ТаблицаХарактеристики.Характеристика КАК Характеристика
	|ИЗ ТаблицаХарактеристики КАК ТаблицаХарактеристики
	|Индексировать ПО Номенклатура, Характеристика
	|;
	|//////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РН.Номенклатура КАК Номенклатура
	|	,РН.Характеристика КАК Характеристика
	|	,Максимум(РН.Ссылка.Дата) КАК Период
	|ПОМЕСТИТЬ НоменклатураРасходныхНакладныхСПериодами
	|ИЗ
	|	ТаблицаНоменклатураХарактеристики КАК ТаблицаНоменклатураХарактеристики
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная.Запасы КАК РН 
	|		ПО ТаблицаНоменклатураХарактеристики.Номенклатура = РН.Номенклатура
	|			И ТаблицаНоменклатураХарактеристики.Характеристика = РН.Характеристика
	|			И РН.Ссылка.Проведен
	|ГДЕ 
	|	НЕ РН.Номенклатура ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	РН.Номенклатура, РН.Характеристика
	|Индексировать ПО Номенклатура, Характеристика, Период
	|;
	|//////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РН.Номенклатура КАК Номенклатура
	|	,РН.Характеристика КАК Характеристика
	|	,РН.Период КАК Период
	|	,ЦеныИзНакладных.Цена КАК Цена
	|	,ЦеныИзНакладных.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	,ЦеныИзНакладных.Ссылка.Курс КАК Курс
	|	,ЦеныИзНакладных.Ссылка.Кратность КАК Кратность
	|ПОМЕСТИТЬ НоменклатураРасходныхНакладныхСПериодамиИЦенами
	|ИЗ НоменклатураРасходныхНакладныхСПериодами КАК РН
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная.Запасы КАК ЦеныИзНакладных
	|		ПО РН.Период = ЦеныИзНакладных.Ссылка.Дата И РН.Номенклатура = ЦеныИзНакладных.Номенклатура И РН.Характеристика = ЦеныИзНакладных.Характеристика
	|;
	|//////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктВР.Номенклатура КАК Номенклатура
	|	,АктВР.Характеристика КАК Характеристика
	|	,Максимум(АктВР.Ссылка.Дата) КАК Период
	|ПОМЕСТИТЬ НоменклатураАктаСПериодами
	|ИЗ
	|	ТаблицаНоменклатураХарактеристики КАК ТаблицаНоменклатураХарактеристики
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктВыполненныхРабот.РаботыИУслуги КАК АктВР 
	|		ПО ТаблицаНоменклатураХарактеристики.Номенклатура = АктВР.Номенклатура
	|			И ТаблицаНоменклатураХарактеристики.Характеристика = АктВР.Характеристика
	|			И АктВР.Ссылка.Проведен
	|ГДЕ 
	|	НЕ АктВР.Номенклатура ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	АктВР.Номенклатура, АктВР.Характеристика
	|Индексировать ПО Номенклатура, Характеристика, Период
	|;
	|//////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктВР.Номенклатура КАК Номенклатура
	|	,АктВР.Характеристика КАК Характеристика
	|	,АктВР.Период КАК Период
	|	,ЦеныИзАктовВР.Цена КАК Цена
	|	,ЦеныИзАктовВР.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	,ЦеныИзАктовВР.Ссылка.Курс КАК Курс
	|	,ЦеныИзАктовВР.Ссылка.Кратность КАК Кратность
	|ПОМЕСТИТЬ НоменклатураАктовСПериодамиИЦенами
	|ИЗ НоменклатураАктаСПериодами КАК АктВР
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктВыполненныхРабот.РаботыИУслуги КАК ЦеныИзАктовВР
	|		ПО АктВР.Период = ЦеныИзАктовВР.Ссылка.Дата И АктВР.Номенклатура = ЦеныИзАктовВР.Номенклатура И АктВР.Характеристика = ЦеныИзАктовВР.Характеристика
	|;
	|//////////////////////////////////////////////////////////
	|ВЫБРАТЬ РН.Номенклатура КАК Номенклатура
	|	,РН.Характеристика КАК Характеристика
	|	,РН.Период КАК Период
	|	,РН.Цена
	|	,РН.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	,РН.Курс КАК Курс
	|	,РН.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВсяНоменклатура
	|ИЗ НоменклатураРасходныхНакладныхСПериодамиИЦенами КАК РН
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ АктВР.Номенклатура КАК Номенклатура
	|	,АктВР.Характеристика КАК Характеристика
	|	,АктВР.Период КАК Период
	|	,АктВР.Цена
	|	,АктВР.ЕдиницаИзмерения
	|	,АктВР.Курс КАК Курс
	|	,АктВР.Кратность КАК Кратность
	|ИЗ НоменклатураАктовСПериодамиИЦенами КАК АктВР
	|;
	|//////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсяНоменклатура.Номенклатура КАК Номенклатура
	|	,ВсяНоменклатура.Характеристика КАК Характеристика
	|	,Максимум(ВсяНоменклатура.Период) КАК Период
	|	,ВсяНоменклатура.Цена КАК Значение
	|	,ВсяНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	,ВсяНоменклатура.Курс КАК Курс
	|	,ВсяНоменклатура.Кратность КАК Кратность
	|ИЗ ВсяНоменклатура КАК ВсяНоменклатура
	|СГРУППИРОВАТЬ ПО ВсяНоменклатура.Номенклатура, ВсяНоменклатура.Характеристика, ВсяНоменклатура.Цена, ВсяНоменклатура.ЕдиницаИзмерения, ВсяНоменклатура.Курс, ВсяНоменклатура.Кратность";
	
	ТаблицаСЦенамиРеализации = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ПолучитьТаблицуСебестоимости(ТаблицаССебестоимостью)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапасыОстаткиИОбороты.Номенклатура КАК Номенклатура
	|	,ЗапасыОстаткиИОбороты.Характеристика КАК Характеристика
	|	,ЗапасыОстаткиИОбороты.СуммаКонечныйОстаток
	|	,ЗапасыОстаткиИОбороты.КоличествоКонечныйОстаток
	|	,ВЫБОР
	|		КОГДА ЗапасыОстаткиИОбороты.СуммаКонечныйОстаток = 0 					// Себестоимость ниже 0 для цен безразлична
	|				ИЛИ ЗапасыОстаткиИОбороты.КоличествоКонечныйОстаток = 0			// Деление на 0 - это ошибка
	|				ИЛИ ЗапасыОстаткиИОбороты.КоличествоКонечныйОстаток ЕСТЬ NULL	// Операция не возможна
	|			ТОГДА 0
	|		ИНАЧЕ ЗапасыОстаткиИОбороты.СуммаКонечныйОстаток / ЗапасыОстаткиИОбороты.КоличествоКонечныйОстаток
	|	КОНЕЦ КАК Значение
	|	,ЗапасыОстаткиИОбороты.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрНакопления.Запасы.ОстаткиИОбороты(, , Авто, , СчетУчета.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.Запасы)) КАК ЗапасыОстаткиИОбороты");
	
	ТаблицаССебестоимостью = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ПолучитьТаблицуЦенОперандовФормулы(ПараметрыРасчета, ТаблицаОперандов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаФормыНоменклатуры",	ПараметрыРасчета.КоллекцииДанныхФормы.ТаблицаФормыНоменклатуры);
	Запрос.УстановитьПараметр("ТаблицаФормыХарактеристик", ПараметрыРасчета.КоллекцииДанныхФормы.ТаблицаФормыХарактеристик);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаФормыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатура
	|ИЗ
	|	&ТаблицаФормыНоменклатуры КАК ТаблицаФормыНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаФормыХарактеристик.Номенклатура КАК Номенклатура,
	|	ТаблицаФормыХарактеристик.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаХарактеристики
	|ИЗ
	|	&ТаблицаФормыХарактеристик КАК ТаблицаФормыХарактеристик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатура.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатура.Характеристика КАК Характеристика,
	|	ИСТИНА КАК ТребуетсяНовыйРасчет
	|ИЗ
	|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаХарактеристики.Номенклатура,
	|	ТаблицаХарактеристики.Характеристика,
	|	ИСТИНА
	|ИЗ
	|	ТаблицаХарактеристики КАК ТаблицаХарактеристики";
	
	ТаблицаНоменклатураИХарактеристики = Запрос.Выполнить().Выгрузить();
	
	ЦенообразованиеСервер.ЗначенияЦенВТаблицуОперандов(НачалоДня(ТекущаяДатаСеанса()), ТаблицаОперандов, ТаблицаНоменклатураИХарактеристики);
	
	ТаблицаНоменклатураИХарактеристики = Неопределено;
	
КонецПроцедуры

Процедура ПодготовитьОперандыИДанные(ПараметрыРасчета, ТаблицаОперандов) Экспорт
	Перем ПодготовленнаяТаблицаДанных;
	
	Формула = ПараметрыРасчета.Формула;
	
	Если ПараметрыРасчета.Свойство("ПериодРасчета") Тогда
		
		ПериодРасчета = НачалоДня(?(ЗначениеЗаполнено(ПараметрыРасчета.ПериодРасчета), ПараметрыРасчета.ПериодРасчета, ТекущаяДатаСеанса()));
		
	КонецЕсли;
	
	ТаблицаОперандов = ЦенообразованиеФормулыСервер.ПолучитьТаблицуОперандовФормулы(ПериодРасчета, Формула);
	ТаблицаОперандов.Колонки.Добавить("Значение");
	
	СтрокаТаблицы = ТаблицаОперандов.Найти("[ПоследняяЦенаВПриходе]", "Операнд");
	Если СтрокаТаблицы <> Неопределено Тогда
		
		ПолучитьТаблицуПоследнихЦенПоступлений(ПараметрыРасчета, ПодготовленнаяТаблицаДанных);
		СтрокаТаблицы.Значение = ПодготовленнаяТаблицаДанных;
		
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаОперандов.Найти("[ПоследняяЦенаВРасходе]", "Операнд");
	Если СтрокаТаблицы <> Неопределено Тогда
		
		ПолучитьТаблицуПоследнихЦенРеализаций(ПараметрыРасчета, ПодготовленнаяТаблицаДанных);
		СтрокаТаблицы.Значение = ПодготовленнаяТаблицаДанных;
		
	КонецЕсли;
	
	СтрокаТаблицыСебестоимость 			= ТаблицаОперандов.Найти("[Себестоимость]", "Операнд");
	СтрокаТаблицыСебестоимостьНацВалюта = ТаблицаОперандов.Найти("[СебестоимостьНацВалюта]", "Операнд");
	Если СтрокаТаблицыСебестоимость <> Неопределено 
		ИЛИ СтрокаТаблицыСебестоимостьНацВалюта <> Неопределено Тогда
		
		ПолучитьТаблицуСебестоимости(ПодготовленнаяТаблицаДанных);
		Если СтрокаТаблицыСебестоимость <> Неопределено Тогда
			
			СтрокаТаблицыСебестоимость.Значение = ПодготовленнаяТаблицаДанных;
			
		КонецЕсли;
		
		Если СтрокаТаблицыСебестоимостьНацВалюта <> Неопределено Тогда
			
			СтрокаТаблицыСебестоимостьНацВалюта.Значение = ПодготовленнаяТаблицаДанных;
			
			КурсВалютыУчета			= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Константы.ВалютаУчета.Получить(), ПериодРасчета);
			
			НоваяСтрока				= ТаблицаОперандов.Добавить();
			НоваяСтрока.Операнд		= "[КурсВалютыУчета]";
			НоваяСтрока.Значение	= КурсВалютыУчета.Курс / КурсВалютыУчета.Кратность;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаОперандов.Найти("[КурсДоллара]", "Операнд");
	Если СтрокаТаблицы <> Неопределено Тогда
		
		ДанныеКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Справочники.Валюты.НайтиПоКоду("840"), ПериодРасчета);
		СтрокаТаблицы.Значение = ДанныеКурса.Курс / ДанныеКурса.Кратность;
		
	КонецЕсли;
		
	СтрокаТаблицы = ТаблицаОперандов.Найти("[КурсЕвро]", "Операнд");
	Если СтрокаТаблицы <> Неопределено Тогда
		
		ДанныеКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Справочники.Валюты.НайтиПоКоду("978"), ПериодРасчета);
		СтрокаТаблицы.Значение = ДанныеКурса.Курс / ДанныеКурса.Кратность;
		
	КонецЕсли;
	
	МассивЦеныНоменклатуры = ТаблицаОперандов.НайтиСтроки(Новый Структура("ЭтоЦеныНоменклатуры", Истина));
	МассивЦеныКонтрагентов = ТаблицаОперандов.НайтиСтроки(Новый Структура("ЭтоЦеныНоменклатуры", Ложь));
	Если МассивЦеныНоменклатуры.Количество() > 0
		ИЛИ МассивЦеныКонтрагентов.Количество() > 0 Тогда
		
		ПолучитьТаблицуЦенОперандовФормулы(ПараметрыРасчета, ТаблицаОперандов);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СлияниеДанныхВОбщуюТаблицуЗначений(ПараметрыРасчета, КоллекцияНоменклатуры, ВидЦен) Экспорт
	
	КоллекцияНоменклатуры = Новый ТаблицаЗначений;
	КоллекцияНоменклатуры.Колонки.Добавить("КлючСвязиНоменклатура",		Новый ОписаниеТипов("Число"));
	КоллекцияНоменклатуры.Колонки.Добавить("КлючСвязиХарактеристика",	Новый ОписаниеТипов("Число"));
	КоллекцияНоменклатуры.Колонки.Добавить("Период", 					Новый ОписаниеТипов("Дата"));
	КоллекцияНоменклатуры.Колонки.Добавить("ВидЦен", 					Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	КоллекцияНоменклатуры.Колонки.Добавить("Номенклатура",				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	КоллекцияНоменклатуры.Колонки.Добавить("Характеристика",			Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КоллекцияНоменклатуры.Колонки.Добавить("Цена",						Новый ОписаниеТипов("Число"));
	КоллекцияНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения",			Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения, СправочникСсылка.КлассификаторЕдиницИзмерения"));
	КоллекцияНоменклатуры.Колонки.Добавить("ТекущееЗначение",			Новый ОписаниеТипов("Число"));
	КоллекцияНоменклатуры.Колонки.Добавить("Актуальность",				Новый ОписаниеТипов("Булево"));
	КоллекцияНоменклатуры.Колонки.Добавить("ВключаяХарактеристики",		Новый ОписаниеТипов("Булево"));
	КоллекцияНоменклатуры.Колонки.Добавить("Автор",						Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	КоллекцияНоменклатуры.Колонки.Добавить("Формула",					Новый ОписаниеТипов("Строка"));
	КоллекцияНоменклатуры.Колонки.Добавить("ПересчетВыполнен",			Новый ОписаниеТипов("Булево"));
	
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ИдентификаторВидаЦен = "ТЧНоменклатура" + ВидЦен.ИдентификаторФормул;
	
	Для каждого СтрокаНоменклатуры Из ПараметрыРасчета.КоллекцииДанныхФормы.ТаблицаФормыНоменклатуры Цикл
		
		НоваяСтрока = КоллекцияНоменклатуры.Добавить();
		НоваяСтрока.КлючСвязиНоменклатура	= СтрокаНоменклатуры.КлючСвязи;
		НоваяСтрока.КлючСвязиХарактеристика	= -1;
		НоваяСтрока.Номенклатура			= СтрокаНоменклатуры.Номенклатура;
		НоваяСтрока.Характеристика			= ПустаяХарактеристика;
		НоваяСтрока.ВключаяХарактеристики	= ПараметрыРасчета.УстанавливатьХарактеристикамБезЦен;
		НоваяСтрока.ТекущееЗначение			= СтрокаНоменклатуры[ИдентификаторВидаЦен + "_ЦенаНовая"];
		НоваяСтрока.ЕдиницаИзмерения		= СтрокаНоменклатуры[ИдентификаторВидаЦен + "_ЕдИзм"];
		НоваяСтрока.ВидЦен 					= ВидЦен;
		Рассчитывать = ?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаНоменклатуры, "Рассчитывать"), СтрокаНоменклатуры.Рассчитывать, Истина);
		Если Рассчитывать Тогда
			НоваяСтрока.Формула				= ПараметрыРасчета.Формула;
		Иначе
			НоваяСтрока.Формула 			= Формат(НоваяСтрока.ТекущееЗначение, "ЧГ=");
		КонецЕсли;		
		
	КонецЦикла;
	
	ИдентификаторВидаЦен = "ТЧХарактеристики" + ВидЦен.ИдентификаторФормул;
	
	Для каждого СтрокаХарактеристики Из ПараметрыРасчета.КоллекцииДанныхФормы.ТаблицаФормыХарактеристик Цикл
		
		НоваяСтрока = КоллекцияНоменклатуры.Добавить();
		НоваяСтрока.КлючСвязиНоменклатура	= -1;
		НоваяСтрока.КлючСвязиХарактеристика	= СтрокаХарактеристики.КлючСвязи;
		НоваяСтрока.Номенклатура			= СтрокаХарактеристики.Номенклатура;
		НоваяСтрока.Характеристика			= СтрокаХарактеристики.Характеристика;
		НоваяСтрока.ВключаяХарактеристики	= ПараметрыРасчета.УстанавливатьХарактеристикамБезЦен;
		НоваяСтрока.ТекущееЗначение			= СтрокаХарактеристики[ИдентификаторВидаЦен + "_ЦенаНовая"];
		НоваяСтрока.ЕдиницаИзмерения		= СтрокаХарактеристики[ИдентификаторВидаЦен + "_ЕдИзм"];
		НоваяСтрока.ВидЦен 					= ВидЦен;
		Рассчитывать = ?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаХарактеристики, "Рассчитывать"), СтрокаХарактеристики.Рассчитывать, Истина);
		Если Рассчитывать Тогда
			НоваяСтрока.Формула				= ПараметрыРасчета.Формула;
		Иначе
			НоваяСтрока.Формула 			= Формат(НоваяСтрока.ТекущееЗначение, "ЧГ=");
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ПересчитанныеСтрокиВТаблицыДанных(ПараметрыРасчета, КоллекцияНоменклатуры, ВидЦен)
	
	ИдентификаторВидаЦен = ВидЦен.ИдентификаторФормул;
	ПараметрыОтбора = Новый Структура;
	
	Для каждого СтрокаКоллекции Из КоллекцияНоменклатуры Цикл
		
		ПараметрыОтбора.Очистить();
		Если СтрокаКоллекции.КлючСвязиХарактеристика < 0 Тогда
			
			Идентификатор = "ТЧНоменклатура" + ИдентификаторВидаЦен;
			ИмяТаблицы = "ТаблицаФормыНоменклатуры";
			ПараметрыОтбора.Вставить("КлючСвязи", СтрокаКоллекции.КлючСвязиНоменклатура);
			ПараметрыОтбора.Вставить("Номенклатура", СтрокаКоллекции.Номенклатура);
			
		Иначе
			
			Идентификатор = "ТЧХарактеристики" + ИдентификаторВидаЦен;
			ИмяТаблицы = "ТаблицаФормыХарактеристик";
			ПараметрыОтбора.Вставить("КлючСвязи", СтрокаКоллекции.КлючСвязиХарактеристика);
			ПараметрыОтбора.Вставить("Номенклатура", СтрокаКоллекции.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", СтрокаКоллекции.Характеристика);
			
		КонецЕсли;
		
		НайденныеСтроки = ПараметрыРасчета.КоллекцииДанныхФормы[ИмяТаблицы].НайтиСтроки(ПараметрыОтбора);
		Для каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
			
			СтрокаТабличнойЧасти[Идентификатор + "_ЦенаНовая"] = СтрокаКоллекции.Цена;
			СтрокаТабличнойЧасти[Идентификатор + "_ЕдИзм"] = СтрокаКоллекции.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти[Идентификатор + "_Дельта"] = СтрокаТабличнойЧасти[Идентификатор + "_ЦенаНовая"] - СтрокаТабличнойЧасти[Идентификатор + "_ЦенаДо"];
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьНовыеЦеныПоФормуле(ПараметрыРасчета) Экспорт
	Перем КоллекцияНоменклатуры, ТаблицаОперандов;
	
	ПараметрыРасчетаКоллекции = Новый Структура("ВидЦен, Курс, Кратность");
	
	ПодготовитьОперандыИДанные(ПараметрыРасчета, ТаблицаОперандов);
	Для каждого ЭлементСоответствия Из ПараметрыРасчета.ВидыЦенКПересчету Цикл
		
		КоллекцияНоменклатуры = Неопределено;
		
		ПараметрыРасчетаКоллекции.ВидЦен = ЭлементСоответствия.Ключ;
		Если ЗначениеЗаполнено(ПараметрыРасчетаКоллекции.ВидЦен) Тогда
			
			КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПараметрыРасчетаКоллекции.ВидЦен.ВалютаЦены, ТекущаяДатаСеанса());
			ПараметрыРасчетаКоллекции.Курс = ?(ЗначениеЗаполнено(КурсВалюты.Курс), КурсВалюты.Курс, 1);
			ПараметрыРасчетаКоллекции.Кратность = ?(ЗначениеЗаполнено(КурсВалюты.Кратность), КурсВалюты.Кратность, 1);
			
		Иначе
			
			ПараметрыРасчетаКоллекции.Курс = 1;
			ПараметрыРасчетаКоллекции.Кратность = 1;
			
		КонецЕсли;
		
		СлияниеДанныхВОбщуюТаблицуЗначений(ПараметрыРасчета, КоллекцияНоменклатуры, ПараметрыРасчетаКоллекции.ВидЦен);
		ЦенообразованиеФормулыСервер.РассчитатьДанныеКоллекции(КоллекцияНоменклатуры, ТаблицаОперандов, ПараметрыРасчетаКоллекции, Истина, Истина);
		ПересчитанныеСтрокиВТаблицыДанных(ПараметрыРасчета, КоллекцияНоменклатуры, ПараметрыРасчетаКоллекции.ВидЦен);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьНовыеЦеныПоФормулеДлОперация(ПараметрыРасчета, ФоновоеЗаданиеАдресХранилища = "") Экспорт
	
	РассчитатьНовыеЦеныПоФормуле(ПараметрыРасчета);
	ПоместитьВоВременноеХранилище(ПараметрыРасчета.КоллекцииДанныхФормы, ФоновоеЗаданиеАдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСТаблицамиЗначений

Функция СвернутьДанныеРасчетаСКДПоПериоду(ДанныеРасчета)

	ТаблицаРезультат = ДанныеРасчета.СкопироватьКолонки();
	
	МассивКлючей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеРасчета.ВыгрузитьКолонку("КлючСвязи"));
	МассивХарактеристик = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеРасчета.ВыгрузитьКолонку("Характеристика"));
	
	Для каждого Ключ Из МассивКлючей Цикл
		
		Для каждого Характеристика Из МассивХарактеристик Цикл
			
			Отбор = Новый Структура("КлючСвязи, Характеристика", Ключ, Характеристика);
			Строки = ДанныеРасчета.Скопировать(ДанныеРасчета.НайтиСтроки(Отбор));
			Строки.Сортировать("Период Убыв");
			Если Строки.Количество() > 0 Тогда
				
				ЗаполнитьЗначенияСвойств(ТаблицаРезультат.Добавить(), Строки[0]);	
				
			КонецЕсли;  
			
		КонецЦикла;
		
	КонецЦикла;                                                           
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Процедура ДобавитьИЗаполнитьКолонкиТекущихЦен(ВыбранныеВидыЦен, ИмяТабличнойЧасти, ТаблицаИсточник, ТаблицаИсточникСЦеной, ТаблицаЦен, ПараметрыКопирования)
	
	ПодчиненныеВидыЦен = Новый Массив;
	
	Если ТаблицаЦен = Неопределено Тогда
		
		ТаблицаЦен = ПолучитьТаблицуРасчетныхЦенСКД(ТаблицаИсточник, ПараметрыКопирования.ПараметрыВидовЦенСКД);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИсточник", ТаблицаИсточник);
	Запрос.УстановитьПараметр("ТаблицаЦен", ТаблицаЦен);
	Запрос.УстановитьПараметр("ПериодСреза", НачалоДня(ПараметрыКопирования.Период) - 1);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИсточник.Номенклатура КАК Номенклатура,
	|	ТаблицаИсточник.Характеристика КАК Характеристика,	
	|	ТаблицаИсточник.ЕдиницаИзмерения КАК ЕдиницаИзмеренияШаблон,	
	|	ТаблицаИсточник.ЕдиницаИзмерения КАК ЕдиницаИзмерения,	
	|	ТаблицаИсточник.ЦенаНоваяШаблон КАК ЦенаНоваяШаблон,	
	|	ТаблицаИсточник.КлючСвязи КАК КлючСвязи	
	|ПОМЕСТИТЬ ТаблицаИсточник
	|ИЗ
	|	&ТаблицаИсточник КАК ТаблицаИсточник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЦен.Номенклатура КАК Номенклатура,
	|	ТаблицаЦен.Характеристика КАК Характеристика,
	|	ТаблицаЦен.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаЦен.Цена КАК Цена,
	|	ТаблицаЦен.ЦенаСтарая КАК ЦенаСтарая,
	|	ТаблицаЦен.ВидЦены КАК ВидЦены
	|ПОМЕСТИТЬ ТаблицаЦен
	|ИЗ
	|	&ТаблицаЦен КАК ТаблицаЦен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИсточник.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаИсточник.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаИсточник.Номенклатура.ЭтоНабор КАК ЭтоНабор,
	|	ТаблицаИсточник.Номенклатура.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	|	ТаблицаИсточник.Номенклатура.ПометкаУдаления КАК ПометкаУдаления,	
	|	ТаблицаИсточник.Характеристика КАК Характеристика,	

	|	ТаблицаИсточник.ЦенаНоваяШаблон КАК ЦенаНоваяШаблон,
	|	ТаблицаИсточник.ЕдиницаИзмеренияШаблон КАК ЕдиницаИзмеренияШаблон,
	|	ТаблицаИсточник.КлючСвязи КАК КлючСвязи,	
	|	&ПолеИменаКолонокТекущихЦен,
	|	&ПолеИменаКолонокЕдиницИзмерения,
	|	&ПолеИменаКолонокДельта,
	|	&ПолеИменаКолонокНовыхЦен
	|ИЗ
	|	ТаблицаИсточник КАК ТаблицаИсточник";
	
	// таблица документа
	ШаблонТекстаЗапросаВидЦен =
	"
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦен КАК _ШаблонИмяТаблицыЗапроса
	|		ПО ТаблицаИсточник.Номенклатура = _ШаблонИмяТаблицыЗапроса.Номенклатура 	
	|		И _ШаблонИмяТаблицыЗапроса.ВидЦены  = &_ШаблонИмяВидаЦен";
	
	ШаблонТекстаЗапросаВидЦен = ШаблонТекстаЗапросаВидЦен 
		+ ?(ИмяТабличнойЧасти = "ТЧНоменклатура",
			"
			|	И _ШаблонИмяТаблицыЗапроса.Характеристика = Значение(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)",
			"		
			|	И ТаблицаИсточник.Характеристика = _ШаблонИмяТаблицыЗапроса.Характеристика");
			
	// таблица регистра
	ШаблонТекстаЗапросаВидЦенРегистр =
	"
	|	Левое Соединение РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ПериодСреза, Актуальность И ВидЦен  = &_ШаблонИмяВидаЦенРегистр) КАК _ШаблонИмяТаблицыЗапросаРегистр
	|		По ТаблицаИсточник.Номенклатура = _ШаблонИмяТаблицыЗапросаРегистр.Номенклатура";

	ШаблонТекстаЗапросаВидЦенРегистр = ШаблонТекстаЗапросаВидЦенРегистр 
		+ ?(ИмяТабличнойЧасти = "ТЧНоменклатура",
			"		И _ШаблонИмяТаблицыЗапросаРегистр.Характеристика = Значение(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)",
			"		И ТаблицаИсточник.Характеристика = _ШаблонИмяТаблицыЗапросаРегистр.Характеристика");
			
	ПолеИменаКолонокТекущихЦен = "";	
	ПолеИменаКолонокЕдиницИзмерения = "";
	ПолеИменаКолонокДельта = "";
	ПолеИменаКолонокНовыхЦен = "";
	
	ПолеИменаКолонокТекущихЦенРегистр = "";	
	ПолеИменаКолонокЕдиницИзмеренияРегистр = "";
	ПолеИменаКолонокНовыхЦенРегистр = "";
	
	Для каждого ЭлементСоответствия Из ВыбранныеВидыЦен Цикл
		
		ШаблонИмяТаблицыЗапроса = ЭлементСоответствия.Ключ.ИдентификаторФормул + "ТаблицаЗапроса";
		ИдентификаторФормул = ЭлементСоответствия.Ключ.ИдентификаторФормул;
		ШаблонИмяТаблицыЗапросаРегистр = ЭлементСоответствия.Ключ.ИдентификаторФормул + "Регистр";
		
		ПолеИменаКолонокТекущихЦен = ПолеИменаКолонокТекущихЦен
			+ ?(ПустаяСтрока(ПолеИменаКолонокТекущихЦен), "", ", ") 
			+ "ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".Цена, 0) КАК " + ИмяТабличнойЧасти + ИдентификаторФормул + "_ЦенаДо" + Символы.ПС;
		
		ПолеИменаКолонокЕдиницИзмерения = ПолеИменаКолонокЕдиницИзмерения 
			+ ?(ПустаяСтрока(ПолеИменаКолонокЕдиницИзмерения), "", ", ") 
			+ 	"ВЫБОР КОГДА " + ШаблонИмяТаблицыЗапроса + ".ЕдиницаИзмерения IS NOT NULL 
				|	ТОГДА " + ШаблонИмяТаблицыЗапроса + ".ЕдиницаИзмерения
				|	ИНАЧЕ ISNULL(ТаблицаИсточник.ЕдиницаИзмерения, ТаблицаИсточник.Номенклатура.ЕдиницаИзмерения)
				|КОНЕЦ КАК " + ИмяТабличнойЧасти + ИдентификаторФормул + "_ЕдИзм" + Символы.ПС;
			
		ПолеИменаКолонокЕдиницИзмеренияРегистр = ПолеИменаКолонокЕдиницИзмеренияРегистр
			+ ?(ПустаяСтрока(ПолеИменаКолонокЕдиницИзмеренияРегистр), "", ", ") 
			+ 	"ВЫБОР 
				|	КОГДА ЕстьNULL(ТаблицаИсточник.ЕдиницаИзмеренияШаблон, 0) <> 0 
				|	ТОГДА ТаблицаИсточник.ЕдиницаИзмеренияШаблон Иначе ЕстьNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".ЕдиницаИзмерения, ТаблицаИсточник.Номенклатура.ЕдиницаИзмерения) 
				|КОНЕЦ КАК " + ИмяТабличнойЧасти + ШаблонИмяТаблицыЗапросаРегистр + "_ЕдИзм";
						
		ПолеИменаКолонокДельта = ПолеИменаКолонокДельта 
			+ ?(ПустаяСтрока(ПолеИменаКолонокДельта), "", ", ") 			 
			+"ВЫБОР 
			|	КОГДА ISNULL(ТаблицаИсточник.ЦенаНоваяШаблон, 0) <> 0
			|	ТОГДА ТаблицаИсточник.ЦенаНоваяШаблон 
			|	ИНАЧЕ ISNULL("+ШаблонИмяТаблицыЗапроса+".Цена, ISNULL("+ШаблонИмяТаблицыЗапросаРегистр+".Цена, 0)) 
			|КОНЕЦ			
			|-
			|ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".Цена, 0)
			|КАК " + ИмяТабличнойЧасти + ИдентификаторФормул + "_Дельта" + Символы.ПС;
			
		ПолеИменаКолонокНовыхЦен = ПолеИменаКолонокНовыхЦен
			+ ?(ПустаяСтрока(ПолеИменаКолонокНовыхЦен), "", ", ") 
			+ "ВЫБОР 
			|	КОГДА ISNULL(ТаблицаИсточник.ЦенаНоваяШаблон, 0) <> 0
			|	ТОГДА ТаблицаИсточник.ЦенаНоваяШаблон 
			|	ИНАЧЕ ISNULL(" + ШаблонИмяТаблицыЗапроса + ".Цена, ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".Цена, 0)) 
			|	КОНЕЦ КАК " + ИмяТабличнойЧасти + ИдентификаторФормул + "_ЦенаНовая" + Символы.ПС;
			
		ПолеИменаКолонокЕдиницИзмерения = СтрЗаменить(ПолеИменаКолонокЕдиницИзмерения, "_ШаблонИмяВидаЦен", ШаблонИмяТаблицыЗапроса);
			
		ТекстЗапросаЛевоеСоединение = СтрЗаменить(ШаблонТекстаЗапросаВидЦен, "_ШаблонИмяТаблицыЗапроса", ШаблонИмяТаблицыЗапроса);
		ТекстЗапросаЛевоеСоединение = СтрЗаменить(ТекстЗапросаЛевоеСоединение, "_ШаблонИмяВидаЦен", ШаблонИмяТаблицыЗапроса);
		
		ТекстЗапросаЛевоеСоединениеРегистр = СтрЗаменить(ШаблонТекстаЗапросаВидЦенРегистр, "_ШаблонИмяТаблицыЗапросаРегистр", ШаблонИмяТаблицыЗапросаРегистр);
		ТекстЗапросаЛевоеСоединениеРегистр = СтрЗаменить(ТекстЗапросаЛевоеСоединениеРегистр, "_ШаблонИмяВидаЦенРегистр", ШаблонИмяТаблицыЗапросаРегистр);
		
		Запрос.Текст = Запрос.Текст + ТекстЗапросаЛевоеСоединение + ТекстЗапросаЛевоеСоединениеРегистр;
		Запрос.УстановитьПараметр(ШаблонИмяТаблицыЗапроса, ЭлементСоответствия.Ключ);
		Запрос.УстановитьПараметр(ШаблонИмяТаблицыЗапросаРегистр, ЭлементСоответствия.Ключ);
		
		Для каждого ПодчиненныйВидЦен Из ЭлементСоответствия.Значение Цикл
			
			Если ПодчиненныеВидыЦен.Найти(ПодчиненныйВидЦен) = Неопределено Тогда
				
				ШаблонИмяТаблицыЗапроса = ПодчиненныйВидЦен.ИдентификаторФормул;
				ШаблонИмяТаблицыЗапросаРегистр = ПодчиненныйВидЦен.ИдентификаторФормул + "Регистр";
				
				ПолеИменаКолонокТекущихЦен = ПолеИменаКолонокТекущихЦен + ", "
				+ "
				|	ВЫБОР КОГДА ISNULL(" + ШаблонИмяТаблицыЗапроса + ".ЦенаСтарая, 0) = 0
				|		ТОГДА ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".Цена, 0) 
				|		ИНАЧЕ ISNULL(" + ШаблонИмяТаблицыЗапроса + ".ЦенаСтарая, 0) КОНЕЦ КАК " + ШаблонИмяТаблицыЗапроса + "_ЦенаДо";
				
				ПолеИменаКолонокНовыхЦен = ПолеИменаКолонокНовыхЦен + ", "
				+ "ВЫБОР 
				|	КОГДА " + ШаблонИмяТаблицыЗапроса + ".Цена IS NULL 
				|	ТОГДА 0 
				|	ИНАЧЕ ISNULL(" + ШаблонИмяТаблицыЗапроса + ".Цена, 0) КОНЕЦ" + " КАК " + ШаблонИмяТаблицыЗапроса + "_ЦенаНовая";
				
				
				ПолеИменаКолонокДельта = ПолеИменаКолонокДельта 
				+ ?(ПустаяСтрока(ПолеИменаКолонокДельта), "", ", ") 			 
				+"ВЫБОР 
				|	КОГДА " + ШаблонИмяТаблицыЗапроса + ".Цена IS NULL 
				|	ТОГДА 0 
				|	ИНАЧЕ " + ШаблонИмяТаблицыЗапроса + ".Цена КОНЕЦ				
				|-     			 
				|	ВЫБОР КОГДА ISNULL(" + ШаблонИмяТаблицыЗапроса + ".ЦенаСтарая, 0) = 0
				|		ТОГДА ISNULL(" + ШаблонИмяТаблицыЗапросаРегистр + ".Цена, 0) 
				|		ИНАЧЕ ISNULL(" + ШаблонИмяТаблицыЗапроса + ".ЦенаСтарая, 0) КОНЕЦ КАК " + ШаблонИмяТаблицыЗапроса + "_Дельта";
				
				ТекстЗапросаЛевоеСоединение = СтрЗаменить(ШаблонТекстаЗапросаВидЦен, "_ШаблонИмяТаблицыЗапроса", ШаблонИмяТаблицыЗапроса);
				ТекстЗапросаЛевоеСоединение = СтрЗаменить(ТекстЗапросаЛевоеСоединение, "_ШаблонИмяВидаЦен", ШаблонИмяТаблицыЗапроса);
				
				ТекстЗапросаЛевоеСоединениеРегистр = СтрЗаменить(ШаблонТекстаЗапросаВидЦенРегистр, "_ШаблонИмяТаблицыЗапроса", ШаблонИмяТаблицыЗапроса);
				ТекстЗапросаЛевоеСоединениеРегистр = СтрЗаменить(ТекстЗапросаЛевоеСоединениеРегистр, "_ШаблонИмяВидаЦен", ШаблонИмяТаблицыЗапроса);
				ТекстЗапросаЛевоеСоединениеРегистр = СтрЗаменить(ТекстЗапросаЛевоеСоединениеРегистр, "&ПериодСреза", "ДОБАВИТЬКДАТЕ(&ПериодСреза, ДЕНЬ, -1)");
				
				Запрос.Текст = Запрос.Текст + ТекстЗапросаЛевоеСоединение + ТекстЗапросаЛевоеСоединениеРегистр;
				Запрос.УстановитьПараметр(ШаблонИмяТаблицыЗапроса, ПодчиненныйВидЦен);
				Запрос.УстановитьПараметр(ШаблонИмяТаблицыЗапросаРегистр, ПодчиненныйВидЦен);
				
				ПодчиненныеВидыЦен.Добавить(ПодчиненныйВидЦен);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеИменаКолонокТекущихЦен", ПолеИменаКолонокТекущихЦен);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеИменаКолонокЕдиницИзмерения", ПолеИменаКолонокЕдиницИзмерения);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеИменаКолонокДельта", ПолеИменаКолонокДельта);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеИменаКолонокНовыхЦен", ПолеИменаКолонокНовыхЦен);
	
	Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО ТаблицаИсточник.Номенклатура.Наименование, ТаблицаИсточник.Характеристика";
	
	ТаблицаИсточникСЦеной = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура КопироватьДобавлениемСтрокТаблицЗначений(ТаблицаИсточник, ТаблицаПриемник, ПараметрыКопирования) Экспорт
	Перем ИмяТабличнойЧасти, ВыбранныеВидыЦен, ЗаполнитьТекущиеЦены, ИменаКолонокКопирования, ИменаКолонокИсключений, МаксимальныйКлючСвязи, МаксимальныйКлючСвязиПослеДобавления;
	
	Если ТипЗнч(ТаблицаИсточник) = Тип("ТаблицаЗначений")
		И ТипЗнч(ТаблицаПриемник) = Тип("ТаблицаЗначений") Тогда
		
		ТаблицаКопирования = ТаблицаИсточник.Скопировать();
		
		ПараметрыКопирования.Свойство("МаксимальныйКлючСвязи", МаксимальныйКлючСвязи);
		ПараметрыКопирования.Свойство("МаксимальныйКлючСвязиПослеДобавления", МаксимальныйКлючСвязиПослеДобавления);
		
		ПараметрыКопирования.Свойство("ИменаКолонокКопирования", ИменаКолонокКопирования);
		ПараметрыКопирования.Свойство("ИменаКолонокИсключений", ИменаКолонокИсключений);
		
		ЕстьПолеИндексКартинки = ТаблицаПриемник.Колонки.Найти("ИндексКартинки") <> Неопределено;
		
		ПараметрыКопирования.Свойство("ЗаполнитьТекущиеЦены", ЗаполнитьТекущиеЦены);
		ЗаполнитьТекущиеЦены = ?(ЗаполнитьТекущиеЦены = Неопределено, Ложь, ЗаполнитьТекущиеЦены);
		
		ТаблицаЦен = ?(ПараметрыКопирования.Свойство("ТаблицаЦен"), ПараметрыКопирования.ТаблицаЦен, Неопределено);
		
		Если ЗаполнитьТекущиеЦены Тогда
			
			ПараметрыКопирования.Свойство("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
			ПараметрыКопирования.Свойство("ВыбранныеВидыЦен", ВыбранныеВидыЦен);
			
			ДобавитьИЗаполнитьКолонкиТекущихЦен(ВыбранныеВидыЦен, ИмяТабличнойЧасти, ТаблицаИсточник, ТаблицаКопирования, ТаблицаЦен, ПараметрыКопирования);
			
		КонецЕсли;
		
		Для каждого СтрокаИсточник Из ТаблицаКопирования Цикл
			
			НоваяСтрока = ТаблицаПриемник.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник, ИменаКолонокКопирования, ИменаКолонокИсключений);
			
			НоваяСтрока.КлючСвязи = МаксимальныйКлючСвязи + СтрокаИсточник.КлючСвязи;
			МаксимальныйКлючСвязиПослеДобавления = МАКС(МаксимальныйКлючСвязиПослеДобавления, МаксимальныйКлючСвязи + СтрокаИсточник.КлючСвязи);
			
			Если ЕстьПолеИндексКартинки Тогда
				
				Если ЗаполнитьТекущиеЦены Тогда
					
					НоваяСтрока.ИндексКартинки =
						?(СтрокаИсточник.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас, 2, 0)
						+ ?(СтрокаИсточник.ИспользоватьХарактеристики, 1, 0)
						+ ?(СтрокаИсточник.ПометкаУдаления, 4, 0)
						+ ?(СтрокаИсточник.ЭтоНабор, 8, 0);	
						
				Иначе
					
					НоваяСтрока.ИндексКартинки =
						?(СтрокаИсточник.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас, 2, 0)
						+ ?(СтрокаИсточник.Номенклатура.ИспользоватьХарактеристики, 1, 0)
						+ ?(СтрокаИсточник.Номенклатура.ПометкаУдаления, 4, 0)
						+ ?(СтрокаИсточник.Номенклатура.ЭтоНабор, 8, 0);
						
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыКопирования.МаксимальныйКлючСвязиПослеДобавления = МаксимальныйКлючСвязиПослеДобавления;
	
КонецПроцедуры

Функция СтруктуруДереваЗначенийВТаблицуЗначений(ДеревоЗначений)
	
	Результат = Новый ТаблицаЗначений;
	
	Для Каждого Колонка Из ДеревоЗначений.Колонки Цикл
		
		Результат.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		
	КонецЦикла;
	
	Результат.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Число"));
	
	Возврат Результат;
КонецФункции

Функция РазобратьДеревоНоменклатуры(ДеревоНоменклатуры, ПоказыватьНедействительныеХарактеристики = Ложь) Экспорт
	
	ТаблицаНоменклатуры = СтруктуруДереваЗначенийВТаблицуЗначений(ДеревоНоменклатуры);
	ТаблицаХарактеристик = СтруктуруДереваЗначенийВТаблицуЗначений(ДеревоНоменклатуры);
	
	Если ТаблицаНоменклатуры.Колонки.Найти("ЕдиницаИзмерения") = Неопределено Тогда
		
		ТаблицаНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения, СправочникСсылка.КлассификаторЕдиницИзмерения"));
		
	КонецЕсли;
	
	Если ТаблицаНоменклатуры.Колонки.Найти("ЦенаНоваяШаблон") = Неопределено Тогда
		
		ТаблицаНоменклатуры.Колонки.Добавить("ЦенаНоваяШаблон", Новый ОписаниеТипов("Число"));
		
	КонецЕсли;
	
	Если ТаблицаНоменклатуры.Колонки.Найти("Характеристика") = Неопределено Тогда
		
		ТаблицаНоменклатуры.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		
	КонецЕсли;
	
	Если ТаблицаХарактеристик.Колонки.Найти("ЕдиницаИзмерения") = Неопределено Тогда
		
		ТаблицаХарактеристик.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения, СправочникСсылка.КлассификаторЕдиницИзмерения"));
		
	КонецЕсли;
	
	Если ТаблицаХарактеристик.Колонки.Найти("ЦенаНоваяШаблон") = Неопределено Тогда
		
		ТаблицаХарактеристик.Колонки.Добавить("ЦенаНоваяШаблон", Новый ОписаниеТипов("Число"));
		
	КонецЕсли;
	
	Если ТаблицаХарактеристик.Колонки.Найти("Характеристика") = Неопределено Тогда
		
		ТаблицаХарактеристик.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		
	КонецЕсли;
	
	Если ТаблицаХарактеристик.Колонки.Найти("ХарактеристикаНедействителен") = Неопределено Тогда
		
		ТаблицаХарактеристик.Колонки.Добавить("ХарактеристикаНедействителен", Новый ОписаниеТипов("Булево"));
		
	КонецЕсли;   
	
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	
	ЛокальныйКлючСвязи = 0;
	Для каждого СтрокаДереваНоменклатура Из ДеревоНоменклатуры.Строки Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаДереваНоменклатура.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		ЛокальныйКлючСвязи = ЛокальныйКлючСвязи + 1;
		
		НоваяСтрокаНоменклатура = ТаблицаНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаНоменклатура, СтрокаДереваНоменклатура);
		Если НоваяСтрокаНоменклатура.Характеристика = Неопределено Тогда
			НоваяСтрокаНоменклатура.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли;		
		НоваяСтрокаНоменклатура.КлючСвязи = ЛокальныйКлючСвязи;
		
		Для каждого СтрокаДереваХарактеристика Из СтрокаДереваНоменклатура.Строки Цикл
			
			Если ИспользоватьХарактеристики
				И НЕ ПоказыватьНедействительныеХарактеристики
				И СтрокаДереваХарактеристика.ХарактеристикаНедействителен Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НоваяСтрокаХарактеристика = ТаблицаХарактеристик.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаХарактеристика, СтрокаДереваХарактеристика);
			НоваяСтрокаХарактеристика.КлючСвязи = ЛокальныйКлючСвязи;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Новый Структура("ТаблицаНоменклатуры, ТаблицаХарактеристик", ТаблицаНоменклатуры, ТаблицаХарактеристик);
	
КонецФункции

Функция РазобратьМассивНоменклатуры(МассивНоменклатуры, УстанавливатьХарактеристикамБезЦен, ПоказыватьНедействительныеХарактеристики = Ложь, МассивХарактеристик = Неопределено) Экспорт
	
	ОтборПоХарактеристикам = МассивХарактеристик <> Неопределено;
	
	ДеревоНоменклатуры = Новый ДеревоЗначений;
	
	// 1. Получим СКД
	ИмяСхемыКД = "ПоНоменклатуре";
	СхемаКомпоновкиДанных = Документы.УстановкаЦенНоменклатуры.ПолучитьМакет(ИмяСхемыКД);
	
	// 2. создаем настройки для схемы 
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		
		НастройкиКомпоновкиДанных.Структура[0].Структура[0].Использование = Ложь;
		
	КонецЕсли;
	
	// 2.1 установим значения параметров
	ПараметрКД = СхемаКомпоновкиДанных.Параметры.Найти("МассивНоменклатуры");
	ПараметрКД.Значение = МассивНоменклатуры;
	
	// 3. готовим макет 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// 4. исполняем макет 
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет);
	ПроцессорКомпоновки.Сбросить();
	
	// 5. выводим результат 
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоНоменклатуры);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	СтруктураТаблицДанных = РазобратьДеревоНоменклатуры(ДеревоНоменклатуры, ПоказыватьНедействительныеХарактеристики);
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(СтруктураТаблицДанных);
	
	Возврат АдресВременногоХранилища;
	
КонецФункции

Функция РазобратьМассивНоменклатурыИХарактеристикПоДокументу(Запасы, УстанавливатьХарактеристикамБезЦен, ПоказыватьНедействительныеХарактеристики = Ложь) Экспорт
	
	ДеревоНоменклатуры = Новый ДеревоЗначений;	
	ИмяСхемыКД = "ПоДокументу";
	СхемаКомпоновкиДанных = Документы.УстановкаЦенНоменклатуры.ПолучитьМакет(ИмяСхемыКД);
	
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию; 	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда  		
		НастройкиКомпоновкиДанных.Структура[0].Структура[0].Использование = Ложь;   		
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Запасы", Запасы);
    Запрос.Текст =
    "ВЫБРАТЬ 
	|	* 
	|ПОМЕСТИТЬ Запасы
	|ИЗ &Запасы КАК Запасы" ;
    Запрос.Выполнить();    
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет,,,,, МенеджерВременныхТаблиц);
	ПроцессорКомпоновки.Сбросить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоНоменклатуры);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ТаблицаЦен = Новый ТаблицаЗначений;	
	ИмяСхемыКД = "ЦеныПоДокументу";
	СхемаКомпоновкиДанных = Документы.УстановкаЦенНоменклатуры.ПолучитьМакет(ИмяСхемыКД);
	
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию; 	
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет,,,,,МенеджерВременныхТаблиц);
	ПроцессорКомпоновки.Сбросить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаЦен);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	СтруктураТаблицДанных = РазобратьДеревоНоменклатуры(ДеревоНоменклатуры, ПоказыватьНедействительныеХарактеристики);
	СтруктураТаблицДанных.Вставить("ТаблицаЦен", ТаблицаЦен);
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(СтруктураТаблицДанных);
	
	Возврат АдресВременногоХранилища;
	
КонецФункции

Процедура ЗаполнитьЗапасыПоОчередиРасчета(Запасы, ВидЦеныРасчетный, ПоказыватьХарактеристики, ПериодЗаписи = Неопределено) Экспорт 	
	
	Если ПериодЗаписи = Неопределено Тогда
		ПериодЗаписи = ПолучитьМаксимальныйПериодЗаписиИзОчереди(ВидЦеныРасчетный);
	КонецЕсли;
	
	Если ПериодЗаписи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ПериодЗаписи",				ПериодЗаписи);
	ПараметрыРасчета.Вставить("ВидЦенРасчетный",			ВидЦеныРасчетный);
	ПараметрыРасчета.Вставить("НомерОчередиЦен",			0);
	ПараметрыРасчета.Вставить("УникальныйИдентификатор", 	Новый УникальныйИдентификатор());
	ПараметрыРасчета.Вставить("АдресВХранилище",			Неопределено);
	ПараметрыРасчета.Вставить("ПересчетЗаТекущийПериод", 	Ложь);
	
	КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПараметрыРасчета.ВидЦенРасчетный.ВалютаЦены, ПараметрыРасчета.ПериодЗаписи);
	ПараметрыРасчета.Вставить("ВидЦенРасчетныйКурс", ?(ЗначениеЗаполнено(КурсВалюты.Курс), КурсВалюты.Курс, 1));
	ПараметрыРасчета.Вставить("ВидЦенРасчетныйКратность", ?(ЗначениеЗаполнено(КурсВалюты.Кратность), КурсВалюты.Кратность, 1));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", НачалоДня(ПараметрыРасчета.ПериодЗаписи));
	Запрос.УстановитьПараметр("ВидЦенРасчетный", ПараметрыРасчета.ВидЦенРасчетный);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОчередьЦен.ПериодЗаписи КАК ПериодЗаписи,
	|	ОчередьЦен.НомерОчередиЦен КАК НомерОчередиЦен,
	|	ОчередьЦен.ВидЦенРасчетный КАК ВидЦенРасчетный
	|ИЗ
	|	РегистрСведений.ОчередьРасчетаЦен КАК ОчередьЦен
	|ГДЕ
	|	ОчередьЦен.ПериодЗаписи = &Период
	|	И ОчередьЦен.ВидЦенРасчетный = &ВидЦенРасчетный
	|	И НЕ ОчередьЦен.ПересчетВыполнен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодЗаписи,
	|	НомерОчередиЦен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ТаблицаЗаполнения = Запасы.Выгрузить();
	ТаблицаЗаполнения.Очистить();
	КолонкиГруппировок = "Номенклатура, Характеристика, ЕдиницаИзмерения, ВидЦены, Цена, ЦенаСтарая";
	Пока Выборка.Следующий() Цикл
		
		ПараметрыРасчета.НомерОчередиЦен = Выборка.НомерОчередиЦен;
		
		ЦеныРассчитаны	= Ложь;
		ОписаниеОшибки	= "";
		Если ВидЦеныРасчетный.ТипВидаЦен = Перечисления.ТипыВидовЦен.ДинамическийПроцент Тогда
			
			ЦенообразованиеСервер.РасчетДинамическихЦенНаПроцент(ПараметрыРасчета, ЦеныРассчитаны, ОписаниеОшибки, Ложь);
			
		ИначеЕсли ВидЦеныРасчетный.ТипВидаЦен = Перечисления.ТипыВидовЦен.ДинамическийФормула Тогда
			
			ЦенообразованиеСервер.РасчетДинамическихЦенПоФормуле(ПараметрыРасчета, ЦеныРассчитаны, ОписаниеОшибки, Ложь);
			
		КонецЕсли;
		
		Если ЦеныРассчитаны Тогда
									
			ЗаписиРегистраЗаПериод = ПолучитьИзВременногоХранилища(ПараметрыРасчета.АдресВХранилище); 
			
			МассивВидовЦен = Новый Массив;
			МассивВидовЦен.Добавить(Выборка.ВидЦенРасчетный);                                     
			ЦенообразованиеСервер.ИзменитьЦенуВТаблицеПоПорогамСрабатывания(ЗаписиРегистраЗаПериод, МассивВидовЦен, Выборка.ПериодЗаписи);
			
			Для каждого СтрокаТаблицы Из ЗаписиРегистраЗаПериод Цикл
						
				НоваяСтрока = ТаблицаЗаполнения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.ВидЦены = ВидЦеныРасчетный;
				НоваяСтрока.Цена = СтрокаТаблицы.Цена;
				Если НЕ ПоказыватьХарактеристики Тогда
					ПоказыватьХарактеристики = ЗначениеЗаполнено(НоваяСтрока.Характеристика);
				КонецЕсли;				
				
			КонецЦикла; 			
			ТаблицаЗаполнения.Свернуть(КолонкиГруппировок);
		КонецЕсли
		
	КонецЦикла;
	Запасы.Загрузить(ТаблицаЗаполнения);
	
КонецПроцедуры

Функция ПолучитьМаксимальныйПериодЗаписиИзОчереди(ВидЦенРасчетный)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	               |	РС.ПериодЗаписи КАК ПериодЗаписи
	               |ИЗ
	               |	РегистрСведений.ОчередьРасчетаЦен КАК РС
	               |ГДЕ
	               |	РС.ВидЦенРасчетный = &ВидЦенРасчетный
	               |	И РС.ВидЦенРасчетный.КоличествоПопытокСлужебный < 2
	               |	И НЕ РС.ВидЦенРасчетный.РассчитыватьАвтоматически
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	РС.ПериодЗаписи УБЫВ";
	
	Запрос.УстановитьПараметр("ВидЦенРасчетный", ВидЦенРасчетный);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПериодЗаписи;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

#EndRegion

#Region ЗаписьНовыхЦен

Процедура ОпределитьЗаписываемыеЦеныКоллекцииНоменклатуры(КоллекцияНоменклатуры, МассивВидовЦен, ПараметрыКоллекции)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КоллекцияНоменклатуры", КоллекцияНоменклатуры);
	Запрос.УстановитьПараметр("ПериодЗаписи", ПараметрыКоллекции.ПериодЗаписи);
	Запрос.УстановитьПараметр("МассивВидовЦен", МассивВидовЦен);
	Запрос.УстановитьПараметр("ДокументУстановки", ПараметрыКоллекции.ДокументУстановки);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РСЦены.Период КАК Период,
	|	РСЦены.ВидЦен КАК ВидЦен,
	|	РСЦены.Номенклатура КАК Номенклатура,
	|	РСЦены.Характеристика КАК Характеристика,
	|	РСЦены.Цена КАК Цена,
	|	РСЦены.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РСЦены.Актуальность КАК Актуальность,
	|	РСЦены.Автор КАК Автор,
	|	РСЦены.ДокументУстановки КАК ДокументУстановки
	|ПОМЕСТИТЬ ТекущиеЗаписиРегистраЦен
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК РСЦены
	|ГДЕ
	|	РСЦены.Период = &ПериодЗаписи
	|	И РСЦены.ВидЦен В(&МассивВидовЦен)
	|	И РСЦены.Цена <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЦен,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоллекцияНоменклатуры.Период КАК Период,
	|	КоллекцияНоменклатуры.ВидЦен КАК ВидЦен,
	|	КоллекцияНоменклатуры.Номенклатура КАК Номенклатура,
	|	КоллекцияНоменклатуры.Характеристика КАК Характеристика,
	|	КоллекцияНоменклатуры.Цена КАК Цена,
	|	КоллекцияНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	КоллекцияНоменклатуры.Актуальность КАК Актуальность,
	|	КоллекцияНоменклатуры.Автор КАК Автор,
	|	&ДокументУстановки КАК ДокументУстановки
	|ПОМЕСТИТЬ КоллекцияНоменклатуры
	|ИЗ
	|	&КоллекцияНоменклатуры КАК КоллекцияНоменклатуры
	|ГДЕ
	|	КоллекцияНоменклатуры.Цена <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЦен,
	|	Номенклатура,
	|	Характеристика
	|;/////////////////////////////////////////////////////////////////////";
	
	ТекстЗапросаТекущиеЦены = 
	"
	|// Если по ключевым полям в регистре уже имеется запись, то оставляем ее
	|// 
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТекущиеЗаписиРегистраЦен.Период, КоллекцияНоменклатуры.Период) КАК Период
	|	,ЕстьNULL(ТекущиеЗаписиРегистраЦен.Актуальность, КоллекцияНоменклатуры.Актуальность) КАК Актуальность
	|	,ЕстьNULL(ТекущиеЗаписиРегистраЦен.ВидЦен, КоллекцияНоменклатуры.ВидЦен) КАК ВидЦен
	|	,ЕстьNULL(ТекущиеЗаписиРегистраЦен.Номенклатура, КоллекцияНоменклатуры.Номенклатура) КАК Номенклатура
	|	,ЕстьNULL(ТекущиеЗаписиРегистраЦен.Характеристика, КоллекцияНоменклатуры.Характеристика) КАК Характеристика
	|	,ЕстьNULL(ТекущиеЗаписиРегистраЦен.Цена, КоллекцияНоменклатуры.Цена) КАК Цена
	|	,ЕстьNULL(ТекущиеЗаписиРегистраЦен.ЕдиницаИзмерения, КоллекцияНоменклатуры.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
	|	,ЕстьNULL(ТекущиеЗаписиРегистраЦен.Автор, КоллекцияНоменклатуры.Автор) КАК Автор
	|	,ЕстьNULL(КоллекцияНоменклатуры.ДокументУстановки, Значение(Документ.УстановкаЦенНоменклатуры.ПустаяСсылка)) КАК ДокументУстановки
	|ИЗ ТекущиеЗаписиРегистраЦен КАК ТекущиеЗаписиРегистраЦен
	|	ПОЛНОЕ СОЕДИНЕНИЕ КоллекцияНоменклатуры КАК КоллекцияНоменклатуры
	|		ПО ТекущиеЗаписиРегистраЦен.ВидЦен = КоллекцияНоменклатуры.ВидЦен 
	|			И ТекущиеЗаписиРегистраЦен.Номенклатура = КоллекцияНоменклатуры.Номенклатура 
	|			И ТекущиеЗаписиРегистраЦен.Характеристика = КоллекцияНоменклатуры.Характеристика";
	
	ТекстЗапросаНовыеЦены = 
	"
	|// Записываем новые данные в любом случае и добавляем существующие только тогда, когда в таблице нет записей с такими ключами
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КоллекцияНоменклатуры.Период, ТекущиеЗаписиРегистраЦен.Период) КАК Период
	|	,ЕстьNULL(КоллекцияНоменклатуры.Актуальность, ТекущиеЗаписиРегистраЦен.Актуальность) КАК Актуальность
	|	,ЕстьNULL(КоллекцияНоменклатуры.ВидЦен, ТекущиеЗаписиРегистраЦен.ВидЦен) КАК ВидЦен
	|	,ЕстьNULL(КоллекцияНоменклатуры.Номенклатура, ТекущиеЗаписиРегистраЦен.Номенклатура) КАК Номенклатура
	|	,ЕстьNULL(КоллекцияНоменклатуры.Характеристика, ТекущиеЗаписиРегистраЦен.Характеристика) КАК Характеристика
	|	,ЕстьNULL(КоллекцияНоменклатуры.Цена, ТекущиеЗаписиРегистраЦен.Цена) КАК Цена
	|	,Выбор КОГДА КоллекцияНоменклатуры.Цена = ТекущиеЗаписиРегистраЦен.Цена
	|		ТОГДА ЕСТЬNULL(ТекущиеЗаписиРегистраЦен.ЕдиницаИзмерения, КоллекцияНоменклатуры.ЕдиницаИзмерения)
	|		ИНАЧЕ ЕСТЬNULL(КоллекцияНоменклатуры.ЕдиницаИзмерения, ТекущиеЗаписиРегистраЦен.ЕдиницаИзмерения) КОНЕЦ КАК ЕдиницаИзмерения
	|	,Выбор КОГДА КоллекцияНоменклатуры.Цена = ТекущиеЗаписиРегистраЦен.Цена
	|		ТОГДА ЕСТЬNULL(ТекущиеЗаписиРегистраЦен.Автор, КоллекцияНоменклатуры.Автор)
	|		ИНАЧЕ ЕСТЬNULL(КоллекцияНоменклатуры.Автор, ТекущиеЗаписиРегистраЦен.Автор) КОНЕЦ КАК Автор
	|	,ЕстьNULL(КоллекцияНоменклатуры.ДокументУстановки, ЕстьNULL(ТекущиеЗаписиРегистраЦен.ДокументУстановки, Значение(Документ.УстановкаЦенНоменклатуры.ПустаяСсылка))) КАК ДокументУстановки
	|ИЗ ТекущиеЗаписиРегистраЦен КАК ТекущиеЗаписиРегистраЦен
	|	ПОЛНОЕ СОЕДИНЕНИЕ КоллекцияНоменклатуры КАК КоллекцияНоменклатуры
	|		ПО ТекущиеЗаписиРегистраЦен.ВидЦен = КоллекцияНоменклатуры.ВидЦен 
	|			И ТекущиеЗаписиРегистраЦен.Номенклатура = КоллекцияНоменклатуры.Номенклатура 
	|			И ТекущиеЗаписиРегистраЦен.Характеристика = КоллекцияНоменклатуры.Характеристика";
	
	Запрос.Текст = ТекстЗапроса + ?(ПараметрыКоллекции.ЗаписыватьНовыеЦеныПоверхУстановленных, ТекстЗапросаНовыеЦены, ТекстЗапросаТекущиеЦены);
	
	КоллекцияНоменклатуры = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ДобавитьСтрокуДанныхВКоллекцию(КоллекцияНоменклатуры, МассивВидовЦен, СтрокаДереваДанныхНоменклатура, ПараметрыКоллекции)
	
	Если МассивВидовЦен.Найти(СтрокаДереваДанныхНоменклатура.ВидЦены) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДереваДанныхНоменклатура.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор 						= ПараметрыКоллекции.ИмяТабличнойЧасти + СтрокаДереваДанныхНоменклатура.ВидЦены.ИдентификаторФормул;
	
	НоваяСтрока 						= КоллекцияНоменклатуры.Добавить();
	НоваяСтрока.Период					= ПараметрыКоллекции.ПериодЗаписи;
	НоваяСтрока.ВидЦен					= СтрокаДереваДанныхНоменклатура.ВидЦены;
	НоваяСтрока.Номенклатура			= СтрокаДереваДанныхНоменклатура.Номенклатура;
	НоваяСтрока.ДокументУстановки				= ПараметрыКоллекции.ДокументУстановки;
	
	Если ПараметрыКоллекции.ЕстьКолонкаХарактеристика Тогда
		
		НоваяСтрока.Характеристика		= СтрокаДереваДанныхНоменклатура.Характеристика;
		
	КонецЕсли;
	
	НоваяСтрока.Цена					= СтрокаДереваДанныхНоменклатура.Цена;
	НоваяСтрока.ЕдиницаИзмерения		= СтрокаДереваДанныхНоменклатура.ЕдиницаИзмерения;
	НоваяСтрока.Актуальность			= Истина;
	НоваяСтрока.Автор					= ПараметрыКоллекции.АвторизированныйПользователь;
	НоваяСтрока.УстанавливатьХарактеристикамБезЦен	= ПараметрыКоллекции.УстанавливатьХарактеристикамБезЦен;
	НоваяСтрока.КатегорияНоменклатуры	= СтрокаДереваДанныхНоменклатура.Номенклатура.КатегорияНоменклатуры;
	НоваяСтрока.ИспользоватьХарактеристики = СтрокаДереваДанныхНоменклатура.Номенклатура.ИспользоватьХарактеристики;
	
КонецПроцедуры

Процедура ДобавитьСтрокиХарактеристикНоменклатуры(КоллекцияНоменклатуры)
	
	ТекстЗапроса = 
	"
	|ВЫБРАТЬ 
	|	КоллекцияНоменклатуры.Период КАК Период
	|	,КоллекцияНоменклатуры.ВидЦен КАК ВидЦен
	|	,КоллекцияНоменклатуры.Номенклатура КАК Номенклатура
	|	,КоллекцияНоменклатуры.Характеристика КАК Характеристика
	|	,КоллекцияНоменклатуры.Цена КАК Цена
	|	,КоллекцияНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	,КоллекцияНоменклатуры.Актуальность КАК Актуальность
	|	,КоллекцияНоменклатуры.Автор КАК Автор
	|	,КоллекцияНоменклатуры.УстанавливатьХарактеристикамБезЦен КАК УстанавливатьХарактеристикамБезЦен
	|	,КоллекцияНоменклатуры.КатегорияНоменклатуры КАК КатегорияНоменклатуры
	|	,КоллекцияНоменклатуры.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики
	|ПОМЕСТИТЬ КоллекцияНоменклатуры
	|ИЗ &КоллекцияНоменклатуры КАК КоллекцияНоменклатуры
	|ГДЕ
	|	КоллекцияНоменклатуры.Характеристика = Значение(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура, Характеристика, КатегорияНоменклатуры
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоллекцияНоменклатуры.*
	|	,СпрХарактеристики.Ссылка КАК Характеристика
	|ПОМЕСТИТЬ НоменклатураХарактеристики
	|ИЗ КоллекцияНоменклатуры КАК КоллекцияНоменклатуры
	|	СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
	|	ПО КоллекцияНоменклатуры.Номенклатура = СпрХарактеристики.Владелец И КоллекцияНоменклатуры.ИспользоватьХарактеристики = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоллекцияНоменклатуры.*
	|	,СпрХарактеристики.Ссылка КАК Характеристика
	|ПОМЕСТИТЬ КатегорияНоменклатурыХарактеристики
	|ИЗ КоллекцияНоменклатуры КАК КоллекцияНоменклатуры
	|	СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
	|	ПО КоллекцияНоменклатуры.КатегорияНоменклатуры = СпрХарактеристики.Владелец И КоллекцияНоменклатуры.ИспользоватьХарактеристики = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	КоллекцияНоменклатуры.Период КАК Период
	|	,КоллекцияНоменклатуры.ВидЦен КАК ВидЦен
	|	,КоллекцияНоменклатуры.Номенклатура КАК Номенклатура
	|	,КоллекцияНоменклатуры.Характеристика КАК Характеристика
	|	,КоллекцияНоменклатуры.Цена КАК Цена
	|	,КоллекцияНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	,КоллекцияНоменклатуры.Актуальность КАК Актуальность
	|	,КоллекцияНоменклатуры.Автор КАК Автор
	|	,КоллекцияНоменклатуры.УстанавливатьХарактеристикамБезЦен КАК УстанавливатьХарактеристикамБезЦен
	|	,КоллекцияНоменклатуры.КатегорияНоменклатуры КАК КатегорияНоменклатуры
	|	,КоллекцияНоменклатуры.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики
	|ПОМЕСТИТЬ ВсяНоменклатураИХарактеристики
	|ИЗ КоллекцияНоменклатуры КАК КоллекцияНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НоменклатураХарактеристики.Период КАК Период
	|	,НоменклатураХарактеристики.ВидЦен КАК ВидЦен
	|	,НоменклатураХарактеристики.Номенклатура КАК Номенклатура
	|	,НоменклатураХарактеристики.Характеристика КАК Характеристика
	|	,НоменклатураХарактеристики.Цена КАК Цена
	|	,НоменклатураХарактеристики.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	,НоменклатураХарактеристики.Актуальность КАК Актуальность
	|	,НоменклатураХарактеристики.Автор КАК Автор
	|	,Ложь КАК УстанавливатьХарактеристикамБезЦен
	|	,НоменклатураХарактеристики.КатегорияНоменклатуры КАК КатегорияНоменклатуры
	|	,НоменклатураХарактеристики.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики
	|ИЗ НоменклатураХарактеристики КАК НоменклатураХарактеристики
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КатегорияНоменклатурыХарактеристики.Период КАК Период
	|	,КатегорияНоменклатурыХарактеристики.ВидЦен КАК ВидЦен
	|	,КатегорияНоменклатурыХарактеристики.Номенклатура КАК Номенклатура
	|	,КатегорияНоменклатурыХарактеристики.Характеристика КАК Характеристика
	|	,КатегорияНоменклатурыХарактеристики.Цена КАК Цена
	|	,КатегорияНоменклатурыХарактеристики.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	,КатегорияНоменклатурыХарактеристики.Актуальность КАК Актуальность
	|	,КатегорияНоменклатурыХарактеристики.Автор КАК Автор
	|	,Ложь КАК УстанавливатьХарактеристикамБезЦен
	|	,КатегорияНоменклатурыХарактеристики.КатегорияНоменклатуры КАК КатегорияНоменклатуры
	|	,КатегорияНоменклатурыХарактеристики.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики
	|ИЗ КатегорияНоменклатурыХарактеристики КАК КатегорияНоменклатурыХарактеристики
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ВсяНоменклатураИХарактеристики.*
	|ИЗ ВсяНоменклатураИХарактеристики КАК ВсяНоменклатураИХарактеристики
	|УПОРЯДОЧИТЬ ПО ВидЦен, Номенклатура, Характеристика";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КоллекцияНоменклатуры", КоллекцияНоменклатуры);
	КоллекцияНоменклатуры = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура СоздатьКоллекциюНоменклатурыПоДеревуДанных(ТаблицаНоменклатуры, КоллекцияНоменклатуры, МассивВидовЦен, ПараметрыКоллекции)
	
	КоллекцияНоменклатуры = Новый ТаблицаЗначений;
	КоллекцияНоменклатуры.Колонки.Добавить("Период", 					Новый ОписаниеТипов("Дата"));
	КоллекцияНоменклатуры.Колонки.Добавить("ВидЦен", 					Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	КоллекцияНоменклатуры.Колонки.Добавить("Номенклатура",				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	КоллекцияНоменклатуры.Колонки.Добавить("Характеристика",			Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КоллекцияНоменклатуры.Колонки.Добавить("Цена",						Новый ОписаниеТипов("Число"));
	КоллекцияНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения",			Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения, СправочникСсылка.КлассификаторЕдиницИзмерения"));
	КоллекцияНоменклатуры.Колонки.Добавить("Актуальность",				Новый ОписаниеТипов("Булево"));
	КоллекцияНоменклатуры.Колонки.Добавить("Автор",						Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	КоллекцияНоменклатуры.Колонки.Добавить("ДокументУстановки",			Новый ОписаниеТипов("ДокументСсылка.УстановкаЦенНоменклатуры"));

	КоллекцияНоменклатуры.Колонки.Добавить("УстанавливатьХарактеристикамБезЦен", Новый ОписаниеТипов("Булево"));
	// ::: Дополнительные поля
	КоллекцияНоменклатуры.Колонки.Добавить("КатегорияНоменклатуры",		Новый ОписаниеТипов("СправочникСсылка.КатегорииНоменклатуры"));
	КоллекцияНоменклатуры.Колонки.Добавить("ИспользоватьХарактеристики",Новый ОписаниеТипов("Булево"));
	
	ПараметрыКоллекции.Вставить("ЕстьКолонкаХарактеристика", Истина);
	ПараметрыКоллекции.Вставить("ИмяТабличнойЧасти", "ТЧНоменклатура");
	
	Для каждого СтрокаДереваДанныхНоменклатура Из ТаблицаНоменклатуры Цикл
		
		ДобавитьСтрокуДанныхВКоллекцию(КоллекцияНоменклатуры, МассивВидовЦен, СтрокаДереваДанныхНоменклатура, ПараметрыКоллекции);
		
	КонецЦикла;
	
	Если ПараметрыКоллекции.УстанавливатьХарактеристикамБезЦен Тогда
		
		ДобавитьСтрокиХарактеристикНоменклатуры(КоллекцияНоменклатуры);
		
	КонецЕсли;
	
	Если ПараметрыКоллекции.ЗаписьМенеджером <> Истина Тогда
		
		ОпределитьЗаписываемыеЦеныКоллекцииНоменклатуры(КоллекцияНоменклатуры, МассивВидовЦен, ПараметрыКоллекции);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьЗависимыеВидыЦен(СтруктураДанных, ФоновоеЗаданиеАдресХранилища = "") Экспорт
	
	КэшЗначений = СтруктураДанных.КэшЗначений;
	ИсключенныеВидыЦен = КэшЗначений.ИсключенныеВидыЦен;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", НачалоДня(СтруктураДанных.ПериодЗаписи));
	Запрос.УстановитьПараметр("ВидыЦенРасчетные", ИсключенныеВидыЦен);
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", СтруктураДанных.ТаблицаНоменклатуры);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОчередьЦен.ПериодЗаписи КАК ПериодЗаписи,
	|	ОчередьЦен.НомерОчередиЦен КАК НомерОчередиЦен,
	|	ОчередьЦен.ВидЦенРасчетный КАК ВидЦенРасчетный,
	|	ОчередьЦен.Номенклатура КАК Номенклатура,
	|	ОчередьЦен.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ОчередьЦен
	|ИЗ
	|	РегистрСведений.ОчередьРасчетаЦен КАК ОчередьЦен
	|ГДЕ
	|	ОчередьЦен.ПериодЗаписи = &Период
	|	И ОчередьЦен.ВидЦенРасчетный В(&ВидыЦенРасчетные)
	|	И НЕ ОчередьЦен.ПересчетВыполнен
	|	И (ОчередьЦен.Номенклатура, ОчередьЦен.Характеристика) В
	|			(ВЫБРАТЬ
	|				ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|				ТаблицаНоменклатуры.Характеристика КАК Характеристика
	|			ИЗ
	|				ТаблицаНоменклатуры КАК ТаблицаНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОчередьЦен.ПериодЗаписи КАК ПериодЗаписи,
	|	ОчередьЦен.НомерОчередиЦен КАК НомерОчередиЦен,
	|	ОчередьЦен.ВидЦенРасчетный КАК ВидЦенРасчетный
	|ИЗ
	|	ОчередьЦен КАК ОчередьЦен
	|
	|СГРУППИРОВАТЬ ПО
	|	ОчередьЦен.ПериодЗаписи,
	|	ОчередьЦен.НомерОчередиЦен,
	|	ОчередьЦен.ВидЦенРасчетный
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодЗаписи,
	|	НомерОчередиЦен";
	
	ВыборкаОчереди = Запрос.Выполнить().Выбрать();
	Пока ВыборкаОчереди.Следующий() Цикл
		
		ВидЦеныРасчетный = ВыборкаОчереди.ВидЦенРасчетный;    		
		
		ПараметрыРасчета = Новый Структура;
		ПараметрыРасчета.Вставить("ПериодЗаписи",		СтруктураДанных.ПериодЗаписи);
		ПараметрыРасчета.Вставить("ВидЦенРасчетный",	ВидЦеныРасчетный);
		ПараметрыРасчета.Вставить("НомерОчередиЦен",	0);
		ПараметрыРасчета.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор());
		ПараметрыРасчета.Вставить("АдресВХранилище",	Неопределено);
		
		КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВидЦеныРасчетный.ВалютаЦены, ПараметрыРасчета.ПериодЗаписи);
		ПараметрыРасчета.Вставить("ВидЦенРасчетныйКурс", ?(ЗначениеЗаполнено(КурсВалюты.Курс), КурсВалюты.Курс, 1));
		ПараметрыРасчета.Вставить("ВидЦенРасчетныйКратность", ?(ЗначениеЗаполнено(КурсВалюты.Кратность), КурсВалюты.Кратность, 1));
		
		ПараметрыРасчета.НомерОчередиЦен = ВыборкаОчереди.НомерОчередиЦен;
		
		ЦеныРассчитаны	= Ложь;
		ОписаниеОшибки	= "";
		
		ПересчитатьЗависимыйВидЦены(ВидЦеныРасчетный, ПараметрыРасчета, ЦеныРассчитаны, ОписаниеОшибки);
		
		Если ЦеныРассчитаны Тогда
			
			КэшЗначений.ЗаписиРегистраЗаПериода = ПараметрыРасчета.АдресВХранилище;
			
			ЗаписиРегистраЗаПериод = ПолучитьИзВременногоХранилища(КэшЗначений.ЗаписиРегистраЗаПериода);
			
			Если ЗаписиРегистраЗаПериод.Количество() = 0 Тогда					
				Продолжить;					
			КонецЕсли;
			
			ЗаписиРегистраЗаПериод.Колонки.Добавить("ДокументУстановки", Новый ОписаниеТипов("ДокументСсылка.УстановкаЦенНоменклатуры"));
			ЗаписиРегистраЗаПериод.ЗаполнитьЗначения(СтруктураДанных.ДокументУстановки, "ДокументУстановки");
			
			Если ЗаписиРегистраЗаПериод.Количество() > 0 Тогда
				
				ЦенообразованиеСервер.ЗаписатьЦеныИОчиститьОчередьЦен(СтруктураДанных.ПериодЗаписи, ВидЦеныРасчетный, ВыборкаОчереди.НомерОчередиЦен, ЗаписиРегистраЗаПериод);
				
			КонецЕсли;
			
			ВидЦеныРасчетныйОбъект = ВидЦеныРасчетный.ПолучитьОбъект();			
			Попытка
				
				ВидЦеныРасчетныйОбъект.Заблокировать();
				ВидЦеныРасчетныйОбъект.ЦеныАктуальны = ОчередьЦенПустая(ВидЦеныРасчетный);
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидЦеныРасчетныйОбъект, Ложь, Ложь);
				ВидЦеныРасчетныйОбъект.Разблокировать();				
			
			Исключение
				
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Изменение флага актуальности видов цен'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ВидыЦен, ВидЦеныРасчетный,
					ПодробноеПредставлениеОшибки);
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;   
	
КонецПроцедуры

Функция ОчередьЦенПустая(ВидЦенРасчетный)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ РС.ПериодЗаписи ИЗ РегистрСведений.ОчередьРасчетаЦен КАК РС 
							|ГДЕ РС.ВидЦенРасчетный = &ВидЦенРасчетный И РС.ВидЦенРасчетный.КоличествоПопытокСлужебный < 2 И НЕ РС.ВидЦенРасчетный.РассчитыватьАвтоматически
							|УПОРЯДОЧИТЬ ПО РС.ПериодЗаписи УБЫВ");
	
	Запрос.УстановитьПараметр("ВидЦенРасчетный", ВидЦенРасчетный);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

Процедура ЗаписатьНовыеЦены(СтруктураДанных, ФоновоеЗаданиеАдресХранилища = "") Экспорт
	Перем КоллекцияНоменклатуры;
	
	ПараметрыКоллекции = Новый Структура;
	ПараметрыКоллекции.Вставить("ПериодЗаписи", СтруктураДанных.ПериодЗаписи);
	ПараметрыКоллекции.Вставить("АвторизированныйПользователь", СтруктураДанных.КэшЗначений.АвторизированныйПользователь);
	ПараметрыКоллекции.Вставить("ПоказыватьХарактеристики", СтруктураДанных.ПоказыватьХарактеристики);
	ПараметрыКоллекции.Вставить("УстанавливатьХарактеристикамБезЦен", СтруктураДанных.УстанавливатьХарактеристикамБезЦен);
	ПараметрыКоллекции.Вставить("ЗаписыватьНовыеЦеныПоверхУстановленных", СтруктураДанных.ЗаписыватьНовыеЦеныПоверхУстановленных);
	ПараметрыКоллекции.Вставить("ДокументУстановки", СтруктураДанных.ДокументУстановки);
	ПараметрыКоллекции.Вставить("ЗаписьМенеджером", Ложь);
	
	МассивВидовЦен = Новый Массив;
	Для каждого ЭлементСоответствия Из СтруктураДанных.КэшЗначений.ВыбранныеВидыЦен Цикл
		
		Если СтруктураДанных.КэшЗначений.ИсключенныеВидыЦен.Найти(ЭлементСоответствия) = Неопределено Тогда
			
			МассивВидовЦен.Добавить(ЭлементСоответствия);
			
		КонецЕсли;				
		
	КонецЦикла;
	
	СоздатьКоллекциюНоменклатурыПоДеревуДанных(СтруктураДанных.ТаблицаНоменклатуры, КоллекцияНоменклатуры, МассивВидовЦен, ПараметрыКоллекции);
	
	Если ПараметрыКоллекции.ЗаписьМенеджером = Истина Тогда
		
		ЗаписатьНовыеЦеныМенеджером(КоллекцияНоменклатуры, ПараметрыКоллекции);
		
	Иначе
		
		ЗаписатьНовыеЦеныНабором(КоллекцияНоменклатуры, МассивВидовЦен, ПараметрыКоллекции);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьНовыеЦеныМенеджером(КоллекцияНоменклатуры, ПараметрыКоллекции)
	
	Для Каждого СтрокаКоллекции Из КоллекцияНоменклатуры Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаКоллекции.Цена) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЗаписьРегистра = РегистрыСведений.ЦеныНоменклатуры.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.Период = ПараметрыКоллекции.ПериодЗаписи;
		ЗаписьРегистра.ВидЦен = СтрокаКоллекции.ВидЦен;
		ЗаписьРегистра.Номенклатура = СтрокаКоллекции.Номенклатура;
		ЗаписьРегистра.Характеристика = СтрокаКоллекции.Характеристика;		
		ЗаписьРегистра.Прочитать();
		
		ЗаписьРегистра.ДокументУстановки = СтрокаКоллекции.ДокументУстановки;
				
		Если ЗначениеЗаполнено(ЗаписьРегистра.Цена)
			И ПараметрыКоллекции.ЗаписыватьНовыеЦеныПоверхУстановленных = Истина Тогда
			
			ЗаписьРегистра.Цена = СтрокаКоллекции.Цена;
			Если ЗначениеЗаполнено(СтрокаКоллекции.ЕдиницаИзмерения) Тогда
				ЗаписьРегистра.ЕдиницаИзмерения = СтрокаКоллекции.ЕдиницаИзмерения;
			КонецЕсли;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗаписьРегистра.Цена) Тогда
			
			ЗаполнитьЗначенияСвойств(ЗаписьРегистра, СтрокаКоллекции);
			ЗаписьРегистра.Период = ПараметрыКоллекции.ПериодЗаписи;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
		ЗаписьРегистра.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьНовыеЦеныНабором(КоллекцияНоменклатуры, МассивВидовЦен, ПараметрыКоллекции)
	
	СтруктураОтбора = Новый Структура;
	Для каждого ВидЦен Из МассивВидовЦен Цикл
		
		СтруктураОтбора.Вставить("ВидЦен", ВидЦен);
		СтрокиПоВидуЦен = КоллекцияНоменклатуры.НайтиСтроки(СтруктураОтбора);
		
		ЗаписиРегистра = КоллекцияНоменклатуры.Скопировать(СтрокиПоВидуЦен);
		
		Если ЗаписиРегистра.Количество() > 0 Тогда
			
			НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(ПараметрыКоллекции.ПериодЗаписи, Истина);
			НаборЗаписей.Отбор.ВидЦен.Установить(ВидЦен, Истина); 			
			НаборЗаписей.Загрузить(ЗаписиРегистра);
			НаборЗаписей.ДополнительныеСвойства.Вставить("Проведение", Истина);
			НаборЗаписей.ДополнительныеСвойства.Вставить("РегистрацияНаУзлах", Ложь); 				
			НаборЗаписей.Записать(Истина);
			
			Товары = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ЗаписиРегистра.ВыгрузитьКолонку("Номенклатура"));		
			ЦенообразованиеСервер.ЗарегистрироватьНоменклатуруНаУзлахСайтаИШтрихМ(Товары);				
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПересчитатьЗависимыйВидЦены(ВидЦеныРасчетный, ПараметрыРасчета, ЦеныРассчитаны, ОписаниеОшибки)
	
	Если ВидЦеныРасчетный.ТипВидаЦен = Перечисления.ТипыВидовЦен.ДинамическийПроцент Тогда
		
		ЦенообразованиеСервер.РасчетДинамическихЦенНаПроцент(ПараметрыРасчета, ЦеныРассчитаны, ОписаниеОшибки, Ложь);
		
	ИначеЕсли ВидЦеныРасчетный.ТипВидаЦен = Перечисления.ТипыВидовЦен.ДинамическийФормула Тогда
		
		ЦенообразованиеСервер.РасчетДинамическихЦенПоФормуле(ПараметрыРасчета, ЦеныРассчитаны, ОписаниеОшибки, Ложь);
		
	КонецЕсли; 
	
КонецПроцедуры

#EndRegion

Процедура ДобавитьВыбранноеПолеСКД(ГруппировкаКомпоновкиДанных, Поле)
	
	ВыбранноеПоле               = ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных(Поле);
	ВыбранноеПоле.Использование = Истина;
	
КонецПроцедуры

Процедура ДобавитьПолеНабораДанныхСКД(НаборДанных, ИмяПоля, ТипЗначения, Ограничение = Ложь)
	
	ПолеНабораДанных             = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабораДанных.Поле        = ИмяПоля;
	ПолеНабораДанных.ПутьКДанным = ИмяПоля;  
	
	ПолеНабораДанных.ТипЗначения = Новый ОписаниеТипов(ТипЗначения);
	
	ПолеНабораДанных.ОграничениеИспользованияРеквизитов.Условие = Ограничение;	
	ПолеНабораДанных.ОграничениеИспользования.Условие = Ограничение;
	
КонецПроцедуры

Процедура ДобавитьСвязьНаборовДанныхСКД(СКД, НаборДанныхНоменклатура, РабочийНаборДанных, Поле)
	
	Связь                     = СКД.СвязиНаборовДанных.Добавить();
	Связь.НаборДанныхИсточник = НаборДанныхНоменклатура.Имя;
	Связь.НаборДанныхПриемник = РабочийНаборДанных.Имя;
	Связь.ВыражениеИсточник   = Поле;
	Связь.ВыражениеПриемник   = Поле;
	Связь.Обязательная        = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеПоляСКДСтрокиВидаЦены(СтрокаДереваВидаЦен, УникальныйИдентификаторФормы)
	
	Если ЗначениеЗаполнено(СтрокаДереваВидаЦен.ВидЦен.СхемаКомпоновкиДанных) Тогда
		
		ОписаниеИСхема = Справочники.ВидыЦен.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(СтрокаДереваВидаЦен.ВидЦен, 
			СтрокаДереваВидаЦен.ВидЦен.СхемаКомпоновкиДанных);			
		СхемаКомпоновкиДанных = ОписаниеИСхема.СхемаКомпоновкиДанных;
		
	Иначе
		
		СхемаКомпоновкиДанных = СтрокаДереваВидаЦен.ВидЦен.ХранилищеСхемыКомпоновкиДанных.Получить(); 			
		
	КонецЕсли;
	
	НастройкиКомпоновкиДанных = СтрокаДереваВидаЦен.ВидЦен.ХранилищеНастроекКомпоновкиДанных.Получить();
	
	// схема
	СтрокаДереваВидаЦен.АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификаторФормы);
	
	// параметры   
	Если НЕ ЗначениеЗаполнено(НастройкиКомпоновкиДанных) Тогда
		
		НастройкиКомпоновкиДанных = ЦенообразованиеСервер.ПолучитьНастройкиКомпоновкиПоУмолчанию(СхемаКомпоновкиДанных);
		
	КонецЕсли;
	
	СтрокаДереваВидаЦен.АдресНастроекСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(НастройкиКомпоновкиДанных, УникальныйИдентификаторФормы);
	
	// представление параметров
	СтрокаДереваВидаЦен.Параметры = ЦенообразованиеСервер.ПолучитьОписаниеПараметровКомпоновщикаНастроек(СтрокаДереваВидаЦен, СтрокаДереваВидаЦен.АдресНастроекСхемыКомпоновкиДанных);
		
КонецПроцедуры

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
// @skip-warning
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

Процедура ДобавитьПолеКД(НаборПолейДанных, Поле, Заголовок, ПутьКДанным)
	
	Если НаборПолейДанных.Найти(ПутьКДанным) = Неопределено Тогда
		
		НовоеПолеКД				= НаборПолейДанных.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПолеКД.Поле 		= Поле;
		НовоеПолеКД.Заголовок	= Заголовок;
		НовоеПолеКД.ПутьКДанным	= ПутьКДанным;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПолеИтогаКД(ПоляИтогов, Выражение, ПутьКДанным)
	
	Если ПоляИтогов.Найти(ПутьКДанным) = Неопределено Тогда
		
		ПолеРесурса 			= ПоляИтогов.Добавить();
		ПолеРесурса.Выражение	= Выражение;
		ПолеРесурса.ПутьКДанным = ПутьКДанным;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОписаниеВыбранныхПолей(ТаблицаОписанияПолей, ВидЦен, ПутьКДанным, Заголовок, Использование = Истина)
	
	НоваяСтрока					= ТаблицаОписанияПолей.Добавить();
	НоваяСтрока.Поле			= Новый ПолеКомпоновкиДанных(ПутьКДанным);
	НоваяСтрока.Заголовок		= Заголовок;
	НоваяСтрока.Использование	= Использование;
	НоваяСтрока.Родитель		= ВидЦен;
	
КонецПроцедуры

Процедура ДобавитьПоляТекущихЦен(ВидЦен, НаборПолейДанных, ПоляИтогов, ТаблицаОписанияПолей)
	
	ОписаниеПоля	= ВидЦен.ИдентификаторФормул + "_ЦенаДо";
	Заголовок		= НСтр("ru ='Текущая цена'");
	
	ДобавитьПолеКД(НаборПолейДанных, ОписаниеПоля, Заголовок, ОписаниеПоля);
	ДобавитьПолеИтогаКД(ПоляИтогов, ОписаниеПоля, ОписаниеПоля);
	ДобавитьОписаниеВыбранныхПолей(ТаблицаОписанияПолей, ВидЦен, ОписаниеПоля, Заголовок);
	
КонецПроцедуры

Процедура ДобавитьПоляОтклоненийЦен(ВидЦен, НаборПолейДанных, ПоляИтогов, ТаблицаОписанияПолей)
	
	ОписаниеПоля	= ВидЦен.ИдентификаторФормул + "_Дельта";
	Заголовок		= НСтр("ru ='Дельта'");
	
	ДобавитьПолеКД(НаборПолейДанных, ОписаниеПоля, Заголовок, ОписаниеПоля);
	ДобавитьПолеИтогаКД(ПоляИтогов, ОписаниеПоля, ОписаниеПоля);
	ДобавитьОписаниеВыбранныхПолей(ТаблицаОписанияПолей, ВидЦен, ОписаниеПоля, Заголовок);
	
КонецПроцедуры

Процедура ДобавитьПоляНовыхЦен(ВидЦен, НаборПолейДанных, ПоляИтогов, ТаблицаОписанияПолей)
	
	ОписаниеПоля	= ВидЦен.ИдентификаторФормул + "_ЦенаНовая";
	Заголовок		= НСтр("ru ='Новая цена'");
	
	ДобавитьПолеКД(НаборПолейДанных, ОписаниеПоля, Заголовок, ОписаниеПоля);
	ДобавитьПолеИтогаКД(ПоляИтогов, ОписаниеПоля, ОписаниеПоля);
	ДобавитьОписаниеВыбранныхПолей(ТаблицаОписанияПолей, ВидЦен, ОписаниеПоля, Заголовок);
	
КонецПроцедуры

Процедура ДобавитьПоляЕдиницИзмерения(ВидЦен, НаборПолейДанных, ПоляИтогов, ТаблицаОписанияПолей)
	
	ОписаниеПоля	= ВидЦен.ИдентификаторФормул + "_ЕдИзм";
	Заголовок		= НСтр("ru ='Единица измерения'");
	
	ДобавитьПолеКД(НаборПолейДанных, ОписаниеПоля, Заголовок, ОписаниеПоля);
	ДобавитьПолеИтогаКД(ПоляИтогов, ОписаниеПоля, ОписаниеПоля);
	ДобавитьОписаниеВыбранныхПолей(ТаблицаОписанияПолей, ВидЦен, ОписаниеПоля, Заголовок);
	
КонецПроцедуры

Процедура ДобавитьПоляЗависимыеЦены(ВидЦен, ЗависимыеЦены, НаборПолейДанных, ПоляИтогов, ТаблицаОписанияПолей)
	
	Для каждого ЗависимаяЦена Из ЗависимыеЦены Цикл
		
		ОписаниеПоля	= ЗависимаяЦена.ИдентификаторФормул + "_ЦенаДо";
		Заголовок		= ЗависимаяЦена.Наименование;
		
		ДобавитьПолеКД(НаборПолейДанных, ОписаниеПоля, Заголовок, ОписаниеПоля);
		ДобавитьПолеИтогаКД(ПоляИтогов, ОписаниеПоля, ОписаниеПоля);
		ДобавитьОписаниеВыбранныхПолей(ТаблицаОписанияПолей, ВидЦен, ОписаниеПоля, Заголовок);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоляСКД(СхемаКомпоновкиДанных, ПараметрыПечати, ТаблицаОписанияПолей)
	
	ВыбранныеВидыЦен	= ПараметрыПечати.ВыбранныеВидыЦен;
	НаборПолейДанных	= СхемаКомпоновкиДанных.НаборыДанных["КоллекцияНоменклатуры"].Поля;
	ПоляИтогов			= СхемаКомпоновкиДанных.ПоляИтога;
	
	Для каждого ЭлементСоответствия Из ВыбранныеВидыЦен Цикл
		
		ВидЦен = ЭлементСоответствия.Ключ;
		Если ПараметрыПечати.ПоказыватьДействующуюЦену Тогда
			
			ДобавитьПоляТекущихЦен(ВидЦен, НаборПолейДанных, ПоляИтогов, ТаблицаОписанияПолей);
			
		КонецЕсли;
		
		Если ПараметрыПечати.ПоказыватьОтклонениеЦен Тогда
			
			ДобавитьПоляОтклоненийЦен(ВидЦен, НаборПолейДанных, ПоляИтогов, ТаблицаОписанияПолей);
			
		КонецЕсли;
		
		// Выводим всегда
		ДобавитьПоляНовыхЦен(ВидЦен, НаборПолейДанных, ПоляИтогов, ТаблицаОписанияПолей);
		
		Если ПараметрыПечати.ПоказыватьЕдиницыИзмерения Тогда
			
			ДобавитьПоляЕдиницИзмерения(ВидЦен, НаборПолейДанных, ПоляИтогов, ТаблицаОписанияПолей);
			
		КонецЕсли;
		
		Если ПараметрыПечати.ПоказыватьЗависимыеЦены Тогда
			
			Если ЭлементСоответствия.Значение.Количество() > 0 Тогда
				
				ДобавитьПоляЗависимыеЦены(ВидЦен, ЭлементСоответствия.Значение, НаборПолейДанных, ПоляИтогов, ТаблицаОписанияПолей);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВыбранныеЭлементыКД(ТаблицаОписанияПолей, СтруктураКД)
	
	Для каждого ЭлементНастройкиКД Из СтруктураКД Цикл
		
		Если ЭлементНастройкиКД.Имя = "Подпись" Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекущийРодитель 			= Неопределено;
		КоллекцияВыбранныхПолейКД	= ЭлементНастройкиКД.Выбор.Элементы;
		Для каждого СтрокаТаблицы Из ТаблицаОписанияПолей Цикл
			
			Если ТекущийРодитель <> СтрокаТаблицы.Родитель Тогда
				
				ТекущийРодитель					= СтрокаТаблицы.Родитель;
				
				ГруппаВыбранныхПолей			= КоллекцияВыбранныхПолейКД.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ГруппаВыбранныхПолей.Заголовок	= ТекущийРодитель.Наименование;
				
			КонецЕсли;
			
			ВыбранноеПоле 			= ГруппаВыбранныхПолей.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ВыбранноеПоле, СтрокаТаблицы);
			
		КонецЦикла;
		
		Если ЭлементНастройкиКД.Структура.Количество() > 0 Тогда
			
			ДобавитьВыбранныеЭлементыКД(ТаблицаОписанияПолей, ЭлементНастройкиКД.Структура)
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьЕдиныйНаборДанных(ПараметрыПечати)
	
	КоллекцияНоменклатуры = ПараметрыПечати.КоллекцииДанныхФормы.ТаблицаФормыНоменклатуры.Скопировать();
	КоллекцияНоменклатуры.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	Для каждого КолонкаТаблицы Из КоллекцияНоменклатуры.Колонки Цикл
		
		КолонкаТаблицы.Имя = СтрЗаменить(КолонкаТаблицы.Имя, "ТЧНоменклатура", "");
		
	КонецЦикла;
	
	Если ПараметрыПечати.ПоказыватьХарактеристики Тогда
		
		Для каждого КолонкаТаблицы Из ПараметрыПечати.КоллекцииДанныхФормы.ТаблицаФормыХарактеристик.Колонки Цикл
			
			КолонкаТаблицы.Имя = СтрЗаменить(КолонкаТаблицы.Имя, "ТЧХарактеристики", "");
			
		КонецЦикла;
		
		Для каждого СтрокаТаблицы Из ПараметрыПечати.КоллекцииДанныхФормы.ТаблицаФормыХарактеристик Цикл
			
			ЗаполнитьЗначенияСвойств(КоллекцияНоменклатуры.Добавить(), СтрокаТаблицы);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КоллекцияНоменклатуры;
	
КонецФункции

Функция СформироватьТабличныйДокументПоДеревуДанных(ПараметрыПечати) Экспорт
	
	ТабличныйДокумент	= Новый ТабличныйДокумент;
	
	КоллекцияНоменклатуры = СоздатьЕдиныйНаборДанных(ПараметрыПечати);
	
	// 1. Получим СКД
	СхемаКомпоновкиДанных = Документы.УстановкаЦенНоменклатуры.ПолучитьМакет("ТабличнаяЧастьФормированияЦен");
	
	ТаблицаОписанияПолей = Новый ТаблицаЗначений;
	ТаблицаОписанияПолей.Колонки.Добавить("Поле");
	ТаблицаОписанияПолей.Колонки.Добавить("Заголовок");
	ТаблицаОписанияПолей.Колонки.Добавить("Использование");
	ТаблицаОписанияПолей.Колонки.Добавить("Родитель"); // Содержит вид цен (ссылка)
	
	ДобавитьПоляСКД(СхемаКомпоновкиДанных, ПараметрыПечати, ТаблицаОписанияПолей);
	
	// 2. создаем настройки для схемы 
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	СтруктураКД						= НастройкиКомпоновкиДанных.Структура;
	ДобавитьВыбранныеЭлементыКД(ТаблицаОписанияПолей, СтруктураКД);
	
	// 3. готовим макет 
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ДанныеРасшифровки);
	
	// 4. исполняем макет 
	ВнешниеНаборыДанных = Новый Структура("КоллекцияНоменклатуры", КоллекцияНоменклатуры);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	ПроцессорКомпоновки.Сбросить();
	
	// 5. выводим результат 
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	// 6. Запишем СКД и данные расшифровки
	// не требуется
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьПараметрыПечатиПоОбъекту(ОбъектПечати)
	
	ПараметрыПечати = Новый Структура("ПоказыватьДействующуюЦену, 
		|ПоказыватьЕдиницыИзмерения, ПоказыватьЗависимыеЦены, ПоказыватьОтклонениеЦен, 
		|ПоказыватьХарактеристики, УстанавливатьХарактеристикамБезЦен");
	ЗаполнитьЗначенияСвойств(ПараметрыПечати, ОбъектПечати);
	ПараметрыПечати.Вставить("ВыбранныеВидыЦен", ПолучитьВыбранныеВидыЦенПоОбъекту(ОбъектПечати));
	Возврат ПараметрыПечати;
	
КонецФункции

Функция ПолучитьВыбранныеВидыЦенПоОбъекту(ОбъектПечати)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектПечати", ОбъектПечати);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	УстановкаЦенНоменклатурыЗапасы.ВидЦены КАК ВидЦены,
	               |	УстановкаЦенНоменклатурыЗапасы.ВидЦены.БазовыйВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) КАК БазовыйЗаполнен,
	               |	УстановкаЦенНоменклатурыЗапасы.ВидЦены.БазовыйВидЦен КАК БазовыйВидЦен
	               |ИЗ
	               |	Документ.УстановкаЦенНоменклатуры.Запасы КАК УстановкаЦенНоменклатурыЗапасы
	               |ГДЕ
	               |	УстановкаЦенНоменклатурыЗапасы.Ссылка = &ОбъектПечати
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УстановкаЦенНоменклатурыЗапасы.ВидЦены,
	               |	УстановкаЦенНоменклатурыЗапасы.ВидЦены.БазовыйВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	БазовыйЗаполнен";
	ВыбранныеВидыЦен = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.БазовыйЗаполнен Тогда
			Если ВыбранныеВидыЦен[Выборка.БазовыйВидЦен] = Неопределено Тогда
				ВыбранныеВидыЦен[Выборка.БазовыйВидЦен] = Новый Массив;
			КонецЕсли;			
			ВыбранныеВидыЦен[Выборка.БазовыйВидЦен].Добавить(Выборка.ВидЦены);
		Иначе
			ВыбранныеВидыЦен.Вставить(Выборка.ВидЦены, Новый Массив);
		КонецЕсли;		
		
	КонецЦикла;
	Возврат ВыбранныеВидыЦен;
	
КонецФункции

Функция СоздатьКоллекциюНоменклатурыДляПечатиТабличнойЧасти(ОбъектПечати, ПараметрыПечати)
	
	ВыбранныеВидыЦен = ПараметрыПечати.ВыбранныеВидыЦен;
	
	АдресВременногоХранилища = Документы.УстановкаЦенНоменклатуры.РазобратьМассивНоменклатурыИХарактеристикПоДокументу(ОбъектПечати.Запасы.Выгрузить(), 
		ОбъектПечати.ПоказыватьХарактеристики, ОбъектПечати.ПоказыватьНедействительныеХарактеристики);
	СтруктураТаблицДанных = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	ПараметрыКопирования = Новый Структура;
	ПараметрыКопирования.Вставить("ИменаКолонокКопирования", Неопределено);
	ПараметрыКопирования.Вставить("ИменаКолонокИсключений", Неопределено);
	ПараметрыКопирования.Вставить("ВыбранныеВидыЦен", ВыбранныеВидыЦен);
	ПараметрыКопирования.Вставить("ЗаполнитьТекущиеЦены", Истина);
	ПараметрыКопирования.Вставить("ИмяТабличнойЧасти", "ТЧНоменклатура");
	ПараметрыКопирования.Вставить("МаксимальныйКлючСвязи", 0);
	ПараметрыКопирования.Вставить("МаксимальныйКлючСвязиПослеДобавления", 0);
	ПараметрыКопирования.Вставить("ПоДокументу", Истина);
	ПараметрыКопирования.Вставить("ТаблицаЦен", ?(СтруктураТаблицДанных.Свойство("ТаблицаЦен"), СтруктураТаблицДанных.ТаблицаЦен, Неопределено));
	ПараметрыКопирования.Вставить("Период", ОбъектПечати.Дата);
	
	ТаблицаЦен = СтруктураТаблицДанных.ТаблицаЦен;
	
	ТаблицаФормыНоменклатуры = СтруктураТаблицДанных.ТаблицаНоменклатуры.СкопироватьКолонки();	
	ТаблицаКопирования = ТаблицаФормыНоменклатуры.Скопировать(); 	
	ДобавитьИЗаполнитьКолонкиТекущихЦен(ВыбранныеВидыЦен, "ТЧНоменклатура", ТаблицаКопирования, ТаблицаФормыНоменклатуры, ТаблицаЦен, ПараметрыКопирования);	
	КопироватьДобавлениемСтрокТаблицЗначений(СтруктураТаблицДанных.ТаблицаНоменклатуры, ТаблицаФормыНоменклатуры, ПараметрыКопирования);
	ТаблицаФормыНоменклатуры.Колонки.Удалить("Характеристика");
	
	ПараметрыКопирования.Вставить("ИмяТабличнойЧасти", "ТЧХарактеристики");
	ТаблицаФормыХарактеристик = СтруктураТаблицДанных.ТаблицаХарактеристик.СкопироватьКолонки();
	ТаблицаКопирования = ТаблицаФормыХарактеристик.Скопировать();
	ДобавитьИЗаполнитьКолонкиТекущихЦен(ВыбранныеВидыЦен, "ТЧХарактеристики", ТаблицаКопирования, ТаблицаФормыХарактеристик, ТаблицаЦен, ПараметрыКопирования);	
	КопироватьДобавлениемСтрокТаблицЗначений(СтруктураТаблицДанных.ТаблицаХарактеристик, ТаблицаФормыХарактеристик, ПараметрыКопирования);	
	
	КоллекцииДанныхФормы = Новый Структура("ТаблицаФормыНоменклатуры, ТаблицаФормыХарактеристик", ТаблицаФормыНоменклатуры, ТаблицаФормыХарактеристик);
	ПараметрыПечати.Вставить("КоллекцииДанныхФормы", КоллекцииДанныхФормы);
	
	Возврат СоздатьЕдиныйНаборДанных(ПараметрыПечати);
		
КонецФункции

Функция ПечатнаяФормаТабличнаяЧасть(МассивОбъектов, ОбъектыПечати)
	
	Перем ПервыйДокумент, НомерСтрокиНачало;
	
	ТабличныйДокументОбщий	= Новый ТабличныйДокумент;
	Для каждого ДокументСсылка Из МассивОбъектов Цикл
		
		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабличныйДокументОбщий, ПервыйДокумент, НомерСтрокиНачало);		
		
		ТабличныйДокумент	= Новый ТабличныйДокумент;		
		ПараметрыПечати = ПолучитьПараметрыПечатиПоОбъекту(ДокументСсылка);	
		
		КоллекцияНоменклатуры = СоздатьКоллекциюНоменклатурыДляПечатиТабличнойЧасти(ДокументСсылка, ПараметрыПечати);
		
		// 1. Получим СКД
		СхемаКомпоновкиДанных = Документы.УстановкаЦенНоменклатуры.ПолучитьМакет("ТабличнаяЧастьФормированияЦен");
		
		ТаблицаОписанияПолей = Новый ТаблицаЗначений;
		ТаблицаОписанияПолей.Колонки.Добавить("Поле");
		ТаблицаОписанияПолей.Колонки.Добавить("Заголовок");
		ТаблицаОписанияПолей.Колонки.Добавить("Использование");
		ТаблицаОписанияПолей.Колонки.Добавить("Родитель"); // Содержит вид цен (ссылка)
		
		ДобавитьПоляСКД(СхемаКомпоновкиДанных, ПараметрыПечати, ТаблицаОписанияПолей);
		
		// 2. создаем настройки для схемы 
		НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		
		СтруктураКД						= НастройкиКомпоновкиДанных.Структура;
		ДобавитьВыбранныеЭлементыКД(ТаблицаОписанияПолей, СтруктураКД);
		
		// 3. готовим макет 
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ДанныеРасшифровки);
		
		// 4. исполняем макет 
		ВнешниеНаборыДанных = Новый Структура("КоллекцияНоменклатуры", КоллекцияНоменклатуры);
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(Макет, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
		ПроцессорКомпоновки.Сбросить();
		
		// 5. выводим результат 
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		// 6. Запишем СКД и данные расшифровки
		// не требуется
		ТабличныйДокументОбщий.Вывести(ТабличныйДокумент);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокументОбщий, НомерСтрокиНачало, ОбъектыПечати,
			ДокументСсылка);
	
	КонецЦикла;
	 		
	Возврат ТабличныйДокументОбщий;
		
КонецФункции

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТабличнаяЧасть") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТабличнаяЧасть", НСтр("ru = 'Табличная часть'"), ПечатнаяФормаТабличнаяЧасть(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
			
	// параметры отправки печатных форм по электронной почте
	ЭлектроннаяПочтаУНФ.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов,
		КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Обработки.ПечатьЭтикетокИЦенников)
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЦеныНоменклатуры)
		И ПолучитьФункциональнуюОпцию("ПечатьЭтикетокИЦенников") Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ПечатьДокументовУНФКлиент.ПечатьЭтикетокИЦенниковИзДокументов";
		КомандаПечати.Идентификатор = "ПечатьЦенниковИзУстановкиЦенНоменклатуры";
		КомандаПечати.Представление = НСтр("ru = 'Печать ценников'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.Порядок = 20;
		
	КонецЕсли;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТабличнаяЧасть";
	КомандаПечати.Представление = НСтр("ru = 'Табличная часть'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 4;	
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзВнешнегоИсточника

Процедура ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт
	
	//
	// Для группы полей действует правило: хотя бы одно поле в группе должно быть выбрано в колонках
	//
	
	ПолноеИмяОбъектаЗаполнения = НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;
	
	ОписаниеТиповСтрока11 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(11));
	ОписаниеТиповСтрока25 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25));
	ОписаниеТиповСтрока30 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(30));
	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	ОписаниеТиповСтрока110 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(110));
	ОписаниеТиповСтрока150 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(150));
	ОписаниеТиповСтрока200 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200));
	ОписаниеТиповСтрока1000 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000));
	ОписаниеТиповЧисло15_2 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 2,
		ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло15_3 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 3,
		ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
			
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(
		ТаблицаПолейЗагрузки, "Штрихкод",
		НСтр("ru = 'Штрихкод'"), ОписаниеТиповСтрока200, ОписаниеТиповКолонка, "Номенклатура",
		1, , Истина, Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(
		ТаблицаПолейЗагрузки, "Артикул",
		НСтр("ru = 'Артикул'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Номенклатура",
		2, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(
		ТаблицаПолейЗагрузки, "НоменклатураНаименование",
		НСтр("ru = 'Номенклатура (наименование)'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Номенклатура",
		3, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(
		ТаблицаПолейЗагрузки, "НоменклатураНаименованиеПолное",
		НСтр("ru = 'Номенклатура (полное наименование)'"), ОписаниеТиповСтрока1000, ОписаниеТиповКолонка, "Номенклатура",
		5, , Истина);

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "РодительКод",
		НСтр("ru = 'Код'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока11, ОписаниеТиповКолонка, "Родитель", 1);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "РодительНаименование", 
		НСтр("ru = 'Группа (наименование)'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Родитель", 2);	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ХарактеристикаНаименование", 
			НСтр("ru='Характеристика (наименование)'"), ОписаниеТиповСтрока150, ОписаниеТиповКолонка, "Характеристика", 1);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ХарактеристикаАртикул", 
			НСтр("ru='Характеристика (артикул)'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Характеристика", 2);
		
	КонецЕсли;
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЭтоУслуга", 
		НСтр("ru = 'Это услуга'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока11, ОписаниеТиповБулево, ); 		
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Картинка", 
		НСтр("ru = 'Картинка'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока1000, ОписаниеТиповСтрока1000,,,,, Ложь);
		
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ВидыЦен");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ВидЦен", 
		НСтр("ru = 'Вид цен (наименование)'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка,,,,, Ложь);
		
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КатегорииНоменклатуры");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "КатегорияНоменклатуры", 
		НСтр("ru = 'Категория номенклатуры'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);   
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения, СправочникСсылка.ЕдиницыИзмерения");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЕдиницаИзмерения",
		НСтр("ru = 'Ед. изм.'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, , , , ,
		ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения"));

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Цена", НСтр("ru = 'Цена'"),
		ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2, , , Истина);

	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПланСчетовСсылка.Управленческий");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаДоходов", 
		НСтр("ru = 'Счет учета доходов'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка,,,,, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаЗапасов", 
		НСтр("ru = 'Счет учета запасов'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка,,,,, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаЗатрат", 
		НСтр("ru = 'Счет учета затрат'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка,,,,, Ложь);
		
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтавкаНДС",
		НСтр("ru = 'Ставка НДС'"), ОписаниеТиповСтрока50, ОписаниеТиповКолонка);
		
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НаправлениеДеятельности",
		НСтр("ru = 'Направление деятельности'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
		
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.МетодОценкиЗапасов");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "МетодОценки",
		НСтр("ru = 'Способ списания'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
		
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПополненияЗапасов");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СпособПополнения",
		НСтр("ru = 'Способ пополнения'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
	
КонецПроцедуры

Процедура ПриОпределенииОбразцовЗагрузкиДанных(НастройкиЗагрузкиДанных, УникальныйИдентификатор) Экспорт
	
	Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанных_xlsx_ru");
	ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
	
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанных_mxl_ru");
	
	Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанных_csv_ru");
	ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
	
КонецПроцедуры

// АПК:299-выкл используется в модуле обработки ПомощникЗагрузкиДанныхИзВнешнегоИсточника
Процедура СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника(ПараметрыСопоставления, АдресРезультата) Экспорт
	
	ТаблицаСопоставленияДанных	= ПараметрыСопоставления.ТаблицаСопоставленияДанных;
	РазмерТаблицыДанных			= ТаблицаСопоставленияДанных.Количество();
	НастройкиЗагрузкиДанных		= ПараметрыСопоставления.НастройкиЗагрузкиДанных;
	НастройкиПоиска				= НастройкиЗагрузкиДанных.НастройкиПоиска;
	ВидЦен						= НастройкиЗагрузкиДанных.ВидЦен;

	ТаблицаДублирующихСтрок = ЗагрузкаДанныхИзВнешнегоИсточника.ПустаяТаблицаДублирующихСтрокНоменклатуры();
	НастройкиПоиска.Вставить("ТаблицаДублирующихСтрок", ТаблицаДублирующихСтрок);
	
	ПолноеИмяОбъектаЗаполнения = НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;
	
	// ТаблицаСопоставленияДанных - Тип ДанныеФормыКоллекция
	Для каждого СтрокаТаблицыФормы Из ТаблицаСопоставленияДанных Цикл
		
		НоменклатураСопоставлена = Ложь;
		
		СтрокаТаблицыФормы.СчетУчетаЗапасов = ПланыСчетов.Управленческий.СырьеИМатериалы;
		СтрокаТаблицыФормы.СчетУчетаЗатрат = ?(ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство"), 
			ПланыСчетов.Управленческий.НезавершенноеПроизводство, ПланыСчетов.Управленческий.КоммерческиеРасходы);
		СтрокаТаблицыФормы.СчетУчетаДоходов = ?(СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"), 
			ПланыСчетов.Управленческий.ПрочиеДоходы, ПланыСчетов.Управленческий.ПустаяСсылка());
			
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "НаправлениеДеятельности") Тогда
				
			ЗначениеПоУмолчанию = Справочники.НаправленияДеятельности.Прочее;
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНаправлениеДеятельности(СтрокаТаблицыФормы.НаправлениеДеятельности, СтрокаТаблицыФормы.НаправлениеДеятельности_ВходящиеДанные, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "МетодОценки") Тогда
				
			ЗначениеПоУмолчанию = Перечисления.МетодОценкиЗапасов.ПоСредней;
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьМетодОценки(СтрокаТаблицыФормы.МетодОценки, СтрокаТаблицыФормы.МетодОценки_ВходящиеДанные, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "СпособПополнения") Тогда
				
			ЗначениеПоУмолчанию = Перечисления.СпособыПополненияЗапасов.Закупка;
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСпособПополнения(СтрокаТаблицыФормы.СпособПополнения, СтрокаТаблицыФормы.СпособПополнения_ВходящиеДанные, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если НЕ НоменклатураСопоставлена Тогда
		
			// Номенклатура по ШтрихКоду, Артикулу, Наименованию, НаименованиеПолное
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуру(СтрокаТаблицыФормы, НастройкиПоиска);
		
		КонецЕсли; 
		
		// ВидыЦен по наименованию
		ЗначениеПоУмолчанию = ?(ЗначениеЗаполнено(ВидЦен), ВидЦен, Справочники.Контрагенты.ПолучитьОсновнойВидЦенПродажи());
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьВидЦен(СтрокаТаблицыФормы.ВидЦен, СтрокаТаблицыФормы.ВидЦен_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "Родитель")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "РодительНаименование")
			И ЗначениеЗаполнено(СтрокаТаблицыФормы.РодительНаименование) Тогда
			
			ЗначениеПоУмолчанию = Справочники.Номенклатура.ПустаяСсылка();
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьРодителяНоменклатуры(СтрокаТаблицыФормы.Родитель, "", СтрокаТаблицыФормы.РодительНаименование, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "ЭтоУслуга_ВходящиеДанные") Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицыФормы.ЭтоУслуга_ВходящиеДанные) Тогда
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицыФормы.ЭтоУслуга,
					СтрокаТаблицыФормы.ЭтоУслуга_ВходящиеДанные);
			Иначе
				СтрокаТаблицыФормы.ЭтоУслуга = НастройкиЗагрузкиДанных.ЗагрузкаТабличнойЧастиУслуги;
				СтрокаТаблицыФормы.ЭтоУслуга_ВходящиеДанные = НастройкиЗагрузкиДанных.ЗагрузкаТабличнойЧастиУслуги;
			КонецЕсли;			
			                      			
		КонецЕсли; 		
		
		
		Если НЕ НоменклатураСопоставлена 
			И ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") 
			И ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
			
			// Характеристика по Владельцу и Наименованию
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьХарактеристику(СтрокаТаблицыФормы);
			
		КонецЕсли;
		
		// ЕдиницыИзмерения по Наименованию
		ЗначениеПоУмолчанию = ?(ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура), СтрокаТаблицыФормы.Номенклатура.ЕдиницаИзмерения, Справочники.КлассификаторЕдиницИзмерения.шт);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЕдиницыИзмерения(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.ЕдиницаИзмерения, СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// Цена
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Цена, СтрокаТаблицыФормы.Цена_ВходящиеДанные, 1);
		 				
		ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ПрогрессСопоставленияДанных(ТаблицаСопоставленияДанных.Индекс(СтрокаТаблицыФормы), РазмерТаблицыДанных);
		
	КонецЦикла;
	
	ТаблицаСопоставленияДанных.ЗагрузитьКолонку(ТаблицаДублирующихСтрок.ВыгрузитьКолонку("КлючСвязи"), "_КлючСвязи");
	ПоместитьВоВременноеХранилище(ТаблицаСопоставленияДанных, АдресРезультата);
	
КонецПроцедуры
// АПК:299-вкл

Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения = "") Экспорт

	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();

	НоменклатураЗаполнена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура);
	ЗагрузкаНоменклатурыВозможна = (ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураНаименование) ИЛИ ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураНаименованиеПолное));
	
	Если НоменклатураЗаполнена Тогда
		
		СтрокаТаблицыФормы._СтрокаСопоставлена = НоменклатураЗаполнена;
		СтрокаТаблицыФормы[ИмяСлужебногоПоля] = НЕ СтрокаТаблицыФормы.Номенклатура.ЭтоНабор // Исключая наборы
		И СтрокаТаблицыФормы.Цена <> 0;           		
		
	Иначе   				
		
		СтрокаТаблицыФормы[ИмяСлужебногоПоля] = ЗагрузкаНоменклатурыВозможна;
		
	КонецЕсли;			
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
#КонецЕсли