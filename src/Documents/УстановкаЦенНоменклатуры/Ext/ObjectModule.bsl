

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет таблицу запасы по данным приходной накладной
//
// Параметры:
//  ДанныеЗаполнения - ДокументСсылка.ПриходнаяНакладная - ссылка на документ приходной накладной
//
Процедура ЗаполнитьПоПриходнойНакладной(ДанныеЗаполнения) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		ДокументОснование = ДанныеЗаполнения;
		БлокировкаДанных  = Новый БлокировкаДанных;		
		ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.ПриходнаяНакладная");				
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументОснование); 		
		БлокировкаДанных.Заблокировать();                               		
		
		// Заполнение табличной части.
		Запасы.Очистить();
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ПриходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
		               |	ПриходнаяНакладнаяЗапасы.Характеристика КАК Характеристика,
		               |	ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	ПриходнаяНакладнаяЗапасы.Цена КАК Цена
		               |ИЗ
		               |	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
		               |ГДЕ
		               |	ПриходнаяНакладнаяЗапасы.Ссылка = &ДокументОснование
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ПриходнаяНакладнаяРасходы.Номенклатура,
		               |	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		               |	ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения,
		               |	ПриходнаяНакладнаяРасходы.Цена
		               |ИЗ
		               |	Документ.ПриходнаяНакладная.Расходы КАК ПриходнаяНакладнаяРасходы
		               |ГДЕ
		               |	ПриходнаяНакладнаяРасходы.Ссылка = &ДокументОснование";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			
			ТаблицаЗаполнения = Результат.Выгрузить();
			
			ПоказыватьХарактеристики = Ложь;
			Для каждого СтрокаТаблицы Из ТаблицаЗаполнения Цикл
				
				Запись = Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы, "Номенклатура, Характеристика, ЕдиницаИзмерения, Цена");
				Если НЕ ПоказыватьХарактеристики Тогда
					ПоказыватьХарактеристики = ЗначениеЗаполнено(Запись.Характеристика);
				КонецЕсли;						
			
			КонецЦикла;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		 	
	Исключение
		
		ОтменитьТранзакцию();		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка заполнения табличной части по основанию'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Отказ = Истина;
	
	КонецПопытки;
	
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриходнаяНакладная")] = "ЗаполнитьПоПриходнойНакладной";
		
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения, "");
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Запасы.Количество() = 0 Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Необходимо указать запасы в табличной части'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
		Возврат;
	КонецЕсли;
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность()
		И НЕ ПометкаУдаления Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	// Конец МобильноеПриложение
		
	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если РасчетИзВидаЦен Тогда
		ЗаполнитьОчередьРасчетаЦенПоДокументу();
	КонецЕсли;
	УдалитьЦеныПоДокументу(Отказ);
	СтруктураДанных = ИнициализироватьДанныеДокумента(); 
	Если РасчетИзВидаЦен Тогда
		Документы.УстановкаЦенНоменклатуры.ЗаписатьЗависимыеВидыЦен(СтруктураДанных);
	Иначе
		Документы.УстановкаЦенНоменклатуры.ЗаписатьНовыеЦены(СтруктураДанных);	
	КонецЕсли;	
			
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ЗаполнитьОчередьРасчетаЦенПоДокументу();
	УдалитьЦеныПоДокументу(Отказ); 	
	
КонецПроцедуры  

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда		
		Возврат;                    		
	КонецЕсли;
	
	Если ПометкаУдаления И Ссылка.ПометкаУдаления Тогда		
		УдалитьЦеныПоДокументу(Отказ);                      		
	КонецЕсли;       	
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазы(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Документы.ПриходнаяНакладная.ПустаяСсылка();
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИнициализироватьДанныеДокумента()
	
	МассивВидовЦенДокумента = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Запасы.ВыгрузитьКолонку("ВидЦены"));
	МассивВидовЦен = Новый Массив;
	Для каждого ВидЦены Из МассивВидовЦенДокумента Цикл
		
		МассивВидовЦен.Добавить(ВидЦены);
		Если ЗначениеЗаполнено(ВидЦены.БазовыйВидЦен) Тогда
			МассивВидовЦен.Добавить(ВидЦены.БазовыйВидЦен);
		КонецЕсли;			
	
	КонецЦикла;
	
	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("АвторизированныйПользователь", Пользователи.АвторизованныйПользователь());	
	КэшЗначений.Вставить("ВыбранныеВидыЦен", МассивВидовЦен);
	КэшЗначений.Вставить("ИсключенныеВидыЦен", ПолучитьИсключенныеЦеныДляПроведения());
	КэшЗначений.Вставить("ЗаписиРегистраЗаПериода");
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("КэшЗначений", КэшЗначений);
	СтруктураДанных.Вставить("ПериодЗаписи", НачалоДня(Дата));
	СтруктураДанных.Вставить("ПоказыватьХарактеристики", ПоказыватьХарактеристики);
	СтруктураДанных.Вставить("УстанавливатьХарактеристикамБезЦен", УстанавливатьХарактеристикамБезЦен);
	СтруктураДанных.Вставить("ЗаписыватьНовыеЦеныПоверхУстановленных", ЗаписыватьНовыеЦеныПоверхУстановленных);
	СтруктураДанных.Вставить("ТаблицаНоменклатуры", Запасы.Выгрузить());
	СтруктураДанных.Вставить("ДокументУстановки", Ссылка);

	ЦенообразованиеСервер.ИсключитьЗаписиСтарыхЦенИзТаблицы(СтруктураДанных.ТаблицаНоменклатуры);

	Возврат СтруктураДанных;	
	
КонецФункции

Функция ПолучитьИсключенныеЦеныДляПроведения()
	
	МассивИсключенныхВидовЦен = Новый Массив;
	МассивВидовЦен = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Запасы.ВыгрузитьКолонку("ВидЦены"));
	Для каждого ВидЦены Из МассивВидовЦен Цикл
		
		Если ВидЦены.ТипВидаЦен <> Перечисления.ТипыВидовЦен.Статический 
			И ВидЦены.ТипВидаЦен <> Перечисления.ТипыВидовЦен.ПроизвольныйЗапрос Тогда

			МассивИсключенныхВидовЦен.Добавить(ВидЦены);
			
		КонецЕсли;
		
	КонецЦикла;
	Возврат МассивИсключенныхВидовЦен;
	
КонецФункции

Процедура УдалитьЦеныПоДокументу(Отказ)
	
	НачатьТранзакцию();
	
	Попытка
	
		БлокировкаДанных		= Новый БлокировкаДанных;		
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ЦеныНоменклатуры");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = Запасы;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ВидЦен", "ВидЦены");
		ЭлементБлокировки.УстановитьЗначение("Период", НачалоДня(Дата)); 		
		БлокировкаДанных.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументУстановки", Ссылка);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЦеныНоменклатуры.Период КАК Период,
		               |	ЦеныНоменклатуры.ВидЦен КАК ВидЦен,
		               |	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		               |	ЦеныНоменклатуры.Характеристика КАК Характеристика
		               |ИЗ
		               |	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		               |ГДЕ
		               |	ЦеныНоменклатуры.ДокументУстановки = &ДокументУстановки
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ЦеныНоменклатуры.Характеристика,
		               |	ЦеныНоменклатуры.ВидЦен,
		               |	ЦеныНоменклатуры.Период,
		               |	ЦеныНоменклатуры.Номенклатура";
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
				НаборЗаписей.Отбор.ВидЦен.Установить(Выборка.ВидЦен);
				НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
				НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика);				
				НаборЗаписей.ДополнительныеСвойства.Вставить("ОтменаПроведения", Истина); 				
				НаборЗаписей.Записать(Истина);
								
			КонецЦикла;		
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		 	
	Исключение
		
		ОтменитьТранзакцию();		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка удаления записей по документу'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Отказ = Истина;
	
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьОчередьРасчетаЦенПоДокументу()
	
	НачатьТранзакцию();
	
	Попытка
	
		БлокировкаДанных		= Новый БлокировкаДанных;		
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ЦеныНоменклатуры");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = Запасы;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ВидЦен", "ВидЦены");
		ЭлементБлокировки.УстановитьЗначение("Период", НачалоДня(Дата)); 		
		БлокировкаДанных.Заблокировать();
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументУстановки", Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЦеныНоменклатуры.Период КАК ПериодЗаписи,
		               |	ЦеныНоменклатуры.ВидЦен КАК ВидЦенРасчетный,
		               |	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		               |	ЦеныНоменклатуры.Характеристика КАК Характеристика
		               |ИЗ
		               |	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		               |ГДЕ
		               |	ЦеныНоменклатуры.ДокументУстановки = &ДокументУстановки
		               |	И ЦеныНоменклатуры.ВидЦен.ТипВидаЦен <> ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.Статический)
		               |ИТОГИ ПО
		               |	ВидЦенРасчетный";
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ВыборкаВидаЦен = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаВидаЦен.Следующий() Цикл
				
				Набор = РегистрыСведений.ОчередьРасчетаЦен.СоздатьНаборЗаписей();
				НомерОчередиЦен = ЦенообразованиеСервер.УстановитьРабочийНомерОчередиЦен();
				Выборка = ВыборкаВидаЦен.Выбрать();
				Пока Выборка.Следующий() Цикл
					Запись = Набор.Добавить();
					ЗаполнитьЗначенияСвойств(Запись, Выборка);
					Запись.НомерОчередиЦен = НомерОчередиЦен;
				КонецЦикла;		
				Набор.Записать(Ложь);
				ВидЦеныРасчетныйОбъект = ВыборкаВидаЦен.ВидЦенРасчетный.ПолучитьОбъект();
				ВидЦеныРасчетныйОбъект.Заблокировать();
				ВидЦеныРасчетныйОбъект.ЦеныАктуальны = Ложь;			
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидЦеныРасчетныйОбъект, Ложь, Ложь);    				
							
			КонецЦикла;		
		КонецЕсли;
		
	ЗафиксироватьТранзакцию();
		 	
	Исключение
		
		ОтменитьТранзакцию();		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка заполнения очереди расчета цен по документу'", 
			ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Отказ = Истина;
	
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли