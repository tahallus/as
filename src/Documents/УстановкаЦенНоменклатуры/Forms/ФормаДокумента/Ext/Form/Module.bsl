
#Область ОписаниеПеременных

&НаКлиенте
Перем ЦенаДоИзменения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Перем МассивВидовЦен;

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.УстановкаЦенНоменклатуры.ТабличныеЧасти.Запасы, НастройкиЗагрузкиДанных, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект,
		"ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	
	МассивВидовЦен = Новый Массив;
	
	Если Объект.Запасы.Количество()>0 Тогда    		

		ТаблицаВидовЦен = Объект.Запасы.Выгрузить();			
		МассивВидовЦен = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаВидовЦен.ВыгрузитьКолонку("ВидЦены"));				

	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Параметры.Свойство("РасчетИзВидаЦен") Тогда
			Если Параметры.ВидЦен.ТипВидаЦен = Перечисления.ТипыВидовЦен.Статический
				ИЛИ Параметры.ВидЦен.ТипВидаЦен = Перечисления.ТипыВидовЦен.ПроизвольныйЗапрос Тогда			
				
				Объект.РасчетИзВидаЦен = Ложь;
				МассивВидовЦен.Добавить(Параметры.ВидЦен);
				
			Иначе
				
				Объект.РасчетИзВидаЦен = Параметры.РасчетИзВидаЦен;
				
			КонецЕсли;			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.РасчетИзВидаЦен 
		И Параметры.Свойство("ВидЦен") Тогда
		
		МассивВидовЦен.Добавить(Параметры.ВидЦен);
		Документы.УстановкаЦенНоменклатуры.ЗаполнитьЗапасыПоОчередиРасчета(Объект.Запасы, Параметры.ВидЦен, Объект.ПоказыватьХарактеристики);
		Объект.ПоказыватьЗависимыеЦены = Истина;
		Объект.ПоказыватьНовуюЦену = Ложь;
		Объект.ПоказыватьОтклонениеЦен = Ложь;
		Объект.ПоказыватьДействующуюЦену = Ложь;
		
	КонецЕсли;		
		
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование);
	ЗаполнитьСписокДокументОснование();
	
	Если КэшЗначений = Неопределено Тогда
		УстановитьКэшЗначений();
	КонецЕсли;
	
	КэшЗначений.Вставить("ВидыЦенВыбраныПриЗаполнении", МассивВидовЦен.Количество()>0 И ЗначениеЗаполнено(МассивВидовЦен[0]));
	
	ЗаполнитьДеревоОперандов(МассивВидовЦен);
		
	Если Объект.Запасы.Количество()>0 
		И КэшЗначений.ВидыЦенВыбраныПриЗаполнении
		И НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
				
		ЗаполнитьКэшЗначенийВидамиЦен(КэшЗначений);
		ИзменитьСоставРеквизитовИЭлементовТабличнойЧасти("ТЧНоменклатура");
		ИзменитьСоставРеквизитовИЭлементовТабличнойЧасти("ТЧХарактеристики");
		ЗаполнитьТаблицуНоменклатурыИХарактеристикПоДокументу();
		УстановитьВидимостьГруппыБазовыхЦен();
		ЗаполнитьСписокВыбораДатДокументаИзОчередиРасчета(МассивВидовЦен);
		
	КонецЕсли;	
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПоказыватьХарактеристики", "Видимость", КэшЗначений.ФОИспользоватьХарактеристики);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧНоменклатура", "ТолькоПросмотр", Объект.РасчетИзВидаЦен);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧХарактеристики", "ТолькоПросмотр", Объект.РасчетИзВидаЦен);
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВидыЦенИспользование", "Вид", ВидПоляФормы.ПолеНадписи);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВидыЦенИспользование", "Формат", "БЛ=пропустить; БИ=рассчитывается");
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТабличнаяЧастьГруппа1", "Заголовок", НСтр("ru ='Подобрать'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияЧетыре", "Картинка", БиблиотекаКартинок.Информация);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияШесть", "Картинка", БиблиотекаКартинок.Информация);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияЧетыре", "Ширина", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияШесть", "Ширина", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияЧетыре", "Высота", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияШесть", "Высота", 0);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПоказыватьХарактеристикиДополнительно", "Видимость", Объект.ПоказыватьХарактеристики);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Объект.Запасы.Количество()>0
		И КэшЗначений.ВидыЦенВыбраныПриЗаполнении Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаТовары;
	Иначе			
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВидыЦен;
	КонецЕсли;
	
	ЗагрузитьНастройкиФормы();
	УстановитьВидимостьЭлементов();
	
	Модифицированность = Объект.РасчетИзВидаЦен
		И НЕ ЗначениеЗаполнено(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	СтатистикаИспользованияФормКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
	
	Если НЕ ЗавершениеРаботы Тогда
		
		СохраняемыеНастройки = Новый Структура;
		СохраняемыеНастройки.Вставить("ПоказыватьХарактеристики", 					Объект.ПоказыватьХарактеристики);
		СохраняемыеНастройки.Вставить("ПоказыватьНедействительныеХарактеристики", 	Объект.ПоказыватьНедействительныеХарактеристики);
		СохраняемыеНастройки.Вставить("ПоказыватьОтклонениеЦен", 					Объект.ПоказыватьОтклонениеЦен);
		СохраняемыеНастройки.Вставить("ПоказыватьДействующуюЦену", 					Объект.ПоказыватьДействующуюЦену);
		СохраняемыеНастройки.Вставить("ПоказыватьЕдиницыИзмерения", 				Объект.ПоказыватьЕдиницыИзмерения);
		СохраняемыеНастройки.Вставить("ПоказыватьЗависимыеЦены", 					Объект.ПоказыватьЗависимыеЦены);
		СохраняемыеНастройки.Вставить("ГруппаНастроекСвернута", 					Элементы.ГруппаНастройки.Скрыта());
		
		КлючНастроек = "НовыйДокументУстановкаЦенНоменклатуры";
		СохранитьНастройкиФормы(СохраняемыеНастройки, КлючНастроек);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		
		ДобавитьПроизвольнуюНоменклатуру(ВыбранноеЗначение);
		ПроверитьНеобходимостьПодключенияОбработчикаОжидания();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства 

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Перем МассивВидовЦен;
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	МассивВидовЦен = Новый Массив;
	Если Объект.Запасы.Количество()>0 Тогда		
		ТаблицаВидовЦен = Объект.Запасы.Выгрузить();			
		МассивВидовЦен = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаВидовЦен.ВыгрузитьКолонку("ВидЦены"));
	КонецЕсли;  
		
	УстановитьКэшЗначений();
	
	КэшЗначений.Вставить("ВидыЦенВыбраныПриЗаполнении", МассивВидовЦен.Количество()>0);
	
	ЗаполнитьДеревоОперандов(МассивВидовЦен);
	
	ТЧНоменклатура.Очистить();
	ТЧХарактеристики.Очистить();
	
	Если Объект.Запасы.Количество()>0
		И КэшЗначений.ВидыЦенВыбраныПриЗаполнении Тогда
		
		ЗаполнитьКэшЗначенийВидамиЦен(КэшЗначений);
		ИзменитьСоставРеквизитовИЭлементовТабличнойЧасти("ТЧНоменклатура");
		ИзменитьСоставРеквизитовИЭлементовТабличнойЧасти("ТЧХарактеристики");
		ЗаполнитьТаблицуНоменклатурыИХарактеристикПоДокументу();
		УстановитьВидимостьГруппыБазовыхЦен();
		КэшЗначений.ОтключенныеВидыЦен.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("Проведение"
			+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения 
	
	Если Модифицированность 
		ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		УдалитьДубли();
		ПоместитьЦеныВТабличнуюЧасть(ТекущийОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	ПерезаполнитьТабличнуюЧастьПоОчередиНаДатуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект,
		"Объект.Комментарий");

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьХарактеристикиПриИзменении(Элемент)
	
	Объект.УстанавливатьХарактеристикамБезЦен = Ложь;
	УстановитьВидимостьЭлементов();	
	
КонецПроцедуры 

&НаКлиенте
Процедура УстанавливатьХарактеристикамБезЦенПриИзменении(Элемент)
	
	Объект.ПоказыватьХарактеристики = Ложь;
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыЦенИспользованиеПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = Элементы.ВидыЦен.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено
		И НЕ ЗначениеЗаполнено(ДанныеТекущейСтроки.ВидЦен) Тогда
		
		ПодчиненныеСтроки = ДанныеТекущейСтроки.ПолучитьЭлементы(); 
		Для каждого Строка Из ПодчиненныеСтроки Цикл
			
			ДанныеТекущейСтроки.Свойство("Использование", Строка.Использование);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьКэшЗначенийВидамиЦен(КэшЗначений);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыЦенВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Обход ошибки платформы 30163126
	#Если МобильныйКлиент Тогда
		
		СтандартнаяОбработка = Ложь;
		
	#Иначе
		
		СтандартнаяОбработка = Истина;
		
	#КонецЕсли
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если Поле = Элементы.ВидыЦенПараметры Тогда
			
			РедактироватьНастройки(Неопределено);
			
		ИначеЕсли Поле = Элементы.ВидыЦенПредставление Тогда
			
			ПоказатьЗначение(Неопределено, ТекущиеДанные.ВидЦен);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыЦенПриАктивизацииСтроки(Элемент)
	
	#Если НЕ МобильныйКлиент Тогда
		
		Возврат;
		
	#КонецЕсли
	
	ДанныеТекущейСтроки = Элементы.ВидыЦен.ТекущиеДанные;
	Если ДанныеТекущейСтроки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеТекущейСтроки.Использование = НЕ ДанныеТекущейСтроки.Использование;
	ВидыЦенИспользованиеПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЧНоменклатураПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЧХарактеристикиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЧНоменклатураВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Объект.ПоказыватьХарактеристики Тогда
		
		Если Поле.Имя = "ТЧНоменклатураНоменклатура" Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ДанныеСтрокиФормы = ТЧНоменклатура.НайтиПоИдентификатору(ВыбраннаяСтрока);
			Если ДанныеСтрокиФормы <> Неопределено 
				И (ДанныеСтрокиФормы.ИндексКартинки = 1
					ИЛИ ДанныеСтрокиФормы.ИндексКартинки = 3
					ИЛИ ДанныеСтрокиФормы.ИндексКартинки = 5
					ИЛИ ДанныеСтрокиФормы.ИндексКартинки = 7
					ИЛИ ДанныеСтрокиФормы.ИндексКартинки = 9
					ИЛИ ДанныеСтрокиФормы.ИндексКартинки = 11
					ИЛИ ДанныеСтрокиФормы.ИндексКартинки = 13
					ИЛИ ДанныеСтрокиФормы.ИндексКартинки = 15) Тогда
				
				ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", ДанныеСтрокиФормы.КлючСвязи);
				Элементы.ТЧХарактеристики.ОтборСтрок = ОтборСтрок;
				
				Элементы.СтраницыПредварительныйРезультат.ТекущаяСтраница = Элементы.СтраницаПР_Характеристики;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЧНоменклатураПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ОткрытьФормуДобавленияПроизвольнойНоменклатуры("Элементы");
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЧНоменклатураПередУдалением(Элемент, Отказ)
	
	Если Объект.ПоказыватьХарактеристики Тогда
		
		МассивСтроки = Элементы.ТЧНоменклатура.ВыделенныеСтроки;
		Если МассивСтроки.Количество() > 0 Тогда
			
			Для каждого Строка Из МассивСтроки Цикл
				
				НайденнаяСтрокаНоменклатура = ТЧНоменклатура.НайтиПоИдентификатору(Строка);
				Если НайденнаяСтрокаНоменклатура <> Неопределено Тогда
					
					УдалитьСтрокиХарактеристикПоКлючуСвязи(НайденнаяСтрокаНоменклатура.КлючСвязи, ТЧХарактеристики);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЧНоменклатураПередНачаломИзменения(Элемент, Отказ)
	
	Если Объект.ПоказыватьХарактеристики Тогда
		
		ДанныеТекущейСтроки = Элементы.ТЧНоменклатура.ТекущиеДанные;
		Если ДанныеТекущейСтроки <> Неопределено 
			И Элемент.Имя = "ТЧНоменклатура" Тогда
			
			ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;
			Если СтрНайти(ИмяЭлемента, "_ЕдИзм") > 0  Тогда
				
				ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_ЕдИзм", "_ЦенаНовая");
				
			КонецЕсли;
			
			ЦенаДоИзменения = ДанныеТекущейСтроки[ИмяЭлемента];
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписыватьНовыеЦеныПоверхУстановленныхПриИзменении(Элемент)
	
	Если НЕ Объект.ПоказыватьХарактеристики Тогда
		
		Элементы.УстанавливатьХарактеристикамБезЦен.Заголовок = ?(Объект.ЗаписыватьНовыеЦеныПоверхУстановленных,
			НСтр(" ru='Устанавливать цены номенклатуры характеристикам'"),
			НСтр(" ru='Устанавливать цены номенклатуры характеристикам без цен'"));
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НоваяЦенаПриИзменении(Элемент)
	
	Если ЭтаФорма.ТекущийЭлемент = Элементы.ТЧХарактеристики Тогда
		
		ДанныеТекущейСтроки = Элементы.ТЧХарактеристики.ТекущиеДанные;
		Если ДанныеТекущейСтроки <> Неопределено Тогда
			
			ИдентификаторВидаЦен = СтрЗаменить(СтрЗаменить(Элемент.Имя,"ТЧХарактеристики", ""), "_ЦенаНовая", "");
			Идентификатор = "ТЧХарактеристики" + ИдентификаторВидаЦен;
			
			ОтразитьИзменениеНовойЦены(ДанныеТекущейСтроки, Идентификатор);
			
			ДанныеТекущейСтроки[Идентификатор + "_ЦенуИзменили"] = Истина;
			
			СтрокиНоменклатуры = ТЧНоменклатура.НайтиСтроки(Новый Структура("КлючСвязи", ДанныеТекущейСтроки.КлючСвязи));
			СтрокиНоменклатуры[0]["ТЧНоменклатура" + ИдентификаторВидаЦен + "_ЦенуИзменили"] = Истина;
			
		КонецЕсли;
		
	Иначе
		
		ДанныеТекущейСтроки = Элементы.ТЧНоменклатура.ТекущиеДанные;
		Если ДанныеТекущейСтроки <> Неопределено Тогда
			
			ИдентификаторВидаЦен = СтрЗаменить(СтрЗаменить(Элемент.Имя,"ТЧНоменклатура", ""), "_ЦенаНовая", "");
			Идентификатор = "ТЧНоменклатура" + ИдентификаторВидаЦен;
			
			ОтразитьИзменениеНовойЦены(ДанныеТекущейСтроки, Идентификатор);
			ОтразитьНовуюЦенуВХарактеристиках(ИдентификаторВидаЦен, ДанныеТекущейСтроки[Элемент.Имя], ДанныеТекущейСтроки.КлючСвязи);
			
			ДанныеТекущейСтроки[Идентификатор + "_ЦенуИзменили"] = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЕдиницаИзмеренияПриИзменении(Элемент)
	
	Если ЭтаФорма.ТекущийЭлемент = Элементы.ТЧХарактеристики Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеТекущейСтроки = Элементы.ТЧНоменклатура.ТекущиеДанные;
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		ИдентификаторВидаЦен = СтрЗаменить(СтрЗаменить(Элемент.Имя,"ТЧНоменклатура", ""), "_ЕдИзм", "");
		Идентификатор = "ТЧНоменклатура" + ИдентификаторВидаЦен;
		
		ОтразитьЕдиницуИзмеренийВХарактеристиках(ИдентификаторВидаЦен, ДанныеТекущейСтроки[Элемент.Имя], ДанныеТекущейСтроки.КлючСвязи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда 
		
		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Модифицированность = Истина;   
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		
		Если ВидыЦенВыбраны() Тогда
			
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);	
			СтруктураОтбора = Новый Структура;		
			СтруктураПараметровОтбора = Новый Структура("Отбор", СтруктураОтбора);
			ОткрытьФорму("Документ.ПриходнаяНакладная.ФормаВыбора", СтруктураПараметровОтбора, ЭтотОбъект,,,, ОповещениеОЗакрытии);
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Необходимо указать виды цен, для которых планируется установка новых цен.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ВидыЦен", , );
			
		КонецЕсли;		

	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		
		ЗаполнитьПоОснованиюНачало();	
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда	
		
		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоСсылке(Объект.ДокументОснование);
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаВидыЦен Тогда
		
		УстановитьДоступностьЭлементовСтраницыВидыЦен();
						
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаТовары Тогда
		
		Отказ = Ложь;
		
		ЗаполнитьКэшЗначенийВидамиЦен(КэшЗначений);
		
		Если ВидыЦенВыбраны() Тогда
			
			ИмяТабличнойЧасти = "ТЧНоменклатура";
			ИзменитьСоставРеквизитовИЭлементовТабличнойЧасти(ИмяТабличнойЧасти);
			
			ИмяТабличнойЧасти = "ТЧХарактеристики";
			ИзменитьСоставРеквизитовИЭлементовТабличнойЧасти(ИмяТабличнойЧасти);
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Необходимо указать виды цен, для которых планируется установка новых цен.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ВидыЦен", , Отказ);
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВидыЦен;
			Возврат;
			
		КонецЕсли; 
		
		Отказ = НЕ ЦенообразованиеКлиент.ЗаполненыОбязательныеПараметрыСхемКомпоновкиДанных(ЭтотОбъект);		
		
		Если Отказ Тогда
			
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВидыЦен;
			
		Иначе			
			
			ИзменитьВидимостьЭлементовТабличнойЧасти("ТЧНоменклатура");
			
			Если Объект.ПоказыватьХарактеристики Тогда
				
				ИзменитьВидимостьЭлементовТабличнойЧасти("ТЧХарактеристики");
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Объект.ДокументОснование)
				И ТЧНоменклатура.Количество() = 0 Тогда
				ЗаполнитьПоОснованиюЗавершение(КодВозвратаДиалога.Да, Новый Структура);
			КонецЕсли;
						
		КонецЕсли;			
			
	КонецЕсли;		
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьВидЦены(Команда)
	
	ДанныеТекущейСтроки = Элементы.ВидыЦен.ТекущиеДанные;
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		ОткрытьФорму("Справочник.ВидыЦен.ФормаОбъекта", Новый Структура("Ключ", ДанныеТекущейСтроки.ВидЦен), ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличнуюЧасть(Команда)
	
	ОчиститьТабличныеЧастиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНоменклатуру(Команда)
	
	Элементы.СтраницыПредварительныйРезультат.ТекущаяСтраница = Элементы.СтраницаПР_Номенклатура;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНоменклатуру(Команда)
	
	ИмяТабличнойЧасти = ?(ЭтаФорма.ТекущийЭлемент = Элементы.ТЧХарактеристики, "ТЧХарактеристики", "ТЧНоменклатура");
	
	ДанныеТекущейСтроки = Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", Новый Структура("Ключ", ДанныеТекущейСтроки.Номенклатура), ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьХарактеристику(Команда)
	
	ДанныеТекущейСтроки = Элементы.ТЧХарактеристики.ТекущиеДанные;
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаОбъекта", Новый Структура("Ключ", ДанныеТекущейСтроки.Характеристика), ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПредупреждениеНажатие(Элемент)
	
	ТекстПредупреждения = НСтр(" ru='Изменение параметра невозможно из-за заполненной табличной части номенклатуры'");
	ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Если КэшЗначений.ФОИспользоватьХарактеристики
		И Элементы.ПоказыватьХарактеристики.Доступность Тогда
		
		Объект.ПоказыватьХарактеристики = Истина;
		
	КонецЕсли;
	
	Объект.ПоказыватьДействующуюЦену = Истина;
	Объект.ПоказыватьОтклонениеЦен = Истина;
	
	Если КэшЗначений.ФОИспользоватьЕдиницыИзмерения Тогда
		
		Объект.ПоказыватьЕдиницыИзмерения = Истина;
		
	КонецЕсли;
	
	Объект.ПоказыватьЗависимыеЦены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Если КэшЗначений.ФОИспользоватьХарактеристики
		И Элементы.ПоказыватьХарактеристики.Доступность Тогда
		
		Объект.ПоказыватьХарактеристики = Ложь;
		
	КонецЕсли;
	
	Объект.ПоказыватьДействующуюЦену = Ложь;
	Объект.ПоказыватьОтклонениеЦен = Ложь;
	
	Если КэшЗначений.ФОИспользоватьЕдиницыИзмерения Тогда
		
		Объект.ПоказыватьЕдиницыИзмерения = Ложь;
		
	КонецЕсли;
	
	Объект.ПоказыватьЗависимыеЦены = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзФайла(Команда)
	
	НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.УстановкаЦенНоменклатуры.ТабличнаяЧасть.Запасы";
	
	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяТабличнойЧасти", "УстановкаЦенНоменклатуры.Запасы");
	НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном","ЗагрузкаИзФайлаЗапасы");
	НастройкиЗагрузкиДанных.Вставить("Заголовок", НСтр("ru = 'Загрузка запасов из файла'"));
	НастройкиЗагрузкиДанных.Вставить("СодержаниеВидимо", Истина);	
	НастройкиЗагрузкиДанных.Вставить("ЗагрузкаТабличнойЧастиУслуги", Ложь);
	Если КэшЗначений.ВыбранныеВидыЦен.Количество()> 1 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Выбрано больше 1 вида цен.'"));
		Возврат;
	КонецЕсли;
	
	Для каждого ВыбранныйВидЦен Из КэшЗначений.ВыбранныеВидыЦен Цикл		
		НастройкиЗагрузкиДанных.Вставить("ВидЦен", ВыбранныйВидЦен.Ключ);
		Прервать; 	
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоДаннымиИБ(Команда)
	
	ОбновитьЦеныПоДаннымИБНаСервере();	

КонецПроцедуры 

&НаСервере
Процедура ОбновитьЦеныПоДаннымИБНаСервере()
	
	ПараметрыВидовЦенСКД = ПолучитьСтруктуруПараметровВидовЦенСКД();  
	
	МассивВидовЦен = Новый Массив;
	Для каждого ЭлементСтруктуры Из ПараметрыВидовЦенСКД Цикл     		
		МассивВидовЦен.Добавить(ЭлементСтруктуры.Значение.ВидЦен);	
	КонецЦикла;
	
	ТаблицаНоменклатуры = СформироватьТаблицуЗапасовПоТабличнымЧастям(Объект, МассивВидовЦен);
	АдресХранилища = Документы.УстановкаЦенНоменклатуры.РазобратьМассивНоменклатурыИХарактеристикПоДокументу(ТаблицаНоменклатуры, Объект.УстанавливатьХарактеристикамБезЦен, Объект.ПоказыватьНедействительныеХарактеристики);
	
	СтруктураЦен = ПолучитьИзВременногоХранилища(АдресХранилища);
	ТаблицаРасчетныхЦенНоменклатуры = Документы.УстановкаЦенНоменклатуры.ПолучитьТаблицуРасчетныхЦенСКД(СтруктураЦен.ТаблицаНоменклатуры, ПараметрыВидовЦенСКД);
	ТаблицаРасчетныхЦенХарактеристик = Документы.УстановкаЦенНоменклатуры.ПолучитьТаблицуРасчетныхЦенСКД(СтруктураЦен.ТаблицаХарактеристик, ПараметрыВидовЦенСКД);
	
	СтруктураТабличныхЧастей = Новый Структура;
	СтруктураТабличныхЧастей.Вставить("ТЧНоменклатура", Новый Структура("ТаблицаРасчетныхЦен, МассивПолей", ТаблицаРасчетныхЦенНоменклатуры, Новый Массив));
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("Характеристика");	
	СтруктураТабличныхЧастей.Вставить("ТЧХарактеристики", Новый Структура("ТаблицаРасчетныхЦен, МассивПолей", ТаблицаРасчетныхЦенХарактеристик, МассивПолей));
	
	Для каждого ТабличнаяЧасть Из СтруктураТабличныхЧастей Цикл
		
		ИмяТабличнойЧасти = ТабличнаяЧасть.Ключ;
		ТаблицаРасчетныхЦен = ТабличнаяЧасть.Значение.ТаблицаРасчетныхЦен;
		
		Для каждого СтрокаЦен Из СтруктураЦен.ТаблицаЦен Цикл
			
			ПолеЕдиницаИзмерения 	= ИмяТабличнойЧасти + СтрокаЦен.ВидЦены.ИдентификаторФормул + "_ЕдИзм";
			ПолеЦенаНовая			= ИмяТабличнойЧасти + СтрокаЦен.ВидЦены.ИдентификаторФормул + "_ЦенаНовая";
			ПолеЦенаСтарая			= ИмяТабличнойЧасти + СтрокаЦен.ВидЦены.ИдентификаторФормул + "_ЦенаДо";
			ПолеДельта				= ИмяТабличнойЧасти + СтрокаЦен.ВидЦены.ИдентификаторФормул + "_Дельта";
			
			ЗначениеЦены = 0;
			
			ОтборНаФорме = Новый Структура;
			ОтборНаФорме.Вставить("Номенклатура", СтрокаЦен.Номенклатура);
			ОтборНаФорме.Вставить(ПолеЕдиницаИзмерения, СтрокаЦен.ЕдиницаИзмерения);
			
			Для каждого ДополнительноеПоле Из ТабличнаяЧасть.Значение.МассивПолей Цикл				
				ОтборНаФорме.Вставить(ДополнительноеПоле, СтрокаЦен[ДополнительноеПоле]); 			
			КонецЦикла;
			
			Строки = ЭтотОбъект[ИмяТабличнойЧасти].НайтиСтроки(ОтборНаФорме);		
			Для каждого СтрокаТабличнойЧасти Из Строки Цикл
				
				ОтборРасчетныхЦен = Новый Структура;
				ОтборРасчетныхЦен.Вставить("Номенклатура", СтрокаЦен.Номенклатура);
				ОтборРасчетныхЦен.Вставить("ВидЦены", СтрокаЦен.ВидЦены);
				
				Для каждого ДополнительноеПоле Из ТабличнаяЧасть.Значение.МассивПолей Цикл				
					ОтборРасчетныхЦен.Вставить(ДополнительноеПоле, СтрокаЦен[ДополнительноеПоле]); 			
				КонецЦикла;
				
				СтрокиРасчетныхЦен = ТаблицаРасчетныхЦен.НайтиСтроки(ОтборРасчетныхЦен);
				Если СтрокиРасчетныхЦен.Количество() > 0 Тогда 				
					ЗначениеЦены = СтрокиРасчетныхЦен[0].Цена;					
				КонецЕсли;
				
				СтрокаТабличнойЧасти[ПолеЦенаНовая] 	= ЗначениеЦены; 
				СтрокаТабличнойЧасти[ПолеДельта] 		= ЗначениеЦены - СтрокаТабличнойЧасти[ПолеЦенаСтарая];
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	                	
КонецПроцедуры

#Область ПодборНоменклатуры

&НаКлиенте
Процедура ЗаполнитьПоВидуЦен(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КэшЗначений", 			КэшЗначений);
	ПараметрыОткрытия.Вставить("ХарактеристикиВидны",	Объект.ПоказыватьХарактеристики);
	ПараметрыОткрытия.Вставить("ПоказыватьНедействительныеХарактеристики",	Объект.ПоказыватьНедействительныеХарактеристики);
	
	ОбработкаОписание = Новый ОписаниеОповещения("ПослеДобавленияНоменклатуры", ЭтотОбъект);
	ОткрытьФорму("Документ.УстановкаЦенНоменклатуры.Форма.ФормаЗаполненияПоВидамЦен", ПараметрыОткрытия, ЭтотОбъект, , , , ОбработкаОписание);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПриходнымНакладным(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ХарактеристикиВидны", Объект.ПоказыватьХарактеристики);
	ПараметрыОткрытия.Вставить("ПоказыватьНедействительныеХарактеристики",	Объект.ПоказыватьНедействительныеХарактеристики);
	
	ОбработкаОписание = Новый ОписаниеОповещения("ПослеДобавленияНоменклатуры", ЭтотОбъект);
	ОткрытьФорму("Документ.УстановкаЦенНоменклатуры.Форма.ФормаЗаполненияПоПриходнымНакладным", ПараметрыОткрытия, ЭтотОбъект, , , , ОбработкаОписание);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКатегорииНоменклатуры(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ХарактеристикиВидны",	Объект.ПоказыватьХарактеристики);
	ПараметрыОткрытия.Вставить("ПоказыватьНедействительныеХарактеристики",	Объект.ПоказыватьНедействительныеХарактеристики);
	
	ОбработкаОписание = Новый ОписаниеОповещения("ПослеДобавленияНоменклатуры", ЭтотОбъект);
	ОткрытьФорму("Документ.УстановкаЦенНоменклатуры.Форма.ФормаЗаполненияПоКатегорииНоменклатуры", ПараметрыОткрытия, ЭтотОбъект, , , , ОбработкаОписание);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЦеновойГруппе(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ХарактеристикиВидны",	Объект.ПоказыватьХарактеристики);
	ПараметрыОткрытия.Вставить("ПоказыватьНедействительныеХарактеристики",	Объект.ПоказыватьНедействительныеХарактеристики);
	
	ОбработкаОписание = Новый ОписаниеОповещения("ПослеДобавленияНоменклатуры", ЭтотОбъект);
	ОткрытьФорму("Документ.УстановкаЦенНоменклатуры.Форма.ФормаЗаполненияПоЦеновымГруппам", ПараметрыОткрытия, ЭтотОбъект, , , , ОбработкаОписание);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЭлементамНоменклатуры(Команда)
	
	ОткрытьФормуДобавленияПроизвольнойНоменклатуры("Элементы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГруппамНоменклатуры(Команда)
	
	ОткрытьФормуДобавленияПроизвольнойНоменклатуры("Группы");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеДобавленияНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.ВыборПроизведен Тогда
		
		ОбработатьРезультатЗаполненияНаСервере(Результат, ДополнительныеПараметры);
		ПроверитьНеобходимостьПодключенияОбработчикаОжидания();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеЦен

&НаКлиенте
Процедура ИзменитьНаСумму(Команда)
	
	ВидРасчета = "Сумма";
	ИзменитьКолонку(ВидРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНаПроцент(Команда)
	
	ВидРасчета = "Процент";
	ИзменитьКолонку(ВидРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОкругление(Команда)
	
	ВидРасчета = "Округление";
	ИзменитьКолонку(ВидРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОчистить(Команда)
	
	ВидРасчета = "Очистить";
	ИзменитьКолонку(ВидРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФормула(Команда)
	
	ВидРасчета = "Формула";
	ИзменитьКолонку(ВидРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИзменение(Команда)
	
	ВосстановитьТабличныеЧастиИзКопий();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНовыеЦеныПоУказаннымУсловиям(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.ВыборПроизведен Тогда
		
		ИзменитьКолонкиНовыхЦенНаСервере(Результат);
		
		Если Результат.ВариантИзменения = "Формула" Тогда
			
			ПроверитьНеобходимостьПодключенияОбработчикаОжидания();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
#КонецОбласти

#Область СлужебныеПроцедурыФункции

&НаСервере
Процедура УстановитьКэшЗначений()
	
	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("ФОУчетЦенКонтрагентов",				ПолучитьФункциональнуюОпцию("УчетЦенКонтрагентов"));
	КэшЗначений.Вставить("ФОИспользоватьХарактеристики",		ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики"));
	КэшЗначений.Вставить("ФОИспользоватьЕдиницыИзмерения",		ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения"));
	КэшЗначений.Вставить("Статический",							Перечисления.ТипыВидовЦен.Статический);
	КэшЗначений.Вставить("ДинамическийПроцент",					Перечисления.ТипыВидовЦен.ДинамическийПроцент);
	КэшЗначений.Вставить("ДинамическийФормула",					Перечисления.ТипыВидовЦен.ДинамическийФормула);
	КэшЗначений.Вставить("ПроизвольныйЗапрос",					Перечисления.ТипыВидовЦен.ПроизвольныйЗапрос);
	КэшЗначений.Вставить("ВыбранныеВидыЦен",					Новый Соответствие);
	КэшЗначений.Вставить("ОтключенныеВидыЦен",					Новый Массив); // Используется, если на вернулись на первую страницу и отключили вид цен
	КэшЗначений.Вставить("ИсключенныеВидыЦен",					Новый Массив); // Используется перед записью в регистр
	КэшЗначений.Вставить("МаксимальныйКлючСвязи",				0);
	КэшЗначений.Вставить("КоличествоСтрокПриемлемогоБыстродействия", 500);
	КэшЗначений.Вставить("АвторизированныйПользователь",		Пользователи.АвторизованныйПользователь());
	КэшЗначений.Вставить("ДоИзмененияНоменклатура",				ПоместитьВоВременноеХранилище(Новый ТаблицаЗначений, УникальныйИдентификатор));
	КэшЗначений.Вставить("ДоИзмененияХарактеристики",			ПоместитьВоВременноеХранилище(Новый ТаблицаЗначений, УникальныйИдентификатор));
	КэшЗначений.Вставить("ЦветТемноЗеленый",					ЦветаСтиля.ЦветТемноЗеленый);
	КэшЗначений.Вставить("ЦветСветлоЗеленый",					ЦветаСтиля.ЦветСветлоЗеленый);
	КэшЗначений.Вставить("ВводНаОснованииПриходныхНакладных",	Ложь);	
	КэшЗначений.Вставить("ЗаполнениеНаОснованииПриходныхНакладныхВыполнено", Неопределено);
	КэшЗначений.Вставить("ОткрыватьПрайсЛистОрганизацииКакСписок", УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОткрыватьПрайсЛистОрганизацииКакСписок"));
	КэшЗначений.Вставить("ПараметрыДлительнойОперации",			Новый Структура);
	КэшЗначений.ПараметрыДлительнойОперации.Вставить("РезультатДлОперации",	Неопределено);
	КэшЗначений.ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания","");
	КэшЗначений.ПараметрыДлительнойОперации.Вставить("ТекстСообщенияДлительнойОперации", "");
	КэшЗначений.ПараметрыДлительнойОперации.Вставить("ЗаданиеЗапущено",		Ложь);
	
	Если Параметры.Свойство("ВводНаОснованииПриходныхНакладных") Тогда
		
		КэшЗначений.ВводНаОснованииПриходныхНакладных = Истина;
		КэшЗначений.ЗаполнениеНаОснованииПриходныхНакладныхВыполнено = Ложь;
		КэшЗначений.Вставить("МассивПриходныхНакладных", Параметры.МассивПриходныхНакладных);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДокументОснование()
	
	СписокДокументОснование.Добавить("Документ.ПриходнаяНакладная.ФормаВыбора", НСтр("ru = 'Приходная накладная'"));

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоОперандов(МассивВидовЦен)
	Перем ВключаяЦеныНоменклатуры, ВключаяЦеныКонтрагентов;
	
	ДеревоРезультата = Новый ДеревоЗначений;
	
	Параметры.Свойство("ЦеныНоменклатуры", ВключаяЦеныНоменклатуры);
	Если ВключаяЦеныНоменклатуры = Неопределено Тогда
		
		ВключаяЦеныНоменклатуры = Истина;
		
	КонецЕсли;
	
	Если КэшЗначений.ФОУчетЦенКонтрагентов Тогда
		
		Параметры.Свойство("ЦеныКонтрагентов", ВключаяЦеныКонтрагентов);
		
	КонецЕсли;
	
	Если ВключаяЦеныКонтрагентов = Неопределено Тогда
		
		ВключаяЦеныКонтрагентов = Ложь;
		
	КонецЕсли;      
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДеревоРезультата", ДеревоРезультата);
	СтруктураПараметров.Вставить("МассивВидовЦен", МассивВидовЦен);
	СтруктураПараметров.Вставить("ВключаяЦеныНоменклатуры", ВключаяЦеныНоменклатуры);
	СтруктураПараметров.Вставить("ВключаяЦеныКонтрагентов", ВключаяЦеныКонтрагентов);
	СтруктураПараметров.Вставить("ВидыЦенВыбраныПриЗаполнении", КэшЗначений.ВидыЦенВыбраныПриЗаполнении);
	СтруктураПараметров.Вставить("УникальныйИдентификаторФормы", ЭтотОбъект.УникальныйИдентификатор);
	
	Документы.УстановкаЦенНоменклатуры.ПолучитьДеревоВидовЦен(СтруктураПараметров);
	
	ЗначениеВРеквизитФормы(СтруктураПараметров.ДеревоРезультата, "ВидыЦен");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшЗначенийВидамиЦен(КэшЗначений)
	
	ВыбранныеРаннееВидыЦен = КэшЗначений.ВыбранныеВидыЦен;
	КэшЗначений.ВыбранныеВидыЦен = Новый Соответствие;
	
	СтрокиГруппВидовЦен = ВидыЦен.ПолучитьЭлементы();
	Для каждого ГруппаВидовЦен Из СтрокиГруппВидовЦен Цикл
		
		СтрокиБазовыхВидовЦен = ГруппаВидовЦен.ПолучитьЭлементы();
		Индекс = СтрокиБазовыхВидовЦен.Количество() - 1;
		Пока Индекс >= 0 Цикл	
			СтрокаБазовогоВидаЦен = СтрокиБазовыхВидовЦен[Индекс];
			Индекс = Индекс - 1;
			Если СтрокаБазовогоВидаЦен.Использование Тогда
				
				ТекущиеВидыЦен.Добавить(СтрокаБазовогоВидаЦен.ВидЦен, СтрокаБазовогоВидаЦен.Представление, Истина);
				
				ПодчиненныеВидыЦен		= Новый Массив;
				СтрокиРасчетныхВидовЦен = СтрокаБазовогоВидаЦен.ПолучитьЭлементы();
				Для каждого СтрокаВидаЦен Из СтрокиРасчетныхВидовЦен Цикл
					
					ПодчиненныеВидыЦен.Добавить(СтрокаВидаЦен.ВидЦен);
					
				КонецЦикла;
				
				КэшЗначений.ВыбранныеВидыЦен.Вставить(СтрокаБазовогоВидаЦен.ВидЦен, ПодчиненныеВидыЦен);
				
				Найдена = КэшЗначений.ОтключенныеВидыЦен.Найти(СтрокаБазовогоВидаЦен.ВидЦен);
				Если Найдена <> Неопределено Тогда
					
					КэшЗначений.ОтключенныеВидыЦен.Удалить(Найдена);
					
				КонецЕсли;				
				
			Иначе				
				
				ПодчиненныеВидыЦен = Новый Массив;
				ЗаполнитьПодчиненныеВидыЦен(СтрокаБазовогоВидаЦен, ПодчиненныеВидыЦен);
				
				Если ПодчиненныеВидыЦен.Количество() > 0 Тогда
					ТекущиеВидыЦен.Добавить(СтрокаБазовогоВидаЦен.ВидЦен, СтрокаБазовогоВидаЦен.Представление, Истина);
					КэшЗначений.ВыбранныеВидыЦен.Вставить(СтрокаБазовогоВидаЦен.ВидЦен, ПодчиненныеВидыЦен);
				КонецЕсли;
				
				Если ВыбранныеРаннееВидыЦен.Получить(СтрокаБазовогоВидаЦен.ВидЦен) <> Неопределено 
					И ПодчиненныеВидыЦен.Количество() = 0 Тогда
					
					КэшЗначений.ОтключенныеВидыЦен.Добавить(СтрокаБазовогоВидаЦен.ВидЦен);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодчиненныеВидыЦен(СтрокаВидаЦенРодитель, МассивПодчиненныхЦен)					
	
	СтрокиРасчетныхВидовЦен = СтрокаВидаЦенРодитель.ПолучитьЭлементы();
	Если СтрокиРасчетныхВидовЦен.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаВидаЦен Из СтрокиРасчетныхВидовЦен Цикл					
		
		Если СтрокаВидаЦен.Использование Тогда
			МассивПодчиненныхЦен.Добавить(СтрокаВидаЦен.ВидЦен);
		КонецЕсли;
		ЗаполнитьПодчиненныеВидыЦен(СтрокаВидаЦен, МассивПодчиненныхЦен);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНоменклатурыИХарактеристикПоДокументу()
	
	ТЧНоменклатура.Очистить();
	ТЧХарактеристики.Очистить();
	Запасы = Объект.Запасы.Выгрузить();
	АдресВременногоХранилища = Документы.УстановкаЦенНоменклатуры.РазобратьМассивНоменклатурыИХарактеристикПоДокументу(Запасы, Объект.ПоказыватьХарактеристики, Объект.ПоказыватьНедействительныеХарактеристики);
	
	ДополнительныеПараметры = Новый Структура;	
	ДополнительныеПараметры.Вставить("ПоДокументу", Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("ВыборПроизведен", Истина);
	Результат.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
	
	ОбработатьРезультатЗаполненияНаСервере(Результат, ДополнительныеПараметры);
	 	
КонецПроцедуры

&НаКлиенте
Функция ВидыЦенВыбраны()
	
	Возврат (КэшЗначений.ВыбранныеВидыЦен.Количество() <> 0);
	
КонецФункции

&НаСервере
Процедура ОбработатьРезультатЗаполненияНаСервере(Результат, ДополнительныеПараметры)
		
	Если ЗначениеЗаполнено(Результат.АдресВременногоХранилища) Тогда		
				
		СтруктураТаблицДанных = ПолучитьИзВременногоХранилища(Результат.АдресВременногоХранилища);
		Если ЗначениеЗаполнено(СтруктураТаблицДанных) Тогда
			
			Если ДополнительныеПараметры <> Неопределено Тогда
				ПоДокументу = ?(ДополнительныеПараметры.Свойство("ПоДокументу") = Ложь, Ложь, ДополнительныеПараметры.ПоДокументу);
			Иначе
				ПоДокументу = Ложь;
			КонецЕсли;			
			
			ДобавитьНоменклатуру(СтруктураТаблицДанных, ПоДокументу);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличныеЧастиНаСервере()
	
	ТЧНоменклатура.Очистить();
	ТЧХарактеристики.Очистить();
	Объект.Запасы.Очистить();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДобавленияПроизвольнойНоменклатуры(СпособЗаполнения)

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Истина);
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	
	Если СпособЗаполнения = "Группы" Тогда
		
		ИмяФормыВыбораНоменклатуры = "Справочник.Номенклатура.ФормаВыбораГруппы";
		
	ИначеЕсли СпособЗаполнения = "Элементы" Тогда
		
		ИмяФормыВыбораНоменклатуры = "Справочник.Номенклатура.ФормаВыбора";
		
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыВыбораНоменклатуры, ПараметрыОткрытия, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьСтрокиХарактеристикПоКлючуСвязи(КлючСвязи, ТЧХарактеристики)
	
	НайденныеСтрокиХарактеристики = ТЧХарактеристики.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
	Для каждого СтрокаХарактеристики Из НайденныеСтрокиХарактеристики Цикл
		
		ТЧХарактеристики.Удалить(СтрокаХарактеристики);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СообщитьОНаборах(МассивНоменклатуры)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНаборы")
		ИЛИ ТипЗнч(МассивНоменклатуры) <> Тип("Массив") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НазваниеСвойства = Метаданные.Перечисления.СпособыРасчетаЦеныНабора.ЗначенияПеречисления.СкладыватьИзЦенКомплектующих.Синоним;
	
	Для каждого ЭлементМассива Из МассивНоменклатуры Цикл
		
		Если НЕ ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ЭлементМассива.ЭтоНабор = Истина
			И ЭлементМассива.СпособРасчетаЦеныНабора = Перечисления.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих Тогда
			
			ТекстСообщения = НСтр("ru ='Нельзя устанавливать цены для наборов с установленным свойством ""%1"".
				|Выбор номенклатуры [%2] проигнорирован.'");
			
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ТекстСообщения, НазваниеСвойства, ЭлементМассива));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДубли()
	
	ТаблицаНоменклатуры = РеквизитФормыВЗначение("ТЧНоменклатура", Тип("ТаблицаЗначений"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ТаблицаНоменклатуры.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ &ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|; //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	|ВЫБРАТЬ ТаблицаНоменклатуры.Номенклатура
	|СГРУППИРОВАТЬ ПО ТаблицаНоменклатуры.Номенклатура ИМЕЮЩИЕ Количество(*) > 1";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			
			НайденныеСтрокиНоменклатуры = ТЧНоменклатура.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
			НайденныеСтрокиНоменклатуры.Удалить(0); // Первую запись оставляем
			Для каждого СтрокаНоменклатуры Из НайденныеСтрокиНоменклатуры Цикл
				
				Если Объект.ПоказыватьХарактеристики Тогда
					
					УдалитьСтрокиХарактеристикПоКлючуСвязи(СтрокаНоменклатуры.КлючСвязи, ТЧХарактеристики);
					
				КонецЕсли;
				
				ТЧНоменклатура.Удалить(СтрокаНоменклатуры);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбранноеОснование, Параметры) Экспорт
	
	Если ВыбранноеОснование = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДокументОснование = ВыбранноеОснование;
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбранноеОснование);
	Модифицированность = Истина;
	
	ЗаполнитьПоОснованиюНачало();	
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало()

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения, 
		НСтр("ru = 'Заполнить запасы по выбранному основанию?'"),
		РежимДиалогаВопрос.ДаНет, 0);

КонецПроцедуры
	
&НаСервере
Процедура ЗаполнитьПоДокументу(ДокументОснование)
	
	ТЧНоменклатура.Очистить();
	ТЧХарактеристики.Очистить();
	Объект.Запасы.Очистить();
	Документ = РеквизитФормыВЗначение("Объект");
	ДанныеЗаполнения = ДокументОснование;
	Документ.Заполнить(ДанныеЗаполнения);
	ЗначениеВРеквизитФормы(Документ, "Объект");
		
	Если Объект.Запасы.Количество()>0 Тогда		
		
		ЗаполнитьЗапасыВидамиЦен();                                     
		
		Запасы = Объект.Запасы.Выгрузить();
		ЦенообразованиеСервер.ИзменитьЦенуВТаблицеПоПорогамСрабатывания(Запасы, КэшЗначений.ВыбранныеВидыЦен, Объект.Дата);
		Объект.Запасы.Загрузить(Запасы);
		
		ИзменитьСоставРеквизитовИЭлементовТабличнойЧасти("ТЧНоменклатура");
		ИзменитьСоставРеквизитовИЭлементовТабличнойЧасти("ТЧХарактеристики");
		ЗаполнитьТаблицуНоменклатурыИХарактеристикПоДокументу();
		КэшЗначений.ОтключенныеВидыЦен.Очистить();
	
	КонецЕсли;
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗапасыВидамиЦен()
	
	ТаблицаЗапасы = Объект.Запасы.Выгрузить();
	Объект.Запасы.Очистить();
	Для каждого СтрокаЗапас Из ТаблицаЗапасы Цикл
		
		Для каждого ВидЦены Из КэшЗначений.ВыбранныеВидыЦен Цикл
			
			НоваяЗапись = Объект.Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаЗапас);
			НоваяЗапись.ВидЦены = ВидЦены.Ключ;		
	
		КонецЦикла;
	
	КонецЦикла; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоДокументу(Объект.ДокументОснование);
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаТовары;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьТабличнуюЧастьПоОчередиНаДатуДокумента()
	
	Если Объект.РасчетИзВидаЦен Тогда			
		ВидЦеныРасчетная = ПолучитьПервуюРасчетнуюЦенуИзВыбранных();
		Если ВидЦеныРасчетная <> Неопределено Тогда 
			Объект.Запасы.Очистить();
			Документы.УстановкаЦенНоменклатуры.ЗаполнитьЗапасыПоОчередиРасчета(Объект.Запасы, ВидЦеныРасчетная, Объект.ПоказыватьХарактеристики, Объект.Дата);
			ЗаполнитьТаблицуНоменклатурыИХарактеристикПоДокументу();
		КонецЕсли;		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПервуюРасчетнуюЦенуИзВыбранных()
	
	Для каждого БазовыйВидЦены Из КэшЗначений.ВыбранныеВидыЦен Цикл		
		Для каждого РасчетныйВидЦены Из БазовыйВидЦены.Значение Цикл			
			Возврат РасчетныйВидЦены;
		КонецЦикла;	                                               	
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ПоместитьЦеныВТабличнуюЧасть(ТекущийОбъект)
	
	ТекущийОбъект.Запасы.Очистить();
	МассивСтрокЦен = Новый Массив;
	СтрокиГруппВидовЦен = ВидыЦен.ПолучитьЭлементы();
	Для каждого ГруппаВидовЦен Из СтрокиГруппВидовЦен Цикл		
		СтрокиБазовыхВидовЦен = ГруппаВидовЦен.ПолучитьЭлементы();
		Для каждого СтрокаБазовогоВидаЦен Из СтрокиБазовыхВидовЦен Цикл			
			Если СтрокаБазовогоВидаЦен.Использование Тогда             				
				МассивСтрокЦен.Добавить(СтрокаБазовогоВидаЦен.ВидЦен);                      			
			КонецЕсли;
			СтрокиЗависимыхВидовЦен = СтрокаБазовогоВидаЦен.ПолучитьЭлементы();
			Для каждого СтрокаЗависимыхВидовЦен Из СтрокиЗависимыхВидовЦен Цикл
				Если СтрокаЗависимыхВидовЦен.Использование Тогда
					МассивСтрокЦен.Добавить(СтрокаЗависимыхВидовЦен.ВидЦен);
				КонецЕсли;				
			КонецЦикла;
		КонецЦикла;		
	КонецЦикла;
	
	ТекущийОбъект.Запасы.Загрузить(СформироватьТаблицуЗапасовПоТабличнымЧастям(ТекущийОбъект, МассивСтрокЦен));	
   	
КонецПроцедуры

&НаСервере
Процедура ПоместитьСтрокуЦенВТабличнуюЧасть(ТабличнаяЧасть, МассивСтрокЦен, СтрокаНоменклатуры, СтрокиХарактеристик)
	
	ЕстьХарактеристики = СтрокиХарактеристик.Количество()>0
		И ЗначениеЗаполнено(СтрокиХарактеристик[0].Характеристика);
	
	Для Каждого ВидЦены Из МассивСтрокЦен Цикл		
		Если ЕстьХарактеристики Тогда
			Для каждого СтрокаХарактеристики Из СтрокиХарактеристик Цикл
				
				НоваяСтрока = ТабличнаяЧасть.Добавить();
				НоваяСтрока.Номенклатура = СтрокаНоменклатуры.Номенклатура;
				НоваяСтрока.Характеристика = СтрокаХарактеристики.Характеристика;
				НоваяСтрока.ВидЦены = ВидЦены;
				Если СтрокаНоменклатуры.Свойство("ТЧХарактеристики"+ВидЦены.ИдентификаторФормул+"_ЕдИзм") Тогда
					НоваяСтрока.ЕдиницаИзмерения = СтрокаХарактеристики["ТЧХарактеристики"+ВидЦены.ИдентификаторФормул+"_ЕдИзм"];
				Иначе
					НоваяСтрока.ЕдиницаИзмерения = СтрокаХарактеристики.ЕдиницаИзмеренияШаблон;
				КонецЕсли;				
				Если ВидЦены.ТипВидаЦен = Перечисления.ТипыВидовЦен.Статический
					ИЛИ ВидЦены.ТипВидаЦен = Перечисления.ТипыВидовЦен.ПроизвольныйЗапрос Тогда
					НоваяСтрока.Цена = СтрокаХарактеристики["ТЧХарактеристики"+ВидЦены.ИдентификаторФормул+"_ЦенаНовая"];
					НоваяСтрока.ЦенаСтарая = СтрокаХарактеристики["ТЧХарактеристики"+ВидЦены.ИдентификаторФормул+"_ЦенаДо"]; 
				Иначе
					НоваяСтрока.Цена = СтрокаНоменклатуры[ВидЦены.ИдентификаторФормул + "_ЦенаДо"];
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
			
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.Номенклатура = СтрокаНоменклатуры.Номенклатура;
		НоваяСтрока.ВидЦены = ВидЦены;
		Если СтрокаНоменклатуры.Свойство("ТЧНоменклатура"+ВидЦены.ИдентификаторФормул+"_ЕдИзм") Тогда
			НоваяСтрока.ЕдиницаИзмерения = СтрокаНоменклатуры["ТЧНоменклатура"+ВидЦены.ИдентификаторФормул+"_ЕдИзм"];
		Иначе
			НоваяСтрока.ЕдиницаИзмерения = СтрокаНоменклатуры.ЕдиницаИзмеренияШаблон;
		КонецЕсли;  
		
		Если ЗначениеЗаполнено(ВидЦены.ИдентификаторФормул) Тогда
			
			Если ВидЦены.ТипВидаЦен = Перечисления.ТипыВидовЦен.Статический 
				ИЛИ ВидЦены.ТипВидаЦен = Перечисления.ТипыВидовЦен.ПроизвольныйЗапрос Тогда  
				
				НоваяСтрока.Цена = СтрокаНоменклатуры["ТЧНоменклатура"+ВидЦены.ИдентификаторФормул+"_ЦенаНовая"];	
				НоваяСтрока.ЦенаСтарая = СтрокаНоменклатуры["ТЧНоменклатура"+ВидЦены.ИдентификаторФормул+"_ЦенаДо"];   
				
			Иначе 
				
				НоваяСтрока.Цена = СтрокаНоменклатуры[ВидЦены.ИдентификаторФормул + "_ЦенаНовая"];
				НоваяСтрока.ЦенаСтарая = СтрокаНоменклатуры[ВидЦены.ИдентификаторФормул + "_ЦенаДо"];  
				
			КонецЕсли;
			
		КонецЕсли;
					
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОписаниеПараметровКомпоновщикаНастроек(АдресХранилищаНастройкиКомпоновщика, СтруктураСтроки)
	
	Возврат ЦенообразованиеСервер.ПолучитьОписаниеПараметровКомпоновщикаНастроек(СтруктураСтроки, АдресХранилищаНастройкиКомпоновщика);
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруПараметровВидовЦенСКД()
	
	ВидЦеныПроизвольныйЗапросСтрокой = НСтр("ru = 'Произвольный запрос'");
	Структура = Новый Структура;
	Для каждого СтрокаТипВидовЦен Из ВидыЦен.ПолучитьЭлементы() Цикл
		
		Для каждого СтрокаВидЦены Из СтрокаТипВидовЦен.ПолучитьЭлементы() Цикл
			
			Если СтрокаВидЦены.Вид = ВидЦеныПроизвольныйЗапросСтрокой
				И СтрокаВидЦены.Использование Тогда
				
				Структура.Вставить(СтрокаВидЦены.ВидЦен.ИдентификаторФормул, 
					Новый Структура("АдресСхемыКомпоновкиДанных, АдресНастроекСхемыКомпоновкиДанных, ВидЦен", 
							СтрокаВидЦены.АдресСхемыКомпоновкиДанных, СтрокаВидЦены.АдресНастроекСхемыКомпоновкиДанных, СтрокаВидЦены.ВидЦен));
				
			КонецЕсли;			
		
		КонецЦикла;  	
	
	КонецЦикла;
	Возврат Структура;
	
КонецФункции  

&НаСервере
Функция СформироватьТаблицуЗапасовПоТабличнымЧастям(ТекущийОбъект, МассивСтрокЦен)

	ТабличнаяЧасть = ТекущийОбъект.Запасы.Выгрузить();
	ТабличнаяЧасть.Очистить();
	
	Для Каждого ТекЭлементНоменклатура Из ТЧНоменклатура Цикл
		
		ТекХарактеристики = ТЧХарактеристики.НайтиСтроки(Новый Структура("КлючСвязи", ТекЭлементНоменклатура.КлючСвязи));
		ПоместитьСтрокуЦенВТабличнуюЧасть(ТабличнаяЧасть, МассивСтрокЦен, ТекЭлементНоменклатура, ТекХарактеристики);
		
	КонецЦикла;
	
	Возврат ТабличнаяЧасть;	
	
КонецФункции

&НаКлиенте
Процедура РедактироватьНастройки(Команда)
	
	ТекущиеДанные = Элементы.ВидыЦен.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Редактировать настройки невозможно. Не выбран вид цены'"));
		Возврат; 
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.АдресСхемыКомпоновкиДанных) Тогда
		
		Возврат;
		
	КонецЕсли;
		
	Если НЕ ТекущиеДанные.Использование Тогда
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Редактировать настройки схемы компоновки можно только для выбранных видов цен'"));
		Возврат;
		
	КонецЕсли;
	
	// Открыть редактор настроек схемы компоновки данных
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = НСтр("ru = 'Настройте параметры для вида цены ""%1""'");
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = СтрЗаменить(ЗаголовокФормыНастройкиСхемыКомпоновкиДанных, "%1", ТекущиеДанные.Представление);
	
	АдресНастроекСхемыКомпоновкиДанных = ТекущиеДанные.АдресНастроекСхемыКомпоновкиДанных;

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПомещатьНастройкиВСхемуКомпоновкиДанных",   Ложь);
	ПараметрыФормы.Вставить("РедактироватьСхемуКомпоновкиДанных",        Ложь);
	ПараметрыФормы.Вставить("ЗагрузитьСхемуИзФайла",			         Ложь);
	ПараметрыФормы.Вставить("НастраиватьУсловноеОформление",             Ложь);
	ПараметрыФормы.Вставить("НастраиватьВыбор",                          Ложь);
	ПараметрыФормы.Вставить("НастраиватьПорядок",                        Ложь);
	ПараметрыФормы.Вставить("НастраиватьПараметры",                      Истина);
	ПараметрыФормы.Вставить("НастраиватьОтбор",                          Истина);
	ПараметрыФормы.Вставить("АдресСхемыКомпоновкиДанных",                ТекущиеДанные.АдресСхемыКомпоновкиДанных);
	ПараметрыФормы.Вставить("АдресНастроекКомпоновкиДанных",             АдресНастроекСхемыКомпоновкиДанных);
	ПараметрыФормы.Вставить("УникальныйИдентификатор",                   УникальныйИдентификатор);
	ПараметрыФормы.Вставить("Заголовок",                                 ЗаголовокФормыНастройкиСхемыКомпоновкиДанных);
	
	ТекущиеДанные = Новый Структура("ТекущиеДанные", ТекущиеДанные);
	Оповещение = Новый ОписаниеОповещения("РедактироватьНастройкиЗавершение", ЭтотОбъект, ТекущиеДанные);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных", ПараметрыФормы,,,,, Оповещение, РежимОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
      
    АдресХранилищаНастройкиКомпоновщика = Результат;
    
    Если АдресХранилищаНастройкиКомпоновщика <> Неопределено Тогда
        
        ВыбранныеЦеныИзменены = Истина;
		ТекущиеДанные.АдресНастроекСхемыКомпоновкиДанных = АдресХранилищаНастройкиКомпоновщика;                                      
		СтруктураСтроки = Новый Структура("ТребуетсяЗаполнениеПараметра", ТекущиеДанные.ТребуетсяЗаполнениеПараметра);
		ТекущиеДанные.Параметры = ПолучитьОписаниеПараметровКомпоновщикаНастроек(АдресХранилищаНастройкиКомпоновщика, СтруктураСтроки);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураСтроки);
        Модифицированность = Истина;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНастройкиСКД(Команда)
	
	ТекущиеДанные = Элементы.ВидыЦен.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		РедактироватьНастройки(Неопределено);
					
	КонецЕсли;     
	
КонецПроцедуры

#Область ПересчетКолонок

&НаСервере
Процедура ИзменитьКолонкиНовыхЦенНаСервере(Результат)
	
	ТаблицаФормыНоменклатуры = РеквизитФормыВЗначение("ТЧНоменклатура", Тип("ТаблицаЗначений"));
	ТаблицаФормыХарактеристик = РеквизитФормыВЗначение("ТЧХарактеристики", Тип("ТаблицаЗначений"));
	
	СоздатьКопиюТекущихДанных(ТаблицаФормыНоменклатуры.Скопировать(), КэшЗначений.ДоИзмененияНоменклатура);
	СоздатьКопиюТекущихДанных(ТаблицаФормыХарактеристик.Скопировать(), КэшЗначений.ДоИзмененияХарактеристики);
	
	Результат.Вставить("ВыделенныеСтрокиНоменклатуры", Элементы.ТЧНоменклатура.ВыделенныеСтроки);
	
	Если Результат.ВариантИзменения = "Сумма"
		ИЛИ Результат.ВариантИзменения = "Процент"
		ИЛИ Результат.ВариантИзменения = "Округление"
		ИЛИ Результат.ВариантИзменения = "Очистить"
		Тогда
		
		ПересчетПоПростымПравилам(Результат);
		
	ИначеЕсли Результат.ВариантИзменения = "Формула" Тогда
		
		ЗаполнитьПоФормуле(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// :::Простая арифметика
&НаКлиенте
Процедура ИзменитьКолонку(ВидРасчета)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КэшЗначений",	КэшЗначений);
	ПараметрыОткрытия.Вставить("ВидРасчета",	ВидРасчета);
	
	Если ТипЗнч(ЭтаФорма.ТекущийЭлемент) = Тип("ТаблицаФормы")
		И ТипЗнч(Элементы[ЭтаФорма.ТекущийЭлемент.Имя].ТекущийЭлемент) = Тип("ПолеФормы") Тогда
		
		ПараметрыОткрытия.Вставить("ТекущаяКолонка", 	Элементы[ЭтаФорма.ТекущийЭлемент.Имя].ТекущийЭлемент.Имя);
		
	КонецЕсли;
	
	ОбработкаОписание = Новый ОписаниеОповещения("РассчитатьНовыеЦеныПоУказаннымУсловиям", ЭтотОбъект);
	ОткрытьФорму("Документ.УстановкаЦенНоменклатуры.Форма.ФормаИзмененияЦен", ПараметрыОткрытия, ЭтотОбъект, , , , ОбработкаОписание);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьЗаполняемыеВидыЦен(Результат, ВидыЦенКПересчету)
	
	ВидыЦенКПересчету = Новый Соответствие;
	
	// По текущей колонке(0), По всем колонкам(1)
	Если Результат.ЗаполнятьПоТекущемуВидуЦен = 1 Тогда
		
		ВидыЦенКПересчету = КэшЗначений.ВыбранныеВидыЦен;
		
	Иначе
		                           
		Для каждого ЭлементСоответствия Из КэшЗначений.ВыбранныеВидыЦен Цикл
			
			Если ЭлементСоответствия.Ключ.ИдентификаторФормул = Результат.ИдентификаторТекущегоВидаЦен Тогда
				
				ВидыЦенКПересчету.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЦеныПоПравилу(Строка, Результат, ДополнительныеПараметры)
	
	Для каждого ЭлементСоответствия Из ДополнительныеПараметры.ВидыЦенКПересчету Цикл
		
		ВидЦен					= ЭлементСоответствия.Ключ; 
		
		Если НЕ ЗначениеЗаполнено(ВидЦен.ИдентификаторФормул) Тогда
			Продолжить;
		КонецЕсли;
		
		Идентификатор 			= ДополнительныеПараметры.ИмяТабличнойЧасти + ВидЦен.ИдентификаторФормул;
		
		ИмяКолонкиЦенаДо		= Идентификатор + "_ЦенаДо";
		ИмяКолонкиДельта		= Идентификатор + "_Дельта";
		ИмяКолонкиЕдИзм			= Идентификатор + "_ЕдИзм";
		ИмяКолонкиЦенаНовая		= Идентификатор + "_ЦенаНовая";
		ИмяКолонкиЦенуИзменили	= Идентификатор + "_ЦенуИзменили";
		
		ИндивидуальныйРасчетДельта = Ложь;
		Если Результат.ВариантИзменения = "Сумма" Тогда
			
			Строка[ИмяКолонкиЦенаНовая] 	= Строка[ИмяКолонкиЦенаНовая] + Результат.Сумма;
			Строка[ИмяКолонкиЦенуИзменили]	= Истина;
			
		ИначеЕсли Результат.ВариантИзменения = "Процент" Тогда
			
			Строка[ИмяКолонкиЦенаНовая]		= Строка[ИмяКолонкиЦенаНовая] * (1 + Результат.Процент / 100);
			Строка[ИмяКолонкиЦенуИзменили]	= Истина;
			
		ИначеЕсли Результат.ВариантИзменения = "Округление" Тогда
			
			ОкруглитьЦену(Строка[ИмяКолонкиЦенаНовая], ВидЦен, Результат);
			Строка[ИмяКолонкиЦенуИзменили] = Истина;
			
		ИначеЕсли Результат.ВариантИзменения = "Очистить" Тогда
			
			Строка[ИмяКолонкиЦенаНовая]		= 0;
			Строка[ИмяКолонкиДельта]		= 0;
			Строка[ИмяКолонкиЦенуИзменили]	= Истина;
			ИндивидуальныйРасчетДельта		= Истина;
			
		КонецЕсли;
		
		ОкруглитьЦену(Строка[ИмяКолонкиЦенаНовая], ВидЦен, Результат);
		
		Если НЕ ИндивидуальныйРасчетДельта Тогда
			
			Строка[ИмяКолонкиДельта] = Строка[ИмяКолонкиЦенаНовая] - Строка[ИмяКолонкиЦенаДо];
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка[ИмяКолонкиЕдИзм]) Тогда
			
			Строка[ИмяКолонкиЕдИзм] = Строка["Номенклатура"].ЕдиницаИзмерения;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОкруглитьЦенуПоПравилу(Число, СтруктураОкругления)
		
	ОкруглятьВБольшуюСторону = СтруктураОкругления.ОкруглятьВБольшуюСторону;
	ПорядокОкругления = СтруктураОкругления.ПорядокОкругления;
	ПсихологическоеОкругление = СтруктураОкругления.ПсихологическоеОкругление;
		     			
	Порядок = Число(Строка(ПорядокОкругления)); 
	
	// вычислим количество интервалов, входящих в число
	КоличествоИнтервал	= Число / Порядок;
	
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);
	
	Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
		
		// Числа поделились нацело. Округлять не нужно.
		
	Иначе
		
		Если ОкруглятьВБольшуюСторону Тогда
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.4
			Число = Порядок * (КоличествоЦелыхИнтервалов + 1);
			
		Иначе
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.35,
			// а 0.376 до 0.4
			Число = Порядок * Окр(КоличествоИнтервал, 0, РежимОкругления.Окр15как20);
			
		КонецЕсли; 
		
	КонецЕсли;
	
	
	Число = ЦенообразованиеКлиентСервер.ПрименитьПсихологическоеОкругление(Число, ПсихологическоеОкругление);
		
КонецПроцедуры

&НаСервере
Процедура ПересчетПоПростымПравилам(Результат)
	Перем ВидыЦенКПересчету;
	
	ОпределитьЗаполняемыеВидыЦен(Результат, ВидыЦенКПересчету);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", "ТЧНоменклатура");
	ДополнительныеПараметры.Вставить("ВидыЦенКПересчету", ВидыЦенКПересчету);
	
	НаВсеСтроки = ?(Результат.ОбластьПрименения = 0, Истина, Ложь);
	Если НаВсеСтроки Тогда
		
		Для каждого СтрокаНоменклатуры Из ТЧНоменклатура Цикл			
			ИзменитьЦеныПоПравилу(СтрокаНоменклатуры, Результат, ДополнительныеПараметры);			
		КонецЦикла;
		
	Иначе
		
		Для каждого ИндексСтроки Из Результат.ВыделенныеСтрокиНоменклатуры Цикл			
			СтрокаНоменклатуры = ТЧНоменклатура.НайтиПоИдентификатору(ИндексСтроки);			
			ИзменитьЦеныПоПравилу(СтрокаНоменклатуры, Результат, ДополнительныеПараметры);		
		КонецЦикла;
		
	КонецЕсли;
		
	ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", "ТЧХарактеристики");
	Если НаВсеСтроки Тогда
	
		Для каждого СтрокаХарактеристик Из ТЧХарактеристики Цикл		
			ИзменитьЦеныПоПравилу(СтрокаХарактеристик, Результат, ДополнительныеПараметры);		
		КонецЦикла;
		
	Иначе
		
		Для каждого ИндексСтроки Из Результат.ВыделенныеСтрокиНоменклатуры Цикл			
			
			СтрокаНоменклатуры = ТЧНоменклатура.НайтиПоИдентификатору(ИндексСтроки);			
			СтрокиХарактеристик = ТЧХарактеристики.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаНоменклатуры.КлючСвязи));
			Для каждого СтрокаХарактеристик Из СтрокиХарактеристик Цикл
				ИзменитьЦеныПоПравилу(СтрокаХарактеристик, Результат, ДополнительныеПараметры);				
			КонецЦикла;
			
		КонецЦикла;		
		
	КонецЕсли;
	
КонецПроцедуры

// :::Формула
&НаСервере
Процедура ЗагрузитьРезультатВТаблицы(КоллекцииДанныхФормы)
	
	ЗначениеВРеквизитФормы(КоллекцииДанныхФормы.ТаблицаФормыНоменклатуры, "ТЧНоменклатура");
	ЗначениеВРеквизитФормы(КоллекцииДанныхФормы.ТаблицаФормыХарактеристик, "ТЧХарактеристики");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоФормуле(Результат)
	
	ТаблицаФормыНоменклатуры = РеквизитФормыВЗначение("ТЧНоменклатура", Тип("ТаблицаЗначений"));
	ТаблицаФормыХарактеристик = РеквизитФормыВЗначение("ТЧХарактеристики", Тип("ТаблицаЗначений"));
	
	ТаблицаФормыНоменклатуры.Колонки.Добавить("Рассчитывать", Новый ОписаниеТипов("Булево"));
	ТаблицаФормыХарактеристик.Колонки.Добавить("Рассчитывать", Новый ОписаниеТипов("Булево"));
	ТаблицаФормыНоменклатуры.ЗаполнитьЗначения(Истина, "Рассчитывать");
	ТаблицаФормыХарактеристик.ЗаполнитьЗначения(Истина, "Рассчитывать");
	
	ЗаданаОбластьПрименения = ?(Результат.ОбластьПрименения = 0, Ложь, Истина);
	Если ЗаданаОбластьПрименения Тогда
		
		ТаблицаФормыНоменклатуры.ЗаполнитьЗначения(Ложь, "Рассчитывать");
		ТаблицаФормыХарактеристик.ЗаполнитьЗначения(Ложь, "Рассчитывать");
		
		Для каждого Индекс Из Результат.ВыделенныеСтрокиНоменклатуры Цикл
			
			ВыделеннаяСтрока = ТЧНоменклатура.НайтиПоИдентификатору(Индекс);
			СтрокаТаблицыФормы = ТаблицаФормыНоменклатуры.Найти(ВыделеннаяСтрока.КлючСвязи, "КлючСвязи");
			СтрокаТаблицыФормы.Рассчитывать = Истина;
			
			НайденныеСтроки = ТаблицаФормыХарактеристик.НайтиСтроки(Новый Структура("КлючСвязи", ВыделеннаяСтрока.КлючСвязи));
			Для каждого СтрокаТаблицыФормы Из НайденныеСтроки Цикл
			
				СтрокаТаблицыФормы.Рассчитывать = Истина;
			
			КонецЦикла;
		
		КонецЦикла;                                                           
		
	КонецЕсли;	
	
	КоллекцииДанныхФормы = Новый Структура("ТаблицаФормыНоменклатуры, ТаблицаФормыХарактеристик", ТаблицаФормыНоменклатуры, ТаблицаФормыХарактеристик);
	
	ПараметрыФормированияЦен = Новый Структура;
	ПараметрыФормированияЦен.Вставить("Формула", Результат.Формула);
	ПараметрыФормированияЦен.Вставить("ВидыЦенКПересчету", Неопределено);
	ПараметрыФормированияЦен.Вставить("ПоказыватьХарактеристики", Объект.ПоказыватьХарактеристики);
	ПараметрыФормированияЦен.Вставить("УстанавливатьХарактеристикамБезЦен", Объект.УстанавливатьХарактеристикамБезЦен);
	ПараметрыФормированияЦен.Вставить("КоллекцииДанныхФормы", КоллекцииДанныхФормы);
	
	ОпределитьЗаполняемыеВидыЦен(Результат, ПараметрыФормированияЦен.ВидыЦенКПересчету);
	
	Если ТЧНоменклатура.Количество() > КэшЗначений.КоличествоСтрокПриемлемогоБыстродействия Тогда
		
		РассчитатьДанныеКоллекцииВДлительнойОперации(ПараметрыФормированияЦен);
		
	Иначе
		
		Документы.УстановкаЦенНоменклатуры.РассчитатьНовыеЦеныПоФормуле(ПараметрыФормированияЦен);		
		ЗагрузитьРезультатВТаблицы(ПараметрыФормированияЦен.КоллекцииДанныхФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОкруглитьЦену(Число, ВидЦен, Результат)
	
	СтруктураОкругления = Новый Структура;
	ПсихологическоеОкругление = 0;
	Если Результат.Свойство("ВариантИзменения")
		И Результат.ВариантИзменения = "Округление" Тогда
		
		// параметры округления получены из формы в режиме округления
		Если Результат.Свойство("ПсихологическоеОкругление") 
			И ЗначениеЗаполнено(Результат.ПсихологическоеОкругление) Тогда
					
			ПсихологическоеОкругление = Результат.ПсихологическоеОкругление;
			
		КонецЕсли;  
		
		СтруктураОкругления.Вставить("ПорядокОкругления", Результат.ОкруглениеПорядок);
		СтруктураОкругления.Вставить("ОкруглятьВБольшуюСторону", Результат.ОкруглениеВБольшуюСторону);		
		СтруктураОкругления.Вставить("ПсихологическоеОкругление", ПсихологическоеОкругление);
		
	Иначе
		
		// параметры округления надо получить из объекта		
		КоличествоСтрок = ВидЦен.ПравилаОкругленияЦены.Количество();
		
		Если КоличествоСтрок = 0 Тогда
			
			// распределения по диапазонам нет, возьмем из объекта
			ПорядокОкругления = ВидЦен.ПорядокОкругления;
			Если НЕ ЗначениеЗаполнено(ПорядокОкругления) Тогда								
				ПорядокОкругления	= Перечисления.ПорядкиОкругления.Окр0_01; 				
			КонецЕсли; 			
						
			СтруктураОкругления.Вставить("ПорядокОкругления", ПорядокОкругления);
			СтруктураОкругления.Вставить("ОкруглятьВБольшуюСторону", ВидЦен.ОкруглятьВБольшуюСторону);
			СтруктураОкругления.Вставить("ПсихологическоеОкругление", ВидЦен.ПсихологическоеОкругление);			
			
		Иначе
			
			// есть распределение по диапазонам
			Для Индекс = 1 По КоличествоСтрок Цикл
				
				ПравилаОкругления = ВидЦен.ПравилаОкругленияЦены[КоличествоСтрок - Индекс];
				
				Если ПравилаОкругления.НижняяГраницаДиапазонаЦен <= Число Тогда
									
					СтруктураОкругления = Новый Структура;
					ПорядокОкругления = ПравилаОкругления.ТочностьОкругления;
					Если НЕ ЗначениеЗаполнено(ПорядокОкругления) Тогда								
						ПорядокОкругления	= Перечисления.ПорядкиОкругления.Окр0_01; 				
					КонецЕсли;
					СтруктураОкругления.Вставить("ПорядокОкругления", ПорядокОкругления);					
					СтруктураОкругления.Вставить("ОкруглятьВБольшуюСторону", ВидЦен.ОкруглятьВБольшуюСторону);
					СтруктураОкругления.Вставить("ПсихологическоеОкругление", ПравилаОкругления.ПсихологическоеОкругление);
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;  		
		
	КонецЕсли;	
	
	ОкруглитьЦенуПоПравилу(Число, СтруктураОкругления);	
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура УстановитьДоступностьЭлементовСтраницыВидыЦен()
	
	ЕстьДанные = (ТЧНоменклатура.Количество() > 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказыватьХарактеристики", "Доступность", НЕ ЕстьДанные);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияПредупреждение", "Видимость", ЕстьДанные);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПоказыватьХарактеристикиДополнительно", "Доступность", НЕ ЕстьДанные);		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВидыЦен", "ТолькоПросмотр", ЕстьДанные);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказыватьДействующуюЦену", "Видимость", НЕ Объект.РасчетИзВидаЦен);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказыватьЗависимыеЦены", "Видимость", НЕ Объект.РасчетИзВидаЦен);

КонецПроцедуры

#Область ДлительныеОперации

#Область ОбщееДлительныеОперации
&НаКлиенте
Процедура ПроверитьНеобходимостьПодключенияОбработчикаОжидания()
	
	Если КэшЗначений.ПараметрыДлительнойОперации.РезультатДлОперации = Неопределено Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	Если КэшЗначений.ПараметрыДлительнойОперации.РезультатДлОперации.Статус <> "Выполняется" Тогда 
		
		ОбработатьРезультатВыполненияФоновогоЗадания(КэшЗначений.ПараметрыДлительнойОперации.РезультатДлОперации, Неопределено);
		Возврат;
		
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатВыполненияФоновогоЗадания", ЭтотОбъект, Неопределено);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения		= КэшЗначений.ПараметрыДлительнойОперации.ТекстСообщенияДлительнойОперации;
	ПараметрыОжидания.ВыводитьОкноОжидания	= Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(КэшЗначений.ПараметрыДлительнойОперации.РезультатДлОперации, Обработчик, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатВыполненияФоновогоЗадания(РезультатДлОперации, ДополнительныеПараметры) Экспорт
	
	Если РезультатДлОперации = Неопределено Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	КэшЗначений.ПараметрыДлительнойОперации.РезультатДлОперации = РезультатДлОперации;
	КэшЗначений.ПараметрыДлительнойОперации.ЗаданиеЗапущено		= Ложь;
	
	Если КэшЗначений.ПараметрыДлительнойОперации.РезультатДлОперации.Статус = "Выполнено" Тогда 
		
		ЗагрузитьРезультатДлительнойОперации();
		
	ИначеЕсли КэшЗначений.ПараметрыДлительнойОперации.РезультатДлОперации.Статус = "Ошибка" Тогда
		
		ПоказатьОповещениеПользователя(КэшЗначений.ПараметрыДлительнойОперации.РезультатДлОперации.КраткоеПредставлениеОшибки, , НСтр("ru ='Изменение цен номенклатуры'"));
		
	КонецЕсли;
	
	КэшЗначений.ПараметрыДлительнойОперации.РезультатДлОперации = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатДлительнойОперации()
	
	СтруктураКоллекцийДанныхФормы = ПолучитьИзВременногоХранилища(КэшЗначений.ПараметрыДлительнойОперации.РезультатДлОперации.АдресРезультата);
		
	РезультатЗагрузки = Неопределено;
	Если КэшЗначений.ПараметрыДлительнойОперации.Свойство("РезультатЗагрузки", РезультатЗагрузки) Тогда
		Если РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" 
			И СтруктураКоллекцийДанныхФормы <> Неопределено Тогда
			
			ЗагрузитьДанныеВТабличноеПолеЗапасы(СтруктураКоллекцийДанныхФормы.ТаблицаСопоставленияДанных);				
			
		КонецЕсли;
		
	Иначе
		
		ЗначениеВРеквизитФормы(СтруктураКоллекцийДанныхФормы.ТаблицаФормыНоменклатуры, "ТЧНоменклатура");
		ЗначениеВРеквизитФормы(СтруктураКоллекцийДанныхФормы.ТаблицаФормыХарактеристик, "ТЧХарактеристики");

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеЦенВДлительнойОперацииПоФормуле

&НаСервере
Процедура РассчитатьДанныеКоллекцииВДлительнойОперации(ПараметрыПроцедуры)
	
	Если ЗначениеЗаполнено(КэшЗначений.ПараметрыДлительнойОперации.ИдентификаторЗадания) Тогда
		
		ДлительныеОперации.ОтменитьВыполнениеЗадания(КэшЗначений.ПараметрыДлительнойОперации.ИдентификаторЗадания);
		КэшЗначений.ПараметрыДлительнойОперации.ИдентификаторЗадания = Неопределено;
		
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Изменение колонок с новыми ценами по формуле'");
	ПараметрыВыполнения.ЗапуститьВФоне				= Истина;
	
	ИмяМетода = "Документы.УстановкаЦенНоменклатуры.РассчитатьНовыеЦеныПоФормулеДлОперация";
	РезультатДлОперации = ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыПроцедуры, ПараметрыВыполнения);
	
	КэшЗначений.ПараметрыДлительнойОперации.РезультатДлОперации = РезультатДлОперации;
	КэшЗначений.ПараметрыДлительнойОперации.ИдентификаторЗадания= РезультатДлОперации.ИдентификаторЗадания;
	КэшЗначений.ПараметрыДлительнойОперации.ТекстСообщенияДлительнойОперации = НСтр("ru ='Расчет цен по формуле.'");
	КэшЗначений.ПараметрыДлительнойОперации.ЗаданиеЗапущено		= Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаботаСДанными

&НаСервере
Процедура ДобавитьНоменклатуру(СтруктураТаблицДанных, ПоДокументу = Ложь)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТабличнаяЧастьОтменитьИзменение", "Доступность", Ложь);
	
	ПараметрыКопирования = Новый Структура;
	ПараметрыКопирования.Вставить("ИменаКолонокКопирования", Неопределено);
	ПараметрыКопирования.Вставить("ИменаКолонокИсключений", Неопределено);
	ПараметрыКопирования.Вставить("ВыбранныеВидыЦен", КэшЗначений.ВыбранныеВидыЦен);
	ПараметрыКопирования.Вставить("ЗаполнитьТекущиеЦены", Истина);
	ПараметрыКопирования.Вставить("ИмяТабличнойЧасти", "");
	ПараметрыКопирования.Вставить("МаксимальныйКлючСвязи", КэшЗначений.МаксимальныйКлючСвязи);
	ПараметрыКопирования.Вставить("МаксимальныйКлючСвязиПослеДобавления", КэшЗначений.МаксимальныйКлючСвязи);
	ПараметрыКопирования.Вставить("ПоДокументу", ПоДокументу);
	ПараметрыКопирования.Вставить("ТаблицаЦен", ?(СтруктураТаблицДанных.Свойство("ТаблицаЦен"), СтруктураТаблицДанных.ТаблицаЦен, Неопределено));
	ПараметрыКопирования.Вставить("Период", Объект.Дата);
	ПараметрыКопирования.Вставить("ПараметрыВидовЦенСКД", ПолучитьСтруктуруПараметровВидовЦенСКД());
	
	Если СтруктураТаблицДанных.ТаблицаНоменклатуры.Количество() > 0 Тогда
		
		// выполнить последовательно
		Если СтруктураТаблицДанных.ТаблицаНоменклатуры.Количество() > 0 Тогда
			
			ПараметрыКопирования.ИмяТабличнойЧасти = "ТЧНоменклатура";
			ТаблицаФормыНоменклатуры = РеквизитФормыВЗначение("ТЧНоменклатура", Тип("ТаблицаЗначений"));
			
			СоздатьКопиюТекущихДанных(ТаблицаФормыНоменклатуры.Скопировать(), КэшЗначений.ДоИзмененияНоменклатура);
			Документы.УстановкаЦенНоменклатуры.КопироватьДобавлениемСтрокТаблицЗначений(СтруктураТаблицДанных.ТаблицаНоменклатуры, ТаблицаФормыНоменклатуры, ПараметрыКопирования);
			ЗначениеВРеквизитФормы(ТаблицаФормыНоменклатуры, "ТЧНоменклатура");
			
		КонецЕсли;
		
		Если СтруктураТаблицДанных.ТаблицаХарактеристик.Количество() > 0 Тогда
			
			ПараметрыКопирования.ИмяТабличнойЧасти = "ТЧХарактеристики";
			ТаблицаФормыХарактеристик = РеквизитФормыВЗначение("ТЧХарактеристики", Тип("ТаблицаЗначений"));
			
			СоздатьКопиюТекущихДанных(ТаблицаФормыХарактеристик.Скопировать(), КэшЗначений.ДоИзмененияХарактеристики);
			Документы.УстановкаЦенНоменклатуры.КопироватьДобавлениемСтрокТаблицЗначений(СтруктураТаблицДанных.ТаблицаХарактеристик, ТаблицаФормыХарактеристик, ПараметрыКопирования);
			ЗначениеВРеквизитФормы(ТаблицаФормыХарактеристик, "ТЧХарактеристики");
			
		КонецЕсли;
		
		КэшЗначений.МаксимальныйКлючСвязи = ПараметрыКопирования.МаксимальныйКлючСвязиПослеДобавления;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПроизвольнуюНоменклатуру(МассивНоменклатуры)
	
	СообщитьОНаборах(МассивНоменклатуры);
	
	АдресВременногоХранилища = Документы.УстановкаЦенНоменклатуры.РазобратьМассивНоменклатуры(МассивНоменклатуры, Объект.ПоказыватьХарактеристики, Объект.ПоказыватьНедействительныеХарактеристики);
	
	ДополнительныеПараметры = Новый Структура;	
	
	Результат = Новый Структура;
	Результат.Вставить("ВыборПроизведен", Истина);
	Результат.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
	
	ОбработатьРезультатЗаполненияНаСервере(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьНовуюЦенуВХарактеристиках(ИдентификаторВидаЦен, ЦенаНовая, КлючСвязи)
	
	СтрокиХарактеристик = ТЧХарактеристики.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
	Идентификатор = "ТЧХарактеристики" + ИдентификаторВидаЦен;
	
	Для каждого ПодчиненнаяСтрока Из СтрокиХарактеристик Цикл
		
		Если ПодчиненнаяСтрока[Идентификатор + "_ЦенаНовая"] = 0
			ИЛИ ЦенаДоИзменения = ПодчиненнаяСтрока[Идентификатор + "_ЦенаНовая"] Тогда
			
			ПодчиненнаяСтрока[Идентификатор + "_ЦенаНовая"] = ЦенаНовая;
			ПодчиненнаяСтрока[Идентификатор + "_Дельта"] = ПодчиненнаяСтрока[Идентификатор + "_ЦенаНовая"] - ПодчиненнаяСтрока[Идентификатор + "_ЦенаДо"];
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьИзменениеНовойЦены(ДанныеТекущейСтроки, Идентификатор)
	
	Если ДанныеТекущейСтроки.Свойство(Идентификатор + "_Дельта")
		И ДанныеТекущейСтроки.Свойство(Идентификатор + "_ЦенаНовая")
		И ДанныеТекущейСтроки.Свойство(Идентификатор + "_ЦенаДо") Тогда
		
		ДанныеТекущейСтроки[Идентификатор + "_Дельта"] = ДанныеТекущейСтроки[Идентификатор + "_ЦенаНовая"] - ДанныеТекущейСтроки[Идентификатор + "_ЦенаДо"];
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьЕдиницуИзмеренийВХарактеристиках(ИдентификаторВидаЦен, ЕдиницаИзмерения, КлючСвязи)
	
	СтрокиХарактеристик = ТЧХарактеристики.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
	Идентификатор = "ТЧХарактеристики" + ИдентификаторВидаЦен;
	
	Для каждого ПодчиненнаяСтрока Из СтрокиХарактеристик Цикл
		
		Если ПодчиненнаяСтрока[Идентификатор + "_ЦенаНовая"] = 0
			ИЛИ ПодчиненнаяСтрока[Идентификатор + "_ЦенаДо"] = 0
			ИЛИ ЦенаДоИзменения = ПодчиненнаяСтрока[Идентификатор + "_ЦенаНовая"] Тогда
			
			ПодчиненнаяСтрока[Идентификатор + "_ЕдИзм"] = ЕдиницаИзмерения;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСРеквизитамиИЭлементами

&НаСервере
Процедура ИзменитьВидимостьЭлементовТабличнойЧасти(ИмяТабличнойЧасти)
	
	ЭлементыТЧ = Элементы[ИмяТабличнойЧасти].ПодчиненныеЭлементы;
	
	МассивПолейЗависимыхЦен = Новый Массив;
	МассивПолейЗависимыхЦен.Добавить("%1%2_ЦенаНовая");
	МассивПолейЗависимыхЦен.Добавить("%1%2_ЦенаДо");
	МассивПолейЗависимыхЦен.Добавить("%1%2_Дельта");
	
	ПараметрыВидимостиОсновные = Новый Соответствие;
	ПараметрыВидимостиОсновные.Вставить("ПоказыватьДействующуюЦену",	"%1_ЦенаДо");
	ПараметрыВидимостиОсновные.Вставить("ПоказыватьОтклонениеЦен",		"%1_Дельта");
	ПараметрыВидимостиОсновные.Вставить("ПоказыватьЕдиницыИзмерения",	"%1_ЕдИзм");
	ПараметрыВидимостиОсновные.Вставить("ПоказыватьНовуюЦену",			"%1_ЦенаНовая");
	ПараметрыВидимостиОсновные.Вставить("ПоказыватьЗависимыеЦены",		МассивПолейЗависимыхЦен);
	
	ПараметрыВидимостиЗависимые = Новый Соответствие;
	ПараметрыВидимостиЗависимые.Вставить("ПоказыватьОтклонениеЦен",		"%1%2_Дельта");
	
	Для каждого ВыбранныйВидЦенСоответствие Из КэшЗначений.ВыбранныеВидыЦен Цикл
		
		ВыбранныйВидЦен		= ВыбранныйВидЦенСоответствие.Ключ;
		ПодчиненныеВидыЦен	= ВыбранныйВидЦенСоответствие.Значение;
		
		ОбщаяЧастьИмен = ИмяТабличнойЧасти + ВыбранныйВидЦен.ИдентификаторФормул;
		Если ЭлементыТЧ.Найти(ОбщаяЧастьИмен) <> Неопределено Тогда
			
			Для каждого ПараметрВидимости Из ПараметрыВидимостиОсновные Цикл
				
				Если ПараметрВидимости.Ключ <> "ПоказыватьЗависимыеЦены" Тогда
					
					ИмяЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрВидимости.Значение, ОбщаяЧастьИмен);
					ЗначениеКлюча =  Объект[ПараметрВидимости.Ключ];                                                              
					
					Если ПараметрВидимости.Ключ = "ПоказыватьОтклонениеЦен"
						И Объект.РасчетИзВидаЦен Тогда
						
						ЗначениеКлюча = Ложь;		
						
					КонецЕсли;
					
					ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "Видимость", ЗначениеКлюча);
					
				Иначе
					
					Для каждого ЗависимаяЦена Из ПодчиненныеВидыЦен Цикл
						
						Для каждого ЭлементМассиваПолей Из ПараметрВидимости.Значение Цикл
							
							ИмяЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЭлементМассиваПолей, ОбщаяЧастьИмен, ЗависимаяЦена.ИдентификаторФормул);
							ЗначениеКлюча = Объект[ПараметрВидимости.Ключ];
							Если ЭлементМассиваПолей <> "%1%2_ЦенаНовая"
								И НЕ Объект.РасчетИзВидаЦен Тогда
								
								ЗначениеКлюча = Ложь;
								
							КонецЕсли; 						
							ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "Видимость", ЗначениеКлюча);
						
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла; 
			
			Для каждого ПараметрВидимости Из ПараметрыВидимостиЗависимые Цикл 
				
				Для каждого ЗависимаяЦена Из ПодчиненныеВидыЦен Цикл
					
					ИмяЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрВидимости.Значение, ОбщаяЧастьИмен, ЗависимаяЦена.ИдентификаторФормул);
					ЗначениеКлюча = Объект[ПараметрВидимости.Ключ];
					Если ЭлементМассиваПолей <> "%1%2_ЦенаНовая"
						И НЕ Объект.РасчетИзВидаЦен Тогда
						
						ЗначениеКлюча = Ложь;
						
					КонецЕсли; 
					ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "Видимость", ЗначениеКлюча);
					
				КонецЦикла;  
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция РеквизитДобавленРаннее(ИмяТабличнойЧасти, ПутьКРеквизитуИИмяЭлемента)
	
	МассивРеквизитов = ПолучитьРеквизиты(ИмяТабличнойЧасти);
	Для каждого РеквизитФормы Из МассивРеквизитов Цикл
		
		Если РеквизитФормы.Имя = ПутьКРеквизитуИИмяЭлемента Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ДобавитьРеквизитыИЭлементыТабличнойЧастиПоВидуЦен(ИмяТабличнойЧасти, ВыбранныйВидЦенСоответствие)
	
	ВыбранныйВидЦен		= ВыбранныйВидЦенСоответствие.Ключ;
	ПодчиненныеВидыЦен	= ВыбранныйВидЦенСоответствие.Значение;
	
	// ::: Создание реквизитов
	ПутьРеквизита		= ИмяТабличнойЧасти;
	ПрефиксРеквизитов	= ИмяТабличнойЧасти + ВыбранныйВидЦен.ИдентификаторФормул;
	ТипЧислоПлюс 		= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	ТипЧислоЛюбое 		= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой));
	ТипБулево			= Новый ОписаниеТипов("Булево");
	
	МассивТипов			= Новый	 Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ЕдиницыИзмерения"));
	МассивТипов.Добавить(Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	
	ТипЕдИзмерения		= Новый ОписаниеТипов(МассивТипов);
	
	РеквизитЦенаДо		= Новый РеквизитФормы(ПрефиксРеквизитов + "_ЦенаДо",		ТипЧислоПлюс,	ПутьРеквизита, НСтр("ru ='Цена до'"));
	РеквизитДельта		= Новый РеквизитФормы(ПрефиксРеквизитов + "_Дельта",		ТипЧислоЛюбое,	ПутьРеквизита, "Δ");
	РеквизитЦенаНовая	= Новый РеквизитФормы(ПрефиксРеквизитов + "_ЦенаНовая",		ТипЧислоПлюс,	ПутьРеквизита, НСтр("ru ='Цена новая'"));
	РеквизитЦенуИзменили= Новый РеквизитФормы(ПрефиксРеквизитов + "_ЦенуИзменили",	ТипБулево,		ПутьРеквизита, НСтр("ru ='_Служебный'"));
	РеквизитЕдИзмерения	= Новый РеквизитФормы(ПрефиксРеквизитов + "_ЕдИзм",			ТипЕдИзмерения,	ПутьРеквизита, НСтр("ru ='Ед. изм.'"));
	
	МассивРеквизитов 	= Новый Массив;
	МассивРеквизитов.Добавить(РеквизитЦенаДо);
	МассивРеквизитов.Добавить(РеквизитДельта);
	МассивРеквизитов.Добавить(РеквизитЦенаНовая);
	МассивРеквизитов.Добавить(РеквизитЦенуИзменили);
	МассивРеквизитов.Добавить(РеквизитЕдИзмерения);
	
	ЭтотОбъект.ИзменитьРеквизиты(МассивРеквизитов);
	
	// ::: Создание элементов формы
	ГруппаЦены					= Элементы.Добавить(ПрефиксРеквизитов, Тип("ГруппаФормы"), Элементы[ИмяТабличнойЧасти]);
	ГруппаЦены.Заголовок		= ВыбранныйВидЦен.Наименование;
	ГруппаЦены.Группировка		= ГруппировкаКолонок.Горизонтальная;
	ГруппаЦены.ОтображатьВШапке	= Истина;
	ГруппаЦены.ОтображатьЗаголовок = Истина;
	
	ЭлементЦенаДо 				= Элементы.Добавить(ПрефиксРеквизитов + "_ЦенаДо", Тип("ПолеФормы"), ГруппаЦены);
	ЭлементЦенаДо.Вид			= ВидПоляФормы.ПолеВвода;
	ЭлементЦенаДо.ПутьКДанным	= ПутьРеквизита + "." + ПрефиксРеквизитов + "_ЦенаДо";
	ЭлементЦенаДо.Ширина		= 12;
	ЭлементЦенаДо.Видимость		= Объект.ПоказыватьДействующуюЦену;
	ЭлементЦенаДо.ТолькоПросмотр= Истина;
	ЭлементЦенаДо.ЦветТекста	= ЦветаСтиля.НедоступныеДанныеЦвет;
	ЭлементЦенаДо.РастягиватьПоГоризонтали = Ложь;
	
	ЭлементДельта 				= Элементы.Добавить(ПрефиксРеквизитов + "_Дельта", Тип("ПолеФормы"), ГруппаЦены);
	ЭлементДельта.Вид			= ВидПоляФормы.ПолеВвода;
	ЭлементДельта.ПутьКДанным	= ПутьРеквизита + "." + ПрефиксРеквизитов + "_Дельта";
	ЭлементДельта.Ширина		= 12;
	ЭлементДельта.Видимость		= Объект.ПоказыватьОтклонениеЦен;
	ЭлементДельта.ТолькоПросмотр= Истина;
	ЭлементДельта.ЦветТекста	= ЦветаСтиля.НедоступныеДанныеЦвет;
	ЭлементДельта.РастягиватьПоГоризонтали = Ложь;
	
	ЭлементНовая 				= Элементы.Добавить(ПрефиксРеквизитов + "_ЦенаНовая", Тип("ПолеФормы"), ГруппаЦены);
	ЭлементНовая.Вид			= ВидПоляФормы.ПолеВвода;
	ЭлементНовая.ПутьКДанным	= ПутьРеквизита + "." + ПрефиксРеквизитов + "_ЦенаНовая";
	ЭлементНовая.Ширина			= 12;
	ЭлементНовая.Видимость		= Объект.ПоказыватьНовуюЦену;
	ЭлементНовая.УстановитьДействие("ПриИзменении", "Подключаемый_НоваяЦенаПриИзменении");
	ЭлементНовая.РастягиватьПоГоризонтали = Ложь;
	
	ЭлементИзменили 			= Элементы.Добавить(ПрефиксРеквизитов + "_ЦенуИзменили", Тип("ПолеФормы"), ГруппаЦены);
	ЭлементИзменили.Вид			= ВидПоляФормы.ПолеВвода;
	ЭлементИзменили.ПутьКДанным	= ПутьРеквизита + "." + ПрефиксРеквизитов + "_ЦенуИзменили";
	ЭлементИзменили.Видимость	= Ложь;
	
	ЭлементЕдИзм 				= Элементы.Добавить(ПрефиксРеквизитов + "_ЕдИзм", Тип("ПолеФормы"), ГруппаЦены);
	ЭлементЕдИзм.Вид			= ВидПоляФормы.ПолеВвода;
	ЭлементЕдИзм.ПутьКДанным	= ПутьРеквизита + "." + ПрефиксРеквизитов + "_ЕдИзм";
	ЭлементЕдИзм.Ширина			= 8;
	ЭлементЕдИзм.УстановитьДействие("ПриИзменении", "Подключаемый_ЕдиницаИзмеренияПриИзменении");
	ЭлементЕдИзм.РастягиватьПоГоризонтали = Ложь;
	ЭлементЕдИзм.Видимость		= Объект.ПоказыватьЕдиницыИзмерения;
	
	НовыйПараметр = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы." + ИмяТабличнойЧасти + ".ТекущиеДанные.Номенклатура", РежимИзмененияСвязанногоЗначения.Очищать);
	
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(НовыйПараметр);
	ЭлементЕдИзм.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	Если ПодчиненныеВидыЦен.Количество() > 0 Тогда
		
		Для каждого ЗависимаяЦена Из ПодчиненныеВидыЦен Цикл
			
			ПутьКРеквизитуИИмяЭлементаДо 		= ЗависимаяЦена.ИдентификаторФормул + "_ЦенаДо";
			ПутьКРеквизитуИИмяЭлементаДельта	= ЗависимаяЦена.ИдентификаторФормул + "_Дельта";
			ПутьКРеквизитуИИмяЭлементаНовая		= ЗависимаяЦена.ИдентификаторФормул + "_ЦенаНовая";
			МассивРеквизитов.Очистить();
			Если НЕ РеквизитДобавленРаннее(ИмяТабличнойЧасти, ПутьКРеквизитуИИмяЭлементаДо) Тогда
				
				РеквизитЦенаЗависимаяДо 	= Новый РеквизитФормы(ПутьКРеквизитуИИмяЭлементаДо, ТипЧислоПлюс, ПутьРеквизита, ЗависимаяЦена.Наименование + " до");
				МассивРеквизитов.Добавить(РеквизитЦенаЗависимаяДо);
				
			КонецЕсли;
			
			Если НЕ РеквизитДобавленРаннее(ИмяТабличнойЧасти, ПутьКРеквизитуИИмяЭлементаДельта) Тогда
				
				РеквизитЦенаЗависимаяДельта 	= Новый РеквизитФормы(ПутьКРеквизитуИИмяЭлементаДельта, ТипЧислоЛюбое, ПутьРеквизита, "Δ");
				МассивРеквизитов.Добавить(РеквизитЦенаЗависимаяДельта);
				
			КонецЕсли;
			
			Если НЕ РеквизитДобавленРаннее(ИмяТабличнойЧасти, ПутьКРеквизитуИИмяЭлементаНовая) Тогда
				
				РеквизитЦенаЗависимаяНовая 	= Новый РеквизитФормы(ПутьКРеквизитуИИмяЭлементаНовая, ТипЧислоПлюс, ПутьРеквизита, ЗависимаяЦена.Наименование + " новая");
				МассивРеквизитов.Добавить(РеквизитЦенаЗависимаяНовая);
				
			КонецЕсли;
			
			Если МассивРеквизитов.Количество() > 0 Тогда
				
				ЭтотОбъект.ИзменитьРеквизиты(МассивРеквизитов);
				
			КонецЕсли;
			
			// зависимая цена до
			ЭлементЗависимаяЦена 				= Элементы.Добавить(ПрефиксРеквизитов + ПутьКРеквизитуИИмяЭлементаДо, Тип("ПолеФормы"), ГруппаЦены);
			ЭлементЗависимаяЦена.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветРамки;
			ЭлементЗависимаяЦена.Вид			= ВидПоляФормы.ПолеВвода;
			ЭлементЗависимаяЦена.ПутьКДанным	= ПутьРеквизита + "." + ПутьКРеквизитуИИмяЭлементаДо;
			ЭлементЗависимаяЦена.Ширина			= 12;
			ЭлементЗависимаяЦена.ТолькоПросмотр	= Истина;
			ЭлементЗависимаяЦена.ЦветТекста		= ЦветаСтиля.НедоступныеДанныеЦвет;
			ЭлементЗависимаяЦена.ПропускатьПриВводе = Истина;
			ЭлементЗависимаяЦена.Видимость		= Объект.ПоказыватьЗависимыеЦены; 
			
			// зависимая цена дельта
			ЭлементЗависимаяЦена 				= Элементы.Добавить(ПрефиксРеквизитов + ПутьКРеквизитуИИмяЭлементаДельта, Тип("ПолеФормы"), ГруппаЦены);
			ЭлементЗависимаяЦена.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветРамки;
			ЭлементЗависимаяЦена.Вид			= ВидПоляФормы.ПолеВвода;
			ЭлементЗависимаяЦена.ПутьКДанным	= ПутьРеквизита + "." + ПутьКРеквизитуИИмяЭлементаДельта;
			ЭлементЗависимаяЦена.Ширина			= 12;
			ЭлементЗависимаяЦена.ТолькоПросмотр	= Истина;
			ЭлементЗависимаяЦена.ЦветТекста		= ЦветаСтиля.НедоступныеДанныеЦвет;
			ЭлементЗависимаяЦена.ПропускатьПриВводе = Истина;
			ЭлементЗависимаяЦена.Видимость		= Объект.ПоказыватьЗависимыеЦены;
			
			// зависимая цена новая
			ЭлементЗависимаяЦена 				= Элементы.Добавить(ПрефиксРеквизитов + ПутьКРеквизитуИИмяЭлементаНовая, Тип("ПолеФормы"), ГруппаЦены);
			ЭлементЗависимаяЦена.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветРамки;
			ЭлементЗависимаяЦена.Вид			= ВидПоляФормы.ПолеВвода;
			ЭлементЗависимаяЦена.ПутьКДанным	= ПутьРеквизита + "." + ПутьКРеквизитуИИмяЭлементаНовая;
			ЭлементЗависимаяЦена.Ширина			= 12;
			ЭлементЗависимаяЦена.ТолькоПросмотр	= Истина;
			ЭлементЗависимаяЦена.ЦветТекста		= ЦветаСтиля.НедоступныеДанныеЦвет;
			ЭлементЗависимаяЦена.ПропускатьПриВводе = Истина;
			ЭлементЗависимаяЦена.Видимость		= Объект.ПоказыватьЗависимыеЦены;

			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьВидЦенВТабличнойЧасти(ИмяТабличнойЧасти, ВыбранныйВидЦенСоответствие)
	
	ИмяГруппыЭлементов = ИмяТабличнойЧасти + ВыбранныйВидЦенСоответствие.Ключ.ИдентификаторФормул;
	
	ЭтоНовыйВидЦен = (Элементы.Найти(ИмяГруппыЭлементов) = Неопределено);
	Если ЭтоНовыйВидЦен Тогда
		
		ДобавитьРеквизитыИЭлементыТабличнойЧастиПоВидуЦен(ИмяТабличнойЧасти, ВыбранныйВидЦенСоответствие);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяГруппыЭлементов, "Видимость", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьИспользованиеВидовЦенВТабличнойЧасти(ИмяТабличнойЧасти, ОтключенныйВидЦен)
	
	ИмяГруппыЭлементов = ИмяТабличнойЧасти + ОтключенныйВидЦен.ИдентификаторФормул;
	Если Элементы.Найти(ИмяГруппыЭлементов) <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяГруппыЭлементов, "Видимость", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСоставРеквизитовИЭлементовТабличнойЧасти(ИмяТабличнойЧасти)
	
	Для каждого ВыбранныйВидЦенСоответствие Из КэшЗначений.ВыбранныеВидыЦен Цикл
		
		ИспользоватьВидЦенВТабличнойЧасти(ИмяТабличнойЧасти, ВыбранныйВидЦенСоответствие)
		
	КонецЦикла;
	
	Для каждого ОтключенныйВидЦен Из КэшЗначений.ОтключенныеВидыЦен Цикл
		
		ОтключитьИспользованиеВидовЦенВТабличнойЧасти(ИмяТабличнойЧасти, ОтключенныйВидЦен);
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементов()
	
	// Если показываем характеристики, следовательно, пользователь имеет возможность отредактировать цены для характеристик самостоятельно
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УстанавливатьХарактеристикамБезЦен", "Видимость", НЕ Объект.ПоказыватьХарактеристики);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПоказыватьХарактеристикиДополнительно", "Видимость", Объект.ПоказыватьХарактеристики);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКоманднаяПанельТовары", "Видимость", НЕ Объект.РасчетИзВидаЦен);


	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДокументОснованиеНадпись", "Видимость", НЕ Объект.РасчетИзВидаЦен);

	
	Если Объект.РасчетИзВидаЦен Тогда 		
		Для каждого ЭлементПервогоУровня Из ВидыЦен.ПолучитьЭлементы() Цикл    			
			Для каждого ЭлементВторогоУровня Из ЭлементПервогоУровня.ПолучитьЭлементы() Цикл				
				Для каждого Элемент Из ЭлементВторогоУровня.ПолучитьЭлементы() Цикл
					
					Если Элемент.Использование Тогда
						Элементы.ВидыЦен.Развернуть(ЭлементВторогоУровня.ПолучитьИдентификатор());
						Прервать;
					КонецЕсли;	
				
				КонецЦикла;  				
			КонецЦикла;   			
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьГруппыБазовыхЦен()
	
	Если Объект.РасчетИзВидаЦен Тогда
		Для каждого БазовыйВидЦен Из КэшЗначений.ВыбранныеВидыЦен Цикл   				
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧНоменклатура"+БазовыйВидЦен.Ключ.ИдентификаторФормул, "ОтображатьВШапке", Ложь);				
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧХарактеристики"+БазовыйВидЦен.Ключ.ИдентификаторФормул, "ОтображатьВШапке", Ложь);				
		КонецЦикла;
	КонецЕсли;		

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораДатДокументаИзОчередиРасчета(МассивВидовЦен)
	
	Если НЕ Объект.РасчетИзВидаЦен Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	РС.ПериодЗаписи КАК ПериодЗаписи
	                      |ИЗ
	                      |	РегистрСведений.ОчередьРасчетаЦен КАК РС
	                      |ГДЕ
	                      |	РС.ВидЦенРасчетный = &ВидЦенРасчетный
	                      |	И РС.ВидЦенРасчетный.КоличествоПопытокСлужебный < 2
	                      |	И НЕ РС.ВидЦенРасчетный.РассчитыватьАвтоматически
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	РС.ПериодЗаписи УБЫВ");
	
	Запрос.УстановитьПараметр("ВидЦенРасчетный", МассивВидовЦен[0]);
	
	Результат = Запрос.Выполнить();	
	Элементы.Дата.КнопкаВыпадающегоСписка = НЕ Результат.Пустой();
	Выборка = Результат.Выбрать();	
	ПериодЗаписи = Неопределено;
	Пока Выборка.Следующий() Цикл
		
		Элементы.Дата.СписокВыбора.Добавить(Выборка.ПериодЗаписи, Формат(Выборка.ПериодЗаписи, "ДЛФ=DD"));
		Если НЕ ЗначениеЗаполнено(ПериодЗаписи) Тогда			
			ПериодЗаписи = Выборка.ПериодЗаписи;     			
		КонецЕсли;
		
	КонецЦикла;
	Объект.Дата = ПериодЗаписи;
	
КонецПроцедуры

#КонецОбласти

#Область КопияДанныхДоИзменения

&НаСервере
Процедура ВосстановитьТабличнуюЧастьИзКопии(ИмяТабличнойЧасти, АдресВоВременномХранилище)
	
	ТаблицаДанных = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если ТаблицаДанных.Количество() > 0 Тогда
		
		ЗначениеВРеквизитФормы(ТаблицаДанных, ИмяТабличнойЧасти);
		
	Иначе
		
		ЭтотОбъект[ИмяТабличнойЧасти].Очистить();
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТабличнаяЧастьОтменитьИзменение", "Доступность", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьТабличныеЧастиИзКопий()
	
	ВосстановитьТабличнуюЧастьИзКопии("ТЧНоменклатура", КэшЗначений.ДоИзмененияНоменклатура);
	ВосстановитьТабличнуюЧастьИзКопии("ТЧХарактеристики", КэшЗначений.ДоИзмененияХарактеристики);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКопиюТекущихДанных(ТаблицаДанных, АдресВоВременномХранилище)
	
	ПоместитьВоВременноеХранилище(ТаблицаДанных, АдресВоВременномХранилище);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТабличнаяЧастьОтменитьИзменение", "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
// @skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(АдресЗагруженныхДанных)
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных);	
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ТоварыДобавлены = Ложь;
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрокаТовары = Объект.Запасы.Добавить();
		НоваяСтрокаТовары.Характеристика = СтрокаТаблицы.Характеристика; 		
		
		НоваяСтрокаТовары.Номенклатура = СтрокаТаблицы.Номенклатура;
		НоваяСтрокаТовары.Цена = СтрокаТаблицы.Цена;		
		НоваяСтрокаТовары.ЕдиницаИзмерения = СтрокаТаблицы.ЕдиницаИзмерения;
		
		ТоварыДобавлены = Истина;
		
	КонецЦикла;
	
	Если ТоварыДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			ДлительнаяОперация = ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки);
			
			КэшЗначений.ПараметрыДлительнойОперации.РезультатДлОперации = ДлительнаяОперация;
			КэшЗначений.ПараметрыДлительнойОперации.Вставить("РезультатЗагрузки", РезультатЗагрузки);
			ПроверитьНеобходимостьПодключенияОбработчикаОжидания();
			
		КонецЕсли;
		
	Иначе
		
		ЗагрузитьИзФайлаЗавершение(РезультатЗагрузки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИменаСвойств()
	
	ИменаСвойств = "Номенклатура, ЕдиницаИзмерения, Цена";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		
		ИменаСвойств = ИменаСвойств + ", Характеристика";
		
	КонецЕсли;
	
	Возврат ИменаСвойств;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьДанныеВТабличноеПолеЗапасы(ТаблицаСопоставленияДанных)
	
	ИменаСвойств = ИменаСвойств();
	МассивВидовЦен = Новый Массив;
	НачатьТранзакцию();
	
	Попытка
		
		ВидЦены = Неопределено;
		Для Каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = Объект.Запасы.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ИменаСвойств);
				Если ВидЦены = Неопределено Тогда
					ВидЦены = СтрокаТаблицы.ВидЦен;
				КонецЕсли;				
				
				НоваяСтрока.ВидЦены = ВидЦены;  
								
			КонецЕсли;
			
		КонецЦикла;

		Если ВидЦены <> Неопределено 
			И ЗначениеЗаполнено(ВидЦены) Тогда
			
			МассивВидовЦен.Добавить(ВидЦены);
			ЗаполнитьДеревоОперандов(МассивВидовЦен);   			
			Если Объект.Запасы.Количество()>0 Тогда
				
				ЗаполнитьКэшЗначенийВидамиЦен(КэшЗначений);
				ИзменитьСоставРеквизитовИЭлементовТабличнойЧасти("ТЧНоменклатура");
				ИзменитьСоставРеквизитовИЭлементовТабличнойЧасти("ТЧХарактеристики");
				ЗаполнитьТаблицуНоменклатурыИХарактеристикПоДокументу();
				КэшЗначений.ОтключенныеВидыЦен.Очистить();
								
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.УстановкаЦенНоменклатуры,, ПредставлениеОшибки);
		
		ВызватьИсключение ПредставлениеОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки)
	
	ПараметрыВызоваСервера = Новый Структура;
	ПараметрыВызоваСервера.Вставить("НастройкиЗагрузкиДанных", РезультатЗагрузки.НастройкиЗагрузкиДанных);
	ПараметрыВызоваСервера.Вставить("ТаблицаСопоставленияДанных", ДанныеФормыВЗначение(РезультатЗагрузки.ТаблицаСопоставленияДанных, Тип("ТаблицаЗначений")));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подсистема ЗагрузкаДанныхИзВнешнегоИсточника: Выполнение серверного метода загрузки результата'");
	ПараметрыВыполнения.ЗапуститьНеВФоне    = Ложь;
	ПараметрыВыполнения.ЗапуститьВФоне      = Истина;	
	
	ИмяМетода = "Справочники.Номенклатура.ОбработатьПодготовленныеДанные";
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыВызоваСервера, ПараметрыВыполнения);
	
КонецФункции
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

#КонецОбласти

#Область Настройки

// Сохраняет настройки формы по имени формы
//
// Параметры:
// 	- СохраняемыеНастройки - Структура сохраняемых настроек
//
&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормы(СохраняемыеНастройки, КлючНастроек)

	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(
		"Документ.УстановкаЦенНоменклатуры.ФормаДокумента",
		КлючНастроек, СохраняемыеНастройки);
	
КонецПроцедуры

// Получает настройки формы и загружает их в реквизиты
// Если настройки не были сохранены ранее, то будут загружены настройки по умолчанию
// из процедуры ПолучитьНастройкиФормыПоУмолчанию()
//
&НаКлиенте
Процедура ЗагрузитьНастройкиФормы()   
	
	ЗагружаемыеНастройкиПоУмолчанию = ПолучитьНастройкиФормыПоУмолчанию();	
	КлючНастроек 					= "НовыйДокументУстановкаЦенНоменклатуры";
	ЗагружаемыеНастройки 			= ПолучитьНастройкиФормы(ЗагружаемыеНастройкиПоУмолчанию, КлючНастроек);
	ПоказыватьХарактеристики		= Объект.ПоказыватьХарактеристики;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда		
		ЗаполнитьЗначенияСвойств(Объект, ЗагружаемыеНастройки);				
	КонецЕсли;
	
	Если ЗагружаемыеНастройки.ГруппаНастроекСвернута Тогда
		Элементы.ГруппаНастройки.Скрыть();
	КонецЕсли;
	
	Если Объект.РасчетИзВидаЦен Тогда
		Объект.ПоказыватьЗависимыеЦены 	= Истина;
		Объект.ПоказыватьНовуюЦену 		= Ложь;
		Объект.ПоказыватьОтклонениеЦен 	= Ложь;
		Объект.ПоказыватьХарактеристики = ПоказыватьХарактеристики;
		Объект.ПоказыватьДействующуюЦену = Ложь;
	КонецЕсли;
		
	ИзменитьВидимостьЭлементовТабличнойЧасти("ТЧНоменклатура");	
	
	Если Объект.ПоказыватьХарактеристики Тогда   		
		ИзменитьВидимостьЭлементовТабличнойЧасти("ТЧХарактеристики");  		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает настройки формы по умолчанию
// 
// Возвращаемое значение:
// - Структура настроек формы
//
&НаКлиенте
Функция ПолучитьНастройкиФормыПоУмолчанию()
	
	ЗагружаемыеНастройкиПоУмолчанию = Новый Структура;
	ЗагружаемыеНастройкиПоУмолчанию.Вставить("ПоказыватьХарактеристики", 					Объект.ПоказыватьХарактеристики);
	ЗагружаемыеНастройкиПоУмолчанию.Вставить("ПоказыватьНедействительныеХарактеристики", 	Объект.ПоказыватьНедействительныеХарактеристики);
	ЗагружаемыеНастройкиПоУмолчанию.Вставить("ПоказыватьОтклонениеЦен", 					Объект.ПоказыватьОтклонениеЦен);
	ЗагружаемыеНастройкиПоУмолчанию.Вставить("ПоказыватьДействующуюЦену", 					Объект.ПоказыватьДействующуюЦену);
	ЗагружаемыеНастройкиПоУмолчанию.Вставить("ПоказыватьЕдиницыИзмерения", 					Объект.ПоказыватьЕдиницыИзмерения);
	ЗагружаемыеНастройкиПоУмолчанию.Вставить("ПоказыватьЗависимыеЦены", 					Объект.ПоказыватьЗависимыеЦены);
	ЗагружаемыеНастройкиПоУмолчанию.Вставить("ГруппаНастроекСвернута", 						Ложь);  
	Возврат ЗагружаемыеНастройкиПоУмолчанию;
	
КонецФункции

// Возвращает сохраненные настройки формы или настройки по умолчанию
//
// Параметры:
//  - ЗагружаемыеНастройки - структура настроек по умолчанию
// 
// Возвращаемое значение:
// - Структура настроек формы, если они были сохранены ранее, либо структура настроек по умолчанию
//
&НаСервереБезКонтекста
Функция ПолучитьНастройкиФормы(ЗагружаемыеНастройки, КлючНастроек)
		
	Возврат ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(
		"Документ.УстановкаЦенНоменклатуры.ФормаДокумента",
		КлючНастроек, ЗагружаемыеНастройки);
	
КонецФункции

#КонецОбласти
