#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Контрагент)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	Возврат;
КонецПроцедуры

#КонецОбласти

Процедура ПроверитьВозможностьВводаНаОснованииЗаказаПоставщику(ДанныеЗаполнения, ЗначенияРеквизитов) Экспорт

	Если ЗначенияРеквизитов.Свойство("Проведен") Тогда
		Если Не ЗначенияРеквизитов.Проведен Тогда
			ТекстОшибки = НСтр(
				"ru='Документ %Документ% не проведен. Ввод на основании непроведенного документа запрещен.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДанныеЗаполнения);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЕсли;

	Если ЗначенияРеквизитов.Свойство("СостояниеЗаказа") И ЗначенияРеквизитов.СостояниеЗаказа
		= Справочники.СостоянияЗаказовНаПроизводство.Завершен Тогда

		ТекстОшибки = НСтр(
			"ru='Документ %Документ% в состоянии Завершен. Ввод на основании завершенного заказа запрещен.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДанныеЗаполнения);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

КонецПроцедуры

// Изменяет состояние заказа
//
// Параметры:
//  Заказ				 - 	ДокументСсылка.ЗаказПоставщику
//  Состояние			 - 	СправочникСсылка.СостоянияЗаказовПоставщикам 
//  ВариантЗавершения	 - 	ПеречислениеСсылка.ВариантыЗавершенияЗаказа
Процедура ИзменитьСостояниеЗаказа(Заказ, Состояние, ВариантЗавершения = Неопределено) Экспорт
	
	Если Заказ.СостояниеЗаказа = Состояние И Состояние <> Справочники.СостоянияЗаказовПоставщикам.Завершен Тогда
		Возврат;
	КонецЕсли;
	
	Если (Заказ.СостояниеЗаказа = Состояние И Состояние = Справочники.СостоянияЗаказовПоставщикам.Завершен
		И (ЗначениеЗаполнено(Заказ.ВариантЗавершения) И Заказ.ВариантЗавершения = ВариантЗавершения)) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказОбъект = Заказ.ПолучитьОбъект();
	ЗаказОбъект.Заблокировать();
	
	Если ВариантЗавершения <> Неопределено Тогда
		ЗаказОбъект.ВариантЗавершения = ВариантЗавершения;
	КонецЕсли;
	
	ЗаказОбъект.СостояниеЗаказа = Состояние;
	ЗаказОбъект.Записать(ЗаказОбъект.РежимЗаписиПриСменеСостояния());
	ЗаказОбъект.Разблокировать();
	
КонецПроцедуры

Функция СтатусОтгрузки(Заказ, МоментВремени = Неопределено) Экспорт
	
	Если НЕ Заказ.Проведен ИЛИ Заказ.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен Тогда
		Возврат Перечисления.СтатусОтгрузки.Отсутствует;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказыПоставщикамОбороты.КоличествоОборот КАК КоличествоОборот,
	|	ЗаказыПоставщикамОбороты.КоличествоПриход КАК КоличествоПриход,
	|	ЗаказыПоставщикамОбороты.КоличествоРасход КАК КоличествоРасход
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Обороты(, &КонецПериода, , ЗаказПоставщику = &Заказ) КАК ЗаказыПоставщикамОбороты";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("КонецПериода", ?(МоментВремени = Неопределено, ТекущаяДатаСеанса(), МоментВремени));
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если НЕ Результат.Следующий() Тогда
		Возврат Перечисления.СтатусОтгрузки.Отсутствует;
	КонецЕсли;
	
	Если Результат.КоличествоРасход = 0 Тогда
		Возврат Перечисления.СтатусОтгрузки.Отсутствует;
	ИначеЕсли Результат.КоличествоПриход - Результат.КоличествоРасход = 0 Тогда
		Возврат Перечисления.СтатусОтгрузки.Полная;
	Иначе
		Возврат Перечисления.СтатусОтгрузки.Частичная;
	КонецЕсли;
	
КонецФункции

Функция СтатусОплаты(Заказ, МоментВремени = Неопределено) Экспорт
	
	Если НЕ Заказ.Проведен ИЛИ Заказ.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен Тогда
		Возврат Перечисления.СтатусОплаты.Отсутствует;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОплатаСчетовИЗаказовОбороты.СуммаОборот КАК СуммаОборот,
	|	ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот КАК СуммаАвансаОборот,
	|	ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот КАК СуммаОплатыОборот
	|ИЗ
	|	РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(, &КонецПериода, , СчетНаОплату = &Заказ) КАК ОплатаСчетовИЗаказовОбороты";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("КонецПериода", ?(МоментВремени <> Неопределено, МоментВремени, ТекущаяДатаСеанса()));
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если НЕ Результат.Следующий() Тогда
		Возврат Перечисления.СтатусОплаты.Отсутствует;
	КонецЕсли;
	
	Всего = Результат.СуммаОборот;
	Оплачено = Результат.СуммаАвансаОборот + Результат.СуммаОплатыОборот;
	
	Если Оплачено = 0 Тогда
		Возврат Перечисления.СтатусОплаты.Отсутствует;
	ИначеЕсли Всего = Оплачено Тогда
		Возврат Перечисления.СтатусОплаты.Полная;
	Иначе
		Возврат Перечисления.СтатусОплаты.Частичная;
	КонецЕсли;
	
КонецФункции

Функция ПроцентОплаты(Заказ, МоментВремени = Неопределено) Экспорт
	
	Если НЕ Заказ.Проведен ИЛИ Заказ.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОплатаСчетовИЗаказовОбороты.СуммаОборот КАК СуммаОборот,
	|	ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот КАК СуммаАвансаОборот,
	|	ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот КАК СуммаОплатыОборот
	|ИЗ
	|	РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(, &КонецПериода, , СчетНаОплату = &Заказ) КАК ОплатаСчетовИЗаказовОбороты";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("КонецПериода", ?(МоментВремени <> Неопределено, МоментВремени, ТекущаяДатаСеанса()));
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если НЕ Результат.Следующий() Тогда
		Возврат 0;
	КонецЕсли;
	
	Всего = Результат.СуммаОборот;
	Оплачено = Результат.СуммаАвансаОборот + Результат.СуммаОплатыОборот;
	
	Если Оплачено = 0 Тогда
		Возврат 0;
	ИначеЕсли Всего = Оплачено Тогда
		Возврат 100;
	Иначе
		Возврат Цел(Оплачено * 100 / Всего);
	КонецЕсли;
	
КонецФункции

// Возвращает Заказы поставщикам оформленные под обеспечение Заказа покупателя.
//
// Параметры:
//  ЗаказПокупателя	 - ДокументСсылка.ЗаказПокупателя
// 
// Возвращаемое значение:
//  Массив
//
Функция ЗаказыПодОбеспечение(ЗаказПокупателя) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаказПоставщикуЗапасы.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщикуЗапасы
	|ГДЕ
	|	ЗаказПоставщикуЗапасы.ЗаказПокупателя = &ЗаказПокупателя";
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ОбеспечиваемыеЗаказыПокупателя(ЗаказПоставщику) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаказПоставщикуЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщикуЗапасы
	|ГДЕ
	|	ЗаказПоставщикуЗапасы.Ссылка = &ЗаказПоставщику
	|	И ЗаказПоставщикуЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)";
	Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("ЗаказПокупателя");
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДанныхИзФайла

// @skip-warning
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(ПараметрыЗагрузки) Экспорт
	
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//   ПолноеИмяТабличнойЧасти  - Строка - полное имя табличной части, в которую загружаются данные,
//  ИмяКолонки                - Строка - имя колонки, в который возникла неоднозначность,
//  СписокНеоднозначностей    - ТаблицаЗначений - Список для заполнения с неоднозначными данными,
//     * Идентификатор        - Число  - Уникальный идентификатор строки,
//     * Колонка              - Строка -  Имя колонки с возникшей неоднозначностью, 
//  ЗагружаемыеЗначенияСтрока - Строка - Загружаемые данные на основании которых возникла неоднозначность.
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки,
	ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт

	Если ИмяКолонки <> "Номенклатура" Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ТипНоменклатуры = &ТипНоменклатуры И Номенклатура.Наименование = &Наименование
	|	");

	Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.Артикул) Тогда
		Запрос.Текст = Запрос.Текст + " ИЛИ Номенклатура.Артикул = &Артикул";
		Запрос.УстановитьПараметр("Артикул", ЗагружаемыеЗначенияСтрока.Артикул);
	КонецЕсли;

	Если ПолноеИмяТабличнойЧасти = "Документ.ПриходнаяНакладная.ТабличнаяЧасть.Расходы" Тогда
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.Услуга);
		Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Услуга);
	Иначе
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.Номенклатура);
		Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Запас);
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;

КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   ПолноеИмяТабличнойЧасти   - Строка - полное имя табличной части, в которую загружаются данные.
//   АдресЗагружаемыхДанных    - Строка - адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - порядковый номер строки;
//     * остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - список неоднозначных значений, для которых в ИБ имеется несколько
//                                              подходящих вариантов.
//	   * Колонка       - Строка - имя колонки, в которой была обнаружена неоднозначность;
//	   * Идентификатор - Число  - идентификатор строки, в которой была обнаружена неоднозначность.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей,
	ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт

	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	ТаблицаСопоставления = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);

	СопоставитьЗагружаемыеДанныеЗапасы(ЗагружаемыеДанные, СписокНеоднозначностей, ТаблицаСопоставления);

	ПоместитьВоВременноеХранилище(ТаблицаСопоставления, АдресТаблицыСопоставления);

КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеЗапасы(ЗагружаемыеДанные, СписокНеоднозначностей, ТаблицаСопоставления)
	
	Перем ЕдиницаИзмерения, ЗаписьОНеоднозначности, Запрос, РезультатЗапроса, СтрокаЗагружаемыхДанных, СтрокаНоменклатура, Товар, Фильтр;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Наименование,
	|	Товары.Артикул,
	|	Товары.Идентификатор
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.Артикул,
	|	Номенклатура.Код,
	|	Товары.Идентификатор
	|ПОМЕСТИТЬ НоменклатураАртикул
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО (Номенклатура.Артикул ПОДОБНО Товары.Артикул)
	|			И (НЕ Товары.Артикул ПОДОБНО """" )
	|ГДЕ
	|	НЕ Номенклатура.Ссылка ЕСТЬ NULL И Номенклатура.ТипНоменклатуры = &ТипНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Товары.Идентификатор
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО Номенклатура.Наименование ПОДОБНО Товары.Наименование
	|ГДЕ Номенклатура.ТипНоменклатуры = &ТипНоменклатуры И НЕ Номенклатура.ЭтоНабор И 
	|	НЕ Номенклатура.Ссылка В
	|				(ВЫБРАТЬ
	|					НоменклатураАртикул.Ссылка
	|				ИЗ
	|					НоменклатураАртикул)
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура.Ссылка,
	|	Товары.Идентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НоменклатураАртикул.Ссылка,
	|	НоменклатураАртикул.Идентификатор
	|ИЗ
	|	НоменклатураАртикул КАК НоменклатураАртикул
	|
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураАртикул.Ссылка, НоменклатураАртикул.Идентификатор";
	
	Запрос.УстановитьПараметр("Товары", ЗагружаемыеДанные);
	Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Запас);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаЗагружаемыхДанных Из ЗагружаемыеДанные Цикл
		
		Товар = ТаблицаСопоставления.Добавить();
		Товар.Количество = СтрокаЗагружаемыхДанных.Количество;
		Товар.Цена = СтрокаЗагружаемыхДанных.Цена;
		Товар.Сумма = Товар.Количество * Товар.Цена;
		Товар.Идентификатор = СтрокаЗагружаемыхДанных.Идентификатор;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			Если ЗначениеЗаполнено(СтрокаЗагружаемыхДанных.Характеристика) Тогда
				Товар.Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(
					СтрокаЗагружаемыхДанных.Характеристика);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения") Тогда

			ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(
				СтрокаЗагружаемыхДанных.ЕдиницаИзмерения);

			Если ЕдиницаИзмерения.Пустая() Тогда
				ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(
					СтрокаЗагружаемыхДанных.ЕдиницаИзмерения);
			КонецЕсли;

			Товар.ЕдиницаИзмерения = ЕдиницаИзмерения;

		КонецЕсли;
		
		СтавкаНДС = СокрЛП(СтрокаЗагружаемыхДанных.СтавкаНДС);
		Если ЗначениеЗаполнено(СтрокаЗагружаемыхДанных.СтавкаНДС) Тогда
			Если Лев(СтавкаНДС, 1) = "0" Тогда
				СтавкаНДС = СтрЗаменить(СтавкаНДС, ".", ",");
				Если СтавкаНДС = "0,18" Тогда
					Товар.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("18%", Ложь);
				ИначеЕсли СтавкаНДС = "0,20" Тогда
					Товар.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("20%", Ложь);
				ИначеЕсли СтавкаНДС = "0,10" ИЛИ СтавкаНДС = "0,1" Тогда
					Товар.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("10%", Ложь);
				Иначе
					Товар.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию(СтрокаЗагружаемыхДанных.СтавкаНДС, Ложь);
				КонецЕсли;
			Иначе
				Товар.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию(СтрокаЗагружаемыхДанных.СтавкаНДС, Ложь);
			КонецЕсли;
		КонецЕсли;
		
		Фильтр = Новый Структура( "Идентификатор", СтрокаЗагружаемыхДанных.Идентификатор);
		СтрокаНоменклатура = РезультатЗапроса.НайтиСтроки(Фильтр);
		Если СтрокаНоменклатура.Количество() = 1 Тогда 
			Товар.Номенклатура = СтрокаНоменклатура[0].Ссылка;
		ИначеЕсли СтрокаНоменклатура.Количество() > 1 Тогда 
			ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор = СтрокаНоменклатура[0].Идентификатор;
			ЗаписьОНеоднозначности.Колонка = "Номенклатура";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзВнешнегоИсточника

// Для группы полей действует правило: хотя бы одно поле в группе должно быть выбрано в колонках
Процедура ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт
	
	ОписаниеТиповСтрока11 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(11));
	ОписаниеТиповСтрока25 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25));
	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	ОписаниеТиповСтрока110 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(110));
	ОписаниеТиповСтрока150 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(150));
	ОписаниеТиповСтрока200 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200));
	ОписаниеТиповСтрока1000 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000));
	ОписаниеТиповЧисло15_2 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 2,
		ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло15_3 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 3,
		ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");

	ПоказыватьНоменклатуруПоставщиков = ПолучитьФункциональнуюОпцию("УчетНоменклатурыПоставщиков");
	Если ПоказыватьНоменклатуруПоставщиков Тогда
	
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.НоменклатураПоставщиков");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Идентификатор",
			НСтр("ru = 'Идентификатор'"), ОписаниеТиповСтрока110, ОписаниеТиповКолонка, "НоменклатураПоставщиков", 1, , Ложь, ПоказыватьНоменклатуруПоставщиков);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "АртикулПоставщика",
			НСтр("ru = 'Артикул поставщика'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "НоменклатураПоставщиков", 2, , Ложь, ПоказыватьНоменклатуруПоставщиков);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураПоставщиковНаименование",
			НСтр("ru = 'Номенклатура поставщиков (наименование)'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "НоменклатураПоставщиков", 3, , Ложь, ПоказыватьНоменклатуруПоставщиков);
	
	КонецЕсли;
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Штрихкод",
		НСтр("ru = 'Штрихкод'"), ОписаниеТиповСтрока200, ОписаниеТиповКолонка, "Номенклатура", 1, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Артикул",
		НСтр("ru = 'Артикул'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Номенклатура", 2, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименование",
		НСтр("ru = 'Номенклатура (наименование)'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Номенклатура", 3, ,
		Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки,
		"НоменклатураНаименованиеПолное", НСтр("ru = 'Номенклатура (полное наименование)'"), ОписаниеТиповСтрока1000,
		ОписаниеТиповКолонка, "Номенклатура", 5, , Истина);

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "РодительКод",
		НСтр("ru = 'Код'", ОбщегоНазначения.КодОсновногоЯзыка()), 			ОписаниеТиповСтрока11, ОписаниеТиповКолонка, "Родитель", 1);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "РодительНаименование", 
		НСтр("ru = 'Группа (наименование)'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Родитель", 2);	

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Содержание", НСтр("ru = 'Содержание'"),
		ОписаниеТиповСтрока1000, ОписаниеТиповСтрока1000, , , , , НастройкиЗагрузкиДанных.СодержаниеВидимо);

	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда

		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ХарактеристикаНаименование", НСтр("ru = 'Характеристика (наименование)'"), ОписаниеТиповСтрока150, ОписаниеТиповКолонка, "Характеристика", 1);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ХарактеристикаАртикул", НСтр("ru = 'Характеристика (артикул)'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Характеристика", 2);

	КонецЕсли;
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПланСчетовСсылка.Управленческий");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаДоходов", 
		НСтр("ru = 'Счет учета доходов'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка,,,,, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаЗапасов", 
		НСтр("ru = 'Счет учета запасов'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка,,,,, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаЗатрат", 
		НСтр("ru = 'Счет учета затрат'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка,,,,, Ложь);
		
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НаправлениеДеятельности",
		НСтр("ru = 'Направление деятельности'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
		
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.МетодОценкиЗапасов");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "МетодОценки",
		НСтр("ru = 'Способ списания'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
		
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПополненияЗапасов");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СпособПополнения",
		НСтр("ru = 'Способ пополнения'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЭтоУслуга", 
		НСтр("ru = 'Это услуга'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповБулево, ОписаниеТиповБулево); 		
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Картинка", 
		НСтр("ru = 'Картинка'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока1000, ОписаниеТиповСтрока1000,,,,,Ложь);   		
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КатегорииНоменклатуры");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "КатегорияНоменклатуры", 
		НСтр("ru = 'Категория номенклатуры'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);   

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Количество",
		НСтр("ru = 'Количество'"), ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_3, , , Истина);

	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения, СправочникСсылка.ЕдиницыИзмерения");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЕдиницаИзмерения",
		НСтр("ru = 'Ед. изм.'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, , , , ,
		ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения"));

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Цена", НСтр("ru = 'Цена'"),
		ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2, , , Истина);

	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтавкаНДС",
		НСтр("ru = 'Ставка НДС'"), ОписаниеТиповСтрока50, ОписаниеТиповКолонка);

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СуммаНДС",
		НСтр("ru = 'Сумма НДС'"), ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2);

	Если НастройкиЗагрузкиДанных.Свойство("ПоложениеДатыВЗаказе") Тогда
	
		ПолеВидимо = (НастройкиЗагрузкиДанных.ПоложениеДатыВЗаказе = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ДатаПоступления",
			НСтр("ru = 'Дата поступления'"), ОписаниеТиповСтрока25, ОписаниеТиповДата, , , , , ПолеВидимо);
	
	КонецЕсли; 

	// Склад
	ВидимостьСклада = (ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам") И НастройкиЗагрузкиДанных.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтруктурнаяЕдиницаРезерв", НСтр("ru = 'Склад'"), ОписаниеТиповСтрока50, ОписаниеТиповКолонка, , , , , ВидимостьСклада);
	
КонецПроцедуры

Процедура ПриОпределенииОбразцовЗагрузкиДанных(НастройкиЗагрузкиДанных, УникальныйИдентификатор) Экспорт
	
	Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанных_xlsx");
	ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
	
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанных_mxl");
	
	Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанных_csv");
	ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
	
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника(ПараметрыСопоставления, АдресРезультата) Экспорт
	
	ТаблицаСопоставленияДанных	= ПараметрыСопоставления.ТаблицаСопоставленияДанных;
	РазмерТаблицыДанных			= ТаблицаСопоставленияДанных.Количество();
	НастройкиЗагрузкиДанных		= ПараметрыСопоставления.НастройкиЗагрузкиДанных;
	НастройкиПоиска				= НастройкиЗагрузкиДанных.НастройкиПоиска;
	
	ТаблицаДублирующихСтрок = ЗагрузкаДанныхИзВнешнегоИсточника.ПустаяТаблицаДублирующихСтрокНоменклатуры();
	НастройкиПоиска.Вставить("ТаблицаДублирующихСтрок", ТаблицаДублирующихСтрок);

	ПолноеИмяОбъектаЗаполнения = НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;
	
	// ТаблицаСопоставленияДанных - Тип ДанныеФормыКоллекция
	Для каждого СтрокаТаблицыФормы Из ТаблицаСопоставленияДанных Цикл
		
		НоменклатураСопоставлена = Ложь;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "НоменклатураПоставщиков") 
			И (ЗначениеЗаполнено(СтрокаТаблицыФормы.АртикулПоставщика)
			ИЛИ ЗначениеЗаполнено(СтрокаТаблицыФормы.Идентификатор)
			ИЛИ ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураПоставщиковНаименование)) Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуруПоставщиков(СтрокаТаблицыФормы, НастройкиЗагрузкиДанных);	
			НоменклатураСопоставлена = ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураПоставщиков);
		КонецЕсли;
		
		Если НЕ НоменклатураСопоставлена Тогда
		
			// Номенклатура по ШтрихКоду, Артикулу, Наименованию, НаименованиеПолное
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуру(СтрокаТаблицыФормы, НастройкиПоиска);
		
		КонецЕсли; 
		
		СтрокаТаблицыФормы.СчетУчетаЗапасов = ПланыСчетов.Управленческий.СырьеИМатериалы;
		СтрокаТаблицыФормы.СчетУчетаЗатрат = ?(ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство"), 
			ПланыСчетов.Управленческий.НезавершенноеПроизводство, ПланыСчетов.Управленческий.КоммерческиеРасходы);
		СтрокаТаблицыФормы.СчетУчетаДоходов = ?(СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"), 
			ПланыСчетов.Управленческий.ПрочиеДоходы, ПланыСчетов.Управленческий.ПустаяСсылка());
			
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "НаправлениеДеятельности") Тогда
				
			ЗначениеПоУмолчанию = Справочники.НаправленияДеятельности.Прочее;
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНаправлениеДеятельности(СтрокаТаблицыФормы.НаправлениеДеятельности, СтрокаТаблицыФормы.НаправлениеДеятельности_ВходящиеДанные, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "МетодОценки") Тогда
				
			ЗначениеПоУмолчанию = Перечисления.МетодОценкиЗапасов.ПоСредней;
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьМетодОценки(СтрокаТаблицыФормы.МетодОценки, СтрокаТаблицыФормы.МетодОценки_ВходящиеДанные, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "СпособПополнения") Тогда
				
			ЗначениеПоУмолчанию = Перечисления.СпособыПополненияЗапасов.Закупка;
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСпособПополнения(СтрокаТаблицыФормы.СпособПополнения, СтрокаТаблицыФормы.СпособПополнения_ВходящиеДанные, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "КатегорияНоменклатуры_ВходящиеДанные")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "КатегорияНоменклатуры") Тогда
		
			ЗначениеПоУмолчанию = Справочники.КатегорииНоменклатуры.БезКатегории;					
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьКатегориюНоменклатуры(СтрокаТаблицыФормы.КатегорияНоменклатуры, СтрокаТаблицыФормы.КатегорияНоменклатуры_ВходящиеДанные, ЗначениеПоУмолчанию);
			
		КонецЕсли;

		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "Родитель")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "РодительНаименование")
			И ЗначениеЗаполнено(СтрокаТаблицыФормы.РодительНаименование) Тогда
			
			ЗначениеПоУмолчанию = Справочники.Номенклатура.ПустаяСсылка();
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьРодителяНоменклатуры(СтрокаТаблицыФормы.Родитель, "", СтрокаТаблицыФормы.РодительНаименование, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "ЭтоУслуга_ВходящиеДанные") Тогда
			
			СтрокаТаблицыФормы.ЭтоУслуга = СтрокаТаблицыФормы.ЭтоУслуга_ВходящиеДанные;
			
		КонецЕсли;
		
		// Содержание
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.Содержание, СтрокаТаблицыФормы.Содержание_ВходящиеДанные);
		
		Если НЕ НоменклатураСопоставлена И ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") И ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
				
			// Характеристика по Владельцу и Наименованию
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьХарактеристику(СтрокаТаблицыФормы);
			
		КонецЕсли;
		
		// Количество
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Количество, СтрокаТаблицыФормы.Количество_ВходящиеДанные, 1);
		
		// ЕдиницыИзмерения по Наименованию (так же рассмотреть возможность прикрутить пользовательские ЕИ)
		ЗначениеПоУмолчанию = ?(ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура), СтрокаТаблицыФормы.Номенклатура.ЕдиницаИзмерения, Справочники.КлассификаторЕдиницИзмерения.шт);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЕдиницыИзмерения(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.ЕдиницаИзмерения, СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// Цена
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Цена, СтрокаТаблицыФормы.Цена_ВходящиеДанные, 1);
		
		// СтавкаНДС по наименованию
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтавкуНДС(СтрокаТаблицыФормы.СтавкаНДС, СтрокаТаблицыФормы.СтавкаНДС_ВходящиеДанные, Неопределено);
		
		// СуммаНДС
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.СуммаНДС, СтрокаТаблицыФормы.СуммаНДС_ВходящиеДанные, 0);
		
		// ДатаПоступления
		Если НастройкиЗагрузкиДанных.ПоложениеДатыВЗаказе = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВДату(СтрокаТаблицыФормы.ДатаПоступления, СтрокаТаблицыФормы.ДатаПоступления_ВходящиеДанные);
			
		КонецЕсли;
		
		// Склад
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтруктурнуюЕдиницу(СтрокаТаблицыФормы.СтруктурнаяЕдиницаРезерв, СтрокаТаблицыФормы.СтруктурнаяЕдиницаРезерв_ВходящиеДанные, Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		
		ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ПрогрессСопоставленияДанных(ТаблицаСопоставленияДанных.Индекс(СтрокаТаблицыФормы), РазмерТаблицыДанных);
		
	КонецЦикла;
	
	ТаблицаСопоставленияДанных.ЗагрузитьКолонку(ТаблицаДублирующихСтрок.ВыгрузитьКолонку("КлючСвязи"), "_КлючСвязи");
	ПоместитьВоВременноеХранилище(ТаблицаСопоставленияДанных, АдресРезультата);
	
КонецПроцедуры

Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения = "") Экспорт
	
	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	
	НоменклатураЗаполнена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура);
	ЗагрузкаНоменклатурыВозможна = Ложь;
	Если НЕ НоменклатураЗаполнена Тогда
		ЗагрузкаНоменклатурыВозможна = (ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураНаименование) ИЛИ ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураНаименованиеПолное));
	КонецЕсли;
		
	Если НоменклатураЗаполнена Тогда
		
		СтрокаТаблицыФормы[ИмяСлужебногоПоля] = (СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас 
			ИЛИ СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга)
			И НЕ СтрокаТаблицыФормы.Номенклатура.ЭтоНабор // Исключая наборы
			И СтрокаТаблицыФормы.Количество <> 0
			И НЕ СтрокаТаблицыФормы.СтруктурнаяЕдиницаРезерв.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение;
		СтрокаТаблицыФормы._СтрокаСопоставлена = НоменклатураЗаполнена;
			
	Иначе
			
		СтрокаТаблицыФормы[ИмяСлужебногоПоля] = ЗагрузкаНоменклатурыВозможна;
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - состав полей см. в функции ВерсионированиеОбъектов.НастройкиПодсистемы
//
// @skip-warning
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела - ТаблицаЗначений - состав полей см. в функции ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ГруппаДел	= НСтр("ru = 'Заказы поставщикам'");
	ИмяФормы	= "Документ.ЗаказПоставщику.Форма.ФормаСписка";
	
	Если Не ПравоДоступа("Редактирование", Метаданные.Документы.ЗаказПоставщику)
		Или ТекущиеДелаСервер.ДелоОтключено(ГруппаДел) Тогда
		
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА НЕ ГрафикВыполнения.Заказ ЕСТЬ NULL 
		|					И ГрафикВыполнения.Период < НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|				ТОГДА ДокЗаказПоставщику.Ссылка
		|		КОНЕЦ) КАК ЗаказыПоставщикамПросроченоВыполнение,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА ДокЗаказПоставщику.ЗапланироватьОплату
		|					И НЕ ГрафикОплаты.СчетНаОплату ЕСТЬ NULL 
		|					И ГрафикОплаты.Период < НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|				ТОГДА ДокЗаказПоставщику.Ссылка
		|		КОНЕЦ) КАК ЗаказыПоставщикамПросроченаОплата,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА НЕ ГрафикВыполнения.Заказ ЕСТЬ NULL 
		|					И ГрафикВыполнения.Период = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|				ТОГДА ДокЗаказПоставщику.Ссылка
		|			КОГДА ДокЗаказПоставщику.ЗапланироватьОплату
		|					И НЕ ГрафикОплаты.СчетНаОплату ЕСТЬ NULL 
		|					И ГрафикОплаты.Период = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|				ТОГДА ДокЗаказПоставщику.Ссылка
		|		КОНЕЦ) КАК ЗаказыПоставщикамНаСегодня,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокЗаказПоставщику.Ссылка) КАК ЗаказыПоставщикамНеЗавершенные
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ДокЗаказПоставщику
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикВыполненияЗаказов КАК ГрафикВыполнения
		|		ПО ДокЗаказПоставщику.Ссылка = ГрафикВыполнения.Заказ
		|			И (ГрафикВыполнения.Период <= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ))
		|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикОплатыЗаказов КАК ГрафикОплаты
		|		ПО ДокЗаказПоставщику.Ссылка = ГрафикОплаты.СчетНаОплату
		|			И (ГрафикОплаты.Период <= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ))}
		|ГДЕ
		|	ДокЗаказПоставщику.Проведен
		|	И НЕ ДокЗаказПоставщику.СостояниеЗаказа = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПоставщикам.Завершен)
		|	И ДокЗаказПоставщику.Ответственный В(&СотрудникиПользователя)";
	
	ДанныеДел = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор = "ЗаказыПоставщикамПросроченоВыполнение";
	Дело.ЕстьДела = ДанныеДел.ЗаказыПоставщикамПросроченоВыполнение > 0;
	Дело.Важное = Истина;
	Дело.Представление = НСтр("ru = 'Просрочено выполнение'");
	Дело.Количество = ДанныеДел.ЗаказыПоставщикамПросроченоВыполнение;
	Дело.Форма = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("КлючНазначенияИспользования,ТекущиеДела,ПросроченоВыполнение",
		"ПросроченоВыполнение");
	Дело.Владелец = ГруппаДел;
	Дело.Подсказка = "";

	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор = "ЗаказыПоставщикамПросроченаОплата";
	Дело.ЕстьДела = ДанныеДел.ЗаказыПоставщикамПросроченаОплата > 0;
	Дело.Важное = Истина;
	Дело.Представление = НСтр("ru = 'Просрочена оплата'");
	Дело.Количество = ДанныеДел.ЗаказыПоставщикамПросроченаОплата;
	Дело.Форма = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("КлючНазначенияИспользования,ТекущиеДела,ПросроченаОплата",
		"ПросроченаОплата");
	Дело.Владелец = ГруппаДел;
	Дело.Подсказка = "";

	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор = "ЗаказыПоставщикамНаСегодня";
	Дело.ЕстьДела = ДанныеДел.ЗаказыПоставщикамНаСегодня > 0;
	Дело.Важное = Ложь;
	Дело.Представление = НСтр("ru = 'На сегодня'");
	Дело.Количество = ДанныеДел.ЗаказыПоставщикамНаСегодня;
	Дело.Форма = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("КлючНазначенияИспользования,ТекущиеДела,НаСегодня", "НаСегодня");
	Дело.Владелец = ГруппаДел;
	Дело.Подсказка = "";

	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор = "ЗаказыПоставщикамНеЗавершенные";
	Дело.ЕстьДела = ДанныеДел.ЗаказыПоставщикамНеЗавершенные > 0;
	Дело.Важное = Ложь;
	Дело.Представление = НСтр("ru = 'Не завершенные'");
	Дело.Количество = ДанныеДел.ЗаказыПоставщикамНеЗавершенные;
	Дело.Форма = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("КлючНазначенияИспользования,ТекущиеДела,НеЗавершенные", "НеЗавершенные");
	Дело.Владелец = ГруппаДел;
	Дело.Подсказка = "";
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсРабочегоПроцесса

Функция РеквизитыНедоступныеДляИсточникаРабочегоПроцесса(ТипДействия = Неопределено) Экспорт
	
	НедоступныеРеквизиты = Новый Массив;
	
	НедоступныеРеквизиты.Добавить("ЗапланироватьОплату");
	НедоступныеРеквизиты.Добавить("ПоложениеДатыПоступления");
	НедоступныеРеквизиты.Добавить("СтруктурнаяЕдиницаРезерв");
	
	Возврат НедоступныеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
	ФорматТолькоДата = "ДЛФ=D";
	ДополнительныеПараметры.ФорматыРеквизитов.Вставить("ДоговорДатаДоговора", ФорматТолькоДата);
	ДополнительныеПараметры.ФорматыРеквизитов.Вставить("ДоговорСрокДействия", ФорматТолькоДата);
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
// @skip-warning
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.//
//
// @skip-warning
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
// @skip-warning
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область АссистентУправления

#Область АссистентУправления_Интеграция

Процедура ПриОпределенииТиповПредметовСобытий(Предметы) Экспорт
	
	Предметы.Вставить("ЗаказПоставщику", НСтр("ru='Заказ поставщику'"));
	
КонецПроцедуры

Процедура ПриОпределенииСобытий(События, Предмет) Экспорт
	
	НовоеСобытие = События.Добавить();
	НовоеСобытие.Предмет = "ЗаказПоставщику";
	НовоеСобытие.Тип = "ПриЗаписи";
	НовоеСобытие.Идентификатор = "ИзменениеСостоянияЗаказаПоставщику";
	НовоеСобытие.Представление = НСтр("ru='Изменение состояния заказа поставщику'");

	НовоеСобытие = События.Добавить();
	НовоеСобытие.Предмет = "ЗаказПоставщику";
	НовоеСобытие.Тип = "ПриЗаписи";
	НовоеСобытие.Идентификатор = "ИзменениеПоступленияЗапасов";
	НовоеСобытие.Представление = НСтр("ru='Поступление/списание запасов'");

	НовоеСобытие = События.Добавить();
	НовоеСобытие.Предмет = "ЗаказПоставщику";
	НовоеСобытие.Тип = "ПриЗаписи";
	НовоеСобытие.Идентификатор = "ИзменениеПоступленияОплаты";
	НовоеСобытие.Представление = НСтр("ru='Поступление/списание денег'");
	
КонецПроцедуры

Процедура ПриОпределенииДействий(Действия) Экспорт
	
	ТипыСостояний = Новый Массив;
	ТипыСостояний.Добавить(Тип("СправочникСсылка.СостоянияЗаказовПоставщикам"));
	ТипСостояниеЗаказаПоставщику = Новый ОписаниеТипов(ТипыСостояний);

	НовоеДействие = Действия.Добавить();
	НовоеДействие.Предмет = "ЗаказПоставщику";
	НовоеДействие.Идентификатор = "СинхронизироватьСостояниеЗаказаСтатусыЗаказа";
	НовоеДействие.Представление = НСтр("ru='Изменить состояние Заказа поставщику при поступлении оплаты/запасов'");

	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя = "СостояниеЗаказа";
	НовоеПоле.Представление = НСтр("ru='Новое состояние'");
	НовоеПоле.ОписаниеТипов = ТипСостояниеЗаказаПоставщику;
	НовоеПоле.ОбязательноеЗаполнение = Истина;
	НовоеПоле.ВариантЗаполнения = "Указанный";

	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя = "СтатусОтгрузки";
	НовоеПоле.Представление = НСтр("ru='Статус отгрузки заказа'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("ПеречислениеСсылка.СтатусОтгрузки");
	НовоеПоле.ОбязательноеЗаполнение = Ложь;
	НовоеПоле.ВариантЗаполнения = "Указанный";

	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя = "СтатусОплаты";
	НовоеПоле.Представление = НСтр("ru='Статус оплаты заказа'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("ПеречислениеСсылка.СтатусОплаты");
	НовоеПоле.ОбязательноеЗаполнение = Ложь;
	НовоеПоле.ВариантЗаполнения = "Указанный";

	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя = "ПроцентОплаты";
	НовоеПоле.Представление = НСтр("ru='Процент оплаты заказа'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("Число");
	НовоеПоле.ОбязательноеЗаполнение = Ложь;
	НовоеПоле.ВариантЗаполнения = "Указанный";

	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя = "ТолькоОповестить";
	НовоеПоле.Представление = НСтр("ru='Только оповестить'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("Булево");
	НовоеПоле.ОбязательноеЗаполнение = Ложь;
	НовоеПоле.ВариантЗаполнения = "Указанный";
	
КонецПроцедуры

Процедура ПриОпределенииПолучателейСообщения(Получатели) Экспорт
	
	Получатель = Получатели.Добавить();
	Получатель.Путь = "Контрагент";
	Получатель.Представление = НСтр("ru='Поставщик'");
	Получатель.Тип = Тип("СправочникСсылка.Контрагенты");

	Получатель = Получатели.Добавить();
	Получатель.Идентификатор = "Контрагент.КонтактноеЛицо";
	Получатель.Путь = "Ссылка.Контрагент.КонтактноеЛицо";
	Получатель.Представление = НСтр("ru='Основной контакт поставщика'");
	Получатель.Тип = Тип("СправочникСсылка.КонтактныеЛица");

	Получатель = Получатели.Добавить();
	Получатель.Идентификатор = "Контрагент.КонтактноеЛицоПодписант";
	Получатель.Путь = "Ссылка.Контрагент.КонтактноеЛицоПодписант";
	Получатель.Представление = НСтр("ru='Подписант поставщика'");
	Получатель.Тип = Тип("СправочникСсылка.КонтактныеЛица");
	
КонецПроцедуры

Процедура ПриОпределенииКонтактовПолучателяПредметаСообщения(Получатель, Предмет, ТипПредмета, ОписаниеПолучателя) Экспорт

	Если ОписаниеПолучателя.ИдентификаторПолучателяПредметаСообщения = "КонтактноеЛицо" Тогда
		ДанныеПолучателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Предмет,
			"КонтактноеЛицо,ПочтаПолучателя,КонтактныйТелефон,ЗапаснойТелефон");
		Получатель.Контакт = ДанныеПолучателя.КонтактноеЛицо;
		Если ОписаниеПолучателя.ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			Получатель.ЗначениеКИ = ДанныеПолучателя.ПочтаПолучателя;
		ИначеЕсли ОписаниеПолучателя.ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			Получатель.ЗначениеКИ = ДанныеПолучателя.КонтактныйТелефон + "; " + ДанныеПолучателя.ЗапаснойТелефон;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ВыполненыУсловия(Предмет, Условия) Экспорт

	Для Каждого Условие Из Условия Цикл

		Если Условие.Параметр = "СтатусОтгрузки" Тогда
			Если Не АссистентУправления.ВыполненоУсловиеСравнения(Документы.ЗаказПоставщику.СтатусОтгрузки(Предмет),
				Условие.ВидСравнения, Условие.Значение) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;

		Если Условие.Параметр = "ПроцентОплаты" Тогда
			Если Не АссистентУправления.ВыполненоУсловиеСравнения(Документы.ЗаказПоставщику.ПроцентОплаты(Предмет),
				Условие.ВидСравнения, Условие.Значение) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат Истина;

КонецФункции

// @skip-warning
Процедура ПередОбработкойСобытия(Предмет, Событие, Действие, ЗначенияЗаполнения, ДополнительныеПараметры, Результат) Экспорт
КонецПроцедуры

Процедура ВыполнитьДействие(Предмет, Действие, ЗначенияЗаполнения, ДополнительныеПараметры, Результат) Экспорт
	
	Если Действие.Идентификатор = "СинхронизироватьСостояниеЗаказаСтатусыЗаказа" Тогда
		
		СинхронизироватьСостояниеЗаказаСтатусыЗаказа(Предмет, ЗначенияЗаполнения, ДополнительныеПараметры, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// @skip-warning
Процедура ПослеОбработкиСобытия(Предмет, Событие, Действие, ЗначенияЗаполнения, ДополнительныеПараметры, Результат) Экспорт

КонецПроцедуры

#КонецОбласти

#Область АссистентУправления_Реализация

Процедура СинхронизироватьСостояниеЗаказаСтатусыЗаказа(ЗаказПоставщику, ЗначенияЗаполнения, ДополнительныеПараметры,
	Результат)

	СтатусОтгрузкиТекущий = Неопределено;
	СтатусОтгрузкиДо = Неопределено;
	СтатусОплатыТекущий = Неопределено;
	СтатусОплатыДо = Неопределено;

	МоментВремени = Неопределено;
	Если ДополнительныеПараметры.Источник <> Неопределено И ТипЗнч(ДополнительныеПараметры.Источник) <> Тип(
		"ДокументСсылка.ЗаказПоставщику") Тогда
		МоментВремени = Новый МоментВремени(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДополнительныеПараметры.Источник,
			"Дата"), ДополнительныеПараметры.Источник);
		МоментВремени = Новый Граница(МоментВремени, ВидГраницы.Исключая);
	КонецЕсли;

	Если ЗначенияЗаполнения.Свойство("СтатусОтгрузки") И ЗначениеЗаполнено(ЗначенияЗаполнения.СтатусОтгрузки) Тогда
		СтатусОтгрузкиТекущий = СтатусОтгрузки(ЗаказПоставщику);
		Если МоментВремени <> Неопределено Тогда
			СтатусОтгрузкиДо = СтатусОтгрузки(ЗаказПоставщику, МоментВремени);
		КонецЕсли;
	КонецЕсли;

	Если ЗначенияЗаполнения.Свойство("СтатусОплаты") И ЗначениеЗаполнено(ЗначенияЗаполнения.СтатусОплаты) Тогда
		ПроцентОплаты = ПроцентОплаты(ЗаказПоставщику);
		СтатусОплатыТекущий = Перечисления.СтатусОплаты.НовыйСтатусОплаты(ПроцентОплаты);
		Если МоментВремени <> Неопределено Тогда
			СтатусОплатыДо = СтатусОплаты(ЗаказПоставщику, МоментВремени);
		КонецЕсли;
	КонецЕсли;

	ЗаказВыполнилУсловия = Истина;

	Если ЗаказВыполнилУсловия И ЗначенияЗаполнения.Свойство("СтатусОтгрузки") И ЗначениеЗаполнено(
		ЗначенияЗаполнения.СтатусОтгрузки) Тогда
		ЗаказВыполнилУсловия = Перечисления.СтатусОтгрузки.Сравнить(СтатусОтгрузкиТекущий,
			ЗначенияЗаполнения.СтатусОтгрузки) >= 0;
	КонецЕсли;

	Если ЗаказВыполнилУсловия И ЗначенияЗаполнения.Свойство("СтатусОплаты") И ЗначениеЗаполнено(
		ЗначенияЗаполнения.СтатусОплаты) Тогда
		Если ЗначенияЗаполнения.Свойство("ПроцентОплаты") Тогда
			ЗаказВыполнилУсловия = ПроцентОплаты >= ЗначенияЗаполнения.ПроцентОплаты;
		Иначе
			ЗаказВыполнилУсловия = Перечисления.СтатусОплаты.Сравнить(СтатусОплатыТекущий,
				ЗначенияЗаполнения.СтатусОплаты) >= 0;
		КонецЕсли;
	КонецЕсли;

	ТекущееСостояние = СостоянияЗаказов.СостояниеЗаказа(ЗаказПоставщику);

	Если ЗначенияЗаполнения.Свойство("СостояниеЗаказа") Тогда
		СинхронизируемоеСостояние = ЗначенияЗаполнения.СостояниеЗаказа;
		ЗаказПрошелСинхронизируемоеСостояние = СостоянияЗаказов.СравнитьСостояния(ТекущееСостояние,
			СинхронизируемоеСостояние) >= 0;
		СравниватьСостояния = Истина;
	Иначе
		СравниватьСостояния = Ложь;
	КонецЕсли;

	Если СравниватьСостояния Тогда
		Если ЗаказВыполнилУсловия
			 И ЗаказПрошелСинхронизируемоеСостояние
			 Или Не ЗаказВыполнилУсловия
				 И Не ЗаказПрошелСинхронизируемоеСостояние Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Не СравниватьСостояния И Не ЗаказВыполнилУсловия Тогда
		Возврат;
	КонецЕсли;

	Если СравниватьСостояния Тогда
		Если Не ЗаказВыполнилУсловия И ЗаказПрошелСинхронизируемоеСостояние Тогда
			ТекстСобытие = СтрШаблон(НСтр("ru='Заказ в состоянии %1'"), ТекущееСостояние);
			ТекстПредупреждения = "";
			Если СтатусОтгрузкиТекущий <> Неопределено И СтатусОплатыТекущий <> Неопределено Тогда
				ТекстПредупреждения = НСтр("ru=', а он еще не поступил и не оплачен'");
			ИначеЕсли СтатусОтгрузкиТекущий <> Неопределено Тогда
				ТекстПредупреждения = НСтр("ru=', а он еще не поступил'");
			ИначеЕсли СтатусОплатыТекущий <> Неопределено Тогда
				ТекстПредупреждения = НСтр("ru=', а он еще не оплачен'");
			КонецЕсли;
			АссистентУправления.ДобавитьСообщениеВРезультат(Результат, ЗаказПоставщику, ТекстСобытие
																						+ ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;

	Если Не СравниватьСостояния Или (ЗаказВыполнилУсловия И Не ЗаказПрошелСинхронизируемоеСостояние) Тогда

		НужноТолькоОповестить = ЗначенияЗаполнения.Свойство("ТолькоОповестить") И ЗначенияЗаполнения.ТолькоОповестить;

		Если Не НужноТолькоОповестить Тогда
			АссистентУправленияИзменитьСостояние(ЗаказПоставщику, СинхронизируемоеСостояние, ДополнительныеПараметры,
				Результат);
		КонецЕсли;

		Если СтатусОплатыТекущий = Перечисления.СтатусОплаты.Частичная Тогда
			ТекстОплачен = СтрШаблон(НСтр("ru='оплачен на %1%%'"), ПроцентОплаты);
		Иначе
			ТекстОплачен = НСтр("ru='оплачен'");
		КонецЕсли;

		ТекстСобытия = "";
		Если СтатусОтгрузкиТекущий <> Неопределено И СтатусОплатыТекущий <> Неопределено Тогда
			ТекстСобытия = СтрШаблон(НСтр("ru='Заказ поступил и %1'"), ТекстОплачен);
		ИначеЕсли СтатусОтгрузкиТекущий <> Неопределено Тогда
			ТекстСобытия = НСтр("ru='Заказ поступил'");
		ИначеЕсли СтатусОплатыТекущий <> Неопределено Тогда
			ТекстСобытия = СтрШаблон(НСтр("ru='Заказ %1'"), ТекстОплачен);
		КонецЕсли;

		Если НужноТолькоОповестить Тогда
			ТекстДействия = "";
		Иначе
			ТекстДействия = СтрШаблон(НСтр("ru=', перевела заказ в состояние %1'"), СинхронизируемоеСостояние);
		КонецЕсли;

		АссистентУправления.ДобавитьСообщениеВРезультат(Результат, ЗаказПоставщику, ТекстСобытия + ТекстДействия);
	КонецЕсли;

КонецПроцедуры

Процедура АссистентУправленияИзменитьСостояние(Заказ, НовоеСостояние, ДополнительныеПараметры, Результат) Экспорт
	
	Если ДатыЗапретаИзменения.ИзменениеЗапрещено("Документ.ЗаказПокупателя", Заказ) Тогда
		Результат.ДействиеВыполнено = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НовоеСостояние) = Тип("Структура") Тогда
		СостояниеЗаказа = НовоеСостояние.СостояниеЗаказа;
		ВариантЗавершения = НовоеСостояние.ВариантЗавершения;
	Иначе
		СостояниеЗаказа = НовоеСостояние;
		ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Успешно;
	КонецЕсли;
	
	ДанныеЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказ, "СостояниеЗаказа,ВариантЗавершения");
	
	Если СостоянияЗаказов.СравнитьСостояния(ДанныеЗаказа.СостояниеЗаказа, СостояниеЗаказа) >= 0
		И (ВариантЗавершения = Неопределено ИЛИ ДанныеЗаказа.ВариантЗавершения = ВариантЗавершения) Тогда
		Результат.ДействиеВыполнено = Ложь;
		Возврат;
	КонецЕсли;
	
	Объект = Заказ.ПолучитьОбъект();
	Объект.СостояниеЗаказа = СостояниеЗаказа;
	Если СостоянияЗаказов.ЭтоСостояниеЗавершен(Объект.СостояниеЗаказа) Тогда
		Объект.ВариантЗавершения = ВариантЗавершения;
	КонецЕсли;
	Объект.ДополнительныеСвойства.Вставить("ЭтоЗаписьАссистентом", Истина);
	Объект.Записать(Объект.РежимЗаписиПриСменеСостояния());
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Проведение

Процедура СформироватьТаблицаЗапасы(ДокументСсылкаЗаказПоставщику, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;

	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|		СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля
	|		И ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПоставщику);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапасыОстатки = РезультатЗапроса.Выгрузить();
	ТаблицаЗапасыОстатки.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия");
	
	ВременнаяТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.СкопироватьКолонки();

	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы[н];
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
		
		КоличествоТребуетсяРезерв = СтрокаТаблицаЗапасы.Количество;
		
		Если КоличествоТребуетсяРезерв > 0 Тогда
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяРезерв Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяРезерв / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяРезерв;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяРезерв Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписанию = 0;	
			КонецЕсли;
			
			// Расход.
			СтрокаТаблицыРасход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяРезерв;
			СтрокаТаблицыРасход.ЗаказПокупателя = Неопределено;
			
			// Приход
			Если Окр(СуммаКСписанию, 2, 1) <> 0 ИЛИ КоличествоТребуетсяРезерв > 0 Тогда
				
				СтрокаТаблицыПриход = ВременнаяТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
				
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
				СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
				СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
				СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
				
				СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыПриход.КоррЗаказПокупателя = Неопределено;
				
				СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
				СтрокаТаблицыПриход.Количество = КоличествоТребуетсяРезерв;
				
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				СтрокаТаблицыПриход.ВидДвиженияУправленческий = ВидДвиженияБухгалтерии.Дебет;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы = ВременнаяТаблицаЗапасы;
	
КонецПроцедуры

Процедура СформироватьТаблицаПлатежныйКалендарь(ДокументСсылкаЗаказПоставщику, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПоставщику);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ДатаОплаты КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.ТипДенежныхСредств,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыУтвержденияПлатежей.Утвержден) КАК СтатусУтвержденияПлатежа,
	|	ТаблицаДокумента.Ссылка КАК СчетНаОплату,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам) КАК Статья,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные)
	|			ТОГДА ТаблицаДокумента.Ссылка.Касса
	|		КОГДА ТаблицаДокумента.Ссылка.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
	|			ТОГДА ТаблицаДокумента.Ссылка.БанковскийСчет
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК БанковскийСчетКасса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|			ТОГДА ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов
	|		ИНАЧЕ ТаблицаДокумента.Ссылка.ВалютаДокумента
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|			ТОГДА ВЫРАЗИТЬ(-ТаблицаДокумента.СуммаОплаты * ВЫБОР
	|						КОГДА КурсыВалютРасчетов.Курс <> 0
	|								И КурсыВалютДокумента.Кратность <> 0
	|							ТОГДА КурсыВалютДокумента.Курс * КурсыВалютРасчетов.Кратность / (ЕСТЬNULL(КурсыВалютРасчетов.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1))
	|						ИНАЧЕ 1
	|					КОНЕЦ КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ -ТаблицаДокумента.СуммаОплаты
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	Документ.ЗаказПоставщику.ПлатежныйКалендарь КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютРасчетов
	|		ПО ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютДокумента
	|		ПО ТаблицаДокумента.Ссылка.ВалютаДокумента = КурсыВалютДокумента.Валюта
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И НЕ ТаблицаДокумента.Ссылка.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПлатежныйКалендарь", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

// Процедура формирования таблицы денежных средств в резерве.
//
// Параметры:
//	ДокументСсылка - ДокументСсылка.ЗаказПоставщику - Текущий документ
//	ДополнительныеСвойства - ДополнительныеСвойства - Дополнительные свойства документа
//
Процедура СформироватьТаблицаДенежныеСредстваВРезерве(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ДатаОплаты КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.ТипДенежныхСредств,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные)
	|			ТОГДА ТаблицаДокумента.Ссылка.Касса
	|		КОГДА ТаблицаДокумента.Ссылка.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
	|			ТОГДА ТаблицаДокумента.Ссылка.БанковскийСчет
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК БанковскийСчетКасса,
	|	ТаблицаДокумента.Ссылка КАК Документ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|			ТОГДА ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов
	|		ИНАЧЕ ТаблицаДокумента.Ссылка.ВалютаДокумента
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.СуммаОплаты * ВЫБОР
	|						КОГДА КурсыВалютРасчетов.Курс <> 0
	|								И КурсыВалютДокумента.Кратность <> 0
	|							ТОГДА КурсыВалютДокумента.Курс * КурсыВалютРасчетов.Кратность / (ЕСТЬNULL(КурсыВалютРасчетов.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1))
	|						ИНАЧЕ 1
	|					КОНЕЦ КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ТаблицаДокумента.СуммаОплаты
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	Документ.ЗаказПоставщику.ПлатежныйКалендарь КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютРасчетов
	|		ПО ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютДокумента
	|		ПО ТаблицаДокумента.Ссылка.ВалютаДокумента = КурсыВалютДокумента.Валюта
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.Ссылка.ЗапланироватьОплату
	|	И ТаблицаДокумента.Ссылка.РезервироватьДенежныеСредства
	|	И НЕ ТаблицаДокумента.Ссылка.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДенежныеСредстваВРезерве",
		РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПлатежныйКалендарь()

Процедура СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылкаЗаказПоставщику, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПоставщику);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка КАК СчетНаОплату,
	|	ТаблицаДокумента.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Контрагент.ВестиРасчетыПоЗаказам
	|	И ТаблицаДокумента.Ссылка = &Ссылка
	|	И НЕ ТаблицаДокумента.Ссылка.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаСчетовИЗаказов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура ИнициализироватьДанныеДокумента(ДокументСсылкаЗаказПоставщику, СтруктураДополнительныеСвойства) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПоставщикуЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗаказПоставщику.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщику.УчетПотребностиПоСкладам
	|				И ЗаказПоставщикуЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ЗаказПоставщикуЗапасы.СтруктурнаяЕдиницаРезерв
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ЗаказПоставщикуЗапасы.Ссылка КАК ЗаказПоставщику,
	|	ЗаказПоставщикуЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказПоставщикуЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПоставщикуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЗаказПоставщикуЗапасы.Количество
	|		ИНАЧЕ ЗаказПоставщикуЗапасы.Количество * ЗаказПоставщикуЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ЗаказПоставщикуЗапасы.ДатаПоступления КАК ДатаПоступления
	|ИЗ
	|	Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщикуЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|		ПО ЗаказПоставщикуЗапасы.Ссылка = ЗаказПоставщику.Ссылка
	|ГДЕ
	|	ЗаказПоставщикуЗапасы.Ссылка = &Ссылка
	|	И НЕ ЗаказПоставщику.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПоставщикуМатериалы.НомерСтроки КАК НомерСтроки,
	|	ЗаказПоставщику.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщикуМатериалы.Ссылка.УчетПотребностиПоСкладам
	|			ТОГДА ЗаказПоставщикуМатериалы.СтруктурнаяЕдиницаРезерв
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка) КАК ТипДвижения,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРезервирование
	|				ИЛИ ЗаказПоставщикуМатериалы.ЗаказПокупателя.УчетПотребностиПоЗаказам
	|			ТОГДА ЗаказПоставщикуМатериалы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка) КАК ЗаказНаПроизводство,
	|	ЗаказПоставщикуМатериалы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказПоставщикуМатериалы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПоставщикуМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЗаказПоставщикуМатериалы.Количество
	|		ИНАЧЕ ЗаказПоставщикуМатериалы.Количество * ЗаказПоставщикуМатериалы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	Документ.ЗаказПоставщику.Материалы КАК ЗаказПоставщикуМатериалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|		ПО ЗаказПоставщикуМатериалы.Ссылка = ЗаказПоставщику.Ссылка
	|ГДЕ
	|	ЗаказПоставщикуМатериалы.Ссылка = &Ссылка
	|	И ЗаказПоставщику.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПоставщику.ЗаказНаПереработку)
	|	И НЕ ЗаказПоставщику.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ЗаказПоставщикуЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗаказПоставщикуЗапасы.ДатаПоступления КАК Период,
	|	&Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщику.УчетПотребностиПоСкладам
	|				И ЗаказПоставщикуЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ЗаказПоставщикуЗапасы.СтруктурнаяЕдиницаРезерв
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Поступление) КАК ТипДвижения,
	|	ЗаказПоставщикуЗапасы.Ссылка КАК Заказ,
	|	ЗаказПоставщикуЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказПоставщикуЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПоставщикуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЗаказПоставщикуЗапасы.Количество
	|		ИНАЧЕ ЗаказПоставщикуЗапасы.Количество * ЗаказПоставщикуЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщикуЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|		ПО ЗаказПоставщикуЗапасы.Ссылка = ЗаказПоставщику.Ссылка
	|ГДЕ
	|	ЗаказПоставщикуЗапасы.Ссылка = &Ссылка
	|	И НЕ ЗаказПоставщику.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ЗаказПоставщикуМатериалы.НомерСтроки,
	|	ЗаказПоставщикуМатериалы.ДатаОтгрузки,
	|	&Организация,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщику.УчетПотребностиПоСкладам
	|			ТОГДА ЗаказПоставщикуМатериалы.СтруктурнаяЕдиницаРезерв
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка),
	|	ЗаказПоставщикуМатериалы.ЗаказПокупателя,
	|	ЗаказПоставщикуМатериалы.Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказПоставщикуМатериалы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПоставщикуМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЗаказПоставщикуМатериалы.Количество
	|		ИНАЧЕ ЗаказПоставщикуМатериалы.Количество * ЗаказПоставщикуМатериалы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ
	|ИЗ
	|	Документ.ЗаказПоставщику.Материалы КАК ЗаказПоставщикуМатериалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|		ПО ЗаказПоставщикуМатериалы.Ссылка = ЗаказПоставщику.Ссылка
	|ГДЕ
	|	ЗаказПоставщикуМатериалы.Ссылка = &Ссылка
	|	И ЗаказПоставщику.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПоставщику.ЗаказНаПереработку)
	|	И НЕ ЗаказПоставщику.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПоставщикуЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗаказПоставщику.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	ЗаказПоставщикуЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказПоставщикуЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказПоставщикуЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ЗаказПоставщикуЗапасы.Ссылка КАК ИсточникОбеспечения,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПоставщикуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЗаказПоставщикуЗапасы.Количество
	|		ИНАЧЕ ЗаказПоставщикуЗапасы.Количество * ЗаказПоставщикуЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщикуЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|		ПО ЗаказПоставщикуЗапасы.Ссылка = ЗаказПоставщику.Ссылка
	|ГДЕ
	|	ЗаказПоставщикуЗапасы.Ссылка = &Ссылка
	|	И ЗаказПоставщикуЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	И НЕ ЗаказПоставщику.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И (&ИспользоватьРезервирование
	|			ИЛИ ЗаказПоставщикуЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПоставщикуЗапасы.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПоставщикуМатериалы.НомерСтроки КАК НомерСтроки,
	|	ЗаказПоставщикуМатериалы.Ссылка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	ЗаказПоставщикуМатериалы.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиница,
	|	ЗаказПоставщикуМатериалы.Номенклатура.СчетУчетаЗапасов КАК СчетУчета,
	|	ЗаказПоставщикуМатериалы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказПоставщикуМатериалы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК Партия,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРезервирование
	|			ТОГДА ЗаказПоставщикуМатериалы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК КоррЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПоставщикуМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЗаказПоставщикуМатериалы.Резерв
	|		ИНАЧЕ ЗаказПоставщикуМатериалы.Резерв * ЗаказПоставщикуМатериалы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	0 КАК Сумма,
	|	ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит) КАК ВидДвиженияУправленческий,
	|	&РезервированиеЗапасов КАК СодержаниеПроводки
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	Документ.ЗаказПоставщику.Материалы КАК ЗаказПоставщикуМатериалы
	|ГДЕ
	|	ЗаказПоставщикуМатериалы.Ссылка = &Ссылка
	|	И ЗаказПоставщикуМатериалы.Резерв > 0
	|	И НЕ ЗаказПоставщикуМатериалы.Ссылка.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.СчетУчета КАК КоррСчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Номенклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Характеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Партия КАК КоррПартия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.КоррЗаказПокупателя КАК КоррЗаказПокупателя,
	|	ТаблицаЗапасы.ВидДвиженияУправленческий КАК ВидДвиженияУправленческий,
	|	ТаблицаЗапасы.СодержаниеПроводки КАК СодержаниеПроводки,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Сумма) КАК Сумма,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.КоррЗаказПокупателя,
	|	ТаблицаЗапасы.СодержаниеПроводки,
	|	ТаблицаЗапасы.ВидДвиженияУправленческий,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПоставщику);
	Запрос.УстановитьПараметр("МоментВремени",
		Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики",
		СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("ИспользоватьРезервирование",
		СтруктураДополнительныеСвойства.УчетнаяПолитика.РезервированиеЗапасов);
	Запрос.УстановитьПараметр("РезервированиеЗапасов", НСтр("ru = 'Резервирование запасов'"));

	МассивРезультатов = Запрос.ВыполнитьПакет();

	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказыПоставщикам",
		МассивРезультатов[0].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПотребностьВЗапасах",
		МассивРезультатов[1].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаГрафикДвиженияЗапасов",
		МассивРезультатов[2].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРазмещениеЗаказов",
		МассивРезультатов[3].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", МассивРезультатов[5].Выгрузить());

	СформироватьТаблицаЗапасы(ДокументСсылкаЗаказПоставщику, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПлатежныйКалендарь(ДокументСсылкаЗаказПоставщику, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДенежныеСредстваВРезерве(ДокументСсылкаЗаказПоставщику, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылкаЗаказПоставщику, СтруктураДополнительныеСвойства);
	
КонецПроцедуры

Процедура ВыполнитьКонтроль(ДокументСсылкаЗаказПоставщику, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если ПроведениеДокументовУНФ.КонтрольОстатковВыключен() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временные таблицы "ДвиженияЗаказыПоставщикамИзменение", "ДвиженияЗапасыИзменение", "ДвиженияПотребностьВЗапасахИзменение"
	// содержат записи, необходимо выполнить контроль заказа поставщику.
	
	Если СтруктураВременныеТаблицы.ДвиженияЗаказыПоставщикамИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияПотребностьВЗапасахИзменение
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьРезервированиеДенежныхСредств") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияЗапасыИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗапасыИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗапасыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
		|	ДвиженияЗапасыИзменение.СчетУчета КАК СчетУчетаПредставление,
		|	ДвиженияЗапасыИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗапасыИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияЗапасыИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияЗапасыИзменение.ЗаказПокупателя КАК ЗаказПокупателяПредставление,
		|	ЗапасыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) КАК СуммаОстатокЗапасы
		|ИЗ
		|	ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(&МоментКонтроля, ) КАК ЗапасыОстатки
		|		ПО ДвиженияЗапасыИзменение.Организация = ЗапасыОстатки.Организация
		|			И ДвиженияЗапасыИзменение.СтруктурнаяЕдиница = ЗапасыОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыИзменение.СчетУчета = ЗапасыОстатки.СчетУчета
		|			И ДвиженияЗапасыИзменение.Номенклатура = ЗапасыОстатки.Номенклатура
		|			И ДвиженияЗапасыИзменение.Характеристика = ЗапасыОстатки.Характеристика
		|			И ДвиженияЗапасыИзменение.Партия = ЗапасыОстатки.Партия
		|			И ДвиженияЗапасыИзменение.ЗаказПокупателя = ЗапасыОстатки.ЗаказПокупателя
		|			И (ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗаказыПоставщикамИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗаказыПоставщикамИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗаказыПоставщикамИзменение.Склад КАК СкладПредставление,
		|	ДвиженияЗаказыПоставщикамИзменение.ЗаказПоставщику КАК ЗаказПоставщикуПредставление,
		|	ДвиженияЗаказыПоставщикамИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗаказыПоставщикамИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ЗаказыПоставщикамОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗаказыПоставщикамИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0) КАК ОстатокЗаказыПоставщикам,
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗаказыПоставщикам
		|ИЗ
		|	ДвиженияЗаказыПоставщикамИзменение КАК ДвиженияЗаказыПоставщикамИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(&МоментКонтроля, ) КАК ЗаказыПоставщикамОстатки
		|		ПО ДвиженияЗаказыПоставщикамИзменение.Организация = ЗаказыПоставщикамОстатки.Организация
		|			И ДвиженияЗаказыПоставщикамИзменение.Склад = ЗаказыПоставщикамОстатки.Склад
		|			И ДвиженияЗаказыПоставщикамИзменение.ЗаказПоставщику = ЗаказыПоставщикамОстатки.ЗаказПоставщику
		|			И ДвиженияЗаказыПоставщикамИзменение.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура
		|			И ДвиженияЗаказыПоставщикамИзменение.Характеристика = ЗаказыПоставщикамОстатки.Характеристика
		|			И (ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияПотребностьВЗапасахИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияПотребностьВЗапасахИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияПотребностьВЗапасахИзменение.ТипДвижения КАК ТипДвиженияПредставление,
		|	ДвиженияПотребностьВЗапасахИзменение.Склад КАК СкладПредставление,
		|	ДвиженияПотребностьВЗапасахИзменение.ЗаказПокупателя КАК ЗаказПокупателяПредставление,
		|	ДвиженияПотребностьВЗапасахИзменение.ЗаказНаПроизводство КАК ЗаказНаПроизводствоПредставление,
		|	ДвиженияПотребностьВЗапасахИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияПотребностьВЗапасахИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ПотребностьВЗапасахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияПотребностьВЗапасахИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ПотребностьВЗапасахОстатки.КоличествоОстаток, 0) КАК ОстатокПотребностьВЗапасах,
		|	ЕСТЬNULL(ПотребностьВЗапасахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокПотребностьВЗапасах
		|ИЗ
		|	ДвиженияПотребностьВЗапасахИзменение КАК ДвиженияПотребностьВЗапасахИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПотребностьВЗапасах.Остатки(&МоментКонтроля, ) КАК ПотребностьВЗапасахОстатки
		|		ПО ДвиженияПотребностьВЗапасахИзменение.Организация = ПотребностьВЗапасахОстатки.Организация
		|			И ДвиженияПотребностьВЗапасахИзменение.ТипДвижения = ПотребностьВЗапасахОстатки.ТипДвижения
		|			И ДвиженияПотребностьВЗапасахИзменение.Склад = ПотребностьВЗапасахОстатки.Склад
		|			И ДвиженияПотребностьВЗапасахИзменение.ЗаказПокупателя = ПотребностьВЗапасахОстатки.ЗаказПокупателя
		|			И ДвиженияПотребностьВЗапасахИзменение.ЗаказНаПроизводство = ПотребностьВЗапасахОстатки.ЗаказНаПроизводство
		|			И ДвиженияПотребностьВЗапасахИзменение.Номенклатура = ПотребностьВЗапасахОстатки.Номенклатура
		|			И ДвиженияПотребностьВЗапасахИзменение.Характеристика = ПотребностьВЗапасахОстатки.Характеристика
		|			И (ЕСТЬNULL(ПотребностьВЗапасахОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДенежныеСредстваВРезервеОстатки.Организация КАК Организация,
		|	ДенежныеСредстваВРезервеОстатки.ТипДенежныхСредств КАК ТипДенежныхСредств,
		|	ДенежныеСредстваВРезервеОстатки.БанковскийСчетКасса КАК БанковскийСчетКассаПредставление,
		|	ДенежныеСредстваВРезервеОстатки.Валюта КАК Валюта,
		|	ДенежныеСредстваВРезервеОстатки.Документ КАК Документ,
		|	ДенежныеСредстваВРезервеОстатки.СуммаОстаток КАК ВРезерве
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваВРезерве.Остатки(&МоментКонтроля, Документ = &СсылкаНаДокумент) КАК ДенежныеСредстваВРезервеОстатки
		|ГДЕ
		|	ДенежныеСредстваВРезервеОстатки.СуммаОстаток < 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияДенежныеСредстваВРезервеИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияДенежныеСредстваВРезервеИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияДенежныеСредстваВРезервеИзменение.БанковскийСчетКасса КАК БанковскийСчетКассаПредставление,
		|	ДвиженияДенежныеСредстваВРезервеИзменение.Валюта КАК ВалютаПредставление,
		|	ДвиженияДенежныеСредстваВРезервеИзменение.ТипДенежныхСредств КАК ТипДенежныхСредствПредставление,
		|	ДвиженияДенежныеСредстваВРезервеИзменение.ТипДенежныхСредств КАК ТипДенежныхСредств,
		|	ЕСТЬNULL(ДенежныеСредстваОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
		|	ЕСТЬNULL(ДенежныеСредстваОстатки.СуммаВалОстаток, 0) КАК ОстатокДенежныхСредств,
		|	ДвиженияДенежныеСредстваВРезервеИзменение.СуммаПередЗаписью КАК СуммаПередЗаписью,
		|	ДвиженияДенежныеСредстваВРезервеИзменение.СуммаПриЗаписи КАК СуммаПриЗаписи,
		|	ДвиженияДенежныеСредстваВРезервеИзменение.СуммаИзменение КАК СуммаИзменение,
		|	ЕСТЬNULL(РезервыПоДокументам.СуммаОстаток, 0) + ЕСТЬNULL(НеснижаемыеОстаткиДенежныхСредствСрезПоследних.СуммаНеснижаемогоОстатка, 0) - ДвиженияДенежныеСредстваВРезервеИзменение.СуммаПриЗаписи КАК ВРезерве,
		|	ЕСТЬNULL(ДенежныеСредстваОстатки.СуммаВалОстаток, 0) КАК СвободныйОстаток
		|ИЗ
		|	ДвиженияДенежныеСредстваВРезервеИзменение КАК ДвиженияДенежныеСредстваВРезервеИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредства.Остатки(&МоментКонтроля, ) КАК ДенежныеСредстваОстатки
		|		ПО ДвиженияДенежныеСредстваВРезервеИзменение.Организация = ДенежныеСредстваОстатки.Организация
		|			И ДвиженияДенежныеСредстваВРезервеИзменение.ТипДенежныхСредств = ДенежныеСредстваОстатки.ТипДенежныхСредств
		|			И ДвиженияДенежныеСредстваВРезервеИзменение.БанковскийСчетКасса = ДенежныеСредстваОстатки.БанковскийСчетКасса
		|			И ДвиженияДенежныеСредстваВРезервеИзменение.Валюта = ДенежныеСредстваОстатки.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НеснижаемыеОстаткиДенежныхСредств.СрезПоследних(&МоментКонтроля, ) КАК НеснижаемыеОстаткиДенежныхСредствСрезПоследних
		|		ПО ДвиженияДенежныеСредстваВРезервеИзменение.ТипДенежныхСредств = НеснижаемыеОстаткиДенежныхСредствСрезПоследних.ТипДенежныхСредств
		|			И ДвиженияДенежныеСредстваВРезервеИзменение.БанковскийСчетКасса = НеснижаемыеОстаткиДенежныхСредствСрезПоследних.БанковскийСчетКасса
		|			И ДвиженияДенежныеСредстваВРезервеИзменение.Валюта = НеснижаемыеОстаткиДенежныхСредствСрезПоследних.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДенежныеСредстваВРезервеОстатки.Организация КАК Организация,
		|			ДенежныеСредстваВРезервеОстатки.ТипДенежныхСредств КАК ТипДенежныхСредств,
		|			ДенежныеСредстваВРезервеОстатки.БанковскийСчетКасса КАК БанковскийСчетКасса,
		|			ДенежныеСредстваВРезервеОстатки.Валюта КАК Валюта,
		|			СУММА(ДенежныеСредстваВРезервеОстатки.СуммаОстаток) КАК СуммаОстаток
		|		ИЗ
		|			РегистрНакопления.ДенежныеСредстваВРезерве.Остатки(&МоментКонтроля, ) КАК ДенежныеСредстваВРезервеОстатки
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ДенежныеСредстваВРезервеОстатки.Организация,
		|			ДенежныеСредстваВРезервеОстатки.ТипДенежныхСредств,
		|			ДенежныеСредстваВРезервеОстатки.БанковскийСчетКасса,
		|			ДенежныеСредстваВРезервеОстатки.Валюта) КАК РезервыПоДокументам
		|		ПО ДвиженияДенежныеСредстваВРезервеИзменение.Организация = РезервыПоДокументам.Организация
		|			И ДвиженияДенежныеСредстваВРезервеИзменение.ТипДенежныхСредств = РезервыПоДокументам.ТипДенежныхСредств
		|			И ДвиженияДенежныеСредстваВРезервеИзменение.БанковскийСчетКасса = РезервыПоДокументам.БанковскийСчетКасса
		|			И ДвиженияДенежныеСредстваВРезервеИзменение.Валюта = РезервыПоДокументам.Валюта
		|ГДЕ
		|	ЕСТЬNULL(ДенежныеСредстваОстатки.СуммаВалОстаток, 0) - (ЕСТЬNULL(НеснижаемыеОстаткиДенежныхСредствСрезПоследних.СуммаНеснижаемогоОстатка, 0) + ЕСТЬNULL(РезервыПоДокументам.СуммаОстаток, 0)) < 0");
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		Запрос.УстановитьПараметр("СсылкаНаДокумент", ДокументСсылкаЗаказПоставщику);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Если НЕ МассивРезультатов[0].Пустой()
			ИЛИ НЕ МассивРезультатов[1].Пустой()
			ИЛИ НЕ МассивРезультатов[2].Пустой()
			ИЛИ НЕ МассивРезультатов[3].Пустой()
			ИЛИ НЕ МассивРезультатов[4].Пустой() Тогда
			ДокументОбъектЗаказПоставщику = ДокументСсылкаЗаказПоставщику.ПолучитьОбъект()
		КонецЕсли;
		
		// Отрицательный остаток учета запасов и затрат.
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[0].Выбрать();
			КонтрольОстатковУНФ.Запасы(ДокументОбъектЗаказПоставщику,
				ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по заказу поставщику.
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
			КонтрольОстатковУНФ.ЗаказыПоставщикам(
				ДокументОбъектЗаказПоставщику, ВыборкаИзРезультатаЗапроса, "", Отказ);
		КонецЕсли;
		
		// Отрицательный остаток потребности в запасах.
		Если НЕ МассивРезультатов[2].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
			КонтрольОстатковУНФ.ПотребностьВЗапасах(
				ДокументОбъектЗаказПоставщику, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по денежным средствам в резерве.
		Если НЕ МассивРезультатов[3].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[3].Выбрать();
			КонтрольОстатковУНФ.ДенежныеСредстваВРезерве(
				ДокументОбъектЗаказПоставщику, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по денежным средствам с учетом резервов.
		Если Не МассивРезультатов[4].Пустой() Тогда //Если остатка денежных средств не хватает, то выводить ошибку по резервам нет смысла
			Если ДокументОбъектЗаказПоставщику.РезервироватьДенежныеСредства Тогда
				ВыборкаИзРезультатаЗапроса = МассивРезультатов[4].Выбрать();
				КонтрольОстатковУНФ.ДенежныеСредстваСУчетомРезервов(
					ДокументОбъектЗаказПоставщику, ВыборкаИзРезультатаЗапроса, Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсПечати

Функция СтрокаКорректноРазмещаетсяНаСтранице(ТабличныйДокумент, ОбластиМакета, Итоги)
	
	ЕстьВсеОбласти = Истина;
	Для каждого ЭлементСтруктуры Из ОбластиМакета Цикл
		
		Если ЭлементСтруктуры.Значение = Неопределено Тогда
			
			ЕстьВсеОбласти = Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьВсеОбласти Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	МассивОбластейМакета = Новый Массив;
	
	МассивОбластейМакета.Добавить(ОбластиМакета.ОбластьМакетаСтрокаТаблицы);
	МассивОбластейМакета.Добавить(ОбластиМакета.ОбластьМакетаИтогоПоСтранице);
	
	Если Итоги.ОбработаноСтрок = Итоги.КоличествоСтрок - 1 Тогда
		
		МассивОбластейМакета.Добавить(ОбластиМакета.ОбластьМакетаИтогоПоДокументу);
		
		Если Итоги.ЕстьСкидки Тогда
			
			МассивОбластейМакета.Добавить(ОбластиМакета.ОбластьМакетаИтогоСкидка);
			
		КонецЕсли;
		
		МассивОбластейМакета.Добавить(ОбластиМакета.ОбластьМакетаПодписи);
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент.ПроверитьВывод(МассивОбластейМакета)
	
КонецФункции

Процедура ДобавитьНовуюСтраницуДокумента(ТабличныйДокумент, ОбластиМакета, Итоги)
	
	Если ОбластиМакета.ОбластьМакетаИтогоПоСтранице <> Неопределено Тогда
		
		ОбластиМакета.ОбластьМакетаИтогоПоСтранице.Параметры.Заполнить(Итоги);
		ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаИтогоПоСтранице);
		
	КонецЕсли;
	
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	Итоги.КоличествоНаСтранице = 0;
	Итоги.СуммаНаСтранице = 0;
	Итоги.НомерСтраницы = Итоги.НомерСтраницы + 1;
	
	Если ОбластиМакета.ОбластьМакетаНомерСтраницы <> Неопределено Тогда
		
		ДанныеПечати = Новый Структура;
		ДанныеПечати.Вставить("ПредставлениеДокумента", Итоги.ПредставлениеДокумента);
		ДанныеПечати.Вставить("ПредставлениеСтраницы", СтрШаблон(НСтр("ru ='Страница %1'"), Итоги.НомерСтраницы));
		
		ОбластиМакета.ОбластьМакетаНомерСтраницы.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаНомерСтраницы);
		
	КонецЕсли;
	
	Если ОбластиМакета.ОбластьМакетаШапкаТаблицы <> Неопределено Тогда
		
		ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаШапкаТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьЗаказПоставщику(ОписаниеПечатнойФормы, МассивОбъектов, ОбъектыПечати)
	Перем ПервыйДокумент, НомерСтрокиНачало, Ошибки;
	
	ТабличныйДокумент = ОписаниеПечатнойФормы.ТабличныйДокумент;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ОписаниеПечатнойФормы.ПолныйПутьКМакету);
	ОбластиМакета = Новый Структура;
	ДанныеПечати = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК Ссылка,
	|	ЗаказПоставщику.Номер КАК Номер,
	|	ЗаказПоставщику.Дата КАК ДатаДокумента,
	|	ЗаказПоставщику.Организация КАК Организация,
	|	ЗаказПоставщику.Контрагент КАК Контрагент,
	|	ЗаказПоставщику.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказПоставщику.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL
	|			ТОГДА ЗаказПоставщику.Ответственный.Наименование
	|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "". "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
	|	КОНЕЦ КАК ОтветственныйПредставление,
	|	ЗаказПоставщику.Организация.Префикс КАК Префикс,
	|	ЗаказПоставщику.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		Содержание КАК Содержание,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПоставщику.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(100))) = """"
	|				ТОГДА ЗаказПоставщику.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ЗаказПоставщику.Запасы.Номенклатура.НаименованиеПолное
	|		КОНЕЦ КАК ПредставлениеНоменклатуры,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Штрихкод КАК Штрихкод,
	|		Номенклатура.Код КАК Код,
	|		Характеристика КАК Характеристика,
	|		ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|		0 КАК СуммаАвтоматическойСкидки,
	|		ВЫБОР
	|			КОГДА ЗаказПоставщику.Запасы.ПроцентСкидкиНаценки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		Сумма КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		ДатаПоступления КАК ДатаПоступления,
	|		ЛОЖЬ КАК НеобходимоВыделитьКакСоставНабора
	|	) КАК ТаблицаЗапасы
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОФизЛицСрезПоследних
	|		ПО ЗаказПоставщику.Ответственный.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Пока Шапка.Следующий() Цикл

		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабличныйДокумент, ПервыйДокумент, НомерСтрокиНачало,
			ДанныеПечати);
		
		//::: Заголовок
		ОбластьЗаголовок = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "Заголовок", "", Ошибки);
		Если ОбластьЗаголовок <> Неопределено Тогда

			НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Шапка.ДатаДокумента,
				Шапка.Номер, Шапка.Префикс);
			ДатаДокумента = Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
			ПредставлениеДокумента = СтрШаблон(НСтр("ru ='Заказ поставщику № %1 от %2'"), НомерДокумента, ДатаДокумента);
			ДанныеПечати.Вставить("ТекстЗаголовка", ПредставлениеДокумента);

			ОбластьЗаголовок.Параметры.Заполнить(ДанныеПечати);
			ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовок,
				Шапка.Ссылка);
			ТабличныйДокумент.Вывести(ОбластьЗаголовок);

		КонецЕсли;
		
		// ::: Поставщик, покупатель
		СведенияОбОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Организация,
			Шапка.ДатаДокумента, , );
		СведенияОбКонтрагенте = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Контрагент,
			Шапка.ДатаДокумента, , );

		ОбластьПокупатель = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "Покупатель", "", Ошибки);
		Если ОбластьПокупатель <> Неопределено Тогда

			ПредставлениеПолучателя = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбОрганизации,
				"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
			ДанныеПечати.Вставить("ПредставлениеПолучателя", ПредставлениеПолучателя);

			ОбластьПокупатель.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьПокупатель);

		КонецЕсли;

		ОбластьПоставщик = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "Поставщик", "", Ошибки);
		Если ОбластьПоставщик <> Неопределено Тогда

			ПредставлениеПоставщика = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбКонтрагенте,
				"ПолноеНаименование,ИНН,КПП,РегистрационныйНомер,ЮридическийАдрес,Телефоны,");
			ДанныеПечати.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);

			ОбластьПоставщик.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьПоставщик);

		КонецЕсли;
		
		// ::: Табличная часть
		ТаблицаЗапасы = Шапка.ТаблицаЗапасы.Выгрузить();

		Итоги = Новый Структура;
		Итоги.Вставить("НомерСтраницы", 1);
		Итоги.Вставить("ЕстьСкидки", (ТаблицаЗапасы.Итог("ЕстьСкидка") <> 0));
		Итоги.Вставить("КоличествоСтрок", 0);
		Итоги.Вставить("ОбработаноСтрок", 0);
		Итоги.Вставить("Количество", 0);
		Итоги.Вставить("КоличествоНаСтранице", 0);
		Итоги.Вставить("Сумма", 0);
		Итоги.Вставить("СуммаНаСтранице", 0);
		Итоги.Вставить("СуммаНДС", 0);
		Итоги.Вставить("Всего", 0);
		Итоги.Вставить("СкидкаПоСтроке", 0);
		Итоги.Вставить("СкидкаПоДокументу", 0);
		Итоги.Вставить("ПредставлениеСкидки", Константы.ПредставлениеСкидкиВПечатнойФорме.Получить());
		Итоги.Вставить("ПредставлениеДокумента", ПредставлениеДокумента);
		Итоги.Вставить("ЕстьСтавкаНольПроцентов", Ложь);

		ИмяОбласти = ?(Итоги.ЕстьСкидки, "ШапкаТаблицыСоСкидкой", "ШапкаТаблицы");
		ОбластиМакета.Вставить("ОбластьМакетаШапкаТаблицы", ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет,
			ИмяОбласти, НСтр("ru ='Шапка таблицы'"), Ошибки));

		ИмяОбласти = ?(Итоги.ЕстьСкидки, "СтрокаСоСкидкой", "Строка");
		ОбластиМакета.Вставить("ОбластьМакетаСтрокаТаблицы", ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет,
			ИмяОбласти, НСтр("ru ='Строка таблицы'"), Ошибки));

		ИмяОбласти = ?(Итоги.ЕстьСкидки, "ИтогоПоСтраницеСоСкидкой", "ИтогоПоСтранице");
		ОбластиМакета.Вставить("ОбластьМакетаИтогоПоСтранице", ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет,
			ИмяОбласти, НСтр("ru ='Итого по странице'"), Ошибки));

		ОбластиМакета.Вставить("ОбластьМакетаНомерСтраницы", ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет,
			"НомерСтраницы", НСтр("ru ='Номер страницы'"), Ошибки));
		ОбластиМакета.Вставить("ОбластьМакетаИтогоПоДокументу", ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет,
			"Итого", "", Ошибки));
		ОбластиМакета.Вставить("ОбластьМакетаИтогоСкидка", ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет,
			"ИтогоСкидка", "", Ошибки));
		ОбластиМакета.Вставить("ОбластьМакетаИтогоКОплате", ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет,
			"ИтогоКОплате", НСтр("ru ='Итого к оплате'"), Ошибки));
		ОбластиМакета.Вставить("ОбластьМакетаСуммаПрописью", ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет,
			"СуммаПрописью", НСтр("ru ='Сумма прописью'"), Ошибки));
		ОбластиМакета.Вставить("ОбластьМакетаПодписи", ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "Подписи",
			"", Ошибки));

		Если ОбластиМакета.ОбластьМакетаШапкаТаблицы <> Неопределено Тогда

			ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаШапкаТаблицы);

		КонецЕсли;

		Если ОбластиМакета.ОбластьМакетаСтрокаТаблицы <> Неопределено Тогда

			Итоги.КоличествоСтрок = ТаблицаЗапасы.Количество();

			ПараметрыНоменклатуры = Новый Структура;

			Для Каждого СтрокаТабличнойЧасти Из ТаблицаЗапасы Цикл

				Если Итоги.КоличествоСтрок <> 0 И СтрокаКорректноРазмещаетсяНаСтранице(ТабличныйДокумент,
					ОбластиМакета, Итоги) = Ложь Тогда

					ДобавитьНовуюСтраницуДокумента(ТабличныйДокумент, ОбластиМакета, Итоги);

				КонецЕсли;

				ДанныеПечати.Очистить();
				ДанныеПечати.Вставить("НомерСтроки", СтрокаТабличнойЧасти.НомерСтроки);
				ДанныеПечати.Вставить("ДатаПоступления", СтрокаТабличнойЧасти.ДатаПоступления);

				ПараметрыНоменклатуры.Очистить();
				ПараметрыНоменклатуры.Вставить("Содержание", СтрокаТабличнойЧасти.Содержание);
				ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры",
					СтрокаТабличнойЧасти.ПредставлениеНоменклатуры);
				ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", СтрокаТабличнойЧасти.Характеристика);
				ПараметрыНоменклатуры.Вставить("ПредставлениеАртикула", СтрокаТабличнойЧасти.Артикул);
				ПараметрыНоменклатуры.Вставить("НеобходимоВыделитьКакСоставНабора",
					СтрокаТабличнойЧасти.НеобходимоВыделитьКакСоставНабора);

				ДанныеПечати.Вставить("ПредставлениеНоменклатуры", ПечатьДокументовУНФ.ПредставлениеНоменклатуры(
					ПараметрыНоменклатуры));
				ДанныеПечати.Вставить("ПредставлениеКодаНоменклатуры",
					ПечатьДокументовУНФ.ПредставлениеКодаНоменклатуры(СтрокаТабличнойЧасти));

				ДанныеПечати.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
				ДанныеПечати.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
				ДанныеПечати.Вставить("Цена", СтрокаТабличнойЧасти.Цена);

				Если Итоги.ЕстьСкидки Тогда

					ДанныеПечати.Вставить("ПредставлениеСкидки", ПечатьДокументовУНФ.ПредставлениеСкидки(
						СтрокаТабличнойЧасти, Итоги));

				КонецЕсли;

				ДанныеПечати.Вставить("Сумма", СтрокаТабличнойЧасти.Сумма);

				Если Итоги.ЕстьСтавкаНольПроцентов = Ложь // Нет смысла проверять каждую строку, если уже нашли...

					И СтрокаТабличнойЧасти.Владелец().Колонки.Найти("СтавкаНДС") <> Неопределено
					И СтрокаТабличнойЧасти.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль() Тогда

					Итоги.ЕстьСтавкаНольПроцентов = Истина;

				КонецЕсли;

				ОбластиМакета.ОбластьМакетаСтрокаТаблицы.Параметры.Заполнить(ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаСтрокаТаблицы);

				Итоги.КоличествоНаСтранице= Итоги.КоличествоНаСтранице + СтрокаТабличнойЧасти.Количество;
				Итоги.Сумма				= Итоги.Сумма + СтрокаТабличнойЧасти.Сумма;
				Итоги.СуммаНаСтранице		= Итоги.СуммаНаСтранице + СтрокаТабличнойЧасти.Сумма;
				Итоги.СуммаНДС			= Итоги.СуммаНДС + СтрокаТабличнойЧасти.СуммаНДС;
				Итоги.Всего				= Итоги.Всего + СтрокаТабличнойЧасти.Всего;
				Итоги.СкидкаПоДокументу	= Итоги.СкидкаПоДокументу + Итоги.СкидкаПоСтроке;

			КонецЦикла;

		КонецЕсли;
		
		// :::Итоги по посл. странице
		Если ОбластиМакета.ОбластьМакетаИтогоПоСтранице <> Неопределено Тогда

			ОбластиМакета.ОбластьМакетаИтогоПоСтранице.Параметры.Заполнить(Итоги);
			ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаИтогоПоСтранице);

		КонецЕсли;
		
		//::: Итого
		Если ОбластиМакета.ОбластьМакетаИтогоПоДокументу <> Неопределено Тогда

			ДанныеПечати.Очистить();
			ДанныеПечати.Вставить("Всего", ПечатьДокументовУНФ.ФорматСумм(Итоги.Сумма));

			ДанныеПечати.Вставить("ЗаголовокНДС", ПечатьДокументовУНФ.ПредставлениеЗаголовкаНДС(Итоги.СуммаНДС,
				Шапка.СуммаВключаетНДС, Ложь, Итоги.ЕстьСтавкаНольПроцентов));
			ДанныеПечати.Вставить("ВсегоНДС", ?(Итоги.СуммаНДС = 0 И Не Итоги.ЕстьСтавкаНольПроцентов, "-",
				ПечатьДокументовУНФ.ФорматСумм(Итоги.СуммаНДС, , "0,00")));

			ОбластиМакета.ОбластьМакетаИтогоПоДокументу.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаИтогоПоДокументу);

		КонецЕсли;
		
		//::: Скидка
		Если Итоги.ЕстьСкидки Тогда

			Если ОбластиМакета.ОбластьМакетаИтогоСкидка <> Неопределено Тогда

				ОбластиМакета.ОбластьМакетаИтогоСкидка.Параметры.Заполнить(Итоги);
				ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаИтогоСкидка);

			КонецЕсли;

		КонецЕсли;
		
		// ::: Итого к оплате
		Если ОбластиМакета.ОбластьМакетаИтогоКОплате <> Неопределено Тогда

			Если Итоги.ЕстьСкидки Тогда
				ЗаголовокВсегоКОплате = НСтр("ru ='Всего к оплате (с учетом скидки):'");
			Иначе
				ЗаголовокВсегоКОплате = НСтр("ru ='Всего к оплате:'");
			КонецЕсли;
			ДанныеПечати.Вставить("ЗаголовокВсегоКОплате", ЗаголовокВсегоКОплате);
			ДанныеПечати.Вставить("ИтогоКОплате", ПечатьДокументовУНФ.ФорматСумм(Итоги.Всего));

			ОбластиМакета.ОбластьМакетаИтогоКОплате.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаИтогоКОплате);

		КонецЕсли;
		
		// ::: Сумма прописью
		Если ОбластиМакета.ОбластьМакетаСуммаПрописью <> Неопределено Тогда

			ШаблонСтроки = НСтр("ru ='Всего наименований %1, на сумму %2'");
			ФорматированнаяСумма = ПечатьДокументовУНФ.ФорматСумм(Итоги.Всего, Шапка.ВалютаДокумента);

			ДанныеПечати.Вставить("ИтоговаяСтрока", СтрШаблон(ШаблонСтроки, Строка(Итоги.КоличествоСтрок),
				ФорматированнаяСумма));
			ДанныеПечати.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(Итоги.Всего,
				Шапка.ВалютаДокумента));

			ОбластиМакета.ОбластьМакетаСуммаПрописью.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаСуммаПрописью);

		КонецЕсли;
		
		//::: Подписи
		Если ОбластиМакета.ОбластьМакетаПодписи <> Неопределено Тогда

			ДанныеПечати.Вставить("ОтветственныйПредставление", Шапка.ОтветственныйПредставление);

			ОбластиМакета.ОбластьМакетаПодписи.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаПодписи);

		КонецЕсли;

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати,
			Шапка.Ссылка);

	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - Массив - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати - СписокЗначений - значение - ссылка на объект;
//                                            представление - имя области, в которой был выведен объект (выходной параметр);
//  ПараметрыВывода - Структура - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	ОписаниеПечатнойФормы = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "ЗаказПоставщику");
	Если ОписаниеПечатнойФормы <> Неопределено Тогда

		ОписаниеПечатнойФормы.ТабличныйДокумент = Новый ТабличныйДокумент;
		ОписаниеПечатнойФормы.ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПоставщику_ЗаказПоставщику";
		ОписаниеПечатнойФормы.ПолныйПутьКМакету = "Документ.ЗаказПоставщику.ПФ_MXL_ЗаказПоставщику";
		ОписаниеПечатнойФормы.СинонимМакета = НСтр("ru ='Заказ поставщику'");

		СформироватьЗаказПоставщику(ОписаниеПечатнойФормы, МассивОбъектов, ОбъектыПечати);

	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	ЭлектроннаяПочтаУНФ.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов,
		КоллекцияПечатныхФорм);

КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаказПоставщику";
	КомандаПечати.Представление = НСтр("ru = 'Заказ поставщику'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Конверт";
	КомандаПечати.Представление = НСтр("ru = 'Конверт'");
	КомандаПечати.Обработчик = "ПечатьДокументовУНФКлиент.ПечатьКонверта";
	КомандаПечати.Порядок = 4;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли