
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ИнвентаризацияЗапасов") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИнвентаризацияЗапасов.Количество - ИнвентаризацияЗапасов.КоличествоУчет КАК Количество
		|ИЗ
		|	Документ.ИнвентаризацияЗапасов.Запасы КАК ИнвентаризацияЗапасов
		|ГДЕ
		|	ИнвентаризацияЗапасов.Ссылка = &ДокументОснование
		|	И ИнвентаризацияЗапасов.Количество - ИнвентаризацияЗапасов.КоличествоУчет > 0");
		
		Запрос.УстановитьПараметр("ДокументОснование", Параметры.Основание);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			НеОткрыватьФорму = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Прослеживаемость
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбновитьОтображениеПрослеживаемости(); 
	КонецЕсли; 
	// Конец Прослеживаемость
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	
	// ГТД и РНПТ
	ИменаТЧИПолей = ГрузовыеТаможенныеДекларацииСервер.ИменаТЧИПолейДляТаблицыЗапасы_БазовыеПоляСПрослеживаемостью();
	ГрузовыеТаможенныеДекларацииСервер.ПриСозданииНаСервереДляДокументаСПрослеживаемостью(ЭтаФорма, ИменаТЧИПолей, КэшЗначений);
	// ГТД и РНПТ
	
	ОбновитьРеквизитыВидимостиФормы();
	
	// Установить основание
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование);
	
	// Сформируем надпись цены.
	СтруктураНадписи = Новый Структура("ВидЦен", Объект.ВидЦен);
	ПредставлениеЦены = СформироватьНадписьЦены(СтруктураНадписи);
	
	// ФО Использовать подсистему Производство.
	УстановитьВидимостьОтФОИспользоватьПодсистемуПроизводство();
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ЭлектронныеВесы", , МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Запасы");
	
	// Серии номенклатуры
	ИспользоватьСерииНоменклатурыОстатки = СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки();
	Элементы.ЗапасыГруппаСерииНоменклатуры.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
	ЗаполнитьСписокДокументОснование();
	
	// Характеристики
	НоменклатураВДокументахСервер.ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик(ЭтаФорма);
	Если Параметры.Ключ.Пустая()
		Тогда
		НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект, Истина)
	КонецЕсли;
	
	// ИнтеграцияГосИС
	СобытияФормИС.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура);
	ШтрихкодированиеИС.ИнициализироватьКэшМаркируемойПродукции(ЭтаФорма);
	// Конец ИнтеграцияГосИС
	
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ОприходованиеЗапасов", НастройкиФормыВыбораНоменклатуры);
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НеОткрыватьФорму Тогда
		Отказ = Истина;
	КонецЕсли;
	
	УправлениеФормой();
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование

КонецПроцедуры // ПриЗакрытии()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Данные = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище = Параметр;
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, "Запасы", Истина, Истина);
		
	ИначеЕсли ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ИзменилосьКоличество = ПолучитьСерииНоменклатурыИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки);
		Если ИзменилосьКоличество Тогда
			РассчитатьСуммуВСтрокеТабличнойЧасти();
		КонецЕсли; 
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Запасы");
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// ИнтеграцияГосИС
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КэшированныеЗначения",    Неопределено);
	ДополнительныеПараметры.Вставить("СтандартнаяОбработка",    Истина);
	ДополнительныеПараметры.Вставить("ТребуетсяСерверныйВызов", Ложь);
	СобытияФормИСКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
	// Конец ИнтеграцияГосИС

КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// Прослеживаемость
	Если ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаПодбораРНПТ" Тогда
		ОбработкаВыбораРНПТННаКлиенте(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаВыбора" Тогда
		ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение);
	КонецЕсли;	
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	// Прослеживаемость
	ОбновитьОтображениеПрослеживаемости(); 
	// Конец Прослеживаемость
	
	// ИнтеграцияГосИС
	СобытияФормИС.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец ИнтеграцияГосИС
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);	
	// Конец Обсуждения
	
	// ИнтеграцияГосИС
	СобытияФормИС.ПослеЗаписиНаСервере(ЭтаФорма);
	// Конец ИнтеграцияГосИС
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	// Прослеживаемость
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла; 
	// Конец Прослеживаемость
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ОбработатьИзменениеДатыНаСервереИВернутьДанныеИзИБ(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
	Компания = СтруктураДанные.Компания;
	ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	ОбновитьРеквизитыВидимостиФормы();
	УправлениеФормой();
	ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
	
КонецПроцедуры // СтруктурнаяЕдиницаПриИзменении()

&НаКлиенте
Процедура СтруктурнаяЕдиницаОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.СтруктурнаяЕдиница.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаОткрытие()

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Модифицированность = Истина;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		ЗаполнитьПоОснованиюНачало();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		// Выбрать основание
		СтруктураПараметровОтбора = Новый Структура();
		_ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		
		Если СписокДокументОснование.Количество()>1 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТипаОснованияЗавершение", ЭтотОбъект);
			ПоказатьВыборИзМеню(ОписаниеОповещения, СписокДокументОснование, Элементы.ДокументОснованиеНадпись);
		Иначе
			ОткрытьФорму("Документ.ИнвентаризацияЗапасов.ФормаВыбора", СтруктураПараметровОтбора, ЭтотОбъект, ,,,_ОповещениеОЗакрытии);
		КонецЕсли; 
		
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда
		
		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоСсылке(Объект.ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипаОснованияЗавершение(ВыбранноеИмяФормы, Параметры) Экспорт
	
	Если ВыбранноеИмяФормы<>Неопределено Тогда
		
		СтруктураПараметровОтбора = Новый Структура();
		_ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ОткрытьФорму(ВыбранноеИмяФормы.Значение, СтруктураПараметровОтбора, ЭтотОбъект, ,,,_ОповещениеОЗакрытии);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДокументОснование()
	
	СписокДокументОснование.Добавить("Документ.ИнвентаризацияЗапасов.ФормаВыбора", НСтр("ru = 'Инвентаризация запасов'"));
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРемонты") Тогда
		СписокДокументОснование.Добавить("Документ.ПриемИПередачаВРемонт.ФормаВыбора", НСтр("ru = 'Прием и передача в ремонт'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦены(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦены();
	Модифицированность = Истина;
	
КонецПроцедуры // РедактироватьЦены()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		
	КонецЕсли;
	
	СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанные);
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = Неопределено;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
			СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
			СтруктураВыбораНоменклатуры.Партия = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
		КонецЕсли;
	КонецЕсли;
	// Конец Партии
	
	СтрокаТабличнойЧасти.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
	
	// Прослеживаемость
	Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
	Иначе
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
	КонецЕсли; 
	// Конец Прослеживаемость
	
	ПодборНоменклатурыИзСписка = Ложь;
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗапасыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ОприходованиеЗапасов", НастройкиФормыВыбораНоменклатуры, Истина, "Запасы", ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("СтранаПроисхождения",	СтрокаТабличнойЧасти.СтранаПроисхождения);
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	КонецЕсли; 
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = Неопределено;
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры // ЗапасыХарактеристикаПриИзменении()

&НаКлиенте
Процедура ЗапасыПартияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("СтранаПроисхождения", СтрокаТабличнойЧасти.СтранаПроисхождения);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = Неопределено;
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;	
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли; 		
	
	// Сумма.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры // ЗапасыЕдиницаИзмеренияОбработкаВыбора()

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры // ТоварыКоличествоЕдиницПриИзменении()

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы["Запасы"].ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат 
	КонецЕсли;
	
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
		
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СтрокаТабличнойЧасти.Цена = ?(СтрокаТабличнойЧасти.Количество = 0, 0, СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество);

КонецПроцедуры // ЗапасыСуммаПриИзменении()

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.КлючСвязи = 0;
		Элемент.ТекущиеДанные.СерииНоменклатуры = "";
		Элемент.ТекущиеДанные.ИдентификаторСтроки = "";
		Элемент.ТекущиеДанные.РНПТ = "";
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, Элемент.ТекущиеДанные);
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗапасыСерииНоменклатуры" Тогда
		ОткрытьПодборСерииНоменклатуры();
	КонецЕсли;
	
	ЭтоНоваяСтрокаЗапасы = НоваяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ЭтоНоваяСтрокаЗапасы = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	// Подчиненные табличные части
	Если НЕ Отказ Тогда
		Для Каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
			// Серии номенклатуры
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанныеСтроки,
				ИспользоватьСерииНоменклатурыОстатки);
			// Прослеживаемость
			УдалитьСвязанныеЗаписи(ТекущиеДанныеСтроки);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтранаПроисхожденияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если КэшЗначений.УчетГТД Тогда
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения)
			ИЛИ СтрокаТабличнойЧасти.СтранаПроисхождения = КэшЗначений.Россия Тогда
			
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРНПТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРНПТОчистка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
			УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
		Иначе
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		КонецЕсли;
		
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	// Прослеживаемость
	Если Поле = Элементы.ЗапасыРНПТ И СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
		ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Запасы");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриАктивизацииЯчейки(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат 
	КонецЕсли;
	
	// Прослеживаемость
	Если ЭтоНоваяСтрокаЗапасы
		И Элементы.Запасы.ТекущийЭлемент = Элементы.ЗапасыРНПТ 
		И Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.РНПТ) Тогда
		ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Запасы");
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДекорацияПечатьНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияРеквизитовПечати", ЭтотОбъект);
	ОткрытьФорму("Обработка.РеквизитыПечати.Форма.РеквизитыПечатиОприходованиеЗапасов", Новый Структура("КонтекстПечати", Объект), ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимГТД(Команда)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыРежимГТД", "Пометка", НЕ Элементы.ЗапасыРежимГТД.Пометка);
	
	ИзменитьРежимРаботаГТД(Элементы.ЗапасыРежимГТД.Пометка);
	
КонецПроцедуры

#Область ИнтеграцияИС

// ИнтеграцияИС

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПолеИнтеграцииИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)

	ИнтеграцияИСКлиент.ОбработкаНавигационнойСсылкиВФормеДокументаОснования(
		ЭтотОбъект, Объект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры
// Конец ИнтеграцияИС

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов()
	ДополнительныеСвойства = Новый Структура("ИзменениеКлючевыхРеквизитов", Истина);
	СерииНоменклатурыУНФ.ЗаполнитьПризнакиИспользованияСерий(Объект, ДополнительныеСвойства);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияРеквизитовПечати(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ПечатьДокументовУНФКлиент.ОбновитьЗначенияРеквизитовПечати(ЭтотОбъект, Результат.ИзмененныеРеквизиты);
		
		Если Результат.Свойство("Команда") Тогда
			
			Подключаемый_ВыполнитьКоманду(Результат.Команда);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьИзменениеДатыНаСервереИВернутьДанныеИзИБ(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", ДокументыУНФ.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением));
	
	// Прослеживаемость
	КэшЗначений.Вставить("ВестиУчетПрослеживаемыхТоваров", ПрослеживаемостьУНФ.ВедетсяУчетПрослеживаемыхТоваров(Объект.Дата));
	ОбновитьПризнакПрослеживаемости();
	// Конец Прослеживаемость
	
	Возврат СтруктураДанные;
	
КонецФункции // ОбработатьИзменениеДатыНаСервереИВернутьДанныеИзИБ()

&НаСервереБезКонтекста
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", Константы.УчетПоКомпании.Компания(Организация));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	// Наборы
	СтруктураДанные.Вставить("ЭтоНабор", СтруктураДанные.Номенклатура.ЭтоНабор);
	
	// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",Ложь);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьХарактеристики
		Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура);
		
		Если Не ЗначенияПоУмолчанию = Неопределено
			Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика",ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика), СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
		
		СтруктураДанные.Вставить("ИспользоватьХарактеристики",Истина);
		СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",СтруктураДанные.Номенклатура.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли; 
	// Конец Характеристики
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		СтруктураДанные.Вставить("ВалютаДокумента", Константы.ВалютаУчета.Получить());
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
	Иначе
		СтруктураДанные.Вставить("Цена", 0);
	КонецЕсли;
	
	//Партии
	СтруктураДанные.Вставить("ИспользоватьПартии",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеПартий",Ложь);
	
	Если НЕ СтруктураДанные.Свойство("Партия") Тогда
		СтруктураДанные.Вставить("Партия", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьПартии
		Тогда
		
		Если СтруктураДанные.Свойство("СтатусПартии")
			Тогда
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтруктураДанные.СтатусПартии);
		Иначе
			Если Не СтруктураДанные.Свойство("ВидОперации")
				Тогда
				ВидОперации = Неопределено
			Иначе
				ВидОперации = СтруктураДанные.ВидОперации
			КонецЕсли;
			
			СтатусПартии = НоменклатураВДокументахСервер.СоответствиеВидаОперацииИлиХозОперацииСтатусуПартии(, ВидОперации);
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтатусПартии);
		КонецЕсли;
		
		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		
		Если Не ЗначенияПартииПоУмолчанию = Неопределено
			Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;
		
		СтруктураДанные.Партия = ?(ЗначениеЗаполнено(СтруктураДанные.Партия), СтруктураДанные.Партия, ПартияПоУмолчанию);
		
		СтруктураДанные.ПроверятьЗаполнениеПартий = СтруктураДанные.Номенклатура.ПроверятьЗаполнениеПартий;
		СтруктураДанные.ИспользоватьПартии = Истина;
		
	КонецЕсли;
	// Конец Партии
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьСерииНоменклатуры Тогда
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(СтруктураДанные));
	Иначе
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", 0);
	КонецЕсли;
	
	// Прослеживаемость
	СтруктураДанные.Вставить("ПрослеживаемыйТовар", СтруктураДанные.Номенклатура.ПрослеживаемыйТовар 
		И СтруктураДанные.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас);
	// Конец Прослеживаемость
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", 1);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		СтруктураДанные.Вставить("ВалютаДокумента", Константы.ВалютаУчета.Получить());
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанные.СтранаПроисхождения) Тогда
		СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура;
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()	

&НаСервере
Процедура ЗаполнитьПоДокументу()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(Объект.ДокументОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;	
	
	// Прослеживаемость
	ОбновитьОтображениеПрослеживаемости(); 
	// Конец Прослеживаемость
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры // ЗаполнитьПоДокументу()

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦены()
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПерезаполнитьЦены", Ложь);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	СтруктураПараметров.Вставить("ВидЦен", Объект.ВидЦен);
	ОткрытьФорму("Документ.ОприходованиеЗапасов.Форма.ФормаВыбораВидаЦен", СтруктураПараметров, , , , ,
		Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныЗавершение", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    // 2. Открываем форму "Цены и Валюта".
	СтруктураЦеныИВалюта = Результат;
    
    // 3. Перезаполняем табличную часть "Запасы" если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда

		Объект.ВидЦен = СтруктураЦеныИВалюта.ВидЦен;
        
        // Пересчитываем цены по виду цен.
		Если СтруктураЦеныИВалюта.ПерезаполнитьЦены Тогда
			ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен();
		КонецЕсли;

	КонецЕсли;
    
    // Сформируем надпись цены.
	СтруктураНадписи = Новый Структура("ВидЦен", Объект.ВидЦен);
	ПредставлениеЦены = СформироватьНадписьЦены(СтруктураНадписи);

КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦены()

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦены(СтруктураНадписи)
	
	ТекстНадписи = "";
	
	// Вид цен.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВидЦен) Тогда
		ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидЦен%'");
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидЦен%", СокрЛП(Строка(СтруктураНадписи.ВидЦен)));
	Иначе
		ТекстНадписи = ТекстНадписи + НСтр("ru = 'указать вид цен'");
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции // СформироватьНадписьЦены()

&НаСервереБезКонтекста
Процедура ПолучитьЦеныТабличнойЧастиПоВидуЦенНаСервере(СтруктураДанных, ТабличнаяЧастьДокумента)
	
	СтруктураДанных.Вставить("ВалютаДокумента", Константы.ВалютаУчета.Получить());
	ЦенообразованиеСервер.ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанных, ТабличнаяЧастьДокумента);
	
КонецПроцедуры // ПолучитьЦеныТабличнойЧастиПоВидуЦенНаСервере()

&НаКлиенте
Процедура ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен()
	
	СтруктураДанных = Новый Структура;
	ТабличнаяЧастьДокумента = Новый Массив;
	
	СтруктураДанных.Вставить("Дата", Объект.Дата);
	СтруктураДанных.Вставить("Организация", Компания);
	СтруктураДанных.Вставить("ВидЦен", Объект.ВидЦен);
	Для каждого СтрокаТЧ Из Объект.Запасы Цикл
		
		СтрокаТЧ.Цена = 0;
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Новый Структура();
		СтрокаТабличнойЧасти.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтрокаТабличнойЧасти.Вставить("Характеристика", СтрокаТЧ.Характеристика);
		СтрокаТабличнойЧасти.Вставить("ЕдиницаИзмерения", СтрокаТЧ.ЕдиницаИзмерения);
		СтрокаТабличнойЧасти.Вставить("Цена", 0);
		
		ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
		
	КонецЦикла;
		
	ПолучитьЦеныТабличнойЧастиПоВидуЦенНаСервере(СтруктураДанных, ТабличнаяЧастьДокумента);
		
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаТЧ.Характеристика);
		СтруктураПоиска.Вставить("ЕдиницаИзмерения", СтрокаТЧ.ЕдиницаИзмерения);
		
		РезультатПоиска = Объект.Запасы.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаРезультат Из РезультатПоиска Цикл
			
			СтрокаРезультат.Цена = СтрокаТЧ.Цена;
			СтрокаРезультат.Сумма = СтрокаРезультат.Количество * СтрокаРезультат.Цена;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен()

// ПодключаемоеОборудование
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодамВМассиве(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		МассивДанныхШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если МассивДанныхШтрихкода <> Неопределено
			И МассивДанныхШтрихкода.Количество() <> 0 Тогда
			
			Для Каждого ДанныеШтрихкода Из МассивДанныхШтрихкода Цикл
				
				СтруктураДанныеНоменклатуры = Новый Структура();
				СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
				СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
				СтатусПартии = Новый СписокЗначений;
				СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
				СтруктураДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии);
				Если ЗначениеЗаполнено(СтруктураДанные.ВидЦен) Тогда
					СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);
					СтруктураДанныеНоменклатуры.Вставить("Организация", СтруктураДанные.Организация);
					СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
					СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", Константы.ВалютаУчета.Получить());
					СтруктураДанныеНоменклатуры.Вставить("ВидЦен", СтруктураДанные.ВидЦен);
					Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения)
						И ТипЗнч(ДанныеШтрихкода.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
						СтруктураДанныеНоменклатуры.Вставить("Коэффициент", ДанныеШтрихкода.ЕдиницаИзмерения.Коэффициент);
					Иначе
						СтруктураДанныеНоменклатуры.Вставить("Коэффициент", 1);
					КонецЕсли;
				КонецЕсли;
				
				ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
				
				Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
					ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из Метаданные.Документы.ОприходованиеЗапасов.ТабличныеЧасти.Запасы.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение", ЭтотОбъект, Новый Структура("СтруктураДанные",СтруктураДанные));
			
			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам", ПараметрыОткрытия, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено 
			ИЛИ ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры,ЭтоНабор"
			, ТекШтрихкод.Штрихкод, ДанныеШтрихкода[0].Номенклатура, ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры, ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ЭтоНабор));
		Иначе
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.ЕдиницаИзмерения));
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				НоваяСтрока = Объект.Запасы.Добавить();
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
				
				// Прослеживаемость
				НоваяСтрока.СтранаПроисхождения = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтранаПроисхождения;
				Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
					НоваяСтрока.ПрослеживаемыйТовар = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПрослеживаемыйТовар;
					ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока);
				Иначе
					НоваяСтрока.ПрослеживаемыйТовар = Ложь;
				КонецЕсли;
				// Конец Прослеживаемость
				
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				
			Иначе
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
			Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры) Экспорт
	
	Если СтруктураНоменклатуры = Неопределено Тогда Возврат КонецЕсли;
	
	ДанныеШтрихкода = СтруктураНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = СтруктураНоменклатуры.ТекШтрихкод;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	СтруктураДанные = Параметры.СтруктураДанные;
	
	Если СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено ИЛИ ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
		ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры,ЭтоНабор", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор));
	Иначе
		МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.ЕдиницаИзмерения));
		Если МассивСтрокТЧ.Количество() = 0 Тогда
			НоваяСтрока = Объект.Запасы.Добавить();
			НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
			НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
			НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
			НоваяСтрока.Количество = ТекШтрихкод.Количество;
			НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
			НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
			НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
			
			// Прослеживаемость
			НоваяСтрока.СтранаПроисхождения = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтранаПроисхождения;
			Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
				НоваяСтрока.ПрослеживаемыйТовар = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПрослеживаемыйТовар;
				ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока);
			Иначе
				НоваяСтрока.ПрослеживаемыйТовар = Ложь;
			КонецЕсли;
			// Конец Прослеживаемость
			
			Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			
		Иначе
			НоваяСтрока = МассивСтрокТЧ[0];
			НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
			НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
			Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
		Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
			СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов) Экспорт
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов);
	НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект,,,,Оповещение
		);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияХарактеристик()
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		Если ТекНекорректныйШтрихкод.Свойство("ЭтоНабор") И ТекНекорректныйШтрихкод.ЭтоНабор Тогда
			// Наборы
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", НСтр("ru = 'Набор'"));
		Иначе
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		КонецЕсли; 
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

&НаКлиенте
Процедура ВключитьРежимРаботаГТД()
	
	НеизменяемыеРеквизиты = Новый Массив;
	НеизменяемыеРеквизиты.Добавить("ЗапасыПометка");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНомерСтроки");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНоменклатура");
	НеизменяемыеРеквизиты.Добавить("ЗапасыХарактеристика");
	НеизменяемыеРеквизиты.Добавить("ЗапасыПартия");
	НеизменяемыеРеквизиты.Добавить("ЗапасыКоличество");
	НеизменяемыеРеквизиты.Добавить("ЗапасыЕдиницаИзмерения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыСтранаПроисхождения");
	ПрослеживаемостьФормыКлиентСерверУНФ.ДобавитьНеизменяемыеРеквизитыДляРежимаГТД(НеизменяемыеРеквизиты);
	
	Для каждого ЭлементФормы Из Элементы.Запасы.ПодчиненныеЭлементы Цикл
		
		Если НеизменяемыеРеквизиты.Найти(ЭлементФормы.Имя) = Неопределено
			И ЭлементФормы.Видимость = Истина Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементФормы.Имя, "Видимость", Ложь);
			КэшЗначений.ОбрабатываемыеРеквизиты.Добавить(ЭлементФормы.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЕдиницаИзмерения", "Доступность", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьРежимРаботаГТД()
	
	Для каждого ИмяЭлементаФормы Из КэшЗначений.ОбрабатываемыеРеквизиты Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлементаФормы, "Видимость", Истина);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЕдиницаИзмерения", "Доступность", Истина);
	
	КэшЗначений.ОбрабатываемыеРеквизиты = Новый Массив;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимРаботаГТД(ВключитьРежимГТД)
	
	Если КэшЗначений = Неопределено Тогда
		
		КэшЗначений = Новый Структура;
		
	КонецЕсли;
	
	Если НЕ КэшЗначений.Свойство("ОбрабатываемыеРеквизиты") Тогда
		
		КэшЗначений.Вставить("ОбрабатываемыеРеквизиты", Новый Массив);
		
	КонецЕсли;
	
	Если ВключитьРежимГТД Тогда
		
		ВключитьРежимРаботаГТД();
		
	Иначе
		
		ВыключитьРежимРаботаГТД();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбранноеЗначение, Параметры) Экспорт

	Если ВыбранноеЗначение<>Неопределено Тогда
		Объект.ДокументОснование = ВыбранноеЗначение;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбранноеЗначение);
		Модифицированность = Истина;
		
		ЗаполнитьПоОснованиюНачало();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало() Экспорт

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения, 
		НСтр("ru = 'Заполнить документ по выбранному основанию?'"), 
		РежимДиалогаВопрос.ДаНет, 0);		

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ЗаполнитьПоДокументу();		
    КонецЕсли;

КонецПроцедуры  // ЗаполнитьВыполнить()

&НаСервере
Процедура УправлениеФормой()
	
	Если (ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница)
		И НЕ ОрдерныйСклад) И УчетПоЯчейкам Тогда
		
		Элементы.Ячейка.Видимость = Истина;
		Элементы.СтруктурнаяЕдиница.АвтоМаксимальнаяШирина = Ложь;
		
	Иначе
		
		Элементы.Ячейка.Видимость = Ложь;
		Элементы.СтруктурнаяЕдиница.АвтоМаксимальнаяШирина = Истина;
		
	КонецЕсли;
	
	Объект.ПодписьКладовщика = Объект.СтруктурнаяЕдиница.ПодписьМОЛ;
	
	// Прослеживаемость
	ПрослеживаемостьФормыКлиентСерверУНФ.НастроитьВидимостьКолонокРНПТ(ЭтотОбъект);
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОтФОИспользоватьПодсистемуПроизводство()
	
	// Производство.
	Если Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство.Получить() Тогда
		
		// Установка способа выбора структурной единицы в зависимости от ФО.
		Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить()
			И НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
			
			Элементы.СтруктурнаяЕдиница.РежимВыбораИзСписка = Истина;
			Элементы.СтруктурнаяЕдиница.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
			Элементы.СтруктурнаяЕдиница.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
			
		КонецЕсли;
		
	Иначе
		
		Если Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
			
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Склад);
			НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Розница);
			МассивТипыСтруктурныхЕдиниц = Новый ФиксированныйМассив(НовыйМассив);
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтруктурнойЕдиницы", МассивТипыСтруктурныхЕдиниц);
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			
			Элементы.СтруктурнаяЕдиница.ПараметрыВыбора = НовыеПараметры;
			
		Иначе
			
			Элементы.СтруктурнаяЕдиница.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьОтФОИспользоватьПодсистемуПроизводство()

&НаСервере
Процедура ОбновитьРеквизитыВидимостиФормы()
	
	СтрокаРеквизитов = "ТипСтруктурнойЕдиницы, ОрдерныйСклад";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СтруктурнаяЕдиница, СтрокаРеквизитов);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначенияРеквизитов, СтрокаРеквизитов);
	
	УчетПоЯчейкам = ПолучитьФункциональнуюОпцию("УчетПоЯчейкам");
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	
	ВставитьСтроки("Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Подбор

&НаКлиенте
Процедура Подбор(Команда)

	ИмяТабличнойЧасти = "Запасы";
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);

КонецПроцедуры // ПодборВыполнить()

&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	// Перенесем полученные позиции из подбора в ТЧ
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		СтруктураДанныеНоменклатуры = Новый Структура();
		СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
		СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
		СтатусПартии = Новый СписокЗначений;
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		СтруктураДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии);
		
		СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанныеНоменклатуры);
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
		
		// Характеристики
		НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
		
		Если СтруктураДанные.ИспользоватьХарактеристики
			Тогда
			НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
		// Конец Характеристики
		
		//Партии
		НоваяСтрока.ИспользоватьПартии = СтрокаЗагрузки.Номенклатура.ИспользоватьПартии;
		НоваяСтрока.ПроверятьЗаполнениеПартий = СтрокаЗагрузки.Номенклатура.ПроверятьЗаполнениеПартий;
		
		ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтрокаЗагрузки.Номенклатура,ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		
		НоваяСтрока.Партия = ?(ЗначениеЗаполнено(СтрокаЗагрузки.Партия), СтрокаЗагрузки.Партия, ЗначенияПартииПоУмолчанию);;
		// Конец Партии
		
		НоваяСтрока.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
		ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТабличнойЧасти], НоваяСтрока, "КлючСвязи");
		
		// Прослеживаемость
		НоваяСтрока.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
		Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
			НоваяСтрока.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
			ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока);
		Иначе
			НоваяСтрока.ПрослеживаемыйТовар = Ложь;
		КонецЕсли;
		// Конец Прослеживаемость
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)

	ТекШтрихкод = "";

	ОбработкаЗавершения = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект,
		Новый Структура("ТекШтрихкод", ТекШтрихкод));

	#Если МобильныйКлиент Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду", , , , , , ОбработкаЗавершения);
	#Иначе
		ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкоду()

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, "Запасы");
	
КонецПроцедуры // ПолучитьВес()

&НаКлиенте
Процедура ПолучитьВесЗавершение(Параметры) Экспорт
	
	СтрокаТабличнойЧасти = Параметры;
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "Запасы");
	ПодключаемоеОборудованиеУНФКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина, ДополнительныеПараметры);
	
КонецПроцедуры

// Конец ПодключаемоеОборудование

#КонецОбласти

#Область РаботаССериямиНоменклатуры

&НаКлиенте
Процедура ЗапасыСерииНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерииНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерииНоменклатуры()
		
	ТекущиеДанныеИдентификатор = Элементы.Запасы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийНоменклатуры = ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор);
	
	ОткрытьФорму("Обработка.ПодборСерийНоменклатуры.Форма", ПараметрыСерийНоменклатуры, ЭтотОбъект);

КонецПроцедуры

&НаСервере
Функция ПолучитьСерииНоменклатурыИзХранилища(АдресВоВременномХранилище, КлючСтроки)
	
	Модифицированность = Истина;
	Возврат СерииНоменклатурыУНФ.ПолучитьСерииНоменклатурыИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки);
	
КонецФункции

&НаСервере
Функция ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор)

	Возврат СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатуры(Объект, ЭтотОбъект.УникальныйИдентификатор,
		ТекущиеДанныеИдентификатор, Ложь);

КонецФункции

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияГосИС
&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец ИнтеграцияГосИС

#КонецОбласти

#Область Прослеживаемость

&НаКлиенте
Процедура ОбработкаВыбораРНПТННаКлиенте(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки) Тогда
			СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
		ОбработкаВыбораРНПТННаСервере(СтрокаТабличнойЧасти.ИдентификаторСтроки, ВыбранноеЗначение);
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		// Если в результате выбора пришло только значение,
		// то переложим его в структуру.
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НомераГТД") Тогда
			ВыбранноеЗначение = Новый Структура("НомерГТД", ВыбранноеЗначение);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
			
			ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
			Если ДатаГТД > КонецДня(Объект.Дата) Тогда
				
				ТекстСообщения = НСтр("ru ='Выбранная ГТД датирована более поздней датой, чем текущий документ'");
				ДополнениеТекста = СтрШаблон("Объект.Запасы[%1].РНПТ", СтрокаТабличнойЧасти.ПолучитьИдентификатор());
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , ДополнениеТекста);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРНПТННаСервере(ИдентификаторСтроки, ВыбранноеЗначение)
	
	ПрослеживаемостьФормыУНФ.ОбработкаВыбораРНПТН(ЭтотОбъект, ИдентификаторСтроки, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязанныеЗаписи(СтрокаЗапасы)
	
	СтруктураОтбора = Новый Структура("ИдентификаторСтроки", СтрокаЗапасы.ИдентификаторСтроки);
	МассивСтрокСведенияПрослеживаемости = Объект.СведенияПрослеживаемости.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаТЧ Из МассивСтрокСведенияПрослеживаемости Цикл
		Объект.СведенияПрослеживаемости.Удалить(СтрокаТЧ);
	КонецЦикла;
	ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаЗапасы);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПризнакПрослеживаемости()
	
	ИспользуетсяПрослеживаемость = КэшЗначений.ВестиУчетПрослеживаемыхТоваров;
	ПрослеживаемостьФормыУНФ.ОбновитьПризнакПрослеживаемости(Объект.Запасы, Объект.СведенияПрослеживаемости, ИспользуетсяПрослеживаемость);
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеПрослеживаемости()
	
	ПрослеживаемостьФормыУНФ.ПриСозданииФормы(ЭтотОбъект, КэшЗначений);
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти 

#Область Инициализация

ЭтоНоваяСтрокаЗапасы = Ложь;

#КонецОбласти
