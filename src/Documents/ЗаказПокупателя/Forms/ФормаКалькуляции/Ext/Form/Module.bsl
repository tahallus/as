
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Параметры.Свойство("АдресДанных", АдресДанных) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ОбновитьКэшЗначений();
	
	УстановитьУсловноеОформление();
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(Параметры.АдресДанных);
	ЗаполнитьДанныеФормыПриОткрытии(СтруктураДанных);
	
	Если ДанныеЗаказа.КалькуляцияРассчитана И НЕ ТолькоПросмотр И ДанныеЗаказа.КоличествоВариантовКП>1 Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НомерВариантаКП", 0);
		Строки = ДанныеЗаказа.Калькуляция.НайтиСтроки(СтруктураОтбора);
		Если Строки.Количество()>0 Тогда
			СтрокаСообщения = НСтр("ru = 'Добавлена возможность расчета отдельных калькуляций для каждого варианта коммерческого предложения. Необходимо обновить текущую калькуляцию.'");
			ОбщегоНазначения.СообщитьПользователю(СтрокаСообщения);
			Для каждого СтрокаТабличнойЧасти Из Строки Цикл
				СтрокаТабличнойЧасти.НомерВариантаКП = ТекущийВариантКП;
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли;
	СкрытьКнопкуПечати = Ложь;
	СтруктураДанных.Свойство("ПечатьКалькуляцииСкрыта", СкрытьКнопкуПечати);
	КэшЗначений.Вставить("СкрытьКнопкуПечати", СкрытьКнопкуПечати);
	
	УправлениеФормойПриОткрытии();
	
	ЗаполнитьВидыЦенКалькуляции();
	СостояниеОтображатьСебестоимость = ХранилищеСистемныхНастроек.Загрузить("ЗаказПокупателя", "ОтображатьСебестоимость");
	ОтображатьСебестоимость = (СостояниеОтображатьСебестоимость=Истина ИЛИ СостояниеОтображатьСебестоимость=Неопределено);
	ОтобразитьСебестоимостьСервер();
	
	ПрочитатьДанныеШаблона();
	ЗаполнитьСписокИзделий();
	ПоказанаКалькуляцияЗаказа = Истина;
	Если НЕ ДанныеЗаказа.КалькуляцияРассчитана Тогда
		ОбновитьКалькуляциюСервер();
	Иначе
		ОбновитьФактическиеДанные();
		ВывестиКалькуляцию();
	КонецЕсли;
	ОбновитьКомментарииСпецификаций();

	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтаФорма, "Запасы");

	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ЗаказПокупателя.ТабличныеЧасти.Калькуляция, НастройкиЗагрузкиДанных, ЭтотОбъект, Ложь);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	// МобильныйКлиент
	МобильныйКлиентУНФ.НастроитьФормуОбъектаМобильныйКлиент(Элементы, "КалькуляцияНаФорме");
	// Конец МобильныйКлиент
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ДанныеЗаказа.КалькуляцияРассчитана Тогда
		ПересчитатьФормулыПоШаблону();
	КонецЕсли; 
	
	ВывестиКомментарий();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
			
		АдресЗапасовВХранилище	= Параметр;
		ЕстьХарактеристики 		= Истина;
		ЕстьПартии			= Ложь;
		
		Если МаркерПодбора = "Калькуляция" Тогда
			
			Если НЕ ПустаяСтрока(ТекстОшибкиЖурналаРегистрации) Тогда
				ЗаписатьОшибкуЧтенияДанныхИзХранилища();
			КонецЕсли;
			
			ИмяТабличнойЧасти	= "Калькуляция";
			ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии);
			
			ПересчитатьФормулыПоШаблону();
			Модифицированность = Истина;
			ОбновитьНомераСтрок(КалькуляцияНаФорме);
			
		КонецЕсли;
		
		МаркерПодбора = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ТолькоПросмотр И Модифицированность Тогда
		Модифицированность = Ложь;
	КонецЕсли; 
	
	Если Модифицированность И ЗавершениеРаботы Тогда
		Отказ = Истина;
		ТекстПредупреждения = НСтр("ru = 'При закрытии программы все несохраненные изменения будут утеряны.'");
	ИначеЕсли Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(
		Оповещение, 
		НСтр("ru = 'Сохранить измерения калькуляции?'"), 
		РежимДиалогаВопрос.ДаНетОтмена, , 
		КодВозвратаДиалога.Да, НСтр("ru = 'Калькуляция'"));
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ=КодВозвратаДиалога.Да Тогда
		Отказ = Ложь;
		ПоместитьДанныеКалькуляцииВХранилище(Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
		СтруктураЗакрытия = Новый Структура;
		СтруктураЗакрытия.Вставить("АдресДанных", АдресДанных); 
		Закрыть(СтруктураЗакрытия);
	ИначеЕсли Ответ=КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли; 		
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СкидкаПроцентПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СброситьФлагСкидкиРассчитаны", Истина);
	ПараметрыРасчета.Вставить("СуммаВключаетНДС", ДанныеЗаказа.СуммаВключаетНДС);
	ПараметрыРасчета.Вставить("ИспользоватьМинимальныеЦены", КэшЗначений.ИспользоватьМинимальныеЦены);
	
	Для каждого СтрокаТабличнойЧасти Из ДанныеЗаказа.Запасы Цикл
		Если СтрокаТабличнойЧасти.ЭтоРазделитель ИЛИ СтрокаТабличнойЧасти.НомерВариантаКП<>ТекущийВариантКП Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СкидкаПроцент;
		ТабличныеЧастиУНФКлиент.РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЦикла;
	Если ЭтоЗаказНаряд Тогда
		Для каждого СтрокаТабличнойЧасти Из ДанныеЗаказа.Работы Цикл
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СкидкаПроцент;
			ТабличныеЧастиУНФКлиент.РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти, ПараметрыРасчета);
		КонецЦикла;
	КонецЕсли;    
	
	ЦенообразованиеКлиент.ПоказатьОповещениеПользователяОКорректировкеЦены(ПараметрыРасчета);
	
	Если ПоказанаКалькуляцияЗаказа Тогда
		ОбновитьСкидкиСуммыНаФорме();
	КонецЕсли;
	
	РассчитатьСуммуИПроцентСкидки(ДанныеЗаказа.Запасы, ДанныеЗаказа.Работы, СкидкаСумма, СкидкаПроцент, ТекущийВариантКП);
	ПересчитатьФормулыПоШаблону();
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаСуммаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	РаспределитьСуммуНаСкидки(СкидкаСумма);
	РассчитатьСуммуИПроцентСкидки(ДанныеЗаказа.Запасы, ДанныеЗаказа.Работы, СкидкаСумма, СкидкаПроцент, ТекущийВариантКП);
	ПересчитатьФормулыПоШаблону();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийВариантКППриИзменении(Элемент)
	
	ЗаполнитьСписокИзделий();
	ВывестиКалькуляциюКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетКалькуляцииПоДаннымТЧПриИзменении(Элемент)
	
	Если НЕ ДанныеЗаказа.РасчетКалькуляцииПоДаннымТЧ Тогда
		РасчетКалькуляцииПоДаннымТЧПриИзмененииЗавершение(КодВозвратаДиалога.ОК);
		Возврат;
	КонецЕсли; 
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Источник", ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Работа"));
	Строки = СоставыСпецификаций.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество() = 0 Тогда
		РасчетКалькуляцииПоДаннымТЧПриИзмененииЗавершение(КодВозвратаДиалога.ОК);
	Иначе
		Оповещение = Новый ОписаниеОповещения("РасчетКалькуляцииПоДаннымТЧПриИзмененииЗавершение", ЭтотОбъект, Строки);
		ТекстВопроса = НСтр("ru = 'Были внесены изменения в составы спецификаций. При изменении метода расчета они будут заменены данными табличных частей. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена); 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетКалькуляцииПоДаннымТЧПриИзмененииЗавершение(Ответ, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		ДанныеЗаказа.РасчетКалькуляцииПоДаннымТЧ = Ложь;
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Массив") Тогда
		Для каждого СтрокаСостава Из ДополнительныеПараметры Цикл
			СоставыСпецификаций.Удалить(СтрокаСостава);
		КонецЦикла; 
	КонецЕсли; 
	Модифицированность = Истина;
	РасчетКалькуляцииПоДаннымТЧПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура РасчетКалькуляцииПоДаннымТЧПриИзмененииСервер()
	
	СпособРасчетаСебестоимостиКалькуляцииПриИзмененииСервер();
	РегистрыСведений.НастройкиПользователей.Установить(ДанныеЗаказа.РасчетКалькуляцииПоДаннымТЧ, "РасчетКалькуляцииПоДаннымТЧВЗаказНаряде");
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИзделийПриИзменении(Элемент)
	
	Если ТекущаяСтрокаСостава=-1 Тогда
		ТекущийИдентификатор = -1;
		ТекущийИсточник = ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.ПустаяСсылка");
	Иначе
		СтрокаИзделия = Изделия.НайтиПоИдентификатору(ТекущаяСтрокаСостава);
		Если СтрокаИзделия=Неопределено Тогда
			ТекущаяСтрокаСостава = -1;
			ТекущийИдентификатор = -1;
			ТекущийИсточник = ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.ПустаяСсылка");
		Иначе
			ТекущийИдентификатор = СтрокаИзделия.Идентификатор;
			ТекущийИсточник = СтрокаИзделия.Источник;
		КонецЕсли;
	КонецЕсли; 
	ВывестиКалькуляциюКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаСебестоимостиКалькуляцииПриИзменении(Элемент)
	
	Модифицированность = Истина;
	СпособРасчетаСебестоимостиКалькуляцииПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура СпособРасчетаСебестоимостиКалькуляцииПриИзмененииСервер()
	
	УстановитьВидимостьИДоступность();
	ОбновитьКалькуляциюСервер(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаСебестоимостиКалькуляцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СпособРасчетаСебестоимостиКалькуляции.Подсказка = "";
	
	Если ВыбранноеЗначение=ПредопределенноеЗначение("Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов") Тогда
		СтандартнаяОбработка = Ложь;
		СтруктураОткрытия = Новый Структура;
		СтруктураОткрытия.Вставить("РежимВыбора", Истина);
		СтруктураОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
		СтруктураОткрытия.Вставить("ВидыЦен", ВидыЦенКонтрагентов.ВыгрузитьЗначения());
		ОткрытьФорму("Справочник.ВидыЦенКонтрагентов.Форма.ФормаМножественногоВыбора", СтруктураОткрытия, Элементы.СпособРасчетаСебестоимостиКалькуляции);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.ВидыЦен") Тогда
		ВидЦен = ВыбранноеЗначение;
	КонецЕсли; 
	
	Если ТипЗнч(ВыбранноеЗначение)=Тип("Массив") Тогда
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		ВидыЦенКонтрагентов.ЗагрузитьЗначения(ВыбранноеЗначение);
		ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции = ПредопределенноеЗначение("Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов");
		ОбновитьКалькуляциюСервер(Ложь);
		ЭлементВыбора = Элементы.СпособРасчетаСебестоимостиКалькуляции.СписокВыбора.НайтиПоЗначению(ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции);
		Если НЕ ЭлементВыбора=Неопределено Тогда
			ЭлементВыбора.Представление = ПредставлениеЭлементаВидЦенКонтрагента(ВидыЦенКонтрагентов);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТаблицыФормыКалькуляция

&НаКлиенте
Процедура КалькуляцияНаФормеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбраноПолеПерехода = (Поле=Элементы.КалькуляцияНаФормеНоменклатура
		ИЛИ Поле=Элементы.КалькуляцияНаФормеХарактеристика
		ИЛИ Поле=Элементы.КалькуляцияНаФормеПартия);
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если ТекущийИдентификатор=-1
		И СтрокаТабличнойЧасти.КлючСвязи<>0
		И ЭтоНеизменяемыеДанные(СтрокаТабличнойЧасти.Источник)
		И ВыбраноПолеПерехода Тогда
		Если ИсточникЗапас(СтрокаТабличнойЧасти) Тогда
			СтрокаИсточник = СтрокаПоКлючу(ДанныеЗаказа.Запасы, СтрокаТабличнойЧасти.КлючСвязи);
		ИначеЕсли ИсточникРабота(СтрокаТабличнойЧасти) Тогда
			СтрокаИсточник = СтрокаПоКлючу(ДанныеЗаказа.Работы, СтрокаТабличнойЧасти.КлючСвязи);
		Иначе
			Возврат;
		КонецЕсли; 
		Если СтрокаИсточник=Неопределено Тогда
			Возврат;
		КонецЕсли;
		Идентификатор = СтрокаИсточник.ПолучитьИдентификатор();
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Источник", СтрокаТабличнойЧасти.Источник);
		СтруктураОтбора.Вставить("Идентификатор", Идентификатор);
		СтрокиИзделия = Изделия.НайтиСтроки(СтруктураОтбора);
		Если СтрокиИзделия.Количество()=0 Тогда
			Возврат;
		КонецЕсли; 
		СтандартнаяОбработка = Ложь;
		СтрокаИзделия = СтрокиИзделия[0];
		ТекущийИдентификатор = СтрокаИзделия.Идентификатор;
		ТекущийИсточник = СтрокаИзделия.Источник;
		ТекущаяСтрокаСостава = СтрокаИзделия.ПолучитьИдентификатор();
		ВывестиКалькуляциюКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Копирование Тогда
		Отказ = Истина;	
		НачатьДобавлениеНоменклатуры();
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если Копирование И ЭтоНеизменяемыеДанные(СтрокаТабличнойЧасти.Источник) Тогда
		Отказ = Истина;	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.Номенклатура") Тогда
		СтрокаТабличнойЧасти = КалькуляцияНаФорме.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = ВыбранноеЗначение;
		СтрокаТабличнойЧасти.Количество = 1;
		СтруктураДанные = СтруктураДанныхШапки();
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураДанные, "Характеристика, Спецификация, ЕдиницаИзмерения, СпособПополнения, ТипНоменклатуры, ФиксированнаяСтоимость, НормаВремени, ИспользоватьХарактеристики, ИспользоватьПартии");
		СтрокаТабличнойЧасти.СебестоимостьЕдиницы = СтруктураДанные.СебестоимостьЕдиницы;
		ПересчитатьСебестоимость(СтрокаТабличнойЧасти);
		ВнестиИзмененияВКалькуляцию();
		ПересчитатьФормулыПоШаблону();
		Если СтруктураДанные.ИспользоватьХарактеристики Тогда
			ЭлементТаблицы = Элементы.КалькуляцияНаФормеХарактеристика;
		ИначеЕсли СтруктураДанные.ИспользоватьПартии Тогда
			ЭлементТаблицы = Элементы.КалькуляцияНаФормеПартия;
		ИначеЕсли СтруктураДанные.СпособПополнения=ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Производство") Тогда
			ЭлементТаблицы = Элементы.КалькуляцияНаФормеСпецификация;
		Иначе
			ЭлементТаблицы = Элементы.КалькуляцияНаФормеКоличество;
		КонецЕсли; 
	ИначеЕсли ТипЗнч(ВыбранноеЗначение)=Тип("ПланСчетовСсылка.Управленческий") Тогда 
		СтрокаТабличнойЧасти = КалькуляцияНаФорме.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = ВыбранноеЗначение;
		ВнестиИзмененияВКалькуляцию();
		ЭлементТаблицы = Элементы.КалькуляцияНаФормеСебестоимость;
	Иначе
		Возврат;
	КонецЕсли;
	СтрокаТабличнойЧасти.Источник = ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Прочее");
	
	Элементы.КалькуляцияНаФорме.ТекущаяСтрока = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
	Элементы.КалькуляцияНаФорме.ТекущийЭлемент = ЭлементТаблицы;
	Элементы.КалькуляцияНаФорме.ИзменитьСтроку();
	
	ОбновитьНомераСтрок(КалькуляцияНаФорме);
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти.КлючСвязи = 0;
		СтрокаТабличнойЧасти.Источник = ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Прочее");
		Если НЕ Копирование Тогда
			Если ТекущийИдентификатор=-1 И ТипЗнч(СтрокаТабличнойЧасти.Номенклатура)<>Тип("ПланСчетовСсылка.Управленческий") Тогда
				СтрокаТабличнойЧасти.Номенклатура = ПредопределенноеЗначение("ПланСчетов.Управленческий.ПустаяСсылка");
			ИначеЕсли ТекущийИдентификатор>=0 И ТипЗнч(СтрокаТабличнойЧасти.Номенклатура)<>Тип("СправочникСсылка.Номенклатура") Тогда 
				СтрокаТабличнойЧасти.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
			КонецЕсли; 
		КонецЕсли; 
		ОбновитьНомераСтрок(КалькуляцияНаФорме);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	СтрокаТабличнойЧасти.НеСохранять = Ложь;
	ВнестиИзмененияВКалькуляцию();
	ПересчитатьФормулыПоШаблону();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеПослеУдаления(Элемент)
	
	ВнестиИзмененияВКалькуляцию();
	Если ЗначениеЗаполнено(ДанныеЗаказа.ШаблонКалькуляции) Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Источник", ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Шаблон"));
		Если ДанныеЗаказа.Калькуляция.НайтиСтроки(СтруктураОтбора).Количество()=0 Тогда
			ДанныеЗаказа.ШаблонКалькуляции = Неопределено;
		КонецЕсли; 
	КонецЕсли; 
	ПересчитатьФормулыПоШаблону();
	Модифицированность = Истина;
	ОбновитьНомераСтрок(КалькуляцияНаФорме);
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаТабличнойЧасти = Элементы.КалькуляцияНаФорме.ТекущиеДанные;
	Если ТекущийИдентификатор=-1 Тогда
		СтрокаТабличнойЧасти.Номенклатура = ПредопределенноеЗначение("ПланСчетов.Управленческий.ПустаяСсылка");
	Иначе 
		СтрокаТабличнойЧасти.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	КонецЕсли;
	СтрокаТабличнойЧасти.Себестоимость = 0;
	СтрокаТабличнойЧасти.СебестоимостьЕдиницы = 0;
	СтрокаТабличнойЧасти.Прибыль = СтрокаТабличнойЧасти.Сумма;
	СтрокаТабличнойЧасти.РучноеИзменение = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.КалькуляцияНаФорме.ТекущиеДанные;
	Если СтрокаТабличнойЧасти=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура)<>Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураДанные = СтруктураДанныхШапки();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураДанные, "Характеристика, Спецификация, ЕдиницаИзмерения, СпособПополнения, ТипНоменклатуры, ФиксированнаяСтоимость, НормаВремени, ИспользоватьХарактеристики, ИспользоватьПартии, СебестоимостьЕдиницы");
	СтрокаТабличнойЧасти.РучноеИзменение = Ложь;
	ПересчитатьСебестоимость(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.КалькуляцияНаФорме.ТекущиеДанные;
	Если СтрокаТабличнойЧасти=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанные = СтруктураДанныхШапки();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураДанные, "Спецификация, СебестоимостьЕдиницы");
	СтрокаТабличнойЧасти.РучноеИзменение = Ложь;
	ПересчитатьСебестоимость(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеСпецификацияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.КалькуляцияНаФорме.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаменитьСпецификацию(СтрокаТабличнойЧасти.ПолучитьИдентификатор(), Истина);
	
	СтрокаКомментарий = СтрокаПоКлючу(КомментарииСпецификаций, СтрокаТабличнойЧасти.КлючСвязи);
	Если СтрокаКомментарий <> Неопределено Тогда
		КомментарииСпецификаций.Удалить(СтрокаКомментарий);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.КалькуляцияНаФорме.ТекущиеДанные;
	Если СтрокаТабличнойЧасти=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанные = СтруктураДанныхШапки();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Спецификация", СтрокаТабличнойЧасти.Спецификация);
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СебестоимостьЕдиницы = СтруктураДанные.СебестоимостьЕдиницы;
	СтрокаТабличнойЧасти.РучноеИзменение = Ложь;
	ПересчитатьСебестоимость(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.КалькуляцияНаФорме.ТекущиеДанные;
	Если СтрокаТабличнойЧасти=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьСебестоимость(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеСебестоимостьЕдиницыПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.КалькуляцияНаФорме.ТекущиеДанные;
	Если СтрокаТабличнойЧасти=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьСебестоимость(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.РучноеИзменение = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеСебестоимостьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.КалькуляцияНаФорме.ТекущиеДанные;
	Если СтрокаТабличнойЧасти=Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТабличнойЧасти.Прибыль = СтрокаТабличнойЧасти.Сумма-СтрокаТабличнойЧасти.Себестоимость;
	СтрокаТабличнойЧасти.РучноеИзменение = Истина;
	Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
		Если СтрокаТабличнойЧасти.Количество=0 Тогда
			СтрокаТабличнойЧасти.Количество = 1;
		КонецЕсли;
		Если СтрокаТабличнойЧасти.ТипНоменклатуры=ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Операция")
			И НЕ СтрокаТабличнойЧасти.ФиксированнаяСтоимость Тогда
			Если СтрокаТабличнойЧасти.НормаВремени=0 Тогда
				СтрокаТабличнойЧасти.НормаВремени = 1;
			КонецЕсли;
			СтрокаТабличнойЧасти.СебестоимостьЕдиницы = СтрокаТабличнойЧасти.Себестоимость / (СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.НормаВремени);
		Иначе
			СтрокаТабличнойЧасти.СебестоимостьЕдиницы = СтрокаТабличнойЧасти.Себестоимость / СтрокаТабличнойЧасти.Количество;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.КалькуляцияНаФорме.ТекущиеДанные;
	Если СтрокаТабличнойЧасти=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСкидкуЗапасов(СтрокаТабличнойЧасти);
	РассчитатьСуммуИПроцентСкидки(ДанныеЗаказа.Запасы, ДанныеЗаказа.Работы, СкидкаСумма, СкидкаПроцент, ТекущийВариантКП);

КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеПередУдалением(Элемент, Отказ)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если ЭтоНеизменяемыеДанные(СтрокаТабличнойЧасти.Источник) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если ПоказанаКалькуляцияЗаказа И НЕ Отказ 
		И (СтрокаТабличнойЧасти.СебестоимостьФакт<>0 ИЛИ СтрокаТабличнойЧасти.СтоимостьФакт<>0) Тогда
		// Удаление строки, содержащей фактическую информацию, невозможно
		СтрокаТабличнойЧасти.Количество = 0;
		СтрокаТабличнойЧасти.НормаВремени = 0;
		Если СтрокаТабличнойЧасти.Источник=ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Шаблон") Тогда
			СтрокаТабличнойЧасти.РучноеИзменение = Истина;
		КонецЕсли; 
		ПересчитатьСебестоимость(СтрокаТабличнойЧасти);
		ВнестиИзмененияВКалькуляцию();
		Если СтрокаТабличнойЧасти.Источник<>ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Шаблон") Тогда
			ПересчитатьФормулыПоШаблону();
		КонецЕсли; 
		Модифицированность = Истина;
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеНормаВремениПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.КалькуляцияНаФорме.ТекущиеДанные;
	Если СтрокаТабличнойЧасти=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьСебестоимость(СтрокаТабличнойЧасти);
	
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПриИзмененииКомментария();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("КомментарийЗавершениеВвода", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(Оповещение, Элементы.Комментарий.ТекстРедактирования, НСтр("ru='Комментарий'"));
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КалькуляцияОтображениеСебестоимости(Команда)
	
	ОтображатьСебестоимость = НЕ ОтображатьСебестоимость;
	КалькуляцияОтображениеСебестоимостиСервер();
	
КонецПроцедуры

&НаСервере
Процедура КалькуляцияОтображениеСебестоимостиСервер()
	
	ОтобразитьСебестоимостьСервер();
	ВывестиКалькуляцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуру(Команда)
	
	НачатьДобавлениеНоменклатуры();	
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьДобавлениеНоменклатуры()
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	
	СтруктураОтбора = Новый Структура;
	ТипНоменклатуры = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы.КалькуляцияНаФормеНоменклатура.ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					ТипНоменклатуры.Добавить(ЭлементФиксМассива);
				КонецЦикла; 
			Иначе
				ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	СтруктураОтбора.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	СтруктураОтбора.Вставить("ЭтоНабор", Ложь);
	
	ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыОткрытия, Элементы.КалькуляцияНаФорме,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРасход(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	СтруктураОтбора = Новый Структура;
	ТипыСчетов = Новый Массив;
	ТипыСчетов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСчетов.Расходы"));
	ТипыСчетов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПрочиеРасходы"));
	ТипыСчетов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСчетов.НезавершенноеПроизводство"));
	СтруктураОтбора.Вставить("ТипСчета", Новый ФиксированныйМассив(ТипыСчетов));
	ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
	ОткрытьФорму("ПланСчетов.Управленческий.ФормаВыбора", ПараметрыОткрытия, Элементы.КалькуляцияНаФорме,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКалькуляцию(Команда)
	
	Модифицированность = Истина;
	ОбновитьКалькуляциюСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если ТолькоПросмотр Тогда
		Модифицированность = Ложь;
		Закрыть();
	Иначе
		Отказ = Ложь;
		ПоместитьДанныеКалькуляцииВХранилище(Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
		СтруктураЗакрытия = Новый Структура;
		СтруктураЗакрытия.Вставить("АдресДанных", АдресДанных); 
		Закрыть(СтруктураЗакрытия);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоШаблонуЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	Если ЗначениеЗаполнено(ДанныеЗаказа.ШаблонКалькуляции) Тогда
		ПараметрыОткрытия.Вставить("ТекущаяСтрока", ДанныеЗаказа.ШаблонКалькуляции);
	КонецЕсли; 
	ОткрытьФорму("Справочник.ШаблоныКалькуляций.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуЗавершение(Шаблон, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Шаблон) Тогда
		ДанныеЗаказа.ШаблонКалькуляции = Шаблон;
		ЗаполнитьПоШаблонуЗавершениеСервер();
		Модифицированность = Истина;
	КонецЕсли; 	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШаблонуЗавершениеСервер()
	
	ЗапрещеноИзменениеКалькуляции = Ложь;
	ЗаполнитьПоШаблонуСервер();
	ВывестиКалькуляцию();
	
КонецПроцедуры
 
&НаКлиенте
Процедура Печать(Команда)
	
	СтруктураЗакрытия = Новый Структура;
	Если НЕ ТолькоПросмотр И (Модифицированность ИЛИ НЕ ДанныеЗаказа.КалькуляцияРассчитана) Тогда
		Отказ = Ложь;
		ПоместитьДанныеКалькуляцииВХранилище(Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
		СтруктураЗакрытия.Вставить("АдресДанных", АдресДанных); 
	КонецЕсли;
	СтруктураЗакрытия.Вставить("Распечатать", Истина);
	ВладелецФормы.ПриИзмененииКалькуляции(СтруктураЗакрытия, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяККалькуляцииЗаказа(Команда)
	
	БуферИдентификатор = ТекущийИдентификатор;
	БуферИсточник = ТекущийИсточник;
	
	ТекущаяСтрокаСостава = -1;
	ТекущийИдентификатор = -1;
	ТекущийИсточник = ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.ПустаяСсылка");
	ВывестиКалькуляциюКлиент();
	
	// Восстановление позиции курсора
	СтрокаИсточник = СтрокаИсточник(ДанныеЗаказа, БуферИдентификатор, БуферИсточник);
	Если СтрокаИсточник=Неопределено ИЛИ СтрокаИсточник.КлючСвязи=0 Тогда
		Возврат;
	КонецЕсли;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязи", СтрокаИсточник.КлючСвязи);
	СтруктураОтбора.Вставить("Источник", БуферИсточник);
	СтрокиНаФорме = КалькуляцияНаФорме.НайтиСтроки(СтруктураОтбора);
	Если СтрокиНаФорме.Количество()>0 Тогда
		Элементы.КалькуляцияНаФорме.ТекущаяСтрока = СтрокиНаФорме[0].ПолучитьИдентификатор();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуНоменклатуры(Команда)
	
	СтрокаТабличнойЧасти = Элементы.КалькуляцияНаФорме.ТекущиеДанные;
	Если СтрокаТабличнойЧасти=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		ПоказатьЗначение(, СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЦены(Команда)
	
	Модифицированность = Истина;
	ОбновитьЦеныСервер();
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьКэшЗначений()
	
	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("ДоступныПолныеПрава", Пользователи.ЭтоПолноправныйПользователь());
	КэшЗначений.Вставить("ИспользоватьХарактеристики", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики"));
	КэшЗначений.Вставить("ИспользоватьПартии", ПолучитьФункциональнуюОпцию("ИспользоватьПартии") И ЗаполненРеквизитТЧ(ДанныеЗаказа.Запасы, "Партия"));
	КэшЗначений.Вставить("ИспользоватьЕдиницыИзмерения", ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения"));
	КэшЗначений.Вставить("ИспользоватьТехоперации", ПолучитьФункциональнуюОпцию("ИспользоватьТехоперации"));
	КэшЗначений.Вставить("ИспользоватьЭтапыПроизводства", ПолучитьФункциональнуюОпцию("ИспользоватьЭтапыПроизводства"));
	КэшЗначений.Вставить("ИспользоватьПодсистемуЗарплата", ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуЗарплата"));
	КэшЗначений.Вставить("Префикс", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаказа.Организация, "Префикс"));
	КэшЗначений.Вставить("ИспользоватьМинимальныеЦены", ЦенообразованиеСерверПовтИсп.МинимальныеЦеныИспользуются());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПриОткрытии(СтруктураДанных)
	
	СтруктураДанных.Свойство("ТолькоПросмотр", ТолькоПросмотр);
	СтруктураДанных.Свойство("Ссылка", ЗаказСсылка);
	СтруктураДанных.Свойство("ТекущийВариантКП", ТекущийВариантКП);
	ЗаполнитьЗначенияСвойств(ДанныеЗаказа, СтруктураДанных.ДанныеЗаказа);
	ЭтоЗаказНаряд = (ДанныеЗаказа.ВидОперации=Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд);
	Если НЕ ЗначениеЗаполнено(ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции) Тогда
		ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции = Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоПоследнейЦенеЗакупки;
	ИначеЕсли ТипЗнч(ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции)=Тип("СправочникСсылка.ВидыЦен") Тогда
		ВидЦен = ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции;
		ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции = Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамНоменклатуры;
	КонецЕсли;
	Если ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов Тогда
		ВидыЦенКонтрагентов.ЗагрузитьЗначения(СтруктураДанных.ВидыЦен);
	ИначеЕсли ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамНоменклатуры И СтруктураДанных.ВидыЦен.Количество()>0 Тогда
		ВидЦен = СтруктураДанных.ВидыЦен[0];
		ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции = ВидЦен;
	КонецЕсли; 
	СтруктураДанных.Свойство("СкидкаПроцент", СкидкаПроцент);
	СтруктураДанных.Свойство("СкидкаСумма", СкидкаСумма);
	ДанныеЗаказа.Запасы.Загрузить(СтруктураДанных.Запасы);
	Если СтруктураДанных.Свойство("Работы") Тогда
		ДанныеЗаказа.Работы.Загрузить(СтруктураДанных.Работы);
	КонецЕсли; 
	Если СтруктураДанных.Свойство("Материалы") Тогда
		ДанныеЗаказа.Материалы.Загрузить(СтруктураДанных.Материалы);
	КонецЕсли; 
	Если СтруктураДанных.Свойство("Исполнители") Тогда
		ДанныеЗаказа.Исполнители.Загрузить(СтруктураДанных.Исполнители);
	КонецЕсли; 
	ДанныеЗаказа.Калькуляция.Загрузить(СтруктураДанных.Калькуляция);
	ДанныеЗаказа.ПараметрыДоставки.Загрузить(СтруктураДанных.ПараметрыДоставки);
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаказа.Договор, "РасчетыВУсловныхЕдиницах", Истина) = Истина Тогда
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДанныеЗаказа.Дата, Новый Структура("Валюта", ДанныеЗаказа.ВалютаДокумента));
		КурсДокумента = СтруктураПоВалюте.Курс;
		КратностьДокумента = СтруктураПоВалюте.Кратность;
	Иначе
		КурсДокумента = ДанныеЗаказа.Курс;
		КратностьДокумента = ДанныеЗаказа.Кратность;
	КонецЕсли; 
	
	Если КэшЗначений.ИспользоватьТехоперации Тогда
		ОбновитьСтарыйВариантКалькуляции();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойПриОткрытии()
	
	ЭтоЗаказНаряд = (ДанныеЗаказа.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд"));
	Если ЭтоЗаказНаряд ИЛИ ДанныеЗаказа.КоличествоВариантовКП<=1 Тогда
		Элементы.ТекущийВариантКП.Видимость = Ложь;
	Иначе
		Элементы.ТекущийВариантКП.СписокВыбора.Очистить();
		Для ВариантКП = 1 По ДанныеЗаказа.КоличествоВариантовКП Цикл
			Если ВариантКП = ДанныеЗаказа.ОсновнойВариантКП Тогда
				ПостфиксВарианта = НСтр("ru='(основной)'");
			Иначе
				ПостфиксВарианта = "";
			КонецЕсли;
			ИмяВарианта = СтрШаблон(НСтр("ru='Вариант %1 %2'"), ВариантКП, ПостфиксВарианта);
			Элементы.ТекущийВариантКП.СписокВыбора.Добавить(ВариантКП, ИмяВарианта);
		КонецЦикла; 
	КонецЕсли; 
	
	Если КэшЗначений.СкрытьКнопкуПечати Тогда
		Элементы.ФормаПечать.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ЭтоЗаказНаряд Тогда
		Элементы.РасчетКалькуляцииПоДаннымТЧ.Видимость = Ложь;
	Иначе
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить(Ложь, НСтр("ru = 'По спецификации'")); 
		Если ДанныеЗаказа.ИспользоватьМатериалы И НЕ (ДанныеЗаказа.ИспользоватьЗарплатаИсполнителей И КэшЗначений.ИспользоватьПодсистемуЗарплата) Тогда
			СписокВыбора.Добавить(Истина, НСтр("ru = 'По таблице ""Материалы""'"));
		ИначеЕсли НЕ ДанныеЗаказа.ИспользоватьМатериалы И (ДанныеЗаказа.ИспользоватьЗарплатаИсполнителей И КэшЗначений.ИспользоватьПодсистемуЗарплата) Тогда
			СписокВыбора.Добавить(Истина, НСтр("ru = 'По таблице ""Зарплата""'"));
		ИначеЕсли ДанныеЗаказа.ИспользоватьМатериалы И ДанныеЗаказа.ИспользоватьЗарплатаИсполнителей И КэшЗначений.ИспользоватьПодсистемуЗарплата Тогда
			СписокВыбора.Добавить(Истина, НСтр("ru = 'По таблицам ""Материалы"" и ""Зарплата""'"));
		КонецЕсли;
		Если СписокВыбора.Количество() = 1 Тогда
			Элементы.РасчетКалькуляцииПоДаннымТЧ.Видимость = Ложь;
			ДанныеЗаказа.РасчетКалькуляцииПоДаннымТЧ = СписокВыбора[0].Значение;
		КонецЕсли;
		Элементы.РасчетКалькуляцииПоДаннымТЧ.СписокВыбора.Очистить();
		Для каждого ЭлементСписка Из СписокВыбора Цикл
			Элементы.РасчетКалькуляцииПоДаннымТЧ.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Шрифт", Новый Шрифт(Новый Шрифт, , , Истина));
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "КалькуляцияНаФорме.РучноеИзменение", Истина);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеСебестоимостьЕдиницы.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеСебестоимость.Имя);
	
	// УО запасов
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "КалькуляцияНаФорме.ВложенныйСостав", Истина);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеСебестоимостьЕдиницы.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеСебестоимость.Имя);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "КалькуляцияНаФорме.ИспользоватьХарактеристики", Ложь);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеХарактеристика.Имя);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "КалькуляцияНаФорме.ИспользоватьПартии", Ложь);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеПартия.Имя);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "КалькуляцияНаФорме.СпособПополнения", Перечисления.СпособыПополненияЗапасов.Производство, ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеСпецификация.Имя);
	
	// УО услуг
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "КалькуляцияНаФорме.ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Услуга);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеСпецификация.Имя);
	
	// УО расходов
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "КалькуляцияНаФорме.ТипНоменклатуры", Перечисления.ТипыНоменклатуры.ПустаяСсылка());
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеСпецификация.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеХарактеристика.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеПартия.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеКоличество.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеЕдиницаИзмерения.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеСебестоимостьЕдиницы.Имя);
	
	// Строки запасов
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	СписокИсточников = Новый СписокЗначений;
	СписокИсточников.Добавить(Перечисления.ИсточникиСтрокКалькуляции.Запас);
	СписокИсточников.Добавить(Перечисления.ИсточникиСтрокКалькуляции.Работа);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "КалькуляцияНаФорме.Источник", СписокИсточников, ВидСравненияКомпоновкиДанных.ВСписке);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеНоменклатура.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеХарактеристика.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеПартия.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеКоличество.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеЕдиницаИзмерения.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеПроцентАвтоматическойСкидки.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеСумма.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеПрибыль.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеСебестоимостьЕдиницыФакт.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеСебестоимостьФакт.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеСтоимостьФакт.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеПрибыльФакт.Имя);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	СписокИсточников = Новый СписокЗначений;
	СписокИсточников.Добавить(Перечисления.ИсточникиСтрокКалькуляции.Запас);
	СписокИсточников.Добавить(Перечисления.ИсточникиСтрокКалькуляции.Работа);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "КалькуляцияНаФорме.Источник", СписокИсточников, ВидСравненияКомпоновкиДанных.НеВСписке);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеПроцентСкидкиНаценки.Имя);
	
	// Строки доставки
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	СписокИсточников = Новый СписокЗначений;
	СписокИсточников.Добавить(Перечисления.ИсточникиСтрокКалькуляции.Доставка);
	СписокИсточников.Добавить(Перечисления.ИсточникиСтрокКалькуляции.Зарплата);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "КалькуляцияНаФорме.Источник", СписокИсточников, ВидСравненияКомпоновкиДанных.ВСписке);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеНоменклатура.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеХарактеристика.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеПартия.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеКоличество.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеЕдиницаИзмерения.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеПроцентАвтоматическойСкидки.Имя);
	
	// Операции
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Для операций>'"));
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "КалькуляцияНаФорме.ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Операция, ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ТекущаяСтрокаСостава", 0, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеНормаВремени.Имя);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Не используется>'"));
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "КалькуляцияНаФорме.ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Операция);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "КалькуляцияНаФорме.ФиксированнаяСтоимость", Ложь);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеКоличество.Имя);
	
	// Зарплата по заказ-наряду
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "КалькуляцияНаФорме.НеСохранять", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПоказанаКалькуляцияЗаказа", Ложь);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеНоменклатура.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеХарактеристика.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеПартия.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеСпецификация.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеКоличество.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеЕдиницаИзмерения.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеСебестоимостьЕдиницы.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.КалькуляцияНаФормеСебестоимость.Имя);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступность()
	
	ЕстьФактическиеДанные = (ФактическиеДанные.Количество()>0);
	Элементы.СпособРасчетаСебестоимостиКалькуляции.Видимость = ОтображатьСебестоимость;
	Элементы.КалькуляцияНаФормеЭтап.Видимость = НЕ ПоказанаКалькуляцияЗаказа И КэшЗначений.ИспользоватьЭтапыПроизводства И ЗначениеЗаполнено(ВидПроизводства);
	Элементы.КалькуляцияНаФормеХарактеристика.Видимость = КэшЗначений.ИспользоватьХарактеристики;
	Элементы.КалькуляцияНаФормеПартия.Видимость = ПоказанаКалькуляцияЗаказа И КэшЗначений.ИспользоватьПартии;
	Элементы.КалькуляцияНаФормеНормаВремени.Видимость = КэшЗначений.ИспользоватьТехоперации И НЕ ПоказанаКалькуляцияЗаказа;
	Элементы.КалькуляцияНаФормеЕдиницаИзмерения.Видимость = КэшЗначений.ИспользоватьЕдиницыИзмерения;
	Элементы.КалькуляцияНаФормеСебестоимостьЕдиницы.Видимость = ОтображатьСебестоимость;
	Элементы.КалькуляцияНаФормеСебестоимость.Видимость = ОтображатьСебестоимость;
	Элементы.КалькуляцияНаФормеСумма.Видимость = ПоказанаКалькуляцияЗаказа;
	Элементы.КалькуляцияНаФормеПроцентСкидкиНаценки.Видимость = ПоказанаКалькуляцияЗаказа;
	Элементы.КалькуляцияНаФормеПроцентАвтоматическойСкидки.Видимость = ПоказанаКалькуляцияЗаказа;
	Элементы.КалькуляцияНаФормеПрибыль.Видимость = ПоказанаКалькуляцияЗаказа И ОтображатьСебестоимость;
	Элементы.КалькуляцияНаФормеДобавитьРасход.Видимость = ПоказанаКалькуляцияЗаказа;
	Элементы.КалькуляцияНаФормеЗаполнитьПоШаблону.Видимость = ПоказанаКалькуляцияЗаказа;
	Элементы.КалькуляцияНаФормеСебестоимостьЕдиницыФакт.Видимость = ПоказанаКалькуляцияЗаказа И ЕстьФактическиеДанные И ОтображатьСебестоимость;
	Элементы.КалькуляцияНаФормеСебестоимостьФакт.Видимость = ПоказанаКалькуляцияЗаказа И ЕстьФактическиеДанные И ОтображатьСебестоимость;
	Элементы.КалькуляцияНаФормеПрибыльФакт.Видимость = ПоказанаКалькуляцияЗаказа И ЕстьФактическиеДанные И ОтображатьСебестоимость;
	Элементы.КалькуляцияНаФормеСтоимостьФакт.Видимость = ПоказанаКалькуляцияЗаказа И ЕстьФактическиеДанные;
	
	Элементы.ГруппаПодвалСкидки.Видимость = ПоказанаКалькуляцияЗаказа;
	Элементы.ДекорацияЗаголовокСебестоимость.Видимость = ОтображатьСебестоимость;
	Элементы.ИтогоСебестоимость.Видимость = ОтображатьСебестоимость;
	Элементы.ИтогоСебестоимостьФакт.Видимость = ОтображатьСебестоимость;
	Элементы.ДекорацияЗаголовокПрибыль.Видимость = ОтображатьСебестоимость;
	Элементы.ДекорацияОтступИтогоПрибыль.Видимость = ОтображатьСебестоимость;
	Элементы.ДекорацияОтступИтогоПрибыльФакт.Видимость = ОтображатьСебестоимость;
	Элементы.ИтогоПрибыль.Видимость = ОтображатьСебестоимость;
	Элементы.ИтогоПрибыльФакт.Видимость = ОтображатьСебестоимость;
	
	Элементы.КалькуляцияОтображениеСебестоимости.Картинка = ?(ОтображатьСебестоимость, БиблиотекаКартинок.ВидимостьРазрешена, БиблиотекаКартинок.ВидимостьЗапрещена);
	
	Элементы.КалькуляцияНаФорме.ТолькоПросмотр = ЗапрещеноИзменениеКалькуляции ИЛИ ТолькоПросмотр;
	Элементы.КалькуляцияНаФормеДобавитьНоменклатуру.Доступность = НЕ ЗапрещеноИзменениеКалькуляции И НЕ ТолькоПросмотр;
	Элементы.КалькуляцияНаФормеДобавитьНоменклатуру.Заголовок = ?(ПоказанаКалькуляцияЗаказа, НСтр("ru = 'Добавить номенклатуру'"), НСтр("ru = 'Добавить'"));
	Элементы.КалькуляцияНаФормеДобавитьРасход.Доступность = НЕ ЗапрещеноИзменениеКалькуляции И НЕ ТолькоПросмотр;
	Элементы.КалькуляцияНаФормеПодбор.Доступность = НЕ ЗапрещеноИзменениеКалькуляции И НЕ ТолькоПросмотр;
	Если Элементы.Найти("КалькуляцияНаФормеЗагрузкаДанныхИзВнешнегоИсточника")<>Неопределено Тогда
		Элементы.КалькуляцияНаФормеЗагрузкаДанныхИзВнешнегоИсточника.Доступность = НЕ ЗапрещеноИзменениеКалькуляции И НЕ ТолькоПросмотр;
	КонецЕсли; 
	Элементы.КалькуляцияНаФормеЗаполнитьПоШаблону.Доступность = НЕ ТолькоПросмотр;
	Элементы.КалькуляцияНаФорме.ЦветТекста = ?(ЗапрещеноИзменениеКалькуляции И НЕ ТолькоПросмотр, ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти, Новый Цвет);
	Элементы.СпособРасчетаСебестоимостиКалькуляции.Доступность = НЕ ТолькоПросмотр;
	Элементы.КалькуляцияНаФормеОбновитьКалькуляцию.Доступность = НЕ ТолькоПросмотр;
	Элементы.СкидкаПроцент.Доступность = НЕ ТолькоПросмотр;
	Элементы.СкидкаСумма.Доступность = НЕ ТолькоПросмотр;
	Элементы.Комментарий.ТолькоПросмотр = ТолькоПросмотр ИЛИ ЗапрещеноИзменениеКалькуляции;
	Элементы.СохранитьИзменения.Заголовок = ?(ТолькоПросмотр, НСтр("ru = 'Закрыть'"), НСтр("ru = 'Записать и закрыть'"));
	
	Элементы.ВернутьсяККалькуляцииЗаказа.Видимость = (ТекущийИдентификатор>=0);
	
	Элементы.КалькуляцияНаФормеЗаполнитьПоШаблону.Заголовок =
	?(ЗначениеЗаполнено(ДанныеЗаказа.ШаблонКалькуляции),
	НСтр("ru = 'Использовать другой шаблон'"),
	НСтр("ru = 'Добавить по шаблону'"));
	
	Элементы.ГруппаИтогиФакт.Видимость = ЕстьФактическиеДанные;
	Элементы.ДекорацияФактЗаголовок.Видимость = ЕстьФактическиеДанные;
	
	// Параметры выбора номенклатуры
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Перечисления.ТипыНоменклатуры.Запас);
	МассивТипов.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	МассивТипов.Добавить(Перечисления.ТипыНоменклатуры.Операция);
	Если ПоказанаКалькуляцияЗаказа Тогда
		МассивТипов.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	КонецЕсли;
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Новый ФиксированныйМассив(МассивТипов)));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЭтоНабор", Ложь));
	Элементы.КалькуляцияНаФормеНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьВидыЦенКалькуляции()
	
	Элементы.СпособРасчетаСебестоимостиКалькуляции.СписокВыбора.Очистить();
	Элементы.СпособРасчетаСебестоимостиКалькуляции.СписокВыбора.Добавить(Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоПоследнейЦенеЗакупки, НСтр("ru = 'последней цене закупки'"));
	
	Если ПолучитьФункциональнуюОпцию("УчетЦенКонтрагентов") Тогда
		Элементы.СпособРасчетаСебестоимостиКалькуляции.СписокВыбора.Добавить(
		Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов, 
		ПредставлениеЭлементаВидЦенКонтрагента(ВидыЦенКонтрагентов));
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыЦен.Ссылка,
	|	ВидыЦен.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	НЕ ВидыЦен.ПометкаУдаления
	|	И НЕ ВидыЦен.РассчитыватьАвтоматически
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	Выборка  =Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Элементы.СпособРасчетаСебестоимостиКалькуляции.СписокВыбора.Добавить(Выборка.Ссылка, НСтр("ru = 'виду цен '")+""""+СокрЛП(Выборка.Наименование)+"""");	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеЭлементаВидЦенКонтрагента(ВидыЦенКонтрагентов)
	
	Результат = НСтр("ru = 'цене поставщиков'")+?(ВидыЦенКонтрагентов.Количество()=0, "", " ("+Строка(ВидыЦенКонтрагентов)+")");	
	Если СтрДлина(Результат)>60 Тогда
		Результат = Лев(Результат, 58)+"...";
	КонецЕсли;
	Возврат Результат;
	
КонецФункции 

&НаСервере
Процедура ЗаполнитьСписокИзделий()
	
	Элементы.ТекущаяСтрокаСостава.СписокВыбора.Очистить();
	Если ЭтоЗаказНаряд Тогда
		ТекстЭлементаСписка = НСтр("ru = 'Калькуляция всего заказ-наряда'");		
	Иначе
		ТекстЭлементаСписка = НСтр("ru = 'Калькуляция всего заказа'");		
	КонецЕсли; 
	Элементы.ТекущаяСтрокаСостава.СписокВыбора.Добавить(-1, ТекстЭлементаСписка);
	
	ЭтоЗаказНаряд = (ДанныеЗаказа.ВидОперации=Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд);
	
	ТаблицаЗапасов = Новый ТаблицаЗначений;
	ТаблицаЗапасов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗапасов.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.Спецификации"));
	ТаблицаЗапасов.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	ТаблицаЗапасов.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаЗапасов.Колонки.Добавить("Источник", Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиСтрокКалькуляции"));
	ТаблицаЗапасов.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	ПараметрыНоменклатуры = Новый Структура;
	
	Если ЭтоЗаказНаряд Тогда
		Для каждого Стр Из ДанныеЗаказа.Работы Цикл
			ПараметрыНоменклатуры.Очистить();
			ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", Стр.Номенклатура);
			ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", Стр.Характеристика);
			ИдентификаторСтроки = Стр.ПолучитьИдентификатор();
			НоваяСтрока = ТаблицаЗапасов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
			НоваяСтрока.Идентификатор = ИдентификаторСтроки;
			НоваяСтрока.Источник = Перечисления.ИсточникиСтрокКалькуляции.Работа;
			НоваяСтрока.Сумма = Стр.Всего;
			НоваяСтрока.Представление = ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры);
		КонецЦикла;                                                                                                                                                                                                      
	КонецЕсли; 
	
	Для каждого Стр Из ДанныеЗаказа.Запасы Цикл
		Если Стр.ЭтоРазделитель ИЛИ Стр.НомерВариантаКП<>ТекущийВариантКП Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыНоменклатуры.Очистить();
		ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", Стр.Номенклатура);
		ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", Стр.Характеристика);
		ИдентификаторСтроки = Стр.ПолучитьИдентификатор();
		НоваяСтрока = ТаблицаЗапасов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		НоваяСтрока.Идентификатор = ИдентификаторСтроки;
		НоваяСтрока.Источник = Перечисления.ИсточникиСтрокКалькуляции.Запас;
		НоваяСтрока.Сумма = Стр.Всего;
		НоваяСтрока.Представление = ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры);
	КонецЦикла;                                                                                                                                                                                                      
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Запасы", ТаблицаЗапасов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Запасы.Идентификатор КАК Идентификатор,
	|	Запасы.Источник КАК Источник,
	|	Запасы.Сумма КАК Сумма,
	|	Запасы.Представление КАК Представление,
	|	ВЫРАЗИТЬ(Запасы.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Запасы.Спецификация КАК Справочник.Спецификации) КАК Спецификация
	|ПОМЕСТИТЬ Запасы
	|ИЗ
	|	&Запасы КАК Запасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Запасы.Идентификатор КАК Идентификатор,
	|	Запасы.Источник КАК Источник,
	|	Запасы.Сумма КАК Сумма,
	|	Запасы.Представление КАК Представление,
	|	Запасы.Спецификация КАК Спецификация
	|ИЗ
	|	Запасы КАК Запасы
	|ГДЕ
	|	(Запасы.Номенклатура.СпособПополнения = ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Производство)
	|			ИЛИ Запасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ИЛИ НЕ Запасы.Спецификация = ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка))";
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат.Получить(1).Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Изделия.Добавить();
		НоваяСтрока.Идентификатор = Выборка.Идентификатор;
		НоваяСтрока.Источник = Выборка.Источник;
		Элементы.ТекущаяСтрокаСостава.СписокВыбора.Добавить(НоваяСтрока.ПолучитьИдентификатор(), Выборка.Представление);
	КонецЦикла;
	
	Элементы.ТекущаяСтрокаСостава.Видимость = (Элементы.ТекущаяСтрокаСостава.СписокВыбора.Количество()>1);
	ТекущийИдентификатор = -1;
	ТекущаяСтрокаСостава = -1;
	ТекущийИсточник = Перечисления.ИсточникиСтрокКалькуляции.ПустаяСсылка();
	ПоказанаКалькуляцияЗаказа = Истина;
	
КонецПроцедуры

#Область Итоги

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	ДанныеЗаказа = Форма.ДанныеЗаказа;
	КалькуляцияНаФорме = Форма.КалькуляцияНаФорме;
	ФактическиеДанные = Форма.ФактическиеДанные;
	
	СтруктураИтогов = Новый Структура;
	СтруктураИтогов.Вставить("ИтогоСебестоимость", 0);
	СтруктураИтогов.Вставить("ИтогоСтоимость", 0);
	СтруктураИтогов.Вставить("ИтогоПрибыль", 0);
	СтруктураИтогов.Вставить("ИтогоСебестоимостьФакт", 0);
	СтруктураИтогов.Вставить("ИтогоСтоимостьФакт", 0);
	СтруктураИтогов.Вставить("ИтогоПрибыльФакт", 0);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("НомерВариантаКП", Форма.ТекущийВариантКП);
	
	Если Форма.ПоказанаКалькуляцияЗаказа Тогда
		Для каждого Стр Из ДанныеЗаказа.Запасы Цикл
			Если Стр.ЭтоРазделитель ИЛИ Стр.НомерВариантаКП<>Форма.ТекущийВариантКП Тогда
				Продолжить;
			КонецЕсли;
			СтруктураИтогов.ИтогоСтоимость = СтруктураИтогов.ИтогоСтоимость + Стр.Всего;
		КонецЦикла;
		Если Форма.ЭтоЗаказНаряд Тогда
			Для каждого Стр Из ДанныеЗаказа.Работы Цикл
				СтруктураИтогов.ИтогоСтоимость = СтруктураИтогов.ИтогоСтоимость + Стр.Всего;
			КонецЦикла; 
		КонецЕсли; 
		СтруктураИтогов.ИтогоСтоимость = СтруктураИтогов.ИтогоСтоимость + ДанныеЗаказа.СтоимостьДоставки;
		СтрокиВарианта = ДанныеЗаказа.Калькуляция.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаКалькуляции Из СтрокиВарианта Цикл
			СтруктураИтогов.ИтогоСебестоимость = СтруктураИтогов.ИтогоСебестоимость + СтрокаКалькуляции.Себестоимость;
		КонецЦикла; 
		Для каждого Стр Из КалькуляцияНаФорме Цикл
			СтруктураИтогов.ИтогоСебестоимостьФакт = СтруктураИтогов.ИтогоСебестоимостьФакт + Стр.СебестоимостьФакт;
			СтруктураИтогов.ИтогоСтоимостьФакт = СтруктураИтогов.ИтогоСтоимостьФакт + Стр.СтоимостьФакт;
			СтруктураИтогов.ИтогоПрибыльФакт = СтруктураИтогов.ИтогоПрибыльФакт + Стр.ПрибыльФакт;
		КонецЦикла; 
	Иначе
		ПоРаботам = Ложь;
		Если Форма.ТекущийИсточник=ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Запас") Тогда
			СтрокаИсточник = ДанныеЗаказа.Запасы.НайтиПоИдентификатору(Форма.ТекущийИдентификатор);
		ИначеЕсли Форма.ТекущийИсточник=ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Работа") Тогда
			СтрокаИсточник = ДанныеЗаказа.Работы.НайтиПоИдентификатору(Форма.ТекущийИдентификатор);
			ПоРаботам = Истина;
		Иначе
			СтрокаИсточник = Неопределено;
		КонецЕсли;
		Если СтрокаИсточник<>Неопределено Тогда
			СтруктураИтогов.ИтогоСтоимость = СтрокаИсточник.Всего;
			СтруктураОтбора.Вставить("КлючСвязи", СтрокаИсточник.КлючСвязи);
			СтруктураОтбора.Вставить("Источник", Форма.ТекущийИсточник);
			СтрокиВарианта = ДанныеЗаказа.Калькуляция.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из СтрокиВарианта Цикл
				СтруктураИтогов.ИтогоСебестоимость = СтруктураИтогов.ИтогоСебестоимость + Стр.Себестоимость;
			КонецЦикла;
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", СтрокаИсточник.Номенклатура);
			СтрокиФакт = ФактическиеДанные.НайтиСтроки(СтруктураОтбора);
			Если СтрокиФакт.Количество()>0 Тогда
				Если ПоРаботам Тогда
					СтрокиБазы = ДанныеЗаказа.Работы.НайтиСтроки(СтруктураОтбора);
				Иначе
					СтруктураОтбора.Вставить("НомерВариантаКП", Форма.ТекущийВариантКП);
					СтрокиБазы = ДанныеЗаказа.Запасы.НайтиСтроки(СтруктураОтбора);
				КонецЕсли; 
				БазаКоличество = 0;
				Для каждого СтрокаБазы Из СтрокиБазы Цикл
					Если ПоРаботам Тогда
						КоличествоСтроки = СтрокаБазы.Количество * СтрокаБазы.Кратность * СтрокаБазы.Коэффициент;
					Иначе
						КоличествоСтроки = СтрокаБазы.Количество;
					КонецЕсли; 
					БазаКоличество = БазаКоличество + КоличествоСтроки;
				КонецЦикла; 
				СтрокаФакт = СтрокиФакт[0];
				Если ПоРаботам Тогда
					КоличествоСтроки = СтрокаИсточник.Количество * СтрокаИсточник.Кратность * СтрокаИсточник.Коэффициент;
				Иначе
					КоличествоСтроки = СтрокаИсточник.Количество;
				КонецЕсли; 
				СтруктураИтогов.ИтогоСебестоимостьФакт = ?(БазаКоличество=0, 0, СтрокаФакт.СебестоимостьФакт / БазаКоличество * КоличествоСтроки);
				СтруктураИтогов.ИтогоСтоимостьФакт = ?(БазаКоличество=0, 0, СтрокаФакт.СтоимостьФакт / БазаКоличество * КоличествоСтроки);
			КонецЕсли; 
			СтруктураИтогов.ИтогоПрибыльФакт = СтруктураИтогов.ИтогоСтоимостьФакт - СтруктураИтогов.ИтогоСебестоимостьФакт;
		КонецЕсли; 
	КонецЕсли; 
	СтруктураИтогов.ИтогоПрибыль = СтруктураИтогов.ИтогоСтоимость - СтруктураИтогов.ИтогоСебестоимость;
	
	ЗаполнитьЗначенияСвойств(Форма, СтруктураИтогов);
	
КонецПроцедуры

#КонецОбласти 

#Область Скидки

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуИПроцентСкидки(Запасы, Работы, СкидкаСумма, СкидкаПроцент, ТекущийВариантКП)
	
	ОбщаяСуммаРучнойСкидки	= 0;
	ОбщаяСуммаБезСкидок		= 0;
	
	Для каждого Стр Из Запасы Цикл
		Если Стр.ЭтоРазделитель ИЛИ Стр.НомерВариантаКП<>ТекущийВариантКП Тогда
			Продолжить;
		КонецЕсли;
		ОбщаяСуммаРучнойСкидки = ОбщаяСуммаРучнойСкидки + Стр.СуммаСкидкиНаценки;
		ОбщаяСуммаБезСкидок = ОбщаяСуммаБезСкидок + Стр.Всего + Стр.СуммаСкидкиНаценки + Стр.СуммаАвтоматическойСкидки;
	КонецЦикла;
	
	Для каждого Стр Из Работы Цикл
		ОбщаяСуммаРучнойСкидки = ОбщаяСуммаРучнойСкидки + Стр.СуммаСкидкиНаценки;
		ОбщаяСуммаБезСкидок = ОбщаяСуммаБезСкидок + Стр.Всего + Стр.СуммаСкидкиНаценки + Стр.СуммаАвтоматическойСкидки;
	КонецЦикла;
	
	СкидкаСумма = ОбщаяСуммаРучнойСкидки;
	СкидкаПроцент = ?(ОбщаяСуммаБезСкидок=0, 0, ОбщаяСуммаРучнойСкидки / ОбщаяСуммаБезСкидок * 100);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСкидкуЗапасов(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти.Источник=ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Запас") Тогда
		СтрокаИсточник = СтрокаПоКлючу(ДанныеЗаказа.Запасы, СтрокаТабличнойЧасти.КлючСвязи);
	ИначеЕсли СтрокаТабличнойЧасти.Источник=ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Работа") Тогда
		СтрокаИсточник = СтрокаПоКлючу(ДанныеЗаказа.Работы, СтрокаТабличнойЧасти.КлючСвязи);
	Иначе
		Возврат;
	КонецЕсли; 
	СтрокаИсточник.ПроцентСкидкиНаценки = СтрокаТабличнойЧасти.ПроцентСкидкиНаценки;
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СброситьФлагСкидкиРассчитаны", Истина);
	ПараметрыРасчета.Вставить("СуммаВключаетНДС", ДанныеЗаказа.СуммаВключаетНДС);
	ПараметрыРасчета.Вставить("ИспользоватьМинимальныеЦены", КэшЗначений.ИспользоватьМинимальныеЦены);
	ТабличныеЧастиУНФКлиент.РассчитатьСуммыВСтрокеТЧ(СтрокаИсточник, ПараметрыРасчета);
	СтрокаТабличнойЧасти.Сумма = СтрокаИсточник.Всего;
	СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтрокаИсточник.ПроцентСкидкиНаценки;
	СтрокаТабличнойЧасти.Прибыль = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.Себестоимость;
	ЦенообразованиеКлиент.ПоказатьОповещениеПользователяОКорректировкеЦены(ПараметрыРасчета);

КонецПроцедуры

&НаКлиенте
Процедура РаспределитьСуммуНаСкидки(СуммаРаспределения)
	
	ОбщаяСумма = 0;
	Для каждого СтрокаТабличнойЧасти Из ДанныеЗаказа.Запасы Цикл
		Если СтрокаТабличнойЧасти.ЭтоРазделитель ИЛИ СтрокаТабличнойЧасти.НомерВариантаКП<>ТекущийВариантКП Тогда
			Продолжить;
		КонецЕсли;
		ОбщаяСумма = ОбщаяСумма + СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	КонецЦикла;
	Если ЭтоЗаказНаряд Тогда
		Для каждого СтрокаТабличнойЧасти Из ДанныеЗаказа.Работы Цикл
			ОбщаяСумма = ОбщаяСумма + СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Кратность * СтрокаТабличнойЧасти.Коэффициент;
		КонецЦикла;
	КонецЕсли; 
	
	Если ОбщаяСумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СуммаВключаетНДС", ДанныеЗаказа.СуммаВключаетНДС);
	ПараметрыРасчета.Вставить("ИспользоватьМинимальныеЦены", КэшЗначений.ИспользоватьМинимальныеЦены);
	
	ПроцентСкидки = СуммаРаспределения / ОбщаяСумма * 100;
	
	ОбщаяСуммаСкидки = 0;
	Для каждого СтрокаТабличнойЧасти Из ДанныеЗаказа.Запасы Цикл
		Если СтрокаТабличнойЧасти.ЭтоРазделитель ИЛИ СтрокаТабличнойЧасти.НомерВариантаКП<>ТекущийВариантКП Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = ПроцентСкидки;
		ТабличныеЧастиУНФКлиент.РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти, ПараметрыРасчета);
		ОбщаяСуммаСкидки = ОбщаяСуммаСкидки + СтрокаТабличнойЧасти.СуммаСкидкиНаценки;
	КонецЦикла;
	Если ЭтоЗаказНаряд Тогда
		Для каждого СтрокаТабличнойЧасти Из ДанныеЗаказа.Работы Цикл
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = ПроцентСкидки;
			ТабличныеЧастиУНФКлиент.РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти, ПараметрыРасчета);
			ОбщаяСуммаСкидки = ОбщаяСуммаСкидки + СтрокаТабличнойЧасти.СуммаСкидкиНаценки;
		КонецЦикла;
	КонецЕсли;   
	
	ЦенообразованиеКлиент.ПоказатьОповещениеПользователяОКорректировкеЦены(ПараметрыРасчета);
	
	НепогашеннаяСумма = СуммаРаспределения - ОбщаяСуммаСкидки;
	Если НепогашеннаяСумма <> 0 Тогда
		
		Если КэшЗначений.ИспользоватьМинимальныеЦены Тогда
			
			МинимальнаяСумма = СтрокаТабличнойЧасти.МинимальнаяЦена * СтрокаТабличнойЧасти.Количество;			
			СуммаПоСтроке = СтрокаТабличнойЧасти.Сумма - НепогашеннаяСумма;
			СуммаСтрокиБезСкидки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
			
			Если СуммаПоСтроке < МинимальнаяСумма Тогда
				
				СтрокаТабличнойЧасти.Сумма = МинимальнаяСумма;
				МаксимальнаяСкидкаСумма = СуммаСтрокиБезСкидки- МинимальнаяСумма;
				СтрокаТабличнойЧасти.СуммаСкидкиНаценки = МаксимальнаяСкидкаСумма;
				СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 - (СуммаПоСтроке * 100 / МинимальнаяСумма);
				
			КонецЕсли;
						
		Иначе
			
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = (СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки/100 
				+ НепогашеннаяСумма) / СуммаСтрокиБезСкидки * 100;
			СтрокаТабличнойЧасти.СуммаСкидкиНаценки = СтрокаТабличнойЧасти.СуммаСкидкиНаценки + НепогашеннаяСумма;
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма - НепогашеннаяСумма;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПоказанаКалькуляцияЗаказа Тогда
		ОбновитьСкидкиСуммыНаФорме();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСкидкиСуммыНаФорме()
	
	Для каждого СтрокаТабличнойЧасти Из КалькуляцияНаФорме Цикл
		Если СтрокаТабличнойЧасти.Источник<>ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Запас")
			И СтрокаТабличнойЧасти.Источник<>ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Работа") Тогда
			Продолжить;
		КонецЕсли;
		Если ИсточникЗапас(СтрокаТабличнойЧасти) Тогда
			СтрокаИсточник = СтрокаПоКлючу(ДанныеЗаказа.Запасы, СтрокаТабличнойЧасти.КлючСвязи);
		ИначеЕсли ИсточникРабота(СтрокаТабличнойЧасти) Тогда
			СтрокаИсточник = СтрокаПоКлючу(ДанныеЗаказа.Работы, СтрокаТабличнойЧасти.КлючСвязи);
		Иначе
			Продолжить;
		КонецЕсли; 
		Если СтрокаИсточник=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтрокаИсточник.ПроцентСкидкиНаценки;
		СтрокаТабличнойЧасти.Сумма = СтрокаИсточник.Всего;
		СтрокаТабличнойЧасти.Прибыль = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.Себестоимость;
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти 

&НаСервере
Процедура ОбновитьКалькуляциюСервер(ОбновлятьПоШаблону = Истина)
	
	Если ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамНоменклатуры И НЕ ЗначениеЗаполнено(ВидЦен) Тогда
		Возврат;
	ИначеЕсли ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов И НЕ ЗначениеЗаполнено(ВидыЦенКонтрагентов) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапрещеноИзменениеКалькуляции = Ложь;
	ПоказанаКалькуляцияЗаказа = Истина;
	ЗаполнитьКалькуляцию();
	ОбновитьФактическиеДанные();
	Если ОбновлятьПоШаблону Тогда
		ЗаполнитьПоШаблонуСервер();
	КонецЕсли; 
	ВывестиКалькуляцию();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКалькуляцию()
	
	ТаблицаМатериалов = ПустаяТаблицаМатериалов();
	ТаблицаКэшСебестоимости = ПустаяТаблицаКэшСебестоимости();
	ЗаполнитьТаблицуМатериалов(ТаблицаМатериалов);
	ОтборВидЦен = ОтборПоВидуЦен();
	РассчитатьСебестоимость(ТаблицаМатериалов, ОтборВидЦен, КурсДокумента, КратностьДокумента, ДанныеЗаказа.НалогообложениеНДС, ДанныеЗаказа.Дата, ЗаказСсылка);
	
	СтрокиКУдалению = Новый Массив;
	Для каждого Стр Из ДанныеЗаказа.Калькуляция Цикл
		Если Стр.РучноеИзменение Тогда
			НоваяСтрока = ТаблицаКэшСебестоимости.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		КонецЕсли; 
		Если ЗначениеЗаполнено(Стр.НоменклатураИзделие) Тогда
			СтрокиКУдалению.Добавить(Стр);
		ИначеЕсли ТипЗнч(Стр.Номенклатура)=Тип("СправочникСсылка.Номенклатура") И НЕ Стр.РучноеИзменение Тогда
			// Для добавленных в калькуляцию строк только обновляем себестоимость 
			СтруктураДанные = Новый Структура;
			СтруктураДанные.Вставить("Заказ", ЗаказСсылка);
			СтруктураДанные.Вставить("Дата", ДанныеЗаказа.Дата);
			СтруктураДанные.Вставить("НалогообложениеНДС", ДанныеЗаказа.НалогообложениеНДС);
			СтруктураДанные.Вставить("Курс", КурсДокумента);
			СтруктураДанные.Вставить("Кратность", КратностьДокумента);
			СтруктураДанные.Вставить("ВидыЦен", ОтборВидЦен);
			СтруктураДанные.Вставить("Номенклатура", Стр.Номенклатура);
			СтруктураДанные.Вставить("Характеристика", Стр.Характеристика);
			СтруктураДанные.Вставить("Спецификация", Стр.Спецификация);
			СтруктураДанные.Вставить("ЕдиницаИзмерения", Стр.ЕдиницаИзмерения);
			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
			Стр.СебестоимостьЕдиницы = СтруктураДанные.СебестоимостьЕдиницы;
			Стр.Себестоимость = Стр.СебестоимостьЕдиницы * Стр.Количество;
		КонецЕсли; 
	КонецЦикла; 
	Для каждого Стр Из СтрокиКУдалению Цикл
		ДанныеЗаказа.Калькуляция.Удалить(Стр);
	КонецЦикла; 
	
	// Обновление калькуляции по запасам, работам и материалам
	ИндексВставки = 0;
	Для каждого Стр Из ТаблицаМатериалов Цикл
		СтрокаИсточник = СтрокаИсточник(ДанныеЗаказа, Стр.Идентификатор, Стр.Источник);
		Если СтрокаИсточник=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ИндексВставки <= ДанныеЗаказа.Калькуляция.Количество() Тогда
			НоваяСтрока = ДанныеЗаказа.Калькуляция.Добавить();
		Иначе
			НоваяСтрока = ДанныеЗаказа.Калькуляция.Вставить(ИндексВставки);
			ИндексВставки = ИндексВставки + 1;
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр, "Этап, Источник, Номенклатура, Характеристика, Спецификация, ЕдиницаИзмерения, Количество, НормаВремени, СебестоимостьЕдиницы, Себестоимость");
		Если Стр.Источник = Перечисления.ИсточникиСтрокКалькуляции.Запас Тогда
			НоваяСтрока.НомерВариантаКП = СтрокаИсточник.НомерВариантаКП;
		КонецЕсли; 
		НоваяСтрока.НоменклатураИзделие = СтрокаИсточник.Номенклатура;
		НоваяСтрока.ХарактеристикаИзделие = СтрокаИсточник.Характеристика;
		Если Стр.Источник = Перечисления.ИсточникиСтрокКалькуляции.Запас ИЛИ Стр.Источник=Перечисления.ИсточникиСтрокКалькуляции.Работа Тогда
			НоваяСтрока.СпецификацияИзделие = СтрокаИсточник.Спецификация;
			НоваяСтрока.КлючСвязи = СтрокаИсточник.КлючСвязи;
		КонецЕсли; 
	КонецЦикла;
	
	Если ЭтоЗаказНаряд И ДанныеЗаказа.РасчетКалькуляцииПоДаннымТЧ Тогда
		// Дополнение калькуляции данными о начисленной зарплате
		ТаблицаЗПСвернуто = ДанныеЗаказа.Исполнители.Выгрузить();
		ТаблицаЗПСвернуто.Свернуть("КлючСвязи, ВидНачисленияУдержания", "СуммаНачисления");
		Для каждого СтрокаЗП Из ТаблицаЗПСвернуто Цикл
			СтрокаИсточник = СтрокаПоКлючу(ДанныеЗаказа.Работы, СтрокаЗП.КлючСвязи); 
			Если СтрокаИсточник = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			НоваяСтрока = ДанныеЗаказа.Калькуляция.Добавить();
			НоваяСтрока.Номенклатура = СтрокаЗП.ВидНачисленияУдержания.СчетЗатрат;
			НоваяСтрока.СебестоимостьЕдиницы = СтрокаЗП.СуммаНачисления;
			НоваяСтрока.Себестоимость = СтрокаЗП.СуммаНачисления;
			НоваяСтрока.НоменклатураИзделие = СтрокаИсточник.Номенклатура;
			НоваяСтрока.ХарактеристикаИзделие = СтрокаИсточник.Характеристика;
			НоваяСтрока.СпецификацияИзделие = СтрокаИсточник.Спецификация;
			НоваяСтрока.Источник = Перечисления.ИсточникиСтрокКалькуляции.Работа;
			НоваяСтрока.КлючСвязи = СтрокаИсточник.КлючСвязи;
		КонецЦикла; 
	КонецЕсли; 
	
	// Восстановление себестоимости измененных строк из кэша
	Для каждого СтрКэш Из ТаблицаКэшСебестоимости Цикл
		СтруктураПоиска = Новый Структура("НомерВариантаКП, КлючСвязи, Номенклатура, Характеристика, Спецификация, ЕдиницаИзмерения");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрКэш);
		Строки = ДанныеЗаказа.Калькуляция.НайтиСтроки(СтруктураПоиска);
		Для каждого Стр Из Строки Цикл
			Стр.СебестоимостьЕдиницы = СтрКэш.СебестоимостьЕдиницы;
			Если Стр.Количество=СтрКэш.Количество Тогда
				Стр.Себестоимость = СтрКэш.Себестоимость;
			Иначе
				Если Стр.НормаВремени>0 
					И Стр.НормаВремени<>1 
					И ТипЗнч(Стр.Номенклатура)=Тип("СправочникСсылка.Номенклатура") 
					И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Стр.Номенклатура, "ФиксированнаяСтоимость") Тогда
					Стр.Себестоимость = Стр.СебестоимостьЕдиницы * Стр.Количество * Стр.НормаВремени;
				Иначе
					Стр.Себестоимость = Стр.СебестоимостьЕдиницы * Стр.Количество;
				КонецЕсли; 
			КонецЕсли;
			Стр.РучноеИзменение = Истина;
		КонецЦикла;  
	КонецЦикла;
	
	ПоказатьОшибкиРасчетаСебестоимости();
	
	Если ЗначениеЗаполнено(ДанныеЗаказа.СлужбаДоставки) Тогда
		ОбновитьСебестоимостьДоставки();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЦеныСервер()
	
	ТаблицаМатериалов = ПустаяТаблицаМатериалов();
	ОтборВидЦен = ОтборПоВидуЦен();
	
	Для каждого Стр Из ДанныеЗаказа.Калькуляция Цикл
		
		Если НЕ ТипЗнч(Стр.Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
			Продолжить;
		КонецЕсли;
		
		СтрМатериал = ТаблицаМатериалов.Добавить();
		СтрМатериал.НомерВариантаКП = Стр.НомерВариантаКП;
		СтрМатериал.Номенклатура = Стр.Номенклатура;
		СтрМатериал.Характеристика = Стр.Характеристика;
		СтрМатериал.Спецификация = Стр.Спецификация;
		СтрМатериал.ЕдиницаИзмерения = Стр.ЕдиницаИзмерения;
		СтрМатериал.Количество = 1;
		СтрМатериал.НормаВремени = 1;
		СтрМатериал.НоменклатураСебестоимость = Стр.Номенклатура;
		СтрМатериал.ХарактеристикаСебестоимость = Стр.Характеристика;
		СтрМатериал.СпецификацияСебестоимость = Стр.Спецификация;
		СтрМатериал.ЕдиницаИзмеренияСебестоимость = Стр.ЕдиницаИзмерения;
		СтрМатериал.КоличествоСебестоимость = 1;
		СтрМатериал.Идентификатор = Стр.ПолучитьИдентификатор();
		
	КонецЦикла; 
	
	ТаблицаИзмененийСостава = СоставыСпецификаций.Выгрузить();
	Если ДанныеЗаказа.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд 
		И ДанныеЗаказа.РасчетКалькуляцииПоДаннымТЧ Тогда
		ДополнитьСоставДаннымиТЧ(ТаблицаИзмененийСостава);
		Для каждого СтрокаМатериала Из ТаблицаМатериалов Цикл
			Если ИсточникРабота(СтрокаМатериала) И ЗначениеЗаполнено(СтрокаМатериала.СпецификацияСебестоимость) Тогда
				СтрокаМатериала.СпецификацияСебестоимость = Неопределено;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	Пока ЕстьВложенныеСпецификации(ТаблицаМатериалов) Цикл
		Результат = РазузловатьНоменклатуру(ТаблицаМатериалов, ТаблицаИзмененийСостава);
		Если НЕ Результат Тогда
			Возврат;
		КонецЕсли; 
	КонецЦикла;
	
	РассчитатьСебестоимость(ТаблицаМатериалов, ОтборВидЦен, КурсДокумента, КратностьДокумента, ДанныеЗаказа.НалогообложениеНДС, ДанныеЗаказа.Дата, ЗаказСсылка);
	ТаблицаМатериалов.Свернуть("Идентификатор", "Себестоимость");
	
	Для каждого СтрокаМатериалов Из ТаблицаМатериалов Цикл
		Стр = ДанныеЗаказа.Калькуляция.НайтиПоИдентификатору(СтрокаМатериалов.Идентификатор);
		Стр.СебестоимостьЕдиницы = СтрокаМатериалов.Себестоимость;
		Если Стр.НормаВремени<>0 
			И Стр.НормаВремени<>1 
			И ТипЗнч(Стр.Номенклатура)=Тип("СправочникСсылка.Номенклатура") 
			И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Стр.Номенклатура, "ФиксированнаяСтоимость") Тогда
			Стр.Себестоимость = Стр.СебестоимостьЕдиницы * Стр.Количество * Стр.НормаВремени;
		Иначе
			Стр.Себестоимость = Стр.СебестоимостьЕдиницы * Стр.Количество;
		КонецЕсли; 
		Стр.РучноеИзменение = Ложь;
	КонецЦикла;
	
	ПоказатьОшибкиРасчетаСебестоимости();
	
	ВывестиКалькуляцию();
	
КонецПроцедуры

&НаСервере
Процедура ЗаменитьСпецификацию(ИдентификаторСтроки, ПоДаннымФормы)
	
	Если ПоДаннымФормы Тогда
		СтрокаТабличнойЧасти = КалькуляцияНаФорме.НайтиПоИдентификатору(ИдентификаторСтроки);
	ИначеЕсли ТекущийИсточник = Перечисления.ИсточникиСтрокКалькуляции.Запас Тогда
		СтрокаТабличнойЧасти = ДанныеЗаказа.Запасы.НайтиПоИдентификатору(ИдентификаторСтроки);
	ИначеЕсли ТекущийИсточник = Перечисления.ИсточникиСтрокКалькуляции.Работа Тогда
		СтрокаТабличнойЧасти = ДанныеЗаказа.Работы.НайтиПоИдентификатору(ИдентификаторСтроки);
	Иначе
		Возврат;
	КонецЕсли;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТаблицаМатериалов = ПустаяТаблицаМатериалов();
	ЗаполнитьТаблицуМатериалов(ТаблицаМатериалов, СтрокаТабличнойЧасти);
	Если ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции = Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоПоследнейЦенеЗакупки Тогда
		ОтборВидЦен = Неопределено;
	ИначеЕсли ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции = Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамНоменклатуры 
		ИЛИ ТипЗнч(ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции) = Тип("СправочникСсылка.ВидыЦен") Тогда
		ОтборВидЦен = ВидЦен;
	ИначеЕсли ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции = Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов Тогда
		ОтборВидЦен = ВидыЦенКонтрагентов;
	Иначе
		ОтборВидЦен = Неопределено;
	КонецЕсли; 
	РассчитатьСебестоимость(ТаблицаМатериалов, ОтборВидЦен, КурсДокумента, КратностьДокумента, ДанныеЗаказа.НалогообложениеНДС, ДанныеЗаказа.Дата, ЗаказСсылка);
	
	Если ПоказанаКалькуляцияЗаказа Тогда
		
		Если НЕ ПоДаннымФормы Тогда
			СтрокаИсточник = СтрокаТабличнойЧасти;
		ИначеЕсли СтрокаТабличнойЧасти.Источник = Перечисления.ИсточникиСтрокКалькуляции.Запас Тогда
			СтрокаИсточник = СтрокаПоКлючу(ДанныеЗаказа.Запасы, СтрокаТабличнойЧасти.КлючСвязи);
		ИначеЕсли СтрокаТабличнойЧасти.Источник = Перечисления.ИсточникиСтрокКалькуляции.Работа Тогда
			СтрокаИсточник = СтрокаПоКлючу(ДанныеЗаказа.Работы, СтрокаТабличнойЧасти.КлючСвязи);
		КонецЕсли; 
		
		Если СтрокаИсточник <> Неопределено Тогда
			
			СтрокаИсточник.Спецификация = СтрокаТабличнойЧасти.Спецификация;
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
			Если ПоДаннымФормы Тогда
				СтруктураОтбора.Вставить("Источник", СтрокаТабличнойЧасти.Источник);
			Иначе
				СтруктураОтбора.Вставить("Источник", ТекущийИсточник);
			КонецЕсли; 
			СтрокиКУдалению = ДанныеЗаказа.Калькуляция.НайтиСтроки(СтруктураОтбора);
			ИндексВставки = Неопределено;
			Для каждого Стр Из СтрокиКУдалению Цикл
				Если ТипЗнч(Стр.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
					ИндексВставки = ДанныеЗаказа.Калькуляция.Индекс(Стр);
					Стр.СпецификацияИзделие = СтрокаТабличнойЧасти.Спецификация;
					Продолжить;
				КонецЕсли; 
				ДанныеЗаказа.Калькуляция.Удалить(Стр);
			КонецЦикла;
			
			Для каждого Стр Из ТаблицаМатериалов Цикл
				Если ИндексВставки = Неопределено Тогда
					НоваяСтрока = ДанныеЗаказа.Калькуляция.Добавить();
				Иначе
					НоваяСтрока = ДанныеЗаказа.Калькуляция.Вставить(ИндексВставки);
					ИндексВставки = ИндексВставки + 1;
				КонецЕсли; 
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр, "Этап, Номенклатура, Характеристика, Спецификация, ЕдиницаИзмерения, Количество, НормаВремени, СебестоимостьЕдиницы, Себестоимость");
				НоваяСтрока.НоменклатураИзделие = СтрокаИсточник.Номенклатура;
				НоваяСтрока.ХарактеристикаИзделие = СтрокаИсточник.Характеристика;
				НоваяСтрока.СпецификацияИзделие = СтрокаИсточник.Спецификация;
				НоваяСтрока.Источник = ?(ПоДаннымФормы, СтрокаТабличнойЧасти.Источник, ТекущийИсточник);
				НоваяСтрока.КлючСвязи = СтрокаИсточник.КлючСвязи;
				Если ?(ПоДаннымФормы, СтрокаТабличнойЧасти.Источник, ТекущийИсточник) = Перечисления.ИсточникиСтрокКалькуляции.Запас Тогда
					НоваяСтрока.НомерВариантаКП = СтрокаИсточник.НомерВариантаКП;
				КонецЕсли; 
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПоДаннымФормы Тогда
			СтрокаТабличнойЧасти.Себестоимость = ТаблицаМатериалов.Итог("Себестоимость");
			СтрокаТабличнойЧасти.СебестоимостьЕдиницы = ?(СтрокаТабличнойЧасти.Количество = 0, 0, СтрокаТабличнойЧасти.Себестоимость / СтрокаТабличнойЧасти.Количество);
			СтрокаТабличнойЧасти.Прибыль = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.Себестоимость;
			Источник = СтрокаТабличнойЧасти.Источник;
		Иначе
			Источник = ТекущийИсточник;
		КонецЕсли;
		ПоказатьОшибкиРасчетаСебестоимости(Источник, СтрокаТабличнойЧасти.КлючСвязи);
		
	Иначе
		
		Если ПоДаннымФормы Тогда
			СтрокаТабличнойЧасти.Себестоимость = ТаблицаМатериалов.Итог("Себестоимость");
			СтрокаТабличнойЧасти.СебестоимостьЕдиницы = ?(СтрокаТабличнойЧасти.Количество = 0, 0, СтрокаТабличнойЧасти.Себестоимость / СтрокаТабличнойЧасти.Количество);
		КонецЕсли; 
		
	КонецЕсли;
 
	ОбновитьИтоги(ЭтотОбъект);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РассчитатьСебестоимость(ТаблицаМатериалов, ВидыЦен, Курс, Кратность, НалогообложениеНДС, Дата, Ссылка)
	
	Если ТипЗнч(ВидыЦен)=Тип("СписокЗначений") Тогда
		ПараметрВидыЦен = ВидыЦен.ВыгрузитьЗначения();
		СпособРасчета = Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов;
	ИначеЕсли ТипЗнч(ВидыЦен)=Тип("СправочникСсылка.ВидыЦен") Тогда
		ПараметрВидыЦен = Новый Массив;
		ПараметрВидыЦен.Добавить(ВидыЦен);
		СпособРасчета = Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамНоменклатуры;
	Иначе
		ПараметрВидыЦен = Новый Массив;
		СпособРасчета = Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоПоследнейЦенеЗакупки;
	КонецЕсли;
	Если СпособРасчета<>Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамНоменклатуры Тогда
		ПараметрВидыЦен.Добавить(Справочники.ВидыЦен.Учетная);
	КонецЕсли; 
	
	// Расчет себестоимости и стоимости расходов
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыЦен", ПараметрВидыЦен);
	Запрос.УстановитьПараметр("СпособРасчета", СпособРасчета);
	Запрос.УстановитьПараметр("ТаблицаМатериалов", ТаблицаМатериалов);
	Запрос.УстановитьПараметр("Курс", Курс);
	Запрос.УстановитьПараметр("Кратность", Кратность);
	Запрос.УстановитьПараметр("УчитыватьНДС", (НалогообложениеНДС=Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС));
	Если Ссылка.Пустая() Тогда
		Запрос.УстановитьПараметр("Период", КонецДня(Дата));
	Иначе
		Запрос.УстановитьПараметр("Период", Дата);
	КонецЕсли;
	Запрос.УстановитьПараметр("ТаблицаПорядковОкругления", ЦенообразованиеСервер.ТаблицаПорядковОкругления());
	Запрос.Текст = Справочники.СтавкиНДС.ПолучитьТекстЗапросаСозданияВТСтавкиНДС(Дата) +
	"ВЫБРАТЬ
	|	ТаблицаПорядковОкругления.Порядок КАК Порядок,
	|	ТаблицаПорядковОкругления.Значение КАК Значение
	|ПОМЕСТИТЬ ТаблицаПорядковОкругления
	|ИЗ
	|	&ТаблицаПорядковОкругления КАК ТаблицаПорядковОкругления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМатериалов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаМатериалов.Идентификатор КАК Идентификатор,
	|	ТаблицаМатериалов.Источник КАК Источник,
	|	ТаблицаМатериалов.Этап КАК Этап,
	|	ВЫРАЗИТЬ(ТаблицаМатериалов.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаМатериалов.Характеристика КАК Характеристика,
	|	ТаблицаМатериалов.Спецификация КАК Спецификация,
	|	ТаблицаМатериалов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаМатериалов.Количество КАК Количество,
	|	ТаблицаМатериалов.НормаВремени КАК НормаВремени,
	|	ВЫРАЗИТЬ(ТаблицаМатериалов.НоменклатураСебестоимость КАК Справочник.Номенклатура) КАК НоменклатураСебестоимость,
	|	ТаблицаМатериалов.ХарактеристикаСебестоимость КАК ХарактеристикаСебестоимость,
	|	ТаблицаМатериалов.ЕдиницаИзмеренияСебестоимость КАК ЕдиницаИзмеренияСебестоимость,
	|	ТаблицаМатериалов.КоличествоСебестоимость КАК КоличествоСебестоимость
	|ПОМЕСТИТЬ ТаблицаМатериалов
	|ИЗ
	|	&ТаблицаМатериалов КАК ТаблицаМатериалов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМатериалов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаМатериалов.Идентификатор КАК Идентификатор,
	|	ТаблицаМатериалов.Источник КАК Источник,
	|	ТаблицаМатериалов.Этап КАК Этап,
	|	ТаблицаМатериалов.Номенклатура КАК Номенклатура,
	|	ТаблицаМатериалов.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаМатериалов.Номенклатура.ФиксированнаяСтоимость КАК ФиксированнаяСтоимость,
	|	ТаблицаМатериалов.Номенклатура.СпособПополнения КАК СпособПополнения,
	|	ТаблицаМатериалов.Характеристика КАК Характеристика,
	|	ТаблицаМатериалов.Спецификация КАК Спецификация,
	|	ТаблицаМатериалов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаМатериалов.Количество КАК Количество,
	|	ТаблицаМатериалов.НормаВремени КАК НормаВремени,
	|	ТаблицаМатериалов.НоменклатураСебестоимость КАК НоменклатураСебестоимость,
	|	ТаблицаМатериалов.НоменклатураСебестоимость.ТипНоменклатуры КАК ТипНоменклатурыСебестоимость,
	|	ТаблицаМатериалов.ХарактеристикаСебестоимость КАК ХарактеристикаСебестоимость,
	|	ТаблицаМатериалов.ЕдиницаИзмеренияСебестоимость КАК ЕдиницаИзмеренияСебестоимость,
	|	ТаблицаМатериалов.КоличествоСебестоимость КАК КоличествоСебестоимость
	|ПОМЕСТИТЬ Материалы
	|ИЗ
	|	ТаблицаМатериалов КАК ТаблицаМатериалов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Материалы.НомерСтроки КАК НомерСтроки,
	|	Материалы.Идентификатор КАК Идентификатор,
	|	Материалы.Источник КАК Источник,
	|	Материалы.Этап КАК Этап,
	|	Материалы.Номенклатура КАК Номенклатура,
	|	Материалы.ТипНоменклатуры КАК ТипНоменклатуры,
	|	Материалы.ФиксированнаяСтоимость КАК ФиксированнаяСтоимость,
	|	Материалы.СпособПополнения КАК СпособПополнения,
	|	Материалы.Характеристика КАК Характеристика,
	|	Материалы.Спецификация КАК Спецификация,
	|	Материалы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Материалы.Количество КАК Количество,
	|	Материалы.НормаВремени КАК НормаВремени,
	|	СУММА(ЕСТЬNULL(Цены.Цена / &Курс * &Кратность, 0) * ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(Материалы.ЕдиницаИзмеренияСебестоимость) = ТИП(Справочник.ЕдиницыИзмерения)
	|				ТОГДА ВЫРАЗИТЬ(Материалы.ЕдиницаИзмеренияСебестоимость КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|			ИНАЧЕ 1
	|		КОНЕЦ * ВЫБОР
	|			КОГДА Материалы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Операция)
	|					И НЕ Материалы.ФиксированнаяСтоимость
	|				ТОГДА Материалы.НормаВремени
	|			ИНАЧЕ Материалы.КоличествоСебестоимость
	|		КОНЕЦ) КАК Себестоимость,
	|	Материалы.НоменклатураСебестоимость КАК НоменклатураСебестоимость,
	|	Материалы.ХарактеристикаСебестоимость КАК ХарактеристикаСебестоимость
	|ПОМЕСТИТЬ МатериалыСебестоимость
	|ИЗ
	|	Материалы КАК Материалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Закупки.Номенклатура КАК Номенклатура,
	|			Закупки.Характеристика КАК Характеристика,
	|			МИНИМУМ(ВЫРАЗИТЬ(ВЫБОР
	|						КОГДА Закупки.Количество = 0
	|							ТОГДА 0
	|						ИНАЧЕ Закупки.Сумма / Закупки.Количество * (КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность)
	|					КОНЕЦ КАК ЧИСЛО(15, 2))) КАК Цена
	|		ИЗ
	|			(ВЫБРАТЬ
	|				Закупки.Номенклатура КАК Номенклатура,
	|				Закупки.Характеристика КАК Характеристика,
	|				МАКСИМУМ(Закупки.Период) КАК Период
	|			ИЗ
	|				РегистрНакопления.Закупки КАК Закупки
	|			ГДЕ
	|				Закупки.Период < &Период
	|				И (Закупки.Номенклатура, Закупки.Характеристика) В
	|						(ВЫБРАТЬ
	|							Материалы.НоменклатураСебестоимость,
	|							Материалы.ХарактеристикаСебестоимость
	|						ИЗ
	|							Материалы КАК Материалы
	|						ГДЕ
	|							&СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоПоследнейЦенеЗакупки)
	|							И НЕ Материалы.ТипНоменклатурыСебестоимость = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Операция))
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Закупки.Номенклатура,
	|				Закупки.Характеристика) КАК ПоследниеЗакупки
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки КАК Закупки
	|				ПО (Закупки.Номенклатура = ПоследниеЗакупки.Номенклатура)
	|					И (Закупки.Характеристика = ПоследниеЗакупки.Характеристика)
	|					И (Закупки.Период = ПоследниеЗакупки.Период),
	|			РегистрСведений.КурсыВалют.СрезПоследних(
	|					&Период,
	|					Валюта В
	|						(ВЫБРАТЬ
	|							ВалютаУчета.Значение
	|						ИЗ
	|							Константа.ВалютаУчета КАК ВалютаУчета)) КАК КурсыВалютСрезПоследних
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Закупки.Номенклатура,
	|			Закупки.Характеристика
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|			ЦеныНоменклатурыСрезПоследних.Характеристика,
	|			(ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена * ВЫБОР
	|					КОГДА НЕ ЦеныНоменклатурыСрезПоследних.ВидЦен.ЦенаВключаетНДС
	|							И &УчитыватьНДС
	|						ТОГДА ЕСТЬNULL(ВТСтавки.СтавкаНДС.Ставка, 0) / 100 + 1
	|					ИНАЧЕ 1
	|				КОНЕЦ / ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|						ТОГДА ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|					ИНАЧЕ 1
	|				КОНЕЦ * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность / ЕСТЬNULL(ТаблицаПорядковОкругления.Значение, 0.01) КАК ЧИСЛО(15, 0))) * ЕСТЬNULL(ТаблицаПорядковОкругления.Значение, 0.01)
	|		ИЗ
	|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|					&Период,
	|					ВидЦен В (&ВидыЦен)
	|						И (&СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамНоменклатуры)
	|							ИЛИ &СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамНоменклатуры)
	|								И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Операция))
	|						И (Номенклатура, Характеристика) В
	|							(ВЫБРАТЬ
	|								Материалы.НоменклатураСебестоимость,
	|								Материалы.ХарактеристикаСебестоимость
	|							ИЗ
	|								Материалы КАК Материалы
	|							ГДЕ
	|								(&СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамНоменклатуры)
	|									ИЛИ Материалы.ТипНоменклатурыСебестоимость = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Операция)))) КАК ЦеныНоменклатурыСрезПоследних
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютСрезПоследних
	|				ПО ЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены = КурсыВалютСрезПоследних.Валюта
	|				ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПорядковОкругления КАК ТаблицаПорядковОкругления
	|				ПО ЦеныНоменклатурыСрезПоследних.ВидЦен.ПорядокОкругления = ТаблицаПорядковОкругления.Порядок
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавки
	|				ПО (ВТСтавки.ВидСтавкиНДС = ЦеныНоменклатурыСрезПоследних.Номенклатура.ВидСтавкиНДС)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура,
	|			ЦеныНоменклатурыКонтрагентовСрезПоследних.Характеристика,
	|			МИНИМУМ(ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена * ВЫБОР
	|					КОГДА НЕ ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.ЦенаВключаетНДС
	|							И &УчитыватьНДС
	|						ТОГДА ЕСТЬNULL(ВТСтавки.СтавкаНДС.Ставка, 0) / 100 + 1
	|					ИНАЧЕ 1
	|				КОНЕЦ / ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|						ТОГДА ВЫРАЗИТЬ(ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|					ИНАЧЕ 1
	|				КОНЕЦ * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность)
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура КАК Номенклатура,
	|				ЦеныНоменклатурыКонтрагентовСрезПоследних.Характеристика КАК Характеристика,
	|				МАКСИМУМ(ЦеныНоменклатурыКонтрагентовСрезПоследних.Период) КАК Период
	|			ИЗ
	|				РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
	|						&Период,
	|						&СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов)
	|							И ВидЦенКонтрагента В (&ВидыЦен)
	|							И (Номенклатура, Характеристика) В
	|								(ВЫБРАТЬ
	|									Материалы.НоменклатураСебестоимость,
	|									Материалы.ХарактеристикаСебестоимость
	|								ИЗ
	|									Материалы КАК Материалы
	|								ГДЕ
	|									&СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов)
	|									И НЕ Материалы.ТипНоменклатурыСебестоимость = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Операция))) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура,
	|				ЦеныНоменклатурыКонтрагентовСрезПоследних.Характеристика) КАК ПоследниеЦены
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
	|						&Период,
	|						&СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов)
	|							И ВидЦенКонтрагента В (&ВидыЦен)
	|							И (Номенклатура, Характеристика) В
	|								(ВЫБРАТЬ
	|									Материалы.НоменклатураСебестоимость,
	|									Материалы.ХарактеристикаСебестоимость
	|								ИЗ
	|									Материалы КАК Материалы
	|								ГДЕ
	|									&СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов)
	|									И НЕ Материалы.ТипНоменклатурыСебестоимость = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Операция))) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютСрезПоследних
	|					ПО ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.ВалютаЦены = КурсыВалютСрезПоследних.Валюта
	|				ПО (ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура = ПоследниеЦены.Номенклатура)
	|					И (ЦеныНоменклатурыКонтрагентовСрезПоследних.Характеристика = ПоследниеЦены.Характеристика)
	|					И (ЦеныНоменклатурыКонтрагентовСрезПоследних.Период = ПоследниеЦены.Период)
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавки
	|				ПО (ВТСтавки.ВидСтавкиНДС = ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура.ВидСтавкиНДС)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура,
	|			ЦеныНоменклатурыКонтрагентовСрезПоследних.Характеристика) КАК Цены
	|		ПО Материалы.НоменклатураСебестоимость = Цены.Номенклатура
	|			И Материалы.ХарактеристикаСебестоимость = Цены.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	Материалы.НомерСтроки,
	|	Материалы.Идентификатор,
	|	Материалы.Источник,
	|	Материалы.Этап,
	|	Материалы.Номенклатура,
	|	Материалы.ТипНоменклатуры,
	|	Материалы.ФиксированнаяСтоимость,
	|	Материалы.СпособПополнения,
	|	Материалы.Характеристика,
	|	Материалы.Спецификация,
	|	Материалы.ЕдиницаИзмерения,
	|	Материалы.Количество,
	|	Материалы.НормаВремени,
	|	Материалы.НоменклатураСебестоимость,
	|	Материалы.ХарактеристикаСебестоимость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыСебестоимость.НомерСтроки КАК НомерСтроки,
	|	МатериалыСебестоимость.Идентификатор КАК Идентификатор,
	|	МатериалыСебестоимость.Источник КАК Источник,
	|	МатериалыСебестоимость.Этап КАК Этап,
	|	МатериалыСебестоимость.Номенклатура КАК Номенклатура,
	|	МатериалыСебестоимость.ТипНоменклатуры КАК ТипНоменклатуры,
	|	МатериалыСебестоимость.СпособПополнения КАК СпособПополнения,
	|	МатериалыСебестоимость.Характеристика КАК Характеристика,
	|	МатериалыСебестоимость.Спецификация КАК Спецификация,
	|	МатериалыСебестоимость.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МатериалыСебестоимость.Количество КАК Количество,
	|	МатериалыСебестоимость.НормаВремени КАК НормаВремени,
	|	СУММА(МатериалыСебестоимость.Себестоимость) КАК Себестоимость,
	|	ВЫБОР
	|		КОГДА МатериалыСебестоимость.Количество = 0
	|				ИЛИ ВЫБОР
	|					КОГДА МатериалыСебестоимость.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Операция)
	|							И НЕ МатериалыСебестоимость.ФиксированнаяСтоимость
	|						ТОГДА МатериалыСебестоимость.НормаВремени
	|					ИНАЧЕ 1
	|				КОНЕЦ = 0
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(МатериалыСебестоимость.Себестоимость) / (МатериалыСебестоимость.Количество * ВЫБОР
	|				КОГДА МатериалыСебестоимость.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Операция)
	|						И НЕ МатериалыСебестоимость.ФиксированнаяСтоимость
	|					ТОГДА МатериалыСебестоимость.НормаВремени
	|				ИНАЧЕ 1
	|			КОНЕЦ)
	|	КОНЕЦ КАК СебестоимостьЕдиницы
	|ИЗ
	|	МатериалыСебестоимость КАК МатериалыСебестоимость
	|
	|СГРУППИРОВАТЬ ПО
	|	МатериалыСебестоимость.НомерСтроки,
	|	МатериалыСебестоимость.Количество,
	|	МатериалыСебестоимость.НормаВремени,
	|	МатериалыСебестоимость.Спецификация,
	|	МатериалыСебестоимость.ТипНоменклатуры,
	|	МатериалыСебестоимость.ФиксированнаяСтоимость,
	|	МатериалыСебестоимость.Этап,
	|	МатериалыСебестоимость.Номенклатура,
	|	МатериалыСебестоимость.ЕдиницаИзмерения,
	|	МатериалыСебестоимость.Характеристика,
	|	МатериалыСебестоимость.СпособПополнения,
	|	МатериалыСебестоимость.Идентификатор,
	|	МатериалыСебестоимость.Источник
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТаблицаМатериалов = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиРасчетаСебестоимости(Источник = Неопределено, КлючСвязи = Неопределено)
	
	ТаблицаПроверки = ДанныеЗаказа.Калькуляция.Выгрузить().СкопироватьКолонки("Номенклатура, Характеристика, РучноеИзменение, СебестоимостьЕдиницы");
	Если КлючСвязи = Неопределено Тогда
		СтрокиПроверки = ДанныеЗаказа.Калькуляция.Выгрузить();
	Иначе
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Источник", Источник);
		СтруктураПоиска.Вставить("КлючСвязи", КлючСвязи);
		СтрокиПроверки = ДанныеЗаказа.Калькуляция.Выгрузить(СтруктураПоиска);
	КонецЕсли;
	Для каждого СтрокаТабличнойЧасти Из СтрокиПроверки Цикл
		Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура)<>Тип("СправочникСсылка.Номенклатура") 
			ИЛИ СтрокаТабличнойЧасти.СебестоимостьЕдиницы<>0 
			ИЛИ СтрокаТабличнойЧасти.РучноеИзменение Тогда
			Продолжить;
		КонецЕсли; 
		НоваяСтрока = ТаблицаПроверки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
	КонецЦикла; 
	
	ТаблицаПроверки.Свернуть("Номенклатура, Характеристика, РучноеИзменение, СебестоимостьЕдиницы");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПроверки", ТаблицаПроверки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаПроверки.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаПроверки.Характеристика КАК Характеристика,
	|	ТаблицаПроверки.РучноеИзменение КАК РучноеИзменение,
	|	ТаблицаПроверки.СебестоимостьЕдиницы КАК СебестоимостьЕдиницы
	|ПОМЕСТИТЬ ТаблицаПроверки
	|ИЗ
	|	&ТаблицаПроверки КАК ТаблицаПроверки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПроверки.Номенклатура КАК Номенклатура,
	|	ТаблицаПроверки.Характеристика КАК Характеристика,
	|	ТаблицаПроверки.РучноеИзменение КАК РучноеИзменение,
	|	ТаблицаПроверки.СебестоимостьЕдиницы КАК СебестоимостьЕдиницы,
	|	СправочникНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры
	|ИЗ
	|	ТаблицаПроверки КАК ТаблицаПроверки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаПроверки.Номенклатура = СправочникНоменклатура.Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыНоменклатуры = Новый Структура;
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Запас Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось определить себестоимость запаса %1'");
		ИначеЕсли Выборка.ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Операция Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось определить стоимость операции %1'");
			Если ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции = Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоПоследнейЦенеЗакупки
				ИЛИ ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции = Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов Тогда
				ТекстСообщения = ТекстСообщения + НСтр("ru = ' (не установлена учетная цена)'");
			КонецЕсли; 
		ИначеЕсли Выборка.ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Работа Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось определить стоимость работы %1'");
		ИначеЕсли Выборка.ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Услуга Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось определить стоимость услуги %1'");
		Иначе
			Продолжить;
		КонецЕсли; 
		ПараметрыНоменклатуры.Очистить();
		ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", Выборка.Номенклатура);
		ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", Выборка.Характеристика);
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстСообщения,
		ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры));
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.КлючДанных = Выборка.Номенклатура;
		Сообщение.Сообщить(); 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеШаблона()
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаказа.ШаблонКалькуляции) Тогда
		СоставШаблона.Очистить();
		Возврат;
	КонецЕсли; 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ШаблонКалькуляции", ДанныеЗаказа.ШаблонКалькуляции);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""Запас"" КАК ТипСтроки,
	|	ШаблоныКалькуляцийЗапасы.Номенклатура КАК Номенклатура,
	|	ШаблоныКалькуляцийЗапасы.Характеристика КАК Характеристика,
	|	ШаблоныКалькуляцийЗапасы.Спецификация КАК Спецификация,
	|	ШаблоныКалькуляцийЗапасы.Количество КАК Количество,
	|	ШаблоныКалькуляцийЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	НЕОПРЕДЕЛЕНО КАК СпособРасчета,
	|	НЕОПРЕДЕЛЕНО КАК Значение,
	|	НЕОПРЕДЕЛЕНО КАК Валюта,
	|	ШаблоныКалькуляцийЗапасы.КлючСвязи КАК КлючСвязи
	|ИЗ
	|	Справочник.ШаблоныКалькуляций.Запасы КАК ШаблоныКалькуляцийЗапасы
	|ГДЕ
	|	ШаблоныКалькуляцийЗапасы.Ссылка = &ШаблонКалькуляции
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Расход"",
	|	ШаблоныКалькуляцийРасходы.Расход,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка),
	|	0,
	|	НЕОПРЕДЕЛЕНО,
	|	ШаблоныКалькуляцийРасходы.СпособРасчета,
	|	ШаблоныКалькуляцийРасходы.Значение,
	|	ШаблоныКалькуляцийРасходы.Валюта,
	|	ШаблоныКалькуляцийРасходы.КлючСвязи
	|ИЗ
	|	Справочник.ШаблоныКалькуляций.Расходы КАК ШаблоныКалькуляцийРасходы
	|ГДЕ
	|	ШаблоныКалькуляцийРасходы.Ссылка = &ШаблонКалькуляции";
	СоставШаблона.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШаблонуСервер()
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Источник", Перечисления.ИсточникиСтрокКалькуляции.Шаблон);
	Строки = ДанныеЗаказа.Калькуляция.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаТабличнойЧасти Из Строки Цикл
		ДанныеЗаказа.Калькуляция.Удалить(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаказа.ШаблонКалькуляции) Тогда
		Возврат;
	КонецЕсли;
	
	БазаРасчета = БазаРасчетаШаблонов(ДанныеЗаказа);
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	ОтборВидЦен = ОтборПоВидуЦен();
	
	ПрочитатьДанныеШаблона();
	
	Для каждого СтрокаСостава Из СоставШаблона Цикл
		Для ВариантКП = ?(ДанныеЗаказа.КоличествоВариантовКП=0, 0, 1) По ДанныеЗаказа.КоличествоВариантовКП Цикл
			НоваяСтрока = ДанныеЗаказа.Калькуляция.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСостава, "Номенклатура, Характеристика, Спецификация, Количество, ЕдиницаИзмерения, КлючСвязи");
			НоваяСтрока.НомерВариантаКП = ВариантКП;
			НоваяСтрока.Источник = Перечисления.ИсточникиСтрокКалькуляции.Шаблон;
			Если СтрокаСостава.ТипСтроки="Расход" Тогда
				Если СтрокаСостава.СпособРасчета=Перечисления.СпособыРасчетаСуммыЗатрат.ФиксированнаяСумма Тогда
					ВалютаШаблона = ?(ЗначениеЗаполнено(СтрокаСостава.Валюта), СтрокаСостава.Валюта, ВалютаУчета);
					Курсы = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаШаблона, ДанныеЗаказа.Дата);
					НоваяСтрока.Себестоимость = СтрокаСостава.Значение * Курсы.Курс / Курсы.Кратность / КурсДокумента * КратностьДокумента;
				ИначеЕсли СтрокаСостава.СпособРасчета=Перечисления.СпособыРасчетаСуммыЗатрат.ПроцентОтСуммыПродажи Тогда
					Стоимость = БазаРасчета.Стоимость.Получить(ВариантКП);
					НоваяСтрока.Себестоимость = Стоимость * СтрокаСостава.Значение / 100;
				ИначеЕсли СтрокаСостава.СпособРасчета=Перечисления.СпособыРасчетаСуммыЗатрат.ПроцентОтПрибыли Тогда
					Прибыль = БазаРасчета.Стоимость.Получить(ВариантКП) - БазаРасчета.Себестоимость.Получить(ВариантКП);
					НоваяСтрока.Себестоимость = Прибыль * СтрокаСостава.Значение / 100;
				КонецЕсли;
			ИначеЕсли СтрокаСостава.ТипСтроки="Запас" Тогда
				СтруктураДанные = Новый Структура;
				СтруктураДанные.Вставить("Заказ", ЗаказСсылка);
				СтруктураДанные.Вставить("Дата", ДанныеЗаказа.Дата);
				СтруктураДанные.Вставить("НалогообложениеНДС", ДанныеЗаказа.НалогообложениеНДС);
				СтруктураДанные.Вставить("Курс", КурсДокумента);
				СтруктураДанные.Вставить("Кратность", КратностьДокумента);
				СтруктураДанные.Вставить("ВидыЦен", ОтборВидЦен);
				СтруктураДанные.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
				СтруктураДанные.Вставить("Характеристика", НоваяСтрока.Характеристика);
				СтруктураДанные.Вставить("Спецификация", НоваяСтрока.Спецификация);
				СтруктураДанные.Вставить("ЕдиницаИзмерения", НоваяСтрока.ЕдиницаИзмерения);
				СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанные, "СебестоимостьЕдиницы");
				НоваяСтрока.Себестоимость = НоваяСтрока.СебестоимостьЕдиницы * НоваяСтрока.Количество;
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьФормулыПоШаблону()
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаказа.ШаблонКалькуляции) Тогда
		ОбновитьИтоги(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	БазаРасчета = БазаРасчетаШаблонов(ДанныеЗаказа);
	
	Для каждого Стр Из ДанныеЗаказа.Калькуляция Цикл
		Если Стр.Источник<>ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Шаблон") Тогда
			Продолжить;
		КонецЕсли;
		Если Стр.РучноеИзменение Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("КлючСвязи", Стр.КлючСвязи);
		СтрокиСостава = СоставШаблона.НайтиСтроки(СтруктураОтбора);
		Если СтрокиСостава.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаСостава = СтрокиСостава[0];
		Если СтрокаСостава.СпособРасчета=ПредопределенноеЗначение("Перечисление.СпособыРасчетаСуммыЗатрат.ПроцентОтСуммыПродажи") Тогда
			Стоимость = БазаРасчета.Стоимость.Получить(Стр.НомерВариантаКП);
			Стр.Себестоимость = Стоимость * СтрокаСостава.Значение/100;
		ИначеЕсли СтрокаСостава.СпособРасчета=ПредопределенноеЗначение("Перечисление.СпособыРасчетаСуммыЗатрат.ПроцентОтПрибыли") Тогда
			Прибыль = БазаРасчета.Стоимость.Получить(Стр.НомерВариантаКП) - БазаРасчета.Себестоимость.Получить(Стр.НомерВариантаКП);
			Стр.Себестоимость = Прибыль * СтрокаСостава.Значение/100;
		Иначе
			Продолжить;
		КонецЕсли;
		Если ПоказанаКалькуляцияЗаказа Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Источник", ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Шаблон"));
			СтруктураОтбора.Вставить("КлючСвязи", СтрокаСостава.КлючСвязи);
			СтрокиНаФорме = КалькуляцияНаФорме.НайтиСтроки(СтруктураОтбора);
			Для каждого СтрокаНаФорме Из СтрокиНаФорме Цикл
				СтрокаНаФорме.Себестоимость = Стр.Себестоимость;
				СтрокаНаФорме.Прибыль = СтрокаНаФорме.Сумма-Стр.Себестоимость;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	
	Если ПоказанаКалькуляцияЗаказа Тогда
		ОбновитьИтоги(ЭтотОбъект);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция БазаРасчетаШаблонов(ДанныеЗаказа)
	
	Результат = Новый Структура;
	
	СтоимостьВариантов = Новый Соответствие;
	СебестоимостьВариантов = Новый Соответствие;
	Для ВариантКП = ?(ДанныеЗаказа.КоличествоВариантовКП=0, 0, 1) По ДанныеЗаказа.КоличествоВариантовКП Цикл
		СтоимостьВариантов.Вставить(ВариантКП, 0);
		СебестоимостьВариантов.Вставить(ВариантКП, 0);
	КонецЦикла;
	
	Для каждого Стр Из ДанныеЗаказа.Запасы Цикл
		Если Стр.ЭтоРазделитель Тогда
			Продолжить;
		КонецЕсли;
		СтоимостьВариантов.Вставить(Стр.НомерВариантаКП, СтоимостьВариантов.Получить(Стр.НомерВариантаКП) + Стр.Всего);
	КонецЦикла;
	Для каждого Стр Из ДанныеЗаказа.Работы Цикл
		СтоимостьВариантов.Вставить(0, СтоимостьВариантов.Получить(0) + Стр.Всего);
	КонецЦикла; 
	
	Для каждого Стр Из ДанныеЗаказа.Калькуляция Цикл
		Если Стр.Источник=ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Шаблон") Тогда
			Продолжить;
		КонецЕсли;
		СебестоимостьВариантов.Вставить(Стр.НомерВариантаКП, СебестоимостьВариантов.Получить(Стр.НомерВариантаКП) + Стр.Себестоимость);
	КонецЦикла;
	
	Результат.Вставить("Стоимость", СтоимостьВариантов);
	Результат.Вставить("Себестоимость", СебестоимостьВариантов);
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьФактическиеДанные()
	
	ФактическиеДанные.Очистить();
	Если НЕ ЗначениеЗаполнено(ЗаказСсылка) ИЛИ НЕ КэшЗначений.ДоступныПолныеПрава Тогда
		Возврат;
	КонецЕсли; 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказСсылка);
	Запрос.УстановитьПараметр("Курс", КурсДокумента);
	Запрос.УстановитьПараметр("Кратность", КратностьДокумента);
	Запрос.УстановитьПараметр("Период", ДанныеЗаказа.Дата);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Номенклатура,
	|	СУММА(ВложенныйЗапрос.СтоимостьФакт * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность / &Курс * &Кратность) КАК СтоимостьФакт,
	|	СУММА(ВложенныйЗапрос.СебестоимостьФакт * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность / &Курс * &Кратность) КАК СебестоимостьФакт,
	|	СУММА(ВложенныйЗапрос.СтоимостьФакт * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность / &Курс * &Кратность) - СУММА(ВложенныйЗапрос.СебестоимостьФакт * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность / &Курс * &Кратность) КАК ПрибыльФакт
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПродажиОбороты.Номенклатура КАК Номенклатура,
	|		ПродажиОбороты.СебестоимостьОборот КАК СебестоимостьФакт,
	|		ПродажиОбороты.СуммаОборот КАК СтоимостьФакт
	|	ИЗ
	|		РегистрНакопления.Продажи.Обороты(, , Период, ЗаказПокупателя = &ЗаказПокупателя) КАК ПродажиОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ДоходыИРасходы.Аналитика ССЫЛКА Справочник.Номенклатура
	|					И ДоходыИРасходы.Аналитика <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ТОГДА ДоходыИРасходы.Аналитика
	|			ИНАЧЕ ДоходыИРасходы.СчетУчета
	|		КОНЕЦ,
	|		ДоходыИРасходы.СуммаРасходовОборот,
	|		ДоходыИРасходы.СуммаДоходовОборот
	|	ИЗ
	|		РегистрНакопления.ДоходыИРасходы.Обороты(
	|				,
	|				,
	|				Период,
	|				ЗаказПокупателя = &ЗаказПокупателя
	|					И (НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|						ИЛИ НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж <> СчетУчета
	|							И НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж <> СчетУчета)) КАК ДоходыИРасходы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ДоходыИРасходы.Аналитика ССЫЛКА Справочник.Номенклатура
	|					И ДоходыИРасходы.Аналитика <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ТОГДА ДоходыИРасходы.Аналитика
	|			ИНАЧЕ ДоходыИРасходы.СчетУчета
	|		КОНЕЦ,
	|		-ДоходыИРасходы.СуммаРасходовОборот,
	|		-ДоходыИРасходы.СуммаДоходовОборот
	|	ИЗ
	|		РегистрНакопления.ДоходыИРасходы.Обороты(
	|				,
	|				,
	|				Месяц,
	|				ЗаказПокупателя = &ЗаказПокупателя
	|					И (НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|						ИЛИ НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж <> СчетУчета
	|							И НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж <> СчетУчета)
	|					И (СчетУчета.СпособРаспределения <> ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияРасходов.НеРаспределять)
	|						ИЛИ НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее)
	|						ИЛИ НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))) КАК ДоходыИРасходы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
	|			ПО (НАЧАЛОПЕРИОДА(ДоходыИРасходы.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ЗакрытиеМесяца.Дата, МЕСЯЦ))
	|				И (ЗакрытиеМесяца.Проведен)
	|				И (ЗакрытиеМесяца.РасчетФинансовогоРезультата)
	|	ГДЕ
	|		НЕ ЗакрытиеМесяца.Ссылка ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ФинансовыйРезультат.Аналитика ССЫЛКА Справочник.Номенклатура
	|					И ФинансовыйРезультат.Аналитика <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ТОГДА ФинансовыйРезультат.Аналитика
	|			ИНАЧЕ ФинансовыйРезультат.СчетУчета
	|		КОНЕЦ,
	|		ФинансовыйРезультат.СуммаРасходовОборот,
	|		ФинансовыйРезультат.СуммаДоходовОборот
	|	ИЗ
	|		РегистрНакопления.ФинансовыйРезультат.Обороты(
	|				,
	|				,
	|				Период,
	|				ЗаказПокупателя = &ЗаказПокупателя
	|					И СчетУчета.СпособРаспределения <> ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияРасходов.НеРаспределять)
	|					И (НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж <> СчетУчета
	|							И НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж <> СчетУчета
	|						ИЛИ НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее)
	|						ИЛИ НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))) КАК ФинансовыйРезультат
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗапасыОстаткиИОбороты.СчетУчета,
	|		ЗапасыОстаткиИОбороты.СуммаПриход - ЗапасыОстаткиИОбороты.СуммаРасход,
	|		0
	|	ИЗ
	|		РегистрНакопления.Запасы.ОстаткиИОбороты(
	|				,
	|				,
	|				Период,
	|				Движения,
	|				ЗаказПокупателя = &ЗаказПокупателя
	|					И Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И СчетУчета В
	|						(ВЫБРАТЬ
	|							ЗапасыОстатки.СчетУчета
	|						ИЗ
	|							РегистрНакопления.Запасы.Остатки(, ЗаказПокупателя = &ЗаказПокупателя
	|								И Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ЗапасыОстатки
	|						ГДЕ
	|							ЗапасыОстатки.КоличествоОстаток = 0
	|							И ЗапасыОстатки.СуммаОстаток <> 0)) КАК ЗапасыОстаткиИОбороты) КАК ВложенныйЗапрос,
	|	РегистрСведений.КурсыВалют.СрезПоследних(
	|			&Период,
	|			Валюта В
	|				(ВЫБРАТЬ
	|					ВалютаУчета.Значение
	|				ИЗ
	|					Константа.ВалютаУчета КАК ВалютаУчета)) КАК КурсыВалютСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура";
	ФактическиеДанные.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Функция СравнитьКалькуляциюИСпецификацию(Идентификатор, Источник)
	
	СтрокаИсточник = СтрокаИсточник(ДанныеЗаказа, Идентификатор, Источник);
	Если СтрокаИсточник = Неопределено ИЛИ НЕ ЗначениеЗаполнено(СтрокаИсточник.Спецификация) Тогда
		// Новая спецификация
		Возврат Истина;
	КонецЕсли; 
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязи", СтрокаИсточник.КлючСвязи);
	СтруктураОтбора.Вставить("Источник", Источник);
	ИзмененныеСтроки = СоставыСпецификаций.НайтиСтроки(СтруктураОтбора);
	Если ИзмененныеСтроки.Количество() > 0 Тогда
		// Спецификации с несохраненными изменениями пропускаем
		Возврат Истина;
	КонецЕсли; 
	ТаблицаСостава = ДанныеЗаказа.Калькуляция.Выгрузить().СкопироватьКолонки("Номенклатура, Характеристика, Спецификация, ЕдиницаИзмерения, Количество, НормаВремени");
	ТаблицаКалькуляции = ДанныеЗаказа.Калькуляция.Выгрузить(СтруктураОтбора);
	Для каждого СтрКалькуляции Из ТаблицаКалькуляции Цикл
		Если СтрКалькуляции.Источник = Перечисления.ИсточникиСтрокКалькуляции.Шаблон Тогда
			Продолжить;
		КонецЕсли; 
		Если СтрКалькуляции.Номенклатура = СтрКалькуляции.НоменклатураИзделие И СтрКалькуляции.Характеристика = СтрКалькуляции.ХарактеристикаИзделие Тогда
			Продолжить;
		КонецЕсли; 
		НоваяСтрока = ТаблицаСостава.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрКалькуляции);
	КонецЦикла;
	Если Источник = Перечисления.ИсточникиСтрокКалькуляции.Запас Тогда
		Если ТипЗнч(СтрокаИсточник.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
			Коэффициент = 1;
		Иначе
			Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаИсточник.ЕдиницаИзмерения, "Коэффициент");
		КонецЕсли; 
		Количество = СтрокаИсточник.Количество * Коэффициент;
	ИначеЕсли Источник = Перечисления.ИсточникиСтрокКалькуляции.Работа Тогда
		Количество = СтрокаИсточник.Кратность;
	Иначе
		Количество = СтрокаИсточник.Количество;
	КонецЕсли; 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСостава", ТаблицаСостава);
	Запрос.УстановитьПараметр("Спецификация", СтрокаИсточник.Спецификация);
	Запрос.УстановитьПараметр("КоличествоЗапасов", Количество);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСостава.Номенклатура КАК Номенклатура,
	|	ТаблицаСостава.Характеристика КАК Характеристика,
	|	ТаблицаСостава.Спецификация КАК Спецификация,
	|	ТаблицаСостава.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаСостава.Количество КАК Количество,
	|	ТаблицаСостава.НормаВремени КАК НормаВремени
	|ПОМЕСТИТЬ ТаблицаСостава
	|ИЗ
	|	&ТаблицаСостава КАК ТаблицаСостава
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.Спецификация КАК Спецификация,
	|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.Количество) <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КоличествоОтличается,
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.НормаВремени) <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НормаВремениОтличается,
	|	МАКСИМУМ(ВложенныйЗапрос.ПрисутствуетВКалькуляции) КАК ПрисутствуетВКалькуляции,
	|	МАКСИМУМ(ВложенныйЗапрос.ПрисутствуетВСпецификации) КАК ПрисутствуетВСпецификации,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаСостава.Номенклатура КАК Номенклатура,
	|		ТаблицаСостава.Характеристика КАК Характеристика,
	|		ТаблицаСостава.Спецификация КАК Спецификация,
	|		ТаблицаСостава.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ТаблицаСостава.Количество КАК Количество,
	|		ТаблицаСостава.НормаВремени КАК НормаВремени,
	|		ИСТИНА КАК ПрисутствуетВКалькуляции,
	|		ЛОЖЬ КАК ПрисутствуетВСпецификации
	|	ИЗ
	|		ТаблицаСостава КАК ТаблицаСостава
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СпецификацииСостав.Номенклатура,
	|		СпецификацииСостав.Характеристика,
	|		СпецификацииСостав.Спецификация,
	|		СпецификацииСостав.ЕдиницаИзмерения,
	|		-(ВЫРАЗИТЬ(СпецификацииСостав.Количество / СпецификацииСостав.КоличествоПродукции * &КоличествоЗапасов КАК ЧИСЛО(15, 3))),
	|		0,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Справочник.Спецификации.Состав КАК СпецификацииСостав
	|	ГДЕ
	|		СпецификацииСостав.Ссылка = &Спецификация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СпецификацииОперации.Операция,
	|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ч),
	|		-(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА СпецификацииОперации.Количество = 0
	|					ТОГДА 1
	|				ИНАЧЕ СпецификацииОперации.Количество * ВЫБОР
	|						КОГДА СпецификацииОперации.Операция.ФиксированнаяСтоимость
	|							ТОГДА &КоличествоЗапасов / СпецификацииОперации.КоличествоПродукции
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			КОНЕЦ КАК ЧИСЛО(15, 3))),
	|		-(ВЫРАЗИТЬ(СпецификацииОперации.НормаВремени * ВЫБОР
	|				КОГДА СпецификацииОперации.Операция.ФиксированнаяСтоимость
	|					ТОГДА 1
	|				ИНАЧЕ &КоличествоЗапасов / СпецификацииОперации.КоличествоПродукции
	|			КОНЕЦ КАК ЧИСЛО(15, 3))),
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Справочник.Спецификации.Операции КАК СпецификацииОперации
	|	ГДЕ
	|		СпецификацииОперации.Ссылка = &Спецификация) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Спецификация,
	|	ВложенныйЗапрос.ЕдиницаИзмерения";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ПрисутствуетВКалькуляции ИЛИ НЕ Выборка.ПрисутствуетВСпецификации ИЛИ Выборка.КоличествоОтличается ИЛИ Выборка.НормаВремениОтличается Тогда
			Возврат Ложь;
		КонецЕсли; 	
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВывестиКалькуляциюКлиент()
	
	ЗапрещеноИзменениеКалькуляции = Ложь;
	ПоказанаКалькуляцияЗаказа = НЕ ЗначениеЗаполнено(ТекущийИсточник);
	Если НЕ ТолькоПросмотр 
		И НЕ ПоказанаКалькуляцияЗаказа 
		И НЕ СравнитьКалькуляциюИСпецификацию(ТекущийИдентификатор, ТекущийИсточник)
		И НЕ (ЭтоЗаказНаряд И ДанныеЗаказа.РасчетКалькуляцииПоДаннымТЧ) Тогда
		Оповещение = Новый ОписаниеОповещения("ВывестиКалькуляциюКлиентЗавершение", ЭтотОбъект);
		Если ЭтоЗаказНаряд Тогда
			ТекстСообщения = НСтр("ru = 'Состав спецификации был изменен. Обновить калькуляцию заказ-наряда?'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Состав спецификации был изменен. Обновить калькуляцию заказа?'");
		КонецЕсли; 
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли; 
	ВывестиКалькуляцию();
	ВывестиКомментарий();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиКалькуляциюКлиентЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		ЗапрещеноИзменениеКалькуляции = Истина;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		СтрокаИсточник = СтрокаИсточник(ДанныеЗаказа, ТекущийИдентификатор, ТекущийИсточник);
		Если СтрокаИсточник = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		ПоказанаКалькуляцияЗаказа = Истина;
		ЗаменитьСпецификацию(СтрокаИсточник.ПолучитьИдентификатор(), Ложь);
	КонецЕсли; 
	ВывестиКалькуляцию();	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаИсточник(ДанныеЗаказа, Идентификатор, Источник)
	
	Если Источник=ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Запас") Тогда
		СтрокаИсточник = ДанныеЗаказа.Запасы.НайтиПоИдентификатору(Идентификатор);
	ИначеЕсли Источник=ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Работа") Тогда
		СтрокаИсточник = ДанныеЗаказа.Работы.НайтиПоИдентификатору(Идентификатор);
	ИначеЕсли Источник=ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Материал") Тогда
		СтрокаИсточник = ДанныеЗаказа.Материалы.НайтиПоИдентификатору(Идентификатор);
	Иначе
		СтрокаИсточник = Неопределено;
	КонецЕсли; 
	Возврат СтрокаИсточник;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьНомераСтрок(Таблица, НачинаяС = 0)
	
	Если Таблица.Колонки.Найти("НомерСтроки")=Неопределено Тогда
		Таблица.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));		
	КонецЕсли;
	НомерСтроки = НачинаяС;
	Для каждого СтрокаТЧ Из Таблица Цикл
		НомерСтроки = НомерСтроки + 1;
		СтрокаТЧ.НомерСтроки = НомерСтроки;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ВывестиКалькуляцию()
	
	ПоказанаКалькуляцияЗаказа = НЕ ЗначениеЗаполнено(ТекущийИсточник);
	ВидПроизводства = Неопределено;
	Если НЕ ПоказанаКалькуляцияЗаказа 
		И КэшЗначений.ИспользоватьЭтапыПроизводства Тогда
		СтрокаИсточник = СтрокаИсточник(ДанныеЗаказа, ТекущийИдентификатор, ТекущийИсточник);
		РаботаСРасчетомПоТЧ = (ЭтоЗаказНаряд И ДанныеЗаказа.РасчетКалькуляцииПоДаннымТЧ И ТекущийИсточник = Перечисления.ИсточникиСтрокКалькуляции.Работа);
		Если СтрокаИсточник <> Неопределено И НЕ РаботаСРасчетомПоТЧ Тогда
			ВидПроизводства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаИсточник.Спецификация, "ВидПроизводства");
			ОбновитьСписокВыбораЭтапы();
		КонецЕсли; 
	КонецЕсли; 
	
	УстановитьВидимостьИДоступность();
	// Переменная хранит номенклатуру, по которой уже выведены фактические данные
	ВыведенныеФактДанные = Новый Массив;
	
	КалькуляцияНаФорме.Очистить();
	Если ПоказанаКалькуляцияЗаказа Тогда
		
		// Калькуляция заказа
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НомерВариантаКП", ТекущийВариантКП);
		
		ТаблицаСебестоимости = ДанныеЗаказа.Калькуляция.Выгрузить(СтруктураОтбора);
		Для каждого СтрокаСебестоимости Из ТаблицаСебестоимости Цикл
			Если ЗначениеЗаполнено(СтрокаСебестоимости.НоменклатураИзделие) 
				И СтрокаСебестоимости.НоменклатураИзделие <> СтрокаСебестоимости.Номенклатура Тогда
				СтрокаСебестоимости.РучноеИзменение = Ложь;
			КонецЕсли; 
		КонецЦикла;
		ТаблицаСебестоимости.Свернуть("НоменклатураИзделие, ХарактеристикаИзделие, СпецификацияИзделие, КлючСвязи, Источник, РучноеИзменение", "Себестоимость");
		
		СтруктураОтбораЗапасы = Новый Структура;
		СтруктураОтбораЗапасы.Вставить("НомерВариантаКП", ТекущийВариантКП);
		СтруктураОтбораЗапасы.Вставить("ЭтоРазделитель", Ложь);
		
		ТаблицаЗапасов = ДанныеЗаказа.Запасы.Выгрузить(СтруктураОтбораЗапасы);
		ТаблицаКалькуляции = ТаблицаЗапасов.СкопироватьКолонки();
		ТаблицаКалькуляции.Колонки.Добавить("Источник", Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиСтрокКалькуляции"));
		// Работы
		Если ЭтоЗаказНаряд Тогда
			Для каждого СтрокаТабличнойЧасти Из ДанныеЗаказа.Работы Цикл
				НоваяСтрока = ТаблицаКалькуляции.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
				НоваяСтрока.Количество = СтрокаТабличнойЧасти.Кратность;
				НоваяСтрока.Источник = Перечисления.ИсточникиСтрокКалькуляции.Работа;
			КонецЦикла; 
		КонецЕсли; 
		// Запасы
		Для каждого СтрокаТабличнойЧасти Из ТаблицаЗапасов Цикл
			НоваяСтрока = ТаблицаКалькуляции.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
			НоваяСтрока.Источник = Перечисления.ИсточникиСтрокКалькуляции.Запас;
		КонецЦикла; 
		// Доставка
		Если НЕ ЭтоЗаказНаряд И ЗначениеЗаполнено(ДанныеЗаказа.СлужбаДоставки) И ЗначениеЗаполнено(ДанныеЗаказа.СтоимостьДоставки) Тогда
			СтрокаТабличнойЧасти = ТаблицаКалькуляции.Добавить();
			СтрокаТабличнойЧасти.Номенклатура = ДанныеЗаказа.НоменклатураДоставки;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаказа.НоменклатураДоставки, "ЕдиницаИзмерения");
			СтрокаТабличнойЧасти.Количество = 1;
			СтрокаТабличнойЧасти.Источник = Перечисления.ИсточникиСтрокКалькуляции.Доставка;
			СтрокаТабличнойЧасти.СтавкаНДС = ДанныеЗаказа.СтавкаНДСДоставки;
			СтрокаТабличнойЧасти.Цена = ДанныеЗаказа.СтоимостьДоставки;
			СтрокаТабличнойЧасти.Всего = ДанныеЗаказа.СтоимостьДоставки;
		КонецЕсли;
		ЗаполнитьНомераСтрок(ТаблицаКалькуляции);
		
		ТаблицаФакт = ФактическиеДанные.Выгрузить();
		ЗаполнитьНомераСтрок(ТаблицаФакт, ТаблицаКалькуляции.Количество());
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаСебестоимости", ТаблицаСебестоимости);
		Запрос.УстановитьПараметр("ТаблицаКалькуляции", ТаблицаКалькуляции);
		Запрос.УстановитьПараметр("ФактическиеДанные", ТаблицаФакт);
		Запрос.УстановитьПараметр("ЦенаБезНДС", ДанныеЗаказа.НалогообложениеНДС=Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС И НЕ ДанныеЗаказа.СуммаВключаетНДС);
		НоменклатураКалькуляции = Новый Массив;
		Для каждого Стр Из ДанныеЗаказа.Калькуляция Цикл
			Если Стр.НомерВариантаКП<>ТекущийВариантКП Тогда
				Продолжить;
			КонецЕсли; 
			Если Стр.Источник = Перечисления.ИсточникиСтрокКалькуляции.Запас
				ИЛИ Стр.Источник = Перечисления.ИсточникиСтрокКалькуляции.Зарплата Тогда
				Продолжить;
			КонецЕсли; 
			НоменклатураКалькуляции.Добавить(Стр.Номенклатура);
		КонецЦикла; 
		Запрос.УстановитьПараметр("НоменклатураКалькуляции", НоменклатураКалькуляции);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСебестоимости.КлючСвязи КАК КлючСвязи,
		|	ТаблицаСебестоимости.РучноеИзменение КАК РучноеИзменение,
		|	ТаблицаСебестоимости.Источник КАК Источник,
		|	ТаблицаСебестоимости.Себестоимость КАК Себестоимость
		|ПОМЕСТИТЬ ТаблицаСебестоимости
		|ИЗ
		|	&ТаблицаСебестоимости КАК ТаблицаСебестоимости
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаКалькуляции.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(ТаблицаКалькуляции.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(ТаблицаКалькуляции.Партия КАК Справочник.ПартииНоменклатуры) КАК Партия,
		|	ВЫРАЗИТЬ(ТаблицаКалькуляции.Спецификация КАК Справочник.Спецификации) КАК Спецификация,
		|	ТаблицаКалькуляции.НомерСтроки КАК НомерСтроки,
		|	ТаблицаКалькуляции.Источник КАК Источник,
		|	ТаблицаКалькуляции.КлючСвязи КАК КлючСвязи,
		|	ТаблицаКалькуляции.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаКалькуляции.Количество КАК Количество,
		|	ТаблицаКалькуляции.Цена * ВЫБОР
		|		КОГДА &ЦенаБезНДС
		|			ТОГДА (100 + ВЫРАЗИТЬ(ТаблицаКалькуляции.СтавкаНДС КАК Справочник.СтавкиНДС).Ставка) / 100
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Цена,
		|	ТаблицаКалькуляции.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|	ТаблицаКалькуляции.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
		|	ТаблицаКалькуляции.Всего КАК Сумма
		|ПОМЕСТИТЬ ТаблицаКалькуляции
		|ИЗ
		|	&ТаблицаКалькуляции КАК ТаблицаКалькуляции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФактическиеДанные.НомерСтроки КАК НомерСтроки,
		|	ФактическиеДанные.Номенклатура КАК Номенклатура,
		|	ФактическиеДанные.СебестоимостьФакт КАК СебестоимостьФакт,
		|	ФактическиеДанные.СтоимостьФакт КАК СтоимостьФакт,
		|	ФактическиеДанные.ПрибыльФакт КАК ПрибыльФакт
		|ПОМЕСТИТЬ ФактическиеДанные
		|ИЗ
		|	&ФактическиеДанные КАК ФактическиеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаКалькуляции.Номенклатура КАК Номенклатура,
		|	СУММА(ТаблицаКалькуляции.Количество) КАК Количество
		|ПОМЕСТИТЬ БазаРаспределения
		|ИЗ
		|	ТаблицаКалькуляции КАК ТаблицаКалькуляции
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаКалькуляции.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаКалькуляции.НомерСтроки КАК НомерСтроки,
		|	ТаблицаКалькуляции.Номенклатура КАК Номенклатура,
		|	ТаблицаКалькуляции.Характеристика КАК Характеристика,
		|	ТаблицаКалькуляции.Партия КАК Партия,
		|	ТаблицаКалькуляции.Спецификация КАК Спецификация,
		|	ТаблицаКалькуляции.Источник КАК Источник,
		|	ТаблицаКалькуляции.КлючСвязи КАК КлючСвязи,
		|	ТаблицаКалькуляции.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаКалькуляции.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияБазовая,
		|	ТаблицаКалькуляции.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА ТаблицаКалькуляции.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
		|			ТОГДА ТаблицаКалькуляции.Количество * ВЫРАЗИТЬ(ТаблицаКалькуляции.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
		|		ИНАЧЕ ТаблицаКалькуляции.Количество
		|	КОНЕЦ КАК КоличествоБазовое,
		|	ВЫБОР
		|		КОГДА ТаблицаКалькуляции.ПроцентСкидкиНаценки = 100
		|			ТОГДА ТаблицаКалькуляции.Цена * ТаблицаКалькуляции.Количество * (100 - ТаблицаКалькуляции.ПроцентАвтоматическойСкидки) / 100
		|		ИНАЧЕ ТаблицаКалькуляции.Сумма / (1 - ТаблицаКалькуляции.ПроцентСкидкиНаценки / 100)
		|	КОНЕЦ КАК СуммаБезСкидки,
		|	ТаблицаКалькуляции.Сумма КАК Сумма,
		|	ТаблицаКалькуляции.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|	ТаблицаКалькуляции.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
		|	ВЫБОР
		|		КОГДА ТаблицаКалькуляции.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Производство)
		|		КОГДА ТаблицаКалькуляции.Спецификация <> ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Производство)
		|		ИНАЧЕ ТаблицаКалькуляции.Номенклатура.СпособПополнения
		|	КОНЕЦ КАК СпособПополнения,
		|	ТаблицаКалькуляции.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ТаблицаКалькуляции.Номенклатура.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
		|	ТаблицаКалькуляции.Номенклатура.ИспользоватьПартии КАК ИспользоватьПартии
		|ПОМЕСТИТЬ ДанныеДляРасчета
		|ИЗ
		|	ТаблицаКалькуляции КАК ТаблицаКалькуляции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляРасчета.НомерСтроки КАК НомерСтроки,
		|	ДанныеДляРасчета.Номенклатура КАК Номенклатура,
		|	ДанныеДляРасчета.Характеристика КАК Характеристика,
		|	ДанныеДляРасчета.Партия КАК Партия,
		|	ДанныеДляРасчета.Спецификация КАК Спецификация,
		|	ДанныеДляРасчета.КлючСвязи КАК КлючСвязи,
		|	ДанныеДляРасчета.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ДанныеДляРасчета.Количество КАК Количество,
		|	ДанныеДляРасчета.Сумма КАК Сумма,
		|	ДанныеДляРасчета.СуммаБезСкидки КАК СуммаБезСкидки,
		|	ДанныеДляРасчета.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|	ДанныеДляРасчета.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
		|	ДанныеДляРасчета.СпособПополнения КАК СпособПополнения,
		|	ДанныеДляРасчета.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ДанныеДляРасчета.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
		|	ДанныеДляРасчета.ИспользоватьПартии КАК ИспользоватьПартии,
		|	ЕСТЬNULL(ТаблицаСебестоимости.Себестоимость, 0) КАК Себестоимость,
		|	ЕСТЬNULL(ТаблицаСебестоимости.РучноеИзменение, ЛОЖЬ) КАК РучноеИзменение,
		|	ВЫБОР
		|		КОГДА ДанныеДляРасчета.Количество = 0
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(ТаблицаСебестоимости.Себестоимость, 0) / ДанныеДляРасчета.Количество
		|	КОНЕЦ КАК СебестоимостьЕдиницы,
		|	ДанныеДляРасчета.Сумма - ЕСТЬNULL(ТаблицаСебестоимости.Себестоимость, 0) КАК Прибыль,
		|	ДанныеДляРасчета.Источник КАК Источник,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА БазаРаспределения.Количество = 0
		|				ТОГДА 0
		|			ИНАЧЕ ФактическиеДанные.СебестоимостьФакт * ДанныеДляРасчета.Количество / БазаРаспределения.Количество
		|		КОНЕЦ, 0) КАК СебестоимостьФакт,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА БазаРаспределения.Количество = 0
		|				ТОГДА 0
		|			ИНАЧЕ ФактическиеДанные.СтоимостьФакт * ДанныеДляРасчета.Количество / БазаРаспределения.Количество
		|		КОНЕЦ, 0) КАК СтоимостьФакт,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА БазаРаспределения.Количество = 0
		|				ТОГДА 0
		|			ИНАЧЕ ФактическиеДанные.ПрибыльФакт * ДанныеДляРасчета.Количество / БазаРаспределения.Количество
		|		КОНЕЦ, 0) КАК ПрибыльФакт,
		|	ЛОЖЬ КАК НеСохранять
		|ИЗ
		|	ДанныеДляРасчета КАК ДанныеДляРасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСебестоимости КАК ТаблицаСебестоимости
		|		ПО ДанныеДляРасчета.КлючСвязи = ТаблицаСебестоимости.КлючСвязи
		|			И ДанныеДляРасчета.Источник = ТаблицаСебестоимости.Источник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ФактическиеДанные КАК ФактическиеДанные
		|		ПО ДанныеДляРасчета.Номенклатура = ФактическиеДанные.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ БазаРаспределения КАК БазаРаспределения
		|		ПО ДанныеДляРасчета.Номенклатура = БазаРаспределения.Номенклатура
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ФактическиеДанные.НомерСтроки,
		|	ФактическиеДанные.Номенклатура,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка),
		|	ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка),
		|	0,
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	ВЫБОР
		|		КОГДА ФактическиеДанные.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫРАЗИТЬ(ФактическиеДанные.Номенклатура КАК Справочник.Номенклатура).СпособПополнения
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ФактическиеДанные.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫРАЗИТЬ(ФактическиеДанные.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ФактическиеДанные.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫРАЗИТЬ(ФактическиеДанные.Номенклатура КАК Справочник.Номенклатура).ИспользоватьХарактеристики
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ФактическиеДанные.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫРАЗИТЬ(ФактическиеДанные.Номенклатура КАК Справочник.Номенклатура).ИспользоватьПартии
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	0,
		|	ЛОЖЬ,
		|	0,
		|	0,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиСтрокКалькуляции.Прочее),
		|	ФактическиеДанные.СебестоимостьФакт,
		|	ФактическиеДанные.СтоимостьФакт,
		|	ФактическиеДанные.ПрибыльФакт,
		|	ИСТИНА
		|ИЗ
		|	ФактическиеДанные КАК ФактическиеДанные
		|ГДЕ
		|	НЕ ФактическиеДанные.Номенклатура В
		|				(ВЫБРАТЬ
		|					БазаРаспределения.Номенклатура
		|				ИЗ
		|					БазаРаспределения КАК БазаРаспределения)
		|	И НЕ ФактическиеДанные.Номенклатура В (&НоменклатураКалькуляции)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.НеСохранять И Выборка.СтоимостьФакт=0 И НЕ ОтображатьСебестоимость Тогда
				Продолжить;
			КонецЕсли; 
			НоваяСтрока = КалькуляцияНаФорме.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.СебестоимостьЕдиницыФакт = ?(НоваяСтрока.Количество<>0, НоваяСтрока.СебестоимостьФакт / НоваяСтрока.Количество, 0);
			НоваяСтрока.ВложенныйСостав = ЭтоНеизменяемыеДанные(Выборка.Источник)  
			И (Выборка.СпособПополнения=Перечисления.СпособыПополненияЗапасов.Производство ИЛИ ЗначениеЗаполнено(Выборка.Спецификация));
			ВыведенныеФактДанные.Добавить(Выборка.Номенклатура);
		КонецЦикла; 
		Строки = Новый Массив;
		Для каждого Стр Из ДанныеЗаказа.Калькуляция Цикл
			Если Стр.НомерВариантаКП<>ТекущийВариантКП Тогда
				Продолжить;
			КонецЕсли; 
			Если ИсточникЗапас(Стр) ИЛИ ИсточникРабота(Стр) Тогда
				Продолжить;
			КонецЕсли;
			Если Стр.Источник=Перечисления.ИсточникиСтрокКалькуляции.Доставка Тогда
				// Себестоимость доставки следует объединить со строкой дохода
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Источник", Стр.Источник);
				СтрокиНаФорме = КалькуляцияНаФорме.НайтиСтроки(СтруктураОтбора);
				Если СтрокиНаФорме.Количество() > 0 Тогда
					СтрокаНаФорме = СтрокиНаФорме[0];
					СтрокаНаФорме.Себестоимость = Стр.Себестоимость;
					СтрокаНаФорме.Прибыль = СтрокаНаФорме.Сумма - СтрокаНаФорме.Себестоимость;
					Продолжить;
				КонецЕсли; 
			КонецЕсли; 
			Строки.Добавить(Стр);
		КонецЦикла; 
		
	Иначе
		
		// Калькуляция изделия/работы
		СтрокаИсточник = СтрокаИсточник(ДанныеЗаказа, ТекущийИдентификатор, ТекущийИсточник);
		Если СтрокаИсточник=Неопределено Тогда
			Возврат;
		КонецЕсли; 
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("КлючСвязи", СтрокаИсточник.КлючСвязи);
		СтруктураОтбора.Вставить("Источник", ТекущийИсточник);
		Строки = ДанныеЗаказа.Калькуляция.НайтиСтроки(СтруктураОтбора);
		
	КонецЕсли;
	
	Для каждого Стр Из Строки Цикл
		Если Стр.Номенклатура = Стр.НоменклатураИзделие И Стр.Характеристика = Стр.ХарактеристикаИзделие Тогда
			Продолжить;
		КонецЕсли; 
		НоваяСтрока = КалькуляцияНаФорме.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр, "Этап, Номенклатура, Характеристика, Спецификация, Количество, НормаВремени, ЕдиницаИзмерения, СебестоимостьЕдиницы, Себестоимость, Источник, КлючСвязи, РучноеИзменение");
		Если НЕ ПоказанаКалькуляцияЗаказа Тогда
			НоваяСтрока.Источник = Перечисления.ИсточникиСтрокКалькуляции.Прочее;
		КонецЕсли; 
		НоваяСтрока.Прибыль = - Стр.Себестоимость;
		Если ПоказанаКалькуляцияЗаказа И ВыведенныеФактДанные.Найти(Стр.Номенклатура) = Неопределено Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", Стр.Номенклатура);
			СтрокиФакт = ФактическиеДанные.НайтиСтроки(СтруктураОтбора);
			Если ТекущийИсточник = Перечисления.ИсточникиСтрокКалькуляции.Запас Тогда
				СтруктураОтбора.Вставить("НомерВариантаКП", ТекущийВариантКП);
				СтрокиИсточник = ДанныеЗаказа.Запасы.НайтиСтроки(СтруктураОтбора);
			Иначе
				СтрокиИсточник = ДанныеЗаказа.Работы.НайтиСтроки(СтруктураОтбора);
			КонецЕсли; 
			Если СтрокиФакт.Количество() > 0 И СтрокиИсточник.Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиФакт[0], "СебестоимостьФакт, СтоимостьФакт, ПрибыльФакт");
				НоваяСтрока.СебестоимостьЕдиницыФакт = ?(НоваяСтрока.Количество <> 0, НоваяСтрока.СебестоимостьФакт / НоваяСтрока.Количество, 0);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	ОбновитьНомераСтрок(КалькуляцияНаФорме);
	
	ОбновитьДополнительныеРеквизиты();
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНомераСтрок(Таблица)
	
	НомерСтроки = 0;
	Для каждого Стр Из Таблица Цикл
		НомерСтроки = НомерСтроки+1;
		Стр.НомерСтроки = НомерСтроки;
	КонецЦикла; 	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораЭтапы()
	
	Элементы.КалькуляцияНаФормеЭтап.СписокВыбора.Очистить();
	
	Если НЕ ЗначениеЗаполнено(ВидПроизводства) Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидПроизводства", ВидПроизводства);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыПроизводстваЭтапы.Этап КАК Этап
	|ИЗ
	|	Справочник.ВидыПроизводства.Этапы КАК ВидыПроизводстваЭтапы
	|ГДЕ
	|	ВидыПроизводстваЭтапы.Ссылка = &ВидПроизводства
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыПроизводстваЭтапы.НомерСтроки";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Элементы.КалькуляцияНаФормеЭтап.СписокВыбора.НайтиПоЗначению(Выборка.Этап)<>Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Элементы.КалькуляцияНаФормеЭтап.СписокВыбора.Добавить(Выборка.Этап);
	КонецЦикла;
	Если Элементы.КалькуляцияНаФормеЭтап.СписокВыбора.Количество()=0 Тогда
		Элементы.КалькуляцияНаФормеЭтап.СписокВыбора.Добавить(Справочники.ЭтапыПроизводства.ЗавершениеПроизводства);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДополнительныеРеквизиты()
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНоменклатуры.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Для каждого СтрокаТабличнойЧасти Из КалькуляцияНаФорме Цикл
		Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") 
			И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ТипНоменклатуры) Тогда
			НоваяСтрока = ТаблицаНоменклатуры.Добавить();
			НоваяСтрока.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
			НоваяСтрока.Идентификатор = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
		КонецЕсли;
		Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) <> Тип("СправочникСсылка.Номенклатура")
			И НЕ ПоказанаКалькуляцияЗаказа Тогда
			СтрокаТабличнойЧасти.НеСохранять = Истина;
		КонецЕсли; 
	КонецЦикла;
	
	Если ТаблицаНоменклатуры.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Идентификатор КАК Идентификатор,
	|	ВЫРАЗИТЬ(ТаблицаНоменклатуры.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Идентификатор КАК Идентификатор,
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Производство)
	|		ИНАЧЕ ТаблицаНоменклатуры.Номенклатура.СпособПополнения
	|	КОНЕЦ КАК СпособПополнения,
	|	ТаблицаНоменклатуры.Номенклатура.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	|	ТаблицаНоменклатуры.Номенклатура.ИспользоватьПартии КАК ИспользоватьПартии,
	|	ТаблицаНоменклатуры.Номенклатура.ФиксированнаяСтоимость КАК ФиксированнаяСтоимость
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТабличнойЧасти = КалькуляцияНаФорме.НайтиПоИдентификатору(Выборка.Идентификатор);
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка, "ТипНоменклатуры, СпособПополнения, ИспользоватьХарактеристики, ИспользоватьПартии, ФиксированнаяСтоимость");
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из КалькуляцияНаФорме Цикл
		Если СтрокаТабличнойЧасти.Источник <> Перечисления.ИсточникиСтрокКалькуляции.Шаблон Тогда
			Продолжить;
		КонецЕсли;
		СтрокаШаблона = СтрокаПоКлючу(СоставШаблона, СтрокаТабличнойЧасти.КлючСвязи);
		Если СтрокаШаблона = Неопределено ИЛИ СтрокаШаблона.ТипСтроки <> "Расход" Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаТабличнойЧасти.СпособРасчета = СтрокаШаблона.СпособРасчета;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПустаяТаблицаМатериалов()
	
	ТаблицаМатериалов = Новый ТаблицаЗначений;
	ТаблицаМатериалов.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаМатериалов.Колонки.Добавить("НомерВариантаКП", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0)));
	ТаблицаМатериалов.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0)));
	ТаблицаМатериалов.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаМатериалов.Колонки.Добавить("Источник", Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиСтрокКалькуляции"));
	ТаблицаМатериалов.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	ТаблицаМатериалов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаМатериалов.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаМатериалов.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.Спецификации"));
	ТаблицаМатериалов.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения,СправочникСсылка.КлассификаторЕдиницИзмерения"));
	ТаблицаМатериалов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаМатериалов.Колонки.Добавить("НормаВремени", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 3)));
	ТаблицаМатериалов.Колонки.Добавить("НоменклатураСебестоимость", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаМатериалов.Колонки.Добавить("ХарактеристикаСебестоимость", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаМатериалов.Колонки.Добавить("СпецификацияСебестоимость", Новый ОписаниеТипов("СправочникСсылка.Спецификации"));
	ТаблицаМатериалов.Колонки.Добавить("ЕдиницаИзмеренияСебестоимость", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения,СправочникСсылка.КлассификаторЕдиницИзмерения"));
	ТаблицаМатериалов.Колонки.Добавить("КоличествоСебестоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаМатериалов.Колонки.Добавить("ПроверкаЗацикливания", Новый ОписаниеТипов("Массив"));
	Возврат ТаблицаМатериалов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПустаяТаблицаСостава()
	
	ТаблицаСостава = Новый ТаблицаЗначений;
	ТаблицаСостава.Колонки.Добавить("СпецификацияУзел", Новый ОписаниеТипов("СправочникСсылка.Спецификации"));
	ТаблицаСостава.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	ТаблицаСостава.Колонки.Добавить("ТипСтрокиСостава", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыСтрокСоставаСпецификации"));
	ТаблицаСостава.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаСостава.Колонки.Добавить("ФиксированнаяСтоимость", Новый ОписаниеТипов("Булево"));
	ТаблицаСостава.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаСостава.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения, СправочникСсылка.КлассификаторЕдиницИзмерения"));
	ТаблицаСостава.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.Спецификации"));
	ТаблицаСостава.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаСостава.Колонки.Добавить("КоличествоПродукции", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаСостава.Колонки.Добавить("НормаВремени", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 3)));
	ТаблицаСостава.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0)));
	ТаблицаСостава.Колонки.Добавить("Источник", Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиСтрокКалькуляции"));
	ТаблицаСостава.Индексы.Добавить("СпецификацияУзел");
	
	Возврат ТаблицаСостава;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПустаяТаблицаКэшСебестоимости()
	
	ТаблицаМатериалов = Новый ТаблицаЗначений;
	ТаблицаМатериалов.Колонки.Добавить("НомерВариантаКП", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0)));
	ТаблицаМатериалов.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0)));
	ТаблицаМатериалов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаМатериалов.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаМатериалов.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.Спецификации"));
	ТаблицаМатериалов.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения,СправочникСсылка.КлассификаторЕдиницИзмерения"));
	ТаблицаМатериалов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаМатериалов.Колонки.Добавить("СебестоимостьЕдиницы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаМатериалов.Колонки.Добавить("Себестоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Возврат ТаблицаМатериалов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуМатериалов(ТаблицаМатериалов, СтрокаКалькуляции = Неопределено)
	
	ЗаменаСпецификации = (СтрокаКалькуляции <> Неопределено);
	
	Если НЕ ЗаменаСпецификации Тогда
		Если ЭтоЗаказНаряд Тогда
			Для каждого Стр Из ДанныеЗаказа.Работы Цикл
				ИдентификаторСтроки = Стр.ПолучитьИдентификатор();
				НоваяСтрока = ТаблицаМатериалов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр, "КлючСвязи, Номенклатура, Характеристика, Спецификация");
				Если ЗначениеЗаполнено(Стр.Спецификация) Тогда
					НоваяСтрока.ПроверкаЗацикливания.Добавить(Стр.Спецификация);
				КонецЕсли; 
				НоваяСтрока.Количество = Стр.Кратность;
				НоваяСтрока.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ч;
				НоваяСтрока.Идентификатор = ИдентификаторСтроки;
				НоваяСтрока.Источник = Перечисления.ИсточникиСтрокКалькуляции.Работа;
			КонецЦикла;
		КонецЕсли;
		Для каждого Стр Из ДанныеЗаказа.Запасы Цикл
			Если Стр.ЭтоРазделитель Тогда
				Продолжить;
			КонецЕсли;
			ИдентификаторСтроки = Стр.ПолучитьИдентификатор();
			НоваяСтрока = ТаблицаМатериалов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр, "НомерВариантаКП, КлючСвязи, Номенклатура, Характеристика, Спецификация, ЕдиницаИзмерения, Количество");
			Если ЗначениеЗаполнено(Стр.Спецификация) Тогда
				НоваяСтрока.ПроверкаЗацикливания.Добавить(Стр.Спецификация);
			КонецЕсли; 
			НоваяСтрока.Идентификатор = ИдентификаторСтроки;
			НоваяСтрока.Источник = Перечисления.ИсточникиСтрокКалькуляции.Запас;
		КонецЦикла;
	Иначе
		Если СтрокаКалькуляции.Свойство("Источник") Тогда
			Источник = СтрокаКалькуляции.Источник;
		Иначе
			Источник = ТекущийИсточник;
		КонецЕсли; 
		НоваяСтрока = ТаблицаМатериалов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКалькуляции, "КлючСвязи, Номенклатура, Характеристика, Спецификация, Количество");
		НоваяСтрока.Источник = Источник;
		Если Источник=Перечисления.ИсточникиСтрокКалькуляции.Запас Тогда
			СтрокаИсточник = СтрокаПоКлючу(ДанныеЗаказа.Запасы, СтрокаКалькуляции.КлючСвязи);
			НоваяСтрока.ЕдиницаИзмерения = СтрокаКалькуляции.ЕдиницаИзмерения;
		ИначеЕсли Источник=Перечисления.ИсточникиСтрокКалькуляции.Работа Тогда
			СтрокаИсточник = СтрокаПоКлючу(ДанныеЗаказа.Работы, СтрокаКалькуляции.КлючСвязи);
			НоваяСтрока.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ч;
		Иначе
			СтрокаИсточник = Неопределено;
		КонецЕсли; 
		Если СтрокаИсточник<>Неопределено Тогда
			НоваяСтрока.Идентификатор = СтрокаИсточник.ПолучитьИдентификатор();
		КонецЕсли;
		НоваяСтрока.НомерВариантаКП = ТекущийВариантКП;
		Если ЗначениеЗаполнено(НоваяСтрока.Спецификация) Тогда
			НоваяСтрока.ПроверкаЗацикливания.Добавить(НоваяСтрока.Спецификация);
		КонецЕсли;
	КонецЕсли;
	Для каждого СтрокаМатериалов Из ТаблицаМатериалов Цикл
		СтрокаМатериалов.НоменклатураСебестоимость = СтрокаМатериалов.Номенклатура;
		СтрокаМатериалов.ХарактеристикаСебестоимость = СтрокаМатериалов.Характеристика;
		СтрокаМатериалов.СпецификацияСебестоимость = СтрокаМатериалов.Спецификация;
		СтрокаМатериалов.ЕдиницаИзмеренияСебестоимость = СтрокаМатериалов.ЕдиницаИзмерения;
		СтрокаМатериалов.КоличествоСебестоимость = СтрокаМатериалов.Количество;
	КонецЦикла; 
	ЗаполнитьНомераСтрок(ТаблицаМатериалов);
	
	ТаблицаИзмененийСостава = СоставыСпецификаций.Выгрузить();
	Если ЭтоЗаказНаряд 
		И ДанныеЗаказа.РасчетКалькуляцииПоДаннымТЧ
		И НЕ ЗаменаСпецификации Тогда
		ДополнитьСоставДаннымиТЧ(ТаблицаИзмененийСостава);
		Для каждого СтрокаМатериала Из ТаблицаМатериалов Цикл
			Если ИсточникРабота(СтрокаМатериала) И ЗначениеЗаполнено(СтрокаМатериала.СпецификацияСебестоимость) Тогда
				СтрокаМатериала.СпецификацияСебестоимость = Неопределено;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Уровень = ?(ПоказанаКалькуляцияЗаказа, 0, 1);
	Пока ЕстьВложенныеСпецификации(ТаблицаМатериалов) ИЛИ (Уровень = 0 И ТребуетсяРасчетТЧЗаказНаряда()) Цикл
		Уровень = Уровень + 1;
		Результат = РазузловатьНоменклатуру(ТаблицаМатериалов, ТаблицаИзмененийСостава, Уровень);
		Если НЕ Результат Тогда
			// Ошибка разузлования
			ТаблицаМатериалов.Очистить();
			Возврат;
		КонецЕсли; 
	КонецЦикла; 
	
	ТаблицаМатериалов.Свернуть("НомерСтроки, Идентификатор, Источник, Этап, Номенклатура, Характеристика, Спецификация, ЕдиницаИзмерения, НоменклатураСебестоимость, ХарактеристикаСебестоимость, ЕдиницаИзмеренияСебестоимость, Количество, НормаВремени", "КоличествоСебестоимость");
	ТаблицаМатериалов.Сортировать("НомерСтроки");
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСоставДаннымиТЧ(ТаблицаСостава)
	
	Для каждого СтрокаТабличнойЧасти Из ДанныеЗаказа.Работы Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
		СтруктураОтбора.Вставить("Источник", Перечисления.ИсточникиСтрокКалькуляции.Работа);
		Строки = ТаблицаСостава.НайтиСтроки(СтруктураОтбора);
		Если Строки.Количество() > 0 Тогда
			// Состав был изменен
			Продолжить;
		КонецЕсли; 
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
		Строки = ДанныеЗаказа.Материалы.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаМатериалов Из Строки Цикл
			НоваяСтрокаСостава = ТаблицаСостава.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСостава, СтрокаМатериалов);
			НоваяСтрокаСостава.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
			НоваяСтрокаСостава.Источник = Перечисления.ИсточникиСтрокКалькуляции.Работа;
			НоваяСтрокаСостава.НоменклатураИзделие = СтрокаТабличнойЧасти.Номенклатура;
			НоваяСтрокаСостава.ХарактеристикаИзделие = СтрокаТабличнойЧасти.Характеристика;
			НоваяСтрокаСостава.СпецификацияИзделие = СтрокаТабличнойЧасти.Спецификация;
			НоваяСтрокаСостава.КоличествоПродукции = СтрокаТабличнойЧасти.Кратность;
			НоваяСтрокаСостава.ДоляСтоимости = 1;
			НоваяСтрокаСостава.ТипСтрокиСостава = Перечисления.ТипыСтрокСоставаСпецификации.Материал;
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоИзделие(Номенклатура)
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ТипНоменклатуры, СпособПополнения");
	Если ЗначенияРеквизитов.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
		Возврат Истина;
	КонецЕсли; 
	Если ЗначенияРеквизитов.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас
		И ЗначенияРеквизитов.СпособПополнения <> Перечисления.СпособыПополненияЗапасов.Закупка Тогда
		Возврат Истина;
	КонецЕсли; 
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция РазузловатьНоменклатуру(ТаблицаМатериалов, СоставыСпецификаций = Неопределено, Уровень = 0)
	
	СтрокиСпецификаций = Новый Массив;
	Для каждого Стр Из ТаблицаМатериалов Цикл
		Если ЗначениеЗаполнено(Стр.СпецификацияСебестоимость) ИЛИ (Уровень = 1 И ЭтоИзделие(Стр.Номенклатура)) Тогда
			СтрокиСпецификаций.Добавить(Стр);
		КонецЕсли; 
	КонецЦикла;
	ТаблицаСостава = ТаблицаСоставаСпецификаций(СтрокиСпецификаций, СоставыСпецификаций, Уровень);
	
	Для каждого СтрМатериала Из СтрокиСпецификаций Цикл
		ИндексВставки = ТаблицаМатериалов.Индекс(СтрМатериала);
		СтруктураОтбора = Новый Структура;
		Если ЗначениеЗаполнено(СтрМатериала.СпецификацияСебестоимость) Тогда
			СтруктураОтбора.Вставить("СпецификацияУзел", СтрМатериала.СпецификацияСебестоимость);
		Иначе
			СтруктураОтбора.Вставить("КлючСвязи", СтрМатериала.КлючСвязи);
			СтруктураОтбора.Вставить("Источник", СтрМатериала.Источник);
		КонецЕсли; 
		СтрокиСостава = ТаблицаСостава.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрСостава Из СтрокиСостава Цикл
			Если ЗначениеЗаполнено(СтрСостава.Спецификация)
				И СтрМатериала.ПроверкаЗацикливания.Найти(СтрСостава.Спецификация) <> Неопределено Тогда
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Зацикливание спецификации %1 при изготовлении изделия %2'"), СтрСостава.Спецификация,
					СтрМатериала.Номенклатура);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
			Коэффициент = ?(ТипЗнч(СтрМатериала.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения"), 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрМатериала.ЕдиницаИзмерения, "Коэффициент"), 
			1);
			НоваяСтрока = ТаблицаМатериалов.Вставить(ИндексВставки);
			ИндексВставки = ИндексВставки + 1;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрМатериала, "Идентификатор, Источник");
			НоваяСтрока.ПроверкаЗацикливания = ОбщегоНазначения.СкопироватьРекурсивно(СтрМатериала.ПроверкаЗацикливания);
			Если Уровень = 1 Тогда
				// Храним первый уровень вложенности спецификаций 
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрСостава, "Этап, Номенклатура, Характеристика, Спецификация, ЕдиницаИзмерения, Количество, НормаВремени");
				Если НЕ ЗначениеЗаполнено(СтрСостава.ТипСтрокиСостава) И НЕ СтрСостава.ФиксированнаяСтоимость И СтрСостава.НормаВремени <> 0 Тогда
					НоваяСтрока.НормаВремени = СтрСостава.НормаВремени / СтрСостава.КоличествоПродукции * СтрМатериала.КоличествоСебестоимость * Коэффициент;
				Иначе
					НоваяСтрока.Количество = СтрСостава.Количество / СтрСостава.КоличествоПродукции * СтрМатериала.КоличествоСебестоимость * Коэффициент;
				КонецЕсли; 
			Иначе
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрМатериала, "Этап, Номенклатура, Характеристика, Спецификация, ЕдиницаИзмерения, Количество");
			КонецЕсли; 
			Если ЗначениеЗаполнено(СтрСостава.Спецификация) Тогда
				НоваяСтрока.ПроверкаЗацикливания.Добавить(СтрСостава.Спецификация);
			КонецЕсли;
			НоваяСтрока.НоменклатураСебестоимость = СтрСостава.Номенклатура;
			НоваяСтрока.ХарактеристикаСебестоимость = СтрСостава.Характеристика;
			НоваяСтрока.СпецификацияСебестоимость = СтрСостава.Спецификация;
			НоваяСтрока.ЕдиницаИзмеренияСебестоимость = СтрСостава.ЕдиницаИзмерения;
			Если НЕ ЗначениеЗаполнено(СтрСостава.ТипСтрокиСостава) И НЕ СтрСостава.ФиксированнаяСтоимость И СтрСостава.НормаВремени <> 0 Тогда
				НоваяСтрока.КоличествоСебестоимость = СтрСостава.НормаВремени / СтрСостава.КоличествоПродукции * СтрМатериала.КоличествоСебестоимость * Коэффициент;
			Иначе
				НоваяСтрока.КоличествоСебестоимость = СтрСостава.Количество / СтрСостава.КоличествоПродукции * СтрМатериала.КоличествоСебестоимость * Коэффициент;
			КонецЕсли; 
			НоваяСтрока.НомерСтроки = СтрМатериала.НомерСтроки;
		КонецЦикла;
		ТаблицаМатериалов.Удалить(СтрМатериала);
	КонецЦикла;
	
	// Перенумерация материалов после разворачивания первого уровня спецификаций
	Если Уровень = 1 Тогда
		ЗаполнитьНомераСтрок(ТаблицаМатериалов);
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТаблицаСоставаСпецификаций(СтрокиСпецификаций, СоставыСпецификаций, Уровень)
	
	ИзмененныеСтроки = Новый Массив;
	Спецификации = Новый Массив;
	Для каждого Стр Из СтрокиСпецификаций Цикл
		Если Уровень = 1 И СоставыСпецификаций <> Неопределено Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("КлючСвязи", Стр.КлючСвязи);
			СтруктураОтбора.Вставить("Источник", Стр.Источник);
			Если СоставыСпецификаций.НайтиСтроки(СтруктураОтбора).Количество()>0 Тогда
				ИзмененныеСтроки.Добавить(Стр);
				Продолжить;
			КонецЕсли; 
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.СпецификацияСебестоимость) Тогда
			Спецификации.Добавить(Стр.СпецификацияСебестоимость);
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаСостава = ПустаяТаблицаСостава();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Спецификации", Спецификации);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпецификацииСостав.Ссылка КАК СпецификацияУзел,
	|	СпецификацииСостав.Этап КАК Этап,
	|	СпецификацииСостав.ТипСтрокиСостава КАК ТипСтрокиСостава,
	|	СпецификацииСостав.Номенклатура КАК Номенклатура,
	|	СпецификацииСостав.Номенклатура.ФиксированнаяСтоимость КАК ФиксированнаяСтоимость,
	|	СпецификацииСостав.Характеристика КАК Характеристика,
	|	СпецификацииСостав.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СпецификацииСостав.Спецификация КАК Спецификация,
	|	СпецификацииСостав.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА СпецификацииСостав.КоличествоПродукции = 0
	|			ТОГДА 1
	|		ИНАЧЕ СпецификацииСостав.КоличествоПродукции
	|	КОНЕЦ КАК КоличествоПродукции,
	|	0 КАК НормаВремени,
	|	0 КАК КлючСвязи,
	|	ЗНАЧЕНИЕ(Перечисление.ИсточникиСтрокКалькуляции.ПустаяСсылка) КАК Источник
	|ИЗ
	|	Справочник.Спецификации.Состав КАК СпецификацииСостав
	|ГДЕ
	|	СпецификацииСостав.Ссылка В(&Спецификации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СпецификацииОперации.Ссылка,
	|	СпецификацииОперации.Этап,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСтрокСоставаСпецификации.ПустаяСсылка),
	|	СпецификацииОперации.Операция,
	|	СпецификацииОперации.Операция.ФиксированнаяСтоимость,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ч),
	|	ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка),
	|	ВЫБОР
	|		КОГДА СпецификацииОперации.Количество = 0
	|				ИЛИ НЕ СпецификацииОперации.Операция.ФиксированнаяСтоимость
	|			ТОГДА 1
	|		ИНАЧЕ СпецификацииОперации.Количество
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СпецификацииОперации.КоличествоПродукции = 0
	|			ТОГДА 1
	|		ИНАЧЕ СпецификацииОперации.КоличествоПродукции
	|	КОНЕЦ,
	|	СпецификацииОперации.НормаВремени,
	|	0,
	|	ЗНАЧЕНИЕ(Перечисление.ИсточникиСтрокКалькуляции.ПустаяСсылка)
	|ИЗ
	|	Справочник.Спецификации.Операции КАК СпецификацииОперации
	|ГДЕ
	|	СпецификацииОперации.Ссылка В(&Спецификации)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаСостава.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла; 
	
	Если Уровень = 1 И СоставыСпецификаций <> Неопределено Тогда
		Для каждого Стр Из ИзмененныеСтроки Цикл
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("КлючСвязи", Стр.КлючСвязи);
			СтруктураОтбора.Вставить("Источник", Стр.Источник);
			СтрокиСостава = СоставыСпецификаций.НайтиСтроки(СтруктураОтбора);
			Для каждого СтрСостава Из СтрокиСостава Цикл
				НоваяСтрока = ТаблицаСостава.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрСостава);
				НоваяСтрока.СпецификацияУзел = Стр.Спецификация;
				НоваяСтрока.ФиксированнаяСтоимость = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ФиксированнаяСтоимость");
				НоваяСтрока.КоличествоПродукции = ?(СтрСостава.КоличествоПродукции = 0, 1, СтрСостава.КоличествоПродукции);
			КонецЦикла; 
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат ТаблицаСостава;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьВложенныеСпецификации(ТаблицаМатериалов)
	
	Для каждого Стр Из ТаблицаМатериалов Цикл
		Если ЗначениеЗаполнено(Стр.СпецификацияСебестоимость) Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла; 
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ТребуетсяРасчетТЧЗаказНаряда()
	
	Если ДанныеЗаказа.ВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ДанныеЗаказа.РасчетКалькуляцииПоДаннымТЧ Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ДанныеЗаказа.Материалы.Количество() = 0 И ДанныеЗаказа.Материалы.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СтруктураДанныхШапки()
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Заказ", ЗаказСсылка);
	СтруктураДанные.Вставить("Дата", ДанныеЗаказа.Дата);
	СтруктураДанные.Вставить("НалогообложениеНДС", ДанныеЗаказа.НалогообложениеНДС);
	СтруктураДанные.Вставить("Курс", КурсДокумента);
	СтруктураДанные.Вставить("Кратность", КратностьДокумента);
	Если ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=ПредопределенноеЗначение("Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоПоследнейЦенеЗакупки") Тогда
		ОтборВидЦен = Неопределено;
	ИначеЕсли ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=ПредопределенноеЗначение("Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамНоменклатуры")
		ИЛИ ТипЗнч(ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции)=Тип("СправочникСсылка.ВидыЦен") Тогда
		ОтборВидЦен = ВидЦен;
	ИначеЕсли ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=ПредопределенноеЗначение("Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов") Тогда
		ОтборВидЦен = ВидыЦенКонтрагентов;
	Иначе
		ОтборВидЦен = Неопределено;
	КонецЕсли;
	СтруктураДанные.Вставить("ВидыЦен", ОтборВидЦен);
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураДанные.Номенклатура, "ЕдиницаИзмерения, СпособПополнения, ТипНоменклатуры, ФиксированнаяСтоимость, НормаВремени, ИспользоватьХарактеристики, ИспользоватьПартии");
	
	СтруктураДанные.Вставить("СпособПополнения", ?(ЗначенияРеквизитов.ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Работа, Перечисления.СпособыПополненияЗапасов.Производство, ЗначенияРеквизитов.СпособПополнения));
	СтруктураДанные.Вставить("ТипНоменклатуры", ЗначенияРеквизитов.ТипНоменклатуры);
	Если ЗначенияРеквизитов.ТипНоменклатуры=ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Операция") Тогда
		СтруктураДанные.Вставить("ФиксированнаяСтоимость", ЗначенияРеквизитов.ФиксированнаяСтоимость);
		СтруктураДанные.Вставить("НормаВремени", ?(ЗначенияРеквизитов.НормаВремени=0, 1, ЗначенияРеквизитов.НормаВремени));
	Иначе
		СтруктураДанные.Вставить("ФиксированнаяСтоимость", Истина);
		СтруктураДанные.Вставить("НормаВремени", 0);
	КонецЕсли; 
	СтруктураДанные.Вставить("ИспользоватьХарактеристики", ЗначенияРеквизитов.ИспользоватьХарактеристики);
	СтруктураДанные.Вставить("ИспользоватьПартии", ЗначенияРеквизитов.ИспользоватьПартии);
	Если НЕ СтруктураДанные.Свойство("ЕдиницаИзмерения") ИЛИ НЕ ЗначениеЗаполнено(СтруктураДанные.ЕдиницаИзмерения) Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", ЗначенияРеквизитов.ЕдиницаИзмерения);
	КонецЕсли;
	Если Не СтруктураДанные.Свойство("Спецификация") Тогда
		Если СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Спецификация", Справочники.Спецификации.СпецификацияПоУмолчанию(
				СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
		Иначе
			СтруктураДанные.Вставить("Спецификация", Справочники.Спецификации.СпецификацияПоУмолчанию(
				СтруктураДанные.Номенклатура));
		КонецЕсли;
	КонецЕсли; 
	
	ТаблицаМатериалов = ПустаяТаблицаМатериалов();
	СтрМатериал = ТаблицаМатериалов.Добавить();
	СтрМатериал.Номенклатура = СтруктураДанные.Номенклатура;
	СтрМатериал.Характеристика = СтруктураДанные.Характеристика;
	СтрМатериал.Спецификация = СтруктураДанные.Спецификация;
	СтрМатериал.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрМатериал.Количество = 1;
	СтрМатериал.НормаВремени = 1;
	СтрМатериал.НоменклатураСебестоимость = СтруктураДанные.Номенклатура;
	СтрМатериал.ХарактеристикаСебестоимость = СтруктураДанные.Характеристика;
	СтрМатериал.СпецификацияСебестоимость = СтруктураДанные.Спецификация;
	СтрМатериал.ЕдиницаИзмеренияСебестоимость = СтруктураДанные.ЕдиницаИзмерения;
	СтрМатериал.КоличествоСебестоимость = 1;
	Пока ЕстьВложенныеСпецификации(ТаблицаМатериалов) Цикл
		Результат = РазузловатьНоменклатуру(ТаблицаМатериалов);
		Если НЕ Результат Тогда
			// Ошибка разузлования
			СтруктураДанные.Вставить("СебестоимостьЕдиницы", 0);
			Возврат СтруктураДанные;
		КонецЕсли; 
	КонецЦикла;
	
	РассчитатьСебестоимость(ТаблицаМатериалов, СтруктураДанные.ВидыЦен, СтруктураДанные.Курс, СтруктураДанные.Кратность, СтруктураДанные.НалогообложениеНДС, СтруктураДанные.Дата, СтруктураДанные.Заказ);
	
	СтруктураДанные.Вставить("СебестоимостьЕдиницы", ТаблицаМатериалов.Итог("Себестоимость"));
 
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервере
Функция ОтборПоВидуЦен()
	
	Если ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=ПредопределенноеЗначение("Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоПоследнейЦенеЗакупки") Тогда
		Возврат Неопределено;
	ИначеЕсли ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=ПредопределенноеЗначение("Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамНоменклатуры")
		ИЛИ ТипЗнч(ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции)=Тип("СправочникСсылка.ВидыЦен") Тогда
		Возврат ВидЦен;
	ИначеЕсли ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=ПредопределенноеЗначение("Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов") Тогда
		Возврат ВидыЦенКонтрагентов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСебестоимость(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти.ТипНоменклатуры=ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Операция")
		И НЕ СтрокаТабличнойЧасти.ФиксированнаяСтоимость Тогда
		СтрокаТабличнойЧасти.Себестоимость = СтрокаТабличнойЧасти.СебестоимостьЕдиницы * СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.НормаВремени;
	Иначе
		СтрокаТабличнойЧасти.Себестоимость = СтрокаТабличнойЧасти.СебестоимостьЕдиницы * СтрокаТабличнойЧасти.Количество;
	КонецЕсли; 
	СтрокаТабличнойЧасти.Прибыль = СтрокаТабличнойЧасти.Сумма-СтрокаТабличнойЧасти.Себестоимость;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСебестоимостьСервер()
	
	УстановитьВидимостьИДоступность();
	
	ХранилищеСистемныхНастроек.Сохранить("ЗаказПокупателя", "ОтображатьСебестоимость", ОтображатьСебестоимость);
	
КонецПроцедуры

&НаСервере
Процедура ВнестиИзмененияВКалькуляцию()
	
	Если НЕ ПоказанаКалькуляцияЗаказа Тогда
		
		// Режим: изменение спецификации изделия
		СтрИсточник = СтрокаИсточник(ДанныеЗаказа, ТекущийИдентификатор, ТекущийИсточник);
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("КлючСвязи", СтрИсточник.КлючСвязи);
		СтруктураОтбора.Вставить("Источник", ТекущийИсточник);
		Строки = СоставыСпецификаций.НайтиСтроки(СтруктураОтбора);
		Для каждого Стр Из Строки Цикл
			СоставыСпецификаций.Удалить(Стр);
		КонецЦикла;
		
		Для каждого Стр Из КалькуляцияНаФорме Цикл
			Если Стр.НеСохранять Тогда
				Продолжить;
			КонецЕсли; 
			НоваяСтрока = СоставыСпецификаций.Добавить();
			НоваяСтрока.КлючСвязи = СтрИсточник.КлючСвязи;
			НоваяСтрока.Источник = ТекущийИсточник;
			НоваяСтрока.НоменклатураИзделие = СтрИсточник.Номенклатура;
			НоваяСтрока.ХарактеристикаИзделие = СтрИсточник.Характеристика;
			НоваяСтрока.СпецификацияИзделие = СтрИсточник.Спецификация;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр, "Этап, Номенклатура, Характеристика, Спецификация, ЕдиницаИзмерения, Количество, НормаВремени");
			Если ТекущийИсточник = Перечисления.ИсточникиСтрокКалькуляции.Работа Тогда
				Коэффициент = 1;
				НоваяСтрока.КоличествоПродукции = СтрИсточник.Кратность;
			Иначе
				Коэффициент = ?(ТипЗнч(СтрИсточник.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения"), 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрИсточник.ЕдиницаИзмерения, "Коэффициент"), 
				1);
				НоваяСтрока.КоличествоПродукции = ?(СтрИсточник.Количество=0 ИЛИ Коэффициент=0, 1, СтрИсточник.Количество * Коэффициент);
			КонецЕсли; 
			Если Стр.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") 
				И Стр.СпособПополнения = ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Закупка") Тогда
				НоваяСтрока.ТипСтрокиСостава = ПредопределенноеЗначение("Перечисление.ТипыСтрокСоставаСпецификации.Материал");
			ИначеЕсли Стр.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") Тогда
				НоваяСтрока.ТипСтрокиСостава = ПредопределенноеЗначение("Перечисление.ТипыСтрокСоставаСпецификации.Сборка");
			ИначеЕсли Стр.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Операция") Тогда
				НоваяСтрока.ТипСтрокиСостава = ПредопределенноеЗначение("Перечисление.ТипыСтрокСоставаСпецификации.ПустаяСсылка");
			Иначе
				НоваяСтрока.ТипСтрокиСостава = ПредопределенноеЗначение("Перечисление.ТипыСтрокСоставаСпецификации.Расход");
			КонецЕсли; 
		КонецЦикла;
		
		// Обновление калькуляции
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("КлючСвязи", СтрИсточник.КлючСвязи);
		СтруктураОтбора.Вставить("Источник", ТекущийИсточник);
		Строки = ДанныеЗаказа.Калькуляция.НайтиСтроки(СтруктураОтбора);
		ИндексВставки = Неопределено;
		Для каждого Стр Из Строки Цикл
			Если ИндексВставки = Неопределено Тогда
				ИндексВставки = ДанныеЗаказа.Калькуляция.Индекс(Стр);
			КонецЕсли; 
			ИндексВставки = Мин(ИндексВставки, ДанныеЗаказа.Калькуляция.Индекс(Стр));
			ДанныеЗаказа.Калькуляция.Удалить(Стр);
		КонецЦикла;
		
		КоличествоСтрок = ДанныеЗаказа.Калькуляция.Количество();
		Для каждого Стр Из КалькуляцияНаФорме Цикл
			Если ИндексВставки = Неопределено ИЛИ ИндексВставки >= КоличествоСтрок Тогда
				НоваяСтрока = ДанныеЗаказа.Калькуляция.Добавить();
			Иначе
				НоваяСтрока = ДанныеЗаказа.Калькуляция.Вставить(ИндексВставки);
				ИндексВставки = ИндексВставки + 1;
			КонецЕсли; 
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр, "Этап, Номенклатура, Характеристика, Спецификация, ЕдиницаИзмерения, Количество, НормаВремени, Себестоимость, СебестоимостьЕдиницы, РучноеИзменение");
			НоваяСтрока.НомерВариантаКП = ТекущийВариантКП;
			НоваяСтрока.НоменклатураИзделие = СтрИсточник.Номенклатура;
			НоваяСтрока.ХарактеристикаИзделие = СтрИсточник.Характеристика;
			НоваяСтрока.СпецификацияИзделие = СтрИсточник.Спецификация;
			НоваяСтрока.Источник = ТекущийИсточник;
			НоваяСтрока.КлючСвязи = СтрИсточник.КлючСвязи;
		КонецЦикла;
		
	Иначе
		
		СтрокиКУдалению = Новый Массив;
		Для каждого Стр Из ДанныеЗаказа.Калькуляция Цикл
			Если Стр.НомерВариантаКП <> ТекущийВариантКП Тогда
				Продолжить;
			КонецЕсли; 
			Если Стр.Номенклатура <> Стр.НоменклатураИзделие И ЗначениеЗаполнено(Стр.НоменклатураИзделие) Тогда
				Продолжить;
			КонецЕсли;
			СтрокиКУдалению.Добавить(Стр);
		КонецЦикла;
		ИндексВставки = Неопределено;
		Для каждого Стр Из СтрокиКУдалению Цикл
			Если ИндексВставки = Неопределено Тогда
				ИндексВставки = ДанныеЗаказа.Калькуляция.Индекс(Стр);
			КонецЕсли; 
			ИндексВставки = Мин(ИндексВставки, ДанныеЗаказа.Калькуляция.Индекс(Стр));
			ДанныеЗаказа.Калькуляция.Удалить(Стр);
		КонецЦикла; 
		
		КоличествоСтрок = ДанныеЗаказа.Калькуляция.Количество();
		Для каждого Стр Из КалькуляцияНаФорме Цикл
			Если Стр.ВложенныйСостав Тогда
				// Строка имеет состав и хранится развернуто
				Продолжить;
			КонецЕсли;
			Если Стр.НеСохранять Тогда
				// Строка фактических данных
				Продолжить;
			КонецЕсли;
			Если ИндексВставки = Неопределено ИЛИ ИндексВставки >= КоличествоСтрок Тогда
				НоваяСтрока = ДанныеЗаказа.Калькуляция.Добавить();
			Иначе
				НоваяСтрока = ДанныеЗаказа.Калькуляция.Вставить(ИндексВставки);
				ИндексВставки = ИндексВставки + 1;
			КонецЕсли; 
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр, "Номенклатура, Характеристика, Спецификация, ЕдиницаИзмерения, Количество, Себестоимость, СебестоимостьЕдиницы, Источник, КлючСвязи, РучноеИзменение");
			НоваяСтрока.НомерВариантаКП = ТекущийВариантКП;
			Если ИсточникЗапас(Стр) Тогда
				СтрИсточник = СтрокаПоКлючу(ДанныеЗаказа.Запасы, Стр.КлючСвязи);
			ИначеЕсли ИсточникРабота(Стр) Тогда
				СтрИсточник = СтрокаПоКлючу(ДанныеЗаказа.Работы, Стр.КлючСвязи);
			Иначе
				СтрИсточник = Неопределено;
			КонецЕсли; 
			Если СтрИсточник <> Неопределено Тогда
				НоваяСтрока.НоменклатураИзделие = СтрИсточник.Номенклатура;
				НоваяСтрока.ХарактеристикаИзделие = СтрИсточник.Характеристика;
				НоваяСтрока.СпецификацияИзделие = СтрИсточник.Спецификация;
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьИтоги(ЭтотОбъект);	
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьДанныеКалькуляцииВХранилище(Отказ)
	
	ПроверитьЗаполнениеКалькуляции(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	Если ЭтоЗаказНаряд И ДанныеЗаказа.РасчетКалькуляцииПоДаннымТЧ Тогда
		ОбновитьМатериалы();
	КонецЕсли; 
	ОбновитьСпецификации();
	
	СтруктураДанных = Новый Структура;
	ТаблицаЗапасов = ДанныеЗаказа.Запасы.Выгрузить();
	СтруктураДанных.Вставить("Запасы", ТаблицаЗапасов);
	ТаблицаРабот = ДанныеЗаказа.Работы.Выгрузить();
	СтруктураДанных.Вставить("Работы", ТаблицаРабот);
	ТаблицаМатериалов = ДанныеЗаказа.Материалы.Выгрузить();
	СтруктураДанных.Вставить("Материалы", ТаблицаМатериалов);
	ТаблицаКалькуляции = ДанныеЗаказа.Калькуляция.Выгрузить();
	СтруктураДанных.Вставить("Калькуляция", ТаблицаКалькуляции);
	Если ТипЗнч(ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции)=Тип("СправочникСсылка.ВидыЦен") Тогда
		СтруктураДанных.Вставить("СпособРасчетаСебестоимостиКалькуляции", Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамНоменклатуры);
	Иначе
		СтруктураДанных.Вставить("СпособРасчетаСебестоимостиКалькуляции", ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции);
	КонецЕсли; 
	Если ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов Тогда
		СтруктураДанных.Вставить("ВидыЦен", ВидыЦенКонтрагентов.ВыгрузитьЗначения());
	ИначеЕсли ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамНоменклатуры
		ИЛИ ТипЗнч(ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции)=Тип("СправочникСсылка.ВидыЦен") Тогда
		МассивЦен = Новый Массив;
		МассивЦен.Добавить(ВидЦен);
		СтруктураДанных.Вставить("ВидыЦен", МассивЦен);
	Иначе
		СтруктураДанных.Вставить("ВидыЦен", Новый Массив);
	КонецЕсли; 
	СтруктураДанных.Вставить("ШаблонКалькуляции", ДанныеЗаказа.ШаблонКалькуляции);
	СтруктураДанных.Вставить("КомментарийКалькуляции", ДанныеЗаказа.КомментарийКалькуляции);
	СтруктураДанных.Вставить("РасчетКалькуляцииПоДаннымТЧ", ДанныеЗаказа.РасчетКалькуляцииПоДаннымТЧ);
	АдресДанных = ПоместитьВоВременноеХранилище(СтруктураДанных, АдресДанных);
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеКалькуляции(Отказ)
	
	// Состав спецификаций
	ТаблицаИдентификаторов = СоставыСпецификаций.Выгрузить(, "КлючСвязи, Источник, НоменклатураИзделие, ХарактеристикаИзделие, СпецификацияИзделие");
	ТаблицаИдентификаторов.Свернуть("КлючСвязи, Источник, НоменклатураИзделие, ХарактеристикаИзделие, СпецификацияИзделие");
	Для каждого СтрИдентификатор Из ТаблицаИдентификаторов Цикл
		Если ИсточникЗапас(СтрИдентификатор) Тогда
			СтрИсточник = СтрокаПоКлючу(ДанныеЗаказа.Запасы, СтрИдентификатор.КлючСвязи);
		ИначеЕсли ИсточникРабота(СтрИдентификатор) Тогда
			СтрИсточник = СтрокаПоКлючу(ДанныеЗаказа.Работы, СтрИдентификатор.КлючСвязи);
		Иначе
			Продолжить;
		КонецЕсли; 
		Если СтрИсточник=Неопределено
			ИЛИ НЕ ЗначениеЗаполнено(СтрИсточник.Номенклатура)
			ИЛИ СтрИсточник.Номенклатура<>СтрИдентификатор.НоменклатураИзделие
			ИЛИ СтрИсточник.Характеристика<>СтрИдентификатор.ХарактеристикаИзделие
			ИЛИ СтрИсточник.Спецификация<>СтрИдентификатор.СпецификацияИзделие Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("КлючСвязи", СтрИдентификатор.КлючСвязи);
		СтруктураОтбора.Вставить("Источник", СтрИдентификатор.Источник);
		Строки = СоставыСпецификаций.НайтиСтроки(СтруктураОтбора);
		СвойстваСпецификации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрИсточник.Спецификация, "Заказ, ВидПроизводства");
		Если ЭтоЗаказНаряд И ДанныеЗаказа.РасчетКалькуляцииПоДаннымТЧ И ИсточникРабота(СтрИдентификатор) Тогда
			СвойстваСпецификации.Вставить("ВидПроизводства", Справочники.ВидыПроизводства.ПустаяСсылка());
		КонецЕсли; 
		Для каждого Стр Из Строки Цикл
			Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнена номенклатура состава спецификации %1'"), СтрИсточник.Спецификация);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			КонецЕсли; 
			Если КэшЗначений.ИспользоватьЭтапыПроизводства И ЗначениеЗаполнено(СвойстваСпецификации.ВидПроизводства) И НЕ ЗначениеЗаполнено(Стр.Этап) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнена этап в спецификации %1'"), СтрИсточник.Спецификация);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла; 	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьМатериалы()
	
	ДанныеЗаказа.Материалы.Очистить();
	Для каждого СтрокаРабота Из ДанныеЗаказа.Работы Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Источник", Перечисления.ИсточникиСтрокКалькуляции.Работа);
		СтруктураОтбора.Вставить("КлючСвязи", СтрокаРабота.КлючСвязи);
		СтрокиКалькуляции = ДанныеЗаказа.Калькуляция.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаКалькуляции Из СтрокиКалькуляции Цикл
			Если ТипЗнч(СтрокаКалькуляции.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
				Продолжить;
			КонецЕсли; 
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаКалькуляции.Номенклатура, "ТипНоменклатуры, Склад, Ячейка");
			Если ЗначенияРеквизитов.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас Тогда
				Продолжить;
			КонецЕсли; 
			НоваяСтрока = ДанныеЗаказа.Материалы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКалькуляции, "КлючСвязи, Номенклатура, Характеристика, Количество, ЕдиницаИзмерения");
			Если ДанныеЗаказа.ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
				НоваяСтрока.СтруктурнаяЕдиницаРезерв = ДанныеЗаказа.СтруктурнаяЕдиницаРезерв;
				НоваяСтрока.Ячейка = ДанныеЗаказа.Ячейка;
			Иначе
				НоваяСтрока.СтруктурнаяЕдиницаРезерв = ЗначенияРеквизитов.Склад;
				НоваяСтрока.Ячейка = ЗначенияРеквизитов.Ячейка;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтруктурнаяЕдиницаРезерв) Тогда
				НоваяСтрока.СтруктурнаяЕдиницаРезерв = ДанныеЗаказа.СтруктурнаяЕдиницаРезерв;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСпецификации()
	
	Если ДанныеЗаказа.РасчетКалькуляцииПоДаннымТЧ 
		И НЕ ДанныеЗаказа.СостояниеЗаказа = Справочники.СостоянияЗаказНарядов.Завершен Тогда
		ДополнитьСоставДаннымиТЧ(СоставыСпецификаций);
	КонецЕсли; 
	
	ТаблицаИдентификаторов = СоставыСпецификаций.Выгрузить(, "КлючСвязи, Источник, НоменклатураИзделие, ХарактеристикаИзделие, СпецификацияИзделие");
	ТаблицаИдентификаторов.Свернуть("КлючСвязи, Источник, НоменклатураИзделие, ХарактеристикаИзделие, СпецификацияИзделие");
	Для каждого СтрИдентификатор Из ТаблицаИдентификаторов Цикл
		Если ИсточникЗапас(СтрИдентификатор) Тогда
			СтрИсточник = СтрокаПоКлючу(ДанныеЗаказа.Запасы, СтрИдентификатор.КлючСвязи);
		ИначеЕсли ИсточникРабота(СтрИдентификатор) Тогда
			СтрИсточник = СтрокаПоКлючу(ДанныеЗаказа.Работы, СтрИдентификатор.КлючСвязи);
		Иначе
			СтрИсточник = Неопределено;
		КонецЕсли; 
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("КлючСвязи", СтрИдентификатор.КлючСвязи);
		СтруктураОтбора.Вставить("Источник", СтрИдентификатор.Источник);
		Строки = СоставыСпецификаций.НайтиСтроки(СтруктураОтбора);
		Если СтрИсточник = Неопределено
			ИЛИ НЕ ЗначениеЗаполнено(СтрИсточник.Номенклатура)
			ИЛИ СтрИсточник.Номенклатура <> СтрИдентификатор.НоменклатураИзделие
			ИЛИ СтрИсточник.Характеристика <> СтрИдентификатор.ХарактеристикаИзделие
			ИЛИ СтрИсточник.Спецификация <> СтрИдентификатор.СпецификацияИзделие Тогда
			// Устаревшая информация
			Для каждого Стр Из Строки Цикл
				СоставыСпецификаций.Удалить(Стр);
			КонецЦикла; 
			Продолжить;
		КонецЕсли; 
		СвойстваСпецификации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрИсточник.Спецификация, "Заказ, ВидПроизводства");
		Если ЭтоЗаказНаряд И ДанныеЗаказа.РасчетКалькуляцииПоДаннымТЧ И ИсточникРабота(СтрИдентификатор) Тогда
			СвойстваСпецификации.Вставить("ВидПроизводства", Справочники.ВидыПроизводства.ПустаяСсылка());
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(СтрИсточник.Спецификация) 
			ИЛИ СвойстваСпецификации.Заказ <> ЗаказСсылка Тогда
			Спецификация = Справочники.Спецификации.СоздатьЭлемент();
			Спецификация.Владелец = СтрИсточник.Номенклатура;
			Спецификация.ХарактеристикаПродукции = СтрИсточник.Характеристика;
			Спецификация.Заказ = ЗаказСсылка;
			Спецификация.ВидПроизводства = СвойстваСпецификации.ВидПроизводства;
			Спецификация.Наименование = СокрЛП(СтрИсточник.Номенклатура)+
			" ("+ПредставлениеЗаказа(ДанныеЗаказа.Дата, ДанныеЗаказа.Номер, КэшЗначений.Префикс)+")";
		Иначе
			Спецификация = СтрИсточник.Спецификация.ПолучитьОбъект();
			Спецификация.Состав.Очистить();
			Спецификация.Операции.Очистить();
			Если ЭтоЗаказНаряд И ДанныеЗаказа.РасчетКалькуляцииПоДаннымТЧ И ИсточникРабота(СтрИдентификатор) Тогда
				Спецификация.ВидПроизводства = Справочники.ВидыПроизводства.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли; 
		Для каждого Стр Из Строки Цикл
			Если ТипЗнч(Стр.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
				// ЗП в составе работ заказ-наряда
				Продолжить;
			КонецЕсли; 
			Если ЗначениеЗаполнено(Стр.ТипСтрокиСостава) Тогда
				НоваяСтрока = Спецификация.Состав.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
			Иначе
				НоваяСтрока = Спецификация.Операции.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр, "КоличествоПродукции, Этап");
				НоваяСтрока.Операция = Стр.Номенклатура;
				НоваяСтрока.НормаВремени = Стр.НормаВремени;
				НоваяСтрока.Количество = ?(Стр.Количество=0, 1, Стр.Количество);
			КонецЕсли; 
		КонецЦикла;
		Если Спецификация.Состав.Количество() = 0 И Спецификация.Операции.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли; 
		Спецификация.Записать();
		СтрИсточник.Спецификация = Спецификация.Ссылка;
		Для каждого Стр Из Строки Цикл
			СоставыСпецификаций.Удалить(Стр);
		КонецЦикла; 
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Изменен", Истина);
	СтрокиКомментариев = КомментарииСпецификаций.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрКомментарий Из СтрокиКомментариев Цикл
		Если ИсточникЗапас(СтрИдентификатор) Тогда
			СтрИсточник = СтрокаПоКлючу(ДанныеЗаказа.Запасы, СтрИдентификатор.КлючСвязи);
		ИначеЕсли ИсточникРабота(СтрИдентификатор) Тогда
			СтрИсточник = СтрокаПоКлючу(ДанныеЗаказа.Работы, СтрИдентификатор.КлючСвязи);
		Иначе
			СтрИсточник = Неопределено;
		КонецЕсли; 
		Если СтрИсточник = Неопределено 
			ИЛИ НЕ ЗначениеЗаполнено(СтрИсточник.Номенклатура) 
			ИЛИ НЕ ЗначениеЗаполнено(СтрИсточник.Спецификация) Тогда
			КомментарииСпецификаций.Удалить(СтрКомментарий);
			Продолжить;
		КонецЕсли;
		Спецификация = СтрИсточник.Спецификация.ПолучитьОбъект();
		Спецификация.Комментарий = СтрКомментарий.Комментарий;
		Спецификация.Записать();
		СтрКомментарий.Изменен = Ложь;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеЗаказа(Дата, Номер, Префикс)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1 %2 от %3'"),
		НСтр("ru = 'Заказ покупателя'"),
		?(ЗначениеЗаполнено(Номер), ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Дата, Номер, Префикс), ""),
		Формат(Дата, "ДЛФ=D"));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаПоКлючу(Таблица, КлючСвязи, Источник = Неопределено)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязи", КлючСвязи);
	Если Источник<>Неопределено Тогда
		СтруктураОтбора.Вставить("Источник", Источник);
	КонецЕсли; 
	Строки = Таблица.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()=0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Строки[0];
	КонецЕсли; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполненРеквизитТЧ(Таблица, ИмяРеквизита)
	
	Для каждого Стр Из Таблица Цикл
		Если Стр.ЭтоРазделитель Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.Партия) Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции 

&НаСервере
Процедура ОбновитьСебестоимостьДоставки()
	
	Если ДанныеЗаказа.СебестоимостьДоставки <> 0 Тогда
		
		СебестоимостьДоставки = ДанныеЗаказа.СебестоимостьДоставки;
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеЗаказа.СлужбаДоставки) Тогда
		
		СтруктураПараметров = Новый Структура;
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СлужбаДоставки", ДанныеЗаказа.СлужбаДоставки);
		Запрос.УстановитьПараметр("ТаблицаЗначений", ДанныеЗаказа.ПараметрыДоставки.Выгрузить());
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Значения.Параметр,
		|	Значения.Значение
		|ПОМЕСТИТЬ Значения
		|ИЗ
		|	&ТаблицаЗначений КАК Значения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СлужбыДоставкиПараметрыРасчетов.Параметр,
		|	СлужбыДоставкиПараметрыРасчетов.Параметр.Идентификатор КАК Идентификатор,
		|	СлужбыДоставкиПараметрыРасчетов.Параметр.Наименование КАК Наименование,
		|	ЕСТЬNULL(Значения.Значение, 0) КАК Значение
		|ИЗ
		|	Справочник.СлужбыДоставки.ПараметрыРасчетов КАК СлужбыДоставкиПараметрыРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Значения КАК Значения
		|		ПО СлужбыДоставкиПараметрыРасчетов.Параметр = Значения.Параметр
		|ГДЕ
		|	СлужбыДоставкиПараметрыРасчетов.Ссылка = &СлужбаДоставки
		|	И СлужбыДоставкиПараметрыРасчетов.Параметр.ЗадаватьЗначениеПриРасчете";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураПараметров.Вставить(Выборка.Идентификатор, Выборка.Значение);
		КонецЦикла; 
		СебестоимостьДоставки = ДоставкаСервер.СебестоимостьДоставки(ДанныеЗаказа, СтруктураПараметров);
		
	Иначе
		
		СебестоимостьДоставки = 0;
		
	КонецЕсли; 
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Источник", Перечисления.ИсточникиСтрокКалькуляции.Доставка);
	Строки = ДанныеЗаказа.Калькуляция.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаТабличнойЧасти Из Строки Цикл
		ДанныеЗаказа.Калькуляция.Удалить(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	Если СебестоимостьДоставки<>0 Тогда
		Для ВариантКП = ?(ДанныеЗаказа.КоличествоВариантовКП=0, 0, 1) По ДанныеЗаказа.КоличествоВариантовКП Цикл
			СтрокаТабличнойЧасти = ДанныеЗаказа.Калькуляция.Добавить();
			СтрокаТабличнойЧасти.НомерВариантаКП = ВариантКП;
			СтрокаТабличнойЧасти.Номенклатура = ДанныеЗаказа.НоменклатураДоставки;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаказа.НоменклатураДоставки, "ЕдиницаИзмерения");
			СтрокаТабличнойЧасти.Количество = 1;
			СтрокаТабличнойЧасти.Источник = Перечисления.ИсточникиСтрокКалькуляции.Доставка;
			СтрокаТабличнойЧасти.Себестоимость = СебестоимостьДоставки;
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

#Область Комментарии

&НаКлиенте
Процедура КомментарийЗавершениеВвода(ТекстКомментария, ДополнительныеПараметры) Экспорт
	
	Если ТекстКомментария=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Комментарий = ТекстКомментария;
	ПриИзмененииКомментария();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКомментария()
	
	Если ТекущийИдентификатор=-1 Тогда
		ДанныеЗаказа.КомментарийКалькуляции = Комментарий;
	Иначе
		СтрокаИсточник = СтрокаИсточник(ДанныеЗаказа, ТекущийИдентификатор, ТекущийИсточник);
		Если СтрокаИсточник=Неопределено Тогда
			Возврат;
		КонецЕсли;
		СтрокаКомментарий = СтрокаПоКлючу(КомментарииСпецификаций, СтрокаИсточник.КлючСвязи, ТекущийИсточник);
		Если СтрокаКомментарий=Неопределено Тогда
			СтрокаКомментарий = КомментарииСпецификаций.Добавить();
			СтрокаКомментарий.КлючСвязи = ТекущийИдентификатор;
			СтрокаКомментарий.Источник = ТекущийИсточник;
		КонецЕсли; 
		СтрокаКомментарий.Комментарий = Комментарий;
		СтрокаКомментарий.Изменен = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомментарииСпецификаций()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИзмененныеКомментарии", ИзмененныеКомментарии());
	Запрос.УстановитьПараметр("Запасы", ДанныеЗаказа.Запасы.Выгрузить());
	Запрос.УстановитьПараметр("Работы", ДанныеЗаказа.Работы.Выгрузить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИзмененныеКомментарии.КлючСвязи КАК КлючСвязи,
	|	ИзмененныеКомментарии.Источник КАК Источник,
	|	ИзмененныеКомментарии.Комментарий КАК Комментарий
	|ПОМЕСТИТЬ ИзмененныеКомментарии
	|ИЗ
	|	&ИзмененныеКомментарии КАК ИзмененныеКомментарии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Запасы.Спецификация КАК Справочник.Спецификации) КАК Спецификация,
	|	Запасы.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ Запасы
	|ИЗ
	|	&Запасы КАК Запасы
	|ГДЕ
	|	Запасы.Спецификация <> ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Работы.Спецификация КАК Справочник.Спецификации) КАК Спецификация,
	|	Работы.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ Работы
	|ИЗ
	|	&Работы КАК Работы
	|ГДЕ
	|	Работы.Спецификация <> ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Запасы.КлючСвязи КАК КлючСвязи,
	|	ЗНАЧЕНИЕ(Перечисление.ИсточникиСтрокКалькуляции.Запас) КАК Источник,
	|	ЕСТЬNULL(ИзмененныеКомментарии.Комментарий, Запасы.Спецификация.Комментарий) КАК Комментарий,
	|	ВЫБОР
	|		КОГДА ИзмененныеКомментарии.КлючСвязи ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Изменен
	|ИЗ
	|	Запасы КАК Запасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИзмененныеКомментарии КАК ИзмененныеКомментарии
	|		ПО Запасы.КлючСвязи = ИзмененныеКомментарии.КлючСвязи
	|			И (ИзмененныеКомментарии.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиСтрокКалькуляции.Запас))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работы.КлючСвязи,
	|	ЗНАЧЕНИЕ(Перечисление.ИсточникиСтрокКалькуляции.Работа),
	|	ЕСТЬNULL(ИзмененныеКомментарии.Комментарий, Работы.Спецификация.Комментарий),
	|	ВЫБОР
	|		КОГДА ИзмененныеКомментарии.КлючСвязи ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|ИЗ
	|	Работы КАК Работы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИзмененныеКомментарии КАК ИзмененныеКомментарии
	|		ПО Работы.КлючСвязи = ИзмененныеКомментарии.КлючСвязи
	|			И (ИзмененныеКомментарии.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиСтрокКалькуляции.Работа))";
	
	КомментарииСпецификаций.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Функция ИзмененныеКомментарии()
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Изменен", Истина);
	Возврат КомментарииСпецификаций.Выгрузить(СтруктураОтбора);
	
КонецФункции
 
&НаКлиенте
Процедура ВывестиКомментарий()
	
	Комментарий = "";
	Если ТекущийИдентификатор=-1 Тогда
		Комментарий = ДанныеЗаказа.КомментарийКалькуляции;
		Элементы.Комментарий.ПодсказкаВвода = НСтр("ru = 'Комментарий калькуляции'");
	Иначе
		СтрокаИсточник = СтрокаИсточник(ДанныеЗаказа, ТекущийИдентификатор, ТекущийИсточник);
		Если СтрокаИсточник=Неопределено Тогда
			Возврат;
		КонецЕсли;
		СтрокаКомментарий = СтрокаПоКлючу(КомментарииСпецификаций, СтрокаИсточник.КлючСвязи, ТекущийИсточник);
		Если СтрокаКомментарий=Неопределено Тогда
			Если ЗначениеЗаполнено(СтрокаИсточник.Спецификация) Тогда
				Комментарий = КомментарийСпецификации(СтрокаИсточник.Спецификация);
				СтрокаКомментарий = КомментарииСпецификаций.Добавить();
				СтрокаКомментарий.КлючСвязи = СтрокаИсточник.КлючСвязи;
				СтрокаКомментарий.Источник = ТекущийИсточник;
				СтрокаКомментарий.Комментарий = Комментарий;
			Иначе
				Комментарий = "";
			КонецЕсли; 
		Иначе
			Комментарий = СтрокаКомментарий.Комментарий;
		КонецЕсли; 
		Элементы.Комментарий.ПодсказкаВвода = НСтр("ru = 'Комментарий спецификации'");
	КонецЕсли; 		
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КомментарийСпецификации(Спецификация)
	
	Если НЕ ЗначениеЗаполнено(Спецификация) ИЛИ ТипЗнч(Спецификация)<>Тип("СправочникСсылка.Спецификации") Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Спецификация, "Комментарий");
	
КонецФункции
 
#КонецОбласти 

&НаСервере
Процедура ОбновитьСтарыйВариантКалькуляции()
	
	// Обновление выполняется в связи с добавлением количественного учета для операций. Количество из сохраненных ранее
	// калькуляций разделяется на две колонки: количество операций и норма времени
	
	Если ЭтоЗаказНаряд Тогда
		Возврат;
	КонецЕсли; 
	
	ТаблицаМатериалов = Новый ТаблицаЗначений;
	ТаблицаМатериалов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаМатериалов.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаМатериалов.Колонки.Добавить("КоличествоПродукции", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	Для каждого СтрокаТабличнойЧасти Из ДанныеЗаказа.Калькуляция Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Номенклатура)<>Тип("СправочникСсылка.Номенклатура") Тогда
			Продолжить;
		КонецЕсли; 
		Если СтрокаТабличнойЧасти.Источник<>ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Запас") Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаМатериалов.Добавить();
		НоваяСтрока.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
		НоваяСтрока.Идентификатор = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
		СтрокиЗапасы = ТабличныеЧастиУНФКлиентСервер.СтрокиПоКлючуСвязи(ДанныеЗаказа.Запасы, СтрокаТабличнойЧасти.КлючСвязи);
		Если СтрокиЗапасы.Количество()>0 Тогда
			СтрокаЗапасы = СтрокиЗапасы[0];
			Коэффициент = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения"), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаЗапасы.ЕдиницаИзмерения, "Коэффициент"), 1);
			НоваяСтрока.КоличествоПродукции = СтрокаЗапасы.Количество * Коэффициент;
		КонецЕсли; 
	КонецЦикла;
	Если ТаблицаМатериалов.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаМатериалов", ТаблицаМатериалов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаМатериалов.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаМатериалов.Идентификатор КАК Идентификатор,
	|	ТаблицаМатериалов.КоличествоПродукции КАК КоличествоПродукции
	|ПОМЕСТИТЬ ТаблицаМатериалов
	|ИЗ
	|	&ТаблицаМатериалов КАК ТаблицаМатериалов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМатериалов.Идентификатор КАК Идентификатор,
	|	ТаблицаМатериалов.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаМатериалов.КоличествоПродукции КАК КоличествоПродукции
	|ИЗ
	|	ТаблицаМатериалов КАК ТаблицаМатериалов
	|ГДЕ
	|	ТаблицаМатериалов.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Операция)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТабличнойЧасти = ДанныеЗаказа.Калькуляция.НайтиПоИдентификатору(Выборка.Идентификатор);
		Если СтрокаТабличнойЧасти.НормаВремени=0 Тогда
			КоличествоПродукции = ?(Выборка.КоличествоПродукции=0, 1, Выборка.КоличествоПродукции);
			СтрокаТабличнойЧасти.НормаВремени = СтрокаТабличнойЧасти.Количество / КоличествоПродукции;
			СтрокаТабличнойЧасти.Количество = КоличествоПродукции;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоНеизменяемыеДанные(Источник)
	
	Возврат Источник=ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Запас")
		ИЛИ Источник=ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Работа")
		ИЛИ Источник=ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Доставка")
		ИЛИ Источник=ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Зарплата");
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИсточникЗапас(СтрокаТабличнойЧасти)
	
	Возврат (СтрокаТабличнойЧасти.Источник=ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Запас"));
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИсточникРабота(СтрокаТабличнойЧасти)
	
	Возврат (СтрокаТабличнойЧасти.Источник=ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Работа"));
	
КонецФункции 

#КонецОбласти 

#Область РаботаСПодбором

&НаКлиенте
Процедура Подбор(Команда)
	
	ИмяТабличнойЧасти = "Калькуляция";
	МаркерПодбора = "Калькуляция";
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период", 				ДанныеЗаказа.Дата);
	ПараметрыПодбора.Вставить("ИспользуютсяСпецификации", Истина);
	ПараметрыПодбора.Вставить("ИспользуютсяПартии", 	Ложь);
	ПараметрыПодбора.Вставить("ЗаполнятьРезерв", 		Ложь);
	ПараметрыПодбора.Вставить("ДоступноРедактированиеСтруктурнойЕдиницы", Истина);
	ПараметрыПодбора.Вставить("ОрганизацияДокумента", 	ДанныеЗаказа.Организация);
	ПараметрыПодбора.Вставить("Организация", 	ДанныеЗаказа.Организация);
	ПараметрыПодбора.Вставить("ЭтоНабор", 	Ложь);
	
	Если ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=ПредопределенноеЗначение("Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамНоменклатуры")
		ИЛИ ТипЗнч(ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции)=Тип("СправочникСсылка.ВидыЦен") Тогда
		ПараметрыПодбора.Вставить("ВидЦен", 				ВидЦен);
		ПараметрыПодбора.Вставить("ВалютаДокумента", 		ДанныеЗаказа.ВалютаДокумента);
		ПараметрыПодбора.Вставить("СуммаВключаетНДС", 		ДанныеЗаказа.СуммаВключаетНДС);
		ПараметрыПодбора.Вставить("НалогообложениеНДС",		ДанныеЗаказа.НалогообложениеНДС);
		ПараметрыПодбора.Вставить("ДоступноИзменениеЦены",	Ложь);
	КонецЕсли;
	
	ТипНоменклатуры = Новый СписокЗначений;
	Для Каждого ЭлементМассива Из Элементы.КалькуляцияНаФормеНоменклатура.ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					ТипНоменклатуры.Добавить(ЭлементФиксМассива);
				КонецЦикла; 
			Иначе
				ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	ПараметрыПодбора.Вставить("ЭтоНабор", Ложь);
	
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьОшибкуЧтенияДанныхИзХранилища()
	
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации("Ошибка", , ТекстОшибкиЖурналаРегистрации);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Если НЕ (ТипЗнч(ТаблицаДляЗагрузки) = Тип("ТаблицаЗначений")
		ИЛИ ТипЗнч(ТаблицаДляЗагрузки) = Тип("Массив")) Тогда
		
		ТекстОшибкиЖурналаРегистрации = "Несоответствие типа переданного в документ из подбора [" + ТипЗнч(ТаблицаДляЗагрузки) + "].
				|Адрес запасов в хранилище: " + СокрЛП(АдресЗапасовВХранилище) + "
				|Имя табличной части: " + СокрЛП(ИмяТабличнойЧасти);
		
		Возврат;
		
	Иначе
		
		ТекстОшибкиЖурналаРегистрации = "";
		
	КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Заказ", ЗаказСсылка);
	СтруктураДанные.Вставить("Дата", ДанныеЗаказа.Дата);
	СтруктураДанные.Вставить("НалогообложениеНДС", ДанныеЗаказа.НалогообложениеНДС);
	СтруктураДанные.Вставить("Курс", КурсДокумента);
	СтруктураДанные.Вставить("Кратность", КратностьДокумента);
	СтруктураДанные.Вставить("ВидыЦен", ОтборПоВидуЦен());
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = КалькуляцияНаФорме.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		НоваяСтрока.Источник = Перечисления.ИсточникиСтрокКалькуляции.Прочее;
		
		СтруктураДанные.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", НоваяСтрока.Характеристика);
		СтруктураДанные.Вставить("Спецификация", НоваяСтрока.Спецификация);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", НоваяСтрока.ЕдиницаИзмерения);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанные, "СебестоимостьЕдиницы, СпособПополнения, ТипНоменклатуры, ФиксированнаяСтоимость, ИспользоватьХарактеристики, ИспользоватьПартии, НормаВремени");
		ПересчитатьСебестоимость(НоваяСтрока);
	
	КонецЦикла;
	
	ВнестиИзмененияВКалькуляцию();
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Заказ", ЗаказСсылка);
	СтруктураДанные.Вставить("Дата", ДанныеЗаказа.Дата);
	СтруктураДанные.Вставить("НалогообложениеНДС", ДанныеЗаказа.НалогообложениеНДС);
	СтруктураДанные.Вставить("Курс", КурсДокумента);
	СтруктураДанные.Вставить("Кратность", КратностьДокумента);
	СтруктураДанные.Вставить("ВидыЦен", ОтборПоВидуЦен());
	Если ПоказанаКалькуляцияЗаказа Тогда
		СтрокаИсточник = Неопределено;
	Иначе
		СтрокаИсточник = СтрокаИсточник(ДанныеЗаказа, ТекущийИдентификатор, ТекущийИсточник);
	КонецЕсли; 
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ТоварыДобавлены = Ложь;
	
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеЗаказа.Калькуляция.Добавить();
		НоваяСтрока.НомерВариантаКП = ТекущийВариантКП;
		НоваяСтрока.Номенклатура = СтрокаТаблицы.Номенклатура;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			НоваяСтрока.Характеристика = СтрокаТаблицы.Характеристика;
			
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы")
			ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство") Тогда
			
			НоваяСтрока.Спецификация = СтрокаТаблицы.Спецификация;
			
		КонецЕсли;
				
		Если ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения") Тогда
			
			НоваяСтрока.ЕдиницаИзмерения = СтрокаТаблицы.ЕдиницаИзмерения;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
			
			НоваяСтрока.ЕдиницаИзмерения = СтрокаТаблицы.Номенклатура.ЕдиницаИзмерения;
			
		КонецЕсли;
		
		НоваяСтрока.Количество = СтрокаТаблицы.Количество;
		НоваяСтрока.Себестоимость = СтрокаТаблицы.Себестоимость;
		НоваяСтрока.СебестоимостьЕдиницы = ?(НоваяСтрока.Количество<>0, НоваяСтрока.Себестоимость/НоваяСтрока.Количество, 0);
		
		Если СтрокаИсточник<>Неопределено Тогда
			НоваяСтрока.НоменклатураИзделие = СтрокаИсточник.Номенклатура;
			НоваяСтрока.ХарактеристикаИзделие = СтрокаИсточник.Характеристика;
			НоваяСтрока.СпецификацияИзделие = СтрокаИсточник.Спецификация;
			НоваяСтрока.КлючСвязи = СтрокаИсточник.КлючСвязи;
			НоваяСтрока.Источник = ТекущийИсточник;
		Иначе
			НоваяСтрока.Источник = Перечисления.ИсточникиСтрокКалькуляции.Прочее;
		КонецЕсли;
		
		Если ПоказанаКалькуляцияЗаказа И СтрокаТаблицы.ЭтоРасход Тогда
			Если НоваяСтрока.Себестоимость=0 И НоваяСтрока.СебестоимостьЕдиницы>0 Тогда
				НоваяСтрока.Себестоимость = НоваяСтрока.СебестоимостьЕдиницы * ?(НоваяСтрока.Количество=0, 1, НоваяСтрока.Количество);
			КонецЕсли; 
			НоваяСтрока.Количество = 0;
			НоваяСтрока.СебестоимостьЕдиницы = 0;
		Иначе
			СтруктураДанные.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
			СтруктураДанные.Вставить("Характеристика", НоваяСтрока.Характеристика);
			СтруктураДанные.Вставить("Спецификация", НоваяСтрока.Спецификация);
			СтруктураДанные.Вставить("ЕдиницаИзмерения", НоваяСтрока.ЕдиницаИзмерения);
			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
			Если ТекущийИдентификатор>0 И СтруктураДанные.ТипНоменклатуры=ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Операция") Тогда
				НоваяСтрока.НормаВремени = СтруктураДанные.НормаВремени;
			КонецЕсли; 
			Если НоваяСтрока.Себестоимость=0 И НоваяСтрока.СебестоимостьЕдиницы=0 Тогда
				НоваяСтрока.СебестоимостьЕдиницы = СтруктураДанные.СебестоимостьЕдиницы;
			Иначе
				Если НоваяСтрока.Себестоимость>0 
					И СтруктураДанные.ТипНоменклатуры=ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Операция")
					И НЕ СтруктураДанные.ФиксированнаяСтоимость Тогда
					НоваяСтрока.СебестоимостьЕдиницы = ?((НоваяСтрока.Количество * НоваяСтрока.НормаВремени)=0, НоваяСтрока.Себестоимость, НоваяСтрока.Себестоимость / (НоваяСтрока.Количество * НоваяСтрока.НормаВремени));
				ИначеЕсли НоваяСтрока.Себестоимость>0 Тогда 
					НоваяСтрока.СебестоимостьЕдиницы = ?(НоваяСтрока.Количество=0, НоваяСтрока.Себестоимость, НоваяСтрока.Себестоимость / НоваяСтрока.Количество);
				КонецЕсли;
				НоваяСтрока.РучноеИзменение = Истина;
			КонецЕсли;
			Если СтруктураДанные.ТипНоменклатуры=ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Операция")
				И НЕ СтруктураДанные.ФиксированнаяСтоимость Тогда
				НоваяСтрока.Себестоимость = НоваяСтрока.СебестоимостьЕдиницы * НоваяСтрока.Количество * НоваяСтрока.НормаВремени;
			Иначе
				НоваяСтрока.Себестоимость = НоваяСтрока.СебестоимостьЕдиницы * НоваяСтрока.Количество;
			КонецЕсли; 
		КонецЕсли;
		
		ТоварыДобавлены = Истина;
		
	КонецЦикла;
	
	Если ТоварыДобавлены Тогда
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ВывестиКалькуляцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(АдресЗагруженныхДанных) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзФайлаЗапасы(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
	
	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяТабличнойЧасти", "ЗаказПокупателя.Калькуляция");
	НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном", "ЗагрузкаИзФайлаКалькуляция");
	Если ПоказанаКалькуляцияЗаказа Тогда
		НастройкиЗагрузкиДанных.Вставить("Заголовок", НСтр("ru = 'Загрузка калькуляции из файла'"));
	Иначе
		НастройкиЗагрузкиДанных.Вставить("Заголовок", НСтр("ru = 'Загрузка спецификации из файла'"));
	КонецЕсли; 
	НастройкиЗагрузкиДанных.Вставить("ЗагрузкаКалькуляции", ПоказанаКалькуляцияЗаказа);
	НастройкиЗагрузкиДанных.Вставить("ОтображатьСебестоимость", ОтображатьСебестоимость);
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			ОбработатьПодготовленныеДанные(РезультатЗагрузки);
			
		КонецЕсли;
		
	Иначе
		
		ЗагрузитьИзФайлаЗавершение(РезультатЗагрузки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанные(РезультатЗагрузки)
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Заказ", ЗаказСсылка);
	СтруктураДанные.Вставить("Дата", ДанныеЗаказа.Дата);
	СтруктураДанные.Вставить("НалогообложениеНДС", ДанныеЗаказа.НалогообложениеНДС);
	СтруктураДанные.Вставить("Курс", КурсДокумента);
	СтруктураДанные.Вставить("Кратность", КратностьДокумента);
	СтруктураДанные.Вставить("ВидыЦен", ОтборПоВидуЦен());
	Если ПоказанаКалькуляцияЗаказа Тогда
		СтрокаИсточник = Неопределено;
	Иначе
		СтрокаИсточник = СтрокаИсточник(ДанныеЗаказа, ТекущийИдентификатор, ТекущийИсточник);
	КонецЕсли; 
	
	Попытка
		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = ДанныеЗаказа.Калькуляция.Добавить();
				НоваяСтрока.НомерВариантаКП = ТекущийВариантКП;
				
				ИменаСвойств = "Номенклатура, Количество, Себестоимость, СебестоимостьЕдиницы";
				
				Если ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения") Тогда
					
					ИменаСвойств = ИменаСвойств + ", ЕдиницаИзмерения";
					
				КонецЕсли;
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
					
					ИменаСвойств = ИменаСвойств + ", Характеристика";
					
				КонецЕсли;
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы")
					ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство") Тогда
					
					ИменаСвойств = ИменаСвойств + ", Спецификация";
					
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ИменаСвойств);
				
				Если НЕ ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения") 
					И ТипЗнч(НоваяСтрока.Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
					
					НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаИзмерения");
					
				КонецЕсли; 
				
				Если СтрокаИсточник<>Неопределено Тогда
					НоваяСтрока.НоменклатураИзделие = СтрокаИсточник.Номенклатура;
					НоваяСтрока.ХарактеристикаИзделие = СтрокаИсточник.Характеристика;
					НоваяСтрока.СпецификацияИзделие = СтрокаИсточник.Спецификация;
					НоваяСтрока.КлючСвязи = СтрокаИсточник.КлючСвязи;
					НоваяСтрока.Источник = ТекущийИсточник;
				Иначе
					НоваяСтрока.Источник = Перечисления.ИсточникиСтрокКалькуляции.Прочее;
				КонецЕсли; 
				
				Если ПоказанаКалькуляцияЗаказа И СтрокаТаблицы.ЭтоРасход Тогда
					Если НоваяСтрока.Себестоимость=0 И НоваяСтрока.СебестоимостьЕдиницы>0 Тогда
						НоваяСтрока.Себестоимость = НоваяСтрока.СебестоимостьЕдиницы * ?(НоваяСтрока.Количество=0, 1, НоваяСтрока.Количество);
					КонецЕсли; 
					НоваяСтрока.Количество = 0;
					НоваяСтрока.СебестоимостьЕдиницы = 0;
				Иначе
					СтруктураДанные.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
					СтруктураДанные.Вставить("Характеристика", НоваяСтрока.Характеристика);
					СтруктураДанные.Вставить("Спецификация", НоваяСтрока.Спецификация);
					СтруктураДанные.Вставить("ЕдиницаИзмерения", НоваяСтрока.ЕдиницаИзмерения);
					СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
					Если ТекущийИдентификатор>0 И СтруктураДанные.ТипНоменклатуры=ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Операция") Тогда
						НоваяСтрока.НормаВремени = СтруктураДанные.НормаВремени;
					КонецЕсли; 
					Если НоваяСтрока.Себестоимость=0 И НоваяСтрока.СебестоимостьЕдиницы=0 Тогда
						НоваяСтрока.СебестоимостьЕдиницы = СтруктураДанные.СебестоимостьЕдиницы;
					Иначе
						Если НоваяСтрока.Себестоимость>0 
							И СтруктураДанные.ТипНоменклатуры=ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Операция")
							И НЕ СтруктураДанные.ФиксированнаяСтоимость Тогда
							НоваяСтрока.СебестоимостьЕдиницы = ?((НоваяСтрока.Количество * НоваяСтрока.НормаВремени)=0, НоваяСтрока.Себестоимость, НоваяСтрока.Себестоимость / (НоваяСтрока.Количество * НоваяСтрока.НормаВремени));
						ИначеЕсли НоваяСтрока.Себестоимость>0 Тогда 
							НоваяСтрока.СебестоимостьЕдиницы = ?(НоваяСтрока.Количество=0, НоваяСтрока.Себестоимость, НоваяСтрока.Себестоимость / НоваяСтрока.Количество);
						КонецЕсли;
						НоваяСтрока.РучноеИзменение = Истина;
					КонецЕсли;
					Если СтруктураДанные.ТипНоменклатуры=ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Операция")
						И НЕ СтруктураДанные.ФиксированнаяСтоимость Тогда
						НоваяСтрока.Себестоимость = НоваяСтрока.СебестоимостьЕдиницы * НоваяСтрока.Количество * НоваяСтрока.НормаВремени;
					Иначе
						НоваяСтрока.Себестоимость = НоваяСтрока.СебестоимостьЕдиницы * НоваяСтрока.Количество;
					КонецЕсли; 
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЦикла;
		
		Модифицированность = Истина;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки);
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ЗаказПокупателя, , ПодробноеПредставлениеОшибки);
		
	КонецПопытки;
	
	ВывестиКалькуляцию();
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти 