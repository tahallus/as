#Область ОписаниеПеременных

#Область ПеременныеФормы

&НаКлиенте
Перем ПриИзмененииСтарт;

&НаКлиенте
Перем ПриИзмененииФиниш;

&НаКлиенте
Перем КопированиеСтрокиРаботы;

&НаКлиенте
Перем КопированиеСтрокиТовары;

&НаКлиенте
Перем ДанныеВыбораСостояния;

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	#Область БиблиотекаСтандартныхПодсистем
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект,
		"ЗНГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	#КонецОбласти  
	
	Если ТипЗнч(КэшЗначений) <> Тип("Структура") Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	КэшЗначений.Вставить("ИспользоватьМинимальныеЦены", ЦенообразованиеСерверПовтИсп.МинимальныеЦеныИспользуются());
	
	УстановитьУсловноеОформлениеФормы(); 
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Работы");
	
	//Доставка
	УстановитьВидимостьДанныхПоДоставке();
	
	// Запомним предопределённые значения
	ВариантЗаполненияРасшифровкиПросмотр = ПредопределенноеЗначение(
		"Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Просмотр");
	ВариантЗаполненияРасшифровкиВручную = ПредопределенноеЗначение(
		"Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Вручную");
	
	СпособыЗачетаВручную = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную");
	СпособыЗачетаАвто = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто");
	
	ВидОперацииЗаказНаряд = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд");
	
	РазрешитьСкладыВТабличныхЧастях = ПолучитьФункциональнуюОпцию("РазрешитьСкладыВТабличныхЧастях");
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	ДатаПриСозданииНаСервере = Объект.Дата;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	Контрагент = Объект.Контрагент;
	ЗаполнитьПараметрыРасчетовСКонтрагентом();
	
	Договор = Объект.Договор;
	
	Если ЗначениеЗаполнено(Договор) Тогда
		ВалютаРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВалютаРасчетов");
	КонецЕсли;
	НациональнаяВалюта = УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту();
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	ИмяТабличнойЧасти = "Работы";
	ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	ЭтотОбъект.ИспользоватьВидыЗаказНарядов = ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказНарядов");
	ЭтотОбъект.ЗаказНарядВСостоянииВыполнения = СостоянияЗаказов.ЭтоСостояниеВыполненияЗаказНаряда(Объект.СостояниеЗаказа, Объект.ВидЗаказа);
	
	ФункциональнаяОпцияРезервированиеЗапасов = ПолучитьФункциональнуюОпцию("РезервированиеЗапасов");
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		// Старт и Финиш
		Если НЕ (Параметры.ЗначенияЗаполнения.Свойство("Старт") ИЛИ Параметры.ЗначенияЗаполнения.Свойство("Финиш")) Тогда
			Объект.Старт = ?(Не ЗначениеЗаполнено(Объект.Старт), ТекущаяДата(), Объект.Старт);
			Объект.Финиш = ?(Не ЗначениеЗаполнено(Объект.Финиш), КонецДня(ТекущаяДата()), Объект.Финиш);
		КонецЕсли;
		Если Объект.Финиш = КонецМесяца(Объект.Финиш) Тогда
			// Возможен конфликт с закрытием месяца
			Объект.Финиш = Объект.Финиш - 60;
		КонецЕсли; 
		
		// Если заполняем ТЧ Запасы, она должна быть видима на форме
		Если Параметры.ЗначенияЗаполнения.Свойство("Запасы") И Параметры.ЗначенияЗаполнения.Запасы.Количество()>0 Тогда
			Объект.ИспользоватьТовары = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			Объект.ДокументОснование = Документы.ПриемИПередачаВРемонт.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	СформироватьНаименованияМатериаловИИсполнителей();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		И Не ЗначениеЗаполнено(Параметры.Основание) 
		И Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования)
		И Не ЗаполнениеОбъектовУНФ.ЭтоЗаполнениеПоШаблону(Параметры.ЗначенияЗаполнения) Тогда
		ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС(Истина);
		Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация,,Объект.Дата);
	ИначеЕсли Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.ЗНРаботыСтавкаНДС.Видимость = Истина;
		Элементы.ЗНРаботыСуммаНДС.Видимость = Истина;
		Элементы.ЗНРаботыВсего.Видимость = Истина;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
		Элементы.СчетФактураНадпись.Видимость = Истина;
	Иначе
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		Элементы.ЗНРаботыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗНРаботыСуммаНДС.Видимость = Ложь;
		Элементы.ЗНРаботыВсего.Видимость = Ложь;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НаЭкспорт Тогда
			Элементы.СчетФактураНадпись.Видимость = Истина;
		Иначе
			Элементы.СчетФактураНадпись.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СпециальныйНалоговыйРежим) Тогда
		Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация,,Объект.Дата);
	КонецЕсли;
	
	РаботаСФормойДокумента.НастроитьГруппуЦеныИВалюты(ЭтотОбъект);
	
	Элементы.РедактироватьСписком.Пометка = Объект.ПлатежныйКалендарь.Количество() > 1;
	Элементы.СтраницаПлатежныйКалендарь.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
	Элементы.ВидЗаказа.ОграничениеТипа			= Новый ОписаниеТипов("СправочникСсылка.ВидыЗаказНарядов");
	Элементы.СостояниеЗаказа.ОграничениеТипа	= Новый ОписаниеТипов("СправочникСсылка.СостоянияЗаказНарядов");
	Если Не ЭтотОбъект.ИспользоватьВидыЗаказНарядов Тогда
		Элементы.ВидЗаказа.Видимость					= Ложь;
		Элементы.СостояниеЗаказа.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Авто;
		Элементы.СостояниеЗаказа.АвтоМаксимальнаяШирина	= Истина;
		Элементы.СостояниеЗаказа.МаксимальнаяШирина		= 0;
		Элементы.СостояниеЗаказа.КнопкаСоздания			= Неопределено;
	КонецЕсли;
	УстановитьВидимостьЯчейки();
	
	// Сформируем надпись цены и валюты.
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.СпециальныйНалоговыйРежим, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	ОбновитьКартинкуДисконтнойКарты();
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		ИменаТЧ = Новый Массив;
		ИменаТЧ.Добавить(Новый Структура("ИмяПоляПроверки, ИмяПоляОформления", "Объект.Материалы.СтранаПроисхождения", "ЗНМатериалыНомерГТД"));
		ИменаТЧ.Добавить(Новый Структура("ИмяПоляПроверки, ИмяПоляОформления", "Объект.Запасы.СтранаПроисхождения", "ЗапасыНомерГТД"));
		
		ГрузовыеТаможенныеДекларацииСервер.ПриСозданииНаСервере(ЭтотОбъект, ИменаТЧ, КэшЗначений);
		
	КонецЕсли;
	
	ИспользоватьПодсистемуЗарплата = ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуЗарплата")
		И ПравоДоступа("Просмотр", Метаданные.Подсистемы.Персонал);
	
	Элементы.ЗНГруппаПредоплата.Доступность = Объект.СостояниеЗаказа = ПредопределенноеЗначение("Справочник.СостоянияЗаказНарядов.Завершен")
		И Объект.ВариантЗавершения = ПредопределенноеЗначение("Перечисление.ВариантыЗавершенияЗаказа.Успешно");
	
	// Если документ открыт из подбора, заполнить табличную часть товары
	Если Параметры.ЗначенияЗаполнения.Свойство("АдресЗапасовВХранилище") 
		И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.АдресЗапасовВХранилище) Тогда
		
		ПолучитьЗапасыИзХранилища(Параметры.ЗначенияЗаполнения.АдресЗапасовВХранилище, 
							Параметры.ЗначенияЗаполнения.ИмяТабличнойЧасти,
							Параметры.ЗначенияЗаполнения.ЕстьХарактеристики,
							Параметры.ЗначенияЗаполнения.ЕстьПартии);
		
	КонецЕсли;
	
	КэшЗначений.Вставить("ВерсияПодчиненногоСчетФактуры", Неопределено);
	КэшЗначений.Вставить("МодифицированностьФормы", Ложь);
	КэшЗначений.Вставить("ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати", Константы.ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати.Получить());
	
	// Установить надписи счет-фактура и основание
	СчетФактураСсылка = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(Объект.Ссылка, Ложь);
	Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(СчетФактураСсылка);
	КэшЗначений.Вставить("СчетФактураСсылка", ?(ТипЗнч(СчетФактураСсылка) = Тип("Структура"), СчетФактураСсылка.Ссылка, Неопределено));
	
	ИтогВсего = Объект.Работы.Итог("Всего") + Объект.Запасы.Итог("Всего");
	ИтогСуммаНДС = Объект.Работы.Итог("СуммаНДС") + Объект.Запасы.Итог("СуммаНДС");
	
	// Установка заголовка формы.
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = НСтр("ru = 'Заказ-наряд (Создание)'");
	КонецЕсли;
	
	// Установить отбор для ТаблицаРаботы по типу номенклатуры.
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТипНоменклатурыУслуга", Ложь);
	ФиксированнаяСтруктураОтбора = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	Элементы.ТаблицаРаботы.ОтборСтрок = ФиксированнаяСтруктураОтбора;
	
	// Установка доступности цен для редактирования.
	РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	
	Элементы.ЗНРаботыЦена.ТолькоПросмотр 				  = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗНРаботыПроцентСкидкиНаценки.ТолькоПросмотр  = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗНРаботыСумма.ТолькоПросмотр 				  = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗНРаботыСуммаНДС.ТолькоПросмотр 			  = НЕ РазрешеноРедактированиеЦенДокументов;
	
	Элементы.ЗапасыЦена.ТолькоПросмотр 					  = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыПроцентСкидкиНаценки.ТолькоПросмотр	  = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСумма.ТолькоПросмотр 				  = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаНДС.ТолькоПросмотр	 			  = НЕ РазрешеноРедактированиеЦенДокументов;
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Работы");
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Материалы");
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Запасы");
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "МатериалыЗаказчика");
	
	АвтоподборКонтактов.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	// СписокАвтоПодбораКонтрагента
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЭлектроннаяПочтаУНФ.ЗаполнитьСписокАвтоПодбораКонтрагентаИзСобытия(СписокАвтоПодбораКонтрагента, Объект.Событие);
	КонецЕсли;
	// Конец СписокАвтоПодбораКонтрагента
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// ГрупповоеИзменениеСтрок
	ЗаполнитьСписокДействий("Запасы", РазрешеноРедактированиеЦенДокументов);
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер("Запасы"), ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
	ЗапасыИзменениеСтрокДействиеПриОткрытии = ЗапасыИзменениеСтрокДействие;
	УстановитьПометку("Запасы", Истина);
	
	ЗаполнитьСписокДействий("Работы", РазрешеноРедактированиеЦенДокументов);
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер("Работы"), ЭтотОбъект.РаботыИзменениеСтрокДействие);
	РаботыИзменениеСтрокДействиеПриОткрытии = РаботыИзменениеСтрокДействие;
	УстановитьПометку("Работы", Истина);
	// Конец ГрупповоеИзменениеСтрок
	
	// АвтоматическиеСкидки.
	АвтоматическиеСкидкиПриСозданииНаСервере();
	
	// ЭДО
	УстановитьВидЭД();
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец ЭДО
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ЭлектронныеВесы", , МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	УстановитьВидимостьПечатиЧека();
	Если ИспользоватьПодключаемоеОборудование И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Справочники.Контрагенты.ДанныеКИКонтрагентаДляВыбораНаФорме(Объект.Контрагент, Элементы, ПоляКИДляОтправкиЧека());
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Ручные скидки
	РассчитатьСуммуИПроцентСкидкиРаботыЗапасы(Объект, СкидкаСумма, СкидкаПроцент);
	// Конец Ручные скидки
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	// Дополнительные условия для печати счета
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ ЗначениеЗаполнено(Объект.УсловияСчетаЗаказа) Тогда
		Объект.УсловияСчетаЗаказа = Справочники.ДополнительныеУсловия.ПолучитьТиповыеУсловия();
	КонецЕсли;
	// Дополнительные условия для печати счета
	
	// Серии номенклатуры
	ИспользоватьСерииНоменклатурыОстатки = СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки();
	
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	Элементы.ЗНМатериалыГруппаСерииНоменклатуры.Видимость = ИспользоватьСерииНоменклатуры;
	Элементы.ЗапасыГруппаСерииНоменклатуры.Видимость = ИспользоватьСерииНоменклатуры;
	
	// Ремонты
	Элементы.ГруппаЗаполнитьПоОснованию.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьРемонты");

	// Наборы
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ИменаТабличныхЧастей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Запасы,Работы");
		Для каждого ИмяТЧ Из ИменаТабличныхЧастей Цикл
			Если НЕ Параметры.ЗначенияЗаполнения.Свойство(ИмяТЧ) Тогда
				Продолжить;
			КонецЕсли; 
			Для каждого ДанныеСтроки Из Параметры.ЗначенияЗаполнения[ИмяТЧ] Цикл
				Если ДанныеСтроки.Свойство("ЭтоНабор") И ДанныеСтроки.ЭтоНабор Тогда
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
					Если ДанныеСтроки.Свойство("Характеристика") И ЗначениеЗаполнено(ДанныеСтроки.Характеристика) Тогда
						СтруктураОтбора.Вставить("Характеристика", ДанныеСтроки.Характеристика);
					КонецЕсли;
					Строки = Объект[ИмяТЧ].НайтиСтроки(СтруктураОтбора);
					Для каждого СтрокаНабора Из Строки Цикл
						СтруктураДанные = Новый Структура;
						СтруктураДанные.Вставить("Организация", Объект.Организация);
						СтруктураДанные.Вставить("Номенклатура", СтрокаНабора.Номенклатура);
						СтруктураДанные.Вставить("Характеристика", СтрокаНабора.Характеристика);
						СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
						СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
						Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
							СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
							СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
							СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
							СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
							СтруктураДанные.Вставить("Коэффициент", 1);
							СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
						КонецЕсли;
						// ДисконтныеКарты
						СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
						СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
						// Конец ДисконтныеКарты 
						
						ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, СтрокаНабора, СтруктураДанные);

						СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
						Если НЕ СтруктураДанные.ИспользоватьХарактеристики Тогда
							ЗаменитьСтрокуДаннымиНабора(ЭтотОбъект, ИмяТЧ, СтрокаНабора, СтруктураДанные);
						КонецЕсли;
					КонецЦикла; 
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЕсли;
	// Конец Наборы
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДействияПослеЧтенияОбъекта();
	КонецЕсли; 
	
	// КомандыПечати
	ПечатьДокументовУНФ.КорректировкаРазмещениеПодчиненнойГруппыКомандПечати(ЭтаФорма, Элементы.ПодменюПечать, Элементы.ПодменюДоговорКонтрагента);
	Элементы.КомандыПечатиДоговорКонтрагента.Вид = ВидГруппыФормы.ГруппаКнопок;
	ШаблоныПечатиОфисныхДокументов.ОпределитьВидимостьКомандШаблоновПечати(Элементы.ФормаОткрытьШаблоныПечатиДоговоровКонтрагентов);
	
	ПечатьДокументовУНФ.КорректировкаРазмещениеПодчиненнойГруппыКомандПечати(ЭтаФорма, Элементы.ПодменюПечать, Элементы.ПодменюПечатьФаксимиле);
	
	ЗаменитьКоманду("СводныйОтчетЗаказНаряд", "СводныйОтчет");
	ЗаменитьКоманду("Калькуляция", "Калькуляция");
	// Конец КомандыПечати
	
	// Доставка
	Если ЗначениеЗаполнено(Объект.НоменклатураДоставки) Тогда
		Объект.НоменклатураДоставки = Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли; 
	// Конец Доставка
	ОпределитьВидимостьИУстановитьНастройкиУчетаВНалогообложении();
	
	// ПодарочныеСертификаты
	КэшЗначений.Вставить("ВыводитьСоветОплатаСертификатомВВалюте", УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователи.ТекущийПользователь(),
		"ВыводитьСоветОплатаСертификатомВВалюте",
		Истина)
	);
	
	ИсходноеОписаниеТипов = РеквизитФормыВЗначение("Объект").Метаданные().ТабличныеЧасти.Предоплата.Реквизиты.Документ.Тип;
	ОписаниеТиповБезНоменклатуры = Новый ОписаниеТипов(ИсходноеОписаниеТипов,, "СправочникСсылка.Номенклатура");
	Элементы.Предоплата.ПодчиненныеЭлементы.ПредоплатаГруппаДокумент.ПодчиненныеЭлементы.ПредоплатаДокумент.ОграничениеТипа = ОписаниеТиповБезНоменклатуры;
	// Конец ПодарочныеСертификаты
	
	Если Параметры.Ключ.Пустая()
		Тогда
		НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект, Истина)
	КонецЕсли;
	
	ОбязательноЗаполнятьИсточникВЗаказах = 
		РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательностьЗаполненияРеквизита("ЗаказНаряд", "ИсточникПривлечения");
		
	// Взаиморасчеты
	ВзаиморасчетыПриСозданииНаСервере();
	// Конец Взаиморасчеты
	
	// ИнтеграцияГосИС
	СобытияФормИС.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
	ШтрихкодированиеИС.ИнициализироватьКэшМаркируемойПродукции(ЭтаФорма);
	// Конец ИнтеграцияГосИС
			
	// МобильныйКлиент
	МобильныйКлиентУНФ.НастроитьФормуОбъектаМобильныйКлиент(Элементы);
	// Конец МобильныйКлиент
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовУНФ.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
	ОткрытИзПланировщика = Параметры.Свойство("ВыбранныеРесурсы");
	
	Если ОткрытИзПланировщика И Не ЭтаФорма.ТолькоПросмотр Тогда
		ЗаполнитьРесурсыИзПланировщика(Параметры.ВыбранныеРесурсы);
	КонецЕсли;
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ПриИзмененииСтарт = Объект.Старт;
	ПриИзмененииФиниш = Объект.Финиш;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	УправлениеНебольшойФирмойКлиент.ЗаполнитьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП);
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП);
	// Конец ПодключаемоеОборудование
	
	УправлениеФормой();
	
	// ГрупповоеИзменениеСтрок
	ОпределитьОбъектИзменений("Запасы");
	ОпределитьОбъектИзменений("Работы");
	// Конец ГрупповоеИзменениеСтрок
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СписокАвтоПодбораКонтрагента
	Если ЗначениеЗаполнено(СписокАвтоПодбораКонтрагента) Тогда
		ПодключитьОбработчикОжидания("ПоказатьВыборИзКлассификатораКонтактов", 0.1, Истина);
	КонецЕсли;
	// Конец СписокАвтоПодбораКонтрагента
	
	// ЭДО
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭДО
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	//Ресурсы
	Если ОткрытИзПланировщика И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не Элементы.Найти("ЗНГруппаРесурсыПредприятия") = Неопределено Тогда
			ЭтаФорма.ТекущийЭлемент = Элементы.ЗНГруппаРесурсыПредприятия;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Элементы, "ЗНСтраницы", "ТекущаяСтраница") = Неопределено Тогда
		Если Элементы.ЗНСтраницы.ТекущаяСтраница.Имя = "ЗНГруппаРесурсыПредприятия" Тогда
			УстановитьДоступностьПовторов(Истина);
			ЗаполнитьДанныеТаблицыРесурсовНаФорме();
			ПланированиеРесурсовУНФКлиент.ЗаполнитьДлительностьВТаблицеВыбранныхРесурсов(Объект.РесурсыПредприятия)
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьПечатиЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// АвтоматическиеСкидки
	СкидкиНаценкиКлиент.ПриЗакрытииФормы(Объект.Ссылка, ИспользоватьАвтоматическиеСкидки, СкидкиРассчитаныПередЗаписью);
	// Конец АвтоматическиеСкидки
	
	Если НЕ ЗавершениеРаботы Тогда
		// ГрупповоеИзменениеСтрок
		СохранитьТекущееДействиеИзмененияСтрок();
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() И Не СчитанаДисконтнаяКарта Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Данные = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// ДисконтныеКарты
	Если СчитанаДисконтнаяКарта Тогда
		СчитанаДисконтнаяКарта = Ложь;
	КонецЕсли;
	// Конец ДисконтныеКарты
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		
		ЭтотОбъект.Прочитать();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновлениеТекстаПроСчетФактуру" Тогда
		
		ПредставлениеЗаголовка = РаботаСФормойДокументаКлиент.ПредставлениеЗаголовкаПодчиненногоСчетаФактуры(
			Объект.Ссылка, Источник, Параметр, КэшЗначений);
		Если ПредставлениеЗаголовка <> Неопределено Тогда

			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетФактураНадпись", "Заголовок",
				ПредставлениеЗаголовка);

		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Контрагент" 
		И ЗначениеЗаполнено(Параметр)
		И Объект.Контрагент = Параметр Тогда
		
		ЗаполнитьПараметрыРасчетовСКонтрагентом();
		УстановитьВидимостьДоговора();
		
	ИначеЕсли ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
			
		АдресЗапасовВХранилище	= Параметр;
		ЕстьХарактеристики 		= Истина;
		
		Если МаркерПодбора = "Работы" Тогда
			
			Если ПодборДляМатериаловВРаботах Тогда
				
				ИмяТабличнойЧасти 	= "ЗНМатериалы";
				ЕстьПартии 			= Истина;
				
				ЗНМатериалыПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии);
				
				СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы[ИмяТабличнойЧасти].ОтборСтрок["КлючСвязи"]);
				Элементы[ИмяТабличнойЧасти].ОтборСтрок = СтрОтбора;
				
			Иначе
				
				ИмяТабличнойЧасти 	= "Работы";
				ЕстьПартии 			= Ложь;
				
				ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии);
				
				ИтогВсего = Объект.Работы.Итог("Всего") + Объект.Запасы.Итог("Всего");
				ИтогСуммаНДС = Объект.Работы.Итог("СуммаНДС") + Объект.Запасы.Итог("СуммаНДС");
				
				// Платежный календарь.
				ПересчитатьПлатежныйКалендарь();
				
			КонецЕсли;
			
			// Калькуляция
			ОчиститьКалькуляцию();
			// Конец Калькуляция
	
		ИначеЕсли МаркерПодбора = "Запасы" Тогда
			
			ИмяТабличнойЧасти	= "Запасы";
			ЕстьПартии 			= Истина;
			
			ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии);
			
			Если НЕ ПустаяСтрока(ТекстОшибкиЖурналаРегистрации) Тогда
				ЗаписатьОшибкуЧтенияДанныхИзХранилища();
			КонецЕсли;
			
			//Подвал
			ИтогВсего = Объект.Работы.Итог("Всего") + Объект.Запасы.Итог("Всего");
			ИтогСуммаНДС = Объект.Работы.Итог("СуммаНДС") + Объект.Запасы.Итог("СуммаНДС");
			
			// Платежный календарь.
			ПересчитатьПлатежныйКалендарь();
			
			// Калькуляция
			ОчиститьКалькуляцию();
			// Конец Калькуляция
	
		ИначеЕсли МаркерПодбора = "МатериалыЗаказчика" Тогда
			
			ИмяТабличнойЧасти	= "МатериалыЗаказчика";
			ЕстьПартии 			= Ложь;
			
			ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ПараметрыИменаПолей = Новый Структура;
		
		Если Элементы.ЗНСтраницы.ТекущаяСтраница = Элементы.ЗНГруппаРаботы Тогда
			
			ПараметрыИменаПолей.Вставить("ИмяТЧЗапасы", "Материалы");
			ПараметрыИменаПолей.Вставить("ИмяТЧСерииНоменклатуры", "СерииНоменклатурыМатериалы");
			ПараметрыИменаПолей.Вставить("ИмяПоляКлючСвязи", "КлючСвязиСерииНоменклатуры");

			ИзменилосьКоличество = ПолучитьСерииНоменклатурыИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки, ПараметрыИменаПолей);
			Если ИзменилосьКоличество Тогда
				РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
				// Калькуляция
				ОчиститьКалькуляцию();
				// Конец Калькуляция
			КонецЕсли;
			
		ИначеЕсли Элементы.ЗНСтраницы.ТекущаяСтраница = Элементы.ЗНГруппаЗапасы Тогда
			
			ПараметрыИменаПолей.Вставить("ИмяТЧЗапасы", "Запасы");
			ПараметрыИменаПолей.Вставить("ИмяТЧСерииНоменклатуры", "СерииНоменклатуры");
			ПараметрыИменаПолей.Вставить("ИмяПоляКлючСвязи", "КлючСвязи");
			
			ИзменилосьКоличество = ПолучитьСерииНоменклатурыИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки, ПараметрыИменаПолей);
			Если ИзменилосьКоличество Тогда
				// Калькуляция
				ОчиститьКалькуляцию();
				// Конец Калькуляция
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ВидыЗаказНарядов"
		Или ИмяСобытия = "Запись_СостоянияЗаказНарядов" Тогда
		
		ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостояния_ЗаказНаряд" И Параметр <> Неопределено Тогда
		
		ЗаказИзменен = Неопределено;
		
		Если ТипЗнч(Параметр) = Тип("Массив") Тогда
			ЗаказИзменен = Параметр.Найти(Объект.Ссылка);
		ИначеЕсли ТипЗнч(Параметр) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ЗаказИзменен = Параметр = Объект.Ссылка;
		КонецЕсли;
		
		Если ЗаказИзменен = Неопределено ИЛИ (ТипЗнч(ЗаказИзменен) = Тип("Булево") И ЗаказИзменен = Ложь) Тогда
			Возврат;
		КонецЕсли;
		
		ЭтотОбъект.Прочитать();
		УправлениеФормой();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьСписокЗаказовНаДоставку" Тогда
		УстановитьВидимостьДанныхПоДоставке();
	КонецЕсли;

	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Работы");
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Материалы");
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Запасы");
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "МатериалыЗаказчика");
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// ЭДО
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭДО
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтеграцияГосИС
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КэшированныеЗначения",    Неопределено);
	ДополнительныеПараметры.Вставить("СтандартнаяОбработка",    Истина);
	ДополнительныеПараметры.Вставить("ТребуетсяСерверныйВызов", Ложь);
	СобытияФормИСКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
	// Конец ИнтеграцияГосИС
	
	Если ИмяСобытия = "Запись_ШаблоныПечатиОфисныхДокументов" И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство(
		"Назначение") Тогда
		Если Параметр.Назначение = ПредопределенноеЗначение(
			"Перечисление.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагента") Или Параметр.Назначение
			= ПредопределенноеЗначение(
			"Перечисление.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаЗаказНаряд") Тогда
			ГруппаКомандПечати = Элементы.ПодменюДоговорКонтрагента;
			ШаблоныПечатиОфисныхДокументовКлиент.УстановитьПризнакПоявленияНовойКомандыПечати(ГруппаКомандПечати);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновлениеФормыЗаказНаряд" И ЭтаФорма.УникальныйИдентификатор = Источник Тогда
		
		СтруктураДанныеНоменклатуры = Новый Структура();
		
		СтруктураДанныеНоменклатуры.Вставить("Номенклатура",);
		СтруктураДанныеНоменклатуры.Вставить("Характеристика",);
		СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", );
		СтруктураДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", );
		
		СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
		СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанныеНоменклатуры.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
		
		// ДисконтныеКарты
		СтруктураДанныеНоменклатуры.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
		СтруктураДанныеНоменклатуры.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
		// Конец ДисконтныеКарты

		
		Для Каждого ТаблицаДанных Из Параметр Цикл
			
			Для Каждого СтрокаТаблицыДанных Из ТаблицаДанных.Значение Цикл
				НоваяСтрока = Объект[ТаблицаДанных.Ключ].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыДанных);
				
				Если НоваяСтрока.ЭтоНабор Тогда
					// Наборы
					
					СтруктураДанныеНоменклатуры.Номенклатура =  СтрокаТаблицыДанных.Номенклатура;
					СтруктураДанныеНоменклатуры.Характеристика = СтрокаТаблицыДанных.Характеристика;
					СтруктураДанныеНоменклатуры.ТипНоменклатуры = СтрокаТаблицыДанных.ТипНоменклатуры;
					СтруктураДанныеНоменклатуры.ЕдиницаИзмерения = СтрокаТаблицыДанных.ЕдиницаИзмерения;

					ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры);

					СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
					
					ЗаменитьСтрокуДаннымиНабора(ЭтотОбъект, ТаблицаДанных.Ключ, НоваяСтрока, СтруктураДанные);
					
					Продолжить;
					
				КонецЕсли;
				
				Если НоваяСтрока.Свойство("Спецификация") Тогда 
					НоваяСтрока.Спецификация = СпецификацияПоУмолчанию(НоваяСтрока.Номенклатура,
						НоваяСтрока.Характеристика);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТаблицаДанных.Ключ = "Материалы" Тогда
				ЗаполнитьНомераСтрокТаблицаМатериалы(Объект.Материалы);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьПризнакиИспользованияХарактеристик();
		СброситьФлагСкидкиРассчитаныСервер("ОбработкаПодбора");
		ДействияПослеЧтенияОбъекта();
		
		ИмяТЧ = "Запасы";
		
		Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТч] Цикл
			РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТч,СтрокаТабличнойЧасти);
		КонецЦикла;
		
		Если РежимОстаткиИРезервы Тогда
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	// Наборы
	Если НаборыКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Источник) Тогда
		
		Если ИмяТабличнойЧасти = "Работы" Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("НоменклатураНабора", Параметр.НоменклатураНабора);
			СтруктураОтбора.Вставить("ХарактеристикаНабора", Параметр.ХарактеристикаНабора);
			Строки = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из Строки Цикл
				Элементы.Работы.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
				ТабличныеЧастиУНФКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Материалы");
				ТабличныеЧастиУНФКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Исполнители");
			КонецЦикла; 
		КонецЕсли; 
		
		ОбновитьСоставНабора(Параметр.НоменклатураНабора, Параметр.ХарактеристикаНабора, Параметр.Количество, 
			Параметр.Цена, Параметр.СоставНабора);
		
		Если ИмяТабличнойЧасти = "Работы" Тогда
			ВыполнитьДействияПослеУдаленияСтрокиРаботы();
		Иначе
			ВыполнитьДействияПослеУдаленияСтрокиТовары();
		КонецЕсли;
		
		ЗаполнитьПризнакиИспользованияХарактеристик();
		
	КонецЕсли;
	// Конец Наборы
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовУНФКлиент.ОбработчикОповещенияФормаДокумента(ИмяСобытия,ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// ИнтеграцияГосИС
	СобытияФормИС.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец ИнтеграцияГосИС
	
	СформироватьНаименованияМатериаловИИсполнителей();
	
	Элементы.ВариантЗавершенияРасширеннаяПодсказка.Заголовок = СтрШаблон(НСтр("ru='Предыдущее состояние: %1'"),
		СостоянияЗаказов.ПолучитьСостояниеЗаказаПередЗавершением(
			ТекущийОбъект.Ссылка,
			Справочники.СостоянияЗаказНарядов.Завершен)
	);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ДействияПослеЧтенияОбъекта();
	Элементы.ЗНГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(Объект.СпособЗачетаПредоплаты, Объект.Предоплата);
	
	// Ресурсы
	ПланированиеРесурсовУНФ.ПерезаполнитьСлужебныеРеквизитыТаблицыРесурсов(Объект.РесурсыПредприятия);
	
	// Остатки и Резервы
	ПроверитьЗаполнениеСтруктурнойЕдиницыВТабличныхЧастях();
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,Истина);
	
	Если ЗначениеЗаполнено(ДатаПриСозданииНаСервере) Тогда
		// Чтение в открытой форме
		УстановитьВидимостьОтПользовательскихНастроек(Объект, ЭтотОбъект);
	КонецЕсли; 
	
	// Обновим реквизиты формы
	ЭтотОбъект.Контрагент = Объект.Контрагент;
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	// ЭДО
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.КомандыЭДО_ПриЧтенииФормыДокумента(ЭтотОбъект);
	// Конец ЭДО
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП, Истина);
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("ПроведениеДокументЗаказНаряд");
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	КэшЗначений.МодифицированностьФормы = Модифицированность;
	
	// АвтоматическиеСкидки
	СкидкиРассчитаныПередЗаписью = Ложь;
	// Если документ проводится, проверим рассчитанность скидок.
	Если ИспользоватьАвтоматическиеСкидки Тогда
		
		Если Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
			РассчитатьСкидкиНаценкиКлиент();
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Рассчитаны автоматические скидки (наценки).'");
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Сообщить();
			
			СкидкиРассчитаныПередЗаписью = Истина;
		Иначе
			Объект.СкидкиРассчитаны = Истина;
			ОбновитьКартинкуАвтоСкидкиПослеЗаписи = Истина;
		КонецЕсли;
		
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТекстСообщения = "";
		Справочники.ДоговорыКонтрагентов.ПроверитьСоответствиеДоговораУсловиямДокумента(
			ТекстСообщения, 
			ТекущийОбъект.Договор, 
			ТекущийОбъект.Ссылка, 
			ТекущийОбъект.Организация, 
			ТекущийОбъект.Контрагент, 
			Отказ,
			ТекущийОбъект.ВидОперации);
		
		Если ТекстСообщения <> "" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Если Отказ Тогда
				Сообщение.Текст = СтрШаблон(НСтр("ru = 'Документ не проведен. %1'"), ТекстСообщения);
			Иначе
				Сообщение.Текст = ТекстСообщения;
			КонецЕсли;
			
			Если Отказ Тогда
				Сообщение.ПутьКДанным = "Объект";
				Сообщение.Поле = "Договор";
				Сообщение.Сообщить();
				Возврат;
			Иначе
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
		
		Если УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройкиЗачетаАвансов() = ПредопределенноеЗначение("Перечисление.ДаНет.Да")
			И Элементы.ЗНГруппаПредоплата.Доступность
			И ТекущийОбъект.Предоплата.Количество() = 0
			И ТекущийОбъект.СпособЗачетаПредоплаты = СпособыЗачетаВручную Тогда
			ЗаполнитьПредоплату(ТекущийОбъект);
		КонецЕсли;
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТаблицаДокументовДляИзменения", ТаблицаДокументовДляИзменения);
	
	// АвтоматическиеСкидки
	Если ОбновитьКартинкуАвтоСкидкиПослеЗаписи Тогда
		Элементы.РаботыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		ОбновитьКартинкуАвтоСкидкиПослеЗаписи = Ложь;
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность", Модифицированность);
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И РежимОстаткиИРезервы Тогда
		ПроверитьПоложениеСкладаПриПроведении(ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Установка заголовка формы.
	Заголовок = "";
	АвтоЗаголовок = Истина;
	
	СформироватьНаименованияМатериаловИИсполнителей();
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	ТекущийОбъект.ДополнительныеСвойства.Свойство("ВерсияПодчиненногоСчетФактуры", КэшЗначений.ВерсияПодчиненногоСчетФактуры);
	
	Элементы.ВариантЗавершенияРасширеннаяПодсказка.Заголовок = СтрШаблон(НСтр("ru='Предыдущее состояние: %1'"),
		СостоянияЗаказов.ПолучитьСостояниеЗаказаПередЗавершением(
			ТекущийОбъект.Ссылка,
			Справочники.СостоянияЗаказНарядов.Завершен)
	);
	
	// ГрупповоеИзменениеСтрок
	Если Элементы.ГруппаЗапасыИзменениеСтрок.Видимость Тогда
		УстановитьПометку("Запасы", Истина);
	КонецЕсли;
	Если Элементы.ЗНГруппаРаботыИзменениеСтрок.Видимость Тогда
		УстановитьПометку("Работы", Истина);
	КонецЕсли;
	// Конец ГрупповоеИзменениеСтрок
	
	// ЭДО
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭДО
	
	//Ячейки
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ДействияПослеЧтенияОбъекта(); 
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Работы");
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец Обсуждения
	
	// Взаиморасчеты
	ДатаПриСозданииНаСервере = Объект.Дата;
	
	Если ТекущийОбъект.Проведен ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ТаблицаДокументовДляИзменения.Очистить();
	КонецЕсли;
	
	Если Элементы.ЗНСтраницы.ТекущаяСтраница = Элементы.ЗНГруппаПредоплата
		И Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаПросмотр Тогда
		ИстинаПослеЗаписиНаСервере = Истина;
		РасчетыРаботаСФормамиВызовСервера.ЗаполнитьТаблицуПросмотраНаСервере(ЭтотОбъект, ИстинаПослеЗаписиНаСервере);
	КонецЕсли;
	// Конец Взаиморасчеты
	
	// ИнтеграцияГосИС
	СобытияФормИС.ПослеЗаписиНаСервере(ЭтаФорма);
	// Конец ИнтеграцияГосИС
	
	// Ресурсы
	ПланированиеРесурсовУНФ.ПерезаполнитьСлужебныеРеквизитыТаблицыРесурсов(Объект.РесурсыПредприятия);
	
	// Остатки и резервы
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,Истина);
	ОбновитьОтображениеКолонокВРазрезеЗапасовСервер();
	
	АссистентУправления.ПослеЗаписиНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	Если КэшЗначений.МодифицированностьФормы = Истина
		И КэшЗначений.ВерсияПодчиненногоСчетФактуры = "1.6.11" Тогда
		
		ТекстВопроса = НСтр("ru = 'В накладную были внесены изменения.
			|Требуется самостоятельно поправить подчиненный документ счет-фактура'");
		
		ПоказатьПредупреждение(, ТекстВопроса, 0, НСтр("ru ='Счет-фактура'"));
		
	КонецЕсли;
	
	Оповестить("Запись_ЗаказНаряды", Объект.Ссылка, ЭтотОбъект);
	Оповестить("ОповещениеОбИзмененииДолга");
	
	Если ОткрытИзПланировщика Тогда Оповестить("ОбновитьПланировщик") КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Событие) И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		СтруктураОповещения = Новый Структура("СсылкаНаЗаказНаряд, СсылкаНаСобытие", Объект.Ссылка, Объект.Событие);
		Оповестить("ПроведениеЗаказНаряда", СтруктураОповещения, ЭтотОбъект);
	КонецЕсли;
	
	// Наборы
	ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.Работы, Объект.ДобавленныеНаборы); 
	// Конец Наборы
	
	// Подарочные сертификаты
	Если Объект.ВалютаДокумента <> УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеКонстанты("НациональнаяВалюта")
		И ЕстьСертификаты("Запасы") Тогда
		
		Если КэшЗначений.ВыводитьСоветОплатаСертификатомВВалюте Тогда
		
			ПараметрыСовета = Новый Структура;
			ПараметрыСовета.Вставить("Заголовок", НСтр("ru = 'Предупреждение'"));
			ПараметрыСовета.Вставить("ТекстСообщения", НСтр("ru = 'Оплата сертификатом будет возможна только в национальной валюте.'"));
			ПараметрыСовета.Вставить("ВидимостьБольшеНеПоказывать", Истина);
			ПараметрыСовета.Вставить("ИмяПользовательскойНастройки", "ВыводитьСоветОплатаСертификатомВВалюте");
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыводаСовета", ЭтотОбъект, ПараметрыСовета);
			ОткрытьФорму("ОбщаяФорма.ФормаСообщения", ПараметрыСовета, ЭтаФорма, Истина, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ВалютаДокумента <> НациональнаяВалюта И ЕстьКорректировкиПоДокументу(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru ='По документу создана корректировка, необходимо проверить ее актуальность'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
// Процедура обрабатывает результаты открытия формы совета пользователю
//
Процедура ПослеВыводаСовета(РезультатЗакрытия, ПараметрыСовета) Экспорт
	
	Если ПараметрыСовета.ВидимостьБольшеНеПоказывать 
		И ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		КэшЗначений.Вставить(ПараметрыСовета.ИмяПользовательскойНастройки, РезультатЗакрытия.ЗначениеПользовательскойНастройки);
		ПерсональныеНастройкиВызовСервера.Установить(РезультатЗакрытия.ЗначениеПользовательскойНастройки,
			ПараметрыСовета.ИмяПользовательскойНастройки);
		
	КонецЕсли;
	
КонецПроцедуры // ПослеВыводаСовета()

&НаСервере
Функция ЕстьСертификаты(ИмяТЧ)
	
	Возврат РаботаСПодарочнымиСертификатами.ЕстьСертификаты(Объект[ИмяТЧ].Выгрузить());
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением, ВалютаРасчетов);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВалютаРасчетов) Тогда
			ПересчитатьКурсКратностьВалютыРасчетов(СтруктураДанные);
		КонецЕсли;
		
		СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.СпециальныйНалоговыйРежим, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
		ПересчитатьПлатежныйКалендарь();
		ОбновитьПодвалФормы();
		
		// ДисконтныеКарты
		ПересчитатьПроцентСкидкиПриИзмененииДатыДокумента();
		// Конец ДисконтныеКарты
		
		ОпределитьВидимостьИУстановитьНастройкиУчетаВНалогообложении();
	КонецЕсли;
	
	// АвтоматическиеСкидки
	ДатаДокументаИзмененаВручную = Истина;
	СброситьФлагСкидкиРассчитаныКлиент("ДатаПриИзменении");
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении();
	Компания = СтруктураДанные.Компания;
	Если Объект.ВалютаДокумента = СтруктураДанные.БанковскийСчетВалютаДенежныхСредств Тогда
		Объект.БанковскийСчет = СтруктураДанные.БанковскийСчет;
	КонецЕсли;
	
	Объект.ПодписьРуководителя = СтруктураДанные.ПодписьРуководителя;
	Объект.ПодписьГлавногоБухгалтера = СтруктураДанные.ПодписьГлавногоБухгалтера;
	
	// Касса по умолчанию
	Если СтруктураДанные.Свойство("Касса") Тогда
		Объект.Касса = СтруктураДанные.Касса;
	КонецЕсли;
	// Конец Касса по умолчанию
	
	Объект.Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
	ОбработатьИзменениеДоговора();
	
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.СпециальныйНалоговыйРежим, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	ПересчитатьПлатежныйКалендарь();
	ОбновитьПодвалФормы();
	УстановитьНастройкиУчетаВНалогообложении();
	
	ТребуетсяОбновлениеТЧПоОстаткамМатериалы = РежимОстаткиИРезервы И Объект.ИспользоватьМатериалы;
	ТребуетсяОбновлениеТЧПоОстаткамЗапасы = РежимОстаткиИРезервы И Объект.ИспользоватьТовары;
	ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
	ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		ДанныеДоговора = ПолучитьДанныеКонтрагентПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.Контрагент, Объект.Организация);
		ЗаполнитьПараметрыРасчетовСКонтрагентом();
		УстановитьВидимостьДоговора();
		
		ДоговорПередИзменением = Объект.Договор;
		Объект.Договор = ДанныеДоговора.Договор;
		
		Если Объект.Договор <> ДоговорПередИзменением 
			И Объект.СпособЗачетаПредоплаты <> ДанныеДоговора.СпособЗачетаПредоплаты Тогда
			Объект.СпособЗачетаПредоплаты = ДанныеДоговора.СпособЗачетаПредоплаты;
			СпособЗачетаПредоплатыПриИзмененииНаСервере();
		КонецЕсли;
		
		Объект.КонтактноеЛицоПодписант = ДанныеДоговора.КонтактноеЛицоПодписант;
		ОбработатьИзменениеДоговора(ДанныеДоговора);
		
		Если ДанныеДоговора.Свойство("Проект") Тогда
			Объект.Проект = ДанныеДоговора.Проект;
		КонецЕсли;
		
	Иначе
		
		Объект.Договор = Договор; // Восстанавливаем автоматически очищенный договор.
		
	КонецЕсли;
	
	// АвтоматическиеСкидки
	СброситьФлагСкидкиРассчитаныКлиент("КонтрагентПриИзменении");
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговора();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбораДоговора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор, Объект.ВидОперации);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурнаяЕдиницаПродажиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаПродажи) Тогда
		
		Если Не ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаРезерв) Тогда
			
			СтруктураДанные = Новый Структура();
			СтруктураДанные.Вставить("Подразделение", Объект.СтруктурнаяЕдиницаПродажи);
			
			СтруктураДанные = ПолучитьДанныеСтруктурнаяЕдиницаПриИзменении(СтруктураДанные);
			
			Объект.СтруктурнаяЕдиницаРезерв = СтруктураДанные.СтруктурнаяЕдиницаЗапасов;
			Объект.Ячейка = СтруктураДанные.ЯчейкаЗапасов;
			Элементы.ЗНЯчейкаЗапасов.Доступность = СтруктураДанные.ОрдерныйСкладЗапасов;
			
		КонецЕсли;
		
	Иначе
		
		Элементы.ЗНЯчейкаЗапасов.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНПроектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивОтбора = Новый Массив;
	
	ПустаяСсылкаНаПроект = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	
	МассивОтбора.Добавить(ПустаяСсылкаНаПроект);
	МассивОтбора.Добавить(Объект.Контрагент);
	
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("Отбор", Новый Структура("Контрагент", МассивОтбора));
	СтруктураОтбора.Вставить("РежимВыбора", Истина);
	СтруктураОтбора.Вставить("МножественныйВыбор", Ложь);
	СтруктураОтбора.Вставить("ЗакрыватьПриВыборе", Истина);
	
	ОткрытьФорму("Справочник.Проекты.ФормаВыбора", СтруктураОтбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНСтруктурнаяЕдиницаЗапасовПриИзменении(Элемент)
	
	УстановитьВидимостьЯчейки();
	ТребуетсяОбновлениеТЧПоОстаткамМатериалы = РежимОстаткиИРезервы И Объект.ИспользоватьМатериалы;
	ТребуетсяОбновлениеТЧПоОстаткамЗапасы = РежимОстаткиИРезервы И Объект.ИспользоватьТовары;
	ЗаполнитьСкладВТабличныхЧастях();
	ОбработатьИзменениеСтруктурнойЕдиницыЗапасовНаСервере();
	
	Если КэшЗначений.ИспользоватьМинимальныеЦены Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл 	
			
			РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", СтрокаТабличнойЧасти); 			
			
		КонецЦикла;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл   		
			
			
			РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТабличнойЧасти); 	
			
			
		КонецЦикла;  
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНЯчейкаЗапасовПриИзменении(Элемент)
	
	ЗаполнитьСкладВТабличныхЧастях();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЯчейки()
	
	Элементы.ЗНЯчейкаЗапасов.Доступность = НЕ Объект.СтруктурнаяЕдиницаРезерв.ОрдерныйСклад;
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьДисконтнуюКартуНажатие(Элемент)
	
	СтруктураПараметров = Новый Структура("Контрагент", Объект.Контрагент);
	ОписаниеОповещения = Новый ОписаниеОповещения("СчитатьДисконтнуюКартуНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ДисконтныеКарты.Форма.СчитываниеДисконтнойКарты", СтруктураПараметров, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗаказаПриИзменении(Элемент)
	
	ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	ТребуетсяОбновлениеТЧПоОстаткамМатериалы = РежимОстаткиИРезервы И Объект.ИспользоватьМатериалы;
	ТребуетсяОбновлениеТЧПоОстаткамЗапасы = РежимОстаткиИРезервы И Объект.ИспользоватьТовары;
	ВидЗаказаПриИзмененииСервер();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗаказаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.ВидыЗаказНарядов"), ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаказаПриИзменении(Элемент)
	
	Если Объект.СостояниеЗаказа = ПредопределенноеЗначение("Справочник.СостоянияЗаказНарядов.Завершен") Тогда
		Объект.ВариантЗавершения = ПредопределенноеЗначение("Перечисление.ВариантыЗавершенияЗаказа.Успешно");
		Элементы.ЗНСтраницы.ТекущаяСтраница = Элементы.СтраницаЗавершениеЗаказа;
		
		#Если ВебКлиент Тогда
			// В веб-клиенте установка текущей страницы должна происходить после включения видимости у страницы
			ПодключитьОбработчикОжидания("УстановитьТекущейСтраницейЗавершениеЗаказа", 0.1, Истина);
		#КонецЕсли
		
	КонецЕсли;
	
	ЭтотОбъект.ЗаказНарядВСостоянииВыполнения = СостоянияЗаказовВызовСервера.ЭтоСостояниеВыполненияЗаказНаряда(Объект.СостояниеЗаказа, Объект.ВидЗаказа);
	ТребуетсяОбновлениеТЧПоОстаткамМатериалы = РежимОстаткиИРезервы И Объект.ИспользоватьМатериалы;
	ТребуетсяОбновлениеТЧПоОстаткамЗапасы = РежимОстаткиИРезервы И Объект.ИспользоватьТовары;
	УправлениеФормой();
	
	ОбновитьОтображениеКолонокВРазрезеЗапасов(,Не РежимОстаткиИРезервы);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаказаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния Тогда
		ПараметрыПолученияДанных.Вставить("ВидЗаказа", Объект.ВидЗаказа);
		ДанныеВыбораСостояния = ПолучитьДанныеВыбора(Тип("СправочникСсылка.СостоянияЗаказНарядов"), ПараметрыПолученияДанных);
		ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Ложь;
	КонецЕсли;
	
	ДанныеВыбора = ДанныеВыбораСостояния;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНСтартПриИзменении(Элемент)
	
	Если Объект.Старт > Объект.Финиш Тогда
		Объект.Старт = ПриИзмененииСтарт;
		Сообщить(НСтр("ru='Дата старта не может быть больше даты финиша.'"));
	Иначе
		ПриИзмененииСтарт = Объект.Старт;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНФинишПриИзменении(Элемент)
	
	Если Час(Объект.Финиш) = 0 И Минута(Объект.Финиш) = 0 Тогда
		Объект.Финиш = КонецДня(Объект.Финиш);
	КонецЕсли;
	Если Объект.Финиш = КонецМесяца(Объект.Финиш) Тогда
		// Возможен конфликт с закрытием месяца
		Объект.Финиш = Объект.Финиш - 60;
	КонецЕсли; 
	
	Если Объект.Финиш < Объект.Старт Тогда
		Объект.Финиш = ПриИзмененииФиниш;
		Сообщить(НСтр("ru='Дата финиша не может быть меньше даты старта.'"));
	Иначе
		ПриИзмененииФиниш = Объект.Финиш;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРаботПриИзменении(Элемент)
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
		СтрокаТабличнойЧасти.ВидРабот = Объект.ВидРабот;
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен();
	КонецЕсли;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДенежныхСредствПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапланироватьОплатуПриИзменении(Элемент)
	
	Если Объект.ЗапланироватьОплату И Объект.ПлатежныйКалендарь.Количество() = 0 Тогда
		
		НоваяСтрока = Объект.ПлатежныйКалендарь.Добавить();
		НоваяСтрока.ДатаОплаты = Объект.Дата + ПолучитьСрокОплатыПокупателя(Объект.Договор) * 86400;
		НоваяСтрока.ПроцентОплаты = 100;
		НоваяСтрока.СуммаОплаты = Объект.Запасы.Итог("Всего") + Объект.Работы.Итог("Всего");
		НоваяСтрока.СуммаНДСОплаты = Объект.Запасы.Итог("СуммаНДС") + Объект.Работы.Итог("СуммаНДС");
		
	ИначеЕсли НЕ Объект.ЗапланироватьОплату И Объект.ПлатежныйКалендарь.Количество() > 0 Тогда
		
		Объект.ПлатежныйКалендарь.Очистить();
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Договор) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбораБанковскогоСчета(Объект.Договор, Объект.Организация, НациональнаяВалюта);
	Если ПараметрыФормы.РасчетыВУсловныхЕдиницах Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетыСКонтрагентом(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗавершенияПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПодвалаФормы

&НаКлиенте
Процедура СчетФактураНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СчетаФактурыУНФКлиент.ОткрытьСчетФактуру(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаПроцентПриИзменении(Элемент)
	
	РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки");
	РаботыИзменениеСтрокОбъектИзмененийРеквизит = "ПроцентСкидкиНаценки";
	РаботыИзменениеСтрокЗначение = СкидкаПроцент;
	
	ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки");
	ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "ПроцентСкидкиНаценки";
	ЗапасыИзменениеСтрокЗначение = СкидкаПроцент;
	
	Если Объект.Работы.Количество()>0 Тогда
		ОбработатьТаблицу("Работы");
	КонецЕсли;
	Если Объект.Запасы.Количество()>0 Тогда
		ОбработатьТаблицу("Запасы");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаСуммаПриИзменении(Элемент)
	
	ВсегоРаботы = Объект.Работы.Итог("Всего");
	ВсегоЗапасы = Объект.Запасы.Итог("Всего");
	Если ВсегоРаботы=0 И ВсегоЗапасы=0 Тогда
		ВсегоРаботы = Объект.Работы.Итог("СуммаСкидкиНаценки");
		ВсегоЗапасы = Объект.Запасы.Итог("СуммаСкидкиНаценки");
	КонецЕсли;
	Если ВсегоРаботы=0 И ВсегоЗапасы=0 Тогда
		Возврат;
	КонецЕсли; 
	ПроцентСкидкиРаботы = ВсегоРаботы / (ВсегоРаботы + ВсегоЗапасы);
	ПроцентСкидкиЗапасы = 1 - ПроцентСкидкиРаботы;
	
	РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой");
	РаботыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
	РаботыИзменениеСтрокЗначение = СкидкаСумма * ПроцентСкидкиРаботы;
	
	ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой");
	ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
	ЗапасыИзменениеСтрокЗначение = СкидкаСумма * ПроцентСкидкиЗапасы;

	СтруктураОповещения = Новый Структура;
	СтруктураОповещения.Вставить("СуммаДоРасчета", СкидкаСумма);
	
	ОбработатьТаблицу("Работы");
	ОбработатьТаблицу("Запасы");

	СтруктураОповещения.Вставить("СуммаПослеРасчета", СкидкаСумма);                             	
	ЦенообразованиеКлиент.ПоказатьОповещениеПользователяОКорректировкеЦены(СтруктураОповещения);

	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ЗапасыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПослеУдаления(Элемент)
	
	ВыполнитьДействияПослеУдаленияСтрокиТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	// Наборы
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если Копирование И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) Тогда
		// Состав набора не копируется
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	// Конец Наборы
	
	Если Копирование Тогда
		
		Если РежимОстаткиИРезервы Тогда
			
			Отказ = Истина;
			
			НоваяСтрока = Объект.Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
			
			НоваяСтрока.Резерв = 0;
			
			СтруктураДанные = Новый Структура;
			СтруктураДанные.Вставить("Организация", Компания);
			СтруктураДанные.Вставить("Номенклатура", 	НоваяСтрока.Номенклатура);
			СтруктураДанные.Вставить("Характеристика", 	НоваяСтрока.Характеристика);
			СтруктураДанные.Вставить("Партия", 	НоваяСтрока.Партия);
			СтруктураДанные.Вставить("ИспользоватьХарактеристики", НоваяСтрока.ИспользоватьХарактеристики);
			СтруктураДанные.Вставить("ИспользоватьПартии", НоваяСтрока.ИспользоватьПартии);
			
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные,,,Истина);
			
		КонецЕсли;
		
		ИтогВсего = Объект.Работы.Итог("Всего") + Объект.Запасы.Итог("Всего");
		ИтогСуммаНДС = Объект.Работы.Итог("СуммаНДС") + Объект.Запасы.Итог("СуммаНДС");
		КопированиеСтрокиТовары = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриИзменении(Элемент)
	
	Если КопированиеСтрокиТовары = Неопределено ИЛИ НЕ КопированиеСтрокиТовары Тогда
		ОбновитьПодвалФормы();
	Иначе
		КопированиеСтрокиТовары = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
		
	КонецЕсли;
	
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	// Конец ДисконтныеКарты
	
	СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
	
	СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
	
	Если СкладВШапке Тогда
		СтруктураДанные.Вставить("Склад", Объект.СтруктурнаяЕдиницаРезерв);
		СтруктураДанные.Вставить("Ячейка", Объект.Ячейка);
	КонецЕсли;
	
	СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанные);
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, СтрокаТабличнойЧасти, СтруктураДанные);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	Если СтруктураДанные.Свойство("МинимальнаяЦена") 
		И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
		СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;			
	КонецЕсли;
	
	Если СтруктураДанные.ЭтоНабор И НЕ СтруктураДанные.ИспользоватьХарактеристики Тогда
		
		// Наборы
		ЗаменитьСтрокуДаннымиНабора(ЭтотОбъект, "Запасы", СтрокаТабличнойЧасти, СтруктураДанные);
		
		ЗаполнитьПризнакиИспользованияХарактеристик();
		ОбновитьДоступностьЯчеек();
		ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
		
		// АвтоматическиеСкидки.
		СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
		// Конец АвтоматическиеСкидки
	
		#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
		Элементы.Запасы.ЗакончитьРедактированиеСтроки(Истина);
		#КонецЕсли 
		
	Иначе
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			СтрокаТабличнойЧасти.НоменклатураСсылка = СтрокаТабличнойЧасти.Номенклатура;
		КонецЕсли;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
		СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
		СтрокаТабличнойЧасти.Количество = 1;
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
		СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		СтрокаТабличнойЧасти.Содержание = "";
		СтрокаТабличнойЧасти.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
		
		Если СтрокаТабличнойЧасти.ТипНоменклатурыЗапас Тогда
			Если СкладВШапке Тогда
				СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
				ЗаполнитьСкладВСтрокеТЧ(СтрокаТабличнойЧасти, СтруктураДанные);
			Иначе
				Если Не (ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв) И ПодборНоменклатурыИзСписка) Тогда
					СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
					ЗаполнитьСкладВСтрокеТЧ(СтрокаТабличнойЧасти, СтруктураДанные);
					ЗапасыСтруктурнаяЕдиницаРезервПриИзменении(Элемент);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
		
		Если СтруктураДанные.ИспользоватьХарактеристики Тогда
			Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
				СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
			Иначе
				СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
		КонецЕсли;
		
		// Партии
		СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
		
		Если СтруктураДанные.ИспользоватьПартии Тогда
			Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
				СтруктураВыбораНоменклатуры.Партия = Неопределено;
			Иначе
				СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
			КонецЕсли;
		КонецЕсли;
		// Конец Партии
		
		СтрокаТабличнойЧасти.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
		
		// Наборы
		СтрокаТабличнойЧасти.ЭтоНабор = СтруктураДанные.ЭтоНабор;
		
		// Серии номенклатуры
		Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанныеСтроки,
				ИспользоватьСерииНоменклатурыОстатки);
		КонецЦикла;

		РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
		
	КонецЕсли;
	
	ПодборНоменклатурыИзСписка = Ложь;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	КонецЕсли;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ЗаказНаряд", НастройкиФормыВыбораНоменклатуры, Истина, "Запасы", ВыбранноеЗначение.СтруктураНастроек);
		КонецЕсли;
		
		Если РазрешитьСкладыВТабличныхЧастях Тогда
			Если Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти")
				Или Объект.СтруктурнаяЕдиницаРезерв = ВыбранноеЗначение.Склад
				Или Не ЗначениеЗаполнено(ВыбранноеЗначение.Склад) Тогда
				
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
				
				Если СтрокаТабличнойЧасти.Свойство("СтруктурнаяЕдиницаРезерв") Тогда
					СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = ВыбранноеЗначение.Склад;
				КонецЕсли;
				
				НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
				
			ИначеЕсли ЗначениеЗаполнено(ВыбранноеЗначение.Склад) И Не Объект.СтруктурнаяЕдиницаРезерв = ВыбранноеЗначение.Склад Тогда
				Режим = РежимДиалогаВопрос.ДаНет;
				ПараметрыОповещения = ВыбранноеЗначение;
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаСкладВТЧ", ЭтотОбъект, ПараметрыОповещения);
				ПоказатьВопрос(Оповещение, НСтр("ru = 'Выбранный склад отличен от склада в шапке. Отобразить склад в табличной части?'"), Режим, 0);
				СтандартнаяОбработка = Ложь;
				Возврат;
			Иначе
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
				НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
		КонецЕсли;
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаСкладВТЧ(Результат, ПараметрыОповещения) Экспорт
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПараметрыОповещения);
		ЗапасыНоменклатураПриИзменении(Неопределено);
		НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
		Возврат;
	КонецЕсли;
	
	Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
	
	УправлениеФормой();
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПараметрыОповещения);
	
	Если СтрокаТабличнойЧасти.Свойство("СтруктурнаяЕдиницаРезерв") Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = ПараметрыОповещения.Склад;
	КонецЕсли;
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
	
	ЗапасыНоменклатураПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("СтранаПроисхождения", СтрокаТабличнойЧасти.СтранаПроисхождения);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки", 			Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", 		Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", 		Объект.СуммаВключаетНДС);
		
		СтруктураДанные.Вставить("СтавкаНДС", 				СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("Цена", 					СтрокаТабличнойЧасти.Цена);
		
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		
	КонецЕсли;
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, СтрокаТабличнойЧасти, СтруктураДанные);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	Если СтруктураДанные.Свойство("МинимальнаяЦена") 
		И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
		СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;			
	КонецЕсли;
	
	Если СтруктураДанные.ЭтоНабор Тогда
		
		// Наборы
		ЗаменитьСтрокуДаннымиНабора(ЭтотОбъект, "Запасы", СтрокаТабличнойЧасти, СтруктураДанные);
		
		ЗаполнитьПризнакиИспользованияХарактеристик();
		
		// АвтоматическиеСкидки.
		СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
		// Конец АвтоматическиеСкидки
		
		Если РежимОстаткиИРезервы Тогда
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
		КонецЕсли;
		
	Иначе
		
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.Содержание = "";
		СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
		СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
		
		Если РежимОстаткиИРезервы Тогда
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,СтрокаТабличнойЧасти.Номенклатура,,Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПартияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", 				Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура",				СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",				СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", 						СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",	СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
	СтруктураДанные.Вставить("ИспользоватьПартии", 			СтрокаТабличнойЧасти.ИспользоватьПартии);
	СтруктураДанные.Вставить("СтранаПроисхождения",			СтрокаТабличнойЧасти.СтранаПроисхождения);
	
	СтрокаТаблицыПартияПриИзмененииНаСервере(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСодержаниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		ШаблонСодержания = ТекстСодержания(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ШаблонСодержания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковПоНоменклатуре();
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы["Запасы"].ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат 
	КонецЕсли;
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
		Или СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		Если КэшЗначений.ИспользоватьМинимальныеЦены
			И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
			
			СтрокаТабличнойЧасти.МинимальнаяЦена = СтрокаТабличнойЧасти.МинимальнаяЦена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		
		КонецЕсли;
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияПриИзменении(Элемент)
	
	// В процедуре РассчитатьСуммуВСтрокеТабличнойЧасти есть вызов серверной процедуры.
	// Из-за этого данный вызов нельзя выполнить в процедуре ЗапасыЕдиницаИзмеренияОбработкаВыбора.
	// Использование ЗапасыЕдиницаИзмеренияОбработкаВыбора более оптимально, т.к. позволяет отказаться от выполнения
	// большей части алгоритма, если единица измерения не поменялась.
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковПоНоменклатуре();
	КонецЕсли;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
	СтрокаТабличнойЧасти = Элементы["Запасы"].ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат 
	КонецЕсли;
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	//РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки, СброситьФлагСкидкиРассчитаны", Истина, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТабличнойЧасти, ПараметрыРасчета);

	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки, СброситьФлагСкидкиРассчитаны, РассчитатьЦену", Истина, Истина, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТабличнойЧасти, ПараметрыРасчета);
		
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Сумма НДС и Всего
	ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(СтрокаТабличнойЧасти, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРезервПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СтрокаТабличнойЧасти.РезервОтгрузка = СтрокаТабличнойЧасти.Резерв;
	
	НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти, "ПриИзмененииРезерваПроверитьКоличество", Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРезервОтгрузкаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.РезервОтгрузка < СтрокаТабличнойЧасти.Резерв Тогда
		
		СтрокаТабличнойЧасти.Резерв = СтрокаТабличнойЧасти.РезервОтгрузка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Запасы.ТекущиеДанные;
	СтруктураРеквизита = Новый Структура;
	СтруктураРеквизита.Вставить("Объект", "Объект");
	СтруктураРеквизита.Вставить("ТабЧасть", "Запасы");
	СтруктураРеквизита.Вставить("НомерСтроки", ТекущаяСтрока.НомерСтроки - 1);
	СтруктураРеквизита.Вставить("ИмяРеквизита", "Содержание");
	ЗаголовокФормыРедактирования = СтрШаблон(НСтр("ru='%1: содержание'"), Строка(ТекущаяСтрока.Номенклатура));
	ОбщегоНазначенияУНФКлиент.ПоказатьФормуРедактированияРеквизита(Элемент.ТекстРедактирования, ЭтотОбъект,
		СтруктураРеквизита, ЗаголовокФормыРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтранаПроисхожденияПриИзменении(Элемент)
	
	Если КэшЗначений.УчетГТД Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения)
			ИЛИ СтрокаТабличнойЧасти.СтранаПроисхождения = КэшЗначений.Россия Тогда
			
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНомерГТДПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
		
		ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
		Если ДатаГТД > КонецДня(Объект.Дата) Тогда
			
			ТекстСообщения = НСтр("ru ='Внимание: выбранная ГТД датирована более поздней датой, чем текущий документ'");
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Запасы",
				СтрокаТабличнойЧасти.НомерСтроки, "НомерГТД");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , КонтекстноеПоле);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаРезервПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СтрокаТабличнойЧасти.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв);
	
	Если КэшЗначений.Свойство("ИспользоватьМинимальныеЦены")
		И КэшЗначений.ИспользоватьМинимальныеЦены Тогда
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("СтранаПроисхождения", СтрокаТабличнойЧасти.СтранаПроисхождения);
		СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		
		Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
			
			СтруктураДанные.Вставить("ДатаОбработки", 			Объект.Дата);
			СтруктураДанные.Вставить("ВалютаДокумента", 		Объект.ВалютаДокумента);
			СтруктураДанные.Вставить("СуммаВключаетНДС", 		Объект.СуммаВключаетНДС);
			
			СтруктураДанные.Вставить("СтавкаНДС", 				СтрокаТабличнойЧасти.СтавкаНДС);
			СтруктураДанные.Вставить("Цена", 					СтрокаТабличнойЧасти.Цена);
			
			СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
			СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
			
		КонецЕсли;
		
		ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, СтрокаТабличнойЧасти, СтруктураДанные);
		
		СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
		
		Если СтруктураДанные.Свойство("МинимальнаяЦена") 
			И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
			СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;			
		КонецЕсли;
			
	КонецЕсли;
	
	ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(СтрокаТабличнойЧасти.НомерСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаРезервЗаказПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат 
	КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Компания);
	СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", 	СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("ИспользоватьХарактеристики", СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
	СтруктураДанные.Вставить("ИспользоватьПартии", СтрокаТабличнойЧасти.ИспользоватьПартии);
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные,,, Истина);
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаРезервЗаказОчистка(Элемент, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Компания);
	СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", 	СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("ИспользоватьХарактеристики", СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
	СтруктураДанные.Вставить("ИспользоватьПартии", СтрокаТабличнойЧасти.ИспользоватьПартии);
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные,,,Истина);
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьДействияПослеУдаленияСтрокиТовары()
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныКлиент("УдалениеСтроки");
	
	ОбновитьПодвалФормы();
	
	Если РежимОстаткиИРезервы Тогда
		Если ЗначениеЗаполнено(НоменклатураУдаленнойСтроки) Тогда
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,НоменклатураУдаленнойСтроки);
		Иначе
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	// Наборы
	Если Элементы.Запасы.ВыделенныеСтроки.Количество()=Объект.Запасы.Количество() Тогда
		// Если выделены все строки - проверки удаления наборов не выполняются
		УдаляемыеНаборы = Новый Массив;
		Для каждого Строка Из Объект.Запасы Цикл
			Если ЗначениеЗаполнено(Строка.НоменклатураНабора) И УдаляемыеНаборы.Найти(Строка.НоменклатураНабора)=Неопределено Тогда
				УдаляемыеНаборы.Добавить(Строка.НоменклатураНабора);
			КонецЕсли; 
		КонецЦикла;
		Для каждого НоменклатураНабора Из УдаляемыеНаборы Цикл
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("НоменклатураНабора", НоменклатураНабора);
			УдаляемыеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
			Для каждого СтрНабора Из УдаляемыеСтроки Цикл
				Объект.ДобавленныеНаборы.Удалить(СтрНабора);
			КонецЦикла; 
		КонецЦикла; 
	Иначе
		ДанныеНабора = Новый Структура("НоменклатураНабора, ХарактеристикаНабора");
		Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
			Если ДанныеНабора.НоменклатураНабора=Неопределено Тогда
				ДанныеНабора.НоменклатураНабора = ТекущиеДанныеСтроки.НоменклатураНабора;
				ДанныеНабора.ХарактеристикаНабора = ТекущиеДанныеСтроки.ХарактеристикаНабора;
			ИначеЕсли ДанныеНабора.НоменклатураНабора<>ТекущиеДанныеСтроки.НоменклатураНабора 
				ИЛИ ДанныеНабора.ХарактеристикаНабора<>ТекущиеДанныеСтроки.ХарактеристикаНабора Тогда
				// Выделены строки разных наборов
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Действие недоступно для наборов.'");
				Сообщение.Поле = "Объект.Запасы";
				Сообщение.Сообщить();
				Отказ = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		Если НЕ Отказ И ЗначениеЗаполнено(ДанныеНабора.НоменклатураНабора) Тогда
			// Набор можно удалить только целиком
			Отказ = Истина;
			ДобавленныеНаборы = Объект.ДобавленныеНаборы.НайтиСтроки(ДанныеНабора);
			Оповещение = Новый ОписаниеОповещения("ТоварыПередУдалениемЗавершение", ЭтотОбъект, ДанныеНабора);
			СписокКнопок = Новый СписокЗначений;
			Если ДобавленныеНаборы.Количество()>0 И ДобавленныеНаборы[0].Количество>1 Тогда
				// в ТЧ есть несколько одинаковых наборов
				ТекстВопроса = НСтр("ru = 'Набор можно удалить только целиком. В табличную часть добавлено несколько экземпляров данного набора'");
				СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить все'"));
				СписокКнопок.Добавить("УдалитьОдин", НСтр("ru = 'Удалить один экземпляр'"));
			Иначе
				ТекстВопроса = НСтр("ru = 'Набор можно удалить только целиком'");
				СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить'"));
			КонецЕсли; 
			СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Редактировать состав'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
			ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок, 0, КодВозвратаДиалога.Да);
		КонецЕсли; 
	КонецЕсли; 
	// Конец Наборы
	
	// Серии номенклатуры
	Если НЕ Отказ Тогда
		Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанныеСтроки,
				ИспользоватьСерииНоменклатурыОстатки);
		КонецЦикла;
	КонецЕсли; 
	
	// Остатки и резервы
	Если РежимОстаткиИРезервы И Не Отказ Тогда
		ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
		НоменклатураУдаленнойСтроки = ТекущиеДанные.Номенклатура;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалениемЗавершение(Результат, ДанныеНабора) Экспорт
	
	// Наборы
	Если Результат=Неопределено ИЛИ Результат=КодВозвратаДиалога.Отмена Тогда
		Возврат
	КонецЕсли;
	
	СтрокиНабора = Объект.Запасы.НайтиСтроки(ДанныеНабора);
	Если СтрокиНабора.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаТабличнойЧасти = СтрокиНабора[0];
	
	ИмяТабличнойЧасти = "Запасы";
	Если Результат=КодВозвратаДиалога.Нет Тогда
		
		РедактироватьСоставНабора(СтрокаТабличнойЧасти);
		
	ИначеЕсли Результат=КодВозвратаДиалога.Да Тогда
		
		Для каждого Стр Из СтрокиНабора Цикл
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, Стр,
				ИспользоватьСерииНоменклатурыОстатки);
		КонецЦикла;
		НаборыКлиент.УдалитьСтрокиНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора, , Объект.Запасы, Объект.ДобавленныеНаборы);
		
		ВыполнитьДействияПослеУдаленияСтрокиТовары();
		Модифицированность = Истина;
		
	ИначеЕсли Результат="УдалитьОдин" Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.НоменклатураНабора);
		СтруктураОтбора.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.ХарактеристикаНабора);
		ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
		СтрокиНабора = Объект.Запасы.НайтиСтроки(СтруктураОтбора);
		Если ДобавленныеСтроки.Количество()=0 ИЛИ ДобавленныеСтроки[0].Количество<=1 Тогда
			Для каждого Стр Из СтрокиНабора Цикл
				СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, Стр,
					ИспользоватьСерииНоменклатурыОстатки);
				Объект.Запасы.Удалить(Стр);
			КонецЦикла;
			Для каждого Стр Из ДобавленныеСтроки Цикл
				Объект.ДобавленныеСтроки.Удалить(Стр);
			КонецЦикла;
			Возврат;
		КонецЕсли;
		СтароеКоличество = ДобавленныеСтроки[0].Количество;
		ДобавленныеСтроки[0].Количество = СтароеКоличество-1;
		НаборыКлиентСервер.УдалитьЭкземплярНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора, , Объект.Запасы, , СтароеКоличество);
		СтрокиНабора = Объект.Запасы.НайтиСтроки(СтруктураОтбора);
		Для каждого Стр Из СтрокиНабора Цикл
			РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", Стр);
		КонецЦикла;
		
		ВыполнитьДействияПослеУдаленияСтрокиТовары();
		Модифицированность = Истина;
		
	КонецЕсли; 
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	// Наборы
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ХарактеристикиНабора(СтрокаТабличнойЧасти.Номенклатура, Текст);
	КонецЕсли;                              
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	// Наборы
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтандартнаяОбработка = Ложь;
		СтруктураОткрытия = Новый Структура;
		СтруктураОткрытия.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураОткрытия.Вставить("РежимВыбора", Истина);
		СтруктураОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
		ОткрытьФорму("РегистрСведений.СоставНаборов.Форма.ФормаРедактированияСостава", СтруктураОткрытия, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	КонецЕсли;                              
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаСкидкиНаценкиПриИзменении(Элемент)
	
	//РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьПроцентСкидки, СброситьФлагСкидкиРассчитаны", Истина, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТабличнойЧасти, ПараметрыРасчета);

	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗНРаботы

&НаКлиенте
Процедура РаботыПриАктивизацииСтроки(Элемент)
	
	ИмяТабличнойЧасти = "Работы";
	ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы");
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Элементы.ЗНРаботаМатериалы.Доступность = НЕ СтрокаТабличнойЧасти.ТипНоменклатурыУслуга;
	КонецЕсли;
	
	Если РежимОстаткиИРезервы Тогда
		ПоказатьДублиСтрок(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРаботыПриАктивизацииСтроки(Элемент)
	
	ИмяТабличнойЧасти = "ТаблицаРаботы";
	ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "Исполнители");
	
КонецПроцедуры // ТаблицаРаботыПриАктивизацииСтроки()

&НаКлиенте
Процедура РаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИмяТабличнойЧасти = "Работы";
	Если НоваяСтрока Тогда
		
		ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект);
		ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы");
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Элементы.ЗНРаботаМатериалы.Доступность = НЕ СтрокаТабличнойЧасти.ТипНоменклатурыУслуга;
	КонецЕсли;
	
	// АвтоматическиеСкидки
	Если НоваяСтрока И Копирование И
		(Элемент.ТекущиеДанные.ПроцентАвтоматическойСкидки <> 0 ИЛИ Элемент.ТекущиеДанные.СуммаАвтоматическойСкидки <> 0) Тогда
		Элемент.ТекущиеДанные.ПроцентАвтоматическойСкидки = 0;
		Элемент.ТекущиеДанные.СуммаАвтоматическойСкидки = 0;
		РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", Элемент.ТекущиеДанные);
	ИначеЕсли ИспользоватьАвтоматическиеСкидки И НоваяСтрока И Копирование Тогда
		// Автоматические скидки стали неактуальны.
		СброситьФлагСкидкиРассчитаныКлиент("ПриНачалеРедактирования");
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	Если НоваяСтрока И Копирование Тогда
		// Калькуляция
		ОчиститьКалькуляцию();
		// Конец Калькуляция
	КонецЕсли; 
	
	Если НоваяСтрока Тогда
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "ВидРабот", "ПоложениеВидаРабот");
	КонецЕсли; 
	
	// ГрупповоеИзменениеСтрок
	Элемент.ТекущиеДанные.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок

КонецПроцедуры // РаботыПриНачалеРедактирования()

&НаКлиенте
Процедура РаботыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	// Наборы
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если Копирование И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) Тогда
		// Состав набора не копируется
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	// Конец Наборы
	
	Если Копирование Тогда
		ИтогВсего = Объект.Работы.Итог("Всего") + Объект.Запасы.Итог("Всего") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Работы.Итог("СуммаНДС") + Объект.Запасы.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		КопированиеСтрокиРаботы = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗапасыПередНачаломДобавления()

&НаКлиенте
Процедура РаботыПриИзменении(Элемент)
	
	Если КопированиеСтрокиРаботы = Неопределено ИЛИ НЕ КопированиеСтрокиРаботы Тогда
		ОбновитьПодвалФормы();
	Иначе
		КопированиеСтрокиРаботы = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ЗапасыПриИзменении()

&НаКлиенте
Процедура РаботыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	// Установить отбор для ТаблицаРаботы по типу номенклатуры.
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТипНоменклатурыУслуга", Ложь);
	ФиксированнаяСтруктураОтбора = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	Элементы.ТаблицаРаботы.ОтборСтрок = ФиксированнаяСтруктураОтбора;
	
КонецПроцедуры // РаботыПриОкончанииРедактирования()

&НаКлиенте
Процедура РаботыПередУдалением(Элемент, Отказ)

	// Наборы
	Если Элементы.Работы.ВыделенныеСтроки.Количество()=Объект.Работы.Количество() Тогда
		// Если выделены все строки - проверки удаления наборов не выполняются
		УдаляемыеНаборы = Новый Массив;
		Для каждого Строка Из Объект.Работы Цикл
			Если ЗначениеЗаполнено(Строка.НоменклатураНабора) И УдаляемыеНаборы.Найти(Строка.НоменклатураНабора)=Неопределено Тогда
				УдаляемыеНаборы.Добавить(Строка.НоменклатураНабора);
			КонецЕсли; 
		КонецЦикла;
		Для каждого НоменклатураНабора Из УдаляемыеНаборы Цикл
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("НоменклатураНабора", НоменклатураНабора);
			УдаляемыеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
			Для каждого СтрНабора Из УдаляемыеСтроки Цикл
				Объект.ДобавленныеНаборы.Удалить(СтрНабора);
			КонецЦикла; 
		КонецЦикла; 
	Иначе
		ДанныеНабора = Новый Структура("НоменклатураНабора, ХарактеристикаНабора");
		Для каждого ВыделеннаяСтрока Из Элементы.Работы.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.Работы.ДанныеСтроки(ВыделеннаяСтрока);
			Если ДанныеНабора.НоменклатураНабора=Неопределено Тогда
				ДанныеНабора.НоменклатураНабора = ТекущиеДанныеСтроки.НоменклатураНабора;
				ДанныеНабора.ХарактеристикаНабора = ТекущиеДанныеСтроки.ХарактеристикаНабора;
			ИначеЕсли ДанныеНабора.НоменклатураНабора<>ТекущиеДанныеСтроки.НоменклатураНабора 
				ИЛИ ДанныеНабора.ХарактеристикаНабора<>ТекущиеДанныеСтроки.ХарактеристикаНабора Тогда
				// Выделены строки разных наборов
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Действие недоступно для наборов.'");
				Сообщение.Поле = "Объект.Запасы";
				Сообщение.Сообщить();
				Отказ = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		Если НЕ Отказ И ЗначениеЗаполнено(ДанныеНабора.НоменклатураНабора) Тогда
			// Набор можно удалить только целиком
			Отказ = Истина;
			ДобавленныеНаборы = Объект.ДобавленныеНаборы.НайтиСтроки(ДанныеНабора);
			Оповещение = Новый ОписаниеОповещения("РаботыПередУдалениемЗавершение", ЭтотОбъект, ДанныеНабора);
			СписокКнопок = Новый СписокЗначений;
			Если ДобавленныеНаборы.Количество()>0 И ДобавленныеНаборы[0].Количество>1 Тогда
				// в ТЧ есть несколько одинаковых наборов
				ТекстВопроса = НСтр("ru = 'Набор можно удалить только целиком. В табличную часть добавлено несколько экземпляров данного набора'");
				СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить все'"));
				СписокКнопок.Добавить("УдалитьОдин", НСтр("ru = 'Удалить один экземпляр'"));
			Иначе
				ТекстВопроса = НСтр("ru = 'Набор можно удалить только целиком'");
				СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить'"));
			КонецЕсли; 
			СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Редактировать состав'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
			ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок, 0, КодВозвратаДиалога.Да);
		КонецЕсли; 
	КонецЕсли; 
	// Конец Наборы
	
	Если НЕ Отказ Тогда
		ИмяТабличнойЧасти = "Работы";
		ТабличныеЧастиУНФКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Материалы");
		ТабличныеЧастиУНФКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Исполнители");
		
		СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			Элементы.ЗНРаботаМатериалы.Доступность = НЕ СтрокаТабличнойЧасти.ТипНоменклатурыУслуга;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры // РаботыПередУдалением()

&НаКлиенте
Процедура РаботыПослеУдаления(Элемент)
	
	ВыполнитьДействияПослеУдаленияСтрокиРаботы();
	
КонецПроцедуры // РаботыПослеУдаления()

&НаКлиенте
Процедура РаботыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
	ИмяТабличнойЧасти = "Работы";
	ТабличныеЧастиУНФКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Материалы");
	ТабличныеЧастиУНФКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Исполнители");
	СтрокаТабличнойЧасти.Материалы = "";
	СтрокаТабличнойЧасти.Исполнители = "";
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
	СтруктураДанные.Вставить("НормаВремени", 1);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	Если ВидРаботВШапке И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидРабот", Объект.ВидРабот);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	ИначеЕсли (НЕ ВидРаботВШапке) И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидРабот", СтрокаТабличнойЧасти.ВидРабот);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	КонецЕсли;
	
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	// Конец ДисконтныеКарты 
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, СтрокаТабличнойЧасти, СтруктураДанные);

	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);

	Если СтруктураДанные.Свойство("МинимальнаяЦена") 
		И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
		СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;			
	КонецЕсли;
	
	Если СтруктураДанные.ЭтоНабор И НЕ СтруктураДанные.ИспользоватьХарактеристики Тогда
		
		// Наборы
		ЗаменитьСтрокуДаннымиНабора(ЭтотОбъект, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, СтруктураДанные);
		
		ЗаполнитьПризнакиИспользованияХарактеристик();
		
		// АвтоматическиеСкидки.
		СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
		// Конец АвтоматическиеСкидки
	
		#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
		Элементы.Работы.ЗакончитьРедактированиеСтроки(Истина);
		#КонецЕсли 
		
	Иначе
		
		СтрокаТабличнойЧасти.Количество = СтруктураДанные.НормаВремени;
		СтрокаТабличнойЧасти.Кратность = 1; 
		СтрокаТабличнойЧасти.Коэффициент = 1;
		СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
		СтрокаТабличнойЧасти.Содержание = "";
		
		СтрокаТабличнойЧасти.ЭтоНабор = СтруктураДанные.ЭтоНабор;
		СтрокаТабличнойЧасти.ФиксированнаяСтоимость = СтруктураДанные.ФиксированнаяСтоимость;
		
		СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
		
		Если СтруктураДанные.ИспользоватьХарактеристики Тогда
			Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
				СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
			Иначе
				СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
		КонецЕсли;
		
		Если (ВидРаботВШапке И ЗначениеЗаполнено(Объект.ВидЦен) И СтруктураДанные.Свойство("Цена")) ИЛИ СтруктураДанные.Свойство("Цена") Тогда
			СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ТипНоменклатурыУслуга = СтруктураДанные.ЭтоУслуга;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			Элементы.ЗНРаботаМатериалы.Доступность = НЕ СтрокаТабличнойЧасти.ТипНоменклатурыУслуга;
		КонецЕсли;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
		
	КонецЕсли;
	
	ПодборНоменклатурыИзСписка = Ложь;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // РаботыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗНРаботыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ЗаказНаряд", НастройкиФормыВыбораНоменклатуры, Истина, "ЗНРаботы", ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "ЗНРаботы");
		КонецЕсли;
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура РаботыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
	СтруктураДанные.Вставить("НормаВремени", 1);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		Если ВидРаботВШапке Тогда
			
			СтруктураДанные.Вставить("ВидРабот", Объект.ВидРабот);
			
		ИначеЕсли НЕ ВидРаботВШапке Тогда
			
			СтруктураДанные.Вставить("ВидРабот", СтрокаТабличнойЧасти.ВидРабот);
			
		КонецЕсли;
		
		СтруктураДанные.Вставить("ВалютаДокумента",	Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС",Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен",			Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент",		1);
		СтруктураДанные.Вставить("ВидСкидкиНаценки",Объект.ВидСкидкиНаценки);
		
	КонецЕсли;
	
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	// Конец ДисконтныеКарты

	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, СтрокаТабличнойЧасти, СтруктураДанные);

	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);

	Если СтруктураДанные.Свойство("МинимальнаяЦена") 
		И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
		СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;			
	КонецЕсли;
	
	Если СтруктураДанные.ЭтоНабор Тогда
		
		// Наборы
		ЗаменитьСтрокуДаннымиНабора(ЭтотОбъект, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, СтруктураДанные);
		
		ЗаполнитьПризнакиИспользованияХарактеристик();
		
		// АвтоматическиеСкидки.
		СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
		// Конец АвтоматическиеСкидки
	
	Иначе
		
		СтрокаТабличнойЧасти.Количество = СтруктураДанные.НормаВремени;
		СтрокаТабличнойЧасти.Кратность = 1; 
		СтрокаТабличнойЧасти.Коэффициент = 1; 
		СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		СтрокаТабличнойЧасти.Содержание = "";
		СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
		
		Если (ВидРаботВШапке И ЗначениеЗаполнено(Объект.ВидЦен)) ИЛИ СтруктураДанные.Свойство("Цена") Тогда
			СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
		КонецЕсли;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
		
	КонецЕсли;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // РаботыХарактеристикаПриИзменении()

&НаКлиенте
Процедура ЗНРаботыСодержаниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
		ШаблонСодержания = ТекстСодержания(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ШаблонСодержания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыВидРаботПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
		
		// Наборы
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) Тогда
			
			ОбновитьЦеныНабора(СтрокаТабличнойЧасти.ПолучитьИдентификатор(), "Работы");
			
		Иначе
		// Конец Наборы
			
			СтруктураДанные = Новый Структура;
			СтруктураДанные.Вставить("Организация", 		Компания);
			СтруктураДанные.Вставить("Номенклатура", 		СтрокаТабличнойЧасти.Номенклатура);
			СтруктураДанные.Вставить("Характеристика", 		СтрокаТабличнойЧасти.Характеристика);
			СтруктураДанные.Вставить("ВидРабот", 			СтрокаТабличнойЧасти.ВидРабот);
			
			СтруктураДанные.Вставить("ДатаОбработки", 		Объект.Дата);
			СтруктураДанные.Вставить("ВалютаДокумента", 	Объект.ВалютаДокумента);
			СтруктураДанные.Вставить("СуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
			СтруктураДанные.Вставить("ВидЦен", 				Объект.ВидЦен);
			СтруктураДанные.Вставить("Коэффициент", 		1);
			
			СтруктураДанные.Вставить("ВидСкидкиНаценки", 	Объект.ВидСкидкиНаценки);
			
			// ДисконтныеКарты
			СтруктураДанные.Вставить("ДисконтнаяКарта", 	Объект.ДисконтнаяКарта);
			СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);		
			// Конец ДисконтныеКарты

			ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, СтрокаТабличнойЧасти, СтруктураДанные);

			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
			
			СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
			
			Если СтруктураДанные.Свойство("МинимальнаяЦена") 
				И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
				
				СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;
				
			КонецЕсли;
			
		КонецЕсли; 
		
		РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
		
	КонецЕсли;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // РаботыНоменклатураПриИзменении()

&НаКлиенте
Процедура РаботыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	//Исполнители
	ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // РаботыКоличествоПриИзменении()

&НаКлиенте
Процедура РаботыКоэффициентПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	//Исполнители
	ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // РаботыКоличествоПриИзменении()

&НаКлиенте
Процедура РаботыКратностьПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	//Исполнители
	ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // РаботыКоличествоПриИзменении()

&НаКлиенте
Процедура РаботыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	//Исполнители
	ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // РаботыЦенаПриИзменении()

&НаКлиенте
Процедура РаботыПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	//РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки, СброситьФлагСкидкиРассчитаны", Истина, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	//Исполнители
	ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // РаботыПроцентСкидкиНаценкиПриИзменении()

&НаКлиенте
Процедура РаботыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки, СброситьФлагСкидкиРассчитаны, РассчитатьЦену", Истина, Истина, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	//Исполнители
	ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // РаботыСуммаПриИзменении()

&НаКлиенте
Процедура РаботыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
	// Сумма НДС и Всего
	ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(СтрокаТабличнойЧасти, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	//Исполнители
	ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры  // РаботыСтавкаНДСПриИзменении()

&НаКлиенте
Процедура РаботыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	//Исполнители
	ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // РаботыСуммаНДСПриИзменении()

&НаКлиенте
Процедура ЗНРаботыСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Работы.ТекущиеДанные;
	СтруктураРеквизита = Новый Структура;
	СтруктураРеквизита.Вставить("Объект", "Объект");
	СтруктураРеквизита.Вставить("ТабЧасть", "Работы");
	СтруктураРеквизита.Вставить("НомерСтроки", ТекущаяСтрока.НомерСтроки - 1);
	СтруктураРеквизита.Вставить("ИмяРеквизита", "Содержание");
	ЗаголовокФормыРедактирования = СтрШаблон(НСтр("ru='%1: содержание'"), Строка(ТекущаяСтрока.Номенклатура));
	ОбщегоНазначенияУНФКлиент.ПоказатьФормуРедактированияРеквизита(Элемент.ТекстРедактирования, ЭтотОбъект,
		СтруктураРеквизита, ЗаголовокФормыРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПередУдалениемЗавершение(Результат, ДанныеНабора) Экспорт
	
	// Наборы
	Если Результат=Неопределено ИЛИ Результат=КодВозвратаДиалога.Отмена Тогда
		Возврат
	КонецЕсли;
	
	СтрокиНабора = Объект.Работы.НайтиСтроки(ДанныеНабора);
	Если СтрокиНабора.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаТабличнойЧасти = СтрокиНабора[0];
	
	ИмяТабличнойЧасти = "Работы";
	Если Результат=КодВозвратаДиалога.Нет Тогда
		
		РедактироватьСоставНабора(СтрокаТабличнойЧасти);
		
	ИначеЕсли Результат=КодВозвратаДиалога.Да Тогда
		
		Для каждого Стр Из СтрокиНабора Цикл
			Элементы.Работы.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
			ТабличныеЧастиУНФКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Материалы");
			ТабличныеЧастиУНФКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Исполнители");
		КонецЦикла;
		НаборыКлиент.УдалитьСтрокиНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора, , Объект.Работы, Объект.ДобавленныеНаборы);
		
		СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			Элементы.ЗНРаботаМатериалы.Доступность = НЕ СтрокаТабличнойЧасти.ТипНоменклатурыУслуга;
		КонецЕсли;
		
		ВыполнитьДействияПослеУдаленияСтрокиРаботы();
		Модифицированность = Истина;
		
	ИначеЕсли Результат="УдалитьОдин" Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.НоменклатураНабора);
		СтруктураОтбора.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.ХарактеристикаНабора);
		ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
		СтрокиНабора = Объект.Работы.НайтиСтроки(СтруктураОтбора);
		Если ДобавленныеСтроки.Количество()=0 ИЛИ ДобавленныеСтроки[0].Количество<=1 Тогда
			Для каждого Стр Из СтрокиНабора Цикл
				Элементы.Работы.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
				ТабличныеЧастиУНФКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Материалы");
				ТабличныеЧастиУНФКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Исполнители");
				Объект.Работы.Удалить(Стр);
			КонецЦикла;
			Для каждого Стр Из ДобавленныеСтроки Цикл
				Объект.ДобавленныеСтроки.Удалить(Стр);
			КонецЦикла;
			Возврат;
		КонецЕсли;
		СтароеКоличество = ДобавленныеСтроки[0].Количество;
		ДобавленныеСтроки[0].Количество = СтароеКоличество-1;
		НаборыКлиентСервер.УдалитьЭкземплярНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора, , Объект.Работы, , СтароеКоличество);
		СтрокиНабора = Объект.Работы.НайтиСтроки(СтруктураОтбора);
		Для каждого Стр Из СтрокиНабора Цикл
			РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", Стр);
		КонецЦикла;
		СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			Элементы.ЗНРаботаМатериалы.Доступность = НЕ СтрокаТабличнойЧасти.ТипНоменклатурыУслуга;
		КонецЕсли;
		
		ВыполнитьДействияПослеУдаленияСтрокиРаботы();
		Модифицированность = Истина;
		
	КонецЕсли; 
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПослеУдаленияСтрокиРаботы()
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныКлиент("УдалениеСтроки");
	
	ОбновитьПодвалФормы();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыХарактеристикаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	// Наборы
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ХарактеристикиНабора(СтрокаТабличнойЧасти.Номенклатура, Текст);
	КонецЕсли;                              
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	// Наборы
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтандартнаяОбработка = Ложь;
		СтруктураОткрытия = Новый Структура;
		СтруктураОткрытия.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураОткрытия.Вставить("РежимВыбора", Истина);
		СтруктураОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
		ОткрытьФорму("РегистрСведений.СоставНаборов.Форма.ФормаРедактированияСостава", СтруктураОткрытия, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	КонецЕсли;                              
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыСуммаСкидкиНаценкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьПроцентСкидки, СброситьФлагСкидкиРассчитаны", Истина, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	//Исполнители
	ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей();
	
КонецПроцедуры // РаботыПроцентСкидкиНаценкиПриИзменении()

&НаКлиенте
Процедура РаботыСпецификацияПриИзменении(Элемент)
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалы

&НаКлиенте
Процедура ЗНМатериалыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ИмяТабличнойЧасти = "Работы";
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтотОбъект, Элемент.Имя) Тогда
		Отказ = Истина;
	КонецЕсли; 
	
	Если Копирование И Не Отказ Тогда
		
		Если РежимОстаткиИРезервы Тогда
			
			СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
			
			Отказ = Истина;
			
			НоваяСтрока = Объект.Материалы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
			
			НоваяСтрока.Резерв = 0;
			
			СтруктураДанные = Новый Структура;
			СтруктураДанные.Вставить("Организация", Компания);
			СтруктураДанные.Вставить("Номенклатура", 	НоваяСтрока.Номенклатура);
			СтруктураДанные.Вставить("Характеристика", 	НоваяСтрока.Характеристика);
			СтруктураДанные.Вставить("Партия", 	НоваяСтрока.Партия);
			СтруктураДанные.Вставить("ИспользоватьХарактеристики", НоваяСтрока.ИспользоватьХарактеристики);
			СтруктураДанные.Вставить("ИспользоватьПартии", НоваяСтрока.ИспользоватьПартии);
			
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные,,,Истина);
			ЗаполнитьНомераСтрокТаблицаМатериалы(Объект.Материалы);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ЗНМатериалыПередНачаломДобавления()

&НаКлиенте
Процедура ЗНМатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	
	ИмяТабличнойЧасти = "Работы";
	Если НоваяСтрока Тогда
		ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗНМатериалыСерииНоменклатуры" Тогда
		ОткрытьПодборМатериалыСерииНоменклатуры();
	КонецЕсли;
	
	Если НоваяСтрока И Копирование Тогда
		СтрокаТабличнойЧасти.КлючСвязи = 0;
		СтрокаТабличнойЧасти.СерииНоменклатуры = "";
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти, "СерииНоменклатурыМатериалы");
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "СтруктурнаяЕдиницаРезерв", "ПоложениеСклада");
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "Ячейка", "ПоложениеСклада");
		ЗаполнитьНомераСтрокТаблицаМатериалы(Объект.Материалы);
	КонецЕсли; 
	
КонецПроцедуры // ЗНМатериалыПриНачалеРедактирования()

&НаКлиенте
Процедура ЗНМатериалыСтранаПроисхожденияПриИзменении(Элемент)
	
	Если КэшЗначений.УчетГТД Тогда
		
		СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения)
			ИЛИ СтрокаТабличнойЧасти.СтранаПроисхождения = КэшЗначений.Россия Тогда
			
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыНомерГТДПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
		
		ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
		Если ДатаГТД > КонецДня(Объект.Дата) Тогда
			
			ТекстСообщения = НСтр("ru ='Внимание: Выбранная ГТД датирована более поздней датой, чем текущий документ'");
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Материалы",
				СтрокаТабличнойЧасти.НомерСтроки, "НомерГТД");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , КонтекстноеПоле);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнители

&НаКлиенте
Процедура ИсполнителиПослеУдаления(Элемент)
	
	ОбновитьТабличнуюЧастьИсполнители();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьТабличнуюЧастьИсполнители();
	
	// Калькуляция
	Если Объект.РасчетКалькуляцииПоДаннымТЧ И НЕ ОтменаРедактирования Тогда
		ОчиститьКалькуляцию();
	КонецЕсли; 
	// Конец Калькуляция
	
КонецПроцедуры // ИсполнителиПриОкончанииРедактирования()

&НаКлиенте
Процедура ИсполнителиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ИмяТабличнойЧасти = "ТаблицаРаботы";
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтотОбъект, Элемент.Имя) Тогда
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры // ИсполнителиПередНачаломДобавления()

&НаКлиенте
Процедура ИсполнителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИмяТабличнойЧасти = "ТаблицаРаботы";
	Если НоваяСтрока Тогда
		ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры // ИсполнителиПриНачалеРедактирования()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗНМатериалы

&НаКлиенте
Процедура ЗНМатериалыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация",		Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура",	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",	СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия",			СтрокаТабличнойЧасти.Партия);
	
	Если СкладВШапке Тогда
		СтруктураДанные.Вставить("Склад", Объект.СтруктурнаяЕдиницаРезерв);
		СтруктураДанные.Вставить("Ячейка", Объект.Ячейка);
	КонецЕсли;
	
	СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанные);
	СтруктураДанные = МатериалыПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Резерв = 0;
	СтрокаТабличнойЧасти.РезервОтгрузка = 0;
	
	СтрокаТабличнойЧасти.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
	
	Если СкладВШапке Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = СтруктураДанные.Склад;
		СтрокаТабличнойЧасти.Ячейка = СтруктураДанные.Ячейка;
	Иначе
		Если Не (ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв) И ПодборНоменклатурыИзСписка) Тогда
			ЗаполнитьСкладВСтрокеТЧ(СтрокаТабличнойЧасти, СтруктураДанные);
		КонецЕсли;
	КонецЕсли;
	
	// Серии номенклатуры
	Для каждого ВыделеннаяСтрока Из Элементы.ЗНМатериалы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.ЗНМатериалы.ДанныеСтроки(ВыделеннаяСтрока);
		СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатурыМатериалы, ТекущиеДанныеСтроки,
			ИспользоватьСерииНоменклатурыОстатки, "КлючСвязиСерииНоменклатуры");
	КонецЦикла;
			
	// Характеристики
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура)
		Тогда
		СтруктураДанныеНоменклатуры = Новый Структура();
		СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
		СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанныеНоменклатуры.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
		
		СтатусПартии = Новый СписокЗначений;
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		
		СтруктураДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии);
		
		ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, СтрокаТабличнойЧасти, СтруктураДанныеНоменклатуры);

		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
		
		СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
		
		Если СтруктураДанные.ИспользоватьХарактеристики Тогда
			Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
				СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
			Иначе
				СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
		КонецЕсли;
		
		//Партии
		СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
		
		Если СтруктураДанные.ИспользоватьПартии Тогда
			Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
				СтруктураВыбораНоменклатуры.Партия = Неопределено;
			Иначе
				СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	// Конец Характеристики и Партии
	
	ПодборНоменклатурыИзСписка = Ложь;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	КонецЕсли;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // ЗНМатериалыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗНМатериалыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
			ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
			
			Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
			КонецЕсли;
			
			СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
			СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
			
		СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ЗаказНаряд", НастройкиФормыВыбораНоменклатуры, Истина, "ЗНМатериалы", ВыбранноеЗначение.СтруктураНастроек);
		КонецЕсли;
		
		Если РазрешитьСкладыВТабличныхЧастях Тогда
			Если Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") 
				Или Объект.СтруктурнаяЕдиницаРезерв = ВыбранноеЗначение.Склад
				Или Не ЗначениеЗаполнено(ВыбранноеЗначение.Склад) Тогда
				
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
				
				Если СтрокаТабличнойЧасти.Свойство("СтруктурнаяЕдиницаРезерв") Тогда
					СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = ВыбранноеЗначение.Склад;
				КонецЕсли;
				
				НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "ЗНМатериалы");
				
			ИначеЕсли ЗначениеЗаполнено(ВыбранноеЗначение.Склад) И Не Объект.СтруктурнаяЕдиницаРезерв = ВыбранноеЗначение.Склад Тогда
				Режим = РежимДиалогаВопрос.ДаНет;
				ПараметрыОповещения = ВыбранноеЗначение;
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаСкладВТЧМатериалы", ЭтотОбъект, ПараметрыОповещения);
				ПоказатьВопрос(Оповещение, НСтр("ru = 'Выбранный склад отличен от склада в шапке. Отобразить склад в табличной части?'"), Режим, 0);
				СтандартнаяОбработка = Ложь;
				Возврат;
			Иначе
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
				НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "ЗНМатериалы");
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "ЗНМатериалы");
		КонецЕсли;
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаСкладВТЧМатериалы(Результат, ПараметрыОповещения) Экспорт
	
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПараметрыОповещения);
		ЗНМатериалыНоменклатураПриИзменении(Неопределено);
		НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "ЗНМатериалы");
		Возврат;
	КонецЕсли;
	
	Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
	
	УправлениеФормой();
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПараметрыОповещения);
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "ЗНМатериалы");
	
	Если СтрокаТабличнойЧасти.Свойство("СтруктурнаяЕдиницаРезерв") Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = ПараметрыОповещения.Склад;
	КонецЕсли;
	
	ЗНМатериалыНоменклатураПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация",			Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура",		СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",		СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия",				СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("СтранаПроисхождения",	СтрокаТабличнойЧасти.СтранаПроисхождения);

	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, СтрокаТабличнойЧасти, СтруктураДанные);

	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
	
	Если РежимОстаткиИРезервы Тогда
		
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,СтрокаТабличнойЧасти.Номенклатура,,Истина);
		
	КонецЕсли;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыПартияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", 				Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура",				СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",				СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", 						СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",	СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
	СтруктураДанные.Вставить("ИспользоватьПартии", 			СтрокаТабличнойЧасти.ИспользоватьПартии);
	СтруктураДанные.Вставить("СтранаПроисхождения",			СтрокаТабличнойЧасти.СтранаПроисхождения);
	
	СтрокаТаблицыПартияПриИзмененииНаСервере(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыКоличествоПриИзменении(Элемент)
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковПоНоменклатуре("ЗНМатериалы");
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы["ЗНМатериалы"].ТекущиеДанные;
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти, "СерииНоменклатурыМатериалы");
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСтруктурнаяЕдиницаРезервЗаказПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Компания);
	СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", 	СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("ИспользоватьХарактеристики", СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
	СтруктураДанные.Вставить("ИспользоватьПартии", СтрокаТабличнойЧасти.ИспользоватьПартии);
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные,,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСтруктурнаяЕдиницаРезервЗаказОчистка(Элемент, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Компания);
	СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", 	СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("ИспользоватьХарактеристики", СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
	СтруктураДанные.Вставить("ИспользоватьПартии", СтрокаТабличнойЧасти.ИспользоватьПартии);
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные,,,Истина);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыСтруктурнаяЕдиницаРезервЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда Возврат КонецЕсли;
	СтруктурнаяЕдиницаРезервЗаказОбработкаВыбора("ЗНМатериалы", ВыбранноеЗначение, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыРезервДляРежимаОстаткиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти, "ПриИзмененииРезерваПроверитьКоличество", Объект, "Материалы");
	
	ЗаполнитьЗначенияОстатковПоНоменклатуре("ЗНМатериалы");
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСтруктурнаяЕдиницаРезервРасходОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = Неопределено Тогда Возврат КонецЕсли;
	СтруктурнаяЕдиницаРезервРасходОбработкаВыбора("ЗНМатериалы", ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыЯчейкаДляРежимаОстаткиПриИзменении(Элемент)
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковПоНоменклатуре("ЗНМатериалы");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериалыРезервДляРежимаОстаткиРасходПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти, "ПриИзмененииРезерваПроверитьКоличество", Объект);
	
	ЗаполнитьЗначенияОстатковПоНоменклатуре("ЗНМатериалы");
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыРезервПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	СтрокаТабличнойЧасти.РезервОтгрузка = СтрокаТабличнойЧасти.Резерв;
	
	НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти, "ПриИзмененииРезерваПроверитьКоличество", Объект, "Материалы");
	
КонецПроцедуры // ЗНМатериалыРезервПриИзменении()

&НаКлиенте
Процедура ЗНМатериалыРезервОтгрузкаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.РезервОтгрузка < СтрокаТабличнойЧасти.Резерв Тогда
		
		СтрокаТабличнойЧасти.Резерв = СтрокаТабличнойЧасти.РезервОтгрузка;
		
	КонецЕсли;
	
КонецПроцедуры // ЗНМатериалыРезервОтгрузкаПриИзменении()

&НаКлиенте
Процедура ЗНМатериалыСерииНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборМатериалыСерииНоменклатуры();
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗНМатериалыСтруктурнаяЕдиницаРезервПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	СтрокаТабличнойЧасти.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв);
	ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(СтрокаТабличнойЧасти.НомерСтроки, "Материалы", "СерииНоменклатурыМатериалы");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(НомерСтроки, ИмяТаблицы = "Запасы", ИмяТаблицыСерии = "СерииНоменклатуры")
	ДополнительныеСвойства = Новый Структура("НомерСтроки", НомерСтроки);
	СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект, ИмяТаблицы, ДополнительныеСвойства, ИмяТаблицыСерии);
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыПередУдалением(Элемент, Отказ)
	
	// Серии номенклатуры
	Для каждого ВыделеннаяСтрока Из Элементы.ЗНМатериалы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.ЗНМатериалы.ДанныеСтроки(ВыделеннаяСтрока);
		СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатурыМатериалы, ТекущиеДанныеСтроки,
			ИспользоватьСерииНоменклатурыОстатки, "КлючСвязиСерииНоменклатуры");
	КонецЦикла;
	
	// Остатки и резервы
	Если РежимОстаткиИРезервы И Не Отказ Тогда
		ТекущиеДанные = Элементы.ЗНМатериалы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
		НоменклатураУдаленнойСтроки = ТекущиеДанные.Номенклатура;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыПослеУдаления(Элемент)
	
	Если РежимОстаткиИРезервы Тогда
		Если ЗначениеЗаполнено(НоменклатураУдаленнойСтроки) Тогда
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,НоменклатураУдаленнойСтроки);
		Иначе
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьНомераСтрокТаблицаМатериалы(Объект.Материалы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Остатки и резервы
	ОбработатьВыборЭлементаТабличнойЧасти(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыЕдиницаИзмеренияПриИзменении(Элемент)
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
	СтрокаТабличнойЧасти = Элементы["ЗНМатериалы"].ТекущиеДанные;
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти, "СерииНоменклатурыМатериалы");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнители

&НаКлиенте
Процедура ИсполнителиСотрудникПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Исполнители.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("НаДату", Объект.Дата);
	СтруктураДанные.Вставить("Организация", Компания);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("Сотрудник", СтрокаТабличнойЧасти.Сотрудник);
	
	СтруктураДанные = ПолучитьДанныеСотрудникаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ВидНачисленияУдержания = СтруктураДанные.ВидНачисленияУдержания;
	СтрокаТабличнойЧасти.РазмерНачисленияУдержания = СтруктураДанные.Сумма;
	СтрокаТабличнойЧасти.КТУ = 1;
	
КонецПроцедуры // ИсполнителиСотрудникПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалыЗаказчика

&НаКлиенте
Процедура ЗНМатериалыЗаказчикаНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалыЗаказчика.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Компания);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("ДатаОбработки", 		Объект.Дата); 
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, СтрокаТабличнойЧасти, СтруктураДанные);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики
		Тогда
		СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
	КонецЕсли;
	
КонецПроцедуры // МатериалыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗНМатериалыЗаказчикаНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.ЗНМатериалыЗаказчика.ТекущиеДанные;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРесурсыПредприятия

&НаКлиенте
Процедура РесурсыПредприятияРесурсПредприятияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Ресурс", ТекущиеДанные.РесурсПредприятия);
	
	ТекущиеДанные.Мощность = 1;
	
	ПланированиеРесурсовУНФКлиент.ОчиститьДанныеСтроки(ТекущиеДанные);
	ЗаполнитьДанныеТаблицыРесурсовНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияСтартПриИзменении(Элемент)
	ПриИзмененииПериода(Истина)
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияСтартВремяПриИзменении(Элемент)
	ПриИзмененииПериода(Истина)
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияДниПриИзменении(Элемент)
	ЗадатьОкончаниеПериода();
	УстановитьДоступностьПовторов();
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияВремяПриИзменении(Элемент)
	ЗадатьОкончаниеПериода();
	УстановитьДоступностьПовторов();
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияФинишПриИзменении(Элемент)
	ПриИзмененииПериода()
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияФинишВремяПриИзменении(Элемент)
	ПриИзмененииПериода()
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияРасписаниеПредставлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ДатаСтроки = День(ТекущиеДанные.Старт);
	
	ПараметрыОповещения = Новый Структура;
	
	Оповещение = Новый ОписаниеОповещения("ПослеОкончанияРедактированияРасписания", ЭтотОбъект, ПараметрыОповещения);
	
	СтруктураПовторов = Новый Структура("ИнтервалПовторения, Пн, Вт, Ср, Чт, Пт, Сб, Вс, ПоследнийДеньМесяца, ДатаПовторения, ДеньНеделиМесяца, ДатаСтроки, ТекДеньНедели, НомерНеделиМесяца, ПериодСтроки, НомерМесяца"
										,ТекущиеДанные.ИнтервалПовторения, ТекущиеДанные.Пн, ТекущиеДанные.Вт, ТекущиеДанные.Ср
										,ТекущиеДанные.Чт,ТекущиеДанные.Пт, ТекущиеДанные.Сб, ТекущиеДанные.Вс, ТекущиеДанные.ПоследнийДеньМесяца
										,ТекущиеДанные.ДатаПовторения, ТекущиеДанные.ДеньНеделиМесяца, ДатаСтроки, ДеньНедели(ТекущиеДанные.Старт), ТекущиеДанные.НомерНеделиМесяца, ТекущиеДанные.Старт, ТекущиеДанные.НомерМесяца);
	
	ПараметрыОткрытия = Новый Структура("Повторяемость, СтруктураПовторов", ТекущиеДанные.ВидПовтора, СтруктураПовторов);
	
	ОткрытьФорму("Обработка.ПланировщикРесурсов.Форма.ФормаРедактированияРасписания",ПараметрыОткрытия, ЭтаФорма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияВидЗавершенияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если ТекущиеДанные.ВидЗавершения = ПредопределенноеЗначение("Перечисление.ВидыЗавершенияПовторовРасписания.ПоДате") Тогда
		ТекущиеДанные.ЗавершатьПосле = НачалоДня(ТекущиеДанные.Финиш+86400);
		ТекущиеДанные.РасшифровкаСчетчика = "";
	ИначеЕсли ТекущиеДанные.ВидЗавершения = ПредопределенноеЗначение("Перечисление.ВидыЗавершенияПовторовРасписания.ПоСчетчику") Тогда
		ТекущиеДанные.ЗавершатьПосле = 1;
		ТекущиеДанные.РасшифровкаСчетчика = "раза";
	Иначе
		ТекущиеДанные.РасшифровкаСчетчика = "";
		ТекущиеДанные.ЗавершатьПосле = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияЗавершатьПослеПриИзменении(Элемент)
		ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если ТекущиеДанные.ВидЗавершения = ПредопределенноеЗначение("Перечисление.ВидыЗавершенияПовторовРасписания.ПоСчетчику")
										И ЗначениеЗаполнено(ТекущиеДанные.ЗавершатьПосле) Тогда 
		
		РасшифровкаСчетчика = ПланированиеРесурсовУНФКлиент.ПредметИсчисления(
		ТекущиеДанные.ЗавершатьПосле,
		НСтр("ru = 'раза'"),
		НСтр("ru = 'раз'"),
		НСтр("ru = 'раз'"),
		"м");
		
		ТекущиеДанные.РасшифровкаСчетчика = РасшифровкаСчетчика;
	Иначе
		ТекущиеДанные.РасшифровкаСчетчика = "";
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.ЗавершатьПосле) = Тип("Дата")
		И ЗначениеЗаполнено(ТекущиеДанные.ЗавершатьПосле)
		И ЗначениеЗаполнено(ТекущиеДанные.Старт)
		И ТекущиеДанные.ЗавершатьПосле<НачалоДня(ТекущиеДанные.Старт)
		Тогда
		ТекущиеДанные.ЗавершатьПосле=НачалоДня(ТекущиеДанные.Старт)
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредоплата

&НаКлиенте
Процедура ПредоплатаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные.ОплатаСертификатом Тогда
		СтандартнаяОбработка = Ложь;
		РедактироватьОплату();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПриИзменении(Элемент)
	
	Элементы.ЗНГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(Объект.СпособЗачетаПредоплаты, Объект.Предоплата);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОплату()
	
	Оповещение = Новый ОписаниеОповещения("РедактироватьОплатуЗавершение", ЭтаФорма);
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("КОплате", ИтогВсего - Объект.Предоплата.Итог("СуммаРасчетов")
									+ Элементы.Предоплата.ТекущиеДанные.СуммаРасчетов);
	СтруктураПараметров.Вставить("ПодарочныйСертификат", Элементы.Предоплата.ТекущиеДанные.Документ);
	СтруктураПараметров.Вставить("НомерСертификата", Элементы.Предоплата.ТекущиеДанные.НомерСертификата);
	СтруктураПараметров.Вставить("Сумма", Элементы.Предоплата.ТекущиеДанные.СуммаРасчетов);
	СтруктураПараметров.Вставить("Документ", Объект.Ссылка);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаОплатыСертификатом", СтруктураПараметров,,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОплатуЗавершение(Результат, Параметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		СтрокаОплаты = Элементы.Предоплата.ТекущиеДанные;
		
		СтрокаОплаты.Документ = Результат.ПодарочныйСертификат;
		СтрокаОплаты.НомерСертификата = Результат.НомерСертификата;
		СтрокаОплаты.СуммаРасчетов = Результат.Сумма;
		
		СтрокаОплаты.Курс = 
			?(СтрокаОплаты.Курс = 0,
				?(Объект.Курс = 0,
				1,
				Объект.Курс),
			СтрокаОплаты.Курс
		);
			
		СтрокаОплаты.Кратность =
			?(СтрокаОплаты.Кратность = 0,
				?(Объект.Кратность = 0,
				1,
				Объект.Кратность),
			СтрокаОплаты.Кратность
		);
			
		СтрокаОплаты.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
			СтрокаОплаты.СуммаРасчетов,
			СтрокаОплаты.Курс,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
			СтрокаОплаты.Кратность,
			?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность)
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
		
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
			?(Объект.Курс = 0,
			1,
			Объект.Курс),
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
			?(Объект.Кратность = 0,
			1,
			Объект.Кратность),
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
		СтрокаТабличнойЧасти.Кратность,
		?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность)
	);

КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКурсПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.ПриИзмененииКурсаВСтрокеПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ПредоплатаКурсНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКратностьПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.ПриИзмененииКурсаВСтрокеПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = 1;
	
	СтрокаТабличнойЧасти.Курс =
		?(СтрокаТабличнойЧасти.СуммаРасчетов = 0,
			1,
			СтрокаТабличнойЧасти.СуммаПлатежа
		  / СтрокаТабличнойЧасти.СуммаРасчетов
		  * Объект.Курс
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНДоговорСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта",Новый Структура("Владелец, Организация, ВидДоговора, ОповеститьОЗаписиДоговора",Объект.Контрагент,Объект.Организация,ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СПокупателем"), Истина), Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПлатежныйКалендарь

&НаКлиенте
Процедура ПлатежныйКалендарьПередУдалением(Элемент, Отказ)
	
	Если Объект.ПлатежныйКалендарь.Количество() = 1 Тогда
		Объект.ЗапланироватьОплату = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныйКалендарьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Объект.ЗапланироватьОплату = Истина;
		ТекущаяСтрока = Элемент.ТекущиеДанные;
		ПроцентОплатыИтог = Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты");
		
		Если ПроцентОплатыИтог > 100 Тогда
			ТекущаяСтрока.ПроцентОплаты = ТекущаяСтрока.ПроцентОплаты - (ПроцентОплатыИтог - 100);
		КонецЕсли;
		
		ТекущаяСтрока.СуммаОплаты = Окр((Объект.Запасы.Итог("Всего") + Объект.Работы.Итог("Всего")) * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
		ТекущаяСтрока.СуммаНДСОплаты = Окр((Объект.Запасы.Итог("СуммаНДС") + Объект.Работы.Итог("СуммаНДС")) * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
		
		Если Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты") = 100 И Объект.ПлатежныйКалендарь.Итог("СуммаОплаты") <> ИтогВсего Тогда
			ОбработатьИтогиПлатежныйКалендарь();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежныйКалендарьПроцентОплатыПриИзменении(Элемент)
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ТекущаяСтрока = Элементы.СписокПлатежныйКалендарь.ТекущиеДанные;
	Иначе
		ТекущаяСтрока = Объект.ПлатежныйКалендарь[0];
	КонецЕсли;
	ПроцентОплатыИтог = Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты");
	
	Если ПроцентОплатыИтог > 100 Тогда
		ТекущаяСтрока.ПроцентОплаты = ТекущаяСтрока.ПроцентОплаты - (ПроцентОплатыИтог - 100);
	КонецЕсли;
	
	ТекущаяСтрока.СуммаОплаты = Окр((Объект.Запасы.Итог("Всего") + Объект.Работы.Итог("Всего")) * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	ТекущаяСтрока.СуммаНДСОплаты = Окр((Объект.Запасы.Итог("СуммаНДС") + Объект.Работы.Итог("СуммаНДС")) * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	
	Если Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты") = 100 И Объект.ПлатежныйКалендарь.Итог("СуммаОплаты") <> ИтогВсего Тогда
		ОбработатьИтогиПлатежныйКалендарь();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежныйКалендарьСуммаОплатыПриИзменении(Элемент)
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ТекущаяСтрока = Элементы.СписокПлатежныйКалендарь.ТекущиеДанные;
	Иначе
		ТекущаяСтрока = Объект.ПлатежныйКалендарь[0];
	КонецЕсли;
	ЗапасыРаботыИтог = Объект.Запасы.Итог("Всего") + Объект.Работы.Итог("Всего");
	ПлатежныйКалендарьИтог = Объект.ПлатежныйКалендарь.Итог("СуммаОплаты");
	
	Если ПлатежныйКалендарьИтог > ЗапасыРаботыИтог Тогда
		ТекущаяСтрока.СуммаОплаты = ТекущаяСтрока.СуммаОплаты - (ПлатежныйКалендарьИтог - ЗапасыРаботыИтог);
	КонецЕсли;
	
	ТекущаяСтрока.ПроцентОплаты = ?(ЗапасыРаботыИтог = 0, 0, Окр(ТекущаяСтрока.СуммаОплаты / ЗапасыРаботыИтог * 100, 2, 1));
	ТекущаяСтрока.СуммаНДСОплаты = Окр((Объект.Запасы.Итог("СуммаНДС") + Объект.Работы.Итог("СуммаНДС")) * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	
	Если Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты") = 100 И Объект.ПлатежныйКалендарь.Итог("СуммаОплаты") <> ИтогВсего Тогда
		ОбработатьИтогиПлатежныйКалендарь();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежныйКалендарьСуммаНДСОплатыПриИзменении(Элемент)
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ТекущаяСтрока = Элементы.СписокПлатежныйКалендарь.ТекущиеДанные;
	Иначе
		ТекущаяСтрока = Объект.ПлатежныйКалендарь[0];
	КонецЕсли;
	
	ЗапасыРаботыИтог = Объект.Запасы.Итог("СуммаНДС") + Объект.Работы.Итог("СуммаНДС");
	ПлатежныйКалендарьИтог = Объект.ПлатежныйКалендарь.Итог("СуммаНДСОплаты");
	
	Если ПлатежныйКалендарьИтог > ЗапасыРаботыИтог Тогда
		ТекущаяСтрока.СуммаНДСОплаты = ТекущаяСтрока.СуммаНДСОплаты - (ПлатежныйКалендарьИтог - ЗапасыРаботыИтог);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьИтогиПлатежныйКалендарь()
	
	ТаблицаРаспределения = Объект.ПлатежныйКалендарь.Выгрузить();
	РасчетыПроведениеДокументов.РаспределитьСуммуПоКолонкеТаблицы(ИтогВсего, ТаблицаРаспределения, "СуммаОплаты",
		"ПроцентОплаты");
	Объект.ПлатежныйКалендарь.Загрузить(ТаблицаРаспределения);
	
КонецПроцедуры
 
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерейтиКЗаказуВСервисе(Команда)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДокументОснование", Объект.Ссылка);
	ПараметрыФормы.Вставить("ОрганизацияБизнесСети", Объект.Организация);
	ПараметрыФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыФормы.Вставить("ИдентификаторЗаказа", ИдентификаторЗаказаНаДоставку);
	ПараметрыФормы.Вставить("РежимМастера", 2);
	СервисДоставкиКлиент.ОткрытьФормуКарточкиЗаказаНаДоставку(ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПечатьНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КонтекстПечати", Объект);
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплату") Тогда
		
		НаборОснований = Новый Массив;
		НаборОснований.Добавить(Объект.ДокументОснование);
		
		ПараметрыОткрытия.Вставить("НаборОснований", НаборОснований);
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияРеквизитовПечати", ЭтотОбъект);
	ОткрытьФорму("Обработка.РеквизитыПечати.Форма.РеквизитыПечатиЗаказНаряд", ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	Модифицированность = Истина;
	
КонецПроцедуры // РедактироватьЦеныИВалюту()

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект,
		Новый Структура("ТекШтрихкод", ТекШтрихкод));
	
	#Если МобильныйКлиент Тогда
	ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду", , , , , , ОбработкаЗавершения);
	#Иначе
	ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
		
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // ПоискПоШтрихкоду()

&НаКлиенте
Процедура ПолучитьВесЗавершение(Параметры) Экспорт
	
	СтрокаТабличнойЧасти = Параметры;
	РассчитатьСуммуВСтрокеТабличнойЧасти(, СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, "Запасы");
	
КонецПроцедуры // ПолучитьВес()

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "Запасы");
	ПодключаемоеОборудованиеУНФКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина, ДополнительныеПараметры);
	
КонецПроцедуры

// Конец ПодключаемоеОборудование

&НаКлиенте
Процедура ЗаполнитьПоСпецификации(Команда)
	
	ТекущаяСтрокаТЧ = Элементы.Работы.ТекущиеДанные;
	
	Если ТекущаяСтрокаТЧ = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана строка основной табличной части.'"), ,
			"Объект.Работы");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрокаТЧ.Спецификация) Тогда
		КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Работы", ТекущаяСтрокаТЧ.НомерСтроки,
			"Спецификация");
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана спецификация'"), , КонтекстноеПоле);
		Возврат;
	КонецЕсли;
	
	РезультатПоиска = Объект.Материалы.НайтиСтроки(Новый Структура("КлючСвязи", Элементы.ЗНМатериалы.ОтборСтрок["КлючСвязи"]));
	
	Если РезультатПоиска.Количество() <> 0 Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоСпецификацииЗавершение", ЭтотОбъект,
			Новый Структура("РезультатПоиска", РезультатПоиска)), НСтр(
			"ru = 'Табличная часть ""Материалы"" будет перезаполнена. Продолжить выполнение операции?'"),
			РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоСпецификацииФрагмент(РезультатПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСпецификацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатПоиска = ДополнительныеПараметры.РезультатПоиска;
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоСпецификацииФрагмент(РезультатПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСпецификацииФрагмент(Знач РезультатПоиска)
	
	Перем ИндексУдаления, СтрокаПоиска, СтрОтбора, ТекущаяСтрокаТЧ;
	
	Модифицированность = Истина;
	
	Для каждого СтрокаПоиска Из РезультатПоиска Цикл
		ИндексУдаления = Объект.Материалы.Индекс(СтрокаПоиска);
		Объект.Материалы.Удалить(ИндексУдаления);
	КонецЦикла;
	
	ТекущаяСтрокаТЧ = Элементы.Работы.ТекущиеДанные;
	ЗаполнитьПоСпецификацииНаСервере(ТекущаяСтрокаТЧ.Спецификация, ТекущаяСтрокаТЧ.Кратность);
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы.ЗНМатериалы.ОтборСтрок["КлючСвязи"]);
	Элементы.ЗНМатериалы.ОтборСтрок = СтрОтбора;
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // ЗаполнитьПоСпецификации()

&НаКлиенте
Процедура ЗаполнитьМатериалыИзВсехСпецификаций(Команда)
	
	Если НЕ Объект.Работы.Количество() > 0 Тогда
		
		Сообщение		= Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Заполните табличную часть ""Работы"".'");
		Сообщение.ПутьКДанным = "Работы";
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.Материалы.Количество() > 0 Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьМатериалыИзВсехСпецификацийЗавершение", ЭтотОбъект), НСтр(
			"ru = 'Для выполнения операции требуется очистить табличную часть ""Материалы"". Продолжить выполнение операции?'"),
			РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьМатериалыИзВсехСпецификацийФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыИзВсехСпецификацийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьМатериалыИзВсехСпецификацийФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыИзВсехСпецификацийФрагмент()
	
	Модифицированность = Истина;
	
	Объект.Материалы.Очистить();
	
	ЗаполнитьМатериалыПоВсемСпецификациямНаСервере();
	
	// Для ВЕБа повторим отбор, что бы корректно отобразить следующие ТЧ
	ИмяТабличнойЧасти = "Работы";
	ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы");
	ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "Исполнители");
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры //ЗаполнитьМатериалыИзВсехСпецификаций()

&НаКлиенте
Процедура ЗаполнитьПоРесурсамДляТекущейРаботы(Команда)
	
	ИмяТабличнойЧасти = "ТаблицаРаботы";
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтотОбъект, ИмяТабличнойЧасти) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаТЧ = Элементы.ТаблицаРаботы.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущаяСтрокаТЧ.Номенклатура) Тогда
		
		КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Работы", ТекущаяСтрокаТЧ.НомерСтроки,
			"Номенклатура");
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана работа'"), , КонтекстноеПоле);
		Возврат;
		
	КонецЕсли;
	
	Если Объект.РесурсыПредприятия.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'В табличной части ""Задействованные ресурсы"" нет записей.'"), ЭтотОбъект, "РесурсыПредприятия");
		Возврат;
		
	КонецЕсли;
	
	РезультатПоиска = Объект.Исполнители.НайтиСтроки(Новый Структура("КлючСвязи",
		Элементы.Исполнители.ОтборСтрок["КлючСвязи"]));
	
	Если РезультатПоиска.Количество() <> 0 Тогда
		
		ТекстВопроса = НСтр(
			"ru = 'Табличная часть ""Исполнители"" для текущей работы будет перезаполнена. Продолжить выполнение операции?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоРесурсамДляТекущейРаботыЗавершение", ЭтотОбъект,
			Новый Структура("РезультатПоиска", РезультатПоиска)), ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоРесурсамДляТекущейРаботыФрагмент(РезультатПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРесурсамДляТекущейРаботыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатПоиска = ДополнительныеПараметры.РезультатПоиска;
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоРесурсамДляТекущейРаботыФрагмент(РезультатПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРесурсамДляТекущейРаботыФрагмент(Знач РезультатПоиска)
	
	Перем ИндексУдаления, ИсполнителиКлючСвязи, СтрокаПоиска, СтрОтбора;
	
	Для каждого СтрокаПоиска Из РезультатПоиска Цикл
		
		ИндексУдаления = Объект.Исполнители.Индекс(СтрокаПоиска);
		Объект.Исполнители.Удалить(ИндексУдаления);
		
	КонецЦикла;
	
	ИсполнителиКлючСвязи = Элементы.Исполнители.ОтборСтрок["КлючСвязи"];
	ЗаполнитьТабличнуюЧастьИсполнителиПоРесурсамНаСервере(ИсполнителиКлючСвязи);
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы.Исполнители.ОтборСтрок["КлючСвязи"]);
	Элементы.Исполнители.ОтборСтрок = СтрОтбора;
	
КонецПроцедуры // ЗаполнитьПоРесурсамДляТекущейРаботы()

&НаКлиенте
Процедура ЗаполнитьПоРесурсамДляВсехРабот(Команда)
	
	ИмяТабличнойЧасти = "ТаблицаРаботы";
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтотОбъект, ИмяТабличнойЧасти) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.РесурсыПредприятия.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'В табличной части ""Задействованные ресурсы"" нет записей'"), , "Объект.РесурсыПредприятия");
		Возврат;
	КонецЕсли;
	
	Если Объект.Исполнители.Количество() <> 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоРесурсамДляВсехРаботЗавершение", ЭтотОбъект), НСтр(
			"ru = 'Табличная часть ""Исполнители"" будет перезаполнена. Продолжить выполнение операции?'"),
			РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоРесурсамДляВсехРаботФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРесурсамДляВсехРаботЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоРесурсамДляВсехРаботФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРесурсамДляВсехРаботФрагмент()
	
	Перем СтрОтбора;
	
	Объект.Исполнители.Очистить();
	
	ЗаполнитьТабличнуюЧастьИсполнителиПоРесурсамНаСервере();
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы.Исполнители.ОтборСтрок["КлючСвязи"]);
	Элементы.Исполнители.ОтборСтрок = СтрОтбора;
	
КонецПроцедуры // ЗаполнитьПоРесурсамДляВсехРабот()

&НаКлиенте
Процедура ЗаполнитьПоБригадамДляТекущейРаботы(Команда)
	
	ИмяТабличнойЧасти = "ТаблицаРаботы";
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтотОбъект, ИмяТабличнойЧасти) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаТЧ = Элементы.ТаблицаРаботы.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущаяСтрокаТЧ.Номенклатура) Тогда
		КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Работы", ТекущаяСтрокаТЧ.НомерСтроки,
			"Номенклатура");
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана работа'"), , КонтекстноеПоле);
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СписокМножественныВыбор", Истина);
	
	ОткрытьФорму("Справочник.Бригады.ФормаВыбора", ПараметрыОткрытия, , , , ,
		Новый ОписаниеОповещения("ЗаполнитьПоБригадамДляТекущейРаботыЗавершение1", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоБригадамДляТекущейРаботыЗавершение1(Результат, ДополнительныеПараметры) Экспорт
	
	МассивБригад = Результат;
	Если МассивБригад = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПоиска = Объект.Исполнители.НайтиСтроки(Новый Структура("КлючСвязи", Элементы.Исполнители.ОтборСтрок["КлючСвязи"]));
	
	Если РезультатПоиска.Количество() <> 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоБригадамДляТекущейРаботыЗавершение", ЭтотОбъект,
			Новый Структура("МассивБригад, РезультатПоиска", МассивБригад, РезультатПоиска)), НСтр(
			"ru = 'Табличная часть ""Исполнители"" для текущей работы будет перезаполнена. Продолжить выполнение операции?'"),
			РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоБригадамДляТекущейРаботыФрагмент(МассивБригад, РезультатПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоБригадамДляТекущейРаботыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	МассивБригад = ДополнительныеПараметры.МассивБригад;
	РезультатПоиска = ДополнительныеПараметры.РезультатПоиска;
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоБригадамДляТекущейРаботыФрагмент(МассивБригад, РезультатПоиска);
	   	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоБригадамДляТекущейРаботыФрагмент(Знач МассивБригад, Знач РезультатПоиска)
	
	Перем ИндексУдаления, ИсполнителиКлючСвязи, СтрокаПоиска, СтрОтбора;
	
	Для каждого СтрокаПоиска Из РезультатПоиска Цикл
		ИндексУдаления = Объект.Исполнители.Индекс(СтрокаПоиска);
		Объект.Исполнители.Удалить(ИндексУдаления);
	КонецЦикла;
	
	ИсполнителиКлючСвязи = Элементы.Исполнители.ОтборСтрок["КлючСвязи"];
	ЗаполнитьТабличнуюЧастьИсполнителиПоБригадамНаСервере(МассивБригад, ИсполнителиКлючСвязи);
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы.Исполнители.ОтборСтрок["КлючСвязи"]);
	Элементы.Исполнители.ОтборСтрок = СтрОтбора;
	
КонецПроцедуры // ЗаполнитьПоБригадамДляТекущейРаботы()

&НаКлиенте
Процедура ЗаполнитьПоБригадамДляВсехРабот(Команда)
	
	ИмяТабличнойЧасти = "ТаблицаРаботы";
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтотОбъект, ИмяТабличнойЧасти) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СписокМножественныВыбор", Истина);
	
	ОткрытьФорму("Справочник.Бригады.ФормаВыбора", ПараметрыОткрытия, , , , ,
		Новый ОписаниеОповещения("ЗаполнитьПоБригадамДляВсехРаботЗавершение1", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоБригадамДляВсехРаботЗавершение1(Результат, ДополнительныеПараметры) Экспорт
	
	МассивБригад = Результат;
	Если МассивБригад = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Исполнители.Количество() <> 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоБригадамДляВсехРаботЗавершение", ЭтотОбъект,
			Новый Структура("МассивБригад", МассивБригад)), НСтр(
			"ru = 'Табличная часть ""Исполнители"" будет перезаполнена. Продолжить выполнение операции?'"),
			РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоБригадамДляВсехРаботФрагмент(МассивБригад);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоБригадамДляВсехРаботЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	МассивБригад = ДополнительныеПараметры.МассивБригад;
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоБригадамДляВсехРаботФрагмент(МассивБригад);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоБригадамДляВсехРаботФрагмент(Знач МассивБригад)
	
	Перем СтрОтбора;
	
	Объект.Исполнители.Очистить();
	
	ЗаполнитьТабличнуюЧастьИсполнителиПоБригадамНаСервере(МассивБригад);
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы.Исполнители.ОтборСтрок["КлючСвязи"]);
	Элементы.Исполнители.ОтборСтрок = СтрОтбора;
	
КонецПроцедуры // ЗаполнитьПоБригадамДляВсехРабот()

&НаКлиенте
Процедура РедактироватьСписком(Команда)
	
	Если Элементы.РедактироватьСписком.Пометка И Объект.ПлатежныйКалендарь.Количество() > 1 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьВозможностьРедактированияСпискомЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru='Все строки кроме первой будут удалены. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет
		);
		Возврат;
	КонецЕсли;
	
	Элементы.РедактироватьСписком.Пометка = НЕ Элементы.РедактироватьСписком.Пометка;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)

	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоПоступлениюВРемонтЗавершение", ЭтотОбъект), НСтр(
		"ru = 'Документ будет полностью перезаполнен по документу-основанию. Продолжить выполнение операции?'"),
		РежимДиалогаВопрос.ДаНет, 0);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлениюВРемонтЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДокументу();
		УстановитьВидимостьДоговора();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказуПокупателя()

&НаКлиенте
Процедура РежимГТДЗапасы(Команда)
	
	Если РежимОстаткиИРезервы Тогда
		Элементы.ОстаткиИРезервы.Пометка = Ложь;
		РежимОстаткиИРезервы = Ложь;
		ОбновитьОтображениеКолонокВРазрезеЗапасов(,Не РежимОстаткиИРезервы);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТДЗапасы", "Пометка", НЕ Элементы.РежимГТДЗапасы.Пометка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТДЗапасыКонтекст", "Пометка", НЕ Элементы.РежимГТДЗапасыКонтекст.Пометка);
	
	ИзменитьРежимРаботаГТД(Элементы.РежимГТДЗапасы.Пометка, "Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура РежимГТДМатериалы(Команда)
	
	Если РежимОстаткиИРезервы Тогда
		Элементы.ОстаткиИРезервы.Пометка = Ложь;
		Элементы.ОстаткиИРезервыМатериалы.Пометка = Ложь;
		РежимОстаткиИРезервы = Ложь;
		ОбновитьОтображениеКолонокВРазрезеЗапасов(,Не РежимОстаткиИРезервы);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗНМатериалыРежимГТДМатериалы", "Пометка", НЕ Элементы.ЗНМатериалыРежимГТДМатериалы.Пометка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗНМатериалыРежимГТДМатериалыКонтекст", "Пометка", НЕ Элементы.ЗНМатериалыРежимГТДМатериалыКонтекст.Пометка);
	
	ИзменитьРежимРаботаГТД(Элементы.ЗНМатериалыРежимГТДМатериалы.Пометка, "ЗНМатериалы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыПодбор(Команда)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана строка основной табличной части.'"), ,
			"Объект.Работы");
		Возврат;
	КонецЕсли;
	
	ИмяТабличнойЧасти = "ЗНМатериалы";
	МаркерПодбора = "Работы";
	
	ПодборДляМатериаловВРаботах = Истина;
	
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры // ЗНМатериалыПодбор()

&НаКлиенте
Процедура ШапкаТабличнаяЧасть(Команда)
	
	ЗаполнениеОбъектовУНФКлиент.ЗаполнитьПустыеПоложения(Объект, "ПоложениеСклада, ПоложениеВидаРабот");
	
	// 1. Формируем структуру параметров для заполнения формы "Настройка документа".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПоложениеСкладаВДокументахОтгрузки", 				Объект.ПоложениеСклада);
	СтруктураПараметров.Вставить("ПоложениеВидаРаботВЗаказНаряде", 					Объект.ПоложениеВидаРабот);
	СтруктураПараметров.Вставить("ИспользоватьТоварыВЗаказНаряде", 					Объект.ИспользоватьТовары);
	СтруктураПараметров.Вставить("ИспользоватьМатериалыЗаказчикаВЗаказНаряде", 		Объект.ИспользоватьМатериалыЗаказчика);
	СтруктураПараметров.Вставить("ИспользоватьМатериалыВЗаказНаряде", 				Объект.ИспользоватьМатериалы);
	
	Если ИспользоватьПодсистемуЗарплата Тогда
		СтруктураПараметров.Вставить("ИспользоватьЗарплатаИсполнителейВЗаказНаряде",	Объект.ИспользоватьЗарплатаИсполнителей);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	СтруктураПараметров.Вставить("Доступность", Новый Структура("ПоложениеСкладаВДокументахОтгрузки", НЕ РежимОстаткиИРезервы));
	
	ОткрытьФорму(
	"ОбщаяФорма.ШапкаТабличнаяЧасть",
	СтруктураПараметров,,,,,
	Новый ОписаниеОповещения("ШапкаТабличнаяЧастьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ШапкаТабличнаяЧастьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// 2. Открываем форму "Настройка документа".
	СтруктураНастройкаДокумента = Результат;
	
	// 3. Применяем изменения, сделанные в форме "Настройка документа".
	Если ТипЗнч(СтруктураНастройкаДокумента) = Тип("Структура") И СтруктураНастройкаДокумента.БылиВнесеныИзменения Тогда
		
		ИзмененоПоложенияВидаРабот = Ложь;
		Если Объект.ПоложениеВидаРабот <> СтруктураНастройкаДокумента.ПоложениеВидаРаботВЗаказНаряде Тогда
			Объект.ПоложениеВидаРабот = СтруктураНастройкаДокумента.ПоложениеВидаРаботВЗаказНаряде;
			ИзмененоПоложенияВидаРабот = Истина;
			ЗаполнениеОбъектовУНФКлиент.ОбработатьИзменениеПоложения(Объект, "Работы", "ВидРабот", "ПоложениеВидаРабот");
		КонецЕсли; 
		Объект.ИспользоватьТовары 				= СтруктураНастройкаДокумента.ИспользоватьТоварыВЗаказНаряде;
		Объект.ИспользоватьМатериалыЗаказчика 	= СтруктураНастройкаДокумента.ИспользоватьМатериалыЗаказчикаВЗаказНаряде;
		Объект.ИспользоватьМатериалы 			= СтруктураНастройкаДокумента.ИспользоватьМатериалыВЗаказНаряде;
		
		Если ИспользоватьПодсистемуЗарплата Тогда
			Объект.ИспользоватьЗарплатаИсполнителей = СтруктураНастройкаДокумента.ИспользоватьЗарплатаИсполнителейВЗаказНаряде;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ДатаОтгрузки) Тогда
			Объект.ДатаОтгрузки = Объект.Финиш;
		КонецЕсли;
		
		ШапкаТабличнаяЧастьЗавершениеНаСервере(СтруктураНастройкаДокумента);
		
		УстановитьВидимостьОтПользовательскихНастроек(Объект, ЭтотОбъект);
		Если ИзмененоПоложенияВидаРабот Тогда
			ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен();
		КонецЕсли;
		
		Если РежимОстаткиИРезервы Тогда
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
		КонецЕсли;
		
		ОбновитьОтображениеКолонокВРазрезеЗапасов(,Не РежимОстаткиИРезервы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ШапкаТабличнаяЧастьЗавершениеНаСервере(СтруктураНастройкаДокумента)
	
	// Положение склада
	Если Объект.ПоложениеСклада<>СтруктураНастройкаДокумента.ПоложениеСкладаВДокументахОтгрузки Тогда
		Объект.ПоложениеСклада = СтруктураНастройкаДокумента.ПоложениеСкладаВДокументахОтгрузки;
		Если НЕ РежимОстаткиИРезервы Тогда
			Если СтруктураНастройкаДокумента.ПоложениеСкладаВДокументахОтгрузки<>ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
				Если Объект.Запасы.Количество() > 0 Тогда
					СтруктураПолей = СтруктурнаяЕдиницаИЯчейкаДляШапки(Объект.Запасы);
					ЗаполнитьЗначенияСвойств(Объект, СтруктураПолей);
				ИначеЕсли Объект.Материалы.Количество() > 0 Тогда
					СтруктураПолей = СтруктурнаяЕдиницаИЯчейкаДляШапки(Объект.Материалы);
					ЗаполнитьЗначенияСвойств(Объект, СтруктураПолей);
				КонецЕсли; 
			КонецЕсли; 
			Для каждого Строка Из Объект.Запасы Цикл
				Если НЕ Строка.ТипНоменклатурыЗапас Тогда
					Продолжить;
				КонецЕсли; 
				Строка.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
				Строка.Ячейка = Объект.Ячейка;
			КонецЦикла;
			Для каждого Строка Из Объект.Материалы Цикл
				Строка.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
				Строка.Ячейка = Объект.Ячейка;
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли; 
		
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьШаблоныПечатиДоговоровКонтрагентов(Команда)
	
	ШаблоныПечатиОфисныхДокументовКлиент.ОткрытьШаблоныПечатиОфисныхДокументов(
	ПредопределенноеЗначение("Перечисление.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаЗаказНаряд"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуСертификатом(Команда)
	
	ТекстПредупреждения = "";
	Если РаботаСПодарочнымиСертификатамиКлиентСервер.ИспользованиеСертификатовЗапрещено(ВалютаРасчетов, НациональнаяВалюта, ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	// Проверим рассчитанность скидок перед добавлением сертификата
	Если ИспользоватьАвтоматическиеСкидки Тогда
		
		Если Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
			РассчитатьСкидкиНаценкиКлиент();
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Рассчитаны автоматические скидки (наценки).'");
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Сообщить();
		Иначе
			Объект.СкидкиРассчитаны = Истина;
			ОбновитьКартинкуАвтоСкидкиПослеЗаписи = Истина;
		КонецЕсли;
		
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьОплатуСертификатомЗавершение", ЭтаФорма);
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("КОплате", ИтогВсего - Объект.Предоплата.Итог("СуммаРасчетов"));
	СтруктураПараметров.Вставить("Документ", Объект.Ссылка);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаОплатыСертификатом", СтруктураПараметров,,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуСертификатомЗавершение(Результат, Параметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		СтрокаОплаты = Объект.Предоплата.Добавить();
		
		СтрокаОплаты.ОплатаСертификатом			= Истина;
		СтрокаОплаты.Документ					= Результат.ПодарочныйСертификат;
		СтрокаОплаты.НомерСертификата			= Результат.НомерСертификата;
		СтрокаОплаты.СуммаРасчетов				= Результат.Сумма;
		СтрокаОплаты.СуммаПогашенияСертификата	= Результат.СуммаПогашенияСертификата;
		
		СтрокаОплаты.Курс = 
			?(СтрокаОплаты.Курс = 0,
				?(Объект.Курс = 0,
				1,
				Объект.Курс),
			СтрокаОплаты.Курс
		);
			
		СтрокаОплаты.Кратность =
			?(СтрокаОплаты.Кратность = 0,
				?(Объект.Кратность = 0,
				1,
				Объект.Кратность),
			СтрокаОплаты.Кратность
		);
			
		СтрокаОплаты.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
			СтрокаОплаты.СуммаРасчетов,
			СтрокаОплаты.Курс,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
			СтрокаОплаты.Кратность,
			?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность)
		);
		
		Элементы.ЗНГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(Объект.СпособЗачетаПредоплаты, Объект.Предоплата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомераГТДЗапасыЗаполнитьПоФактическимОстаткам(Команда)
	
	НомераГТДЗаполнитьПоФактическимОстаткамНаСервере(Истина, "Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура НомераГТДЗапасыПодобрать(Команда)
	
	НомераГТДПодобратьНаСервере(Истина, "Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура НомераГТДМатериалыЗаполнитьПоФактическимОстаткам(Команда)
	
	НомераГТДЗаполнитьПоФактическимОстаткамНаСервере(Истина, "Материалы");
	
КонецПроцедуры

&НаКлиенте
Процедура НомераГТДМатериалыПодобрать(Команда)
	
	НомераГТДПодобратьНаСервере(Истина, "Материалы");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказПокупателя"));
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#Область ИнтеграцияИС

// ИнтеграцияИС

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПолеИнтеграцииИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОбработкаНавигационнойСсылкиВФормеДокументаОснования(
		ЭтотОбъект,
		Объект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры
// Конец ИнтеграцияИС

#КонецОбласти

&НаКлиенте
Процедура Контроль(Команда)
	КонтрольНаСервере();
КонецПроцедуры

&НаСервере
Процедура КонтрольВсеНаСервере()
	ПланированиеРесурсовУНФ.КонтрольПараметровЗагрузкиРесурсов(Истина, Истина, Объект.РесурсыПредприятия, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольВсе(Команда)
	КонтрольВсеНаСервере();
КонецПроцедуры

&НаСервере
Процедура КонтрольГраницНаСервере()
	ПланированиеРесурсовУНФ.КонтрольПараметровЗагрузкиРесурсов(,Истина, Объект.РесурсыПредприятия, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольГраниц(Команда)
	КонтрольГраницНаСервере();
КонецПроцедуры

&НаСервере
Процедура КонтрольНаСервере()
	Если Не Объект.РесурсыПредприятия.Количество() Тогда Возврат КонецЕсли;
	ПланированиеРесурсовУНФ.КонтрольПараметровЗагрузкиРесурсов(Истина,, Объект.РесурсыПредприятия, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПодборРесурсы(Команда)
	
	ПараметрыОткрытия = Новый Структура("ЭтоПодбор, РесурсыПредприятия, ГраницыПланирования, НомерПодсистемы", Истина, Объект.РесурсыПредприятия,,1);
	
	Оповещение = Новый ОписаниеОповещения("ПослеПодбораИзПланировщикаЗавершение", ЭтотОбъект, ПараметрыОткрытия);
	
	ОткрытьФорму("Обработка.ПланировщикРесурсов.Форма.ФормаПланировщика", ПараметрыОткрытия,,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодбораИзПланировщикаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		Объект.РесурсыПредприятия.Очистить();
		
		ВыбранныеРесурсы = Результат;
		
		Для Каждого СтрокаРесурсов Из ВыбранныеРесурсы Цикл
			
			НоваяСтрока = Объект.РесурсыПредприятия.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРесурсов);
			
			НоваяСтрока.РесурсПредприятия = СтрокаРесурсов.Ресурс;
			НоваяСтрока.Старт = СтрокаРесурсов.НачалоПериода;
			НоваяСтрока.Финиш = СтрокаРесурсов.ОкончаниеПериода;
			НоваяСтрока.Мощность = СтрокаРесурсов.Загрузка;
			НоваяСтрока.Длительность = Дата(1,1,1)+(НоваяСтрока.Финиш - НоваяСтрока.Старт); 
			
		КонецЦикла;
		
		ЗаполнитьДанныеТаблицыРесурсовНаФорме();
		
		УстановитьДоступностьПовторов(, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПереместитьВверхСтроку(Команда)
	
	ПереместитьСтрокуТаблицы(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПереместитьВнизСтроку(Команда)
	
	ПереместитьСтрокуТаблицы(1);
	
КонецПроцедуры

// Перемещает выделенные в таблице строки на одну позицию вверх/вниз.
//
// Параметры:
//  Сдвиг	 - Число [-1;1] - Задает направление перемещения строк.
//                            Положительное значение означает, что строка будет передвинута ближе к концу таблицы (вниз),
//                            отрицательное - ближе к началу (вверх).
//
&НаСервере
Процедура ПереместитьСтрокуТаблицы(Направление)
	
	Если Элементы.ЗНМатериалы.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Направление > 0 Тогда
		КрайняяСтрокаИдентификатор = Элементы.ЗНМатериалы.ВыделенныеСтроки[Элементы.ЗНМатериалы.ВыделенныеСтроки.ВГраница()];
	Иначе
		КрайняяСтрокаИдентификатор = Элементы.ЗНМатериалы.ВыделенныеСтроки[0];
	КонецЕсли;
	КрайняяСтрока = Объект.Материалы.НайтиПоИдентификатору(КрайняяСтрокаИдентификатор);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязи", КрайняяСтрока.КлючСвязи);
	СтруктураПоиска.Вставить("НомерСтрокиВнутренний", КрайняяСтрока.НомерСтрокиВнутренний + Направление);
	Строки = Объект.Материалы.НайтиСтроки(СтруктураПоиска);
	СоседняяСтрока = Неопределено;
	Если Строки.Количество() <> 0 Тогда
		СоседняяСтрока = Строки[0];
	КонецЕсли;
	
	Если СоседняяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Направление > 0 Тогда
		Итератор = Элементы.ЗНМатериалы.ВыделенныеСтроки.ВГраница();
		Пока Итератор >= 0 Цикл
			ИдентификаторСтроки = Элементы.ЗНМатериалы.ВыделенныеСтроки[Итератор];
			Строка = Объект.Материалы.НайтиПоИдентификатору(ИдентификаторСтроки);
			Объект.Материалы.Сдвинуть(Объект.Материалы.Индекс(Строка), СоседняяСтрока.НомерСтроки - Строка.НомерСтроки);
			Итератор = Итератор - 1;
		КонецЦикла;
	Иначе
		Для каждого ИдентификаторСтроки Из Элементы.ЗНМатериалы.ВыделенныеСтроки Цикл
			Строка = Объект.Материалы.НайтиПоИдентификатору(ИдентификаторСтроки);
			Объект.Материалы.Сдвинуть(Объект.Материалы.Индекс(Строка), СоседняяСтрока.НомерСтроки - Строка.НомерСтроки);
		КонецЦикла;
	КонецЕсли;
	ЗаполнитьНомераСтрокТаблицаМатериалы(Объект.Материалы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЧека(Команда)
	
	Если Модифицированность Тогда
		Если Объект.Проведен Тогда
			ТекстВопроса = НСтр("ru = 'Для выполнения команды ""Предварительный просмотр""
				|документ будет проведен. Продолжить?'");
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Провести и продолжить'"));
		Иначе
			ТекстВопроса = НСтр("ru = 'Для выполнения команды ""Предварительный просмотр""
				|документ будет записан. Продолжить?'");
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Записать и продолжить'"));
		КонецЕсли;
		Обработчик = Новый ОписаниеОповещения("ПредварительныйПросмотрЧекаПродолжение", ЭтотОбъект);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки);
	Иначе
		ПредварительныйПросмотрЧекаПродолжение(Неопределено, "");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЧекаПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		Если Объект.Проведен Тогда
			РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		Иначе
			РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		КонецЕсли;
		Если Не РезультатЗаписи Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПредварительныйПросмотрЧекаЗавершение", ЭтотОбъект);
		МассивОборудования = Новый Массив;
		МассивОборудования.Добавить("ФискальныйРегистратор");
		МассивОборудования.Добавить("ККТ");
		МассивОборудования.Добавить("ПринтерЧеков");
		МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, МассивОборудования,
				НСтр("ru='Выберите оборудование'"), НСтр("ru='Оборудование не подключено.'"));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЧекаЗавершение(ИдентификаторУстройстваФР, Параметры) Экспорт
	
	Если ИдентификаторУстройстваФР = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР);
	
	Если ОбщиеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры.ДатаВремя = ТекущаяДата();
	
	РабочееМестоКассираКлиент.ПредпросмотрЧекаДенежныхДокументов(ОбщиеПараметры, ЭтотОбъект,
		ИдентификаторУстройстваФР);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОбновитьКалькуляцию(Команда)
	
	ЗаписатьИОткрытьКалькуляцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКалькуляцию(Команда)
	
	ЗаписатьИОткрытьКалькуляцию();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбработатьИзменениеСтруктурнойЕдиницыЗапасовНаСервере()
	
	ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита();
	ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Работы");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов()
	ДополнительныеСвойства = Новый Структура("ИзменениеКлючевыхРеквизитов", Истина);
	СерииНоменклатурыУНФ.ЗаполнитьПризнакиИспользованияСерий(Объект, ДополнительныеСвойства);
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита()
	НоменклатураВДокументахСервер.ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита(ЭтотОбъект,
		"ЗаказНаряд", "Запасы", НастройкиФормыВыбораНоменклатуры);
	НоменклатураВДокументахСервер.ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита(ЭтотОбъект,
		"ЗаказНаряд", "ЗНМатериалы", НастройкиФормыВыбораНоменклатуры);
	НоменклатураВДокументахСервер.ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита(ЭтотОбъект,
		"ЗаказНаряд", "ЗНРаботы", НастройкиФормыВыбораНоменклатуры);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРесурсыИзПланировщика(ВыбранныеРесурсы)
	
	Для Каждого СтрокаРесурсов Из ВыбранныеРесурсы Цикл
		
		
		НоваяСтрока = Объект.РесурсыПредприятия.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРесурсов);
		
		НоваяСтрока.РесурсПредприятия = СтрокаРесурсов.Ресурс;
		НоваяСтрока.Старт = СтрокаРесурсов.НачалоПериода;
		НоваяСтрока.Финиш = СтрокаРесурсов.ОкончаниеПериода;
		НоваяСтрока.Мощность = СтрокаРесурсов.Загрузка;
		НоваяСтрока.Длительность = Дата(1,1,1)+(НоваяСтрока.Финиш - НоваяСтрока.Старт); 
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПовторов(ОткрытиеФормы = Ложь, БылПодбор = Ложь)
	
	Если ОткрытиеФормы ИЛИ БылПодбор Тогда
		
		Для Каждого СтрокаРесурсыПредприятия Из Объект.РесурсыПредприятия Цикл
			
			СтрокаРесурсыПредприятия.РасписаниеПредставление = ?(СтрокаРесурсыПредприятия.РасписаниеПредставление = "", "Не повторять", СтрокаРесурсыПредприятия.РасписаниеПредставление);
			
			Если ЗначениеЗаполнено(СтрокаРесурсыПредприятия.Старт) И ЗначениеЗаполнено(СтрокаРесурсыПредприятия.Финиш) Тогда
				
				СтрокаРесурсыПредприятия.ПериодРазличный = ?(Не НачалоДня(СтрокаРесурсыПредприятия.Старт) = НачалоДня(СтрокаРесурсыПредприятия.Финиш), Истина, Ложь);
				
				Если НачалоДня(СтрокаРесурсыПредприятия.Старт) = НачалоДня(СтрокаРесурсыПредприятия.Финиш) Тогда
					СтрокаРесурсыПредприятия.ПовторыДоступны = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ТекущиеДанные.ПовторыДоступны = Ложь;
	ТекущиеДанные.ПериодРазличный = Ложь;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Старт) И ЗначениеЗаполнено(ТекущиеДанные.Финиш) Тогда
		
		ТекущиеДанные.ПериодРазличный = ?(Не НачалоДня(ТекущиеДанные.Старт) = НачалоДня(ТекущиеДанные.Финиш), Истина, Ложь);
		
		Если НачалоДня(ТекущиеДанные.Старт) = НачалоДня(ТекущиеДанные.Финиш) Тогда
			ТекущиеДанные.ПовторыДоступны = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериода(ЭтоДатаНачала = Ложь)
	
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ОстатокСекундДоКонцаДня = КонецДня(ТекущиеДанные.Финиш) - ТекущиеДанные.Финиш;
	
	Если ОстатокСекундДоКонцаДня = 59 Тогда ТекущиеДанные.Финиш = КонецДня(ТекущиеДанные.Финиш) КонецЕсли;
	Если ТекущиеДанные.Финиш = НачалоДня(ТекущиеДанные.Финиш) Тогда ТекущиеДанные.Финиш = ТекущиеДанные.Финиш-1 КонецЕсли; 
	
	ТекущиеДанные.Старт = ?(Минута(ТекущиеДанные.Старт)%5 = 0, ТекущиеДанные.Старт, ТекущиеДанные.Старт - (Минута(ТекущиеДанные.Старт)%5*60));
	
	ОстатокОтДеления = Минута(ТекущиеДанные.Финиш)%5;
	
	Если Не (ОстатокОтДеления = 0 ИЛИ ТекущиеДанные.Финиш = КонецДня(ТекущиеДанные.Финиш)) Тогда
		
		Если ОстатокОтДеления < 3 Тогда
			ТекущиеДанные.Финиш = ТекущиеДанные.Финиш - (ОстатокОтДеления*60);
		ИначеЕсли (КонецДня(ТекущиеДанные.Финиш) - ТекущиеДанные.Финиш)<300 Тогда
			ТекущиеДанные.Финиш = КонецДня(ТекущиеДанные.Финиш);
		Иначе
			ТекущиеДанные.Финиш = ТекущиеДанные.Финиш + (300 - (ОстатокОтДеления*60));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущиеДанные.Старт > ТекущиеДанные.Финиш Тогда 
		Если ЭтоДатаНачала Тогда 
			ТекущиеДанные.Финиш = ТекущиеДанные.Старт+ТекущиеДанные.КратностьПланирования*60;
		Иначе
			ТекущиеДанные.Финиш = ТекущиеДанные.Старт;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущиеДанные.Старт = ?(Секунда(ТекущиеДанные.Старт) = 0, ТекущиеДанные.Старт, ТекущиеДанные.Старт - Секунда(ТекущиеДанные.Старт));
	
	Если Не (Секунда(ТекущиеДанные.Финиш) = 0 ИЛИ ТекущиеДанные.Финиш = КонецДня(ТекущиеДанные.Финиш)) Тогда  
		ТекущиеДанные.Финиш = ТекущиеДанные.Финиш - Секунда(ТекущиеДанные.Финиш)
	КонецЕсли;
	
	ПланированиеРесурсовУНФКлиент.ПроконтролироватьШагПланирования(ТекущиеДанные,ЭтоДатаНачала,Истина);
	
	УстановитьДоступностьПовторов();
	
	Если ТекущиеДанные.ПовторыДоступны Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ДатаПовторения) Тогда
			ТекущиеДанные.ДатаПовторения = День(ТекущиеДанные.Старт);
		КонецЕсли;
		
		Если ТекущиеДанные.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежемесячно") Тогда
			
			Если ЗначениеЗаполнено(ТекущиеДанные.ДеньНеделиМесяца) Тогда
				
				Если КонецДня(ТекущиеДанные.Старт) = КонецМесяца(ТекущиеДанные.Старт) Тогда
					
					ТекущиеДанные.ДеньНеделиМесяца = 0;
					ТекущиеДанные.НомерНеделиМесяца = 0;
					ТекущиеДанные.ПоследнийДеньМесяца = Истина
					
				Иначе
					
					ТекущиеДанные.ДеньНеделиМесяца = ДеньНедели(ТекущиеДанные.Старт);
					
					ТекНомерНедели = НеделяГода(ТекущиеДанные.Старт)-НеделяГода(НачалоМесяца(ТекущиеДанные.Старт))+1;
					
					Если ЗначениеЗаполнено(ТекущиеДанные.НомерНеделиМесяца) И Не ТекущиеДанные.НомерНеделиМесяца = ТекНомерНедели  Тогда
						ТекущиеДанные.НомерНеделиМесяца = ТекНомерНедели;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекущиеДанные.ПоследнийДеньМесяца И Не КонецДня(ТекущиеДанные.Старт) = КонецМесяца(ТекущиеДанные.Старт) Тогда
				
				ТекущиеДанные.ПоследнийДеньМесяца = Ложь;
				ТекущиеДанные.ДеньНеделиМесяца = ДеньНедели(ТекущиеДанные.Старт);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущиеДанные.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежегодно")
										И ЗначениеЗаполнено(ТекущиеДанные.НомерМесяца) Тогда
			
			ТекущиеДанные.НомерМесяца = Месяц(ТекущиеДанные.Старт);
			
		КонецЕсли;
		
	Иначе
		
		ТекущиеДанные.НомерНеделиМесяца = 0;
		ТекущиеДанные.НомерМесяца = 0;
		ТекущиеДанные.ДатаПовторения = 0;
		ТекущиеДанные.ДеньНеделиМесяца = 0;
		ТекущиеДанные.ПоследнийДеньМесяца = Ложь;
		
		ТекущиеДанные.ВидЗавершения = Неопределено;
		ТекущиеДанные.ЗавершатьПосле = Неопределено;
		
		ТекущиеДанные.ИнтервалПовторения = 0;
		ТекущиеДанные.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.НеПовторять");
		ТекущиеДанные.РасшифровкаСчетчика = "";
		
		ТекущиеДанные.Пн = Ложь;
		ТекущиеДанные.Вт = Ложь;
		ТекущиеДанные.Ср = Ложь;
		ТекущиеДанные.Чт = Ложь;
		ТекущиеДанные.Пт = Ложь;
		ТекущиеДанные.Сб = Ложь;
		ТекущиеДанные.Вс = Ложь;
		
	КонецЕсли;
	
	ТекущиеДанные.Длительность = Дата(1,1,1)+(ТекущиеДанные.Финиш - ТекущиеДанные.Старт);
	
	ЗаполнитьДанныеТаблицыРесурсовНаФорме();
	
	Если ЭтоДатаНачала Тогда
		Если ТипЗнч(ТекущиеДанные.ЗавершатьПосле) = Тип("Дата")
			И ЗначениеЗаполнено(ТекущиеДанные.ЗавершатьПосле)
			И ЗначениеЗаполнено(ТекущиеДанные.Старт)
			И ТекущиеДанные.ЗавершатьПосле<НачалоДня(ТекущиеДанные.Старт)
			Тогда
			ТекущиеДанные.ЗавершатьПосле=НачалоДня(ТекущиеДанные.Старт)
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеТаблицыРесурсовНаФорме()
	
	ДанныеРесурсов = СоответствиеДанныхРесурсов();
	
	Элементы.РесурсыПредприятияПодборРесурсы.Доступность = Не ЭтаФорма.ТолькоПросмотр;
	Элементы.РесурсыПредприятияГруппаПроверить.Доступность = Не ЭтаФорма.ТолькоПросмотр;
	
	Для Каждого СтрокаРесурсов Из Объект.РесурсыПредприятия Цикл
		
		ДанныеРесурса = ДанныеРесурсов.Получить(СтрокаРесурсов.РесурсПредприятия);
		
		Если Не ДанныеРесурса = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаРесурсов, ДанныеРесурса)
		КонецЕсли;
		
		ВыбранныеДниНедели = ПланированиеРесурсовУНФКлиент.ПредставлениеДнейНедели(СтрокаРесурсов);
		
		ДополнениеПоМесяцуГоду = "";
		
		Старт = СтрокаРесурсов.Старт;
		ДеньНеделиМесяца = СтрокаРесурсов.ДеньНеделиМесяца;
		ДатаПовторения = СтрокаРесурсов.ДатаПовторения;
		
		Если СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежемесячно")
			ИЛИ СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежегодно") Тогда
			
			Если ЗначениеЗаполнено(ДатаПовторения) Тогда
				
				ДополнениеПоМесяцуГоду = СтрШаблон(НСтр("ru = ', каждое %1 %2.'"), Строка(ДатаПовторения), ПланированиеРесурсовУНФКлиент.ПолучитьМесяцПоНомеру(СтрокаРесурсов.НомерМесяца));
				
			ИначеЕсли ЗначениеЗаполнено(ДеньНеделиМесяца) Тогда
				
				Если ПланированиеРесурсовУНФКлиент.ЭтоПоследняяНеделяМесяца(Старт) Тогда
					ДополнениеПоМесяцуГоду = СтрШаблон(НСтр("ru = ', в послед. %1 месяца'"), ПланированиеРесурсовУНФКлиент.СоответствиеНомераДнюНедели(ДеньНеделиМесяца))
				Иначе
					НомерНеделиМесяца = НеделяГода(Старт)-НеделяГода(НачалоМесяца(Старт))+1;
					ДополнениеПоМесяцуГоду = СтрШаблон(НСтр("ru = ' %1 каждой %2 недели'"), ПланированиеРесурсовУНФКлиент.СоответствиеНомераДнюНедели(ДеньНеделиМесяца), Строка(НомерНеделиМесяца));
				КонецЕсли;
				
			ИначеЕсли СтрокаРесурсов.ПоследнийДеньМесяца = Истина Тогда
				ДополнениеПоМесяцуГоду = НСтр("ru = ', последний день месяца.'");
			КонецЕсли;
			
		КонецЕсли;
		
		Междометие = ?(СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Еженедельно"), НСтр("ru='каждую'"), НСтр("ru='каждый'"));
		
		Окончание = "";
		
		Если СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Еженедельно") Тогда
			Окончание = НСтр("ru='неделю'")
		ИначеЕсли СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежедневно") Тогда
			Окончание = НСтр("ru='день'")
		ИначеЕсли СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежемесячно") Тогда
			Окончание = НСтр("ru='месяц'")
		ИначеЕсли СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежегодно") Тогда
			Окончание = НСтр("ru='год'")
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаРесурсов.ВидПовтора) 
			И Не СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.НеПовторять") Тогда
			
			РасписаниеПредставление = Строка(СтрокаРесурсов.ВидПовтора)+", "+Междометие+" "+Строка(СтрокаРесурсов.ИнтервалПовторения)+
			" "+ Окончание+ВыбранныеДниНедели+ДополнениеПоМесяцуГоду;
		Иначе
			РасписаниеПредставление = НСтр("ru='Не повторять'");
		КонецЕсли;
		
		СтрокаРесурсов.РасписаниеПредставление = РасписаниеПредставление;
		
		Если СтрокаРесурсов.ВидЗавершения = ПредопределенноеЗначение("Перечисление.ВидыЗавершенияПовторовРасписания.ПоСчетчику")
			И ЗначениеЗаполнено(СтрокаРесурсов.ЗавершатьПосле) Тогда 
			
			РасшифровкаСчетчика = ПланированиеРесурсовУНФКлиент.ПредметИсчисления(
			СтрокаРесурсов.ЗавершатьПосле,
			НСтр("ru = 'раза'"),
			НСтр("ru = 'раз'"),
			НСтр("ru = 'раз'"),
			"м");
			
			СтрокаРесурсов.РасшифровкаСчетчика = РасшифровкаСчетчика;
		Иначе
			СтрокаРесурсов.РасшифровкаСчетчика = "";
		КонецЕсли;
		
	КонецЦикла;
	
	ПланированиеРесурсовУНФКлиент.ЗаполнитьДлительностьВТаблицеВыбранныхРесурсов(Объект.РесурсыПредприятия)
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьОкончаниеПериода()
	
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	СекундыПоВремени = ТекущиеДанные.Время - Дата(1,1,1);
	СекундыПоДням = ?(ЗначениеЗаполнено(ТекущиеДанные.Дни), ТекущиеДанные.Дни*1440*60, 0);
	
	ТекущиеДанные.Финиш = ТекущиеДанные.Старт + СекундыПоДням + СекундыПоВремени;
	ТекущиеДанные.Финиш = ?(Не СекундыПоДням = 0 И ТекущиеДанные.Финиш = НачалоДня(ТекущиеДанные.Финиш)
										, ТекущиеДанные.Финиш - 1, ТекущиеДанные.Финиш);
	
	ПланированиеРесурсовУНФКлиент.ПроконтролироватьШагПланирования(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОкончанияРедактированияРасписания(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения = Неопределено Тогда Возврат КонецЕсли;
	
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ВидПовтора = РезультатВыполнения.ВидПовтора;
	
	ТекущиеДанные.ВидПовтора = ВидПовтора;
	
	Если ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.НеПовторять") Тогда
		 ПланированиеРесурсовУНФКлиент.ОчиститьДанныеСтроки(ТекущиеДанные, Ложь);
		 ЗаполнитьДанныеТаблицыРесурсовНаФорме();
		 Возврат;
	 КонецЕсли;
	
	ТекущиеДанные.ИнтервалПовторения = РезультатВыполнения.ИнтервалПовторения;
	ТекущиеДанные.Пн = РезультатВыполнения.Пн;
	ТекущиеДанные.Вт = РезультатВыполнения.Вт;
	ТекущиеДанные.Ср = РезультатВыполнения.Ср;
	ТекущиеДанные.Чт = РезультатВыполнения.Чт;
	ТекущиеДанные.Пт = РезультатВыполнения.Пт;
	ТекущиеДанные.Сб = РезультатВыполнения.Сб;
	ТекущиеДанные.Вс = РезультатВыполнения.Вс;
	ТекущиеДанные.ПоследнийДеньМесяца = РезультатВыполнения.ПоследнийДеньМесяца;
	ТекущиеДанные.ДатаПовторения = РезультатВыполнения.ДатаПовторения;
	ТекущиеДанные.ДеньНеделиМесяца = РезультатВыполнения.ДеньНеделиМесяца;
	ТекущиеДанные.НомерНеделиМесяца = РезультатВыполнения.НомерНеделиМесяца;
	ТекущиеДанные.НомерМесяца = РезультатВыполнения.НомерМесяца;
	
	ЗаполнитьДанныеТаблицыРесурсовНаФорме();
	
КонецПроцедуры

&НаСервере
Функция СоответствиеДанныхРесурсов()
	
	СвернутаяТаблицаРесурсов = Объект.РесурсыПредприятия.Выгрузить(,"РесурсПредприятия");
	СвернутаяТаблицаРесурсов.Свернуть("РесурсПредприятия");
	
	СоответствиеВозврата = Новый Соответствие();
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	ТаблицаДанных.Колонки.Добавить("РесурсПредприятия");
	ТаблицаДанных.Колонки.Добавить("КонтролироватьШаг");
	ТаблицаДанных.Колонки.Добавить("КратностьПланирования");
	
	Для каждого СтрокаТаблицы Из СвернутаяТаблицаРесурсов Цикл
		
		РесурсПредприятия = СтрокаТаблицы.РесурсПредприятия;
		
		СтруктураДанных = Новый Структура("КонтролироватьШаг,КратностьПланирования"
											,РесурсПредприятия.КонтролироватьШагИнтервалаВДокументах, РесурсПредприятия.КратностьПланирования);
		
		СоответствиеВозврата.Вставить(РесурсПредприятия, СтруктураДанных);
		
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзмененияРеквизитовПечати(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ПечатьДокументовУНФКлиент.ОбновитьЗначенияРеквизитовПечати(ЭтотОбъект, Результат.ИзмененныеРеквизиты);
		
		Если Результат.Свойство("Команда") Тогда
			
			Подключаемый_ВыполнитьКоманду(Результат.Команда);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОснованиеПечатиНаКлиенте(ДоговорПередИзменением, ДанныеНовогоДоговора)
	
	ЗаголовокПредставления = "";
	Если КэшЗначений.ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати Тогда
		
		ЗаголовокПредставления = НСтр("ru = 'Договор: '");
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ОснованиеПечатиСсылка)
		И ПустаяСтрока(Объект.ОснованиеПечати) Тогда
		
		Объект.ОснованиеПечатиСсылка = Объект.Договор;
		Объект.ОснованиеПечати = ЗаголовокПредставления + Строка(ДанныеНовогоДоговора.НаименованиеДоговора);
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ОснованиеПечатиСсылка)
		И Объект.ОснованиеПечатиСсылка = ДоговорПередИзменением Тогда
		
		Объект.ОснованиеПечатиСсылка = Объект.Договор;
		Объект.ОснованиеПечати = ЗаголовокПредставления + Строка(ДанныеНовогоДоговора.НаименованиеДоговора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументу(РеквизитОснование = "ДокументОснование")
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(Объект[РеквизитОснование]);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	ЗаполнитьПараметрыРасчетовСКонтрагентом();
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ДействияПослеЧтенияОбъекта();
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,Истина);
	
КонецПроцедуры // ЗаполнитьПоДокументу()

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбораБанковскогоСчета(Договор, Организация, НациональнаяВалюта)
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "ВалютаРасчетов, РасчетыВУсловныхЕдиницах");
	
	СписокВалют = Новый СписокЗначений;
	СписокВалют.Добавить(РеквизитыДоговора.ВалютаРасчетов);
	СписокВалют.Добавить(НациональнаяВалюта);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РасчетыВУсловныхЕдиницах", РеквизитыДоговора.РасчетыВУсловныхЕдиницах);
	ПараметрыФормы.Вставить("Владелец", Организация);
	ПараметрыФормы.Вставить("СписокВалют", СписокВалют);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПредоплату(ТекущийОбъект)
	
	ТекущийОбъект.ЗаполнитьПредоплату();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеВидаЦенИВалютыРасчетов(ПараметрыДокумента)
	
	ВалютаРасчетовПередИзменением = ПараметрыДокумента.ВалютаРасчетовПередИзменением;
	ДанныеДоговора = ПараметрыДокумента.ДанныеДоговора;
	ВопросВидЦен = ПараметрыДокумента.ВопросВидЦен;
	ОткрытьФормуЦеныИВалюты = ПараметрыДокумента.ОткрытьФормуЦеныИВалюты;
	ИзменилсяВидЦен = ПараметрыДокумента.ИзменилсяВидЦен;
	ИзменилсяВидСкидки = ПараметрыДокумента.ИзменилсяВидСкидки;
	Если ПараметрыДокумента.Свойство("ОчиститьДисконтнуюКарту") Тогда
		ОчиститьДисконтнуюКарту = ПараметрыДокумента.ОчиститьДисконтнуюКарту;
	Иначе
		ОчиститьДисконтнуюКарту = Ложь;
	КонецЕсли;
	ПересчетНеобходимПоЗапасам = ПараметрыДокумента.ПересчетНеобходимПоЗапасам;
	ПересчетНеобходимПоРаботам = ПараметрыДокумента.ПересчетНеобходимПоРаботам;
	
	Если НЕ ДанныеДоговора.СуммаВключаетНДС = Неопределено Тогда
		
		Объект.СуммаВключаетНДС = ДанныеДоговора.СуммаВключаетНДС;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		
		Объект.Курс      = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс);
		Объект.Кратность = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность);
		
	КонецЕсли;
	
	Если ИзменилсяВидЦен Тогда
		
		Объект.ВидЦен = ДанныеДоговора.ВидЦен;
		
	КонецЕсли; 
	
	Если ИзменилсяВидСкидки Тогда
		
		Объект.ВидСкидкиНаценки = ДанныеДоговора.ВидСкидкиНаценки;
		
	КонецЕсли;
	
	Если ОчиститьДисконтнуюКарту Тогда
		
		Объект.ДисконтнаяКарта = ПредопределенноеЗначение("Справочник.ДисконтныеКарты.ПустаяСсылка");
		Объект.ПроцентСкидкиПоДисконтнойКарте = 0;
		
		ДисконтныеКартыУНФКлиент.ПоказатьПользователюИнформациюОбОчисткеДКИРучныхСкидок();
		
	КонецЕсли;
	
	Если Объект.ВалютаДокумента <> ДанныеДоговора.ВалютаРасчетов Тогда
		
		Объект.БанковскийСчет = Неопределено;
		
	КонецЕсли;
	Объект.ВалютаДокумента = ДанныеДоговора.ВалютаРасчетов;
	
	Если ОткрытьФормуЦеныИВалюты Тогда
		
		ТекстПредупреждения = "";
		Если ИзменилсяВидЦен ИЛИ ИзменилсяВидСкидки Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Договор с контрагентом предусматривает условия цен и скидок, 
									|отличные от установленных в документе. 
									|Возможно, необходимо перезаполнить цены.'") + Символы.ПС + Символы.ПС;
			
		КонецЕсли;
		
		ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом. 
										|Необходимо проверить валюту документа.'");
		
		ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина, (ИзменилсяВидЦен ИЛИ ИзменилсяВидСкидки), ТекстПредупреждения);
		
	ИначеЕсли ВопросВидЦен Тогда
		
		СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте",
			Объект.ВидЦен,
			Объект.ВидСкидкиНаценки,
			Объект.ВалютаДокумента,
			ВалютаРасчетов,
			Объект.Курс,
			КурсНациональнаяВалюта,
			Объект.СуммаВключаетНДС,
			УчетВалютныхОпераций,
			Объект.НалогообложениеНДС, 
			Объект.СпециальныйНалоговыйРежим,
			Объект.ДисконтнаяКарта, 
			Объект.ПроцентСкидкиПоДисконтнойКарте);
		
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
		Если (ПересчетНеобходимПоЗапасам И Объект.Запасы.Количество() > 0)
			ИЛИ (ПересчетНеобходимПоРаботам И Объект.Работы.Количество() > 0) Тогда
			
			ТекстВопроса = НСтр("ru = 'Договор с контрагентом предусматривает условия цен и скидок, отличные от установленных в документе. 
										|Пересчитать документ в соответствии с договором?'");
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора", ЭтотОбъект, ПараметрыДокумента);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	Иначе
		
		СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте",
			Объект.ВидЦен,
			Объект.ВидСкидкиНаценки,
			Объект.ВалютаДокумента,
			ВалютаРасчетов,
			Объект.Курс,
			КурсНациональнаяВалюта,
			Объект.СуммаВключаетНДС,
			УчетВалютныхОпераций,
			Объект.НалогообложениеНДС,
			Объект.СпециальныйНалоговыйРежим,
			Объект.ДисконтнаяКарта, 
			Объект.ПроцентСкидкиПоДисконтнойКарте);
		
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеВидаЦенИВалютыРасчетов()

&НаКлиенте
Процедура ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей()
	
	ТекущаяСтрокаРабот = Элементы.Работы.ТекущиеДанные; 
	Если ТекущаяСтрокаРабот <> Неопределено Тогда
		
		ОтразитьИзмененияПоТаблицеИсполнителей(ТекущаяСтрокаРабот.КлючСвязи);
		
	КонецЕсли;
	
КонецПроцедуры // ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей()

&НаКлиенте
Процедура ОбновитьТабличнуюЧастьИсполнители()
	
	ТекущаяСтрокаИсполнители = Элементы.Исполнители.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрокаИсполнители = Неопределено 
		И ЗначениеЗаполнено(ТекущаяСтрокаИсполнители.КлючСвязи) Тогда
		
		ОтразитьИзмененияПоТаблицеИсполнителей(ТекущаяСтрокаИсполнители.КлючСвязи);
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьТабличнуюЧастьИсполнители()

&НаСервере
Процедура ПересчитатьСуммуНачисленийПоУказаннойРаботе(КлючСвязи)
	
	// Без ключа нет возможности отработать корректно...
	Если НЕ ЗначениеЗаполнено(КлючСвязи) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МассивИсполнителей	= Документы.ЗаказПокупателя.ПолучитьСтрокиИсполнителейПоКлючуСвязи(Объект.Исполнители, КлючСвязи);
	
	// Если нет исполнителей, пересчитывать не чего...
	Если МассивИсполнителей.Количество() = 0 Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	ТекущаяРабота		= Документы.ЗаказПокупателя.ПолучитьСтрокуРаботыПоКлючуСвязи(Объект.Работы, КлючСвязи);
	СуммаКТУ			= Документы.ЗаказПокупателя.ВычислитьСуммуКТУПоКлючуСвязи(Объект.Исполнители, КлючСвязи);
	КоэффициентыРаботы	= ТекущаяРабота.Количество * ТекущаяРабота.Коэффициент * ТекущаяРабота.Кратность;
	СуммаРаботы			= ТекущаяРабота.Сумма;
	
	Для каждого СтрокаИсполнителя Из МассивИсполнителей Цикл
		
		СтрокаИсполнителя.СуммаНачисления = 
			Документы.ЗаказПокупателя.РассчитатьЗначениеНачисленияПоСтрокеНаСервере(
				КоэффициентыРаботы, 
				СуммаРаботы, 
				СтрокаИсполнителя.КТУ, 
				СуммаКТУ, 
				СтрокаИсполнителя.ВидНачисленияУдержания, 
				СтрокаИсполнителя.РазмерНачисленияУдержания);
		
	КонецЦикла;
	
КонецПроцедуры // ПересчитатьСуммуНачисленияПоУказаннойРаботе()

&НаСервере
Процедура ОтразитьИзмененияПоТаблицеИсполнителей(КлючСвязи = Неопределено)
	
	Если КлючСвязи <> Неопределено Тогда
		
		ПересчитатьСуммуНачисленийПоУказаннойРаботе(КлючСвязи);
		
	Иначе
		
		// Используется при обновлении/заполнении по всем работам.
		МассивРабот = Объект.Работы.НайтиСтроки(Новый Структура("ТипНоменклатурыУслуга", Ложь));
		Для каждого СтрокаРаботы Из МассивРабот Цикл
			
			ПересчитатьСуммуНачисленийПоУказаннойРаботе(СтрокаРаботы.КлючСвязи);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОтразитьИзмененияКТУ()

&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением, ВалютаРасчетов)
	
	РазностьДат = ДокументыУНФ.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", ВалютаРасчетов));
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность
	);
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервере
Функция ПолучитьДанныеОрганизацияПриИзменении()
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", Константы.УчетПоКомпании.Компания(Объект.Организация));
	СтруктураДанные.Вставить("БанковскийСчет", Объект.Организация.БанковскийСчетПоУмолчанию);
	СтруктураДанные.Вставить("БанковскийСчетВалютаДенежныхСредств", Объект.Организация.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств);
	// Касса по умолчанию
	Справочники.Организации.ДополнитьВалютуИКассуПоУмолчанию(СтруктураДанные, Объект);
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	СтруктураДанные.Вставить("ПодписьРуководителя", Объект.Организация.ПодписьРуководителя);
	СтруктураДанные.Вставить("ПодписьГлавногоБухгалтера", Объект.Организация.ПодписьГлавногоБухгалтера);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

&НаСервере
Процедура СтрокаТаблицыПартияПриИзмененииНаСервере(СтруктураДанные)
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанные.СтранаПроисхождения) Тогда
		
		СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("НомерГТД", Неопределено);
	
	ГрузовыеТаможенныеДекларацииСервер.АвтоматическийПодборВРеализацииНомераГТД(СтруктураДанные);
	
	Если РежимОстаткиИРезервы Тогда
		
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(, СтруктураДанные.Номенклатура, , Истина)
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Наборы
	Если НЕ СтруктураДанные.Свойство("ЕдиницаИзмерения") И ТипЗнч(СтруктураДанные.Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	КонецЕсли; 
	Если НЕ СтруктураДанные.Свойство("Коэффициент") Тогда
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", 1);
		КонецЕсли; 
	КонецЕсли;
	// Конец Наборы
	
	НоменклатураСтроки = СтруктураДанные.Номенклатура;
	
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	СтруктураДанные.Вставить("НомерГТД", Неопределено);
	СтруктураДанные.Вставить("ФиксированнаяСтоимость", СтруктураДанные.Номенклатура.ФиксированнаяСтоимость);
	
	СтруктураДанные.Вставить("ЭтоУслуга", СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	СтруктураДанные.Вставить("ЭтоЗапас", (СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
									ИЛИ СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")));
	
	Если СтруктураДанные.Свойство("НормаВремени") Тогда
		СтруктураДанные.НормаВремени = ЦенообразованиеСервер.ПолучитьНормуВремениРаботы(СтруктураДанные);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС")
		И НЕ СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ВидСтавкиНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки), СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки), СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("Характеристика") Тогда
		СтруктураДанные.Вставить("Спецификация", Справочники.Спецификации.СпецификацияПоУмолчанию(СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
	Иначе
		СтруктураДанные.Вставить("Спецификация", Справочники.Спецификации.СпецификацияПоУмолчанию(СтруктураДанные.Номенклатура));
	КонецЕсли;
	
	// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",Ложь);
	
	Если ЗначениеЗаполнено(НоменклатураСтроки) И НоменклатураСтроки.ИспользоватьХарактеристики
		Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(НоменклатураСтроки);
		
		Если Не ЗначенияПоУмолчанию = Неопределено
			Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика",ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика), СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
		
		СтруктураДанные.ИспользоватьХарактеристики = Истина;
		СтруктураДанные.ПроверятьЗаполнениеХарактеристики = НоменклатураСтроки.ПроверятьЗаполнениеХарактеристики;
	КонецЕсли; 
	// Конец Характеристики
	
	Если СтруктураДанные.Свойство("Цена") И ЗначениеЗаполнено(СтруктураДанные.Цена) Тогда
		// При подборе наборов расчет цены не требуется - используется цена, указанная в подборе
	ИначеЕсли СтруктураДанные.Свойство("ВидЦен") Тогда
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		КонецЕсли;
		
		Если СтруктураДанные.Свойство("ВидРабот") Тогда
		
			Если СтруктураДанные.Номенклатура.ТипНоменклатуры <> ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") 
				ИЛИ СтруктураДанные.Номенклатура.ФиксированнаяСтоимость 
				ИЛИ СтруктураДанные.Номенклатура.ЭтоНабор Тогда
				
				Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
				СтруктураДанные.Вставить("Цена", Цена);
				СтруктураДанные.Вставить("МинимальнаяЦена", ЦенообразованиеСервер.ПолучитьМинимальнуюЦенуНоменклатуры(СтруктураДанные));   
				
			Иначе
				
				СтруктураДляВидаРабот = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанные);
				
				СтруктураДляВидаРабот.Номенклатура = СтруктураДанные.ВидРабот;
				СтруктураДляВидаРабот.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				
				Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДляВидаРабот);
				СтруктураДанные.Вставить("Цена", Цена);  
				СтруктураДанные.Вставить("МинимальнаяЦена", ЦенообразованиеСервер.ПолучитьМинимальнуюЦенуНоменклатуры(СтруктураДляВидаРабот));

				
			КонецЕсли;
		
		Иначе
			
			Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);			
			СтруктураДанные.Вставить("Цена", Цена);                                         
			СтруктураДанные.Вставить("МинимальнаяЦена", ЦенообразованиеСервер.ПолучитьМинимальнуюЦенуНоменклатуры(СтруктураДанные));
			
		КонецЕсли;
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ВидСкидкиНаценки")
		И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	Иначе
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ПроцентСкидкиПоДисконтнойКарте") 
		И ЗначениеЗаполнено(СтруктураДанные.ДисконтнаяКарта) Тогда
		ТекПроцент = СтруктураДанные.ПроцентСкидкиНаценки;
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", ТекПроцент + СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте);
	КонецЕсли;
	
	// Наборы
	НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(СтруктураДанные);
	// Конец Наборы
	
	//Партии
	СтруктураДанные.Вставить("ИспользоватьПартии",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеПартий",Ложь);
	Если ЗначениеЗаполнено(НоменклатураСтроки) И НоменклатураСтроки.ИспользоватьПартии
		Тогда
		
		Если СтруктураДанные.Свойство("СтатусПартии")
			Тогда
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(НоменклатураСтроки,СтруктураДанные.СтатусПартии);
		Иначе
			Если Не СтруктураДанные.Свойство("ВидОперации")
				Тогда
				ВидОперации = Неопределено
			Иначе
				ВидОперации = СтруктураДанные.ВидОперации
			КонецЕсли;
			
			СтатусПартии = НоменклатураВДокументахСервер.СоответствиеВидаОперацииИлиХозОперацииСтатусуПартии(, ВидОперации);
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(НоменклатураСтроки,СтатусПартии);
		КонецЕсли;
		
		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		
		Если Не ЗначенияПартииПоУмолчанию = Неопределено
			Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;
		
		Если НЕ СтруктураДанные.Свойство("Партия") Тогда
			СтруктураДанные.Вставить("Партия",ПартияПоУмолчанию);
		Иначе
			СтруктураДанные.Партия = ?(ЗначениеЗаполнено(СтруктураДанные.Партия), СтруктураДанные.Партия, ПартияПоУмолчанию);
		КонецЕсли;
		
		СтруктураДанные.ПроверятьЗаполнениеПартий = НоменклатураСтроки.ПроверятьЗаполнениеПартий;
		СтруктураДанные.ИспользоватьПартии = Истина;
		
	КонецЕсли;
	// Конец Партии
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьСерииНоменклатуры Тогда
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(СтруктураДанные));
	Иначе
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", 0);
	КонецЕсли;
	
	Если Не СтруктураДанные.Свойство("Склад") Тогда
		СтруктураДанные.Вставить("Склад", СтруктураДанные.Номенклатура.Склад);
		СтруктураДанные.Вставить("Ячейка", СтруктураДанные.Номенклатура.Ячейка);
	КонецЕсли;
	
	ГрузовыеТаможенныеДекларацииСервер.АвтоматическийПодборВРеализацииНомераГТД(СтруктураДанные);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", 1);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		КонецЕсли;
		
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли; 
	
	СтруктураДанные.Вставить("МинимальнаяЦена", ЦенообразованиеСервер.ПолучитьМинимальнуюЦенуНоменклатуры(СтруктураДанные));
	
	СтруктураДанные.Вставить("Спецификация", Справочники.Спецификации.СпецификацияПоУмолчанию(СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
	
	Если СтруктураДанные.Свойство("НормаВремени") Тогда
		СтруктураДанные.НормаВремени = ЦенообразованиеСервер.ПолучитьНормуВремениРаботы(СтруктураДанные);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанные.СтранаПроисхождения) Тогда
		
		СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("НомерГТД", Неопределено);
	
	ГрузовыеТаможенныеДекларацииСервер.АвтоматическийПодборВРеализацииНомераГТД(СтруктураДанные);
	
	// Наборы
	НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(СтруктураДанные);
	// Конец Наборы
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Дата, ВалютаДокумента, Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация, Объект.ВидОперации);
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"Договор",
		ДоговорПоУмолчанию
	);
	
	СтруктураДанные.Вставить(
		"НаименованиеДоговора",
		ДоговорПоУмолчанию.Наименование
	);
	
	СтруктураДанные.Вставить(
		"КонтактноеЛицоПодписант",
		Контрагент.КонтактноеЛицоПодписант
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорПоУмолчанию.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ДоговорПоУмолчанию.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
		"РасчетыВУсловныхЕдиницах",
		ДоговорПоУмолчанию.РасчетыВУсловныхЕдиницах
	);
	
	СтруктураДанные.Вставить(
		"ВидСкидкиНаценки",
		ДоговорПоУмолчанию.ВидСкидкиНаценки
	);
	
	СтруктураДанные.Вставить(
		"ВидЦен",
		ДоговорПоУмолчанию.ВидЦен
	);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНДС",
		?(ЗначениеЗаполнено(ДоговорПоУмолчанию.ВидЦен), ДоговорПоУмолчанию.ВидЦен.ЦенаВключаетНДС, Неопределено)
	);
	
	СтруктураДанные.Вставить(
		"СпособЗачетаПредоплаты",
		РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(ДоговорПоУмолчанию, Контрагент, Истина)
	);
	
	Если ПолучитьФункциональнуюОпцию("УчетПоПроектам") И ЗначениеЗаполнено(ДоговорПоУмолчанию) И НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
		СтруктураДанные.Вставить("Проект", Справочники.Проекты.ПолучитьПроектПоДоговору(ДоговорПоУмолчанию));
	КонецЕсли;
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ДанныеКИКонтрагента = Справочники.Контрагенты.ДанныеКИКонтрагентаДляВыбораНаФорме(Контрагент, Элементы,
			ПоляКИДляОтправкиЧека());
		ЗаполнитьПоляКИДляОтправкиЧекаПоУмолчанию(ДанныеКИКонтрагента);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Дата, ВалютаДокумента, Договор, Контрагент)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"НаименованиеДоговора",
		Договор.Наименование
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		Договор.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
		"ВидЦен",
		Договор.ВидЦен
	);
	
	СтруктураДанные.Вставить(
		"ВидСкидкиНаценки",
		Договор.ВидСкидкиНаценки
	);
	
	СтруктураДанные.Вставить(
		"РасчетыВУсловныхЕдиницах",
		Договор.РасчетыВУсловныхЕдиницах
	);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНДС",
		?(ЗначениеЗаполнено(Договор.ВидЦен), Договор.ВидЦен.ЦенаВключаетНДС, Неопределено)
	);
	
	СтруктураДанные.Вставить(
		"СпособЗачетаПредоплаты",
		РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(Договор, Контрагент, Истина)
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаСервереБезКонтекста
Функция МатериалыПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	СтруктураДанные.Вставить("НомерГТД", Неопределено);
	
	Если Не СтруктураДанные.Свойство("Склад") Тогда
		СтруктураДанные.Вставить("Склад", СтруктураДанные.Номенклатура.Склад);
		СтруктураДанные.Вставить("Ячейка", СтруктураДанные.Номенклатура.Ячейка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьСерииНоменклатуры Тогда
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(СтруктураДанные));
	Иначе
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", 0);
	КонецЕсли;
	
	ГрузовыеТаможенныеДекларацииСервер.АвтоматическийПодборВРеализацииНомераГТД(СтруктураДанные);
	
	Возврат СтруктураДанные;
	
КонецФункции // МатериалыПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеСотрудникаПриИзменении(СтруктураДанные)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлановыеНачисленияИУдержанияСрезПоследних.Сотрудник КАК Сотрудник,
	|	МИНИМУМ(ПлановыеНачисленияИУдержанияСрезПоследних.ВидНачисленияУдержания) КАК ВидНачисленияУдержания
	|ПОМЕСТИТЬ ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияИУдержания.СрезПоследних(
	|			&НаДату,
	|			Организация = &Организация
	|				И Актуальность
	|				И Сотрудник = &Сотрудник
	|				И ВидНачисленияУдержания В (ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплата), ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплатаПроцент), ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.ФиксированнаяСумма))) КАК ПлановыеНачисленияИУдержанияСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановыеНачисленияИУдержанияСрезПоследних.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.Сотрудник КАК Сотрудник,
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
	|	ПлановыеНачисленияИУдержанияСрезПоследних.Сумма * КурсВалютыНачисления.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыНачисления.Кратность) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний КАК ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияИУдержания.СрезПоследних(
	|				&НаДату,
	|				Организация = &Организация
	|					И Актуальность) КАК ПлановыеНачисленияИУдержанияСрезПоследних
	|		ПО ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.Сотрудник = ПлановыеНачисленияИУдержанияСрезПоследних.Сотрудник
	|			И ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.ВидНачисленияУдержания = ПлановыеНачисленияИУдержанияСрезПоследних.ВидНачисленияУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&НаДату, ) КАК КурсВалютыНачисления
	|		ПО (ПлановыеНачисленияИУдержанияСрезПоследних.Валюта = КурсВалютыНачисления.Валюта),
	|	РегистрСведений.КурсыВалют.СрезПоследних(&НаДату, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента";
	
	Запрос.УстановитьПараметр("НаДату", СтруктураДанные.НаДату);
	Запрос.УстановитьПараметр("Организация", СтруктураДанные.Организация);
	Запрос.УстановитьПараметр("ВалютаДокумента", СтруктураДанные.ВалютаДокумента);
	Запрос.УстановитьПараметр("Сотрудник", СтруктураДанные.Сотрудник);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаСотрудников = МассивРезультатов[1].Выгрузить();
	
	Если ТаблицаСотрудников.Количество() = 0 Тогда
		СтруктураДанные.Вставить("ВидНачисленияУдержания", Справочники.ВидыНачисленийИУдержаний.ПустаяСсылка());
		СтруктураДанные.Вставить("Сумма", 0);
	Иначе
		СтруктураДанные.Вставить("ВидНачисленияУдержания", ТаблицаСотрудников[0].ВидНачисленияУдержания);
		СтруктураДанные.Вставить("Сумма", ТаблицаСотрудников[0].Сумма);
	КонецЕсли; 
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеСотрудникаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьСрокОплатыПокупателя(Договор)
	
	Возврат Договор.СрокОплатыПокупателя;

КонецФункции // ПолучитьСрокОплатыПокупателя()

&НаКлиенте
Процедура ЗаполнитьСкладВСтрокеТЧ(СтрокаТабличнойЧасти, СтруктураДанные)
	
	Если Объект.ПоложениеСклада=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = СтруктураДанные.Склад;
		СтрокаТабличнойЧасти.Ячейка = СтруктураДанные.Ячейка;
	Иначе
		СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
		СтрокаТабличнойЧасти.Ячейка = Объект.Ячейка;
	КонецЕсли; 
	СтрокаТабличнойЧасти.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС(ЭтоОткрытие = Ложь)
	
	НалогообложениеПередИзменением = Объект.НалогообложениеНДС;
	Объект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Объект.Организация,, Объект.Дата);
	
	Если НЕ НалогообложениеПередИзменением = Объект.НалогообложениеНДС ИЛИ ЭтоОткрытие Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
		Элементы.СчетФактураНадпись.Видимость = Истина;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			КонецЕсли;
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;
		
		Элементы.ЗНРаботыСтавкаНДС.Видимость = Истина;
		Элементы.ЗНРаботыСуммаНДС.Видимость = Истина;
		Элементы.ЗНРаботыВсего.Видимость = Истина;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			КонецЕсли;
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;
		
	Иначе
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			Элементы.СчетФактураНадпись.Видимость = Ложь;
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
			Элементы.СчетФактураНадпись.Видимость = Истина;
		КонецЕсли;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;
		
		Элементы.ЗНРаботыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗНРаботыСуммаНДС.Видимость = Ложь;
		Элементы.ЗНРаботыВсего.Видимость = Ложь;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаСервереБезКонтекста
Функция ПолучитьДанныеСтруктурнаяЕдиницаПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.Подразделение.ИсточникПеремещения.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад")
		ИЛИ СтруктураДанные.Подразделение.ИсточникПеремещения.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение") Тогда
	
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаЗапасов", СтруктураДанные.Подразделение.ИсточникПеремещения);
		СтруктураДанные.Вставить("ЯчейкаЗапасов", СтруктураДанные.Подразделение.ЯчейкаИсточникаПеремещения);

	Иначе
		
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаЗапасов", Неопределено);
		СтруктураДанные.Вставить("ЯчейкаЗапасов", Неопределено);
		
	КонецЕсли;
		
	СтруктураДанные.Вставить("ОрдерныйСкладЗапасов", НЕ СтруктураДанные.Подразделение.ИсточникПеремещения.ОрдерныйСклад);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеСтруктурнаяЕдиницаПриИзменении()

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти = "Запасы", СтрокаТабличнойЧасти = Неопределено, ПараметрыРасчета = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	КонецЕсли;
	
	Если ПараметрыРасчета=Неопределено Тогда
		ПараметрыРасчета = Новый Структура("СброситьФлагСкидкиРассчитаны",Истина);
	КонецЕсли;	

	ПараметрыРасчета.Вставить("ИспользоватьМинимальныеЦены", КэшЗначений.ИспользоватьМинимальныеЦены);
	ПараметрыРасчета.Вставить("СуммаВключаетНДС",Объект.СуммаВключаетНДС);

	ТабличныеЧастиУНФКлиент.РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти, ПараметрыРасчета);

	ЦенообразованиеКлиент.ПоказатьОповещениеПользователяОКорректировкеЦены(ПараметрыРасчета);

	ОбновитьПодвалФормы();
	
	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти");
	// Конец АвтоматическиеСкидки
	
	// Ручные скидки
	РассчитатьСуммуИПроцентСкидкиРаботыЗапасы(Объект, СкидкаСумма, СкидкаПроцент);
	// Конец Ручные скидки
	
	// Серии номенклатуры
	Если ИспользоватьСерииНоменклатурыОстатки<>Неопределено И ИмяТабличнойЧасти = "Запасы" Тогда
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСерииНоменклатурыКоличество(Объект, СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()	

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуИПроцентСкидкиРаботыЗапасы(Объект, СкидкаСумма, СкидкаПроцент)
	
	ОбщаяСуммаБезСкидок = 0;
	Для каждого стр Из Объект.Работы Цикл
		ОбщаяСуммаБезСкидок = ОбщаяСуммаБезСкидок + стр.Цена * стр.Количество * стр.Кратность * стр.Коэффициент;
	КонецЦикла;
	Для каждого стр Из Объект.Запасы Цикл
		ОбщаяСуммаБезСкидок = ОбщаяСуммаБезСкидок + стр.Цена * стр.Количество;
	КонецЦикла;
	
	СкидкаСумма = Объект.Работы.Итог("СуммаСкидкиНаценки") + Объект.Запасы.Итог("СуммаСкидкиНаценки");
	СкидкаПроцент = ?(ОбщаяСуммаБезСкидок=0, 0, СкидкаСумма / ОбщаяСуммаБезСкидок * 100);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьПлатежныйКалендарь()
	
	Для каждого ТекСтрока Из Объект.ПлатежныйКалендарь Цикл
		ТекСтрока.СуммаОплаты = Окр((Объект.Запасы.Итог("Всего") + Объект.Работы.Итог("Всего")) * ТекСтрока.ПроцентОплаты / 100, 2, 1);
		ТекСтрока.СуммаНДСОплаты = Окр((Объект.Запасы.Итог("СуммаНДС") + Объект.Работы.Итог("СуммаНДС")) * ТекСтрока.ПроцентОплаты / 100, 2, 1);
	КонецЦикла;
	
КонецПроцедуры // ПересчитатьПлатежныйКалендарь()

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыРасчетов(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый
		ИЛИ Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой = Строка(Объект.Кратность) + " " + СокрЛП(ВалютаРасчетов) + " = " + Строка(Объект.Курс) + " " + СокрЛП(НациональнаяВалюта);
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(ВалютаРасчетов) + " = " + Строка(КурсНовый) + " " + СокрЛП(НациональнаяВалюта);
		
		ТекстВопроса = НСтр("ru = 'На дату документа у валюты расчетов (" + КурсВалютыСтрокой + ") был задан курс.
							|Установить курс расчетов (" + КурсНовыйВалютыСтрокой + ") в соответствии с курсом валюты?'");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("КурсНовый", КурсНовый);
		ДополнительныеПараметры.Вставить("КратностьНовый", КратностьНовый);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьУстановкиНовогоКурсаВалюты", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьКурсКратностьВалютыРасчетов()

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь, ПерезаполнитьЦены = Ложь, ТекстПредупреждения = "")
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс", Объект.Курс);
	СтруктураПараметров.Вставить("Кратность", Объект.Кратность);
	СтруктураПараметров.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураПараметров.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НДСВключатьВСтоимость", Объект.НДСВключатьВСтоимость);
	СтруктураПараметров.Вставить("СпециальныйНалоговыйРежим", Объект.СпециальныйНалоговыйРежим);
	СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор", Объект.Договор);
	СтруктураПараметров.Вставить("Организация",	Компания); 
	СтруктураПараметров.Вставить("ДатаДокумента", Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены", ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены", ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	СтруктураПараметров.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураПараметров.Вставить("ВидСкидки", Объект.ВидСкидкиНаценки);
	СтруктураПараметров.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	СтруктураПараметров.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	СтруктураПараметров.Вставить("ВалютаПередИзменением", ВалютаРасчетовПередИзменением);
	СтруктураПараметров.Вставить("СтруктурнаяЕдиница");	
	
	ЦенообразованиеКлиент.ДополнитьСтруктуруВызоваФормыЦеныИВалютыСтруктурнойЕдиницей(Объект, Объект.Запасы, Элементы.Запасы.ТекущиеДанные, СтруктураПараметров);
		
	СтруктураПараметров.Вставить("ДополнительнаяИнформацияМинимальныеЦены", Символы.ПС + НСтр("ru = 'Для табличной части работы используются %1'"));

	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()	

&НаКлиенте
Процедура ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен() 
	
	СтруктураДанных = Новый Структура;
	ТабличнаяЧастьДокумента = Новый Массив;

	СтруктураДанных.Вставить("Дата",				Объект.Дата);
	СтруктураДанных.Вставить("Организация",			Компания);
	СтруктураДанных.Вставить("ВидЦен",				Объект.ВидЦен);
	СтруктураДанных.Вставить("ВалютаДокумента",		Объект.ВалютаДокумента);
	СтруктураДанных.Вставить("СуммаВключаетНДС",	Объект.СуммаВключаетНДС);
	
	СтруктураДанных.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	СтруктураДанных.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	СтруктураДанных.Вставить("ПроцентСкидкиНаценки", 0);
	
	Для каждого СтрокаТЧ Из Объект.Работы Цикл
		
		СтрокаТЧ.Цена = 0;
		
		СтрокаТабличнойЧасти = Новый Структура();
		СтрокаТабличнойЧасти.Вставить("ВидРабот",			?(ВидРаботВШапке, Объект.ВидРабот, СтрокаТЧ.ВидРабот));
		Если НЕ СтрокаТЧ.ФиксированнаяСтоимость Тогда
			СтрокаТабличнойЧасти.Вставить("ОригинальнаяНоменклатура", СтрокаТЧ.Номенклатура);
			СтрокаТабличнойЧасти.Вставить("ОригинальнаяХарактеристика", СтрокаТЧ.Характеристика);
			СтрокаТабличнойЧасти.Вставить("Номенклатура", СтрокаТабличнойЧасти.ВидРабот);
			СтрокаТабличнойЧасти.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
		Иначе
			СтрокаТабличнойЧасти.Вставить("Номенклатура",		СтрокаТЧ.Номенклатура);
			СтрокаТабличнойЧасти.Вставить("Характеристика",		СтрокаТЧ.Характеристика);
		КонецЕсли; 
		СтрокаТабличнойЧасти.Вставить("ЕдиницаИзмерения",	ПредопределенноеЗначение("Справочник.КлассификаторЕдиницИзмерения.шт"));
		СтрокаТабличнойЧасти.Вставить("СтавкаНДС",			СтрокаТЧ.СтавкаНДС);
		// Наборы
		Если СтрокаТЧ.Свойство("НоменклатураНабора") Тогда
			СтрокаТабличнойЧасти.Вставить("НоменклатураНабора",		СтрокаТЧ.НоменклатураНабора);
			СтрокаТабличнойЧасти.Вставить("ХарактеристикаНабора",	СтрокаТЧ.ХарактеристикаНабора);
			СтрокаТабличнойЧасти.Вставить("ДоляСтоимости",			СтрокаТЧ.ДоляСтоимости);
			СтрокаТабличнойЧасти.Вставить("Количество",				СтрокаТЧ.Количество*СтрокаТЧ.Кратность*СтрокаТЧ.Коэффициент);
			Если Объект.Свойство("ДобавленныеНаборы") Тогда
				// Количество добавленных наборов
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("НоменклатураНабора", СтрокаТЧ.НоменклатураНабора);
				СтруктураОтбора.Вставить("ХарактеристикаНабора", СтрокаТЧ.ХарактеристикаНабора);
				ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
				Если ДобавленныеСтроки.Количество()=0 Тогда
					СтрокаТабличнойЧасти.Вставить("КоличествоНаборов", 1);
				Иначе
					СтрокаТабличнойЧасти.Вставить("КоличествоНаборов", ДобавленныеСтроки[0].Количество);
				КонецЕсли;
			Иначе
				СтрокаТабличнойЧасти.Вставить("КоличествоНаборов", 1);
			КонецЕсли;
		КонецЕсли;
		// Конец Наборы
		СтрокаТабличнойЧасти.Вставить("Цена",				0);

		Если КэшЗначений.ИспользоватьМинимальныеЦены Тогда
			СтрокаТабличнойЧасти.Вставить("МинимальнаяЦена", 0);
		КонецЕсли;    	
		
		ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, СтрокаТЧ, СтрокаТабличнойЧасти); 
	
		ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
		
	КонецЦикла;

	ЦенообразованиеСервер.ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанных, ТабличнаяЧастьДокумента);
	
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
		
		Если СтрокаТЧ.Свойство("ОригинальнаяНоменклатура") Тогда
			СтрокаТЧ.Номенклатура = СтрокаТЧ.ОригинальнаяНоменклатура;
		КонецЕсли; 
		Если СтрокаТЧ.Свойство("ОригинальнаяХарактеристика") Тогда
			СтрокаТЧ.Характеристика = СтрокаТЧ.ОригинальнаяХарактеристика;
		КонецЕсли; 
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаТЧ.Характеристика);
		Если СтрокаТЧ.Свойство("НоменклатураНабора") Тогда
			СтруктураПоиска.Вставить("НоменклатураНабора",	 СтрокаТЧ.НоменклатураНабора);
			СтруктураПоиска.Вставить("ХарактеристикаНабора", СтрокаТЧ.ХарактеристикаНабора);
		КонецЕсли; 
		
		РезультатПоиска = Объект.Работы.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаРезультат Из РезультатПоиска Цикл
			СтрокаРезультат.Цена = СтрокаТЧ.Цена;
			
			Если СтрокаТЧ.Свойство("МинимальнаяЦена") Тогда
				СтрокаРезультат.МинимальнаяЦена = СтрокаТЧ.МинимальнаяЦена;
			КонецЕсли;
			
			РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", СтрокаРезультат);
		КонецЦикла;
		
	КонецЦикла;
	
	// Наборы
	// Округление цен составляющих набора
	Если СтруктураДанных.Свойство("ОкругленияНаборов") И СтруктураДанных.ОкругленияНаборов.Количество()>0 Тогда
		Для каждого ОписаниеОкругления Из СтруктураДанных.ОкругленияНаборов Цикл
			НаборыКлиентСервер.ОкруглениеЦеныНабора(
			ОписаниеОкругления.НоменклатураНабора, 
			ОписаниеОкругления.ХарактеристикаНабора, 
			?(ОписаниеОкругления.Свойство("НомерВариантаКП"), ОписаниеОкругления.НомерВариантаКП, Неопределено), 
			Объект.Работы, 
			ОписаниеОкругления.Округление);
		КонецЦикла; 
	КонецЕсли;
	// Конец Наборы
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанных.ПроцентСкидкиНаценки;
		РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", СтрокаТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры // ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен()

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи)
	
	ТекстНадписи = "";
	
	// Валюта.
	Если СтруктураНадписи.УчетВалютныхОпераций Тогда
		Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
			ТекстНадписи = НСтр("ru = '%Валюта%'");
			Если СтруктураНадписи.ВалютаДокумента <> УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
				ТекстНадписи = ТекстНадписи + НСтр("ru = ' %Курс%'");
				ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(УправлениеНебольшойФирмойПовтИсп.ПолучитьСимвольноеПредставлениеВалюты(СтруктураНадписи.ВалютаДокумента)));
				ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Курс%", СокрЛП(Строка(СтруктураНадписи.Курс)));
			Иначе
				ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(СтруктураНадписи.ВалютаДокумента)));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Вид цен.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВидЦен) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидЦен%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ВидЦен%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидЦен%", СокрЛП(Строка(СтруктураНадписи.ВидЦен)));
	КонецЕсли;
	
	// Вид скидки наценки.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВидСкидки) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидСкидкиНаценки%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ВидСкидкиНаценки%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидСкидкиНаценки%", СокрЛП(Строка(СтруктураНадписи.ВидСкидки)));
	КонецЕсли;
	
	// Дисконтная карта.
	Если ЗначениеЗаполнено(СтруктураНадписи.ДисконтнаяКарта) И ДисконтныеКартыУНФВызовСервера.СтарыйМеханизмСкидок(СтруктураНадписи.ДисконтнаяКарта) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ДисконтнаяКарта%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ДисконтнаяКарта%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ДисконтнаяКарта%", Строка(СтруктураНадписи.ПроцентСкидкиПоДисконтнойКарте)+"% по карте"); //СокрЛП(Строка(СтруктураНадписи.ДисконтнаяКарта)));
	КонецЕсли;	
	
	// Налогообложение НДС.
	Если ЗначениеЗаполнено(СтруктураНадписи.НалогообложениеНДС) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%НалогообложениеНДС%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %НалогообложениеНДС%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%НалогообложениеНДС%", РаботаСФормойДокументаКлиентСервер.КраткоеПредставлениеТипаНалогообложенияНДС(СтруктураНадписи.НалогообложениеНДС));
	КонецЕсли;
	
	// Специальный налоговый режим.
	Если ЗначениеЗаполнено(СтруктураНадписи.СпециальныйНалоговыйРежим)
		И СтруктураНадписи.СпециальныйНалоговыйРежим <> ПредопределенноеЗначение("Перечисление.СпециальныеНалоговыеРежимы.НеПрименяется") Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%СпециальныйНалоговыйРежим%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %СпециальныйНалоговыйРежим%'");
		КонецЕсли;	
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%СпециальныйНалоговыйРежим%", СокрЛП(Строка(СтруктураНадписи.СпециальныйНалоговыйРежим)));
	КонецЕсли;
	
	// Флаг сумма включает НДС.
	Если ПустаяСтрока(ТекстНадписи) Тогда	
		Если СтруктураНадписи.СуммаВключаетНДС Тогда	
			ТекстНадписи = НСтр("ru = 'Сумма включает НДС'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Сумма не включает НДС'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции // ТекстНадписиЦеныИВалюта()

&НаКлиенте
Процедура ОбновитьПодвалФормы()
	
	ИтогВсего = Объект.Работы.Итог("Всего") + Объект.Запасы.Итог("Всего");
	ИтогСуммаНДС = Объект.Работы.Итог("СуммаНДС") + Объект.Запасы.Итог("СуммаНДС");
	
КонецПроцедуры // ОбновитьПодвалФормы()

// ПодключаемоеОборудование
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные, ИмяТабличнойЧасти = "Запасы")
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодамВМассиве(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		МассивДанныхШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если МассивДанныхШтрихкода <> Неопределено
			И МассивДанныхШтрихкода.Количество() <> 0 Тогда
			
			Для Каждого ДанныеШтрихкода Из МассивДанныхШтрихкода Цикл
				
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеШтрихкода.Номенклатура, "ТипНоменклатуры, ЕдиницаИзмерения");
				
				СтруктураДанныеНоменклатуры = Новый Структура();
				СтруктураДанныеНоменклатуры.Вставить("Организация", СтруктураДанные.Организация);
				СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
				СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ЗначенияРеквизитов.ТипНоменклатуры);
				СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
				СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", СтруктураДанные.НалогообложениеНДС);
				СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);
				
				Если ЗначениеЗаполнено(СтруктураДанные.ВидЦен) Тогда
					СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);
					СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", СтруктураДанные.ВалютаДокумента);
					СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", СтруктураДанные.СуммаВключаетНДС);
					СтруктураДанныеНоменклатуры.Вставить("ВидЦен", СтруктураДанные.ВидЦен);
					Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения)
						И ТипЗнч(ДанныеШтрихкода.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
						СтруктураДанныеНоменклатуры.Вставить("Коэффициент", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
							ДанныеШтрихкода.ЕдиницаИзмерения, "Коэффициент"));
					Иначе
						СтруктураДанныеНоменклатуры.Вставить("Коэффициент", 1);
					КонецЕсли;
					СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки);
				КонецЕсли;
				
				Если ИмяТабличнойЧасти = "Работы" Тогда
					Если СтруктураДанные.Свойство("ВидРабот") Тогда
						СтруктураДанныеНоменклатуры.Вставить("ВидРабот", СтруктураДанные.ВидРабот);
					КонецЕсли; 
					СтруктураДанныеНоменклатуры.Вставить("НормаВремени", 1);
				КонецЕсли;
				
				// ДисконтныеКарты
				СтруктураДанныеНоменклатуры.Вставить("ПроцентСкидкиПоДисконтнойКарте", СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте);
				СтруктураДанныеНоменклатуры.Вставить("ДисконтнаяКарта", СтруктураДанные.ДисконтнаяКарта);
				// Конец ДисконтныеКарты 
				
				// МинимальныеЦены
				Если СтруктураДанные.Свойство("СтруктурнаяЕдиница") Тогда 					
					СтруктураДанныеНоменклатуры.Вставить("СтруктурнаяЕдиница", СтруктураДанные.СтруктурнаяЕдиница);					
				КонецЕсли;				
				// Конец МинимальныеЦены
				
				ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
				
				Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
					ДанныеШтрихкода.ЕдиницаИзмерения = ЗначенияРеквизитов.ЕдиницаИзмерения;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	МассивТипов = Новый Массив;
	Если ИмяТабличнойЧасти="Запасы" Тогда
		МассивТипов.Добавить(Перечисления.ТипыНоменклатуры.Запас);
		МассивТипов.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
		МассивТипов.Добавить(Перечисления.ТипыНоменклатуры.ПодарочныйСертификат);
	ИначеЕсли ИмяТабличнойЧасти="Работы" Тогда
		// Работы и материалы
		МассивТипов.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
		МассивТипов.Добавить(Перечисления.ТипыНоменклатуры.Работа);
		Если СтруктураДанные.ИспользоватьМатериалы Тогда
			МассивТипов.Добавить(Перечисления.ТипыНоменклатуры.Запас);
		КонецЕсли; 
	КонецЕсли; 
	СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов)
	
	ИмяТекущейСтраницы = Элементы.ЗНСтраницы.ТекущаяСтраница.Имя;
	Если ИмяТекущейСтраницы = "ЗНГруппаРаботы" Тогда
		ИмяТабличнойЧасти = "Работы";
	ИначеЕсли ИмяТекущейСтраницы = "ЗНГруппаЗапасы" Тогда
		ИмяТабличнойЧасти = "Запасы";
	ИначеЕсли Объект.ИспользоватьТовары Тогда
		ИмяТабличнойЧасти = "Запасы";
	Иначе
		Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа", Новый Массив, Новый Массив);
	КонецЕсли;
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("ИспользоватьМатериалы", Объект.ИспользоватьМатериалы);
	Если ИмяТабличнойЧасти = "Работы" Тогда
		СтруктураДанные.Вставить("НормаВремени", 1);
		Если Объект.ПоложениеВидаРабот=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
			СтруктураДанные.Вставить("ВидРабот", Объект.ВидРабот);
		КонецЕсли; 
	КонецЕсли;
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	// Конец ДисконтныеКарты

	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, Неопределено, СтруктураДанные);

	ПолучитьДанныеПоШтрихКодам(СтруктураДанные, ИмяТабличнойЧасти);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение", ЭтотОбъект, Новый Структура("СтруктураДанные, ИмяТабличнойЧасти",СтруктураДанные, ИмяТабличнойЧасти));
			
			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам", ПараметрыОткрытия, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода <> Неопределено И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры"
			, ТекШтрихкод.Штрихкод, ДанныеШтрихкода[0].Номенклатура, ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры));			
		Иначе
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			Если ИмяТабличнойЧасти = "Запасы" Тогда
				СтруктураКолонокТЧ = Новый Структура("Номенклатура,Характеристика,Партия,ЕдиницаИзмерения,НоменклатураНабора",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.Партия,ДанныеШтрихкода.ЕдиницаИзмерения,ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
				МассивСтрокТЧ = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураКолонокТЧ);
			ИначеЕсли ИмяТабличнойЧасти = "Работы" И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") Тогда
				СтруктураКолонокТЧ = Новый Структура("Номенклатура,Характеристика,Партия,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.Партия,ДанныеШтрихкода.ЕдиницаИзмерения);
				МассивСтрокТЧ = Объект.Материалы.НайтиСтроки(СтруктураКолонокТЧ);
			Иначе	
				СтруктураКолонокТЧ = Новый Структура("Номенклатура,Характеристика,НоменклатураНабора",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
				МассивСтрокТЧ = Объект.Работы.НайтиСтроки(СтруктураКолонокТЧ);
			КонецЕсли;
			
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				
				Если ИмяТабличнойЧасти = "Запасы" Тогда
					//Запасы
					НоваяСтрока = Объект.Запасы.Добавить();
					
					ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиницаРезерв", "ПоложениеСклада");
					ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Ячейка", "ПоложениеСклада");
					
					НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
					НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
					
					НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
					НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
					НоваяСтрока.ТипНоменклатурыЗапас = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоЗапас;
					НоваяСтрока.Количество = ТекШтрихкод.Количество;
					
					НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
					Если КэшЗначений.ИспользоватьМинимальныеЦены
						И НоваяСтрока.Свойство("МинимальнаяЦена")
						И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("МинимальнаяЦена") Тогда
						
						НоваяСтрока.МинимальнаяЦена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.МинимальнаяЦена;
						
					КонецЕсли;
					НоваяСтрока.ПроцентСкидкиНаценки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроцентСкидкиНаценки;
					НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
					НоваяСтрока.Спецификация = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Спецификация;
					
					ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("СтранаПроисхождения", НоваяСтрока.СтранаПроисхождения);
					ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("НомерГТД", НоваяСтрока.НомерГТД);
					
					ЗаполнитьСкладВСтрокеТЧ(НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
					
					Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
						// Наборы
						ЗаменитьСтрокуДаннымиНабора(ЭтотОбъект, "Запасы", НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
						// Конец Наборы
						// АвтоматическиеСкидки.
						СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
						// Конец АвтоматическиеСкидки
					Иначе
						РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти , НоваяСтрока);
						Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
					КонецЕсли;
					
				ИначеЕсли ИмяТабличнойЧасти = "Работы" И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") Тогда
					//Материалы
					ТекСтрокаРаботы = Элементы.Работы.ТекущиеДанные;
					Если НЕ (ТекСтрокаРаботы=Неопределено ИЛИ ТекСтрокаРаботы.ТипНоменклатурыУслуга) Тогда
						НоваяСтрока = Объект.Материалы.Добавить();
						
						ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиницаРезерв", "ПоложениеСклада");
						ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Ячейка", "ПоложениеСклада");
						
						НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
						НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
						
						НоваяСтрока.КлючСвязи = ТекСтрокаРаботы.КлючСвязи;
						НоваяСтрока.Количество= ТекШтрихкод.Количество;
						НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
						НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
						ЗаполнитьНомераСтрокТаблицаМатериалы(Объект.Материалы);
					КонецЕсли; 
					
				Иначе //Работы
					
					НоваяСтрока = Объект.Работы.Добавить();
					
					ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "ВидРабот", "ПоложениеВидаРабот");
					
					НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
					НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
					
					НоваяСтрока.ТипНоменклатурыУслуга= ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоУслуга;
					НоваяСтрока.Количество	= СтруктураДанные.НормаВремени;
					НоваяСтрока.Кратность	= ТекШтрихкод.Количество; 
					НоваяСтрока.Коэффициент = 1;
					НоваяСтрока.Содержание	= "";
					
					НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
					НоваяСтрока.ПроцентСкидкиНаценки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроцентСкидкиНаценки;
					НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
					НоваяСтрока.Спецификация = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Спецификация;
					НоваяСтрока.ФиксированнаяСтоимость = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ФиксированнаяСтоимость;
					
					Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
						// Наборы
						ЗаменитьСтрокуДаннымиНабора(ЭтотОбъект, "Работы", НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
						// Конец Наборы
					Иначе
						РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти , НоваяСтрока);
						Элементы.Работы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
						ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект);
						ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы");
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				НоваяСтрока = МассивСтрокТЧ[0];
				
				Если ИмяТабличнойЧасти = "Запасы" Тогда
					НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
					РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти , НоваяСтрока);
					Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				ИначеЕсли ИмяТабличнойЧасти = "Работы" И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") Тогда
					НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				Иначе
					НоваяСтрока.Кратность = НоваяСтрока.Кратность + ТекШтрихкод.Количество;
					РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти , НоваяСтрока);
					Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИмяТабличнойЧасти="Запасы" Тогда
				Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
					СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры) Экспорт //bg
	
	Если СтруктураНоменклатуры = Неопределено Тогда Возврат КонецЕсли;
	
	ДанныеШтрихкода = СтруктураНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = СтруктураНоменклатуры.ТекШтрихкод;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	СтруктураДанные = Параметры.СтруктураДанные;
	ИмяТабличнойЧасти = Параметры.ИмяТабличнойЧасти;
	
	Если СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
		ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры));			
	Иначе
		
		Если ИмяТабличнойЧасти = "Запасы" Тогда
			СтруктураКолонокТЧ = Новый Структура("Номенклатура,Характеристика,Партия,ЕдиницаИзмерения,НоменклатураНабора",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.Партия,ДанныеШтрихкода.ЕдиницаИзмерения,ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
			МассивСтрокТЧ = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураКолонокТЧ);
		ИначеЕсли ИмяТабличнойЧасти = "Работы" И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") Тогда
			СтруктураКолонокТЧ = Новый Структура("Номенклатура,Характеристика,Партия,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.Партия,ДанныеШтрихкода.ЕдиницаИзмерения);
			МассивСтрокТЧ = Объект.Материалы.НайтиСтроки(СтруктураКолонокТЧ);
		Иначе	
			СтруктураКолонокТЧ = Новый Структура("Номенклатура,Характеристика,НоменклатураНабора",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
			МассивСтрокТЧ = Объект.Работы.НайтиСтроки(СтруктураКолонокТЧ);
		КонецЕсли;
		
		Если МассивСтрокТЧ.Количество() = 0 Тогда
			
			Если ИмяТабличнойЧасти = "Запасы" Тогда
				//Запасы
				НоваяСтрока = Объект.Запасы.Добавить();
				
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиницаРезерв", "ПоложениеСклада");
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Ячейка", "ПоложениеСклада");
				
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.ТипНоменклатурыЗапас = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоЗапас;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				НоваяСтрока.ПроцентСкидкиНаценки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроцентСкидкиНаценки;
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				НоваяСтрока.Спецификация = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Спецификация;
				
				ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("СтранаПроисхождения", НоваяСтрока.СтранаПроисхождения);
				ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("НомерГТД", НоваяСтрока.НомерГТД);
				
				ЗаполнитьСкладВСтрокеТЧ(НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
				
				Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
					// Наборы
					ЗаменитьСтрокуДаннымиНабора(ЭтотОбъект, "Запасы", НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
					// Конец Наборы
					// АвтоматическиеСкидки.
					СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
					// Конец АвтоматическиеСкидки
				Иначе
					РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти , НоваяСтрока);
					Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				КонецЕсли;
				
			ИначеЕсли ИмяТабличнойЧасти = "Работы" И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") Тогда
				//Материалы
				ТекСтрокаРаботы = Элементы.Работы.ТекущиеДанные;
				Если НЕ (ТекСтрокаРаботы=Неопределено ИЛИ ТекСтрокаРаботы.ТипНоменклатурыУслуга) Тогда
					НоваяСтрока = Объект.Материалы.Добавить();
					
					ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиницаРезерв", "ПоложениеСклада");
					ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Ячейка", "ПоложениеСклада");
					
					НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
					НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
					
					НоваяСтрока.КлючСвязи = ТекСтрокаРаботы.КлючСвязи;
					НоваяСтрока.Количество= ТекШтрихкод.Количество;
					НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
					НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
					ЗаполнитьНомераСтрокТаблицаМатериалы(Объект.Материалы);
				КонецЕсли; 
				
			Иначе //Работы
				
				НоваяСтрока = Объект.Работы.Добавить();
				
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "ВидРабот", "ПоложениеВидаРабот");
				
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				
				НоваяСтрока.ТипНоменклатурыУслуга= ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоУслуга;
				НоваяСтрока.Количество	= СтруктураДанные.НормаВремени;
				НоваяСтрока.Кратность	= ТекШтрихкод.Количество; 
				НоваяСтрока.Коэффициент = 1;
				НоваяСтрока.Содержание	= "";
				
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				НоваяСтрока.ПроцентСкидкиНаценки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроцентСкидкиНаценки;
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				НоваяСтрока.Спецификация = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Спецификация;
				НоваяСтрока.ФиксированнаяСтоимость = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ФиксированнаяСтоимость;
				
				Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
					// Наборы
					ЗаменитьСтрокуДаннымиНабора(ЭтотОбъект, "Работы", НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
					// Конец Наборы
				Иначе
					РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти , НоваяСтрока);
					Элементы.Работы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
					ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект);
					ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы");
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			НоваяСтрока = МассивСтрокТЧ[0];
			
			Если ИмяТабличнойЧасти = "Запасы" Тогда
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти , НоваяСтрока);
				Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			ИначеЕсли ИмяТабличнойЧасти = "Работы" И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") Тогда
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
			Иначе
				НоваяСтрока.Кратность = НоваяСтрока.Кратность + ТекШтрихкод.Количество;
				РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти , НоваяСтрока);
				Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИмяТабличнойЧасти="Запасы" Тогда
			Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	ЗаполнитьПризнакиИспользованияХарактеристик();


КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов) Экспорт
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов);
	НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект,,,,Оповещение
		);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = СтрШаблон(НСтр("ru = 'Данные по штрихкоду не найдены: %1; количество: %2'"),
			ТекНеизвестныйШтрихкод.Штрихкод, ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияХарактеристик()
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = СтрШаблон(НСтр(
			"ru = 'Найденная по штрихкоду %1 номенклатура ""%2"" имеет тип %3, который не подходит для этой табличной части'"),
			ТекНекорректныйШтрихкод.Штрихкод, ТекНекорректныйШтрихкод.Номенклатура,
			ТекНекорректныйШтрихкод.ТипНоменклатуры);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

&НаСервере
Процедура ЗаполнитьПоСпецификацииНаСервере(ПоСпецификации, ТребуемоеКоличество, ИспользуемаяЕдиницаИзмерения = Неопределено)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(СпецификацииСостав.НомерСтроки) КАК СпецификацииСоставНомерСтроки,
	|	СпецификацииСостав.Номенклатура КАК Номенклатура,
	|	СпецификацииСостав.ТипСтрокиСостава КАК ТипСтрокиСостава,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СпецификацииСостав.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	СпецификацииСостав.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СпецификацииСостав.Спецификация КАК Спецификация,
	|	СУММА(СпецификацииСостав.Количество / СпецификацииСостав.КоличествоПродукции * &Коэффициент * &Количество) КАК Количество
	|ИЗ
	|	Справочник.Спецификации.Состав КАК СпецификацииСостав
	|ГДЕ
	|	СпецификацииСостав.Ссылка = &Спецификация
	|	И СпецификацииСостав.Номенклатура.ТипНоменклатуры = &ТипНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	СпецификацииСостав.Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СпецификацииСостав.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	СпецификацииСостав.ЕдиницаИзмерения,
	|	СпецификацииСостав.Спецификация,
	|	СпецификацииСостав.ТипСтрокиСостава
	|
	|УПОРЯДОЧИТЬ ПО
	|	СпецификацииСоставНомерСтроки");
	
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики"));
	
	Запрос.УстановитьПараметр("Спецификация", ПоСпецификации);
	Запрос.УстановитьПараметр("Количество", ТребуемоеКоличество);
	
	Если НЕ ТипЗнч(ИспользуемаяЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения")
		И ИспользуемаяЕдиницаИзмерения <> Неопределено Тогда
		Запрос.УстановитьПараметр("Коэффициент", ИспользуемаяЕдиницаИзмерения.Коэффициент);
	Иначе
		Запрос.УстановитьПараметр("Коэффициент", 1);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипСтрокиСостава = ПредопределенноеЗначение("Перечисление.ТипыСтрокСоставаСпецификации.Узел") Тогда
			
			ЗаполнитьПоСпецификацииНаСервере(Выборка.Спецификация, Выборка.Количество, Выборка.ЕдиницаИзмерения);
			
		Иначе
			
			НоваяСтрока = Объект.Материалы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.КлючСвязи = Элементы.ЗНМатериалы.ОтборСтрок["КлючСвязи"];
			
		КонецЕсли;
		
	КонецЦикла;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ЗаполнитьНомераСтрокТаблицаМатериалы(Объект.Материалы);
	
КонецПроцедуры // ЗаполнитьПоСпецификацииНаСервере()

&НаСервере
Процедура ПеренестиМатериалыВТабличноеПолеСКлючамиЗаписей(ТаблицаСпецификаций)
	
	Запрос	= Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСпецификаций.Спецификация,
	|	ТаблицаСпецификаций.Кратность КАК Кратность,
	|	ТаблицаСпецификаций.КоэффициентОтБазовойЕдиницыИзмерения КАК КоэффициентОтБазовойЕдиницыИзмерения,
	|	ТаблицаСпецификаций.КлючСвязи
	|ПОМЕСТИТЬ ВрТабСпецификаций
	|ИЗ
	|	&ТаблицаСпецификаций КАК ТаблицаСпецификаций
	|ГДЕ
	|	НЕ ТаблицаСпецификаций.ТипНоменклатурыУслуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВрТабСпецификаций.КлючСвязи,
	|	ВрТабСпецификаций.Кратность,
	|	СпецификацииСостав.ТипСтрокиСостава,
	|	СпецификацииСостав.Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СпецификацииСостав.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	СпецификацииСостав.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА СпецификацииСостав.ТипСтрокиСостава = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокСоставаСпецификации.Узел)
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ СпецификацииСостав.ЕдиницаИзмерения = СпецификацииСостав.Номенклатура.ЕдиницаИзмерения
	|						ТОГДА ВЫБОР
	|								КОГДА СпецификацииСостав.ЕдиницаИзмерения.Коэффициент = 0
	|									ТОГДА 1
	|								ИНАЧЕ СпецификацииСостав.ЕдиницаИзмерения.Коэффициент
	|							КОНЕЦ
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоэффициентОтБазовойЕдиницыИзмерения,
	|	СпецификацииСостав.Количество / СпецификацииСостав.КоличествоПродукции * ВрТабСпецификаций.Кратность * ВЫБОР
	|		КОГДА ЕСТЬNULL(ВрТабСпецификаций.КоэффициентОтБазовойЕдиницыИзмерения, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ВрТабСпецификаций.КоэффициентОтБазовойЕдиницыИзмерения
	|	КОНЕЦ КАК Количество,
	|	СпецификацииСостав.КоличествоПродукции,
	|	СпецификацииСостав.Спецификация КАК Спецификация
	|ИЗ
	|	ВрТабСпецификаций КАК ВрТабСпецификаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Спецификации.Состав КАК СпецификацииСостав
	|		ПО ВрТабСпецификаций.Спецификация = СпецификацииСостав.Ссылка
	|ГДЕ
	|	(СпецификацииСостав.ТипСтрокиСостава = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокСоставаСпецификации.Материал)
	|			ИЛИ СпецификацииСостав.ТипСтрокиСостава = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокСоставаСпецификации.УЗЕЛ))
	|	И СпецификацииСостав.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)";
	
	Запрос.УстановитьПараметр("ТаблицаСпецификаций", ТаблицаСпецификаций);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики"));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаУзлов = ТаблицаСпецификаций.Скопировать();
	ТаблицаУзлов.Очистить();
	
	Для каждого СтрокаТаблицы Из РезультатЗапроса Цикл
		
		Если СтрокаТаблицы.ТипСтрокиСостава = ПредопределенноеЗначение("Перечисление.ТипыСтрокСоставаСпецификации.Узел") Тогда
			
			НоваяСтрока = ТаблицаУзлов.Добавить();
			
		Иначе
			
			НоваяСтрока = Объект.Материалы.Добавить();
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла;
	
	Если ТаблицаУзлов.Количество() > 0 Тогда
		
		Для каждого Стр Из ТаблицаУзлов Цикл
			Стр.Кратность = Стр.Количество;
			Стр.Количество = 1;
		КонецЦикла; 
		ПеренестиМатериалыВТабличноеПолеСКлючамиЗаписей(ТаблицаУзлов);
		
	КонецЕсли;
	
	ЗаполнитьНомераСтрокТаблицаМатериалы(Объект.Материалы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМатериалыПоВсемСпецификациямНаСервере()
	
	Работы_ТаблицаЗначений = РеквизитФормыВЗначение("Объект").Работы.Выгрузить();
	
	// Удалим строки с без спецификаций и со спецификациями без состава
	Счетчик = (Работы_ТаблицаЗначений.Количество() - 1);
	Пока Счетчик >= 0 Цикл
		Если Работы_ТаблицаЗначений[Счетчик].Спецификация.Состав.Количество() = 0 Тогда 
			Работы_ТаблицаЗначений.Удалить(Работы_ТаблицаЗначений[Счетчик]);
		КонецЕсли;
		Счетчик = Счетчик - 1;
	КонецЦикла;
	
	Работы_ТаблицаЗначений.Колонки.Добавить("КоэффициентОтБазовойЕдиницыИзмерения", Новый ОписаниеТипов("Число"));
	ПеренестиМатериалыВТабличноеПолеСКлючамиЗаписей(Работы_ТаблицаЗначений);
	
	// Все заполнено, теперь свернем строки.
	ТаблицаМатериалов = Объект.Материалы.Выгрузить();
	ТаблицаМатериалов.Свернуть("КлючСвязи, Номенклатура, Характеристика, Партия, ЕдиницаИзмерения, НомерСтрокиВнутренний", "Количество, Резерв, РезервОтгрузка");
	
	Объект.Материалы.Очистить();
	Объект.Материалы.Загрузить(ТаблицаМатериалов);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	
КонецПроцедуры // ЗаполнитьМатериалыПоВсемСпецификациямНаСервере()

&НаСервере
Процедура СформироватьНаименованияМатериаловИИсполнителей()
	
	// Подчиненные ТЧ
	ИспользоватьСовместительство = ПолучитьФункциональнуюОпцию("ИспользоватьСовместительство");
	Для каждого СтрокаРаботы Из Объект.Работы Цикл
	
		СтрокаМатериалы = "";
		МассивПоКлючуЗаписи = Объект.Материалы.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаРаботы.КлючСвязи));
		Для каждого СтрокаТЧ Из МассивПоКлючуЗаписи Цикл
			СтрокаМатериалы = СтрокаМатериалы + ?(СтрокаМатериалы = "", "", ", ") + СтрокаТЧ.Номенклатура 
								+ ?(ЗначениеЗаполнено(СтрокаТЧ.Характеристика), " (" + СтрокаТЧ.Характеристика + ")", "");
		КонецЦикла;
		СтрокаРаботы.Материалы = СтрокаМатериалы;
		
		ТаблицаИсполнители = Объект.Исполнители.Выгрузить(Новый Структура("КлючСвязи", СтрокаРаботы.КлючСвязи), "Сотрудник");
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Код,
		|	Сотрудники.Наименование,
		|	ФИОФизЛицСрезПоследних.Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя,
		|	ФИОФизЛицСрезПоследних.Отчество
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&НаДату, ) КАК ФИОФизЛицСрезПоследних
		|		ПО Сотрудники.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|ГДЕ
		|	Сотрудники.Ссылка В(&ТаблицаИсполнители)";
		
		Запрос.УстановитьПараметр("НаДату", Объект.Дата);
		Запрос.УстановитьПараметр("ТаблицаИсполнители", ТаблицаИсполнители);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		СтрокаИсполнители = "";
		Пока Выборка.Следующий() Цикл
			ПредставлениеСотрудник = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Выборка);
			СтрокаИсполнители = СтрокаИсполнители + ?(СтрокаИсполнители = "", "", ", ") 
								+ ?(ЗначениеЗаполнено(ПредставлениеСотрудник), ПредставлениеСотрудник, Выборка.Наименование);
			Если ИспользоватьСовместительство Тогда
				СтрокаИсполнители = СтрокаИсполнители + " (" + СокрЛП(Выборка.Код) + ")";
			КонецЕсли;
		КонецЦикла;
		СтрокаРаботы.Исполнители = СтрокаИсполнители;
	
	КонецЦикла;
	
КонецПроцедуры // СформироватьНаименованияМатериаловИИсполнителей()

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьИсполнителиПоРесурсамНаСервере(ИсполнителиКлючСвязи = Неопределено)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьТабличнуюЧастьИсполнителиПоРесурсам(ИсполнителиКлючСвязи);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	ОтразитьИзмененияПоТаблицеИсполнителей(ИсполнителиКлючСвязи);
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ДействияПослеЧтенияОбъекта();
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьИсполнителиПоРесурсамНаСервере()

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьИсполнителиПоБригадамНаСервере(МассивБригад, ИсполнителиКлючСвязи = Неопределено)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьТабличнуюЧастьИсполнителиПоБригадам(МассивБригад, ИсполнителиКлючСвязи);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	ОтразитьИзмененияПоТаблицеИсполнителей(ИсполнителиКлючСвязи);
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ДействияПослеЧтенияОбъекта();
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьИсполнителиПоБригадамНаСервере()

&НаСервере
Процедура ЗНТоварыЗаполнитьКолонкуРезервПоОстаткамНаСервере()
	
	ИмяТЧ = Элементы.ЗНСтраницы.ТекущаяСтраница.Имя;
	
	Если ИмяТЧ = "ЗНГруппаЗапасы" Или (ИмяТЧ = "ЗНГруппаРаботы" И Элементы.ЗНМатериалы.Видимость) Тогда
		ИмяТЧ = ?(ИмяТЧ = "ЗНГруппаЗапасы", "Запасы", "Материалы");
		НоменклатураВДокументахСервер.ЗаполнитьКолонкуРезервПоОстаткамЗаказПокупателяБезРазбиения(Объект,,ИмяТЧ);
	КонецЕсли;
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ДействияПослеЧтенияОбъекта();
	
КонецПроцедуры // ЗНТоварыЗаполнитьКолонкуРезервПоОстаткамНаСервере()

&НаСервере
Процедура ЗНТоварыЗаполнитьКолонкуРезервПоРезервамНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ТоварыЗаполнитьКолонкуРезервПоРезервам();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ДействияПослеЧтенияОбъекта();
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	
КонецПроцедуры // ЗНТоварыЗаполнитьКолонкуРезервПоРезервамНаСервере()

&НаСервере
Процедура ЗНМатериалыЗаполнитьКолонкуРезервПоОстаткамНаСервере(МатериалыКлючСвязи = Неопределено)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.МатериалыЗаполнитьКолонкуРезервПоОстаткам(МатериалыКлючСвязи);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ДействияПослеЧтенияОбъекта();
	
КонецПроцедуры // ЗНМатериалыЗаполнитьКолонкуРезервПоОстаткамНаСервере()

&НаСервере
Процедура ЗНМатериалыЗаполнитьКолонкуРезервПоРезервамНаСервере(МатериалыКлючСвязи = Неопределено)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.МатериалыЗаполнитьКолонкуРезервПоРезервам(МатериалыКлючСвязи);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ДействияПослеЧтенияОбъекта();
	
КонецПроцедуры // ЗНМатериалыЗаполнитьКолонкуРезервПоРезервамНаСервере()

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбораДоговора(Документ, Организация, Контрагент, Договор, ВидОперации)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеДоговора(ДанныеДоговора = Неопределено)
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.Договор;
	
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		Если ДанныеДоговора = Неопределено Тогда
			
			ДанныеДоговора = ПолучитьДанныеДоговорПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.Договор, Объект.Контрагент);
			
		КонецЕсли;
		
		Если Объект.СпособЗачетаПредоплаты <> ДанныеДоговора.СпособЗачетаПредоплаты Тогда
			Объект.СпособЗачетаПредоплаты = ДанныеДоговора.СпособЗачетаПредоплаты;
			СпособЗачетаПредоплатыПриИзмененииНаСервере();
		КонецЕсли;
		
		ПечатьДокументовУНФКлиент.ПриИзмененииДоговораКонтрагента(Объект.Договор, Объект.ОснованиеПечатиСсылка, Объект.ОснованиеПечати, КэшЗначений);
		
		Если Объект.Предоплата.Количество() > 0 Тогда
			
			ПараметрыДокумента = Новый Структура;
			ПараметрыДокумента.Вставить("ДоговорПередИзменением", ДоговорПередИзменением);
			ПараметрыДокумента.Вставить("ДанныеДоговора", ДанныеДоговора);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОбОчисткеПредоплатыЗавершение", ЭтотОбъект, ПараметрыДокумента);
			ТекстВопроса = НСтр("ru = 'Зачет предоплаты будет очищен, продолжить?'");
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
		ОбработатьИзменениеУсловийДоговора(ДанныеДоговора, ДоговорПередИзменением);
		ЗаполнитьТаблицуПросмотраНаКлиенте();
		
		// Номенклатура.
		УстановитьПараметрыВыбораНоменклатуры();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОбОчисткеПредоплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДоговорПередИзменением = ДополнительныеПараметры.ДоговорПередИзменением;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Предоплата.Очистить();
	Иначе
		Если ДополнительныеПараметры.Свойство("ИзменениеКонтрагента") Тогда
			Объект.Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
			Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
			КонтрагентВестиРасчетыПоЗаказам = ДополнительныеПараметры.КонтрагентВестиРасчетыПоЗаказамПередИзменением;
			Элементы.Договор.Видимость = ДополнительныеПараметры.ВидимостьДоговораПередИзменением;
		КонецЕсли;
		Объект.Договор = ДоговорПередИзменением;
		Договор = ДоговорПередИзменением;
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеУсловийДоговора(ДополнительныеПараметры.ДанныеДоговора, ДоговорПередИзменением);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеУсловийДоговора(ДанныеДоговора, ДоговорПередИзменением)
	
	ЗаполнитьОснованиеПечатиНаКлиенте(ДоговорПередИзменением, ДанныеДоговора);
	
	ИзменилсяВидЦен = Объект.ВидЦен <> ДанныеДоговора.ВидЦен И ЗначениеЗаполнено(ДанныеДоговора.ВидЦен);
	ИзменилсяВидСкидки = Объект.ВидСкидкиНаценки <> ДанныеДоговора.ВидСкидкиНаценки;
	
	Если ДанныеДоговора.Свойство("ВызовИзПроцедурыПриИзмененииКонтрагента") Тогда
		
		// В дальнейшем реквизит ДисконтнаяКрата будет очищен.
		ОчиститьДисконтнуюКарту = ЗначениеЗаполнено(Объект.ДисконтнаяКарта)
			И ДисконтныеКартыУНФВызовСервера.НужноОчиститьДисконтнуюКартуПриСменеВладельца(
				Объект.Контрагент,
				Объект.ДисконтнаяКарта,
				ДанныеДоговора.ПустойКонтрагентПередИзменением);
		
	Иначе
		
		ОчиститьДисконтнуюКарту = Ложь;
		
	КонецЕсли;
	
	ВопросВидЦен = (ЗначениеЗаполнено(Объект.Договор) И (ИзменилсяВидЦен ИЛИ ИзменилсяВидСкидки));
	
	ВалютаРасчетовПередИзменением = ВалютаРасчетов;
	ВалютаРасчетов = ДанныеДоговора.ВалютаРасчетов;
	
	НовыйДоговорИВалютаРасчетов = ЗначениеЗаполнено(Объект.Договор) И ЗначениеЗаполнено(ВалютаРасчетов) 
									И Объект.Договор <> ДоговорПередИзменением И ВалютаРасчетовПередИзменением <> ДанныеДоговора.ВалютаРасчетов;
	ОткрытьФормуЦеныИВалюты = НовыйДоговорИВалютаРасчетов И Объект.ВалютаДокумента <> ДанныеДоговора.ВалютаРасчетов
		И (Объект.Запасы.Количество() > 0 ИЛИ Объект.Работы.Количество() > 0);
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ДоговорПередИзменением", ДоговорПередИзменением);
	ПараметрыДокумента.Вставить("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением);
	ПараметрыДокумента.Вставить("ДанныеДоговора", ДанныеДоговора);
	ПараметрыДокумента.Вставить("ВопросВидЦен", ВопросВидЦен);
	ПараметрыДокумента.Вставить("ОткрытьФормуЦеныИВалюты", ОткрытьФормуЦеныИВалюты);
	ПараметрыДокумента.Вставить("ИзменилсяВидЦен", ИзменилсяВидЦен);
	ПараметрыДокумента.Вставить("ИзменилсяВидСкидки", ИзменилсяВидСкидки);
	ПараметрыДокумента.Вставить("ОчиститьДисконтнуюКарту", ОчиститьДисконтнуюКарту);
	ПараметрыДокумента.Вставить("ПересчетНеобходимПоЗапасам", Объект.Запасы.Количество() > 0);
	ПараметрыДокумента.Вставить("ПересчетНеобходимПоРаботам", Объект.Работы.Количество() > 0);
	
	ОбработатьИзменениеВидаЦенИВалютыРасчетов(ПараметрыДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИОстаткиВзаиморасчетов()
	
	Элементы.ОстатокВзаиморасчетов.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.ЗНКонтрагент.АвтоМаксимальнаяШирина = НЕ Элементы.ОстатокВзаиморасчетов.Видимость;
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() И НЕ Элементы.ОстатокВзаиморасчетов.Видимость Тогда
		Элементы.ОстатокВзаиморасчетовСтраницаОплата.Видимость = Ложь;
		Возврат;
	Иначе
		Элементы.ОстатокВзаиморасчетовСтраницаОплата.Видимость = НЕ Элементы.ОстатокВзаиморасчетов.Видимость И НЕ Объект.Контрагент.Ссылка.Пустая();
	КонецЕсли;
	
	Элементы.ОстатокВзаиморасчетов.Заголовок = РаботаСКонтрагентамиУНФ.ЗаголовокНадписиВзаиморасчетов(Объект.Контрагент);
	Элементы.ОстатокВзаиморасчетовСтраницаОплата.Заголовок = Элементы.ОстатокВзаиморасчетов.Заголовок;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРежимРаботаГТД(Ключ, ИмяТабличнойЧасти)
	
	НеизменяемыеРеквизиты = Новый Массив;
	НеизменяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + "Пометка");
	НеизменяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + "НомерСтроки");
	НеизменяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + "Номенклатура");
	НеизменяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + "Характеристика");
	НеизменяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + "Партия");
	НеизменяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + "Количество");
	НеизменяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + "ЕдиницаИзмерения");
	НеизменяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + "СтранаПроисхождения");
	НеизменяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + "НомерГТД");
	
	Если ИмяТабличнойЧасти = "Запасы" Тогда
		
		НеизменяемыеРеквизиты.Добавить("ЗапасыГруппаНоменклатура");
		НеизменяемыеРеквизиты.Добавить("ЗапасыНоменклатураСсылка");
		
	КонецЕсли;
	
	Для каждого ЭлементФормы Из Элементы[ИмяТабличнойЧасти].ПодчиненныеЭлементы Цикл
		
		Если НеизменяемыеРеквизиты.Найти(ЭлементФормы.Имя) = Неопределено
			И ЭлементФормы.Видимость = Истина Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементФормы.Имя, "Видимость", Ложь);
			КэшЗначений[Ключ].Добавить(ЭлементФормы.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяТабличнойЧасти + "ЕдиницаИзмерения", "Доступность", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьРежимРаботаГТД(Ключ, ИмяТабличнойЧасти)
	
	Для каждого ИмяЭлементаФормы Из КэшЗначений[Ключ] Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлементаФормы, "Видимость", Истина);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяТабличнойЧасти + "ЕдиницаИзмерения", "Доступность", Истина);
	
	КэшЗначений[Ключ] = Новый Массив;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимРаботаГТД(ВключитьРежимГТД, ИмяТабличнойЧасти)
	
	Если КэшЗначений = Неопределено Тогда
		
		КэшЗначений = Новый Структура;
		
	КонецЕсли;
	
	Ключ = "ОбрабатываемыеРеквизиты" + ИмяТабличнойЧасти;
	
	Если НЕ КэшЗначений.Свойство(Ключ) Тогда
		
		КэшЗначений.Вставить(Ключ, Новый Массив);
		
	КонецЕсли;
	
	Если ВключитьРежимГТД Тогда
		
		ВключитьРежимРаботаГТД(Ключ, ИмяТабличнойЧасти);
		
	Иначе
		
		ВыключитьРежимРаботаГТД(Ключ, ИмяТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗНМатериалыПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии, МассивСтрок = Неопределено)
	
	ТаблицаДляЗагрузки = ?(Не МассивСтрок = Неопределено, МассивСтрок, ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище));
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект.Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		Если Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке И РазрешитьСкладыВТабличныхЧастях Тогда
			Если ЗначениеЗаполнено(СтрокаЗагрузки.СтруктурнаяЕдиница) И Не СтрокаЗагрузки.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаРезерв Тогда
				Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
				УстановитьВидимостьОтПользовательскихНастроек(Объект, ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
			
		ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиницаРезерв", "ПоложениеСклада");
		ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Ячейка", "ПоложениеСклада");
		НоваяСтрока.КлючСвязи = Элементы.ЗНМатериалы.ОтборСтрок["КлючСвязи"];
		
		НоваяСтрока.РезервОтгрузка = НоваяСтрока.Резерв;
		
		// Характеристики
		СтруктураДанныеНоменклатуры = Новый Структура();
		СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
		СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
		СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
		
		СтатусПартии = Новый СписокЗначений;
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		
		СтруктураДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии);
		
		СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанныеНоменклатуры);

		ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры);

		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
		
		НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
		
		Если СтруктураДанные.ИспользоватьХарактеристики
			Тогда
			НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
		// Конец Характеристики
		
		//Партии
		НоваяСтрока.ИспользоватьПартии = СтрокаЗагрузки.Номенклатура.ИспользоватьПартии;
		НоваяСтрока.ПроверятьЗаполнениеПартий = СтрокаЗагрузки.Номенклатура.ПроверятьЗаполнениеПартий;
		
		ЗначенияПартииПоУмолчанию = ?(СтруктураДанные.Свойство("Партия"), СтруктураДанные.Партия, Неопределено);
		
		НоваяСтрока.Партия = ?(ЗначениеЗаполнено(СтрокаЗагрузки.Партия), СтрокаЗагрузки.Партия, ЗначенияПартииПоУмолчанию);
		// Конец Партии
		
		НоваяСтрока.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
		
		НоваяСтрока.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
		НоваяСтрока.НомерГТД = СтруктураДанные.НомерГТД;
		
		Если Объект.ПоложениеСклада=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
			НоваяСтрока.СтруктурнаяЕдиницаРезерв = СтруктураДанные.Склад;
		Иначе
			НоваяСтрока.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
		КонецЕсли; 
			
	КонецЦикла;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	КонецЕсли;
	
	ЗаполнитьНомераСтрокТаблицаМатериалы(Объект.Материалы);
	
КонецПроцедуры

&НаСервере
Процедура ВидЗаказаПриИзмененииСервер()
	
	ЭтотОбъект.ЗаказНарядВСостоянииВыполнения = СостоянияЗаказовВызовСервера.ЭтоСостояниеВыполненияЗаказНаряда(Объект.СостояниеЗаказа, Объект.ВидЗаказа);
	Объект.СостояниеЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказНаряда(Объект.ВидЗаказа);
	
КонецПроцедуры

// @skip-warning обработчик ожидания см. СостояниеЗаказаПриИзменении
&НаКлиенте
Процедура УстановитьТекущейСтраницейЗавершениеЗаказа()
	
	Элементы.ЗНСтраницы.ТекущаяСтраница = Элементы.СтраницаЗавершениеЗаказа;
	
КонецПроцедуры

&НаСервере
Процедура ЗаменитьКоманду(Идентификатор, ИмяКоманды)
	
	Если НЕ ПараметрыПодключаемыхКоманд.Свойство("АдресТаблицыКоманд") ИЛИ НЕ ЭтоАдресВременногоХранилища(ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд) Тогда
		Возврат;
	КонецЕсли; 
	КомандыПечати = ПолучитьИзВременногоХранилища(ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Идентификатор", Идентификатор);
	Строки = КомандыПечати.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()>0 Тогда
		СтароеИмяКоманды = Строки[0].ИмяВФорме;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, СтароеИмяКоманды, "Видимость", Ложь);
		Строки[0].ИмяВФорме = ИмяКоманды;
		ПоместитьВоВременноеХранилище(КомандыПечати, ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяКоманды, "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ТипНоменклатурыЗапас", Ложь);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗапасыРезерв.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗапасыСтруктурнаяЕдиницаРезерв.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ТекстВторостепеннойНадписи);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Для товаров>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	
	// Наборы
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.НоменклатураНабора", Справочники.Номенклатура.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыНоменклатура,ЗапасыХарактеристика,ЗапасыКоличество,ЗапасыЕдиницаИзмерения");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Работы.НоменклатураНабора", Справочники.Номенклатура.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗНРаботыНоменклатура,ЗНРаботыХарактеристика,ЗНРаботыКоличество,ЗНРаботыКратность,ЗНРаботыКоэффициент");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	// Конец Наборы
	
	// 8. Скидки Запасы
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ГруппаОтборов = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Объект.Запасы.ПроцентСкидкиНаценки", 100);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Объект.Запасы.СуммаСкидкиНаценки", Новый ПолеКомпоновкиДанных("Объект.Запасы.Сумма"),ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСумма");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ПроцентСкидкиНаценки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыПроцентСкидкиНаценки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "%");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.СуммаСкидкиНаценки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСуммаСкидкиНаценки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "сумма");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ПроцентАвтоматическойСкидки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыПроцентАвтоматическойСкидки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "%");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.СуммаАвтоматическойСкидки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСуммаАвтоматическойСкидки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "сумма");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);	
	
	// 8.1.Скидки Работы
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ГруппаОтборов = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Объект.Работы.ПроцентСкидкиНаценки", 100);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Объект.Работы.СуммаСкидкиНаценки", Новый ПолеКомпоновкиДанных("Объект.Работы.Сумма"), ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗНРаботыСумма");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Работы.ПроцентСкидкиНаценки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗНРаботыПроцентСкидкиНаценки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "%");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Работы.СуммаСкидкиНаценки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗНРаботыСуммаСкидкиНаценки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "сумма");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Работы.ПроцентАвтоматическойСкидки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗНРаботыПроцентАвтоматическойСкидки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "%");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Работы.СуммаАвтоматическойСкидки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗНРаботыСуммаАвтоматическойСкидки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "сумма");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);	
	// Конец Скидки
	
	// Характеристики
	СоответствиеИменТабличныхЧастей = Новый Соответствие;
	
	СоответствиеИменТабличныхЧастей.Вставить("Работы","ЗНРаботыХарактеристика");
	СоответствиеИменТабличныхЧастей.Вставить("ЗНМатериалы","");
	СоответствиеИменТабличныхЧастей.Вставить("Запасы",);	
	СоответствиеИменТабличныхЧастей.Вставить("ЗНМатериалыЗаказчика","");
	
	НоменклатураВДокументахСервер.ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик(ЭтаФорма, СоответствиеИменТабличныхЧастей);
	
	// Взаиморасчеты
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(
		НовоеУсловноеОформление.Отбор,
		"Объект.Предоплата.ЭтоПредоплатаБезЗаказа",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно
	);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПредоплатаЗаказ");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<текущий документ>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(
		НовоеУсловноеОформление.Отбор,
		"Объект.Предоплата.ЭтоПредоплатаБезЗаказа",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно
	);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПредоплатаЗаказ");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = ''")); // Нужно, чтобы отображение было такое же, как в других документах.
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	// Конец Взаиморасчеты
	
	//Ресурсы
	ПланированиеРесурсовУНФ.УстановитьУсловноеОформлениеРесурсы("РесурсыПредприятия", ЭтотОбъект, Истина);
	
	// Ячейки
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ЯчейкаДоступна", Ложь);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЯчейка");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Материалы.ЯчейкаДоступна", Ложь);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗНМатериалыЯчейка");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	
	// Остатки и резервы
	НоменклатураВДокументахСервер.УстановитьУсловноеОформлениеЗапасыИРезервы(ЭтаФорма, "Запасы", "ЗаказНаряд");
	НоменклатураВДокументахСервер.УстановитьУсловноеОформлениеЗапасыИРезервы(ЭтаФорма, "Материалы", "ЗаказНаряд");

	// Минимальные цены 	
	Использование = ?(КэшЗначений.Свойство("ИспользоватьМинимальныеЦены"), КэшЗначений.ИспользоватьМинимальныеЦены, Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"Объект.Запасы.Цена", 
		Новый ПолеКомпоновкиДанных("Объект.Запасы.МинимальнаяЦена"), ВидСравненияКомпоновкиДанных.Меньше); 		
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЦена");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", WebЦвета.Красный);	
	НовоеУсловноеОформление.Использование = Использование;
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"Объект.Работы.Цена", 
		Новый ПолеКомпоновкиДанных("Объект.Работы.МинимальнаяЦена"), ВидСравненияКомпоновкиДанных.Меньше); 		
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗНРаботыЦена");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", WebЦвета.Красный);	
	НовоеУсловноеОформление.Использование = Использование;

КонецПроцедуры

&НаСервере
Процедура ДействияПослеЧтенияОбъекта()
	
	Если ТипЗнч(КэшЗначений) <> Тип("Структура") Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	КэшЗначений.Вставить("УчетПоЯчейкам", ПолучитьФункциональнуюОпцию("УчетПоЯчейкам"));
	
	ЗаполнитьСлужебныеПоляТабличнойЧасти(Объект.Запасы, Объект.Работы);	
	ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.Работы, Объект.ДобавленныеНаборы);

	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	ЗаполнитьНомераСтрокТаблицаМатериалы(Объект.Материалы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСлужебныеПоляТабличнойЧасти(Запасы, Работы)
	
	МассивНоменклатуры = Новый Массив;
	Для каждого Стр Из Запасы Цикл
		МассивНоменклатуры.Добавить(Стр.Номенклатура);
	КонецЦикла;
	Для каждого Стр Из Работы Цикл
		МассивНоменклатуры.Добавить(Стр.Номенклатура);
	КонецЦикла;
	
	Если МассивНоменклатуры.Количество()>0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.ЭтоНабор КАК ЭтоНабор,
		|	ВЫБОР
		|		КОГДА Номенклатура.ФиксированнаяСтоимость
		|				ИЛИ НЕ Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ФиксированнаяСтоимость
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)";
		Выборка = Запрос.Выполнить().Выбрать();
		НоменклатураНабор = Новый Соответствие;
		НоменклатураФиксированнаяСтоимость = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			НоменклатураНабор.Вставить(Выборка.Ссылка, Выборка.ЭтоНабор);	
			НоменклатураФиксированнаяСтоимость.Вставить(Выборка.Ссылка, Выборка.ФиксированнаяСтоимость);	
		КонецЦикла; 
		
		Для каждого Стр Из Запасы Цикл
			Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) ИЛИ ЗначениеЗаполнено(Стр.НоменклатураНабора) ИЛИ ТипЗнч(Стр.Номенклатура)<>Тип("СправочникСсылка.Номенклатура") Тогда
				Стр.ЭтоНабор = Ложь;
			Иначе
				Стр.ЭтоНабор = НоменклатураНабор.Получить(Стр.Номенклатура);
			КонецЕсли;
		КонецЦикла; 
		Для каждого Стр Из Работы Цикл
			Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) ИЛИ ЗначениеЗаполнено(Стр.НоменклатураНабора) Тогда
				Стр.ЭтоНабор = Ложь;
			Иначе
				Стр.ЭтоНабор = НоменклатураНабор.Получить(Стр.Номенклатура);
			КонецЕсли;
			Стр.ФиксированнаяСтоимость = НоменклатураФиксированнаяСтоимость.Получить(Стр.Номенклатура);
		КонецЦикла; 
	КонецЕсли; 
	
	Для каждого Строка Из Запасы Цикл
		Строка.НоменклатураСсылка = Строка.Номенклатура;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьВидимостьИУстановитьНастройкиУчетаВНалогообложении()
	
	ВидимостьГруппыУчетВНУДоИзменения = Элементы.ГруппаУчетВНУ.Видимость;
	
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда
		Элементы.ГруппаУчетВНУ.Видимость = Ложь;
		
		Возврат;
	Иначе
		Элементы.ГруппаУчетВНУ.Видимость = Истина;
	КонецЕсли;
	
	СистемаНалогообложенияСтруктура = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(Объект.Организация, Объект.Дата);
	
	Если Не СистемаНалогообложенияСтруктура.ПлательщикУСН Тогда
		Элементы.ГруппаУчетВНУ.Видимость = Ложь;
	Иначе
		Элементы.ГруппаУчетВНУ.Видимость = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И СистемаНалогообложенияСтруктура.ПлательщикУСН И СистемаНалогообложенияСтруктура.ПлательщикЕНВД Тогда
		Объект.УчитыватьВНУ = НЕ (Объект.Организация.ВидУчетаСтраховыхВзносов = Перечисления.ВидыУчетаСтраховыхВзносов.УчитыватьВЕНВД);
	КонецЕсли;
	
	ГруппаУчетВНУСталаВидимой = Не ВидимостьГруппыУчетВНУДоИзменения И Элементы.ГруппаУчетВНУ.Видимость;
	ГруппаУчетВНУСталаНевидимой = ВидимостьГруппыУчетВНУДоИзменения И Не Элементы.ГруппаУчетВНУ.Видимость;
	Если Объект.УчитыватьВНУ
		И ((НЕ Элементы.ГруппаУчетВНУ.Видимость И Объект.Ссылка.Пустая())
		Или ГруппаУчетВНУСталаНевидимой) Тогда
		Объект.УчитыватьВНУ = Ложь;
		Модифицированность = Истина;
	ИначеЕсли ГруппаУчетВНУСталаВидимой И Не Объект.УчитыватьВНУ Тогда
		Объект.УчитыватьВНУ = Истина;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиУчетаВНалогообложении()
	
	ОпределитьВидимостьИУстановитьНастройкиУчетаВНалогообложении();
	Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация,,Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьЦенуСертификата(Результат, ВыбраннаяСтрока) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ВыбраннаяСтрока.Цена = Результат;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НомераГТДЗаполнитьПоФактическимОстаткамНаСервере(ЭтоКонтекстныйВызов, ИмяТабличнойЧасти)
	
	ИмяЭлемента			= ?(ИмяТабличнойЧасти = "Запасы", "Запасы", "ЗНМатериалы");
	ИмяТаблицыОбъекта	= ?(ИмяТабличнойЧасти = "Запасы", "Запасы", "Материалы");
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ТаблицаЗапасы", Неопределено);
	ПараметрыПодбора.Вставить("ОстаткиПоГТД", Неопределено);
	ПараметрыПодбора.Вставить("ПоддержкаИнтеркампани", Истина);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("ИндексТекущейСтроки", ?(ЗначениеЗаполнено(Элементы[ИмяЭлемента].ТекущаяСтрока), Объект[ИмяТаблицыОбъекта].Индекс(Объект[ИмяТаблицыОбъекта].НайтиПоИдентификатору(Элементы[ИмяЭлемента].ТекущаяСтрока)), 0));
	ПараметрыПодбора.Вставить("ЕстьКлючСвязиАвтоматическихСкидок", Неопределено);
	ПараметрыПодбора.Вставить("ИменаПолей", Новый Массив);
	
	Если ИмяТаблицыОбъекта = "Запасы" Тогда
		
		Если НЕ ЭтоКонтекстныйВызов Тогда
			
			ПараметрыПодбора.Вставить("ПроверятьПометку", Истина);
			
		КонецЕсли;
		
		ПараметрыПодбора.ИменаПолей.Добавить("Резерв");
		ПараметрыПодбора.ИменаПолей.Добавить("Сумма");
		ПараметрыПодбора.ИменаПолей.Добавить("СуммаНДС");
		ПараметрыПодбора.ИменаПолей.Добавить("Всего");
		
	КонецЕсли;
	
	ГрузовыеТаможенныеДекларацииСервер.ПодготовитьТаблицуЗапасовИзТаблицыФормы(ПараметрыПодбора, Объект[ИмяТаблицыОбъекта]);
	ГрузовыеТаможенныеДекларацииСервер.СформироватьОстаткиНомеровГТД(ПараметрыПодбора);
	ГрузовыеТаможенныеДекларацииСервер.ПеренестиОстаткиНомеровГТДВТаблицуФормы(Объект[ИмяТаблицыОбъекта], ПараметрыПодбора);
	
	Если ПараметрыПодбора.ИндексТекущейСтроки <> -1 Тогда
		
		СтрокаКоллекции = Объект[ИмяТаблицыОбъекта].Получить(ПараметрыПодбора.ИндексТекущейСтроки);
		Элементы[ИмяЭлемента].ТекущаяСтрока = СтрокаКоллекции.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НомераГТДПодобратьНаСервере(ЭтоКонтекстныйВызов, ИмяТабличнойЧасти)
	
	ИмяТаблицыОбъекта	= ?(ИмяТабличнойЧасти = "Запасы", "Запасы", "Материалы");
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ТаблицаЗапасы", Неопределено);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("ПоддержкаИнтеркампани", Истина);
	
	Если НЕ ЭтоКонтекстныйВызов
		И ИмяТаблицыОбъекта = "Запасы" Тогда
		
		ПараметрыПодбора.Вставить("ПроверятьПометку", Истина);
		
	КонецЕсли;
	
	ГрузовыеТаможенныеДекларацииСервер.ПодготовитьТаблицуЗапасовИзТаблицыФормы(ПараметрыПодбора, Объект[ИмяТаблицыОбъекта]);
	ГрузовыеТаможенныеДекларацииСервер.ПодобратьНомераГТДПоПредыдущимПоступлениям(ПараметрыПодбора);
	ГрузовыеТаможенныеДекларацииСервер.ПеренестиНомераГТДВТаблицуФормы(Объект[ИмяТаблицыОбъекта], ПараметрыПодбора);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКартинкуДисконтнойКарты()
	
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		Команды.СчитатьДисконтнуюКарту.Картинка = БиблиотекаКартинок.СчитанаДисконтнаяКарта;
	Иначе
		Команды.СчитатьДисконтнуюКарту.Картинка = БиблиотекаКартинок.СчитатьДисконтнуюКарту;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНомераСтрокТаблицаМатериалы(Материалы)
	
	ТекущиеНомераСтрок = Новый Соответствие;
	Для каждого СтрокаТабличнойЧасти Из Материалы Цикл
		ПоследнийНомер = ТекущиеНомераСтрок.Получить(СтрокаТабличнойЧасти.КлючСвязи);
		Если ПоследнийНомер=Неопределено Тогда
			ПоследнийНомер = 0;
		КонецЕсли; 
		ПоследнийНомер = ПоследнийНомер + 1;
		СтрокаТабличнойЧасти.НомерСтрокиВнутренний = ПоследнийНомер;
		ТекущиеНомераСтрок.Вставить(СтрокаТабличнойЧасти.КлючСвязи, ПоследнийНомер);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьКорректировкиПоДокументу(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаРеализации.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|ГДЕ
		|	КорректировкаРеализации.ДокументОснование = &ДокументОснование
		|	И НЕ КорректировкаРеализации.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

&НаСервере
Функция СтруктурнаяЕдиницаИЯчейкаДляШапки(ТабличнаяЧасть)
	
	Результат = Новый Структура;
	Результат.Вставить("СтруктурнаяЕдиницаРезерв", Неопределено);
	Результат.Вставить("Ячейка", Неопределено);
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.СтруктурнаяЕдиницаРезерв = ТабличнаяЧасть[0].СтруктурнаяЕдиницаРезерв;
	Результат.Ячейка = ТабличнаяЧасть[0].Ячейка;
	
	Если ТабличнаяЧасть.Количество() = 1 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТаблицаСтруктурныеЕдиницыИЯчейки = ТабличнаяЧасть.Выгрузить(, "СтруктурнаяЕдиницаРезерв, Ячейка");
	ТаблицаСтруктурныеЕдиницыИЯчейки.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Для Каждого ТекСтрока Из ТаблицаСтруктурныеЕдиницыИЯчейки Цикл
		ТекСтрока.Количество = 1;
	КонецЦикла;
	ТаблицаСтруктурныеЕдиницыИЯчейки.Свернуть("СтруктурнаяЕдиницаРезерв, Ячейка", "Количество");
	
	Если ТаблицаСтруктурныеЕдиницыИЯчейки.Количество() < 2 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТаблицаСтруктурныеЕдиницыИЯчейки.Сортировать("Количество Убыв");
	
	Если ТаблицаСтруктурныеЕдиницыИЯчейки[0].Количество = ТаблицаСтруктурныеЕдиницыИЯчейки[1].Количество Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.СтруктурнаяЕдиницаРезерв = ТаблицаСтруктурныеЕдиницыИЯчейки[0].СтруктурнаяЕдиницаРезерв;
	Результат.Ячейка = ТаблицаСтруктурныеЕдиницыИЯчейки[0].Ячейка;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстСодержания(Знач Номенклатура, Знач Характеристика)
	Возврат ТабличныеЧастиУНФ.ТекстСодержания(Номенклатура, Характеристика);
КонецФункции

&НаСервереБезКонтекста
Функция СпецификацияПоУмолчанию(Знач Номенклатура, Знач Характеристика)
	Возврат Справочники.Спецификации.СпецификацияПоУмолчанию(Номенклатура, Характеристика);
КонецФункции

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") 
		И РезультатЗакрытия.БылиВнесеныИзменения Тогда
		
		Модифицированность = Истина;
		
		Если Объект.ВалютаДокумента <> РезультатЗакрытия.ВалютаДокумента Тогда
			
			Объект.БанковскийСчет = Неопределено;
			
		КонецЕсли;
		
		Объект.ВидЦен = РезультатЗакрытия.ВидЦен;
		Объект.ВидСкидкиНаценки = РезультатЗакрытия.ВидСкидки;
		// ДисконтныеКарты
		Если ЗначениеЗаполнено(РезультатЗакрытия.ДисконтнаяКарта) И ЗначениеЗаполнено(РезультатЗакрытия.Контрагент) И Не Объект.Контрагент.Пустая() Тогда
			Если РезультатЗакрытия.Контрагент = Объект.Контрагент Тогда
				Объект.ДисконтнаяКарта = РезультатЗакрытия.ДисконтнаяКарта;
				Объект.ПроцентСкидкиПоДисконтнойКарте = РезультатЗакрытия.ПроцентСкидкиПоДисконтнойКарте;
			Иначе // Выдадим сообщение и не будем менять данные о дисконтной карте.
				ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Дисконтная карта не считана. Владелец дисконтной карты не совпадает с контрагентом в документе.'"),
				,
				"Контрагент",
				"Объект");
			КонецЕсли;
		Иначе
			Объект.ДисконтнаяКарта = РезультатЗакрытия.ДисконтнаяКарта;
			Объект.ПроцентСкидкиПоДисконтнойКарте = РезультатЗакрытия.ПроцентСкидкиПоДисконтнойКарте;
		КонецЕсли;
		ОбновитьКартинкуДисконтнойКарты();
		// Конец ДисконтныеКарты
		Объект.ВалютаДокумента = РезультатЗакрытия.ВалютаДокумента;
		Объект.Курс = РезультатЗакрытия.КурсРасчетов;
		Объект.Кратность = РезультатЗакрытия.КратностьРасчетов;
		Объект.СуммаВключаетНДС = РезультатЗакрытия.СуммаВключаетНДС;
		Объект.НДСВключатьВСтоимость = РезультатЗакрытия.НДСВключатьВСтоимость;
		Объект.НалогообложениеНДС = РезультатЗакрытия.НалогообложениеНДС;
		Объект.СпециальныйНалоговыйРежим = РезультатЗакрытия.СпециальныйНалоговыйРежим;
		ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
		
		// Пересчитываем цены по виду цен.
		Если РезультатЗакрытия.ПерезаполнитьЦены Тогда
			
			ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, "Запасы", Истина);
			ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен();
			
		КонецЕсли;
		
		// Пересчитываем цены по валюте.
		Если НЕ РезультатЗакрытия.ПерезаполнитьЦены
			И РезультатЗакрытия.ПересчитатьЦены Тогда
			
			ЦенообразованиеКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект, ВалютаРасчетовПередИзменением, "Запасы", РезультатЗакрытия.КурсПересчетаЦен);
			ЦенообразованиеКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект, ВалютаРасчетовПередИзменением, "Работы", РезультатЗакрытия.КурсПересчетаЦен);
			
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак Налогообложение НДС.
		Если РезультатЗакрытия.НалогообложениеНДС <> РезультатЗакрытия.ПредНалогообложениеНДС Тогда
			
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
			
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если НЕ РезультатЗакрытия.ПерезаполнитьЦены
			И НЕ РезультатЗакрытия.СуммаВключаетНДС = РезультатЗакрытия.ПредСуммаВключаетНДС Тогда
			
			ЦенообразованиеКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтотОбъект, "Запасы");
			ЦенообразованиеКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтотОбъект, "Работы");
			
		КонецЕсли;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			
			СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
				СтрокаТабличнойЧасти.СуммаРасчетов,
				СтрокаТабличнойЧасти.Курс,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
				СтрокаТабличнойЧасти.Кратность,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КратностьНациональнаяВалюта, Объект.Кратность));
				
		КонецЦикла;
		
		// Сформируем надпись цены и валюты.
		СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте",
			Объект.ВидЦен,
			Объект.ВидСкидкиНаценки,
			Объект.ВалютаДокумента,
			ВалютаРасчетов,
			Объект.Курс,
			КурсНациональнаяВалюта,
			Объект.СуммаВключаетНДС,
			УчетВалютныхОпераций,
			Объект.НалогообложениеНДС,
			Объект.СпециальныйНалоговыйРежим,
			Объект.ДисконтнаяКарта, 
			Объект.ПроцентСкидкиПоДисконтнойКарте);
			
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
		// АвтоматическиеСкидки
		Если РезультатЗакрытия.ПерезаполнитьСкидки ИЛИ РезультатЗакрытия.ПерезаполнитьЦены ИЛИ РезультатЗакрытия.ПересчитатьЦены Тогда
			СброситьФлагСкидкиРассчитаныКлиент("ПерезаполнениеПоДаннымФормыЦеныИВалюта");
		КонецЕсли;
		
		// Ручная скидка - заполнение полей ввода на форме
		РассчитатьСуммуИПроцентСкидкиРаботыЗапасы(Объект, СкидкаСумма, СкидкаПроцент);
		// Конец Ручная скидка	
		
	КонецЕсли;
	
	ПересчитатьПлатежныйКалендарь();
	ОбновитьПодвалФормы();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // ОткрытьФормуЦеныИВалютаЗавершение()

&НаКлиенте
Процедура ОпределитьНеобходимостьУстановкиНовогоКурсаВалюты(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		
		Объект.Курс = ДополнительныеПараметры.КурсНовый;
		Объект.Кратность = ДополнительныеПараметры.КратностьНовый;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			
			СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
				СтрокаТабличнойЧасти.СуммаРасчетов,
				СтрокаТабличнойЧасти.Курс,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
				СтрокаТабличнойЧасти.Кратность,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КратностьНациональнаяВалюта, Объект.Кратность));  
			
		КонецЦикла;
		
		СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", 
			Объект.ВидЦен, 
			Объект.ВидСкидкиНаценки, 
			Объект.ВалютаДокумента, 
			ВалютаРасчетов, 
			Объект.Курс, 
			КурсНациональнаяВалюта, 
			Объект.СуммаВключаетНДС, 
			УчетВалютныхОпераций, 
			Объект.НалогообложениеНДС, 
			Объект.СпециальныйНалоговыйРежим,
			Объект.ДисконтнаяКарта, 
			Объект.ПроцентСкидкиПоДисконтнойКарте
			);
		
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьНеобходимостьУстановкиНовогоКурсаВалюты()

&НаКлиенте
Процедура ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	Если ДополнительныеПараметры.ПересчетНеобходимПоЗапасам Тогда

		ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, "Запасы", Истина);

	КонецЕсли;

	Если ДополнительныеПараметры.ПересчетНеобходимПоРаботам Тогда

		ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен();

	КонецЕсли;

	ПересчитатьПлатежныйКалендарь();
	ОбновитьПодвалФормы();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВозможностьРедактированияСпискомЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Пока Объект.ПлатежныйКалендарь.Количество() > 1 Цикл
		Объект.ПлатежныйКалендарь.Удалить(Объект.ПлатежныйКалендарь.Количество()-1);
	КонецЦикла;
	
	Элементы.РедактироватьСписком.Пометка = НЕ Элементы.РедактироватьСписком.Пометка;
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПодбором

&НаКлиенте
Процедура ЗапасыПодбор(Команда)
	
	ИмяТабличнойЧасти = "Запасы";
	МаркерПодбора = "Запасы";
	
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры // ПодборВыполнить()

&НаКлиенте
Процедура РаботыПодбор(Команда)
	
	ИмяТабличнойЧасти = "Работы";
	МаркерПодбора = "Работы";
	
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры // ПодборВыполнить()

&НаКлиенте
Процедура МатериалыПодбор(Команда)
	
	ИмяТабличнойЧасти = "МатериалыЗаказчика";
	МаркерПодбора = "МатериалыЗаказчика";
	
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры // ПодборВыполнить()

&НаКлиенте
Процедура ЗаписатьОшибкуЧтенияДанныхИзХранилища()
	
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации("Ошибка", , ТекстОшибкиЖурналаРегистрации);
	
КонецПроцедуры // ЗаписатьОшибкуЧтенияДанныхИзХранилища()

&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии, МассивСтрок = Неопределено)
	
	ТаблицаДляЗагрузки = ?(Не МассивСтрок = Неопределено, МассивСтрок, ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище));
	
	Если НЕ (ТипЗнч(ТаблицаДляЗагрузки) = Тип("ТаблицаЗначений")
		ИЛИ ТипЗнч(ТаблицаДляЗагрузки) = Тип("Массив")) Тогда
		
		ТекстОшибкиЖурналаРегистрации = "Несоответствие типа переданного в документ из подбора [" + ТипЗнч(ТаблицаДляЗагрузки) + "].
				|Адрес запасов в хранилище: " + СокрЛП(АдресЗапасовВХранилище) + "
				|Имя табличной части: " + СокрЛП(ИмяТабличнойЧасти);
		
		Возврат;
		
	Иначе
		
		ТекстОшибкиЖурналаРегистрации = "";
		
	КонецЕсли;
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		Если НоваяСтрока.Свойство("Пометка") Тогда
			НоваяСтрока.Пометка = Истина;
		КонецЕсли;
		
		Если НоваяСтрока.Свойство("Всего")
			И НЕ ЗначениеЗаполнено(НоваяСтрока.Всего) Тогда
			
			НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
			
		КонецЕсли;
		
		СтруктураДанныеНоменклатуры = Новый Структура();
		СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
		СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
		СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
		
		СтатусПартии = Новый СписокЗначений;
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
		
		СтруктураДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии);
		
		// Дозаполнение
		Если ИмяТабличнойЧасти = "Работы" Тогда
			
			НоваяСтрока.Кратность = 1;
			НоваяСтрока.Коэффициент = 1;
			
			ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "ВидРабот", "ПоложениеВидаРабот");			
			НоваяСтрока.КлючСвязи = ТабличныеЧастиУНФКлиентСервер.СоздатьНовыйКлючСвязи(ЭтотОбъект);
			
			Если ЗначениеЗаполнено(СтрокаЗагрузки.Номенклатура) Тогда
				
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаЗагрузки.Номенклатура, "ТипНоменклатуры, ЭтоНабор, СпособРасчетаЦеныНабора");
				
				СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
				СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ЗначенияРеквизитов.ТипНоменклатуры);
				СтруктураДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", СтрокаЗагрузки.ЕдиницаИзмерения);
				СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
				СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
				
				Если ЗначенияРеквизитов.ЭтоНабор Тогда
					
					// Наборы
					Если ЗначениеЗаполнено(НоваяСтрока.Цена) 
						И ЗначенияРеквизитов.СпособРасчетаЦеныНабора <> Перечисления.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих Тогда
						СтруктураДанныеНоменклатуры.Вставить("Цена", НоваяСтрока.Цена);
					КонецЕсли;
					Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
						СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
						СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
						СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
						СтруктураДанныеНоменклатуры.Вставить("ВидЦен", Объект.ВидЦен);
						СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
					КонецЕсли;
					
					// ДисконтныеКарты
					СтруктураДанныеНоменклатуры.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
					СтруктураДанныеНоменклатуры.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
					// Конец ДисконтныеКарты

					ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры);

					СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
					
					ЗаменитьСтрокуДаннымиНабора(ЭтотОбъект, ИмяТабличнойЧасти, НоваяСтрока, СтруктураДанные);
					
					Продолжить;
					// Конец Наборы
					
				Иначе
					
					НоваяСтрока.ТипНоменклатурыУслуга = (ЗначенияРеквизитов.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));

					ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры);

					СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
					
				КонецЕсли;
				
				// Характеристики
				НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
				НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
				НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
				
				Если СтруктураДанные.ИспользоватьХарактеристики
					Тогда
					НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
				КонецЕсли;
				// Конец Характеристики
				
			КонецЕсли;
			
		ИначеЕсли ИмяТабличнойЧасти = "Запасы" Тогда
			
			Если Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке И РазрешитьСкладыВТабличныхЧастях Тогда
				Если ЗначениеЗаполнено(СтрокаЗагрузки.СтруктурнаяЕдиница) И Не СтрокаЗагрузки.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаРезерв Тогда
					Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
					УстановитьВидимостьОтПользовательскихНастроек(Объект, ЭтотОбъект);
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиницаРезерв", "ПоложениеСклада");
			ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Ячейка", "ПоложениеСклада");
			
			Если ЗначениеЗаполнено(СтрокаЗагрузки.Номенклатура) Тогда
				
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаЗагрузки.Номенклатура, "ТипНоменклатуры, ЭтоНабор, СпособРасчетаЦеныНабора");
				
				СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
				Если ЗначенияРеквизитов.ЭтоНабор Тогда
					
					// Наборы
					СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
					СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ЗначенияРеквизитов.ТипНоменклатуры);
					СтруктураДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", СтрокаЗагрузки.ЕдиницаИзмерения);
					СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
					Если ЗначениеЗаполнено(НоваяСтрока.Цена) 
						И ЗначенияРеквизитов.СпособРасчетаЦеныНабора <> Перечисления.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих Тогда
						СтруктураДанныеНоменклатуры.Вставить("Цена", НоваяСтрока.Цена);
					КонецЕсли;
					Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
						СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
						СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
						СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
						СтруктураДанныеНоменклатуры.Вставить("ВидЦен", Объект.ВидЦен);
						СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
					КонецЕсли;
					
					// ДисконтныеКарты
					СтруктураДанныеНоменклатуры.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
					СтруктураДанныеНоменклатуры.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
					// Конец ДисконтныеКарты

					ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры);

					СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
					
					ЗаменитьСтрокуДаннымиНабора(ЭтотОбъект, ИмяТабличнойЧасти, НоваяСтрока, СтруктураДанные);
					
					Продолжить;
					// Конец Наборы
					
				Иначе
					
					НоваяСтрока.ТипНоменклатурыЗапас = ((ЗначенияРеквизитов.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"))
													ИЛИ (ЗначенияРеквизитов.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")));
					
					Если НоваяСтрока.ТипНоменклатурыЗапас Тогда
						Если Объект.ПоложениеСклада=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
							НоваяСтрока.СтруктурнаяЕдиницаРезерв = СтрокаЗагрузки.СтруктурнаяЕдиница;
						Иначе
							НоваяСтрока.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
						КонецЕсли; 
					КонецЕсли;
					
					// Если заказ "Выполнен" знач. в подборе выбирали товар отгруженный,
					// иначе в подборе выбирали товар к резерву, но поле тоже нужно заполнить.
					НоваяСтрока.РезервОтгрузка = НоваяСтрока.Резерв;
					
					СтруктураДанныеНоменклатуры = Новый Структура();
					СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
					СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
					СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
					СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
					СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
					
					СтатусПартии = Новый СписокЗначений;
					СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
					СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
					
					СтруктураДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии);
					
					СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанныеНоменклатуры);
					
					ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры);
					
					СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
					
					НоваяСтрока.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
					НоваяСтрока.НомерГТД = СтруктураДанные.НомерГТД;
					
				КонецЕсли;
				
				// Характеристики
				НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
				НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
				НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
				
				Если СтруктураДанные.ИспользоватьХарактеристики
					Тогда
					НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
				КонецЕсли;
				// Конец Характеристики
				
			КонецЕсли;
			
		Иначе

			ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры);

			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
			
			// Характеристики
			НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
			НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
			НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
			
			Если СтруктураДанные.ИспользоватьХарактеристики
				Тогда
				НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
			// Конец Характеристики
			
		КонецЕсли;
		
		Если ИмяТабличнойЧасти = "Запасы" ИЛИ ИмяТабличнойЧасти = "Материалы"
			Тогда
			
			//Партии
			НоваяСтрока.ИспользоватьПартии = СтрокаЗагрузки.Номенклатура.ИспользоватьПартии;
			НоваяСтрока.ПроверятьЗаполнениеПартий = СтрокаЗагрузки.Номенклатура.ПроверятьЗаполнениеПартий;
			
			ЗначенияПартииПоУмолчанию = ?(СтруктураДанные.Свойство("Партия"), СтруктураДанные.Партия, Неопределено);
			
			НоваяСтрока.Партия = ?(ЗначениеЗаполнено(СтрокаЗагрузки.Партия), СтрокаЗагрузки.Партия, ЗначенияПартииПоУмолчанию);
			// Конец Партии
			
			НоваяСтрока.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
			
			ИмяПоляКлючСвязи = ?(ИмяТабличнойЧасти = "Материалы", "КлючСвязиСерииНоменклатуры", "КлючСвязи");
			ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТабличнойЧасти], НоваяСтрока, ИмяПоляКлючСвязи);
			
			ОбновитьДоступностьЯчеек();
			ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
			
		КонецЕсли;
		
		Если НоваяСтрока.Свойство("Спецификация") Тогда 
			
			НоваяСтрока.Спецификация = СпецификацияПоУмолчанию(СтрокаЗагрузки.Номенклатура,
				СтрокаЗагрузки.Характеристика);
			
		КонецЕсли;
		
	КонецЦикла;

	Если ИмяТабличнойЧасти = "Работы" Тогда
		ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, ИмяТабличнойЧасти, Истина);
	ИначеЕсли ИмяТабличнойЧасти = "Запасы" Тогда
		ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, ИмяТабличнойЧасти);
	КонецЕсли;
	
	ДействияПослеЧтенияОбъекта();
	
	// АвтоматическиеСкидки
	Если ТаблицаДляЗагрузки.Количество() > 0 Тогда
		СброситьФлагСкидкиРассчитаныСервер("ОбработкаПодбора");
	КонецЕсли;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Материалы" Тогда
		ЗаполнитьНомераСтрокТаблицаМатериалы(Объект.Материалы);
	КонецЕсли; 

КонецПроцедуры // ПолучитьЗапасыИзХранилища()

&НаСервере
Функция ПоместитьПредоплатаВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.Предоплата.Выгрузить(,
			"Документ,
			|НомерСертификата,
			|СуммаРасчетов,
			|Курс,
			|Кратность,
			|СуммаПлатежа"),
		УникальныйИдентификатор
	);
	
КонецФункции // ПоместитьПредоплатаВХранилище()

&НаСервере
Процедура ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресПредоплатаВХранилище);
	Объект.Предоплата.Загрузить(ТаблицаДляЗагрузки);
	
	Элементы.ЗНГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(Объект.СпособЗачетаПредоплаты, Объект.Предоплата);
	
КонецПроцедуры // ПолучитьПредоплатаИзХранилища()

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

&НаКлиенте
Процедура УправлениеФормой()
	
	УстановитьВидимостьИДоступностьОтСостояния();
	УстановитьВидимостьОтФОИспользоватьПодсистемуЗарплата();
	УстановитьВидимостьОтПользовательскихНастроек(Объект, ЭтотОбъект);
	ОбновитьОтображениеКолонокВРазрезеЗапасов(,,Ложь);
	УстановитьВидимостьДоговора();
	
	ЗаказЗавершен	= Объект.СостояниеЗаказа = ПредопределенноеЗначение("Справочник.СостоянияЗаказНарядов.Завершен");
	ЗаказОтменен	= Объект.ВариантЗавершения = ПредопределенноеЗначение("Перечисление.ВариантыЗавершенияЗаказа.Отменен");
	РедактироватьСписком = Элементы.РедактироватьСписком.Пометка;
	
	Элементы.СтраницаЗавершениеЗаказа.Видимость		= ЗаказЗавершен;
	Элементы.ПричинаОтмены.Доступность				= ЗаказОтменен;
	Элементы.БанковскийСчет.Видимость				= Объект.ТипДенежныхСредств = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные");
	Элементы.Касса.Видимость						= Объект.ТипДенежныхСредств = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Наличные");
	Элементы.ПлатежныйКалендарьСтрокой.Видимость	= Не РедактироватьСписком;
	Элементы.СписокПлатежныйКалендарь.Видимость		= РедактироватьСписком;
	Элементы.БанковскийСчет.ОтметкаНезаполненного	= Объект.ЗапланироватьОплату И Не ЗначениеЗаполнено(Объект.БанковскийСчет);
	Элементы.Касса.ОтметкаНезаполненного			= Объект.ЗапланироватьОплату И Не ЗначениеЗаполнено(Объект.Касса);
	Элементы.ПлатежныйКалендарьДатаОплаты.ОтметкаНезаполненного = Объект.ЗапланироватьОплату;
	Элементы.ПлатежныйКалендарьДатаОплаты.АвтоОтметкаНезаполненного = Объект.ЗапланироватьОплату;
	Элементы.РедактироватьСписком.Доступность 		   = Объект.ЗапланироватьОплату;
	Элементы.ПлатежныйКалендарьОбщаяГруппа.Доступность = Объект.ЗапланироватьОплату;
	Элементы.ЗНМатериалыГруппаЗаполнить.Доступность = Не ЭтаФорма.ТолькоПросмотр;
	Элементы.ЗапасыИзменитьРезерв.Доступность = Не ЭтаФорма.ТолькоПросмотр;
	
	Элементы.ЗаполнитьОбновитьКалькуляцию.Видимость 	= НЕ Объект.КалькуляцияРассчитана И НЕ ТолькоПросмотр;
	Элементы.ОткрытьКалькуляцию.Видимость				= Объект.КалькуляцияРассчитана;
	
	Если ОбязательноЗаполнятьИсточникВЗаказах Тогда
		Элементы.ИсточникПривлечения.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;

	// Наборы
	Элементы.ЗНРаботыКартинкаНабора.Видимость			= Ложь;
	Для каждого Стр Из Объект.Работы Цикл
		Если Стр.КартинкаНабора>0 Тогда
			Элементы.ЗНРаботыКартинкаНабора.Видимость = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	Элементы.ЗапасыКартинкаНабора.Видимость			= Ложь;
	Для каждого Стр Из Объект.Запасы Цикл
		Если Стр.КартинкаНабора>0 Тогда
			Элементы.ЗапасыКартинкаНабора.Видимость = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	// Конец Наборы
	
	// Номенклатура.
	УстановитьПараметрыВыбораНоменклатуры();
	
	// Остатки и резервы
	Элементы.ЗапасыИзменитьРезервОчиститьРезерв.Заголовок = ?(ЗаказНарядВСостоянииВыполнения, "Очистить ""Из резерва""" ,"Очистить ""В резерв""");
	Элементы.МатериалыИзменитьРезервОчиститьРезерв.Заголовок = ?(ЗаказНарядВСостоянииВыполнения, "Очистить ""Из резерва""" ,"Очистить ""В резерв""");
	Элементы.МатериалыИзменитьРезервОчиститьРезервДляВсех.Заголовок = ?(ЗаказНарядВСостоянииВыполнения, "Очистить ""Из резерва"" для всех работ" ,"Очистить ""В резерв"" для всех работ");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораНоменклатуры()
	
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ЗаказНаряд", НастройкиФормыВыбораНоменклатуры);
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ЗаказНаряд", НастройкиФормыВыбораНоменклатуры,,"ЗНМатериалы");
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ЗаказНаряд", НастройкиФормыВыбораНоменклатуры,,"ЗНРаботы");
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
	НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	Если Не РаботаСПодарочнымиСертификатамиКлиентСервер.ИспользованиеСертификатовЗапрещено(ВалютаРасчетов, НациональнаяВалюта) Тогда
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
	КонецЕсли;
	МассивТипов = Новый ФиксированныйМассив(НовыйМассив);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипНоменклатуры", МассивТипов);
	НовыйПараметр2 = Новый ПараметрВыбора("Дополнительно.ОграничениеТипа", МассивТипов);
	НовыйПараметр3 = Новый ПараметрВыбора("Дополнительно.ТипВладельца", "ЗаказПокупателя");
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыйМассив.Добавить(НовыйПараметр2);
	НовыйМассив.Добавить(НовыйПараметр3);
	
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ЗапасыНоменклатура.ПараметрыВыбора = НовыеПараметры;
	
	Если РаботаСПодарочнымиСертификатамиКлиентСервер.ИспользованиеСертификатовЗапрещено(ВалютаРасчетов, НациональнаяВалюта) Тогда
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			Если СтрокаЗапасы.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
				СтрокаЗапасы.Номенклатура = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "ЗНМатериалы");
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "ЗНРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьИДоступностьОтСостояния()
	
	Если РежимОстаткиИРезервы Тогда
		Элементы.ЗапасыОстаткиРасход.Видимость = Ложь;
		Элементы.ЗапасыОстаткиЗаказ.Видимость = Ложь;
		Элементы.ЗапасыОбеспечение.Видимость = Ложь;
		Элементы.ЗапасыГруппаКПоступлению.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗаказНарядВСостоянииВыполнения Тогда
		
		Элементы.ЗапасыРезерв.Видимость = Ложь;
		Элементы.ЗапасыРезервОтгрузка.Видимость = ?(НЕ РежимОстаткиИРезервы, Истина, Ложь);
		
		Элементы.ЗапасыИзменитьРезервЗаполнитьПоОстаткам.Видимость = Ложь;
		Элементы.ЗапасыИзменитьРезервЗаполнитьПоРезервам.Видимость = Истина;
		
		Элементы.ЗНМатериалыРезерв.Видимость = Ложь;
		Элементы.ЗНМатериалыРезервОтгрузка.Видимость = ?(НЕ РежимОстаткиИРезервы, Истина, Ложь);
		
		Элементы.МатериалыИзменитьРезервЗаполнитьПоОстаткам.Видимость = Ложь;
		Элементы.МатериалыИзменитьРезервЗаполнитьПоОстаткамДляВсех.Видимость = Ложь;
		Элементы.МатериалыИзменитьРезервЗаполнитьПоРезервам.Видимость = Истина;
		Элементы.МатериалыИзменитьРезервЗаполнитьПоРезервамДляВсех.Видимость = Истина;
		
		Элементы.ЗНГруппаПредоплата.Доступность = Истина;
		
		Элементы.ЗапасыОстаткиРасход.Видимость = РежимОстаткиИРезервы;
		
	Иначе
		
		Элементы.ЗапасыРезерв.Видимость = ?(НЕ РежимОстаткиИРезервы, Истина, Ложь);
		Элементы.ЗапасыРезервОтгрузка.Видимость = Ложь;
		
		Элементы.ЗапасыИзменитьРезервЗаполнитьПоОстаткам.Видимость = Истина;
		Элементы.ЗапасыИзменитьРезервЗаполнитьПоРезервам.Видимость = Ложь;
		
		Элементы.ЗНМатериалыРезерв.Видимость = ?(НЕ РежимОстаткиИРезервы, Истина, Ложь);
		Элементы.ЗНМатериалыРезервОтгрузка.Видимость = Ложь;
		
		Элементы.МатериалыИзменитьРезервЗаполнитьПоОстаткам.Видимость = Истина;
		Элементы.МатериалыИзменитьРезервЗаполнитьПоОстаткамДляВсех.Видимость = Истина;
		Элементы.МатериалыИзменитьРезервЗаполнитьПоРезервам.Видимость = Ложь;
		Элементы.МатериалыИзменитьРезервЗаполнитьПоРезервамДляВсех.Видимость = Ложь;
		
		Если Не ЭтотОбъект.ТолькоПросмотр Тогда
			Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
				СтрокаЗапасы.РезервОтгрузка = СтрокаЗапасы.Резерв;
			КонецЦикла;
			
			Для каждого СтрокаМатериалы Из Объект.Материалы Цикл
				СтрокаМатериалы.РезервОтгрузка = СтрокаМатериалы.Резерв;
			КонецЦикла;
			
			Элементы.ЗНГруппаПредоплата.Доступность = Ложь;
			
			Если Объект.Предоплата.Количество() > 0 Тогда
				Объект.Предоплата.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ЗапасыОстаткиЗаказ.Видимость = РежимОстаткиИРезервы;
		Элементы.ЗапасыОбеспечение.Видимость = ?(Объект.Проведен И РежимОстаткиИРезервы, Истина, Ложь);
		Элементы.ЗапасыГруппаКПоступлению.Видимость = РежимОстаткиИРезервы;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьОтФОИспользоватьПодсистемуЗарплата()
	
	// Зарплата.
	Элементы.ЗНГруппаИсполнители.Видимость = ИспользоватьПодсистемуЗарплата;
	
КонецПроцедуры // УстановитьВидимостьОтФОИспользоватьПодсистемуЗарплата()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьОтПользовательскихНастроек(Объект, Форма)
	
	Элементы = Форма.Элементы;
	
	Если Объект.ПоложениеВидаРабот = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
		Элементы.ЗНВидРабот.Видимость = Истина;
		Элементы.ЗНРаботыВидРабот.Видимость = Ложь;
		Элементы.ЗНРаботыВидРабот.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
		Элементы.ТаблицаРаботыВидРабот.Видимость = Ложь;
		Форма.ВидРаботВШапке = Истина;
	Иначе
		Элементы.ЗНВидРабот.Видимость = Ложь;
		Элементы.ЗНРаботыВидРабот.Видимость = Истина;
		Элементы.ЗНРаботыВидРабот.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
		Элементы.ТаблицаРаботыВидРабот.Видимость = Истина;
		Форма.ВидРаботВШапке = Ложь;
	КонецЕсли;
	
	Если Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Форма.СкладВШапке = Ложь;
		Элементы.ЗНСтруктурнаяЕдиницаЗапасов.Видимость = Ложь;
		Элементы.ЗНЯчейкаЗапасов.Видимость = Ложь;
		Элементы.ЗНМатериалыСтруктурнаяЕдиницаРезерв.Видимость = Истина;
		Элементы.ЗНМатериалыЯчейка.Видимость = Форма.ЗаказНарядВСостоянииВыполнения;
		Элементы.ЗапасыСтруктурнаяЕдиницаРезерв.Видимость = Истина;
		Элементы.ЗапасыЯчейка.Видимость = Форма.ЗаказНарядВСостоянииВыполнения;
	Иначе
		Форма.СкладВШапке = Истина;
		Элементы.ЗНСтруктурнаяЕдиницаЗапасов.Видимость = Истина;
		Элементы.ЗНЯчейкаЗапасов.Видимость = Истина;
		Элементы.ЗНМатериалыСтруктурнаяЕдиницаРезерв.Видимость = Ложь;
		Элементы.ЗНМатериалыЯчейка.Видимость = Ложь;
		Элементы.ЗапасыСтруктурнаяЕдиницаРезерв.Видимость = Ложь;
		Элементы.ЗапасыЯчейка.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ИспользоватьТовары Тогда
		Элементы.ЗНГруппаЗапасы.Видимость = Истина;
	Иначе
		Элементы.ЗНГруппаЗапасы.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ИспользоватьМатериалыЗаказчика Тогда
		Элементы.ЗНГруппаМатериалыЗаказчика.Видимость = Истина
	Иначе
		Элементы.ЗНГруппаМатериалыЗаказчика.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ИспользоватьМатериалы Тогда
		Элементы.ЗНМатериалы.Видимость = Истина;
		Элементы.ГруппаКоманднаяПанельМатериалы.Видимость = Истина;
		Элементы.ОстаткиИРезервыМатериалы.Пометка = Форма.РежимОстаткиИРезервы;
	Иначе
		Элементы.ЗНМатериалы.Видимость = Ложь;
		Элементы.ГруппаКоманднаяПанельМатериалы.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ИспользоватьЗарплатаИсполнителей 
		И Форма.ИспользоватьПодсистемуЗарплата Тогда
		
		Элементы.ЗНГруппаИсполнители.Видимость = Истина
		
	Иначе
		
		Элементы.ЗНГруппаИсполнители.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьОтПользовательскихНастроек()

&НаКлиенте
Процедура РедактироватьЗачетПредоплаты(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале контрагента.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале договор контрагента.'"));
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ЗаказДляПодбораПредоплаты = ПредопределенноеЗначение("Документ.ПриемИПередачаВРемонт.ПустаяСсылка");
	Иначе
		ЗаказДляПодбораПредоплаты = ?(КонтрагентВестиРасчетыПоЗаказам, Объект.Ссылка, Неопределено);
	КонецЕсли;
	
	АдресПредоплатаВХранилище = ПоместитьПредоплатаВХранилище();
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("АдресПредоплатаВХранилище", АдресПредоплатаВХранилище);
	ПараметрыПодбора.Вставить("Подбор", Истина);
	ПараметрыПодбора.Вставить("ЕстьЗаказ", Ложь);
	ПараметрыПодбора.Вставить("ЗаказВШапке", Истина);
	ПараметрыПодбора.Вставить("Компания", Компания);
	ПараметрыПодбора.Вставить("Заказ", ЗаказДляПодбораПредоплаты);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПодбора.Вставить("Договор", Объект.Договор);
	ПараметрыПодбора.Вставить("Курс", Объект.Курс);
	ПараметрыПодбора.Вставить("Кратность", Объект.Кратность);
	ПараметрыПодбора.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("СуммаДокумента", Объект.Работы.Итог("Всего") + Объект.Запасы.Итог("Всего"));
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовПокупателей", ПараметрыПодбора, , , , ,
		Новый ОписаниеОповещения("РедактироватьЗачетПредоплатыЗавершение", ЭтотОбъект,
		Новый Структура("АдресПредоплатаВХранилище", АдресПредоплатаВХранилище)));
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	АдресПредоплатаВХранилище = ДополнительныеПараметры.АдресПредоплатаВХранилище;
	
	КодВозврата = Результат;
	Если КодВозврата = КодВозвратаДиалога.OK Тогда
		ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище);
	КонецЕсли;
	
КонецПроцедуры // РедактироватьЗачетПредоплаты()

&НаКлиенте
Процедура УстановитьВидимостьДоговора()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		КонтрагентВестиРасчетыПоЗаказам = ПараметрыРасчетовСКонтрагентом.ВестиРасчетыПоЗаказам;
		Элементы.ЗНДоговор.Видимость = ПараметрыРасчетовСКонтрагентом.ВестиРасчетыПоДоговорам;
		
	Иначе
		
		КонтрагентВестиРасчетыПоЗаказам = Ложь;
		Элементы.ЗНДоговор.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьДоговора()

&НаСервере
Процедура ЗаполнитьПараметрыРасчетовСКонтрагентом()
	
	КонтрагентПроект = Объект.Проект.Контрагент;
	Если ЗначениеЗаполнено(Объект.Проект) И ЗначениеЗаполнено(КонтрагентПроект) 
		И НЕ Объект.Контрагент = КонтрагентПроект Тогда
		Объект.Проект = Справочники.Проекты.ПустаяСсылка()
	КонецЕсли;
	
	ПараметрыРасчетовСКонтрагентом = 
		Новый ФиксированнаяСтруктура(
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, "ВестиРасчетыПоЗаказам, ВестиРасчетыПоДоговорам"));

КонецПроцедуры

&НаКлиенте
Функция ЯчейкаДоступна(СтруктурнаяЕдиница)
	
	Если НЕ КэшЗначений.УчетПоЯчейкам Тогда
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) ИЛИ ТипЗнч(СтруктурнаяЕдиница)<>Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		Возврат Ложь;
	КонецЕсли; 
	Если НЕ КэшЗначений.Свойство("ДоступностьЯчеек") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтруктурнаяЕдиница);
	Если Результат = Неопределено Тогда
		МассивСтруктурныхЕдиниц = Новый Массив;
		МассивСтруктурныхЕдиниц.Добавить(СтруктурнаяЕдиница);
		ДополнитьДоступностьЯчеек(МассивСтруктурныхЕдиниц, КэшЗначений.ДоступностьЯчеек);
		Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтруктурнаяЕдиница);
		Если Результат=Неопределено Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьДоступностьЯчеек()
	
	Если НЕ КэшЗначений.УчетПоЯчейкам Тогда
		Возврат;
	КонецЕсли; 	
	
	Если НЕ КэшЗначений.Свойство("ДоступностьЯчеек") Тогда
		КэшЗначений.Вставить("ДоступностьЯчеек", Новый ФиксированноеСоответствие(Новый Соответствие));
	КонецЕсли; 
	
	МассивСтруктурныхЕдиниц = Новый Массив;
	Если Объект.ПоложениеСклада=Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			МассивСтруктурныхЕдиниц.Добавить(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв);
		КонецЦикла; 
		Для каждого СтрокаТабличнойЧасти Из Объект.Материалы Цикл
			МассивСтруктурныхЕдиниц.Добавить(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв);
		КонецЦикла; 
	Иначе
		МассивСтруктурныхЕдиниц.Добавить(Объект.СтруктурнаяЕдиницаРезерв);
	КонецЕсли;
	МассивСтруктурныхЕдиниц = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСтруктурныхЕдиниц);
	ДополнитьДоступностьЯчеек(МассивСтруктурныхЕдиниц, КэшЗначений.ДоступностьЯчеек);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьДоступностьЯчеек(СтруктурныеЕдиницы, СоответствиеСтруктурныхЕдиниц)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурныеЕдиницы", СтруктурныеЕдиницы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Ссылка,
	|	СтруктурныеЕдиницы.ОрдерныйСклад КАК ОрдерныйСклад,
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.Ссылка В(&СтруктурныеЕдиницы)";
	Выборка = Запрос.Выполнить().Выбрать();
	Соответствие = Новый Соответствие(СоответствиеСтруктурныхЕдиниц);
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.Ссылка, НЕ Выборка.ОрдерныйСклад И Выборка.ТипСтруктурнойЕдиницы=Перечисления.ТипыСтруктурныхЕдиниц.Склад);	
	КонецЦикла; 
	СоответствиеСтруктурныхЕдиниц = Новый ФиксированноеСоответствие(Соответствие);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПризнакиДоступностиЯчеек(Форма)

	Объект = Форма.Объект;
	КэшЗначений = Форма.КэшЗначений;
	Если НЕ КэшЗначений.УчетПоЯчейкам Тогда
		Возврат;
	КонецЕсли;
	Если Объект.ПоложениеСклада<>ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Возврат;
	КонецЕсли; 
	 
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв);
		Если Результат=Неопределено Тогда
			Результат = Ложь;
		КонецЕсли; 
		СтрокаТабличнойЧасти.ЯчейкаДоступна = Результат И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв) И СтрокаТабличнойЧасти.ТипНоменклатурыЗапас;
	КонецЦикла; 
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Материалы Цикл
		Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв);
		Если Результат=Неопределено Тогда
			Результат = Ложь;
		КонецЕсли; 
		СтрокаТабличнойЧасти.ЯчейкаДоступна = Результат И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв);
	КонецЦикла; 
	
КонецПроцедуры 

#КонецОбласти

#Область ИзменитьРезервТовары

&НаКлиенте
Процедура ЗНИзменитьТоварыРезервЗаполнитьПоОстаткам(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Товары"" не заполнена.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ЗНТоварыЗаполнитьКолонкуРезервПоОстаткамНаСервере();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // ЗНИзменитьТоварыРезервЗаполнитьПоОстаткам()

&НаКлиенте
Процедура ЗНИзменитьТоварыРезервЗаполнитьПоРезервам(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Товары"" не заполнена.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ЗНТоварыЗаполнитьКолонкуРезервПоРезервамНаСервере();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // ЗНИзменитьТоварыРезервЗаполнитьПоРезервам()

&НаКлиенте
Процедура ЗНИзменитьТоварыРезервОчиститьРезерв(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Товары"" не заполнена.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
		Если СтрокаТабличнойЧасти.ТипНоменклатурыЗапас Тогда
			СтрокаТабличнойЧасти.Резерв = 0;
			СтрокаТабличнойЧасти.РезервОтгрузка = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	
КонецПроцедуры // ЗНИзменитьТоварыРезервОчиститьРезерв()

#КонецОбласти

#Область ИзменитьРезервМатериалы

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервЗаполнитьПоОстаткам(Команда)
	
	ТекущаяСтрокаТЧ = Элементы.Работы.ТекущиеДанные;
	
	Если ТекущаяСтрокаТЧ = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана строка основной табличной части.'"), ,
			"Объект.Работы");
		Возврат;
	КонецЕсли;
	
	МатериалыКлючСвязи = Элементы.ЗНМатериалы.ОтборСтрок["КлючСвязи"];
	РезультатПоиска = Объект.Материалы.НайтиСтроки(Новый Структура("КлючСвязи", МатериалыКлючСвязи));
	Если РезультатПоиска.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Табличная часть ""Материалы"" не заполнена.'"), ,
			"Объект.Материалы");
		Возврат;
	КонецЕсли;
	
	ЗНМатериалыЗаполнитьКолонкуРезервПоОстаткамНаСервере(МатериалыКлючСвязи);
	
	ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы");
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // ЗНИзменитьМатериалыРезервЗаполнитьПоОстаткам()

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервЗаполнитьПоОстаткамДляВсех(Команда)
	
	Если Объект.Материалы.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Табличная часть ""Материалы"" не заполнена.'"), ,
			"Объект.Материалы");
		Возврат;
	КонецЕсли;
	
	Если Объект.Работы.Количество() > 1 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗНИзменитьМатериалыРезервЗаполнитьПоОстаткамДляВсехЗавершение",
			ЭтотОбъект), НСтр(
			"ru = 'В табличной части ""Материалы"" колонка ""Резерв"" будет перезаполнена для всех работ. Продолжить выполнение операции?'"),
			РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	КонецЕсли;
	
	ЗНИзменитьМатериалыРезервЗаполнитьПоОстаткамДляВсехФрагмент();
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервЗаполнитьПоОстаткамДляВсехЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗНИзменитьМатериалыРезервЗаполнитьПоОстаткамДляВсехФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервЗаполнитьПоОстаткамДляВсехФрагмент()
	
	ЗНМатериалыЗаполнитьКолонкуРезервПоОстаткамНаСервере();
	
	ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы");
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // ЗНИзменитьМатериалыРезервЗаполнитьПоОстаткамДляВсех()

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервЗаполнитьПоРезервам(Команда)
	
	ТекущаяСтрокаТЧ = Элементы.Работы.ТекущиеДанные;
	
	Если ТекущаяСтрокаТЧ = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана строка основной табличной части.'"), ,
			"Объект.Работы");
		Возврат;
	КонецЕсли;
	
	МатериалыКлючСвязи = Элементы.ЗНМатериалы.ОтборСтрок["КлючСвязи"];
	РезультатПоиска = Объект.Материалы.НайтиСтроки(Новый Структура("КлючСвязи", МатериалыКлючСвязи));
	Если РезультатПоиска.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Табличная часть ""Материалы"" не заполнена.'"), ,
			"Объект.Материалы");
		Возврат;
	КонецЕсли;
	
	ЗНМатериалыЗаполнитьКолонкуРезервПоРезервамНаСервере(МатериалыКлючСвязи);
	
	ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы");
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // ЗНИзменитьМатериалыРезервЗаполнитьПоРезервам()

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервЗаполнитьПоРезервамДляВсех(Команда)
	
	Если Объект.Материалы.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Табличная часть ""Материалы"" не заполнена.'"), ,
			"Объект.Материалы");
		Возврат;
	КонецЕсли;
	
	Если Объект.Работы.Количество() > 1 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗНИзменитьМатериалыРезервЗаполнитьПоРезервамДляВсехЗавершение",
			ЭтотОбъект), НСтр(
			"ru = 'В табличной части ""Материалы"" колонка ""Резерв"" будет перезаполнена для всех работ. Продолжить выполнение операции?'"),
			РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	КонецЕсли;
	
	ЗНИзменитьМатериалыРезервЗаполнитьПоРезервамДляВсехФрагмент();
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервЗаполнитьПоРезервамДляВсехЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗНИзменитьМатериалыРезервЗаполнитьПоРезервамДляВсехФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервЗаполнитьПоРезервамДляВсехФрагмент()
	
	ЗНМатериалыЗаполнитьКолонкуРезервПоРезервамНаСервере();
	
	ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы");
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры // ЗНИзменитьМатериалыРезервЗаполнитьПоРезервамДляВсех()

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервОчиститьРезерв(Команда)
	
	ТекущаяСтрокаТЧ = Элементы.Работы.ТекущиеДанные;
	
	Если ТекущаяСтрокаТЧ = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана строка основной табличной части.'"), ,
			"Объект.Работы");
		Возврат;
	КонецЕсли;
	
	РезультатПоиска = Объект.Материалы.НайтиСтроки(Новый Структура("КлючСвязи",
		Элементы.ЗНМатериалы.ОтборСтрок["КлючСвязи"]));
	Если РезультатПоиска.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Табличная часть ""Материалы"" не заполнена.'"), ,
			"Объект.Материалы");
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из РезультатПоиска Цикл
		
		СтрокаТабличнойЧасти.Резерв = 0;
		СтрокаТабличнойЧасти.РезервОтгрузка = 0;
		
	КонецЦикла;
		
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	
КонецПроцедуры // ЗНИзменитьМатериалыРезервОчиститьРезерв()

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервОчиститьРезервДляВсех(Команда)
	
	Если Объект.Материалы.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Табличная часть ""Материалы"" не заполнена.'"), ,
			"Объект.Материалы");
		Возврат;
	КонецЕсли;
	
	Если Объект.Работы.Количество() > 1 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗНИзменитьМатериалыРезервОчиститьРезервДляВсехЗавершение", ЭтотОбъект),
			НСтр(
			"ru = 'В табличной части ""Материалы"" колонка ""Резерв"" будет перезаполнена для всех работ. Продолжить выполнение операции?'"),
			РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	КонецЕсли;
	
	ЗНИзменитьМатериалыРезервОчиститьРезервДляВсехФрагмент();
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервОчиститьРезервДляВсехЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗНИзменитьМатериалыРезервОчиститьРезервДляВсехФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервОчиститьРезервДляВсехФрагмент()
	
	Перем СтрокаТабличнойЧасти;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Материалы Цикл
		
		СтрокаТабличнойЧасти.Резерв = 0;
		СтрокаТабличнойЧасти.РезервОтгрузка = 0;
		
	КонецЦикла;
	
КонецПроцедуры // ЗНИзменитьМатериалыРезервОчиститьРезервДляВсех()

#КонецОбласти

#Область ДисконтныеКарты

&НаКлиенте
Процедура ВыбранаДисконтнаяКарта(ДисконтнаяКарта)

	ВладелецДисконтнойКарты = ПолучитьВладельцаДисконтнойКарты(ДисконтнаяКарта);
	Если Объект.Контрагент.Пустая() И Не ВладелецДисконтнойКарты.Пустая() Тогда
		Объект.Контрагент = ВладелецДисконтнойКарты;
		КонтрагентПриИзменении(Элементы.ЗНКонтрагент);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Заполнен контрагент и считана дисконтная карта'"),
			ПолучитьНавигационнуюСсылку(ДисконтнаяКарта),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В документе заполнен контрагент и считана дисконтная карта %1'"), ДисконтнаяКарта),
			БиблиотекаКартинок.Информация32);
	ИначеЕсли Объект.Контрагент <> ВладелецДисконтнойКарты И Не ВладелецДисконтнойКарты.Пустая() Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Дисконтная карта не считана. Владелец дисконтной карты не совпадает с контрагентом в документе.'"),
			,
			"Контрагент",
			"Объект");
		
		Возврат;
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Считана дисконтная карта'"),
			ПолучитьНавигационнуюСсылку(ДисконтнаяКарта),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Считана дисконтная карта %1'"), ДисконтнаяКарта),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВыбранаДисконтнаяКартаДополнительно(ДисконтнаяКарта);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбранаДисконтнаяКартаДополнительно(ДисконтнаяКарта)
	
	Если Не Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Объект.ДисконтнаяКарта = ДисконтнаяКарта;
	Объект.ПроцентСкидкиПоДисконтнойКарте = ДисконтныеКартыУНФВызовСервера.ВычислитьПроцентСкидкиПоДисконтнойКарте(Объект.Дата, ДисконтнаяКарта);
	
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте",
			Объект.ВидЦен,
			Объект.ВидСкидкиНаценки,
			Объект.ВалютаДокумента,
			ВалютаРасчетов,
			Объект.Курс,
			КурсНациональнаяВалюта,
			Объект.СуммаВключаетНДС,
			УчетВалютныхОпераций,
			Объект.НалогообложениеНДС,
			Объект.СпециальныйНалоговыйРежим,
			Объект.ДисконтнаяКарта,
			Объект.ПроцентСкидкиПоДисконтнойКарте);
			
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	ОбновитьКартинкуДисконтнойКарты();
	
	Если ДисконтныеКартыУНФВызовСервера.СтарыйМеханизмСкидок(ДисконтнаяКарта) Тогда
	
		Если Объект.Запасы.Количество() > 0 Тогда
			Текст = НСтр("ru = 'Перезаполнить скидки во всех строках?'");
			Оповещение = Новый ОписаниеОповещения("ВыбранаДисконтнаяКартаДополнительноЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		КонецЕсли;
		
	Иначе
		
		РассчитатьСкидкиНаценки(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранаДисконтнаяКартаДополнительноЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		УправлениеНебольшойФирмойКлиент.ПерезаполнитьСкидкиТабличнойЧастиПослеСчитыванияДисконтнойКарты(ЭтотОбъект, "Запасы");
		УправлениеНебольшойФирмойКлиент.ПерезаполнитьСкидкиТабличнойЧастиПослеСчитыванияДисконтнойКарты(ЭтотОбъект, "Работы");
		// Ручные скидки
		РассчитатьСуммуИПроцентСкидкиРаботыЗапасы(Объект, СкидкаСумма, СкидкаПроцент);
		// Конец Ручные скидки
	КонецЕсли;
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	// АвтоматическиеСкидки
	СброситьФлагСкидкиРассчитаныКлиент("ПересчетСкидокПоДисконтнойКарте");
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВладельцаДисконтнойКарты(ДисконтнаяКарта)
	
	Возврат ДисконтнаяКарта.ВладелецКарты;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоДисконтнаяКартаСФиксированнойСкидкой(ДисконтнаяКарта)
	
	Возврат ДисконтнаяКарта.Владелец.ВидСкидкиВДисконтныхКартах = Перечисления.ВидыСкидокВДисконтныхКартах.ФиксированнаяСкидка;
	
КонецФункции

// Процедура выполняется только для НАКОПИТЕЛЬНЫХ дисконтных карт.
// Процедура пересчитывает скидки документа, после изменения даты документа. Пересчёт выполняется, если процент скидки
// по выбранной дисконтной карте, изменился. 
//
&НаКлиенте
Процедура ПересчитатьПроцентСкидкиПриИзмененииДатыДокумента()
	
	Если Объект.ДисконтнаяКарта.Пустая() ИЛИ ЭтоДисконтнаяКартаСФиксированнойСкидкой(Объект.ДисконтнаяКарта) Тогда
		Возврат;
	КонецЕсли;
	
	ПредПроцентСкидкиПоДисконтнойКарте = Объект.ПроцентСкидкиПоДисконтнойКарте;
	НовПроцентСкидкиПоДисконтнойКарте = ДисконтныеКартыУНФВызовСервера.ВычислитьПроцентСкидкиПоДисконтнойКарте(Объект.Дата, Объект.ДисконтнаяКарта);
	
	Если ПредПроцентСкидкиПоДисконтнойКарте <> НовПроцентСкидкиПоДисконтнойКарте Тогда
		
		Если Объект.Запасы.Количество() > 0 Тогда
			Текст = НСтр("ru = 'Изменить % скидки по накопительной дисконтной карте с "+ПредПроцентСкидкиПоДисконтнойКарте+"% на "+НовПроцентСкидкиПоДисконтнойКарте+"% и перезаполнить скидки во всех строках?'");
			
			ДополнительныеПараметры = Новый Структура("НовПроцентСкидкиПоДисконтнойКарте, ПересчитатьТЧ", НовПроцентСкидкиПоДисконтнойКарте, Истина);
			Оповещение = Новый ОписаниеОповещения("ПересчитатьПроцентСкидкиПриИзмененииДатыДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Иначе
			Текст = НСтр("ru = 'Изменить % скидки по накопительной дисконтной карте с "+ПредПроцентСкидкиПоДисконтнойКарте+"% на "+НовПроцентСкидкиПоДисконтнойКарте+"%?'");
			
			ДополнительныеПараметры = Новый Структура("НовПроцентСкидкиПоДисконтнойКарте, ПересчитатьТЧ", НовПроцентСкидкиПоДисконтнойКарте, Ложь);
			Оповещение = Новый ОписаниеОповещения("ПересчитатьПроцентСкидкиПриИзмененииДатыДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		КонецЕсли;
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняется только для НАКОПИТЕЛЬНЫХ дисконтных карт.
// Процедура пересчитывает скидки документа, после изменения даты документа. Пересчёт выполняется, если процент скидки
// по выбранной дисконтной карте, изменился. 
//
&НаКлиенте
Процедура ПересчитатьПроцентСкидкиПриИзмененииДатыДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ПроцентСкидкиПоДисконтнойКарте = ДополнительныеПараметры.НовПроцентСкидкиПоДисконтнойКарте;
		
		СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте",
				Объект.ВидЦен,
				Объект.ВидСкидкиНаценки,
				Объект.ВалютаДокумента,
				ВалютаРасчетов,
				Объект.Курс,
				КурсНациональнаяВалюта,
				Объект.СуммаВключаетНДС,
				УчетВалютныхОпераций,
				Объект.НалогообложениеНДС,
				Объект.СпециальныйНалоговыйРежим,
				Объект.ДисконтнаяКарта,
				Объект.ПроцентСкидкиПоДисконтнойКарте);
				
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
		Если ДополнительныеПараметры.ПересчитатьТЧ Тогда
			УправлениеНебольшойФирмойКлиент.ПерезаполнитьСкидкиТабличнойЧастиПослеСчитыванияДисконтнойКарты(ЭтотОбъект, "Запасы");
			
			// Платежный календарь.
			ПересчитатьПлатежныйКалендарь();
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьДисконтнуюКартуНажатиеЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт

	Если ТипЗнч(ВозвращаемыеПараметры) = Тип("Структура") Тогда
		СчитанаДисконтнаяКарта = ВозвращаемыеПараметры.СчитанаДисконтнаяКарта;
		ВыбранаДисконтнаяКарта(ВозвращаемыеПараметры.ДисконтнаяКарта);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область АвтоматическиеСкидки

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	Если Объект.Запасы.Количество() = 0 И Объект.Работы.Количество() = 0 Тогда
		Если Объект.СкидкиНаценки.Количество() > 0 Тогда
			Объект.СкидкиНаценки.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	РассчитатьСкидкиНаценкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ИспользоватьМинимальныеЦены",      КэшЗначений.ИспользоватьМинимальныеЦены);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	
	ЦенообразованиеКлиент.ПоказатьОповещениеПользователяОКорректировкеЦены(СтруктураПараметры);
	
	РассчитатьСуммуИПроцентСкидкиРаботыЗапасы(Объект, СкидкаСумма, СкидкаПроцент);

	ОбновитьПодвалФормы();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

// Функция сравнивает данные расчёта скидок на текущий момент времени с данными последнего расчёт скидок в документе.
// Если скидки изменились, то функция возвращает значение Истина.
//
&НаСервере
Функция СкидкиИзменились()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	СкидкиИзменились = Ложь;
	
	КоличествоСтрок = ПримененныеСкидки.ТаблицаСкидкиНаценки.Количество();
	Если КоличествоСтрок <> Объект.СкидкиНаценки.Количество() Тогда
		СкидкиИзменились = Истина;
	Иначе
		
		Если Объект.Запасы.Итог("СуммаАвтоматическойСкидки") <> Объект.СкидкиНаценки.Итог("Сумма") Тогда
			СкидкиИзменились = Истина;
		КонецЕсли;
		
		Если Не СкидкиИзменились Тогда
			Для НомерСтроки = 1 По КоличествоСтрок Цикл
				Если    Объект.СкидкиНаценки[НомерСтроки-1].Сумма <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].Сумма
					ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].КлючСвязи <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].КлючСвязи
					ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].СкидкаНаценка <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].СкидкаНаценка Тогда
					СкидкиИзменились = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СкидкиИзменились Тогда
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СкидкиИзменились;
	
КонецФункции

&НаСервере
Процедура РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры)
	
	ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
	Модифицированность = Истина;
	
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект, "Запасы");
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
	
		Объект.СкидкиРассчитаны = Истина;
	
	КонецЕсли;
	
	Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
	Элементы.РаботыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьИнформациюОСкидкахКлиент("Запасы")
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахРаботы(Команда)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьИнформациюОСкидкахКлиент("Работы");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахКлиент(ИмяТЧ)
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
		ТекстВопроса = НСтр("ru='Скидки (наценки) не рассчитаны, рассчитать?'");
		
		ДополнительныеПараметры = Новый Структура("ИмяТЧ", ИмяТЧ); 
		ДополнительныеПараметры.Вставить("СтруктураПараметры", СтруктураПараметры);
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросРассчитатьСкидки", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры, ИмяТЧ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросРассчитатьСкидки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	СтруктураПараметры = ДополнительныеПараметры.СтруктураПараметры;
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры, ДополнительныеПараметры.ИмяТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры, ИмяТЧ)
	
	Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		РассчитатьСкидкиНаценкиКлиент();
	КонецЕсли;
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если (Элемент.ТекущийЭлемент = Элементы.ЗапасыПроцентАвтоматическойСкидки ИЛИ Элемент.ТекущийЭлемент = Элементы.ЗапасыСуммаАвтоматическойСкидки)
		И НЕ ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьИнформациюОСкидкахКлиент("Запасы");
		
	КонецЕсли;
	
	// Наборы
	СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если НЕ ТолькоПросмотр И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) И  
		(Элемент.ТекущийЭлемент = Элементы.ЗапасыНоменклатура ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗапасыХарактеристика ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗапасыКоличество ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗапасыЕдиницаИзмерения ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗапасыКартинкаНабора) Тогда 
		
		СтандартнаяОбработка = Ложь;
		ИмяТабличнойЧасти = "Запасы";
		РедактироватьСоставНабора(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	// Конец Наборы
	
	// Подарочные сертификаты
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыЦена И Элемент.ТекущийЭлемент.ТолькоПросмотр Тогда
		
		ПоляНоменклатуры = ТипНоменклатурыПроизвольныйНоминал(СтрокаТабличнойЧасти.Номенклатура);
			
		Если ПоляНоменклатуры.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")
			И ПоляНоменклатуры.ПроизвольныйНоминал Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("УказатьЦенуСертификата", ЭтотОбъект, СтрокаТабличнойЧасти);
			ПоказатьВводЧисла(ОписаниеОповещения, СтрокаТабличнойЧасти.Цена, НСтр(
				"ru = 'Введите стоимость сертификата'"), 15, 2);
			
		КонецЕсли;
			
	КонецЕсли;
	// Конец Подарочные сертификаты
	
	// Остатки и резервы
	ОбработатьВыборЭлементаТабличнойЧасти(Элемент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипНоменклатурыПроизвольныйНоминал(Знач Номенклатура)
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ТипНоменклатуры, ПроизвольныйНоминал");
КонецФункции

&НаКлиенте
Процедура РаботыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Наборы
	СтрокаТабличнойЧасти = Объект.Работы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если НЕ ТолькоПросмотр И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) И  
		(Элемент.ТекущийЭлемент = Элементы.ЗНРаботыНоменклатура ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗНРаботыХарактеристика ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗНРаботыКоличество ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗНРаботыКратность ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗНРаботыКоэффициент ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗНРаботыКартинкаНабора) Тогда 
		   
		СтандартнаяОбработка = Ложь;
		ИмяТабличнойЧасти = "Работы";
		РедактироватьСоставНабора(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	// Конец Наборы
	
	// АвтоматическиеСкидки
	// Размещать в конце процедуры. Возможно перезаполнение табличной части
	Если (Элемент.ТекущийЭлемент = Элементы.ЗНРаботыПроцентАвтоматическойСкидки ИЛИ Элемент.ТекущийЭлемент = Элементы.ЗНРаботыСуммаАвтоматическойСкидки)
		И НЕ ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьИнформациюОСкидкахКлиент("Работы");
		
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры

&НаСервере
Функция СброситьФлагСкидкиРассчитаныСервер(Действие, КолонкаТЧ = "")
	
	ТребуетсяПересчет = Ложь;
	Если ИспользоватьАвтоматическиеСкидки И (Объект.Запасы.Количество() > 0 ИЛИ Объект.Работы.Количество() > 0) И (Объект.СкидкиРассчитаны ИЛИ УстановленСерыйЦвет) Тогда
		ТребуетсяПересчет = СброситьФлагСкидкиРассчитаны(Действие, КолонкаТЧ);
	КонецЕсли;
	Возврат ТребуетсяПересчет;
	
КонецФункции

&НаКлиенте
Функция СброситьФлагСкидкиРассчитаныКлиент(Действие, КолонкаТЧ = "")
	
	ТребуетсяПересчет = Ложь;
	Если ИспользоватьАвтоматическиеСкидки И (Объект.Запасы.Количество() > 0 ИЛИ Объект.Работы.Количество() > 0) И (Объект.СкидкиРассчитаны ИЛИ УстановленСерыйЦвет) Тогда
		ТребуетсяПересчет = СброситьФлагСкидкиРассчитаны(Действие, КолонкаТЧ);
	КонецЕсли;
	Возврат ТребуетсяПересчет;
	
КонецФункции

&НаСервере
Функция СброситьФлагСкидкиРассчитаны(Действие, КолонкаТЧ = "")
	
	Возврат СкидкиНаценкиСервер.СброситьФлагСкидкиРассчитаны(ЭтотОбъект, Действие, КолонкаТЧ, "Запасы", "Работы");
	
КонецФункции

&НаСервере
Процедура АвтоматическиеСкидкиПриСозданииНаСервере()
	
	УстановленСерыйЦвет = Ложь;
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки");
	Если ИспользоватьАвтоматическиеСкидки Тогда
		Если Объект.Запасы.Количество() = 0 И Объект.Работы.Количество() = 0 Тогда
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьСерый;
			Элементы.РаботыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьСерый;
			УстановленСерыйЦвет = Истина;
		ИначеЕсли НЕ Объект.СкидкиРассчитаны Тогда
			Объект.СкидкиРассчитаны = Ложь;
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьКрасный;
			Элементы.РаботыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьКрасный;
		Иначе
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
			Элементы.РаботыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	КонецЕсли;
	
	// АвтоматическиеСкидки
	Если НоваяСтрока И Копирование И
		(СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки <> 0 ИЛИ СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки <> 0) Тогда
		СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 0;
		СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
	ИначеЕсли ИспользоватьАвтоматическиеСкидки И НоваяСтрока И Копирование Тогда
		// Автоматические скидки стали неактуальны.
		СброситьФлагСкидкиРассчитаныКлиент("ПриНачалеРедактирования");
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	Если НоваяСтрока И Копирование Тогда
		СтрокаТабличнойЧасти.КлючСвязи = 0;
		СтрокаТабличнойЧасти.СерииНоменклатуры = "";
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "СтруктурнаяЕдиницаРезерв", "ПоложениеСклада");
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "Ячейка", "ПоложениеСклада");
	КонецЕсли; 
	
	// ГрупповоеИзменениеСтрок
	СтрокаТабличнойЧасти.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗапасыСерииНоменклатуры" Тогда
		ОткрытьПодборСерииНоменклатуры();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ)
	
	ОбязательныеДляЗаполненияРеквизиты = РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательныеДляЗаполненияРеквизитыОбъекта("ЗаказНаряд");
	
	Для Каждого Реквизит Из ОбязательныеДляЗаполненияРеквизиты Цикл
				
		Если ЗначениеЗаполнено(Объект[Реквизит]) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(
			ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", 
			"Источник привлечения"),,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Объект[%1]", Реквизит),,
			Отказ);
			
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура РаботыКопироватьСтроки(Команда)
	КопироватьСтроки("Работы", "Работы");
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКопироватьСтроки(Команда)
	КопироватьСтроки("Материалы", "ЗНМатериалы");
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	КопироватьСтроки("Запасы", "Запасы");
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаКопироватьСтроки(Команда)
	КопироватьСтроки("МатериалыЗаказчика", "ЗНМатериалыЗаказчика");
КонецПроцедуры

&НаКлиенте
Процедура РаботыВставитьСтроки(Команда)
	ИмяТабличнойЧасти = "Работы";
	ВставитьСтроки("Работы", "Работы");
КонецПроцедуры

&НаКлиенте
Процедура МатериалыВставитьСтроки(Команда)
	
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтотОбъект, "ЗНМатериалы") Тогда
		Возврат;
	КонецЕсли; 
	ВставитьСтроки("Материалы", "ЗНМатериалы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	ВставитьСтроки("Запасы", "Запасы");
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаВставитьСтроки(Команда)
	ВставитьСтроки("МатериалыЗаказчика", "ЗНМатериалыЗаказчика");
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ, ИмяЭлемента)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяЭлемента].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ, ИмяЭлемента)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтроки(ИмяТЧ, ИмяЭлемента, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяЭлемента].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоСкопированных, КоличествоВставленных)
	
	ИмяТЧ = Новый Структура("ИмяТЧ,ИмяЭлемента", ИмяТЧ, ИмяЭлемента);
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоВставленных);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	Если ИмяТЧ = "Материалы" Или ИмяТЧ = "Запасы" Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);		
	КонецЕсли;
	
	Если ИмяТЧ = "Запасы"
		ИЛИ ИмяТЧ = "Работы" Тогда
		
		ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, ИмяТЧ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВставленныеСтроки(ИмяТЧ, ИмяЭлемента, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Если ИмяТЧ = "Работы" Тогда
			
			Строка = Объект.Работы[Количество - Итератор];
			ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект, Строка);
			ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы", Строка);
			
			РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", Строка);
			
			// Наборы
			Строка.НоменклатураНабора = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
			Строка.ХарактеристикаНабора = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
			Строка.ДоляСтоимости = 0;
			// Конец Наборы
			
			// Калькуляция
			ОчиститьКалькуляцию();
			// Конец Калькуляция
			
		ИначеЕсли ИмяТЧ = "Материалы" Тогда
			
			Строка = Объект.Материалы[Количество - Итератор];
			Строка.ЯчейкаДоступна = ЯчейкаДоступна(Строка.СтруктурнаяЕдиницаРезерв);
			ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтотОбъект, "ЗНМатериалы", Строка);
			
			Элементы.ЗНМатериалы.ВыделенныеСтроки.Добавить(Строка.ПолучитьИдентификатор());
			
			// Калькуляция
			ОчиститьКалькуляцию();
			// Конец Калькуляция
			
		ИначеЕсли ИмяТЧ = "Запасы" Тогда
			
			Строка = Объект.Запасы[Количество - Итератор];
			Строка.ЯчейкаДоступна = ЯчейкаДоступна(Строка.СтруктурнаяЕдиницаРезерв);
			РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", Строка);
			
			// Наборы
			Строка.НоменклатураНабора = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
			Строка.ХарактеристикаНабора = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
			Строка.ДоляСтоимости = 0;
			// Конец Наборы
			
			// Калькуляция
			ОчиститьКалькуляцию();
			// Конец Калькуляция
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьПодвалФормы();
	ПересчитатьПлатежныйКалендарь();
	ЗаполнитьНомераСтрокТаблицаМатериалы(Объект.Материалы);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоВставленных)
	
	СтрокиКУдалению = Новый Массив;
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		Если ТипЗнч(Строка.Номенклатура) = Тип("Строка") Тогда
			СтрокиКУдалению.Добавить(Строка);
			Продолжить;
		КонецЕсли;
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
		СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);

		ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, Строка, СтруктураДанные);

		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		Если ИмяТЧ = "Работы" Тогда
			
			Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
				Строка.Количество = СтруктураДанные.НормаВремени;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Строка.Кратность) Тогда
				Строка.Кратность = 1;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Строка.Коэффициент) Тогда
				Строка.Коэффициент = 1;
			КонецЕсли;
			Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
			
			Строка.ТипНоменклатурыУслуга = СтруктураДанные.ЭтоУслуга;
			
		ИначеЕсли ИмяТЧ = "Запасы" Тогда
			
			Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
			Строка.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
			
			Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
				Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
			КонецЕсли;
			
		ИначеЕсли ИмяТЧ = "МатериалыЗаказчика" Тогда
			
			Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
				Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;  
	
	Если ИмяТЧ = "Работы" Тогда
		ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, ИмяТЧ, Истина);
	ИначеЕсли ИмяТЧ = "Запасы" Тогда
		ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, ИмяТЧ);
	КонецЕсли;
	
	Для каждого Строка Из СтрокиКУдалению Цикл
		Объект[ИмяТЧ].Удалить(Строка);
		КоличествоВставленных = КоличествоВставленных - 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ГрупповоеИзменениеСтрок

&НаКлиенте
Процедура ЗапасыСнятьФлажки(Команда)
	УстановитьПометку("Запасы", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыУстановитьФлажки(Команда)
	УстановитьПометку("Запасы", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменитьСтроки(Команда)
	
	ПоказатьСкрытьПанельРедактирования("Запасы", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыполнитьДействие(Команда)
	
	ОбработатьТаблицу("Запасы");
	НастроитьОформлениеПанелиРедактирования("Запасы", 4);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОтменитьИзменения(Команда)
	
	ПоказатьСкрытьПанельРедактирования("Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыСнятьФлажки(Команда)
	УстановитьПометку("Работы", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура РаботыУстановитьФлажки(Команда)
	УстановитьПометку("Работы", Истина);
КонецПроцедуры

&НаКлиенте
Процедура РаботыИзменитьСтроки(Команда)
	
	ПоказатьСкрытьПанельРедактирования("Работы", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыВыполнитьДействие(Команда)
	
	ОбработатьТаблицу("Работы");
	НастроитьОформлениеПанелиРедактирования("Работы", 4);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыОтменитьИзменения(Команда)
	
	ПоказатьСкрытьПанельРедактирования("Работы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменениеСтрокДействиеПриИзменении(Элемент)
	
	ОпределитьОбъектИзменений("Запасы");
	НастроитьОформлениеПанелиРедактирования("Запасы", 2);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменениеСтрокЗначениеПриИзменении(Элемент)
	
	НастроитьОформлениеПанелиРедактирования("Запасы", 3);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыИзменениеСтрокДействиеПриИзменении(Элемент)
	
	ОпределитьОбъектИзменений("Работы");
	НастроитьОформлениеПанелиРедактирования("Работы", 2);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыИзменениеСтрокЗначениеПриИзменении(Элемент)
	
	НастроитьОформлениеПанелиРедактирования("Работы", 3);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометку(ИмяТЧ, Пометка)
	
	НаборЭлементов = НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ);
	НаборЭлементов.КнопкаСнятьФлажки.Видимость = НЕ НаборЭлементов.КнопкаСнятьФлажки.Видимость;
	НаборЭлементов.КнопкаУстановитьФлажки.Видимость = НЕ НаборЭлементов.КнопкаУстановитьФлажки.Видимость;
	
	Для каждого Строка Из Объект[НаборЭлементов.ИмяТЧ] Цикл
		Строка.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьПанельРедактирования(ИмяТЧ, ИзменяетДанные = Неопределено)
	
	Перем СостояниеПерехода;
	ГрупповоеИзменениеСтрокСервер.ПоказатьСкрытьПанельРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ),
		СостояниеПерехода,
		ИзменяетДанные
	);
	
	УправлениеРезервнымиКопиямиТаблицы(ИмяТЧ, СостояниеПерехода, ИзменяетДанные);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеРезервнымиКопиямиТаблицы(ИмяТЧ, СостояниеПерехода, ИзменяетДанные)
	
	Если ИмяТЧ = "Запасы" Тогда
		РеквизитРезервнаяКопияТаблицыАдрес = "ЗапасыРезервнаяКопияТаблицыАдрес";
	ИначеЕсли ИмяТЧ = "Работы" Тогда
		РеквизитРезервнаяКопияТаблицыАдрес = "РаботыРезервнаяКопияТаблицыАдрес";
	КонецЕсли;
	
	ГрупповоеИзменениеСтрокСервер.УправлениеРезервнымиКопиями(
		ЭтотОбъект,
		Объект[ИмяТЧ],
		ЭтотОбъект[РеквизитРезервнаяКопияТаблицыАдрес],
		СостояниеПерехода,
		ИзменяетДанные
	);
	
	Если ИмяТЧ = "Запасы" Тогда
		ГрупповоеИзменениеСтрокСервер.УправлениеРезервнымиКопиями(
			ЭтотОбъект,
			Объект.СерииНоменклатуры,
			ЭтотОбъект.СерииНоменклатурыРезервнаяКопияТаблицыАдрес,
			СостояниеПерехода,
			ИзменяетДанные
		);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОформлениеПанелиРедактирования(ИмяТЧ, Состояние, СохранитьИзменения = Неопределено)
	
	Если ИмяТЧ = "Запасы" Тогда
		РеквизитЗначение = "ЗапасыИзменениеСтрокЗначение";
	ИначеЕсли ИмяТЧ = "Работы" Тогда
		РеквизитЗначение = "РаботыИзменениеСтрокЗначение";
	КонецЕсли;
	
	ГрупповоеИзменениеСтрокКлиент.НастроитьОформлениеПанелиРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокКлиент(ИмяТЧ),
		Состояние,
		ЭтотОбъект[РеквизитЗначение]
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущееДействиеИзмененияСтрок()
	
	СохраняемыеНастройки = "";
	
	Если ЗапасыИзменениеСтрокДействие <> ЗапасыИзменениеСтрокДействиеПриОткрытии Тогда
		СохраняемыеНастройки = "Запасы";
	КонецЕсли;
	
	Если РаботыИзменениеСтрокДействие <> РаботыИзменениеСтрокДействиеПриОткрытии Тогда
		Если ЗначениеЗаполнено(СохраняемыеНастройки) Тогда
			СохраняемыеНастройки = СохраняемыеНастройки + ",";
		КонецЕсли;
		СохраняемыеНастройки = СохраняемыеНастройки + "Работы";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СохраняемыеНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьТекущееДействиеИзмененияСтрокСервер(СохраняемыеНастройки);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущееДействиеИзмененияСтрокСервер(СохраняемыеНастройки)
	
	ИменаТЧ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СохраняемыеНастройки);
	Для каждого ИмяТЧ Из ИменаТЧ Цикл
		ГрупповоеИзменениеСтрокСервер.СохранитьНастройки(НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТаблицу(ИмяТЧ)
	
	Если ИмяТЧ = "Запасы" Тогда
		ВыполненноеДействие = ЗапасыИзменениеСтрокДействие;
		ПримененноеЗначение = ЗапасыИзменениеСтрокЗначение;
	ИначеЕсли ИмяТЧ = "Работы" Тогда
		ВыполненноеДействие = РаботыИзменениеСтрокДействие;
		ПримененноеЗначение = РаботыИзменениеСтрокЗначение;
	КонецЕсли;
	
	// Наборы
	Если ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки") Тогда
		
		ИзменяемыеСтроки = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("Пометка", Истина));
		Если ИзменяемыеСтроки.Количество()=Объект[ИмяТЧ].Количество() Тогда
			// Если выделены все строки - проверки удаления наборов не выполняются
			УдаляемыеНаборы = Новый Массив;
			Для каждого Строка Из ИзменяемыеСтроки Цикл
				Если ЗначениеЗаполнено(Строка.НоменклатураНабора) И УдаляемыеНаборы.Найти(Строка.НоменклатураНабора)=Неопределено Тогда
					УдаляемыеНаборы.Добавить(Строка.НоменклатураНабора);
				КонецЕсли; 
			КонецЦикла;
			Для каждого НоменклатураНабора Из УдаляемыеНаборы Цикл
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("НоменклатураНабора", НоменклатураНабора);
				УдаляемыеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
				Для каждого СтрНабора Из УдаляемыеСтроки Цикл
					Объект.ДобавленныеНаборы.Удалить(СтрНабора);
				КонецЦикла; 
			КонецЦикла; 
		Иначе
			Для каждого Строка Из ИзменяемыеСтроки Цикл
				Если ЗначениеЗаполнено(Строка.НоменклатураНабора) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Действие недоступно для наборов.'");
					Сообщение.Поле = "Объект."+ИмяТЧ;
					Сообщение.Сообщить();
					Возврат;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	// Конец Наборы
	
	ОбработатьТаблицуНаСервере(ИмяТЧ);
	
	ИзменяемыеСтроки = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("Пометка", Истина));
	Для каждого Строка Из ИзменяемыеСтроки Цикл
		
		Если ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧ, Строка);
			
		ИначеЕсли ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой") Тогда
			
			ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(Строка, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
			
			// Ручные скидки
			РассчитатьСуммуИПроцентСкидкиРаботыЗапасы(Объект, СкидкаСумма, СкидкаПроцент);
			// Конец Ручные скидки
			
			// АвтоматическиеСкидки.
			СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти");
			
			Строка.ПроцентАвтоматическойСкидки = 0;
			Строка.СуммаАвтоматическойСкидки = 0;
			// Конец АвтоматическиеСкидки
			
			ОбновитьПодвалФормы();
			
		ИначеЕсли ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
			
			ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(Строка, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
			
		ИначеЕсли ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			Если Строка.Количество <> 0 Тогда
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли;
			
			// Скидки.
			Если Строка.ПроцентСкидкиНаценки = 100 Тогда
				Строка.Сумма = 0;
			ИначеЕсли Строка.ПроцентСкидкиНаценки <> 0 И Строка.Количество <> 0 Тогда
				Строка.Сумма = Строка.Сумма * (1 - Строка.ПроцентСкидкиНаценки / 100);
			КонецЕсли;
			
			ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(Строка, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
			
			// АвтоматическиеСкидки.
			СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти");
			
			Строка.ПроцентАвтоматическойСкидки = 0;
			Строка.СуммаАвтоматическойСкидки = 0;
			// Конец АвтоматическиеСкидки
			
			ОбновитьПодвалФормы();
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПересчитатьПлатежныйКалендарь();
	
	Если ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки")
		ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой") Тогда
		
		ГрупповоеИзменениеСтрокКлиент.ОчиститьДействиеЗначение(ВыполненноеДействие, ПримененноеЗначение);
	КонецЕсли;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьТаблицуНаСервере(ИмяТЧ)
	
	Если ИмяТЧ = "Запасы" Тогда
		
		ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
			ЭтотОбъект,
			Объект.Запасы,
			ЗапасыИзменениеСтрокДействие,
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит,
			ЗапасыИзменениеСтрокЗначение,
			"ЗапасыНоменклатура"
		);
		
		Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			ИзменяемыеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Пометка", Истина));
			Для каждого Строка Из ИзменяемыеСтроки Цикл
				
				СтруктураДанные = Новый Структура;
				СтруктураДанные.Вставить("Организация", Объект.Организация);
				СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
				СтруктураДанные.Вставить("Характеристика", Строка.Характеристика);
				СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
				СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
				
				Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
					
					СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
					СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
					СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
					СтруктураДанные.Вставить("Коэффициент", 1);
					СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
					
				КонецЕсли;
				
				// ДисконтныеКарты
				СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
				СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);		
				// Конец ДисконтныеКарты

				ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, Строка, СтруктураДанные);

				СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
				
				Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
				Строка.Спецификация = СтруктураДанные.Спецификация;
				Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
					Строка.Количество = 1;
				КонецЕсли;
				Строка.Цена = СтруктураДанные.Цена;
				Строка.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
				Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
				Строка.Содержание = "";
				
				Строка.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.ЗаполнитьПоФактическимОстаткамНомераГТД Тогда
			
			НомераГТДЗаполнитьПоФактическимОстаткамНаСервере(Ложь, "Запасы");
			
		КонецЕсли;
		
		Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.ПодобратьНомераГТД Тогда
			
			НомераГТДПодобратьНаСервере(Ложь, "Запасы");
			
		КонецЕсли;
		
		Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.ОчиститьНомераГТДИСтраныПроисхождения Тогда
			
			ГрузовыеТаможенныеДекларацииСервер.ОчиститьНомераГТДИСтраныПроисхождения(Объект.Запасы);
			
		КонецЕсли;
		
	ИначеЕсли ИмяТЧ = "Работы" Тогда
		
		ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
			ЭтотОбъект,
			Объект.Работы,
			РаботыИзменениеСтрокДействие,
			РаботыИзменениеСтрокОбъектИзмененийРеквизит,
			РаботыИзменениеСтрокЗначение,
			"ЗНРаботыНоменклатура"
		);
		
		Если РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			ИзменяемыеСтроки = Объект.Работы.НайтиСтроки(Новый Структура("Пометка", Истина));
			Для каждого Строка Из ИзменяемыеСтроки Цикл
				
				Строка.Материалы = "";
				Строка.Исполнители = "";
				
				СтруктураДанные = Новый Структура;
				СтруктураДанные.Вставить("Организация", Объект.Организация);
				СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
				СтруктураДанные.Вставить("Характеристика", Строка.Характеристика);
				СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
				СтруктураДанные.Вставить("НормаВремени", 1);
				СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
				
				Если ВидРаботВШапке И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
					СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
					СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
					СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
					СтруктураДанные.Вставить("Коэффициент", 1);
					СтруктураДанные.Вставить("ВидРабот", Объект.ВидРабот);
					СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
				ИначеЕсли (НЕ ВидРаботВШапке) И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
					СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
					СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
					СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
					СтруктураДанные.Вставить("Коэффициент", 1);
					СтруктураДанные.Вставить("ВидРабот", Строка.ВидРабот);
					СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
				КонецЕсли;
				
				// ДисконтныеКарты
				СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
				СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);		
				// Конец ДисконтныеКарты
				
				ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, Строка, СтруктураДанные);

				СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
				
				Строка.Количество = СтруктураДанные.НормаВремени;
				Строка.Кратность = 1; 
				Строка.Коэффициент = 1;
				Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
				Строка.Спецификация = СтруктураДанные.Спецификация;
				Строка.Содержание = "";
				
				Если (ВидРаботВШапке И ЗначениеЗаполнено(Объект.ВидЦен) И СтруктураДанные.Свойство("Цена")) ИЛИ СтруктураДанные.Свойство("Цена") Тогда
					Строка.Цена = СтруктураДанные.Цена;
					Строка.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
				КонецЕсли;
				
				Строка.ТипНоменклатурыУслуга = СтруктураДанные.ЭтоУслуга;
				
				Если Строка <> Неопределено Тогда
					Элементы.ЗНРаботаМатериалы.Доступность = НЕ Строка.ТипНоменклатурыУслуга;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьОбъектИзменений(ИмяТЧ)
	
	Если ИмяТЧ = "Запасы" Тогда
		
		Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "ПроцентСкидкиНаценки";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыПроцентСкидкиНаценки";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "СтавкаНДС";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСтавкаНДС";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСклад") Тогда
			
			ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийРеквизит"] = "СтруктурнаяЕдиницаРезерв";
			ЭтотОбъект[ИмяТЧ + "ИзменениеСтрокОбъектИзмененийЭлемент"] = ИмяТЧ + "СтруктурнаяЕдиницаРезерв";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЯчейку") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Ячейка";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЯчейка";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "";
			
		КонецЕсли;
		
	ИначеЕсли ИмяТЧ = "Работы" Тогда
		
		Если РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент") Тогда
			
			РаботыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			РаботыИзменениеСтрокОбъектИзмененийЭлемент = "ЗНРаботыЦена";
			
		ИначеЕсли РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены") Тогда
			
			РаботыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			РаботыИзменениеСтрокОбъектИзмененийЭлемент = "ЗНРаботыЦена";
			
		ИначеЕсли РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду") Тогда
			
			РаботыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			РаботыИзменениеСтрокОбъектИзмененийЭлемент = "ЗНРаботыЦена";
			
		ИначеЕсли РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки") Тогда
			
			РаботыИзменениеСтрокОбъектИзмененийРеквизит = "ПроцентСкидкиНаценки";
			РаботыИзменениеСтрокОбъектИзмененийЭлемент = "ЗНРаботыПроцентСкидкиНаценки";
			
		ИначеЕсли РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
			
			РаботыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
			РаботыИзменениеСтрокОбъектИзмененийЭлемент = "ЗНРаботыСумма";
			
		ИначеЕсли РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			РаботыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
			РаботыИзменениеСтрокОбъектИзмененийЭлемент = "ЗНРаботыСумма";
			
		ИначеЕсли РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
			
			РаботыИзменениеСтрокОбъектИзмененийРеквизит = "СтавкаНДС";
			РаботыИзменениеСтрокОбъектИзмененийЭлемент = "ЗНРаботыСтавкаНДС";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			РаботыИзменениеСтрокОбъектИзмененийРеквизит = "";
			РаботыИзменениеСтрокОбъектИзмененийЭлемент = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НаборЭлементовГрупповогоИзмененияСтрокКлиент(ИмяТЧ)
	
	Если ИмяТЧ = "Запасы" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Запасы");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаЗапасыИзменениеСтрок);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ЗапасыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ЗапасыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ЗапасыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ЗапасыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ЗапасыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ЗапасыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ЗапасыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент), 
		                                                     Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	ИначеЕсли ИмяТЧ = "Работы" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Работы");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ЗНГруппаРаботыИзменениеСтрок);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.РаботыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.РаботыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.РаботыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ЗНРаботыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ЗНРаботыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.РаботыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.РаботыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.РаботыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.РаботыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         РаботыИзменениеСтрокОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(РаботыИзменениеСтрокОбъектИзмененийЭлемент), 
		                                                     Элементы[РаботыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	КонецЕсли;
	
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Функция НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ)
	
	Если ИмяТЧ = "Запасы" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Запасы");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаЗапасыИзменениеСтрок);
		НаборЭлементов.Вставить("КнопкаИзменитьСтроки",    Элементы.ЗапасыИзменитьСтроки);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ЗапасыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ЗапасыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ЗапасыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ЗапасыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ЗапасыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ЗапасыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ЗапасыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент), 
		                                                     Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	ИначеЕсли ИмяТЧ = "Работы" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Работы");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ЗНГруппаРаботыИзменениеСтрок);
		НаборЭлементов.Вставить("КнопкаИзменитьСтроки",    Элементы.РаботыИзменитьСтроки);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.РаботыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.РаботыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.РаботыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ЗНРаботыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ЗНРаботыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.РаботыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.РаботыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.РаботыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.РаботыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         РаботыИзменениеСтрокОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(РаботыИзменениеСтрокОбъектИзмененийЭлемент), 
		                                                     Элементы[РаботыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	КонецЕсли;
	
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокДействий(ИмяТЧ, РазрешеноРедактированиеЦенДокументов)
	
	Если ИмяТЧ = "Запасы" Тогда
		
		Действия = Новый Массив;
		Если РазрешеноРедактированиеЦенДокументов Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент);
		КонецЕсли;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду);
		Если РазрешеноРедактированиеЦенДокументов Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству);
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
		КонецЕсли;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС);
		Если НЕ СкладВШапке Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСклад);
			Если ПолучитьФункциональнуюОпцию("УчетПоЯчейкам") Тогда
				Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЯчейку);
			КонецЕсли;
		КонецЕсли;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
		
		ГрузовыеТаможенныеДекларацииСервер.ЗаполнитьСписокДействий(Действия, Истина, ИмяТЧ);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ЗаполнитьСерииНоменклатуры);
		КонецЕсли;
		
		Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Очистить();
		Для каждого Действие Из Действия Цикл
			ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
			Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
		КонецЦикла;
		
	ИначеЕсли ИмяТЧ = "Работы" Тогда
		
		Действия = Новый Массив;
		Если РазрешеноРедактированиеЦенДокументов Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент);
		КонецЕсли;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду);
		Если РазрешеноРедактированиеЦенДокументов Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству);
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
		КонецЕсли;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
		
		Элементы.РаботыИзменениеСтрокДействие.СписокВыбора.Очистить();
		Для каждого Действие Из Действия Цикл
			ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
			Элементы.РаботыИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АвтоподборКонтактов

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_ОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_АвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, Параметры, Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССериямиНоменклатуры

&НаКлиенте
Процедура ЗапасыСерииНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерииНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерииНоменклатуры()
		
	ТекущиеДанныеИдентификатор = Элементы.Запасы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийНоменклатуры = ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор);
	
	ОткрытьФорму("Обработка.ПодборСерийНоменклатуры.Форма", ПараметрыСерийНоменклатуры, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборМатериалыСерииНоменклатуры()
	
	ТекущиеДанныеИдентификатор = Элементы.ЗНМатериалы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийНоменклатуры = ПараметрыПодбораСерийНоменклатурыМатериалы(ТекущиеДанныеИдентификатор);
	
	ОткрытьФорму("Обработка.ПодборСерийНоменклатуры.Форма", ПараметрыСерийНоменклатуры, ЭтотОбъект);

КонецПроцедуры
&НаСервере
Функция ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор)
	
	Возврат СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатуры(Объект, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор, Истина,
		"Запасы", "СерииНоменклатуры", "КлючСвязи");
	
КонецФункции

&НаСервере
Функция ПараметрыПодбораСерийНоменклатурыМатериалы(ТекущиеДанныеИдентификатор) Экспорт
	
	Возврат СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатуры(Объект, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор, Истина,
		"Материалы", "СерииНоменклатурыМатериалы", "КлючСвязиСерииНоменклатуры");
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыСерийНоменклатурыМатериалы(ДокОбъект, ТекСтрокаДанные, УИДФормы, ИмяТЧ = "Материалы", ИмяТЧСерийНоменклатуры="СерииНоменклатурыМатериалы") Экспорт
	
	ОтборСерииНоменклатурыТекущейСтроки = Новый Структура("КлючСвязи", ТекСтрокаДанные.КлючСвязиСерииНоменклатуры);
	ОтборСерииНоменклатурыТекущейСтроки = ДокОбъект[ИмяТЧСерийНоменклатуры].НайтиСтроки(ОтборСерииНоменклатурыТекущейСтроки);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДокОбъект[ИмяТЧСерийНоменклатуры].Выгрузить(ОтборСерииНоменклатурыТекущейСтроки), УИДФормы);
	
	ПараметрыОткрытия = Новый Структура("Запасы, УникальныйИдентификаторФормыВладельца, АдресВоВременномХранилище, ДокСсылка", 
		Новый Структура("КлючСвязи, Номенклатура, Характеристика, Количество", 
			ТекСтрокаДанные.КлючСвязиСерииНоменклатуры, 
			ТекСтрокаДанные.Номенклатура,
			ТекСтрокаДанные.Характеристика,
			ТекСтрокаДанные.Количество),
			УИДФормы,
			АдресВоВременномХранилище,
			ДокОбъект.Ссылка
			);
			
	Если ДокОбъект.Свойство("Организация") Тогда
		ПараметрыОткрытия.Вставить("Организация", ДокОбъект.Организация);
	КонецЕсли; 
	Если ТекСтрокаДанные.Свойство("СтруктурнаяЕдиница") Тогда
		ПараметрыОткрытия.Вставить("СтруктурнаяЕдиница", ТекСтрокаДанные.СтруктурнаяЕдиница);
	ИначеЕсли ДокОбъект.Свойство("СтруктурнаяЕдиница") Тогда
		ПараметрыОткрытия.Вставить("СтруктурнаяЕдиница", ДокОбъект.СтруктурнаяЕдиница);
	КонецЕсли; 		
	Если ТекСтрокаДанные.Свойство("Ячейка") Тогда
		ПараметрыОткрытия.Вставить("Ячейка", ТекСтрокаДанные.Ячейка);
	ИначеЕсли ДокОбъект.Свойство("Ячейка") Тогда
		ПараметрыОткрытия.Вставить("Ячейка", ДокОбъект.Ячейка);
	КонецЕсли; 		
	Если ТекСтрокаДанные.Свойство("ЕдиницаИзмерения") Тогда
		ПараметрыОткрытия.Запасы.Вставить("ЕдиницаИзмерения", ТекСтрокаДанные.ЕдиницаИзмерения);
		Если ТипЗнч(ТекСтрокаДанные.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		    ПараметрыОткрытия.Запасы.Вставить("Коэффициент", ТекСтрокаДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			ПараметрыОткрытия.Запасы.Вставить("Коэффициент", 1);
		КонецЕсли;
	КонецЕсли;
	Если ТекСтрокаДанные.Свойство("Партия") Тогда
		ПараметрыОткрытия.Запасы.Вставить("Партия", ТекСтрокаДанные.Партия);
	Иначе
		ПараметрыОткрытия.Запасы.Вставить("Партия", Справочники.ПартииНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

&НаСервере
Функция ПолучитьСерииНоменклатурыИзХранилища(АдресВоВременномХранилище, КлючСтроки, ПараметрыИменаПолей)
	
	Модифицированность = Истина;
	Возврат СерииНоменклатурыУНФ.ПолучитьСерииНоменклатурыИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки,
		ПараметрыИменаПолей);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБиблиотек

// ЭДО
// @skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидЭД()
	
	Элементы.ВидЭД.СписокВыбора.Очистить();
	
	Элементы.ВидЭД.СписокВыбора.Добавить(Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная, НСтр("ru = 'Товарная накладная'"));
	Элементы.ВидЭД.СписокВыбора.Добавить(Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот, НСтр("ru = 'Акт выполненных работ'"));
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ВидЭлектронногоДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДОНажатие(Элемент, СтандартнаяОбработка)
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
КонецПроцедуры
// Конец ЭДО

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
	// УНФ
	СтатистикаИспользованияФормКлиент.ДобавитьСтатистикуПодключаемойКоманды(ЭтотОбъект, Команда);
	// Конец УНФ
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
// @skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено,
	СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

// @skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// @skip-warning обработчик ожидания см. ПриОткрытии
&НаКлиенте
Процедура ПоказатьВыборИзКлассификатораКонтактов()
	
	ЭлектроннаяПочтаУНФКлиент.ПоказатьВыборИзКлассификатораКонтактов(ЭтотОбъект, "ЗНКонтрагент");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// ИнтеграцияГосИС
&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец ИнтеграцияГосИС

// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
// @skip-warning
&НаКлиенте
Процедура Подключаемый_ДекорацияСостояниеОригиналаНажатие(Элемент)
	УчетОригиналовПервичныхДокументовКлиент.ОткрытьМенюВыбораСостояния(ЭтотОбъект,Элементы.ДекорацияСостояниеОригинала);
КонецПроцедуры
//Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

#КонецОбласти

#Область Наборы

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаменитьСтрокуДаннымиНабора(Форма, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, СтруктураДанные)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если ИмяТабличнойЧасти="Запасы" Тогда
		СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, СтрокаТабличнойЧасти,
			Форма.ИспользоватьСерииНоменклатурыОстатки);
	КонецЕсли; 
	
	НаборыКлиентСервер.ЗаменитьСтрокуДаннымиНабора(Объект, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, СтруктураДанные); 
		
	// Ручные скидки
	РассчитатьСуммуИПроцентСкидкиРаботыЗапасы(Форма.Объект, Форма.СкидкаСумма, Форма.СкидкаПроцент);
	// Конец Ручные скидки
	
	Если ИмяТабличнойЧасти="Запасы" Тогда
		Элементы.ЗапасыКартинкаНабора.Видимость = Истина;
	ИначеЕсли ИмяТабличнойЧасти="Работы" Тогда
		Элементы.ЗНРаботыКартинкаНабора.Видимость = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСоставНабора(СтрокаТабличнойЧасти)
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.НоменклатураНабора);
	СтруктураОткрытия.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.ХарактеристикаНабора);
	ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОткрытия);
	СтрокиНабора = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОткрытия);
	Если ДобавленныеСтроки.Количество() = 0 Тогда
		СтруктураОткрытия.Вставить("Количество", 1);
	Иначе
		СтруктураОткрытия.Вставить("Количество", ДобавленныеСтроки[0].Количество);
	КонецЕсли; 
	СтруктураОткрытия.Вставить("СоставНабора", Новый Массив);
	Для каждого Стр Из СтрокиНабора Цикл
		СтруктураСтроки = Новый Структура("Номенклатура,Характеристика,Количество,Цена,ДоляСтоимости,Активная");
		Если ИмяТабличнойЧасти = "Запасы" Тогда
			СтруктураСтроки.Вставить("ЕдиницаИзмерения");
		ИначеЕсли ИмяТабличнойЧасти = "Работы" Тогда
			СтруктураСтроки.Вставить("ФиксированнаяСтоимость");
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Стр);
		Если Стр.Свойство("Кратность") Тогда
			СтруктураСтроки.Количество = СтруктураСтроки.Количество * Стр.Кратность;
		КонецЕсли; 
		СтруктураСтроки.Активная = (Стр = СтрокаТабличнойЧасти); 
		СтруктураОткрытия.СоставНабора.Добавить(СтруктураСтроки);
	КонецЦикла;
	ОткрытьФорму("РегистрСведений.СоставНаборов.Форма.ФормаРедактированияСостава", СтруктураОткрытия, ЭтотОбъект, , , , , 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставНабора(НоменклатураНабора, ХарактеристикаНабора, КоличествоНаборов, ЦенаНабора, СоставНабора)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НоменклатураНабора", НоменклатураНабора);
	СтруктураДанных.Вставить("ХарактеристикаНабора", ХарактеристикаНабора);
	СтруктураДанных.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	СтруктураДанных.Вставить("СоставНабора", СоставНабора);
	СтруктураДанных.Вставить("КоличествоНаборов", КоличествоНаборов);
	СтруктураДанных.Вставить("ЦенаНабора", ЦенаНабора);
	НаборыСервер.ОбновитьСоставНабораВДокументе(СтруктураДанных, Объект);
	ЗаполнитьСлужебныеПоляТабличнойЧасти(Объект.Запасы, Объект.Работы);
	Модифицированность = Истина;

	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныСервер("ОбработкаПодбора");
	// Конец АвтоматическиеСкидки
	
	// Ручные скидки
	РассчитатьСуммуИПроцентСкидкиРаботыЗапасы(Объект, СкидкаСумма, СкидкаПроцент);
	// Конец Ручные скидки
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДанныеКартинокНаборов(Запасы, Работы, ДобавленныеНаборы)
	
	ДобавленныеНаборыЗапасы = Новый Массив;
	ДобавленныеНаборыРаботы = Новый Массив;
	Для каждого ДобавленнаяСтрока Из ДобавленныеНаборы Цикл
		Если НЕ ЗначениеЗаполнено(ДобавленнаяСтрока.НоменклатураНабора) Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НоменклатураНабора", ДобавленнаяСтрока.НоменклатураНабора);
		Если Запасы.НайтиСтроки(СтруктураОтбора).Количество()>0 Тогда
			ДобавленныеНаборыЗапасы.Добавить(ДобавленнаяСтрока);
		ИначеЕсли Работы.НайтиСтроки(СтруктураОтбора).Количество()>0 Тогда
			ДобавленныеНаборыРаботы.Добавить(ДобавленнаяСтрока);
		КонецЕсли; 
	КонецЦикла;
	Для каждого Стр Из Запасы Цикл
		Стр.КартинкаНабора = НаборыКлиентСервер.КартинкаНабора(Стр, ДобавленныеНаборыЗапасы);
		Если Стр.КартинкаНабора>5 Тогда
			Стр.КартинкаНабора = ((Стр.КартинкаНабора - 1) % 5) + 1;
		КонецЕсли; 
	КонецЦикла; 
	Для каждого Стр Из Работы Цикл
		Стр.КартинкаНабора = НаборыКлиентСервер.КартинкаНабора(Стр, ДобавленныеНаборыРаботы);
		Если Стр.КартинкаНабора>5 Тогда
			Стр.КартинкаНабора = ((Стр.КартинкаНабора - 1) % 5) + 1;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры
 
&НаСервере
Функция  ХарактеристикиНабора(Номенклатура, Текст)
	
	СтруктураПараметров = Новый Структура();
	Если ПустаяСтрока(Текст) Тогда
		СтруктураПараметров.Вставить("СтрокаПоиска", Неопределено);
	Иначе
		СтруктураПараметров.Вставить("СтрокаПоиска", Текст);
	КонецЕсли; 
	СтруктураПараметров.Вставить("Отбор", Новый Структура);
	СтруктураПараметров.Отбор.Вставить("Владелец", Номенклатура);
	Возврат Справочники.ХарактеристикиНоменклатуры.ПолучитьДанныеВыбора(СтруктураПараметров);
	
КонецФункции

&НаСервере
Процедура ОбновитьЦеныНабора(Идентификатор, ИмяТЧ)
	
	СтрокаТабличнойЧасти = Объект[ИмяТЧ].НайтиПоИдентификатору(Идентификатор);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СброситьФлагСкидкиРассчитаны", Истина);
	ПараметрыРасчета.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	
	КоличествоНаборов = КоличествоНаборов(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.НоменклатураНабора);
	СтруктураОтбора.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.ХарактеристикаНабора);
	СтрокиНабора = Объект[ИмяТЧ].НайтиСтроки(СтруктураОтбора); 
	
	СоставНабора = Новый Массив;
	Колонки = Объект.Работы.Выгрузить().Колонки;
	ЦенаНабора = 0;
	Для каждого СтрокаНабора Из СтрокиНабора Цикл
		СтрокаСостава = Новый Структура;
		Для каждого Колонка Из Колонки Цикл
			СтрокаСостава.Вставить(Колонка.Имя, СтрокаНабора[Колонка.Имя]);
		КонецЦикла; 
		Если ИмяТЧ = "Работы" Тогда
			Если Объект.ПоложениеВидаРабот = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти 
				И НЕ СтрокаСостава.ФиксированнаяСтоимость Тогда
				СтрокаСостава.Вставить("ОригинальнаяНоменклатура", СтрокаСостава.Номенклатура);
				СтрокаСостава.Вставить("ОригинальнаяХарактеристика", СтрокаСостава.Характеристика);
				СтрокаСостава.Вставить("Номенклатура", СтрокаСостава.ВидРабот);
				СтрокаСостава.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			КонецЕсли; 
			СтрокаСостава.Вставить("ЕдиницаИзмерения", Справочники.КлассификаторЕдиницИзмерения.шт);
			СтрокаСостава.Количество = СтрокаСостава.Количество * СтрокаСостава.Кратность * СтрокаСостава.Коэффициент;
		КонецЕсли; 
		ЦенаНабора = ЦенаНабора + СтрокаСостава.Цена * СтрокаСостава.Количество;
		СоставНабора.Добавить(СтрокаСостава);
	КонецЦикла;
	СпособРасчетаЦен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.НоменклатураНабора, "СпособРасчетаЦеныНабора", Истина);
	Если СпособРасчетаЦен <> Перечисления.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих И ЦенаНабора > 0 И КоличествоНаборов > 0 Тогда
		// Не обновляем зафиксированную цену набора при изменении состава
		ЦенаНабора = ЦенаНабора / КоличествоНаборов;
	Иначе
		ЦенаНабора = 0;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.НоменклатураНабора);
	СтруктураДанных.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.ХарактеристикаНабора);
	СтруктураДанных.Вставить("СоставНабора", СоставНабора);
	СтруктураДанных.Вставить("КоличествоНаборов", КоличествоНаборов);
	СтруктураДанных.Вставить("ЦенаНабора", ЦенаНабора);
	НаборыСервер.ОбновитьЦеныСоставаНабора(СтруктураДанных, Объект);
	
	Для каждого ЭлементСостава Из СоставНабора Цикл
		Если ЭлементСостава.Свойство("ОригинальнаяНоменклатура") Тогда
			ЭлементСостава.Номенклатура = ЭлементСостава.ОригинальнаяНоменклатура;
		КонецЕсли; 
		Если ЭлементСостава.Свойство("ОригинальнаяХарактеристика") Тогда
			ЭлементСостава.Характеристика = ЭлементСостава.ОригинальнаяХарактеристика;
		КонецЕсли; 
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.НоменклатураНабора);
		СтруктураОтбора.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.ХарактеристикаНабора);
		СтруктураОтбора.Вставить("Номенклатура", ЭлементСостава.Номенклатура);
		СтруктураОтбора.Вставить("Характеристика", ЭлементСостава.Характеристика);
		Если Колонки.Найти("ЕдиницаИзмерения") <> Неопределено Тогда
			СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЭлементСостава.ЕдиницаИзмерения);
		КонецЕсли; 
	    СтрокиТЧ = Объект[ИмяТЧ].НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаТабличнойЧасти Из СтрокиТЧ Цикл
			СтрокаТабличнойЧасти.Цена = ЭлементСостава.Цена;
			ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти, ПараметрыРасчета);
		КонецЦикла;
	КонецЦикла;

	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныСервер("ОбработкаПодбора");
	// Конец АвтоматическиеСкидки
					
КонецПроцедуры

&НаСервере
Функция КоличествоНаборов(НоменклатураНабора, ХарактеристикаНабора, НомерВариантаКП = Неопределено)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("НоменклатураНабора", НоменклатураНабора);
	СтруктураОтбора.Вставить("ХарактеристикаНабора", ХарактеристикаНабора);
	Если НомерВариантаКП<>Неопределено Тогда
		СтруктураОтбора.Вставить("НомерВариантаКП", НомерВариантаКП);
	КонецЕсли; 
	ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
	Если ДобавленныеСтроки.Количество()=0 Тогда
		Возврат 0;
	Иначе
		Возврат ДобавленныеСтроки[0].Количество;
	КонецЕсли; 
	
КонецФункции
 
#КонецОбласти 

#Область УчетОригиналовПервичныхДокументов

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ИзменитьСостояниеОригинала(Команда)
	УчетОригиналовПервичныхДокументовУНФКлиент.ИзменитьСостояниеОригинала(Команда, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ПечатьЧековККМ

&НаКлиенте
Процедура НапечататьЧек(Команда)
	
	Если Объект.ВалютаДокумента <> УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
		ТекстСообщения = НСтр("ru = 'Валюта документа отличается от национальной.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат
	КонецЕсли;
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на оборудовании.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ПечатьДокументовУНФКлиент.ПечатьЧекаНевозможна(ЭтотОбъект, НСтр("ru = 'Не удалось провести документ'")) Тогда
		Возврат;
	КонецЕсли;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключенияФискальногоРегистратораЗавершение", ЭтотОбъект);
		МассивОборудования = Новый Массив;
		МассивОборудования.Добавить("ФискальныйРегистратор");
		МассивОборудования.Добавить("ККТ");
		МассивОборудования.Добавить("ПринтерЧеков");
		МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, МассивОборудования,
				НСтр("ru='Выберите оборудование'"), НСтр("ru='Оборудование не подключено.'"));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // НапечататьЧек()

&НаСервере
Функция ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР) 
	
	// Подготовка таблицы товаров
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	СуммаПлатежей = 0;
	
	РозничныеПродажиСервер.ДополнитьТоварамиПриОтгрузкеПараметрыПриПробитииЧека(РеквизитФормыВЗначение("Объект"), ОбщиеПараметры, СуммаПлатежей);
	
	// Общие параметры чека
	РеквизитыОрганизация = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "НаименованиеПолное,ИНН,КПП");
	
	КассаККМ = Справочники.КассыККМ.ПолучитьКассуККМПоЭкземпляруОборудования(ИдентификаторУстройстваФР);
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		ТекстСообщения = НСтр("ru = 'Не найдена касса ККМ соответствующая устройству %устройство%.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%устройство%", ИдентификаторУстройстваФР);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("ЭлектронныйЧекSMSПередаютсяПрограммой1С,ЭлектронныйЧекEmailПередаютсяПрограммой1С,СерийныйНомер,Код,ПодключаемоеОборудование,СтруктурнаяЕдиница");
	СтруктураРеквизитов.Вставить("СпособФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.СпособФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ДопустимоеРасхождениеФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.ДопустимоеРасхождениеФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ТипОборудования", "ПодключаемоеОборудование.ТипОборудования");
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КассаККМ, СтруктураРеквизитов);
	
	РеквизитыКассира = РозничныеПродажиСервер.ПолучитьРеквизитыКассира(Объект.Автор, Объект.ПодписьКассира);
	
	ОбщиеПараметры.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	
	ОбщиеПараметры.Электронно = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Телефон) Тогда
		Если РеквизитыКассыККМ.ЭлектронныйЧекSMSПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СSMS = Истина;
		КонецЕсли;
		ОбщиеПараметры.ПокупательНомер = "+7" + РозничныеПродажиСервер.УбратьРазделителиВНомереТелефона(Объект.Телефон);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АдресЭП) Тогда
		Если РеквизитыКассыККМ.ЭлектронныйЧекEmailПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СEmail = Истина;
		КонецЕсли;
		ОбщиеПараметры.ПокупательEmail = Объект.АдресЭП;
	КонецЕсли;
	
	ОбщиеПараметры.ДокументОснование = Объект.Ссылка;
	ОбщиеПараметры.ТорговыйОбъект = РеквизитыКассыККМ.СтруктурнаяЕдиница;
	
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ОбщиеПараметры.Кассир = РеквизитыКассира.ИмяКассираИДолжность;
	ОбщиеПараметры.Вставить("ИмяКассира", РеквизитыКассира.ИмяКассира);
	ОбщиеПараметры.КассирИНН = РеквизитыКассира.КассирИНН;
	
	ОбщиеПараметры.ОрганизацияНазвание = РеквизитыОрганизация.НаименованиеПолное;
	ОбщиеПараметры.ОрганизацияИНН = РеквизитыОрганизация.ИНН;
	ОбщиеПараметры.ОрганизацияКПП = РеквизитыОрганизация.КПП;
	ОбщиеПараметры.НомерКассы     = "00001";
	ОбщиеПараметры.НомерЧека      = "1";
	ОбщиеПараметры.НомерСмены     = "1";
	
	АдресМагазина = ПечатьДокументовУНФ.КонтактнаяИнформация(Объект.Организация, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации"));
	
	СерийныйНомер = РеквизитыКассыККМ.СерийныйНомер;
	Если НЕ ЗначениеЗаполнено(СерийныйНомер) Тогда
		СерийныйНомер = "1";
	КонецЕсли;
	
	ОбщиеПараметры.АдресМагазина = АдресМагазина;
	ОбщиеПараметры.НаименованиеМагазина = Строка(Объект.Организация);
	ОбщиеПараметры.СерийныйНомер = СерийныйНомер;
	ОбщиеПараметры.СистемаНалогообложения = РозничныеПродажиСервер.ПолучитьТипСистемыНалогообложенияККТ(
		Объект.Организация,
		,
		Объект.Дата,
		Объект.СпециальныйНалоговыйРежим);
		
	Если РеквизитыКассыККМ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
		ОбщиеПараметры.СпособФорматноЛогическогоКонтроля = РеквизитыКассыККМ.СпособФорматноЛогическогоКонтроля;
		ОбщиеПараметры.ДопустимоеРасхождениеФорматноЛогическогоКонтроля = РеквизитыКассыККМ.ДопустимоеРасхождениеФорматноЛогическогоКонтроля;
		Если ФорматноЛогическийКонтрольКлиентСервер.НуженФорматноЛогическийКонтроль(ОбщиеПараметры) Тогда
			ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ОбщиеПараметры);
		КонецЕсли;
	КонецЕсли;
	
	Если СуммаПлатежей = 0 Тогда
		СтрокаОплаты = Новый Структура("ТипОплаты,Наименование,Сумма", Перечисления.ТипыОплатыККТ.Постоплата, НСтр("ru = 'Постоплата'"), Объект.СуммаДокумента);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	ИначеЕсли СуммаПлатежей >= Объект.СуммаДокумента Тогда
		СтрокаОплаты = Новый Структура("ТипОплаты,Наименование,Сумма", Перечисления.ТипыОплатыККТ.Предоплата, НСтр("ru = 'Зачет аванса'"), Объект.СуммаДокумента);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	Иначе
		СтрокаОплаты = Новый Структура("ТипОплаты,Наименование,Сумма", Перечисления.ТипыОплатыККТ.Предоплата, НСтр("ru = 'Зачет аванса'"), СуммаПлатежей);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
		РазницаСумм = Объект.СуммаДокумента - СуммаПлатежей;
		Если РазницаСумм > 0 Тогда
			СтрокаОплаты = Новый Структура("ТипОплаты,Наименование,Сумма", Перечисления.ТипыОплатыККТ.Постоплата, НСтр("ru = 'Постоплата'"), РазницаСумм);
			ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты") Тогда
		РаботаСПодарочнымиСертификатами.ДобавитьВнереализационнуюПрибыль(Объект, ОбщиеПараметры);
	КонецЕсли;
	
	Возврат ОбщиеПараметры;
	
КонецФункции // ПодготовитьДанныеДляПробитияЧека()

&НаКлиенте
Процедура ПодключенияФискальногоРегистратораЗавершение(ИдентификаторУстройстваФР, Параметры) Экспорт
	
	Если ИдентификаторУстройстваФР = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР);
	
	Если ОбщиеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры.ДатаВремя = ТекущаяДата();
	
	Контекст = Новый Структура();

	Оповещение = Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект, Контекст);
	
	МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
		Оповещение, 
		УникальныйИдентификатор, 
		ОбщиеПараметры, 
		ИдентификаторУстройстваФР,
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		Если РезультатВыполнения.ВыходныеПараметры <> Неопределено Тогда
			Объект.НомерСменыККМ = РезультатВыполнения.ВыходныеПараметры[0];
			Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		КонецЕсли;
		
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		Если НЕ ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
			Объект.НомерЧекаККМ = 1;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
	Иначе
		
		ТекстСообщения = СтрШаблон(НСтр(
		"ru = 'При печати чека произошла ошибка.
		|Чек не напечатан на фискальном регистраторе.
		|Дополнительное описание:
		|%1'"), РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	УстановитьДоступностьПечатиЧека();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПечатиЧека()
	
	ИспользоватьПО = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	Если ИспользоватьПО
		И НЕ ТолькоПросмотр
		И Объект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		НапечататьЧекВидимость = Истина;
	Иначе
		НапечататьЧекВидимость = Ложь;
	КонецЕсли;
	
	Элементы.НапечататьЧек.Видимость = НапечататьЧекВидимость;
	Элементы.НомерЧекаККМ.Видимость = НапечататьЧекВидимость;
	Элементы.ГруппаОтправкаЧека.Видимость = НапечататьЧекВидимость;
	Элементы.ПредварительныйПросмотрЧека.Видимость = НапечататьЧекВидимость;
	Элементы.ПодписьКассира.Видимость = НапечататьЧекВидимость;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПечатиЧека()
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		Элементы.ГруппаОтправкаЧека.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонАдресЭППриИзменении(Элемент)
	
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП, Истина);
	
КонецПроцедуры

&НаСервере
Функция ПоляКИДляОтправкиЧека()
	
	ПоляКИ = Новый Соответствие;
	ПоляКИ.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Элементы.АдресЭП.Имя);
	ПоляКИ.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, Элементы.Телефон.Имя);
	
	Возврат ПоляКИ;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоляКИДляОтправкиЧекаПоУмолчанию(ДанныеКИ)
	
	Если ДанныеКИ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.АдресЭП = ДанныеКИ.Получить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Объект.Телефон = ДанныеКИ.Получить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ЗНМатериалы.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура)
		Тогда
		ТекстСообщения = НСтр("ru = 'Для выбора партии необходимо заполнить номенклатуру.'");
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	ДоступныеСтатусы = Новый Массив;
	ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье"));
	
	ПараметрыОтбора = Новый Структура("Владелец, Статус",ТекущиеДанные.Номенклатура, ДоступныеСтатусы);
	
	ПараметрыВыбораПартии = Новый Структура("ОперацияДокумента, Отбор, РежимВыбора",, ПараметрыОтбора, Истина);
	
	ОткрытьФорму("Справочник.ПартииНоменклатуры.ФормаСписка",ПараметрыВыбораПартии, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область Взаиморасчеты

&НаКлиенте
Процедура СпособЗачетаПредоплатыПриИзменении(Элемент)
	СпособЗачетаПредоплатыПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СпособЗачетаПредоплатыПриИзмененииНаСервере()
	РасчетыРаботаСФормамиВызовСервера.СпособЗачетаПредоплатыПриИзмененииНаСервере(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(ПриСозданииНаСервере = Ложь)
	РасчетыРаботаСФормамиВызовСервера.ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(ЭтотОбъект, ПриСозданииНаСервере);
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияРасшифровкиПриИзменении(Элемент)
	ВариантЗаполненияРасшифровкиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПросмотра(Команда)
	ЗаполнитьТаблицуПросмотраНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПросмотраНаКлиенте()
	Если Элементы.ЗНСтраницы.ТекущаяСтраница = Элементы.ЗНГруппаПредоплата
		И Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаПросмотр Тогда
		ЗаполнитьТаблицуПросмотраНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПросмотраНаСервере()
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьТаблицуПросмотраНаСервере(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникЗачетаПредоплаты(Команда) Экспорт
	
	Если Объект.Контрагент.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите вначале контрагента.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите вначале договор контрагента.'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая()
		ИЛИ Объект.Дата <> ДатаПриСозданииНаСервере Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗаписатьИОткрытьФормуРаспределенияПлатежа", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, 
		НСтр("ru = 'Перед открытием помощника данные будут записаны.
					|Продолжить?'"),
		РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФормуРаспределенияПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИОткрытьФормуРаспределенияПлатежа(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать();
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		КонецЕсли;
		ОткрытьФормуРаспределенияПлатежа();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРаспределенияПлатежа()
	
	СтруктураПараметров = Новый Структура();
	СтруктураАдресов = ПолучитьСтруктуруАдресовВХранилище();
	СтруктураПараметров.Вставить("СтруктураАдресов", СтруктураАдресов);
	
	СоответствиеИменТЧИРеквизитовДляИтогов = Новый Соответствие;
	СоответствиеИменТЧИРеквизитовДляИтогов.Вставить("Запасы", "Всего");
	СоответствиеИменТЧИРеквизитовДляИтогов.Вставить("Работы", "Всего");
	СтруктураПараметров.Вставить("СоответствиеИменТЧИРеквизитовДляИтогов", СоответствиеИменТЧИРеквизитовДляИтогов);
	СтруктураПараметров.Вставить("СоответствиеИменТЧИРеквизитаЗаказ", ПолучитьСоответствиеИменТЧИРеквизитаЗаказ());
	СтруктураПараметров.Вставить("ВалютаРасчетов", ВалютаРасчетов);
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("ЭтоЗаказНаряд", Истина);
	СтруктураПараметров.Вставить("ЭтоРасчетыСПоставщиком", Ложь);
	
	РасчетыРаботаСФормамиКлиент.ОткрытьФормуРаспределенияСуммыПлатежа(Ложь, ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруАдресовВХранилище()
	
	СтруктураДляВозврата = Новый Структура();
	
	ТаблицаПредоплата = Объект.Предоплата.Выгрузить();
	ТаблицаПредоплата.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	Для Каждого ТекущаяСтрока Из ТаблицаПредоплата Цикл
		Если НЕ ТекущаяСтрока.ЭтоПредоплатаБезЗаказа Тогда
			ТекущаяСтрока.Заказ = Объект.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДляВозврата.Вставить("АдресРасшифровкаПлатежаВХранилище",
		ПоместитьВоВременноеХранилище(
			ТаблицаПредоплата,
			УникальныйИдентификатор
		)
	);
	
	СтруктураДляВозврата.Вставить("АдресТаблицаДокументовДляИзмененияВХранилище",
		ПоместитьВоВременноеХранилище(
			ТаблицаДокументовДляИзменения.Выгрузить(),
			УникальныйИдентификатор
		)
	);
	
	// Суммы в разрезе заказов.
	ТЗЗаказыИСуммы = РасчетыРаботаСФормамиВызовСервера.ПолучитьПустуюТЗЗаказыИСуммы();
	Для Каждого ТекущаяСтрока Из Объект.Запасы Цикл
		НоваяСтрока = ТЗЗаказыИСуммы.Добавить();
		НоваяСтрока.Заказ = Объект.Ссылка;
		НоваяСтрока.Всего = ТекущаяСтрока.Всего;
	КонецЦикла;
	Для Каждого ТекущаяСтрока Из Объект.Работы Цикл
		НоваяСтрока = ТЗЗаказыИСуммы.Добавить();
		НоваяСтрока.Заказ = Объект.Ссылка;
		НоваяСтрока.Всего = ТекущаяСтрока.Всего;
	КонецЦикла;
	ТЗЗаказыИСуммы.Свернуть("Заказ", "Всего");
	СтруктураДляВозврата.Вставить("АдресТаблицаЗаказыИСумма",
		ПоместитьВоВременноеХранилище(
			ТЗЗаказыИСуммы,
			УникальныйИдентификатор
		)
	);
	
	Возврат СтруктураДляВозврата;
	
КонецФункции // ПоместитьРасшифровкаПлатежаВХранилище()

&НаКлиенте
Процедура РаспределитьСуммуПлатежаПослеРаспределения(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") И РезультатЗакрытия.Свойство("ДеревоРаспределенияСуммыПлатежа") Тогда
		
		РасчетыРаботаСФормамиКлиент.РаспределитьСуммуПлатежаПослеРаспределения(ЭтотОбъект, РезультатЗакрытия, ДопПараметры);
		
		РаспределитьСуммуПлатежаПослеРаспределенияЗавершение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьСуммуПлатежаПослеРаспределенияЗавершение()
	
	РасчетыРаботаСФормамиВызовСервера.РаспределитьСуммуПлатежаПослеРаспределенияЗавершение(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ЗаполнитьТаблицуПросмотраНаКлиенте();
	
	Если ТекущаяСтраница.Имя = "ЗНГруппаРесурсыПредприятия" Тогда
		УстановитьДоступностьПовторов(Истина);
		ЗаполнитьДанныеТаблицыРесурсовНаФорме();
	КонецЕсли;
	
	Если ТребуетсяОбновлениеТЧПоОстаткамМатериалы Или ТребуетсяОбновлениеТЧПоОстаткамЗапасы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	Если ТекущаяСтраница.Имя = "ЗНГруппаДоставка" Тогда	
		УстановитьВидимостьДанныхПоДоставке();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСоответствиеИменТЧИРеквизитаЗаказ()
	
	СоответствиеИменТЧИРеквизитаЗаказ = Новый Соответствие;
	СоответствиеИменТЧИРеквизитаЗаказ.Вставить("Запасы", "Заказ");
	СоответствиеИменТЧИРеквизитаЗаказ.Вставить("Работы", "Заказ");
	Возврат СоответствиеИменТЧИРеквизитаЗаказ;
	
КонецФункции

&НаСервере
Процедура ВзаиморасчетыПриСозданииНаСервере()
	
	ВидОперацииПомощника = ВидОперацииЗаказНаряд;
	Если Объект.Ссылка.Пустая() Тогда
		Если Объект.ВидОперации = ВидОперацииЗаказНаряд Тогда
			Объект.СпособЗачетаПредоплаты = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(Объект.Договор, Объект.Контрагент, Истина);
		Иначе
			Объект.СпособЗачетаПредоплаты = СпособыЗачетаВручную;
		КонецЕсли;
	ИначеЕсли Объект.СпособЗачетаПредоплаты.Пустая() Тогда
		Объект.СпособЗачетаПредоплаты = СпособыЗачетаВручную;
	КонецЕсли;
	ВариантЗаполненияРасшифровки = РасчетыРаботаСФормамиВызовСервера.ПолучитьВариантЗаполненияРасшифровкиДляДокументаОтгрузки(Объект.Проведен, Объект.СпособЗачетаПредоплаты);
	ИстинаПриСозданииНаСервере = Истина;
	ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(ИстинаПриСозданииНаСервере);
	
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьРеквизитыРасчетов(ЭтотОбъект, СтруктураПараметровРасчетов, Неопределено, Истина);
	
	РасчетыРаботаСФормамиВызовСервера.СпособЗачетаПредоплатыПриИзмененииНаСервере(ЭтотОбъект);
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	Элементы.ЗНГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(Объект.СпособЗачетаПредоплаты, Объект.Предоплата);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДляПросмотраОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	РасчетыРаботаСФормамиКлиент.ТаблицаДляПросмотраОбработкаРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка, СтруктураПараметровРасчетов, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаЗаказПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Предоплата.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ЭтоПредоплатаБезЗаказа = (ТекущиеДанные.ЗаказСтрока <> "<текущий документ>");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОстаткиИРезервы

&НаКлиенте
Процедура ЗаполнитьСкладВТабличныхЧастях()
	
	Для Каждого СтрокаТЧ Из Объект.Запасы Цикл
		СтрокаТЧ.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
		СтрокаТЧ.Ячейка = Объект.Ячейка;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Объект.Материалы Цикл
		СтрокаТЧ.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
		СтрокаТЧ.Ячейка = Объект.Ячейка;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиИРезервы(Команда)
	
	УстановитьВидимостьОтПользовательскихНастроек(Объект, ЭтотОбъект);
	
	РежимОстаткиИРезервы = Не РежимОстаткиИРезервы;
	Элементы.ОстаткиИРезервы.Пометка = РежимОстаткиИРезервы;
	Элементы.ОстаткиИРезервыМатериалы.Пометка = РежимОстаткиИРезервы;
	
	Элементы.ЗапасыИзменитьРезервОчиститьРезерв.Заголовок = ?(ЗаказНарядВСостоянииВыполнения, "Очистить ""Из резерва""" ,"Очистить ""В резерв""");
	Элементы.МатериалыИзменитьРезервОчиститьРезерв.Заголовок = ?(ЗаказНарядВСостоянииВыполнения, "Очистить ""Из резерва""" ,"Очистить ""В резерв""");
	Элементы.МатериалыИзменитьРезервОчиститьРезервДляВсех.Заголовок = ?(ЗаказНарядВСостоянииВыполнения, "Очистить ""Из резерва"" для всех работ" ,"Очистить ""В резерв"" для всех работ");
	
	ИмяТЧ = ТекущееИмяТабличнойЧастиДляОстатковИРезервов();
	
	Если СкладВШапке Тогда
		Для каждого Строка Из Объект.Запасы Цикл
			Если НЕ Строка.ТипНоменклатурыЗапас 
				Или ЗначениеЗаполнено(Строка.СтруктурнаяЕдиницаРезерв) Тогда
				Продолжить;
			КонецЕсли; 
			Строка.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
		КонецЦикла;
	КонецЕсли; 
	
	Если РежимОстаткиИРезервы Тогда
		
		Если ИмяТЧ = "Запасы" Тогда
			
			Если Элементы.РежимГТДЗапасы.Пометка Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТДЗапасы", "Пометка", НЕ Элементы.РежимГТДЗапасы.Пометка);
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТДЗапасыКонтекст", "Пометка", НЕ Элементы.РежимГТДЗапасыКонтекст.Пометка);
				ИзменитьРежимРаботаГТД(Элементы.РежимГТДЗапасы.Пометка, "Запасы");
			КонецЕсли;
		
			ТребуетсяОбновлениеТЧПоОстаткамМатериалы = РежимОстаткиИРезервы И Объект.ИспользоватьМатериалы;
		ИначеЕсли ИмяТЧ = "Материалы" Тогда
			
			Если Элементы.ЗНМатериалыРежимГТДМатериалы.Пометка Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗНМатериалыРежимГТДМатериалы", "Пометка", НЕ Элементы.ЗНМатериалыРежимГТДМатериалы.Пометка);
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗНМатериалыРежимГТДМатериалыКонтекст", "Пометка", НЕ Элементы.ЗНМатериалыРежимГТДМатериалыКонтекст.Пометка);
				ИзменитьРежимРаботаГТД(Элементы.ЗНМатериалыРежимГТДМатериалы.Пометка, "ЗНМатериалы");
			КонецЕсли;
			
			ТребуетсяОбновлениеТЧПоОстаткамЗапасы = РежимОстаткиИРезервы И Объект.ИспользоватьТовары;
		Иначе
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	Иначе
		ТребуетсяОбновлениеТЧПоОстаткамМатериалы = Ложь;
		ТребуетсяОбновлениеТЧПоОстаткамЗапасы = Ложь;
		ПроверитьПоложениеСклада();
		ОтменитьОтбор(Истина);
	КонецЕсли;
	
	ОбновитьОтображениеКолонокВРазрезеЗапасов(,Не РежимОстаткиИРезервы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборЭлементаТабличнойЧасти(Элемент)
	
	ИмяТЧ = Элементы.ЗНСтраницы.ТекущаяСтраница.Имя;
	
	Если ИмяТЧ = "ЗНГруппаЗапасы" Или (ИмяТЧ = "ЗНГруппаРаботы" И Элементы.ЗНМатериалы.Видимость) Тогда
		ИмяТЧ = ?(ИмяТЧ = "ЗНГруппаЗапасы", "Запасы", "Материалы");
		
		Если ИмяТЧ = "Материалы" Тогда 
			ИмяТЧФорма = "ЗНМатериалы";
		Иначе
			ИмяТЧФорма = "Запасы" 
		КонецЕсли;
		
	Иначе
		Возврат
	КонецЕсли;
	
	ТекущиеДанные = Элементы[ИмяТЧФорма].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Номенклатура = ТекущиеДанные.Номенклатура;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда Возврат КонецЕсли;
	
	Характеристика = ТекущиеДанные.Характеристика;
	Партия = ТекущиеДанные.Партия;
	
	СтруктурнаяЕдиницаОбъекта = ?(ЗаказНарядВСостоянииВыполнения, Объект.СтруктурнаяЕдиницаПродажи, Объект.СтруктурнаяЕдиницаРезерв);
	
	Склад = ?(ЗначениеЗаполнено(ТекущиеДанные.СтруктурнаяЕдиницаРезерв), ТекущиеДанные.СтруктурнаяЕдиницаРезерв, СтруктурнаяЕдиницаОбъекта);
	
	СтруктураПараметров = Новый Структура("ОрганизацияОбъекта, Номенклатура, Характеристика, Партия, Склад, ЕдиницаИзмерения
											|, ЗаказПокупателя, НомерВариантаКП, КакВЗаказеПокупателя, ВидыЗаполненияПоЗаказНаряду");
	
	СтруктураПараметров.Номенклатура = Номенклатура;
	СтруктураПараметров.Характеристика = Характеристика;
	СтруктураПараметров.Партия = Партия;
	СтруктураПараметров.Склад = Склад;
	СтруктураПараметров.ЕдиницаИзмерения = ТекущиеДанные.ЕдиницаИзмерения;
	СтруктураПараметров.ЗаказПокупателя =  Объект.Ссылка;
	СтруктураПараметров.НомерВариантаКП = 0;
	СтруктураПараметров.ОрганизацияОбъекта = Объект.Организация;
	
	ВидыЗаполненияПоЗаказНаряду = Новый Структура("КакВЗаказеПокупателя, КакВРасходнойНакладной");
	ВидыЗаполненияПоЗаказНаряду.КакВЗаказеПокупателя = Не ЗаказНарядВСостоянииВыполнения;
	ВидыЗаполненияПоЗаказНаряду.КакВРасходнойНакладной = ЗаказНарядВСостоянииВыполнения;
	
	СтруктураПараметров.ВидыЗаполненияПоЗаказНаряду = ВидыЗаполненияПоЗаказНаряду;
	
	СтруктурнаяЕдиницаРезервРасход = ИмяТЧ + "СтруктурнаяЕдиницаРезервРасход";
	ВРезервеВсего = ИмяТЧ + "ВРезервеВсего";
	ОстатокОбщий = ?(Не ЗаказНарядВСостоянииВыполнения, ИмяТЧ + "ОстатокОбщий", ИмяТЧ + "ОстатокОбщийРасход");
	СтруктурнаяЕдиницаРезервЗаказ = ИмяТЧ + "СтруктурнаяЕдиницаРезервЗаказ";
	Зарезервировано = ИмяТЧ + "Зарезервировано";
	ВРезерве = ИмяТЧ + "ВРезерве";
	Размещено = ИмяТЧ + "Размещено";
	ДатаПоступления = ИмяТЧ + "ДатаПоступления";
	
	Если ЗаказНарядВСостоянииВыполнения Тогда
		
		Если Элемент.ТекущийЭлемент = Элементы[ОстатокОбщий]
			Или Элемент.ТекущийЭлемент = Элементы[СтруктурнаяЕдиницаРезервРасход] Тогда
			
			ЗначениеПоля = ТекущиеДанные.ОстатокОбщий;
			
			СписокВыбораСклад = Элементы[СтруктурнаяЕдиницаРезервРасход].СписокВыбора;
			СписокВыбораСклад.Очистить();
			
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				
				ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ЗапасыОстатокОбщий");
				Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтаФорма, ПараметрыОповещения);
				
				СписокДокументов = СписокДокументовПоЗаказу("ОбщиеЗапасы", СтруктураПараметров, ИмяТЧ, "Отгрузка", "ЗаказНаряд");
				
				Для Каждого ЭлементСписка Из СписокДокументов Цикл
					СписокВыбораСклад.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление,, ЭлементСписка.Картинка);
				КонецЦикла;
				
				Если СписокДокументов.Количество() Тогда
					СписокДокументов.Добавить("ОтчетОстаткиНаСкладах", НСтр("ru = 'Остатки на складах (отчет)'"),, БиблиотекаКартинок.Отчет);
					СписокВыбораСклад.Добавить("ОтчетОстаткиНаСкладах", НСтр("ru = 'Остатки на складах (отчет)'"),, БиблиотекаКартинок.Отчет);
				КонецЕсли;
				
				Если Элемент.ТекущийЭлемент = Элементы[ОстатокОбщий] Тогда
					ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент.ТекущийЭлемент);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элемент.ТекущийЭлемент = Элементы[ВРезервеВсего]
			Или Элемент.ТекущийЭлемент = Элементы[Зарезервировано] Тогда
			
			ЗначениеПоля = ?(Элемент.ТекущийЭлемент = Элементы[ВРезервеВсего], ТекущиеДанные.ВРезерве, ТекущиеДанные.ВРезервеТекСклад);
			
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				
				ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ЗапасыВРезерве");
				Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтаФорма, ПараметрыОповещения);
				
				СтруктураПараметров.Склад = ?(Элемент.ТекущийЭлемент = Элементы[ВРезервеВсего], Неопределено, СтруктураПараметров.Склад);
				
				СписокДокументов = СписокДокументовПоЗаказу("Остаток", СтруктураПараметров, ИмяТЧ, "Отгрузка", "ЗаказНаряд");
				
				ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент.ТекущийЭлемент);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если Элемент.ТекущийЭлемент = Элементы[ВРезерве] Тогда
			
			ЗначениеПоля = ТекущиеДанные.ВРезерве;
			
			Если ЗначениеЗаполнено(ЗначениеПоля) И ЗначениеЗаполнено(Объект.Ссылка) Тогда
				
				ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ЗапасыВРезерве");
				Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтаФорма, ПараметрыОповещения);
				
				СтруктураПараметров.Склад = Неопределено;
				
				СписокДокументов = СписокДокументовПоЗаказу("Остаток", СтруктураПараметров, ИмяТЧ);
				
				ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент.ТекущийЭлемент);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элемент.ТекущийЭлемент = Элементы[Размещено] И ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			ЗначениеПоля = ТекущиеДанные.Размещено;
			
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				
				ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ЗапасыРазмещено");
				Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтаФорма, ПараметрыОповещения);
				
				СтруктураПараметров.Склад = Неопределено;
				
				СписокДокументов = СписокДокументовПоЗаказу("Заказано", СтруктураПараметров, ИмяТЧ);
				ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент.ТекущийЭлемент);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элемент.ТекущийЭлемент = Элементы[ОстатокОбщий]
			Или Элемент.ТекущийЭлемент = Элементы[СтруктурнаяЕдиницаРезервЗаказ] Тогда
			
			ЗначениеПоля = ТекущиеДанные.ОстатокОбщий;
			
			СписокВыбораСклад = Элементы[СтруктурнаяЕдиницаРезервЗаказ].СписокВыбора;
			СписокВыбораСклад.Очистить();
			
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				
				ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ЗапасыОстатокОбщий");
				Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтаФорма, ПараметрыОповещения);
				
				СписокДокументов = СписокДокументовПоЗаказу("ОбщиеЗапасы", СтруктураПараметров, ИмяТЧ);
				
				Для Каждого ЭлементСписка Из СписокДокументов Цикл
					СписокВыбораСклад.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление,, ЭлементСписка.Картинка);
				КонецЦикла;
				
				Если Не ТекущиеДанные.ОстатокОбщий = 0 И РазрешитьСкладыВТабличныхЧастях Тогда
					
					ЗначениеОстатокОбщий = ?(ТекущиеДанные.ОстатокОбщий <= 0, "", Формат(ТекущиеДанные.ОстатокОбщий, "ЧДЦ = 3"));
					
					ПредставлениеОбщегоОстатка = ЗначениеОстатокОбщий + " " + Строка(ТекущиеДанные.ЕдиницаИзмерения) + ". <Всего>; Заполнить по остаткам.";
					
					ЭлементСпискаЗначений = Новый СписокЗначений;
					ЭлементСпискаЗначений.Добавить("РаспределитьПоРезервам", ПредставлениеОбщегоОстатка);
					
					СписокВыбораСклад.Добавить(ЭлементСпискаЗначений[0].Значение, ПредставлениеОбщегоОстатка);
					СписокДокументов.Добавить(ЭлементСпискаЗначений[0].Значение, ПредставлениеОбщегоОстатка);
					
				КонецЕсли;
				
				Если СписокДокументов.Количество() Тогда
					СписокДокументов.Добавить("ОтчетОстаткиНаСкладах", НСтр("ru = 'Остатки на складах (отчет)'"),, БиблиотекаКартинок.Отчет);
					СписокВыбораСклад.Добавить("ОтчетОстаткиНаСкладах", НСтр("ru = 'Остатки на складах (отчет)'"),, БиблиотекаКартинок.Отчет);
				КонецЕсли;
				
				Если Элемент.ТекущийЭлемент = Элементы[ОстатокОбщий] Тогда
					ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент.ТекущийЭлемент);
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элемент.ТекущийЭлемент = Элементы[ДатаПоступления] Тогда
			
			ЗначениеПоля = ТекущиеДанные.ДатаПоступления;
			
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				
				ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ЗапасыПоступления");
				Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтаФорма, ПараметрыОповещения);
				
				СписокДокументов = СписокДокументовПоЗаказу("ЗапасыПоступления", СтруктураПараметров, ИмяТЧ);
				ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент.ТекущийЭлемент);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРазбитьСтроку(Команда)
	РазбитьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку()
	
	ИмяТЧ = ТекущееИмяТабличнойЧастиДляОстатковИРезервов();
	
	Если ИмяТЧ = "Материалы" Тогда 
		ИмяТЧФорма = "ЗНМатериалы";
	Иначе
		ИмяТЧФорма = "Запасы" 
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы[ИмяТЧФорма].ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Количество в текущей строке равно нулю.'");
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		Возврат
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("СтрокаТабличнойЧасти, АвтоматическиеСкидкиРассчитаны, ИмяТЧ", СтрокаТабличнойЧасти, Объект.СкидкиРассчитаны, ИмяТЧ);
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТабличнойЧастиЗавершение", ЭтаФорма, ПараметрыОповещения);
	
	ПоказатьВводЧисла(Оповещение, СтрокаТабличнойЧасти.Количество, "Введите количество в новой строке", 15, 3);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПоказатьДублиСтрок(Команда)
	
	ПоказатьДублиСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОбновить(Команда)
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДублиСтрок(ПоказатьВЛюбомСлучае = Ложь)
		
	ИмяТЧ = ТекущееИмяТабличнойЧастиДляОстатковИРезервов();
	
	Если ИмяТЧ = Неопределено Тогда Возврат КонецЕсли;
	
	Если ИмяТЧ = "Материалы" Тогда 
		ИмяТЧФорма = "ЗНМатериалы";
	Иначе
		ИмяТЧФорма = "Запасы" 
	КонецЕсли;
	
	ИдентификаторСтроки = Элементы[ИмяТЧФорма].ТекущаяСтрока;
	
	Если ИдентификаторСтроки = Неопределено Или Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторСтроки) = Неопределено Тогда Возврат КонецЕсли;

	НомерСтроки = Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторСтроки).НомерСтроки-1;
	
	СтрокаТабличнойЧасти = Объект[ИмяТЧ][НомерСтроки];
	
	ДекорацияОтборПоДублям = ИмяТЧФорма+"ДекорацияОтборПоДублям";
	КонтекстноеМенюПоказатьДублиСтрок = ИмяТЧ+"КонтекстноеМенюПоказатьДублиСтрок";
	
	Если (Не Элементы[ДекорацияОтборПоДублям].Видимость И Не ПоказатьВЛюбомСлучае) Или (Элементы[ДекорацияОтборПоДублям].Видимость И ПоказатьВЛюбомСлучае) Тогда
		
		ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика, Партия, КлючСвязи"
		, СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика, СтрокаТабличнойЧасти.Партия, СтрокаТабличнойЧасти.КлючСвязи);
		
		НайденныеСтроки = Объект[ИмяТЧ].НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() <=1 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Дубли строки не найдены.'");
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Сообщить();
			Возврат
		КонецЕсли;
		
		ПараметрыОтбора = Новый ФиксированнаяСтруктура("Номенклатура, Характеристика, Партия, КлючСвязи"
		, СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика, СтрокаТабличнойЧасти.Партия, СтрокаТабличнойЧасти.КлючСвязи);
		
		Элементы[КонтекстноеМенюПоказатьДублиСтрок].Пометка = Истина;
		
		Элементы[ДекорацияОтборПоДублям].Заголовок = ИнформацияОбОтборе(СтрокаТабличнойЧасти.НомерСтроки);
		Элементы[ДекорацияОтборПоДублям].Видимость = Истина;
		
		Возврат;
		
	Иначе
		ОтменитьОтбор()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПоложениеСклада()
	
	Если СкладВШапке Тогда
		
		ЗначениеСклада = Объект.СтруктурнаяЕдиницаРезерв;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			Если НЕ СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = ЗначениеСклада Тогда
				Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
				Возврат;
			КонецЕсли;
			
			ЗначениеСклада = СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеКолонокВРазрезеЗапасов(ИмяТЧ = Неопределено, УбратьВидимостьРежима = Ложь, ОбновлятьСостояние = Истина)
	
	МассивИменТЧ = Новый Массив;
	
	Если ИмяТЧ = Неопределено Тогда
		Если Объект.ИспользоватьТовары Тогда
			МассивИменТЧ.Добавить("Запасы");
		КонецЕсли;
		Если Объект.ИспользоватьМатериалы Тогда
			МассивИменТЧ.Добавить("Материалы");
		КонецЕсли;
	Иначе
		МассивИменТЧ.Добавить(ИмяТЧ);
	КонецЕсли;
	
	Если Не МассивИменТЧ.Количество() Тогда Возврат КонецЕсли;
	
	Если УбратьВидимостьРежима Тогда
		
		Для Каждого ИмяТЧ Из МассивИменТЧ Цикл
			
			КонтекстноеМенюГруппаРаботаССтроками = ИмяТЧ + "КонтекстноеМенюГруппаРаботаССтроками";
			
			ОстаткиРасход = ИмяТЧ + "ОстаткиРасход";
			ОстаткиЗаказ = ИмяТЧ + "ОстаткиЗаказ";
			Обеспечение = ИмяТЧ + "Обеспечение";
			ГруппаКПоступлению = ИмяТЧ + "ГруппаКПоступлению";
			
			Элементы[ОстаткиРасход].Видимость = Ложь;
			Элементы[ОстаткиЗаказ].Видимость = Ложь;
			Элементы[Обеспечение].Видимость = Ложь;
			Элементы[ГруппаКПоступлению].Видимость = Ложь;
			
			Элементы[КонтекстноеМенюГруппаРаботаССтроками].Видимость = Ложь;
			
			Если ИмяТч = "Материалы" Тогда
				Ячейка = "ЗНМатериалы" + "Ячейка";
			Иначе
				Ячейка = ИмяТЧ + "Ячейка";
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОбновлятьСостояние Тогда
			УстановитьВидимостьИДоступностьОтСостояния();
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ИмяТЧ Из МассивИменТЧ Цикл
		
		Если ИмяТЧ = "Материалы" Тогда
			Элементы["ЗНМатериалы"].ВысотаШапки = ?(РежимОстаткиИРезервы,2,1);
		Иначе
			Элементы[ИмяТЧ].ВысотаШапки = ?(РежимОстаткиИРезервы,2,1);
		КонецЕсли;
		
		КонтекстноеМенюГруппаРаботаССтроками = ИмяТЧ + "КонтекстноеМенюГруппаРаботаССтроками";
			
			ОстаткиРасход = ИмяТЧ + "ОстаткиРасход";
			ОстаткиЗаказ = ИмяТЧ + "ОстаткиЗаказ";
			Обеспечение = ИмяТЧ + "Обеспечение";
			ГруппаКПоступлению = ИмяТЧ + "ГруппаКПоступлению";
			
			Если ИмяТч = "Материалы" Тогда
				СтруктурнаяЕдиницаРезерв = "ЗНМатериалы" + "СтруктурнаяЕдиницаРезерв";
				Ячейка = "ЗНМатериалы" + "Ячейка";
				Резерв = "ЗНМатериалы" + "Резерв";
				РезервОтгрузка = "ЗНМатериалы" + "РезервОтгрузка";
			Иначе
				СтруктурнаяЕдиницаРезерв = ИмяТЧ + "СтруктурнаяЕдиницаРезерв";
				Ячейка = ИмяТЧ + "Ячейка";
				Резерв = ИмяТЧ + "Резерв";
				РезервОтгрузка = "ЗНМатериалы" + "РезервОтгрузка";
			КонецЕсли;
			
			РезервДляРежимаОстаткиРасход = ИмяТЧ + "РезервДляРежимаОстаткиРасход";
			ВРезервеВсего = ИмяТЧ + "ВРезервеВсего";
			РезервДляРежимаОстаткиРасход = ИмяТЧ + "РезервДляРежимаОстаткиРасход";
			ЗарезервированоРасход = ИмяТЧ + "ЗарезервированоРасход";
			ЯчейкаДляРежимаОстатки = ИмяТЧ + "ЯчейкаДляРежимаОстатки";
			ОстатокОбщий = ИмяТЧ + "ОстатокОбщий";
			НеОтгружено = ИмяТЧ + "НеОтгружено";
			Обеспечено = ИмяТЧ + "Обеспечено";
			ОстатокСвободно = ИмяТЧ + "ОстатокСвободно";
			РезервДляРежимаОстатки = ИмяТЧ + "РезервДляРежимаОстатки";
			СтруктурнаяЕдиницаРезервЗаказ = ИмяТЧ + "СтруктурнаяЕдиницаРезервЗаказ";
			
			Элементы[ОстаткиРасход].Видимость = Ложь;
			Элементы[ОстаткиЗаказ].Видимость = Ложь;
			Элементы[Обеспечение].Видимость = Ложь;
			Элементы[ГруппаКПоступлению].Видимость = Ложь;
			
			Если ЗаказНарядВСостоянииВыполнения Тогда
				
				Элементы[ОстаткиРасход].Видимость  = РежимОстаткиИРезервы;
				Элементы[СтруктурнаяЕдиницаРезерв].Видимость = Не РежимОстаткиИРезервы;
				
				Элементы[РезервДляРежимаОстаткиРасход].Видимость = Объект.Проведен;
				Элементы[ВРезервеВсего].Видимость = РежимОстаткиИРезервы И Объект.Проведен И ФункциональнаяОпцияРезервированиеЗапасов;
				
				Элементы[РезервДляРежимаОстаткиРасход].Видимость = РежимОстаткиИРезервы И ФункциональнаяОпцияРезервированиеЗапасов;
				Элементы[ЗарезервированоРасход].Видимость = РежимОстаткиИРезервы И ФункциональнаяОпцияРезервированиеЗапасов;
				
				Если КэшЗначений.УчетПоЯчейкам И Элементы[Ячейка].Видимость Тогда
					Элементы[Ячейка].Видимость = НЕ РежимОстаткиИРезервы И РазрешитьСкладыВТабличныхЧастях;
					Элементы[ЯчейкаДляРежимаОстатки].Видимость = РежимОстаткиИРезервы И РазрешитьСкладыВТабличныхЧастях;
				КонецЕсли;
				
				Элементы[РезервОтгрузка].Видимость = Не РежимОстаткиИРезервы И ФункциональнаяОпцияРезервированиеЗапасов;
				
			Иначе
				Элементы[ОстаткиЗаказ].Видимость = РежимОстаткиИРезервы;
				Элементы[СтруктурнаяЕдиницаРезервЗаказ].Видимость = РежимОстаткиИРезервы И РазрешитьСкладыВТабличныхЧастях;
				
				Элементы[ГруппаКПоступлению].Видимость = РежимОстаткиИРезервы;
				Элементы[ОстатокОбщий].Видимость = РежимОстаткиИРезервы;
				
				Элементы[НеОтгружено].Видимость = Объект.Проведен;
				
				Если ФункциональнаяОпцияРезервированиеЗапасов Тогда
					Элементы[Обеспечение].Видимость = Объект.Проведен И РежимОстаткиИРезервы;
				Иначе
					Элементы[Обеспечение].Видимость = Ложь;
					
					Элементы[Обеспечено].Видимость = Ложь;
					Элементы[СтруктурнаяЕдиницаРезервЗаказ].Видимость = Ложь;
					Элементы[ОстатокСвободно].Видимость = Ложь;
					Элементы[РезервДляРежимаОстатки].Видимость = Ложь;
					
				КонецЕсли;
				
				Элементы[СтруктурнаяЕдиницаРезерв].Видимость = РежимОстаткиИРезервы Или Не СкладВШапке;
				Элементы[Резерв].Видимость = Не РежимОстаткиИРезервы И ФункциональнаяОпцияРезервированиеЗапасов;
				
				Если КэшЗначений.УчетПоЯчейкам И Элементы[Ячейка].Видимость Тогда
					Элементы[Ячейка].Видимость = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			Элементы[КонтекстноеМенюГруппаРаботаССтроками].Видимость = РежимОстаткиИРезервы;
			
		КонецЦикла;
		
		Если ОбновлятьСостояние Тогда
			УстановитьВидимостьИДоступностьОтСостояния();
		КонецЕсли;
		
		Если ЗаказНарядВСостоянииВыполнения Тогда
			Элементы.ИзменитьРезервЗаполнитьПоОстаткам.Заголовок = НСтр("ru = 'По остаткам и резервам (все склады)'");
			Элементы.ЗНМатериалыИзменитьРезервЗаполнитьПоОстаткам.Заголовок = НСтр("ru = 'По остаткам и резервам (все склады / для всех работ)'");
		Иначе
			Элементы.ИзменитьРезервЗаполнитьПоОстаткам.Заголовок = НСтр("ru = 'По остаткам (все склады)'");
			Элементы.ЗНМатериалыИзменитьРезервЗаполнитьПоОстаткам.Заголовок = НСтр("ru = 'По остаткам (все склады / все работы)'");
		КонецЕсли;
		
		Элементы.ЗаполнитьКоличествоТемЧтоМожноОтгрузить.Видимость = ЗаказНарядВСостоянииВыполнения;
		Элементы.ЗНМатериалыИзменитьРезервЗаполнитьПоОстаткам.Видимость = ?(Элементы.ЗНМатериалыИзменитьРезервЗаполнитьПоОстаткам.Видимость
																			, РазрешитьСкладыВТабличныхЧастях, Элементы.ЗНМатериалыИзменитьРезервЗаполнитьПоОстаткам.Видимость);
		Элементы.ИзменитьРезервЗаполнитьПоОстаткам.Видимость = ?(Элементы.ИзменитьРезервЗаполнитьПоОстаткам.Видимость, РазрешитьСкладыВТабличныхЧастях
																, Элементы.ИзменитьРезервЗаполнитьПоОстаткам.Видимость);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	
	ИмяТЧ = Элементы.ЗНСтраницы.ТекущаяСтраница.Имя;
	
	Если ИмяТЧ = "ЗНГруппаЗапасы" Или (ИмяТЧ = "ЗНГруппаРаботы" И Элементы.ЗНМатериалы.Видимость) Тогда
		
		ИмяТЧ = ?(ИмяТЧ = "ЗНГруппаЗапасы", "Запасы", "Материалы");
	Иначе
		Возврат
	КонецЕсли;
	
	ИмяТЧФорма = ?(ИмяТЧ = "Материалы", "ЗНМатериалы", "Запасы");
	
	ТекущиеДанные = Элементы[ИмяТЧФорма].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если Параметры.ВыбранноеПоле = "ЗапасыВРезерве" И Результат.Значение = Объект.Ссылка Тогда
		Если Не ЗаказНарядВСостоянииВыполнения Тогда
			ЭтаФорма.ТекущийЭлемент = Элементы[ИмяТЧ+"РезервДляРежимаОстатки"];
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Параметры.ВыбранноеПоле = "ЗапасыОстатокОбщий" Тогда
		
		Если Результат.Значение = "ОтчетОстаткиНаСкладах" Тогда
			
			Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
				Возврат;
			КонецЕсли;
			
			Вариант = РаботаСФормойДокументаКлиентСервер.ВариантОтчета("ОстаткиТоваров", "ПоМестамХранения");
			
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
			ОтборРасшифровки = Новый Соответствие;
			ОтборРасшифровки.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
			ОтборРасшифровки.Вставить("Характеристика", ТекущиеДанные.Характеристика);
			ОтборРасшифровки.Вставить("СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы", ПредопределенноеЗначение(
				"Перечисление.ТипыСтруктурныхЕдиниц.Склад"));
			ПараметрыОткрытия.Вставить("ОтборРасшифровки", ОтборРасшифровки);
			
			ВариантыОтчетовКлиент.ОткрытьФормуОтчета(, Вариант, ПараметрыОткрытия);
			
		КонецЕсли;
		
		Если Не ФункциональнаяОпцияРезервированиеЗапасов Или Не РазрешитьСкладыВТабличныхЧастях Тогда
			Возврат;
		КонецЕсли;
		
		Если Результат.Значение = "РаспределитьПоРезервам" Тогда
			
			СтруктураОтбораНоменклатуры = Новый Структура("Номенклатура, Характеристика, Партия",
				ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика, ТекущиеДанные.Партия);

			ЗаполнитьКолонкуРезервПоОстаткамНаСервере(СтруктураОтбораНоменклатуры, ИмяТЧ);
			
			ЭтаФорма.Модифицированность = Истина;
		
		Иначе
			
			Если ТипЗнч(Результат.Значение) = Тип("Структура") И Результат.Значение.Свойство("Склад") 
				И Не ТекущиеДанные.СтруктурнаяЕдиницаРезерв = Результат.Значение.Склад Тогда
				
				Если Не Объект.Проведен И ТекущиеДанные.Количество > ТекущиеДанные.МожноОтгрузить
										И Результат.Значение.Количество < ТекущиеДанные.МожноОтгрузить Тогда
					
					НоваяСтрока = Объект.Запасы.Вставить(ТекущиеДанные.НомерСтроки);
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущиеДанные);
					
					НоваяСтрока.СтруктурнаяЕдиницаРезерв = Результат.Значение.Склад;
					
					СтруктураОстатков = СвободныйОстатокПоСтруктурнойЕдинице(НоваяСтрока.СтруктурнаяЕдиницаРезерв, НоваяСтрока.Номенклатура
					, НоваяСтрока.Характеристика, НоваяСтрока.Партия, НоваяСтрока.ЕдиницаИзмерения);
					
					НоваяСтрока.Количество = ТекущиеДанные.Количество - ТекущиеДанные.МожноОтгрузить;
					
					ТекущиеДанные.Количество =  ТекущиеДанные.МожноОтгрузить;
					
					НоваяСтрока.Резерв = ?(СтруктураОстатков.КоличествоСвободно >= НоваяСтрока.Количество, НоваяСтрока.Количество, СтруктураОстатков.КоличествоСвободно);
					
					Если ИмяТЧ = "Запасы" Тогда
						РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧ,ТекущиеДанные);
						РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧ,НоваяСтрока);
					КонецЕсли;
					
					ОбрабатываемаяСтрока = НоваяСтрока;
					
					Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
					
					// Калькуляция
					ОчиститьКалькуляцию();
					// Конец Калькуляция
	
				Иначе
					
					ТекущиеДанные.СтруктурнаяЕдиницаРезерв = Результат.Значение.Склад;
					ОбрабатываемаяСтрока = ТекущиеДанные;
					
				КонецЕсли;
				
				СтруктураДанные = Новый Структура;
				СтруктураДанные.Вставить("Организация",Компания);
				СтруктураДанные.Вставить("Номенклатура",ОбрабатываемаяСтрока.Номенклатура);
				СтруктураДанные.Вставить("Характеристика",ОбрабатываемаяСтрока.Характеристика);
				СтруктураДанные.Вставить("Партия",ОбрабатываемаяСтрока.Партия);
				СтруктураДанные.Вставить("ИспользоватьХарактеристики",ОбрабатываемаяСтрока.ИспользоватьХарактеристики);
				СтруктураДанные.Вставить("ИспользоватьПартии", ОбрабатываемаяСтрока.ИспользоватьПартии);
				
				ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные,,,Истина);
				
			КонецЕсли;
			
		КонецЕсли;

		
		Возврат;
		
	КонецЕсли;
	
	ПоказатьЗначение(,Результат.Значение);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРезервДляРежимаОстаткиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти, "ПриИзмененииРезерваПроверитьКоличество", Объект);
	
	ЗаполнитьЗначенияОстатковПоНоменклатуре();
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаРезервЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда Возврат КонецЕсли;
	
	СтруктурнаяЕдиницаРезервЗаказОбработкаВыбора("Запасы", ВыбранноеЗначение, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуТабличнойЧастиЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	
	СтрокаТабличнойЧасти = Параметры.СтрокаТабличнойЧасти;
	ИмяТЧ = Параметры.ИмяТЧ;
	
	Если Результат <= 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Количество в новой строке должно быть больше нуля.'");
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		Возврат
	КонецЕсли;
	
	Если Результат >= СтрокаТабличнойЧасти.Количество Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Количество в новой строке должно быть меньше чем в текущей.'");
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		Возврат
	КонецЕсли;

	НоваяСтрока = Объект[ИмяТЧ].Вставить(СтрокаТабличнойЧасти.НомерСтроки);
	ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабличнойЧасти);

	НоваяСтрока.Резерв = 0;
	
	СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество - Результат;
	НоваяСтрока.Количество = Результат;
	
	Если ИмяТЧ = "Запасы" Тогда
		РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧ,СтрокаТабличнойЧасти);
		РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧ,НоваяСтрока);
	КонецЕсли;
	
	Если РежимОстаткиИРезервы Тогда
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Компания);
		СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("Партия", 	СтрокаТабличнойЧасти.Партия);
		СтруктураДанные.Вставить("ИспользоватьХарактеристики", СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
		СтруктураДанные.Вставить("ИспользоватьПартии", СтрокаТабличнойЧасти.ИспользоватьПартии);
		
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные,,, Истина);
		
	КонецЕсли;
	
	Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаРезервРасходОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = Неопределено Тогда Возврат КонецЕсли;
	
	СтруктурнаяЕдиницаРезервРасходОбработкаВыбора("Запасы", ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура СтруктурнаяЕдиницаРезервРасходОбработкаВыбора(ИмяТЧ, ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы[ИмяТЧ].ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	Если ВыбранноеЗначение = "ОтчетОстаткиНаСкладах" Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда Возврат КонецЕсли;
		
		Вариант = РаботаСФормойДокументаКлиентСервер.ВариантОтчета("ОстаткиТоваров", "ПоМестамХранения");
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
		ОтборРасшифровки = Новый Соответствие;
		ОтборРасшифровки.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		ОтборРасшифровки.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
		ОтборРасшифровки.Вставить("СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы", ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад"));
		ПараметрыОткрытия.Вставить("ОтборРасшифровки", ОтборРасшифровки);
		
		ВариантыОтчетовКлиент.ОткрытьФормуОтчета(, Вариант, ПараметрыОткрытия);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("Склад") Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = ВыбранноеЗначение.Склад;
		СтрокаТабличнойЧасти.Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
	Иначе
		СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = ВыбранноеЗначение;
		СтрокаТабличнойЧасти.Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Компания);
	СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", 	СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("ИспользоватьХарактеристики", СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
	СтруктураДанные.Вставить("ИспользоватьПартии", СтрокаТабличнойЧасти.ИспользоватьПартии);
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные, СтрокаТабличнойЧасти.Номенклатура,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурнаяЕдиницаРезервЗаказОбработкаВыбора(ИмяТЧ, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы[ИмяТЧ].ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") ИЛИ ВыбранноеЗначение = "РаспределитьПоРезервам" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтруктураПараметров = Новый Структура("ВыбранноеПоле", "ЗапасыОстатокОбщий");
		
		ЭлементСпискаЗначений = Новый СписокЗначений;
		ЭлементСпискаЗначений.Добавить(ВыбранноеЗначение);
		
		ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти(ЭлементСпискаЗначений[0], СтруктураПараметров);
		
	ИначеЕсли ВыбранноеЗначение = "ОтчетОстаткиНаСкладах" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда Возврат КонецЕсли;
		
		Вариант = РаботаСФормойДокументаКлиентСервер.ВариантОтчета("ОстаткиТоваров", "ПоМестамХранения");
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
		ОтборРасшифровки = Новый Соответствие;
		ОтборРасшифровки.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		ОтборРасшифровки.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
		ОтборРасшифровки.Вставить("СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы", ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад"));
		ПараметрыОткрытия.Вставить("ОтборРасшифровки", ОтборРасшифровки);
		
		ВариантыОтчетовКлиент.ОткрытьФормуОтчета(, Вариант, ПараметрыОткрытия);
		
	Иначе
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Компания);
		СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("Партия", 	СтрокаТабличнойЧасти.Партия);
		СтруктураДанные.Вставить("ИспользоватьХарактеристики", СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
		СтруктураДанные.Вставить("ИспользоватьПартии", СтрокаТабличнойЧасти.ИспользоватьПартии);
		
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные,,,Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРезервДляРежимаОстаткиРасходПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти, "ПриИзмененииРезерваПроверитьКоличество", Объект);
	
	ЗаполнитьЗначенияОстатковПоНоменклатуре();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЯчейкаДляРежимаОстаткиПриИзменении(Элемент)
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковПоНоменклатуре();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначенияОстатковПоНоменклатуре(ИмяТЧ = "Запасы")
	
	СтрокаТабличнойЧасти = Элементы[ИмяТЧ].ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Компания);
	СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", 	СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("ИспользоватьХарактеристики", СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
	СтруктураДанные.Вставить("ИспользоватьПартии", СтрокаТабличнойЧасти.ИспользоватьПартии);
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные,,,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРезервЗаполнитьПоОстаткам(Команда)
	
	ИмяТЧ = Элементы.ЗНСтраницы.ТекущаяСтраница.Имя;
	
	Если ИмяТЧ = "ЗНГруппаЗапасы" Или (ИмяТЧ = "ЗНГруппаРаботы" И Элементы.ЗНМатериалы.Видимость) Тогда
		
		ИмяТЧ = ?(ИмяТЧ = "ЗНГруппаЗапасы", "Запасы", "Материалы");
		
		Если Объект[ИмяТЧ].Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьТабличнуюЧастьПоОстаткамИРезервамНаСервере(ИмяТЧ);
		ЭтаФорма.Модифицированность = Истина;
		
		Если ИмяТЧ = "Запасы" Тогда
			Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТч] Цикл
				РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТч,СтрокаТабличнойЧасти);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоличествоТемЧтоМожноОтгрузить(Команда)
	ЗаполнитьКоличествоПоМожноОтгрузить("Запасы");
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыДекорацияОтборПоДублямОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОтменитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОтбор(ОтменитьВезде = Ложь)
	
	МассивТЧ = Новый Массив;
	
	Если ОтменитьВезде Тогда
		МассивТЧ.Добавить("Запасы");
		МассивТЧ.Добавить("Материалы");
	Иначе
		ИмяТЧ = ТекущееИмяТабличнойЧастиДляОстатковИРезервов();
		МассивТЧ.Добавить(ИмяТч);
	КонецЕсли;
	
	Для Каждого ИмяТЧ Из МассивТЧ Цикл
		
		Элементы[ИмяТЧ+"КонтекстноеМенюПоказатьДублиСтрок"].Пометка = Ложь;
		
		Если ИмяТЧ = "Материалы" Тогда
			ИмяТЧФорма = "ЗНМатериалы";
			Элементы[ИмяТЧФорма+"ДекорацияОтборПоДублям"].Видимость = Ложь;
		Иначе
			ИмяТЧФорма = "Запасы";
			
			Элементы[ИмяТЧФорма].ОтборСтрок = Неопределено;
			
			Элементы[ИмяТЧФорма+"ДекорацияОтборПоДублям"].Видимость = Ложь;
			
			Продолжить;
			
		КонецЕсли;
		
		ИдентификаторСтроки = Элементы[ИмяТЧФорма].ТекущаяСтрока;
		
		Если ИдентификаторСтроки = Неопределено Тогда 
			Элементы[ИмяТЧФорма].ОтборСтрок = Неопределено;
			Продолжить;
		КонецЕсли;
		
		НомерСтроки = Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторСтроки).НомерСтроки - 1;
		
		СтрокаТабличнойЧасти = Объект[ИмяТЧ][НомерСтроки];
		
		ПараметрыОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
		
		Элементы[ИмяТЧФорма].ОтборСтрок = ПараметрыОтбора;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ТекущееИмяТабличнойЧастиДляОстатковИРезервов()
	
	ИмяТЧ = Элементы.ЗНСтраницы.ТекущаяСтраница.Имя;
	
	Если ИмяТЧ = "ЗНГруппаЗапасы" Тогда
		ИмяТЧ = "Запасы";
	ИначеЕсли ИмяТЧ = "ЗНГруппаРаботы" Тогда
		ИмяТЧ = "Материалы";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИмяТЧ;
	
КонецФункции

&НаСервере
Процедура ПроверитьПоложениеСкладаПриПроведении(ТекущийОбъект)
	
	Если ТекущийОбъект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") И РазрешитьСкладыВТабличныхЧастях Тогда
		
		ЗначениеСклада = ТекущийОбъект.СтруктурнаяЕдиницаРезерв;
		
		Для Каждого СтрокаТабличнойЧасти Из ТекущийОбъект.Материалы Цикл
			
			Если НЕ СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = ЗначениеСклада Тогда
				ТекущийОбъект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
				Элементы.ЗНСтруктурнаяЕдиницаЗапасов.Видимость = Ложь;
				Элементы.ЗНЯчейкаЗапасов.Видимость = Ложь;
				Возврат;
			КонецЕсли;
			
			ЗначениеСклада = СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв;
			
		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти Из ТекущийОбъект.Запасы Цикл
			
			Если НЕ СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = ЗначениеСклада Тогда
				ТекущийОбъект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
				Элементы.ЗНСтруктурнаяЕдиницаЗапасов.Видимость = Ложь;
				Элементы.ЗНЯчейкаЗапасов.Видимость = Ложь;
				Возврат;
			КонецЕсли;
			
			ЗначениеСклада = СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв;
			
		КонецЦикла
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИнформацияОбОтборе(НомерСтроки)
	ТекстСообщения = НСтр("ru = 'Дубли строки '");
	Возврат НоменклатураВДокументахСервер.ИнформацияОбОтборе(ТекстСообщения + Строка(НомерСтроки));
КонецФункции

&НаСервере
Процедура ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные = Неопределено, НоменклатураОтбора = Неопределено, ОбновитьВсе = Ложь, ОбновитьТекущую = Ложь)
	
	Если Не РежимОстаткиИРезервы Тогда Возврат КонецЕсли;
	
	Если ОбновитьВсе Тогда
		ТребуетсяОбновлениеТЧПоОстаткамМатериалы = Истина;
		ТребуетсяОбновлениеТЧПоОстаткамЗапасы = Истина;
	КонецЕсли;
		
	
	ИмяТЧ = Элементы.ЗНСтраницы.ТекущаяСтраница.Имя;
	
	Если ИмяТЧ = "ЗНГруппаЗапасы" Или (ИмяТЧ = "ЗНГруппаРаботы" И Элементы.ЗНМатериалы.Видимость) Тогда
		
		ИмяТЧ = ?(ИмяТЧ = "ЗНГруппаЗапасы", "Запасы", "Материалы");
		
		Если ЗаказНарядВСостоянииВыполнения Тогда
			НоменклатураВДокументахСервер.ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧасти(Объект, СтруктураДанные,НоменклатураОтбора, ИмяТЧ, "ЗаказНаряд")
		Иначе
			НоменклатураВДокументахСервер.ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧасти(Объект, СтруктураДанные, 0, НоменклатураОтбора, ФункциональнаяОпцияРезервированиеЗапасов, ИмяТЧ)
		КонецЕсли;
		
		Если ИмяТЧ = "Запасы" Тогда
			
			ТребуетсяОбновлениеТЧПоОстаткамЗапасы = Ложь;
			
			Если ОбновитьТекущую Тогда Возврат КонецЕсли;
			
		ИначеЕсли ИмяТЧ = "Материалы" Тогда 
			
			ТребуетсяОбновлениеТЧПоОстаткамМатериалы = Ложь;
			
			Если ОбновитьТекущую Тогда Возврат КонецЕсли;
			
		Иначе
			ТребуетсяОбновлениеТЧПоОстаткамМатериалы = Истина;
			ТребуетсяОбновлениеТЧПоОстаткамЗапасы = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СвободныйОстатокПоСтруктурнойЕдинице(СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, ЕдиницаИзмерения)
	
Коэффициент = ?(ТипЗнч(ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения"), ЕдиницаИзмерения.Коэффициент, 1);
	
	Организация = Константы.УчетПоКомпании.Компания(Объект.Организация);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Партия", Партия);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ЗапасыОстаткиСвободные.КоличествоОстаток) КАК КоличествоСвободно,
	|	СУММА(ЗапасыОстаткиРезерв.КоличествоОстаток) КАК КоличествоРезерв
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			,
	|			Номенклатура = &Номенклатура
	|				И ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				И Организация = &Организация
	|				И Характеристика = &Характеристика
	|				И Партия = &Партия
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЗапасыОстаткиСвободные,
	|	РегистрНакопления.Запасы.Остатки(
	|			,
	|			Номенклатура = &Номенклатура
	|				И ЗаказПокупателя = &Заказ
	|				И Организация = &Организация
	|				И Характеристика = &Характеристика
	|				И Партия = &Партия
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЗапасыОстаткиРезерв
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоСвободно УБЫВ";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	СтруктураВозврата = Новый Структура("КоличествоСвободно, КоличествоРезерв");
	
	Пока Результат.Следующий() Цикл
		СтруктураВозврата.КоличествоСвободно = Результат.КоличествоСвободно/Коэффициент;
		СтруктураВозврата.КоличествоРезерв = ?(ЗначениеЗаполнено(Объект.Ссылка), Результат.КоличествоРезерв/Коэффициент, 0);
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКолонкуРезервПоОстаткамНаСервере(СтруктураОтбораНоменклатуры = Неопределено, ИмяТЧ)
	
	НоменклатураВДокументахСервер.ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧасти(Объект,,,, ФункциональнаяОпцияРезервированиеЗапасов, ИмяТЧ);
	
	КоличествоСтрокДоЗаполнения = Объект[ИмяТЧ].Количество();
	
	НоменклатураВДокументахСервер.ЗаполнитьКолонкуРезервПоОстаткамЗаказПокупателя(Объект,, СтруктураОтбораНоменклатуры, ИмяТЧ);
	
	ЗаполнитьСлужебныеПоляТабличнойЧасти(Объект.Запасы, Объект.Работы);
	
	// Наборы
	ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.Работы, Объект.ДобавленныеНаборы);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	ПараметрыРасчета = Новый Структура("СброситьФлагСкидкиРассчитаны",Истина);
	ПараметрыРасчета.Вставить("СуммаВключаетНДС",Объект.СуммаВключаетНДС);
	
	Для Каждого СтрокаТаблицыЗапасы Из Объект.Запасы Цикл
		ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммыВСтрокеТЧ(СтрокаТаблицыЗапасы, ПараметрыРасчета);
	КонецЦикла;
	
	РежимОстаткиИРезервы = ?(Не РежимОстаткиИРезервы И Не КоличествоСтрокДоЗаполнения = Объект[ИмяТЧ].Количество(), Истина, РежимОстаткиИРезервы);
	
	Если РежимОстаткиИРезервы Тогда
		
		ОбновитьОтображениеКолонокВРазрезеЗапасовСервер(ИмяТЧ);
		
		Элементы.ОстаткиИРезервы.Пометка = Истина;
		Элементы.ОстаткиИРезервыМатериалы.Пометка = Истина;
		НоменклатураВДокументахСервер.ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧасти(Объект,,,, ФункциональнаяОпцияРезервированиеЗапасов, ИмяТЧ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеСтруктурнойЕдиницыВТабличныхЧастях()
	
	Если Не РежимОстаткиИРезервы Тогда Возврат КонецЕсли;
	
	Если Объект.ИспользоватьТовары Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			Если НЕ СтрокаТабличнойЧасти.ТипНоменклатурыЗапас 
				Или ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв) Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.ИспользоватьМатериалы Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Материалы Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв) Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеКолонокВРазрезеЗапасовСервер(ИмяТЧ = Неопределено, УбратьВидимостьРежима = Ложь)
	
	МассивИменТЧ = Новый Массив;
	
	Если ИмяТЧ = Неопределено Тогда
		Если Объект.ИспользоватьТовары Тогда
			МассивИменТЧ.Добавить("Запасы");
			Элементы.ЗапасыКонтекстноеМенюГруппаРаботаССтроками.Видимость = РежимОстаткиИРезервы;
		КонецЕсли;
		Если Объект.ИспользоватьМатериалы Тогда
			МассивИменТЧ.Добавить("Материалы");
			Элементы.МатериалыКонтекстноеМенюГруппаРаботаССтроками.Видимость = РежимОстаткиИРезервы;
		КонецЕсли;
	Иначе
		МассивИменТЧ.Добавить(ИмяТЧ);
	КонецЕсли;
	
	Если Не МассивИменТЧ.Количество() Тогда Возврат КонецЕсли;
	
	Если УбратьВидимостьРежима Тогда
		
		Для Каждого ИмяТабЧасти Из МассивИменТЧ Цикл
			
			ОстаткиРасход = ИмяТабЧасти + "ОстаткиРасход";
			ОстаткиЗаказ = ИмяТабЧасти + "ОстаткиЗаказ";
			Обеспечение = ИмяТабЧасти + "Обеспечение";
			ГруппаКПоступлению = ИмяТабЧасти + "ГруппаКПоступлению";
			
			Элементы[ОстаткиРасход].Видимость = Ложь;
			Элементы[ОстаткиЗаказ].Видимость = Ложь;
			Элементы[Обеспечение].Видимость = Ложь;
			Элементы[ГруппаКПоступлению].Видимость = Ложь;
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ИмяТЧ Из МассивИменТЧ Цикл
		
		КонтекстноеМенюГруппаРаботаССтроками = ИмяТЧ + "КонтекстноеМенюГруппаРаботаССтроками";
		
		Если РежимОстаткиИРезервы Тогда
			
			ОстаткиРасход = ИмяТЧ + "ОстаткиРасход";
			ОстаткиЗаказ = ИмяТЧ + "ОстаткиЗаказ";
			Обеспечение = ИмяТЧ + "Обеспечение";
			ГруппаКПоступлению = ИмяТЧ + "ГруппаКПоступлению";
			
			Если ИмяТч = "Материалы" Тогда
				СтруктурнаяЕдиницаРезерв = "ЗНМатериалы" + "СтруктурнаяЕдиницаРезерв";
				Ячейка = "ЗНМатериалы" + "Ячейка";
				Резерв = "ЗНМатериалы" + "Резерв";
				РезервОтгрузка = "ЗНМатериалы" + "РезервОтгрузка";
			Иначе
				СтруктурнаяЕдиницаРезерв = ИмяТЧ + "СтруктурнаяЕдиницаРезерв";
				Ячейка = ИмяТЧ + "Ячейка";
				Резерв = ИмяТЧ + "Резерв";
				РезервОтгрузка = "ЗНМатериалы" + "РезервОтгрузка";
			КонецЕсли;
			
			РезервДляРежимаОстаткиРасход = ИмяТЧ + "РезервДляРежимаОстаткиРасход";
			ВРезервеВсего = ИмяТЧ + "ВРезервеВсего";
			РезервДляРежимаОстаткиРасход = ИмяТЧ + "РезервДляРежимаОстаткиРасход";
			ЗарезервированоРасход = ИмяТЧ + "ЗарезервированоРасход";
			ЯчейкаДляРежимаОстатки = ИмяТЧ + "ЯчейкаДляРежимаОстатки";
			ОстатокОбщий = ИмяТЧ + "ОстатокОбщий";
			НеОтгружено = ИмяТЧ + "НеОтгружено";
			Обеспечено = ИмяТЧ + "Обеспечено";
			ОстатокСвободно = ИмяТЧ + "ОстатокСвободно";
			РезервДляРежимаОстатки = ИмяТЧ + "РезервДляРежимаОстатки";
			СтруктурнаяЕдиницаРезервЗаказ = ИмяТЧ + "СтруктурнаяЕдиницаРезервЗаказ";
			
			Элементы[ОстаткиРасход].Видимость = Ложь;
			Элементы[ОстаткиЗаказ].Видимость = Ложь;
			Элементы[Обеспечение].Видимость = Ложь;
			Элементы[ГруппаКПоступлению].Видимость = Ложь;
			
			Если ЗаказНарядВСостоянииВыполнения Тогда
				
				Элементы[ОстаткиРасход].Видимость  = Истина;
				Элементы[СтруктурнаяЕдиницаРезерв].Видимость = Ложь;
				
				Элементы[РезервДляРежимаОстаткиРасход].Видимость = Объект.Проведен;
				Элементы[ВРезервеВсего].Видимость = Объект.Проведен И ФункциональнаяОпцияРезервированиеЗапасов;
				
				Элементы[РезервДляРежимаОстаткиРасход].Видимость = ФункциональнаяОпцияРезервированиеЗапасов;
				Элементы[ЗарезервированоРасход].Видимость = ФункциональнаяОпцияРезервированиеЗапасов;
				
				Если КэшЗначений.УчетПоЯчейкам И Элементы[Ячейка].Видимость Тогда
					Элементы[Ячейка].Видимость = Ложь;
					Элементы[ЯчейкаДляРежимаОстатки].Видимость = Истина;
				КонецЕсли;
				
			Иначе
				Элементы[ОстаткиЗаказ].Видимость = Истина;
				Элементы[ГруппаКПоступлению].Видимость = Истина;
				Элементы[ОстатокОбщий].Видимость = Истина;
				
				Элементы[НеОтгружено].Видимость = Объект.Проведен;
				
				Если ФункциональнаяОпцияРезервированиеЗапасов Тогда
					Элементы[Обеспечение].Видимость = Объект.Проведен;
				Иначе
					Элементы[Обеспечение].Видимость = Ложь;
					
					Элементы[Обеспечено].Видимость = Ложь;
					Элементы[СтруктурнаяЕдиницаРезервЗаказ].Видимость = Ложь;
					Элементы[ОстатокСвободно].Видимость = Ложь;
					Элементы[РезервДляРежимаОстатки].Видимость = Ложь;
					
				КонецЕсли;
				
				Элементы[СтруктурнаяЕдиницаРезерв].Видимость = Ложь;
				Элементы[Резерв].Видимость = Ложь;
				Элементы[РезервОтгрузка].Видимость = Ложь;
			КонецЕсли;
			
			Элементы[КонтекстноеМенюГруппаРаботаССтроками].Видимость = Истина;
			
		Иначе
			
			Элементы[КонтекстноеМенюГруппаРаботаССтроками].Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СписокДокументовПоЗаказу(ТипОперации, СтруктураПараметров, ИмяТЧ, ДопПараметр = Неопределено, ТипДокумента = Неопределено)
	Возврат НоменклатураВДокументахСервер.СписокДокументовПоЗаказу(Объект, ТипОперации, СтруктураПараметров, ИмяТЧ, ДопПараметр, ТипДокумента);
КонецФункции

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьПоОстаткамИРезервамНаСервере(ИмяТЧ)
	
	Если СкладВШапке Тогда
		ЗначениеСклада = ?(Не ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаРезерв), Неопределено, Объект.СтруктурнаяЕдиницаРезерв);
		Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТЧ] Цикл
			СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = ЗначениеСклада;
		КонецЦикла;
	КонецЕсли;
		
	Если Не ЗаказНарядВСостоянииВыполнения Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
		
		КоличествоСтрокДоЗаполнения = Объект.Запасы.Количество();
		НоменклатураВДокументахСервер.ЗаполнитьКолонкуРезервПоОстаткамЗаказПокупателя(Объект,,,ИмяТЧ);
		
		РежимОстаткиИРезервы = ?(Не РежимОстаткиИРезервы И Не КоличествоСтрокДоЗаполнения = Объект.Запасы.Количество(), Истина, РежимОстаткиИРезервы);
		
		Если РежимОстаткиИРезервы Тогда
			ОбновитьОтображениеКолонокВРазрезеЗапасовСервер(ИмяТЧ);
			Элементы.ОстаткиИРезервы.Пометка = Истина;
			Элементы.ОстаткиИРезервыМатериалы.Пометка = Истина;
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,,,Истина);
		КонецЕсли
	Иначе
		НоменклатураВДокументахСервер.ЗаполнитьКоличествоПоОстаткамИРезервамРасходнаяНакладная(Объект,,,ИмяТЧ);
	КонецЕсли;
	
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоличествоПоМожноОтгрузить(ИмяТЧ)
	
	Если Не РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	Для Каждого СтрокаЗапасов Из Объект[ИмяТЧ] Цикл
		СтрокаЗапасов.Количество = СтрокаЗапасов.МожноОтгрузить;
		РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаЗапасов);
	КонецЦикла;
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	// Калькуляция
	ОчиститьКалькуляцию();
	// Конец Калькуляция
	
КонецПроцедуры
#КонецОбласти

#Область Доставка

Процедура УстановитьВидимостьДанныхПоДоставке()
	ДоставкаСервер.ОбновитьДанныеПоДоставкеИзСервиса(Объект.Ссылка,"ЗНГруппаДоставка", Объект.Организация, ЭтотОбъект, "ЗНСтраницы");
КонецПроцедуры

#КонецОбласти

#Область Калькуляция

&НаКлиенте
Процедура ЗаписатьИОткрытьКалькуляцию()
	
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗаписатьИОткрытьКалькуляциюЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, 
		НСтр("ru = 'Заполнение калькуляции возможно только после записи данных.
					|Данные будут записаны.'"),
		РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	ЗаполнитьПараметрыОткрытияКалькуляции(СтруктураПараметры);
	Если СтруктураПараметры.Свойство("Отказ") И СтруктураПараметры.Отказ Тогда
		// Серверные операции перед открытием калькуляции выполнены с ошибкой
		Возврат;
	КонецЕсли; 
	Оповещение = Новый ОписаниеОповещения("ПриИзмененииКалькуляции", ЭтотОбъект);
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаКалькуляции", СтруктураПараметры, ЭтотОбъект, УникальныйИдентификатор,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИОткрытьКалькуляциюЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ=КодВозвратаДиалога.ОК Тогда
		Записать();
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		КонецЕсли;
		ЗаписатьИОткрытьКалькуляцию();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКалькуляции(РезультатОткрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатОткрытия=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТолькоПросмотр И РезультатОткрытия.Свойство("АдресДанных") Тогда
		ПриИзмененииКалькуляцииСервер(РезультатОткрытия.АдресДанных);
		УправлениеФормой();
		ОбновитьПодвалФормы();
		ПересчитатьПлатежныйКалендарь();
	КонецЕсли;
	
	Если РезультатОткрытия.Свойство("Распечатать") И РезультатОткрытия.Распечатать=Истина Тогда
		Команда = Команды.Калькуляция;
		ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
		// УНФ
		СтатистикаИспользованияФормКлиент.ДобавитьСтатистикуПодключаемойКоманды(ЭтотОбъект, Команда);
		// Конец УНФ
	КонецЕсли;
	
	ОбновитьОтображениеКолонокВРазрезеЗапасов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКалькуляцию()
	
	Если НЕ Объект.КалькуляцияРассчитана Тогда
		Возврат;
	КонецЕсли; 
	
	Объект.КалькуляцияРассчитана = Ложь;
	
	// Удаляем все строки калькуляции, кроме общих
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Источник", ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Запас"));
	СтрокиКУдалению = Объект.Калькуляция.НайтиСтроки(СтруктураОтбора);
	Для каждого Стр Из СтрокиКУдалению Цикл
		Если Стр.РучноеИзменение Тогда
			Продолжить;
		КонецЕсли; 
		Объект.Калькуляция.Удалить(Стр);
	КонецЦикла;
	
	Элементы.ЗаполнитьОбновитьКалькуляцию.Видимость = НЕ Объект.КалькуляцияРассчитана;
	Элементы.ОткрытьКалькуляцию.Видимость			= Объект.КалькуляцияРассчитана;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКалькуляцииСервер(АдресНастроек)
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресНастроек) Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресНастроек);
	Объект.Калькуляция.Загрузить(СтруктураДанных.Калькуляция);
	Объект.Запасы.Очистить();
	Для каждого СтрокаКалькуляции Из СтруктураДанных.Запасы Цикл
		НоваяСтрока = Объект.Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКалькуляции);
	КонецЦикла;
	Объект.Работы.Очистить();
	Для каждого СтрокаКалькуляции Из СтруктураДанных.Работы Цикл
		НоваяСтрока = Объект.Работы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКалькуляции);
	КонецЦикла;
	Объект.Материалы.Очистить();
	Объект.СерииНоменклатурыМатериалы.Очистить();
	Для каждого СтрокаКалькуляции Из СтруктураДанных.Материалы Цикл
		НоваяСтрока = Объект.Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКалькуляции);
	КонецЦикла;
	УстановитьПометку("Запасы", Истина);
	УстановитьПометку("Работы", Истина);
	Объект.ВидыЦенКалькуляции.Очистить();
	Для каждого ВидЦен Из СтруктураДанных.ВидыЦен Цикл
		Объект.ВидыЦенКалькуляции.Добавить().ВидЦен = ВидЦен;
	КонецЦикла; 
	ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "СпособРасчетаСебестоимостиКалькуляции, ШаблонКалькуляции, КомментарийКалькуляции, РасчетКалькуляцииПоДаннымТЧ");
	Объект.КалькуляцияРассчитана = Истина;
	
	// Ручные скидки
	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект);
	// Конец Ручные скидки
	
	ЗаполнитьНомераСтрокТаблицаМатериалы(Объект.Материалы);
	ДействияПослеЧтенияОбъекта();
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	Если РежимОстаткиИРезервы Тогда
		НоменклатураВДокументахСервер.ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧасти(Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыОткрытияКалькуляции(СтруктураПараметры)
	
	// ПараметрическиеСпецификации
	Отказ = Ложь;
	ПроизводствоФормулыСервер.РассчитатьПараметрическиеСпецификации(Объект, "Запасы", Отказ);
	СтруктураПараметры.Вставить("Отказ", Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	// Конец ПараметрическиеСпецификации
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.КлючСвязи) Тогда
			ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект.Запасы, СтрокаТабличнойЧасти, "КлючСвязи");
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	СтруктураДанных.Вставить("ПечатьКалькуляцииСкрыта", ПечатьКалькуляцииСкрыта);
	СтруктураДанных.Вставить("СкидкаПроцент", СкидкаПроцент);
	СтруктураДанных.Вставить("СкидкаСумма", СкидкаСумма);
	ДанныеЗаказа = Новый Структура;
	ДанныеЗаказа.Вставить("Дата", Объект.Дата);
	ДанныеЗаказа.Вставить("Номер", Объект.Номер);
	Для каждого Реквизит Из Метаданные.Документы.ЗаказПокупателя.Реквизиты Цикл
		ДанныеЗаказа.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]);
	КонецЦикла;
	СтруктураДанных.Вставить("ДанныеЗаказа", ДанныеЗаказа);
	СтруктураДанных.Вставить("ВидыЦен", Объект.ВидыЦенКалькуляции.Выгрузить().ВыгрузитьКолонку("ВидЦен"));
	ТаблицаЗапасов = Объект.Запасы.Выгрузить();
	СтруктураДанных.Вставить("Запасы", ТаблицаЗапасов);
	ТаблицаРабот = Объект.Работы.Выгрузить();
	СтруктураДанных.Вставить("Работы", ТаблицаРабот);
	ТаблицаМатериалов = Объект.Материалы.Выгрузить();
	СтруктураДанных.Вставить("Материалы", ТаблицаМатериалов);
	ТаблицаИсполнителей = Объект.Исполнители.Выгрузить();
	СтруктураДанных.Вставить("Исполнители", ТаблицаИсполнителей);
	ТаблицаКалькуляции = Объект.Калькуляция.Выгрузить();
	СтруктураДанных.Вставить("Калькуляция", ТаблицаКалькуляции);
	ТаблицаПараметрыДоставки = Объект.ПараметрыДоставки.Выгрузить();
	СтруктураДанных.Вставить("ПараметрыДоставки", ТаблицаПараметрыДоставки);
	СтруктураПараметры.Вставить("АдресДанных", ПоместитьВоВременноеХранилище(СтруктураДанных, УникальныйИдентификатор));
	
КонецПроцедуры

#КонецОбласти
