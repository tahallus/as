
#Область ОписаниеПеременных

#Область ПеременныеФормы

&НаКлиенте
Перем ДанныеВыбораСостояния;

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СостоянияЗаказов.УстановитьУсловноеОформлениеОтмененногоЗаказа(
		Список.КомпоновщикНастроек.Настройки.УсловноеОформление);
	
	УстановитьУсловноеОформлениеПоЦветамСостоянийСервер();
	
	// СборкаЗаказов
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСборкуЗаказов") Тогда
		Элементы.ОтборСборка.СписокВыбора.Добавить("Без сборки", НСтр("ru = 'Без сборки'"));
		Элементы.ОтборСборка.СписокВыбора.Добавить("Собран частично", НСтр("ru = 'Собран частично'"));
		Элементы.ОтборСборка.СписокВыбора.Добавить("Собран полностью", НСтр("ru = 'Собран полностью'"));
		Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ИспользоватьСборкуЗаказов", Истина);
	Иначе
		Элементы.НомерКартинкиСборки.Видимость = Ложь;
		Элементы.СтатусСборки.Видимость = Ложь;
		Элементы.ГруппаОтборСборка.Видимость = Ложь;
		Элементы.ОтборСборка.Видимость = Ложь;
		Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ИспользоватьСборкуЗаказов", Ложь);
	КонецЕсли;
	// Конец СборкаЗаказов
	
	СостоянияЗаказов.ЗаполнитьСписокВыбораЗавершенияЗаказа(Элементы.ОтборЗавершениеЗаказа.СписокВыбора);
	ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	
	ВидыОперацийЗаказПокупателя = Новый СписокЗначений;
	ВидыОперацийЗаказПокупателя.Добавить(Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку);
	ВидыОперацийЗаказПокупателя.Добавить(Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ВидОперации",
		ВидыОперацийЗаказПокупателя, ВидСравненияКомпоновкиДанных.ВСписке);
	
	Список.Параметры.УстановитьЗначениеПараметра("АктуальнаяДатаСеанса", НачалоДня(ТекущаяДатаСеанса()));
	
	УстановитьОтборТекущиеДела();
	КонтекстноеОткрытие = Параметры.Свойство("ТекущиеДела");
	
	// УНФ.ОтборыСписка
	РаботаСОтборами.ОпределитьПорядокПредопределенныхОтборов(ЭтотОбъект);
	
	Если Не КонтекстноеОткрытие Тогда
		РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, Список);
	КонецЕсли;
	
	Если Элементы.ФильтрыНастройкиИДопИнфо.Видимость Тогда
		Элементы.ПраваяПанель.Ширина = 28;
	КонецЕсли;
	
	ЗаполнитьСписокВыбораОтборОплата();
	ЗаполнитьСписокВыбораОтборОтгрузка();
	ЗаполнитьСписокВыбораОтборСостояниеОригинала();
	// Конец УНФ.ОтборыСписка
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Элементы.ГруппаГлобальныеКомандыЗаказПокупателя.Видимость = Ложь;
		Элементы.ФормаОбщаяКомандаНапомнить.Видимость = Ложь;
		Элементы.ГруппаКомандыЭДО.Видимость = Ложь;
		Элементы.ПраваяПанель.Видимость = Ложь;
		Элементы.ФормаСоздатьПоШаблону.Видимость = Ложь;
		Элементы.ДатаОтгрузки.Видимость = Ложь;
		Элементы.ВидОперации.Видимость = Ложь;
		Элементы.ФормаОбработкаНастройкиПриложенияБольшеВозможностей.Видимость = Ложь;
	КонецЕсли;
	// Конец МобильноеПриложение
	
	ОбновитьКомандыИзмененияСостояний();
	
	ДинамическиеСпискиУНФ.ОтображатьТолькоВремяДляТекущейДаты(Список);
	
	// ИнтернетПоддержкаПользователей.Новости
	ОбработкаНовостей.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"УНФ.Документ.ЗаказПокупателя",
		"ФормаСписка",
		Неопределено,
		НСтр("ru='Новости: Заказы покупателей'"),
		Ложь,
		Новый Структура("ПолучатьНовостиНаСервере, ХранитьМассивНовостейТолькоНаСервере", Истина, Истина),
		"ПриОткрытии"
	);
	// Конец ИнтернетПоддержкаПользователей.Новости
	
	// ЭДО
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.КомандыЭДО_ФормаСписка(ЭтотОбъект, Неопределено);
	// Конец ЭДО
	
	// КомандыПечати
	ПечатьДокументовУНФ.КорректировкаРазмещениеПодчиненнойГруппыКомандПечати(ЭтаФорма, Элементы.ПодменюПечать, Элементы.ПодменюДоговорКонтрагента);
	Элементы.КомандыПечатиДоговорКонтрагента.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	ПечатьДокументовУНФ.КорректировкаРазмещениеПодчиненнойГруппыКомандПечати(ЭтаФорма, Элементы.ПодменюПечать, Элементы.ПодменюКоммерческоеПредложение);
	Элементы.КомандыПечатиКоммерческоеПредложение.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	ПечатьДокументовУНФ.КорректировкаРазмещениеПодчиненнойГруппыКомандПечати(ЭтаФорма, Элементы.ПодменюПечать, Элементы.ПодменюПечатьФаксимиле);
	Элементы.ПодменюПечатьФаксимиле.Вид = ВидГруппыФормы.Подменю;
	
	ШаблоныПечатиОфисныхДокументов.ОпределитьВидимостьКомандШаблоновПечати(Элементы.ФормаОткрытьШаблоныПечатиДоговоровКонтрагентов);
	ШаблоныПечатиОфисныхДокументов.ОпределитьВидимостьКомандШаблоновПечати(Элементы.ФормаОткрытьШаблоныПечатиКоммерческихПредложений);
	// Конец КомандыПечати
	
	// УНФ.ПанельКонтактнойИнформации
	КонтактнаяИнформацияПанельУНФ.ПриСозданииНаСервере(ЭтотОбъект, "КонтактнаяИнформация", "СписокКонтекстноеМеню");
	// Конец УНФ.ПанельКонтактнойИнформации
	
	// Яндекс.Доставка
	Элементы.ФормаПередатьВЯндексДоставку.Видимость = ЯндексДоставка.Подключена();
	// Конец Яндекс.Доставка
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументов.ПриСозданииНаСервере_ФормаСписка(ЭтотОбъект, Элементы.Список);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	// Конец ПодключаемоеОборудование
	
	// ЭлектронноеВзаимодействие.ТорговыеПредложения
	ТорговыеПредложения.ПриСозданииПодсказокФормы(ЭтотОбъект, Элементы.ПодсказкиБизнесСеть);
	// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект,
		"СканерШтрихкода");
	// Конец ПодключаемоеОборудование 
	
	// ЭДО
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭДО
	
	// ЭлектронноеВзаимодействие.ТорговыеПредложения
	ТорговыеПредложенияКлиент.ОбновитьПодсказкуФормы(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не КонтекстноеОткрытие И Не ЗавершениеРаботы Тогда
		// УНФ.ОтборыСписка
		СохранитьНастройкиОтборов();
		// Конец УНФ.ОтборыСписка
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РаботаСФормойКлиент.СписокЗаказовОбработкаОповещенияФрагмент(ЭтотОбъект, ИмяСобытия);
	
	Если ИмяСобытия = "Запись_СостоянияЗаказовПокупателей" Тогда
		УстановитьУсловноеОформлениеИОбновитьКомандыИзмененияСостояний();
		ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ВидыЗаказовПокупателей" Тогда
		ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
		ОбновитьКомандыИзмененияСостояний();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ШаблоныПечатиОфисныхДокументов" И Параметр.Свойство("Назначение") Тогда
		ГруппаКомандПечати = Неопределено;
		Если Параметр.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагента")
			ИЛИ Параметр.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаЗаказ") Тогда
			ГруппаКомандПечати = Элементы.ПодменюДоговорКонтрагента;
		ИначеЕсли Параметр.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновПечатиОфисныхДокументов.КоммерческоеПредложение") Тогда
			ГруппаКомандПечати = Элементы.ПодменюКоммерческоеПредложение;
		КонецЕсли;
		Если ГруппаКомандПечати <> Неопределено Тогда
			ШаблоныПечатиОфисныхДокументовКлиент.УстановитьПризнакПоявленияНовойКомандыПечати(ГруппаКомандПечати);
		КонецЕсли;
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУНФКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// ЭДО
	ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСписка();
	ПараметрыОповещенияЭДО.Форма = ЭтотОбъект;
	ПараметрыОповещенияЭДО.ИмяДинамическогоСписка = "Список";
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСписка(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);
	// Конец ЭДО
	
	// УНФ.ПанельКонтактнойИнформации
	Если КонтактнаяИнформацияПанельУНФКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьПанельКонтактнойИнформации();
	КонецЕсли;
	// Конец УНФ.ПанельКонтактнойИнформации
	
	Если ИмяСобытия = "Запись_НастройкиЯндексДоставки" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПередатьВЯндексДоставку", "Видимость", Истина);
	КонецЕсли;
	
	// УНФ.Интеграция с Яндекс.Кассой
	ИнтеграцияСЯндексКассойУНФКлиент.ОбработкаОповещения_ФормаСписка(Элементы.Список, ИмяСобытия, Параметр, Источник);
	// Конец УНФ.Интеграция с Яндекс.Кассой
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовКлиент.ОбработчикОповещенияФормаСписка(ИмяСобытия, ЭтотОбъект, Элементы.Список);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовКлиент.СписокВыбор(Поле.Имя, ЭтотОбъект, Элементы.Список, СтандартнаяОбработка);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	КонтактнаяИнформацияПанельУНФКлиент.ПриАктивизацииДинамическогоСписка(ЭтотОбъект, Элемент, ТекущийКонтрагент,
		"Контрагент");
	
	Если ТипЗнч(Элемент.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ВидимостьКомандИзмененияСостояний(Элемент);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормы"
		+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормы"
		+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	УстановитьСтатусСборкиЗаказов(Настройки, Строки);
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументов.ПриПолученииДанныхНаСервере(Строки);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Контрагент", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ОтборВидЗаказаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	
	УстановитьМеткуИОтборСписка("ВидЗаказа", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НайденныеСтроки = ДанныеМеток.НайтиСтроки(Новый Структура("ИмяПоляОтбора", "ВидЗаказа"));
	Если НайденныеСтроки.Количество() = 1 И ТипЗнч(НайденныеСтроки[0].Метка) = Тип("СправочникСсылка.ВидыЗаказовПокупателей") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ВидЗаказа", НайденныеСтроки[0].Метка);
		ОткрытьФорму("Справочник.СостоянияЗаказовПокупателей.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СостояниеЗаказа", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния Тогда
		НайденныеСтроки = ДанныеМеток.НайтиСтроки(Новый Структура("ИмяПоляОтбора", "ВидЗаказа"));
		Если НайденныеСтроки.Количество() = 1 И ТипЗнч(НайденныеСтроки[0].Метка) = Тип("СправочникСсылка.ВидыЗаказовПокупателей") Тогда
			ПараметрыПолученияДанных.Вставить("ВидЗаказа", НайденныеСтроки[0].Метка);
		КонецЕсли;
		ДанныеВыбораСостояния = ПолучитьДанныеВыбора(Тип("СправочникСсылка.СостоянияЗаказовПокупателей"), ПараметрыПолученияДанных);
		ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Ложь;
	КонецЕсли;
	
	ДанныеВыбора = ДанныеВыбораСостояния;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗавершениеЗаказаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка(
		"ВариантЗавершения",
		Элемент.Родитель.Имя,
		ПредопределенноеЗначение("Перечисление.ВариантыЗавершенияЗаказа." + ВыбранноеЗначение),
		Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение).Представление
	);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОплатаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	Если ВыбранноеЗначение = "Без оплаты"
		Или ВыбранноеЗначение = "Оплачен частично"
		Или ВыбранноеЗначение = "Оплачен полностью" Тогда
		УстановитьМеткуИОтборСписка("СтатусОплаты", Элемент.Родитель.Имя, ВыбранноеЗначение);
	Иначе
		УстановитьМеткуИОтборСписка("НомерКартинкиОплаты", Элемент.Родитель.Имя, ВыбранноеЗначение);
	КонецЕсли;
	ВыбранноеЗначение = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ОтборОтгрузкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	Если ВыбранноеЗначение = "Без отгрузки"
		Или ВыбранноеЗначение = "Отгружен частично"
		Или ВыбранноеЗначение = "Отгружен полностью" Тогда
		
		Если ВыбранноеЗначение = "Отгружен полностью" Тогда
			СтатусОтгрузки = 0;
		ИначеЕсли ВыбранноеЗначение = "Отгружен частично" Тогда
			СтатусОтгрузки = 1;
		ИначеЕсли ВыбранноеЗначение = "Без отгрузки" Тогда
			СтатусОтгрузки = 2;
		КонецЕсли;
		УстановитьМеткуИОтборСписка("СтатусОтгрузки", Элемент.Родитель.Имя, СтатусОтгрузки, ВыбранноеЗначение);
	Иначе
		УстановитьМеткуИОтборСписка("НомерКартинкиОтгрузки", Элемент.Родитель.Имя, ВыбранноеЗначение);
	КонецЕсли;
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСборкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = "Собран полностью"
		ИЛИ ВыбранноеЗначение = "Собран частично"
		ИЛИ ВыбранноеЗначение = "Без сборки" Тогда
		СтатусСборки = ВыбранноеЗначение;
	Иначе
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СтатусСборки", Элемент.Родитель.Имя, СтатусСборки, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Ответственный", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Организация", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеОригиналаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ВыбранноеЗначение = ПредопределенноеЗначение("Справочник.СостоянияОригиналовПервичныхДокументов.ПустаяСсылка") Тогда
		УстановитьМеткуИОтборСписка("СостояниеОригинала", Элемент.Родитель.Имя, ВыбранноеЗначение,
			УчетОригиналовПервичныхДокументовУНФКлиентСервер.СостояниеОригиналаНеизвестно());
	Иначе
		УстановитьМеткуИОтборСписка("СостояниеОригинала", Элемент.Родитель.Имя, ВыбранноеЗначение);
	КонецЕсли;

	ВыбранноеЗначение = Неопределено;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьПоШаблону(Команда)
	
	ЗаполнениеОбъектовУНФКлиент.ПоказатьВыборШаблонаДляСозданияДокументаИзСписка(
	"Документ.ЗаказПокупателя",
	Список.КомпоновщикНастроек.Настройки.Отбор.Элементы,
	Элементы.Список.ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборТекущиеДела()
	
	Если НЕ Параметры.Свойство("ТекущиеДела") Тогда
		Возврат;
	КонецЕсли;
	
	АвтоЗаголовок = Ложь;
	Заголовок = НСтр("ru='Заказы покупателей'");
	
	СотрудникиПользователя = РегистрыСведений.СотрудникиПользователя.ПолучитьСотрудниковПользователя();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Проведен", Истина);
	
	УстановитьМеткуИОтборСписка(
		"ВариантЗавершения",
		Элементы.ОтборЗавершениеЗаказа.Родитель.Имя,
		ПредопределенноеЗначение("Перечисление.ВариантыЗавершенияЗаказа.ПустаяСсылка"), // В текущих делах все заказы Не завершенные
		Элементы.ОтборЗавершениеЗаказа.СписокВыбора.НайтиПоЗначению("ПустаяСсылка").Представление);
	
	РаботаСОтборами.ПрикрепитьМеткиОтбораИзМассива(ЭтотОбъект, "Ответственный", "ГруппаОтборОтветственный", СотрудникиПользователя);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, "Ответственный");
	
	Если Параметры.Свойство("ПросроченоВыполнение") Тогда
		
		Заголовок = Заголовок + ": " + НСтр("ru='просрочено выполнение'");
		Список.УстановитьОбязательноеИспользование("ПросроченоВыполнение", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПросроченоВыполнение", Истина);
		
	ИначеЕсли Параметры.Свойство("ПросроченаОплата") Тогда
		
		Заголовок = Заголовок + ": " + НСтр("ru='просрочена оплата'");
		Список.УстановитьОбязательноеИспользование("ПросроченаОплата", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПросроченаОплата", Истина);
		
	ИначеЕсли Параметры.Свойство("НаСегодня") Тогда
		
		Заголовок = Заголовок + ": " + НСтр("ru='на сегодня'");
		Список.УстановитьОбязательноеИспользование("НаСегодня", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "НаСегодня", Истина);
		
	ИначеЕсли Параметры.Свойство("НеЗавершенные") Тогда
		
		Заголовок = Заголовок + ": " + НСтр("ru='не завершенные'");
		
	КонецЕсли;
	
	ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(ОтборПериод);
	РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьШаблоныПечатиДоговоровКонтрагентов(Команда)
	
	ШаблоныПечатиОфисныхДокументовКлиент.ОткрытьШаблоныПечатиОфисныхДокументов(
	ПредопределенноеЗначение("Перечисление.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаЗаказ"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьШаблоныПечатиКоммерческихПредложений(Команда)
	
	ШаблоныПечатиОфисныхДокументовКлиент.ОткрытьШаблоныПечатиОфисныхДокументов(
	ПредопределенноеЗначение("Перечисление.НазначенияШаблоновПечатиОфисныхДокументов.КоммерческоеПредложение"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект,
		Новый Структура("ТекШтрихкод", ТекШтрихкод));
	
	#Если МобильныйКлиент Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду", , , , , , ОбработкаЗавершения);
	#Иначе
		ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура УстановитьСтатусСборкиЗаказов(Настройки, Строки)
	
	Если Настройки.ДополнительныеСвойства.Свойство("ИспользоватьСборкуЗаказов") 
		И НЕ Настройки.ДополнительныеСвойства.ИспользоватьСборкуЗаказов Тогда
		Возврат;
	КонецЕсли;
	
	Если Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВсеСтроки = Строки.ПолучитьКлючи();
	ЕстьСтатусСборки = Строки[ВсеСтроки[0]].Данные.Свойство("СтатусСборки");
	ЕстьНомерКартинкиСборки = Строки[ВсеСтроки[0]].Данные.Свойство("НомерКартинкиСборки");
	
	Если Не ЕстьНомерКартинкиСборки И НЕ ЕстьСтатусСборки Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.Ссылка КАК Ссылка,
	|	СУММА(ВЫБОР
	|			КОГДА ЗаказПокупателяЗапасы.НомерВариантаКП = ЗаказПокупателяЗапасы.Ссылка.ОсновнойВариантКП
	|				ТОГДА ВЫБОР
	|						КОГДА ЗаказПокупателяЗапасы.КоличествоСобрано = 0
	|							ТОГДА 0
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СборкаНачата,
	|	СУММА(ВЫБОР
	|			КОГДА ЗаказПокупателяЗапасы.НомерВариантаКП = ЗаказПокупателяЗапасы.Ссылка.ОсновнойВариантКП
	|				ТОГДА ВЫБОР
	|						КОГДА ЗаказПокупателяЗапасы.ТипНоменклатурыЗапас
	|							ТОГДА ВЫБОР
	|									КОГДА ЗаказПокупателяЗапасы.Количество = ЗаказПокупателяЗапасы.КоличествоСобрано
	|										ТОГДА 0
	|									ИНАЧЕ 1
	|								КОНЕЦ
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СборкаНеЗавершена
	|ПОМЕСТИТЬ СборкаЗаказов
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка В(&Ссылки)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяЗапасы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СборкаЗаказов.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА СборкаЗаказов.СборкаНачата > 0
	|				И СборкаЗаказов.СборкаНеЗавершена = 0
	|			ТОГДА 0
	|		КОГДА СборкаЗаказов.СборкаНачата > 0
	|				И СборкаЗаказов.СборкаНеЗавершена > 0
	|			ТОГДА 1
	|		КОГДА СборкаЗаказов.СборкаНачата = 0
	|			ТОГДА -1
	|	КОНЕЦ КАК НомерКартинкиСборки,
	|	ВЫБОР
	|		КОГДА СборкаЗаказов.СборкаНачата > 0
	|				И СборкаЗаказов.СборкаНеЗавершена = 0
	|			ТОГДА ""Собран полностью""
	|		КОГДА СборкаЗаказов.СборкаНачата > 0
	|				И СборкаЗаказов.СборкаНеЗавершена > 0
	|			ТОГДА ""Собран частично""
	|		КОГДА СборкаЗаказов.СборкаНачата = 0
	|			ТОГДА ""Без сборки""
	|	КОНЕЦ КАК СтатусСборки
	|ИЗ
	|	СборкаЗаказов КАК СборкаЗаказов";
	
	Запрос.УстановитьПараметр("Ссылки", ВсеСтроки);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		СтрокаСписка = Строки.Получить(Выборка.Ссылка);
		
		Если ЕстьНомерКартинкиСборки Тогда
			СтрокаСписка.Данные.НомерКартинкиСборки = Выборка.НомерКартинкиСборки;
		КонецЕсли;
		Если ЕстьСтатусСборки Тогда
			СтрокаСписка.Данные.СтатусСборки = Выборка.СтатусСборки;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПоЦветамСостоянийСервер()
	
	СостоянияЗаказов.УстановитьУсловноеОформлениеПоЦветамСостояний(
		Список.КомпоновщикНастроек.Настройки.УсловноеОформление,
		Метаданные.Справочники.СостоянияЗаказовПокупателей.ПолноеИмя()
	);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеИОбновитьКомандыИзмененияСостояний()
	
	УстановитьУсловноеОформлениеПоЦветамСостоянийСервер();
	ОбновитьКомандыИзмененияСостояний();
	
КонецПроцедуры


#Область ЗаполнениеСписковОтборов

&НаСервере
Процедура ЗаполнитьСписокВыбораОтборОплата()
	
	РаботаСОтборами.ЗаполнитьСписокВыбораОтборОплата(ЭтаФорма, "ОтборОплата")

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораОтборОтгрузка()

	РаботаСОтборами.ЗаполнитьСписокВыбораОтборОтгрузка(ЭтаФорма, "ОтборОтгрузка");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораОтборСостояниеОригинала()

	Элементы.ОтборСостояниеОригинала.СписокВыбора.Добавить(
		Справочники.СостоянияОригиналовПервичныхДокументов.ПустаяСсылка(),
		УчетОригиналовПервичныхДокументовУНФКлиентСервер.СостояниеОригиналаНеизвестно());

	Для Каждого ТекСостояние Из УчетОригиналовПервичныхДокументов.ИспользуемыеСостояния() Цикл
		Элементы.ОтборСостояниеОригинала.СписокВыбора.Добавить(ТекСостояние.Ссылка, ТекСостояние.Наименование);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Отборы

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение,
	ПредставлениеЗначения = "")

	
	Если ГруппаРодительМетки = "ГруппаОтборОплата" Тогда
		ПредставлениеЗначения = РаботаСОтборами.СформироватьПредставлениеМеткиОплата(ВыбранноеЗначение);
		Если ИмяПоляОтбораСписка = "НомерКартинкиОплаты" Тогда
			ВыбранноеЗначение = РаботаСОтборами.НомерКартинкиПоСтатусуОплаты(ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
	
	Если ГруппаРодительМетки = "ГруппаОтборОтгрузка" Тогда
		Если ИмяПоляОтбораСписка = "НомерКартинкиОтгрузки" Тогда
			ПредставлениеЗначения = РаботаСОтборами.СформироватьПредставлениеМеткиОтгрузка(ВыбранноеЗначение);
			ВыбранноеЗначение = РаботаСОтборами.НомерКартинкиПоСтатусуОплаты(ВыбранноеЗначение);
		Иначе
			ПредставлениеЗначения = РаботаСОтборами.СформироватьПредставлениеМеткиОтгрузка(ПредставлениеЗначения);
		КонецЕсли;
	КонецЕсли;

	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли;
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, ИмяПоляОтбораСписка);

КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_") + 1);
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	ЧисловойИдентификаторМетки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(МеткаИД);
	СтрокаМеток = ДанныеМеток.НайтиПоИдентификатору(ЧисловойИдентификаторМетки);
	Если СтрокаМеток <> Неопределено И СтрокаМеток.ИмяПоляОтбора = "ВидЗаказа" Тогда
		ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	КонецЕсли;
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Список, МеткаИД);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, "Список", "Дата");
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборов(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
	
	Если Элементы.ФильтрыНастройкиИДопИнфо.Видимость Тогда
		Элементы.ПраваяПанель.Ширина = 28;
	КонецЕсли;
		
КонецПроцедуры

//
&НаКлиенте
Процедура НастроитьОтборы(Команда)
	
	ИмяРеквизитаСписка = "Список";
	ИмяТЧДанныеМеток = "ДанныеМеток";
	ИмяТЧДанныеОтборов = "ДанныеОтборов";
	ИмяГруппыОтборов = "ГруппаОтборы";
	ИмяПредопределенныеОтборыПоУмолчанию = "ПредопределенныеОтборыПоУмолчанию";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизитаСписка", ИмяРеквизитаСписка);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеМеток", ИмяТЧДанныеМеток);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеОтборов", ИмяТЧДанныеОтборов);
	ДополнительныеПараметры.Вставить("ИмяГруппыОтборов", ИмяГруппыОтборов);
	ДополнительныеПараметры.Вставить("ИмяПредопределенныеОтборыПоУмолчанию", ИмяПредопределенныеОтборыПоУмолчанию);
	
	РаботаСОтборамиКлиент.НастроитьОтборыНажатие(ЭтотОбъект, ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры), ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры)
	
	Возврат РаботаСОтборами.ПараметрыДляОткрытияФормыСНастройкамиОтборов(ЭтотОбъект, ДополнительныеПараметры);
	
КонецФункции

&НаКлиенте
Процедура НастройкаОтборовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОтборовЗавершениеНаСервере(Результат.АдресВыбранныеОтборы, Результат.АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура НастройкаОтборовЗавершениеНаСервере(АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ИмяРеквизитаСписка = "Список";
		ИмяТЧДанныеМеток = "ДанныеМеток";
		ИмяТЧДанныеОтборов = "ДанныеОтборов";
	Иначе
		ИмяРеквизитаСписка = ДополнительныеПараметры.ИмяРеквизитаСписка;
		ИмяТЧДанныеМеток = ДополнительныеПараметры.ИмяТЧДанныеМеток;
		ИмяТЧДанныеОтборов = ДополнительныеПараметры.ИмяТЧДанныеОтборов;
	КонецЕсли;
	
	РаботаСОтборами.НастройкаОтборовЗавершение(ЭтотОбъект, АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтборПриИзменении(Элемент)
	
	Подключаемый_ОтборПриИзмененииНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборПриИзмененииНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	РаботаСОтборами.Подключаемый_ОтборПриИзменении(ЭтотОбъект, ЭлементИмя, ЭлементРодительИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтборОчистка(Элемент)
	
	Подключаемый_ОтборОчисткаНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборОчисткаНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	РаботаСОтборами.Подключаемый_ОтборОчистка(ЭтотОбъект, ЭлементИмя);

КонецПроцедуры

#КонецОбласти

#Область ПанельКонтактнойИнформации

// УНФ.ПанельКонтактнойИнформации
// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбработатьАктивизациюСтрокиСписка()
	
	ОбновитьПанельКонтактнойИнформации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПанельКонтактнойИнформации()
	
	ДанныеПанелиКИ = ДанныеПанелиКонтактнойИнформации(ТекущийКонтрагент);
	КонтактнаяИнформацияПанельУНФКлиент.ЗаполнитьДанныеПанелиКИ(ЭтотОбъект, ДанныеПанелиКИ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеПанелиКонтактнойИнформации(Контрагент)
	
	Возврат КонтактнаяИнформацияПанельУНФ.ДанныеПанелиКонтактнойИнформации(Контрагент);
	
КонецФункции

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииВыбор(ЭтотОбъект, Элемент, ВыбраннаяСтрока,
		Поле, СтандартнаяОбработка);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(Элемент)
	КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(ЭтотОбъект, Элемент);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыполнитьКоманду(Команда)
	КонтактнаяИнформацияПанельУНФКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, ТекущийКонтрагент);
КонецПроцедуры
// Конец УНФ.ПанельКонтактнойИнформации

#КонецОбласти

#Область ИзменениеСостоянийЗаказов

&НаСервере
Процедура ОбновитьКомандыИзмененияСостояний()
	
	УдаляемыеЭлементы = Новый Массив;
	
	Если Элементы.СписокКонтекстноеМенюУстановитьСостояние.ПодчиненныеЭлементы.Количество() <> 0 Тогда
		
		Для ИндексГруппы = 0 По Элементы.СписокКонтекстноеМенюУстановитьСостояние.ПодчиненныеЭлементы.Количество() - 1 Цикл
			Если Элементы.СписокКонтекстноеМенюУстановитьСостояние.ПодчиненныеЭлементы[ИндексГруппы].Имя = "УстановитьСостояниеЗавершен"
				ИЛИ Элементы.СписокКонтекстноеМенюУстановитьСостояние.ПодчиненныеЭлементы[ИндексГруппы].Имя = "УстановитьСостояниеЗавершенУспешно"
				ИЛИ Элементы.СписокКонтекстноеМенюУстановитьСостояние.ПодчиненныеЭлементы[ИндексГруппы].Имя = "УстановитьСостояниеОтменен" Тогда
				Продолжить;
			КонецЕсли;
			УдаляемыеЭлементы.Добавить(Элементы.СписокКонтекстноеМенюУстановитьСостояние.ПодчиненныеЭлементы[ИндексГруппы]);
		КонецЦикла;
		
		Если Элементы.ФормаУстановитьСостояние.ПодчиненныеЭлементы.Количество() <> 0 Тогда
			Для ИндексГруппы = 0 По Элементы.ФормаУстановитьСостояние.ПодчиненныеЭлементы.Количество() - 1 Цикл
				Если Элементы.ФормаУстановитьСостояние.ПодчиненныеЭлементы[ИндексГруппы].Имя = "УстановитьСостояниеЗавершенФорма"
					ИЛИ Элементы.ФормаУстановитьСостояние.ПодчиненныеЭлементы[ИндексГруппы].Имя = "УстановитьСостояниеЗавершенУспешноФорма"
					ИЛИ Элементы.ФормаУстановитьСостояние.ПодчиненныеЭлементы[ИндексГруппы].Имя = "УстановитьСостояниеОтмененФорма" Тогда
					Продолжить;
				КонецЕсли;
				УдаляемыеЭлементы.Добавить(Элементы.ФормаУстановитьСостояние.ПодчиненныеЭлементы[ИндексГруппы]);
			КонецЦикла;
		КонецЕсли;
	
		Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
			Элементы.Удалить(УдаляемыйЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	СостоянияЗаказовПокупателей.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыЗаказовПокупателей.Ссылка КАК Ссылка,
	|	ВидыЗаказовПокупателей.Наименование КАК Наименование,
	|	ВидыЗаказовПокупателей.ПорядокСостояний.(
	|		Состояние КАК Состояние,
	|		НомерСтроки КАК НомерСтроки,
	|		Состояние.Цвет КАК СостояниеЦвет
	|	) КАК ПорядокСостояний
	|ИЗ
	|	Справочник.ВидыЗаказовПокупателей КАК ВидыЗаказовПокупателей
	|ГДЕ
	|	ВидыЗаказовПокупателей.ПорядокСостояний.Состояние.ПометкаУдаления = ЛОЖЬ";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ИндексВидаЗаказа = 0;
	
	
	Пока Выборка.Следующий() Цикл
		
		КомандыСостоянийВида = Элементы.Добавить("Вид_" + Строка(ИндексВидаЗаказа), Тип("ГруппаФормы"), Элементы.СписокКонтекстноеМенюУстановитьСостояние);
		КомандыСостоянийВида.Вид = ВидГруппыФормы.ГруппаКнопок;
		
		КомандыСостоянийВидаФорма = Элементы.Добавить("Вид_" + Строка(ИндексВидаЗаказа)+ "_Форма", Тип("ГруппаФормы"), Элементы.ФормаУстановитьСостояние);
		КомандыСостоянийВидаФорма.Вид = ВидГруппыФормы.ГруппаКнопок;
		
		НомерСостояния = 1;
		СписокСостояний = Выборка.ПорядокСостояний.Выгрузить();

		Для каждого СостояниеВида Из СписокСостояний Цикл
			
			Если СостояниеВида.Состояние = Справочники.СостоянияЗаказовПокупателей.Завершен Тогда
				Продолжить;
			КонецЕсли;
			
			СостояниеВТаблице = СостоянияЗаказовПокупателей.НайтиСтроки(Новый Структура("Состояние", Выборка.Ссылка));
			
			Если СостояниеВТаблице.Количество() = 0 Тогда
				НовоеСостояние = СостоянияЗаказовПокупателей.Добавить();
				НовоеСостояние.Состояние = СостояниеВида.Состояние;
				НовоеСостояние.Вид = Выборка.Ссылка;
				НовоеСостояние.ИндексВида = ИндексВидаЗаказа;
			Иначе
				НовоеСостояние = СостояниеВТаблице[0];
			КонецЕсли;
			
			КнопкаУстановитьСостояниеЗаказа = Элементы.Добавить("Состояние_" + Строка(СостоянияЗаказовПокупателей.Индекс(НовоеСостояние)), Тип("КнопкаФормы"),КомандыСостоянийВида);
			КнопкаУстановитьСостояниеЗаказа.Заголовок = Строка(НомерСостояния)+". "+ Строка(СостояниеВида.Состояние);
			
			КнопкаУстановитьСостояниеЗаказаФорма = Элементы.Добавить("Состояние_" + Строка(СостоянияЗаказовПокупателей.Индекс(НовоеСостояние)) + "Форма", Тип("КнопкаФормы"),КомандыСостоянийВидаФорма);
			КнопкаУстановитьСостояниеЗаказаФорма.Заголовок = Строка(НомерСостояния)+". "+ Строка(СостояниеВида.Состояние);
			КнопкаУстановитьСостояниеЗаказаФорма.ТолькоВоВсехДействиях = Истина;
			
			НазваниеКоманды = "Состояние_" + Строка(СостоянияЗаказовПокупателей.Индекс(НовоеСостояние));
			
			Если Команды.Найти(НазваниеКоманды) <> Неопределено Тогда
				КомандаУстановитьСостояниеЗаказа = Команды[НазваниеКоманды];
			Иначе
				КомандаУстановитьСостояниеЗаказа = Команды.Добавить(НазваниеКоманды);
			КонецЕсли;

			КомандаУстановитьСостояниеЗаказа.Действие = "ИзменитьСостояниеЗаказа";
			КомандаУстановитьСостояниеЗаказа.Заголовок = Строка(СостояниеВида.Состояние);
			
			КнопкаУстановитьСостояниеЗаказа.ИмяКоманды = КомандаУстановитьСостояниеЗаказа.Имя;
			КнопкаУстановитьСостояниеЗаказаФорма.ИмяКоманды = КомандаУстановитьСостояниеЗаказа.Имя;
			
			НомерСостояния = НомерСостояния + 1;
		
		КонецЦикла;
		
		ИндексВидаЗаказа = ИндексВидаЗаказа + 1;
		
	КонецЦикла;
	
	Элементы.Переместить(Элементы["УстановитьСостояниеЗавершен"],Элементы["СписокКонтекстноеМенюУстановитьСостояние"]);
	Элементы.Переместить(Элементы["УстановитьСостояниеЗавершенФорма"],Элементы["ФормаУстановитьСостояние"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеЗаказа(Команда)
	
	Если Команда.Имя = "СостояниеЗавершенУспешно" Тогда
		ВидЗаказа = Неопределено;
	Иначе
		ИндексСостояния = Число(Сред(Команда.Имя,11,СтрДлина(Команда.Имя)));
		ВидЗаказа = СостоянияЗаказовПокупателей[ИндексСостояния].Вид;
	КонецЕсли;
	
	ИмяКоманды = Команда.Имя;
	Заказы = Элементы.Список.ВыделенныеСтроки;
	УстановитьСостояниеЗаказа(ИмяКоманды, Заказы, ВидЗаказа);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеЗаказа(ИмяКоманды, Заказы, ВидЗаказа = Неопределено, ПричинаОтмены = Неопределено,
	Заметки = Неопределено)

	Если ТипЗнч(Заказы) <> Тип("Массив") Или Заказы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если Заказы.Количество() = 1 Тогда

		Если Заметки = "" Тогда
			Заметки = Неопределено;
		КонецЕсли;

		УстановитьСостояниеЗаказаСервер(ВидЗаказа, ИмяКоманды, Заказы, ПричинаОтмены, Заметки);

		Если Заказы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;

		ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"), ПолучитьНавигационнуюСсылку(Заказы[0]), СтрШаблон(НСтр(
			"ru='%1'"), Строка(Заказы[0])), БиблиотекаКартинок.Информация32);

		Элементы.Список.Обновить();
		Оповестить("ИзменениеСостояния_ЗаказПокупателя", Заказы);
		Возврат;

	КонецЕсли;

	Если Заметки = "" Тогда
		Заметки = Неопределено;
	КонецЕсли;

	КоличествоЗаказов = Заказы.Количество();

	Состояние(НСтр("ru='Изменение состояния'"), 49);
	УстановитьСостояниеЗаказаСервер(ВидЗаказа, ИмяКоманды, Заказы, ПричинаОтмены, Заметки);
	Состояние(НСтр("ru='Изменение состояния'"), 100);

	Элементы.Список.Обновить();
	Оповестить("ИзменениеСостояния_ЗаказПокупателя", Заказы);

	ПоказатьОповещениеПользователя(СтрШаблон(НСтр("ru='Изменение (%1)'"), КоличествоИзмененныхЗаказов), , НСтр(
		"ru='Заказы покупателей'"), БиблиотекаКартинок.Информация32);

	ПредупредитьЧтоСостояниеИзмененоЧастично(КоличествоЗаказов);

КонецПроцедуры

&НаКлиенте
Процедура ПредупредитьЧтоСостояниеИзмененоЧастично(КоличествоЗаказов)
	
	Если Не ЗначениеЗаполнено(СтрокаВидЗаказа) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоВидов = СтрЧислоВхождений(СтрокаВидЗаказа, ",") + 1;
	Если КоличествоВидов = 1 Тогда
		Пояснение = СтрШаблон(НСтр("ru = 'Вид заказа ""%1"" не содержит выбранное состояние.'"), СтрокаВидЗаказа);
	Иначе
		Пояснение = СтрШаблон(НСтр("ru = 'Виды заказов ""%1"" не содержат выбранное состояние.'"), СтрокаВидЗаказа);
	КонецЕсли;
	
	ПредставлениеКоличестваИзмененныхЗаказов = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			 НСтр("ru = ';%1 заказа;;%1 заказов;%1 заказов;%1 заказа'"), КоличествоИзмененныхЗаказов);
			 
	ТекстПредупреждения = СтрШаблон(
		НСтр("ru='Было изменено состояние для %1 из %2.
			 |%3'"), ПредставлениеКоличестваИзмененныхЗаказов, КоличествоЗаказов, Пояснение);
		
	ПоказатьПредупреждение( , ТекстПредупреждения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеЗаказаСервер(ВидЗаказа, ИмяКоманды, Заказы, ПричинаОтмены, Заметки)
	
	ВариантЗавершения = Неопределено;
	
	Если ВидЗаказа = Неопределено Тогда
		ВидЗаказа = Справочники.ВидыЗаказовПокупателей.Основной;
	КонецЕсли;

	Если ИмяКоманды = "СостояниеЗавершенУспешно" Тогда
		СсылкаНаСостояние = Справочники.СостоянияЗаказовПокупателей.Завершен;
		ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Успешно;
	ИначеЕсли ИмяКоманды = "СостояниеОтменен" Тогда
		СсылкаНаСостояние = Справочники.СостоянияЗаказовПокупателей.Завершен;
		ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен;
	Иначе
		ИндексСостояния = Число(Сред(ИмяКоманды,11,СтрДлина(ИмяКоманды)));
		СсылкаНаСостояние = СостоянияЗаказовПокупателей[ИндексСостояния].Состояние;
	КонецЕсли;
		
	КоличествоИзмененныхЗаказов = 0;
	СтрокаВидЗаказа = "";
	МассивСтрок = Новый Массив;
	ИзмененныеЗаказы = Новый Массив;
	НеизмененныеЗаказы = Новый Массив;
	
	Для Каждого Заказ Из Заказы Цикл
		
		ДанныеЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказ, "ВидЗаказа,СостояниеЗаказа,ВариантЗавершения");
		
		Если ДанныеЗаказа.ВидЗаказа <> ВидЗаказа Тогда
			
			СостояниеНайдено = НайденоСостояниеДанногоВида(СсылкаНаСостояние, ДанныеЗаказа.ВидЗаказа);
			
			Если НЕ СостояниеНайдено Тогда
				
				Вид = МассивСтрок.Найти(Строка(ДанныеЗаказа.ВидЗаказа));
				
				Если Вид <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				МассивСтрок.Добавить(Строка(ДанныеЗаказа.ВидЗаказа));
				НеизмененныеЗаказы.Добавить(Заказ);
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеЗаказа.СостояниеЗаказа = СсылкаНаСостояние И СсылкаНаСостояние <> Справочники.СостоянияЗаказовПокупателей.Завершен Тогда
			НеизмененныеЗаказы.Добавить(Заказ);
			Продолжить;
		КонецЕсли;
		
		Если ДанныеЗаказа.СостояниеЗаказа = СсылкаНаСостояние И СсылкаНаСостояние = Справочники.СостоянияЗаказовПокупателей.Завершен
			И (ЗначениеЗаполнено(ДанныеЗаказа.ВариантЗавершения) И ДанныеЗаказа.ВариантЗавершения = ВариантЗавершения) Тогда
			НеизмененныеЗаказы.Добавить(Заказ);
			Продолжить;
		КонецЕсли;

		Попытка
			Документы.ЗаказПокупателя.ИзменитьСостояниеЗаказаПокупателя(Заказ, СсылкаНаСостояние, ВариантЗавершения, ПричинаОтмены, Заметки);
			ИзмененныеЗаказы.Добавить(Заказ);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), Заказ);
			НеизмененныеЗаказы.Добавить(Заказ);
			Продолжить;
		КонецПопытки;
		
		РегистрыСведений.ОбъектыИнтеграцииCRM.ПослеЗаписиОбъекта(Заказ);
		
		КоличествоИзмененныхЗаказов = КоличествоИзмененныхЗаказов + 1;
		
	КонецЦикла;
	
	Для Каждого НеизмененныйЗаказ Из НеизмененныеЗаказы Цикл
		ИндексЗаказа = Заказы.Найти(НеизмененныйЗаказ);
		Если ИндексЗаказа = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Заказы.Удалить(ИндексЗаказа);
		
	КонецЦикла;
	
	СтрокаВидЗаказа = СтрСоединить(МассивСтрок, ", ");
	
	АссистентУправления.ВыполнитьТекущиеЗадачиСейчасВФоне(ИзмененныеЗаказы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьКомандИзмененияСостояний(Элемент)
	
	Если (Тип(Элемент.ВыделенныеСтроки) <> Тип("Массив") 
		ИЛИ Элемент.ВыделенныеСтроки.Количество() = 0
		ИЛИ Элемент.ТекущиеДанные = Неопределено) И ЭтотОбъект.СостоянияЗаказовПокупателей.Количество() = 0 Тогда
		
		Элементы.СписокКонтекстноеМенюУстановитьСостояние.Видимость = Ложь;
		Элементы.ФормаУстановитьСостояние.Видимость = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Найдено = Новый Массив;
		Найдено.Добавить(ЭтотОбъект.СостоянияЗаказовПокупателей[0]);
	Иначе
		Найдено = ЭтотОбъект.СостоянияЗаказовПокупателей.НайтиСтроки(Новый Структура("Вид", Элемент.ТекущиеДанные.ВидЗаказа));
	КонецЕсли;
		
	Для Каждого Группа Из Элементы.СписокКонтекстноеМенюУстановитьСостояние.ПодчиненныеЭлементы Цикл
		
		Если Группа.Имя = "УстановитьСостояниеЗавершен" Тогда
			Группа.Видимость = Истина;
			Продолжить;
		КонецЕсли;
		
		Если Найдено.Количество() = 0 Тогда
			Группа.Видимость = Ложь;
		Иначе
			Группа.Видимость = Группа.Имя = "Вид_"+ Строка(Найдено[0].ИндексВида);
		КонецЕсли;
		
		Для Каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
			Элемент.Видимость = Группа.Видимость;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого Группа Из Элементы.ФормаУстановитьСостояние.ПодчиненныеЭлементы Цикл
		
		Если Группа.Имя = "УстановитьСостояниеЗавершенФорма" Тогда
			Группа.Видимость = Истина;
			Продолжить;
		КонецЕсли;
		
		Если Найдено.Количество() = 0 Тогда
			Группа.Видимость = Ложь;
		Иначе
			Группа.Видимость = Группа.Имя = "Вид_"+ Строка(Найдено[0].ИндексВида) + "_Форма";
		КонецЕсли;
		
		Для Каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
			Элемент.Видимость = Группа.Видимость;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаказы(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьСостояниеОтменен",ЭтотОбъект);
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаОтменыЗаказа", , ЭтотОбъект,,,,Оповещение);
	
КонецПроцедуры

&НаСервере
Функция НайденоСостояниеДанногоВида(СсылкаНаСостояние, ВидЗаказа)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыЗаказовПокупателей.Ссылка КАК Ссылка,
	|	ВидыЗаказовПокупателей.ПорядокСостояний.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Состояние КАК Состояние
	|	) КАК ПорядокСостояний
	|ИЗ
	|	Справочник.ВидыЗаказовПокупателей КАК ВидыЗаказовПокупателей
	|ГДЕ
	|	ВидыЗаказовПокупателей.Ссылка = &ВидЗаказа";
	
	Запрос.УстановитьПараметр("ВидЗаказа", ВидЗаказа);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СостоянияВида = Выборка.ПорядокСостояний.Выгрузить();
		
		Отбор = Новый Структура;
		Отбор.Вставить("Состояние", СсылкаНаСостояние);
		НайденныеСтроки = СостоянияВида.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура УстановитьСостояниеОтменен(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКоманды = "СостояниеОтменен";
	Заказы = Элементы.Список.ВыделенныеСтроки;
	УстановитьСостояниеЗаказа(ИмяКоманды, Заказы, , Результат.ПричинаОтмены, Результат.Заметки);
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, Параметры) Экспорт

	Если Результат = Неопределено Тогда
		ТекШтрихкод = СокрЛП(Параметры.ТекШтрихкод);
	Иначе
		ТекШтрихкод = СокрЛП(Результат);
	КонецЕсли;
		
	Если ПустаяСтрока(ТекШтрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	Данные = Новый Структура;
	Данные.Вставить("Штрихкод", ТекШтрихкод);
	Данные.Вставить("Количество", 1);
	
	ОбработатьШтрихкоды(Данные);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если ЗначениеЗаполнено(МассивСсылок)  Тогда
		Элементы.Список.ТекущаяСтрока = МассивСсылок[0];
		ПоказатьЗначение(Неопределено, МассивСсылок[0]);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив;
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаказПокупателя.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБиблиотек

// ИнтернетПоддержкаПользователей.Новости

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, "ПриОткрытии");
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.Новости

// ЭДО

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Элементы.Список);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
КонецПроцедуры
// Конец ЭДО

// СтандартныеПодсистемы.ПодключаемыеКоманды

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПередатьВЯндексДоставку(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заказы", Элементы.Список.ВыделенныеСтроки);
	
	ОткрытьФорму("РегистрСведений.ЯндексДоставка.Форма.ПередатьЗаказы", ПараметрыФормы);
	
КонецПроцедуры

// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыСостоянияОригинала()
	ОбновитьКомандыСостоянияОригинала();
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыСостоянияОригинала()
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
КонецПроцедуры
//Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

// ЭлектронноеВзаимодействие.ТорговыеПредложения

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПодсказкиБизнесСетьНажатие(Команда)
	
	ТорговыеПредложенияКлиент.ОткрытьФормуПодсказок(ЭтаФорма);
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения

#КонецОбласти

#КонецОбласти
