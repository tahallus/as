#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Контрагент)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

// Осуществляет проверку возможности ввода на основании.
//
Процедура ПроверитьВозможностьВводаНаОснованииЗаказаПокупателя(ДанныеЗаполнения, ЗначенияРеквизитов) Экспорт
	
	Если ЗначенияРеквизитов.Свойство("Проведен") Тогда
		Если НЕ ЗначенияРеквизитов.Проведен Тогда
			ТекстОшибки = НСтр("ru='Документ %1 не проведен. Ввод на основании непроведенного документа запрещен.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ДанныеЗаполнения);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначенияРеквизитов.Свойство("ОжидаетсяВыборВариантаКП") Тогда
		Если ЗначенияРеквизитов.ОжидаетсяВыборВариантаКП Тогда
			ТекстОшибки = НСтр("ru='В документе %1 не выбран основной вариант коммерческого предложения.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ДанныеЗаполнения);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначенияРеквизитов.Свойство("ЗаказНарядВозврат")
		И ЗначенияРеквизитов.Свойство("ВидОперации")
		И ЗначенияРеквизитов.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд
		И (ЗначенияРеквизитов.СостояниеЗаказа <> Справочники.СостоянияЗаказНарядов.Завершен
			ИЛИ ЗначенияРеквизитов.ВариантЗавершения <> Перечисления.ВариантыЗавершенияЗаказа.Успешно) Тогда
		
		// Проверка на закрытие заказа-наряда при оформлении возврата
		// Незакрытый заказ-наряд не выполняет отгрузку запасов
		ТекстОшибки = НСтр("ru='Документ %1 в состоянии %2. Ввод возврата от покупателя на основании запрещен.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ДанныеЗаполнения, ЗначенияРеквизитов.СостояниеЗаказа);
		ВызватьИсключение ТекстОшибки;
		
	ИначеЕсли НЕ ЗначенияРеквизитов.Свойство("ЗаказНарядВозврат")
		И ЗначенияРеквизитов.Свойство("СостояниеЗаказа")
		И (ЗначенияРеквизитов.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен
		ИЛИ  ЗначенияРеквизитов.СостояниеЗаказа = Справочники.СостоянияЗаказНарядов.Завершен) Тогда
		
		ТекстОшибки = НСтр("ru='Документ %1 в состоянии %2. Ввод на основании запрещен.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ДанныеЗаполнения, ЗначенияРеквизитов.СостояниеЗаказа);
		ВызватьИсключение ТекстОшибки; 
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает соответствие видов операций заказа покупателя открываемым формам.
//
// Параметры:
//  ФормыСписка	 - Булево	 - Признак возврата форм документов или списков
Функция ПолучитьСоответствиеВидовОперацийФормам(ФормыСписка = Ложь) Экспорт
	
	ФормыЗаказаПокупателя = Новый Соответствие;
	
	Если ФормыСписка Тогда
		
		ФормыЗаказаПокупателя.Вставить(Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд,			"ФормаСпискаЗаказНаряда");
		ФормыЗаказаПокупателя.Вставить(Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу,		"ФормаСписка");
		ФормыЗаказаПокупателя.Вставить(Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку,	"ФормаСписка");
		
	Иначе
		
		ФормыЗаказаПокупателя.Вставить(Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд,			"ФормаЗаказНаряда");
		ФормыЗаказаПокупателя.Вставить(Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу,		"ФормаДокумента");
		ФормыЗаказаПокупателя.Вставить(Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку,	"ФормаДокумента");
		
	КонецЕсли;
	
	Возврат ФормыЗаказаПокупателя;
	
КонецФункции

// Добавляет во временную таблицу все позиции таблицы "Запасы" из основного варианта КП и за исключением групп.
//
// Параметры:
//  Заказы                       - ДокументСсылка.ЗаказПокупателя, Массив,
//  ВключитьНоменклатуруДоставки - Булево - включать в выборку позицию с номенклатурой доставки.
// 
Процедура ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(Знач Заказы, МенеджерВременныхТаблиц, ВключитьНоменклатуруДоставки) Экспорт
	
	Если ТипЗнч(Заказы) <> Тип("Массив") Тогда
		Заказы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Заказы);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ЗаказПокупателя.ОсновнойВариантКП КАК ОсновнойВариантКП
	|ПОМЕСТИТЬ ВТЗаказы
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&Ссылки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.Ссылка КАК Ссылка,
	|	СУММА(ВЫБОР
	|			КОГДА ЗаказПокупателяЗапасы.НомерВариантаКП = ЗаказПокупателяЗапасы.Ссылка.ОсновнойВариантКП
	|				ТОГДА ЗаказПокупателяЗапасы.КоличествоСобрано
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Собрано
	|ПОМЕСТИТЬ ВТЗаказыЕстьСборка
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка В(&Ссылки)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяЗапасы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ЗаказПокупателяЗапасы.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТМаксНомерСтрокиЗапасы
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка В(&Ссылки)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяЗапасы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.Ссылка КАК Ссылка,
	|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗаказПокупателяЗапасы.НомерВариантаКП КАК НомерВариантаКП,
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.ТипНоменклатурыЗапас КАК ТипНоменклатурыЗапас,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ЗаказПокупателяЗапасы.Партия КАК Партия,
	|	ЗаказПокупателяЗапасы.СерииНоменклатуры КАК СерииНоменклатуры,
	|	ЗаказПокупателяЗапасы.Резерв КАК Резерв,
	|	ЗаказПокупателяЗапасы.РезервОтгрузка КАК РезервОтгрузка,
	|	ЗаказПокупателяЗапасы.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиницаРезерв,
	|	ЗаказПокупателяЗапасы.Ячейка КАК Ячейка,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|			ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Коэффициент,
	|	ЗаказПокупателяЗапасы.Цена КАК Цена,
	|	ЗаказПокупателяЗапасы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ЗаказПокупателяЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ЗаказПокупателяЗапасы.Сумма КАК Сумма,
	|	ЗаказПокупателяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателяЗапасы.СуммаНДС КАК СуммаНДС,
	|	ЗаказПокупателяЗапасы.Всего КАК Всего,
	|	ЗаказПокупателяЗапасы.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ЗаказПокупателяЗапасы.Спецификация КАК Спецификация,
	|	ЗаказПокупателяЗапасы.Содержание КАК Содержание,
	|	ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ЗаказПокупателяЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЗаказПокупателяЗапасы.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.ТипНоменклатурыЗапас
	|			ТОГДА ЗаказПокупателяЗапасы.КоличествоСобрано
	|		ИНАЧЕ ЗаказПокупателяЗапасы.Количество
	|	КОНЕЦ КАК КоличествоСобрано,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЕстьСборка.Собрано, 0) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьСборка,
	|	ЗаказПокупателяЗапасы.КлючСвязи КАК КлючСвязи,
	|	ЗаказПокупателяЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ЗаказПокупателяЗапасы.НомерГТД КАК НомерГТД,
	|	ЗаказПокупателяЗапасы.Вес КАК Вес,
	|	ЗаказПокупателяЗапасы.Объем КАК Объем,
	|	ЗаказПокупателяЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ЗаказПокупателяЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЗаказПокупателяЗапасы.ДоляСтоимости КАК ДоляСтоимости,
	|	ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	|ПОМЕСТИТЬ ВТЗаказПокупателяЗапасы
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаказы КАК Заказы
	|		ПО (Заказы.Ссылка = ЗаказПокупателяЗапасы.Ссылка)
	|			И (Заказы.ОсновнойВариантКП = ЗаказПокупателяЗапасы.НомерВариантаКП)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаказыЕстьСборка КАК ЕстьСборка
	|		ПО ЗаказПокупателяЗапасы.Ссылка = ЕстьСборка.Ссылка
	|ГДЕ
	|	НЕ ЗаказПокупателяЗапасы.ЭтоРазделитель
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка,
	|	ЕСТЬNULL(ВТМаксНомерСтрокиЗапасы.НомерСтроки, 0) + 1,
	|	Заказы.ОсновнойВариантКП,
	|	ЗаказПокупателя.НоменклатураДоставки,
	|	ЛОЖЬ,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка),
	|	"""",
	|	0,
	|	0,
	|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка),
	|	NULL,
	|	ЗаказПокупателя.НоменклатураДоставки.ЕдиницаИзмерения,
	|	1,
	|	ЗаказПокупателя.СтоимостьДоставки,
	|	0,
	|	NULL,
	|	ЗаказПокупателя.СтоимостьДоставки,
	|	ЗаказПокупателя.СтавкаНДСДоставки,
	|	ЗаказПокупателя.СуммаНДСДоставки,
	|	ЗаказПокупателя.СтоимостьДоставки + ВЫБОР
	|		КОГДА ЗаказПокупателя.СуммаВключаетНДС
	|			ТОГДА 0
	|		ИНАЧЕ ЗаказПокупателя.СуммаНДСДоставки
	|	КОНЕЦ,
	|	ЗаказПокупателя.ДатаОтгрузки,
	|	ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка),
	|	"""",
	|	0,
	|	0,
	|	1,
	|	1,
	|	ЛОЖЬ,
	|	0,
	|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка),
	|	0,
	|	0,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	0,
	|	NULL
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаказы КАК Заказы
	|		ПО (Заказы.Ссылка = ЗаказПокупателя.Ссылка)
	|			И (ЗаказПокупателя.НоменклатураДоставки <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|			И (&ВключитьНоменклатуруДоставки)
	|			И (ЗаказПокупателя.СпособДоставки <> ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПустаяСсылка))
	|			И (ЗаказПокупателя.СпособДоставки <> ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМаксНомерСтрокиЗапасы КАК ВТМаксНомерСтрокиЗапасы
	|		ПО (ВТМаксНомерСтрокиЗапасы.Ссылка = ЗаказПокупателя.Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылки", Заказы);
	Запрос.УстановитьПараметр("ВключитьНоменклатуруДоставки", ВключитьНоменклатуруДоставки);
	// @skip-warning используется для добавления временных таблиц
	РезультатЗапроса = Запрос.Выполнить();
	
КонецПроцедуры

// Изменяет состояние заказа
//
// Параметры:
//  Заказ				 - 	ДокументСсылка.ЗаказПокупателя 
//  Состояние			 - 	СправочникСсылка.СостоянияЗаказНарядов 
//  ВариантЗавершения	 - 	ПеречисленияСсылка.ВариантыЗавершенияЗаказа 
//  ПричинаОтмены 		 - 	СправочникСсылка.ПричиныОтменыЗаказа
//  Заметки 			 - 	Строка
//
Процедура ИзменитьСостояниеЗаказНаряда(Заказ, Состояние, ВариантЗавершения = Неопределено, ПричинаОтмены = Неопределено, Заметки = Неопределено) Экспорт
	
	Если Заказ.СостояниеЗаказа = Состояние И Состояние <> Справочники.СостоянияЗаказНарядов.Завершен Тогда
		Возврат;
	КонецЕсли;
	
	Если Заказ.СостояниеЗаказа = Состояние И Состояние = Справочники.СостоянияЗаказНарядов.Завершен
		И (ЗначениеЗаполнено(Заказ.ВариантЗавершения) И Заказ.ВариантЗавершения = ВариантЗавершения) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказОбъект = Заказ.ПолучитьОбъект();
	ЗаказОбъект.Заблокировать();
	
	ЗаказОбъект.СостояниеЗаказа = Состояние;
	
	Если ВариантЗавершения <> Неопределено Тогда
		ЗаказОбъект.ВариантЗавершения = ВариантЗавершения;
	КонецЕсли;
	
	Если ПричинаОтмены <> Неопределено Тогда
		ЗаказОбъект.ПричинаОтмены = ПричинаОтмены;
	КонецЕсли;
	
	Если Заметки <> Неопределено Тогда
		ЗаказОбъект.Заметки = Заметки;
	КонецЕсли;
	
	ЗаказОбъект.Записать(ЗаказОбъект.РежимЗаписиПриСменеСостояния());
	
	ЗаказОбъект.Разблокировать();
	
КонецПроцедуры

// Изменяет состояние заказа
//
// Параметры:
//  Заказ				 - 	ДокументСсылка.ЗаказПокупателя 
//  Состояние			 - 	СправочникСсылка.СостоянияЗаказовПокупателей 
//  ВариантЗавершения	 - 	ПеречисленияСсылка.ВариантыЗавершенияЗаказа 
//  ПричинаОтмены 		 - 	СправочникСсылка.ПричиныОтменыЗаказа
//  Заметки 			 - 	Строка
Процедура ИзменитьСостояниеЗаказаПокупателя(Заказ, Состояние, ВариантЗавершения = Неопределено, ПричинаОтмены = Неопределено, Заметки = Неопределено) Экспорт
	
	Если Заказ.СостояниеЗаказа = Состояние И Состояние <> Справочники.СостоянияЗаказовПокупателей.Завершен Тогда
		Возврат;
	КонецЕсли;
	
	Если (Заказ.СостояниеЗаказа = Состояние И Состояние = Справочники.СостоянияЗаказовПокупателей.Завершен
		И (ЗначениеЗаполнено(Заказ.ВариантЗавершения) И Заказ.ВариантЗавершения = ВариантЗавершения)) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказОбъект = Заказ.ПолучитьОбъект();
	ЗаказОбъект.Заблокировать();
	
	ЗаказОбъект.СостояниеЗаказа = Состояние;
	
	Если ВариантЗавершения <> Неопределено Тогда
		ЗаказОбъект.ВариантЗавершения = ВариантЗавершения;
	КонецЕсли;
	
	Если ПричинаОтмены <> Неопределено Тогда
		ЗаказОбъект.ПричинаОтмены = ПричинаОтмены;
	КонецЕсли;
	
	Если Заметки <> Неопределено Тогда
		ЗаказОбъект.Заметки = Заметки;
	КонецЕсли;
	
	ЗаказОбъект.Записать(ЗаказОбъект.РежимЗаписиПриСменеСостояния());
	
	ЗаказОбъект.Разблокировать();
	
КонецПроцедуры

Функция СтатусОтгрузки(Заказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ДокументЗаказПокупателя.Проведен
	|				ИЛИ ДокументЗаказПокупателя.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|				ИЛИ ДокументЗаказПокупателя.ОжидаетсяВыборВариантаКП
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусОтгрузки.Отсутствует)
	|		КОГДА ГрафикВыполнения.Выполнено = 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусОтгрузки.Отсутствует)
	|		КОГДА ГрафикВыполнения.Выполнено > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусОтгрузки.Частичная)
	|		КОГДА ГрафикВыполнения.Заказ ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусОтгрузки.Полная)
	|	КОНЕЦ КАК СтатусОтгрузки
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ДокументЗаказПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикВыполненияЗаказов КАК ГрафикВыполнения
	|		ПО ДокументЗаказПокупателя.Ссылка = ГрафикВыполнения.Заказ
	|ГДЕ
	|	ДокументЗаказПокупателя.Ссылка = &ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", Заказ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтатусОтгрузки;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция СтатусОплаты(Заказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДокументЗаказПокупателя.СуммаДокумента <= 0
	|				ИЛИ НЕ ДокументЗаказПокупателя.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусОплаты.НеУчитывается)
	|		КОГДА НЕ ДокументЗаказПокупателя.Проведен
	|				И ЕСТЬNULL(ФактОплаты.СуммаОплаты, 0) + ЕСТЬNULL(ФактОплаты.СуммаАванса, 0) = 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусОплаты.НеУчитывается)
	|		КОГДА ДокументЗаказПокупателя.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|				И ЕСТЬNULL(ФактОплаты.СуммаОплаты, 0) + ЕСТЬNULL(ФактОплаты.СуммаАванса, 0) = 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусОплаты.НеУчитывается)
	|		КОГДА ЕСТЬNULL(ФактОплаты.СуммаОплаты, 0) + ЕСТЬNULL(ФактОплаты.СуммаАванса, 0) - ДокументЗаказПокупателя.СуммаДокумента >= 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусОплаты.Полная)
	|		КОГДА ЕСТЬNULL(ФактОплаты.СуммаОплаты, 0) + ЕСТЬNULL(ФактОплаты.СуммаАванса, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусОплаты.Частичная)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусОплаты.Отсутствует)
	|	КОНЕЦ КАК СтатусОплаты
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ДокументЗаказПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФактОплатыЗаказов КАК ФактОплаты
	|		ПО ДокументЗаказПокупателя.Ссылка = ФактОплаты.СчетНаОплату
	|ГДЕ
	|	ДокументЗаказПокупателя.Ссылка = &Заказ";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтатусОплаты;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПроцентОплаты(Заказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДокументЗаказПокупателя.СуммаДокумента <= 0
	|				ИЛИ НЕ ДокументЗаказПокупателя.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА 0
	|		КОГДА НЕ ДокументЗаказПокупателя.Проведен
	|				И ЕСТЬNULL(ФактОплаты.СуммаОплаты, 0) + ЕСТЬNULL(ФактОплаты.СуммаАванса, 0) = 0
	|			ТОГДА 0
	|		КОГДА ДокументЗаказПокупателя.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|				И ЕСТЬNULL(ФактОплаты.СуммаОплаты, 0) + ЕСТЬNULL(ФактОплаты.СуммаАванса, 0) = 0
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(ФактОплаты.СуммаОплаты, 0) + ЕСТЬNULL(ФактОплаты.СуммаАванса, 0) - ДокументЗаказПокупателя.СуммаДокумента >= 0
	|			ТОГДА 100
	|		КОГДА ЕСТЬNULL(ФактОплаты.СуммаОплаты, 0) + ЕСТЬNULL(ФактОплаты.СуммаАванса, 0) > 0
	|			ТОГДА ВЫРАЗИТЬ((ЕСТЬNULL(ФактОплаты.СуммаОплаты, 0) + ЕСТЬNULL(ФактОплаты.СуммаАванса, 0)) * 100 / ДокументЗаказПокупателя.СуммаДокумента КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПроцентОплаты
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ДокументЗаказПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФактОплатыЗаказов КАК ФактОплаты
	|		ПО ДокументЗаказПокупателя.Ссылка = ФактОплаты.СчетНаОплату
	|ГДЕ
	|	ДокументЗаказПокупателя.Ссылка = &Заказ";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПроцентОплаты;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ЭтоОтмененныйЗаказ(Заказ) Экспорт
	
	ДанныеЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказ, "ВариантЗавершения,ПометкаУдаления");
	
	Возврат ДанныеЗаказа.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен ИЛИ ДанныеЗаказа.ПометкаУдаления;
	
КонецФункции

Функция ЭтоЗаказНаряд(Заказ) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "ВидОперации") = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ВидОперации = Неопределено;
	
	Если ВидФормы = "ФормаДокумента" Или ВидФормы = "ФормаОбъекта" Тогда
		
		Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
		КонецЕсли;
		
		// Если документ копируется, то вид операции получаем из копируемого документа.
		Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
			Если Параметры.Свойство("ЗначениеКопирования")
				И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
				ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЗначениеКопирования, "ВидОперации");
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
			Если Параметры.Свойство("ЗначенияЗаполнения") 
				И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
				
				Если Параметры.ЗначенияЗаполнения.Свойство("ШаблонДокумента") Тогда
					ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					Параметры.ЗначенияЗаполнения.ШаблонДокумента,
					"ВидОперации");
				КонецЕсли;
				
				Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
					ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		ФормыЗаказаПокупателя = ПолучитьСоответствиеВидовОперацийФормам();
		ВыбраннаяФорма = ФормыЗаказаПокупателя[ВидОперации];
		Если ВыбраннаяФорма = Неопределено Тогда
			ВыбраннаяФорма = "ФормаДокумента";
		КонецЕсли;
		
	ИначеЕсли ВидФормы = "ФормаСписка" Тогда
		
		Если Параметры.Свойство("ЗаказНаряд") Тогда
			ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд;
		КонецЕсли;
		
		// Если установлен отбор, то вид операции получаем из отбора.
		Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
			Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("ВидОперации")
				И ТипЗнч(Параметры.Отбор.ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийЗаказПокупателя") Тогда
				ВидОперации = Параметры.Отбор.ВидОперации;
			КонецЕсли;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		ФормыЗаказаПокупателя = ПолучитьСоответствиеВидовОперацийФормам(Истина);
		ВыбраннаяФорма = ФормыЗаказаПокупателя[ВидОперации];
		Если ВыбраннаяФорма = Неопределено Тогда
			ВыбраннаяФорма = "ФормаСписка";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Ссылка");
	Поля.Добавить("Дата");
	Поля.Добавить("Номер");
	Поля.Добавить("ВидОперации");
	Поля.Добавить("Проведен");
	Поля.Добавить("ПометкаУдаления");
	
КонецПроцедуры // ОбработкаПолученияПолейПредставления()

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	Если Данные.Номер = Null Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Данные.Проведен Тогда
		Состояние = "";
	Иначе
		Если Данные.ПометкаУдаления Тогда
			Состояние = НСтр("ru='(удален)'");
		ИначеЕсли Данные.Свойство("Проведен") И НЕ Данные.Проведен Тогда
			Состояние = НСтр("ru='(не проведен)'");
		КонецЕсли;
	КонецЕсли;
	
	Если Данные.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд") Тогда
		ЗаголовокПредставление = НСтр("ru='Заказ-наряд'");
	Иначе
		ЗаголовокПредставление = НСтр("ru='Заказ покупателя'");
	КонецЕсли;
	
	Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1 %2 от %3 %4'"),
		ЗаголовокПредставление,
		?(Данные.Свойство("Номер"), ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Данные.Номер, Истина, Истина), ""),
		Формат(Данные.Дата, "ДЛФ=D"),
		Состояние);
	
КонецПроцедуры // ОбработкаПолученияПредставления()

#КонецОбласти

#Область НачислениеЗарплаты

Функция РассчитатьЗначениеНачисленияПоСтрокеНаСервере(КоэффициентыРаботы, СуммаРаботы, КТУ, СуммаКТУ, ВидНачисленияУдержания, Размер) Экспорт
	
	Если ВидНачисленияУдержания = Справочники.ВидыНачисленийИУдержаний.ФиксированнаяСумма Тогда
		
		Возврат Размер;
		
	ИначеЕсли ВидНачисленияУдержания = Справочники.ВидыНачисленийИУдержаний.СдельнаяОплата Тогда
		
		Возврат КоэффициентыРаботы * Размер * (КТУ / СуммаКТУ);
		
	ИначеЕсли ВидНачисленияУдержания = Справочники.ВидыНачисленийИУдержаний.СдельнаяОплатаПроцент Тогда
		
		Возврат (СуммаРаботы / 100 * Размер) * (КТУ / СуммаКТУ);
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтрокуРаботыПоКлючуСвязи(ТабличнаяЧастьРаботы, КлючСвязи) Экспорт
	
	МассивНайденныйСтрок = ТабличнаяЧастьРаботы.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
	
	Возврат ?(МассивНайденныйСтрок.Количество() <> 1, Неопределено, МассивНайденныйСтрок[0]);
	
КонецФункции

Функция ПолучитьСтрокиИсполнителейПоКлючуСвязи(ТабличнаяЧастьИсполнители, КлючСвязи) Экспорт
	
	Возврат ТабличнаяЧастьИсполнители.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
	
КонецФункции

Функция ВычислитьСуммуКТУПоКлючуСвязи(ТабличнаяЧастьИсполнители, КлючСвязи) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КлючСвязи) Тогда
		
		Возврат 1;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ *
	|ПОМЕСТИТЬ ТЧ_Исполнители
	|ИЗ
	|	&ТабличнаяЧасть КАК ЗаказПокупателяИсполнители
	| ГДЕ ЗаказПокупателяИсполнители.КлючСвязи = &КлючСвязи";
	
	Запрос.УстановитьПараметр("КлючСвязи", КлючСвязи);
	Запрос.УстановитьПараметр("ТабличнаяЧасть", ТабличнаяЧастьИсполнители.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ТЧ_Исполнители.КТУ) КАК СуммаКТУ
	|ИЗ
	|	ТЧ_Исполнители КАК ТЧ_Исполнители
	|ГДЕ 
	|	ТЧ_Исполнители.ВидНачисленияУдержания <> Значение(Справочник.ВидыНачисленийИУдержаний.ФиксированнаяСумма)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		
		Возврат 1;
		
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат ?(Выборка.СуммаКТУ = 0, 1, Выборка.СуммаКТУ);
	
КонецФункции

Функция ЕстьИсполнителиСПустойСуммойНачисления(Исполнители) Экспорт
	
	Перем Ошибки;
	ШаблонТекстаСообщения = НСтр("ru = 'Не верно указана сумма начисления для сотрудника %1 в строке %2.'");
	
	Для каждого Исполнитель Из Исполнители Цикл
		
		Если Исполнитель.СуммаНачисления = 0 Тогда
			
			ТекстДляОднойОшибки = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаСообщения, Исполнитель.Сотрудник.Наименование, Исполнитель.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки, 
				"Объект.Исполнители[%1].Сотрудник", 
				ТекстДляОднойОшибки, 
				Неопределено, 
				Исполнитель.НомерСтроки, 
				);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДанныхИзВнешнегоИсточника

Процедура ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт
	
	ОписаниеТиповСтрока11 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(11));
	ОписаниеТиповСтрока25 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25));
	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	ОписаниеТиповСтрока150 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(150));
	ОписаниеТиповСтрока200 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200));
	ОписаниеТиповСтрока1000 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000));
	ОписаниеТиповЧисло15_2 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло15_3 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	ПолноеИмяОбъектаЗаполнения = НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;
	
	Если ПустаяСтрока(ПолноеИмяОбъектаЗаполнения) 
		ИЛИ ПолноеИмяОбъектаЗаполнения="Документ.ЗаказПокупателя.ТабличнаяЧасть.Запасы" Тогда
	
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Штрихкод", НСтр("ru = 'Штрихкод'"), ОписаниеТиповСтрока200, ОписаниеТиповКолонка, "Номенклатура", 1, , Истина);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Артикул", НСтр("ru = 'Артикул'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Номенклатура", 2, , Истина);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименование", НСтр("ru = 'Номенклатура (наименование)'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Номенклатура", 3, , Истина);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименованиеПолное",НСтр("ru = 'Номенклатура (полное наименование)'"), ОписаниеТиповСтрока1000, ОписаниеТиповКолонка, "Номенклатура", 5, , Истина);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Содержание", НСтр("ru = 'Содержание'"), ОписаниеТиповСтрока1000, ОписаниеТиповСтрока1000, , , , , НастройкиЗагрузкиДанных.СодержаниеВидимо);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "РодительКод",
			НСтр("ru = 'Код'", ОбщегоНазначения.КодОсновногоЯзыка()), 			ОписаниеТиповСтрока11, ОписаниеТиповКолонка, "Родитель", 1);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "РодительНаименование", 
			НСтр("ru = 'Группа (наименование)'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Родитель", 2);	

		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ХарактеристикаНаименование", НСтр("ru = 'Характеристика (наименование)'"), ОписаниеТиповСтрока150, ОписаниеТиповКолонка, "Характеристика", 1);
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ХарактеристикаАртикул", НСтр("ru = 'Характеристика (артикул)'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Характеристика", 2);
			
		КонецЕсли;		
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("ПланСчетовСсылка.Управленческий");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаДоходов", 
			НСтр("ru = 'Счет учета доходов'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка,,,,, Ложь);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаЗапасов", 
			НСтр("ru = 'Счет учета запасов'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка,,,,, Ложь);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаЗатрат", 
			НСтр("ru = 'Счет учета затрат'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка,,,,, Ложь);

		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НаправлениеДеятельности",
			НСтр("ru = 'Направление деятельности'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
			
		ОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.МетодОценкиЗапасов");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "МетодОценки",
			НСтр("ru = 'Способ списания'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
			
		ОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПополненияЗапасов");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СпособПополнения",
			НСтр("ru = 'Способ пополнения'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);

		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЭтоУслуга", 
			НСтр("ru = 'Это услуга'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповБулево, ОписаниеТиповБулево); 		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Картинка", 
			НСтр("ru = 'Картинка'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока1000, ОписаниеТиповСтрока1000,,,,,Ложь);   		
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КатегорииНоменклатуры");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "КатегорияНоменклатуры", 
			НСтр("ru = 'Категория номенклатуры'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);   

		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
			
			ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры");
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Партия", НСтр("ru = 'Партия (наименование)'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
			
		КонецЕсли;
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Количество", НСтр("ru = 'Количество'"), ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_3, , , Истина);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Резерв", НСтр("ru = 'Резерв'"), ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_3, , , , , ПолучитьФункциональнуюОпцию("РезервированиеЗапасов"));
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения, СправочникСсылка.ЕдиницыИзмерения");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЕдиницаИзмерения", НСтр("ru = 'Ед. изм.'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, , , , , ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения"));
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Цена", НСтр("ru = 'Цена'"), ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2, , , Истина);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтавкаНДС", НСтр("ru = 'Ставка НДС'"), ОписаниеТиповСтрока50, ОписаниеТиповКолонка);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СуммаНДС", НСтр("ru = 'Сумма НДС'"), ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НастройкиЗагрузкиДанных, "ПоложениеДатыОтгрузки") Тогда
			ПолеВидимо = (НастройкиЗагрузкиДанных.ПоложениеДатыОтгрузки = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
		Иначе
			ПолеВидимо = Ложь;
		КонецЕсли;
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ДатаОтгрузки", НСтр("ru = 'Дата отгрузки'"), ОписаниеТиповСтрока25, ОписаниеТиповДата, , , , , ПолеВидимо);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы")
			ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство") Тогда
			
			ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Спецификации");
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Спецификация", НСтр("ru = 'Спецификация (наименование)'"), ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
			
		КонецЕсли;
	
		// Склад
		Если ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НастройкиЗагрузкиДанных, "ПоложениеСклада") Тогда
			
			ВидимостьСклада = НастройкиЗагрузкиДанных.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
			ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы");
			
		Иначе
			
			ВидимостьСклада = Ложь;
			
		КонецЕсли; 		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтруктурнаяЕдиницаРезерв", НСтр("ru = 'Склад'"), ОписаниеТиповСтрока50, ОписаниеТиповКолонка, , , , , ВидимостьСклада);
	
	ИначеЕсли ПолноеИмяОбъектаЗаполнения="Документ.ЗаказПокупателя.ТабличнаяЧасть.Калькуляция" Тогда
		
		Если НастройкиЗагрузкиДанных.ЗагрузкаКалькуляции Тогда
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЭтоРасход", НСтр("ru = 'Это расход'"), ОписаниеТиповСтрока25, ОписаниеТиповБулево, , , , , НастройкиЗагрузкиДанных.ЗагрузкаКалькуляции);
			ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура, ПланСчетовСсылка.Управленческий");
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Штрихкод", НСтр("ru = 'Штрихкод'"), ОписаниеТиповСтрока200, ОписаниеТиповКолонка, "Номенклатура", 1, , Истина);
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Артикул", НСтр("ru = 'Артикул'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Номенклатура", 2, , Истина);
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименование", НСтр("ru = 'Номенклатура или расход (наименование)'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Номенклатура", 3, , Истина);
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименованиеПолное",НСтр("ru = 'Номенклатура (полное наименование)'"), ОписаниеТиповСтрока1000, ОписаниеТиповКолонка, "Номенклатура", 5, , Истина);
		Иначе
			ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Штрихкод", НСтр("ru = 'Штрихкод'"), ОписаниеТиповСтрока200, ОписаниеТиповКолонка, "Номенклатура", 1, , Истина);
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Артикул", НСтр("ru = 'Артикул'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Номенклатура", 2, , Истина);
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименование", НСтр("ru = 'Номенклатура (наименование)'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Номенклатура", 3, , Истина);
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименованиеПолное",НСтр("ru = 'Номенклатура (полное наименование)'"), ОписаниеТиповСтрока1000, ОписаниеТиповКолонка, "Номенклатура", 5, , Истина);
		КонецЕсли; 
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ХарактеристикаНаименование", НСтр("ru = 'Характеристика (наименование)'"), ОписаниеТиповСтрока150, ОписаниеТиповКолонка, "Характеристика", 1);
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ХарактеристикаАртикул", НСтр("ru = 'Характеристика (артикул)'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Характеристика", 2);
			
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы")
			ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство") Тогда
			
			ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Спецификации");
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Спецификация", НСтр("ru = 'Спецификация (наименование)'"), ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
			
		КонецЕсли;
	
		Если ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения") Тогда
			
			ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения, СправочникСсылка.ЕдиницыИзмерения");
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЕдиницаИзмерения", НСтр("ru = 'Ед. изм.'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
			
		КонецЕсли;
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Количество", НСтр("ru = 'Количество'"), ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_3);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Себестоимость", НСтр("ru = 'Себестоимость'"), ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СебестоимостьЕдиницы", НСтр("ru = 'Себестоимость ед.'"), ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОпределенииОбразцовЗагрузкиДанных(НастройкиЗагрузкиДанных, УникальныйИдентификатор) Экспорт
	
	ПолноеИмяОбъектаЗаполнения = НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;
	
	Если ПустаяСтрока(ПолноеИмяОбъектаЗаполнения) 
		ИЛИ ПолноеИмяОбъектаЗаполнения="Документ.ЗаказПокупателя.ТабличнаяЧасть.Запасы" Тогда
	
		Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанных_xlsx");
		ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
		НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
		
		НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанных_mxl");
		
		Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанных_csv");
		ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
		НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
		
	ИначеЕсли ПолноеИмяОбъектаЗаполнения="Документ.ЗаказПокупателя.ТабличнаяЧасть.Калькуляция" Тогда
		
		Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанныхКалькуляция_xlsx");
		ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
		НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
		
		НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанныхКалькуляция_mxl");
		
		Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанныхКалькуляция_csv");
		ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
		НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника(ПараметрыСопоставления, АдресРезультата) Экспорт
	
	ТаблицаСопоставленияДанных	= ПараметрыСопоставления.ТаблицаСопоставленияДанных;
	РазмерТаблицыДанных			= ТаблицаСопоставленияДанных.Количество();
	НастройкиЗагрузкиДанных		= ПараметрыСопоставления.НастройкиЗагрузкиДанных;
	НастройкиПоиска				= НастройкиЗагрузкиДанных.НастройкиПоиска;
	
	ТаблицаДублирующихСтрок = ЗагрузкаДанныхИзВнешнегоИсточника.ПустаяТаблицаДублирующихСтрокНоменклатуры();
	НастройкиПоиска.Вставить("ТаблицаДублирующихСтрок", ТаблицаДублирующихСтрок);
	
	ПолноеИмяОбъектаЗаполнения = НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;
	
	// ТаблицаСопоставленияДанных - Тип ДанныеФормыКоллекция
	Для каждого СтрокаТаблицыФормы Из ТаблицаСопоставленияДанных Цикл
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "КатегорияНоменклатуры_ВходящиеДанные")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "КатегорияНоменклатуры") Тогда
		
			ЗначениеПоУмолчанию = Справочники.КатегорииНоменклатуры.БезКатегории;					
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьКатегориюНоменклатуры(СтрокаТаблицыФормы.КатегорияНоменклатуры, СтрокаТаблицыФормы.КатегорияНоменклатуры_ВходящиеДанные, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если ПустаяСтрока(ПолноеИмяОбъектаЗаполнения) 
			ИЛИ ПолноеИмяОбъектаЗаполнения="Документ.ЗаказПокупателя.ТабличнаяЧасть.Запасы" Тогда
		
			// Номенклатура по ШтрихКоду, Артикулу, Наименованию, НаименованиеПолное
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуру(СтрокаТаблицыФормы, НастройкиПоиска);
			
			// Содержание
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.Содержание, СтрокаТаблицыФормы.Содержание_ВходящиеДанные);
			
			СтрокаТаблицыФормы.СчетУчетаЗапасов = ПланыСчетов.Управленческий.СырьеИМатериалы;
			СтрокаТаблицыФормы.СчетУчетаЗатрат = ?(ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство"), 
				ПланыСчетов.Управленческий.НезавершенноеПроизводство, ПланыСчетов.Управленческий.КоммерческиеРасходы);
			СтрокаТаблицыФормы.СчетУчетаДоходов = ?(СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"), 
				ПланыСчетов.Управленческий.ПрочиеДоходы, ПланыСчетов.Управленческий.ПустаяСсылка());

			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "НаправлениеДеятельности") Тогда
					
				ЗначениеПоУмолчанию = Справочники.НаправленияДеятельности.Прочее;
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНаправлениеДеятельности(СтрокаТаблицыФормы.НаправлениеДеятельности, СтрокаТаблицыФормы.НаправлениеДеятельности_ВходящиеДанные, ЗначениеПоУмолчанию);
				
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "МетодОценки") Тогда
					
				ЗначениеПоУмолчанию = Перечисления.МетодОценкиЗапасов.ПоСредней;
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьМетодОценки(СтрокаТаблицыФормы.МетодОценки, СтрокаТаблицыФормы.МетодОценки_ВходящиеДанные, ЗначениеПоУмолчанию);
				
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "СпособПополнения") Тогда
					
				ЗначениеПоУмолчанию = Перечисления.СпособыПополненияЗапасов.Закупка;
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСпособПополнения(СтрокаТаблицыФормы.СпособПополнения, СтрокаТаблицыФормы.СпособПополнения_ВходящиеДанные, ЗначениеПоУмолчанию);
				
			КонецЕсли;
			
			// Характеристика по Владельцу и Наименованию
			Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
				
				Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
					
					ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьХарактеристику(СтрокаТаблицыФормы);
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Партия по Владельцу и Наименованию
			Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
				
				Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
					
					ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьПартию(СтрокаТаблицыФормы.Партия, СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Партия_ВходящиеДанные);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "Родитель")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "РодительНаименование")
				И ЗначениеЗаполнено(СтрокаТаблицыФормы.РодительНаименование) Тогда
				
				ЗначениеПоУмолчанию = Справочники.Номенклатура.ПустаяСсылка();
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьРодителяНоменклатуры(СтрокаТаблицыФормы.Родитель, "", СтрокаТаблицыФормы.РодительНаименование, ЗначениеПоУмолчанию);
				
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "ЭтоУслуга_ВходящиеДанные") Тогда
				
				СтрокаТаблицыФормы.ЭтоУслуга = СтрокаТаблицыФормы.ЭтоУслуга_ВходящиеДанные;
				
			КонецЕсли; 
			
			// Количество
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Количество, СтрокаТаблицыФормы.Количество_ВходящиеДанные, 1);
			
			// Резерв
			Если ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Резерв, СтрокаТаблицыФормы.Резерв_ВходящиеДанные, 0);
				
			КонецЕсли;
			
			// ЕдиницыИзмерения по Наименованию (так же рассмотреть возможность прикрутить пользовательские ЕИ)
			ЗначениеПоУмолчанию = ?(ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура), СтрокаТаблицыФормы.Номенклатура.ЕдиницаИзмерения, Справочники.КлассификаторЕдиницИзмерения.шт);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЕдиницыИзмерения(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.ЕдиницаИзмерения, СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			// Цена
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Цена, СтрокаТаблицыФормы.Цена_ВходящиеДанные, 1);
			
			// СтавкаНДС по наименованию
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтавкуНДС(СтрокаТаблицыФормы.СтавкаНДС, СтрокаТаблицыФормы.СтавкаНДС_ВходящиеДанные, Неопределено);
			
			// СуммаНДС
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.СуммаНДС, СтрокаТаблицыФормы.СуммаНДС_ВходящиеДанные, 0);
			
			// ДатаОтгрузки
			Если НастройкиЗагрузкиДанных.ПоложениеДатыВЗаказе = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВДату(СтрокаТаблицыФормы.ДатаОтгрузки, СтрокаТаблицыФормы.ДатаОтгрузки_ВходящиеДанные);
				
			КонецЕсли;
			
			// Спецификация
			Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы")
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство") Тогда
				
				Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
					
					ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСпецификацию(СтрокаТаблицыФормы.Спецификация, СтрокаТаблицыФормы.Спецификация_ВходящиеДанные, СтрокаТаблицыФормы.Номенклатура);
					
				КонецЕсли;
				
			КонецЕсли;
				
			// Склад
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтруктурнуюЕдиницу(СтрокаТаблицыФормы.СтруктурнаяЕдиницаРезерв, СтрокаТаблицыФормы.СтруктурнаяЕдиницаРезерв_ВходящиеДанные, Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		
			ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения);
			
		ИначеЕсли ПолноеИмяОбъектаЗаполнения="Документ.ЗаказПокупателя.ТабличнаяЧасть.Калькуляция" Тогда
			
			ЭтоЗагрузкаКалькуляции = НастройкиЗагрузкиДанных.ЗагрузкаКалькуляции;
			
			Если ЭтоЗагрузкаКалькуляции Тогда
				// Это расход
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицыФормы.ЭтоРасход, СтрокаТаблицыФормы.ЭтоРасход_ВходящиеДанные);
			КонецЕсли; 
			
			Если ЭтоЗагрузкаКалькуляции И СтрокаТаблицыФормы.ЭтоРасход Тогда
				// Расход по наименованию
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСчетУчетаЗатрат(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.НоменклатураНаименование, ПланыСчетов.Управленческий.ПустаяСсылка());
			Иначе
				// Номенклатура по ШтрихКоду, Артикулу, Наименованию, НаименованиеПолное
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуру(СтрокаТаблицыФормы, НастройкиПоиска);
				// Характеристика по Владельцу и Наименованию
				Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
					Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
						ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьХарактеристику(СтрокаТаблицыФормы);
					КонецЕсли;
				КонецЕсли;
				// Спецификация
				Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы")
					ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство") Тогда
					Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
						ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСпецификацию(СтрокаТаблицыФормы.Спецификация, СтрокаТаблицыФормы.Спецификация_ВходящиеДанные, СтрокаТаблицыФормы.Номенклатура);
					КонецЕсли;
				КонецЕсли;
				// ЕдиницыИзмерения по Наименованию (так же рассмотреть возможность прикрутить пользовательские ЕИ)
				Если ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения") Тогда
					ЗначениеПоУмолчанию = ?(ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура), СтрокаТаблицыФормы.Номенклатура.ЕдиницаИзмерения, Справочники.КлассификаторЕдиницИзмерения.шт);
					ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЕдиницыИзмерения(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.ЕдиницаИзмерения, СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЗначениеПоУмолчанию);
				КонецЕсли;
			КонецЕсли; 
			
			// Количество
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Количество, СтрокаТаблицыФормы.Количество_ВходящиеДанные, 1);
			
			// Себестоимость
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Себестоимость, СтрокаТаблицыФормы.Себестоимость_ВходящиеДанные, 0);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.СебестоимостьЕдиницы, СтрокаТаблицыФормы.СебестоимостьЕдиницы_ВходящиеДанные, 0);
			
			ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения);
			
		КонецЕсли;
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ПрогрессСопоставленияДанных(ТаблицаСопоставленияДанных.Индекс(СтрокаТаблицыФормы), РазмерТаблицыДанных);
		
	КонецЦикла;
	
	ТаблицаСопоставленияДанных.ЗагрузитьКолонку(ТаблицаДублирующихСтрок.ВыгрузитьКолонку("КлючСвязи"), "_КлючСвязи");
	ПоместитьВоВременноеХранилище(ТаблицаСопоставленияДанных, АдресРезультата);
	
КонецПроцедуры

Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения = "") Экспорт
	
	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	
	НоменклатураЗаполнена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура);
	ЗагрузкаНоменклатурыВозможна = Ложь;
	Если НЕ НоменклатураЗаполнена Тогда
		ЗагрузкаНоменклатурыВозможна = (ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураНаименование) ИЛИ ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураНаименованиеПолное));
	КонецЕсли;
	
	Если ПустаяСтрока(ПолноеИмяОбъектаЗаполнения) 
		ИЛИ ПолноеИмяОбъектаЗаполнения="Документ.ЗаказПокупателя.ТабличнаяЧасть.Запасы" Тогда
		
		Если НоменклатураЗаполнена Тогда
			
			ДопустимыеТипыНоменклатуры = Новый Массив;
			ДопустимыеТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Запас);
			ДопустимыеТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Работа);
			ДопустимыеТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
			
			ЭтоЗапасРаботаУслуга = (ДопустимыеТипыНоменклатуры.Найти(СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры) <> Неопределено);
			
			ЭтоПодразделение = Ложь;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "СтруктурнаяЕдиницаРезерв")
				И ЗначениеЗаполнено(СтрокаТаблицыФормы.СтруктурнаяЕдиницаРезерв)
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы.СтруктурнаяЕдиницаРезерв, "ТипСтруктурнойЕдиницы")
				И СтрокаТаблицыФормы.СтруктурнаяЕдиницаРезерв.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
				
				ЭтоПодразделение = Истина;
				
			КонецЕсли;
						
			СтрокаТаблицыФормы[ИмяСлужебногоПоля] = НЕ СтрокаТаблицыФормы.Номенклатура.ЭтоНабор
				И ЭтоЗапасРаботаУслуга
				И СтрокаТаблицыФормы.Количество <> 0
				И НЕ ЭтоПодразделение;
				
			СтрокаТаблицыФормы._СтрокаСопоставлена = НоменклатураЗаполнена;
			
		Иначе
			
			СтрокаТаблицыФормы[ИмяСлужебногоПоля] = ЗагрузкаНоменклатурыВозможна;
			
		КонецЕсли;		
		
	ИначеЕсли ПолноеИмяОбъектаЗаполнения="Документ.ЗаказПокупателя.ТабличнаяЧасть.Калькуляция" Тогда
		
		СтрокаТаблицыФормы[ИмяСлужебногоПоля] = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура)
			И (ТипЗнч(СтрокаТаблицыФормы.Номенклатура)<>Тип("СправочникСсылка.Номенклатура") ИЛИ НЕ СтрокаТаблицыФормы.Номенклатура.ЭтоНабор);
				
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - состав полей см. в функции ВерсионированиеОбъектов.НастройкиПодсистемы
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Истина;
	
КонецПроцедуры

// Ограничивает видимость реквизитов объекта в отчете по версии.
//
// Параметры:
//  Реквизиты - Массив - список имен реквизитов объекта.
Процедура ПриПолученииСлужебныхРеквизитов(Реквизиты) Экспорт
	
	Реквизиты.Добавить("АдресДоставкиЗначение");
	Реквизиты.Добавить("АдресДоставкиЗначенияПолей");
	
КонецПроцедуры

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела - ТаблицаЗначений - состав полей см. в функции ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ЗаполнитьСписокТекущихДелЗаказПокупателя(ТекущиеДела);
	ЗаполнитьСписокТекущихДелЗаказНаряд(ТекущиеДела);
	
КонецПроцедуры

Процедура ЗаполнитьСписокТекущихДелЗаказПокупателя(ТекущиеДела)
	
	ГруппаДел	= НСтр("ru = 'Заказы покупателей'");
	ИмяФормы	= "Документ.ЗаказПокупателя.Форма.ФормаСписка";
	
	Если Не ПравоДоступа("Редактирование", Метаданные.Документы.ЗаказПокупателя)
		Или Не ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ГрафикВыполненияЗаказов)
		Или Не ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ГрафикОплатыЗаказов)
		Или ТекущиеДелаСервер.ДелоОтключено(ГруппаДел) Тогда
		
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА НЕ ГрафикВыполнения.Заказ ЕСТЬ NULL 
		|					И ГрафикВыполнения.Период < НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|				ТОГДА ДокЗаказПокупателя.Ссылка
		|		КОНЕЦ) КАК ЗаказыПокупателейПросроченоВыполнение,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА ДокЗаказПокупателя.ЗапланироватьОплату
		|					И НЕ ГрафикОплаты.СчетНаОплату ЕСТЬ NULL 
		|					И ГрафикОплаты.Период < НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|				ТОГДА ДокЗаказПокупателя.Ссылка
		|		КОНЕЦ) КАК ЗаказыПокупателейПросроченаОплата,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА НЕ ГрафикВыполнения.Заказ ЕСТЬ NULL 
		|					И ГрафикВыполнения.Период = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|				ТОГДА ДокЗаказПокупателя.Ссылка
		|			КОГДА ДокЗаказПокупателя.ЗапланироватьОплату
		|					И НЕ ГрафикОплаты.СчетНаОплату ЕСТЬ NULL 
		|					И ГрафикОплаты.Период = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|				ТОГДА ДокЗаказПокупателя.Ссылка
		|		КОНЕЦ) КАК ЗаказыПокупателейНаСегодня,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокЗаказПокупателя.Ссылка) КАК ЗаказыПокупателейНеЗавершенные
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ДокЗаказПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикВыполненияЗаказов КАК ГрафикВыполнения
		|		ПО ДокЗаказПокупателя.Ссылка = ГрафикВыполнения.Заказ
		|			И (ГрафикВыполнения.Период <= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ))
		|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикОплатыЗаказов КАК ГрафикОплаты
		|		ПО ДокЗаказПокупателя.Ссылка = ГрафикОплаты.СчетНаОплату
		|			И (ГрафикОплаты.Период <= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ))}
		|ГДЕ
		|	ДокЗаказПокупателя.Проведен
		|	И ДокЗаказПокупателя.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
		|	И НЕ ДокЗаказПокупателя.СостояниеЗаказа = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.Завершен)
		|	И ДокЗаказПокупателя.Ответственный В(&СотрудникиПользователя)";
	
	ДанныеДел = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	 = "ЗаказыПокупателейПросроченоВыполнение";
	Дело.ЕстьДела		= ДанныеДел.ЗаказыПокупателейПросроченоВыполнение > 0;
	Дело.Важное			= Истина;
	Дело.Представление	= НСтр("ru = 'Просрочено выполнение'");
	Дело.Количество		= ДанныеДел.ЗаказыПокупателейПросроченоВыполнение;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("КлючНазначенияИспользования,ТекущиеДела,ПросроченоВыполнение", "ПросроченоВыполнение");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	= "ЗаказыПокупателейПросроченаОплата";
	Дело.ЕстьДела		= ДанныеДел.ЗаказыПокупателейПросроченаОплата > 0;
	Дело.Важное			= Истина;
	Дело.Представление	= НСтр("ru = 'Просрочена оплата'");
	Дело.Количество		= ДанныеДел.ЗаказыПокупателейПросроченаОплата;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("КлючНазначенияИспользования,ТекущиеДела,ПросроченаОплата", "ПросроченаОплата");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	= "ЗаказыПокупателейНаСегодня";
	Дело.ЕстьДела		= ДанныеДел.ЗаказыПокупателейНаСегодня > 0;
	Дело.Важное			= Ложь;
	Дело.Представление	= НСтр("ru = 'На сегодня'");
	Дело.Количество		= ДанныеДел.ЗаказыПокупателейНаСегодня;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("КлючНазначенияИспользования,ТекущиеДела,НаСегодня", "НаСегодня");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	= "ЗаказыПокупателейНеЗавершенные";
	Дело.ЕстьДела		= ДанныеДел.ЗаказыПокупателейНеЗавершенные > 0;
	Дело.Важное			= Ложь;
	Дело.Представление	= НСтр("ru = 'Не завершенные'");
	Дело.Количество		= ДанныеДел.ЗаказыПокупателейНеЗавершенные;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("КлючНазначенияИспользования,ТекущиеДела,НеЗавершенные", "НеЗавершенные");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
КонецПроцедуры

Процедура ЗаполнитьСписокТекущихДелЗаказНаряд(ТекущиеДела)
	
	ГруппаДел	= НСтр("ru = 'Заказ наряды'");
	ИмяФормы	= "Документ.ЗаказПокупателя.Форма.ФормаСпискаЗаказНаряда";
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы")
		Или Не ПравоДоступа("Редактирование", Метаданные.Документы.ЗаказПокупателя)
		Или Не ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ГрафикВыполненияЗаказов)
		Или Не ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ГрафикОплатыЗаказов)
		Или ТекущиеДелаСервер.ДелоОтключено(ГруппаДел) Тогда
		
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА ДокЗаказНаряд.Финиш < &ТекущаяДата
		|					И НЕ ГрафикВыполненияЗаказов.Заказ ЕСТЬ NULL 
		|				ТОГДА ДокЗаказНаряд.Ссылка
		|		КОНЕЦ) КАК ЗаказНарядыПросроченоВыполнение,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА ДокЗаказНаряд.ЗапланироватьОплату
		|					И НЕ ГрафикОплаты.СчетНаОплату ЕСТЬ NULL 
		|					И ГрафикОплаты.Период < НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|				ТОГДА ДокЗаказНаряд.Ссылка
		|		КОНЕЦ) КАК ЗаказНарядыПросроченаОплата,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА ДокЗаказНаряд.Старт <= КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|					И ДокЗаказНаряд.Финиш >= &ТекущаяДата
		|				ТОГДА ДокЗаказНаряд.Ссылка
		|			КОГДА ДокЗаказНаряд.ЗапланироватьОплату
		|					И НЕ ГрафикОплаты.СчетНаОплату ЕСТЬ NULL 
		|					И ГрафикОплаты.Период = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|				ТОГДА ДокЗаказНаряд.Ссылка
		|		КОНЕЦ) КАК ЗаказНарядыНаСегодня,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокЗаказНаряд.Ссылка) КАК ЗаказНарядыНеЗавершенные
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ДокЗаказНаряд
		|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикОплатыЗаказов КАК ГрафикОплаты
		|		ПО ДокЗаказНаряд.Ссылка = ГрафикОплаты.СчетНаОплату
		|			И (ГрафикОплаты.Период <= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ))}
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикВыполненияЗаказов КАК ГрафикВыполненияЗаказов
		|		ПО ДокЗаказНаряд.Ссылка = ГрафикВыполненияЗаказов.Заказ
		|			И (ГрафикВыполненияЗаказов.Период <= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ))
		|ГДЕ
		|	ДокЗаказНаряд.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
		|	И ДокЗаказНаряд.Проведен
		|	И НЕ ДокЗаказНаряд.СостояниеЗаказа = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказНарядов.Завершен)
		|	И ДокЗаказНаряд.Ответственный В(&СотрудникиПользователя)";
	
	ДанныеДел = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	 = "ЗаказНарядыПросроченоВыполнение";
	Дело.ЕстьДела		= ДанныеДел.ЗаказНарядыПросроченоВыполнение > 0;
	Дело.Важное			= Истина;
	Дело.Представление	= НСтр("ru = 'Просрочено выполнение'");
	Дело.Количество		= ДанныеДел.ЗаказНарядыПросроченоВыполнение;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("КлючНазначенияИспользования,ТекущиеДела,ПросроченоВыполнение", "ПросроченоВыполнение");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	= "ЗаказНарядыПросроченаОплата";
	Дело.ЕстьДела		= ДанныеДел.ЗаказНарядыПросроченаОплата > 0;
	Дело.Важное			= Истина;
	Дело.Представление	= НСтр("ru = 'Просрочена оплата'");
	Дело.Количество		= ДанныеДел.ЗаказНарядыПросроченаОплата;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("КлючНазначенияИспользования,ТекущиеДела,ПросроченаОплата", "ПросроченаОплата");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	= "ЗаказНарядыНаСегодня";
	Дело.ЕстьДела		= ДанныеДел.ЗаказНарядыНаСегодня > 0;
	Дело.Важное			= Ложь;
	Дело.Представление	= НСтр("ru = 'На сегодня'");
	Дело.Количество		= ДанныеДел.ЗаказНарядыНаСегодня;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("КлючНазначенияИспользования,ТекущиеДела,НаСегодня", "НаСегодня");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	= "ЗаказНарядыНеЗавершенные";
	Дело.ЕстьДела		= ДанныеДел.ЗаказНарядыНеЗавершенные > 0;
	Дело.Важное			= Ложь;
	Дело.Представление	= НСтр("ru = 'Не завершенные'");
	Дело.Количество		= ДанныеДел.ЗаказНарядыНеЗавершенные;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("КлючНазначенияИспользования,ТекущиеДела,НеЗавершенные", "НеЗавершенные");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсРабочегоПроцесса

Функция РеквизитыНедоступныеДляИсточникаРабочегоПроцесса(ТипДействия = Неопределено) Экспорт
	
	НедоступныеРеквизиты = Новый Массив;
	
	НедоступныеРеквизиты.Добавить("Грузоотправитель");
	НедоступныеРеквизиты.Добавить("Грузополучатель");
	НедоступныеРеквизиты.Добавить("ДатаВходящегоДокумента");
	НедоступныеРеквизиты.Добавить("КонтактноеЛицоПодписант");
	НедоступныеРеквизиты.Добавить("НомерВходящегоДокумента");
	НедоступныеРеквизиты.Добавить("СписокРесурсов");
	НедоступныеРеквизиты.Добавить("СписокНоменклатуры");
	НедоступныеРеквизиты.Добавить("СтруктурнаяЕдиницаРезерв");
	
	Возврат НедоступныеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
	ФорматТолькоДата = "ДЛФ=D";
	ФорматТолькоВремя = "ДФ=Ч:мм";
	
	ДополнительныеПараметры.ФорматыРеквизитов.Вставить("ДатаОтгрузки", ФорматТолькоДата);
	ДополнительныеПараметры.ФорматыРеквизитов.Вставить("ДоговорДатаДоговора", ФорматТолькоДата);
	ДополнительныеПараметры.ФорматыРеквизитов.Вставить("ДоговорСрокДействия", ФорматТолькоДата);
	
	ДополнительныеПараметры.ФорматыРеквизитов.Вставить("ОжидаемаяДатаВручения", ФорматТолькоДата);
	ДополнительныеПараметры.ФорматыРеквизитов.Вставить("ВремяДоставкиС", ФорматТолькоВремя);
	ДополнительныеПараметры.ФорматыРеквизитов.Вставить("ВремяДоставкиПо", ФорматТолькоВремя);
	
	ПриПодготовкеШаблонаСообщенияПоУслугам(Реквизиты);
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	СформироватьПараметрыПоУслугам(Сообщение, ПредметСообщения);
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.//
//
// @skip-warning
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
// @skip-warning
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Первый запуск: заполнение поставляемых шаблонов сообщений.
//
Процедура СоздатьПоставляемыеШаблоныСообщений() Экспорт
	
	ВыбранныеКомандыПечати = Новый Массив;
	
	КомандыПечатиЗаказа = УправлениеПечатью.КомандыПечатиФормы("Документ.ЗаказПокупателя.Форма.ФормаСписка");
	ВыбраннаяКомандаПечатиЗаказПокупателя = КомандыПечатиЗаказа.Найти("ЗаказПокупателя", "Идентификатор");
	Если ВыбраннаяКомандаПечатиЗаказПокупателя <> Неопределено Тогда
		ВыбранныеКомандыПечати.Добавить(ВыбраннаяКомандаПечатиЗаказПокупателя.УникальныйИдентификатор);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		// 1. Шаблон "Ваш заказ принят".
		ДанныеШаблона = ДанныеШаблонаЗаказПринят();
		ПараметрыШаблона = ШаблоныСообщенийКлиентСервер.ОписаниеПараметровШаблона();
		ПараметрыШаблона.Текст = ДанныеШаблона.Текст;
		ПараметрыШаблона.Тема = НСтр("ru='Ваш заказ [ЗаказПокупателя.Номер] принят'");
		ПараметрыШаблона.ТипШаблона = "Письмо";
		ПараметрыШаблона.ПолноеИмяТипаНазначения = "Документ.ЗаказПокупателя";
		ШаблоныСообщенийПереопределяемый.СоздатьШаблонEmail(НаименованиеШаблонаЗаказПринят(), ПараметрыШаблона, ВыбранныеКомандыПечати, ДанныеШаблона.Вложения);
		
		// 2. Шаблон "Ваш заказ оплачен".
		ДанныеШаблона = ДанныеШаблонаЗаказОплачен();
		ПараметрыШаблона = ШаблоныСообщенийКлиентСервер.ОписаниеПараметровШаблона();
		ПараметрыШаблона.Текст = ДанныеШаблона.Текст;
		ПараметрыШаблона.Тема = НСтр("ru='Ваш заказ [ЗаказПокупателя.Номер] оплачен'");
		ПараметрыШаблона.ТипШаблона = "Письмо";
		ПараметрыШаблона.ПолноеИмяТипаНазначения = "Документ.ЗаказПокупателя";
		ШаблоныСообщенийПереопределяемый.СоздатьШаблонEmail(НаименованиеШаблонаЗаказОплачен(), ПараметрыШаблона, ВыбранныеКомандыПечати, ДанныеШаблона.Вложения);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось заполнить справочник ""ШаблоныСообщений"" по умолчанию.
									 |%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

// Шаблоны для услуг по умолчанию
Процедура СоздатьПоставляемыеШаблоныСообщенийПоУслугам() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШаблоныСообщений.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
	|ГДЕ
	|	((ШаблоныСообщений.Наименование = &ПодтверждениеЗаписи
	|			ИЛИ ШаблоныСообщений.Наименование = &НапоминаниеОбУслуге
	|			ИЛИ ШаблоныСообщений.Наименование = &ПодтверждениеОтмены
	|			ИЛИ ШаблоныСообщений.Наименование = &СборОтзывов)
	|				И ШаблоныСообщений.ПолноеИмяТипаПараметраВводаНаОсновании = ""Документ.ЗаказПокупателя"")";
	
	Запрос.УстановитьПараметр("ПодтверждениеЗаписи", НаименованиеШаблонаПодтверждениеЗаписи());
	Запрос.УстановитьПараметр("НапоминаниеОбУслуге", НаименованиеШаблонаНапоминаниеОЗаписи());
	Запрос.УстановитьПараметр("ПодтверждениеОтмены", НаименованиеШаблонаПодтверждениеОтменыЗаписи());
	Запрос.УстановитьПараметр("СборОтзывов",         НаименованиеШаблонаЗапросНаСборОтзыва());
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ШаблоныПодтверждения       = Результат.НайтиСтроки(Новый Структура("Наименование", НаименованиеШаблонаПодтверждениеЗаписи()));
	ШаблоныНапоминания         = Результат.НайтиСтроки(Новый Структура("Наименование", НаименованиеШаблонаНапоминаниеОЗаписи()));
	ШаблоныПодтвержденияОтмены = Результат.НайтиСтроки(Новый Структура("Наименование", НаименованиеШаблонаПодтверждениеОтменыЗаписи()));
	ШаблоныСборОтзывов         = Результат.НайтиСтроки(Новый Структура("Наименование", НаименованиеШаблонаЗапросНаСборОтзыва()));
	
	Если ШаблоныПодтверждения.Количество() = 0 Тогда
		ДанныеШаблона = ДанныеШаблонаПодтверждениеЗаписи();
		ПараметрыШаблона = ШаблоныСообщенийКлиентСервер.ОписаниеПараметровШаблона();
		ПараметрыШаблона.Текст = ДанныеШаблона.Текст;
		ПараметрыШаблона.Тема = НСтр("ru='Информация о записи'");
		ПараметрыШаблона.ТипШаблона = "Письмо";
		ПараметрыШаблона.ПолноеИмяТипаНазначения = "Документ.ЗаказПокупателя";
		ШаблоныСообщенийПереопределяемый.СоздатьШаблонEmail(НаименованиеШаблонаПодтверждениеЗаписи(), ПараметрыШаблона, , ДанныеШаблона.Вложения);
	КонецЕсли;
	
	Если ШаблоныНапоминания.Количество() = 0 Тогда
		ДанныеШаблона = ДанныеШаблонаНапоминаниеОЗаписи();
		ПараметрыШаблона = ШаблоныСообщенийКлиентСервер.ОписаниеПараметровШаблона();
		ПараметрыШаблона.Текст = ДанныеШаблона.Текст;
		ПараметрыШаблона.Тема = НСтр("ru='Информация о записи'");
		ПараметрыШаблона.ТипШаблона = "Письмо";
		ПараметрыШаблона.ПолноеИмяТипаНазначения = "Документ.ЗаказПокупателя";
		ШаблоныСообщенийПереопределяемый.СоздатьШаблонEmail(НаименованиеШаблонаНапоминаниеОЗаписи(), ПараметрыШаблона, , ДанныеШаблона.Вложения);
	КонецЕсли;
	
	Если ШаблоныПодтвержденияОтмены.Количество() = 0 Тогда
		ДанныеШаблона = ДанныеШаблонаПодтверждениеОтменыЗаписи();
		ПараметрыШаблона = ШаблоныСообщенийКлиентСервер.ОписаниеПараметровШаблона();
		ПараметрыШаблона.Текст = ДанныеШаблона.Текст;
		ПараметрыШаблона.Тема = НСтр("ru='Подтверждение отмены записи'");
		ПараметрыШаблона.ТипШаблона = "Письмо";
		ПараметрыШаблона.ПолноеИмяТипаНазначения = "Документ.ЗаказПокупателя";
		ШаблоныСообщенийПереопределяемый.СоздатьШаблонEmail(НаименованиеШаблонаПодтверждениеОтменыЗаписи(), ПараметрыШаблона, , ДанныеШаблона.Вложения);
	КонецЕсли;
	
	Если ШаблоныСборОтзывов.Количество() = 0 Тогда
		ДанныеШаблона = ДанныеШаблонаЗапросНаСборОтзыва();
		ПараметрыШаблона = ШаблоныСообщенийКлиентСервер.ОписаниеПараметровШаблона();
		ПараметрыШаблона.Текст = ДанныеШаблона.Текст;
		ПараметрыШаблона.Тема = НСтр("ru='Оставьте отзыв о визите'");
		ПараметрыШаблона.ТипШаблона = "Письмо";
		ПараметрыШаблона.ПолноеИмяТипаНазначения = "Документ.ЗаказПокупателя";
		ШаблоныСообщенийПереопределяемый.СоздатьШаблонEmail(НаименованиеШаблонаЗапросНаСборОтзыва(), ПараметрыШаблона, , ДанныеШаблона.Вложения);
	КонецЕсли;

КонецПроцедуры

Функция НаименованиеШаблонаЗаказПринят() Экспорт
	
	Возврат НСтр("ru='[Пример] Ваш заказ принят'");
	
КонецФункции

Функция ДанныеШаблонаЗаказПринят()
	
	ТекстШаблона = "<html><head><meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8""></meta><style type=""text/css"">
	|body{margin:0;padding:8px;}
	|p{line-height:1.15;margin:0;white-space:pre-wrap;}
	|ol,ul{margin-top:0;margin-bottom:0;}
	|img{border:none;}
	|li>p{display:inline;}
	|</style></head><body>
	|<p style=""text-align: center;""><img height=""57"" src=""cid:[ИдентификаторКартинки]"" style=""border:none;"" width=""200""></img></p>
	|<p style=""text-align: center;""><span style=""font-family: Arial;font-size: 14pt;font-style: normal;font-weight: normal;text-decoration: none;"">Вы оформили заказ в магазине </span></p>
	|<p><span style=""font-family: Arial;font-size: 11pt;font-style: normal;font-weight: normal;text-decoration: none;"">[ЗаказПокупателя.КонтактноеЛицоНаименование],</span></p>
	|<p><span style=""font-family: Arial;font-size: 11pt;font-style: normal;font-weight: normal;text-decoration: none;"">Ваш заказ №[ЗаказПокупателя.Номер] принят и находится в обработке.</span></p>
	|<p><span style=""font-family: Arial;font-size: 11pt;font-style: normal;font-weight: normal;text-decoration: none;"">Стоимость заказа: [ЗаказПокупателя.СуммаДокумента] [ЗаказПокупателя.ВалютаДокумента]</span></p>
	|<p style=""text-align: left;""><span style=""font-family: Arial;font-size: 11pt;font-style: normal;font-weight: normal;text-align: right;text-decoration: none;"">С уважением, </span><span style=""font-family: Arial;font-size: 11pt;font-style: normal;font-weight: normal;text-decoration: none;"">[ЗаказПокупателя.Ответственный]</span></p>
	|<p style=""line-height: 1.5;text-align: center;""><a href=""http://unf.1c.ru"" style=""line-height: 1.5;"">unf.1c.ru</a><br><span style=""color: #999999;font-family: Calibri Light;font-size: 10pt;font-style: normal;font-weight: normal;text-decoration: none;"">© Дополните имя вашей компании </span><br><span style=""color: #999999;font-family: Calibri Light;font-size: 10pt;font-style: normal;font-weight: normal;text-decoration: none;"">А еще юридический адрес и публичные реквизиты</span></p>
	|</body></html>";
	
	НовоеВложение = ШаблоныСообщенийПереопределяемый.НовыйУникальныйИдентификаторВложенияHTML();
	ТекстШаблона = СтрЗаменить(ТекстШаблона, "cid:[ИдентификаторКартинки]", "cid:%1" + НовоеВложение);
	
	Вложения = Новый Массив;
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("Автор", Неопределено);
	ПараметрыФайла.Вставить("ВладелецФайлов");
	ПараметрыФайла.Вставить("ИмяБезРасширения",   НовоеВложение);
	ПараметрыФайла.Вставить("РасширениеБезТочки", "png");
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	ПараметрыФайла.Вставить("СсылкаНаДвоичныеДанные", ПоместитьВоВременноеХранилище(БиблиотекаКартинок.Логотип1СУправлениеНашейФирмой.ПолучитьДвоичныеДанные()));

	Вложения.Добавить(ПараметрыФайла);
	
	Результат = Новый Структура;
	Результат.Вставить("Текст", ТекстШаблона);
	Результат.Вставить("Вложения", Вложения);
	
	Возврат Результат;
	
КонецФункции

Функция НаименованиеШаблонаЗаказОплачен()
	
	Возврат НСтр("ru='[Пример] Ваш заказ оплачен'");
	
КонецФункции

Функция ДанныеШаблонаЗаказОплачен()
	
	ТекстШаблона = "<html><head><meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8""></meta><style type=""text/css"">
	|body{margin:0;padding:8px;}
	|p{line-height:1.15;margin:0;white-space:pre-wrap;}
	|ol,ul{margin-top:0;margin-bottom:0;}
	|img{border:none;}
	|li>p{display:inline;}
	|</style></head><body>
	|<p style=""text-align: center;""><img height=""57"" src=""cid:[ИдентификаторКартинки]"" style=""border:none;"" width=""200""></img></p>
	|<p style=""text-align: center;""><span style=""font-family: Arial;font-size: 14pt;font-style: normal;font-weight: normal;text-decoration: none;"">Ваш заказ оплачен </span></p>
	|<p><span style=""font-family: Arial;font-size: 11pt;font-style: normal;font-weight: normal;text-decoration: none;"">[ЗаказПокупателя.КонтактноеЛицоНаименование],</span></p>
	|<p><span style=""font-family: Arial;font-size: 11pt;font-style: normal;font-weight: normal;text-decoration: none;"">По заказу №[ЗаказПокупателя.Номер] оформлена </span><span style=""font-family: Arial;font-size: 11pt;font-style: normal;font-weight: bold;text-decoration: none;"">оплата [ЗаказПокупателя.СуммаОплаты] [ЗаказПокупателя.ВалютаДокумента]</span></p>
	|<p><span style=""font-family: Arial;font-size: 11pt;font-style: normal;font-weight: normal;text-decoration: none;"">Стоимость заказа: [ЗаказПокупателя.СуммаДокумента] [ЗаказПокупателя.ВалютаДокумента]</span></p>
	|<p style=""text-align: left;""><span style=""font-family: Arial;font-size: 11pt;font-style: normal;font-weight: normal;text-align: right;text-decoration: none;"">С уважением, </span><span style=""font-family: Arial;font-size: 11pt;font-style: normal;font-weight: normal;text-decoration: none;"">[ЗаказПокупателя.Ответственный]</span></p>
	|<p style=""line-height: 1.5;text-align: center;""><a href=""http://unf.1c.ru"" style=""line-height: 1.5;"">unf.1c.ru</a><br><span style=""color: #999999;font-family: Calibri Light;font-size: 10pt;font-style: normal;font-weight: normal;text-decoration: none;"">© Дополните имя вашей компании </span><br><span style=""color: #999999;font-family: Calibri Light;font-size: 10pt;font-style: normal;font-weight: normal;text-decoration: none;"">А еще юридический адрес и публичные реквизиты</span></p>
	|</body></html>";
	
	НовоеВложение = ШаблоныСообщенийПереопределяемый.НовыйУникальныйИдентификаторВложенияHTML();
	ТекстШаблона = СтрЗаменить(ТекстШаблона, "cid:[ИдентификаторКартинки]", "cid:%1" + НовоеВложение);
	
	Вложения = Новый Массив;
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("Автор", Неопределено);
	ПараметрыФайла.Вставить("ВладелецФайлов");
	ПараметрыФайла.Вставить("ИмяБезРасширения",   НовоеВложение);
	ПараметрыФайла.Вставить("РасширениеБезТочки", "png");
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	ПараметрыФайла.Вставить("СсылкаНаДвоичныеДанные", ПоместитьВоВременноеХранилище(БиблиотекаКартинок.Логотип1СУправлениеНашейФирмой.ПолучитьДвоичныеДанные()));

	Вложения.Добавить(ПараметрыФайла);
	
	Результат = Новый Структура;
	Результат.Вставить("Текст", ТекстШаблона);
	Результат.Вставить("Вложения", Вложения);
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеШаблонаПодтверждениеЗаписи()
	
	ТекстШаблона = "<html><head><meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8""></meta><style type=""text/css"">
	|body{margin:0;padding:8px;}
	|p{line-height:1.15;margin:0;white-space:pre-wrap;}
	|ol,ul{margin-top:0;margin-bottom:0;}
	|img{border:none;}
	|li>p{display:inline;}
	|</style></head><body>
	|<p style=""text-align: center;""><img height=""57"" src=""cid:[ИдентификаторКартинки]"" style=""border:none;"" width=""200""></img></p>
	|<p style=""text-align: center;""><span style=""font-size: 12pt;text-align: center;"">Здравствуйте, [ЗаказПокупателя.Покупатель]!</span></p>
	|<p style=""text-align: center;""><span style=""font-size: 12pt;text-align: center;"">Вы успешно записаны:</span></p>
	|<p style=""text-align: center;""><span style=""font-size: 12pt;"">[ЗаказПокупателя.СписокРесурсовСФотоИУказаниемПериодаРесурса]</span></p>
	|<p style=""text-align: center;""><span style=""font-size: 12pt;text-align: center;"">На услуги:</span></p>
	|<p style=""text-align: center;""><span style=""font-size: 12pt;"">[ЗаказПокупателя.СписокРабот]</span></p>
	|<p style=""text-align: center;""><span style=""font-size: 12pt;"">[ЗаказПокупателя.КнопкаОтменитьЗапись]</span></p>
	|<p style=""line-height: 1.5;text-align: center;""><a href=""http://unf.1c.ru"" style=""line-height: 1.5;"">unf.1c.ru</a><br><span style=""color: #999999;font-family: Calibri Light;font-size: 10pt;font-style: normal;font-weight: normal;text-decoration: none;"">© Дополните имя вашей компании </span><br><span style=""color: #999999;font-family: Calibri Light;font-size: 10pt;font-style: normal;font-weight: normal;text-decoration: none;"">А еще юридический адрес и публичные реквизиты</span></p>
	|</body></html>";
	
	НовоеВложение = ШаблоныСообщенийПереопределяемый.НовыйУникальныйИдентификаторВложенияHTML();
	ТекстШаблона = СтрЗаменить(ТекстШаблона, "cid:[ИдентификаторКартинки]", "cid:%1" + НовоеВложение);
	
	Вложения = Новый Массив;
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("Автор", Неопределено);
	ПараметрыФайла.Вставить("ВладелецФайлов");
	ПараметрыФайла.Вставить("ИмяБезРасширения",   НовоеВложение);
	ПараметрыФайла.Вставить("РасширениеБезТочки", "png");
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	ПараметрыФайла.Вставить("СсылкаНаДвоичныеДанные", ПоместитьВоВременноеХранилище(БиблиотекаКартинок.Логотип1СУправлениеНашейФирмой.ПолучитьДвоичныеДанные()));

	Вложения.Добавить(ПараметрыФайла);
	
	Результат = Новый Структура;
	Результат.Вставить("Текст", ТекстШаблона);
	Результат.Вставить("Вложения", Вложения);
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеШаблонаНапоминаниеОЗаписи()
	
	ТекстШаблона = "<html><head><meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8""></meta><style type=""text/css"">
	|body{margin:0;padding:8px;}
	|p{line-height:1.15;margin:0;white-space:pre-wrap;}
	|ol,ul{margin-top:0;margin-bottom:0;}
	|img{border:none;}
	|li>p{display:inline;}
	|</style></head><body>
	|<p style=""text-align: center;""><img height=""57"" src=""cid:[ИдентификаторКартинки]"" style=""border:none;"" width=""200""></img></p>
	|<p style=""text-align: center;""><span style=""font-size: 12pt;text-align: center;"">Здравствуйте, [ЗаказПокупателя.Покупатель]!</span></p>
	|<p style=""text-align: center;""><span style=""font-size: 12pt;text-align: center;"">Напоминаем Вам о записи через [ЗаказПокупателя.ВремяДоНачалаЗаписи]:</span></p>
	|<p style=""text-align: center;""><span style=""font-size: 12pt;"">[ЗаказПокупателя.СписокРесурсовСФотоИУказаниемПериодаРесурса]</span></p>
	|<p style=""text-align: center;""><span style=""font-size: 12pt;text-align: center;"">На услуги:</span></p>
	|<p style=""text-align: center;""><span style=""font-size: 12pt;"">[ЗаказПокупателя.СписокРабот]</span></p>
	|<p style=""text-align: center;""><span style=""font-size: 12pt;"">[ЗаказПокупателя.КнопкаОтменитьЗапись]</span></p>
	|<p style=""line-height: 1.5;text-align: center;""><a href=""http://unf.1c.ru"" style=""line-height: 1.5;"">unf.1c.ru</a><br><span style=""color: #999999;font-family: Calibri Light;font-size: 10pt;font-style: normal;font-weight: normal;text-decoration: none;"">© Дополните имя вашей компании </span><br><span style=""color: #999999;font-family: Calibri Light;font-size: 10pt;font-style: normal;font-weight: normal;text-decoration: none;"">А еще юридический адрес и публичные реквизиты</span></p>
	|</body></html>";
	
	НовоеВложение = ШаблоныСообщенийПереопределяемый.НовыйУникальныйИдентификаторВложенияHTML();
	ТекстШаблона = СтрЗаменить(ТекстШаблона, "cid:[ИдентификаторКартинки]", "cid:%1" + НовоеВложение);
	
	Вложения = Новый Массив;
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("Автор", Неопределено);
	ПараметрыФайла.Вставить("ВладелецФайлов");
	ПараметрыФайла.Вставить("ИмяБезРасширения",   НовоеВложение);
	ПараметрыФайла.Вставить("РасширениеБезТочки", "png");
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	ПараметрыФайла.Вставить("СсылкаНаДвоичныеДанные", ПоместитьВоВременноеХранилище(БиблиотекаКартинок.Логотип1СУправлениеНашейФирмой.ПолучитьДвоичныеДанные()));

	Вложения.Добавить(ПараметрыФайла);
	
	Результат = Новый Структура;
	Результат.Вставить("Текст", ТекстШаблона);
	Результат.Вставить("Вложения", Вложения);
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеШаблонаПодтверждениеОтменыЗаписи()
	
	ТекстШаблона = "<html><head><meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8""></meta><style type=""text/css"">
	|body{margin:0;padding:8px;}
	|p{line-height:1.15;margin:0;white-space:pre-wrap;}
	|ol,ul{margin-top:0;margin-bottom:0;}
	|img{border:none;}
	|li>p{display:inline;}
	|</style></head><body>
	|<p style=""text-align: center;""><img height=""57"" src=""cid:[ИдентификаторКартинки]"" style=""border:none;"" width=""200""></img></p>
	|<p style=""text-align: center;""><span style=""font-size: 12pt;text-align: center;"">Здравствуйте, [ЗаказПокупателя.Покупатель]!</span></p>
	|<p style=""text-align: center;""><span style=""font-size: 12pt;text-align: center;"">Ваша запись успешно отменена:</span></p>
	|<p style=""text-align: center;""><span style=""font-size: 12pt;"">[ЗаказПокупателя.СписокРабот]</span></p>
	|<p style=""text-align: center;""><span style=""font-size: 12pt;text-align: center;"">Ожидайте звонка менеджера для уточнения возможности перезаписи</span></p>
	|<p style=""line-height: 1.5;text-align: center;""><a href=""http://unf.1c.ru"" style=""line-height: 1.5;"">unf.1c.ru</a><br><span style=""color: #999999;font-family: Calibri Light;font-size: 10pt;font-style: normal;font-weight: normal;text-decoration: none;"">© Дополните имя вашей компании </span><br><span style=""color: #999999;font-family: Calibri Light;font-size: 10pt;font-style: normal;font-weight: normal;text-decoration: none;"">А еще юридический адрес и публичные реквизиты</span></p>
	|</body></html>";
	
	НовоеВложение = ШаблоныСообщенийПереопределяемый.НовыйУникальныйИдентификаторВложенияHTML();
	ТекстШаблона = СтрЗаменить(ТекстШаблона, "cid:[ИдентификаторКартинки]", "cid:%1" + НовоеВложение);
	
	Вложения = Новый Массив;
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("Автор", Неопределено);
	ПараметрыФайла.Вставить("ВладелецФайлов");
	ПараметрыФайла.Вставить("ИмяБезРасширения",   НовоеВложение);
	ПараметрыФайла.Вставить("РасширениеБезТочки", "png");
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	ПараметрыФайла.Вставить("СсылкаНаДвоичныеДанные", ПоместитьВоВременноеХранилище(БиблиотекаКартинок.Логотип1СУправлениеНашейФирмой.ПолучитьДвоичныеДанные()));

	Вложения.Добавить(ПараметрыФайла);
	
	Результат = Новый Структура;
	Результат.Вставить("Текст", ТекстШаблона);
	Результат.Вставить("Вложения", Вложения);
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеШаблонаЗапросНаСборОтзыва()
	
	ТекстШаблона = "<html><head><meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8""></meta><style type=""text/css"">
	|body{margin:0;padding:8px;}
	|p{line-height:1.15;margin:0;white-space:pre-wrap;}
	|ol,ul{margin-top:0;margin-bottom:0;}
	|img{border:none;}
	|li>p{display:inline;}
	|</style></head><body>
	|<p style=""text-align: center;""><img height=""57"" src=""cid:[ИдентификаторКартинки]"" style=""border:none;"" width=""200""></img></p>
	|<p style=""text-align: center;""><span style=""font-size: 12pt;text-align: center;"">Здравствуйте, [ЗаказПокупателя.Покупатель]!</span></p>
	|<p style=""text-align: center;""><span style=""font-size: 12pt;text-align: center;"">Спасибо за то, что выбрали нашу компанию. Надеемся, Вы остались довольны.</span></p>
	|<p style=""text-align: center;""><span style=""font-size: 12pt;text-align: center;"">Вы были записаны на услуги:</span></p>
	|<p style=""text-align: center;""><span style=""font-size: 12pt;text-align: center;"">[ЗаказПокупателя.СписокРабот]</span></p>
	|<p style=""text-align: center;""><span style=""font-size: 12pt;text-align: center;"">Оставьте, пожалуйста, свой отзыв о посещении, перейдя по ссылке:</span></p>
	|<p style=""text-align: center;""><a href=""https://docs.google.com/forms/d/e/1FAIpQLSf9Q93nN3YC9ZIEM-ICk09pJ0k0wvozy-aXUs9-9guLW2ZtUA/viewform?usp=pp_url&amp;entry.59920305=[ЗаказПокупателя.Номер]"">https://docs.google.com/forms/d/e/1FAIpQLSf9Q93nN3YC9ZIEM-ICk09pJ0k0wvozy-aXUs9-9guLW2ZtUA/viewform?usp=pp_url&amp;entry.59920305=[ЗаказПокупателя.Номер]</a></p>
	|<p style=""text-align: center;""><span style=""font-size: 12pt;text-align: center;"">Ваш отзыв поможет нам стать лучше.</span></p>
	|<p style=""line-height: 1.5;text-align: center;""><a href=""http://unf.1c.ru"" style=""line-height: 1.5;"">unf.1c.ru</a><br><span style=""color: #999999;font-family: Calibri Light;font-size: 10pt;font-style: normal;font-weight: normal;text-decoration: none;"">© Дополните имя вашей компании </span><br><span style=""color: #999999;font-family: Calibri Light;font-size: 10pt;font-style: normal;font-weight: normal;text-decoration: none;"">А еще юридический адрес и публичные реквизиты</span></p>
	|</body></html>";
	
	НовоеВложение = ШаблоныСообщенийПереопределяемый.НовыйУникальныйИдентификаторВложенияHTML();
	ТекстШаблона = СтрЗаменить(ТекстШаблона, "cid:[ИдентификаторКартинки]", "cid:%1" + НовоеВложение);
	
	Вложения = Новый Массив;
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("Автор", Неопределено);
	ПараметрыФайла.Вставить("ВладелецФайлов");
	ПараметрыФайла.Вставить("ИмяБезРасширения",   НовоеВложение);
	ПараметрыФайла.Вставить("РасширениеБезТочки", "png");
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	ПараметрыФайла.Вставить("СсылкаНаДвоичныеДанные", ПоместитьВоВременноеХранилище(БиблиотекаКартинок.Логотип1СУправлениеНашейФирмой.ПолучитьДвоичныеДанные()));

	Вложения.Добавить(ПараметрыФайла);
	
	Результат = Новый Структура;
	Результат.Вставить("Текст", ТекстШаблона);
	Результат.Вставить("Вложения", Вложения);
	
	Возврат Результат;
	
КонецФункции

Функция НаименованиеШаблонаПодтверждениеЗаписи() Экспорт
	
	Возврат НСтр("ru='[Пример] Подтверждение записи'");
	
КонецФункции

Функция НаименованиеШаблонаНапоминаниеОЗаписи() Экспорт
	
	Возврат НСтр("ru='[Пример] Напоминание о записи'");
	
КонецФункции

Функция НаименованиеШаблонаПодтверждениеОтменыЗаписи() Экспорт
	
	Возврат НСтр("ru='[Пример] Подтверждение отмены записи'");
	
КонецФункции

Функция НаименованиеШаблонаЗапросНаСборОтзыва() Экспорт
	
	Возврат НСтр("ru='[Пример] Сбор отзыва после записи'");
	
КонецФункции

Процедура ПриПодготовкеШаблонаСообщенияПоУслугам(Реквизиты)
	
	ИспользоватьРесурсы = ПолучитьФункциональнуюОпцию("ПланироватьЗагрузкуРесурсовПредприятияЖурналЗаписи");
	
	Если ИспользоватьРесурсы Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийИндекс = Реквизиты.Количество() - 1;
	
	Пока ТекущийИндекс >= 0 Цикл
		Если ЭтоПараметрСообщенияДляУслуг(Реквизиты[ТекущийИндекс].Имя) Тогда
			Реквизиты.Удалить(ТекущийИндекс);
		КонецЕсли;
		ТекущийИндекс = ТекущийИндекс - 1;
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоПараметрСообщенияДляУслуг(ПараметрСообщения)
	
	Возврат ПараметрСообщения = ИмяПараметраКнопкаОтменитьЗапись()
			ИЛИ ПараметрСообщения = "Событие." + ИмяПараметраСписокРесурсовСУказаниемПериодаРесурса()
			ИЛИ ПараметрСообщения = "Событие." + ИмяПараметраСписокРесурсовСФотоИУказаниемПериодаРесурса()
			ИЛИ ПараметрСообщения = "Событие." + ИмяПараметраСписокРесурсовСФотоИУказаниемДлительностиРесурса()
			ИЛИ ПараметрСообщения = "Событие." + ИмяПараметраСписокРесурсовСУказаниемДлительностиРесурса()
			ИЛИ ПараметрСообщения = "Событие." + ИмяПараметраВремяДоНачалаЗаписи();
			
КонецФункции

Функция ИмяПараметраКнопкаОтменитьЗапись()
	
	Возврат "КнопкаОтменитьЗапись";
	
КонецФункции

Функция ИмяПараметраВремяДоНачалаЗаписи()
	
	Возврат "ВремяДоНачалаЗаписи";
	
КонецФункции

Функция ИмяПараметраСписокРесурсовСУказаниемПериодаРесурса()
	
	Возврат "СписокРесурсовСУказаниемПериодаРесурса";
	
КонецФункции

Функция ИмяПараметраСписокРесурсовСФотоИУказаниемПериодаРесурса()
	
	Возврат "СписокРесурсовСФотоИУказаниемПериодаРесурса";
	
КонецФункции

Функция ИмяПараметраСписокРесурсовСФотоИУказаниемДлительностиРесурса()
	
	Возврат "СписокРесурсовСФотоИУказаниемДлительностиРесурса";
	
КонецФункции

Функция ИмяПараметраСписокРесурсовСУказаниемДлительностиРесурса()
	
	Возврат "СписокРесурсовСУказаниемДлительностиРесурса";
	
КонецФункции

Функция ТаблицаФотографий(Событие)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СобытиеРесурсыПредприятия.РесурсПредприятия КАК РесурсПредприятия,
	|	КлючевыеРесурсы.ФайлКартинки КАК ФайлКартинки
	|ИЗ
	|	Документ.Событие.РесурсыПредприятия КАК СобытиеРесурсыПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|		ПО СобытиеРесурсыПредприятия.РесурсПредприятия = КлючевыеРесурсы.Ссылка
	|ГДЕ
	|	СобытиеРесурсыПредприятия.Ссылка = &Событие";
	
	Запрос.УстановитьПараметр("Событие", Событие);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Процедура СформироватьПараметрыПоУслугам(Сообщение, ПредметСообщения)
	
	Если ЭтоЗаказНаряд(ПредметСообщения) Тогда
		СформироватьПараметрыПоУслугамЗаказНаряд(Сообщение, ПредметСообщения);
	Иначе
		СформироватьПараметрыПоУслугамЗаказПокупателя(Сообщение, ПредметСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПараметрыПоУслугамЗаказНаряд(Сообщение, ПредметСообщения)
	
	Если Сообщение.ЗначенияРеквизитов.Получить("СписокНоменклатуры") <> Неопределено Тогда
		ЗначениеПараметра = ПараметрСообщенияСписокНоменклатурыЗаказНаряд(Сообщение, ПредметСообщения);
		Сообщение.ЗначенияРеквизитов["СписокНоменклатуры"] = ЗначениеПараметра;
	КонецЕсли;
	
	Если Сообщение.ЗначенияРеквизитов.Получить("СписокРабот") <> Неопределено Тогда
		Сообщение.ЗначенияРеквизитов["СписокРабот"] = ПараметрСообщенияСписокУслуг(ПредметСообщения);
	КонецЕсли;
	
	Если Сообщение.ЗначенияРеквизитов.Получить("ВремяДоНачалаЗаписи") <> Неопределено Тогда
		Сообщение.ЗначенияРеквизитов["ВремяДоНачалаЗаписи"] = ПараметрСообщенияВремяДоНачалаЗаписи(Сообщение, ПредметСообщения);
	КонецЕсли;
		
	ФормируемыйПараметр = "";
	
	Если Сообщение.ЗначенияРеквизитов.Получить("СписокРесурсовСФотоИУказаниемПериодаРесурса") <> Неопределено Тогда
		ФормируемыйПараметр = "СписокРесурсовСФотоИУказаниемПериодаРесурса";
		Сообщение.ЗначенияРеквизитов[ФормируемыйПараметр] = СформироватьЗначениеПараметра(ФормируемыйПараметр, ПредметСообщения, Сообщение);
	КонецЕсли;
	
	Если Сообщение.ЗначенияРеквизитов.Получить("СписокРесурсовСУказаниемПериодаРесурса") <> Неопределено Тогда
		ФормируемыйПараметр = "СписокРесурсовСУказаниемПериодаРесурса";
		Сообщение.ЗначенияРеквизитов[ФормируемыйПараметр] = СформироватьЗначениеПараметра(ФормируемыйПараметр, ПредметСообщения, Сообщение);
	КонецЕсли;
	
	Если Сообщение.ЗначенияРеквизитов.Получить("СписокРесурсовСФотоИУказаниемДлительностиРесурса") <> Неопределено Тогда
		ФормируемыйПараметр = "СписокРесурсовСФотоИУказаниемДлительностиРесурса";
		Сообщение.ЗначенияРеквизитов[ФормируемыйПараметр] = СформироватьЗначениеПараметра(ФормируемыйПараметр, ПредметСообщения, Сообщение);
	КонецЕсли;
	
	Если Сообщение.ЗначенияРеквизитов.Получить("СписокРесурсовСУказаниемДлительностиРесурса") <> Неопределено Тогда
		ФормируемыйПараметр = "СписокРесурсовСУказаниемДлительностиРесурса";
		Сообщение.ЗначенияРеквизитов[ФормируемыйПараметр] = СформироватьЗначениеПараметра(ФормируемыйПараметр, ПредметСообщения, Сообщение);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПараметрыПоУслугамЗаказПокупателя(Сообщение, ПредметСообщения)
	
	Если Сообщение.ЗначенияРеквизитов.Получить("СписокНоменклатуры") <> Неопределено Тогда
		ЗначениеПараметра = ПараметрСообщенияСписокНоменклатурыЗаказПокупателя(Сообщение, ПредметСообщения);
		Сообщение.ЗначенияРеквизитов["СписокНоменклатуры"] = ЗначениеПараметра;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьЗначениеПараметра(ФормируемыйПараметр, ПредметСообщения, Сообщение)
	
	ТаблицаДвижений = ПланированиеРесурсовУНФ.ТаблицаДвиженийДокументов(ПредметСообщения);
	ФотографииМастеров = ТаблицаФотографий(ПредметСообщения);
	
	Если Сообщение.ДополнительныеПараметры.Свойство("ДеньНапоминанияПоРесурсам") Тогда
		ПреобразоватьТаблицуДвиженийПоДнюНапоминания(ТаблицаДвижений, Сообщение);
	КонецЕсли;

	СписокРесурсов = Новый Массив;
	МинимальнаяДата = Дата(1,1,1);
	
	Для Каждого Движение Из ТаблицаДвижений Цикл
		
		Если Движение.Период > МинимальнаяДата Тогда
			МинимальнаяДата = Движение.Период;
			СписокРесурсов.Добавить(ПереносСтрокиПоТипуСообщения(Сообщение) + Строка(Формат(Движение.Период,"ДФ=дд.ММ.гг"))+ ПереносСтрокиПоТипуСообщения(Сообщение));
		КонецЕсли;
		
		ДобавитьКартинкуМастера(ФормируемыйПараметр, Движение, СписокРесурсов, ФотографииМастеров, Сообщение);
				
		ИнформацияОРесурсе = Новый Массив;
		ИнформацияОРесурсе.Добавить(Строка(Движение.РесурсПредприятия));
		ИнформацияОРесурсе.Добавить(ИнформацияОВремениИПериоде(ФормируемыйПараметр, Движение, Сообщение));
		
		СписокРесурсов.Добавить(СтрСоединить(ИнформацияОРесурсе, Символы.НПП));
		
	КонецЦикла;
	
	Возврат СтрСоединить(СписокРесурсов, ПереносСтрокиПоТипуСообщения(Сообщение));
	
КонецФункции

Функция ПараметрСообщенияСписокУслуг(ПредметСообщения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяРаботы.Номенклатура КАК Номенклатура
	|ИЗ
	|	Документ.ЗаказПокупателя.Работы КАК ЗаказПокупателяРаботы
	|ГДЕ
	|	ЗаказПокупателяРаботы.Ссылка = &Предмет";
	
	Запрос.УстановитьПараметр("Предмет", ПредметСообщения);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СписокУслуг = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СписокУслуг.Добавить(Строка(Выборка.Номенклатура));
	КонецЦикла;
	
	Возврат СтрСоединить(СписокУслуг, "; ");
	
КонецФункции

Функция ПараметрСообщенияВремяДоНачалаЗаписи(Сообщение, ПредметСообщения)
	
	ТаблицаДвижений = ПланированиеРесурсовУНФ.ТаблицаДвиженийДокументов(ПредметСообщения);
	
	Если Сообщение.ДополнительныеПараметры.Свойство("ДеньНапоминанияПоРесурсам") Тогда
		ПреобразоватьТаблицуДвиженийПоДнюНапоминания(ТаблицаДвижений, Сообщение);
	КонецЕсли;
	
	МаксимальныеГраницы = ПланированиеРесурсовУНФ.МаксимальныеГраницыИнтервала(ТаблицаДвижений, "Старт", "Финиш");
	Если НЕ ЗначениеЗаполнено(МаксимальныеГраницы) Тогда
		Возврат "";
	КонецЕсли;
	
	ВремяДоЗаписи = МаксимальныеГраницы.НачалоИнтервала - ТекущаяДатаСеанса();
	
	Дни    = Цел(ВремяДоЗаписи/3600/24);
	Часы   = Цел((ВремяДоЗаписи - Дни*3600*24)/3600);
	Минуты = Цел((ВремяДоЗаписи- Дни*3600*24 - Часы*3600)/60);
	КомпонентыВремени = Новый Массив;
	
	Если ЗначениеЗаполнено(Дни)Тогда
		КомпонентыВремени.Добавить(Строка(Дни));
		КомпонентыВремени.Добавить("д.");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Часы)Тогда
		КомпонентыВремени.Добавить(Строка(Часы));
		КомпонентыВремени.Добавить("ч.");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Минуты) Тогда
		КомпонентыВремени.Добавить(Строка(Минуты));
		КомпонентыВремени.Добавить("мин.");
	КонецЕсли;
	
	Время = СтрСоединить(КомпонентыВремени, Символы.НПП);
	Возврат Время;
	
КонецФункции

Функция ПараметрСообщенияСписокНоменклатурыЗаказНаряд(Сообщение, ЗаказНаряд)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяРаботы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяРаботы.Характеристика КАК Характеристика,
	|	ЗаказПокупателяРаботы.Количество КАК Количество,
	|	ЗаказПокупателяРаботы.Кратность КАК Кратность,
	|	ЗаказПокупателяРаботы.Коэффициент КАК Коэффициент
	|ИЗ
	|	Документ.ЗаказПокупателя.Работы КАК ЗаказПокупателяРаботы
	|ГДЕ
	|	ЗаказПокупателяРаботы.Ссылка = &ЗаказНаряд";
	Запрос.УстановитьПараметр("ЗаказНаряд", ЗаказНаряд);
	
	РаботыВСтроках = Новый Массив;
	
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	ЕдиницаИзмеренияЧасы = СокрЛП(Справочники.КлассификаторЕдиницИзмерения.ч);
	
	СтрокаРаботы = Запрос.Выполнить().Выбрать();
	Пока СтрокаРаботы.Следующий() Цикл
		ХарактеристикаПредставление = "";
		Если ИспользоватьХарактеристики И ЗначениеЗаполнено(СтрокаРаботы.Характеристика) Тогда
			ХарактеристикаПредставление = СокрЛП(СтрокаРаботы.Характеристика);
		КонецЕсли;
		Количество = СтрокаРаботы.Количество * СтрокаРаботы.Кратность * СтрокаРаботы.Коэффициент;
		
		Если ЗначениеЗаполнено(ХарактеристикаПредставление) Тогда
			РаботаВСтроках = СтрШаблон(
				НСтр("ru='%1 (%2), %3 %4'"),
				СокрЛП(СтрокаРаботы.Номенклатура),
				ХарактеристикаПредставление,
				Количество,
				ЕдиницаИзмеренияЧасы);
		Иначе
			РаботаВСтроках = СтрШаблон(
				НСтр("ru='%1, %2 %3'"),
				СокрЛП(СтрокаРаботы.Номенклатура),
				Количество,
				ЕдиницаИзмеренияЧасы);
		КонецЕсли;
		
		РаботыВСтроках.Добавить(РаботаВСтроках);
	КонецЦикла;
	
	Возврат СтрСоединить(РаботыВСтроках, ";" + ПереносСтрокиПоТипуСообщения(Сообщение, Ложь));
	
КонецФункции


Функция ПараметрСообщенияСписокНоменклатурыЗаказПокупателя(Сообщение, ЗаказПокупателя)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ЗаказПокупателяЗапасы.Количество КАК Количество,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка = &ЗаказПокупателя";
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	
	НоменклатураВСтроках = Новый Массив;
	
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	
	СтрокаНоменклатура = Запрос.Выполнить().Выбрать();
	Пока СтрокаНоменклатура.Следующий() Цикл
		ХарактеристикаПредставление = "";
		Если ИспользоватьХарактеристики И ЗначениеЗаполнено(СтрокаНоменклатура.Характеристика) Тогда
			ХарактеристикаПредставление = СокрЛП(СтрокаНоменклатура.Характеристика);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ХарактеристикаПредставление) Тогда
			РаботаВСтроках = СтрШаблон(
				НСтр("ru='%1 (%2), %3 %4'"),
				СокрЛП(СтрокаНоменклатура.Номенклатура),
				ХарактеристикаПредставление,
				СтрокаНоменклатура.Количество,
				СтрокаНоменклатура.ЕдиницаИзмерения);
		Иначе
			РаботаВСтроках = СтрШаблон(
				НСтр("ru='%1, %2 %3'"),
				СокрЛП(СтрокаНоменклатура.Номенклатура),
				СтрокаНоменклатура.Количество,
				СтрокаНоменклатура.ЕдиницаИзмерения);
		КонецЕсли;
		
		НоменклатураВСтроках.Добавить(РаботаВСтроках);
	КонецЦикла;
	
	Возврат СтрСоединить(НоменклатураВСтроках, ";" + ПереносСтрокиПоТипуСообщения(Сообщение, Ложь));
	
КонецФункции

Процедура ПреобразоватьТаблицуДвиженийПоДнюНапоминания(ТаблицаДвижений, Сообщение)
	
	ТекущийИндекс = ТаблицаДвижений.Количество() - 1;
	
	Пока ТекущийИндекс >= 0 Цикл
		Если ТаблицаДвижений[ТекущийИндекс].Старт < НачалоДня(Сообщение.ДополнительныеПараметры.ДеньНапоминанияПоРесурсам) 
			И ТаблицаДвижений[ТекущийИндекс].Финиш > КонецДня(Сообщение.ДополнительныеПараметры.ДеньНапоминанияПоРесурсам) Тогда
			ТаблицаДвижений.Удалить(ТекущийИндекс);
		КонецЕсли;
		
		ТекущийИндекс = ТекущийИндекс -1;
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьКартинкуМастера(ФормируемыйПараметр, Движение, СписокРесурсов, ФотографииМастеров, Сообщение)
	
	Если Сообщение.ДополнительныеПараметры.ВидСообщения = "СообщениеSMS" Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ ФормируемыйПараметр = "СписокРесурсовСФотоИУказаниемПериодаРесурса"
		ИЛИ ФормируемыйПараметр = "СписокРесурсовСФотоИУказаниемДлительностиРесурса" Тогда
		Возврат;
	КонецЕсли;
	
	КартинкаМастера = ФотографииМастеров.НайтиСтроки(Новый Структура("РесурсПредприятия", Движение.РесурсПредприятия));
	Если КартинкаМастера.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстКартинки = "<img height=""90"" src=""cid:[ИдентификаторКартинки]"" style=""border:none;"" width=""90""></img><br/>";
	НовоеВложение = ШаблоныСообщенийПереопределяемый.НовыйУникальныйИдентификаторВложенияHTML();
	
	ТекстКартинки = СтрЗаменить(ТекстКартинки, "cid:[ИдентификаторКартинки]", "cid:" + НовоеВложение);
	Если ЗначениеЗаполнено(КартинкаМастера[0].ФайлКартинки) Тогда
		ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(КартинкаМастера[0].ФайлКартинки, Ложь);
		СсылкаНаДвоичныеДанные = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
		Сообщение.Вложения.Вставить(НовоеВложение, СсылкаНаДвоичныеДанные);
		СписокРесурсов.Добавить(ТекстКартинки);
	КонецЕсли;
	
КонецПроцедуры

Функция ИнформацияОВремениИПериоде(ФормируемыйПараметр, Движение, Сообщение)
	
	Время = "";
	
	Если ФормируемыйПараметр = "СписокРесурсовСФотоИУказаниемПериодаРесурса"
		ИЛИ ФормируемыйПараметр ="СписокРесурсовСУказаниемПериодаРесурса" Тогда
		
		Время = "c " + Строка(Формат(Движение.Старт,"ДФ=ЧЧ:мм")) + " до " +  Строка(Формат(Движение.Финиш, "ДФ=ЧЧ:мм")) + ПереносСтрокиПоТипуСообщения(Сообщение);
		Возврат Строка(Время);
		
	КонецЕсли;
					
	КомпонентыВремени = Новый Массив;
	
	Длительность = Движение.Финиш - Движение.Старт;
	Часы = Цел(Длительность/3600);
	Минуты = Цел((Длительность-Часы*3600)/60);
	
	КомпонентыВремени.Добавить("c");
	КомпонентыВремени.Добавить(Строка(Формат(Движение.Старт,"ДФ=ЧЧ:мм")));
	
	КомпонентыВремени.Добавить("(");
	Если ЗначениеЗаполнено(Часы)Тогда
		КомпонентыВремени.Добавить(Строка(Часы));
		КомпонентыВремени.Добавить("ч.");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Минуты) Тогда
		КомпонентыВремени.Добавить(Строка(Минуты));
		КомпонентыВремени.Добавить("мин.");
	КонецЕсли;
	КомпонентыВремени.Добавить(")");
	КомпонентыВремени.Добавить(ПереносСтрокиПоТипуСообщения(Сообщение));
	
	Время = СтрСоединить(КомпонентыВремени, Символы.НПП);
	
	Возврат Строка(Время);
	
КонецФункции

Функция ПереносСтрокиПоТипуСообщения(Сообщение, ДляСМСОднойСтрокой = Истина)
	
	Если Сообщение.ДополнительныеПараметры.ВидСообщения = "СообщениеSMS" Тогда
		Если ДляСМСОднойСтрокой Тогда
			Возврат Символы.НПП;
		Иначе
			Возврат Символы.ПС;
		КонецЕсли;
	КонецЕсли;
	
	Возврат "<br/>";
	
КонецФункции

#КонецОбласти

#Область АссистентУправления

#Область АссистентУправления_Интеграция

Процедура ПриОпределенииТиповПредметовСобытий(Предметы) Экспорт
	
	Предметы.Вставить("ЗаказПокупателя", НСтр("ru='Заказ покупателя'"));
	Предметы.Вставить("ЗаказНаряд", НСтр("ru='Заказ-наряд'"));
	
КонецПроцедуры

Процедура ПриОпределенииСобытий(События, Предмет) Экспорт
	
	Если Предмет = "ЗаказПокупателя" Тогда
		
		НовоеСобытие = События.Добавить();
		НовоеСобытие.Предмет       = "ЗаказПокупателя";
		НовоеСобытие.Тип           = "ПриЗаписи";
		НовоеСобытие.Идентификатор = "ИзменениеСостоянияЗаказаПокупателя";
		НовоеСобытие.Представление = НСтр("ru='Изменено состояние Заказа покупателя'");
		
		// Оформление отгрузки.
		НовоеСобытие = События.Добавить();
		НовоеСобытие.Предмет       = "ЗаказПокупателя";
		НовоеСобытие.Тип           = "ПриЗаписи";
		НовоеСобытие.Идентификатор = "ЧастичнаяОтгрузкаПоступила";
		НовоеСобытие.Представление = НСтр("ru='Заказ частично отгружен'");
		
		НовоеСобытие = События.Добавить();
		НовоеСобытие.Предмет       = "ЗаказПокупателя";
		НовоеСобытие.Тип           = "ПриЗаписи";
		НовоеСобытие.Идентификатор = "ПолнаяОтгрузкаПоступила";
		НовоеСобытие.Представление = НСтр("ru='Заказ полностью отгружен'");
		
		НовоеСобытие = События.Добавить();
		НовоеСобытие.Предмет       = "ЗаказПокупателя";
		НовоеСобытие.Тип           = "ПриЗаписи";
		НовоеСобытие.Идентификатор = "ЧастичнаяОтгрузкаОтмена";
		НовоеСобытие.Представление = НСтр("ru='Частичная отгрузка отменена'");
		
		НовоеСобытие = События.Добавить();
		НовоеСобытие.Предмет       = "ЗаказПокупателя";
		НовоеСобытие.Тип           = "ПриЗаписи";
		НовоеСобытие.Идентификатор = "ПолнаяОтгрузкаОтмена";
		НовоеСобытие.Представление = НСтр("ru='Полная отгрузка отменена'");
		
		// Оформление оплаты.
		НовоеСобытие = События.Добавить();
		НовоеСобытие.Предмет       = "ЗаказПокупателя";
		НовоеСобытие.Тип           = "ПриЗаписи";
		НовоеСобытие.Идентификатор = "ЧастичнаяОплатаПоступила";
		НовоеСобытие.Представление = НСтр("ru='Заказ частично оплачен'");
		
		НовоеСобытие = События.Добавить();
		НовоеСобытие.Предмет       = "ЗаказПокупателя";
		НовоеСобытие.Тип           = "ПриЗаписи";
		НовоеСобытие.Идентификатор = "ПолнаяОплатаПоступила";
		НовоеСобытие.Представление = НСтр("ru='Заказ полностью оплачен'");
		
		НовоеСобытие = События.Добавить();
		НовоеСобытие.Предмет       = "ЗаказПокупателя";
		НовоеСобытие.Тип           = "ПриЗаписи";
		НовоеСобытие.Идентификатор = "ЧастичнаяОплатаОтмена";
		НовоеСобытие.Представление = НСтр("ru='Частичная оплата отменена'");
		
		НовоеСобытие = События.Добавить();
		НовоеСобытие.Предмет       = "ЗаказПокупателя";
		НовоеСобытие.Тип           = "ПриЗаписи";
		НовоеСобытие.Идентификатор = "ПолнаяОплатаОтмена";
		НовоеСобытие.Представление = НСтр("ru='Полная оплата отменена'");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОпределенииДействий(Действия) Экспорт
	
	ТипыСостояний = Новый Массив;
	ТипыСостояний.Добавить(Тип("СправочникСсылка.СостоянияЗаказовПокупателей"));
	ТипыСостояний.Добавить(Тип("СправочникСсылка.СостоянияЗаказНарядов"));
	ТипСостояниеЗаказаЗаказНаряда = Новый ОписаниеТипов(ТипыСостояний);
	
	// 1.
	НовоеДействие = Действия.Добавить();
	НовоеДействие.Предмет       = "ЗаказПокупателя";
	НовоеДействие.Идентификатор = "ИзменитьСостояние";
	НовоеДействие.Представление = НСтр("ru='Изменить состояние'");
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "СостояниеЗаказа";
	НовоеПоле.Представление = НСтр("ru='Новое состояние'");
	НовоеПоле.ОписаниеТипов = ТипСостояниеЗаказаЗаказНаряда;
	НовоеПоле.ОбязательноеЗаполнение = Истина;
	НовоеПоле.ВариантЗаполнения = "Указанный";
	
	// 2.
	НовоеДействие = Действия.Добавить();
	НовоеДействие.Предмет       = "ЗаказПокупателя";
	НовоеДействие.Идентификатор = "ОповеститьОтсутствиеОтгрузкиОплаты";
	НовоеДействие.Представление = НСтр("ru='Проверить, что заказ отгружен/оплачен в определенном состоянии'");
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "СостояниеЗаказа";
	НовоеПоле.Представление = НСтр("ru='Проверяемое состояние'");
	НовоеПоле.ОписаниеТипов = ТипСостояниеЗаказаЗаказНаряда;
	НовоеПоле.ОбязательноеЗаполнение = Ложь;
	НовоеПоле.ВариантЗаполнения = "Указанный";
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "СтатусОтгрузки";
	НовоеПоле.Представление = НСтр("ru='Статус отгрузки заказа'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("ПеречислениеСсылка.СтатусОтгрузки");
	НовоеПоле.ОбязательноеЗаполнение = Ложь;
	НовоеПоле.ВариантЗаполнения = "Указанный";
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "СтатусОплаты";
	НовоеПоле.Представление = НСтр("ru='Статус оплаты заказа'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("ПеречислениеСсылка.СтатусОплаты");
	НовоеПоле.ОбязательноеЗаполнение = Ложь;
	НовоеПоле.ВариантЗаполнения = "Указанный";
	
	// 3.
	НовоеДействие = Действия.Добавить();
	НовоеДействие.Предмет       = "ЗаказПокупателя";
	НовоеДействие.Идентификатор = "ОповеститьОформлениеОтгрузкиОплаты";
	НовоеДействие.Представление = НСтр("ru='Оповестить об оформлении отгрузки/оплаты'");
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "СтатусОтгрузки";
	НовоеПоле.Представление = НСтр("ru='Статус отгрузки заказа'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("ПеречислениеСсылка.СтатусОтгрузки");
	НовоеПоле.ОбязательноеЗаполнение = Ложь;
	НовоеПоле.ВариантЗаполнения = "Указанный";
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "СтатусОплаты";
	НовоеПоле.Представление = НСтр("ru='Статус оплаты заказа'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("ПеречислениеСсылка.СтатусОплаты");
	НовоеПоле.ОбязательноеЗаполнение = Ложь;
	НовоеПоле.ВариантЗаполнения = "Указанный";
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "ПроцентОплаты";
	НовоеПоле.Представление = НСтр("ru='Процент оплаты заказа'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("ПеречислениеСсылка.СтатусОплаты");
	НовоеПоле.ОбязательноеЗаполнение = Ложь;
	НовоеПоле.ВариантЗаполнения = "Указанный";
	
КонецПроцедуры

Процедура ПриОпределенииПолучателейСообщения(Получатели) Экспорт
	
	Получатель = Получатели.Добавить();
	Получатель.Путь          = "Контрагент";
	Получатель.Представление = НСтр("ru='Покупатель'");
	Получатель.Тип           = Тип("СправочникСсылка.Контрагенты");
	
	Получатель = Получатели.Добавить();
	Получатель.Идентификатор = "Контрагент.КонтактноеЛицо";
	Получатель.Путь          = "Ссылка.Контрагент.КонтактноеЛицо";
	Получатель.Представление = НСтр("ru='Основной контакт покупателя'");
	Получатель.Тип = Тип("СправочникСсылка.КонтактныеЛица");
	
	Получатель = Получатели.Добавить();
	Получатель.Идентификатор = "Контрагент.КонтактноеЛицоПодписант";
	Получатель.Путь          = "Ссылка.Контрагент.КонтактноеЛицоПодписант";
	Получатель.Представление = НСтр("ru='Подписант покупателя'");
	Получатель.Тип           = Тип("СправочникСсылка.КонтактныеЛица");
	
КонецПроцедуры

Процедура ПриОпределенииКонтактовПолучателяПредметаСообщения(Получатель, Предмет, ТипПредмета, ОписаниеПолучателя) Экспорт
	
	Если ОписаниеПолучателя.ИдентификаторПолучателяПредметаСообщения = "КонтактноеЛицо" Тогда
		ДанныеПолучателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Предмет, "КонтактноеЛицо,ПочтаПолучателя,КонтактныйТелефон,ЗапаснойТелефон");
		Получатель.Контакт = ДанныеПолучателя.КонтактноеЛицо;
		Если ОписаниеПолучателя.ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			Получатель.ЗначениеКИ = ДанныеПолучателя.ПочтаПолучателя;
		ИначеЕсли ОписаниеПолучателя.ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			Получатель.ЗначениеКИ = ДанныеПолучателя.КонтактныйТелефон + "; " + ДанныеПолучателя.ЗапаснойТелефон;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ВыполненыУсловия(Предмет, Условия) Экспорт
	
	ДанныеЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Предмет,
		"СостояниеЗаказа,ВариантЗавершения,ВидЗаказа,ВидОперации");
	
	ПеремещаемоеУсловие = Неопределено;
	ПеремещаемоеУсловиеИндекс = Неопределено;
	Для Индекс = 0 По Условия.ВГраница() Цикл
		Если Условия[Индекс].Параметр = "ВидЗаказа" Тогда
			ПеремещаемоеУсловие = Условия[Индекс];
			ПеремещаемоеУсловиеИндекс = Индекс;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПеремещаемоеУсловие <> Неопределено Тогда
		Условия.Удалить(ПеремещаемоеУсловиеИндекс);
		Условия.Вставить(0, ПеремещаемоеУсловие);
	КонецЕсли;
	
	Для каждого Условие Из Условия Цикл
		
		Если Условие.Параметр = "СтатусОтгрузки" Тогда
			Если НЕ АссистентУправления.ВыполненоУсловиеСравнения(Документы.ЗаказПокупателя.СтатусОтгрузки(Предмет), Условие.ВидСравнения, Условие.Значение) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Условие.Параметр = "ПроцентОплаты" Тогда
			Если НЕ АссистентУправления.ВыполненоУсловиеСравнения(Документы.ЗаказПокупателя.ПроцентОплаты(Предмет), Условие.ВидСравнения, Условие.Значение) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Условие.Параметр = "ВидОперации" ИЛИ Условие.Параметр = "ВидЗаказа" Тогда
			Если НЕ АссистентУправления.ВыполненоУсловиеСравнения(ДанныеЗаказа[Условие.Параметр], Условие.ВидСравнения, Условие.Значение) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Условие.Параметр = "СостояниеЗаказа" Тогда
			
			ВыполненоУсловиеСравненияСостояний = Неопределено;
			
			Если Условие.ВидСравнения = Перечисления.ВидСравненияЗначений.Равно Тогда
				ВыполненоУсловиеСравненияСостояний = АссистентУправления.ВыполненоУсловиеСравнения(ДанныеЗаказа[Условие.Параметр], Условие.ВидСравнения, Условие.Значение);
			КонецЕсли;
			
			РазницаСравнения = СостоянияЗаказов.СравнитьСостояния(ДанныеЗаказа.СостояниеЗаказа, Условие.Значение, ДанныеЗаказа.ВидЗаказа);
			Если Условие.ВидСравнения = Перечисления.ВидСравненияЗначений.Больше Тогда
				ВыполненоУсловиеСравненияСостояний = РазницаСравнения > 0;
			ИначеЕсли Условие.ВидСравнения = Перечисления.ВидСравненияЗначений.БольшеИлиРавно Тогда
				ВыполненоУсловиеСравненияСостояний = РазницаСравнения >= 0;
			ИначеЕсли Условие.ВидСравнения = Перечисления.ВидСравненияЗначений.Меньше Тогда
				ВыполненоУсловиеСравненияСостояний = РазницаСравнения < 0;
			ИначеЕсли Условие.ВидСравнения = Перечисления.ВидСравненияЗначений.МеньшеИлиРавно Тогда
				ВыполненоУсловиеСравненияСостояний = РазницаСравнения <= 0;
			КонецЕсли;
			
			Если ВыполненоУсловиеСравненияСостояний = Неопределено Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru='Не определена реализация операции сравнения состояний заказа ""%1""'"), Условие.ВидСравнения);
			КонецЕсли;
			
			Если НЕ ВыполненоУсловиеСравненияСостояний Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Условие.Параметр = "ВариантЗавершения" Тогда
			УсловиеСостояниеЗаказа = Неопределено;
			Для каждого Эл Из Условия Цикл
				Если Эл.Параметр = "СостояниеЗаказа" Тогда
					УсловиеСостояниеЗаказа = Эл.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если УсловиеСостояниеЗаказа = Неопределено ИЛИ НЕ СостоянияЗаказов.ЭтоСостояниеЗавершен(УсловиеСостояниеЗаказа) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ АссистентУправления.ВыполненоУсловиеСравнения(ДанныеЗаказа.ВариантЗавершения, Условие.ВидСравнения, Условие.Значение) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ПередОбработкойСобытия(Предмет, Событие, Действие, ЗначенияЗаполнения, ДополнительныеПараметры, Результат) Экспорт
	
	ДополнительныеПараметрыСобытия = Неопределено;
	ДополнительныеПараметры.Свойство("ДополнительныеПараметрыСобытия", ДополнительныеПараметрыСобытия);
	
	Если Действие = "СоздатьОтправитьЭлектронноеПисьмо" ИЛИ Действие = "СоздатьОтправитьSMS" Тогда
		
		ЗначенияЗаполнения.Вставить("Ответственный", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Ответственный"));
		
		ЗаказПерешелНазадПоВоронкеПродаж = СостоянияЗаказов.ЗаказПерешелНазадПоВоронкеПродаж(Предмет, ДополнительныеПараметрыСобытия);
		Если ЗаказПерешелНазадПоВоронкеПродаж = Истина И ЗначенияЗаполнения.Свойство("ШаблонСообщения") Тогда
			ДанныеСообщения = АссистентУправления.ПредложениеВыполнитьЗадачуИнтерактивно(Предмет, Событие, Действие, ЗначенияЗаполнения, ДополнительныеПараметры);
			ДанныеСообщения.Текст = СтрШаблон(НСтр("ru='Заказ вернулся в состояние %1. Отправить письмо %2?'"),
				СостоянияЗаказов.СостояниеЗаказа(Предмет), ПолучитьНавигационнуюСсылку(ЗначенияЗаполнения.ШаблонСообщения));
			Результат.ДанныеСообщений.Добавить(ДанныеСообщения);
			Результат.Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьДействие(Предмет, Действие, ЗначенияЗаполнения, ДополнительныеПараметры, Результат) Экспорт
	
	Если ЭтоОтмененныйЗаказ(Предмет) Тогда
		Результат.ДействиеВыполнено = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Действие.Идентификатор = "ИзменитьСостояние" Тогда
		
		АссистентУправленияИзменитьСостояние(Предмет, ЗначенияЗаполнения.СостояниеЗаказа, ДополнительныеПараметры, Результат);
		
	ИначеЕсли Действие.Идентификатор = "ОповеститьОтсутствиеОтгрузкиОплаты" Тогда
		
		АссистентУправленияОповеститьОтсутствиеОтгрузкиОплаты(Предмет, ЗначенияЗаполнения, ДополнительныеПараметры, Результат);
		
	ИначеЕсли Действие.Идентификатор = "ОповеститьОформлениеОтгрузкиОплаты" Тогда
		
		АссистентУправленияОповеститьОформлениеОтгрузкиОплаты(Предмет, ЗначенияЗаполнения, ДополнительныеПараметры, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеОбработкиСобытия(Предмет, Событие, Действие, ЗначенияЗаполнения, ДополнительныеПараметры, Результат) Экспорт
	
	ТекстПричины = "";
	ТекстДействия = "";
	
	Если Событие = "ЧастичнаяОтгрузкаПоступила"
		ИЛИ Событие = "ПолнаяОтгрузкаПоступила"
		ИЛИ Событие = "ЧастичнаяОплатаПоступила"
		ИЛИ Событие = "ПолнаяОплатаПоступила" Тогда
		
		ТекстПричины = ТекстСообщенияОформлениеОтгрузкиОплаты(Предмет, Событие, ДополнительныеПараметры);
		
	КонецЕсли;
	
	Если Результат.ДействиеВыполнено Тогда
		
		Если Действие = "ИзменитьСостояние" Тогда
			
			НовоеСостояние = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "СостояниеЗаказа");
			Если ЗначениеЗаполнено(ТекстПричины) Тогда
				ТекстДействия = СтрШаблон(НСтр("ru=', перевела его в состояние %1'"), ПолучитьНавигационнуюСсылку(НовоеСостояние));
			Иначе
				ТекстДействия = СтрШаблон(НСтр("ru='Перевела заказ в состояние %1'"), ПолучитьНавигационнуюСсылку(НовоеСостояние));
			КонецЕсли;
			
		ИначеЕсли Действие = "СоздатьОтправитьЭлектронноеПисьмо" ИЛИ Действие = "СоздатьОтправитьSMS" Тогда
			
			Если Результат.Свойство("Документ") Тогда
				ТекстДействия = СтрШаблон(НСтр("ru='Отправила %1'"), ПолучитьНавигационнуюСсылку(Результат.Документ));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПричины) ИЛИ ЗначениеЗаполнено(ТекстДействия) Тогда
		ДанныеСообщения = ОбсужденияУНФ.НовыйДанныеСообщения();
		ДанныеСообщения.Текст = ТекстПричины + ТекстДействия;
		Результат.ДанныеСообщений.Добавить(ДанныеСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АссистентУправления_Реализация

Процедура АссистентУправленияИзменитьСостояние(Заказ, НовоеСостояние, ДополнительныеПараметры, Результат) Экспорт
	
	Если ДатыЗапретаИзменения.ИзменениеЗапрещено("Документ.ЗаказПокупателя", Заказ) Тогда
		Результат.ДействиеВыполнено = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НовоеСостояние) = Тип("Структура") Тогда
		СостояниеЗаказа = НовоеСостояние.СостояниеЗаказа;
		ВариантЗавершения = НовоеСостояние.ВариантЗавершения;
	Иначе
		СостояниеЗаказа = НовоеСостояние;
		ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Успешно;
	КонецЕсли;
	
	ДанныеЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказ, "СостояниеЗаказа,ВидЗаказа,ВариантЗавершения");
	
	Если СостоянияЗаказов.СравнитьСостояния(ДанныеЗаказа.СостояниеЗаказа, СостояниеЗаказа, ДанныеЗаказа.ВидЗаказа) >= 0
		И (ВариантЗавершения = Неопределено ИЛИ ДанныеЗаказа.ВариантЗавершения = ВариантЗавершения) Тогда
		Результат.ДействиеВыполнено = Ложь;
		Возврат;
	КонецЕсли;
	
	Объект = Заказ.ПолучитьОбъект();
	Объект.Заблокировать();
	
	Объект.СостояниеЗаказа = СостояниеЗаказа;
	Если СостоянияЗаказов.ЭтоСостояниеЗавершен(Объект.СостояниеЗаказа) Тогда
		Объект.ВариантЗавершения = ВариантЗавершения;
	КонецЕсли;
	Объект.ДополнительныеСвойства.Вставить("ЭтоЗаписьАссистентом", Истина);
	Объект.Записать(Объект.РежимЗаписиПриСменеСостояния());
	
КонецПроцедуры

Процедура АссистентУправленияОповеститьОтсутствиеОтгрузкиОплаты(Заказ, ЗначенияЗаполнения, ДополнительныеПараметры, Результат)
	
	ДанныеЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказ, "СостояниеЗаказа,ВидЗаказа,ВидОперации");
	
	ЭтоЗаказНаряд = ДанныеЗаказа.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд;
	
	СостояниеКПереводу = Неопределено;
	ЗаказВСостоянииНижеПроверяемого = Неопределено;
	
	Если ЗначенияЗаполнения.Свойство("СостояниеЗаказа") Тогда
		СостояниеТекущее = ДанныеЗаказа.СостояниеЗаказа;
		СостояниеПроверяемое = ЗначенияЗаполнения.СостояниеЗаказа;
		
		ЗаказВСостоянииНижеПроверяемого = СостоянияЗаказов.СравнитьСостояния(СостояниеТекущее, СостояниеПроверяемое, ДанныеЗаказа.ВидЗаказа) < 0;
		
		Если НЕ ЗаказВСостоянииНижеПроверяемого Тогда
			СостояниеКПереводу = СостоянияЗаказов.ПолучитьСостояниеЗаказаПередЗавершением(Заказ, СостояниеПроверяемое);
		КонецЕсли;
	КонецЕсли;
	
	ТекстСообщения = Неопределено;
	ДанныеСообщения = Новый Структура;
	ДействияСообщения = Неопределено;
	
	Если ДополнительныеПараметры.Событие = "ЧастичнаяОтгрузкаОтмена" ИЛИ ДополнительныеПараметры.Событие = "ПолнаяОтгрузкаОтмена" Тогда
		
		Если СостояниеКПереводу = Неопределено Тогда
			Если ЭтоЗаказНаряд Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru='Отменили выполнение заказа'"));
			Иначе
				ТекстСообщения = СтрШаблон(НСтр("ru='Отменили отгрузку заказа'"));
			КонецЕсли;
		Иначе
			Если ЭтоЗаказНаряд Тогда
				ТекстСообщения = СтрШаблон(
					НСтр("ru='Отменили выполнение заказа. Вернуть его в состояние %1?'"),
					ПолучитьНавигационнуюСсылку(СостояниеКПереводу));
			Иначе
				ТекстСообщения = СтрШаблон(
					НСтр("ru='Отменили отгрузку заказа. Вернуть его в состояние %1?'"),
					ПолучитьНавигационнуюСсылку(СостояниеКПереводу));
			КонецЕсли;
			
			ДанныеСообщения.Вставить("Действие", "ИзменитьСостояние");
			ДанныеСообщения.Вставить("СостояниеЗаказа", СостояниеКПереводу);
			
			ДействияСообщения = Новый СписокЗначений;
			ДействияСообщения.Добавить(АссистентУправленияКлиентСервер.КодДействияСообщенияВыполнитьДействие(), НСтр("ru='Да'"));
			ДействияСообщения.Добавить(АссистентУправленияКлиентСервер.КодДействияСообщенияОтмена(), НСтр("ru='Нет'"));
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры.Событие = "ЧастичнаяОплатаОтмена" ИЛИ ДополнительныеПараметры.Событие = "ПолнаяОплатаОтмена" Тогда
		
		Если СостояниеКПереводу = Неопределено Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru='Отменили оплату заказа'"));
		Иначе
			ТекстСообщения = СтрШаблон(
				НСтр("ru='Отменили оплату заказа. Вернуть его в состояние %1?'"),
				ПолучитьНавигационнуюСсылку(СостояниеКПереводу));
			
			ДанныеСообщения.Вставить("Действие", "ИзменитьСостояние");
			ДанныеСообщения.Вставить("СостояниеЗаказа", СостояниеКПереводу);
			
			ДействияСообщения = Новый СписокЗначений;
			ДействияСообщения.Добавить(АссистентУправленияКлиентСервер.КодДействияСообщенияВыполнитьДействие(), НСтр("ru='Да'"));
			ДействияСообщения.Добавить(АссистентУправленияКлиентСервер.КодДействияСообщенияОтмена(), НСтр("ru='Нет'"));
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры.Событие = "ИзменениеСостоянияЗаказаПокупателя" Тогда
		
		Если ЗаказВСостоянииНижеПроверяемого = Ложь Тогда
			
			ВыполненоУсловиеСтатусОтгрузки = Истина;
			ВыполненоУсловиеСтатусОплаты  = Истина;
			
			Если ЗначенияЗаполнения.Свойство("СтатусОтгрузки") И ЗначениеЗаполнено(ЗначенияЗаполнения.СтатусОтгрузки) Тогда
				ВыполненоУсловиеСтатусОтгрузки = Перечисления.СтатусОтгрузки.Сравнить(СтатусОтгрузки(Заказ), ЗначенияЗаполнения.СтатусОтгрузки) >= 0;
			КонецЕсли;
			
			Если ЗначенияЗаполнения.Свойство("СтатусОплаты") И ЗначениеЗаполнено(ЗначенияЗаполнения.СтатусОплаты) Тогда
				ВыполненоУсловиеСтатусОплаты = Перечисления.СтатусОплаты.Сравнить(СтатусОплаты(Заказ), ЗначенияЗаполнения.СтатусОплаты) >= 0;
			КонецЕсли;
			
			Если НЕ ВыполненоУсловиеСтатусОтгрузки И НЕ ВыполненоУсловиеСтатусОплаты Тогда
				Если ЭтоЗаказНаряд Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru='Заказ в состоянии %1, а он еще не выполнен и не оплачен'"), ПолучитьНавигационнуюСсылку(СостояниеТекущее));
				Иначе
					ТекстСообщения = СтрШаблон(НСтр("ru='Заказ в состоянии %1, а он еще не отгружен и не оплачен'"), ПолучитьНавигационнуюСсылку(СостояниеТекущее));
				КонецЕсли;
			ИначеЕсли НЕ ВыполненоУсловиеСтатусОтгрузки Тогда
				Если ЭтоЗаказНаряд Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru='Заказ в состоянии %1, а он еще не выполнен'"), ПолучитьНавигационнуюСсылку(СостояниеТекущее));
				Иначе
					ТекстСообщения = СтрШаблон(НСтр("ru='Заказ в состоянии %1, а он еще не отгружен'"), ПолучитьНавигационнуюСсылку(СостояниеТекущее));
				КонецЕсли;
			ИначеЕсли НЕ ВыполненоУсловиеСтатусОплаты Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru='Заказ в состоянии %1, а он еще не оплачен'"), ПолучитьНавигационнуюСсылку(СостояниеТекущее));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекстСообщения <> Неопределено Тогда
		Сообщение = ОбсужденияУНФ.НовыйДанныеСообщения();
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Действия = ДействияСообщения;
		Если ДанныеСообщения.Количество() <> 0 Тогда
			Сообщение.Данные = ДанныеСообщения;
		КонецЕсли;
		Результат.ДанныеСообщений.Добавить(Сообщение);
	КонецЕсли;
	
КонецПроцедуры

Процедура АссистентУправленияОповеститьОформлениеОтгрузкиОплаты(Заказ, ЗначенияЗаполнения, ДополнительныеПараметры, Результат)
	
	ДанныеСообщения = ОбсужденияУНФ.НовыйДанныеСообщения();
	ДанныеСообщения.Текст = ТекстСообщенияОформлениеОтгрузкиОплаты(Заказ, ДополнительныеПараметры.Событие, ДополнительныеПараметры);
	Результат.ДанныеСообщений.Добавить(ДанныеСообщения);
	
КонецПроцедуры

Функция ТекстСообщенияОформлениеОтгрузкиОплаты(Заказ, Событие, ДополнительныеПараметры)
	
	ЭтоЗаказНаряд = ЭтоЗаказНаряд(Заказ);
	
	ТекстСообщения = "";
	ПараметрыСобытия = ДополнительныеПараметры.ДополнительныеПараметрыСобытия;
	
	Если ДополнительныеПараметры.Событие = "ЧастичнаяОтгрузкаПоступила" Тогда
		
		Если ЭтоЗаказНаряд Тогда
			ТекстСообщения = НСтр("ru='Заказ частично выполнили'");
		Иначе
			ТекстСообщения = НСтр("ru='Заказ частично отгрузили'");
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры.Событие = "ПолнаяОтгрузкаПоступила" Тогда
		
		Если ЭтоЗаказНаряд Тогда
			ТекстСообщения = НСтр("ru='Заказ выполнили'");
		Иначе
			ТекстСообщения = НСтр("ru='Заказ отгрузили'");
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры.Событие = "ПолнаяОплатаПоступила" Тогда
		
		ТекстСообщения = НСтр("ru='Заказ оплачен'");
		
	ИначеЕсли ДополнительныеПараметры.Событие = "ЧастичнаяОплатаПоступила" Тогда
		
		Если ПараметрыСобытия.Свойство("ПроцентОплаты") Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru='Заказ оплачен на %1'"), Формат(ПараметрыСобытия.ПроцентОплаты, "ЧЦ=2") + "%");
		Иначе
			ТекстСообщения = НСтр("ru='Заказ оплачен'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Проведение

Процедура СформироватьТаблицаПлатежныйКалендарь(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПокупателя);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ДатаОплаты КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.ТипДенежныхСредств,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыУтвержденияПлатежей.Утвержден) КАК СтатусУтвержденияПлатежа,
	|	ТаблицаДокумента.Ссылка КАК СчетНаОплату,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей) КАК Статья,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные)
	|			ТОГДА ТаблицаДокумента.Ссылка.Касса
	|		КОГДА ТаблицаДокумента.Ссылка.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
	|			ТОГДА ТаблицаДокумента.Ссылка.БанковскийСчет
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК БанковскийСчетКасса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|			ТОГДА ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов
	|		ИНАЧЕ ТаблицаДокумента.Ссылка.ВалютаДокумента
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.СуммаОплаты * ВЫБОР
	|						КОГДА КурсыВалютРасчетов.Курс <> 0
	|								И КурсыВалютДокумента.Кратность <> 0
	|							ТОГДА КурсыВалютДокумента.Курс * КурсыВалютРасчетов.Кратность / (ЕСТЬNULL(КурсыВалютРасчетов.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1))
	|						ИНАЧЕ 1
	|					КОНЕЦ КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ТаблицаДокумента.СуммаОплаты
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	Документ.ЗаказПокупателя.ПлатежныйКалендарь КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютРасчетов
	|		ПО ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютДокумента
	|		ПО ТаблицаДокумента.Ссылка.ВалютаДокумента = КурсыВалютДокумента.Валюта
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.Ссылка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПлатежныйКалендарь", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура СформироватьТаблицаСуммыДокументовРегламентированныйУчет(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Если СтруктураДополнительныеСвойства.ДляПроведения.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд
		И ДокументСсылкаЗаказПокупателя.Договор.ВалютаРасчетов <> СтруктураДополнительныеСвойства.НациональнаяВалюта
		И ДокументСсылкаЗаказПокупателя.ВариантЗавершения <> Перечисления.ВариантыЗавершенияЗаказа.Отменен Тогда
		
		РасчетыПроведениеДокументов.СформироватьТаблицаСуммыДокументовРегламентированныйУчет(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
		
	Иначе
		
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСуммыДокументовРегламентированныйУчет", Новый ТаблицаЗначений);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьДанныеДокумента(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства, ДокументОбъектЗаказПокупателя) Экспорт

	Если ДокументОбъектЗаказПокупателя.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		ИнициализироватьДанныеДокументаЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства, ДокументОбъектЗаказПокупателя);
	Иначе
		ИнициализироватьДанныеДокументаЗаказПокупателя(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства, ДокументОбъектЗаказПокупателя);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольОтрицательныхОстатков

Процедура ВыполнитьКонтроль(ДокументОбъектЗаказПокупателя, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если ПроведениеДокументовУНФ.КонтрольОстатковВыключен() Тогда
		Возврат;
	КонецЕсли;
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Возврат;
	КонецЕсли;
	// Конец МобильноеПриложение
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временные таблицы "ДвиженияЗапасыНаСкладахИзменение", "ДвиженияЗапасыИзменение",
	// "ДвиженияЗаказыПокупателейИзменение", "ДвиженияПотребностьВЗапасахИзменение",
	// "ДвиженияРасчетыСПокупателямиИзменение" содержат записи, необходимо выполнить 
	// контроль остатков.
	
	Если СтруктураВременныеТаблицы.ДвиженияЗапасыНаСкладахИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыВРазрезеГТДИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗаказыПокупателейИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияПотребностьВЗапасахИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияРасчетыСПокупателямиИзменение 
		ИЛИ СтруктураВременныеТаблицы.ДвиженияСерииНоменклатурыИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияПодарочныеСертификатыИзменение
		Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = СформироватьТекстЗапросаОстаткиЗапасыНаСкладах() // [0]
		+ СформироватьТекстЗапросаОстаткиЗапасы() // [1]
		+ СформироватьТекстЗапросаОстаткиЗаказыПокупателей() // [2]
		+ СформироватьТекстЗапросаОстаткиПотребностьВЗапасах() // [3]
		+ СформироватьТекстЗапросаОстаткиРасчетыСПокупателями()// [4]
		+ СформироватьТекстЗапросаОстаткиСерииНоменклатуры()// [5]
		+ СформироватьТекстЗапросаОстаткиЗапасыВРазрезеГТД()// [6]
		+ СформироватьТекстЗапросаОстаткиПодарочныеСертификаты();// [7]
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		// Интеркампани
		Запрос.УстановитьПараметр("МассивОрганизаций", 
			РегистрыСведений.НастройкаПередачиТоваровМеждуОрганизациями.ПолучитьСписокОрганизацийДляОстатков(ДополнительныеСвойства.ДляПроведения.Организация));
		Запрос.УстановитьПараметр("ПередачаТоваровМеждуОрганизациями", ДополнительныеСвойства.УчетнаяПолитика.ПередачаТоваровМеждуОрганизациями);
		// Конец Интеркампани	
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		// Неудача при формировании резервов передачи товаров
		// Сообщения выводятся в момент заполнения движений
		Если ДополнительныеСвойства.УчетнаяПолитика.ПередачаТоваровМеждуОрганизациями 
			И ДополнительныеСвойства.Свойство("ЕстьОшибкиПередачиТоваров") 
			И ДополнительныеСвойства.ЕстьОшибкиПередачиТоваров Тогда
			Отказ = Истина;
		КонецЕсли; 
		
		// Отрицательный остаток запасов на складе.
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[0].Выбрать();
			КонтрольОстатковУНФ.ЗапасыНаСкладахСписком(ДокументОбъектЗаказПокупателя, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток учета запасов.
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
			КонтрольОстатковУНФ.ЗапасыСписком(ДокументОбъектЗаказПокупателя, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по заказу покупателя.
		Если НЕ МассивРезультатов[2].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
			КонтрольОстатковУНФ.ЗаказыПокупателей(ДокументОбъектЗаказПокупателя, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток потребности в запасах.
		Если НЕ МассивРезультатов[3].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[3].Выбрать();
			КонтрольОстатковУНФ.ПотребностьВЗапасах(ДокументОбъектЗаказПокупателя, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по расчетам с покупателями.
		Если НЕ МассивРезультатов[4].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[4].Выбрать();
			КонтрольОстатковУНФ.РасчетыСПокупателями(ДокументОбъектЗаказПокупателя, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток учета серийных номеров.
		Если НЕ МассивРезультатов[5].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[5].Выбрать();
			КонтрольОстатковУНФ.СерииНоменклатуры(ДокументОбъектЗаказПокупателя, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по остаткам запасов в разрезе номеров ГТД.
		Если Константы.КонтролироватьОстаткиПоНомерамГТД.Получить()
			И НЕ МассивРезультатов[6].Пустой() Тогда
			
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[6].Выбрать();
			КонтрольОстатковУНФ.ЗапасыВРазрезеГТД(ДокументОбъектЗаказПокупателя, ВыборкаИзРезультатаЗапроса, Отказ);
			
		КонецЕсли;
		
		// Отрицательный остаток по подарочным сертификатам
		Если Не МассивРезультатов[7].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[7].Выбрать();
			КонтрольОстатковУНФ.ПодарочныеСертификаты(ДокументОбъектЗаказПокупателя, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьТекстЗапросаОстаткиЗапасыНаСкладах()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДвиженияЗапасыНаСкладахИзменение.НомерСтроки КАК НомерСтроки,
	|	ДвиженияЗапасыНаСкладахИзменение.Организация КАК ОрганизацияПредставление,
	|	ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
	|	ДвиженияЗапасыНаСкладахИзменение.Номенклатура КАК НоменклатураПредставление,
	|	ДвиженияЗапасыНаСкладахИзменение.Характеристика КАК ХарактеристикаПредставление,
	|	ДвиженияЗапасыНаСкладахИзменение.Партия КАК ПартияПредставление,
	|	ДвиженияЗапасыНаСкладахИзменение.Ячейка КАК ЯчейкаПредставление,
	|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
	|	ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
	|	ЕСТЬNULL(ДвиженияЗапасыНаСкладахИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(РезервыТоваровОрганизацийОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыНаСкладах,
	|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(РезервыТоваровОрганизацийОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыНаСкладах
	|ИЗ
	|	ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки(
	|				&МоментКонтроля,
	|				Организация В (&МассивОрганизаций)
	|					И (СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, Ячейка) В
	|						(ВЫБРАТЬ
	|							ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|							ДвиженияЗапасыНаСкладахИзменение.Номенклатура КАК Номенклатура,
	|							ДвиженияЗапасыНаСкладахИзменение.Характеристика КАК Характеристика,
	|							ДвиженияЗапасыНаСкладахИзменение.Партия КАК Партия,
	|							ДвиженияЗапасыНаСкладахИзменение.Ячейка КАК Ячейка
	|						ИЗ
	|							ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение)) КАК ЗапасыНаСкладахОстатки
	|		ПО ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница = ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница
	|			И ДвиженияЗапасыНаСкладахИзменение.Номенклатура = ЗапасыНаСкладахОстатки.Номенклатура
	|			И ДвиженияЗапасыНаСкладахИзменение.Характеристика = ЗапасыНаСкладахОстатки.Характеристика
	|			И ДвиженияЗапасыНаСкладахИзменение.Партия = ЗапасыНаСкладахОстатки.Партия
	|			И ДвиженияЗапасыНаСкладахИзменение.Ячейка = ЗапасыНаСкладахОстатки.Ячейка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервыТоваровОрганизаций.Остатки(
	|				&МоментКонтроля,
	|				Организация В (&МассивОрганизаций)
	|					И (СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, Ячейка) В
	|						(ВЫБРАТЬ
	|							ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|							ДвиженияЗапасыНаСкладахИзменение.Номенклатура КАК Номенклатура,
	|							ДвиженияЗапасыНаСкладахИзменение.Характеристика КАК Характеристика,
	|							ДвиженияЗапасыНаСкладахИзменение.Партия КАК Партия,
	|							ДвиженияЗапасыНаСкладахИзменение.Ячейка КАК Ячейка
	|						ИЗ
	|							ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение)) КАК РезервыТоваровОрганизацийОстатки
	|		ПО (&ПередачаТоваровМеждуОрганизациями)
	|			И ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница = РезервыТоваровОрганизацийОстатки.СтруктурнаяЕдиница
	|			И ДвиженияЗапасыНаСкладахИзменение.Номенклатура = РезервыТоваровОрганизацийОстатки.Номенклатура
	|			И ДвиженияЗапасыНаСкладахИзменение.Характеристика = РезервыТоваровОрганизацийОстатки.Характеристика
	|			И ДвиженияЗапасыНаСкладахИзменение.Партия = РезервыТоваровОрганизацийОстатки.Партия
	|			И ДвиженияЗапасыНаСкладахИзменение.Ячейка = РезервыТоваровОрганизацийОстатки.Ячейка
	|ГДЕ
	|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(РезервыТоваровОрганизацийОстатки.КоличествоОстаток, 0) < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции // СформироватьТекстЗапросаОстаткиЗапасыНаСкладах()

Функция СформироватьТекстЗапросаОстаткиЗапасы()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДвиженияЗапасыИзменение.НомерСтроки КАК НомерСтроки,
	|	ДвиженияЗапасыИзменение.Организация КАК ОрганизацияПредставление,
	|	ДвиженияЗапасыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
	|	ДвиженияЗапасыИзменение.СчетУчета КАК СчетУчетаПредставление,
	|	ДвиженияЗапасыИзменение.Номенклатура КАК НоменклатураПредставление,
	|	ДвиженияЗапасыИзменение.Характеристика КАК ХарактеристикаПредставление,
	|	ДвиженияЗапасыИзменение.Партия КАК ПартияПредставление,
	|	ДвиженияЗапасыИзменение.ЗаказПокупателя КАК ЗаказПокупателяПредставление,
	|	ЗапасыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
	|	ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
	|	ЕСТЬNULL(ДвиженияЗапасыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасы,
	|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасы,
	|	ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) КАК СуммаОстатокЗапасы
	|ИЗ
	|	ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(&МоментКонтроля, 	Организация В (&МассивОрганизаций)) КАК ЗапасыОстатки
	|		ПО ДвиженияЗапасыИзменение.СтруктурнаяЕдиница = ЗапасыОстатки.СтруктурнаяЕдиница
	|			И ДвиженияЗапасыИзменение.СчетУчета = ЗапасыОстатки.СчетУчета
	|			И ДвиженияЗапасыИзменение.Номенклатура = ЗапасыОстатки.Номенклатура
	|			И ДвиженияЗапасыИзменение.Характеристика = ЗапасыОстатки.Характеристика
	|			И ДвиженияЗапасыИзменение.Партия = ЗапасыОстатки.Партия
	|			И ДвиженияЗапасыИзменение.ЗаказПокупателя = ЗапасыОстатки.ЗаказПокупателя
	|			И (ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) < 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции // СформироватьТекстЗапросаОстаткиЗапасы()

Функция СформироватьТекстЗапросаОстаткиЗаказыПокупателей()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДвиженияЗаказыПокупателейИзменение.НомерСтроки КАК НомерСтроки,
	|	ДвиженияЗаказыПокупателейИзменение.Организация КАК ОрганизацияПредставление,
	|	ДвиженияЗаказыПокупателейИзменение.Склад КАК СкладПредставление,
	|	ДвиженияЗаказыПокупателейИзменение.ЗаказПокупателя КАК ЗаказПредставление,
	|	ДвиженияЗаказыПокупателейИзменение.Номенклатура КАК НоменклатураПредставление,
	|	ДвиженияЗаказыПокупателейИзменение.Характеристика КАК ХарактеристикаПредставление,
	|	ЗаказыПокупателейОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
	|	ЕСТЬNULL(ДвиженияЗаказыПокупателейИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК ОстатокЗаказыПокупателей,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗаказыПокупателей
	|ИЗ
	|	ДвиженияЗаказыПокупателейИзменение КАК ДвиженияЗаказыПокупателейИзменение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&МоментКонтроля, ) КАК ЗаказыПокупателейОстатки
	|		ПО ДвиженияЗаказыПокупателейИзменение.Организация = ЗаказыПокупателейОстатки.Организация
	|			И ДвиженияЗаказыПокупателейИзменение.Склад = ЗаказыПокупателейОстатки.Склад
	|			И ДвиженияЗаказыПокупателейИзменение.ЗаказПокупателя = ЗаказыПокупателейОстатки.ЗаказПокупателя
	|			И ДвиженияЗаказыПокупателейИзменение.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
	|			И ДвиженияЗаказыПокупателейИзменение.Характеристика = ЗаказыПокупателейОстатки.Характеристика
	|			И (ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) < 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции // СформироватьТекстЗапросаОстаткиЗаказыПокупателей()

Функция СформироватьТекстЗапросаОстаткиПотребностьВЗапасах()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДвиженияПотребностьВЗапасахИзменение.НомерСтроки КАК НомерСтроки,
	|	ДвиженияПотребностьВЗапасахИзменение.Организация КАК ОрганизацияПредставление,
	|	ДвиженияПотребностьВЗапасахИзменение.Склад КАК СкладПредставление,
	|	ДвиженияПотребностьВЗапасахИзменение.ТипДвижения КАК ТипДвиженияПредставление,
	|	ДвиженияПотребностьВЗапасахИзменение.ЗаказПокупателя КАК ЗаказПокупателяПредставление,
	|	ДвиженияПотребностьВЗапасахИзменение.ЗаказНаПроизводство КАК ЗаказНаПроизводствоПредставление,
	|	ДвиженияПотребностьВЗапасахИзменение.Номенклатура КАК НоменклатураПредставление,
	|	ДвиженияПотребностьВЗапасахИзменение.Характеристика КАК ХарактеристикаПредставление,
	|	ПотребностьВЗапасахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
	|	ЕСТЬNULL(ДвиженияПотребностьВЗапасахИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ПотребностьВЗапасахОстатки.КоличествоОстаток, 0) КАК ОстатокПотребностьВЗапасах,
	|	ЕСТЬNULL(ПотребностьВЗапасахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокПотребностьВЗапасах
	|ИЗ
	|	ДвиженияПотребностьВЗапасахИзменение КАК ДвиженияПотребностьВЗапасахИзменение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПотребностьВЗапасах.Остатки(&МоментКонтроля, ) КАК ПотребностьВЗапасахОстатки
	|		ПО ДвиженияПотребностьВЗапасахИзменение.Организация = ПотребностьВЗапасахОстатки.Организация
	|			И ДвиженияПотребностьВЗапасахИзменение.Склад = ПотребностьВЗапасахОстатки.Склад
	|			И ДвиженияПотребностьВЗапасахИзменение.ТипДвижения = ПотребностьВЗапасахОстатки.ТипДвижения
	|			И ДвиженияПотребностьВЗапасахИзменение.ЗаказПокупателя = ПотребностьВЗапасахОстатки.ЗаказПокупателя
	|			И ДвиженияПотребностьВЗапасахИзменение.ЗаказНаПроизводство = ПотребностьВЗапасахОстатки.ЗаказНаПроизводство
	|			И ДвиженияПотребностьВЗапасахИзменение.Номенклатура = ПотребностьВЗапасахОстатки.Номенклатура
	|			И ДвиженияПотребностьВЗапасахИзменение.Характеристика = ПотребностьВЗапасахОстатки.Характеристика
	|			И (ЕСТЬNULL(ПотребностьВЗапасахОстатки.КоличествоОстаток, 0) < 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции // СформироватьТекстЗапросаОстаткиПотребностьВЗапасах()

Функция СформироватьТекстЗапросаОстаткиРасчетыСПокупателями()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДвиженияРасчетыСПокупателямиИзменение.НомерСтроки КАК НомерСтроки,
	|	ДвиженияРасчетыСПокупателямиИзменение.Организация КАК ОрганизацияПредставление,
	|	ДвиженияРасчетыСПокупателямиИзменение.Контрагент КАК КонтрагентПредставление,
	|	ДвиженияРасчетыСПокупателямиИзменение.Договор КАК ДоговорПредставление,
	|	ДвиженияРасчетыСПокупателямиИзменение.Договор.ВалютаРасчетов КАК ВалютаПредставление,
	|	ДвиженияРасчетыСПокупателямиИзменение.Документ КАК ДокументПредставление,
	|	ДвиженияРасчетыСПокупателямиИзменение.Заказ КАК ЗаказПредставление,
	|	ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов КАК ТипРасчетовПредставление,
	|	ЛОЖЬ КАК ДвиженияДенежныхДокументов,
	|	ДвиженияРасчетыСПокупателямиИзменение.СуммаПередЗаписью КАК СуммаПередЗаписью,
	|	ДвиженияРасчетыСПокупателямиИзменение.СуммаПриЗаписи КАК СуммаПриЗаписи,
	|	ДвиженияРасчетыСПокупателямиИзменение.СуммаИзменение КАК СуммаИзменение,
	|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПередЗаписью КАК СуммаВалПередЗаписью,
	|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПриЗаписи КАК СуммаВалПриЗаписи,
	|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалИзменение КАК СуммаВалИзменение,
	|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПриЗаписи - ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаПолученныхАвансов,
	|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалИзменение + ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаНепогашеннойЗадолженности,
	|	ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|	ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток,
	|	ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов КАК ТипРасчетов
	|ИЗ
	|	ДвиженияРасчетыСПокупателямиИзменение КАК ДвиженияРасчетыСПокупателямиИзменение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПокупателями.Остатки(&МоментКонтроля, ) КАК РасчетыСПокупателямиОстатки
	|		ПО ДвиженияРасчетыСПокупателямиИзменение.Организация = РасчетыСПокупателямиОстатки.Организация
	|			И ДвиженияРасчетыСПокупателямиИзменение.Контрагент = РасчетыСПокупателямиОстатки.Контрагент
	|			И ДвиженияРасчетыСПокупателямиИзменение.Договор = РасчетыСПокупателямиОстатки.Договор
	|			И ДвиженияРасчетыСПокупателямиИзменение.Документ = РасчетыСПокупателямиОстатки.Документ
	|			И ДвиженияРасчетыСПокупателямиИзменение.Заказ = РасчетыСПокупателямиОстатки.Заказ
	|			И ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов = РасчетыСПокупателямиОстатки.ТипРасчетов
	|			И (ВЫБОР
	|				КОГДА ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|					ТОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) > 0
	|				ИНАЧЕ ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) < 0
	|			КОНЕЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции // СформироватьТекстЗапросаОстаткиРасчетыСПокупателями()

Функция СформироватьТекстЗапросаОстаткиСерииНоменклатуры()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДвиженияСерииНоменклатурыИзменение.НомерСтроки КАК НомерСтроки,
	|	ДвиженияСерииНоменклатурыИзменение.Серия КАК СерияПредставление,
	|	ДвиженияСерииНоменклатурыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
	|	ДвиженияСерииНоменклатурыИзменение.Номенклатура КАК НоменклатураПредставление,
	|	ДвиженияСерииНоменклатурыИзменение.Характеристика КАК ХарактеристикаПредставление,
	|	ДвиженияСерииНоменклатурыИзменение.Партия КАК ПартияПредставление,
	|	ДвиженияСерииНоменклатурыИзменение.Ячейка КАК ЯчейкаПредставление,
	|	СерииНоменклатурыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
	|	СерииНоменклатурыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
	|	ЕСТЬNULL(ДвиженияСерииНоменклатурыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(СерииНоменклатурыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыНаСкладах,
	|	ЕСТЬNULL(СерииНоменклатурыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыНаСкладах
	|ИЗ
	|	ДвиженияСерииНоменклатурыИзменение КАК ДвиженияСерииНоменклатурыИзменение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СерииНоменклатуры.Остатки(&МоментКонтроля, ) КАК СерииНоменклатурыОстатки
	|		ПО ДвиженияСерииНоменклатурыИзменение.СтруктурнаяЕдиница = СерииНоменклатурыОстатки.СтруктурнаяЕдиница
	|			И ДвиженияСерииНоменклатурыИзменение.Номенклатура = СерииНоменклатурыОстатки.Номенклатура
	|			И ДвиженияСерииНоменклатурыИзменение.Характеристика = СерииНоменклатурыОстатки.Характеристика
	|			И ДвиженияСерииНоменклатурыИзменение.Партия = СерииНоменклатурыОстатки.Партия
	|			И ДвиженияСерииНоменклатурыИзменение.Серия = СерииНоменклатурыОстатки.Серия
	|			И ДвиженияСерииНоменклатурыИзменение.Ячейка = СерииНоменклатурыОстатки.Ячейка
	|			И (ЕСТЬNULL(СерииНоменклатурыОстатки.КоличествоОстаток, 0) < 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции // СформироватьТекстЗапросаОстаткиСерииНоменклатуры()

Функция СформироватьТекстЗапросаОстаткиПодарочныеСертификаты()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДвиженияПодарочныеСертификатыИзменение.НомерСтроки КАК НомерСтроки,
	|	ДвиженияПодарочныеСертификатыИзменение.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	ДвиженияПодарочныеСертификатыИзменение.НомерСертификата КАК НомерСертификата,
	|	ЕСТЬNULL(ДвиженияПодарочныеСертификатыИзменение.СуммаИзменение, 0) + ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) КАК ОстатокПодарочныеСертификаты,
	|	ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) КАК СуммаОстатокПодарочныеСертификаты
	|ИЗ
	|	ДвиженияПодарочныеСертификатыИзменение КАК ДвиженияПодарочныеСертификатыИзменение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты.Остатки(&МоментКонтроля, ) КАК ПодарочныеСертификатыОстатки
	|		ПО ДвиженияПодарочныеСертификатыИзменение.ПодарочныйСертификат = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
	|			И ДвиженияПодарочныеСертификатыИзменение.НомерСертификата = ПодарочныеСертификатыОстатки.НомерСертификата
	|			И (ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) < 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции

Функция СформироватьТекстЗапросаОстаткиЗапасыВРазрезеГТД()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДвиженияЗапасыВРазрезеГТДИзменение.НомерСтроки КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Организация) КАК ОрганизацияПредставление,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД) КАК НомерГТДПредставление,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура) КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика) КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Партия) КАК ПартияПредставление,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения) КАК СтранаПроисхожденияПредставление,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыВРазрезеГТДОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
	|	ЕСТЬNULL(ДвиженияЗапасыВРазрезеГТДИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыВРазрезеГТД,
	|	ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(РезервыТоваровОрганизацийОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыВРазрезеГТД
	|ИЗ
	|	ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыВРазрезеГТД.Остатки(
	|				&МоментКонтроля,
	|				Организация В (&МассивОрганизаций)
	|					И (НомерГТД, Номенклатура, Характеристика, Партия, СтранаПроисхождения) В
	|						(ВЫБРАТЬ
	|							ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД КАК НомерГТД,
	|							ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура КАК Номенклатура,
	|							ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика КАК Характеристика,
	|							ДвиженияЗапасыВРазрезеГТДИзменение.Партия КАК Партия,
	|							ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения КАК СтранаПроисхождения
	|						ИЗ
	|							ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение)) КАК ЗапасыВРазрезеГТДОстатки
	|		ПО ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД = ЗапасыВРазрезеГТДОстатки.НомерГТД
	|			И ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура = ЗапасыВРазрезеГТДОстатки.Номенклатура
	|			И ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика = ЗапасыВРазрезеГТДОстатки.Характеристика
	|			И ДвиженияЗапасыВРазрезеГТДИзменение.Партия = ЗапасыВРазрезеГТДОстатки.Партия
	|			И ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения = ЗапасыВРазрезеГТДОстатки.СтранаПроисхождения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервыТоваровОрганизаций.Остатки(
	|				&МоментКонтроля,
	|				Организация В (&МассивОрганизаций)
	|					И (НомерГТД, Номенклатура, Характеристика, Партия, СтранаПроисхождения) В
	|						(ВЫБРАТЬ
	|							ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД КАК НомерГТД,
	|							ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура КАК Номенклатура,
	|							ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика КАК Характеристика,
	|							ДвиженияЗапасыВРазрезеГТДИзменение.Партия КАК Партия,
	|							ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения КАК СтранаПроисхождения
	|						ИЗ
	|							ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение)) КАК РезервыТоваровОрганизацийОстатки
	|		ПО (&ПередачаТоваровМеждуОрганизациями)
	|			И ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД = РезервыТоваровОрганизацийОстатки.НомерГТД
	|			И ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура = РезервыТоваровОрганизацийОстатки.Номенклатура
	|			И ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика = РезервыТоваровОрганизацийОстатки.Характеристика
	|			И ДвиженияЗапасыВРазрезеГТДИзменение.Партия = РезервыТоваровОрганизацийОстатки.Партия
	|			И ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения = РезервыТоваровОрганизацийОстатки.СтранаПроисхождения
	|ГДЕ
	|	ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(РезервыТоваровОрганизацийОстатки.КоличествоОстаток, 0) < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции

#КонецОбласти

#Область ШаблоныПечатиОфисныхДокументов

Процедура ПриДобавленииПараметровШаблона(НазначениеШаблона, ПараметрыШаблона) Экспорт
	
	Если НазначениеШаблона = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.КоммерческоеПредложение Тогда
		
		ПараметрыЗаказа = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона, НСтр("ru='Заказ покупателя'"));
		ДобавитьПараметрыЗаказаПокупателяВШаблон(ПараметрыЗаказа);
		
		ПараметрыКонтрагента = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона, НСтр("ru='Контрагент'"));
		ДобавитьПараметрыКонтрагентаВШаблон(ПараметрыКонтрагента);
		
	ИначеЕсли НазначениеШаблона = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаЗаказ
		ИЛИ НазначениеШаблона = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаЗаказНаряд Тогда
		
		ДобавитьПараметрыЗаказаПокупателяВШаблон(ПараметрыШаблона);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриПолученииЗначенийПараметровШаблона(ОбъектПечати, НазначениеШаблона, ОписаниеПараметров, ДополнительныеПараметры) Экспорт
	
	Если НазначениеШаблона = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.КоммерческоеПредложение Тогда
		
		ЗаполнитьЗначенияПараметровЗаказа(ОбъектПечати, ОписаниеПараметров, ДополнительныеПараметры);
		
		РеквизитыКонтрагентаЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектПечати, "Контрагент, Дата");
		ЗаполнитьЗначенияПараметровКонтрагента(РеквизитыКонтрагентаЗаказа, ОписаниеПараметров);
		
	ИначеЕсли НазначениеШаблона = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаЗаказ
		ИЛИ НазначениеШаблона = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаЗаказНаряд Тогда
		
		ЗаполнитьЗначенияПараметровЗаказа(ОбъектПечати, ОписаниеПараметров, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриВыводеТаблицыПараметровШаблона(ПараметрыПечати, ИмяТаблицы, ОписаниеПараметров, ПараметрыВывода = Неопределено) Экспорт
	
	ЭтоВыводВФайл = ПараметрыВывода <> Неопределено;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ЗаказПокупателя.ОжидаетсяВыборВариантаКП КАК ОжидаетсяВыборВариантаКП,
	|	ЗаказПокупателя.ОсновнойВариантКП КАК ОсновнойВариантКП,
	|	ЗаказПокупателя.КоличествоВариантовКП КАК КоличествоВариантовКП,
	|	ЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗаказПокупателя.СпособДоставки КАК СпособДоставки,
	|	ЗаказПокупателя.Вес КАК Вес,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|				ИЛИ ЗаказПокупателя.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПустаяСсылка), ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз))
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИНАЧЕ ЗаказПокупателя.НоменклатураДоставки
	|	КОНЕЦ КАК НоменклатураДоставки,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА ЗаказПокупателя.НоменклатураДоставки.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ КАК ПредставлениеНоменклатурыДоставки,
	|	ЗаказПокупателя.НоменклатураДоставки.Код КАК КодДоставки,
	|	ЗаказПокупателя.НоменклатураДоставки.Артикул КАК АртикулДоставки,
	|	ЗаказПокупателя.НоменклатураДоставки.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДоставки,
	|	ЗаказПокупателя.СтоимостьДоставки КАК СтоимостьДоставки,
	|	ЗаказПокупателя.СтавкаНДСДоставки КАК СтавкаНДСДоставки,
	|	ЗаказПокупателя.СуммаНДСДоставки КАК СуммаНДСДоставки,
	|	ЗаказПокупателя.Работы.(
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.Работы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ЗаказПокупателя.Работы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.Работы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ПредставлениеНоменклатуры,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Штрихкод КАК Штрихкод,
	|		Номенклатура.Комментарий КАК ОписаниеНоменклатуры,
	|		Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		ЗаказПокупателя.Работы.Количество * ЗаказПокупателя.Работы.Коэффициент * ЗаказПокупателя.Работы.Кратность КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		0 КАК Вес,
	|		Ссылка.Старт КАК ДатаОтгрузки,
	|		Характеристика КАК Характеристика,
	|		Содержание КАК Содержание,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Работы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ ЗаказПокупателя.Работы.СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|		0 КАК Резерв,
	|		"""" КАК СтранаПроисхождения,
	|		Спецификация КАК Спецификация,
	|		"""" КАК СерииНоменклатуры,
	|		"""" КАК НомерГТД,
	|		"""" КАК Партия,
	|		0 КАК НомерВариантаКП,
	|		ЛОЖЬ КАК ЭтоРазделитель,
	|		ЛОЖЬ КАК ЭтоНабор,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Работы.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И ЗаказПокупателя.Работы.НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		Номенклатура.ФайлКартинки КАК НоменклатураФайлКартинки
	|	) КАК ТаблицаРаботыУслуги,
	|	ЗаказПокупателя.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателя.Запасы.Номенклатура) = ТИП(СТРОКА)
	|				ТОГДА ЗаказПокупателя.Запасы.Номенклатура
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ЗаказПокупателя.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ПредставлениеНоменклатуры,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Штрихкод КАК Штрихкод,
	|		Номенклатура.Комментарий КАК ОписаниеНоменклатуры,
	|		ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		Вес КАК Вес,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Запасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|				ТОГДА ЗаказПокупателя.Запасы.Ссылка.Старт
	|			ИНАЧЕ ЗаказПокупателя.Запасы.ДатаОтгрузки
	|		КОНЕЦ КАК ДатаОтгрузки,
	|		Характеристика КАК Характеристика,
	|		Содержание КАК Содержание,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Запасы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ ЗаказПокупателя.Запасы.СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|		Резерв КАК Резерв,
	|		СтранаПроисхождения КАК СтранаПроисхождения,
	|		НомерГТД КАК НомерГТД,
	|		Спецификация КАК Спецификация,
	|		СерииНоменклатуры КАК СерииНоменклатуры,
	|		Партия КАК Партия,
	|		НомерВариантаКП КАК НомерВариантаКП,
	|		ЭтоРазделитель КАК ЭтоРазделитель,
	|		ЛОЖЬ КАК ЭтоНабор,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Запасы.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И ЗаказПокупателя.Запасы.НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		Номенклатура.ФайлКартинки КАК НоменклатураФайлКартинки
	|	) КАК ТаблицаЗапасы,
	|	ЗаказПокупателя.ДобавленныеНаборы.(
	|		НомерВариантаКП КАК НомерВариантаКП,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.ДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ЗаказПокупателя.ДобавленныеНаборы.НоменклатураНабора.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.ДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ЗапасНабора,
	|		НоменклатураНабора.ВариантПечатиНабора КАК ВариантПечатиНабора,
	|		НоменклатураНабора.ТипНоменклатуры КАК ТипНоменклатурыНабора,
	|		НоменклатураНабора.Артикул КАК АртикулНабора,
	|		НоменклатураНабора.Код КАК КодНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияНабора,
	|		ИСТИНА КАК ВыводитьИтоги
	|	) КАК ТаблицаДобавленныеНаборы
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ЗаказПокупателя
	|	И (ЗаказПокупателя.ОсновнойВариантКП = 0
	|			ИЛИ ЗаказПокупателя.Запасы.НомерВариантаКП = ЗаказПокупателя.ОсновнойВариантКП)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ЗаказПокупателя.Запасы.НомерВариантаКП,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", ПараметрыПечати.ЗаказПокупателя);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ДоставкаСервер.ДобавитьСтрокуДоставкиУниверсальныеДанные(Результат);
	НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(Результат, "ТаблицаЗапасы", Неопределено, Истина);
	НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(Результат, "ТаблицаРаботыУслуги", Неопределено);
	
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаказа = Результат[0];
	
	ЕстьНесколькоВариантов = ДанныеЗаказа.ОжидаетсяВыборВариантаКП;
	Если ЕстьНесколькоВариантов Тогда
		НомерВарианта = 1;
		ПоследнийВариант = ДанныеЗаказа.КоличествоВариантовКП;
	Иначе
		НомерВарианта = ДанныеЗаказа.ОсновнойВариантКП;
		ПоследнийВариант = ДанныеЗаказа.ОсновнойВариантКП;
	КонецЕсли;
	
	Если ЕстьНесколькоВариантов И НЕ ЭтоВыводВФайл Тогда
		Возврат;
	КонецЕсли;
	
	Префикс = "ЗаказПокупателя.";
	
	Пока НомерВарианта <= ПоследнийВариант Цикл
		
		Отбор = Новый Структура("НомерВариантаКП", НомерВарианта);
		СтрокиЗапасы = ДанныеЗаказа.ТаблицаЗапасы.НайтиСтроки(Отбор);
		
		СтруктураИтогов = Новый Структура;
		СтруктураИтогов.Вставить("Сумма", 0);
		СтруктураИтогов.Вставить("СуммаБезСкидки", 0);
		СтруктураИтогов.Вставить("СуммаСкидки", 0);
		СтруктураИтогов.Вставить("СуммаНДС", 0);
		СтруктураИтогов.Вставить("Всего", 0);
		СтруктураИтогов.Вставить("Количество", 0);
		СтруктураИтогов.Вставить("НомерСтроки", 0);
		СтруктураИтогов.Вставить("Вес", 0);
		
		Если ЭтоВыводВФайл Тогда
			Если ЕстьНесколькоВариантов И НомерВарианта <> 1 Тогда
				ШаблоныПечатиОфисныхДокументов.ВывестиПереносСтрокиВДокумент(ПараметрыВывода);
			КонецЕсли;
			ШаблоныПечатиОфисныхДокументов.НачатьВыводТаблицыДокумента(ОписаниеПараметров, ПараметрыВывода);
		КонецЕсли;
		
		Для каждого СтрокаРаботы Из ДанныеЗаказа.ТаблицаРаботыУслуги Цикл
			ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиДокумента(СтрокаРаботы, ОписаниеПараметров, СтруктураИтогов, ИмяТаблицы + ".", ПараметрыВывода);
			Если ЭтоВыводВФайл Тогда
				ШаблоныПечатиОфисныхДокументов.ВывестиСтрокуТаблицыДокумента(ОписаниеПараметров, ПараметрыВывода);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаЗапасы Из СтрокиЗапасы Цикл
			ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиДокумента(СтрокаЗапасы, ОписаниеПараметров, СтруктураИтогов, ИмяТаблицы + ".", ПараметрыВывода);
			Если ЭтоВыводВФайл Тогда
				ШаблоныПечатиОфисныхДокументов.ВывестиСтрокуТаблицыДокумента(ОписаниеПараметров, ПараметрыВывода);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеПечати = Новый Соответствие;
		ДанныеПечати.Вставить(Префикс + "СуммаДокумента", ПечатьДокументовУНФ.ФорматСумм(СтруктураИтогов.Сумма));
		ДанныеПечати.Вставить(Префикс + "СуммаВсегоДокумента", ПечатьДокументовУНФ.ФорматСумм(СтруктураИтогов.Всего));
		ДанныеПечати.Вставить(Префикс + "СуммаБезСкидки", ПечатьДокументовУНФ.ФорматСумм(СтруктураИтогов.СуммаБезСкидки));
		ДанныеПечати.Вставить(Префикс + "СуммаСкидки", ПечатьДокументовУНФ.ФорматСумм(СтруктураИтогов.СуммаСкидки));
		ДанныеПечати.Вставить(Префикс + "СуммаДокументаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(СтруктураИтогов.Всего, ДанныеЗаказа.ВалютаДокумента));
		ДанныеПечати.Вставить(Префикс + "СуммаНДС", ?(СтруктураИтогов.СуммаНДС = 0, "-", ПечатьДокументовУНФ.ФорматСумм(СтруктураИтогов.СуммаНДС)));
		ДанныеПечати.Вставить(Префикс + "НДС", ПечатьДокументовУНФ.ПредставлениеЗаголовкаНДС(СтруктураИтогов.СуммаНДС, ДанныеЗаказа.СуммаВключаетНДС, Ложь));
		ДанныеПечати.Вставить(Префикс + "ИтоговаяСтрока", ПечатьДокументовУНФ.ИтоговаяСтрока(СтруктураИтогов.Количество, СтруктураИтогов.Всего, ДанныеЗаказа.ВалютаДокумента));
		ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтруктуры(ОписаниеПараметров, ДанныеПечати);
		
		Если ЭтоВыводВФайл Тогда
			ШаблоныПечатиОфисныхДокументов.ЗакончитьВыводТаблицыДокумента(ОписаниеПараметров, ПараметрыВывода);
		КонецЕсли;
		
		НомерВарианта = НомерВарианта + 1;
		
	КонецЦикла;
	
	Если ЕстьНесколькоВариантов Тогда
		ДанныеПечати = Новый Соответствие;
		ДанныеПечати.Вставить(Префикс + "СуммаДокумента",         "");
		ДанныеПечати.Вставить(Префикс + "СуммаВсегоДокумента",    "");
		ДанныеПечати.Вставить(Префикс + "СуммаБезСкидки",         "");
		ДанныеПечати.Вставить(Префикс + "СуммаСкидки",            "");
		ДанныеПечати.Вставить(Префикс + "СуммаДокументаПрописью", "");
		ДанныеПечати.Вставить(Префикс + "СуммаНДС",               "");
		ДанныеПечати.Вставить(Префикс + "НДС",                    "");
		ДанныеПечати.Вставить(Префикс + "ИтоговаяСтрока",         "");
		ДанныеПечати.Вставить(Префикс + "Запасы.Номенклатура.Изображение", "");
		ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтруктуры(ОписаниеПараметров, ДанныеПечати);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПараметрыКонтрагентаВШаблон(ПараметрыШаблона)
	
	МетаданныеКонтрагента = Метаданные.Справочники.Контрагенты;
	МетаданныеКонтактногоЛица = Метаданные.Справочники.КонтактныеЛица;
	
	ПараметрыКонтактногоЛица = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона, НСтр("ru='Основное контактное лицо'"));
	ПараметрыКонтактногоЛицаСклонения = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыКонтактногоЛица, НСтр("ru='Имя, фамилия'"));
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКонтактногоЛицаСклонения, "ЗаказПокупателя.Контрагент.КонтактноеЛицо.КонтрагентКонтактноеЛицоНаименование", НСтр("ru='Имя, фамилия'"));
	НовыйПараметр.СовместимыеПараметры.Добавить("ЗаказПокупателя.Контрагент.КонтрагентКонтактноеЛицоНаименование");
	НовыйПараметр.СовместимыеПараметры.Добавить("ЗаказПокупателя.Контрагент.КонтрагентКонтактноеЛицо.КонтрагентКонтактноеЛицоНаименование");
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыСклоненияПараметра(ПараметрыКонтактногоЛицаСклонения, "ЗаказПокупателя.Контрагент.КонтактноеЛицо.КонтрагентКонтактноеЛицоНаименование", НСтр("ru='Имя, фамилия'"), НовыйПараметр.СовместимыеПараметры);
	
	ПараметрыДолжности = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыКонтактногоЛица, НСтр("ru='Должность'"));
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыДолжности, "ЗаказПокупателя.Контрагент.КонтактноеЛицо.КонтрагентКонтактноеЛицоДолжность", НСтр("ru='Должность'"));
	НовыйПараметр.СовместимыеПараметры.Добавить("ЗаказПокупателя.Контрагент.КонтрагентКонтактноеЛицоДолжность");
	НовыйПараметр.СовместимыеПараметры.Добавить("ЗаказПокупателя.Контрагент.КонтрагентКонтактноеЛицо.КонтрагентКонтактноеЛицоДолжность");
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыСклоненияПараметра(ПараметрыДолжности, "ЗаказПокупателя.Контрагент.КонтактноеЛицо.КонтрагентКонтактноеЛицоДолжность", НСтр("ru='Должность'"), НовыйПараметр.СовместимыеПараметры);
	
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКонтактногоЛица, "ЗаказПокупателя.Контрагент.КонтактноеЛицо.КонтрагентКонтактноеЛицоДатаРождения", МетаданныеКонтактногоЛица.Реквизиты.ДатаРождения.Синоним, "ДЛФ=Д", ШаблоныПечатиОфисныхДокументов.ДопустимыеФорматыДаты());
	НовыйПараметр.СовместимыеПараметры.Добавить("ЗаказПокупателя.Контрагент.КонтрагентКонтактноеЛицоДатаРождения");
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКонтактногоЛица, "ЗаказПокупателя.Контрагент.КонтактноеЛицо.КонтрагентКонтактноеЛицоДокументУдостоверяющийЛичность", МетаданныеКонтактногоЛица.Реквизиты.ДокументУдостоверяющийЛичность.Синоним);
	НовыйПараметр.СовместимыеПараметры.Добавить("ЗаказПокупателя.Контрагент.КонтрагентКонтактноеЛицо.КонтрагентКонтактноеЛицоДокументУдостоверяющийЛичность");
	
	ПараметрыКИКонтрагента = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыКонтактногоЛица, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыКонтактнаяИнформация());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыКонтактнойИнформацииОбъекта(ПараметрыКИКонтрагента, Справочники.КонтактныеЛица.ПустаяСсылка(), "ЗаказПокупателя.Контрагент.КонтактноеЛицо.КонтактнаяИнформация.");
	
	ПараметрыДопРеквизитовКонтрагента = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыКонтактногоЛица, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыДополнительныеРеквизиты());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыДополнительныхРеквизитовОбъекта(ПараметрыДопРеквизитовКонтрагента, Справочники.КонтактныеЛица.ПустаяСсылка(), "ЗаказПокупателя.Контрагент.КонтактноеЛицо.ДополнительныеРеквизиты.");
	
	ПараметрыКонтактногоЛица = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона, НСтр("ru='Подписант'"));
	ПараметрыКонтактногоЛицаСклонения = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыКонтактногоЛица, НСтр("ru='Имя, фамилия'"));
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКонтактногоЛицаСклонения, "ЗаказПокупателя.Контрагент.КонтактноеЛицоПодписант.КонтрагентКонтактноеЛицоПодписантНаименование", НСтр("ru='Имя, фамилия'"));
	НовыйПараметр.СовместимыеПараметры.Добавить("ЗаказПокупателя.Контрагент.КонтрагентКонтактноеЛицоПодписантНаименование");
	НовыйПараметр.СовместимыеПараметры.Добавить("ЗаказПокупателя.Контрагент.КонтрагентКонтактноеЛицоПодписант.КонтрагентКонтактноеЛицоПодписантНаименование");
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыСклоненияПараметра(ПараметрыКонтактногоЛицаСклонения, "ЗаказПокупателя.Контрагент.КонтактноеЛицоПодписант.КонтрагентКонтактноеЛицоПодписантНаименование", НСтр("ru='Имя, фамилия'"), НовыйПараметр.СовместимыеПараметры);
	
	ПараметрыДолжности = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыКонтактногоЛица, НСтр("ru='Должность'"));
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыДолжности, "ЗаказПокупателя.Контрагент.КонтактноеЛицоПодписант.КонтрагентКонтактноеЛицоПодписантДолжность", НСтр("ru='Должность'"));
	НовыйПараметр.СовместимыеПараметры.Добавить("ЗаказПокупателя.Контрагент.КонтрагентКонтактноеЛицоПодписантДолжность");
	НовыйПараметр.СовместимыеПараметры.Добавить("ЗаказПокупателя.Контрагент.КонтрагентКонтактноеЛицоПодписант.КонтрагентКонтактноеЛицоПодписантДолжность");
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыСклоненияПараметра(ПараметрыДолжности, "ЗаказПокупателя.Контрагент.КонтактноеЛицоПодписант.КонтрагентКонтактноеЛицоПодписантДолжность", НСтр("ru='Должность'"), НовыйПараметр.СовместимыеПараметры);
	
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКонтактногоЛица, "ЗаказПокупателя.Контрагент.КонтактноеЛицоПодписант.КонтрагентКонтактноеЛицоПодписантДатаРождения", МетаданныеКонтактногоЛица.Реквизиты.ДатаРождения.Синоним, "ДЛФ=Д", ШаблоныПечатиОфисныхДокументов.ДопустимыеФорматыДаты());
	НовыйПараметр.СовместимыеПараметры.Добавить("ЗаказПокупателя.Контрагент.КонтрагентКонтактноеЛицоПодписантДатаРождения");
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКонтактногоЛица, "ЗаказПокупателя.Контрагент.КонтактноеЛицоПодписант.КонтрагентКонтактноеЛицоПодписантДокументУдостоверяющийЛичность", МетаданныеКонтактногоЛица.Реквизиты.ДокументУдостоверяющийЛичность.Синоним);
	НовыйПараметр.СовместимыеПараметры.Добавить("ЗаказПокупателя.Контрагент.КонтрагентКонтактноеЛицоПодписант.КонтрагентКонтактноеЛицоПодписантДокументУдостоверяющийЛичность");
	
	ПараметрыКИКонтрагента = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыКонтактногоЛица, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыКонтактнаяИнформация());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыКонтактнойИнформацииОбъекта(ПараметрыКИКонтрагента, Справочники.КонтактныеЛица.ПустаяСсылка(), "ЗаказПокупателя.Контрагент.КонтактноеЛицоПодписант.КонтактнаяИнформация.");
	
	ПараметрыДопРеквизитовКонтрагента = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыКонтактногоЛица, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыДополнительныеРеквизиты());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыДополнительныхРеквизитовОбъекта(ПараметрыДопРеквизитовКонтрагента, Справочники.КонтактныеЛица.ПустаяСсылка(), "ЗаказПокупателя.Контрагент.КонтактноеЛицоПодписант.ДополнительныеРеквизиты.");
	
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.Контрагент.КонтрагентНаименование", МетаданныеКонтрагента.СтандартныеРеквизиты.Наименование.Синоним);
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.Контрагент.КонтрагентНаименованиеПолное", МетаданныеКонтрагента.Реквизиты.НаименованиеПолное.Синоним);
	НовыйПараметр.СовместимыеПараметры.Добавить("ЗаказПокупателя.Контрагент.КонтрагентНаименование");
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.Контрагент.КонтрагентФИОФизЛица", МетаданныеКонтрагента.Реквизиты.ФИО.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.Контрагент.КонтрагентБанковскийСчетПоУмолчанию", МетаданныеКонтрагента.Реквизиты.БанковскийСчетПоУмолчанию.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.Контрагент.КонтрагентДокументУдостоверяющийЛичность", МетаданныеКонтрагента.Реквизиты.ДокументУдостоверяющийЛичность.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.Контрагент.КонтрагентИНН", МетаданныеКонтрагента.Реквизиты.ИНН.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.Контрагент.КонтрагентСвидетельствоДатаВыдачи", НСтр("ru='Дата выдачи свидетельства'"), "ДЛФ=Д");
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.Контрагент.КонтрагентДатаРождения", МетаданныеКонтрагента.Реквизиты.ДатаРождения.Синоним, "ДЛФ=Д");
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.Контрагент.КонтрагентКПП", МетаданныеКонтрагента.Реквизиты.КПП.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.Контрагент.КонтрагентКодПоОКПО", МетаданныеКонтрагента.Реквизиты.КодПоОКПО.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.Контрагент.КонтрагентРегистрационныйНомер", НСтр("ru='Регистрационный номер (ОГРН)'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.Контрагент.КонтрагентСвидетельствоСерияНомер", МетаданныеКонтрагента.Реквизиты.СвидетельствоСерияНомер);
	
	ПараметрыСчетаКонтрагента = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона, НСтр("ru='Банковский счет'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаКонтрагента, "ЗаказПокупателя.Контрагент.КонтрагентБанковскийСчетПоУмолчанию", НСтр("ru='Банковский счет (полное представление)'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаКонтрагента, "ЗаказПокупателя.Контрагент.КонтрагентБанковскийСчетПоУмолчаниюПодробно.КонтрагентБанковскийСчетПоУмолчаниюБанкСВИФТБИК", НСтр("ru='SWIFT'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаКонтрагента, "ЗаказПокупателя.Контрагент.КонтрагентБанковскийСчетПоУмолчаниюПодробно.КонтрагентБанковскийСчетПоУмолчаниюБанкНаименование", НСтр("ru='Банк'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаКонтрагента, "ЗаказПокупателя.Контрагент.КонтрагентБанковскийСчетПоУмолчаниюПодробно.КонтрагентБанковскийСчетПоУмолчаниюБанкКод", НСтр("ru='БИК'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаКонтрагента, "ЗаказПокупателя.Контрагент.КонтрагентБанковскийСчетПоУмолчаниюПодробно.КонтрагентБанковскийСчетПоУмолчаниюБанкКоррСчет", НСтр("ru='Корр. счет'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаКонтрагента, "ЗаказПокупателя.Контрагент.КонтрагентБанковскийСчетПоУмолчаниюПодробно.КонтрагентБанковскийСчетПоУмолчаниюНомерСчета", НСтр("ru='Номер счета'"));
	
	ПараметрыКИКонтрагента = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыКонтактнаяИнформация());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыКонтактнойИнформацииОбъекта(ПараметрыКИКонтрагента, Справочники.Контрагенты.ПустаяСсылка(), "ЗаказПокупателя.Контрагент.КонтактнаяИнформация.");
	
	ПараметрыДопРеквизитовКонтрагента = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыДополнительныеРеквизиты());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыДополнительныхРеквизитовОбъекта(ПараметрыДопРеквизитовКонтрагента, Справочники.Контрагенты.ПустаяСсылка(), "ЗаказПокупателя.Контрагент.ДополнительныеРеквизиты.");
	
	ПараметрыОтветственногоКонтрагента = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона, НСтр("ru='Ответственный'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыОтветственногоКонтрагента, "ЗаказПокупателя.Контрагент.ОтветственныйФИО", МетаданныеКонтрагента.Реквизиты.Ответственный);
	
	ПараметрыКИОтветственногоКонтрагента = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыОтветственногоКонтрагента, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыКонтактнаяИнформация());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыКонтактнойИнформацииОбъекта(ПараметрыКИОтветственногоКонтрагента, Справочники.ФизическиеЛица.ПустаяСсылка(), "ЗаказПокупателя.Контрагент.Ответственный.КонтактнаяИнформация.");
	
	ПараметрыДопРеквизитовОтветственногоКонтрагента = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыОтветственногоКонтрагента, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыДополнительныеРеквизиты());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыДополнительныхРеквизитовОбъекта(ПараметрыДопРеквизитовОтветственногоКонтрагента, Справочники.Сотрудники.ПустаяСсылка(), "ЗаказПокупателя.Контрагент.Ответственный.ДополнительныеРеквизиты.");
	
КонецПроцедуры

Процедура ДобавитьПараметрыЗаказаПокупателяВШаблон(ПараметрыШаблона)
	
	МетаданныеЗаказа = Метаданные.Документы.ЗаказПокупателя;
	МетаданныеНоменклатуры = Справочники.Номенклатура.ПустаяСсылка().Метаданные();
	
	ФорматЦены = ШаблоныПечатиОфисныхДокументов.ФорматЦены();
	ФорматСкидки = "ЧН=-; ЧФ=-Ч%;";
	
	ТипЦены = ШаблоныПечатиОфисныхДокументов.ОписаниеТипаЦена();
	ТипСкидки = ШаблоныПечатиОфисныхДокументов.ОписаниеТипаСкидка();
	ТипКоличество = ШаблоныПечатиОфисныхДокументов.ОписаниеТипаКоличество();
	
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.ПредставлениеЗаказа", НСтр("ru='Наименование заказа (полное)'"));
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.ДатаЗаказа", НСтр("ru='Дата'"), "ДЛФ=Д", ШаблоныПечатиОфисныхДокументов.ДопустимыеФорматыДаты(), МетаданныеЗаказа.СтандартныеРеквизиты.Дата.Тип);
	НовыйПараметр.СовместимыеПараметры.Добавить("ЗаказПокупателя.Дата");
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.НомерЗаказа", НСтр("ru='Номер'"));
	НовыйПараметр.СовместимыеПараметры.Добавить("ЗаказПокупателя.Номер");
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.ДатаОтгрузки", МетаданныеЗаказа.Реквизиты.ДатаОтгрузки.Синоним, "ДЛФ=Д", ШаблоныПечатиОфисныхДокументов.ДопустимыеФорматыДаты(), МетаданныеЗаказа.Реквизиты.ДатаОтгрузки.Тип);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.Старт", МетаданныеЗаказа.Реквизиты.Старт,, ШаблоныПечатиОфисныхДокументов.ДопустимыеФорматыДатыВремени(), МетаданныеЗаказа.Реквизиты.Старт.Тип);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.Финиш", МетаданныеЗаказа.Реквизиты.Финиш,, ШаблоныПечатиОфисныхДокументов.ДопустимыеФорматыДатыВремени(), МетаданныеЗаказа.Реквизиты.Финиш.Тип);
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.УсловияЗаказа", МетаданныеЗаказа.Реквизиты.УсловияСчетаЗаказа.Синоним);
	НовыйПараметр.СовместимыеПараметры.Добавить("ЗаказПокупателя.УсловияСчетаЗаказа");
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.УсловияКоммерческогоПредложения", МетаданныеЗаказа.Реквизиты.УсловияКоммерческогоПредложения.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.СостояниеЗаказа", МетаданныеЗаказа.Реквизиты.СостояниеЗаказа.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.Комментарий", МетаданныеЗаказа.Реквизиты.Комментарий.Синоним);
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.СуммаДокумента", НСтр("ru='Сумма документа (без/включая НДС)'"), ФорматЦены,, ТипЦены);
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.СуммаВсегоДокумента", НСтр("ru='Сумма документа (всего)'"), ФорматЦены,, ТипЦены);
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.СуммаБезСкидки", НСтр("ru='Сумма без скидки'"), ФорматЦены,, ТипЦены);
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.СуммаСкидки", НСтр("ru='Сумма скидки (общая)'"), ФорматЦены,, ТипЦены);
	НовыйПараметр.СовместимыеПараметры.Добавить("ЗаказПокупателя.СуммаЗаказа");
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.СуммаДокументаПрописью", НСтр("ru='Сумма документа (прописью)'"), ФорматЦены,, ТипЦены);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.СуммаНДС", НСтр("ru='Сумма НДС'"), ФорматЦены,, ТипЦены);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.НДС", НСтр("ru='НДС'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.ИтоговаяСтрока", НСтр("ru='Итоговая строка'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ЗаказПокупателя.Проект", МетаданныеЗаказа.Реквизиты.Проект.Синоним);
	
	ДобавитьПараметрыОрганизацииВШаблон(ПараметрыШаблона, "ЗаказПокупателя.");
	
	ПараметрыДопРеквизитовЗаказа = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыДополнительныеРеквизиты());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыДополнительныхРеквизитовОбъекта(ПараметрыДопРеквизитовЗаказа, Документы.ЗаказПокупателя.ПустаяСсылка(), "ЗаказПокупателя.ДополнительныеРеквизиты.");
	
	ПараметрыОтветственногоЗаказа = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона, НСтр("ru='Ответственный'"));
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыОтветственногоЗаказа, "ЗаказПокупателя.ОтветственныйФИО", МетаданныеЗаказа.Реквизиты.Ответственный);
	НовыйПараметр.СовместимыеПараметры.Добавить("ЗаказПокупателя.Ответственный.ОтветственныйНаименование");
	
	ПараметрыКИОтветственногоЗаказа = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыОтветственногоЗаказа, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыКонтактнаяИнформация());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыКонтактнойИнформацииОбъекта(ПараметрыКИОтветственногоЗаказа, Справочники.ФизическиеЛица.ПустаяСсылка(), "ЗаказПокупателя.Ответственный.КонтактнаяИнформация.");
	
	ПараметрыДопРеквизитовОтветственногоЗаказа = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыОтветственногоЗаказа, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыДополнительныеРеквизиты());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыДополнительныхРеквизитовОбъекта(ПараметрыДопРеквизитовОтветственногоЗаказа, Справочники.Сотрудники.ПустаяСсылка(), "ЗаказПокупателя.Ответственный.ДополнительныеРеквизиты.");
	
	ПараметрыТаблицыЗапасы = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона, НСтр("ru='Товары, услуги'"));
	
	ПрефиксТаблицаВладелец = "ЗаказПокупателя.Запасы";
	
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыТаблицыЗапасы, "ЗаказПокупателя.Запасы.НомерСтроки", НСтр("ru='Номер строки'"), ПрефиксТаблицаВладелец,,, ТипКоличество);
	
	ПараметрыНоменклатурыТаблицыЗапасы = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыТаблицыЗапасы, НСтр("ru='Товар, услуга'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыНоменклатурыТаблицыЗапасы, "ЗаказПокупателя.Запасы.Номенклатура.Изображение", НСтр("ru='Изображение'"), ПрефиксТаблицаВладелец,,,, ШаблоныПечатиОфисныхДокументов.ВидПараметраИзображение());
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыНоменклатурыТаблицыЗапасы, "ЗаказПокупателя.Запасы.Номенклатура", НСтр("ru='Товар, услуга (представление)'"), ПрефиксТаблицаВладелец);
	НовыйПараметр.СовместимыеПараметры.Добавить("ЗаказПокупателя.Запасы.Номенклатура.НоменклатураНаименование");
	НовыйПараметр.СовместимыеПараметры.Добавить("ЗаказПокупателя.Запасы.Номенклатура.НоменклатураСсылка");
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыНоменклатурыТаблицыЗапасы, "ЗаказПокупателя.Запасы.Номенклатура.Код", НСтр("ru='Код'"), ПрефиксТаблицаВладелец);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыНоменклатурыТаблицыЗапасы, "ЗаказПокупателя.Запасы.Номенклатура.НоменклатураАртикул", НСтр("ru='Артикул'"), ПрефиксТаблицаВладелец);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыНоменклатурыТаблицыЗапасы, "ЗаказПокупателя.Запасы.Номенклатура.Поставщик", НСтр("ru='Поставщик'"), ПрефиксТаблицаВладелец);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыНоменклатурыТаблицыЗапасы, "ЗаказПокупателя.Запасы.Номенклатура.СтранаПроисхождения", НСтр("ru='Страна происхождения'"), ПрефиксТаблицаВладелец);
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыНоменклатурыТаблицыЗапасы, "ЗаказПокупателя.Запасы.Номенклатура.ОписаниеНоменклатуры", НСтр("ru='Описание'"), ПрефиксТаблицаВладелец);
	НовыйПараметр.СовместимыеПараметры.Добавить("ЗаказПокупателя.Запасы.ОписаниеНоменклатуры");
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыНоменклатурыТаблицыЗапасы, "ЗаказПокупателя.Запасы.Номенклатура.Объем", НСтр("ru='Объем'"), ПрефиксТаблицаВладелец,,, МетаданныеНоменклатуры.Реквизиты.Объем.Тип);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыНоменклатурыТаблицыЗапасы, "ЗаказПокупателя.Запасы.Номенклатура.Вес", НСтр("ru='Вес'"), ПрефиксТаблицаВладелец,,, МетаданныеНоменклатуры.Реквизиты.Вес.Тип);
	
	ПараметрыДопРеквизитовНоменклатуры = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыНоменклатурыТаблицыЗапасы, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыДополнительныеРеквизиты());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыДополнительныхРеквизитовОбъекта(ПараметрыДопРеквизитовНоменклатуры, Справочники.Номенклатура.ПустаяСсылка(), "ЗаказПокупателя.Запасы.Номенклатура.ДополнительныеРеквизиты.", ПрефиксТаблицаВладелец);
	
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыТаблицыЗапасы, "ЗаказПокупателя.Запасы.Количество", НСтр("ru='Количество'"), ПрефиксТаблицаВладелец,,, ТипКоличество);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыТаблицыЗапасы, "ЗаказПокупателя.Запасы.ЕдиницаИзмерения", НСтр("ru='Единица измерения'"), ПрефиксТаблицаВладелец);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыТаблицыЗапасы, "ЗаказПокупателя.Запасы.Цена", НСтр("ru='Цена'"), ПрефиксТаблицаВладелец, ФорматЦены,, ТипЦены);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыТаблицыЗапасы, "ЗаказПокупателя.Запасы.Сумма", НСтр("ru='Сумма'"), ПрефиксТаблицаВладелец, ФорматЦены,, ТипЦены);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыТаблицыЗапасы, "ЗаказПокупателя.Запасы.СуммаБезСкидки", НСтр("ru='Сумма без скидки'"), ПрефиксТаблицаВладелец, ФорматЦены,, ТипЦены);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыТаблицыЗапасы, "ЗаказПокупателя.Запасы.СтавкаНДС", НСтр("ru='Ставка НДС'"), ПрефиксТаблицаВладелец);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыТаблицыЗапасы, "ЗаказПокупателя.Запасы.СуммаНДС", НСтр("ru='Сумма НДС'"), ПрефиксТаблицаВладелец, ФорматЦены,, ТипЦены);
	
	ПараметрыСкидки = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыТаблицыЗапасы, НСтр("ru='Скидки'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыСкидки, "ЗаказПокупателя.Запасы.ПроцентАвтоматическойСкидки", НСтр("ru='% авт. скидки'"), ПрефиксТаблицаВладелец, ФорматСкидки,, ТипСкидки);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыСкидки, "ЗаказПокупателя.Запасы.СуммаАвтоматическойСкидки", НСтр("ru='Сумма авт. скидки'"), ПрефиксТаблицаВладелец, ФорматЦены,, ТипЦены);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыСкидки, "ЗаказПокупателя.Запасы.ПроцентСкидкиНаценки", НСтр("ru='% ручной скидки'"), ПрефиксТаблицаВладелец, ФорматСкидки,, ТипСкидки);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыСкидки, "ЗаказПокупателя.Запасы.СуммаСкидкиНаценки", НСтр("ru='Сумма ручной скидки'"), ПрефиксТаблицаВладелец, ФорматЦены,, ТипЦены);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыСкидки, "ЗаказПокупателя.Запасы.СуммаОбщейСкидки", НСтр("ru='Сумма общей скидки'"), ПрефиксТаблицаВладелец, ФорматЦены,, ТипЦены);
	
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыТаблицыЗапасы, "ЗаказПокупателя.Запасы.Всего", НСтр("ru='Всего'"), ПрефиксТаблицаВладелец, ФорматЦены,, ТипЦены);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыТаблицыЗапасы, "ЗаказПокупателя.Запасы.Партия", НСтр("ru='Партия'"), ПрефиксТаблицаВладелец);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыТаблицыЗапасы, "ЗаказПокупателя.Запасы.Резерв", НСтр("ru='Резерв'"), ПрефиксТаблицаВладелец);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыТаблицыЗапасы, "ЗаказПокупателя.Запасы.СтранаПроисхождения", НСтр("ru='Страна происхождения'"), ПрефиксТаблицаВладелец);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыТаблицыЗапасы, "ЗаказПокупателя.Запасы.ДатаОтгрузки", НСтр("ru='Дата отгрузки'"), ПрефиксТаблицаВладелец,,, Новый ОписаниеТипов("Дата"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыТаблицыЗапасы, "ЗаказПокупателя.Запасы.НомерГТД", НСтр("ru='Номер ГТД'"), ПрефиксТаблицаВладелец);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыТаблицыЗапасы, "ЗаказПокупателя.Запасы.СерииНоменклатуры", НСтр("ru='Серии номенклатуры'"), ПрефиксТаблицаВладелец);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыТаблицыЗапасы, "ЗаказПокупателя.Запасы.Спецификация", НСтр("ru='Спецификация'"), ПрефиксТаблицаВладелец);
	
КонецПроцедуры

Процедура ДобавитьПараметрыОрганизацииВШаблон(ПараметрыШаблона, Префикс)
	
	МетаданныеОрганизации = Метаданные.Справочники.Организации;
	
	ПараметрыОрганизации = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона, НСтр("ru='Организация'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыОрганизации, Префикс + "Организация.ОрганизацияНаименование", НСтр("ru='Юридическое наименование'"));
	
	ПараметрыКодыОрганизацииДоговора = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыОрганизации, НСтр("ru='Коды'"));
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКодыОрганизацииДоговора, Префикс + "Организация.ОрганизацияИНН", МетаданныеОрганизации.Реквизиты.ИНН.Синоним);
	НовыйПараметр.СовместимыеПараметры.Добавить(Префикс + "Организация.Коды.ИНН");
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКодыОрганизацииДоговора, Префикс + "Организация.ОрганизацияКодОКВЭД", МетаданныеОрганизации.Реквизиты.КодОКВЭД.Синоним);
	НовыйПараметр.СовместимыеПараметры.Добавить(Префикс + "Организация.Коды.КодОКВЭД");
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКодыОрганизацииДоговора, Префикс + "Организация.ОрганизацияКПП", МетаданныеОрганизации.Реквизиты.КПП.Синоним);
	НовыйПараметр.СовместимыеПараметры.Добавить(Префикс + "Организация.Коды.КПП");
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКодыОрганизацииДоговора, Префикс + "Организация.ОрганизацияОГРН", МетаданныеОрганизации.Реквизиты.ОГРН.Синоним);
	НовыйПараметр.СовместимыеПараметры.Добавить(Префикс + "Организация.Коды.ОГРН");
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКодыОрганизацииДоговора, Префикс + "Организация.ОрганизацияКодПоОКАТО", МетаданныеОрганизации.Реквизиты.КодПоОКАТО.Синоним);
	НовыйПараметр.СовместимыеПараметры.Добавить(Префикс + "Организация.Коды.КодПоОКАТО");
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКодыОрганизацииДоговора, Префикс + "Организация.ОрганизацияКодПоОКПО", МетаданныеОрганизации.Реквизиты.КодПоОКПО.Синоним);
	НовыйПараметр.СовместимыеПараметры.Добавить(Префикс + "Организация.Коды.КодПоОКПО");
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКодыОрганизацииДоговора, Префикс + "Организация.ОрганизацияКодПоОКТМО", МетаданныеОрганизации.Реквизиты.КодПоОКТМО.Синоним);
	НовыйПараметр.СовместимыеПараметры.Добавить(Префикс + "Организация.Коды.КодПоОКТМО");
	
	ПараметрыПодписьРуководителяОрганизацииДоговора = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыОрганизации, МетаданныеОрганизации.Реквизиты.ПодписьРуководителя.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыПодписьРуководителяОрганизацииДоговора, Префикс + "Организация.ПодписьРуководителя.ПодписьРуководителяДействуетНаОсновании", НСтр("ru='Действует на основании'"));
	
	ПараметрыДолжности = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыПодписьРуководителяОрганизацииДоговора, НСтр("ru='Должность'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыДолжности, Префикс + "Организация.ПодписьРуководителя.ПодписьРуководителяДолжность", НСтр("ru='Должность'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыСклоненияПараметра(ПараметрыДолжности, Префикс + "Организация.ПодписьРуководителя.ПодписьРуководителяДолжность", НСтр("ru='Должность'"));
	
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыПодписьРуководителяОрганизацииДоговора, Префикс + "Организация.ПодписьРуководителя.ПодписьРуководителяРасшифровкаПодписи", НСтр("ru='Расшифровка подписи'"));
	
	ПараметрыФизЛица = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыПодписьРуководителяОрганизацииДоговора, НСтр("ru='Физическое лицо'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыФизЛица, Префикс + "Организация.ПодписьРуководителя.ПодписьРуководителяФизическоеЛицоНаименование", НСтр("ru='Физическое лицо'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыСклоненияПараметра(ПараметрыФизЛица, Префикс + "Организация.ПодписьРуководителя.ПодписьРуководителяФизическоеЛицоНаименование", НСтр("ru='Физическое лицо'"));
	
	ПараметрыПодписьПодписьГлавногоБухгалтераОрганизацииДоговора = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыОрганизации, МетаданныеОрганизации.Реквизиты.ПодписьГлавногоБухгалтера.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыПодписьПодписьГлавногоБухгалтераОрганизацииДоговора, Префикс + "Организация.ПодписьГлавногоБухгалтера.ПодписьГлавногоБухгалтераДействуетНаОсновании", НСтр("ru='Действует на основании'"));
	
	ПараметрыДолжности = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыПодписьПодписьГлавногоБухгалтераОрганизацииДоговора, НСтр("ru='Должность'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыДолжности, Префикс + "Организация.ПодписьГлавногоБухгалтера.ПодписьГлавногоБухгалтераДолжность", НСтр("ru='Должность'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыСклоненияПараметра(ПараметрыДолжности, Префикс + "Организация.ПодписьГлавногоБухгалтера.ПодписьГлавногоБухгалтераДолжность", НСтр("ru='Должность'"));
	
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыПодписьПодписьГлавногоБухгалтераОрганизацииДоговора, Префикс + "Организация.ПодписьГлавногоБухгалтера.ПодписьГлавногоБухгалтераРасшифровкаПодписи", НСтр("ru='Расшифровка подписи'"));
	
	ПараметрыФизЛица = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыПодписьПодписьГлавногоБухгалтераОрганизацииДоговора, НСтр("ru='Физическое лицо'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыФизЛица, Префикс + "Организация.ПодписьГлавногоБухгалтера.ПодписьГлавногоБухгалтераФизическоеЛицоНаименование", НСтр("ru='Физическое лицо'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыСклоненияПараметра(ПараметрыФизЛица, Префикс + "Организация.ПодписьГлавногоБухгалтера.ПодписьГлавногоБухгалтераФизическоеЛицоНаименование", НСтр("ru='Физическое лицо'"));
	
	ПараметрыКИОрганизации = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыОрганизации, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыКонтактнаяИнформация());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыКонтактнойИнформацииОбъекта(ПараметрыКИОрганизации, Справочники.Организации.ПустаяСсылка(), Префикс + "Организация.КонтактнаяИнформация.");
	
	ПараметрыДопРеквизитовОрганизации = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыОрганизации, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыДополнительныеРеквизиты());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыДополнительныхРеквизитовОбъекта(ПараметрыДопРеквизитовОрганизации, Справочники.Организации.ПустаяСсылка(), Префикс + "Организация.ДополнительныеРеквизиты.");
	
	ПараметрыСчетаОрганизации = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыОрганизации, НСтр("ru='Банковский счет'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаОрганизации, Префикс + "Организация.ОрганизацияБанковскийСчетПоУмолчанию", НСтр("ru='Банковский счет (полное представление)'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаОрганизации, Префикс + "Организация.ОрганизацияБанковскийСчетПоУмолчаниюПодробно.ОрганизацияБанковскийСчетПоУмолчаниюБанкСВИФТБИК", НСтр("ru='SWIFT'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаОрганизации, Префикс + "Организация.ОрганизацияБанковскийСчетПоУмолчаниюПодробно.ОрганизацияБанковскийСчетПоУмолчаниюБанкНаименование", НСтр("ru='Банк'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаОрганизации, Префикс + "Организация.ОрганизацияБанковскийСчетПоУмолчаниюПодробно.ОрганизацияБанковскийСчетПоУмолчаниюБанкКод", НСтр("ru='БИК'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаОрганизации, Префикс + "Организация.ОрганизацияБанковскийСчетПоУмолчаниюПодробно.ОрганизацияБанковскийСчетПоУмолчаниюБанкКоррСчет", НСтр("ru='Корр. счет'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаОрганизации, Префикс + "Организация.ОрганизацияБанковскийСчетПоУмолчаниюПодробно.ОрганизацияБанковскийСчетПоУмолчаниюНомерСчета", НСтр("ru='Номер счета'"));
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПараметровЗаказа(ОбъектПечати, ОписаниеПараметров, ДополнительныеПараметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК ЗаказПокупателяСсылка,
	|	ЗаказПокупателя.Ссылка КАК ПредставлениеЗаказа,
	|	ЗаказПокупателя.Номер КАК НомерЗаказа,
	|	ЗаказПокупателя.Дата КАК ДатаЗаказа,
	|	ЗаказПокупателя.Организация.Префикс КАК Префикс,
	|	ЗаказПокупателя.СуммаДокумента КАК СуммаЗаказа,
	|	ЗаказПокупателя.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаЗаказа,
	|	ЗаказПокупателя.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЗаказПокупателя.УсловияСчетаЗаказа.ТекстУсловий КАК УсловияЗаказа,
	|	ЗаказПокупателя.УсловияКоммерческогоПредложения.ТекстУсловий КАК УсловияКоммерческогоПредложения,
	|	ЗаказПокупателя.Старт КАК Старт,
	|	ЗаказПокупателя.Финиш КАК Финиш,
	|	ЗаказПокупателя.Проект КАК Проект,
	|	ЗаказПокупателя.Организация КАК ЗаказПокупателяОрганизация,
	|	ЗаказПокупателя.Ответственный КАК ЗаказПокупателяОтветственный,
	|	ЗаказПокупателя.Ответственный.Физлицо КАК ЗаказПокупателяОтветственныйФизЛицо,
	|	ЗаказПокупателя.Ответственный.Наименование КАК ОтветственныйФИО,
	|	ЗаказПокупателя.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Содержание КАК СТРОКА(1000))) <> """"
	|				ТОГДА ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Содержание КАК СТРОКА(1000))
	|			КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателя.Запасы.Номенклатура) = ТИП(СТРОКА)
	|				ТОГДА ЗаказПокупателя.Запасы.Номенклатура
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ЗаказПокупателя.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК НоменклатураНаименование,
	|		Номенклатура.Артикул КАК НоменклатураАртикул,
	|		Номенклатура.Штрихкод КАК Штрихкод,
	|		Номенклатура.Комментарий КАК ОписаниеНоменклатуры,
	|		Номенклатура КАК НоменклатураСсылка,
	|		Характеристика.Наименование КАК ХарактеристикаНаименование,
	|		Характеристика КАК ХарактеристикаСсылка,
	|		Партия КАК Партия,
	|		СерииНоменклатуры КАК СерииНоменклатуры,
	|		Резерв КАК Резерв,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Цена КАК Цена,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		Сумма КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		ДатаОтгрузки КАК ДатаОтгрузки,
	|		Спецификация КАК Спецификация,
	|		Содержание КАК Содержание,
	|		ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|		Количество КАК Количество,
	|		СтранаПроисхождения КАК СтранаПроисхождения,
	|		НомерГТД КАК НомерГТД,
	|		НомерВариантаКП КАК НомерВариантаКП,
	|		ЭтоРазделитель КАК ЭтоРазделитель,
	|		ЛОЖЬ КАК ЭтоНабор,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Запасы.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И ЗаказПокупателя.Запасы.НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора
	|	) КАК Запасы,
	|	ЗаказПокупателя.Комментарий КАК Комментарий,
	|	ЗаказПокупателя.ДобавленныеНаборы.(
	|		НомерВариантаКП КАК НомерВариантаКП,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.ДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ЗаказПокупателя.ДобавленныеНаборы.НоменклатураНабора.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.ДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ЗапасНабора,
	|		НоменклатураНабора.ВариантПечатиНабора КАК ВариантПечатиНабора,
	|		НоменклатураНабора.ТипНоменклатуры КАК ТипНоменклатурыНабора,
	|		НоменклатураНабора.Артикул КАК АртикулНабора,
	|		НоменклатураНабора.Код КАК КодНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияНабора,
	|		ИСТИНА КАК ВыводитьИтоги
	|	) КАК ТаблицаДобавленныеНаборы
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", ОбъектПечати);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаказа = Результат[0];
	
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеЗаказа, "ЗаказПокупателя.");
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеЗаказа, "ЗаказПокупателя.Ответственный.");
	
	ЗаполнитьЗначенияПараметровОрганизации(ОписаниеПараметров, "ЗаказПокупателя.Организация.", ДанныеЗаказа.ЗаказПокупателяОрганизация, ОбъектПечати);
	
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияДополнительныхРеквизитов(ОписаниеПараметров, "ЗаказПокупателя.", ДанныеЗаказа.ЗаказПокупателяСсылка);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияДополнительныхРеквизитов(ОписаниеПараметров, "ЗаказПокупателя.Ответственный.", ДанныеЗаказа.ЗаказПокупателяОтветственный);
	
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияКонтактнойИнформации(ОписаниеПараметров, "ЗаказПокупателя.Ответственный.", ДанныеЗаказа.ЗаказПокупателяОтветственныйФизЛицо);
	
	НомерЗаказа = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(ДанныеЗаказа.ДатаЗаказа, ДанныеЗаказа.НомерЗаказа, ДанныеЗаказа.Префикс);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначениеПараметра(ОписаниеПараметров, "ЗаказПокупателя.НомерЗаказа", НомерЗаказа);
	
	ПриВыводеТаблицыПараметровШаблона(ДополнительныеПараметры, "Запасы", ОписаниеПараметров);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПараметровКонтрагента(Контрагент, ОписаниеПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.Ответственный КАК КонтрагентОтветственный,
	|	Контрагенты.Ответственный.Физлицо КАК КонтрагентОтветственныйФизлицо,
	|	Контрагенты.Ответственный.Наименование КАК ОтветственныйФИО,
	|	Контрагенты.Наименование КАК КонтрагентНаименование,
	|	Контрагенты.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	|	Контрагенты.БанковскийСчетПоУмолчанию КАК КонтрагентБанковскийСчетПоУмолчанию,
	|	Контрагенты.БанковскийСчетПоУмолчанию.НомерСчета КАК КонтрагентБанковскийСчетПоУмолчаниюНомерСчета,
	|	Контрагенты.БанковскийСчетПоУмолчанию.Банк.Наименование КАК КонтрагентБанковскийСчетПоУмолчаниюБанкНаименование,
	|	Контрагенты.БанковскийСчетПоУмолчанию.Банк.КоррСчет КАК КонтрагентБанковскийСчетПоУмолчаниюБанкКоррСчет,
	|	Контрагенты.БанковскийСчетПоУмолчанию.Банк.СВИФТБИК КАК КонтрагентБанковскийСчетПоУмолчаниюБанкСВИФТБИК,
	|	Контрагенты.БанковскийСчетПоУмолчанию.Банк.Код КАК КонтрагентБанковскийСчетПоУмолчаниюБанкКод,
	|	Контрагенты.ИНН КАК КонтрагентИНН,
	|	Контрагенты.КПП КАК КонтрагентКПП,
	|	Контрагенты.КодПоОКПО КАК КонтрагентКодПоОКПО,
	|	Контрагенты.РегистрационныйНомер КАК КонтрагентРегистрационныйНомер,
	|	Контрагенты.СвидетельствоСерияНомер КАК КонтрагентСвидетельствоСерияНомер,
	|	Контрагенты.СвидетельствоДатаВыдачи КАК КонтрагентСвидетельствоДатаВыдачи,
	|	Контрагенты.ДатаРождения КАК КонтрагентДатаРождения,
	|	Контрагенты.ДокументУдостоверяющийЛичность КАК КонтрагентДокументУдостоверяющийЛичность,
	|	Контрагенты.ФИО КАК КонтрагентФИОФизЛица,
	|	Контрагенты.КонтактноеЛицоПодписант КАК КонтрагентКонтактноеЛицоПодписантСсылка,
	|	Контрагенты.КонтактноеЛицоПодписант.Наименование КАК КонтрагентКонтактноеЛицоПодписантНаименование,
	|	Контрагенты.КонтактноеЛицоПодписант.ДатаРождения КАК КонтрагентКонтактноеЛицоПодписантДатаРождения,
	|	СвязиКонтрагентКонтактПодписант.Должность КАК КонтрагентКонтактноеЛицоПодписантДолжность,
	|	Контрагенты.КонтактноеЛицоПодписант.ДокументУдостоверяющийЛичность КАК КонтрагентКонтактноеЛицоПодписантДокументУдостоверяющийЛичность,
	|	Контрагенты.КонтактноеЛицо КАК КонтрагентКонтактноеЛицоСсылка,
	|	Контрагенты.КонтактноеЛицо.Наименование КАК КонтрагентКонтактноеЛицоНаименование,
	|	Контрагенты.КонтактноеЛицо.ДатаРождения КАК КонтрагентКонтактноеЛицоДатаРождения,
	|	СвязиКонтрагентКонтактКонтактноеЛицо.Должность КАК КонтрагентКонтактноеЛицоДолжность,
	|	Контрагенты.КонтактноеЛицо.ДокументУдостоверяющийЛичность КАК КонтрагентКонтактноеЛицоДокументУдостоверяющийЛичность
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтактКонтактноеЛицо
	|		ПО Контрагенты.Ссылка = СвязиКонтрагентКонтактКонтактноеЛицо.Контрагент
	|			И (СвязиКонтрагентКонтактКонтактноеЛицо.Контакт = Контрагенты.Ссылка.КонтактноеЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтактПодписант
	|		ПО Контрагенты.Ссылка = СвязиКонтрагентКонтактПодписант.Контрагент
	|			И (СвязиКонтрагентКонтактПодписант.Контакт = Контрагенты.Ссылка.КонтактноеЛицоПодписант)
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент.Контрагент);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКонтрагента = Результат[0];
	
	ДанныеКонтрагента.КонтрагентКПП = Справочники.Контрагенты.КППНаДату(Контрагент.Контрагент, Контрагент.Дата);
	ДанныеКонтрагента.КонтрагентНаименованиеПолное = Справочники.Контрагенты.ПолноеНаименованиеНаДату(Контрагент.Контрагент, 
		Контрагент.Дата);
	
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеКонтрагента, "ЗаказПокупателя.Контрагент.");
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеКонтрагента, "ЗаказПокупателя.Контрагент.КонтрагентБанковскийСчетПоУмолчаниюПодробно.");
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеКонтрагента, "ЗаказПокупателя.Контрагент.Ответственный.");
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеКонтрагента, "ЗаказПокупателя.Контрагент.КонтактноеЛицо.");
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеКонтрагента, "ЗаказПокупателя.Контрагент.КонтактноеЛицоПодписант.");
	
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияДополнительныхРеквизитов(ОписаниеПараметров, "ЗаказПокупателя.Контрагент.", ДанныеКонтрагента.Ссылка);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияДополнительныхРеквизитов(ОписаниеПараметров, "ЗаказПокупателя.Контрагент.Ответственный.", ДанныеКонтрагента.КонтрагентОтветственный);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияДополнительныхРеквизитов(ОписаниеПараметров, "ЗаказПокупателя.Контрагент.КонтактноеЛицо.", ДанныеКонтрагента.КонтрагентКонтактноеЛицоСсылка);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияДополнительныхРеквизитов(ОписаниеПараметров, "ЗаказПокупателя.Контрагент.КонтактноеЛицоПодписант.", ДанныеКонтрагента.КонтрагентКонтактноеЛицоПодписантСсылка);
	
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияКонтактнойИнформации(ОписаниеПараметров, "ЗаказПокупателя.Контрагент.", ДанныеКонтрагента.Ссылка, Контрагент.Дата);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияКонтактнойИнформации(ОписаниеПараметров, "ЗаказПокупателя.Контрагент.Ответственный.", ДанныеКонтрагента.КонтрагентОтветственныйФизлицо);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияКонтактнойИнформации(ОписаниеПараметров, "ЗаказПокупателя.Контрагент.КонтактноеЛицо.", ДанныеКонтрагента.КонтрагентКонтактноеЛицоСсылка);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияКонтактнойИнформации(ОписаниеПараметров, "ЗаказПокупателя.Контрагент.КонтактноеЛицоПодписант.", ДанныеКонтрагента.КонтрагентКонтактноеЛицоПодписантСсылка);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПараметровОрганизации(ОписаниеПараметров, Префикс, Организация, Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Документ.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|			ТОГДА Документ.БанковскийСчет
	|		ИНАЧЕ Организации.БанковскийСчетПоУмолчанию
	|	КОНЕЦ КАК БанковскийСчет,
	|	ВЫБОР
	|		КОГДА Документ.ПодписьГлавногоБухгалтера <> ЗНАЧЕНИЕ(Справочник.Подписи.ПустаяСсылка)
	|			ТОГДА Документ.ПодписьГлавногоБухгалтера
	|		ИНАЧЕ Организации.ПодписьГлавногоБухгалтера
	|	КОНЕЦ КАК ПодписьГлавногоБухгалтера,
	|	ВЫБОР
	|		КОГДА Документ.ПодписьРуководителя <> ЗНАЧЕНИЕ(Справочник.Подписи.ПустаяСсылка)
	|			ТОГДА Документ.ПодписьРуководителя
	|		ИНАЧЕ Организации.ПодписьРуководителя
	|	КОНЕЦ КАК ПодписьРуководителя
	|ПОМЕСТИТЬ ДанныеПечати
	|ИЗ
	|	Документ.ЗаказПокупателя КАК Документ,
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Документ.Ссылка = &Документ
	|	И Организации.Ссылка = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.НаименованиеПолное КАК ОрганизацияНаименование,
	|	Организации.ИНН КАК ОрганизацияИНН,
	|	Организации.КПП КАК ОрганизацияКПП,
	|	Организации.ОГРН КАК ОрганизацияОГРН,
	|	Организации.КодПоОКАТО КАК ОрганизацияКодПоОКАТО,
	|	Организации.КодОКВЭД КАК ОрганизацияКодОКВЭД,
	|	Организации.КодПоОКПО КАК ОрганизацияКодПоОКПО,
	|	Организации.КодПоОКТМО КАК ОрганизацияКодПоОКТМО,
	|	ДанныеПечати.ПодписьРуководителя.ДействуетНаОсновании КАК ПодписьРуководителяДействуетНаОсновании,
	|	ДанныеПечати.ПодписьРуководителя.Должность КАК ПодписьРуководителяДолжность,
	|	ДанныеПечати.ПодписьРуководителя.РасшифровкаПодписи КАК ПодписьРуководителяРасшифровкаПодписи,
	|	ДанныеПечати.ПодписьРуководителя.ФизическоеЛицо.Наименование КАК ПодписьРуководителяФизическоеЛицоНаименование,
	|	ДанныеПечати.ПодписьГлавногоБухгалтера.ДействуетНаОсновании КАК ПодписьГлавногоБухгалтераДействуетНаОсновании,
	|	ДанныеПечати.ПодписьГлавногоБухгалтера.Должность КАК ПодписьГлавногоБухгалтераДолжность,
	|	ДанныеПечати.ПодписьГлавногоБухгалтера.РасшифровкаПодписи КАК ПодписьГлавногоБухгалтераРасшифровкаПодписи,
	|	ДанныеПечати.ПодписьГлавногоБухгалтера.ФизическоеЛицо.Наименование КАК ПодписьГлавногоБухгалтераФизическоеЛицоНаименование,
	|	ДанныеПечати.БанковскийСчет КАК ОрганизацияБанковскийСчетПоУмолчанию,
	|	ДанныеПечати.БанковскийСчет.Банк.СВИФТБИК КАК ОрганизацияБанковскийСчетПоУмолчаниюБанкСВИФТБИК,
	|	ДанныеПечати.БанковскийСчет.Банк.Наименование КАК ОрганизацияБанковскийСчетПоУмолчаниюБанкНаименование,
	|	ДанныеПечати.БанковскийСчет.Банк.Код КАК ОрганизацияБанковскийСчетПоУмолчаниюБанкКод,
	|	ДанныеПечати.БанковскийСчет.Банк.КоррСчет КАК ОрганизацияБанковскийСчетПоУмолчаниюБанкКоррСчет,
	|	ДанныеПечати.БанковскийСчет.НомерСчета КАК ОрганизацияБанковскийСчетПоУмолчаниюНомерСчета
	|ИЗ
	|	Справочник.Организации КАК Организации,
	|	ДанныеПечати КАК ДанныеПечати
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДатаЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Дата");
	
	ДанныеОрганизации = Результат[0];
	
	ДанныеОрганизации.ОрганизацияКПП 			= Справочники.Организации.КППНаДату(Организация, ДатаЗаказа);
	ДанныеОрганизации.ОрганизацияНаименование 	= Справочники.Организации.ПолноеНаименованиеНаДату(Организация, ДатаЗаказа);
	
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеОрганизации, Префикс);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеОрганизации, Префикс + "ПодписьРуководителя.");
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеОрганизации, Префикс + "ПодписьГлавногоБухгалтера.");
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеОрганизации, Префикс + "ОрганизацияБанковскийСчетПоУмолчаниюПодробно.");
	
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияДополнительныхРеквизитов(ОписаниеПараметров, Префикс, Организация);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияКонтактнойИнформации(ОписаниеПараметров, 
		Префикс, 
		Организация, 
		ДатаЗаказа);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиДокумента(СтрокаТабличнойЧасти, ОписаниеПараметров, СтруктураИтогов, ПрефиксПараметраСтроки, ПараметрыВывода)
	
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		НомерСтроки = "";
	ИначеЕсли СтрокаТабличнойЧасти.ЭтоРазделитель Тогда
		СтруктураИтогов.НомерСтроки = 0;
		НомерСтроки = "";
	Иначе
		СтруктураИтогов.НомерСтроки = СтруктураИтогов.НомерСтроки + 1;
		НомерСтроки = СтруктураИтогов.НомерСтроки;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
		Скидка         = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		СуммаБезСкидки = Скидка;
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0 И СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0 Тогда
		Скидка         = 0;
		СуммаБезСкидки = СтрокаТабличнойЧасти.Сумма;
	Иначе
		Скидка         = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена - СтрокаТабличнойЧасти.Сумма; // АвтоматическиеСкидки;
		СуммаБезСкидки = СтрокаТабличнойЧасти.Сумма + Скидка;
	КонецЕсли;
	
	ЭтоВыводВФайл = ПараметрыВывода <> Неопределено;
	Если ЭтоВыводВФайл Тогда
		ДанныеПечати = Новый Соответствие;
		ПрефиксПараметраНоменклатура = ПрефиксПараметраСтроки + "Номенклатура.";
		
		Если СтрокаТабличнойЧасти.ЭтоРазделитель Тогда
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "НомерСтроки", НомерСтроки);
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "Номенклатура", СтрокаТабличнойЧасти.ПредставлениеНоменклатуры);
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "Сумма",        СтрокаТабличнойЧасти.Сумма);
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "СуммаНДС",     СтрокаТабличнойЧасти.СуммаНДС);
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "Всего",        СтрокаТабличнойЧасти.Всего);
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "ЕдиницаИзмерения", "");
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "Количество", "");
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "Цена",       "");
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "СтавкаНДС",  "");
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "ПроцентАвтоматическойСкидки", "");
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "СуммаАвтоматическойСкидки", "");
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "ПроцентСкидкиНаценки", "");
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "СуммаСкидкиНаценки", "");
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "Резерв", "");
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "СтранаПроисхождения", "");
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "СуммаОбщейСкидки", "");
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "СуммаБезСкидки", "");
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "ДатаОтгрузки", "");
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "Спецификация", "");
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "СерииНоменклатуры", "");
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "НомерГТД", "");
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "СтранаПроисхождения", "");
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "Партия", "");
			
			НоменклатураПустаяСсылка = Справочники.Номенклатура.ПустаяСсылка();
			
			ЗаполнитьДанныеПечатиНоменклатуры(ДанныеПечати, ПрефиксПараметраНоменклатура, НоменклатураПустаяСсылка);
			ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияДополнительныхРеквизитов(ОписаниеПараметров, ПрефиксПараметраНоменклатура, НоменклатураПустаяСсылка);
			ЗаполнитьДанныеПечатиИзображениеНоменклатуры(ОписаниеПараметров, НоменклатураПустаяСсылка, Неопределено, ПрефиксПараметраНоменклатура + "Изображение", ПараметрыВывода);
		Иначе
			ПараметрыНоменклатуры = Новый Структура;
			ПараметрыНоменклатуры.Вставить("Содержание", СтрокаТабличнойЧасти.Содержание);
			ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", СтрокаТабличнойЧасти.ПредставлениеНоменклатуры);
			ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", СтрокаТабличнойЧасти.Характеристика);
			ПараметрыНоменклатуры.Вставить("ПредставлениеАртикула", СтрокаТабличнойЧасти.Артикул);
			ПараметрыНоменклатуры.Вставить("НеобходимоВыделитьКакСоставНабора", СтрокаТабличнойЧасти.НеобходимоВыделитьКакСоставНабора);
			
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "НомерСтроки", НомерСтроки);
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "Номенклатура", ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры));
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "Количество", СтрокаТабличнойЧасти.Количество);
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "Цена", СтрокаТабличнойЧасти.Цена);
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "Сумма", СтрокаТабличнойЧасти.Сумма);
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "СтавкаНДС", СтрокаТабличнойЧасти.СтавкаНДС);
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "СуммаНДС", СтрокаТабличнойЧасти.СуммаНДС);
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "ПроцентАвтоматическойСкидки", СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки);
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "СуммаАвтоматическойСкидки", СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки);
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "ПроцентСкидкиНаценки", СтрокаТабличнойЧасти.ПроцентСкидкиНаценки);
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "СуммаСкидкиНаценки", СтрокаТабличнойЧасти.СуммаСкидкиНаценки);
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "Всего",  СтрокаТабличнойЧасти.Всего);
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "Резерв", СтрокаТабличнойЧасти.Резерв);
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "СтранаПроисхождения", СтрокаТабличнойЧасти.СтранаПроисхождения);
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "СуммаОбщейСкидки", Скидка);
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "СуммаБезСкидки", СуммаБезСкидки);
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "ДатаОтгрузки", СтрокаТабличнойЧасти.ДатаОтгрузки);
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "Спецификация", СтрокаТабличнойЧасти.Спецификация);
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "СерииНоменклатуры", СтрокаТабличнойЧасти.СерииНоменклатуры);
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "НомерГТД", СтрокаТабличнойЧасти.НомерГТД);
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "СтранаПроисхождения", СтрокаТабличнойЧасти.СтранаПроисхождения);
			ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "Партия", СтрокаТабличнойЧасти.Партия);
			
			ЗаполнитьДанныеПечатиНоменклатуры(ДанныеПечати, ПрефиксПараметраНоменклатура, СтрокаТабличнойЧасти.Номенклатура);
			ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияДополнительныхРеквизитов(ОписаниеПараметров, ПрефиксПараметраНоменклатура, СтрокаТабличнойЧасти.Номенклатура);
			ЗаполнитьДанныеПечатиИзображениеНоменклатуры(ОписаниеПараметров, СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.НоменклатураФайлКартинки, ПрефиксПараметраНоменклатура + "Изображение", ПараметрыВывода);
		КонецЕсли;
		
		ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтруктуры(ОписаниеПараметров, ДанныеПечати);
	КонецЕсли;
	
	Если НЕ СтрокаТабличнойЧасти.ЭтоНабор И НЕ СтрокаТабличнойЧасти.ЭтоРазделитель Тогда
		СтруктураИтогов.Сумма          = СтруктураИтогов.Сумма      + СтрокаТабличнойЧасти.Сумма;
		СтруктураИтогов.СуммаБезСкидки = СтруктураИтогов.СуммаБезСкидки + СуммаБезСкидки;
		СтруктураИтогов.СуммаСкидки    = СтруктураИтогов.СуммаСкидки + СтрокаТабличнойЧасти.СуммаСкидкиНаценки;
		СтруктураИтогов.СуммаНДС       = СтруктураИтогов.СуммаНДС   + СтрокаТабличнойЧасти.СуммаНДС;
		СтруктураИтогов.Всего          = СтруктураИтогов.Всего      + СтрокаТабличнойЧасти.Всего;
		СтруктураИтогов.Количество     = СтруктураИтогов.Количество + 1;
		СтруктураИтогов.Вес            = СтруктураИтогов.Вес + СтрокаТабличнойЧасти.Вес;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПечатиНоменклатуры(ДанныеПечати, Префикс, Номенклатура)
	
	РеквизитыНоменклатуры = "Код,Артикул,Поставщик,СтранаПроисхождения,Комментарий,Объем,Вес";
	
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, РеквизитыНоменклатуры);
	Иначе
		ДанныеНоменклатуры = Новый Структура(РеквизитыНоменклатуры);
	КонецЕсли;
	
	ДанныеПечати.Вставить(Префикс + "Код", ДанныеНоменклатуры.Код);
	ДанныеПечати.Вставить(Префикс + "НоменклатураАртикул", ДанныеНоменклатуры.Артикул);
	ДанныеПечати.Вставить(Префикс + "Поставщик", ДанныеНоменклатуры.Поставщик);
	ДанныеПечати.Вставить(Префикс + "СтранаПроисхождения", ДанныеНоменклатуры.СтранаПроисхождения);
	ДанныеПечати.Вставить(Префикс + "ОписаниеНоменклатуры", ДанныеНоменклатуры.Комментарий);
	ДанныеПечати.Вставить(Префикс + "Объем", ДанныеНоменклатуры.Объем);
	ДанныеПечати.Вставить(Префикс + "Вес", ДанныеНоменклатуры.Вес);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПечатиИзображениеНоменклатуры(ОписаниеПараметров, Номенклатура, ФайлКартинки, ИмяПараметра, ПараметрыВывода)
	
	ПараметрИзображениеНоменклатуры = ШаблоныПечатиОфисныхДокументов.ОписаниеПараметра(ОписаниеПараметров, ИмяПараметра);
	
	Если ПараметрИзображениеНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШаблоныПечатиОфисныхДокументов.ОчиститьЗначенияПараметров(ПараметрИзображениеНоменклатуры);
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияПараметраИзображение(ПараметрИзображениеНоменклатуры, ФайлКартинки, ПараметрыВывода);
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсПечати

#Область СводныйОтчет

Функция СформироватьСводныйОтчетЗаказПокупателя(МассивОбъектов, ОбъектыПечати, Ошибки)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ПервыйДокумент = Истина;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказПокупателя.ПФ_MXL_СводныйОтчет");
	ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
	
	Для Каждого ЗаказПокупателя Из МассивОбъектов Цикл
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		Параметры = Новый Структура;
		Параметры.Вставить("ЗаказПокупателя", ЗаказПокупателя);
		ВывестиСекциюЗаголовок(Макет, ТабличныйДокумент, Параметры);
		ВывестиСекциюЗапасы(Макет, ТабличныйДокумент, Параметры, Ошибки);
		ВывестиСекциюОтгрузка(Макет, ТабличныйДокумент, Параметры);
		ВывестиГрафикПлатежей(Макет, ТабличныйДокумент, Параметры);
		ВывестиСекциюОплаты(Макет, ТабличныйДокумент, Параметры);
		ВывестиСекциюДоходыРасходы(Макет, ТабличныйДокумент, Параметры);
		ВывестиСекциюСобытия(Макет, ТабличныйДокумент, Параметры);
	КонецЦикла; 
	
	ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьСводныйОтчетЗаказНаряд(МассивОбъектов, ОбъектыПечати, Ошибки)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ПервыйДокумент = Истина;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказПокупателя.ПФ_MXL_СводныйОтчет");
	ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
	
	Для каждого ЗаказПокупателя Из МассивОбъектов Цикл
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		Параметры = Новый Структура;
		Параметры.Вставить("ЗаказПокупателя", ЗаказПокупателя);
		Параметры.Вставить("ЭтоЗаказНаряд", Истина);
		ВывестиСекциюЗаголовокЗаказНаряд(Макет, ТабличныйДокумент, Параметры);
		ВывестиСекциюРаботы(Макет, ТабличныйДокумент, Параметры);
		ВывестиСекциюЗапасы(Макет, ТабличныйДокумент, Параметры, Ошибки);
		ВывестиГрафикПлатежей(Макет, ТабличныйДокумент, Параметры);
		ВывестиСекциюОплаты(Макет, ТабличныйДокумент, Параметры);
		ВывестиСекциюДоходыРасходы(Макет, ТабличныйДокумент, Параметры);
		ВывестиСекциюСобытия(Макет, ТабличныйДокумент, Параметры);
	КонецЦикла; 
	
	ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ТекстЗапросаСекцияЗаголовок(ВыводитьПродажи)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	СУММА(ЗаказПокупателяЗапасы.Количество * ВЫБОР
	|			КОГДА ЗаказПокупателяЗапасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				ТОГДА ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Количество,
	|	СУММА(ЗаказПокупателяЗапасы.Всего) КАК Сумма,
	|	СУММА(ЗаказПокупателяЗапасы.Цена * ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.ПроцентСкидкиНаценки / 100) КАК СуммаРучнойСкидки,
	|	СУММА(ЗаказПокупателяЗапасы.Цена * ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки / 100) КАК СуммаАвтоматическойСкидки
	|ПОМЕСТИТЬ Запасы
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка = &ЗаказПокупателя
	|	И ЗаказПокупателяЗапасы.Ссылка.ОсновнойВариантКП = ЗаказПокупателяЗапасы.НомерВариантаКП
	|	И НЕ ЗаказПокупателяЗапасы.ЭтоРазделитель
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяЗапасы.Номенклатура,
	|	ЗаказПокупателяЗапасы.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателя.НоменклатураДоставки,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	1,
	|	ЗаказПокупателя.СтоимостьДоставки + ВЫБОР
	|		КОГДА ЗаказПокупателя.СуммаВключаетНДС
	|			ТОГДА 0
	|		ИНАЧЕ ЗаказПокупателя.СуммаНДСДоставки
	|	КОНЕЦ,
	|	0,
	|	0
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ЗаказПокупателя
	|	И ЗаказПокупателя.НоменклатураДоставки <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ЗаказПокупателя.СтоимостьДоставки <> 0";
	
	Если ВыводитьПродажи Тогда
		ДобавитьЗапросВПакет(ТекстЗапроса,
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ПродажиОбороты.Регистратор) КАК ДокументОтгрузки,
		|	МАКСИМУМ(ПродажиОбороты.Период) КАК ДатаОтгрузки,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПродажиОбороты.Регистратор) КАК КоличествоДокументов,
		|	СУММА(ПродажиОбороты.СуммаОборот) КАК СуммаОтгрузки
		|ПОМЕСТИТЬ Продажи
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(, , Регистратор, ЗаказПокупателя = &ЗаказПокупателя) КАК ПродажиОбороты");
	Иначе
		ДобавитьЗапросВПакет(ТекстЗапроса,
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НЕОПРЕДЕЛЕНО КАК ДокументОтгрузки,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОтгрузки,
		|	0 КАК КоличествоДокументов,
		|	0 КАК СуммаОтгрузки
		|ПОМЕСТИТЬ Продажи");
	КонецЕсли;
	
	Если ВыводитьПродажи Тогда
		ДобавитьЗапросВПакет(ТекстЗапроса,
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказыПокупателейОбороты.Номенклатура КАК Номенклатура,
		|	ЗаказыПокупателейОбороты.Характеристика КАК Характеристика,
		|	СУММА(-ЗаказыПокупателейОбороты.КоличествоОборот) КАК Количество
		|ПОМЕСТИТЬ Отгрузка
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Обороты(, , Регистратор, ЗаказПокупателя = &ЗаказПокупателя) КАК ЗаказыПокупателейОбороты
		|ГДЕ
		|	НЕ ЗаказыПокупателейОбороты.Регистратор ССЫЛКА Документ.ЗаказПокупателя
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыПокупателейОбороты.Номенклатура,
		|	ЗаказыПокупателейОбороты.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА СУММА(Запасы.Сумма) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(ВЫБОР
		|						КОГДА Запасы.Количество = 0
		|							ТОГДА Запасы.Сумма
		|						ИНАЧЕ ЕСТЬNULL(Отгрузка.Количество, 0) / Запасы.Количество * Запасы.Сумма
		|					КОНЕЦ) / СУММА(Запасы.Сумма) * 100 КАК ЧИСЛО(10, 2))
		|	КОНЕЦ КАК ПроцентОтгрузки
		|ПОМЕСТИТЬ СостояниеОтгрузки
		|ИЗ
		|	Запасы КАК Запасы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Отгрузка КАК Отгрузка
		|		ПО Запасы.Номенклатура = Отгрузка.Номенклатура
		|			И Запасы.Характеристика = Отгрузка.Характеристика");
	Иначе
		ДобавитьЗапросВПакет(ТекстЗапроса,
		"ВЫБРАТЬ
		|	0 КАК ПроцентОтгрузки
		|ПОМЕСТИТЬ СостояниеОтгрузки")
	КонецЕсли; 

	ДобавитьЗапросВПакет(ТекстЗапроса,
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателя.Номер КАК Номер,
	|	ЗаказПокупателя.Дата КАК Дата,
	|	ЗаказПокупателя.СуммаДокумента КАК СуммаДокумента,
	|	ЗаказПокупателя.ВалютаДокумента.СимвольноеПредставление КАК Валюта,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.ВалютаДокумента) КАК ВалютаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.Контрагент) КАК Контрагент,
	|	ЗаказПокупателя.Организация КАК Организация,
	|	ЗаказПокупателя.Организация.Префикс КАК Префикс,
	|	ЗаказПокупателя.Ответственный КАК Ответственный,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ПоложениеДатыОтгрузки = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ЗаказПокупателя.ДатаОтгрузки
	|	КОНЕЦ КАК ПлановаяДатаОтгрузки,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.Контрагент.КонтактноеЛицо) КАК КонтактноеЛицо,
	|	СвязиКонтрагентКонтакт.Должность КАК Должность,
	|	ЗаказПокупателя.СтруктурнаяЕдиницаПродажи КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|		ИНАЧЕ ЗаказПокупателя.СтруктурнаяЕдиницаРезерв
	|	КОНЕЦ КАК Склад,
	|	ЕСТЬNULL(Скидки.СуммаРучнойСкидки, 0) КАК СуммаРучнойСкидки,
	|	ЕСТЬNULL(Скидки.СуммаАвтоматическойСкидки, 0) КАК СуммаАвтоматическойСкидки,
	|	ЕСТЬNULL(Скидки.СуммаРучнойСкидки, 0) + ЕСТЬNULL(Скидки.СуммаАвтоматическойСкидки, 0) КАК СуммаСкидки,
	|	ЗаказПокупателя.Контрагент.КонтактнаяИнформация.(
	|		Тип КАК КИКонтрагентаТип,
	|		Вид КАК КИКонтрагентаВид,
	|		Представление КАК КИКонтрагентаПредставление
	|	) КАК КИКонтрагента,
	|	КонтактныеЛица.КонтактнаяИнформация.(
	|		Тип КАК КИКонтактногоЛицаТип,
	|		Вид КАК КИКонтактногоЛицаВид,
	|		Представление КАК КИКонтактногоЛицаПредставление
	|	) КАК КИКонтактногоЛица,
	|	ЗаказПокупателя.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЕСТЬNULL(Оплаты.ДокументОплаты, НЕОПРЕДЕЛЕНО) КАК ДокументОплаты,
	|	ЕСТЬNULL(Оплаты.ДатаОплаты, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОплаты,
	|	ЕСТЬNULL(Оплаты.СуммаОплаты, 0) КАК СуммаОплаты,
	|	ЕСТЬNULL(Оплаты.КоличествоДокументов, 0) КАК КоличествоДокументовОплаты,
	|	ЕСТЬNULL(Продажи.ДокументОтгрузки, НЕОПРЕДЕЛЕНО) КАК ДокументОтгрузки,
	|	ЕСТЬNULL(Продажи.ДатаОтгрузки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОтгрузки,
	|	ЕСТЬNULL(Продажи.КоличествоДокументов, 0) КАК КоличествоДокументовОтгрузки,
	|	ЕСТЬNULL(Продажи.СуммаОтгрузки, 0) КАК СуммаОтгрузки,
	|	ЗаказПокупателя.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ЕСТЬNULL(СостояниеОтгрузки.ПроцентОтгрузки, 0) КАК ПроцентОтгрузки,
	|	ЗаказПокупателя.Комментарий КАК Комментарий,
	|	ЗаказПокупателя.ПометкаУдаления КАК ПометкаУдаления,
	|	ЗаказПокупателя.Проведен КАК Проведен,
	|	ЗаказПокупателя.СпособДоставки КАК СпособДоставки,
	|	ЗаказПокупателя.СлужбаДоставки КАК СлужбаДоставки,
	|	ЗаказПокупателя.АдресДоставки КАК АдресДоставки,
	|	ЗаказПокупателя.КонтактноеЛицо КАК КонтактноеЛицоДоставки,
	|	ЗаказПокупателя.КонтактныйТелефон КАК КонтактныйТелефон,
	|	ЗаказПокупателя.ЗапаснойТелефон КАК ЗапаснойТелефон,
	|	ЗаказПокупателя.ЗонаТариф КАК ЗонаТариф,
	|	ЗаказПокупателя.ТрекНомер КАК ТрекНомер,
	|	ЗаказПокупателя.ДополнительнаяИнформацияПоДоставке КАК ДополнительнаяИнформацияПоДоставке,
	|	ЗаказПокупателя.СтоимостьДоставки КАК СтоимостьДоставки,
	|	ЗаказПокупателя.СлужбаДоставки.ВариантУчета КАК ВариантУчетаДоставки,
	|	ЗаказПокупателя.ПоложениеСклада КАК ПоложениеСклада
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица КАК КонтактныеЛица
	|		ПО ЗаказПокупателя.Контрагент.КонтактноеЛицо = КонтактныеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтакт
	|		ПО ЗаказПокупателя.Контрагент.КонтактноеЛицо = СвязиКонтрагентКонтакт.Контакт
	|			И ЗаказПокупателя.Контрагент = СвязиКонтрагентКонтакт.Контрагент,
	|	(ВЫБРАТЬ
	|		СУММА(Запасы.СуммаРучнойСкидки) КАК СуммаРучнойСкидки,
	|		СУММА(Запасы.СуммаАвтоматическойСкидки) КАК СуммаАвтоматическойСкидки
	|	ИЗ
	|		Запасы КАК Запасы) КАК Скидки,
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ОплатаСчетовИЗаказовОбороты.Регистратор) КАК ДокументОплаты,
	|		МАКСИМУМ(ОплатаСчетовИЗаказовОбороты.Период) КАК ДатаОплаты,
	|		СУММА(ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот + ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот) КАК СуммаОплаты,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОплатаСчетовИЗаказовОбороты.Регистратор) КАК КоличествоДокументов
	|	ИЗ
	|		РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(, , Регистратор, СчетНаОплату = &ЗаказПокупателя) КАК ОплатаСчетовИЗаказовОбороты
	|	ГДЕ
	|		ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот + ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот <> 0) КАК Оплаты,
	|	Продажи КАК Продажи,
	|	СостояниеОтгрузки КАК СостояниеОтгрузки
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ЗаказПокупателя");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ВывестиСекциюЗаголовок(Макет, Результат, Параметры)
	
	ВыводитьПродажи = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.Продажи) И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыПокупателей);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", Параметры.ЗаказПокупателя);
	Запрос.Текст = ТекстЗапросаСекцияЗаголовок(ВыводитьПродажи);
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.Дата = Формат(Шапка.Дата, "ДЛФ=D");
	Область.Параметры.ТекущаяДата = Формат(ТекущаяДата(), НСтр("ru = 'ДФ=''dd.MM.yyyy ЧЧ:мм'''"));
	Область.Параметры.Номер = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Шапка.Дата, Шапка.Номер, Шапка.Префикс);
	Результат.Вывести(Область);
	
	Показатели = Новый Структура;
	
	Показатели.Вставить("Номер", Шапка.Номер);
	Если Шапка.ПометкаУдаления Тогда
		Показатели.Вставить("СостояниеДокумента", НСтр("ru = 'Помечен на удаление'"));
	ИначеЕсли Шапка.Проведен Тогда
		Показатели.Вставить("СостояниеДокумента", НСтр("ru = 'Проведен'"));
	Иначе
		Показатели.Вставить("СостояниеДокумента", НСтр("ru = 'Не проведен'"));
	КонецЕсли; 
	Показатели.Вставить("Контрагент", Шапка.Контрагент);
	Показатели.Вставить("Валюта", Шапка.Валюта);
	Показатели.Вставить("ВалютаПредставление", Шапка.ВалютаПредставление);
	ВыборкаКИ = Шапка.КИКонтрагента.Выбрать();
	Пока ВыборкаКИ.Следующий() Цикл
		Если ВыборкаКИ.КИКонтрагентаВид=Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда
			Показатели.Вставить("EmailКонтрагента", ВыборкаКИ.КИКонтрагентаПредставление);
		ИначеЕсли ВыборкаКИ.КИКонтрагентаВид=Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
			Показатели.Вставить("ТелефонКонтрагента", ВыборкаКИ.КИКонтрагентаПредставление);
		ИначеЕсли ВыборкаКИ.КИКонтрагентаВид=Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
			Показатели.Вставить("ФактАдресКонтрагента", ВыборкаКИ.КИКонтрагентаПредставление);
		КонецЕсли; 
	КонецЦикла; 
	Показатели.Вставить("СостояниеЗаказа", Шапка.СостояниеЗаказа);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Показатели.Вставить("Организация", Шапка.Организация);
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("УчетПоНесколькимПодразделениям") Тогда
		Показатели.Вставить("Подразделение", Шапка.Подразделение);
	КонецЕсли; 
	Если ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам")
		И Шапка.ПоложениеСклада<>Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Показатели.Вставить("Склад", Шапка.Склад);
	КонецЕсли; 
	Показатели.Вставить("Ответственный", Шапка.Ответственный);
	Если ЗначениеЗаполнено(Шапка.КонтактноеЛицо) Тогда
		Показатели.Вставить("КонтактноеЛицо", Шапка.КонтактноеЛицо);
		Показатели.Вставить("Должность", Шапка.Должность);
		ВыборкаКИ = Шапка.КИКонтактногоЛица.Выбрать();
		Пока ВыборкаКИ.Следующий() Цикл
			Если ВыборкаКИ.КИКонтактногоЛицаВид=Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица Тогда
				Показатели.Вставить("EmailКонтактногоЛица", ВыборкаКИ.КИКонтактногоЛицаПредставление);
			ИначеЕсли ВыборкаКИ.КИКонтактногоЛицаВид=Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица Тогда
				Показатели.Вставить("ТелефонКонтактногоЛица", ВыборкаКИ.КИКонтактногоЛицаПредставление);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	Показатели.Вставить("СуммаДокумента", Шапка.СуммаДокумента);
	Если Шапка.СуммаДокумента>0 Тогда
		Если Шапка.СуммаСкидки<>0 Тогда
			Показатели.Вставить("СуммаСкидки", Шапка.СуммаСкидки);
			Показатели.Вставить("СуммаРучнойСкидки", Шапка.СуммаРучнойСкидки);
			Показатели.Вставить("СуммаАвтоматическойСкидки", Шапка.СуммаАвтоматическойСкидки);
		КонецЕсли;
		Показатели.Вставить("КоличествоДокументовОплаты", Шапка.КоличествоДокументовОплаты);
		Показатели.Вставить("СуммаОплаты", Шапка.СуммаОплаты);
		Показатели.Вставить("ДокументОплаты", Шапка.ДокументОплаты);
		Показатели.Вставить("ДатаОплаты", Шапка.ДатаОплаты);
		Если Шапка.КоличествоДокументовОплаты<=1 Тогда
			Параметры.Вставить("ОплатаОднимДокументом");
		КонецЕсли;
		Если ВыводитьПродажи Тогда
			Показатели.Вставить("КоличествоДокументовОтгрузки", Шапка.КоличествоДокументовОтгрузки);
			Показатели.Вставить("ПроцентОтгрузки", Шапка.ПроцентОтгрузки);
			Показатели.Вставить("СуммаОтгрузки", Шапка.СуммаОтгрузки);
			Показатели.Вставить("ДокументОтгрузки", Шапка.ДокументОтгрузки);
			Показатели.Вставить("ДатаОтгрузки", Шапка.ДатаОтгрузки);
			Если Шапка.КоличествоДокументовОтгрузки<=1 Тогда
				Параметры.Вставить("ОтгрузкаОднимДокументом");
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	Если ЗначениеЗаполнено(Шапка.ПлановаяДатаОтгрузки) Тогда
		Показатели.Вставить("ПлановаяДатаОтгрузки", Шапка.ПлановаяДатаОтгрузки);
		Параметры.Вставить("ДатаОтгрузкиВШапке");
	КонецЕсли;
	Если ЗначениеЗаполнено(Шапка.СпособДоставки) И Шапка.СпособДоставки<>Перечисления.СпособыДоставки.Самовывоз Тогда
		Показатели.Вставить("СпособДоставки", Шапка.СпособДоставки);
		Показатели.Вставить("ВариантУчетаДоставки", Шапка.ВариантУчетаДоставки);
		Если НЕ ПустаяСтрока(Шапка.АдресДоставки) Тогда
			Показатели.Вставить("АдресДоставки", Шапка.АдресДоставки);
		КонецЕсли; 
		Если НЕ ПустаяСтрока(Шапка.КонтактныйТелефон) ИЛИ НЕ ПустаяСтрока(Шапка.ЗапаснойТелефон) Тогда
			Показатели.Вставить("КонтактныйТелефон", Шапка.КонтактныйТелефон);
			Показатели.Вставить("ЗапаснойТелефон", Шапка.ЗапаснойТелефон);
		КонецЕсли; 
		Если ЗначениеЗаполнено(Шапка.ЗонаТариф) Тогда
			Показатели.Вставить("ЗонаТариф", Шапка.ЗонаТариф);
		КонецЕсли; 
		Если ЗначениеЗаполнено(Шапка.СтоимостьДоставки) Тогда
			Показатели.Вставить("СтоимостьДоставки", Шапка.СтоимостьДоставки);
		КонецЕсли; 
		Если ЗначениеЗаполнено(Шапка.СлужбаДоставки) И Шапка.СлужбаДоставки<>Справочники.СлужбыДоставки.ДоставкаСобственнымиСилами Тогда
			Показатели.Вставить("СлужбаДоставки", Шапка.СлужбаДоставки);
		КонецЕсли;
		Если ЗначениеЗаполнено(Шапка.КонтактноеЛицоДоставки) Тогда
			Показатели.Вставить("КонтактноеЛицоДоставки", Шапка.КонтактноеЛицоДоставки);
		КонецЕсли;
		Если ЗначениеЗаполнено(Шапка.ТрекНомер) Тогда
			Показатели.Вставить("ТрекНомер", Шапка.ТрекНомер);
		КонецЕсли; 
	КонецЕсли; 
	
	Область = Макет.ПолучитьОбласть("ОтступЗаголовка");
	Результат.Вывести(Область);
	
	СтекПоказателейЛеваяКолонка = Новый СписокЗначений;
	СтекПоказателейЛеваяКолонка.Добавить("ЗаголовокЗаказчик");
	СтекПоказателейЛеваяКолонка.Добавить("Контрагент");
	СтекПоказателейЛеваяКолонка.Добавить("EmailКонтрагента");
	СтекПоказателейЛеваяКолонка.Добавить("ТелефонКонтрагента");
	СтекПоказателейЛеваяКолонка.Добавить("ФактАдресКонтрагента");
	Если Шапка.Контрагент<>Шапка.КонтактноеЛицо Тогда
		СтекПоказателейЛеваяКолонка.Добавить("КонтактноеЛицо");
		СтекПоказателейЛеваяКолонка.Добавить("EmailКонтактногоЛица");
		СтекПоказателейЛеваяКолонка.Добавить("ТелефонКонтактногоЛица");
	КонецЕсли; 
	
	СтекПоказателейПраваяКолонка = Новый СписокЗначений;
	СтекПоказателейПраваяКолонка.Добавить("Номер");
	СтекПоказателейПраваяКолонка.Добавить("СуммаДокумента");
	СтекПоказателейПраваяКолонка.Добавить("Валюта");
	Если Шапка.СуммаРучнойСкидки<>0 И Шапка.СуммаАвтоматическойСкидки<>0 Тогда
		СтекПоказателейПраваяКолонка.Добавить("СуммаСкидки");
	КонецЕсли;
	Если Шапка.СуммаРучнойСкидки<>0 Тогда
		СтекПоказателейПраваяКолонка.Добавить("СуммаРучнойСкидки");
	КонецЕсли;
	Если Шапка.СуммаАвтоматическойСкидки<>0 Тогда
		СтекПоказателейПраваяКолонка.Добавить("СуммаАвтоматическойСкидки");
	КонецЕсли; 
	
	Пока СтекПоказателейЛеваяКолонка.Количество()>0 ИЛИ СтекПоказателейПраваяКолонка.Количество()>0 Цикл
		ВывестиСледующуюСтрокуШапки(Результат, Макет, Показатели, СтекПоказателейЛеваяКолонка, СтекПоказателейПраваяКолонка);	
	КонецЦикла; 
	
	СтекПоказателейЛеваяКолонка = Новый СписокЗначений;
	СтекПоказателейЛеваяКолонка.Добавить("ЗаголовокИсполнитель");
	СтекПоказателейЛеваяКолонка.Добавить("Организация");
	СтекПоказателейЛеваяКолонка.Добавить("Подразделение");
	СтекПоказателейЛеваяКолонка.Добавить("Склад");
	СтекПоказателейЛеваяКолонка.Добавить("Ответственный");
	
	СтекПоказателейПраваяКолонка = Новый СписокЗначений;
	СтекПоказателейПраваяКолонка.Добавить("ЗаголовокСостояние");
	СтекПоказателейПраваяКолонка.Добавить("СостояниеДокумента");
	СтекПоказателейПраваяКолонка.Добавить("СостояниеЗаказа");
	Если Шапка.СостояниеЗаказа<>Справочники.СостоянияЗаказовПокупателей.Завершен Тогда
		СтекПоказателейПраваяКолонка.Добавить("ПлановаяДатаОтгрузки");
	КонецЕсли; 
	СтекПоказателейПраваяКолонка.Добавить("СуммаОплаты");
	СтекПоказателейПраваяКолонка.Добавить("СуммаОтгрузки");
	
	Пока СтекПоказателейЛеваяКолонка.Количество()>0 ИЛИ СтекПоказателейПраваяКолонка.Количество()>0 Цикл
		ВывестиСледующуюСтрокуШапки(Результат, Макет, Показатели, СтекПоказателейЛеваяКолонка, СтекПоказателейПраваяКолонка);	
	КонецЦикла; 
	
	// Информация о доставке
	
	Если ЗначениеЗаполнено(Шапка.СпособДоставки) И Шапка.СпособДоставки<>Перечисления.СпособыДоставки.Самовывоз Тогда
		
		Область = Макет.ПолучитьОбласть("ОтступЗаголовка");
		Результат.Вывести(Область);
	
		СтекПоказателейЛеваяКолонка = Новый СписокЗначений;
		СтекПоказателейЛеваяКолонка.Добавить("ЗаголовокДоставка");
		СтекПоказателейЛеваяКолонка.Добавить("АдресДоставки");
		СтекПоказателейЛеваяКолонка.Добавить("КонтактноеЛицоДоставки");
		СтекПоказателейЛеваяКолонка.Добавить("КонтактныйТелефон");
		
		СтекПоказателейПраваяКолонка = Новый СписокЗначений;
		СтекПоказателейПраваяКолонка.Добавить("СпособДоставки");
		СтекПоказателейПраваяКолонка.Добавить("ВариантУчетаДоставки");
		СтекПоказателейПраваяКолонка.Добавить("СлужбаДоставки");
		СтекПоказателейПраваяКолонка.Добавить("ЗонаТариф");
		СтекПоказателейПраваяКолонка.Добавить("ТрекНомер");
		СтекПоказателейПраваяКолонка.Добавить("СтоимостьДоставки");
		
		Пока СтекПоказателейЛеваяКолонка.Количество()>0 ИЛИ СтекПоказателейПраваяКолонка.Количество()>0 Цикл
			ВывестиСледующуюСтрокуШапки(Результат, Макет, Показатели, СтекПоказателейЛеваяКолонка, СтекПоказателейПраваяКолонка);	
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(Шапка.ДополнительнаяИнформацияПоДоставке) Тогда
			Область = Макет.ПолучитьОбласть("ТекстовыеДанные");
			Область.Параметры.Текст = Шапка.ДополнительнаяИнформацияПоДоставке;
			Результат.Вывести(Область);
		КонецЕсли; 
		
	КонецЕсли; 
	
	Область = Макет.ПолучитьОбласть("ОтступЗаголовка");
	Результат.Вывести(Область);
	
	Если НЕ ПустаяСтрока(Шапка.Комментарий) Тогда
		Область = Макет.ПолучитьОбласть("ОтступОдинарный");
		Результат.Вывести(Область);
		Область = Макет.ПолучитьОбласть("ТекстовыеДанные");
		Область.Параметры.Текст = Шапка.Комментарий;
		Результат.Вывести(Область);
		Область = Макет.ПолучитьОбласть("Отступ");
		Результат.Вывести(Область);
	Иначе
		Область = Макет.ПолучитьОбласть("Отступ");
		Результат.Вывести(Область);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВывестиСекциюЗаголовокЗаказНаряд(Макет, Результат, Параметры)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", Параметры.ЗаказПокупателя);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателя.Номер КАК Номер,
	|	ЗаказПокупателя.Дата КАК Дата,
	|	ЗаказПокупателя.СуммаДокумента КАК СуммаДокумента,
	|	ЗаказПокупателя.Старт КАК Старт,
	|	ЗаказПокупателя.Финиш КАК Финиш,
	|	ЗаказПокупателя.ВалютаДокумента.СимвольноеПредставление КАК Валюта,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.ВалютаДокумента) КАК ВалютаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.Контрагент) КАК Контрагент,
	|	ЗаказПокупателя.Организация КАК Организация,
	|	ЗаказПокупателя.Организация.Префикс КАК Префикс,
	|	ЗаказПокупателя.Ответственный КАК Ответственный,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.Контрагент.КонтактноеЛицо) КАК КонтактноеЛицо,
	|	СвязиКонтрагентКонтакт.Должность КАК Должность,
	|	ЗаказПокупателя.СтруктурнаяЕдиницаПродажи КАК Подразделение,
	|	ЕСТЬNULL(Скидки.СуммаРучнойСкидки, 0) КАК СуммаРучнойСкидки,
	|	ЕСТЬNULL(Скидки.СуммаАвтоматическойСкидки, 0) КАК СуммаАвтоматическойСкидки,
	|	ЕСТЬNULL(Скидки.СуммаРучнойСкидки, 0) + ЕСТЬNULL(Скидки.СуммаАвтоматическойСкидки, 0) КАК СуммаСкидки,
	|	ЗаказПокупателя.Контрагент.КонтактнаяИнформация.(
	|		Тип КАК КИКонтрагентаТип,
	|		Вид КАК КИКонтрагентаВид,
	|		Представление КАК КИКонтрагентаПредставление
	|	) КАК КИКонтрагента,
	|	КонтактныеЛица.КонтактнаяИнформация.(
	|		Тип КАК КИКонтактногоЛицаТип,
	|		Вид КАК КИКонтактногоЛицаВид,
	|		Представление КАК КИКонтактногоЛицаПредставление
	|	) КАК КИКонтактногоЛица,
	|	ЗаказПокупателя.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЕСТЬNULL(Оплаты.ДокументОплаты, НЕОПРЕДЕЛЕНО) КАК ДокументОплаты,
	|	ЕСТЬNULL(Оплаты.ДатаОплаты, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОплаты,
	|	ЕСТЬNULL(Оплаты.СуммаОплаты, 0) КАК СуммаОплаты,
	|	ЕСТЬNULL(Оплаты.КоличествоДокументов, 0) КАК КоличествоДокументовОплаты,
	|	ЗаказПокупателя.Комментарий КАК Комментарий,
	|	ЗаказПокупателя.ПометкаУдаления КАК ПометкаУдаления,
	|	ЗаказПокупателя.Проведен КАК Проведен
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица КАК КонтактныеЛица
	|		ПО ЗаказПокупателя.Контрагент.КонтактноеЛицо = КонтактныеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтакт
	|		ПО ЗаказПокупателя.Контрагент.КонтактноеЛицо = СвязиКонтрагентКонтакт.Контакт
	|			И ЗаказПокупателя.Контрагент = СвязиКонтрагентКонтакт.Контрагент,
	|	(ВЫБРАТЬ
	|		СУММА(ВложенныйЗапросСкидки.СуммаРучнойСкидки) КАК СуммаРучнойСкидки,
	|		СУММА(ВложенныйЗапросСкидки.СуммаАвтоматическойСкидки) КАК СуммаАвтоматическойСкидки
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ЗаказПокупателяРаботы.Цена * ЗаказПокупателяРаботы.Количество * ЗаказПокупателяРаботы.Кратность * ЗаказПокупателяРаботы.Коэффициент * ЗаказПокупателяРаботы.ПроцентСкидкиНаценки / 100 КАК СуммаРучнойСкидки,
	|			ЗаказПокупателяРаботы.Цена * ЗаказПокупателяРаботы.Количество * ЗаказПокупателяРаботы.Кратность * ЗаказПокупателяРаботы.Коэффициент * ЗаказПокупателяРаботы.ПроцентАвтоматическойСкидки / 100 КАК СуммаАвтоматическойСкидки
	|		ИЗ
	|			Документ.ЗаказПокупателя.Работы КАК ЗаказПокупателяРаботы
	|		ГДЕ
	|			ЗаказПокупателяРаботы.Ссылка = &ЗаказПокупателя
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗаказПокупателяЗапасы.Цена * ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.ПроцентСкидкиНаценки / 100,
	|			ЗаказПокупателяЗапасы.Цена * ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки / 100
	|		ИЗ
	|			Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|		ГДЕ
	|			ЗаказПокупателяЗапасы.Ссылка = &ЗаказПокупателя) КАК ВложенныйЗапросСкидки) КАК Скидки,
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ОплатаСчетовИЗаказовОбороты.Регистратор) КАК ДокументОплаты,
	|		МАКСИМУМ(ОплатаСчетовИЗаказовОбороты.Период) КАК ДатаОплаты,
	|		СУММА(ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот + ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот) КАК СуммаОплаты,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОплатаСчетовИЗаказовОбороты.Регистратор) КАК КоличествоДокументов
	|	ИЗ
	|		РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(, , Регистратор, СчетНаОплату = &ЗаказПокупателя) КАК ОплатаСчетовИЗаказовОбороты
	|	ГДЕ
	|		ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот + ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот <> 0) КАК Оплаты
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ЗаказПокупателя";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Область = Макет.ПолучитьОбласть("ЗаголовокЗаказНаряд");
	Область.Параметры.Дата = Формат(Шапка.Дата, "ДЛФ=D");
	Область.Параметры.ТекущаяДата = Формат(ТекущаяДата(), НСтр("ru = 'ДФ=''dd.MM.yyyy ЧЧ:мм'''"));
	Область.Параметры.Номер = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Шапка.Дата, Шапка.Номер, Шапка.Префикс);
	Результат.Вывести(Область);
	
	Показатели = Новый Структура;
	
	Показатели.Вставить("Номер", Шапка.Номер);
	Если Шапка.ПометкаУдаления Тогда
		Показатели.Вставить("СостояниеДокумента", НСтр("ru = 'Помечен на удаление'"));
	ИначеЕсли Шапка.Проведен Тогда
		Показатели.Вставить("СостояниеДокумента", НСтр("ru = 'Проведен'"));
	Иначе
		Показатели.Вставить("СостояниеДокумента", НСтр("ru = 'Не проведен'"));
	КонецЕсли; 
	Показатели.Вставить("Контрагент", Шапка.Контрагент);
	Показатели.Вставить("Валюта", Шапка.Валюта);
	Показатели.Вставить("Старт", Шапка.Старт);
	Показатели.Вставить("Финиш", Шапка.Финиш);
	Показатели.Вставить("ВалютаПредставление", Шапка.ВалютаПредставление);
	ВыборкаКИ = Шапка.КИКонтрагента.Выбрать();
	Пока ВыборкаКИ.Следующий() Цикл
		Если ВыборкаКИ.КИКонтрагентаВид=Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда
			Показатели.Вставить("EmailКонтрагента", ВыборкаКИ.КИКонтрагентаПредставление);
		ИначеЕсли ВыборкаКИ.КИКонтрагентаВид=Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
			Показатели.Вставить("ТелефонКонтрагента", ВыборкаКИ.КИКонтрагентаПредставление);
		ИначеЕсли ВыборкаКИ.КИКонтрагентаВид=Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
			Показатели.Вставить("ФактАдресКонтрагента", ВыборкаКИ.КИКонтрагентаПредставление);
		КонецЕсли; 
	КонецЦикла; 
	Показатели.Вставить("СостояниеЗаказа", Шапка.СостояниеЗаказа);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Показатели.Вставить("Организация", Шапка.Организация);
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("УчетПоНесколькимПодразделениям") Тогда
		Показатели.Вставить("Подразделение", Шапка.Подразделение);
	КонецЕсли; 
	Показатели.Вставить("Ответственный", Шапка.Ответственный);
	Если ЗначениеЗаполнено(Шапка.КонтактноеЛицо) Тогда
		Показатели.Вставить("КонтактноеЛицо", Шапка.КонтактноеЛицо);
		Показатели.Вставить("Должность", Шапка.Должность);
		ВыборкаКИ = Шапка.КИКонтактногоЛица.Выбрать();
		Пока ВыборкаКИ.Следующий() Цикл
			Если ВыборкаКИ.КИКонтактногоЛицаВид=Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица Тогда
				Показатели.Вставить("EmailКонтактногоЛица", ВыборкаКИ.КИКонтактногоЛицаПредставление);
			ИначеЕсли ВыборкаКИ.КИКонтактногоЛицаВид=Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица Тогда
				Показатели.Вставить("ТелефонКонтактногоЛица", ВыборкаКИ.КИКонтактногоЛицаПредставление);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	Показатели.Вставить("СуммаДокумента", Шапка.СуммаДокумента);
	Если Шапка.СуммаДокумента>0 Тогда
		Если Шапка.СуммаСкидки<>0 Тогда
			Показатели.Вставить("СуммаСкидки", Шапка.СуммаСкидки);
			Показатели.Вставить("СуммаРучнойСкидки", Шапка.СуммаРучнойСкидки);
			Показатели.Вставить("СуммаАвтоматическойСкидки", Шапка.СуммаАвтоматическойСкидки);
		КонецЕсли;
		Показатели.Вставить("КоличествоДокументовОплаты", Шапка.КоличествоДокументовОплаты);
		Показатели.Вставить("СуммаОплаты", Шапка.СуммаОплаты);
		Показатели.Вставить("ДокументОплаты", Шапка.ДокументОплаты);
		Показатели.Вставить("ДатаОплаты", Шапка.ДатаОплаты);
		Если Шапка.КоличествоДокументовОплаты<=1 Тогда
			Параметры.Вставить("ОплатаОднимДокументом");
		КонецЕсли;
	КонецЕсли; 
	
	Область = Макет.ПолучитьОбласть("ОтступЗаголовка");
	Результат.Вывести(Область);
	
	СтекПоказателейЛеваяКолонка = Новый СписокЗначений;
	СтекПоказателейЛеваяКолонка.Добавить("ЗаголовокЗаказчик");
	СтекПоказателейЛеваяКолонка.Добавить("Контрагент");
	СтекПоказателейЛеваяКолонка.Добавить("EmailКонтрагента");
	СтекПоказателейЛеваяКолонка.Добавить("ТелефонКонтрагента");
	СтекПоказателейЛеваяКолонка.Добавить("ФактАдресКонтрагента");
	Если Шапка.Контрагент<>Шапка.КонтактноеЛицо Тогда
		СтекПоказателейЛеваяКолонка.Добавить("КонтактноеЛицо");
		СтекПоказателейЛеваяКолонка.Добавить("EmailКонтактногоЛица");
		СтекПоказателейЛеваяКолонка.Добавить("ТелефонКонтактногоЛица");
	КонецЕсли; 
	
	СтекПоказателейПраваяКолонка = Новый СписокЗначений;
	СтекПоказателейПраваяКолонка.Добавить("Номер");
	СтекПоказателейПраваяКолонка.Добавить("СуммаДокумента");
	СтекПоказателейПраваяКолонка.Добавить("Валюта");
	Если Шапка.СуммаРучнойСкидки<>0 И Шапка.СуммаАвтоматическойСкидки<>0 Тогда
		СтекПоказателейПраваяКолонка.Добавить("СуммаСкидки");
	КонецЕсли;
	Если Шапка.СуммаРучнойСкидки<>0 Тогда
		СтекПоказателейПраваяКолонка.Добавить("СуммаРучнойСкидки");
	КонецЕсли;
	Если Шапка.СуммаАвтоматическойСкидки<>0 Тогда
		СтекПоказателейПраваяКолонка.Добавить("СуммаАвтоматическойСкидки");
	КонецЕсли; 
	
	Пока СтекПоказателейЛеваяКолонка.Количество()>0 ИЛИ СтекПоказателейПраваяКолонка.Количество()>0 Цикл
		ВывестиСледующуюСтрокуШапки(Результат, Макет, Показатели, СтекПоказателейЛеваяКолонка, СтекПоказателейПраваяКолонка);	
	КонецЦикла; 
	
	Область = Макет.ПолучитьОбласть("ОтступЗаголовка");
	Результат.Вывести(Область);
	
	СтекПоказателейЛеваяКолонка = Новый СписокЗначений;
	СтекПоказателейЛеваяКолонка.Добавить("ЗаголовокИсполнитель");
	СтекПоказателейЛеваяКолонка.Добавить("Организация");
	СтекПоказателейЛеваяКолонка.Добавить("Подразделение");
	СтекПоказателейЛеваяКолонка.Добавить("Ответственный");
	
	СтекПоказателейПраваяКолонка = Новый СписокЗначений;
	СтекПоказателейПраваяКолонка.Добавить("ЗаголовокСостояние");
	СтекПоказателейПраваяКолонка.Добавить("СостояниеДокумента");
	СтекПоказателейПраваяКолонка.Добавить("СостояниеЗаказа");
	Если Шапка.СостояниеЗаказа<>Справочники.СостоянияЗаказовПокупателей.Завершен Тогда
		СтекПоказателейПраваяКолонка.Добавить("Старт");
		СтекПоказателейПраваяКолонка.Добавить("Финиш");
	КонецЕсли; 
	СтекПоказателейПраваяКолонка.Добавить("СуммаОплаты");
	
	Пока СтекПоказателейЛеваяКолонка.Количество()>0 ИЛИ СтекПоказателейПраваяКолонка.Количество()>0 Цикл
		ВывестиСледующуюСтрокуШапки(Результат, Макет, Показатели, СтекПоказателейЛеваяКолонка, СтекПоказателейПраваяКолонка);	
	КонецЦикла; 
	
	Если НЕ ПустаяСтрока(Шапка.Комментарий) Тогда
		Область = Макет.ПолучитьОбласть("ОтступОдинарный");
		Результат.Вывести(Область);
		Область = Макет.ПолучитьОбласть("ТекстовыеДанные");
		Область.Параметры.Текст = Шапка.Комментарий;
		Результат.Вывести(Область);
		Область = Макет.ПолучитьОбласть("Отступ");
		Результат.Вывести(Область);
	Иначе
		Область = Макет.ПолучитьОбласть("Отступ");
		Результат.Вывести(Область);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВывестиСекциюЗапасы(Макет, Результат, Параметры, Ошибки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", Параметры.ЗаказПокупателя);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателя.ОжидаетсяВыборВариантаКП КАК ОжидаетсяВыборВариантаКП,
	|	ЗаказПокупателя.ОсновнойВариантКП КАК ОсновнойВариантКП,
	|	ЗаказПокупателя.КоличествоВариантовКП КАК КоличествоВариантовКП,
	|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|				ИЛИ ЗаказПокупателя.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПустаяСсылка), ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз))
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИНАЧЕ ЗаказПокупателя.НоменклатураДоставки
	|	КОНЕЦ КАК НоменклатураДоставки,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА ЗаказПокупателя.НоменклатураДоставки.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ КАК ПредставлениеНоменклатурыДоставки,
	|	ЗаказПокупателя.НоменклатураДоставки.Код КАК КодДоставки,
	|	ЗаказПокупателя.НоменклатураДоставки.Артикул КАК АртикулДоставки,
	|	ЗаказПокупателя.НоменклатураДоставки.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДоставки,
	|	ЗаказПокупателя.СтавкаНДСДоставки КАК СтавкаНДСДоставки,
	|	ЗаказПокупателя.СтоимостьДоставки КАК СтоимостьДоставки,
	|	ЗаказПокупателя.СуммаНДСДоставки КАК СуммаНДСДоставки,
	|	ЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказПокупателя.ПоложениеСклада КАК ПоложениеСклада,
	|	ЗаказПокупателя.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		НомерВариантаКП КАК НомерВариантаКП,
	|		Номенклатура КАК Номенклатура,
	|		Содержание КАК Содержание,
	|		Характеристика КАК Характеристика,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Штрихкод КАК Штрихкод,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Цена КАК Цена,
	|		Количество КАК Количество,
	|		ЗаказПокупателя.Запасы.Количество * ЗаказПокупателя.Запасы.Цена * (ЗаказПокупателя.Запасы.ПроцентСкидкиНаценки + ЗаказПокупателя.Запасы.ПроцентАвтоматическойСкидки) / 100 КАК Скидка,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		ЭтоРазделитель КАК ЭтоРазделитель,
	|		ЛОЖЬ КАК ЭтоНабор,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Запасы.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И ЗаказПокупателя.Запасы.НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиницаРезерв
	|	) КАК ТаблицаЗапасы,
	|	ЗаказПокупателя.ДобавленныеНаборы.(
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		НомерВариантаКП КАК НомерВариантаКП,
	|		Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.ДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ЗаказПокупателя.ДобавленныеНаборы.НоменклатураНабора.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.ДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ЗапасНабора,
	|		НоменклатураНабора.ВариантПечатиНабора КАК ВариантПечатиНабора,
	|		НоменклатураНабора.ТипНоменклатуры КАК ТипНоменклатурыНабора,
	|		НоменклатураНабора.Артикул КАК АртикулНабора,
	|		НоменклатураНабора.Код КАК КодНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияНабора,
	|		ИСТИНА КАК ВыводитьИтоги
	|	) КАК ТаблицаДобавленныеНаборы
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ЗаказПокупателя
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПокупателя.Запасы.НомерВариантаКП,
	|	ЗаказПокупателя.Запасы.НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДокументов = Запрос.Выполнить().Выгрузить();
	ДоставкаСервер.ДобавитьСтрокуДоставкиУниверсальныеДанные(ДанныеДокументов, "ТаблицаЗапасы");
	// Наборы
	НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(ДанныеДокументов, "ТаблицаЗапасы", Ошибки, Истина);
	
	Для каждого Шапка Из ДанныеДокументов Цикл
	
		ЕстьНесколькоВариантов = Шапка.ОжидаетсяВыборВариантаКП;
		
		Если ЕстьНесколькоВариантов Тогда
			НомерВарианта = 1;
			ПоследнийВариант = Шапка.КоличествоВариантовКП;
		Иначе
			НомерВарианта = Шапка.ОсновнойВариантКП;
			ПоследнийВариант = Шапка.ОсновнойВариантКП;
		КонецЕсли;
		
		Если Шапка.ПоложениеСклада=Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаЗапасыСклад");
		Иначе
			ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаЗапасы");
		КонецЕсли; 
		ОбластьРазделитель = Макет.ПолучитьОбласть("СтрокаРазделитель");
		
		Пока НомерВарианта <= ПоследнийВариант Цикл
			
			ДанныеПечати = Новый Структура("Скидка,Сумма", 0, 0);
			
			Если ЕстьНесколькоВариантов Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("Вариант");
				ОбластьМакета.Параметры.ВариантПредставление = СтрШаблон(НСтр("ru='Вариант №%1'"), НомерВарианта);
				Результат.Вывести(ОбластьМакета);
			КонецЕсли;
			
			Область = Макет.ПолучитьОбласть("ШапкаЗапасы");
			Область.Параметры.Валюта = Шапка.ВалютаДокумента;
			Результат.Вывести(Область, 1);
			
			Отбор = Новый Структура("НомерВариантаКП", НомерВарианта);
			Строки = Шапка.ТаблицаЗапасы.НайтиСтроки(Отбор);
			
			ПараметрыНоменклатуры = Новый Структура;
			
			Для каждого СтрокаТабличнойЧасти Из Строки Цикл
				
				Если СтрокаТабличнойЧасти.ЭтоРазделитель Тогда
					Область = ОбластьРазделитель;
				Иначе
					Область = ОбластьСтрока;
					Область.Параметры.НоменклатураРасшифровка = СтрокаТабличнойЧасти.Номенклатура;
					
					Если НЕ СтрокаТабличнойЧасти.ЭтоНабор Тогда
						ДанныеПечати.Скидка = ДанныеПечати.Скидка + СтрокаТабличнойЧасти.Скидка;
						ДанныеПечати.Сумма  = ДанныеПечати.Сумма + СтрокаТабличнойЧасти.Сумма;
					КонецЕсли; 
				КонецЕсли;
				
				Область.Параметры.Заполнить(СтрокаТабличнойЧасти);

				ПараметрыНоменклатуры.Очистить();
				ПараметрыНоменклатуры.Вставить("Содержание", СтрокаТабличнойЧасти.Содержание);
				ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", СтрокаТабличнойЧасти.Номенклатура);
				ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", СтрокаТабличнойЧасти.Характеристика);
				ПараметрыНоменклатуры.Вставить("ПредставлениеАртикула", СтрокаТабличнойЧасти.Артикул);
				// Наборы
				ПараметрыНоменклатуры.Вставить("НеобходимоВыделитьКакСоставНабора", СтрокаТабличнойЧасти.НеобходимоВыделитьКакСоставНабора);
				Область.Параметры.Номенклатура = ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры);
				
				Результат.Вывести(Область, 2);
				
				// Наборы
				НаборыСервер.УчестьОформлениеСтрокиНабора(Результат, Область, СтрокаТабличнойЧасти);
				
			КонецЦикла;
			
			Область = Макет.ПолучитьОбласть("ПодвалЗапасы");
			Область.Параметры.Заполнить(ДанныеПечати);
			Результат.Вывести(Область, 1);
			
			Область = Макет.ПолучитьОбласть("Отступ");
			Результат.Вывести(Область, 1);
			
			НомерВарианта = НомерВарианта + 1;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиСекциюРаботы(Макет, Результат, Параметры)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", Параметры.ЗаказПокупателя);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателяРаботы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяРаботы.Характеристика КАК Характеристика,
	|	ЗаказПокупателяРаботы.Номенклатура.Артикул КАК Артикул,
	|	ЗаказПокупателяРаботы.Номенклатура.Штрихкод КАК Штрихкод,
	|	ЗаказПокупателяРаботы.Ссылка.ВалютаДокумента.СимвольноеПредставление КАК Валюта,
	|	ЗаказПокупателяРаботы.Цена КАК Цена,
	|	ЗаказПокупателяРаботы.Количество * ЗаказПокупателяРаботы.Кратность * ЗаказПокупателяРаботы.Коэффициент КАК Количество,
	|	ЗаказПокупателяРаботы.Количество * ЗаказПокупателяРаботы.Кратность * ЗаказПокупателяРаботы.Коэффициент * ЗаказПокупателяРаботы.Цена * (ЗаказПокупателяРаботы.ПроцентСкидкиНаценки + ЗаказПокупателяРаботы.ПроцентАвтоматическойСкидки) / 100 КАК Скидка,
	|	ЗаказПокупателяРаботы.Всего КАК Всего
	|ИЗ
	|	Документ.ЗаказПокупателя.Работы КАК ЗаказПокупателяРаботы
	|ГДЕ
	|	ЗаказПокупателяРаботы.Ссылка = &ЗаказПокупателя
	|ИТОГИ
	|	СУММА(Скидка),
	|	СУММА(Всего)
	|ПО
	|	Валюта";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаИтоги = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	Область = Макет.ПолучитьОбласть("ШапкаРаботы");
	Область.Параметры.Валюта = ВыборкаИтоги.Валюта;
	Результат.Вывести(Область, 1);
	
	Область = Макет.ПолучитьОбласть("СтрокаРаботы");
	ВыборкаДетали = ВыборкаИтоги.Выбрать();
	Пока ВыборкаДетали.Следующий() Цикл
		Область.Параметры.Заполнить(ВыборкаДетали);
		Область.Параметры.НоменклатураРасшифровка = ВыборкаДетали.Номенклатура;
		Область.Параметры.Номенклатура = ПечатьДокументовУНФ.ПредставлениеНоменклатурыДляПечати(
		ВыборкаДетали.Номенклатура, 
		ВыборкаДетали.Характеристика, 
		ВыборкаДетали.Артикул);
		Результат.Вывести(Область, 2);
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("ПодвалРаботы");
	Область.Параметры.Заполнить(ВыборкаИтоги);
	Результат.Вывести(Область, 1);
	
	Область = Макет.ПолучитьОбласть("Отступ");
	Результат.Вывести(Область, 1);
	
КонецПроцедуры

Процедура ВывестиСекциюДоходыРасходы(Макет, Результат, Параметры)
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ДоходыИРасходыПоЗаказамПрогноз) Тогда
		Возврат;
	КонецЕсли;
	
	МассивПустыеТипы = Новый Массив;
	МассивПустыеТипы.Добавить(Неопределено);
	Для каждого Тип Из Метаданные.ПланыВидовХарактеристик.АналитикаДоходовИРасходов.Тип.Типы() Цикл
		МассивПустыеТипы.Добавить(Новый(Тип));
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", Параметры.ЗаказПокупателя);
	Запрос.УстановитьПараметр("ПустыеТипы", МассивПустыеТипы);
	Запрос.УстановитьПараметр("УчетПоОднойОрганизации", НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") ИЛИ НЕ Константы.Компания.Получить().Пустая());
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЗаказПокупателя, "Организация"));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(&ЗаказПокупателя КАК Документ.ЗаказПокупателя).ВалютаДокумента КАК Валюта,
	|	ВЫБОР
	|		КОГДА ДиР.Аналитика В (&ПустыеТипы)
	|				ИЛИ ДиР.Аналитика ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ДиР.Аналитика
	|	КОНЕЦ КАК Аналитика,
	|	ДиР.СчетУчета КАК СчетУчета,
	|	СУММА(ВЫРАЗИТЬ(ДиР.СуммаДоходовПлан КАК ЧИСЛО(15, 2))) КАК СуммаДоходовПлан,
	|	СУММА(ВЫРАЗИТЬ(ДиР.СуммаРасходовПлан КАК ЧИСЛО(15, 2))) КАК СуммаРасходовПлан,
	|	СУММА(ВЫРАЗИТЬ(ДиР.СуммаДоходовФакт * КурсыВалютУчет.Курс / КурсыВалютУчет.Кратность / КурсыВалютЗаказ.Курс * КурсыВалютЗаказ.Кратность КАК ЧИСЛО(15, 2))) КАК СуммаДоходовФакт,
	|	СУММА(ВЫРАЗИТЬ(ДиР.СуммаРасходовФакт * КурсыВалютУчет.Курс / КурсыВалютУчет.Кратность / КурсыВалютЗаказ.Курс * КурсыВалютЗаказ.Кратность КАК ЧИСЛО(15, 2))) КАК СуммаРасходовФакт,
	|	ВЫБОР
	|		КОГДА ЗапасыЗаказа.Номенклатура ЕСТЬ NULL
	|				И РаботыЗаказа.Номенклатура ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДополнительныйРасход,
	|	ВЫБОР
	|		КОГДА ЗапасыЗаказа.Номенклатура ЕСТЬ NULL
	|				И РаботыЗаказа.Номенклатура ЕСТЬ NULL
	|			ТОГДА ДиР.СчетУчета
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДиР.Аналитика В (&ПустыеТипы)
	|						ИЛИ ДиР.Аналитика ЕСТЬ NULL
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ ДиР.Аналитика
	|			КОНЕЦ
	|	КОНЕЦ КАК Запас,
	|	СУММА((ВЫРАЗИТЬ(ДиР.СуммаДоходовПлан КАК ЧИСЛО(15, 2))) - (ВЫРАЗИТЬ(ДиР.СуммаРасходовПлан КАК ЧИСЛО(15, 2)))) КАК ПрибыльПлан,
	|	СУММА((ВЫРАЗИТЬ(ДиР.СуммаДоходовФакт * КурсыВалютУчет.Курс / КурсыВалютУчет.Кратность / КурсыВалютЗаказ.Курс * КурсыВалютЗаказ.Кратность КАК ЧИСЛО(15, 2))) - (ВЫРАЗИТЬ(ДиР.СуммаРасходовФакт * КурсыВалютУчет.Курс / КурсыВалютУчет.Кратность / КурсыВалютЗаказ.Курс * КурсыВалютЗаказ.Кратность КАК ЧИСЛО(15, 2)))) КАК ПрибыльФакт,
	|	ДиР.Регистратор КАК Регистратор,
	|	МАКСИМУМ(ДиР.Период) КАК Период,
	|	ВЫБОР
	|		КОГДА СУММА(ВЫРАЗИТЬ(ДиР.СуммаДоходовПлан КАК ЧИСЛО(15, 2))) = 0
	|			ТОГДА 0
	|		ИНАЧЕ (СУММА(ВЫРАЗИТЬ(ДиР.СуммаДоходовФакт * КурсыВалютУчет.Курс / КурсыВалютУчет.Кратность / КурсыВалютЗаказ.Курс * КурсыВалютЗаказ.Кратность КАК ЧИСЛО(15, 2))) - СУММА(ВЫРАЗИТЬ(ДиР.СуммаДоходовПлан КАК ЧИСЛО(15, 2)))) / СУММА(ВЫРАЗИТЬ(ДиР.СуммаДоходовПлан КАК ЧИСЛО(15, 2))) * 100
	|	КОНЕЦ КАК ДоходыПроцент,
	|	ВЫБОР
	|		КОГДА СУММА(ВЫРАЗИТЬ(ДиР.СуммаРасходовПлан КАК ЧИСЛО(15, 2))) = 0
	|			ТОГДА 0
	|		ИНАЧЕ (СУММА(ВЫРАЗИТЬ(ДиР.СуммаРасходовФакт * КурсыВалютУчет.Курс / КурсыВалютУчет.Кратность / КурсыВалютЗаказ.Курс * КурсыВалютЗаказ.Кратность КАК ЧИСЛО(15, 2))) - СУММА(ВЫРАЗИТЬ(ДиР.СуммаРасходовПлан КАК ЧИСЛО(15, 2)))) / СУММА(ВЫРАЗИТЬ(ДиР.СуммаРасходовПлан КАК ЧИСЛО(15, 2))) * 100
	|	КОНЕЦ КАК РасходыПроцент
	|ИЗ
	|	(ВЫБРАТЬ
	|		НЕОПРЕДЕЛЕНО КАК Регистратор,
	|		ДАТАВРЕМЯ(1, 1, 1) КАК Период,
	|		ДоходыИРасходыПоЗаказамПрогнозОбороты.СчетУчета КАК СчетУчета,
	|		ДоходыИРасходыПоЗаказамПрогнозОбороты.Аналитика КАК Аналитика,
	|		СУММА(ДоходыИРасходыПоЗаказамПрогнозОбороты.СуммаДоходовОборот) КАК СуммаДоходовПлан,
	|		СУММА(ДоходыИРасходыПоЗаказамПрогнозОбороты.СуммаРасходовОборот) КАК СуммаРасходовПлан,
	|		0 КАК СуммаДоходовФакт,
	|		0 КАК СуммаРасходовФакт
	|	ИЗ
	|		РегистрНакопления.ДоходыИРасходыПоЗаказамПрогноз.Обороты(, , Период, ЗаказПокупателя = &ЗаказПокупателя) КАК ДоходыИРасходыПоЗаказамПрогнозОбороты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДоходыИРасходыПоЗаказамПрогнозОбороты.СчетУчета,
	|		ДоходыИРасходыПоЗаказамПрогнозОбороты.Аналитика
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПродажиОбороты.Регистратор,
	|		ПродажиОбороты.Период,
	|		ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ВыручкаОтПродаж),
	|		ПродажиОбороты.Номенклатура,
	|		0,
	|		0,
	|		СУММА(ПродажиОбороты.СуммаОборот),
	|		СУММА(ПродажиОбороты.СебестоимостьОборот)
	|	ИЗ
	|		РегистрНакопления.Продажи.Обороты(, , Регистратор, ЗаказПокупателя = &ЗаказПокупателя) КАК ПродажиОбороты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПродажиОбороты.Номенклатура,
	|		ПродажиОбороты.Регистратор,
	|		ПродажиОбороты.Период
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДоходыИРасходыОбороты.Регистратор,
	|		ДоходыИРасходыОбороты.Период,
	|		ДоходыИРасходыОбороты.СчетУчета,
	|		ДоходыИРасходыОбороты.Аналитика,
	|		0,
	|		0,
	|		СУММА(ДоходыИРасходыОбороты.СуммаДоходовОборот),
	|		СУММА(ДоходыИРасходыОбороты.СуммаРасходовОборот)
	|	ИЗ
	|		РегистрНакопления.ДоходыИРасходы.Обороты(
	|				,
	|				,
	|				Регистратор,
	|				ЗаказПокупателя = &ЗаказПокупателя
	|					И (НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|						ИЛИ НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж <> СчетУчета
	|							И НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж <> СчетУчета)) КАК ДоходыИРасходыОбороты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДоходыИРасходыОбороты.Период,
	|		ДоходыИРасходыОбороты.Регистратор,
	|		ДоходыИРасходыОбороты.Аналитика,
	|		ДоходыИРасходыОбороты.СчетУчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МАКСИМУМ(ЗакрытиеМесяца.Ссылка),
	|		МАКСИМУМ(ЗакрытиеМесяца.Дата),
	|		ДоходыИРасходыОбороты.СчетУчета,
	|		ДоходыИРасходыОбороты.Аналитика,
	|		0,
	|		0,
	|		СУММА(-ДоходыИРасходыОбороты.СуммаДоходовОборот) / КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗакрытиеМесяца.Ссылка),
	|		СУММА(-ДоходыИРасходыОбороты.СуммаРасходовОборот) / КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗакрытиеМесяца.Ссылка)
	|	ИЗ
	|		РегистрНакопления.ДоходыИРасходы.Обороты(
	|				,
	|				,
	|				Регистратор,
	|				ЗаказПокупателя = &ЗаказПокупателя
	|					И (НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|						ИЛИ НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж <> СчетУчета
	|							И НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж <> СчетУчета)
	|					И СчетУчета.СпособРаспределения <> ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияРасходов.НеРаспределять)) КАК ДоходыИРасходыОбороты
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
	|			ПО (НАЧАЛОПЕРИОДА(ДоходыИРасходыОбороты.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ЗакрытиеМесяца.Дата, МЕСЯЦ))
	|				И (ЗакрытиеМесяца.Проведен)
	|				И (ЗакрытиеМесяца.РасчетФинансовогоРезультата)
	|				И (&УчетПоОднойОрганизации
	|					ИЛИ ЗакрытиеМесяца.Организация = &Организация)
	|	ГДЕ
	|		НЕ ЗакрытиеМесяца.Ссылка ЕСТЬ NULL
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДоходыИРасходыОбороты.Аналитика,
	|		ДоходыИРасходыОбороты.СчетУчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ФинансовыйРезультатОбороты.Регистратор,
	|		ФинансовыйРезультатОбороты.Период,
	|		ФинансовыйРезультатОбороты.СчетУчета,
	|		ФинансовыйРезультатОбороты.Аналитика,
	|		0,
	|		0,
	|		СУММА(ФинансовыйРезультатОбороты.СуммаДоходовОборот),
	|		СУММА(ФинансовыйРезультатОбороты.СуммаРасходовОборот)
	|	ИЗ
	|		РегистрНакопления.ФинансовыйРезультат.Обороты(
	|				,
	|				,
	|				Регистратор,
	|				ЗаказПокупателя = &ЗаказПокупателя
	|					И (СчетУчета.СпособРаспределения <> ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияРасходов.НеРаспределять)
	|						И (НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|							ИЛИ НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж <> СчетУчета
	|								И НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж <> СчетУчета))) КАК ФинансовыйРезультатОбороты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ФинансовыйРезультатОбороты.Регистратор,
	|		ФинансовыйРезультатОбороты.Период,
	|		ФинансовыйРезультатОбороты.СчетУчета,
	|		ФинансовыйРезультатОбороты.Аналитика
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗапасыОстаткиИОбороты.Регистратор,
	|		ЗапасыОстаткиИОбороты.Период,
	|		ЗапасыОстаткиИОбороты.СчетУчета,
	|		НЕОПРЕДЕЛЕНО,
	|		0,
	|		0,
	|		0,
	|		СУММА(ЗапасыОстаткиИОбороты.СуммаПриход - ЗапасыОстаткиИОбороты.СуммаРасход)
	|	ИЗ
	|		РегистрНакопления.Запасы.ОстаткиИОбороты(
	|				,
	|				,
	|				Регистратор,
	|				Движения,
	|				ЗаказПокупателя = &ЗаказПокупателя
	|					И Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И СчетУчета В
	|						(ВЫБРАТЬ
	|							ЗапасыОстатки.СчетУчета
	|						ИЗ
	|							РегистрНакопления.Запасы.Остатки(, ЗаказПокупателя = &ЗаказПокупателя
	|								И Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ЗапасыОстатки
	|						ГДЕ
	|							ЗапасыОстатки.КоличествоОстаток = 0
	|							И ЗапасыОстатки.СуммаОстаток <> 0)) КАК ЗапасыОстаткиИОбороты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстаткиИОбороты.Регистратор,
	|		ЗапасыОстаткиИОбороты.Период,
	|		ЗапасыОстаткиИОбороты.СчетУчета) КАК ДиР
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура
	|		ИЗ
	|			Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|		ГДЕ
	|			ЗаказПокупателяЗапасы.Ссылка = &ЗаказПокупателя
	|			И ЗаказПокупателяЗапасы.Номенклатура <> ЗаказПокупателяЗапасы.Ссылка.НоменклатураДоставки
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЗаказПокупателяЗапасы.Номенклатура
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗаказПокупателя.НоменклатураДоставки
	|		ИЗ
	|			Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		ГДЕ
	|			ЗаказПокупателя.Ссылка = &ЗаказПокупателя
	|			И ЗаказПокупателя.НоменклатураДоставки <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ЗапасыЗаказа
	|		ПО ДиР.Аналитика = ЗапасыЗаказа.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЗаказПокупателяРаботы.Номенклатура КАК Номенклатура
	|		ИЗ
	|			Документ.ЗаказПокупателя.Работы КАК ЗаказПокупателяРаботы
	|		ГДЕ
	|			ЗаказПокупателяРаботы.Ссылка = &ЗаказПокупателя
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЗаказПокупателяРаботы.Номенклатура) КАК РаботыЗаказа
	|		ПО ДиР.Аналитика = РаботыЗаказа.Номенклатура,
	|	РегистрСведений.КурсыВалют.СрезПоследних(
	|			,
	|			Валюта В
	|				(ВЫБРАТЬ
	|					ВалютаУчета.Значение КАК Валюта
	|				ИЗ
	|					Константа.ВалютаУчета КАК ВалютаУчета)) КАК КурсыВалютУчет,
	|	РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = ВЫРАЗИТЬ(&ЗаказПокупателя КАК Документ.ЗаказПокупателя).ВалютаДокумента) КАК КурсыВалютЗаказ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ДиР.Аналитика В (&ПустыеТипы)
	|				ИЛИ ДиР.Аналитика ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ДиР.Аналитика
	|	КОНЕЦ,
	|	ДиР.СчетУчета,
	|	ВЫБОР
	|		КОГДА ЗапасыЗаказа.Номенклатура ЕСТЬ NULL
	|				И РаботыЗаказа.Номенклатура ЕСТЬ NULL
	|			ТОГДА ДиР.СчетУчета
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДиР.Аналитика В (&ПустыеТипы)
	|						ИЛИ ДиР.Аналитика ЕСТЬ NULL
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ ДиР.Аналитика
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ЗапасыЗаказа.Номенклатура,
	|	РаботыЗаказа.Номенклатура,
	|	ДиР.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДополнительныйРасход,
	|	Запас,
	|	Аналитика,
	|	Период
	|ИТОГИ
	|	СУММА(СуммаДоходовПлан),
	|	СУММА(СуммаРасходовПлан),
	|	СУММА(СуммаДоходовФакт),
	|	СУММА(СуммаРасходовФакт),
	|	СУММА(ПрибыльПлан),
	|	СУММА(ПрибыльФакт),
	|	МАКСИМУМ(Период),
	|	ВЫБОР
	|		КОГДА СУММА(СуммаДоходовПлан) = 0
	|			ТОГДА 0
	|		ИНАЧЕ (СУММА(СуммаДоходовФакт) - СУММА(СуммаДоходовПлан)) / СУММА(СуммаДоходовПлан) * 100
	|	КОНЕЦ КАК ДоходыПроцент,
	|	ВЫБОР
	|		КОГДА СУММА(СуммаРасходовПлан) = 0
	|			ТОГДА 0
	|		ИНАЧЕ (СУММА(СуммаРасходовФакт) - СУММА(СуммаРасходовПлан)) / СУММА(СуммаРасходовПлан) * 100
	|	КОНЕЦ КАК РасходыПроцент
	|ПО
	|	Валюта,
	|	ДополнительныйРасход,
	|	Запас,
	|	Аналитика,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫБОР
	|			КОГДА ВЗФинансовыйРезультат.Месяц ЕСТЬ NULL
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПолеПроверки
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ПродажиОбороты.Период, МЕСЯЦ) КАК Месяц,
	|		ПродажиОбороты.Организация КАК Организация
	|	ИЗ
	|		РегистрНакопления.Продажи.Обороты(, , Месяц, ЗаказПокупателя = &ЗаказПокупателя) КАК ПродажиОбороты) КАК ВЗПродажи
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НАЧАЛОПЕРИОДА(ФинансовыйРезультатОбороты.Период, МЕСЯЦ) КАК Месяц,
	|			ФинансовыйРезультатОбороты.Организация КАК Организация
	|		ИЗ
	|			РегистрНакопления.ФинансовыйРезультат.Обороты(, , Месяц, ЗаказПокупателя = &ЗаказПокупателя) КАК ФинансовыйРезультатОбороты) КАК ВЗФинансовыйРезультат
	|		ПО ВЗПродажи.Месяц = ВЗФинансовыйРезультат.Месяц
	|			И ВЗПродажи.Организация = ВЗФинансовыйРезультат.Организация
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ВЗФинансовыйРезультат.Месяц ЕСТЬ NULL
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) > 0";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[0].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаИтоги = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	
	// Критерий: в каждом месяце, когда есть отгрузка по заказу, должен быть выполнен расчет финансового результата.
	// Контролируются также ситуации, когда закрытие месяца выполнено до проведения документа отгрузки
	ФинансовыйРезультатРассчитан = РезультатЗапроса[1].Пустой();
	
	Область = Макет.ПолучитьОбласть("ШапкаДоходыРасходы");
	Область.Параметры.Валюта = УправлениеНебольшойФирмойПовтИсп.ПолучитьСимвольноеПредставлениеВалюты(ВыборкаИтоги.Валюта);
	Если НЕ ФинансовыйРезультатРассчитан Тогда
		Область.Параметры.ОтметкаПояснения = "*";
	КонецЕсли; 
	Результат.Вывести(Область, 1);
	ОбластьГруппа = Макет.ПолучитьОбласть("ГруппировкаДоходыРасходы");
	ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаДоходыРасходы");
	ОбластьАналитика = Макет.ПолучитьОбласть("АналитикаДоходыРасходы");
	ОбластьРегистратор = Макет.ПолучитьОбласть("РегистраторДоходыРасходы");
	
	ВыборкаДопРасходы = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДопРасходы.Следующий() Цикл
		ОбластьГруппа.Параметры.Заполнить(ВыборкаДопРасходы);
		Если ВыборкаДопРасходы.ДополнительныйРасход Тогда
			ОбластьГруппа.Параметры.Группа = НСтр("ru = 'Расходы'");;
		Иначе
			ОбластьГруппа.Параметры.Группа = НСтр("ru = 'Товары, услуги'");;
		КонецЕсли; 
		Результат.Вывести(ОбластьГруппа, 2);
		ВыборкаЗапасы = ВыборкаДопРасходы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗапасы.Следующий() Цикл
			ОбластьСтрока.Параметры.Заполнить(ВыборкаЗапасы);
			Результат.Вывести(ОбластьСтрока, 3);
			Если ВыборкаДопРасходы.ДополнительныйРасход Тогда
				ВыборкаАналитика = ВыборкаЗапасы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаАналитика.Следующий() Цикл
					Если ВыборкаАналитика.Количество()>1
						ИЛИ (ЗначениеЗаполнено(ВыборкаАналитика.Аналитика) 
						И ВыборкаАналитика.Аналитика<>ВыборкаАналитика.Запас) Тогда
						ОбластьАналитика.Параметры.Заполнить(ВыборкаАналитика);
						Если НЕ ЗначениеЗаполнено(ВыборкаАналитика.Аналитика) Тогда
							ОбластьАналитика.Параметры.Аналитика = НСтр("ru = '<Без аналитики>'");
						КонецЕсли; 
						Результат.Вывести(ОбластьАналитика, 4);
					КонецЕсли; 
					ВыборкаРегистратор = ВыборкаАналитика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаРегистратор.Следующий() Цикл
						Если НЕ ЗначениеЗаполнено(ВыборкаРегистратор.Регистратор) Тогда
							Продолжить;
						КонецЕсли;
						Если ВыборкаРегистратор.СуммаДоходовФакт=0 И ВыборкаРегистратор.СуммаРасходовФакт=0 Тогда
							Продолжить;
						КонецЕсли; 
						ОбластьРегистратор.Параметры.Заполнить(ВыборкаРегистратор);
						Результат.Вывести(ОбластьРегистратор, 5, , Ложь);
					КонецЦикла; 
				КонецЦикла;
			Иначе
				ВыборкаРегистратор = ВыборкаЗапасы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Регистратор");
				Пока ВыборкаРегистратор.Следующий() Цикл
					Если НЕ ЗначениеЗаполнено(ВыборкаРегистратор.Регистратор) Тогда
						Продолжить;
					КонецЕсли; 
					Если ВыборкаРегистратор.СуммаДоходовФакт=0 И ВыборкаРегистратор.СуммаРасходовФакт=0 Тогда
						Продолжить;
					КонецЕсли; 
					ОбластьРегистратор.Параметры.Заполнить(ВыборкаРегистратор);
					Результат.Вывести(ОбластьРегистратор, 5, , Ложь);
				КонецЦикла; 
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла; 
	
	Область = Макет.ПолучитьОбласть("ПодвалДоходыРасходы");
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("РентабельностьПлан", ?(ВыборкаИтоги.СуммаДоходовПлан=0, "-", Формат(100 * (ВыборкаИтоги.СуммаДоходовПлан - ВыборкаИтоги.СуммаРасходовПлан) / ВыборкаИтоги.СуммаДоходовПлан, "ЧДЦ=1")));
	СтруктураПолей.Вставить("РентабельностьФакт", ?(ВыборкаИтоги.СуммаДоходовФакт=0, "-", Формат(100 * (ВыборкаИтоги.СуммаДоходовФакт - ВыборкаИтоги.СуммаРасходовФакт) / ВыборкаИтоги.СуммаДоходовФакт, "ЧДЦ=1")));
	СтруктураПолей.Вставить("НаценкаПлан", ?(ВыборкаИтоги.СуммаРасходовПлан=0, "-", Формат(100 * (ВыборкаИтоги.СуммаДоходовПлан - ВыборкаИтоги.СуммаРасходовПлан) / ВыборкаИтоги.СуммаРасходовПлан, "ЧДЦ=1")));
	СтруктураПолей.Вставить("НаценкаФакт", ?(ВыборкаИтоги.СуммаРасходовФакт=0, "-", Формат(100 * (ВыборкаИтоги.СуммаДоходовФакт - ВыборкаИтоги.СуммаРасходовФакт) / ВыборкаИтоги.СуммаРасходовФакт, "ЧДЦ=1")));
	Область.Параметры.Заполнить(ВыборкаИтоги);
	Область.Параметры.Заполнить(СтруктураПолей);
	Результат.Вывести(Область, 1);
	
	Если НЕ ФинансовыйРезультатРассчитан Тогда
		Область = Макет.ПолучитьОбласть("ПоясняющаяНадпись");
		Область.Параметры.Текст = НСтр("ru = '* По заказу не рассчитан финансовый результат. После закрытия месяца сумма фактических расходов может измениться.'");
		Результат.Вывести(Область, 1);
	КонецЕсли; 
	
	Область = Макет.ПолучитьОбласть("Отступ");
	Результат.Вывести(Область, 1);
	
КонецПроцедуры

Процедура ВывестиСекциюОтгрузка(Макет, Результат, Параметры)
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.Продажи) Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ОтгрузкаОднимДокументом") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", Параметры.ЗаказПокупателя);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПродажиОбороты.Номенклатура КАК Номенклатура,
	|	ПродажиОбороты.Номенклатура.Артикул КАК Артикул,
	|	ПродажиОбороты.Номенклатура.Штрихкод КАК Штрихкод,
	|	ПродажиОбороты.Характеристика КАК Характеристика,
	|	ПродажиОбороты.Документ.Номер КАК НомерДокумента,
	|	ПродажиОбороты.Документ.Дата КАК ДатаДокумента,
	|	ПродажиОбороты.Документ.Организация.Префикс КАК Префикс,
	|	ПродажиОбороты.Документ КАК ДокументОтгрузки,
	|	ПродажиОбороты.КоличествоОборот КАК КоличествоОтгружено,
	|	ПродажиОбороты.СуммаОборот КАК СуммаОтгружено,
	|	ПродажиОбороты.Документ.Дата КАК ДатаОтгрузкиФакт,
	|	ЕСТЬNULL(ВложенныйЗапрос.ДатаОтгрузки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОтгрузкиПлан,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВложенныйЗапрос.СуммаДокумента = 0
	|				ТОГДА 0
	|			ИНАЧЕ ПродажиОбороты.СуммаОборот / ВложенныйЗапрос.СуммаДокумента * 100
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ПроцентОтгружено,
	|	ВложенныйЗапрос.СуммаДокумента КАК СуммаДокумента,
	|	ВложенныйЗапрос.Валюта.СимвольноеПредставление КАК Валюта,
	|	ПродажиОбороты.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ПоложениеДатыОтгрузки КАК ПоложениеДатыОтгрузки,
	|	ЕСТЬNULL(ПродажиОбороты.Документ.СтруктурнаяЕдиница, НЕОПРЕДЕЛЕНО) КАК Склад
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(, , Период, ЗаказПокупателя = &ЗаказПокупателя) КАК ПродажиОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|			ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА ЗаказПокупателяЗапасы.Ссылка.ПоложениеДатыОтгрузки = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|						ТОГДА ЗаказПокупателяЗапасы.ДатаОтгрузки
	|					ИНАЧЕ ЗаказПокупателяЗапасы.Ссылка.ДатаОтгрузки
	|				КОНЕЦ) КАК ДатаОтгрузки,
	|			ЗаказПокупателяЗапасы.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|			ЗаказПокупателяЗапасы.Ссылка.ВалютаДокумента КАК Валюта,
	|			ЗаказПокупателяЗапасы.Ссылка.ПоложениеДатыОтгрузки КАК ПоложениеДатыОтгрузки
	|		ИЗ
	|			Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|		ГДЕ
	|			ЗаказПокупателяЗапасы.Ссылка = &ЗаказПокупателя
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЗаказПокупателяЗапасы.Номенклатура,
	|			ЗаказПокупателяЗапасы.Характеристика,
	|			ЗаказПокупателяЗапасы.Ссылка.СуммаДокумента,
	|			ЗаказПокупателяЗапасы.Ссылка.ВалютаДокумента,
	|			ЗаказПокупателяЗапасы.Ссылка.ПоложениеДатыОтгрузки) КАК ВложенныйЗапрос
	|		ПО ПродажиОбороты.Номенклатура = ВложенныйЗапрос.Номенклатура
	|			И ПродажиОбороты.Характеристика = ВложенныйЗапрос.Характеристика
	|ИТОГИ
	|	МАКСИМУМ(НомерДокумента),
	|	МАКСИМУМ(Префикс),
	|	МАКСИМУМ(ДатаДокумента),
	|	СУММА(КоличествоОтгружено),
	|	СУММА(СуммаОтгружено),
	|	МАКСИМУМ(ДатаОтгрузкиПлан),
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА МАКСИМУМ(ВложенныйЗапрос.СуммаДокумента) = 0
	|				ТОГДА 0
	|			ИНАЧЕ СУММА(СуммаОтгружено) / МАКСИМУМ(ВложенныйЗапрос.СуммаДокумента) * 100
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ПроцентОтгружено,
	|	МАКСИМУМ(ПоложениеДатыОтгрузки),
	|	МАКСИМУМ(Склад)
	|ПО
	|	Валюта,
	|	ДокументОтгрузки";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаИтоги = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	Область = Макет.ПолучитьОбласть("ШапкаОтгрузка");
	Результат.Вывести(Область, 1);
	ОбластьДокумент = Макет.ПолучитьОбласть("СтрокаОтгрузкаДокумент");
	ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаОтгрузкаНоменклатура");
	
	НачалоВывода = Результат.ВысотаТаблицы;
	
	ВыборкаДокумент = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДокумент.Следующий() Цикл
		ОбластьДокумент.Параметры.Заполнить(ВыборкаДокумент);
		ОбластьДокумент.Параметры.ПредставлениеДокумента = Строка(ВыборкаДокумент.ДокументОтгрузки.Метаданные().Синоним)+" №"+
		ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(ВыборкаДокумент.ДатаДокумента, ВыборкаДокумент.НомерДокумента, ВыборкаДокумент.Префикс);
		Результат.Вывести(ОбластьДокумент, 2);
		ВыборкаДетали = ВыборкаДокумент.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			ОбластьСтрока.Параметры.Заполнить(ВыборкаДетали);
			ОбластьСтрока.Параметры.НоменклатураРасшифровка = ВыборкаДетали.Номенклатура;
			ОбластьСтрока.Параметры.Номенклатура = ПечатьДокументовУНФ.ПредставлениеНоменклатурыДляПечати(
			ВыборкаДетали.Номенклатура, 
			ВыборкаДетали.Характеристика, 
			ВыборкаДетали.Артикул);
			Если ВыборкаДетали.ПоложениеДатыОтгрузки<>Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
				ОбластьСтрока.Параметры.ДатаОтгрузкиПлан = "";
			КонецЕсли; 
			Результат.Вывести(ОбластьСтрока, 3);
		КонецЦикла;
	КонецЦикла; 
	
	Область = Макет.ПолучитьОбласть("ПодвалОтгрузка");
	Область.Параметры.Заполнить(ВыборкаИтоги);
	Результат.Вывести(Область, 1);
	
	Если Параметры.Свойство("ДатаОтгрузкиВШапке") И Результат.ВысотаТаблицы>=НачалоВывода Тогда
		ВыведеннаяОбласть = Результат.Область(НачалоВывода, 4, Результат.ВысотаТаблицы, 4);
		ВыведеннаяОбласть.ШиринаКолонки = 0;
	КонецЕсли; 
	
	Область = Макет.ПолучитьОбласть("Отступ");
	Результат.Вывести(Область, 1);
	
КонецПроцедуры

Процедура ВывестиСекциюОплаты(Макет, Результат, Параметры)
	
	Если Параметры.Свойство("ОплатаОднимДокументом") Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", Параметры.ЗаказПокупателя);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОплатаСчетовИЗаказовОбороты.Регистратор КАК ДокументОплаты,
	|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.СуммаДокумента КАК СуммаДокумента,
	|	ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот + ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот КАК СуммаОплаты,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ОплатаСчетовИЗаказовОбороты.СчетНаОплату.СуммаДокумента = 0
	|				ТОГДА 0
	|			ИНАЧЕ (ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот + ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот) / ОплатаСчетовИЗаказовОбороты.СчетНаОплату.СуммаДокумента * 100
	|		КОНЕЦ КАК ЧИСЛО(10, 2)) КАК ПроцентОплаты,
	|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.ВалютаДокумента КАК Валюта,
	|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.ВалютаДокумента.СимвольноеПредставление КАК ВалютаСимвольноеПредставление
	|ИЗ
	|	РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(, , Авто, СчетНаОплату = &ЗаказПокупателя) КАК ОплатаСчетовИЗаказовОбороты
	|ГДЕ
	|	ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот + ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот <> 0
	|ИТОГИ
	|	СУММА(СуммаОплаты),
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА МАКСИМУМ(СуммаДокумента) = 0
	|				ТОГДА 0
	|			ИНАЧЕ СУММА(СуммаОплаты) / МАКСИМУМ(СуммаДокумента) * 100
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ПроцентОплаты
	|ПО
	|	Валюта";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаИтоги = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	Область = Макет.ПолучитьОбласть("ШапкаОплата");
	Результат.Вывести(Область, 1);
	Область = Макет.ПолучитьОбласть("СтрокаОплата");
	
	ВыборкаДетали = ВыборкаИтоги.Выбрать();
	Пока ВыборкаДетали.Следующий() Цикл
		ИменаРеквизитов = "Дата, Номер";
		ЗначенияПоУмолчанию = Новый Структура;
		РеквизитыДокумента = ВыборкаДетали.ДокументОплаты.Метаданные().Реквизиты;
		Если РеквизитыДокумента.Найти("Организация")<>Неопределено Тогда
			ИменаРеквизитов = ИменаРеквизитов + ", Организация.Префикс";
		Иначе
			ЗначенияПоУмолчанию.Вставить("ОрганизацияПрефикс", "");
		КонецЕсли; 
		Если РеквизитыДокумента.Найти("СуммаДокумента")<>Неопределено Тогда
			ИменаРеквизитов = ИменаРеквизитов + ", СуммаДокумента";
		Иначе
			ЗначенияПоУмолчанию.Вставить("СуммаДокумента", 0);
		КонецЕсли; 
		Если РеквизитыДокумента.Найти("ВалютаДенежныхСредств")<>Неопределено Тогда
			ИменаРеквизитов = ИменаРеквизитов + ", ВалютаДенежныхСредств, ВалютаДенежныхСредств.СимвольноеПредставление";
		Иначе
			ЗначенияПоУмолчанию.Вставить("ВалютаДенежныхСредств", Неопределено);
			ЗначенияПоУмолчанию.Вставить("ВалютаДенежныхСредствСимвольноеПредставление", "");
		КонецЕсли; 
		РеквизитыДокументаОплаты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыборкаДетали.ДокументОплаты, ИменаРеквизитов);
		Если ЗначенияПоУмолчанию.Количество()>0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(РеквизитыДокументаОплаты, ЗначенияПоУмолчанию);
		КонецЕсли; 
		Область.Параметры.Заполнить(ВыборкаДетали);
		Область.Параметры.ДатаОплаты = РеквизитыДокументаОплаты.Дата;
		Область.Параметры.Номер = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(РеквизитыДокументаОплаты.Дата, РеквизитыДокументаОплаты.Номер, РеквизитыДокументаОплаты.ОрганизацияПрефикс);
		Область.Параметры.ВидДокумента = ВыборкаДетали.ДокументОплаты.Метаданные().Синоним;
		Область.Параметры.Валюта = ВыборкаДетали.ВалютаСимвольноеПредставление;
		Если РеквизитыДокументаОплаты.СуммаДокумента>0 И РеквизитыДокументаОплаты.ВалютаДенежныхСредств<>ВыборкаДетали.Валюта Тогда
			Область.Параметры.СуммаПлатежа = РеквизитыДокументаОплаты.СуммаДокумента;
			Область.Параметры.ВалютаПлатежа = РеквизитыДокументаОплаты.ВалютаДенежныхСредствСимвольноеПредставление;
		КонецЕсли; 
		Результат.Вывести(Область, 2);
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("ПодвалОплата");
	Область.Параметры.Заполнить(ВыборкаИтоги);
	Результат.Вывести(Область, 1);
	
	Область = Макет.ПолучитьОбласть("Отступ");
	Результат.Вывести(Область, 1);
	
КонецПроцедуры

Процедура ВывестиГрафикПлатежей(Макет, Результат, Параметры)
	
	Если Параметры.Свойство("ОплатаОднимДокументом") Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", Параметры.ЗаказПокупателя);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежныйКалендарьОбороты.СуммаОборот КАК СуммаОплаты,
	|	ПлатежныйКалендарьОбороты.Валюта КАК Валюта,
	|	ПлатежныйКалендарьОбороты.ПериодДень КАК ДатаОплаты,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПлатежныйКалендарьОбороты.СчетНаОплату.СуммаДокумента = 0
	|				ТОГДА 0
	|			ИНАЧЕ ПлатежныйКалендарьОбороты.СуммаОборот / ПлатежныйКалендарьОбороты.СчетНаОплату.СуммаДокумента * 100
	|		КОНЕЦ КАК ЧИСЛО(10, 2)) КАК ПроцентОплаты
	|ИЗ
	|	РегистрНакопления.ПлатежныйКалендарь.Обороты(, , Авто, СчетНаОплату = &ЗаказПокупателя) КАК ПлатежныйКалендарьОбороты
	|ГДЕ
	|	ПлатежныйКалендарьОбороты.СуммаОборот <> 0";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("ШапкаГрафикПлатежей");
	Результат.Вывести(Область);
	Область = Макет.ПолучитьОбласть("СтрокаГрафикПлатежей");
	
	ВыборкаДетали = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетали.Следующий() Цикл
		Область.Параметры.Заполнить(ВыборкаДетали);
		Результат.Вывести(Область);
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("ПодвалГрафикПлатежей");
	Результат.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Отступ");
	Результат.Вывести(Область);
	
КонецПроцедуры

Процедура ВывестиСекциюСобытия(Макет, Результат, Параметры)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", Параметры.ЗаказПокупателя);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Событие.Ссылка КАК Событие,
	|	Событие.Дата КАК ДатаСобытия,
	|	Событие.ТипСобытия КАК ТипСобытия,
	|	Событие.Состояние КАК СостояниеСобытия,
	|	Событие.Тема КАК Тема,
	|	Событие.Содержание КАК Содержание,
	|	Событие.Ответственный КАК Ответственный,
	|	Событие.СписокУчастников КАК СписокУчастников
	|ИЗ
	|	Документ.Событие КАК Событие
	|ГДЕ
	|	(Событие.ДокументОснование = &ЗаказПокупателя
	|			ИЛИ Событие.Ссылка В
	|				(ВЫБРАТЬ
	|					СобытиеДокументыОснования.Ссылка
	|				ИЗ
	|					Документ.Событие.ДокументыОснования КАК СобытиеДокументыОснования
	|				ГДЕ
	|					СобытиеДокументыОснования.ДокументОснование = &ЗаказПокупателя))
	|	И НЕ Событие.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСобытия";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("ШапкаСобытия");
	Результат.Вывести(Область);
	Область = Макет.ПолучитьОбласть("СтрокаСобытия");
	
	ВыборкаДетали = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетали.Следующий() Цикл
		Область.Параметры.Заполнить(ВыборкаДетали);
		Область.Параметры.Содержание = СокрЛП(ВыборкаДетали.Содержание);
		Область.Параметры.ДатаСобытия = Формат(ВыборкаДетали.ДатаСобытия, "ДЛФ=D");
		Область.Параметры.Контакты = ВыборкаДетали.СписокУчастников;
		Результат.Вывести(Область);
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("Отступ");
	Результат.Вывести(Область, 1);
	
КонецПроцедуры

Процедура ВывестиСледующуюСтрокуШапки(Результат, Макет, Показатели, СтекПоказателейЛеваяКолонка, СтекПоказателейПраваяКолонка)
	
	ЗначениеЛевойКолонки = СледующийПоказательДляВывода(СтекПоказателейЛеваяКолонка, Показатели);
	ЗначениеПравойКолонки = СледующийПоказательДляВывода(СтекПоказателейПраваяКолонка, Показатели);
	
	Если ЗначениеЛевойКолонки=Неопределено И ЗначениеПравойКолонки=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Область = ОбластьПоПоказателю(Макет, ЗначениеЛевойКолонки, Показатели, Истина);
	Результат.Вывести(Область);
	Область = ОбластьПоПоказателю(Макет, ЗначениеПравойКолонки, Показатели, Ложь);
	Результат.Присоединить(Область);
	
КонецПроцедуры

Функция СледующийПоказательДляВывода(Список, Показатели)
	
	Пока Истина Цикл
		Если Список.Количество()=0 Тогда
			Прервать;
		КонецЕсли; 	
		ИмяПоказателя = Список[0].Значение;
		Список.Удалить(0);
		Если СтрНайти(ИмяПоказателя, "Заголовок")>0 Тогда
			Возврат ИмяПоказателя;
		КонецЕсли; 
		Если НЕ Показатели.Свойство(ИмяПоказателя) Тогда
			Продолжить;
		КонецЕсли;
		Возврат ИмяПоказателя;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

Функция ОбластьПоПоказателю(Макет, Показатель, Показатели, Левая)
	
	Колонка = ?(Левая, "ЛеваяКолонка", "ПраваяКолонка");
	
	Если Показатель=Неопределено Тогда
		Возврат Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
	КонецЕсли;
	
	Если СтрНайти(Показатель, "Заголовок")>0 Тогда
		Текст = СтрЗаменить(Показатель, "Заголовок", "");
		Область = Макет.ПолучитьОбласть("Подзаголовок|"+Колонка);
		Область.Параметры.Текст = Текст+":";
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="Номер" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = НСтр("ru = 'Номер заказа:'");
		Область.Параметры.Значение = Показатели.Номер;
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="СостояниеДокумента" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовкаВажно|"+Колонка);
		Область.Параметры.Значение = Показатели.СостояниеДокумента;
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="Контрагент" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовка|"+Колонка);
		Область.Параметры.Значение = Показатели.Контрагент;
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="Старт" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = НСтр("ru = 'Старт:'");
		СтрокаФормата = НСтр("ru = 'д МММ'");
		Если Год(ТекущаяДатаСеанса())<>Год(Показатели.Старт) Тогда
			СтрокаФормата = СтрокаФормата+НСтр("ru = ' гггг'");
		КонецЕсли; 
		Если НачалоДня(Показатели.Старт)<>Показатели.Старт Тогда
			СтрокаФормата = СтрокаФормата+НСтр("ru = ' ЧЧ:мм'");
		КонецЕсли;
		СтрокаФормата = СтрШаблон("ДФ='%1'", СтрокаФормата);
		Область.Параметры.Значение = Формат(Показатели.Старт, СтрокаФормата);
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="Финиш" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = НСтр("ru = 'Финиш:'");
		СтрокаФормата = НСтр("ru = 'д МММ'");
		Если Год(ТекущаяДатаСеанса())<>Год(Показатели.Финиш) Тогда
			СтрокаФормата = СтрокаФормата+НСтр("ru = ' гггг'");
		КонецЕсли; 
		Если НачалоДня(Показатели.Финиш)<>Показатели.Финиш Тогда
			СтрокаФормата = СтрокаФормата+НСтр("ru = ' ЧЧ:мм'");
		КонецЕсли;
		СтрокаФормата = СтрШаблон("ДФ='%1'", СтрокаФормата);
		Область.Параметры.Значение = Формат(Показатели.Финиш, СтрокаФормата);
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="СостояниеЗаказа" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовка|"+Колонка);
		Область.Параметры.Значение = Показатели.СостояниеЗаказа;
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="ПлановаяДатаОтгрузки" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = НСтр("ru = 'План. отгрузка:'");
		Если Год(ТекущаяДатаСеанса())=Год(Показатели.ПлановаяДатаОтгрузки) Тогда
			Область.Параметры.Значение = Формат(Показатели.ПлановаяДатаОтгрузки, НСтр("ru = 'ДФ=''д МММ'''"));
		Иначе
			Область.Параметры.Значение = Формат(Показатели.ПлановаяДатаОтгрузки, НСтр("ru = 'ДФ=''д МММ гггг'''"));
		КонецЕсли; 
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="СуммаДокумента" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = НСтр("ru = 'Сумма заказа:'");
		Область.Параметры.Значение = Формат(Показатели.СуммаДокумента, "ЧДЦ=2");
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="Валюта" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = НСтр("ru = 'Валюта:'");
		Область.Параметры.Значение = Показатели.ВалютаПредставление;
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="СуммаСкидки" Тогда
		ПроцентСкиди = Окр(Показатели.СуммаСкидки/(Показатели.СуммаСкидки+Показатели.СуммаДокумента)*100, 2);
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = СтрШаблон(НСтр("ru = 'Скидка (%1):'"), Строка(ПроцентСкиди)+"%");
		Область.Параметры.Значение = Формат(Показатели.СуммаСкидки, "ЧДЦ=2");
		Возврат Область;
	КонецЕсли;
	
	Если Показатель="СуммаРучнойСкидки" Тогда
		ПроцентСкиди = Окр(Показатели.СуммаРучнойСкидки/(Показатели.СуммаСкидки+Показатели.СуммаДокумента)*100, 2);
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Если Показатели.СуммаРучнойСкидки=0 Тогда
			ЗаголовокПоказателя = НСтр("ru = 'Ручная скидка (%1):'");
		Иначе
			ЗаголовокПоказателя = НСтр("ru = '- ручная (%1):'");
		КонецЕсли; 
		Область.Параметры.Показатель = СтрШаблон(ЗаголовокПоказателя, Строка(ПроцентСкиди)+"%");
		Область.Параметры.Значение = Формат(Показатели.СуммаРучнойСкидки, "ЧДЦ=2");
		Возврат Область;
	КонецЕсли;
	
	Если Показатель="СуммаАвтоматическойСкидки" Тогда
		ПроцентСкиди = Окр(Показатели.СуммаАвтоматическойСкидки/(Показатели.СуммаСкидки+Показатели.СуммаДокумента)*100, 2);
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Если Показатели.СуммаРучнойСкидки=0 Тогда
			ЗаголовокПоказателя = НСтр("ru = 'Авт. скидка (%1):'");
		Иначе
			ЗаголовокПоказателя = НСтр("ru = '- авто. (%1):'");
		КонецЕсли; 
		Область.Параметры.Показатель = СтрШаблон(ЗаголовокПоказателя, Строка(ПроцентСкиди)+"%");
		Область.Параметры.Значение = Формат(Показатели.СуммаАвтоматическойСкидки, "ЧДЦ=2");
		Возврат Область;
	КонецЕсли;
	
	Если Показатель="Организация" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = НСтр("ru = 'Организация:'");
		Область.Параметры.Значение = Показатели.Организация;
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="Подразделение" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = НСтр("ru = 'Подразделение:'");
		Область.Параметры.Значение = Показатели.Подразделение;
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="Склад" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = НСтр("ru = 'Склад:'");
		Область.Параметры.Значение = Показатели.Склад;
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="Ответственный" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = НСтр("ru = 'Ответственный:'");
		Область.Параметры.Значение = Показатели.Ответственный;
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="КонтактноеЛицо" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = НСтр("ru = 'Контакт:'");
		Область.Параметры.Значение = Строка(Показатели.КонтактноеЛицо)+?(ЗначениеЗаполнено(Показатели.Должность), " ("+Показатели.Должность+")", "");
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="СуммаОплаты" Тогда
		ПроцентОплаты = ?(Показатели.СуммаДокумента=0, 0,Окр(Показатели.СуммаОплаты/Показатели.СуммаДокумента*100, 2));
		Если НЕ ЗначениеЗаполнено(Показатели.ДокументОплаты) Тогда
			Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовкаВажно|"+Колонка);
			Область.Параметры.Значение = НСтр("ru = 'Не оплачен'");
		ИначеЕсли ПроцентОплаты=100 Тогда
			Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовкаВажно|"+Колонка);
			Если Год(ТекущаяДатаСеанса())=Год(Показатели.ДатаОплаты) Тогда
				Область.Параметры.Значение = СтрШаблон(НСтр("ru = 'Оплачен %1'"), Формат(Показатели.ДатаОплаты, НСтр("ru = 'ДФ=''д МММ'''")));
			Иначе
				Область.Параметры.Значение = СтрШаблон(НСтр("ru = 'Оплачен %1'"), Формат(Показатели.ДатаОплаты, НСтр("ru = 'ДФ=''д МММ гггг'''")));
			КонецЕсли;
		Иначе
			Область = Макет.ПолучитьОбласть("ОбщиеДанныеВажно|"+Колонка);
			Область.Параметры.Показатель = СтрШаблон(НСтр("ru = 'Оплачено%1:'"), ?(ПроцентОплаты<>100, " ("+Строка(ПроцентОплаты)+"%)", ""));
			Область.Параметры.Значение = Формат(Показатели.СуммаОплаты, "ЧДЦ=2");
		КонецЕсли; 
		Если Показатели.КоличествоДокументовОплаты=1 Тогда
			Область.Параметры.ЗначениеРасшифровка = Показатели.ДокументОплаты;
		КонецЕсли; 
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="СуммаОтгрузки" Тогда
		Если Показатели.Свойство("ПроцентОтгрузки") Тогда
			ПроцентОтгрузки = Показатели.ПроцентОтгрузки;
		Иначе
			ПроцентОтгрузки = ?(Показатели.СуммаДокумента=0, 0, Окр(Показатели.СуммаОтгрузки/Показатели.СуммаДокумента*100, 2));
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(Показатели.ДокументОтгрузки) Тогда
			Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовкаВажно|"+Колонка);
			Область.Параметры.Значение = НСтр("ru = 'Не отгружен'");
		ИначеЕсли ПроцентОтгрузки=100 Тогда
			Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовкаВажно|"+Колонка);
			Если Год(ТекущаяДатаСеанса())=Год(Показатели.ДатаОтгрузки) Тогда
				Область.Параметры.Значение = СтрШаблон(НСтр("ru = 'Отгружен %1'"), Формат(Показатели.ДатаОтгрузки, НСтр("ru = 'ДФ=''д МММ'''")));
			Иначе
				Область.Параметры.Значение = СтрШаблон(НСтр("ru = 'Отгружен %1'"), Формат(Показатели.ДатаОтгрузки, НСтр("ru = 'ДФ=''д МММ гггг'''")));
			КонецЕсли; 
		Иначе
			Область = Макет.ПолучитьОбласть("ОбщиеДанныеВажно|"+Колонка);
			Область.Параметры.Показатель = СтрШаблон(НСтр("ru = 'Отгружено%1:'"), ?(ПроцентОтгрузки<>100, " ("+ПроцентОтгрузки+"%)", ""));
			Область.Параметры.Значение = Формат(Показатели.СуммаОтгрузки, "ЧДЦ=2");
		КонецЕсли; 
		Если Показатели.КоличествоДокументовОтгрузки=1 Тогда
			Область.Параметры.ЗначениеРасшифровка = Показатели.ДокументОтгрузки;
		КонецЕсли; 
		Возврат Область;
	КонецЕсли;
	
	Если Показатель="EmailКонтрагента" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовка|"+Колонка);
		Область.Параметры.Значение = Показатели.EmailКонтрагента;
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="ТелефонКонтрагента" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовка|"+Колонка);
		Область.Параметры.Значение = Показатели.ТелефонКонтрагента;
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="ФактАдресКонтрагента" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовка|"+Колонка);
		Область.Параметры.Значение = Показатели.ФактАдресКонтрагента;
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="EmailКонтактногоЛица" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовка|"+Колонка);
		Область.Параметры.Значение = Показатели.EmailКонтактногоЛица;
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="ТелефонКонтактногоЛица" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовка|"+Колонка);
		Область.Параметры.Значение = Показатели.ТелефонКонтактногоЛица;
		Возврат Область;
	КонецЕсли;
	
	// Доставка
	
	Если Показатель="СпособДоставки" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовкаВажно|"+Колонка);
		Область.Параметры.Значение = Показатели.СпособДоставки;
		Возврат Область;
	КонецЕсли;
	
	Если Показатель="ВариантУчетаДоставки" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовкаВажно|"+Колонка);
		Область.Параметры.Значение = Показатели.ВариантУчетаДоставки;
		Возврат Область;
	КонецЕсли;
	
	Если Показатель="СлужбаДоставки" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = НСтр("ru = 'Служба доставки:'");
		Область.Параметры.Значение = Показатели.СлужбаДоставки;
		Возврат Область;
	КонецЕсли;
	
	Если Показатель="АдресДоставки" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовка|"+Колонка);
		Область.Параметры.Значение = Показатели.АдресДоставки;
		Возврат Область;
	КонецЕсли;
	
	Если Показатель="КонтактныйТелефон" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовка|"+Колонка);
		Область.Параметры.Значение = НСтр("ru = 'Тел. '")+Показатели.КонтактныйТелефон+
		?(ПустаяСтрока(Показатели.КонтактныйТелефон) ИЛИ ПустаяСтрока(Показатели.ЗапаснойТелефон), "", ", ")+Показатели.ЗапаснойТелефон;
		Возврат Область;
	КонецЕсли;
	
	Если Показатель="ЗонаТариф" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = НСтр("ru = 'Зона / Тариф:'");
		Область.Параметры.Значение = Показатели.ЗонаТариф;
		Возврат Область;
	КонецЕсли;
	
	Если Показатель="СтоимостьДоставки" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = НСтр("ru = 'Стоимость доставки:'");
		Область.Параметры.Значение = Формат(Показатели.СтоимостьДоставки, "ЧДЦ=2");
		Возврат Область;
	КонецЕсли;
	
	Если Показатель="КонтактноеЛицоДоставки" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = НСтр("ru = 'Получатель:'");
		Область.Параметры.Значение = Показатели.КонтактноеЛицоДоставки;
		Возврат Область;
	КонецЕсли;
	
	Если Показатель="ТрекНомер" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = НСтр("ru = 'Трек-номер:'");
		Область.Параметры.Значение = Показатели.ТрекНомер;
		Возврат Область;
	КонецЕсли;
	
	Если Показатель="ДополнительнаяИнформацияПоДоставке" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовка|"+Колонка);
		Область.Параметры.Значение = Показатели.ДополнительнаяИнформацияПоДоставке;
		Возврат Область;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьЗапросВПакет(ТекстЗапроса, ТекстПодзапроса)
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		ТекстЗапроса = ТекстЗапроса +
		"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ТекстПодзапроса;
	
КонецПроцедуры
 
#КонецОбласти 

Функция УниверсальныйЗапросПоДаннымДокумента(МассивОбъектов, ИспользоватьФаксимиле, Ошибки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ИспользоватьФаксимиле", ИспользоватьФаксимиле);
	
	Запрос.Текст = 
	"
	// :::Шапка
	|ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка
	|	,ЗаказПокупателя.Дата КАК ДатаДокумента
	|	,ЗаказПокупателя.Финиш КАК ДатаВыполненияРабот
	|	,ЗаказПокупателя.Номер КАК Номер
	|	,""Расходная накладная"" КАК ПредставлениеРегистратора
	|	,Неопределено КАК ВидОперации
	|	,ЗаказПокупателя.Организация КАК Организация
	|	,ЗаказПокупателя.Организация.ЮридическоеФизическоеЛицо КАК ОрганизацияЮридическоеФизическоеЛицо
	|	,ЗаказПокупателя.Организация.Префикс КАК Префикс
	|	,ЗаказПокупателя.Организация.ФайлЛоготип КАК ФайлЛоготип
	|	,ЗаказПокупателя.Организация.ФайлФаксимильнаяПечать КАК ФаксимилеПечати
	|	,Выбор КОГДА &ИспользоватьФаксимиле = ИСТИНА 
	|		ТОГДА Значение(Перечисление.ДаНет.Да)
	|		ИНАЧЕ Значение(Перечисление.ДаНет.Нет) КОНЕЦ КАК ИспользоватьФаксимиле
	|	,ЗаказПокупателя.ПодписьРуководителя.Должность КАК ДолжностьРуководителя
	|	,ЗаказПокупателя.ПодписьРуководителя.РасшифровкаПодписи КАК РасшифровкаПодписиРуководителя
	|	,ЗаказПокупателя.ПодписьРуководителя.РасшифровкаПодписи КАК РасшифровкаПодписиВыполнилРаботыУслуги
	|	,ЗаказПокупателя.ПодписьРуководителя.Факсимиле КАК ФаксимилеРуководителя
	|	,ЗаказПокупателя.ПодписьГлавногоБухгалтера.Должность КАК ДолжностьГлавногоБухгалтера
	|	,ЗаказПокупателя.ПодписьГлавногоБухгалтера.РасшифровкаПодписи КАК РасшифровкаПодписиГлавногоБухгалтера
	|	,ЗаказПокупателя.ПодписьГлавногоБухгалтера.Факсимиле КАК ФаксимилеГлавногоБухгалтера
	|	,ЗаказПокупателя.ПодписьКладовщика.Факсимиле КАК ФаксимилеКладовщика
	|	,ЗаказПокупателя.ПодписьКладовщика.Должность КАК ДолжностьКладовщика
	|	,ЗаказПокупателя.ПодписьКладовщика.РасшифровкаПодписи КАК РасшифровкаПодписиКладовщика
	|	,ЗаказПокупателя.БанковскийСчет КАК БанковскийСчет
	|	,ЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС
	|	,ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента
	|	,ЗаказПокупателя.Контрагент КАК Контрагент
	|	,ЗаказПокупателя.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента
	|	,ЗаказПокупателя.АдресДоставки КАК АдресДоставки
	|	,ЗаказПокупателя.КонтактноеЛицоПодписант.Наименование КАК РасшифровкаПодписиКонтрагента
	|	,ЗаказПокупателя.КонтактноеЛицоПодписант.Наименование КАК РасшифровкаПодписиПринялРаботыУслуги
	|	,ЗаказПокупателя.Договор
	|	,ЗаказПокупателя.УсловияСчетаЗаказа КАК ДополнительныеУсловия
	|	,ЗаказПокупателя.ДокументОснование
	|	,ЗаказПокупателя.Ответственный
	|	,ЗаказПокупателя.Ответственный.Физлицо КАК ФизическоеЛицоОтветственного
	|	,ЗаказПокупателя.Автор
	|	,ЗаказПокупателя.ДисконтнаяКарта
	|	,ЗаказПокупателя.ПроцентСкидкиПоДисконтнойКарте
	|	,ЗаказПокупателя.СостояниеЗаказа
	|	,ЗаказПокупателя.Комментарий КАК Комментарий
	|	,ЗаказПокупателя.ОснованиеПечати КАК ОснованиеПечати
	|	,ЗаказПокупателя.ОснованиеПечатиСсылка КАК ОснованиеПечатиСсылка
	|	,ЗаказПокупателя.ОжидаетсяВыборВариантаКП
	|	,ЗаказПокупателя.Вес
	|	,ЗаказПокупателя.Объем
	|	,Выбор КОГДА ЗаказПокупателя.ВидОперации = Значение(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|		ИЛИ ЗаказПокупателя.СпособДоставки В(Значение(Перечисление.СпособыДоставки.ПустаяСсылка), Значение(Перечисление.СпособыДоставки.Самовывоз))
	|		ТОГДА Значение(Справочник.Номенклатура.ПустаяСсылка) 
	|		ИНАЧЕ ЗаказПокупателя.НоменклатураДоставки КОНЕЦ КАК НоменклатураДоставки
	|	,Выбор КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|		ТОГДА ЗаказПокупателя.НоменклатураДоставки.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000)) КОНЕЦ КАК ПредставлениеНоменклатурыДоставки
	|	,ЗаказПокупателя.НоменклатураДоставки.Артикул КАК АртикулДоставки
	|	,ЗаказПокупателя.НоменклатураДоставки.Код КАК КодДоставки
	|	,ЗаказПокупателя.НоменклатураДоставки.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДоставки
	|	,ЗаказПокупателя.СтоимостьДоставки
	|	,ЗаказПокупателя.СтавкаНДСДоставки
	|	,ЗаказПокупателя.СуммаНДСДоставки
	|
	// :::Табличная часть "Запасы"
	|	,ЗаказПокупателя.Запасы.(
	|		НомерСтроки КАК НомерСтроки
	|		,Содержание
	|		,Выбор КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателя.Запасы.Номенклатура) = ТИП(СТРОКА)
	|			ТОГДА ЗаказПокупателя.Запасы.Номенклатура
	|		КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА ЗаказПокупателя.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КОНЕЦ КАК ПредставлениеНоменклатуры
	|		,Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	|		,Номенклатура.Код КАК Код
	|		,Номенклатура.Артикул КАК Артикул
	|		,Номенклатура.Штрихкод КАК Штрихкод
	|		,Характеристика
	|		,Партия
	|		,ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|		,Цена КАК Цена
	|		,Сумма КАК Сумма
	|		,СтавкаНДС КАК СтавкаНДС
	|		,СуммаНДС КАК СуммаНДС
	|		,Всего КАК Всего
	|		,Вес КАК Вес
	|		,Количество КАК Количество
	|		,ПроцентСкидкиНаценки
	|		,Выбор КОГДА ЗаказПокупателя.Запасы.ПроцентСкидкиНаценки <> 0
	|				ИЛИ ЗаказПокупателя.Запасы.СуммаАвтоматическойСкидки <> 0
	|			ТОГДА 1
	|			ИНАЧЕ 0 КОНЕЦ КАК ЕстьСкидка
	|		,СуммаАвтоматическойСкидки
	|		,Спецификация
	|		,ЭтоРазделитель
	|		,КлючСвязи
	|		,НомерВариантаКП КАК НомерВариантаКП
	|		,Ложь КАК ЭтоНабор
	|		,Выбор КОГДА НоменклатураНабора <> Значение(Справочник.Номенклатура.ПустаяСсылка) 
	|			И НоменклатураНабора.ВариантПечатиНабора = Значение(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора
	|		,НоменклатураНабора КАК НоменклатураНабора
	|		,ХарактеристикаНабора КАК ХарактеристикаНабора
	|	) КАК ТаблицаЗапасы
	|
	// :::Табличная часть "Добавленные наборы"
	|	,ЗаказПокупателя.ДобавленныеНаборы.(
	|		НоменклатураНабора КАК НоменклатураНабора
	|		,ХарактеристикаНабора КАК ХарактеристикаНабора
	|		,НомерВариантаКП КАК НомерВариантаКП
	|		,Количество КАК Количество
	|		,ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА НоменклатураНабора.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ЗапасНабора
	|		,НоменклатураНабора.ВариантПечатиНабора КАК ВариантПечатиНабора
	|		,НоменклатураНабора.ТипНоменклатуры КАК ТипНоменклатурыНабора
	|		,НоменклатураНабора.Артикул КАК АртикулНабора
	|		,НоменклатураНабора.Код КАК КодНабора
	|		,НоменклатураНабора.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНабора
	|		,НоменклатураНабора.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияНабора
	|		,ИСТИНА КАК ВыводитьИтоги
	|	) КАК ТаблицаДобавленныеНаборы
	|
	// :::Табличная часть "Работы, услуги"
	|	,ЗаказПокупателя.Работы.(
	|		НомерСтроки КАК НомерСтроки
	|		,Содержание
	|		,Выбор КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.Работы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА ЗаказПокупателя.Работы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.Работы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КОНЕЦ КАК ПредставлениеНоменклатуры
	|		,Номенклатура.Код КАК Код
	|		,Номенклатура.Артикул КАК Артикул
	|		,Номенклатура.Штрихкод КАК Штрихкод
	|		,Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения // Для услуг/работ в ТЧ нет Ед.изм.
	|		,Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	|		,Характеристика
	|		,Неопределено КАК Партия
	|		,Количество КАК Время
	|		,Кратность
	|		,Коэффициент
	|		,Цена КАК Цена
	|		,Сумма КАК Сумма
	|		,СтавкаНДС КАК СтавкаНДС
	|		,СуммаНДС КАК СуммаНДС
	|		,Всего КАК Всего
	|		,(Количество * Коэффициент * Кратность) КАК Количество
	|		,ПроцентСкидкиНаценки
	|		,Выбор КОГДА ЗаказПокупателя.Работы.ПроцентСкидкиНаценки <> 0
	|				ИЛИ ЗаказПокупателя.Работы.СуммаАвтоматическойСкидки <> 0
	|			ТОГДА 1
	|			ИНАЧЕ 0 КОНЕЦ КАК ЕстьСкидка
	|		,СуммаАвтоматическойСкидки
	|		,Ложь КАК ЭтоРазделитель
	|		,КлючСвязи
	|		,0 КАК НомерВариантаКП
	|		,Ложь КАК ЭтоНабор
	|		,Выбор КОГДА НоменклатураНабора <> Значение(Справочник.Номенклатура.ПустаяСсылка) 
	|			И НоменклатураНабора.ВариантПечатиНабора = Значение(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора
	|		,НоменклатураНабора КАК НоменклатураНабора
	|		,ХарактеристикаНабора КАК ХарактеристикаНабора
	|	) КАК ТаблицаРаботыУслуги
	|
	// :::Табличная часть "Платежный календарь"
	|	,ЗаказПокупателя.ПлатежныйКалендарь.(
	|		ДатаОплаты
	|		,Постфикс
	|		,ПроцентОплаты
	|		,СуммаОплаты
	|		,СуммаНДСОплаты
	|	) КАК ТаблицаПланаОплат
	|
	// :::Табличная часть "СерииНоменклатуры"
	|	,ЗаказПокупателя.СерииНоменклатуры.(
	|		Серия
	|		,КлючСвязи
	|	) КАК ТаблицаСерииНоменклатуры
	|ИЗ Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&МассивОбъектов)
	|	И (ЗаказПокупателя.ОсновнойВариантКП = 0
	|			ИЛИ ЗаказПокупателя.Запасы.НомерВариантаКП = ЗаказПокупателя.ОсновнойВариантКП)
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Работы.НомерСтроки,
	|	Запасы.НомерСтроки";
	
	ДанныеДокументов = Запрос.Выполнить().Выгрузить();
	ДоставкаСервер.ДобавитьСтрокуДоставкиУниверсальныеДанные(ДанныеДокументов);
	// Наборы
	НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(ДанныеДокументов, "ТаблицаЗапасы", Ошибки, Истина);
	НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(ДанныеДокументов, "ТаблицаРаботыУслуги", Ошибки);
	Возврат ДанныеДокументов;
	
КонецФункции

Функция ДанныеДокументовРегУчет(МассивОбъектов, ИспользоватьФаксимиле, ПечатнаяФормаТолькоВРублях = Истина, Ошибки = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ИспользоватьФаксимиле", ИспользоватьФаксимиле);
	Запрос.УстановитьПараметр("ПечатнаяФормаТолькоВРублях", ПечатнаяФормаТолькоВРублях);
	Запрос.УстановитьПараметр("НациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ЗаказПокупателя.Финиш КАК ДатаДокумента,
	|	ЗаказПокупателя.Дата КАК Дата,
	|	ВЫРАЗИТЬ(ЗаказПокупателя.Номер КАК СТРОКА(12)) КАК Номер,
	|	НЕОПРЕДЕЛЕНО КАК НомерИсправления,
	|	НЕОПРЕДЕЛЕНО КАК ДатаИсправления,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактура.Продажа) КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.Организация.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателя.Организация.ГоловнаяОрганизация
	|		ИНАЧЕ ЗаказПокупателя.Организация
	|	КОНЕЦ КАК Организация,
	|	ЗаказПокупателя.Организация.Префикс КАК Префикс,
	|	ЗаказПокупателя.Организация.ФайлФаксимильнаяПечать КАК ФаксимилеПечати,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.Организация.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателя.Организация.ЦифровойИндексОбособленногоПодразделения
	|		КОГДА ЗаказПокупателя.СтруктурнаяЕдиницаПродажи.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				И ЗаказПокупателя.СтруктурнаяЕдиницаПродажи.ГоловнаяОрганизация = ЗаказПокупателя.Организация
	|			ТОГДА ЗаказПокупателя.СтруктурнаяЕдиницаПродажи.ЦифровойИндексОбособленногоПодразделения
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ЦифровойИндексОбособленногоПодразделения,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.Организация.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателя.Организация
	|		КОГДА ЗаказПокупателя.СтруктурнаяЕдиницаПродажи.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				И ЗаказПокупателя.СтруктурнаяЕдиницаПродажи.ГоловнаяОрганизация = ЗаказПокупателя.Организация
	|			ТОГДА ЗаказПокупателя.СтруктурнаяЕдиницаПродажи
	|		ИНАЧЕ ЗаказПокупателя.Организация
	|	КОНЕЦ КАК ОбособленноеПодразделениеПоставщика,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СтатусУПД,
	|	ЗаказПокупателя.БанковскийСчет КАК БанковскийСчет,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.СтруктурнаяЕдиницаПродажи) КАК ПредставлениеПодразделения,
	|	ПРЕДСТАВЛЕНИЕ(ВЫБОР
	|			КОГДА ЗаказПокупателя.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|			ИНАЧЕ ЗаказПокупателя.СтруктурнаяЕдиницаРезерв
	|		КОНЕЦ) КАК ПредставлениеСкладаСписания,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.Грузоотправитель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателя.Грузоотправитель
	|		КОГДА ЗаказПокупателя.Организация.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателя.Организация
	|		КОГДА ЗаказПокупателя.СтруктурнаяЕдиницаПродажи.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				И ЗаказПокупателя.СтруктурнаяЕдиницаПродажи.ГоловнаяОрганизация = ЗаказПокупателя.Организация
	|			ТОГДА ЗаказПокупателя.СтруктурнаяЕдиницаПродажи
	|		ИНАЧЕ ЗаказПокупателя.Организация
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.Контрагент.ГоловнойКонтрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И ЗаказПокупателя.Контрагент.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ЗаказПокупателя.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ ЗаказПокупателя.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.Контрагент.ГоловнойКонтрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И ЗаказПокупателя.Контрагент.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ЗаказПокупателя.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ ЗаказПокупателя.Контрагент
	|	КОНЕЦ КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.Грузополучатель.ГоловнойКонтрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И ЗаказПокупателя.Грузополучатель.ГоловнойКонтрагент = ЗаказПокупателя.Контрагент
	|				И ЗаказПокупателя.Грузополучатель.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ЗаказПокупателя.Грузополучатель
	|		ИНАЧЕ ЗаказПокупателя.Контрагент
	|	КОНЕЦ КАК ОбособленноеПодразделениеПокупателя,
	|	ЗаказПокупателя.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателя.Грузополучатель
	|		ИНАЧЕ ЗаказПокупателя.Контрагент
	|	КОНЕЦ КАК Грузополучатель,
	|	ЗаказПокупателя.АдресДоставки КАК АдресДоставки,
	|	ЗаказПокупателя.КонтактноеЛицоПодписант.Наименование КАК РасшифровкаПодписиКонтрагента,
	|	ЗаказПокупателя.ДоверенностьНомер КАК ДоверенностьНомер,
	|	ЗаказПокупателя.ДоверенностьДата КАК ДоверенностьДата,
	|	ЗаказПокупателя.ДоверенностьВыдана КАК ДоверенностьВыдана,
	|	ЗаказПокупателя.ДоверенностьЛицо КАК ДоверенностьЛицо,
	|	ЗаказПокупателя.Договор.Представление КАК Основание,
	|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента1,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях = ИСТИНА
	|			ТОГДА НациональнаяВалюта.Значение
	|		ИНАЧЕ ЗаказПокупателя.ВалютаДокумента
	|	КОНЕЦ КАК ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях = ИСТИНА
	|			ТОГДА НациональнаяВалюта.Значение.НаименованиеПолное
	|		ИНАЧЕ ЗаказПокупателя.ВалютаДокумента.НаименованиеПолное
	|	КОНЕЦ КАК ВалютаНаименование,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях = ИСТИНА
	|			ТОГДА НациональнаяВалюта.Значение.Код
	|		ИНАЧЕ ЗаказПокупателя.ВалютаДокумента.Код
	|	КОНЕЦ КАК ВалютаКод,
	|	ЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказПокупателя.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
	|	ЗаказПокупателя.Курс КАК Курс,
	|	ЗаказПокупателя.Кратность КАК Кратность,
	|	ЗаказПокупателя.ОснованиеПечати КАК ПредставлениеОснования,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ОснованиеПечатиСсылка ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ЗаказПокупателя.ОснованиеПечатиСсылка.НомерДоговора
	|		ИНАЧЕ ЗаказПокупателя.ОснованиеПечатиСсылка.Номер
	|	КОНЕЦ КАК ОснованиеНомер,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ОснованиеПечатиСсылка ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ЗаказПокупателя.ОснованиеПечатиСсылка.ДатаДоговора
	|		ИНАЧЕ ЗаказПокупателя.ОснованиеПечатиСсылка.Дата
	|	КОНЕЦ КАК ОснованиеДата,
	|	НЕОПРЕДЕЛЕНО КАК ТранспортнаяНакладнаяНомер,
	|	НЕОПРЕДЕЛЕНО КАК ТранспортнаяНакладнаяДата,
	|	ВЫБОР
	|		КОГДА &ИспользоватьФаксимиле = ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДаНет.Да)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ДаНет.Нет)
	|	КОНЕЦ КАК ИспользоватьФаксимиле,
	|	ЗаказПокупателя.ПодписьРуководителя.Должность КАК ДолжностьРуководителя,
	|	ЗаказПокупателя.ПодписьРуководителя.РасшифровкаПодписи КАК РасшифровкаПодписиРуководителя,
	|	ЗаказПокупателя.ПодписьРуководителя.Факсимиле КАК ФаксимилеРуководителя,
	|	ЗаказПокупателя.ПодписьГлавногоБухгалтера.РасшифровкаПодписи КАК РасшифровкаПодписиГлавногоБухгалтера,
	|	ЗаказПокупателя.ПодписьГлавногоБухгалтера.Факсимиле КАК ФаксимилеГлавногоБухгалтера,
	|	ЗаказПокупателя.ПодписьКладовщика.Должность КАК ДолжностьКладовщика,
	|	ЗаказПокупателя.ПодписьКладовщика.РасшифровкаПодписи КАК РасшифровкаПодписиКладовщика,
	|	ЗаказПокупателя.ПодписьКладовщика.Факсимиле КАК ФаксимилеКладовщика,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|				ИЛИ ЗаказПокупателя.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПустаяСсылка), ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз))
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИНАЧЕ ЗаказПокупателя.НоменклатураДоставки
	|	КОНЕЦ КАК НоменклатураДоставки,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА ЗаказПокупателя.НоменклатураДоставки.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ КАК ПредставлениеНоменклатурыДоставки,
	|	ЗаказПокупателя.НоменклатураДоставки.Код КАК КодНоменклатурыДоставки,
	|	ЗаказПокупателя.НоменклатураДоставки.Артикул КАК АртикулНоменклатурыДоставки,
	|	ЗаказПокупателя.СтоимостьДоставки КАК СтоимостьДоставки,
	|	ЗаказПокупателя.СтавкаНДСДоставки КАК СтавкаНДСДоставки,
	|	ЗаказПокупателя.СуммаНДСДоставки КАК СуммаНДСДоставки,
	|	ЛОЖЬ КАК ЭтоСводныйСчетФактура,
	|	ЛОЖЬ КАК ЭтоКорректировка,
	|	0 КАК Вес,
	|	0 КАК Объем,
	|	НЕОПРЕДЕЛЕНО КАК ФаксимилеПустая,
	|	ЗаказПокупателя.Запасы.(
	|		Номенклатура КАК Номенклатура,
	|		Содержание КАК Содержание,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ЗаказПокупателя.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ПредставлениеНоменклатуры,
	|		Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|		Номенклатура.Код КАК ЗапасКод,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Штрихкод КАК Штрихкод,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Запасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|				ТОГДА ЗаказПокупателя.Запасы.Номенклатура.ТоварнаяНоменклатураВЭД.Код
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК КодТНВЭД,
	|		Характеристика КАК Характеристика,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Запасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|					И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|					И ЗаказПокупателя.Запасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|				ТОГДА ЗаказПокупателя.Запасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору.Наименование
	|			ИНАЧЕ ЗаказПокупателя.Запасы.Номенклатура.ЕдиницаИзмерения.Наименование
	|		КОНЕЦ КАК ЕдиницаИзмеренияПоОКЕИ_Наименование,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Запасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|					И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|					И ЗаказПокупателя.Запасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|				ТОГДА ЗаказПокупателя.Запасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору.Код
	|			ИНАЧЕ ЗаказПокупателя.Запасы.Номенклатура.ЕдиницаИзмерения.Код
	|		КОНЕЦ КАК ЕдиницаИзмеренияПоОКЕИ_Код,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Запасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|					И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|					И ЗаказПокупателя.Запасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|				ТОГДА ЗаказПокупателя.Запасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору
	|			ИНАЧЕ ЗаказПокупателя.Запасы.Номенклатура.ЕдиницаИзмерения
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмерения КАК ВидУпаковки,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Запасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|					И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|					И ЗаказПокупателя.Запасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|				ТОГДА 1
	|			КОГДА ЗаказПокупателя.Запасы.ЕдиницаИзмерения ССЫЛКА Справочник.КлассификаторЕдиницИзмерения
	|				ТОГДА 1
	|			ИНАЧЕ ЗаказПокупателя.Запасы.ЕдиницаИзмерения.Коэффициент
	|		КОНЕЦ КАК КоличествоВОдномМесте,
	|		Количество КАК КоличествоМест,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Запасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|					И ПечатьПользовательскихЕдиницИзмерения.Значение <> ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|				ТОГДА ЗаказПокупателя.Запасы.ЕдиницаИзмерения.Коэффициент
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК КоэффициентЕдиницыИзмерения,
	|		Количество КАК Количество,
	|		СтавкаНДС КАК СтавкаНДС,
	|		ВЫБОР
	|			КОГДА &ПечатнаяФормаТолькоВРублях
	|				ТОГДА ВЫБОР
	|						КОГДА ЗаказПокупателя.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|								И ЗаказПокупателя.Ссылка.ВалютаДокумента <> &НациональнаяВалюта
	|							ТОГДА ВЫРАЗИТЬ((ЗаказПокупателя.Запасы.СуммаАвтоматическойСкидки + ЗаказПокупателя.Запасы.СуммаСкидкиНаценки) * ЗаказПокупателя.Ссылка.Курс / ЗаказПокупателя.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|						ИНАЧЕ ЗаказПокупателя.Запасы.СуммаАвтоматическойСкидки + ЗаказПокупателя.Запасы.СуммаСкидкиНаценки
	|					КОНЕЦ
	|			ИНАЧЕ ЗаказПокупателя.Запасы.СуммаАвтоматическойСкидки + ЗаказПокупателя.Запасы.СуммаСкидкиНаценки
	|		КОНЕЦ КАК СуммаСкидкиПоСтроке,
	|		ВЫБОР
	|			КОГДА &ПечатнаяФормаТолькоВРублях
	|				ТОГДА ВЫБОР
	|						КОГДА ЗаказПокупателя.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|								И ЗаказПокупателя.Ссылка.ВалютаДокумента <> &НациональнаяВалюта
	|							ТОГДА ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Цена * ЗаказПокупателя.Ссылка.Курс / ЗаказПокупателя.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|						ИНАЧЕ ЗаказПокупателя.Запасы.Цена
	|					КОНЕЦ
	|			ИНАЧЕ ЗаказПокупателя.Запасы.Цена
	|		КОНЕЦ КАК Цена,
	|		ВЫБОР
	|			КОГДА &ПечатнаяФормаТолькоВРублях
	|				ТОГДА ВЫБОР
	|						КОГДА ЗаказПокупателя.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|								И ЗаказПокупателя.Ссылка.ВалютаДокумента <> &НациональнаяВалюта
	|							ТОГДА ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Сумма * ЗаказПокупателя.Курс / ЗаказПокупателя.Кратность КАК ЧИСЛО(15, 2))
	|						ИНАЧЕ ЗаказПокупателя.Запасы.Сумма
	|					КОНЕЦ
	|			ИНАЧЕ ЗаказПокупателя.Запасы.Сумма
	|		КОНЕЦ КАК Сумма,
	|		ВЫБОР
	|			КОГДА &ПечатнаяФормаТолькоВРублях
	|				ТОГДА ВЫБОР
	|						КОГДА ЗаказПокупателя.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|								И ЗаказПокупателя.Ссылка.ВалютаДокумента <> &НациональнаяВалюта
	|							ТОГДА ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.СуммаНДС * ЗаказПокупателя.Курс / ЗаказПокупателя.Кратность КАК ЧИСЛО(15, 2))
	|						ИНАЧЕ ЗаказПокупателя.Запасы.СуммаНДС
	|					КОНЕЦ
	|			ИНАЧЕ ЗаказПокупателя.Запасы.СуммаНДС
	|		КОНЕЦ КАК СуммаНДС,
	|		ВЫБОР
	|			КОГДА &ПечатнаяФормаТолькоВРублях
	|				ТОГДА ВЫБОР
	|						КОГДА ЗаказПокупателя.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|								И ЗаказПокупателя.Ссылка.ВалютаДокумента <> &НациональнаяВалюта
	|							ТОГДА ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Всего * ЗаказПокупателя.Курс / ЗаказПокупателя.Кратность КАК ЧИСЛО(15, 2))
	|						ИНАЧЕ ЗаказПокупателя.Запасы.Всего
	|					КОНЕЦ
	|			ИНАЧЕ ЗаказПокупателя.Запасы.Всего
	|		КОНЕЦ КАК Всего,
	|		ЛОЖЬ КАК ЭтоНабор,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Запасы.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И ЗаказПокупателя.Запасы.НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		Ссылка.Дата КАК ДатаОтгрузочногоДокумента,
	|		Ссылка.Номер КАК НомерОтгрузочногоДокумента,
	|		Ссылка КАК Ссылка,
	|		СтранаПроисхождения КАК СтранаСсылка,
	|		ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.Запасы.СтранаПроисхождения) КАК СтранаПредставление,
	|		СтранаПроисхождения.Код КАК СтранаКод,
	|		НомерГТД.РегистрационныйНомер КАК ПредставлениеГТД
	|	) КАК ТаблицаЗапасы,
	|	ЗаказПокупателя.ДобавленныеНаборы.(
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.ДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ЗаказПокупателя.ДобавленныеНаборы.НоменклатураНабора.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.ДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ЗапасНабора,
	|		НоменклатураНабора.ВариантПечатиНабора КАК ВариантПечатиНабора,
	|		НоменклатураНабора.ТипНоменклатуры КАК ТипНоменклатурыНабора,
	|		НоменклатураНабора.Артикул КАК АртикулНабора,
	|		НоменклатураНабора.Код КАК КодНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияНабора,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.ДобавленныеНаборы.НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.ТолькоНабор)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыводитьИтоги
	|	) КАК ТаблицаДобавленныеНаборы,
	|	ЗаказПокупателя.Работы.(
	|		Номенклатура КАК Номенклатура,
	|		Содержание КАК Содержание,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.Работы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ЗаказПокупателя.Работы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.Работы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ПредставлениеНоменклатуры,
	|		Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|		Номенклатура.Код КАК ЗапасКод,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Штрихкод КАК Штрихкод,
	|		НЕОПРЕДЕЛЕНО КАК КодТНВЭД,
	|		Характеристика КАК Характеристика,
	|		1 КАК КоэффициентЕдиницыИзмерения,
	|		Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияПоОКЕИ_Наименование,
	|		Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияПоОКЕИ_Код,
	|		Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		НЕОПРЕДЕЛЕНО КАК ВидУпаковки,
	|		НЕОПРЕДЕЛЕНО КАК КоличествоВОдномМесте,
	|		НЕОПРЕДЕЛЕНО КАК КоличествоМест,
	|		ЗаказПокупателя.Работы.Количество * ЗаказПокупателя.Работы.Кратность * ЗаказПокупателя.Работы.Коэффициент КАК Количество,
	|		СтавкаНДС КАК СтавкаНДС,
	|		ВЫБОР
	|			КОГДА &ПечатнаяФормаТолькоВРублях
	|				ТОГДА ВЫБОР
	|						КОГДА ЗаказПокупателя.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|								И ЗаказПокупателя.Ссылка.ВалютаДокумента <> &НациональнаяВалюта
	|							ТОГДА ВЫРАЗИТЬ((ЗаказПокупателя.Работы.СуммаАвтоматическойСкидки + ЗаказПокупателя.Работы.СуммаСкидкиНаценки) * ЗаказПокупателя.Ссылка.Курс / ЗаказПокупателя.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|						ИНАЧЕ ЗаказПокупателя.Работы.СуммаАвтоматическойСкидки + ЗаказПокупателя.Работы.СуммаСкидкиНаценки
	|					КОНЕЦ
	|			ИНАЧЕ ЗаказПокупателя.Работы.СуммаАвтоматическойСкидки + ЗаказПокупателя.Работы.СуммаСкидкиНаценки
	|		КОНЕЦ КАК СуммаСкидкиПоСтроке,
	|		ВЫБОР
	|			КОГДА &ПечатнаяФормаТолькоВРублях
	|				ТОГДА ВЫБОР
	|						КОГДА ЗаказПокупателя.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|								И ЗаказПокупателя.Ссылка.ВалютаДокумента <> &НациональнаяВалюта
	|							ТОГДА ВЫРАЗИТЬ(ЗаказПокупателя.Работы.Цена * ЗаказПокупателя.Ссылка.Курс / ЗаказПокупателя.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|						ИНАЧЕ ЗаказПокупателя.Работы.Цена
	|					КОНЕЦ
	|			ИНАЧЕ ЗаказПокупателя.Работы.Цена
	|		КОНЕЦ КАК Цена,
	|		ВЫБОР
	|			КОГДА &ПечатнаяФормаТолькоВРублях
	|				ТОГДА ВЫБОР
	|						КОГДА ЗаказПокупателя.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|								И ЗаказПокупателя.Ссылка.ВалютаДокумента <> &НациональнаяВалюта
	|							ТОГДА ВЫРАЗИТЬ(ЗаказПокупателя.Работы.Сумма * ЗаказПокупателя.Курс / ЗаказПокупателя.Кратность КАК ЧИСЛО(15, 2))
	|						ИНАЧЕ ЗаказПокупателя.Работы.Сумма
	|					КОНЕЦ
	|			ИНАЧЕ ЗаказПокупателя.Работы.Сумма
	|		КОНЕЦ КАК Сумма,
	|		ВЫБОР
	|			КОГДА &ПечатнаяФормаТолькоВРублях
	|				ТОГДА ВЫБОР
	|						КОГДА ЗаказПокупателя.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|								И ЗаказПокупателя.Ссылка.ВалютаДокумента <> &НациональнаяВалюта
	|							ТОГДА ВЫРАЗИТЬ(ЗаказПокупателя.Работы.СуммаНДС * ЗаказПокупателя.Курс / ЗаказПокупателя.Кратность КАК ЧИСЛО(15, 2))
	|						ИНАЧЕ ЗаказПокупателя.Работы.СуммаНДС
	|					КОНЕЦ
	|			ИНАЧЕ ЗаказПокупателя.Работы.СуммаНДС
	|		КОНЕЦ КАК СуммаНДС,
	|		ВЫБОР
	|			КОГДА &ПечатнаяФормаТолькоВРублях
	|				ТОГДА ВЫБОР
	|						КОГДА ЗаказПокупателя.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|								И ЗаказПокупателя.Ссылка.ВалютаДокумента <> &НациональнаяВалюта
	|							ТОГДА ВЫРАЗИТЬ(ЗаказПокупателя.Работы.Всего * ЗаказПокупателя.Курс / ЗаказПокупателя.Кратность КАК ЧИСЛО(15, 2))
	|						ИНАЧЕ ЗаказПокупателя.Работы.Всего
	|					КОНЕЦ
	|			ИНАЧЕ ЗаказПокупателя.Работы.Всего
	|		КОНЕЦ КАК Всего,
	|		ЛОЖЬ КАК ЭтоНабор,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Работы.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И ЗаказПокупателя.Работы.НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		НЕОПРЕДЕЛЕНО КАК СтранаСсылка,
	|		НЕОПРЕДЕЛЕНО КАК СтранаПредставление,
	|		НЕОПРЕДЕЛЕНО КАК СтранаКод,
	|		НЕОПРЕДЕЛЕНО КАК ПредставлениеГТД
	|	) КАК ТаблицаРаботыУслуги,
	|	ЛОЖЬ КАК ЕстьПрослеживаемыеТовары
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя,
	|	Константа.НациональнаяВалюта КАК НациональнаяВалюта,
	|	Константа.ПечатьПользовательскихЕдиницИзмерения КАК ПечатьПользовательскихЕдиницИзмерения
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ЗаказПокупателя.Работы.НомерСтроки,
	|	ЗаказПокупателя.Запасы.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Содержание КАК СТРОКА(1000)) КАК Содержание,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА ЗаказПокупателяЗапасы.Номенклатура.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ КАК ПредставлениеНоменклатуры,
	|	ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЗаказПокупателяЗапасы.Номенклатура.Код КАК ЗапасКод,
	|	ЗаказПокупателяЗапасы.Номенклатура.Артикул КАК Артикул,
	|	ЗаказПокупателяЗапасы.Номенклатура.Штрихкод КАК Штрихкод,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|				И ЗаказПокупателяЗапасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяЗапасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору.Наименование
	|		ИНАЧЕ ЗаказПокупателяЗапасы.Номенклатура.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ КАК ЕдиницаИзмеренияПоОКЕИ_Наименование,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|				И ЗаказПокупателяЗапасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяЗапасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору.Код
	|		ИНАЧЕ ЗаказПокупателяЗапасы.Номенклатура.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияПоОКЕИ_Код,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|				И ЗаказПокупателяЗапасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяЗапасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору
	|		ИНАЧЕ ЗаказПокупателяЗапасы.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ВидУпаковки,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|				И ЗаказПокупателяЗапасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ЗаказПокупателяЗапасы.ЕдиницаИзмерения ССЫЛКА Справочник.КлассификаторЕдиницИзмерения
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК КоличествоВОдномМесте,
	|	ЗаказПокупателяЗапасы.Количество КАК КоличествоМест,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				И ПечатьПользовательскихЕдиницИзмерения.Значение <> ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|			ТОГДА ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоэффициентЕдиницыИзмерения,
	|	ЗаказПокупателяЗапасы.Количество КАК Количество,
	|	ЗаказПокупателяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателяЗапасы.Вес КАК Вес,
	|	ЗаказПокупателяЗапасы.СуммаАвтоматическойСкидки + ЗаказПокупателяЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиПоСтроке,
	|	ЗаказПокупателяЗапасы.Цена КАК Цена,
	|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗаказПокупателяЗапасы.Сумма КАК Сумма,
	|	ЗаказПокупателяЗапасы.СуммаНДС КАК СуммаНДС,
	|	ЗаказПокупателяЗапасы.Всего КАК Всего,
	|	ЗаказПокупателяЗапасы.Ссылка КАК Ссылка,
	|	ЗаказПокупателяЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ЗаказПокупателяЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЛОЖЬ КАК ЭтоНабор,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				И ЗаказПокупателяЗапасы.НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора,
	|	ЗаказПокупателяЗапасы.СтранаПроисхождения КАК СтранаСсылка,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателяЗапасы.СтранаПроисхождения) КАК СтранаПредставление,
	|	ЗаказПокупателяЗапасы.СтранаПроисхождения.Код КАК СтранаКод,
	|	ЗаказПокупателяЗапасы.НомерГТД.РегистрационныйНомер КАК ПредставлениеГТД
	|ПОМЕСТИТЬ ВременнаяТаблица_ЗаказПокупателяЗапасы
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы,
	|	Константа.ПечатьПользовательскихЕдиницИзмерения КАК ПечатьПользовательскихЕдиницИзмерения
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Содержание КАК Содержание,
	|	ЗаказПокупателяЗапасы.ПредставлениеНоменклатуры КАК ПредставлениеНоменклатуры,
	|	ЗаказПокупателяЗапасы.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЗаказПокупателяЗапасы.ЗапасКод КАК ЗапасКод,
	|	ЗаказПокупателяЗапасы.ЗапасКод КАК Код,
	|	ЗаказПокупателяЗапасы.Артикул КАК Артикул,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмеренияПоОКЕИ_Наименование КАК ЕдиницаИзмеренияПоОКЕИ_Наименование,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмеренияПоОКЕИ_Код КАК ЕдиницаИзмеренияПоОКЕИ_Код,
	|	ЗаказПокупателяЗапасы.ВидУпаковки КАК ВидУпаковки,
	|	ЗаказПокупателяЗапасы.Количество КАК Количество,
	|	ЗаказПокупателяЗапасы.КоэффициентЕдиницыИзмерения КАК КоэффициентЕдиницыИзмерения,
	|	ЗаказПокупателяЗапасы.КоличествоВОдномМесте КАК КоличествоВОдномМесте,
	|	ЗаказПокупателяЗапасы.КоличествоМест КАК КоличествоМест,
	|	ЗаказПокупателяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателяЗапасы.Вес КАК МассаБрутто,
	|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.Ссылка.ВалютаДокумента = &НациональнаяВалюта
	|			ТОГДА ЗаказПокупателяЗапасы.СуммаСкидкиПоСтроке
	|		ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.СуммаСкидкиПоСтроке * ЗаказПокупателяЗапасы.Ссылка.Курс / ЗаказПокупателяЗапасы.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК СуммаСкидкиПоСтроке,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаказПокупателяЗапасы.Ссылка.ВалютаДокумента = &НациональнаяВалюта
	|						ТОГДА ЗаказПокупателяЗапасы.Цена
	|					КОГДА СуммыДокументовРегламентированныйУчет.Всего ЕСТЬ NULL
	|						ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Цена * ЗаказПокупателяЗапасы.Ссылка.Курс / ЗаказПокупателяЗапасы.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ЗаказПокупателяЗапасы.Количество = 0
	|								ТОГДА СуммыДокументовРегламентированныйУчет.Всего - СуммыДокументовРегламентированныйУчет.НДС
	|							ИНАЧЕ ВЫРАЗИТЬ((СуммыДокументовРегламентированныйУчет.Всего - СуммыДокументовРегламентированныйУчет.НДС) / ЗаказПокупателяЗапасы.Количество КАК ЧИСЛО(15, 2))
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ЗаказПокупателяЗапасы.Цена
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаказПокупателяЗапасы.Ссылка.ВалютаДокумента = &НациональнаяВалюта
	|						ТОГДА ЗаказПокупателяЗапасы.Сумма
	|					КОГДА СуммыДокументовРегламентированныйУчет.Всего ЕСТЬ NULL
	|						ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Сумма * ЗаказПокупателяЗапасы.Ссылка.Курс / ЗаказПокупателяЗапасы.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ЗаказПокупателяЗапасы.Ссылка.СуммаВключаетНДС
	|								ТОГДА ВЫРАЗИТЬ(СуммыДокументовРегламентированныйУчет.Всего КАК ЧИСЛО(15, 2))
	|							ИНАЧЕ ВЫРАЗИТЬ(СуммыДокументовРегламентированныйУчет.Всего - СуммыДокументовРегламентированныйУчет.НДС КАК ЧИСЛО(15, 2))
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ЗаказПокупателяЗапасы.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаказПокупателяЗапасы.Ссылка.ВалютаДокумента = &НациональнаяВалюта
	|						ТОГДА ЗаказПокупателяЗапасы.СуммаНДС
	|					КОГДА СуммыДокументовРегламентированныйУчет.Всего ЕСТЬ NULL
	|						ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.СуммаНДС * ЗаказПокупателяЗапасы.Ссылка.Курс / ЗаказПокупателяЗапасы.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ СуммыДокументовРегламентированныйУчет.НДС
	|				КОНЕЦ
	|		ИНАЧЕ ЗаказПокупателяЗапасы.СуммаНДС
	|	КОНЕЦ КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаказПокупателяЗапасы.Ссылка.ВалютаДокумента = &НациональнаяВалюта
	|						ТОГДА ЗаказПокупателяЗапасы.Всего
	|					КОГДА СуммыДокументовРегламентированныйУчет.Всего ЕСТЬ NULL
	|						ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Всего * ЗаказПокупателяЗапасы.Ссылка.Курс / ЗаказПокупателяЗапасы.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ СуммыДокументовРегламентированныйУчет.Всего
	|				КОНЕЦ
	|		ИНАЧЕ ЗаказПокупателяЗапасы.Всего
	|	КОНЕЦ КАК Всего,
	|	ЗаказПокупателяЗапасы.Ссылка КАК Ссылка,
	|	ЗаказПокупателяЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ЗаказПокупателяЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЗаказПокупателяЗапасы.ЭтоНабор КАК ЭтоНабор,
	|	ЗаказПокупателяЗапасы.НеобходимоВыделитьКакСоставНабора КАК НеобходимоВыделитьКакСоставНабора,
	|	ЗаказПокупателяЗапасы.СтранаСсылка КАК СтранаСсылка,
	|	ЗаказПокупателяЗапасы.СтранаПредставление КАК СтранаПредставление,
	|	ЗаказПокупателяЗапасы.СтранаКод КАК СтранаКод,
	|	ЗаказПокупателяЗапасы.ПредставлениеГТД КАК ПредставлениеГТД,
	|	ЗаказПокупателяЗапасы.Ссылка.Дата КАК ДатаОтгрузочногоДокумента,
	|	ЗаказПокупателяЗапасы.Ссылка.Номер КАК НомерОтгрузочногоДокумента,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ЗаказПокупателяЗапасы.Номенклатура.ТоварнаяНоменклатураВЭД.Код
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КодТНВЭД
	|ИЗ
	|	ВременнаяТаблица_ЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовРегламентированныйУчет КАК СуммыДокументовРегламентированныйУчет
	|		ПО ЗаказПокупателяЗапасы.Ссылка = СуммыДокументовРегламентированныйУчет.Регистратор
	|			И ЗаказПокупателяЗапасы.НомерСтроки = СуммыДокументовРегламентированныйУчет.НомерСтрокиДокумента
	|			И (СуммыДокументовРегламентированныйУчет.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Запасы))
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяРаботы.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(ЗаказПокупателяРаботы.Содержание КАК СТРОКА(1000)) КАК Содержание,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ЗаказПокупателяРаботы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА ЗаказПокупателяРаботы.Номенклатура.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателяРаботы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ КАК ПредставлениеНоменклатуры,
	|	ЗаказПокупателяРаботы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЗаказПокупателяРаботы.Номенклатура.Код КАК ЗапасКод,
	|	ЗаказПокупателяРаботы.Номенклатура.Артикул КАК Артикул,
	|	ЗаказПокупателяРаботы.Номенклатура.Штрихкод КАК Штрихкод,
	|	НЕОПРЕДЕЛЕНО КАК КодТНВЭД,
	|	1 КАК КоэффициентЕдиницыИзмерения,
	|	ЗаказПокупателяРаботы.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияПоОКЕИ_Наименование,
	|	ЗаказПокупателяРаботы.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияПоОКЕИ_Код,
	|	ЗаказПокупателяРаботы.Характеристика КАК Характеристика,
	|	ЗаказПокупателяРаботы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	НЕОПРЕДЕЛЕНО КАК ВидУпаковки,
	|	ЗаказПокупателяРаботы.Количество * ЗаказПокупателяРаботы.Кратность * ЗаказПокупателяРаботы.Коэффициент КАК Количество,
	|	НЕОПРЕДЕЛЕНО КАК КоличествоВОдномМесте,
	|	НЕОПРЕДЕЛЕНО КАК КоличествоМест,
	|	ЗаказПокупателяРаботы.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаказПокупателяРаботы.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|							И ЗаказПокупателяРаботы.Ссылка.ВалютаДокумента <> &НациональнаяВалюта
	|						ТОГДА ВЫРАЗИТЬ((ЗаказПокупателяРаботы.СуммаАвтоматическойСкидки + ЗаказПокупателяРаботы.СуммаСкидкиНаценки) * ЗаказПокупателяРаботы.Ссылка.Курс / ЗаказПокупателяРаботы.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ ЗаказПокупателяРаботы.СуммаАвтоматическойСкидки + ЗаказПокупателяРаботы.СуммаСкидкиНаценки
	|				КОНЕЦ
	|		ИНАЧЕ ЗаказПокупателяРаботы.СуммаАвтоматическойСкидки + ЗаказПокупателяРаботы.СуммаСкидкиНаценки
	|	КОНЕЦ КАК СуммаСкидкиПоСтроке,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаказПокупателяРаботы.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|							И ЗаказПокупателяРаботы.Ссылка.ВалютаДокумента <> &НациональнаяВалюта
	|						ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяРаботы.Цена * ЗаказПокупателяРаботы.Ссылка.Курс / ЗаказПокупателяРаботы.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ ЗаказПокупателяРаботы.Цена
	|				КОНЕЦ
	|		ИНАЧЕ ЗаказПокупателяРаботы.Цена
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаказПокупателяРаботы.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|							И ЗаказПокупателяРаботы.Ссылка.ВалютаДокумента <> &НациональнаяВалюта
	|						ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяРаботы.Сумма * ЗаказПокупателяРаботы.Ссылка.Курс / ЗаказПокупателяРаботы.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ ЗаказПокупателяРаботы.Сумма
	|				КОНЕЦ
	|		ИНАЧЕ ЗаказПокупателяРаботы.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаказПокупателяРаботы.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|							И ЗаказПокупателяРаботы.Ссылка.ВалютаДокумента <> &НациональнаяВалюта
	|						ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяРаботы.СуммаНДС * ЗаказПокупателяРаботы.Ссылка.Курс / ЗаказПокупателяРаботы.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ ЗаказПокупателяРаботы.СуммаНДС
	|				КОНЕЦ
	|		ИНАЧЕ ЗаказПокупателяРаботы.СуммаНДС
	|	КОНЕЦ КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаказПокупателяРаботы.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|							И ЗаказПокупателяРаботы.Ссылка.ВалютаДокумента <> &НациональнаяВалюта
	|						ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяРаботы.Всего * ЗаказПокупателяРаботы.Ссылка.Курс / ЗаказПокупателяРаботы.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ ЗаказПокупателяРаботы.Всего
	|				КОНЕЦ
	|		ИНАЧЕ ЗаказПокупателяРаботы.Всего
	|	КОНЕЦ КАК Всего,
	|	ЗаказПокупателяРаботы.НомерСтроки КАК НомерСтроки,
	|	ЗаказПокупателяРаботы.Ссылка КАК Ссылка,
	|	ЗаказПокупателяРаботы.НоменклатураНабора КАК НоменклатураНабора,
	|	ЗаказПокупателяРаботы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЛОЖЬ КАК ЭтоНабор,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяРаботы.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				И ЗаказПокупателяРаботы.НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора
	|ПОМЕСТИТЬ ВременнаяТаблица_ЗаказПокупателяРаботы
	|ИЗ
	|	Документ.ЗаказПокупателя.Работы КАК ЗаказПокупателяРаботы
	|ГДЕ
	|	ЗаказПокупателяРаботы.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяРаботы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяРаботы.Содержание КАК Содержание,
	|	ЗаказПокупателяРаботы.ПредставлениеНоменклатуры КАК ПредставлениеНоменклатуры,
	|	ЗаказПокупателяРаботы.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЗаказПокупателяРаботы.ЗапасКод КАК ЗапасКод,
	|	ЗаказПокупателяРаботы.ЗапасКод КАК Код,
	|	ЗаказПокупателяРаботы.Артикул КАК Артикул,
	|	ЗаказПокупателяРаботы.ЕдиницаИзмеренияПоОКЕИ_Наименование КАК ЕдиницаИзмеренияПоОКЕИ_Наименование,
	|	ЗаказПокупателяРаботы.ЕдиницаИзмеренияПоОКЕИ_Код КАК ЕдиницаИзмеренияПоОКЕИ_Код,
	|	ЗаказПокупателяРаботы.Характеристика КАК Характеристика,
	|	ЗаказПокупателяРаботы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказПокупателяРаботы.ЕдиницаИзмерения КАК ВидУпаковки,
	|	ЗаказПокупателяРаботы.Количество КАК Количество,
	|	ЗаказПокупателяРаботы.КоэффициентЕдиницыИзмерения КАК КоэффициентЕдиницыИзмерения,
	|	НЕОПРЕДЕЛЕНО КАК КоличествоВОдномМесте,
	|	НЕОПРЕДЕЛЕНО КАК КоличествоМест,
	|	ЗаказПокупателяРаботы.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателяРаботы.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяРаботы.Ссылка.ВалютаДокумента = &НациональнаяВалюта
	|			ТОГДА ЗаказПокупателяРаботы.СуммаСкидкиПоСтроке
	|		ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателяРаботы.СуммаСкидкиПоСтроке * ЗаказПокупателяРаботы.Ссылка.Курс / ЗаказПокупателяРаботы.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК СуммаСкидкиПоСтроке,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаказПокупателяРаботы.Ссылка.ВалютаДокумента = &НациональнаяВалюта
	|						ТОГДА ЗаказПокупателяРаботы.Цена
	|					КОГДА СуммыДокументовРегламентированныйУчет.Всего ЕСТЬ NULL
	|						ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяРаботы.Цена * ЗаказПокупателяРаботы.Ссылка.Курс / ЗаказПокупателяРаботы.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ЗаказПокупателяРаботы.Количество = 0
	|								ТОГДА СуммыДокументовРегламентированныйУчет.Всего - СуммыДокументовРегламентированныйУчет.НДС
	|							ИНАЧЕ ВЫРАЗИТЬ((СуммыДокументовРегламентированныйУчет.Всего - СуммыДокументовРегламентированныйУчет.НДС) / ЗаказПокупателяРаботы.Количество КАК ЧИСЛО(15, 2))
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ЗаказПокупателяРаботы.Цена
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаказПокупателяРаботы.Ссылка.ВалютаДокумента = &НациональнаяВалюта
	|						ТОГДА ЗаказПокупателяРаботы.Сумма
	|					КОГДА СуммыДокументовРегламентированныйУчет.Всего ЕСТЬ NULL
	|						ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяРаботы.Сумма * ЗаказПокупателяРаботы.Ссылка.Курс / ЗаказПокупателяРаботы.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ЗаказПокупателяРаботы.Ссылка.СуммаВключаетНДС
	|								ТОГДА ВЫРАЗИТЬ(СуммыДокументовРегламентированныйУчет.Всего КАК ЧИСЛО(15, 2))
	|							ИНАЧЕ ВЫРАЗИТЬ(СуммыДокументовРегламентированныйУчет.Всего - СуммыДокументовРегламентированныйУчет.НДС КАК ЧИСЛО(15, 2))
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ЗаказПокупателяРаботы.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаказПокупателяРаботы.Ссылка.ВалютаДокумента = &НациональнаяВалюта
	|						ТОГДА ЗаказПокупателяРаботы.СуммаНДС
	|					КОГДА СуммыДокументовРегламентированныйУчет.Всего ЕСТЬ NULL
	|						ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяРаботы.СуммаНДС * ЗаказПокупателяРаботы.Ссылка.Курс / ЗаказПокупателяРаботы.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ СуммыДокументовРегламентированныйУчет.НДС
	|				КОНЕЦ
	|		ИНАЧЕ ЗаказПокупателяРаботы.СуммаНДС
	|	КОНЕЦ КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаказПокупателяРаботы.Ссылка.ВалютаДокумента = &НациональнаяВалюта
	|						ТОГДА ЗаказПокупателяРаботы.Всего
	|					КОГДА СуммыДокументовРегламентированныйУчет.Всего ЕСТЬ NULL
	|						ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяРаботы.Всего * ЗаказПокупателяРаботы.Ссылка.Курс / ЗаказПокупателяРаботы.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ СуммыДокументовРегламентированныйУчет.Всего
	|				КОНЕЦ
	|		ИНАЧЕ ЗаказПокупателяРаботы.Всего
	|	КОНЕЦ КАК Всего,
	|	ЗаказПокупателяРаботы.Ссылка КАК Ссылка,
	|	ЗаказПокупателяРаботы.НоменклатураНабора КАК НоменклатураНабора,
	|	ЗаказПокупателяРаботы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЗаказПокупателяРаботы.ЭтоНабор КАК ЭтоНабор,
	|	НЕОПРЕДЕЛЕНО КАК СтранаСсылка,
	|	НЕОПРЕДЕЛЕНО КАК СтранаПредставление,
	|	НЕОПРЕДЕЛЕНО КАК СтранаКод,
	|	НЕОПРЕДЕЛЕНО КАК ПредставлениеГТД,
	|	ЗаказПокупателяРаботы.Ссылка.Дата КАК ДатаОтгрузочногоДокумента,
	|	ЗаказПокупателяРаботы.Ссылка.Номер КАК НомерОтгрузочногоДокумента,
	|	ЗаказПокупателяРаботы.НеобходимоВыделитьКакСоставНабора КАК НеобходимоВыделитьКакСоставНабора,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяРаботы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ЗаказПокупателяРаботы.Номенклатура.ТоварнаяНоменклатураВЭД.Код
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КодТНВЭД
	|ИЗ
	|	ВременнаяТаблица_ЗаказПокупателяРаботы КАК ЗаказПокупателяРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовРегламентированныйУчет КАК СуммыДокументовРегламентированныйУчет
	|		ПО ЗаказПокупателяРаботы.Ссылка = СуммыДокументовРегламентированныйУчет.Регистратор
	|			И ЗаказПокупателяРаботы.НомерСтроки = СуммыДокументовРегламентированныйУчет.НомерСтрокиДокумента
	|			И (СуммыДокументовРегламентированныйУчет.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Работы))
	|ГДЕ
	|	ЗаказПокупателяРаботы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Результат = МассивРезультатов[0].Выгрузить();
	
	ТЗСтрокЗапасы = МассивРезультатов[2].Выгрузить();
	ТЗСтрокРаботыУслуги = МассивРезультатов[4].Выгрузить();
	
	Для Каждого ТекущаяСтрока Из Результат Цикл
		
		НайденныеСтроки = ТЗСтрокЗапасы.НайтиСтроки(Новый Структура("Ссылка", ТекущаяСтрока.Ссылка));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекущаяСтрока.ТаблицаЗапасы = ТЗСтрокЗапасы.Скопировать(НайденныеСтроки);
		КонецЕсли;
		
		НайденныеСтроки = ТЗСтрокРаботыУслуги.НайтиСтроки(Новый Структура("Ссылка", ТекущаяСтрока.Ссылка));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекущаяСтрока.ТаблицаРаботыУслуги = ТЗСтрокРаботыУслуги.Скопировать(НайденныеСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	ДоставкаСервер.ДобавитьСтрокуДоставкиУниверсальныеДанные(Результат, "ТаблицаЗапасы");
	
	// Наборы
	НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(Результат, "ТаблицаЗапасы", Ошибки);
	НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(Результат, "ТаблицаРаботыУслуги", Ошибки);
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеДокументовБланкТоварногоНаполнения(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка
	|	,ЗаказПокупателя.Дата КАК ДатаДокумента
	|	,""Заказ-наряд"" КАК ПредставлениеРегистратора
	|	,ЗаказПокупателя.СтруктурнаяЕдиницаРезерв КАК ПредставлениеСклада
	|	,ЗаказПокупателя.Ячейка КАК ПредставлениеЯчейки
	|	,ЗаказПокупателя.Номер
	|	,ЗаказПокупателя.Организация.Префикс КАК Префикс
	|	,ЗаказПокупателя.Запасы.(
	|		НомерСтроки КАК НомерСтроки
	|		,Номенклатура.Склад КАК Склад
	|		,Номенклатура.Ячейка КАК Ячейка
	|		,Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	|		,Содержание
	|		,Выбор КОГДА ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(100)) = """"
	|			ТОГДА ЗаказПокупателя.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ЗаказПокупателя.Запасы.Номенклатура.НаименованиеПолное КОНЕЦ КАК ПредставлениеНоменклатуры
	|		,Номенклатура.Артикул КАК Артикул
	|		,Номенклатура.Штрихкод КАК Штрихкод
	|		,Номенклатура.Код КАК Код
	|		,ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения
	|		,Количество
	|		,Характеристика
	|		,КлючСвязи
	|	) КАК ТаблицаЗапасы
	|	,ЗаказПокупателя.Материалы.(
	|		НомерСтроки КАК НомерСтроки
	|		,Номенклатура.Склад КАК Склад
	|		,Номенклатура.Ячейка КАК Ячейка
	|		,Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	|		,Неопределено КАК Содержание
	|		,Выбор КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.Материалы.Номенклатура.НаименованиеПолное КАК СТРОКА(100))) = """"
	|			ТОГДА ЗаказПокупателя.Материалы.Номенклатура.Наименование
	|			ИНАЧЕ ЗаказПокупателя.Материалы.Номенклатура.НаименованиеПолное КОНЕЦ КАК ПредставлениеНоменклатуры
	|		,Номенклатура.Артикул КАК Артикул
	|		,Номенклатура.Штрихкод КАК Штрихкод
	|		,Номенклатура.Код КАК Код
	|		,ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения
	|		,Количество
	|		,Характеристика
	|		,КлючСвязиСерииНоменклатуры КАК КлючСвязи
	|	) КАК ТаблицаМатериалы
	|	,ЗаказПокупателя.СерииНоменклатуры.(
	|		Серия
	|		,КлючСвязи
	|	) КАК ТаблицаСерииНоменклатуры
	|ИЗ Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ ЗаказПокупателя.Ссылка В (&МассивОбъектов)
	|УПОРЯДОЧИТЬ ПО ЗаказПокупателя.Запасы.НомерСтроки, ЗаказПокупателя.Материалы.НомерСтроки";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПечатнаяФормаКарточкиЗаказов(Заказы, РаскрашиватьСостояния = Ложь, РаскрашиватьОплату = Ложь) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_КарточкиЗаказов";
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КарточкиЗаказов";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Если РаскрашиватьОплату Тогда
		Цвета = РаботаСЦветомКлиентСервер.ЦветаСерийДиаграмм();
		ЦветБезОплаты = Цвета[0];
		ЦветЧастичнаяОплата = Цвета[2];
		ЦветПолнаяОплата = Цвета[4];
	КонецЕсли;
	
	СтруктураОбластей = Новый Структура;
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказПокупателя.ПФ_MXL_КарточкаЗаказа");
	
	СтруктураОбластей.Вставить("Заголовок",				Макет.ПолучитьОбласть("Заголовок"));
	СтруктураОбластей.Вставить("Шапка",					Макет.ПолучитьОбласть("Шапка"));
	СтруктураОбластей.Вставить("Комментарий",			Макет.ПолучитьОбласть("Комментарий"));
	СтруктураОбластей.Вставить("Отступ",				Макет.ПолучитьОбласть("Отступ"));
	СтруктураОбластей.Вставить("ОтступСПодчеркиванием",	Макет.ПолучитьОбласть("ОтступСПодчеркиванием"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Заказ
		|ПОМЕСТИТЬ втПервыйЗаказ
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателяПредыдущие
		|		ПО ЗаказПокупателя.Контрагент = ЗаказПокупателяПредыдущие.Контрагент
		|			И ЗаказПокупателя.МоментВремени > ЗаказПокупателяПредыдущие.МоментВремени
		|ГДЕ
		|	ЗаказПокупателя.Ссылка В(&Заказы)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПокупателя.Ссылка
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(ЗаказПокупателяПредыдущие.Ссылка) = 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Заказ,
		|	ЗаказПокупателя.СостояниеЗаказа КАК СостояниеЗаказа,
		|	ЗаказПокупателя.СуммаДокумента КАК СуммаЗаказа,
		|	ЕСТЬNULL(ФактОплатыЗаказов.СуммаАванса, 0) + ЕСТЬNULL(ФактОплатыЗаказов.СуммаОплаты, 0) КАК СуммаОплаты,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателя.СуммаДокумента = 0
		|			ТОГДА 0
		|		ИНАЧЕ (ЕСТЬNULL(ФактОплатыЗаказов.СуммаАванса, 0) + ЕСТЬNULL(ФактОплатыЗаказов.СуммаОплаты, 0)) * 100 / ЗаказПокупателя.СуммаДокумента
		|	КОНЕЦ КАК ПроцентОплаты,
		|	ЗаказПокупателя.Контрагент КАК Контрагент,
		|	ВЫБОР
		|		КОГДА втПервыйЗаказ.Заказ ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПервыйЗаказ,
		|	ЗаказПокупателя.Ответственный КАК Ответственный,
		|	ЗаказПокупателя.Комментарий КАК Комментарий,
		|	ЗаказПокупателя.СостояниеЗаказа.Цвет КАК ЦветСостояния,
		|	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.Ссылка) КАК ЗаказПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.СостояниеЗаказа) КАК СостояниеПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.Контрагент) КАК КонтрагентПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.Ответственный) КАК ОтветственныйПредставление
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФактОплатыЗаказов КАК ФактОплатыЗаказов
		|		ПО (ЗаказПокупателя.Ссылка = (ВЫРАЗИТЬ(ФактОплатыЗаказов.СчетНаОплату КАК Документ.ЗаказПокупателя)))
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПервыйЗаказ КАК втПервыйЗаказ
		|		ПО ЗаказПокупателя.Ссылка = втПервыйЗаказ.Заказ
		|ГДЕ
		|	ЗаказПокупателя.Ссылка В(&Заказы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказПокупателя.Дата";
	
	Запрос.УстановитьПараметр("Заказы", Заказы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТабличныйДокумент.Вывести(СтруктураОбластей.Отступ);
		
		СтруктураОбластей.Заголовок.Параметры.Заполнить(Выборка);
		ТабличныйДокумент.Вывести(СтруктураОбластей.Заголовок);
		
		СтруктураОбластей.Шапка.Параметры.Заполнить(Выборка);
		СтруктураОбластей.Шапка.Параметры.СуммаОплаты = Формат(Выборка.СуммаОплаты, "ЧДЦ=2; ЧН=0,00");
		СтруктураОбластей.Шапка.Параметры.ПроцентОплаты = Формат(Выборка.ПроцентОплаты, "ЧДЦ=; ЧН=0");
		
		Если РаскрашиватьСостояния Тогда
			ОбластьСостояние = СтруктураОбластей.Шапка.Область("ОбластьСостояние");
			ЦветСостояния = Выборка.ЦветСостояния.Получить();
			Если ЦветСостояния = Неопределено Тогда
				ОбластьСостояние.ЦветТекста = Новый Цвет;
			Иначе
				ОбластьСостояние.ЦветТекста = ЦветСостояния;
			КонецЕсли;
		КонецЕсли;
		
		ОбластьОплата = СтруктураОбластей.Шапка.Область("ОбластьОплата");
		Если РаскрашиватьОплату Тогда
			Если Выборка.ПроцентОплаты = 100 Тогда
				ОбластьОплата.ЦветТекста = ЦветПолнаяОплата;
			ИначеЕсли Выборка.ПроцентОплаты > 0 И Выборка.ПроцентОплаты < 100 Тогда
				ОбластьОплата.ЦветТекста = ЦветЧастичнаяОплата;
			ИначеЕсли Выборка.ПроцентОплаты = 0 Тогда
				ОбластьОплата.ЦветТекста = ЦветБезОплаты;
			КонецЕсли;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(СтруктураОбластей.Шапка);
		
		Если НЕ ПустаяСтрока(Выборка.Комментарий) Тогда
			ТабличныйДокумент.Вывести(СтруктураОбластей.Отступ);
			СтруктураОбластей.Комментарий.Параметры.Заполнить(Выборка);
			ТабличныйДокумент.Вывести(СтруктураОбластей.Комментарий);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(СтруктураОбластей.ОтступСПодчеркиванием);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура СформироватьЗаказПокупателя(ПечатнаяФорма, МассивОбъектов, ОбъектыПечати, Ошибки)
	Перем ПервыйДокумент, НомерСтрокиНачало;
	
	ТабличныйДокумент = ПечатнаяФорма.ТабличныйДокумент;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПечатнаяФорма.ПолныйПутьКМакету);
	ПредставлениеСкидки = Константы.ПредставлениеСкидкиВПечатнойФорме.Получить();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ЗаказПокупателя.Номер КАК Номер,
	|	ЗаказПокупателя.Дата КАК ДатаДокумента,
	|	ЗаказПокупателя.Организация КАК Организация,
	|	ЗаказПокупателя.Контрагент КАК Контрагент,
	|	ЗаказПокупателя.АдресДоставки КАК АдресДоставки,
	|	ЗаказПокупателя.Грузополучатель КАК Грузополучатель,
	|	ЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗаказПокупателя.Ответственный КАК Ответственный,
	|	ЗаказПокупателя.Организация.Префикс КАК Префикс,
	|	ЗаказПокупателя.ОсновнойВариантКП КАК ОсновнойВариантКП,
	|	ЗаказПокупателя.ОжидаетсяВыборВариантаКП КАК ОжидаетсяВыборВариантаКП,
	|	ЗаказПокупателя.СпособДоставки КАК СпособДоставки,
	|	ЗаказПокупателя.Вес КАК Вес,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|				ИЛИ ЗаказПокупателя.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПустаяСсылка), ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз))
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИНАЧЕ ЗаказПокупателя.НоменклатураДоставки
	|	КОНЕЦ КАК НоменклатураДоставки,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА ЗаказПокупателя.НоменклатураДоставки.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ КАК ПредставлениеНоменклатурыДоставки,
	|	ЗаказПокупателя.НоменклатураДоставки.Код КАК КодДоставки,
	|	ЗаказПокупателя.НоменклатураДоставки.Артикул КАК АртикулДоставки,
	|	ЗаказПокупателя.НоменклатураДоставки.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДоставки,
	|	ЗаказПокупателя.СтоимостьДоставки КАК СтоимостьДоставки,
	|	ЗаказПокупателя.СуммаНДСДоставки КАК СуммаНДСДоставки,
	|	ЗаказПокупателя.СтавкаНДСДоставки КАК СтавкаНДСДоставки,
	|	ЗаказПокупателя.Работы.(
	|		НомерСтроки КАК НомерСтроки,
	|		0 КАК НомерВариантаКП,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.Работы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ЗаказПокупателя.Работы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.Работы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ПредставлениеНоменклатуры,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Штрихкод КАК Штрихкод,
	|		Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		ЗаказПокупателя.Работы.Количество * ЗаказПокупателя.Работы.Коэффициент * ЗаказПокупателя.Работы.Кратность КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		0 КАК Вес,
	|		Характеристика КАК Характеристика,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Работы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ ЗаказПокупателя.Работы.СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		Содержание КАК Содержание,
	|		Ссылка.Старт КАК ДатаОтгрузки,
	|		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|		ЛОЖЬ КАК ЭтоРазделитель,
	|		ЛОЖЬ КАК ЭтоНабор,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Работы.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И ЗаказПокупателя.Работы.НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора
	|	) КАК ТаблицаРаботыУслуги,
	|	ЗаказПокупателя.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		НомерВариантаКП КАК НомерВариантаКП,
	|		ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателя.Запасы.Номенклатура) = ТИП(СТРОКА)
	|				ТОГДА ЗаказПокупателя.Запасы.Номенклатура
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ЗаказПокупателя.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ПредставлениеНоменклатуры,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Штрихкод КАК Штрихкод,
	|		ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		Вес КАК Вес,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Запасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|				ТОГДА ЗаказПокупателя.Запасы.Ссылка.Старт
	|			ИНАЧЕ ЗаказПокупателя.Запасы.ДатаОтгрузки
	|		КОНЕЦ КАК ДатаОтгрузки,
	|		Характеристика КАК Характеристика,
	|		Содержание КАК Содержание,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Запасы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ ЗаказПокупателя.Запасы.СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|		ЭтоРазделитель КАК ЭтоРазделитель,
	|		ЛОЖЬ КАК ЭтоНабор,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Запасы.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И ЗаказПокупателя.Запасы.НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора
	|	) КАК ТаблицаЗапасы,
	|	ЗаказПокупателя.ДобавленныеНаборы.(
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		НомерВариантаКП КАК НомерВариантаКП,
	|		Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.ДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ЗаказПокупателя.ДобавленныеНаборы.НоменклатураНабора.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.ДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ЗапасНабора,
	|		НоменклатураНабора.ВариантПечатиНабора КАК ВариантПечатиНабора,
	|		НоменклатураНабора.ТипНоменклатуры КАК ТипНоменклатурыНабора,
	|		НоменклатураНабора.Артикул КАК АртикулНабора,
	|		НоменклатураНабора.Код КАК КодНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияНабора,
	|		ИСТИНА КАК ВыводитьИтоги
	|	) КАК ТаблицаДобавленныеНаборы
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&МассивОбъектов)
	|	И (ЗаказПокупателя.ОсновнойВариантКП = 0
	|			ИЛИ ЗаказПокупателя.Запасы.НомерВариантаКП = ЗаказПокупателя.ОсновнойВариантКП)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ЗаказПокупателя.Работы.НомерСтроки,
	|	ЗаказПокупателя.Запасы.НомерСтроки";
	
	ДанныеДокументов = Запрос.Выполнить().Выгрузить();
	ДоставкаСервер.ДобавитьСтрокуДоставкиУниверсальныеДанные(ДанныеДокументов);
	
	// Наборы
	НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(ДанныеДокументов, "ТаблицаЗапасы", Ошибки, Истина);
	НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(ДанныеДокументов, "ТаблицаРаботыУслуги", Ошибки);
	
	Для каждого Шапка Из ДанныеДокументов Цикл
	
		Если Шапка.ОжидаетсяВыборВариантаКП Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон(
				НСтр("ru='Печатная форма ""%1"" (%2) не может быть сформирована: не выбран основной вариант.'"),
				ПечатнаяФорма.СинонимМакета,
				Шапка.Ссылка
			);
			Сообщение.КлючДанных = Шапка.Ссылка;
			Сообщение.Сообщить();
			Продолжить;
		КонецЕсли;
		
		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабличныйДокумент, ПервыйДокумент, НомерСтрокиНачало);
		
		СведенияОбОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
		СведенияОбКонтрагенте = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
		// Доставка
		ГрузополучательЗаполнен = (ЗначениеЗаполнено(Шапка.Грузополучатель) И Шапка.Грузополучатель <> Шапка.Контрагент);
		Если ГрузополучательЗаполнен Тогда
			СведенияОбКонтрагенте.Вставить("Грузополучатель", Шапка.Грузополучатель);
		КонецЕсли; 
		АдресДоставкиЗаполнен = (НЕ ПустаяСтрока(Шапка.АдресДоставки) И Шапка.АдресДоставки <> СведенияОбКонтрагенте.ЮридическийАдрес);
		Если АдресДоставкиЗаполнен Тогда
			СведенияОбКонтрагенте.Вставить("АдресДоставки", Шапка.АдресДоставки);
		КонецЕсли;
		// Конец Доставка
		
		ТекстЗаголовка = СтрШаблон(
			НСтр("ru='Заказ покупателя № %1 от %2'"),
			ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Шапка.ДатаДокумента, Шапка.Номер, Шапка.Префикс),
			ПечатьДокументовУНФ.ПредставлениеДатыВДокументах(Шапка.ДатаДокумента)
		);
		
		ДанныеПечати = Новый Структура;
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ДанныеПечати.Вставить("ПредставлениеПоставщика", ПечатьДокументовУНФ.ОписаниеОрганизации(
			СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));
		ДанныеПечати.Вставить("ПредставлениеПолучателя", ПечатьДокументовУНФ.ОписаниеОрганизации(
			СведенияОбКонтрагенте, "ПолноеНаименование,ИНН,КПП,РегистрационныйНомер,ЮридическийАдрес,Телефоны,Грузополучатель,АдресДоставки,"));
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьЗаголовок.Параметры.Заполнить(ДанныеПечати);
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовок,
			Шапка.Ссылка);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		ОбластьПоставщик = Макет.ПолучитьОбласть("Поставщик");
		ОбластьПоставщик.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьПоставщик);
		
		ОбластьПокупатель = Макет.ПолучитьОбласть("Покупатель");
		ОбластьПокупатель.Параметры.Заполнить(ДанныеПечати); 
		ТабличныйДокумент.Вывести(ОбластьПокупатель);
		
		ЕстьСкидки = (Шапка.ТаблицаЗапасы.Итог("ЕстьСкидка") + Шапка.ТаблицаРаботыУслуги.Итог("ЕстьСкидка")) <> 0;
		Если ЕстьСкидки Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСоСкидкой");
			ОбластьГруппаРазделитель = Макет.ПолучитьОбласть("СтрокаСоСкидкойГруппировка");
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			ОбластьГруппаРазделитель = Макет.ПолучитьОбласть("СтрокаГруппировка");
		КонецЕсли;
		
		СтруктураИтогов = Новый Структура;
		СтруктураИтогов.Вставить("Сумма", 0);
		СтруктураИтогов.Вставить("СуммаНДС", 0);
		СтруктураИтогов.Вставить("Всего", 0);
		СтруктураИтогов.Вставить("Количество", 0);
		СтруктураИтогов.Вставить("НомерСтроки", 0);
		СтруктураИтогов.Вставить("Вес", 0);
		СтруктураИтогов.Вставить("ЕстьСкидки", ЕстьСкидки);
		СтруктураИтогов.Вставить("СкидкаПоСтроке", 0);
		СтруктураИтогов.Вставить("СкидкаПоДокументу", 0);
		СтруктураИтогов.Вставить("ПредставлениеСкидки", ПредставлениеСкидки);
		СтруктураИтогов.Вставить("ЕстьСтавкаНольПроцентов", Ложь);
		
		ПараметрыНоменклатуры = Новый Структура;
		
		Для каждого СтрокаРаботыУслуги Из Шапка.ТаблицаРаботыУслуги Цикл
			
			ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиЗаказПокупателя(СтрокаРаботыУслуги, ДанныеПечати,
				ПараметрыНоменклатуры, СтруктураИтогов);
			
			ОбластьМакета.Параметры.Заполнить(СтрокаРаботыУслуги);
			ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Наборы
			НаборыСервер.УчестьОформлениеСтрокиНабора(ТабличныйДокумент, ОбластьМакета, СтрокаРаботыУслуги);
			
		КонецЦикла;
		
		Для каждого СтрокаЗапасы Из Шапка.ТаблицаЗапасы Цикл
			
			Если СтрокаЗапасы.ЭтоРазделитель Тогда
				СтруктураИтогов.НомерСтроки = 0;
				ОбластьГруппаРазделитель.Параметры.Заполнить(СтрокаЗапасы);
				ДанныеПечати.Очистить();
				ДанныеПечати.Вставить("Запас", СтрокаЗапасы.ПредставлениеНоменклатуры);
				ОбластьГруппаРазделитель.Параметры.Заполнить(ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьГруппаРазделитель);
				Продолжить;
			КонецЕсли; 
			
			ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиЗаказПокупателя(СтрокаЗапасы, ДанныеПечати,
				ПараметрыНоменклатуры, СтруктураИтогов);
			
			ОбластьМакета.Параметры.Заполнить(СтрокаЗапасы);
			ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Наборы
			НаборыСервер.УчестьОформлениеСтрокиНабора(ТабличныйДокумент, ОбластьМакета, СтрокаЗапасы);
			
		КонецЦикла;
		
		ДанныеПечати.Очистить();
		ДанныеПечати.Вставить("Всего", ПечатьДокументовУНФ.ФорматСумм(СтруктураИтогов.Сумма));
		ДанныеПечати.Вставить("НДС", ПечатьДокументовУНФ.ПредставлениеЗаголовкаНДС(СтруктураИтогов.СуммаНДС,
			Шапка.СуммаВключаетНДС, Ложь, СтруктураИтогов.ЕстьСтавкаНольПроцентов));
		ДанныеПечати.Вставить("ВсегоНДС", ?(СтруктураИтогов.СуммаНДС = 0 И Не СтруктураИтогов.ЕстьСтавкаНольПроцентов,
			"-", ПечатьДокументовУНФ.ФорматСумм(СтруктураИтогов.СуммаНДС, , "0,00")));
		ДанныеПечати.Вставить("ИтоговаяСтрока", ПечатьДокументовУНФ.ИтоговаяСтрока(СтруктураИтогов.Количество,
			СтруктураИтогов.Всего, Шапка.ВалютаДокумента));
		ДанныеПечати.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(СтруктураИтогов.Всего,
			Шапка.ВалютаДокумента));
		ДанныеПечати.Вставить("Отпустил", Шапка.Ответственный);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если СтруктураИтогов.ЕстьСкидки Тогда
			
			ОбластьМакета = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "ИтогоСкидка", "", Ошибки);
			Если ОбластьМакета <> Неопределено Тогда
				
				ОбластьМакета.Параметры.Заполнить(СтруктураИтогов);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбластьМакета = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "ИтогоВес", "", Ошибки);
		Если ОбластьМакета <> Неопределено Тогда
			
			ОбластьМакета.Параметры.Вес = 0;
			Если СтруктураИтогов.Вес <> 0 Тогда
				
				ОбластьМакета.Параметры.Вес = СтруктураИтогов.Вес;
				
			ИначеЕсли Шапка.Вес <> 0 Тогда
				
				ОбластьМакета.Параметры.Вес = Шапка.Вес;
				
			КонецЕсли;
			
			Если ОбластьМакета.Параметры.Вес <> 0 Тогда
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьЗаказПокупателя()

Процедура СформироватьЗаказНаряд(ПечатнаяФорма, МассивОбъектов, ОбъектыПечати, Ошибки)
	Перем ПервыйДокумент, НомерСтрокиНачало;
	
	ТабличныйДокумент = ПечатнаяФорма.ТабличныйДокумент;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПечатнаяФорма.ПолныйПутьКМакету);
	ПредставлениеСкидки = Константы.ПредставлениеСкидкиВПечатнойФорме.Получить();
	
	ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабличныйДокумент, ПервыйДокумент, НомерСтрокиНачало);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ЗаказПокупателя.Номер КАК Номер,
	|	ЗаказПокупателя.Дата КАК ДатаДокумента,
	|	ЗаказПокупателя.Старт КАК Старт,
	|	ЗаказПокупателя.Финиш КАК Финиш,
	|	ЗаказПокупателя.Организация КАК Организация,
	|	ЗаказПокупателя.ПодписьРуководителя.РасшифровкаПодписи КАК РасшифровкаПодписиВыполнилРаботыУслуги,
	|	ЗаказПокупателя.Контрагент КАК Контрагент,
	|	ЗаказПокупателя.КонтактноеЛицоПодписант.Наименование КАК РасшифровкаПодписиПринялРаботыУслуги,
	|	ЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗаказПокупателя.Организация.Префикс КАК Префикс,
	|	ЗаказПокупателя.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ЗаказПокупателя.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК Товар,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Штрихкод КАК Штрихкод,
	|		ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		Характеристика КАК Характеристика,
	|		Содержание КАК Содержание,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Запасы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ ЗаказПокупателя.Запасы.СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|		КлючСвязи КАК КлючСвязи,
	|		ЛОЖЬ КАК ЭтоНабор,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Запасы.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И ЗаказПокупателя.Запасы.НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора
	|	) КАК ТаблицаЗапасы,
	|	ЗаказПокупателя.Работы.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.Работы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ЗаказПокупателя.Работы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.Работы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК Товар,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Штрихкод КАК Штрихкод,
	|		Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		ЗаказПокупателя.Работы.Количество * ЗаказПокупателя.Работы.Коэффициент * ЗаказПокупателя.Работы.Кратность КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		Характеристика КАК Характеристика,
	|		Содержание КАК Содержание,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Работы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ ЗаказПокупателя.Работы.СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		КлючСвязи КАК КлючСвязи,
	|		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|		ЛОЖЬ КАК ЭтоНабор,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Работы.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И ЗаказПокупателя.Работы.НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора
	|	) КАК ТаблицаРаботы,
	|	ЗаказПокупателя.МатериалыЗаказчика.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.МатериалыЗаказчика.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ЗаказПокупателя.МатериалыЗаказчика.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.МатериалыЗаказчика.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК Товар,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Штрихкод КАК Штрихкод,
	|		ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		Количество КАК Количество,
	|		Характеристика КАК Характеристика
	|	) КАК ТаблицаМатериалыЗаказчика,
	|	ЗаказПокупателя.СерииНоменклатуры.(
	|		Серия КАК Серия,
	|		КлючСвязи КАК КлючСвязи
	|	) КАК ТаблицаСерииНоменклатуры,
	|	ЗаказПокупателя.ДобавленныеНаборы.(
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.ДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ЗаказПокупателя.ДобавленныеНаборы.НоменклатураНабора.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.ДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ЗапасНабора,
	|		НоменклатураНабора.ВариантПечатиНабора КАК ВариантПечатиНабора,
	|		НоменклатураНабора.ТипНоменклатуры КАК ТипНоменклатурыНабора,
	|		НоменклатураНабора.Артикул КАК АртикулНабора,
	|		НоменклатураНабора.Код КАК КодНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияНабора,
	|		ИСТИНА КАК ВыводитьИтоги
	|	) КАК ТаблицаДобавленныеНаборы,
	|	ЗаказПокупателя.Исполнители.(
	|		КлючСвязи КАК КлючСвязи
	|	) КАК ТаблицаИсполнители
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПокупателя.Дата,
	|	ЗаказПокупателя.Работы.НомерСтроки,
	|	ЗаказПокупателя.Запасы.НомерСтроки";
	
	ДанныеДокументов = Запрос.Выполнить().Выгрузить();

	// Наборы
	НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(ДанныеДокументов, "ТаблицаЗапасы", Ошибки);
	НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(ДанныеДокументов, "ТаблицаРаботы", Ошибки);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ФИОФизЛиц.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(ФИОФизЛиц.Имя, """") КАК Имя,
	|	ЕСТЬNULL(ФИОФизЛиц.Отчество, """") КАК Отчество,
	|	МаксимальныеПериоды.Физлицо КАК Физлицо,
	|	МаксимальныеПериоды.КлючСвязи КАК КлючСвязи,
	|	МаксимальныеПериоды.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ФИОФизЛиц.Период) КАК Период,
	|		ЗаказПокупателяИсполнители.Сотрудник.Физлицо КАК Физлицо,
	|		ЗаказПокупателяИсполнители.КлючСвязи КАК КлючСвязи,
	|		ЗаказПокупателяИсполнители.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЗаказПокупателя.Исполнители КАК ЗаказПокупателяИсполнители
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|			ПО ЗаказПокупателяИсполнители.Сотрудник.Физлицо = ФИОФизЛиц.ФизЛицо
	|				И (ФИОФизЛиц.Период <= ЗаказПокупателяИсполнители.Ссылка.Дата)
	|	ГДЕ
	|		ЗаказПокупателяИсполнители.Ссылка В(&МассивОбъектов)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПокупателяИсполнители.Сотрудник.Физлицо,
	|		ЗаказПокупателяИсполнители.КлючСвязи,
	|		ЗаказПокупателяИсполнители.Ссылка) КАК МаксимальныеПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|		ПО МаксимальныеПериоды.Физлицо = ФИОФизЛиц.ФизЛицо
	|			И МаксимальныеПериоды.Период = ФИОФизЛиц.Период";
	
	ТаблицаИсполнители = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТабличнойЧасти Из ДанныеДокументов Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Ссылка", СтрокаТабличнойЧасти.Ссылка);
		СтрокаТабличнойЧасти.ТаблицаИсполнители = ТаблицаИсполнители.Скопировать(СтруктураОтбора);
	КонецЦикла; 
		
	Для каждого Шапка Из ДанныеДокументов Цикл
		
		СведенияОбОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
		СведенияОбКонтрагенте = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
		
		НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Шапка.ДатаДокумента,
			Шапка.Номер, Шапка.Префикс);
		
		ДанныеПечати = Новый Структура;
		ДанныеПечати.Вставить("ТекстЗаголовка", СтрШаблон(НСтр("ru = 'Заказ-наряд № %1 от %2'"), НомерДокумента, Формат(
			Шапка.ДатаДокумента, "ДЛФ=DD")));
		ДанныеПечати.Вставить("ПредставлениеПоставщика", ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбОрганизации,
			"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));
		ДанныеПечати.Вставить("ПредставлениеПолучателя", ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбКонтрагенте,
			"ПолноеНаименование,ИНН,КПП,РегистрационныйНомер,ЮридическийАдрес,Телефоны,"));
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьЗаголовок.Параметры.Заполнить(ДанныеПечати);
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовок,
			Шапка.Ссылка);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		ОбластьПоставщик = Макет.ПолучитьОбласть("Поставщик");
		ОбластьПоставщик.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьПоставщик);
		
		ОбластьПокупатель = Макет.ПолучитьОбласть("Покупатель");
		ОбластьПокупатель.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьПокупатель);
		
		ОбластьСроки = Макет.ПолучитьОбласть("Сроки");
		ОбластьСроки.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьСроки);
		
		// РАБОТЫ
		ЕстьСкидки = Шапка.ТаблицаРаботы.Итог("ЕстьСкидка") <> 0;
		СтруктураИтогов = Новый Структура;
		СтруктураИтогов.Вставить("НомерСтроки", 0);
		СтруктураИтогов.Вставить("СуммаРаботы", 0);
		СтруктураИтогов.Вставить("СуммаНДСРаботы", 0);
		СтруктураИтогов.Вставить("СуммаТовары", 0);
		СтруктураИтогов.Вставить("СуммаНДСТовары", 0);
		СтруктураИтогов.Вставить("Сумма", 0);
		СтруктураИтогов.Вставить("СуммаНДС", 0);
		СтруктураИтогов.Вставить("Всего", 0);
		СтруктураИтогов.Вставить("Количество", 0);
		СтруктураИтогов.Вставить("ЕстьСкидки", ЕстьСкидки);
		СтруктураИтогов.Вставить("СкидкаПоДокументу", 0);
		СтруктураИтогов.Вставить("СкидкаПоСтроке", 0);
		СтруктураИтогов.Вставить("ПредставлениеСкидки", ПредставлениеСкидки);
		
		ПараметрыНоменклатуры = Новый Структура;
		
		Если СтруктураИтогов.ЕстьСкидки Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкойРаботы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСоСкидкойРаботы");
			
		Иначе
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыРаботы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаРаботы");
			
		КонецЕсли;
		
		Для каждого СтрокаРаботы Из Шапка.ТаблицаРаботы Цикл
			
			ОбластьМакета.Параметры.Заполнить(СтрокаРаботы);
			
 			ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиЗаказНаряд(СтрокаРаботы, ДанныеПечати, ПараметрыНоменклатуры,
				СтруктураИтогов);
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("КлючСвязи", СтрокаРаботы.КлючСвязи);
			СтрокиИсполнители = Шапка.ТаблицаИсполнители.НайтиСтроки(СтруктураОтбора);
			
			Исполнители = Новый Массив;
			Для Каждого СтрИсполнитель Из СтрокиИсполнители Цикл
				ПредставлениеСотрудник = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(СтрИсполнитель);
				Если ЗначениеЗаполнено(ПредставлениеСотрудник) Тогда
					Исполнители.Добавить(ПредставлениеСотрудник);
				Иначе
					Исполнители.Добавить(СтрИсполнитель.Физлицо);
				КонецЕсли;
			КонецЦикла; 
			ДанныеПечати.Вставить("Исполнители", СтрСоединить(Исполнители, ", "));
			
			Если НЕ СтрокаРаботы.ЭтоНабор Тогда
				СтруктураИтогов.СуммаРаботы		= СтруктураИтогов.СуммаРаботы	 + СтрокаРаботы.Сумма;
				СтруктураИтогов.СуммаНДСРаботы	= СтруктураИтогов.СуммаНДСРаботы + СтрокаРаботы.СуммаНДС;
			КонецЕсли; 
			
			ОбластьМакета.Параметры.Заполнить(СтрокаРаботы);
			ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Наборы
			НаборыСервер.УчестьОформлениеСтрокиНабора(ТабличныйДокумент, ОбластьМакета, СтрокаРаботы);
			
		КонецЦикла;
		
		ОбластьИтогоРаботы = Макет.ПолучитьОбласть("ИтогоРаботы");
		ОбластьИтогоРаботы.Параметры.Всего = ПечатьДокументовУНФ.ФорматСумм(СтруктураИтогов.СуммаРаботы);
		ТабличныйДокумент.Вывести(ОбластьИтогоРаботы);
		
		ОбластьИтогоНДСРаботы = Макет.ПолучитьОбласть("ИтогоНДСРаботы");
		ЗаполнитьПараметрыНДС(ОбластьИтогоНДСРаботы, СтруктураИтогов.СуммаНДС, СтруктураИтогов.СуммаНДСРаботы, Шапка);
		ТабличныйДокумент.Вывести(ОбластьИтогоНДСРаботы);
		
		// ТОВАРЫ
		СтруктураИтогов.Вставить("НомерСтроки", 0);
		Если Шапка.ТаблицаЗапасы.Количество() > 0 Тогда
		
			ЕстьСкидки = Шапка.ТаблицаЗапасы.Итог("ЕстьСкидка") <> 0;
			СтруктураИтогов.Вставить("ЕстьСкидки", ЕстьСкидки);
			
			Если СтруктураИтогов.ЕстьСкидки Тогда
				
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкойТовары");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСоСкидкойТовары");
				
			Иначе
				
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыТовары");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТовары");
				
			КонецЕсли;
			
			Для каждого СтрокаЗапасы Из Шапка.ТаблицаЗапасы Цикл
				
				ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиЗаказНаряд(СтрокаЗапасы, ДанныеПечати, ПараметрыНоменклатуры, СтруктураИтогов);
				
				Если НЕ СтрокаЗапасы.ЭтоНабор Тогда
					СтруктураИтогов.СуммаТовары		= СтруктураИтогов.СуммаТовары	 + СтрокаЗапасы.Сумма;
					СтруктураИтогов.СуммаНДСТовары	= СтруктураИтогов.СуммаНДСТовары + СтрокаЗапасы.СуммаНДС;
				КонецЕсли; 
			
				ОбластьМакета.Параметры.Заполнить(СтрокаЗапасы);
				ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				// Наборы
				НаборыСервер.УчестьОформлениеСтрокиНабора(ТабличныйДокумент, ОбластьМакета, СтрокаЗапасы);
			
			КонецЦикла;
			
			ОбластьИтогоТовары = Макет.ПолучитьОбласть("ИтогоТовары");
			ОбластьИтогоТовары.Параметры.Всего = ПечатьДокументовУНФ.ФорматСумм(СтруктураИтогов.СуммаТовары);
			ТабличныйДокумент.Вывести(ОбластьИтогоТовары);
			
			ОбластьИтогоНДСТовары = Макет.ПолучитьОбласть("ИтогоНДСТовары");
			ЗаполнитьПараметрыНДС(ОбластьИтогоНДСТовары, СтруктураИтогов.СуммаНДС, СтруктураИтогов.СуммаНДСТовары, Шапка);
			ТабличныйДокумент.Вывести(ОбластьИтогоНДСТовары);
			
		КонецЕсли; 
		
		// МАТЕРИАЛЫ ЗАКАЗЧИКА
		Если Шапка.ТаблицаМатериалыЗаказчика.Количество() > 0 Тогда
		
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыМатериалыЗаказчика");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаМатериалыЗаказчика");
			
			Для каждого СтрокаМатериалыЗаказчика Из Шапка.ТаблицаМатериалыЗаказчика Цикл
				
				ОбластьМакета.Параметры.Заполнить(СтрокаМатериалыЗаказчика);
				
				ОбластьМакета.Параметры.Товар = ПечатьДокументовУНФ.ПредставлениеНоменклатурыДляПечати(СтрокаМатериалыЗаказчика.Товар, 
																		СтрокаМатериалыЗаказчика.Характеристика, СтрокаМатериалыЗаказчика.Артикул);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЦикла;
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоМатериалыЗаказчика");
			ТабличныйДокумент.Вывести(ОбластьМакета);
		
		КонецЕсли; 
		
		// ПОДВАЛ
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = СтруктураИтогов.Всего;
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований "
												+ Строка(СтруктураИтогов.Количество)
												+ ", на сумму "
												+ ПечатьДокументовУНФ.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		
		ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла; 
		
КонецПроцедуры

Процедура ЗаполнитьПараметрыНДС(Знач ОбластьИтогоНДС, Знач СуммаНДС, Знач ВсегоНДС, Знач Шапка)
	
	Если СуммаНДС = 0 Тогда
		ОбластьИтогоНДС.Параметры.НДС = НСтр("ru = 'Без налога (НДС)'");
		ОбластьИтогоНДС.Параметры.ВсегоНДС = "-";
	Иначе
		Если Шапка.СуммаВключаетНДС Тогда
			ОбластьИтогоНДС.Параметры.НДС = НСтр("ru = 'В том числе НДС:'");
		Иначе
			ОбластьИтогоНДС.Параметры.НДС = НСтр("ru = 'Сумма НДС:'");
		КонецЕсли;
		ОбластьИтогоНДС.Параметры.ВсегоНДС = ПечатьДокументовУНФ.ФорматСумм(ВсегоНДС);
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьКалькуляцию(ПечатнаяФорма, МассивОбъектов, ОбъектыПечати)
	Перем ПервыйДокумент, НомерСтрокиНачало;
	
	ТабличныйДокумент = ПечатнаяФорма.ТабличныйДокумент;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПечатнаяФорма.ПолныйПутьКМакету);
	
	ОтображатьСебестоимость = ХранилищеСистемныхНастроек.Загрузить("ЗаказПокупателя", "ОтображатьСебестоимость");
	Если ТипЗнч(ОтображатьСебестоимость) <> Тип("Булево") Тогда
		ОтображатьСебестоимость = Пользователи.РолиДоступны(ОтображатьСебестоимость);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ЗаказПокупателя.Номер КАК Номер,
	|	ЗаказПокупателя.Дата КАК Дата,
	|	ЗаказПокупателя.Организация КАК Организация,
	|	ЗаказПокупателя.Контрагент КАК Контрагент,
	|	ЗаказПокупателя.КалькуляцияРассчитана КАК КалькуляцияРассчитана,
	|	ЗаказПокупателя.СуммаДокумента КАК СуммаДокумента,
	|	ЗаказПокупателя.ОсновнойВариантКП КАК ОсновнойВариантКП,
	|	ЗаказПокупателя.НоменклатураДоставки КАК НоменклатураДоставки,
	|	ЗаказПокупателя.СтоимостьДоставки КАК СтоимостьДоставки,
	|	ЗаказПокупателя.СпособДоставки КАК СпособДоставки
	|ПОМЕСТИТЬ Заказы
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&МассивОбъектов)
	|	И НЕ ЗаказПокупателя.ОжидаетсяВыборВариантаКП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.Ссылка КАК Ссылка,
	|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ЗаказПокупателяЗапасы.Спецификация КАК Спецификация,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказПокупателяЗапасы.Количество КАК Количество,
	|	ЗаказПокупателяЗапасы.Всего КАК Всего,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.ПроцентСкидкиНаценки + ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки >= 100
	|			ТОГДА ЗаказПокупателяЗапасы.Цена * ЗаказПокупателяЗапасы.Количество * ВЫБОР
	|					КОГДА ЗаказПокупателяЗапасы.Ссылка.СуммаВключаетНДС
	|						ТОГДА 1
	|					ИНАЧЕ 1 + ЗаказПокупателяЗапасы.СтавкаНДС.Ставка / 100
	|				КОНЕЦ
	|		ИНАЧЕ ЗаказПокупателяЗапасы.Всего / (1 - (ЗаказПокупателяЗапасы.ПроцентСкидкиНаценки + ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки) / 100) - ЗаказПокупателяЗапасы.Всего
	|	КОНЕЦ КАК СуммаСкидки,
	|	ЗаказПокупателяЗапасы.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ Запасы
	|ИЗ
	|	Заказы КАК Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|		ПО Заказы.Ссылка = ЗаказПокупателяЗапасы.Ссылка
	|ГДЕ
	|	ЗаказПокупателяЗапасы.НомерВариантаКП = Заказы.ОсновнойВариантКП
	|	И НЕ ЗаказПокупателяЗапасы.ЭтоРазделитель
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Заказы.Ссылка,
	|	МАКСИМУМ(ЗаказПокупателяЗапасы.НомерСтроки) + 1,
	|	Заказы.НоменклатураДоставки,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка),
	|	Заказы.НоменклатураДоставки.ЕдиницаИзмерения,
	|	1,
	|	Заказы.СтоимостьДоставки,
	|	0,
	|	-1
	|ИЗ
	|	Заказы КАК Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|		ПО Заказы.Ссылка = ЗаказПокупателяЗапасы.Ссылка
	|ГДЕ
	|	Заказы.СпособДоставки <> ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПустаяСсылка)
	|	И Заказы.СпособДоставки <> ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказы.НоменклатураДоставки,
	|	Заказы.НоменклатураДоставки.ЕдиницаИзмерения,
	|	Заказы.Ссылка,
	|	Заказы.СтоимостьДоставки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяКалькуляция.Ссылка КАК Ссылка,
	|	ЗаказПокупателяКалькуляция.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяКалькуляция.Характеристика КАК Характеристика,
	|	ЗаказПокупателяКалькуляция.Спецификация КАК Спецификация,
	|	ЗаказПокупателяКалькуляция.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяКалькуляция.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Операция)
	|				И НЕ ЗаказПокупателяКалькуляция.Номенклатура.ФиксированнаяСтоимость
	|			ТОГДА ЗаказПокупателяКалькуляция.НормаВремени
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК НормаВремени,
	|	ЗаказПокупателяКалькуляция.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказПокупателяКалькуляция.Себестоимость КАК Себестоимость,
	|	ЗаказПокупателяКалькуляция.КлючСвязи КАК КлючСвязи,
	|	ЗаказПокупателяКалькуляция.Источник КАК Источник
	|ПОМЕСТИТЬ Калькуляции
	|ИЗ
	|	Заказы КАК Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Калькуляция КАК ЗаказПокупателяКалькуляция
	|		ПО Заказы.Ссылка = ЗаказПокупателяКалькуляция.Ссылка
	|			И Заказы.ОсновнойВариантКП = ЗаказПокупателяКалькуляция.НомерВариантаКП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заказы.Ссылка КАК Ссылка,
	|	Заказы.Номер КАК Номер,
	|	Заказы.Дата КАК ДатаДокумента,
	|	Заказы.Организация КАК Организация,
	|	Заказы.Контрагент КАК Контрагент,
	|	Заказы.Организация.Префикс КАК Префикс,
	|	Заказы.КалькуляцияРассчитана КАК КалькуляцияРассчитана,
	|	Заказы.СуммаДокумента КАК СуммаДокумента,
	|	Калькуляции.КлючСвязи КАК КлючСвязи,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Калькуляции.Номенклатура) = ТИП(ПланСчетов.Управленческий)
	|			ТОГДА Калькуляции.Номенклатура.Наименование
	|		КОГДА (ВЫРАЗИТЬ(Калькуляции.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА Калькуляции.Номенклатура.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(Калькуляции.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ КАК Номенклатура,
	|	Калькуляции.Характеристика КАК Характеристика,
	|	Калькуляции.Спецификация КАК Спецификация,
	|	Калькуляции.Количество КАК Количество,
	|	Калькуляции.НормаВремени КАК НормаВремени,
	|	Калькуляции.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(Калькуляции.Номенклатура.Артикул, """") КАК Артикул,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(Запасы.Номенклатура) = ТИП(ПланСчетов.Управленческий)
	|				ТОГДА Запасы.Номенклатура.Наименование
	|			КОГДА (ВЫРАЗИТЬ(Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК НоменклатураИзделие,
	|	ЕСТЬNULL(Запасы.Характеристика, НЕОПРЕДЕЛЕНО) КАК ХарактеристикаИзделие,
	|	ЕСТЬNULL(Запасы.Спецификация, НЕОПРЕДЕЛЕНО) КАК СпецификацияИзделие,
	|	ЕСТЬNULL(Запасы.ЕдиницаИзмерения, НЕОПРЕДЕЛЕНО) КАК ЕдиницаИзмеренияИзделие,
	|	ЕСТЬNULL(Запасы.Количество, НЕОПРЕДЕЛЕНО) КАК КоличествоИзделие,
	|	ЕСТЬNULL(Запасы.Номенклатура.Артикул, """") КАК АртикулИзделие,
	|	ЕСТЬNULL(Запасы.НомерСтроки, 999999) КАК НомерСтрокиЗапасов,
	|	ВЫБОР
	|		КОГДА Запасы.Номенклатура ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДополнительныйМатериал,
	|	Калькуляции.Себестоимость КАК Себестоимость,
	|	ЕСТЬNULL(Запасы.Всего, 0) КАК Сумма,
	|	ЕСТЬNULL(Запасы.СуммаСкидки, 0) КАК Скидка
	|ИЗ
	|	Заказы КАК Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Калькуляции КАК Калькуляции
	|			ЛЕВОЕ СОЕДИНЕНИЕ Запасы КАК Запасы
	|			ПО Калькуляции.Ссылка = Запасы.Ссылка
	|				И (Калькуляции.КлючСвязи = Запасы.КлючСвязи
	|						И Калькуляции.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиСтрокКалькуляции.Запас)
	|					ИЛИ Запасы.КлючСвязи = -1
	|						И Калькуляции.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиСтрокКалькуляции.Доставка)
	|						И Калькуляции.Номенклатура = Запасы.Номенклатура)
	|		ПО Заказы.Ссылка = Калькуляции.Ссылка
	|ГДЕ
	|	Заказы.КалькуляцияРассчитана
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Заказы.Ссылка,
	|	Заказы.Номер,
	|	Заказы.Дата,
	|	Заказы.Организация,
	|	Заказы.Контрагент,
	|	Заказы.Организация.Префикс,
	|	Заказы.КалькуляцияРассчитана,
	|	Заказы.СуммаДокумента,
	|	Запасы.КлючСвязи,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	Запасы.Номенклатура,
	|	Запасы.Характеристика,
	|	Запасы.Спецификация,
	|	Запасы.ЕдиницаИзмерения,
	|	Запасы.Количество,
	|	Запасы.Номенклатура.Артикул,
	|	Запасы.НомерСтроки,
	|	ЛОЖЬ,
	|	0,
	|	Запасы.Всего,
	|	Запасы.СуммаСкидки
	|ИЗ
	|	Заказы КАК Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Запасы КАК Запасы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Калькуляции КАК Калькуляции
	|			ПО Запасы.Ссылка = Калькуляции.Ссылка
	|				И (Калькуляции.КлючСвязи = Запасы.КлючСвязи
	|						И Калькуляции.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиСтрокКалькуляции.Запас)
	|					ИЛИ Запасы.КлючСвязи = -1
	|						И Калькуляции.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиСтрокКалькуляции.Доставка)
	|						И Калькуляции.Номенклатура = Запасы.Номенклатура)
	|		ПО Заказы.Ссылка = Запасы.Ссылка
	|ГДЕ
	|	(Калькуляции.Ссылка ЕСТЬ NULL
	|			ИЛИ НЕ Заказы.КалькуляцияРассчитана)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтрокиЗапасов
	|ИТОГИ
	|	МАКСИМУМ(Номер),
	|	МАКСИМУМ(ДатаДокумента),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(Префикс),
	|	МАКСИМУМ(КалькуляцияРассчитана),
	|	МАКСИМУМ(СуммаДокумента),
	|	МАКСИМУМ(НоменклатураИзделие),
	|	МАКСИМУМ(ХарактеристикаИзделие),
	|	МАКСИМУМ(СпецификацияИзделие),
	|	МАКСИМУМ(ЕдиницаИзмеренияИзделие),
	|	МАКСИМУМ(КоличествоИзделие),
	|	МАКСИМУМ(АртикулИзделие),
	|	СУММА(Себестоимость),
	|	МАКСИМУМ(Сумма),
	|	МАКСИМУМ(Скидка)
	|ПО
	|	Ссылка,
	|	НомерСтрокиЗапасов";
	
	Шапка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Шапка.Следующий() Цикл
		
		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабличныйДокумент, ПервыйДокумент, НомерСтрокиНачало);
		
		НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Шапка.ДатаДокумента,
			Шапка.Номер, Шапка.Префикс);
		
			Если Не Шапка.КалькуляцияРассчитана Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Калькуляция не рассчитана для заказа %1 от %2'"), НомерДокумента,
					Формат(Шапка.ДатаДокумента, "ДЛФ=D"));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли; 
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		СведенияОбКонтрагенте = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Контрагент,
			Шапка.ДатаДокумента, , );
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Калькуляция заказа покупателя № %1 от %2'"),
			НомерДокумента, Формат(Шапка.ДатаДокумента, "ДЛФ=DD"));
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовок,
			Шапка.Ссылка);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		ОбластьПокупатель = Макет.ПолучитьОбласть("Покупатель");
		ПредставлениеПолучателя = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбКонтрагенте,
			"ПолноеНаименование,ФизическийАдрес,Телефоны,");
		ОбластьПокупатель.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя; 
		ТабличныйДокумент.Вывести(ОбластьПокупатель);
		
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
		ОбластьСостава = Макет.ПолучитьОбласть("Состав");
		
		НомерСтроки = 0;
		ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
		
		ВыборкаИзделий = Шапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаИзделий.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаИзделий.НоменклатураИзделие) Тогда
				
				НомерСтроки = НомерСтроки + 1;
				
				ОбластьСтроки.Параметры.Заполнить(ВыборкаИзделий);
				ОбластьСтроки.Параметры.Запас = ПечатьДокументовУНФ.ПредставлениеНоменклатурыДляПечати(
				ВыборкаИзделий.НоменклатураИзделие, 
				ВыборкаИзделий.ХарактеристикаИзделие, 
				ВыборкаИзделий.АртикулИзделие);
				СтруктураПолей = Новый Структура;
				СтруктураПолей.Вставить("НомерСтроки", Формат(НомерСтроки, "ЧГ=0"));
				Если ТипЗнч(ВыборкаИзделий.КоличествоИзделие)=Тип("Число") 
					И ВыборкаИзделий.КоличествоИзделие>0 
					И ТипЗнч(ВыборкаИзделий.Себестоимость)=Тип("Число") 
					И ВыборкаИзделий.Себестоимость>0 Тогда
					СтруктураПолей.Вставить("Цена", Окр(ВыборкаИзделий.Себестоимость / ВыборкаИзделий.КоличествоИзделие, 2));
				КонецЕсли; 
				ОбластьСтроки.Параметры.Заполнить(СтруктураПолей);
				ТабличныйДокумент.Вывести(ОбластьСтроки, 0);
				
			КонецЕсли; 
			
			ВыборкаСостава = ВыборкаИзделий.Выбрать();
			Пока ВыборкаСостава.Следующий() Цикл
				
				Если НЕ ЗначениеЗаполнено(ВыборкаСостава.Номенклатура) ИЛИ ВыборкаСостава.Номенклатура=ВыборкаСостава.НоменклатураИзделие Тогда
					Продолжить;
				КонецЕсли; 
				
				Если ВыборкаСостава.ДополнительныйМатериал Тогда
					
					НомерСтроки = НомерСтроки + 1;
					
					ЗапасПредставление = ПечатьДокументовУНФ.ПредставлениеНоменклатурыДляПечати(
					ВыборкаСостава.Номенклатура, 
					ВыборкаСостава.Характеристика, 
					ВыборкаСостава.Артикул);
					СтруктураПолей = Новый Структура;
					СтруктураПолей.Вставить("НомерСтроки", Формат(НомерСтроки, "ЧГ=0"));
					СтруктураПолей.Вставить("Запас", ЗапасПредставление);
					СтруктураПолей.Вставить("КоличествоИзделие", ВыборкаСостава.Количество);
					СтруктураПолей.Вставить("ЕдиницаИзмеренияИзделие", ВыборкаСостава.ЕдиницаИзмерения);
					Если ТипЗнч(ВыборкаСостава.Количество)=Тип("Число") 
						И ВыборкаСостава.Количество>0 
						И ТипЗнч(ВыборкаСостава.Себестоимость)=Тип("Число") 
						И ВыборкаСостава.Себестоимость>0 Тогда
						СтруктураПолей.Вставить("Цена", Окр(ВыборкаСостава.Себестоимость / ВыборкаСостава.Количество, 2));
					КонецЕсли;
					ОбластьСтроки.Параметры.Заполнить(ВыборкаСостава);
					ОбластьСтроки.Параметры.Заполнить(СтруктураПолей);
					ТабличныйДокумент.Вывести(ОбластьСтроки, 0);
					Продолжить;
					
				КонецЕсли;
				
				ЗапасПредставление = ПечатьДокументовУНФ.ПредставлениеНоменклатурыДляПечати(
				ВыборкаСостава.Номенклатура, 
				ВыборкаСостава.Характеристика, 
				ВыборкаСостава.Артикул);
				СтруктураПолей = Новый Структура;
				СтруктураПолей.Вставить("Запас", ЗапасПредставление);
				Если ТипЗнч(ВыборкаСостава.Количество)=Тип("Число") 
					И ВыборкаСостава.Количество>0 
					И ТипЗнч(ВыборкаСостава.Себестоимость)=Тип("Число") 
					И ВыборкаСостава.Себестоимость>0 Тогда
					СтруктураПолей.Вставить("Цена", Окр(ВыборкаСостава.Себестоимость / ВыборкаСостава.Количество, 2));
				КонецЕсли; 
				Если ЗначениеЗаполнено(ВыборкаСостава.НормаВремени) И ВыборкаСостава.НормаВремени<>1 Тогда
					СтруктураПолей.Вставить("Количество", (ВыборкаСостава.Количество * ВыборкаСостава.НормаВремени));
				КонецЕсли; 
				ОбластьСостава.Параметры.Заполнить(ВыборкаСостава);
				ОбластьСостава.Параметры.Заполнить(СтруктураПолей);
				ТабличныйДокумент.Вывести(ОбластьСостава, 1);
			
			КонецЦикла; 
			
		КонецЦикла;
		
		ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьПодвал.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати,
			Шапка.Ссылка);
		
	КонецЦикла;
	
	Если Не ОтображатьСебестоимость Тогда
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область( , 23, , 28),
			ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьКоммерческоеПредложение(ПечатнаяФорма, МассивОбъектов, ОбъектыПечати, Ошибки)
	Перем ПервыйДокумент, НомерСтрокиНачало;
	
	ТабличныйДокумент = ПечатнаяФорма.ТабличныйДокумент;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПечатнаяФорма.ПолныйПутьКМакету);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ЗаказПокупателя.Номер КАК Номер,
	|	ЗаказПокупателя.Дата КАК ДатаДокумента,
	|	ЗаказПокупателя.Организация КАК Организация,
	|	ЗаказПокупателя.Организация.Префикс КАК Префикс,
	|	ЗаказПокупателя.Организация.ФайлЛоготип КАК ФайлЛоготип,
	|	ЗаказПокупателя.Контрагент КАК Контрагент,
	|	ЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗаказПокупателя.УсловияКоммерческогоПредложения КАК ДополнительныеУсловия,
	|	ЗаказПокупателя.Ответственный КАК Ответственный,
	|	ЗаказПокупателя.ОжидаетсяВыборВариантаКП КАК ОжидаетсяВыборВариантаКП,
	|	ЗаказПокупателя.ОсновнойВариантКП КАК ОсновнойВариантКП,
	|	ЗаказПокупателя.КоличествоВариантовКП КАК КоличествоВариантовКП,
	|	ЗаказПокупателя.СпособДоставки КАК СпособДоставки,
	|	ЗаказПокупателя.Вес КАК Вес,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|				ИЛИ ЗаказПокупателя.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПустаяСсылка), ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз))
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИНАЧЕ ЗаказПокупателя.НоменклатураДоставки
	|	КОНЕЦ КАК НоменклатураДоставки,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА ЗаказПокупателя.НоменклатураДоставки.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ КАК ПредставлениеНоменклатурыДоставки,
	|	ЗаказПокупателя.НоменклатураДоставки.Код КАК КодДоставки,
	|	ЗаказПокупателя.НоменклатураДоставки.Артикул КАК АртикулДоставки,
	|	ЗаказПокупателя.НоменклатураДоставки.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДоставки,
	|	ЗаказПокупателя.СтоимостьДоставки КАК СтоимостьДоставки,
	|	ЗаказПокупателя.СуммаНДСДоставки КАК СуммаНДСДоставки,
	|	ЗаказПокупателя.СтавкаНДСДоставки КАК СтавкаНДСДоставки,
	|	ЗаказПокупателя.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателя.Запасы.Номенклатура) = ТИП(СТРОКА)
	|				ТОГДА ЗаказПокупателя.Запасы.Номенклатура
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ЗаказПокупателя.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ПредставлениеНоменклатуры,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Штрихкод КАК Штрихкод,
	|		ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		Вес КАК Вес,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Запасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|				ТОГДА ЗаказПокупателя.Запасы.Ссылка.Старт
	|			ИНАЧЕ ЗаказПокупателя.Запасы.ДатаОтгрузки
	|		КОНЕЦ КАК ДатаОтгрузки,
	|		Характеристика КАК Характеристика,
	|		Содержание КАК Содержание,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Запасы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ ЗаказПокупателя.Запасы.СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|		НомерВариантаКП КАК НомерВариантаКП,
	|		ЭтоРазделитель КАК ЭтоРазделитель,
	|		ЛОЖЬ КАК ЭтоНабор,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Запасы.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И ЗаказПокупателя.Запасы.НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора
	|	) КАК ТаблицаЗапасы,
	|	ЗаказПокупателя.ДобавленныеНаборы.(
	|		НомерВариантаКП КАК НомерВариантаКП,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.ДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ЗаказПокупателя.ДобавленныеНаборы.НоменклатураНабора.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.ДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ЗапасНабора,
	|		НоменклатураНабора.ВариантПечатиНабора КАК ВариантПечатиНабора,
	|		НоменклатураНабора.ТипНоменклатуры КАК ТипНоменклатурыНабора,
	|		НоменклатураНабора.Артикул КАК АртикулНабора,
	|		НоменклатураНабора.Код КАК КодНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияНабора,
	|		ИСТИНА КАК ВыводитьИтоги
	|	) КАК ТаблицаДобавленныеНаборы
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&МассивОбъектов)
	|	И (ЗаказПокупателя.ОсновнойВариантКП = 0
	|			ИЛИ ЗаказПокупателя.Запасы.НомерВариантаКП = ЗаказПокупателя.ОсновнойВариантКП)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ЗаказПокупателя.Запасы.НомерВариантаКП,
	|	НомерСтроки";
	
	ДанныеДокументов = Запрос.Выполнить().Выгрузить();
	
	ДоставкаСервер.ДобавитьСтрокуДоставкиУниверсальныеДанные(ДанныеДокументов);
	// Наборы
	НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(ДанныеДокументов, "ТаблицаЗапасы", Ошибки, Истина);
	
	Для каждого Шапка Из ДанныеДокументов Цикл
		
		ДанныеПечати = Новый Структура;
		
		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабличныйДокумент, ПервыйДокумент, НомерСтрокиНачало);
		
		ОбластьЗаголовокЛоготип = Макет.ПолучитьОбласть("ЗаголовокЛоготип");
		Если ЗначениеЗаполнено(Шапка.ФайлЛоготип) Тогда
			ДанныеКартинки = РаботаСФайлами.ДвоичныеДанныеФайла(Шапка.ФайлЛоготип);
			Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
				Для каждого Рисунок Из ОбластьЗаголовокЛоготип.Рисунки Цикл
					Если Рисунок.Имя = "Логотип" Тогда
						Рисунок.Картинка = Новый Картинка(ДанныеКартинки);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Подпись.
		ОтветственныйEmail = ПечатьДокументовУНФ.КонтактнаяИнформация(
			Шапка.Ответственный.Физлицо, Справочники.ВидыКонтактнойИнформации.EmailФизическиеЛица);
		ОтветственныйТелефон = ПечатьДокументовУНФ.КонтактнаяИнформация(
			Шапка.Ответственный.Физлицо, Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица);
		ДанныеПечати.Очистить();
		ДанныеПечати.Вставить("Ответственный", Шапка.Ответственный);
		ДанныеПечати.Вставить("КонтактнаяИнформацияEmail", НСтр("ru='email: '") + ОтветственныйEmail);
		ДанныеПечати.Вставить("КонтактнаяИнформацияТелефон", НСтр("ru='телефон: '") + ОтветственныйТелефон);
		
		ОбластьЗаголовокЛоготип.Параметры.Заполнить(ДанныеПечати);
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовокЛоготип,
			Шапка.Ссылка);
		ТабличныйДокумент.Вывести(ОбластьЗаголовокЛоготип);
		
		СведенияОбОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
		СведенияОбКонтрагенте = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента);
		
		ТекстЗаголовка = СтрШаблон(
			НСтр("ru='Коммерческое предложение № %1 от %2'"),
			ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Шапка.ДатаДокумента, Шапка.Номер,
			Шапка.Префикс), ПечатьДокументовУНФ.ПредставлениеДатыВДокументах(Шапка.ДатаДокумента));
		
		ДанныеПечати.Очистить();
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ДанныеПечати.Вставить("ПредставлениеПоставщика", ПечатьДокументовУНФ.ОписаниеОрганизации(
			СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));
		ДанныеПечати.Вставить("ПредставлениеПолучателя", ПечатьДокументовУНФ.ОписаниеОрганизации(
			СведенияОбКонтрагенте, "ПолноеНаименование,ИНН,КПП,РегистрационныйНомер,ЮридическийАдрес,Телефоны,"));
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокПредставлениеДокумента");
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ЕстьНесколькоВариантов = Шапка.ОжидаетсяВыборВариантаКП;
		Если ЕстьНесколькоВариантов Тогда
			НомерВарианта = 1;
			ПоследнийВариант = Шапка.КоличествоВариантовКП;
		Иначе
			НомерВарианта = Шапка.ОсновнойВариантКП;
			ПоследнийВариант = Шапка.ОсновнойВариантКП;
		КонецЕсли;
		
		ЕстьСкидки = Шапка.ТаблицаЗапасы.Итог("ЕстьСкидка") <> 0;
		
		Пока НомерВарианта <= ПоследнийВариант Цикл
			
			Если ЕстьНесколькоВариантов Тогда
				ДанныеПечати.Очистить();
				ДанныеПечати.Вставить("ВариантПредставление", СтрШаблон(НСтр("ru='Вариант №%1'"), НомерВарианта));
				
				ОбластьМакета = Макет.ПолучитьОбласть("Вариант");
				ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
			
			Отбор = Новый Структура("НомерВариантаКП", НомерВарианта);
			Строки = Шапка.ТаблицаЗапасы.НайтиСтроки(Отбор);
			
			СтруктураИтогов = Новый Структура;
			СтруктураИтогов.Вставить("Сумма", 0);
			СтруктураИтогов.Вставить("СуммаНДС", 0);
			СтруктураИтогов.Вставить("Всего", 0);
			СтруктураИтогов.Вставить("Количество", 0);
			СтруктураИтогов.Вставить("НомерСтроки", 0);
			СтруктураИтогов.Вставить("Вес", 0);
			СтруктураИтогов.Вставить("ЕстьСкидки", ЕстьСкидки);
			ПараметрыНоменклатуры = Новый Структура;
			
			Если ЕстьСкидки Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				ОбластьСтрокаРазделитель = Макет.ПолучитьОбласть("СтрокаСоСкидкойРазделитель");
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				ОбластьСтрокаРазделитель = Макет.ПолучитьОбласть("СтрокаРазделитель");
			КонецЕсли;
			
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьСтрокаСоСкидкойЗаполнено = Макет.ПолучитьОбласть("СтрокаСоСкидкойЗаполнено");
			ОбластьСтрокаСоСкидкойНеЗаполнено = Макет.ПолучитьОбласть("СтрокаСоСкидкойНеЗаполнено");
			
			Для каждого СтрокаЗапасы Из Строки Цикл
				
				Если СтрокаЗапасы.ЭтоРазделитель Тогда
					СтруктураИтогов.НомерСтроки = 0;
					ДанныеПечати.Очистить();
					ДанныеПечати.Вставить("Номенклатура", СтрокаЗапасы.ПредставлениеНоменклатуры);
					ОбластьСтрокаРазделитель.Параметры.Заполнить(СтрокаЗапасы);
					ОбластьСтрокаРазделитель.Параметры.Заполнить(ДанныеПечати);
					ТабличныйДокумент.Вывести(ОбластьСтрокаРазделитель);
					Продолжить;
				КонецЕсли;
				
				ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиКоммерческоеПредложение(СтрокаЗапасы, ДанныеПечати,
					ПараметрыНоменклатуры, СтруктураИтогов);
				
				Если СтруктураИтогов.ЕстьСкидки Тогда
					ОбластьМакета = ?(ДанныеПечати.Скидка <> 0, ОбластьСтрокаСоСкидкойЗаполнено,
						ОбластьСтрокаСоСкидкойНеЗаполнено);
				Иначе
					ОбластьМакета = ОбластьСтрока;
				КонецЕсли;
	
				ОбластьМакета.Параметры.Заполнить(СтрокаЗапасы);
				ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				// Наборы
				НаборыСервер.УчестьОформлениеСтрокиНабора(ТабличныйДокумент, ОбластьМакета, СтрокаЗапасы);
				
			КонецЦикла;
			
			ДанныеПечати.Очистить();
			ДанныеПечати.Вставить("Всего", ПечатьДокументовУНФ.ФорматСумм(СтруктураИтогов.Сумма));
			ДанныеПечати.Вставить("НДС", ПечатьДокументовУНФ.ПредставлениеЗаголовкаНДС(СтруктураИтогов.СуммаНДС,
				Шапка.СуммаВключаетНДС, Ложь));
			ДанныеПечати.Вставить("ВсегоНДС", ?(СтруктураИтогов.СуммаНДС = 0, "-",
				ПечатьДокументовУНФ.ФорматСумм(СтруктураИтогов.СуммаНДС)));
			ДанныеПечати.Вставить("ИтоговаяСтрока", ПечатьДокументовУНФ.ИтоговаяСтрока(СтруктураИтогов.Количество,
				СтруктураИтогов.Всего, Шапка.ВалютаДокумента));
			ДанныеПечати.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(СтруктураИтогов.Всего,
				Шапка.ВалютаДокумента));
			
			ОбластьМакета = Макет.ПолучитьОбласть("Итого");
			ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Если СтруктураИтогов.Вес<>0 ИЛИ Шапка.Вес<>0 Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ИтогоВес");
				Если СтруктураИтогов.Вес<>0 Тогда
					ОбластьМакета.Параметры.Вес = СтруктураИтогов.Вес;
				Иначе
					ОбластьМакета.Параметры.Вес = Шапка.Вес;
				КонецЕсли; 
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЕсли; 
			
			ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
			ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			НомерВарианта = НомерВарианта + 1;
			
		КонецЦикла;
		
		// Дополнительные условия.
		Если ЗначениеЗаполнено(Шапка.ДополнительныеУсловия) Тогда
			ОбластьМакета = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "ДополнительныеУсловия", , Ошибки);
			Если ОбластьМакета <> Неопределено Тогда
				ТабличныйДокумент.Вывести(ОбластьМакета);

				ТекстДополнительныхУсловий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Шапка.ДополнительныеУсловия,
					"ТекстУсловий");
				ЧислоСтрокТекста = СтрЧислоСтрок(ТекстДополнительныхУсловий);
				Для СчетчикСтрок = 1 По ЧислоСтрокТекста Цикл
					ДанныеПечати.Вставить("ТекстДополнительныхУсловий", СтрПолучитьСтроку(ТекстДополнительныхУсловий,
						СчетчикСтрок));
					ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати,
			Шапка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьКоммерческоеПредложение()

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - Массив - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати - СписокЗначений - значение - ссылка на объект;
//                                            представление - имя области, в которой был выведен объект (выходной параметр);
//  ПараметрыВывода - Структура - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Перем Ошибки;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "ЗаказПокупателя");
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_ЗаказПокупателя";
		ПечатнаяФорма.ПолныйПутьКМакету = "Документ.ЗаказПокупателя.ПФ_MXL_ЗаказПокупателя";
		ПечатнаяФорма.СинонимМакета = НСтр("ru ='Заказ покупателя'");
		
		СформироватьЗаказПокупателя(ПечатнаяФорма, МассивОбъектов, ОбъектыПечати, Ошибки);
		
	КонецЕсли;
	
	ВозможныеВарианты = Обработки.ПечатьСчетНаОплату.МатрицаВозможныхВариантов();
	Для каждого СтрокаТаблицы Из ВозможныеВарианты Цикл
		
		ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, Обработки.ПечатьСчетНаОплату.ИдентификаторПечатнойФормы(СтрокаТаблицы.ЧастичнаяОплата, СтрокаТаблицы.ИспользоватьФаксимиле));
		Если ПечатнаяФорма <> Неопределено Тогда
			
			ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
			ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = Обработки.ПечатьСчетНаОплату.КлючПараметровПечати();
			ПечатнаяФорма.ПолныйПутьКМакету = Обработки.ПечатьСчетНаОплату.ПолныйПутьКМакету();
			ПечатнаяФорма.СинонимМакета = Обработки.ПечатьСчетНаОплату.ПредставлениеПФ(СтрокаТаблицы.ЧастичнаяОплата, СтрокаТаблицы.ИспользоватьФаксимиле);
			
			ДанныеОбъектовПечати = УниверсальныйЗапросПоДаннымДокумента(МассивОбъектов, СтрокаТаблицы.ИспользоватьФаксимиле, Ошибки);
			Если СтрокаТаблицы.ЧастичнаяОплата Тогда
				
				Обработки.ПечатьСчетНаОплату.УчестьОсобенностиЧастичнойОплаты(ДанныеОбъектовПечати);
				
			КонецЕсли;
			
			Обработки.ПечатьСчетНаОплату.СформироватьПФ(ПечатнаяФорма, ДанныеОбъектовПечати, ОбъектыПечати, СтрокаТаблицы.ЧастичнаяОплата);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "Калькуляция");
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_Калькуляция";
		ПечатнаяФорма.ПолныйПутьКМакету = "Документ.ЗаказПокупателя.ПФ_MXL_Калькуляция";
		ПечатнаяФорма.СинонимМакета = НСтр("ru ='Калькуляция'");
		
		СформироватьКалькуляцию(ПечатнаяФорма, МассивОбъектов, ОбъектыПечати);
		
	КонецЕсли;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "СводныйОтчет");
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = СформироватьСводныйОтчетЗаказПокупателя(МассивОбъектов, ОбъектыПечати, Ошибки);
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_СводныйОтчет";
		ПечатнаяФорма.ПолныйПутьКМакету = "Документ.ЗаказПокупателя.ПФ_MXL_СводныйОтчет";
		ПечатнаяФорма.СинонимМакета = НСтр("ru ='СводныйОтчет'");
		
	КонецЕсли;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "КоммерческоеПредложение");
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_КоммерческоеПредложение";
		ПечатнаяФорма.ПолныйПутьКМакету = "Документ.ЗаказПокупателя.ПФ_MXL_КоммерческоеПредложение";
		ПечатнаяФорма.СинонимМакета = НСтр("ru ='Коммерческое предложение'");
		
		СформироватьКоммерческоеПредложение(ПечатнаяФорма, МассивОбъектов, ОбъектыПечати, Ошибки);
		
	КонецЕсли;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "ЗаказНаряд");
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаряд_ЗаказНаряд";
		ПечатнаяФорма.ПолныйПутьКМакету = "Документ.ЗаказПокупателя.ПФ_MXL_ЗаказНаряд";
		ПечатнаяФорма.СинонимМакета = НСтр("ru ='Заказ-наряд'");
		
		СформироватьЗаказНаряд(ПечатнаяФорма, МассивОбъектов, ОбъектыПечати, Ошибки);
		
	КонецЕсли;
	
	ВозможныеВарианты = Обработки.ПечатьАктаОбОказанииУслуг.МатрицаВозможныхВариантов();
	Для каждого СтрокаТаблицы Из ВозможныеВарианты Цикл
		
		ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, Обработки.ПечатьАктаОбОказанииУслуг.ИдентификаторПечатнойФормы(СтрокаТаблицы.Подробно, СтрокаТаблицы.ИспользоватьФаксимиле));
		Если ПечатнаяФорма <> Неопределено Тогда
			
			ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
			ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = Обработки.ПечатьАктаОбОказанииУслуг.КлючПараметровПечати();
			ПечатнаяФорма.ПолныйПутьКМакету = Обработки.ПечатьАктаОбОказанииУслуг.ПолныйПутьКМакету();
			ПечатнаяФорма.СинонимМакета = Обработки.ПечатьАктаОбОказанииУслуг.ПредставлениеПФ(СтрокаТаблицы.Подробно, СтрокаТаблицы.ИспользоватьФаксимиле);
			
			ДанныеОбъектовПечати = УниверсальныйЗапросПоДаннымДокумента(МассивОбъектов, СтрокаТаблицы.ИспользоватьФаксимиле, Ошибки);
			ДанныеОбъектовПечати.Колонки.Удалить("ДатаДокумента");
			ДанныеОбъектовПечати.Колонки.ДатаВыполненияРабот.Имя = "ДатаДокумента";
			
			Обработки.ПечатьАктаОбОказанииУслуг.СформироватьПФ(ПечатнаяФорма, ДанныеОбъектовПечати, ОбъектыПечати, СтрокаТаблицы.Подробно);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВозможныеВарианты = Обработки.ПечатьНакладная.МатрицаВозможныхВариантов();
	Для каждого СтрокаТаблицы Из ВозможныеВарианты Цикл
		
		ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, Обработки.ПечатьНакладная.ИдентификаторПечатнойФормы(СтрокаТаблицы.ВключаяУслуги, СтрокаТаблицы.ИспользоватьФаксимиле));
		Если ПечатнаяФорма <> Неопределено Тогда
			
			ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
			ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = Обработки.ПечатьНакладная.КлючПараметровПечати();
			ПечатнаяФорма.ПолныйПутьКМакету = Обработки.ПечатьНакладная.ПолныйПутьКМакету();
			ПечатнаяФорма.СинонимМакета = Обработки.ПечатьНакладная.ПредставлениеПФ(СтрокаТаблицы.ВключаяУслуги, СтрокаТаблицы.ИспользоватьФаксимиле);
			
			ДанныеОбъектовПечати = УниверсальныйЗапросПоДаннымДокумента(МассивОбъектов, СтрокаТаблицы.ИспользоватьФаксимиле, Ошибки);
			ДанныеОбъектовПечати.Колонки.Удалить("ДатаДокумента");
			ДанныеОбъектовПечати.Колонки.ДатаВыполненияРабот.Имя = "ДатаДокумента";
			
			Обработки.ПечатьНакладная.СформироватьПФ(ПечатнаяФорма, ДанныеОбъектовПечати, ОбъектыПечати, СтрокаТаблицы.ВключаяУслуги);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВозможныеВарианты = Обработки.ПечатьТОРГ12.МатрицаВозможныхВариантов();
	Для каждого СтрокаТаблицы Из ВозможныеВарианты Цикл
		
		ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, Обработки.ПечатьТОРГ12.ИдентификаторПечатнойФормы(СтрокаТаблицы.ВключаяУслуги, СтрокаТаблицы.ИспользоватьФаксимиле));
		Если ПечатнаяФорма <> Неопределено Тогда
			
			ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
			ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = Обработки.ПечатьТОРГ12.КлючПараметровПечати();
			ПечатнаяФорма.ПолныйПутьКМакету = Обработки.ПечатьТОРГ12.ПолныйПутьКМакету();
			ПечатнаяФорма.СинонимМакета = Обработки.ПечатьТОРГ12.ПредставлениеПФ(СтрокаТаблицы.ВключаяУслуги, СтрокаТаблицы.ИспользоватьФаксимиле);
			
			ДанныеОбъектовПечати = ДанныеДокументовРегУчет(МассивОбъектов, СтрокаТаблицы.ИспользоватьФаксимиле, Истина, Ошибки);
			Обработки.ПечатьТОРГ12.СформироватьПФ(ПечатнаяФорма, ДанныеОбъектовПечати, ОбъектыПечати, СтрокаТаблицы.ВключаяУслуги);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "БланкТоварногоНаполнения");
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = Обработки.ПечатьБланкТоварногоНаполнения.КлючПараметровПечати();
		ПечатнаяФорма.ПолныйПутьКМакету = Обработки.ПечатьБланкТоварногоНаполнения.ПолныйПутьКМакету();
		ПечатнаяФорма.СинонимМакета = Обработки.ПечатьБланкТоварногоНаполнения.ПредставлениеПФ();
		
		ДанныеОбъектовПечати = ДанныеДокументовБланкТоварногоНаполнения(МассивОбъектов);
		Обработки.ПечатьБланкТоварногоНаполнения.СформироватьПФ(ПечатнаяФорма, ДанныеОбъектовПечати, ОбъектыПечати);
		
	КонецЕсли;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "ГарантийныйТалон");
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = НоменклатураВДокументахСервер.ПечатьГарантийныйТалон(МассивОбъектов, ОбъектыПечати);
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ГарантийныйТалон";
		ПечатнаяФорма.ПолныйПутьКМакету = "ОбщийМакет.ПФ_MXL_ГарантийныйТалон";
		ПечатнаяФорма.СинонимМакета = НСтр("ru ='Гарантийный талон'");
		
	КонецЕсли;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "СводныйОтчетЗаказНаряд");
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = СформироватьСводныйОтчетЗаказНаряд(МассивОбъектов, ОбъектыПечати, Ошибки);
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаряд_СводныйОтчет";
		ПечатнаяФорма.ПолныйПутьКМакету = "Документ.ЗаказПокупателя.ПФ_MXL_СводныйОтчет";
		ПечатнаяФорма.СинонимМакета = НСтр("ru ='Сводный отчет'");
		
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("ШаблонПечатиОфисныхДокументов") И ЗначениеЗаполнено(ПараметрыПечати.ШаблонПечатиОфисныхДокументов) Тогда
		
		Для каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
			Если СтрНачинаетсяС(ПечатнаяФорма.ИмяВРЕГ, ВРег("ПечатьПоШаблонуОфисногоДокумента")) Тогда
				ПечатнаяФорма.ОфисныеДокументы = ПечатьПоШаблонуОфисногоДокумента(МассивОбъектов, ПараметрыПечати.ШаблонПечатиОфисныхДокументов);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	// параметры отправки печатных форм по электронной почте
	ЭлектроннаяПочтаУНФ.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, 
		КоллекцияПечатныхФорм);
	
КонецПроцедуры

Функция СкорректироватьИдентификаторКомандыКомплекта(ЗначениеИдентификатора)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда 
		
		ЗначениеИдентификатора = СтрЗаменить(ЗначениеИдентификатора, ",ГарантийныйТалон", "");
		
	КонецЕсли;
	
	Возврат ЗначениеИдентификатора;
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	// Общие
	//
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаказПокупателя";
	КомандаПечати.Представление = НСтр("ru = 'Заказ покупателя'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,РеквизитыПечатиЗаказПокупателя,ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,РеквизитыПечатиЗаказНаряд";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 4;
	
	ВозможныеВарианты = Обработки.ПечатьСчетНаОплату.МатрицаВозможныхВариантов();
	Для каждого СтрокаТаблицы Из ВозможныеВарианты Цикл
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = Обработки.ПечатьСчетНаОплату.ИдентификаторПечатнойФормы(СтрокаТаблицы.ЧастичнаяОплата, СтрокаТаблицы.ИспользоватьФаксимиле);
		КомандаПечати.Представление = Обработки.ПечатьСчетНаОплату.ПредставлениеПФ(СтрокаТаблицы.ЧастичнаяОплата, СтрокаТаблицы.ИспользоватьФаксимиле);
		КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,РеквизитыПечатиЗаказПокупателя,ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,РеквизитыПечатиЗаказНаряд";
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.Обработчик = "ПечатьДокументовУНФКлиент.ПредложитьЗаполнитьРеквизитыОрганизации";
		КомандаПечати.Порядок = 7;
		
		Если СтрокаТаблицы.ЧастичнаяОплата Тогда
			
			КомандаПечати.ФункциональныеОпции = "ПлатежныйКалендарь";
			
		КонецЕсли;
		
		Если СтрокаТаблицы.ИспользоватьФаксимиле Тогда
			
			КомандаПечати.МестоРазмещения = "ПодменюПечатьФаксимиле";
			КомандаПечати.Порядок = 10;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Конверт";
	КомандаПечати.Представление = НСтр("ru = 'Конверт'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаЗаказНаряда,ФормаСпискаЗаказНаряда";
	КомандаПечати.Обработчик = "ПечатьДокументовУНФКлиент.ПечатьКонверта";
	КомандаПечати.Порядок = 48;
	
	Если ПравоДоступа("Просмотр", Метаданные.Обработки.ПечатьЭтикетокИЦенников)
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЦеныНоменклатуры)
		И ПолучитьФункциональнуюОпцию("ПечатьЭтикетокИЦенников") Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ПечатьДокументовУНФКлиент.ПечатьЭтикетокИЦенниковИзДокументов";
		КомандаПечати.Идентификатор = "ПечатьЭтикетокИзЗаказаПокупателя";
		КомандаПечати.Представление = НСтр("ru = 'Печать этикеток'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.Порядок = 49;
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ПечатьДокументовУНФКлиент.ПечатьЭтикетокИЦенниковИзДокументов";
		КомандаПечати.Идентификатор = "ПечатьЦенниковИзЗаказаПокупателя";
		КомандаПечати.Представление = НСтр("ru = 'Печать ценников'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.Порядок = 50;
		
	КонецЕсли;
	
	//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	// Заказ покупателя
	//
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Калькуляция";
	КомандаПечати.Представление = НСтр("ru = 'Калькуляция'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаЗаказНаряда";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 23;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СводныйОтчет";
	КомандаПечати.Представление = НСтр("ru = 'Сводно о заказе'");
	КомандаПечати.СписокФорм = "ФормаДокумента";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 26;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КоммерческоеПредложение";
	КомандаПечати.Представление = НСтр("ru = 'Коммерческое предложение'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "КомандыПечатиКоммерческоеПредложение";
	КомандаПечати.Порядок = 99;
	
	НазначенияШаблонов = Новый Массив;
	НазначенияШаблонов.Добавить(Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагента);
	НазначенияШаблонов.Добавить(Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаЗаказ);
	ШаблоныПечатиОфисныхДокументов.ДобавитьКомандыПечати(НазначенияШаблонов, КомандыПечати, "ФормаДокумента,ФормаСписка", "КомандыПечатиДоговорКонтрагента", 99);
	
	НазначенияШаблонов = Новый Массив;
	НазначенияШаблонов.Добавить(Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.КоммерческоеПредложение);
	ШаблоныПечатиОфисныхДокументов.ДобавитьКомандыПечати(НазначенияШаблонов, КомандыПечати, "ФормаДокумента,ФормаСписка", "КомандыПечатиКоммерческоеПредложение", 99);
	
	//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	// Заказ-наряд
	//
	
	КомандаПечати = КомандыПечати.Добавить();
	ЗначениеИдентификатора = "ЗаказПокупателя,ЗаказНаряд,АктОбОказанииУслуг,АктОбОказанииУслугПодробно,Накладная,НакладнаяСУслугами,СчетНаОплату,СчетНаЧастичнуюОплату,ТОРГ12,ТОРГ12СУслугами,ГарантийныйТалон,Обработка.ПечатьСчетФактура.УниверсальныйПередаточныйДокумент";
	КомандаПечати.Идентификатор = СкорректироватьИдентификаторКомандыКомплекта(ЗначениеИдентификатора);
	КомандаПечати.Представление = ПечатьДокументовУНФ.ПредставлениеКомплектаДокументов();
	КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,РеквизитыПечатиЗаказНаряд";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаказНаряд";
	КомандаПечати.Представление = НСтр("ru = 'Заказ-наряд'");
	КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,РеквизитыПечатиЗаказНаряд";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 14;
	
	ВозможныеВарианты = Обработки.ПечатьАктаОбОказанииУслуг.МатрицаВозможныхВариантов();
	Для каждого СтрокаТаблицы Из ВозможныеВарианты Цикл
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = Обработки.ПечатьАктаОбОказанииУслуг.ИдентификаторПечатнойФормы(СтрокаТаблицы.Подробно, СтрокаТаблицы.ИспользоватьФаксимиле);
		КомандаПечати.Представление = Обработки.ПечатьАктаОбОказанииУслуг.ПредставлениеПФ(СтрокаТаблицы.Подробно, СтрокаТаблицы.ИспользоватьФаксимиле);
		КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,РеквизитыПечатиЗаказНаряд";
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.Порядок = 17;
		
		Если СтрокаТаблицы.ИспользоватьФаксимиле Тогда
			
			КомандаПечати.МестоРазмещения = "ПодменюПечатьФаксимиле";
			КомандаПечати.Порядок = 20;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВозможныеВарианты = Обработки.ПечатьНакладная.МатрицаВозможныхВариантов();
	Для каждого СтрокаТаблицы Из ВозможныеВарианты Цикл
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = Обработки.ПечатьНакладная.ИдентификаторПечатнойФормы(СтрокаТаблицы.ВключаяУслуги, СтрокаТаблицы.ИспользоватьФаксимиле);
		КомандаПечати.Представление = Обработки.ПечатьНакладная.ПредставлениеПФ(СтрокаТаблицы.ВключаяУслуги, СтрокаТаблицы.ИспользоватьФаксимиле);
		КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,РеквизитыПечатиЗаказНаряд";
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.Порядок = 23;
		
		Если СтрокаТаблицы.ИспользоватьФаксимиле Тогда
			
			КомандаПечати.МестоРазмещения = "ПодменюПечатьФаксимиле";
			КомандаПечати.Порядок = 26;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВозможныеВарианты = Обработки.ПечатьТОРГ12.МатрицаВозможныхВариантов();
	Для каждого СтрокаТаблицы Из ВозможныеВарианты Цикл
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = Обработки.ПечатьТОРГ12.ИдентификаторПечатнойФормы(СтрокаТаблицы.ВключаяУслуги, СтрокаТаблицы.ИспользоватьФаксимиле);
		КомандаПечати.Представление = Обработки.ПечатьТОРГ12.ПредставлениеПФ(СтрокаТаблицы.ВключаяУслуги, СтрокаТаблицы.ИспользоватьФаксимиле);
		КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,РеквизитыПечатиЗаказНаряд";
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.Порядок = 29;
		
		Если СтрокаТаблицы.ИспользоватьФаксимиле Тогда
			
			КомандаПечати.МестоРазмещения = "ПодменюПечатьФаксимиле";
			КомандаПечати.Порядок = КомандаПечати.Порядок + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Обработка.ПечатьСчетФактура.СчетФактура";
	КомандаПечати.Представление = Обработки.ПечатьСчетФактура.ПредставлениеПФ(Ложь, Ложь);
	КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,РеквизитыПечатиЗаказНаряд";
	КомандаПечати.ФункциональныеОпции = "ПередачаТоваровНаКомиссию,ПриемТоваровНаКомиссию,ИспользуетсяОСНО,ИспользоватьСчетаФактурыИсходящие";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 35;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Обработка.ПечатьСчетФактура.УниверсальныйПередаточныйДокумент";
	КомандаПечати.Представление = Обработки.ПечатьСчетФактура.ПредставлениеПФ(Истина, Ложь);
	КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,РеквизитыПечатиЗаказНаряд";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 35;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Обработка.ПечатьСчетФактура.УниверсальныйПередаточныйДокументФаксимиле";
	КомандаПечати.Представление = Обработки.ПечатьСчетФактура.ПредставлениеПФ(Истина, Истина);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,РеквизитыПечатиЗаказНаряд";
	КомандаПечати.МестоРазмещения = "ПодменюПечатьФаксимиле";
	КомандаПечати.Порядок = 36;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "БланкТоварногоНаполнения";
	КомандаПечати.Представление = Обработки.ПечатьБланкТоварногоНаполнения.ПредставлениеПФ();
	КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,РеквизитыПечатиЗаказНаряд";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 38;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ГарантийныйТалон";
	КомандаПечати.Представление = НСтр("ru = 'Гарантийный талон'");
	КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,РеквизитыПечатиЗаказНаряд";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ФункциональныеОпции = "ИспользоватьСерииНоменклатуры";
	КомандаПечати.Порядок = 41;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СводныйОтчетЗаказНаряд";
	КомандаПечати.Представление = НСтр("ru = 'Сводно о заказ-наряде'");
	КомандаПечати.СписокФорм = "ФормаЗаказНаряда";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 44;
	
	НазначенияШаблонов = Новый Массив;
	НазначенияШаблонов.Добавить(Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагента);
	НазначенияШаблонов.Добавить(Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаЗаказНаряд);
	ШаблоныПечатиОфисныхДокументов.ДобавитьКомандыПечати(НазначенияШаблонов, КомандыПечати, "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда", "КомандыПечатиДоговорКонтрагента", 99);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиЗаказПокупателя(СтрокаТабличнойЧасти, ДанныеПечати, ПараметрыНоменклатуры, СтруктураИтогов)
	
	ДанныеПечати.Очистить();
	
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		НомерСтроки = 0;
	Иначе
		СтруктураИтогов.НомерСтроки = СтруктураИтогов.НомерСтроки+1;
		НомерСтроки = СтруктураИтогов.НомерСтроки;
	КонецЕсли;
	ДанныеПечати.Вставить("НомерСтроки", НомерСтроки);
	
	ПараметрыНоменклатуры.Очистить();
	ПараметрыНоменклатуры.Вставить("Содержание", СтрокаТабличнойЧасти.Содержание);
	ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", СтрокаТабличнойЧасти.ПредставлениеНоменклатуры);
	ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", СтрокаТабличнойЧасти.Характеристика);
	ПараметрыНоменклатуры.Вставить("ПредставлениеАртикула", СтрокаТабличнойЧасти.Артикул);
	// Наборы
	ПараметрыНоменклатуры.Вставить("НеобходимоВыделитьКакСоставНабора", СтрокаТабличнойЧасти.НеобходимоВыделитьКакСоставНабора);
	
	ДанныеПечати.Вставить("Запас", ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры));
	ДанныеПечати.Вставить("ПредставлениеКодаНоменклатуры", ПечатьДокументовУНФ.ПредставлениеКодаНоменклатуры(СтрокаТабличнойЧасти));
	
	Если СтруктураИтогов.ЕстьСкидки Тогда
		
		ДанныеПечати.Вставить("ПредставлениеСкидки", ПечатьДокументовУНФ.ПредставлениеСкидки(СтрокаТабличнойЧасти, СтруктураИтогов));
		
	КонецЕсли;
	
	Если СтруктураИтогов.ЕстьСтавкаНольПроцентов = Ложь // Нет смысла проверять каждую строку, если уже нашли...
		И СтрокаТабличнойЧасти.Владелец().Колонки.Найти("СтавкаНДС") <> Неопределено
		И СтрокаТабличнойЧасти.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль() Тогда
		
		СтруктураИтогов.ЕстьСтавкаНольПроцентов = Истина;
		
	КонецЕсли;
	
	Если НЕ СтрокаТабличнойЧасти.ЭтоНабор Тогда
		
		СтруктураИтогов.Сумма      = СтруктураИтогов.Сумма      + СтрокаТабличнойЧасти.Сумма;
		СтруктураИтогов.СуммаНДС   = СтруктураИтогов.СуммаНДС   + СтрокаТабличнойЧасти.СуммаНДС;
		СтруктураИтогов.Всего      = СтруктураИтогов.Всего      + СтрокаТабличнойЧасти.Всего;
		СтруктураИтогов.Вес 	   = СтруктураИтогов.Вес 		+ СтрокаТабличнойЧасти.Вес;
		СтруктураИтогов.Количество = СтруктураИтогов.Количество + 1;
		СтруктураИтогов.СкидкаПоДокументу = СтруктураИтогов.СкидкаПоДокументу + СтруктураИтогов.СкидкаПоСтроке;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиЗаказНаряд(СтрокаТабличнойЧасти, ДанныеПечати, ПараметрыНоменклатуры, СтруктураИтогов)
	
	ДанныеПечати.Очистить();
	
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		НомерСтроки = 0;
	Иначе
		СтруктураИтогов.НомерСтроки = СтруктураИтогов.НомерСтроки+1;
		НомерСтроки = СтруктураИтогов.НомерСтроки;
	КонецЕсли;
	ДанныеПечати.Вставить("НомерСтроки", НомерСтроки);
	
	ПараметрыНоменклатуры.Очистить();
	ПараметрыНоменклатуры.Вставить("Содержание", СтрокаТабличнойЧасти.Содержание);
	ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", СтрокаТабличнойЧасти.Товар);
	ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", СтрокаТабличнойЧасти.Характеристика);
	ПараметрыНоменклатуры.Вставить("ПредставлениеАртикула", СтрокаТабличнойЧасти.Артикул);
	// Наборы
	ПараметрыНоменклатуры.Вставить("НеобходимоВыделитьКакСоставНабора", СтрокаТабличнойЧасти.НеобходимоВыделитьКакСоставНабора);
	
	ДанныеПечати.Вставить("Товар", ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры));
	
	Если СтруктураИтогов.ЕстьСкидки Тогда
		
		ПараметрыСтрокиТЧ = Новый Структура("Количество, Цена, Сумма, ПроцентСкидкиНаценки, СуммаАвтоматическойСкидки", 0, 0, 0, 0, 0);
		ЗаполнитьЗначенияСвойств(ПараметрыСтрокиТЧ, СтрокаТабличнойЧасти);
		
		ДанныеПечати.Вставить("ПредставлениеСкидки", ПечатьДокументовУНФ.ПредставлениеСкидки(ПараметрыСтрокиТЧ, СтруктураИтогов));
		
	КонецЕсли;
	
	Если НЕ СтрокаТабличнойЧасти.ЭтоНабор Тогда
		
		СтруктураИтогов.Сумма      = СтруктураИтогов.Сумма      + СтрокаТабличнойЧасти.Сумма;
		СтруктураИтогов.СуммаНДС   = СтруктураИтогов.СуммаНДС   + СтрокаТабличнойЧасти.СуммаНДС;
		СтруктураИтогов.Всего      = СтруктураИтогов.Всего      + СтрокаТабличнойЧасти.Всего;
		СтруктураИтогов.Количество = СтруктураИтогов.Количество + 1;
		СтруктураИтогов.СкидкаПоДокументу = СтруктураИтогов.СкидкаПоДокументу + СтруктураИтогов.СкидкаПоСтроке;
	
	КонецЕсли;
	
	ДанныеПечати.Вставить("КоличествоКратностьКоэффициент", СтрокаТабличнойЧасти.Количество);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиКоммерческоеПредложение(СтрокаТабличнойЧасти, ДанныеПечати, ПараметрыНоменклатуры, СтруктураИтогов)
	
	ДанныеПечати.Очистить();
	
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		НомерСтроки = 0;
	Иначе
		СтруктураИтогов.НомерСтроки = СтруктураИтогов.НомерСтроки+1;
		НомерСтроки = СтруктураИтогов.НомерСтроки;
	КонецЕсли;
	ДанныеПечати.Вставить("НомерСтроки", НомерСтроки);
	
	ПараметрыНоменклатуры.Очистить();
	ПараметрыНоменклатуры.Вставить("Содержание", СтрокаТабличнойЧасти.Содержание);
	ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", СтрокаТабличнойЧасти.ПредставлениеНоменклатуры);
	ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", СтрокаТабличнойЧасти.Характеристика);
	ПараметрыНоменклатуры.Вставить("ПредставлениеАртикула", СтрокаТабличнойЧасти.Артикул);
	// Наборы
	ПараметрыНоменклатуры.Вставить("НеобходимоВыделитьКакСоставНабора", СтрокаТабличнойЧасти.НеобходимоВыделитьКакСоставНабора);
	
	ДанныеПечати.Вставить("Номенклатура", ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры));
	
	Если СтруктураИтогов.ЕстьСкидки Тогда
		
		Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
			Скидка         = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
			СуммаБезСкидки = Скидка;
		ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0 И СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0 Тогда
			Скидка         = 0;
			СуммаБезСкидки = СтрокаТабличнойЧасти.Сумма;
		Иначе
			Скидка         = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена - СтрокаТабличнойЧасти.Сумма; // АвтоматическиеСкидки;
			СуммаБезСкидки = СтрокаТабличнойЧасти.Сумма + Скидка;
		КонецЕсли;
		ДанныеПечати.Вставить("Скидка", Скидка);
		ДанныеПечати.Вставить("СуммаБезСкидки", СуммаБезСкидки);
					
	КонецЕсли;
	
	Если НЕ СтрокаТабличнойЧасти.ЭтоНабор Тогда
		
		СтруктураИтогов.Сумма      = СтруктураИтогов.Сумма      + СтрокаТабличнойЧасти.Сумма;
		СтруктураИтогов.СуммаНДС   = СтруктураИтогов.СуммаНДС   + СтрокаТабличнойЧасти.СуммаНДС;
		СтруктураИтогов.Всего      = СтруктураИтогов.Всего      + СтрокаТабличнойЧасти.Всего;
		СтруктураИтогов.Количество = СтруктураИтогов.Количество + 1;
		СтруктураИтогов.Вес 	   = СтруктураИтогов.Вес + СтрокаТабличнойЧасти.Вес;
	
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьПоШаблонуОфисногоДокумента(МассивОбъектов, ШаблонПечати)
	
	ОфисныеДокументы = Новый Соответствие;
	
	Для каждого ОбъектПечати Из МассивОбъектов Цикл
		ДанныеФайла = ШаблоныПечатиОфисныхДокументов.СФормироватьДокумент(ОбъектПечати, ШаблонПечати, Новый УникальныйИдентификатор);
		ОфисныеДокументы.Вставить(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла);
	КонецЦикла;
	
	Возврат ОфисныеДокументы;
	
КонецФункции

#КонецОбласти

#Область РаботаСКалендарем
// Процедура заполняет таблицу описаний расширенного ввода записи календаря
//
// Параметры:
//  ТаблицаОписаний	 - ТаблицаЗначений	 - описание колонок см. Справочник.ЗаписиКалендаряСотрудника.ПриЗаполненииРасширенногоВводаЗаписиКалендаря()
//
Процедура ПриЗаполненииРасширенногоВводаЗаписиКалендаря(ТаблицаОписаний) Экспорт
	
	НоваяСтрока = ТаблицаОписаний.Добавить();
	НоваяСтрока.ИмяФормы = "Документ.ЗаказПокупателя.ФормаЗаказНаряда";
	НоваяСтрока.ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("ВидОперации", Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд));
	НоваяСтрока.Представление = НСтр("ru='Заказ-наряд:'");
	
КонецПроцедуры

// Функция определяет пиктограмму для элемента записи календаря
//
// Параметры:
//  Событие	 - ДокументСсылка.Событие	 - событие, для записи календаря которого подбирается картинка
// 
// Возвращаемое значение:
//  Картинка - пиктограмма записи календаря
//
Функция КартинкаЗаписиКалендаря(Источник) Экспорт
	
	Картинка = БиблиотекаКартинок.РазделРаботы;
	
	Возврат Картинка;
	
КонецФункции

// Функция определяет цвет текста для элемента записи календаря
//
// Параметры:
//  Событие	 - ДокументСсылка.Событие	 - событие, для записи календаря которого подбирается цвет
// 
// Возвращаемое значение:
//  Цвет - цвет текста записи календаря
//
Функция ЦветТекстаЗаписиКалендаря(Источник) Экспорт
	
	ЦветСостояния = Новый Цвет;

	Возврат ЦветСостояния;
	
КонецФункции

#КонецОбласти

#Область ЗаказПокупателя

Функция ТекстЗапросаИнициализироватьДанныеДокументаЗаказПокупателя()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.Договор КАК Договор,
	|	ТаблицаДокумента.Договор.ВалютаРасчетов КАК ДоговорВалютаРасчетов,
	|	ТаблицаДокумента.Договор.РасчетыВУсловныхЕдиницах КАК ДоговорРасчетыВУсловныхЕдиницах,
	|	ТаблицаДокумента.Курс КАК Курс,
	|	ТаблицаДокумента.Кратность КАК Кратность,
	|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ТаблицаДокумента.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
	|	ТаблицаДокумента.Дата КАК Дата,
	|	ТаблицаДокумента.СпособЗачетаПредоплаты КАК СпособЗачетаПредоплаты,
	|	ТаблицаДокумента.Дата КАК Период,
	|	ТаблицаДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.ВидОперации КАК ВидОперации,
	|	ТаблицаДокумента.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ТаблицаДокумента.ВариантЗавершения КАК ВариантЗавершения,
	|	ТаблицаДокумента.ОжидаетсяВыборВариантаКП КАК ОжидаетсяВыборВариантаКП,
	|	ТаблицаДокумента.КалькуляцияРассчитана КАК КалькуляцияРассчитана,
	|	ТаблицаДокумента.ОсновнойВариантКП КАК ОсновнойВариантКП,
	|	ТаблицаДокумента.СтруктурнаяЕдиницаПродажи КАК СтруктурнаяЕдиницаПродажи,
	|	ТаблицаДокумента.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ТаблицаДокумента.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	ТаблицаДокумента.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|	ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПоставщиком КАК СчетУчетаРасчетовСПоставщиком,
	|	ТаблицаДокумента.УчетПотребностиПоСкладам КАК УчетПотребностиПоСкладам,
	|	ТаблицаДокумента.УчетПотребностиПоЗаказам КАК УчетПотребностиПоЗаказам
	|ПОМЕСТИТЬ ВременнаяТаблицаШапка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВременнаяТаблицаКурсыВалютСрезПоследних
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаУчета, &ВалютаНациональная)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНарядТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаказНарядТовары.Ссылка КАК Документ,
	|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаШапка.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ВременнаяТаблицаШапка.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ВременнаяТаблицаШапка.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ВременнаяТаблицаШапка.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	ВременнаяТаблицаШапка.Договор КАК Договор,
	|	ВременнаяТаблицаШапка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ЗаказНарядТовары.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиница,
	|	ЗаказНарядТовары.Номенклатура.СчетУчетаЗапасов КАК СчетУчета,
	|	ЗаказНарядТовары.Номенклатура.СчетУчетаЗатрат КАК СчетУчетаЗатрат,
	|	ЗаказНарядТовары.Ссылка КАК Заказ,
	|	ЗаказНарядТовары.Ссылка КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНарядТовары.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ЗаказНарядТовары.Количество * ВЫРАЗИТЬ(ЗаказНарядТовары.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|		ИНАЧЕ ЗаказНарядТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ЗаказНарядТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВременнаяТаблицаШапка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ВременнаяТаблицаШапка.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА ЗаказНарядТовары.СуммаНДС * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|					ИНАЧЕ ЗаказНарядТовары.СуммаНДС * ВременнаяТаблицаШапка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ВременнаяТаблицаШапка.Кратность)
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВременнаяТаблицаШапка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ЗаказНарядТовары.СуммаНДС * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ЗаказНарядТовары.СуммаНДС * ВременнаяТаблицаШапка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ВременнаяТаблицаШапка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСЗакупкиПродажи,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВременнаяТаблицаШапка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ЗаказНарядТовары.Всего * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ЗаказНарядТовары.Всего * ВременнаяТаблицаШапка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ВременнаяТаблицаШапка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВременнаяТаблицаШапка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ВременнаяТаблицаШапка.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА ЗаказНарядТовары.СуммаНДС * КурсыРегВалюты.Курс * ВременнаяТаблицаШапка.Кратность / (ВременнаяТаблицаШапка.Курс * КурсыРегВалюты.Кратность)
	|					ИНАЧЕ ЗаказНарядТовары.СуммаНДС
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСВал,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВременнаяТаблицаШапка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ВременнаяТаблицаШапка.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА ЗаказНарядТовары.СуммаНДС
	|					ИНАЧЕ ЗаказНарядТовары.СуммаНДС * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСРег,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВременнаяТаблицаШапка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ЗаказНарядТовары.Всего * КурсыРегВалюты.Курс * ВременнаяТаблицаШапка.Кратность / (ВременнаяТаблицаШапка.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ЗаказНарядТовары.Всего
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаВал,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВременнаяТаблицаШапка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ЗаказНарядТовары.Всего
	|			ИНАЧЕ ЗаказНарядТовары.Всего * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРег,
	|	ЗаказНарядТовары.Всего КАК СуммаРасчетовПринятыеПереданные,
	|	ВременнаяТаблицаШапка.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|	ВременнаяТаблицаШапка.СчетУчетаРасчетовСПоставщиком КАК СчетУчетаРасчетовСПоставщиком,
	|	ВременнаяТаблицаШапка.ДоговорВалютаРасчетов КАК ВалютаРасчетов,
	|	ВременнаяТаблицаШапка.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ВременнаяТаблицаШапка.ВариантЗавершения КАК ВариантЗавершения,
	|	ЗаказНарядТовары.СуммаНДС КАК СуммаНДСВалютаДокумента,
	|	ЗаказНарядТовары.Всего КАК ВсегоВалютаДокумента,
	|	ЗаказНарядТовары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Запасы КАК ЗаказНарядТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыУпрВалюты
	|			ПО (КурсыУпрВалюты.Валюта = &ВалютаУчета)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыРегВалюты
	|			ПО (КурсыРегВалюты.Валюта = &ВалютаНациональная)
	|		ПО ВременнаяТаблицаШапка.Ссылка = ЗаказНарядТовары.Ссылка
	|ГДЕ
	|	ЗаказНарядТовары.Ссылка = &Ссылка
	|	И ВременнаяТаблицаШапка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу)
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	ТаблицаДокумента.Ссылка.Договор КАК Договор,
	|	ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	НЕОПРЕДЕЛЕНО КАК Заказ,
	|	ТаблицаДокумента.Ссылка.ДокументОснование КАК ДокументОснование,
	|	ТаблицаДокумента.Документ КАК Документ,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам
	|				ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.Взаимозачет)
	|				ИЛИ ТаблицаДокумента.ОплатаСертификатом
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей)
	|		ИНАЧЕ ТаблицаДокумента.Документ.Статья
	|	КОНЕЦ КАК Статья,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам
	|				И НЕ ТаблицаДокумента.ОплатаСертификатом
	|			ТОГДА ТаблицаДокумента.Документ.Дата
	|		ИНАЧЕ ТаблицаДокумента.Ссылка.Дата
	|	КОНЕЦ КАК ДокументДата,
	|	ВЫБОР
	|		КОГДА КонстантаВалютаУчета.Значение = &ВалютаРасчетов
	|			ТОГДА ТаблицаДокумента.СуммаРасчетов
	|		КОГДА КонстантаВалютаУчета.Значение = КонстантаНациональнаяВалюта.Значение
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.СуммаРасчетов * ТаблицаДокумента.Курс / ТаблицаДокумента.Кратность КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДокумента.СуммаРасчетов * ТаблицаДокумента.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * ТаблицаДокумента.Кратность) КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК Сумма,
	|	ТаблицаДокумента.СуммаРасчетов КАК СуммаВал,
	|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Документ.Дата, ДЕНЬ) КАК ДатаПлатежа,
	|	ТаблицаДокумента.Курс КАК Курс,
	|	ТаблицаДокумента.Кратность КАК Кратность,
	|	ВременнаяТаблицаШапка.ДоговорРасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.СуммаРасчетов * ТаблицаДокумента.Курс / ТаблицаДокумента.Кратность КАК ЧИСЛО(15, 2)) КАК СуммаРубПоКурсуАванса,
	|	ТаблицаДокумента.СуммаПлатежа КАК СуммаПлатежа,
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.Ссылка.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ТаблицаДокумента.Ссылка.Дата КАК Дата,
	|	ТаблицаДокумента.СуммаРасчетов КАК СуммаРасчетов
	|ПОМЕСТИТЬ ВременнаяТаблицаПредоплата
	|ИЗ
	|	Документ.ЗаказПокупателя.Предоплата КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						КонстантаВалютаУчета.Значение
	|					ИЗ
	|						Константа.ВалютаУчета КАК КонстантаВалютаУчета)) КАК КурсыВалютУчетаСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта = &ВалютаДокумента) КАК КурсыВалютДокументаСрезПоследних
	|		ПО (ИСТИНА),
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка,
	|	Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта,
	|	Константа.ВалютаУчета КАК КонстантаВалютаУчета
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ИнициализироватьДанныеДокументаЗаказПокупателя(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства, ДокументОбъектЗаказПокупателя) 

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаИнициализироватьДанныеДокументаЗаказПокупателя();
	
	ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(ДокументСсылкаЗаказПокупателя, Запрос.МенеджерВременныхТаблиц, Истина);
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПокупателя);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии",  СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("РезервированиеЗапасов", НСтр("ru = 'Резервирование запасов'"));
	Запрос.УстановитьПараметр("ИспользоватьЭтапыПроизводства",  СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьЭтапыПроизводства);
	Запрос.УстановитьПараметр("ИспользоватьРезервирование",  СтруктураДополнительныеСвойства.УчетнаяПолитика.РезервированиеЗапасов);
	
	Запрос.УстановитьПараметр("ВалютаУчета", СтруктураДополнительныеСвойства.ВалютаУчета);
	Запрос.УстановитьПараметр("ВалютаНациональная", СтруктураДополнительныеСвойства.НациональнаяВалюта);
	Запрос.УстановитьПараметр("ВалютаРасчетов", СтруктураДополнительныеСвойства.Договор.ВалютаРасчетов);
	Запрос.УстановитьПараметр("ВалютаДокумента", ДокументСсылкаЗаказПокупателя.ВалютаДокумента);
	
	МассивРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	СформироватьТаблицаЗаказыПокупателейЗаказПокупателя(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПотребностьВЗапасахЗаказПокупателя(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаГрафикДвиженияЗапасовЗаказПокупателя(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаРазмещениеЗаказовЗаказПокупателя(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыЗаказПокупателя(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходыПоЗаказамПрогнозЗаказПокупателя(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЭтапыПроизводстваЗаказПокупателя(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыпускПродукции", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходы", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыКассовыйМетод", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыНераспределенные", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыОтложенные", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыНаСкладах", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыКРасходуСоСкладов", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыИАгентскиеУслугиПринятые", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаНачисленияИУдержания", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПерсоналом", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажи", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаУправленческий", Новый ТаблицаЗначений);
	
	// ДисконтныеКарты
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнымКартам", Новый ТаблицаЗначений);
	// АвтоматическиеСкидки
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПредоставленныеСкидки", Новый ТаблицаЗначений);
	// Эквайринг
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыКассовыйМетодЭквайринг", Новый ТаблицаЗначений);
	
	// Серии номенклатуры - только для Заказ-наряда
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатуры", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыГарантии", Новый ТаблицаЗначений);
	
	// Подарочные сертификаты
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПодарочныеСертификаты", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаПодарочнымиСертификатами", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерииНоменклатуры", Новый ТаблицаЗначений);
	
	СформироватьТаблицаПлатежныйКалендарь(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОплатаСчетовИЗаказовЗаказПокупателя(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаРасчетыСПокупателямиЗаказПокупателя(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства, ДокументОбъектЗаказПокупателя);
	
	// Суммы документов регламентированный учет
	СформироватьТаблицаСуммыДокументовРегламентированныйУчет(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаРезервыТоваровОрганизацийЗаказПокупателя(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	
КонецПроцедуры

Процедура СформироватьТаблицаЗаказыПокупателейЗаказПокупателя(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтроки,
	|	Шапка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	Шапка.Ссылка КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА Шапка.УчетПотребностиПоСкладам
	|				И ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ЗаказПокупателяЗапасы.СтруктурнаяЕдиницаРезерв
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказПокупателяЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.Коэффициент КАК Количество,
	|	ЗаказПокупателяЗапасы.ДатаОтгрузки КАК ДатаОтгрузки
	|ИЗ
	|	ВременнаяТаблицаШапка КАК Шапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы
	|		ПО Шапка.Ссылка = ЗаказПокупателяЗапасы.Ссылка
	|ГДЕ
	|	Шапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И НЕ Шапка.ОжидаетсяВыборВариантаКП
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказыПокупателей", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура СформироватьТаблицаПотребностьВЗапасахЗаказПокупателя(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателяМатериалы.НомерСтроки КАК НомерСтроки,
	|	Шапка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка) КАК Склад,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Поступление) КАК ТипДвижения,
	|	Шапка.Ссылка КАК ЗаказПокупателя,
	|	ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка) КАК ЗаказНаПроизводство,
	|	ЗаказПокупателяМатериалы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказПокупателяМатериалы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ЗаказПокупателяМатериалы.Количество * ВЫРАЗИТЬ(ЗаказПокупателяМатериалы.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|		ИНАЧЕ ЗаказПокупателяМатериалы.Количество
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	ВременнаяТаблицаШапка КАК Шапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.МатериалыЗаказчика КАК ЗаказПокупателяМатериалы
	|		ПО Шапка.Ссылка = ЗаказПокупателяМатериалы.Ссылка
	|ГДЕ
	|	Шапка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку)
	|	И Шапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И НЕ Шапка.ОжидаетсяВыборВариантаКП
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПотребностьВЗапасах", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура СформироватьТаблицаГрафикДвиженияЗапасовЗаказПокупателя(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗаказПокупателяЗапасы.ДатаОтгрузки КАК Период,
	|	&Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Шапка.УчетПотребностиПоСкладам
	|				И ЗаказПокупателяЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ЗаказПокупателяЗапасы.СтруктурнаяЕдиницаРезерв
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка) КАК ТипДвижения,
	|	Шапка.Ссылка КАК Заказ,
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказПокупателяЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.Коэффициент КАК Количество
	|ИЗ
	|	ВременнаяТаблицаШапка КАК Шапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы
	|		ПО Шапка.Ссылка = ЗаказПокупателяЗапасы.Ссылка
	|ГДЕ
	|	Шапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И НЕ Шапка.ОжидаетсяВыборВариантаКП
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ЗаказПокупателяМатериалы.НомерСтроки,
	|	ЗаказПокупателяМатериалы.ДатаПоступления,
	|	&Организация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Поступление),
	|	Шапка.Ссылка,
	|	ЗаказПокупателяМатериалы.Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказПокупателяМатериалы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ЗаказПокупателяМатериалы.Количество * ВЫРАЗИТЬ(ЗаказПокупателяМатериалы.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|		ИНАЧЕ ЗаказПокупателяМатериалы.Количество
	|	КОНЕЦ
	|ИЗ
	|	ВременнаяТаблицаШапка КАК Шапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.МатериалыЗаказчика КАК ЗаказПокупателяМатериалы
	|		ПО Шапка.Ссылка = ЗаказПокупателяМатериалы.Ссылка
	|ГДЕ
	|	Шапка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку)
	|	И Шапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И НЕ Шапка.ОжидаетсяВыборВариантаКП
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаГрафикДвиженияЗапасов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура СформироватьТаблицаРазмещениеЗаказовЗаказПокупателя(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателяМатериалы.НомерСтроки КАК НоменСтроки,
	|	Шапка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	Шапка.Ссылка КАК ЗаказПокупателя,
	|	ЗаказПокупателяМатериалы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказПокупателяМатериалы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ЗаказПокупателяМатериалы.Ссылка КАК ИсточникОбеспечения,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ЗаказПокупателяМатериалы.Количество * ВЫРАЗИТЬ(ЗаказПокупателяМатериалы.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|		ИНАЧЕ ЗаказПокупателяМатериалы.Количество
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	ВременнаяТаблицаШапка КАК Шапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.МатериалыЗаказчика КАК ЗаказПокупателяМатериалы
	|		ПО Шапка.Ссылка = ЗаказПокупателяМатериалы.Ссылка
	|ГДЕ
	|	Шапка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку)
	|	И Шапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И НЕ Шапка.ОжидаетсяВыборВариантаКП
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПокупателяМатериалы.НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРазмещениеЗаказов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура СформироватьТаблицаЗапасыЗаказПокупателя(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии",  СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("РезервированиеЗапасов", НСтр("ru = 'Резервирование запасов'"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	Шапка.Дата КАК Период,
	|	Шапка.Контрагент КАК Контрагент,
	|	&Организация КАК Организация,
	|	ЗаказПокупателяЗапасы.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.СтруктурнаяЕдиницаРезерв.ОрдерныйСклад
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрдерныйСклад,
	|	ЗаказПокупателяЗапасы.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЗаказПокупателяЗапасы.Номенклатура.СчетУчетаЗапасов КАК СчетУчета,
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказПокупателяЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ЗаказПокупателяЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя,
	|	Шапка.Ссылка КАК КоррЗаказПокупателя,
	|	ЗаказПокупателяЗапасы.Резерв * ЗаказПокупателяЗапасы.Коэффициент КАК Количество,
	|	0 КАК Сумма,
	|	&РезервированиеЗапасов КАК СодержаниеПроводки
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	ВременнаяТаблицаШапка КАК Шапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы
	|		ПО Шапка.Ссылка = ЗаказПокупателяЗапасы.Ссылка
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Резерв > 0
	|	И Шапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И НЕ Шапка.ОжидаетсяВыборВариантаКП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.СчетУчета КАК КоррСчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Номенклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Характеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Партия КАК КоррПартия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.КоррЗаказПокупателя КАК КоррЗаказПокупателя,
	|	ТаблицаЗапасы.СодержаниеПроводки КАК СодержаниеПроводки,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Сумма) КАК Сумма,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость,
	|	ТаблицаЗапасы.ТипНоменклатуры КАК ТипНоменклатуры
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.КоррЗаказПокупателя,
	|	ТаблицаЗапасы.СодержаниеПроводки,
	|	ТаблицаЗапасы.ТипНоменклатуры,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", РезультатЗапроса.Выгрузить());
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;

	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ПОМЕСТИТЬ втЗапасы
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК втТаблицаЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(&МоментКонтроля, ) КАК ЗапасыОстатки
	|		ПО ЗапасыОстатки.Организация = втТаблицаЗапасы.Организация
	|			И ЗапасыОстатки.СтруктурнаяЕдиница = втТаблицаЗапасы.СтруктурнаяЕдиница
	|			И ЗапасыОстатки.СчетУчета = втТаблицаЗапасы.СчетУчета
	|			И ЗапасыОстатки.Номенклатура = втТаблицаЗапасы.Номенклатура
	|			И ЗапасыОстатки.Характеристика = втТаблицаЗапасы.Характеристика
	|			И ЗапасыОстатки.Партия = втТаблицаЗапасы.Партия
	|			И (ЗапасыОстатки.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДвиженияДокументаЗапасы.Организация,
	|	ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|	ДвиженияДокументаЗапасы.СчетУчета,
	|	ДвиженияДокументаЗапасы.Номенклатура,
	|	ДвиженияДокументаЗапасы.Характеристика,
	|	ДвиженияДокументаЗапасы.Партия,
	|	ВЫБОР
	|		КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|		ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|ГДЕ
	|	ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|	И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля
	|	И ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗапасы.Организация КАК Организация,
	|	втЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	втЗапасы.СчетУчета КАК СчетУчета,
	|	втЗапасы.Номенклатура КАК Номенклатура,
	|	втЗапасы.Характеристика КАК Характеристика,
	|	втЗапасы.Партия КАК Партия,
	|	СУММА(втЗапасы.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(втЗапасы.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	втЗапасы КАК втЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗапасы.Организация,
	|	втЗапасы.СтруктурнаяЕдиница,
	|	втЗапасы.СчетУчета,
	|	втЗапасы.Номенклатура,
	|	втЗапасы.Характеристика,
	|	втЗапасы.Партия";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПокупателя);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапасыОстатки = РезультатЗапроса.Выгрузить();
	ТаблицаЗапасыОстатки.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия");
	
	ВременнаяТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.СкопироватьКолонки();

	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы[н];
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
		
		КоличествоТребуетсяРезерв = СтрокаТаблицаЗапасы.Количество;
		
		Если КоличествоТребуетсяРезерв > 0 Тогда
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяРезерв Тогда

				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяРезерв / КоличествоОстаток , 2, 1);

				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяРезерв;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;

			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяРезерв Тогда

				СуммаКСписанию = СуммаОстаток;

				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;

			Иначе
				СуммаКСписанию = 0;	
			КонецЕсли;
	
			// Расход.
			СтрокаТаблицыРасход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяРезерв;
			СтрокаТаблицыРасход.ЗаказПокупателя = Неопределено;
			
			// Приход
			Если Окр(СуммаКСписанию, 2, 1) <> 0 ИЛИ КоличествоТребуетсяРезерв > 0 Тогда
				
				СтрокаТаблицыПриход = ВременнаяТаблицаЗапасы.Добавить();
				ПроизводствоСервер.ЗаполнитьДвижениеЗапасыЗеркально(СтрокаТаблицыПриход, СтрокаТаблицыРасход);
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы = ВременнаяТаблицаЗапасы;
	
КонецПроцедуры

Процедура СформироватьТаблицаДоходыИРасходыПоЗаказамПрогнозЗаказПокупателя(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	0 КАК НомерСтроки,
	|	Шапка.Дата КАК Период,
	|	Шапка.Ссылка КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяКалькуляция.Номенклатура ССЫЛКА ПланСчетов.Управленческий
	|			ТОГДА ЗаказПокупателяКалькуляция.Номенклатура
	|		ИНАЧЕ ЗаказПокупателяКалькуляция.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяКалькуляция.НоменклатураИзделие <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяКалькуляция.НоменклатураИзделие
	|		КОГДА ЗаказПокупателяКалькуляция.Номенклатура ССЫЛКА ПланСчетов.Управленческий
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЗаказПокупателяКалькуляция.Номенклатура
	|	КОНЕЦ КАК Аналитика,
	|	0 КАК СуммаДоходов,
	|	СУММА(ЗаказПокупателяКалькуляция.Себестоимость) КАК СуммаРасходов,
	|	&Организация КАК Организация,
	|	Шапка.СтруктурнаяЕдиницаПродажи КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяКалькуляция.НоменклатураИзделие <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяКалькуляция.НоменклатураИзделие.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности
	|ИЗ
	|	ВременнаяТаблицаШапка КАК Шапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Калькуляция КАК ЗаказПокупателяКалькуляция
	|		ПО Шапка.Ссылка = ЗаказПокупателяКалькуляция.Ссылка
	|ГДЕ
	|	Шапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И НЕ Шапка.ОжидаетсяВыборВариантаКП
	|	И Шапка.КалькуляцияРассчитана
	|	И Шапка.ОсновнойВариантКП = ЗаказПокупателяКалькуляция.НомерВариантаКП
	|	И ЗаказПокупателяКалькуляция.Себестоимость <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Шапка.Дата,
	|	Шапка.Ссылка,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяКалькуляция.Номенклатура ССЫЛКА ПланСчетов.Управленческий
	|			ТОГДА ЗаказПокупателяКалькуляция.Номенклатура
	|		ИНАЧЕ ЗаказПокупателяКалькуляция.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяКалькуляция.НоменклатураИзделие <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяКалькуляция.НоменклатураИзделие
	|		КОГДА ЗаказПокупателяКалькуляция.Номенклатура ССЫЛКА ПланСчетов.Управленческий
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЗаказПокупателяКалькуляция.Номенклатура
	|	КОНЕЦ,
	|	Шапка.СтруктурнаяЕдиницаПродажи,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяКалькуляция.НоменклатураИзделие <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяКалькуляция.НоменклатураИзделие.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.НомерСтроки,
	|	Шапка.Дата,
	|	Шапка.Ссылка,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ВыручкаОтПродаж),
	|	ЗаказПокупателяЗапасы.Номенклатура,
	|	ЗаказПокупателяЗапасы.Всего,
	|	0,
	|	&Организация,
	|	Шапка.СтруктурнаяЕдиницаПродажи,
	|	ЗаказПокупателяЗапасы.Номенклатура.НаправлениеДеятельности
	|ИЗ
	|	ВременнаяТаблицаШапка КАК Шапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы
	|		ПО Шапка.Ссылка = ЗаказПокупателяЗапасы.Ссылка
	|ГДЕ
	|	Шапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И Шапка.ОжидаетсяВыборВариантаКП
	|	И Шапка.КалькуляцияРассчитана";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыПоЗаказамПрогноз", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура СформироватьТаблицаЭтапыПроизводстваЗаказПокупателя(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ИспользоватьЭтапыПроизводства",  СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьЭтапыПроизводства);
	Запрос.УстановитьПараметр("ИспользоватьРезервирование",  СтруктураДополнительныеСвойства.УчетнаяПолитика.РезервированиеЗапасов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ЗаказПокупателяЗапасы.Ссылка КАК Заказ,
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ЗаказПокупателяЗапасы.Спецификация КАК Спецификация,
	|	ЗаказПокупателяЗапасы.Партия КАК Партия,
	|	ЕСТЬNULL(ВидыПроизводстваЭтапы.Этап, ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ЗавершениеПроизводства)) КАК Этап,
	|	(ЗаказПокупателяЗапасы.Количество - ЗаказПокупателяЗапасы.Резерв) * ЗаказПокупателяЗапасы.Коэффициент КАК КоличествоПлан,
	|	0 КАК КоличествоФакт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка) КАК СтруктурнаяЕдиница
	|ИЗ
	|	ВТЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Спецификации КАК Спецификации
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПроизводства.Этапы КАК ВидыПроизводстваЭтапы
	|			ПО Спецификации.ВидПроизводства = ВидыПроизводстваЭтапы.Ссылка
	|		ПО ЗаказПокупателяЗапасы.Спецификация = Спецификации.Ссылка
	|ГДЕ
	|	&ИспользоватьЭтапыПроизводства
	|	И &ИспользоватьРезервирование
	|	И ЗаказПокупателяЗапасы.Спецификация <> ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
	|	И ЗаказПокупателяЗапасы.Количество > ЗаказПокупателяЗапасы.Резерв";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЭтапыПроизводства", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура СформироватьТаблицаРасчетыСПокупателямиЗаказПокупателя(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства, ДокументОбъектЗаказПокупателя)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Если СтруктураДополнительныеСвойства.ДляПроведения.ВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу
		ИЛИ НЕ ДокументСсылкаЗаказПокупателя.Контрагент.ВестиРасчетыПоЗаказам
		ИЛИ ДокументСсылкаЗаказПокупателя.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен Тогда
		РасчетыПроведениеДокументов.СформироватьПустуюВременнуюТаблицуРасчетов(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства, Запрос.Параметры);
	Иначе
		РасчетыПроведениеДокументов.СформироватьДвиженияПоВзаиморасчетам(СтруктураДополнительныеСвойства, ДокументСсылкаЗаказПокупателя);
	КонецЕсли;
	
	НомерЗапроса = 0;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	ВременнаяТаблицаРасчетыСПокупателями КАК ТаблицаДокумента";
	
	// Блокировку не выполняем, т.к. курсовые разницы здесь рассчитывать не будем.
	МассивРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПокупателями", МассивРезультатов[НомерЗапроса].Выгрузить());
	
КонецПроцедуры

Процедура СформироватьТаблицаРезервыТоваровОрганизацийЗаказПокупателя(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Если Не ПолучитьФункциональнуюОпцию("ПередачаТоваровМеждуОрганизациями") Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРезервыТоваровОрганизаций", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасыНаСкладах.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасыНаСкладах.Период КАК Период,
	|	ТаблицаЗапасыНаСкладах.Организация КАК Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия КАК Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка) КАК Ячейка,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка) КАК НомерГТД,
	|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК СтранаПроисхождения,
	|	ВременнаяТаблицаШапка.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ТаблицаЗапасыНаСкладах.Количество КАК Количество
	|ПОМЕСТИТЬ ЗапасыДляРезервовТоваровОрганизаций
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыНаСкладах,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	НЕ ТаблицаЗапасыНаСкладах.ОрдерныйСклад
	|	И (ТаблицаЗапасыНаСкладах.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ИЛИ ТаблицаЗапасыНаСкладах.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))";
	Запрос.Выполнить();
	
	ИнтеркампаниСервер.СформироватьТаблицаРезервыТоваровОрганизаций(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	
КонецПроцедуры

Процедура СформироватьТаблицаОплатаСчетовИЗаказовЗаказПокупателя(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПокупателя);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка КАК СчетНаОплату,
	|	ТаблицаДокумента.СуммаДокумента КАК Сумма,
	|	0 КАК СуммаАванса,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОплаты
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Контрагент.ВестиРасчетыПоЗаказам
	|	И ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И ТаблицаДокумента.СуммаДокумента <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателяПредоплата.Ссылка.Дата,
	|	&Организация,
	|	ЗаказПокупателяПредоплата.Ссылка,
	|	0,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяПредоплата.Ссылка.ВалютаДокумента = ЗаказПокупателяПредоплата.Ссылка.Договор.ВалютаРасчетов
	|			ТОГДА ЗаказПокупателяПредоплата.СуммаРасчетов
	|		ИНАЧЕ ЗаказПокупателяПредоплата.СуммаРасчетов * ВЫБОР
	|				КОГДА ЗаказПокупателяПредоплата.Ссылка.Курс = 0
	|					ТОГДА 1
	|				ИНАЧЕ ЗаказПокупателяПредоплата.Ссылка.Курс
	|			КОНЕЦ / ВЫБОР
	|				КОГДА ЗаказПокупателяПредоплата.Ссылка.Кратность = 0
	|					ТОГДА 1
	|				ИНАЧЕ ЗаказПокупателяПредоплата.Ссылка.Кратность
	|			КОНЕЦ * ВЫБОР
	|				КОГДА ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1) = 0
	|					ТОГДА 1
	|				ИНАЧЕ КурсыВалютСрезПоследних.Кратность
	|			КОНЕЦ / ВЫБОР
	|				КОГДА ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) = 0
	|					ТОГДА 1
	|				ИНАЧЕ КурсыВалютСрезПоследних.Курс
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ЗаказПокупателяПредоплата.Документ
	|ИЗ
	|	Документ.ЗаказПокупателя.Предоплата КАК ЗаказПокупателяПредоплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютСрезПоследних
	|		ПО ЗаказПокупателяПредоплата.Ссылка.ВалютаДокумента = КурсыВалютСрезПоследних.Валюта
	|ГДЕ
	|	ЗаказПокупателяПредоплата.Ссылка.Контрагент.ВестиРасчетыПоЗаказам
	|	И ЗаказПокупателяПредоплата.Ссылка = &Ссылка
	|	И ЗаказПокупателяПредоплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу)
	|	И ЗаказПокупателяПредоплата.Ссылка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаСчетовИЗаказов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаОплатаСчетовИЗаказов()

#КонецОбласти 

#Область ЗаказНаряд

Функция ТекстЗапросаИнициализироватьДанныеДокументаЗаказНаряд()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаказНаряд.Договор.ЭтоДоговорОбслуживания КАК ЭтоДоговорОбслуживания,
	|	ВЫБОР
	|		КОГДА ЗаказНаряд.Договор.ЭтоДоговорОбслуживания
	|				И ЗаказНаряд.Договор.ДоговорОбслуживанияНаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВестиУчетРасходовПоДоговорамОбслуживания,
	|	ЗаказНаряд.Договор.ДоговорОбслуживанияНаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВидыЗаказНарядовПорядокСостояний.НомерСтроки >= ВЫРАЗИТЬ(ЗаказНаряд.ВидЗаказа КАК Справочник.ВидыЗаказНарядов).НомерСостоянияВыполнения КАК ЭтоСостояниеВыполненияЗаказНаряда,
	|	ЗаказНаряд.ВариантЗавершения КАК ВариантЗавершения,
	|	ЗаказНаряд.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|	ЗаказНаряд.СпособЗачетаПредоплаты КАК СпособЗачетаПредоплаты,
	|	ЗаказНаряд.Ссылка КАК Ссылка,
	|	ЗаказНаряд.Дата КАК Период,
	|	ЗаказНаряд.Контрагент КАК Контрагент,
	|	ЗаказНаряд.Договор КАК Договор,
	|	ЗаказНаряд.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗаказНаряд.Дата КАК Дата,
	|	ЗаказНаряд.Договор.ВалютаРасчетов КАК ДоговорВалютаРасчетов,
	|	ЗаказНаряд.ВидОперации КАК ВидОперации,
	|	ЗаказНаряд.Договор.РасчетыВУсловныхЕдиницах КАК ДоговорРасчетыВУсловныхЕдиницах,
	|	ЗаказНаряд.Курс КАК Курс,
	|	ЗаказНаряд.Кратность КАК Кратность,
	|	ЗаказНаряд.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗаказНаряд.ДокументОснование КАК ДокументОснование,
	|	ЗаказНаряд.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ЗаказНаряд.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ЗаказНаряд.Финиш КАК Финиш,
	|	ЗаказНаряд.УчетПотребностиПоСкладам КАК УчетПотребностиПоСкладам,
	|	ЗаказНаряд.УчетПотребностиПоЗаказам КАК УчетПотребностиПоЗаказам
	|ПОМЕСТИТЬ ВременнаяТаблицаШапка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказНаряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЗаказНарядов.ПорядокСостояний КАК ВидыЗаказНарядовПорядокСостояний
	|		ПО ЗаказНаряд.ВидЗаказа = ВидыЗаказНарядовПорядокСостояний.Ссылка
	|			И ЗаказНаряд.СостояниеЗаказа = ВидыЗаказНарядовПорядокСостояний.Состояние
	|ГДЕ
	|	ЗаказНаряд.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВременнаяТаблицаКурсыВалютСрезПоследних
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаУчета, &ВалютаНациональная)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНарядРаботы.НомерСтроки КАК НомерСтроки,
	|	ЗаказНарядРаботы.Ссылка.Дата КАК Период,
	|	ЗаказНарядРаботы.Ссылка.Финиш КАК Финиш,
	|	&Организация КАК Организация,
	|	ЗаказНарядРаботы.Ссылка.СтруктурнаяЕдиницаПродажи КАК СтруктурнаяЕдиница,
	|	ЗаказНарядРаботы.Ссылка.Ответственный КАК Ответственный,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ЗаказНарядРаботы.Номенклатура.СчетУчетаЗатрат КАК СчетУчета,
	|	ЗаказНарядРаботы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказНарядРаботы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ЗаказНарядРаботы.НоменклатураНабора КАК НоменклатураНабора,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказНарядРаботы.ХарактеристикаНабора
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК ХарактеристикаНабора,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК Партия,
	|	ЗаказНарядРаботы.Ссылка КАК ЗаказПокупателя,
	|	ЗаказНарядРаботы.Ссылка КАК Документ,
	|	ЗаказНарядРаботы.Ссылка.Контрагент КАК Контрагент,
	|	ЗаказНарядРаботы.Ссылка.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ЗаказНарядРаботы.Ссылка.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ЗаказНарядРаботы.Ссылка.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ЗаказНарядРаботы.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	ЗаказНарядРаботы.Ссылка.Контрагент.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|	ЗаказНарядРаботы.Ссылка.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ЗаказНарядРаботы.Ссылка.Договор КАК Договор,
	|	ЗаказНарядРаботы.Ссылка.СтруктурнаяЕдиницаПродажи КАК ПодразделениеПродажи,
	|	ЗаказНарядРаботы.Ссылка.КалькуляцияРассчитана КАК КалькуляцияРассчитана,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|			ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности
	|		ИНАЧЕ ЗаказНарядРаботы.Номенклатура.НаправлениеДеятельности
	|	КОНЕЦ КАК НаправлениеДеятельностиПродажи,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|			ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж
	|		ИНАЧЕ ЗаказНарядРаботы.Номенклатура.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж
	|	КОНЕЦ КАК СчетУчетаПродажи,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|			ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж
	|		ИНАЧЕ ЗаказНарядРаботы.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж
	|	КОНЕЦ КАК СчетУчетаСебестоимость,
	|	ЗаказНарядРаботы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЗаказНарядРаботы.Количество * ЗаказНарядРаботы.Коэффициент * ЗаказНарядРаботы.Кратность КАК Количество,
	|	ЗаказНарядРаботы.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЗаказНарядРаботы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ЗаказНарядРаботы.Всего * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ЗаказНарядРаботы.Всего * ЗаказНарядРаботы.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ЗаказНарядРаботы.Ссылка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЗаказНарядРаботы.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЗаказНарядРаботы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА ЗаказНарядРаботы.СуммаНДС * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|					ИНАЧЕ ЗаказНарядРаботы.СуммаНДС * ЗаказНарядРаботы.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ЗаказНарядРаботы.Ссылка.Кратность)
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЗаказНарядРаботы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ЗаказНарядРаботы.СуммаНДС * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ЗаказНарядРаботы.СуммаНДС * ЗаказНарядРаботы.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ЗаказНарядРаботы.Ссылка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСПродажи,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЗаказНарядРаботы.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЗаказНарядРаботы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА ЗаказНарядРаботы.СуммаНДС * КурсыРегВалюты.Курс * ЗаказНарядРаботы.Ссылка.Кратность / (ЗаказНарядРаботы.Ссылка.Курс * КурсыРегВалюты.Кратность)
	|					ИНАЧЕ ЗаказНарядРаботы.СуммаНДС
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСВал,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЗаказНарядРаботы.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЗаказНарядРаботы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА ЗаказНарядРаботы.СуммаНДС
	|					ИНАЧЕ ЗаказНарядРаботы.СуммаНДС * ЗаказНарядРаботы.Ссылка.Курс / ЗаказНарядРаботы.Ссылка.Кратность
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСРег,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЗаказНарядРаботы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ЗаказНарядРаботы.Всего * КурсыРегВалюты.Курс * ЗаказНарядРаботы.Ссылка.Кратность / (ЗаказНарядРаботы.Ссылка.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ЗаказНарядРаботы.Всего
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаВал,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЗаказНарядРаботы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ЗаказНарядРаботы.Всего
	|			ИНАЧЕ ЗаказНарядРаботы.Всего * ЗаказНарядРаботы.Ссылка.Курс / ЗаказНарядРаботы.Ссылка.Кратность
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРег,
	|	ЗаказНарядРаботы.Количество * ЗаказНарядРаботы.Коэффициент * ЗаказНарядРаботы.Кратность КАК КоличествоПлан,
	|	ЗаказНарядРаботы.Ссылка.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЗаказНарядРаботы.Ссылка.ВариантЗавершения КАК ВариантЗавершения,
	|	ЗаказНарядРаботы.Спецификация КАК Спецификация,
	|	ЗаказНарядРаботы.КлючСвязиДляСкидокНаценок КАК КлючСвязиДляСкидокНаценок,
	|	ЗаказНарядРаботы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ЗаказНарядРаботы.Кратность КАК Кратность,
	|	ЗаказНарядРаботы.Коэффициент КАК Коэффициент,
	|	ЗаказНарядРаботы.Цена КАК Цена,
	|	ЗаказНарядРаботы.Всего КАК ВсегоВалютаДокумента,
	|	ЗаказНарядРаботы.Ссылка КАК Заказ,
	|	ЗаказНарядРаботы.СуммаНДС КАК СуммаНДСВалютаДокумента,
	|	ЗаказНарядРаботы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЗаказНарядРаботы.Ссылка.Проект КАК Проект,
	|	ЗаказНарядРаботы.Номенклатура.ЭтоАгентскаяУслуга КАК ЭтоАгентскаяУслуга,
	|	ЗаказНарядРаботы.Ссылка.Контрагент.СчетУчетаРасчетовСПоставщиком КАК СчетУчетаРасчетовСПоставщиком
	|ПОМЕСТИТЬ ВременнаяТаблицаРаботы
	|ИЗ
	|	Документ.ЗаказПокупателя.Работы КАК ЗаказНарядРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыУпрВалюты
	|		ПО (КурсыУпрВалюты.Валюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыРегВалюты
	|		ПО (КурсыРегВалюты.Валюта = &ВалютаНациональная),
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ЗаказНарядРаботы.Ссылка = &Ссылка
	|	И ЗаказНарядРаботы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|	И ЗаказНарядРаботы.Ссылка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНарядТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаказНарядТовары.Ссылка КАК Документ,
	|	ЗаказНарядТовары.Ссылка.Контрагент КАК Контрагент,
	|	ЗаказНарядТовары.Ссылка.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ЗаказНарядТовары.Ссылка.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ЗаказНарядТовары.Ссылка.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ЗаказНарядТовары.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	ЗаказНарядТовары.Ссылка.Договор КАК Договор,
	|	ЗаказНарядТовары.Ссылка.Дата КАК Период,
	|	ЗаказНарядТовары.Ссылка.Финиш КАК Финиш,
	|	ЗаказНарядТовары.Ссылка.Старт КАК Старт,
	|	&Организация КАК Организация,
	|	ЗаказНарядТовары.Ссылка.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК КоррОрганизация,
	|	ЗаказНарядТовары.Ссылка.СтруктурнаяЕдиницаПродажи КАК ПодразделениеПродажи,
	|	ЗаказНарядТовары.Ссылка.Ответственный КАК Ответственный,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|			ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности
	|		ИНАЧЕ ЗаказНарядТовары.Номенклатура.НаправлениеДеятельности
	|	КОНЕЦ КАК НаправлениеДеятельностиПродажи,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|			ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж
	|		ИНАЧЕ ЗаказНарядТовары.Номенклатура.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж
	|	КОНЕЦ КАК СчетУчетаПродажи,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|			ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж
	|		ИНАЧЕ ЗаказНарядТовары.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж
	|	КОНЕЦ КАК СчетУчетаСебестоимость,
	|	ЗаказНарядТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЗаказНарядТовары.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиница,
	|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка) КАК КоррСтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ЗаказНарядТовары.СтруктурнаяЕдиницаРезерв.ОрдерныйСклад
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрдерныйСклад,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА ЗаказНарядТовары.Ячейка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК Ячейка,
	|	ЗаказНарядТовары.Номенклатура.СчетУчетаЗапасов КАК СчетУчета,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка) КАК КоррСчетУчета,
	|	ЗаказНарядТовары.Номенклатура.СчетУчетаЗатрат КАК СчетУчетаЗатрат,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|				И ЗаказНарядТовары.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТоварыНаКомиссии,
	|	ЗаказНарядТовары.Номенклатура КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК КоррНоменклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказНарядТовары.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ЗаказНарядТовары.НоменклатураНабора КАК НоменклатураНабора,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказНарядТовары.ХарактеристикаНабора
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК ХарактеристикаНабора,
	|	ЗаказНарядТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ЗаказНарядТовары.НомерГТД КАК НомерГТД,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК КоррХарактеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ЗаказНарядТовары.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК КоррПартия,
	|	ЗаказНарядТовары.Ссылка КАК Заказ,
	|	ЗаказНарядТовары.Ссылка КАК ЗаказПокупателя,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК КоррЗаказ,
	|	ЗаказНарядТовары.Количество * ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНарядТовары.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ВЫРАЗИТЬ(ЗаказНарядТовары.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Количество,
	|	ЗаказНарядТовары.Резерв * ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНарядТовары.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ВЫРАЗИТЬ(ЗаказНарядТовары.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Резерв,
	|	ЗаказНарядТовары.РезервОтгрузка * ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНарядТовары.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ВЫРАЗИТЬ(ЗаказНарядТовары.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК РезервОтгрузка,
	|	ЗаказНарядТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЗаказНарядТовары.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЗаказНарядТовары.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА ЗаказНарядТовары.СуммаНДС * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|					ИНАЧЕ ЗаказНарядТовары.СуммаНДС * ЗаказНарядТовары.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ЗаказНарядТовары.Ссылка.Кратность)
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЗаказНарядТовары.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ЗаказНарядТовары.СуммаНДС * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ЗаказНарядТовары.СуммаНДС * ЗаказНарядТовары.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ЗаказНарядТовары.Ссылка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСЗакупкиПродажи,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЗаказНарядТовары.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ЗаказНарядТовары.Всего * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ЗаказНарядТовары.Всего * ЗаказНарядТовары.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ЗаказНарядТовары.Ссылка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЗаказНарядТовары.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЗаказНарядТовары.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА ЗаказНарядТовары.СуммаНДС * КурсыРегВалюты.Курс * ЗаказНарядТовары.Ссылка.Кратность / (ЗаказНарядТовары.Ссылка.Курс * КурсыРегВалюты.Кратность)
	|					ИНАЧЕ ЗаказНарядТовары.СуммаНДС
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСВал,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЗаказНарядТовары.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЗаказНарядТовары.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА ЗаказНарядТовары.СуммаНДС
	|					ИНАЧЕ ЗаказНарядТовары.СуммаНДС * ЗаказНарядТовары.Ссылка.Курс / ЗаказНарядТовары.Ссылка.Кратность
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСРег,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЗаказНарядТовары.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ЗаказНарядТовары.Всего * КурсыРегВалюты.Курс * ЗаказНарядТовары.Ссылка.Кратность / (ЗаказНарядТовары.Ссылка.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ЗаказНарядТовары.Всего
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаВал,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЗаказНарядТовары.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ЗаказНарядТовары.Всего
	|			ИНАЧЕ ЗаказНарядТовары.Всего * ЗаказНарядТовары.Ссылка.Курс / ЗаказНарядТовары.Ссылка.Кратность
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРег,
	|	ЗаказНарядТовары.Всего КАК СуммаРасчетовПринятыеПереданные,
	|	ЗаказНарядТовары.Ссылка.Контрагент.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|	ЗаказНарядТовары.Ссылка.Контрагент.СчетУчетаРасчетовСПоставщиком КАК СчетУчетаРасчетовСПоставщиком,
	|	ЗаказНарядТовары.Ссылка.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ЗаказНарядТовары.Ссылка.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЗаказНарядТовары.Ссылка.ВариантЗавершения КАК ВариантЗавершения,
	|	ЗаказНарядТовары.Ссылка.КалькуляцияРассчитана КАК КалькуляцияРассчитана,
	|	ЗаказНарядТовары.КлючСвязи КАК КлючСвязи,
	|	ЗаказНарядТовары.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ЗаказНарядТовары.Цена КАК Цена,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЗаказНарядТовары.Номенклатура.ПроизвольныйНоминал
	|				ТОГДА ЗаказНарядТовары.Сумма / ВЫБОР
	|						КОГДА ЗаказНарядТовары.Номенклатура.ИспользоватьСерииНоменклатуры
	|							ТОГДА ЗаказНарядТовары.Количество
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			ИНАЧЕ ЗаказНарядТовары.Номенклатура.Номинал / ВЫБОР
	|					КОГДА ЗаказНарядТовары.Номенклатура.ИспользоватьСерииНоменклатуры
	|						ТОГДА 1
	|					ИНАЧЕ 1 / ЗаказНарядТовары.Количество
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК НоминалСертификата,
	|	ЗаказНарядТовары.Номенклатура.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры,
	|	ЗаказНарядТовары.Номенклатура.ПроизвольныйНоминал КАК ПроизвольныйНоминал,
	|	ЗаказНарядТовары.Всего КАК ВсегоВалютаДокумента,
	|	ЗаказНарядТовары.СуммаНДС КАК СуммаНДСВалютаДокумента,
	|	ЗаказНарядТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЗаказНарядТовары.Ссылка.Проект КАК Проект,
	|	ЗаказНарядТовары.Номенклатура.ЭтоАгентскаяУслуга КАК ЭтоАгентскаяУслуга,
	|	ЕСТЬNULL(ПолитикиУчетаСерий.ПолитикаУчетаСерий, ЗаказНарядТовары.Номенклатура.ПолитикаУчетаСерий) КАК ПолитикаУчетаСерий
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказНарядТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыУпрВалюты
	|		ПО (КурсыУпрВалюты.Валюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыРегВалюты
	|		ПО (КурсыРегВалюты.Валюта = &ВалютаНациональная)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО ЗаказНарядТовары.Номенклатура = ПолитикиУчетаСерий.Владелец
	|			И ЗаказНарядТовары.СтруктурнаяЕдиницаРезерв = ПолитикиУчетаСерий.СтруктурнаяЕдиница
	|			И (&Организация = ПолитикиУчетаСерий.Организация),
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ЗаказНарядТовары.Ссылка = &Ссылка
	|	И ЗаказНарядТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|	И ЗаказНарядТовары.Ссылка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНарядМатериалы.НомерСтроки КАК НомерСтроки,
	|	ЗаказНарядМатериалы.Ссылка.Дата КАК Период,
	|	ЗаказНарядМатериалы.Ссылка.Финиш КАК Финиш,
	|	ЗаказНарядМатериалы.Ссылка.Старт КАК Старт,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ЗаказНарядМатериалы.Ссылка КАК Заказ,
	|	ЗаказНарядМатериалы.Ссылка.СтруктурнаяЕдиницаПродажи КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА ЗаказНарядМатериалы.Ячейка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК Ячейка,
	|	ЗаказНарядМатериалы.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиницаЗапасов,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА ЗаказНарядМатериалы.Ячейка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК ЯчейкаЗапасов,
	|	ВЫБОР
	|		КОГДА ЗаказНарядМатериалы.СтруктурнаяЕдиницаРезерв.ОрдерныйСклад
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрдерныйСклад,
	|	ВЫБОР
	|		КОГДА ЗаказНарядМатериалы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ ЗаказНарядМатериалы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА ЗаказНарядМатериалы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗаказНарядМатериалы.Ссылка.СтруктурнаяЕдиницаПродажи.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ТОГДА ЗаказНарядМатериалы.Номенклатура.СчетУчетаЗапасов
	|				ИНАЧЕ ЗаказНарядМатериалы.Номенклатура.СчетУчетаЗатрат
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА ЗаказНарядМатериалы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ ЗаказНарядМатериалы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА ЗаказНарядМатериалы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗаказНарядМатериалы.СтруктурнаяЕдиницаРезерв.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ТОГДА ЗаказНарядМатериалы.Номенклатура.СчетУчетаЗапасов
	|				ИНАЧЕ ЗаказНарядМатериалы.Номенклатура.СчетУчетаЗатрат
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетУчетаЗапасов,
	|	ВЫБОР
	|		КОГДА ЗаказНарядМатериалы.Ссылка.СтруктурнаяЕдиницаПродажи.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ТОГДА ЗаказНарядРаботы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ЗаказНарядРаботы.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК КоррСчетУчета,
	|	ЗаказНарядМатериалы.Номенклатура КАК Номенклатура,
	|	ЗаказНарядМатериалы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ЗаказНарядМатериалы.НомерГТД КАК НомерГТД,
	|	ЗаказНарядРаботы.Номенклатура КАК КоррНоменклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказНарядМатериалы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказНарядРаботы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК КоррХарактеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ЗаказНарядМатериалы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК КоррПартия,
	|	ЗаказНарядРаботы.Спецификация КАК КоррСпецификация,
	|	ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка) КАК Спецификация,
	|	ЗаказНарядМатериалы.Ссылка КАК ЗаказПокупателя,
	|	ЗаказНарядМатериалы.Количество * ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНарядМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ВЫРАЗИТЬ(ЗаказНарядМатериалы.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Количество,
	|	ЗаказНарядМатериалы.Резерв * ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНарядМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ВЫРАЗИТЬ(ЗаказНарядМатериалы.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Резерв,
	|	ЗаказНарядМатериалы.РезервОтгрузка * ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНарядМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ВЫРАЗИТЬ(ЗаказНарядМатериалы.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК РезервОтгрузка,
	|	0 КАК Сумма,
	|	ЗаказНарядРаботы.Номенклатура.СчетУчетаЗатрат КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ЗаказНарядМатериалы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ ЗаказНарядМатериалы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА ЗаказНарядМатериалы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗаказНарядМатериалы.Ссылка.СтруктурнаяЕдиницаПродажи.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ТОГДА ЗаказНарядМатериалы.Номенклатура.СчетУчетаЗапасов
	|				ИНАЧЕ ЗаказНарядМатериалы.Номенклатура.СчетУчетаЗатрат
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетКт,
	|	ВЫРАЗИТЬ(&РаспределениеЗапасов КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	ВЫРАЗИТЬ(&РаспределениеЗапасов КАК СТРОКА(100)) КАК Содержание,
	|	ЗаказНарядМатериалы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЗаказНарядМатериалы.Ссылка.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЗаказНарядМатериалы.Ссылка.ВариантЗавершения КАК ВариантЗавершения,
	|	ЗаказНарядМатериалы.КлючСвязиСерииНоменклатуры КАК КлючСвязиСерииНоменклатуры,
	|	ЕСТЬNULL(ПолитикиУчетаСерий.ПолитикаУчетаСерий, ЗаказНарядМатериалы.Номенклатура.ПолитикаУчетаСерий) КАК ПолитикаУчетаСерий
	|ПОМЕСТИТЬ ВременнаяТаблицаМатериалы
	|ИЗ
	|	Документ.ЗаказПокупателя.Материалы КАК ЗаказНарядМатериалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Работы КАК ЗаказНарядРаботы
	|		ПО ЗаказНарядМатериалы.КлючСвязи = ЗаказНарядРаботы.КлючСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО ЗаказНарядМатериалы.Номенклатура = ПолитикиУчетаСерий.Владелец
	|			И ЗаказНарядМатериалы.СтруктурнаяЕдиницаРезерв = ПолитикиУчетаСерий.СтруктурнаяЕдиница
	|			И (&Организация = ПолитикиУчетаСерий.Организация)
	|ГДЕ
	|	ЗаказНарядМатериалы.Ссылка = &Ссылка
	|	И ЗаказНарядРаботы.Ссылка = &Ссылка
	|	И ЗаказНарядМатериалы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|	И ЗаказНарядМатериалы.Ссылка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНарядИсполнители.НомерСтроки КАК НомерСтроки,
	|	ЗаказНарядИсполнители.Ссылка.Финиш КАК Период,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	НАЧАЛОПЕРИОДА(ЗаказНарядИсполнители.Ссылка.Финиш, МЕСЯЦ) КАК ПериодРегистрации,
	|	ЗаказНарядИсполнители.Ссылка.ВалютаДокумента КАК Валюта,
	|	ЗаказНарядИсполнители.Ссылка.СтруктурнаяЕдиницаПродажи КАК СтруктурнаяЕдиница,
	|	ЗаказНарядИсполнители.Сотрудник КАК Сотрудник,
	|	ЗаказНарядИсполнители.Ссылка.Старт КАК ДатаНачала,
	|	ЗаказНарядИсполнители.Ссылка.Финиш КАК ДатаОкончания,
	|	0 КАК ОтработаноДней,
	|	ЗаказНарядРаботы.Количество * ЗаказНарядРаботы.Коэффициент * ЗаказНарядРаботы.Кратность КАК ОтработаноЧасов,
	|	ЗаказНарядИсполнители.СуммаНачисления КАК СуммаВал,
	|	ЗаказНарядИсполнители.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
	|	ЗаказНарядИсполнители.Сотрудник.СчетРасчетовСПерсоналом КАК СчетУчета,
	|	ЗаказНарядИсполнители.ВидНачисленияУдержания.СчетЗатрат КАК СчетУчетаЗапасов,
	|	ЗаказНарядРаботы.Номенклатура.СчетУчетаЗатрат КАК КоррСчетУчетаЗапасов,
	|	ЗаказНарядРаботы.Номенклатура КАК КоррНоменклатура,
	|	ЗаказНарядРаботы.Характеристика КАК КоррХарактеристика,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК КоррПартия,
	|	ЗаказНарядРаботы.Спецификация КАК КоррСпецификация,
	|	ЗаказНарядИсполнители.Ссылка КАК ЗаказПокупателя,
	|	ЗаказНарядИсполнители.РазмерНачисленияУдержания КАК Размер,
	|	ВЫРАЗИТЬ(ЗаказНарядИсполнители.СуммаНачисления * ВЫБОР
	|			КОГДА ЗаказНарядИсполнители.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ЗаказНарядИсполнители.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ЗаказНарядИсполнители.Ссылка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ЗаказНарядИсполнители.Ссылка КАК КоррЗаказ,
	|	ЗаказНарядИсполнители.Ссылка.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЗаказНарядИсполнители.Ссылка.ВариантЗавершения КАК ВариантЗавершения
	|ПОМЕСТИТЬ ВременнаяТаблицаИсполнители
	|ИЗ
	|	Документ.ЗаказПокупателя.Исполнители КАК ЗаказНарядИсполнители
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Работы КАК ЗаказНарядРаботы
	|		ПО ЗаказНарядИсполнители.КлючСвязи = ЗаказНарядРаботы.КлючСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыУпрВалюты
	|		ПО (КурсыУпрВалюты.Валюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыРегВалюты
	|		ПО (КурсыРегВалюты.Валюта = &ВалютаНациональная),
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ЗаказНарядИсполнители.Ссылка = &Ссылка
	|	И ЗаказНарядРаботы.Ссылка = &Ссылка
	|	И ЗаказНарядРаботы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ЗаказНарядИсполнители.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|	И ЗаказНарядИсполнители.Ссылка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Ссылка.Финиш КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаАвансовПокупателя КАК СчетУчетаАвансовПокупателя,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаРасчетовСПоставщиком КАК СчетУчетаРасчетовСПоставщиком,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаАвансовПоставщику КАК СчетУчетаАвансовПоставщику,
	|	ТаблицаДокумента.Ссылка.Договор КАК Договор,
	|	ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЭтоПредоплатаБезЗаказа
	|				ИЛИ ТаблицаДокумента.ОплатаСертификатом
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Ссылка
	|	КОНЕЦ КАК Заказ,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее) КАК НаправлениеДеятельностиПродажи,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс) КАК ТипРасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг) КАК ТипРасчетовКуда,
	|	&Ссылка КАК ДокументКуда,
	|	ТаблицаДокумента.Документ КАК Документ,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам
	|				ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.Взаимозачет)
	|				ИЛИ ТаблицаДокумента.ОплатаСертификатом
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходСоСчета
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходСоСчета).Статья
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеВКассу
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеВКассу).Статья
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходИзКассы
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходИзКассы).Статья
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеНаСчет
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеНаСчет).Статья
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей)
	|			КОНЕЦ
	|	КОНЕЦ КАК Статья,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам
	|				И НЕ ТаблицаДокумента.ОплатаСертификатом
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходСоСчета
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходСоСчета).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеВКассу
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеВКассу).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходИзКассы
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходИзКассы).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеНаСчет
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеНаСчет).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.Взаимозачет
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.Взаимозачет).Дата
	|				КОНЕЦ
	|		ИНАЧЕ ТаблицаДокумента.Ссылка.Дата
	|	КОНЕЦ КАК ДокументДата,
	|	ВЫБОР
	|		КОГДА КонстантаВалютаУчета.Значение = &ВалютаРасчетов
	|			ТОГДА ТаблицаДокумента.СуммаРасчетов
	|		КОГДА КонстантаВалютаУчета.Значение = КонстантаНациональнаяВалюта.Значение
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.СуммаРасчетов * ТаблицаДокумента.Курс / ТаблицаДокумента.Кратность КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДокумента.СуммаРасчетов * ТаблицаДокумента.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * ТаблицаДокумента.Кратность) КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК Сумма,
	|	ТаблицаДокумента.СуммаРасчетов КАК СуммаВал,
	|	ТаблицаДокумента.Ссылка.Финиш КАК Финиш,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.ОперацияПоПлатежнымКартам)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЭквайринговаяОперация,
	|	ТаблицаДокумента.Документ.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Документ.Дата, ДЕНЬ) КАК ДатаПлатежа,
	|	ТаблицаДокумента.ОплатаСертификатом КАК ОплатаСертификатом,
	|	ТаблицаДокумента.НомерСертификата КАК НомерСертификата,
	|	ТаблицаДокумента.Ссылка.СтруктурнаяЕдиницаПродажи КАК СтруктурнаяЕдиница,
	|	ТаблицаДокумента.Документ.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры,
	|	ТаблицаДокумента.Документ.СчетУчетаДоходов КАК СчетУчетаДоходов,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ОплатаСертификатом
	|			ТОГДА ТаблицаДокумента.Документ.Номинал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Номинал,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ОплатаСертификатом
	|			ТОГДА ТаблицаДокумента.СуммаПлатежа
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСертификата,
	|	ТаблицаДокумента.Документ.ЧастичноеПогашение КАК ЧастичноеПогашение,
	|	ТаблицаДокумента.СуммаРасчетов КАК СуммаРасчетов,
	|	ТаблицаДокумента.СуммаПлатежа КАК СуммаПлатежа,
	|	ТаблицаДокумента.Курс КАК Курс,
	|	ТаблицаДокумента.Кратность КАК Кратность,
	|	ВременнаяТаблицаШапка.ДоговорРасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ВременнаяТаблицаШапка.ДокументОснование КАК ДокументОснование,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.СуммаРасчетов * ТаблицаДокумента.Курс * КурсыНациональнойВалютыСрезПоследних.Кратность / (ТаблицаДокумента.Кратность * КурсыНациональнойВалютыСрезПоследних.Курс) КАК ЧИСЛО(15, 2)) КАК СуммаРубПоКурсуАванса,
	|	ТаблицаДокумента.Ссылка.Проект КАК Проект
	|ПОМЕСТИТЬ ВременнаяТаблицаПредоплата
	|ИЗ
	|	Документ.ЗаказПокупателя.Предоплата КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыВалютУчетаСрезПоследних
	|		ПО (КурсыВалютУчетаСрезПоследних.Валюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыНациональнойВалютыСрезПоследних
	|		ПО (КурсыНациональнойВалютыСрезПоследних.Валюта = &ВалютаНациональная),
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка,
	|	Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта,
	|	Константа.ВалютаУчета КАК КонстантаВалютаУчета
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|	И ТаблицаДокумента.Ссылка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяСкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	ЗаказПокупателяСкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЗаказПокупателяСкидкиНаценки.Ссылка.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|				ТОГДА ЗаказПокупателяСкидкиНаценки.Сумма * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ЗаказПокупателяСкидкиНаценки.Сумма * ЗаказПокупателяСкидкиНаценки.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ЗаказПокупателяСкидкиНаценки.Ссылка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ЗаказПокупателяСкидкиНаценки.Ссылка.Дата КАК Период,
	|	ЗаказПокупателяСкидкиНаценки.Ссылка.Контрагент КАК СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВременнаяТаблицаАвтоСкидкиНаценки
	|ИЗ
	|	Документ.ЗаказПокупателя.СкидкиНаценки КАК ЗаказПокупателяСкидкиНаценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						КонстантаВалютаУчета.Значение
	|					ИЗ
	|						Константа.ВалютаУчета КАК КонстантаВалютаУчета)) КАК КурсыУпрВалюты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						КонстантаНациональнаяВалюта.Значение
	|					ИЗ
	|						Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта)) КАК КурсыРегВалюты
	|		ПО (ИСТИНА),
	|	Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта
	|ГДЕ
	|	ЗаказПокупателяСкидкиНаценки.Ссылка = &Ссылка
	|	И ЗаказПокупателяСкидкиНаценки.Сумма <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяСерииНоменклатуры.КлючСвязи КАК КлючСвязи,
	|	ЗаказПокупателяСерииНоменклатуры.Серия КАК Серия,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяСерииНоменклатуры.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяСерииНоменклатуры.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(Справочник.ПолитикаУчетаСерий.ПустаяСсылка)
	|			ТОГДА &ОстаткиСерийНоменклатуры
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВременнаяТаблицаТовары.ПолитикаУчетаСерий.ТипПолитики = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК ОстаткиСерийНоменклатуры
	|ПОМЕСТИТЬ ВременнаяТаблицаСерииНоменклатуры
	|ИЗ
	|	Документ.ЗаказПокупателя.СерииНоменклатуры КАК ЗаказПокупателяСерииНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ПО ЗаказПокупателяСерииНоменклатуры.КлючСвязи = ВременнаяТаблицаТовары.КлючСвязи
	|ГДЕ
	|	ЗаказПокупателяСерииНоменклатуры.Ссылка = &Ссылка
	|	И &ИспользоватьСерииНоменклатуры
	|	И НЕ ВременнаяТаблицаТовары.ОрдерныйСклад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяСерииНоменклатуры.КлючСвязи КАК КлючСвязи,
	|	ЗаказПокупателяСерииНоменклатуры.Серия КАК Серия,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяСерииНоменклатуры.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяСерииНоменклатуры.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаМатериалы.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(Справочник.ПолитикаУчетаСерий.ПустаяСсылка)
	|			ТОГДА &ОстаткиСерийНоменклатуры
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВременнаяТаблицаМатериалы.ПолитикаУчетаСерий.ТипПолитики = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК ОстаткиСерийНоменклатуры
	|ПОМЕСТИТЬ ВременнаяТаблицаСерииНоменклатурыМатериалы
	|ИЗ
	|	Документ.ЗаказПокупателя.СерииНоменклатурыМатериалы КАК ЗаказПокупателяСерииНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаМатериалы КАК ВременнаяТаблицаМатериалы
	|		ПО ЗаказПокупателяСерииНоменклатуры.КлючСвязи = ВременнаяТаблицаМатериалы.КлючСвязиСерииНоменклатуры
	|ГДЕ
	|	ЗаказПокупателяСерииНоменклатуры.Ссылка = &Ссылка
	|	И &ИспользоватьСерииНоменклатуры
	|	И НЕ ВременнаяТаблицаМатериалы.ОрдерныйСклад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаРаботы.Период КАК Период,
	|	&Организация КАК Организация,
	|	ВременнаяТаблицаРаботы.ЗаказПокупателя КАК Заказ,
	|	ВременнаяТаблицаРаботы.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаРаботы.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаРаботы.Спецификация КАК Спецификация,
	|	ВременнаяТаблицаРаботы.Партия КАК Партия,
	|	ЕСТЬNULL(ВидыПроизводстваЭтапы.Этап, ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ЗавершениеПроизводства)) КАК Этап,
	|	ВременнаяТаблицаРаботы.Количество * ВременнаяТаблицаРаботы.Коэффициент * ВременнаяТаблицаРаботы.Кратность КАК КоличествоПлан,
	|	0 КАК КоличествоФакт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка) КАК СтруктурнаяЕдиница
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ВременнаяТаблицаРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Спецификации КАК Спецификации
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПроизводства.Этапы КАК ВидыПроизводстваЭтапы
	|			ПО Спецификации.ВидПроизводства = ВидыПроизводстваЭтапы.Ссылка
	|		ПО ВременнаяТаблицаРаботы.Спецификация = Спецификации.Ссылка
	|ГДЕ
	|	&ИспользоватьЭтапыПроизводства
	|	И &ИспользоватьРезервирование
	|	И ВременнаяТаблицаРаботы.Спецификация <> ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК НомерСтроки,
	|	ЗаказПокупателяКалькуляция.Ссылка.Дата КАК Период,
	|	ЗаказПокупателяКалькуляция.Ссылка КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяКалькуляция.Номенклатура ССЫЛКА ПланСчетов.Управленческий
	|			ТОГДА ЗаказПокупателяКалькуляция.Номенклатура
	|		ИНАЧЕ ЗаказПокупателяКалькуляция.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяКалькуляция.НоменклатураИзделие <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяКалькуляция.НоменклатураИзделие
	|		КОГДА ЗаказПокупателяКалькуляция.Номенклатура ССЫЛКА ПланСчетов.Управленческий
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЗаказПокупателяКалькуляция.Номенклатура
	|	КОНЕЦ КАК Аналитика,
	|	0 КАК СуммаДоходов,
	|	СУММА(ЗаказПокупателяКалькуляция.Себестоимость) КАК СуммаРасходов,
	|	ЗаказПокупателяКалькуляция.Ссылка.Организация КАК Организация,
	|	ЗаказПокупателяКалькуляция.Ссылка.СтруктурнаяЕдиницаПродажи КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяКалькуляция.НоменклатураИзделие <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяКалькуляция.НоменклатураИзделие.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.ЗаказПокупателя.Калькуляция КАК ЗаказПокупателяКалькуляция
	|ГДЕ
	|	ЗаказПокупателяКалькуляция.Ссылка = &Ссылка
	|	И НЕ ЗаказПокупателяКалькуляция.Ссылка.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И ЗаказПокупателяКалькуляция.Ссылка.КалькуляцияРассчитана
	|	И ЗаказПокупателяКалькуляция.Себестоимость <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяКалькуляция.Ссылка.Дата,
	|	ЗаказПокупателяКалькуляция.Ссылка,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяКалькуляция.Номенклатура ССЫЛКА ПланСчетов.Управленческий
	|			ТОГДА ЗаказПокупателяКалькуляция.Номенклатура
	|		ИНАЧЕ ЗаказПокупателяКалькуляция.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяКалькуляция.НоменклатураИзделие <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяКалькуляция.НоменклатураИзделие
	|		КОГДА ЗаказПокупателяКалькуляция.Номенклатура ССЫЛКА ПланСчетов.Управленческий
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЗаказПокупателяКалькуляция.Номенклатура
	|	КОНЕЦ,
	|	ЗаказПокупателяКалькуляция.Ссылка.Организация,
	|	ЗаказПокупателяКалькуляция.Ссылка.СтруктурнаяЕдиницаПродажи,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяКалькуляция.НоменклатураИзделие <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяКалькуляция.НоменклатураИзделие.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаРаботы.НомерСтроки,
	|	ВременнаяТаблицаРаботы.Период,
	|	ВременнаяТаблицаРаботы.ЗаказПокупателя,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ВыручкаОтПродаж),
	|	ВременнаяТаблицаРаботы.Номенклатура,
	|	ВременнаяТаблицаРаботы.ВсегоВалютаДокумента,
	|	0,
	|	ВременнаяТаблицаРаботы.Организация,
	|	ВременнаяТаблицаРаботы.ПодразделениеПродажи,
	|	ВременнаяТаблицаРаботы.НаправлениеДеятельностиПродажи
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ВременнаяТаблицаРаботы
	|ГДЕ
	|	ВременнаяТаблицаРаботы.КалькуляцияРассчитана
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.НомерСтроки,
	|	ВременнаяТаблицаТовары.Период,
	|	ВременнаяТаблицаТовары.ЗаказПокупателя,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ВыручкаОтПродаж),
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ВременнаяТаблицаТовары.ВсегоВалютаДокумента,
	|	0,
	|	ВременнаяТаблицаТовары.Организация,
	|	ВременнаяТаблицаТовары.ПодразделениеПродажи,
	|	ВременнаяТаблицаТовары.НаправлениеДеятельностиПродажи
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|ГДЕ
	|	ВременнаяТаблицаТовары.КалькуляцияРассчитана";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ИнициализироватьДанныеДокументаЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства, ДокументОбъектЗаказПокупателя) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаИнициализироватьДанныеДокументаЗаказНаряд();
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПокупателя);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("УчетПоЯчейкам", СтруктураДополнительныеСвойства.УчетнаяПолитика.УчетПоЯчейкам);
	Запрос.УстановитьПараметр("РаспределениеЗапасов", НСтр("ru = 'Распределение запасов'"));
	Запрос.УстановитьПараметр("ИспользоватьЭтапыПроизводства",  СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьЭтапыПроизводства);
	Запрос.УстановитьПараметр("ИспользоватьРезервирование",  СтруктураДополнительныеСвойства.УчетнаяПолитика.РезервированиеЗапасов);
	
	Запрос.УстановитьПараметр("ИспользоватьСерииНоменклатуры", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерииНоменклатуры);
	Запрос.УстановитьПараметр("ОстаткиСерийНоменклатуры", СтруктураДополнительныеСвойства.УчетнаяПолитика.ОстаткиСерийНоменклатуры);
	
	Запрос.УстановитьПараметр("ВалютаУчета", СтруктураДополнительныеСвойства.ВалютаУчета);
	Запрос.УстановитьПараметр("ВалютаНациональная", СтруктураДополнительныеСвойства.НациональнаяВалюта);
	Запрос.УстановитьПараметр("ВалютаРасчетов", СтруктураДополнительныеСвойства.Договор.ВалютаРасчетов);
	
	// Перед выполнением запроса проверим, необходим ли пересчет из валюты в валюту
	РасчетыПроведениеДокументов.МодифицироватьЗапросДляПересчетаВВалюту(ДокументСсылкаЗаказПокупателя, Запрос, СтруктураДополнительныеСвойства);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЭтапыПроизводства", МассивРезультатов[10].Выгрузить());
	
	// Формирование проводок документа.
	ПроведениеДокументовУНФ.СформироватьТаблицуПроводок(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаРасчетыСПокупателямиЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства, ДокументОбъектЗаказПокупателя);
	СформироватьТаблицаВыпускПродукцииЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаГрафикДвиженияЗапасовЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходыЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	// Кассовый метод
	РасчетыПроведениеДокументов.СформироватьВременнаяТаблицаПредоплатаДляКассовогоМетода(СтруктураДополнительныеСвойства, Метаданные.РегистрыНакопления.РасчетыСПокупателями.Имя);
	СформироватьТаблицаДоходыИРасходыОтложенныеЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходыНераспределенныеЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходыКассовыйМетодЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	// Конец Кассовый метод
	СформироватьТаблицаЗаказыПокупателейЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыНаСкладахЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыВРазрезеГТДЗаказНаряд(СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыКРасходуСоСкладовЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаНачисленияИУдержанияЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаРасчетыСПерсоналомЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПродажиЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПотребностьВЗапасахЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыРаботыЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыМатериалыЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыИсполнителиЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыТоварыЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыИАгентскиеУслугиПринятыеЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	ОтнестиЗатратыНаРаботы(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПлатежныйКалендарь(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОплатаСчетовИЗаказовЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	
	// ДисконтныеКарты
	СформироватьТаблицаПродажиПоДисконтнойКартеЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	// АвтоматическиеСкидки
	СформироватьТаблицаПродажиПоПредоставленнымСкидкамЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	// Эквайринг
	ЭквайринговыеОперацииСервер.СформироватьТаблицаДоходыИРасходыКассовыйМетодЭквайринг(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	// Серии номенклатуры
	СформироватьТаблицаСерииНоменклатурыЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	// Подарочные сертификаты
	СформироватьТаблицаПодарочныеСертификатыЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОплатаПодарочнымиСертификатамиЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРазмещениеЗаказов", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыПоЗаказамПрогноз", МассивРезультатов[11].Выгрузить());
	
	СформироватьТаблицаРезервыТоваровОрганизацийЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаУправленческийЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	
	// Биллинг
	СформироватьТаблицаВыполнениеДоговораОбслуживанияЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	
	// Суммы документов регламентированный учет
	СформироватьТаблицаСуммыДокументовРегламентированныйУчет(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	
	//Ресурсы
	Если ПолучитьФункциональнуюОпцию("ПланироватьЗагрузкуРесурсовПредприятияРаботы") Тогда
		ТаблицаРасписаниеЗагрузкиРесурсов = ПланированиеРесурсовУНФ.ТаблицаДвиженийДокументов(ДокументСсылкаЗаказПокупателя);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасписаниеЗагрузкиРесурсов",
			ТаблицаРасписаниеЗагрузкиРесурсов);
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьДанныеДокументаЗаказНаряд()

Процедура СформироватьТаблицаРасчетыСПокупателямиЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства, ДокументОбъектЗаказПокупателя)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПокупателя);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ВозникновениеОбязательствПокупателя", НСтр("ru='Возникновение обязательств покупателя'"));
	Запрос.УстановитьПараметр("ВозникновениеАвансаПокупателя", НСтр("ru='Возникновение аванса покупателя'"));
	Запрос.УстановитьПараметр("ЗачетАванса", НСтр("ru='Зачет предоплаты'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	
	Для Каждого КлючИЗначение Из СтруктураДополнительныеСвойства.ДляСертификатов Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|		И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен) КАК ФормироватьДвиженияРасчетов
	|ИЗ
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.ФормироватьДвиженияРасчетов Тогда
		РасчетыПроведениеДокументов.СформироватьДвиженияПоВзаиморасчетам(СтруктураДополнительныеСвойства, ДокументСсылкаЗаказПокупателя, Запрос.Параметры);
		РасчетыПроведениеДокументов.ПересчитатьТаблицыПоКурсамВалют(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
		РасчетыПроведениеДокументов.ПоместитьПересчитанныеТаблицыВМенеджерВременныхТаблиц(СтруктураДополнительныеСвойства);
	Иначе
		СтруктураДополнительныеСвойства.Вставить("БезУчетаАвансов", Истина);
		РасчетыПроведениеДокументов.ПересчитатьТаблицыПоКурсамВалют(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
		РасчетыПроведениеДокументов.ПоместитьПересчитанныеТаблицыВМенеджерВременныхТаблиц(СтруктураДополнительныеСвойства);
		РасчетыПроведениеДокументов.СформироватьПустуюВременнуюТаблицуРасчетов(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства, Запрос.Параметры);
	КонецЕсли;
	ПолучатьРеквизитыРасчетов = Истина;
	
	// Установка исключительной блокировки контролируемых остатков расчетов с контрагентами.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаРасчетыСПокупателями.Организация КАК Организация,
	|	ВременнаяТаблицаРасчетыСПокупателями.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаРасчетыСПокупателями.Договор КАК Договор,
	|	ВременнаяТаблицаРасчетыСПокупателями.Документ КАК Документ,
	|	ВременнаяТаблицаРасчетыСПокупателями.Заказ КАК Заказ,
	|	ВременнаяТаблицаРасчетыСПокупателями.ТипРасчетов КАК ТипРасчетов
	|ИЗ
	|	ВременнаяТаблицаРасчетыСПокупателями КАК ВременнаяТаблицаРасчетыСПокупателями";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСПокупателями");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	НомерЗапроса = 0;
	Запрос.Текст = КурсовыеРазницыУНФ.ПолучитьТекстЗапросаКурсовыеРазницыРасчетыСПокупателями(Запрос.МенеджерВременныхТаблиц, Истина, НомерЗапроса, ПолучатьРеквизитыРасчетов);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПокупателями", МассивРезультатов[НомерЗапроса].Выгрузить());
	
КонецПроцедуры

Процедура СформироватьТаблицаВыпускПродукцииЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаВыпускПродукции.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаВыпускПродукции.Финиш КАК Период,
	|	ТаблицаВыпускПродукции.Организация КАК Организация,
	|	ТаблицаВыпускПродукции.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаВыпускПродукции.Номенклатура КАК Номенклатура,
	|	ТаблицаВыпускПродукции.Характеристика КАК Характеристика,
	|	ТаблицаВыпускПродукции.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРезервирование
	|			ТОГДА ТаблицаВыпускПродукции.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ТаблицаВыпускПродукции.Спецификация КАК Спецификация,
	|	СУММА(ТаблицаВыпускПродукции.Количество) КАК Количество,
	|	0 КАК КоличествоПлан
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ТаблицаВыпускПродукции,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ТаблицаВыпускПродукции.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ТаблицаВыпускПродукции.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВыпускПродукции.Финиш,
	|	ТаблицаВыпускПродукции.Организация,
	|	ТаблицаВыпускПродукции.СтруктурнаяЕдиница,
	|	ТаблицаВыпускПродукции.Номенклатура,
	|	ТаблицаВыпускПродукции.Характеристика,
	|	ТаблицаВыпускПродукции.Партия,
	|	ТаблицаВыпускПродукции.ЗаказПокупателя,
	|	ТаблицаВыпускПродукции.Спецификация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаВыпускПродукции.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаВыпускПродукции.Финиш,
	|	ТаблицаВыпускПродукции.Организация,
	|	ТаблицаВыпускПродукции.СтруктурнаяЕдиница,
	|	ТаблицаВыпускПродукции.Номенклатура,
	|	ТаблицаВыпускПродукции.Характеристика,
	|	ТаблицаВыпускПродукции.Партия,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРезервирование
	|			ТОГДА ТаблицаВыпускПродукции.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаВыпускПродукции.Спецификация,
	|	0,
	|	СУММА(ТаблицаВыпускПродукции.Количество)
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ТаблицаВыпускПродукции,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ТаблицаВыпускПродукции.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|	И НЕ(ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|				И ТаблицаВыпускПродукции.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВыпускПродукции.Финиш,
	|	ТаблицаВыпускПродукции.Организация,
	|	ТаблицаВыпускПродукции.СтруктурнаяЕдиница,
	|	ТаблицаВыпускПродукции.Номенклатура,
	|	ТаблицаВыпускПродукции.Характеристика,
	|	ТаблицаВыпускПродукции.Партия,
	|	ТаблицаВыпускПродукции.ЗаказПокупателя,
	|	ТаблицаВыпускПродукции.Спецификация";
	
	Запрос.УстановитьПараметр("ИспользоватьРезервирование",  СтруктураДополнительныеСвойства.УчетнаяПолитика.РезервированиеЗапасов);
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыпускПродукции", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура СформироватьТаблицаГрафикДвиженияЗапасовЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаРаботы.НомерСтроки КАК НомерСтроки,
	|	НАЧАЛОПЕРИОДА(ТаблицаРаботы.Финиш, ДЕНЬ) КАК Период,
	|	ТаблицаРаботы.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка) КАК Склад,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка) КАК ТипДвижения,
	|	ТаблицаРаботы.ЗаказПокупателя КАК Заказ,
	|	ТаблицаРаботы.Номенклатура КАК Номенклатура,
	|	ТаблицаРаботы.Характеристика КАК Характеристика,
	|	ТаблицаРаботы.Количество КАК Количество
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ТаблицаРаботы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаТовары.НомерСтроки,
	|	НАЧАЛОПЕРИОДА(ТаблицаТовары.Старт, ДЕНЬ),
	|	ТаблицаТовары.Организация,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.УчетПотребностиПоСкладам
	|				И ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ТаблицаТовары.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка),
	|	ТаблицаТовары.Заказ,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Количество
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаТовары,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	ТаблицаМатериалы.НомерСтроки,
	|	НАЧАЛОПЕРИОДА(ТаблицаМатериалы.Старт, ДЕНЬ),
	|	ТаблицаМатериалы.Организация,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.УчетПотребностиПоСкладам
	|			ТОГДА ТаблицаМатериалы.СтруктурнаяЕдиницаЗапасов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка),
	|	ТаблицаМатериалы.Заказ,
	|	ТаблицаМатериалы.Номенклатура,
	|	ТаблицаМатериалы.Характеристика,
	|	ТаблицаМатериалы.Количество
	|ИЗ
	|	ВременнаяТаблицаМатериалы КАК ТаблицаМатериалы,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаГрафикДвиженияЗапасов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура СформироватьТаблицаДоходыИРасходыЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	// Установка исключительной блокировки остатков подарочных сертификатов и создание временной таблицы
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПодарочныеСертификаты Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Документ КАК ПодарочныйСертификат,
		|	ТаблицаДокумента.НомерСертификата КАК НомерСертификата
		|ИЗ
		|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
		|ГДЕ
		|	НЕ ТаблицаДокумента.ЧастичноеПогашение
		|	И ТаблицаДокумента.ОплатаСертификатом
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.НомерСертификата,
		|	ТаблицаДокумента.Документ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			// Создадим пустую временную таблицу, чтобы избежать
			// ошибок при обращениях к ней в других процедурах
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НЕОПРЕДЕЛЕНО КАК ПодарочныйСертификат,
			|	НЕОПРЕДЕЛЕНО КАК НомерСертификата,
			|	0 КАК СуммаОстаток
			|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиСертификатов";
			Запрос.Выполнить();
			
		Иначе
		
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПодарочныеСертификаты");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
			
			Для Каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
			КонецЦикла;
			Блокировка.Заблокировать();
			
			Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерииНоменклатуры Тогда
				
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
				Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПокупателя);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВложенныйЗапрос.ПодарочныйСертификат КАК ПодарочныйСертификат,
				|	ВложенныйЗапрос.НомерСертификата КАК НомерСертификата,
				|	СУММА(ВложенныйЗапрос.СуммаОстаток) КАК СуммаОстаток
				|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиСертификатов
				|ИЗ
				|	(ВЫБРАТЬ
				|		ПодарочныеСертификатыОстатки.ПодарочныйСертификат КАК ПодарочныйСертификат,
				|		ПодарочныеСертификатыОстатки.НомерСертификата КАК НомерСертификата,
				|		ПодарочныеСертификатыОстатки.СуммаОстаток КАК СуммаОстаток
				|	ИЗ
				|		РегистрНакопления.ПодарочныеСертификаты.Остатки(, ) КАК ПодарочныеСертификатыОстатки
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаПредоплата КАК ВременнаяТаблицаПредоплата
				|			ПО ПодарочныеСертификатыОстатки.ПодарочныйСертификат = ВременнаяТаблицаПредоплата.Документ
				|				И ПодарочныеСертификатыОстатки.НомерСертификата = ВременнаяТаблицаПредоплата.НомерСертификата
				|				И (ВременнаяТаблицаПредоплата.ОплатаСертификатом)
				|				И (НЕ ВременнаяТаблицаПредоплата.ЧастичноеПогашение)
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		ПодарочныеСертификаты.ПодарочныйСертификат,
				|		ПодарочныеСертификаты.НомерСертификата,
				|		ВЫБОР
				|			КОГДА ПодарочныеСертификаты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
				|				ТОГДА ПодарочныеСертификаты.Сумма
				|			ИНАЧЕ -ПодарочныеСертификаты.Сумма
				|		КОНЕЦ
				|	ИЗ
				|		РегистрНакопления.ПодарочныеСертификаты КАК ПодарочныеСертификаты
				|	ГДЕ
				|		ПодарочныеСертификаты.Регистратор = &Ссылка) КАК ВложенныйЗапрос
				|
				|СГРУППИРОВАТЬ ПО
				|	ВложенныйЗапрос.ПодарочныйСертификат,
				|	ВложенныйЗапрос.НомерСертификата";
				
				Запрос.Выполнить();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаДоходыИРасходы.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДоходыИРасходы.Финиш КАК Период,
	|	ТаблицаДоходыИРасходы.Организация КАК Организация,
	|	ТаблицаДоходыИРасходы.ПодразделениеПродажи КАК СтруктурнаяЕдиница,
	|	ТаблицаДоходыИРасходы.Проект КАК Проект,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельностиПродажи КАК НаправлениеДеятельности,
	|	ТаблицаДоходыИРасходы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаДоходыИРасходы.СчетУчетаПродажи КАК СчетУчета,
	|	НЕОПРЕДЕЛЕНО КАК Аналитика,
	|	ВЫРАЗИТЬ(&ОтражениеДоходов КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	СУММА(ТаблицаДоходыИРасходы.Сумма) КАК СуммаДоходов,
	|	0 КАК СуммаРасходов,
	|	СУММА(ТаблицаДоходыИРасходы.Сумма) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ТаблицаДоходыИРасходы,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И ТаблицаДоходыИРасходы.Сумма <> 0
	|	И НЕ ТаблицаДоходыИРасходы.ЭтоАгентскаяУслуга
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДоходыИРасходы.Финиш,
	|	ТаблицаДоходыИРасходы.НомерСтроки,
	|	ТаблицаДоходыИРасходы.Организация,
	|	ТаблицаДоходыИРасходы.ПодразделениеПродажи,
	|	ТаблицаДоходыИРасходы.Проект,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельностиПродажи,
	|	ТаблицаДоходыИРасходы.ЗаказПокупателя,
	|	ТаблицаДоходыИРасходы.СчетУчетаПродажи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаДоходыИРасходы.НомерСтроки,
	|	ТаблицаДоходыИРасходы.Финиш,
	|	ТаблицаДоходыИРасходы.Организация,
	|	ТаблицаДоходыИРасходы.ПодразделениеПродажи,
	|	ТаблицаДоходыИРасходы.Проект,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельностиПродажи,
	|	ТаблицаДоходыИРасходы.ЗаказПокупателя,
	|	ТаблицаДоходыИРасходы.СчетУчетаПродажи,
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫРАЗИТЬ(&ОтражениеДоходов КАК СТРОКА(100)),
	|	СУММА(ТаблицаДоходыИРасходы.Сумма),
	|	0,
	|	СУММА(ТаблицаДоходыИРасходы.Сумма)
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаДоходыИРасходы,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И НЕ ТаблицаДоходыИРасходы.ТоварыНаКомиссии
	|	И НЕ ТаблицаДоходыИРасходы.ЭтоАгентскаяУслуга
	|	И ТаблицаДоходыИРасходы.Сумма <> 0
	|	И НЕ ТаблицаДоходыИРасходы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДоходыИРасходы.Финиш,
	|	ТаблицаДоходыИРасходы.НомерСтроки,
	|	ТаблицаДоходыИРасходы.Организация,
	|	ТаблицаДоходыИРасходы.ПодразделениеПродажи,
	|	ТаблицаДоходыИРасходы.Проект,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельностиПродажи,
	|	ТаблицаДоходыИРасходы.ЗаказПокупателя,
	|	ТаблицаДоходыИРасходы.СчетУчетаПродажи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	1,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Организация,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее),
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА &ПоложительнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ &ОтрицательнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ТаблицаДокумента.Валюта,
	|	&КурсоваяРазница,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА 0
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Дата КАК Дата,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Организация КАК Организация,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Валюта КАК Валюта,
	|		СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) КАК СуммаКурсовойРазницы
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаДокумента.Дата КАК Дата,
	|			ТаблицаДокумента.Организация КАК Организация,
	|			ТаблицаДокумента.Валюта КАК Валюта,
	|			ТаблицаДокумента.СуммаКурсовойРазницы КАК СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаДокумента.Дата,
	|			ТаблицаДокумента.Организация,
	|			ТаблицаДокумента.Валюта,
	|			ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК ТаблицаКурсовыхРазницРасчетыСПокупателями
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Дата,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Организация,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Валюта
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) >= 0.005
	|			ИЛИ СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) <= -0.005)) КАК ТаблицаДокумента";
	
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПодарочныеСертификаты Тогда
		Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерииНоменклатуры Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	4,
			|	0,
			|	ТаблицаДоходыИРасходы.Период,
			|	ТаблицаДоходыИРасходы.Организация,
			|	ТаблицаДоходыИРасходы.СтруктурнаяЕдиница,
			|	ТаблицаДоходыИРасходы.Проект,
			|	НЕОПРЕДЕЛЕНО,
			|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка),
			|	ТаблицаДоходыИРасходы.СчетУчетаДоходов,
			|	НЕОПРЕДЕЛЕНО,
			|	ВЫРАЗИТЬ(&ОтражениеДоходов КАК СТРОКА(100)),
			|	СУММА(ВЫБОР
			|			КОГДА ТаблицаДоходыИРасходы.ИспользоватьСерииНоменклатуры
			|				ТОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) - ТаблицаДоходыИРасходы.Сумма
			|			ИНАЧЕ ТаблицаДоходыИРасходы.Номинал - ТаблицаДоходыИРасходы.Сумма
			|		КОНЕЦ),
			|	0,
			|	СУММА(ВЫБОР
			|			КОГДА ТаблицаДоходыИРасходы.ИспользоватьСерииНоменклатуры
			|				ТОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) - ТаблицаДоходыИРасходы.Сумма
			|			ИНАЧЕ ТаблицаДоходыИРасходы.Номинал - ТаблицаДоходыИРасходы.Сумма
			|		КОНЕЦ)
			|ИЗ
			|	ВременнаяТаблицаПредоплата КАК ТаблицаДоходыИРасходы
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиСертификатов КАК ПодарочныеСертификатыОстатки
			|		ПО ТаблицаДоходыИРасходы.Документ = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
			|			И ТаблицаДоходыИРасходы.НомерСертификата = ПодарочныеСертификатыОстатки.НомерСертификата,
			|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
			|ГДЕ
			|	ТаблицаДоходыИРасходы.ОплатаСертификатом
			|	И НЕ ТаблицаДоходыИРасходы.ЧастичноеПогашение
			|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда
			|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаДоходыИРасходы.Организация,
			|	ТаблицаДоходыИРасходы.СтруктурнаяЕдиница,
			|	ТаблицаДоходыИРасходы.СчетУчетаДоходов,
			|	ТаблицаДоходыИРасходы.Проект,
			|	ТаблицаДоходыИРасходы.Период
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок,
			|	НомерСтроки";
			
		Иначе
			
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	4,
			|	0,
			|	ТаблицаДоходыИРасходы.Период,
			|	ТаблицаДоходыИРасходы.Организация,
			|	ТаблицаДоходыИРасходы.СтруктурнаяЕдиница,
			|	ТаблицаДоходыИРасходы.Проект,
			|	НЕОПРЕДЕЛЕНО,
			|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка),
			|	ТаблицаДоходыИРасходы.СчетУчетаДоходов,
			|	НЕОПРЕДЕЛЕНО,
			|	ВЫРАЗИТЬ(&ОтражениеДоходов КАК СТРОКА(100)),
			|	СУММА(ТаблицаДоходыИРасходы.Номинал - ТаблицаДоходыИРасходы.Сумма),
			|	0,
			|	СУММА(ТаблицаДоходыИРасходы.Номинал - ТаблицаДоходыИРасходы.Сумма)
			|ИЗ
			|	ВременнаяТаблицаПредоплата КАК ТаблицаДоходыИРасходы,
			|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
			|ГДЕ
			|	ТаблицаДоходыИРасходы.ОплатаСертификатом
			|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда
			|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаДоходыИРасходы.Организация,
			|	ТаблицаДоходыИРасходы.СтруктурнаяЕдиница,
			|	ТаблицаДоходыИРасходы.Проект,
			|	ТаблицаДоходыИРасходы.СчетУчетаДоходов,
			|	ТаблицаДоходыИРасходы.Период
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок,
			|	НомерСтроки";
			
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПоложительнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ОтрицательнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеРасходы);
	Запрос.УстановитьПараметр("ОтражениеДоходов", НСтр("ru='Отражение доходов'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Исключая));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходы", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура СформироватьТаблицаДоходыИРасходыОтложенныеЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПокупателя);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Финиш КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ТаблицаДокумента.НаправлениеДеятельностиПродажи КАК НаправлениеДеятельности,
	|	ТаблицаДокумента.Сумма КАК СуммаДоходов,
	|	ТаблицаДокумента.Сумма КАК НеРаспределено
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И ТаблицаДокумента.Сумма <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Финиш,
	|	ТаблицаДокумента.Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ТаблицаДокумента.НаправлениеДеятельностиПродажи,
	|	ТаблицаДокумента.Сумма,
	|	ТаблицаДокумента.Сумма КАК НеРаспределено
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И ТаблицаДокумента.Сумма <> 0
	|	И НЕ ТаблицаДокумента.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Организация КАК Организация,
	|	СУММА(ТаблицаДокумента.Сумма) КАК СуммаКСписанию
	|ИЗ
	|	ВременнаяТаблицаПредоплатаДляКассовогоМетода КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Статья КАК Статья
	|ИЗ
	|	ВременнаяТаблицаПредоплатаДляКассовогоМетода КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаЗапасыДоходыИРасходыОтложенные = МассивРезультатов[0].Выгрузить();
	ВыборкаРезультатаЗапроса = МассивРезультатов[1].Выбрать();
	
	ТаблицаПредоплатаДоходыИРасходыОтложенные = ТаблицаЗапасыДоходыИРасходыОтложенные.Скопировать();
	ТаблицаПредоплатаДоходыИРасходыОтложенные.Очистить();
	
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		СуммаКСписанию = ВыборкаРезультатаЗапроса.СуммаКСписанию;
		Для каждого СтрокаЗапасыДоходыИРасходыОтложенные Из ТаблицаЗапасыДоходыИРасходыОтложенные Цикл
			Если СуммаКСписанию = 0 Тогда
				Продолжить
			ИначеЕсли СтрокаЗапасыДоходыИРасходыОтложенные.СуммаДоходов <= СуммаКСписанию Тогда
				СтрокаПредоплатаДоходыИРасходыОтложенные = ТаблицаПредоплатаДоходыИРасходыОтложенные.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПредоплатаДоходыИРасходыОтложенные, СтрокаЗапасыДоходыИРасходыОтложенные);
				СуммаКСписанию = СуммаКСписанию - СтрокаЗапасыДоходыИРасходыОтложенные.СуммаДоходов;
			ИначеЕсли СтрокаЗапасыДоходыИРасходыОтложенные.СуммаДоходов > СуммаКСписанию Тогда
				СтрокаПредоплатаДоходыИРасходыОтложенные = ТаблицаПредоплатаДоходыИРасходыОтложенные.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПредоплатаДоходыИРасходыОтложенные, СтрокаЗапасыДоходыИРасходыОтложенные);
				СтрокаПредоплатаДоходыИРасходыОтложенные.СуммаДоходов = СуммаКСписанию;
				СуммаКСписанию = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого СтрокаПредоплатаДоходыИРасходыОтложенные Из ТаблицаПредоплатаДоходыИРасходыОтложенные Цикл
		СтрокаЗапасыДоходыИРасходыОтложенные = ТаблицаЗапасыДоходыИРасходыОтложенные.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗапасыДоходыИРасходыОтложенные, СтрокаПредоплатаДоходыИРасходыОтложенные);
		СтрокаЗапасыДоходыИРасходыОтложенные.ВидДвижения = ВидДвиженияНакопления.Расход;
		СтрокаЗапасыДоходыИРасходыОтложенные.НеРаспределено = -СтрокаПредоплатаДоходыИРасходыОтложенные.СуммаДоходов;
	КонецЦикла;
	
	ВыборкаРезультатаЗапроса = МассивРезультатов[2].Выбрать();
	
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		Статья = ВыборкаРезультатаЗапроса.Статья;
	Иначе
		Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Период КАК Период,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Документ КАК Документ,
	|	Таблица.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&Статья КАК Статья,
	|	Таблица.СуммаДоходов КАК СуммаДоходов
	|ПОМЕСТИТЬ ВременнаяТаблицаПредоплатаДоходыИРасходыОтложенные
	|ИЗ
	|	&Таблица КАК Таблица";
	Запрос.УстановитьПараметр("Таблица", ТаблицаПредоплатаДоходыИРасходыОтложенные);
	Запрос.УстановитьПараметр("Статья", Статья);
	
	Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыОтложенные", ТаблицаЗапасыДоходыИРасходыОтложенные);
	
КонецПроцедуры

Процедура СформироватьТаблицаДоходыИРасходыНераспределенныеЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	Если СтруктураДополнительныеСвойства.СпособЗачетаПредоплаты <> Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто
		И СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПодарочныеСертификаты Тогда
	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ТаблицаДокумента.Период КАК Период,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	НЕОПРЕДЕЛЕНО КАК Документ,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей) КАК Статья,
		|	ТаблицаДокумента.Сумма КАК СуммаДоходов
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ТаблицаДокумента,
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|ГДЕ
		|	&КассовыйМетодУчетаДоходовИРасходов
		|	И ТаблицаДокумента.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда
		|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		
		Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерииНоменклатуры Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
			|	ТаблицаДокумента.Финиш,
			|	ТаблицаДокумента.Организация,
			|	ВЫБОР
			|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
			|			ТОГДА ТаблицаДокумента.Документ
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ,
			|	ТаблицаДокумента.Статья,
			|	ВЫБОР
			|		КОГДА НЕ ТаблицаДокумента.ОплатаСертификатом
			|			ТОГДА ТаблицаДокумента.Сумма
			|		КОГДА ТаблицаДокумента.ЧастичноеПогашение
			|			ТОГДА ТаблицаДокумента.Сумма
			|		КОГДА ТаблицаДокумента.ИспользоватьСерииНоменклатуры
			|			ТОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0)
			|		ИНАЧЕ ТаблицаДокумента.Номинал
			|	КОНЕЦ
			|ИЗ
			|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиСертификатов КАК ПодарочныеСертификатыОстатки
			|		ПО ТаблицаДокумента.Документ = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
			|			И ТаблицаДокумента.НомерСертификата = ПодарочныеСертификатыОстатки.НомерСертификата,
			|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
			|ГДЕ
			|	&КассовыйМетодУчетаДоходовИРасходов
			|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
			|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация";
			
		Иначе
			
			Запрос.Текст = Запрос.Текст + "
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
			|	ТаблицаДокумента.Финиш,
			|	ТаблицаДокумента.Организация,
			|	ВЫБОР
			|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
			|			ТОГДА ТаблицаДокумента.Документ
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ,
			|	ТаблицаДокумента.Статья,
			|	ВЫБОР
			|		КОГДА НЕ ТаблицаДокумента.ОплатаСертификатом
			|			ТОГДА ТаблицаДокумента.Сумма
			|		ИНАЧЕ ТаблицаДокумента.Номинал
			|	КОНЕЦ
			|ИЗ
			|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента,
			|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
			|ГДЕ
			|	&КассовыйМетодУчетаДоходовИРасходов
			|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
			|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация";
			
		КонецЕсли;
			
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	ВременнаяТаблицаШапка.Финиш КАК Период,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
		|			ТОГДА ТаблицаДокумента.Документ
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Документ,
		|	ТаблицаДокумента.Статья КАК Статья,
		|	ТаблицаДокумента.Сумма КАК СуммаДоходов
		|ИЗ
		|	ВременнаяТаблицаПредоплатаДляКассовогоМетода КАК ТаблицаДокумента,
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|ГДЕ
		|	&КассовыйМетодУчетаДоходовИРасходов
		|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
		|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация";
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыНераспределенные", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура СформироватьТаблицаДоходыИРасходыКассовыйМетодЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПокупателя);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей) КАК Статья,
	|	ТаблицаДокумента.Сумма КАК СуммаДоходов
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И ТаблицаДокумента.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаШапка.Финиш,
	|	ТаблицаДокумента.Организация,
	|	НЕОПРЕДЕЛЕНО,
	|	ТаблицаДокумента.Статья,
	|	-ТаблицаДокумента.Сумма
	|ИЗ
	|	ВременнаяТаблицаПредоплатаДляКассовогоМетода КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Период,
	|	Таблица.Организация,
	|	Таблица.НаправлениеДеятельности,
	|	Таблица.Статья,
	|	Таблица.СуммаДоходов
	|ИЗ
	|	ВременнаяТаблицаПредоплатаДоходыИРасходыОтложенные КАК Таблица";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыКассовыйМетод", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура СформироватьТаблицаЗаказыПокупателейЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗаказыПокупателей.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗаказыПокупателей.Период КАК Период,
	|	ТаблицаЗаказыПокупателей.Организация КАК Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика КАК Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка) КАК Склад,
	|	СУММА(ТаблицаЗаказыПокупателей.КоличествоПлан) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ТаблицаЗаказыПокупателей
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказыПокупателей.Период,
	|	ТаблицаЗаказыПокупателей.Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗаказыПокупателей.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаЗаказыПокупателей.Период,
	|	ТаблицаЗаказыПокупателей.Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.УчетПотребностиПоСкладам
	|				И ТаблицаЗаказыПокупателей.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ТаблицаЗаказыПокупателей.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ,
	|	СУММА(ТаблицаЗаказыПокупателей.Количество)
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаЗаказыПокупателей,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказыПокупателей.Период,
	|	ТаблицаЗаказыПокупателей.Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.УчетПотребностиПоСкладам
	|				И ТаблицаЗаказыПокупателей.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ТаблицаЗаказыПокупателей.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗаказыПокупателей.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаЗаказыПокупателей.Финиш,
	|	ТаблицаЗаказыПокупателей.Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя,
	|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка),
	|	СУММА(ТаблицаЗаказыПокупателей.Количество)
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ТаблицаЗаказыПокупателей,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказыПокупателей.Финиш,
	|	ТаблицаЗаказыПокупателей.Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗаказыПокупателей.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаЗаказыПокупателей.Финиш,
	|	ТаблицаЗаказыПокупателей.Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.УчетПотребностиПоСкладам
	|				И ТаблицаЗаказыПокупателей.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ТаблицаЗаказыПокупателей.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ,
	|	СУММА(ТаблицаЗаказыПокупателей.Количество)
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаЗаказыПокупателей,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказыПокупателей.Финиш,
	|	ТаблицаЗаказыПокупателей.Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.УчетПотребностиПоСкладам
	|				И ТаблицаЗаказыПокупателей.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ТаблицаЗаказыПокупателей.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказыПокупателей", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура СформироватьТаблицаЗапасыНаСкладахЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыНаСкладах.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасыНаСкладах.Финиш КАК Период,
	|	ТаблицаЗапасыНаСкладах.Организация КАК Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия КАК Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасыНаСкладах.Ячейка КАК Ячейка,
	|	СУММА(ТаблицаЗапасыНаСкладах.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаЗапасыНаСкладах,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	НЕ ТаблицаЗапасыНаСкладах.ОрдерныйСклад
	|	И (ТаблицаЗапасыНаСкладах.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ИЛИ ТаблицаЗапасыНаСкладах.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыНаСкладах.Финиш,
	|	ТаблицаЗапасыНаСкладах.Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница,
	|	ТаблицаЗапасыНаСкладах.Ячейка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыНаСкладах.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаЗапасыНаСкладах.Финиш,
	|	ТаблицаЗапасыНаСкладах.Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиницаЗапасов,
	|	ТаблицаЗапасыНаСкладах.Ячейка,
	|	СУММА(ТаблицаЗапасыНаСкладах.Количество)
	|ИЗ
	|	ВременнаяТаблицаМатериалы КАК ТаблицаЗапасыНаСкладах,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	НЕ ТаблицаЗапасыНаСкладах.ОрдерныйСклад
	|	И (ТаблицаЗапасыНаСкладах.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ИЛИ ТаблицаЗапасыНаСкладах.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыНаСкладах.Финиш,
	|	ТаблицаЗапасыНаСкладах.Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиницаЗапасов,
	|	ТаблицаЗапасыНаСкладах.Ячейка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыНаСкладах.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаЗапасыНаСкладах.Финиш,
	|	ТаблицаЗапасыНаСкладах.Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница,
	|	ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка),
	|	СУММА(ТаблицаЗапасыНаСкладах.Количество)
	|ИЗ
	|	ВременнаяТаблицаМатериалы КАК ТаблицаЗапасыНаСкладах,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	(ТаблицаЗапасыНаСкладах.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ИЛИ ТаблицаЗапасыНаСкладах.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыНаСкладах.Финиш,
	|	ТаблицаЗапасыНаСкладах.Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыНаСкладах.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаЗапасыНаСкладах.Финиш,
	|	ТаблицаЗапасыНаСкладах.Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница,
	|	ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка),
	|	СУММА(ТаблицаЗапасыНаСкладах.Количество)
	|ИЗ
	|	ВременнаяТаблицаМатериалы КАК ТаблицаЗапасыНаСкладах,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	(ТаблицаЗапасыНаСкладах.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ИЛИ ТаблицаЗапасыНаСкладах.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыНаСкладах.Финиш,
	|	ТаблицаЗапасыНаСкладах.Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыНаСкладах", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура СформироватьТаблицаЗапасыВРазрезеГТДЗаказНаряд(СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыНаСкладах.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасыНаСкладах.Период КАК Период,
	|	ТаблицаЗапасыНаСкладах.Организация КАК Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия КАК Партия,
	|	ТаблицаЗапасыНаСкладах.НомерГТД КАК НомерГТД,
	|	ТаблицаЗапасыНаСкладах.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СУММА(ТаблицаЗапасыНаСкладах.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаЗапасыНаСкладах,
	|	ВременнаяТаблицаШапка КАК ТаблицаШапка
	|ГДЕ
	|	ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|	И ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|	И ТаблицаЗапасыНаСкладах.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И ТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыНаСкладах.Период,
	|	ТаблицаЗапасыНаСкладах.Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия,
	|	ТаблицаЗапасыНаСкладах.НомерГТД,
	|	ТаблицаЗапасыНаСкладах.СтранаПроисхождения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаМатериалыНаСкладах.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаМатериалыНаСкладах.Период,
	|	ТаблицаМатериалыНаСкладах.Организация,
	|	ТаблицаМатериалыНаСкладах.Номенклатура,
	|	ТаблицаМатериалыНаСкладах.Характеристика,
	|	ТаблицаМатериалыНаСкладах.Партия,
	|	ТаблицаМатериалыНаСкладах.НомерГТД,
	|	ТаблицаМатериалыНаСкладах.СтранаПроисхождения,
	|	СУММА(ТаблицаМатериалыНаСкладах.Количество)
	|ИЗ
	|	ВременнаяТаблицаМатериалы КАК ТаблицаМатериалыНаСкладах,
	|	ВременнаяТаблицаШапка КАК ТаблицаШапка
	|ГДЕ
	|	ТаблицаМатериалыНаСкладах.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|	И ТаблицаМатериалыНаСкладах.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|	И ТаблицаМатериалыНаСкладах.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И ТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаМатериалыНаСкладах.Период,
	|	ТаблицаМатериалыНаСкладах.Организация,
	|	ТаблицаМатериалыНаСкладах.Номенклатура,
	|	ТаблицаМатериалыНаСкладах.Характеристика,
	|	ТаблицаМатериалыНаСкладах.Партия,
	|	ТаблицаМатериалыНаСкладах.НомерГТД,
	|	ТаблицаМатериалыНаСкладах.СтранаПроисхождения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыВРазрезеГТД", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура СформироватьТаблицаЗапасыКРасходуСоСкладовЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Количество КАК Количество
	|ИЗ
	|	ВременнаяТаблицаМатериалы КАК ТаблицаЗапасы,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ТаблицаЗапасы.ОрдерныйСклад
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.Количество
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаЗапасы,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ТаблицаЗапасы.ОрдерныйСклад
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыКРасходуСоСкладов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура СформироватьТаблицаНачисленияИУдержанияЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНачисленияИУдержания.Организация КАК Организация,
	|	ТаблицаНачисленияИУдержания.Период КАК Период,
	|	ТаблицаНачисленияИУдержания.ПериодРегистрации КАК ПериодРегистрации,
	|	ТаблицаНачисленияИУдержания.Валюта КАК Валюта,
	|	ТаблицаНачисленияИУдержания.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаНачисленияИУдержания.Сотрудник КАК Сотрудник,
	|	ТаблицаНачисленияИУдержания.ДатаНачала КАК ДатаНачала,
	|	ТаблицаНачисленияИУдержания.ДатаОкончания КАК ДатаОкончания,
	|	ТаблицаНачисленияИУдержания.ОтработаноДней КАК ОтработаноДней,
	|	ТаблицаНачисленияИУдержания.ОтработаноЧасов КАК ОтработаноЧасов,
	|	ТаблицаНачисленияИУдержания.Размер КАК Размер,
	|	ТаблицаНачисленияИУдержания.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
	|	ТаблицаНачисленияИУдержания.СуммаВал КАК СуммаВал,
	|	ТаблицаНачисленияИУдержания.Сумма КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаИсполнители КАК ТаблицаНачисленияИУдержания";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаНачисленияИУдержания", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура СформироватьТаблицаРасчетыСПерсоналомЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРасчетыСПерсоналом.Организация КАК Организация,
	|	ТаблицаРасчетыСПерсоналом.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаРасчетыСПерсоналом.ПериодРегистрации КАК ПериодРегистрации,
	|	ТаблицаРасчетыСПерсоналом.Валюта КАК Валюта,
	|	ТаблицаРасчетыСПерсоналом.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаРасчетыСПерсоналом.Сотрудник КАК Сотрудник,
	|	ТаблицаРасчетыСПерсоналом.Сумма КАК Сумма,
	|	ТаблицаРасчетыСПерсоналом.СуммаВал КАК СуммаВал,
	|	ТаблицаРасчетыСПерсоналом.СчетУчета КАК СчетУчета,
	|	&НачислениеЗарплаты КАК СодержаниеПроводки
	|ИЗ
	|	ВременнаяТаблицаИсполнители КАК ТаблицаРасчетыСПерсоналом";
	
	Запрос.УстановитьПараметр("НачислениеЗарплаты", НСтр("ru = 'Начисление зарплаты'"));
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПерсоналом", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажи()

Процедура СформироватьТаблицаПродажиЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродажи.Финиш КАК Период,
	|	ТаблицаПродажи.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка) КАК Склад,
	|	ТаблицаПродажи.Номенклатура КАК Номенклатура,
	|	ТаблицаПродажи.Характеристика КАК Характеристика,
	|	ТаблицаПродажи.Партия КАК Партия,
	|	ТаблицаПродажи.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаПродажи.Документ КАК Документ,
	|	ТаблицаПродажи.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаПродажи.СтруктурнаяЕдиница КАК Подразделение,
	|	ТаблицаПродажи.Проект КАК Проект,
	|	ТаблицаПродажи.Ответственный КАК Ответственный,
	|	СУММА(ТаблицаПродажи.Количество) КАК Количество,
	|	СУММА(ТаблицаПродажи.СуммаНДСПродажи) КАК СуммаНДС,
	|	СУММА(ТаблицаПродажи.Сумма) КАК Сумма,
	|	СУММА(ТаблицаПродажи.Сумма + ТаблицаПродажи.СуммаСкидкиНаценки + ТаблицаПродажи.СуммаАвтоматическойСкидки) КАК СуммаБезСкидки,
	|	0 КАК Себестоимость,
	|	ТаблицаПродажи.НоменклатураНабора КАК НоменклатураНабора,
	|	ТаблицаПродажи.ХарактеристикаНабора КАК ХарактеристикаНабора
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ТаблицаПродажи,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродажи.Финиш,
	|	ТаблицаПродажи.Организация,
	|	ТаблицаПродажи.Номенклатура,
	|	ТаблицаПродажи.Характеристика,
	|	ТаблицаПродажи.Партия,
	|	ТаблицаПродажи.ЗаказПокупателя,
	|	ТаблицаПродажи.Документ,
	|	ТаблицаПродажи.СтавкаНДС,
	|	ТаблицаПродажи.СтруктурнаяЕдиница,
	|	ТаблицаПродажи.Проект,
	|	ТаблицаПродажи.Ответственный,
	|	ТаблицаПродажи.НоменклатураНабора,
	|	ТаблицаПродажи.ХарактеристикаНабора
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПродажи.Финиш,
	|	ТаблицаПродажи.Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаПродажи.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ТаблицаПродажи.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаПродажи.Номенклатура,
	|	ТаблицаПродажи.Характеристика,
	|	ТаблицаПродажи.Партия,
	|	ТаблицаПродажи.ЗаказПокупателя,
	|	ТаблицаПродажи.Документ,
	|	ТаблицаПродажи.СтавкаНДС,
	|	ТаблицаПродажи.ПодразделениеПродажи,
	|	ТаблицаПродажи.Проект,
	|	ТаблицаПродажи.Ответственный,
	|	СУММА(ТаблицаПродажи.Количество),
	|	СУММА(ТаблицаПродажи.СуммаНДСЗакупкиПродажи),
	|	СУММА(ТаблицаПродажи.Сумма),
	|	ТаблицаПродажи.Сумма + ТаблицаПродажи.СуммаСкидкиНаценки + ТаблицаПродажи.СуммаАвтоматическойСкидки,
	|	0,
	|	ТаблицаПродажи.НоменклатураНабора,
	|	ТаблицаПродажи.ХарактеристикаНабора
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаПродажи,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И НЕ ТаблицаПродажи.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродажи.Финиш,
	|	ТаблицаПродажи.Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаПродажи.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ТаблицаПродажи.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаПродажи.Номенклатура,
	|	ТаблицаПродажи.Характеристика,
	|	ТаблицаПродажи.Партия,
	|	ТаблицаПродажи.ЗаказПокупателя,
	|	ТаблицаПродажи.Документ,
	|	ТаблицаПродажи.СтавкаНДС,
	|	ТаблицаПродажи.ПодразделениеПродажи,
	|	ТаблицаПродажи.Проект,
	|	ТаблицаПродажи.Ответственный,
	|	ТаблицаПродажи.НоменклатураНабора,
	|	ТаблицаПродажи.ХарактеристикаНабора,
	|	ТаблицаПродажи.Сумма + ТаблицаПродажи.СуммаСкидкиНаценки + ТаблицаПродажи.СуммаАвтоматическойСкидки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажи", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура СформироватьТаблицаПотребностьВЗапасахЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПотребностьВЗапасах.НомерСтроки КАК НомерСтроки,
	|	НАЧАЛОПЕРИОДА(ТаблицаПотребностьВЗапасах.Старт, ДЕНЬ) КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаПотребностьВЗапасах.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.УчетПотребностиПоСкладам
	|			ТОГДА ТаблицаПотребностьВЗапасах.СтруктурнаяЕдиницаЗапасов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка) КАК ТипДвижения,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРезервирование
	|				ИЛИ ВременнаяТаблицаШапка.УчетПотребностиПоЗаказам
	|			ТОГДА ТаблицаПотребностьВЗапасах.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка) КАК ЗаказНаПроизводство,
	|	ТаблицаПотребностьВЗапасах.Номенклатура КАК Номенклатура,
	|	ТаблицаПотребностьВЗапасах.Характеристика КАК Характеристика,
	|	ТаблицаПотребностьВЗапасах.Количество КАК Количество
	|ИЗ
	|	ВременнаяТаблицаМатериалы КАК ТаблицаПотребностьВЗапасах,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПотребностьВЗапасах.НомерСтроки,
	|	НАЧАЛОПЕРИОДА(ТаблицаПотребностьВЗапасах.Финиш, ДЕНЬ),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаПотребностьВЗапасах.Организация,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.УчетПотребностиПоСкладам
	|			ТОГДА ТаблицаПотребностьВЗапасах.СтруктурнаяЕдиницаЗапасов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка),
	|	ВЫБОР
	|		КОГДА &ИспользоватьРезервирование
	|				ИЛИ ВременнаяТаблицаШапка.УчетПотребностиПоЗаказам
	|			ТОГДА ТаблицаПотребностьВЗапасах.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка),
	|	ТаблицаПотребностьВЗапасах.Номенклатура,
	|	ТаблицаПотребностьВЗапасах.Характеристика,
	|	ТаблицаПотребностьВЗапасах.Количество
	|ИЗ
	|	ВременнаяТаблицаМатериалы КАК ТаблицаПотребностьВЗапасах,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПотребностьВЗапасах.НомерСтроки";
	
	Запрос.УстановитьПараметр("ИспользоватьРезервирование",  СтруктураДополнительныеСвойства.УчетнаяПолитика.РезервированиеЗапасов);
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПотребностьВЗапасах", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура СформироватьТаблицаЗапасыРаботыЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Финиш КАК Период,
	|	ТаблицаЗапасы.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.Документ КАК Документ,
	|	ТаблицаЗапасы.Документ КАК ДокументПродажи,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПродажи,
	|	ТаблицаЗапасы.ПодразделениеПродажи КАК Подразделение,
	|	ТаблицаЗапасы.Ответственный КАК Ответственный,
	|	ТаблицаЗапасы.НаправлениеДеятельностиПродажи КАК НаправлениеДеятельности,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость КАК СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРезервирование
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	0 КАК Сумма,
	|	СУММА(ТаблицаЗапасы.СуммаНДС) КАК СуммаНДС,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость КАК СчетДт,
	|	ТаблицаЗапасы.СчетУчета КАК СчетКт,
	|	ВЫРАЗИТЬ(&СборкаЗапасов КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	ВЫРАЗИТЬ(&СборкаЗапасов КАК СТРОКА(100)) КАК Содержание,
	|	ЛОЖЬ КАК ЗатратыНаВыпуск,
	|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка) КАК КоррСтруктурнаяЕдиница,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка) КАК КоррСчетУчета,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК КоррНоменклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК КоррХарактеристика,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК КоррПартия,
	|	НЕОПРЕДЕЛЕНО КАК КоррЗаказПокупателя,
	|	ТаблицаЗапасы.Спецификация КАК Спецификация,
	|	ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка) КАК КоррСпецификация,
	|	ТаблицаЗапасы.ТипНоменклатуры КАК ТипНоменклатуры
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ТаблицаЗапасы,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Финиш,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СценарийПланирования,
	|	ТаблицаЗапасы.Документ,
	|	ТаблицаЗапасы.НаправлениеДеятельностиПродажи,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.Спецификация,
	|	ТаблицаЗапасы.СтавкаНДС,
	|	ТаблицаЗапасы.Ответственный,
	|	ТаблицаЗапасы.ПодразделениеПродажи,
	|	ТаблицаЗапасы.ТипНоменклатуры,
	|	ТаблицаЗапасы.Документ,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.СчетУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.Партия КАК Партия,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.СуммаОстаток КАК Сумма
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя, ЗаказНаПроизводство) В
	|					(ВЫБРАТЬ
	|						ТаблицаРаботы.Организация,
	|						ТаблицаРаботы.СтруктурнаяЕдиница,
	|						ТаблицаРаботы.СчетУчета,
	|						ТаблицаРаботы.Номенклатура,
	|						ТаблицаРаботы.Характеристика,
	|						ТаблицаРаботы.Партия,
	|						&Ссылка,
	|						ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|					ИЗ
	|						ВременнаяТаблицаРаботы КАК ТаблицаРаботы)) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Запасы.Номенклатура,
	|		Запасы.Характеристика,
	|		Запасы.Партия,
	|		СУММА(ВЫБОР
	|				КОГДА Запасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					ТОГДА Запасы.Сумма
	|				ИНАЧЕ -Запасы.Сумма
	|			КОНЕЦ)
	|	ИЗ
	|		РегистрНакопления.Запасы КАК Запасы
	|	ГДЕ
	|		Запасы.Регистратор = &Ссылка
	|		И (Запасы.Организация, Запасы.СтруктурнаяЕдиница, Запасы.СчетУчета, Запасы.Номенклатура, Запасы.Характеристика, Запасы.Партия, Запасы.ЗаказПокупателя, Запасы.ЗаказНаПроизводство) В
	|				(ВЫБРАТЬ
	|					ТаблицаРаботы.Организация,
	|					ТаблицаРаботы.СтруктурнаяЕдиница,
	|					ТаблицаРаботы.СчетУчета,
	|					ТаблицаРаботы.Номенклатура,
	|					ТаблицаРаботы.Характеристика,
	|					ТаблицаРаботы.Партия,
	|					&Ссылка,
	|					ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|				ИЗ
	|					ВременнаяТаблицаРаботы КАК ТаблицаРаботы)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Запасы.Номенклатура,
	|		Запасы.Характеристика,
	|		Запасы.Партия) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Партия";
	
	Запрос.УстановитьПараметр("СборкаЗапасов", НСтр("ru = 'Сборка запасов'"));
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПокупателя);
	Запрос.УстановитьПараметр("ИспользоватьРезервирование",  СтруктураДополнительныеСвойства.УчетнаяПолитика.РезервированиеЗапасов);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаОстатки = РезультатЗапроса.Получить(1).Выгрузить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", РезультатЗапроса.Получить(0).Выгрузить());
	
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	ВременнаяТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.СкопироватьКолонки();
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы[н];
		
		КоличествоТребуется = СтрокаТаблицаЗапасы.Количество;
		
		Если КоличествоТребуется > 0 Тогда
			
			// Добавим выпуск работы.
			СтрокаТаблицыПриход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыПриход.ДокументПродажи = Неопределено;
			СтрокаТаблицыПриход.ЗаказПродажи = Неопределено;
			СтрокаТаблицыПриход.Подразделение = Неопределено;
			СтрокаТаблицыПриход.Ответственный = Неопределено;
			
			СуммаКСписанию = 0;
			
			// Определим накопленную стоимость работы
			СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Партия");
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицаЗапасы);
			СтрокиОстатки = ТаблицаОстатки.НайтиСтроки(СтруктураОтбора);
			Если СтрокиОстатки.Количество()>0 Тогда
				СуммаКСписанию = СтрокиОстатки[0].Сумма;
			КонецЕсли; 
			
			Если СуммаКСписанию <> 0 Тогда
				
				// Сформируем проводки.
				СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
				СтрокаТаблицаУправленческий.Сумма = СуммаКСписанию;
				СтрокаТаблицаУправленческий.Содержание = НСтр("ru = 'Списание запасов'");
						
				// Продвигаем доходы и расходы.
				СтрокаДоходыИРасходы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходы, СтрокаТаблицаЗапасы);
				
				СтрокаДоходыИРасходы.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаДоходыИРасходы.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
				СтрокаДоходыИРасходы.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаСебестоимость;
				СтрокаДоходыИРасходы.СуммаДоходов = 0;
				СтрокаДоходыИРасходы.СуммаРасходов = СуммаКСписанию;
				СтрокаДоходыИРасходы.Сумма = СуммаКСписанию;
				
				СтрокаДоходыИРасходы.Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылкаЗаказПокупателя, "Проект");
				
				СтрокаДоходыИРасходы.СодержаниеПроводки = НСтр("ru='Отражение расходов'");
				
				// Продвигаем себестоимость продаж.
				СтрокаПродажи = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПродажи, СтрокаТаблицаЗапасы);
				СтрокаПродажи.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
				СтрокаПродажи.Количество = 0;
				СтрокаПродажи.Сумма = 0;
				СтрокаПродажи.СуммаНДС = 0;
				СтрокаПродажи.Себестоимость = СуммаКСписанию;
				
			КонецЕсли; 
			
			// Добавим реализацию работы.
			СтрокаТаблицыРасход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
			СтрокаТаблицыРасход.СодержаниеПроводки = НСтр("ru = 'Списание запасов'");
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
				
		КонецЕсли;
			
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы = ВременнаяТаблицаЗапасы;
	
КонецПроцедуры

Процедура СформироватьТаблицаЗапасыМатериалыЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	// Автоматическое списание
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаЗапасы.Финиш КАК Период,
	|	ТаблицаЗапасы.Период КАК ДатаДокумента,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|	ТаблицаЗапасы.СчетУчета КАК КоррСчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ТаблицаЗапасы.ВариантЗавершения КАК ВариантЗавершения,
	|	ТаблицаЗапасы.Номенклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Характеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Партия КАК КоррПартия,
	|	ТаблицаЗапасы.Спецификация КАК Спецификация,
	|	ТаблицаЗапасы.КоррСпецификация КАК КоррСпецификация,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК КоррЗаказПокупателя,
	|	НЕОПРЕДЕЛЕНО КАК ДокументПродажи,
	|	НЕОПРЕДЕЛЕНО КАК ЗаказПродажи,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО КАК Ответственный,
	|	ТаблицаЗапасы.СчетУчета КАК СчетДт,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетКт,
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда,
	|	&ПеремещениеЗапасов КАК Содержание,
	|	&ПеремещениеЗапасов КАК СодержаниеПроводки,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Резерв) КАК Резерв,
	|	СУММА(ТаблицаЗапасы.РезервОтгрузка) КАК РезервОтгрузка,
	|	СУММА(ТаблицаЗапасы.Сумма) КАК Сумма,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость
	|ИЗ
	|	ВременнаяТаблицаМатериалы КАК ТаблицаЗапасы,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)

	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Финиш,
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.СостояниеЗаказа,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СценарийПланирования,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.СчетУчетаЗапасов,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.Спецификация,
	|	ТаблицаЗапасы.КоррСпецификация,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.КоррСчетУчета,
	|	ТаблицаЗапасы.ВариантЗавершения,
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.СчетУчетаЗапасов";
	
	Запрос.УстановитьПараметр("ПеремещениеЗапасов", НСтр("ru = 'Перемещение запасов'"));
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыПеремещение", Запрос.Выполнить().Выгрузить());
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация КАК Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|		ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|		ТаблицаЗапасы.Характеристика КАК Характеристика,
	|		ТаблицаЗапасы.Партия КАК Партия,
	|		ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|	ИЗ
	|		ВременнаяТаблицаМатериалы КАК ТаблицаЗапасы,
	|		ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|	ГДЕ
	|		ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|		И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов,
	|		ТаблицаЗапасы.СчетУчетаЗапасов,
	|		ТаблицаЗапасы.Номенклатура,
	|		ТаблицаЗапасы.Характеристика,
	|		ТаблицаЗапасы.Партия,
	|		ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	ИЗ
	|		ВременнаяТаблицаМатериалы КАК ТаблицаЗапасы,
	|		ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|	ГДЕ
	|		ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|		И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)) КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;

	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|		СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ТаблицаЗапасы.ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаМатериалы КАК ТаблицаЗапасы,
	|						ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|					ГДЕ
	|						ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|						И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|						И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен))) КАК ЗапасыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя,
	|		СУММА(ЗапасыОстатки.КоличествоОстаток),
	|		СУММА(ЗапасыОстатки.СуммаОстаток)
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ИЗ
	|						ВременнаяТаблицаМатериалы КАК ТаблицаЗапасы,
	|						ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|					ГДЕ
	|						ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|						И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен))) КАК ЗапасыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия,
	|	ЗапасыОстатки.ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПокупателя);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.Ссылка.Финиш, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.Ссылка.Финиш);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапасыОстаткиПеремещение = РезультатЗапроса.Выгрузить();
	ТаблицаЗапасыОстаткиПеремещение.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
	
	ВременнаяТаблицаЗапасыПеремещение = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение.СкопироватьКолонки();
	
	РезервированиеЗапасов = СтруктураДополнительныеСвойства.УчетнаяПолитика.РезервированиеЗапасов;
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасыПеремещение = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение[н];
		
		СтруктураДляПоискаПеремещение = Новый Структура;
		СтруктураДляПоискаПеремещение.Вставить("Организация", СтрокаТаблицаЗапасыПеремещение.Организация);
		СтруктураДляПоискаПеремещение.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасыПеремещение.СтруктурнаяЕдиница);
		СтруктураДляПоискаПеремещение.Вставить("СчетУчета", СтрокаТаблицаЗапасыПеремещение.СчетУчета);
		СтруктураДляПоискаПеремещение.Вставить("Номенклатура", СтрокаТаблицаЗапасыПеремещение.Номенклатура);
		СтруктураДляПоискаПеремещение.Вставить("Характеристика", СтрокаТаблицаЗапасыПеремещение.Характеристика);
		СтруктураДляПоискаПеремещение.Вставить("Партия", СтрокаТаблицаЗапасыПеремещение.Партия);
		
		КоличествоТребуетсяРезервПеремещение = СтрокаТаблицаЗапасыПеремещение.Резерв;
		КоличествоРезервОтгрузкаПеремещение = СтрокаТаблицаЗапасыПеремещение.РезервОтгрузка;
		КоличествоТребуетсяСвободныйОстатокПеремещение = СтрокаТаблицаЗапасыПеремещение.Количество;
		
		Если КоличествоТребуетсяРезервПеремещение > 0 Тогда
			
			// Резервирование
			
			СтрокаТаблицаЗапасыПеремещение = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение[н];
			
			КоличествоТребуетсяСвободныйОстатокПеремещение = КоличествоТребуетсяСвободныйОстатокПеремещение - КоличествоТребуетсяРезервПеремещение;
			
			СтруктураДляПоискаПеремещение.Вставить("ЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
			
			МассивСтрокОстатковПеремещение = ТаблицаЗапасыОстаткиПеремещение.НайтиСтроки(СтруктураДляПоискаПеремещение);
			
			КоличествоОстатокПеремещение = 0;
			СуммаОстатокПеремещение = 0;
			
			Если МассивСтрокОстатковПеремещение.Количество() > 0 Тогда
				КоличествоОстатокПеремещение = МассивСтрокОстатковПеремещение[0].КоличествоОстаток;
				СуммаОстатокПеремещение = МассивСтрокОстатковПеремещение[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстатокПеремещение > 0 И КоличествоОстатокПеремещение > КоличествоТребуетсяРезервПеремещение Тогда
				
				СуммаКСписаниюПеремещение = Окр(СуммаОстатокПеремещение * КоличествоТребуетсяРезервПеремещение / КоличествоОстатокПеремещение , 2, 1);
				
				МассивСтрокОстатковПеремещение[0].КоличествоОстаток = МассивСтрокОстатковПеремещение[0].КоличествоОстаток - КоличествоТребуетсяРезервПеремещение;
				МассивСтрокОстатковПеремещение[0].СуммаОстаток = МассивСтрокОстатковПеремещение[0].СуммаОстаток - СуммаКСписаниюПеремещение;
				
			ИначеЕсли КоличествоОстатокПеремещение = КоличествоТребуетсяРезервПеремещение Тогда
				
				СуммаКСписаниюПеремещение = СуммаОстатокПеремещение;
				
				МассивСтрокОстатковПеремещение[0].КоличествоОстаток = 0;
				МассивСтрокОстатковПеремещение[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписаниюПеремещение = 0;
			КонецЕсли;
			
			// Расход.
			СтрокаТаблицыРасходПеремещение = ВременнаяТаблицаЗапасыПеремещение.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасходПеремещение, СтрокаТаблицаЗапасыПеремещение);
			
			СтрокаТаблицыРасходПеремещение.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
			
			СтрокаТаблицыРасходПеремещение.Период = СтрокаТаблицаЗапасыПеремещение.ДатаДокумента;
			СтрокаТаблицыРасходПеремещение.Спецификация = Неопределено;
			СтрокаТаблицыРасходПеремещение.КоррСпецификация = Неопределено;
			СтрокаТаблицыРасходПеремещение.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПеремещение.СтруктурнаяЕдиница;
			СтрокаТаблицыРасходПеремещение.КоррСчетУчета = СтрокаТаблицаЗапасыПеремещение.СчетУчета;
			
			СтрокаТаблицыРасходПеремещение.Сумма = СуммаКСписаниюПеремещение;
			СтрокаТаблицыРасходПеремещение.Количество = КоличествоТребуетсяРезервПеремещение;
			
			// Приход.
			Если Окр(СуммаКСписаниюПеремещение, 2, 1) <> 0 ИЛИ КоличествоТребуетсяРезервПеремещение > 0 Тогда
				
				СтрокаТаблицыПриходПеремещение = ВременнаяТаблицаЗапасыПеремещение.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриходПеремещение, СтрокаТаблицаЗапасыПеремещение);
				
				СтрокаТаблицыПриходПеремещение.ЗаказПокупателя = СтрокаТаблицаЗапасыПеремещение.ЗаказПокупателя;
				СтрокаТаблицыПриходПеремещение.КоррЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
				СтрокаТаблицыПриходПеремещение.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПеремещение.СтруктурнаяЕдиница;
				СтрокаТаблицыПриходПеремещение.КоррСчетУчета = СтрокаТаблицаЗапасыПеремещение.СчетУчета;
				
				СтрокаТаблицыПриходПеремещение.ВидДвижения = ВидДвиженияНакопления.Приход;
				СтрокаТаблицыПриходПеремещение.Период = СтрокаТаблицаЗапасыПеремещение.ДатаДокумента;
				СтрокаТаблицыПриходПеремещение.Спецификация = Неопределено;
				СтрокаТаблицыПриходПеремещение.КоррСпецификация = Неопределено;
				
				СтрокаТаблицыПриходПеремещение.Сумма = СуммаКСписаниюПеремещение;
				СтрокаТаблицыПриходПеремещение.Количество = КоличествоТребуетсяРезервПеремещение;
				
			КонецЕсли;
			
			Если СтрокаТаблицаЗапасыПеремещение.ЭтоСостояниеВыполненияЗаказНаряда Тогда
				
				// Перемещение
				
				ТаблицаЗапасыОстаткиПеремещение = РезультатЗапроса.Выгрузить();
				ТаблицаЗапасыОстаткиПеремещение.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
				
				КоличествоТребуетсяРезервПеремещение = СтрокаТаблицаЗапасыПеремещение.Резерв;
				КоличествоТребуетсяСвободныйОстатокПеремещение = СтрокаТаблицаЗапасыПеремещение.Количество;
				КоличествоТребуетсяРезервОтгрузкаПеремещение = СтрокаТаблицаЗапасыПеремещение.РезервОтгрузка;
				
				КоличествоРезервОтгрузкаПеремещение = КоличествоТребуетсяРезервОтгрузкаПеремещение - КоличествоТребуетсяРезервПеремещение;
				Если КоличествоРезервОтгрузкаПеремещение > 0 Тогда
					КоличествоТребуетсяСвободныйОстатокПеремещение = КоличествоТребуетсяСвободныйОстатокПеремещение - КоличествоТребуетсяРезервПеремещение - КоличествоРезервОтгрузкаПеремещение;
				Иначе
					КоличествоТребуетсяСвободныйОстатокПеремещение = КоличествоТребуетсяСвободныйОстатокПеремещение - КоличествоТребуетсяРезервПеремещение;
				КонецЕсли;
				
				СтруктураДляПоискаПеремещение.Вставить("ЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
				
				МассивСтрокОстатковПеремещение = ТаблицаЗапасыОстаткиПеремещение.НайтиСтроки(СтруктураДляПоискаПеремещение);
				
				КоличествоОстатокПеремещение = 0;
				СуммаОстатокПеремещение = 0;
				
				Если МассивСтрокОстатковПеремещение.Количество() > 0 Тогда
					КоличествоОстатокПеремещение = МассивСтрокОстатковПеремещение[0].КоличествоОстаток;
					СуммаОстатокПеремещение = МассивСтрокОстатковПеремещение[0].СуммаОстаток;
				КонецЕсли;
				
				Если КоличествоОстатокПеремещение > 0 И КоличествоОстатокПеремещение > КоличествоТребуетсяРезервПеремещение Тогда
					
					СуммаКСписаниюПеремещение = Окр(СуммаОстатокПеремещение * КоличествоТребуетсяРезервПеремещение / КоличествоОстатокПеремещение , 2, 1);
					
					МассивСтрокОстатковПеремещение[0].КоличествоОстаток = МассивСтрокОстатковПеремещение[0].КоличествоОстаток - КоличествоТребуетсяРезервПеремещение;
					МассивСтрокОстатковПеремещение[0].СуммаОстаток = МассивСтрокОстатковПеремещение[0].СуммаОстаток - СуммаКСписаниюПеремещение;
					
				ИначеЕсли КоличествоОстатокПеремещение = КоличествоТребуетсяРезервПеремещение Тогда
					
					СуммаКСписаниюПеремещение = СуммаОстатокПеремещение;
					
					МассивСтрокОстатковПеремещение[0].КоличествоОстаток = 0;
					МассивСтрокОстатковПеремещение[0].СуммаОстаток = 0;
					
				Иначе
					СуммаКСписаниюПеремещение = 0;
				КонецЕсли;
				
				// Расход.
				СтрокаТаблицыРасходПеремещение = ВременнаяТаблицаЗапасыПеремещение.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасходПеремещение, СтрокаТаблицаЗапасыПеремещение);
				
				СтрокаТаблицыРасходПеремещение.Период = СтрокаТаблицаЗапасыПеремещение.Период;
				СтрокаТаблицыРасходПеремещение.Спецификация = Неопределено;
				СтрокаТаблицыРасходПеремещение.КоррСпецификация = Неопределено;
				
				СтрокаТаблицыРасходПеремещение.Сумма = СуммаКСписаниюПеремещение;
				СтрокаТаблицыРасходПеремещение.Количество = КоличествоТребуетсяРезервПеремещение;
				
				// Сформируем проводки.
				Если Окр(СуммаКСписаниюПеремещение, 2, 1) <> 0 Тогда
					СтрокаТаблицаУправленческийПеремещение = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческийПеремещение, СтрокаТаблицаЗапасыПеремещение);
					СтрокаТаблицаУправленческийПеремещение.Сумма = СуммаКСписаниюПеремещение;
				КонецЕсли;
				
				// Приход.
				Если Окр(СуммаКСписаниюПеремещение, 2, 1) <> 0 ИЛИ КоличествоТребуетсяРезервПеремещение > 0 Тогда
					
					СтрокаТаблицыПриходПеремещение = ВременнаяТаблицаЗапасыПеремещение.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриходПеремещение, СтрокаТаблицаЗапасыПеремещение);
					
					СтрокаТаблицыПриходПеремещение.Период = СтрокаТаблицаЗапасыПеремещение.Период;
					СтрокаТаблицыПриходПеремещение.ВидДвижения = ВидДвиженияНакопления.Приход;
					
					СтрокаТаблицыПриходПеремещение.Организация = СтрокаТаблицаЗапасыПеремещение.Организация;
					СтрокаТаблицыПриходПеремещение.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыПеремещение.КоррСтруктурнаяЕдиница;
					СтрокаТаблицыПриходПеремещение.СчетУчета = СтрокаТаблицаЗапасыПеремещение.КоррСчетУчета;
					СтрокаТаблицыПриходПеремещение.Номенклатура = СтрокаТаблицаЗапасыПеремещение.КоррНоменклатура;
					СтрокаТаблицыПриходПеремещение.Характеристика = СтрокаТаблицаЗапасыПеремещение.КоррХарактеристика;
					СтрокаТаблицыПриходПеремещение.Партия = СтрокаТаблицаЗапасыПеремещение.КоррПартия;
					СтрокаТаблицыПриходПеремещение.Спецификация = Неопределено;
					
					СтрокаТаблицыПриходПеремещение.ЗаказПокупателя = СтрокаТаблицаЗапасыПеремещение.КоррЗаказПокупателя;
					
					СтрокаТаблицыПриходПеремещение.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПеремещение.СтруктурнаяЕдиница;
					СтрокаТаблицыПриходПеремещение.КоррСчетУчета = СтрокаТаблицаЗапасыПеремещение.СчетУчета;
					СтрокаТаблицыПриходПеремещение.КоррНоменклатура = СтрокаТаблицаЗапасыПеремещение.Номенклатура;
					СтрокаТаблицыПриходПеремещение.КоррХарактеристика = СтрокаТаблицаЗапасыПеремещение.Характеристика;
					СтрокаТаблицыПриходПеремещение.КоррПартия = СтрокаТаблицаЗапасыПеремещение.Партия;
					СтрокаТаблицыПриходПеремещение.КоррСпецификация = Неопределено;
					
					СтрокаТаблицыПриходПеремещение.КоррЗаказПокупателя = СтрокаТаблицаЗапасыПеремещение.ЗаказПокупателя;
					
					СтрокаТаблицыПриходПеремещение.Сумма = СуммаКСписаниюПеремещение;
					
					СтрокаТаблицыПриходПеремещение.Количество = КоличествоТребуетсяРезервПеремещение;
					
					СтрокаТаблицыПриходПеремещение.СчетУчета = СтрокаТаблицаЗапасыПеремещение.КоррСчетУчета;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоРезервОтгрузкаПеремещение > 0
			И СтрокаТаблицаЗапасыПеремещение.ЭтоСостояниеВыполненияЗаказНаряда Тогда
			
			// Перемещение зарезервированных материалов др. документами.
			
			КоличествоТребуетсяРезервПеремещение = СтрокаТаблицаЗапасыПеремещение.Резерв;
			КоличествоТребуетсяСвободныйОстатокПеремещение = СтрокаТаблицаЗапасыПеремещение.Количество;
			КоличествоТребуетсяРезервОтгрузкаПеремещение = СтрокаТаблицаЗапасыПеремещение.РезервОтгрузка;
			
			КоличествоРезервОтгрузкаПеремещение = КоличествоТребуетсяРезервОтгрузкаПеремещение - КоличествоТребуетсяРезервПеремещение;
			Если КоличествоРезервОтгрузкаПеремещение > 0 Тогда
				КоличествоТребуетсяСвободныйОстатокПеремещение = КоличествоТребуетсяСвободныйОстатокПеремещение - КоличествоТребуетсяРезервПеремещение - КоличествоРезервОтгрузкаПеремещение;
			Иначе
				КоличествоТребуетсяСвободныйОстатокПеремещение = КоличествоТребуетсяСвободныйОстатокПеремещение - КоличествоТребуетсяРезервПеремещение;
			КонецЕсли;
			
			СтруктураДляПоискаПеремещение.Вставить("ЗаказПокупателя", ДокументСсылкаЗаказПокупателя);
			
			МассивСтрокОстатковОтгрузкаПеремещение = ТаблицаЗапасыОстаткиПеремещение.НайтиСтроки(СтруктураДляПоискаПеремещение);
			
			КоличествоОстатокОтгрузкаПеремещение = 0;
			СуммаОстатокОтгрузкаПеремещение = 0;
			
			Если МассивСтрокОстатковОтгрузкаПеремещение.Количество() > 0 Тогда
				КоличествоОстатокОтгрузкаПеремещение = МассивСтрокОстатковОтгрузкаПеремещение[0].КоличествоОстаток;
				СуммаОстатокОтгрузкаПеремещение = МассивСтрокОстатковОтгрузкаПеремещение[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстатокОтгрузкаПеремещение > 0 И КоличествоОстатокОтгрузкаПеремещение > КоличествоРезервОтгрузкаПеремещение Тогда
				
				СуммаКСписаниюОтгрузкаПеремещение = Окр(СуммаОстатокОтгрузкаПеремещение * КоличествоРезервОтгрузкаПеремещение / КоличествоОстатокОтгрузкаПеремещение , 2, 1);
				
				МассивСтрокОстатковОтгрузкаПеремещение[0].КоличествоОстаток = МассивСтрокОстатковОтгрузкаПеремещение[0].КоличествоОстаток - КоличествоРезервОтгрузкаПеремещение;
				МассивСтрокОстатковОтгрузкаПеремещение[0].СуммаОстаток = МассивСтрокОстатковОтгрузкаПеремещение[0].СуммаОстаток - СуммаКСписаниюОтгрузкаПеремещение;
				
			ИначеЕсли КоличествоОстатокОтгрузкаПеремещение = КоличествоРезервОтгрузкаПеремещение Тогда
				
				СуммаКСписаниюОтгрузкаПеремещение = СуммаОстатокОтгрузкаПеремещение;
				
				МассивСтрокОстатковОтгрузкаПеремещение[0].КоличествоОстаток = 0;
				МассивСтрокОстатковОтгрузкаПеремещение[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписаниюОтгрузкаПеремещение = 0;
			КонецЕсли;
			
			// Расход.
			СтрокаТаблицыРасходПеремещение = ВременнаяТаблицаЗапасыПеремещение.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасходПеремещение, СтрокаТаблицаЗапасыПеремещение);
			
			СтрокаТаблицыРасходПеремещение.Период = СтрокаТаблицаЗапасыПеремещение.Период;
			СтрокаТаблицыРасходПеремещение.Спецификация = Неопределено;
			СтрокаТаблицыРасходПеремещение.КоррСпецификация = Неопределено;
			
			СтрокаТаблицыРасходПеремещение.Сумма = СуммаКСписаниюОтгрузкаПеремещение;
			СтрокаТаблицыРасходПеремещение.Количество = КоличествоРезервОтгрузкаПеремещение;
			
			// Сформируем проводки.
			Если Окр(СуммаКСписаниюОтгрузкаПеремещение, 2, 1) <> 0 Тогда
				СтрокаТаблицаУправленческийПеремещение = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческийПеремещение, СтрокаТаблицаЗапасыПеремещение);
				СтрокаТаблицаУправленческийПеремещение.Сумма = СуммаКСписаниюОтгрузкаПеремещение;
			КонецЕсли;
			
			// Приход.
			Если Окр(СуммаКСписаниюОтгрузкаПеремещение, 2, 1) <> 0 ИЛИ КоличествоРезервОтгрузкаПеремещение > 0 Тогда
				
				СтрокаТаблицыПриходПеремещение = ВременнаяТаблицаЗапасыПеремещение.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриходПеремещение, СтрокаТаблицаЗапасыПеремещение);
				
				СтрокаТаблицыПриходПеремещение.Период = СтрокаТаблицаЗапасыПеремещение.Период;
				СтрокаТаблицыПриходПеремещение.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриходПеремещение.Организация = СтрокаТаблицаЗапасыПеремещение.Организация;
				СтрокаТаблицыПриходПеремещение.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыПеремещение.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриходПеремещение.СчетУчета = СтрокаТаблицаЗапасыПеремещение.КоррСчетУчета;
				СтрокаТаблицыПриходПеремещение.Номенклатура = СтрокаТаблицаЗапасыПеремещение.КоррНоменклатура;
				СтрокаТаблицыПриходПеремещение.Характеристика = СтрокаТаблицаЗапасыПеремещение.КоррХарактеристика;
				СтрокаТаблицыПриходПеремещение.Партия = СтрокаТаблицаЗапасыПеремещение.КоррПартия;
				СтрокаТаблицыПриходПеремещение.Спецификация = Неопределено;
				
				СтрокаТаблицыПриходПеремещение.ЗаказПокупателя = СтрокаТаблицаЗапасыПеремещение.КоррЗаказПокупателя;
				
				СтрокаТаблицыПриходПеремещение.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПеремещение.СтруктурнаяЕдиница;
				СтрокаТаблицыПриходПеремещение.КоррСчетУчета = СтрокаТаблицаЗапасыПеремещение.СчетУчета;
				СтрокаТаблицыПриходПеремещение.КоррНоменклатура = СтрокаТаблицаЗапасыПеремещение.Номенклатура;
				СтрокаТаблицыПриходПеремещение.КоррХарактеристика = СтрокаТаблицаЗапасыПеремещение.Характеристика;
				СтрокаТаблицыПриходПеремещение.КоррПартия = СтрокаТаблицаЗапасыПеремещение.Партия;
				СтрокаТаблицыПриходПеремещение.КоррСпецификация = Неопределено;
				
				СтрокаТаблицыПриходПеремещение.КоррЗаказПокупателя = СтрокаТаблицаЗапасыПеремещение.ЗаказПокупателя;
				
				СтрокаТаблицыПриходПеремещение.Сумма = СуммаКСписаниюОтгрузкаПеремещение;
				
				СтрокаТаблицыПриходПеремещение.Количество = КоличествоРезервОтгрузкаПеремещение;
				
				СтрокаТаблицыПриходПеремещение.СчетУчета = СтрокаТаблицаЗапасыПеремещение.КоррСчетУчета;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоТребуетсяСвободныйОстатокПеремещение > 0
			И СтрокаТаблицаЗапасыПеремещение.ЭтоСостояниеВыполненияЗаказНаряда Тогда
			
			СтруктураДляПоискаПеремещение.Вставить("ЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
			
			МассивСтрокОстатковПеремещение = ТаблицаЗапасыОстаткиПеремещение.НайтиСтроки(СтруктураДляПоискаПеремещение);
			
			КоличествоОстатокПеремещение = 0;
			СуммаОстатокПеремещение = 0;
			
			Если МассивСтрокОстатковПеремещение.Количество() > 0 Тогда
				КоличествоОстатокПеремещение = МассивСтрокОстатковПеремещение[0].КоличествоОстаток;
				СуммаОстатокПеремещение = МассивСтрокОстатковПеремещение[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстатокПеремещение > 0 И КоличествоОстатокПеремещение > КоличествоТребуетсяСвободныйОстатокПеремещение Тогда
				
				СуммаКСписаниюПеремещение = Окр(СуммаОстатокПеремещение * КоличествоТребуетсяСвободныйОстатокПеремещение / КоличествоОстатокПеремещение , 2, 1);
				
				МассивСтрокОстатковПеремещение[0].КоличествоОстаток = МассивСтрокОстатковПеремещение[0].КоличествоОстаток - КоличествоТребуетсяСвободныйОстатокПеремещение;
				МассивСтрокОстатковПеремещение[0].СуммаОстаток = МассивСтрокОстатковПеремещение[0].СуммаОстаток - СуммаКСписаниюПеремещение;
				
			ИначеЕсли КоличествоОстатокПеремещение = КоличествоТребуетсяСвободныйОстатокПеремещение Тогда
				
				СуммаКСписаниюПеремещение = СуммаОстатокПеремещение;
				
				МассивСтрокОстатковПеремещение[0].КоличествоОстаток = 0;
				МассивСтрокОстатковПеремещение[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписаниюПеремещение = 0;
			КонецЕсли;
			
			// Расход.
			СтрокаТаблицыРасходПеремещение = ВременнаяТаблицаЗапасыПеремещение.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасходПеремещение, СтрокаТаблицаЗапасыПеремещение);
			
			СтрокаТаблицыРасходПеремещение.Сумма = СуммаКСписаниюПеремещение;
			СтрокаТаблицыРасходПеремещение.Количество = КоличествоТребуетсяСвободныйОстатокПеремещение;
			СтрокаТаблицыРасходПеремещение.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
			СтрокаТаблицыРасходПеремещение.Спецификация = Неопределено;
			СтрокаТаблицыРасходПеремещение.КоррСпецификация = Неопределено;
			
			Если НЕ РезервированиеЗапасов Тогда
				СтрокаТаблицыРасходПеремещение.КоррЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
			КонецЕсли;
			
			// Сформируем проводки.
			Если Окр(СуммаКСписаниюПеремещение, 2, 1) <> 0 Тогда
				СтрокаТаблицаУправленческийПеремещение = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческийПеремещение, СтрокаТаблицаЗапасыПеремещение);
				СтрокаТаблицаУправленческийПеремещение.Сумма = СуммаКСписаниюПеремещение;
			КонецЕсли;
			
			// Приход.
			Если Окр(СуммаКСписаниюПеремещение, 2, 1) <> 0 ИЛИ КоличествоТребуетсяСвободныйОстатокПеремещение > 0 Тогда
				
				СтрокаТаблицыПриходПеремещение = ВременнаяТаблицаЗапасыПеремещение.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриходПеремещение, СтрокаТаблицаЗапасыПеремещение);
				
				СтрокаТаблицыПриходПеремещение.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриходПеремещение.Организация = СтрокаТаблицаЗапасыПеремещение.Организация;
				СтрокаТаблицыПриходПеремещение.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыПеремещение.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриходПеремещение.СчетУчета = СтрокаТаблицаЗапасыПеремещение.КоррСчетУчета;
				СтрокаТаблицыПриходПеремещение.Номенклатура = СтрокаТаблицаЗапасыПеремещение.КоррНоменклатура;
				СтрокаТаблицыПриходПеремещение.Характеристика = СтрокаТаблицаЗапасыПеремещение.КоррХарактеристика;
				СтрокаТаблицыПриходПеремещение.Партия = СтрокаТаблицаЗапасыПеремещение.КоррПартия;
				СтрокаТаблицыПриходПеремещение.Спецификация = Неопределено;
				
				СтрокаТаблицыПриходПеремещение.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПеремещение.СтруктурнаяЕдиница;
				СтрокаТаблицыПриходПеремещение.КоррСчетУчета = СтрокаТаблицаЗапасыПеремещение.СчетУчета;
				СтрокаТаблицыПриходПеремещение.КоррНоменклатура = СтрокаТаблицаЗапасыПеремещение.Номенклатура;
				СтрокаТаблицыПриходПеремещение.КоррХарактеристика = СтрокаТаблицаЗапасыПеремещение.Характеристика;
				СтрокаТаблицыПриходПеремещение.КоррПартия = СтрокаТаблицаЗапасыПеремещение.Партия;
				СтрокаТаблицыПриходПеремещение.КоррСпецификация = Неопределено;
				
				СтрокаТаблицыПриходПеремещение.КоррЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
				
				СтрокаТаблицыПриходПеремещение.Сумма = СуммаКСписаниюПеремещение;
				
				СтрокаТаблицыПриходПеремещение.Количество = КоличествоТребуетсяСвободныйОстатокПеремещение;
				
				СтрокаТаблицыПриходПеремещение.СчетУчета = СтрокаТаблицаЗапасыПеремещение.КоррСчетУчета;
				
				Если РезервированиеЗапасов Тогда
					СтрокаТаблицыПриходПеремещение.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
				Иначе
					СтрокаТаблицыПриходПеремещение.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
			
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение = ВременнаяТаблицаЗапасыПеремещение;
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение[н];
		
		СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
		
	КонецЦикла;
	
	// Конец Автоматическое списание
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаЗапасы.Финиш КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиницаЗапасов,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
	|	ТаблицаЗапасы.КоррСчетУчета КАК КоррСчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.КоррНоменклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.КоррХарактеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.КоррПартия КАК КоррПартия,
	|	ТаблицаЗапасы.Спецификация КАК Спецификация,
	|	ТаблицаЗапасы.КоррСпецификация КАК КоррСпецификация,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК КоррЗаказПокупателя,
	|	ТаблицаЗапасы.СчетДт КАК СчетДт,
	|	ТаблицаЗапасы.СчетКт КАК СчетКт,
	|	ТаблицаЗапасы.СодержаниеПроводки КАК Содержание,
	|	ТаблицаЗапасы.СодержаниеПроводки КАК СодержаниеПроводки,
	|	ЛОЖЬ КАК ЗатратыНаВыпуск,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Резерв) КАК Резерв,
	|	СУММА(ТаблицаЗапасы.РезервОтгрузка) КАК РезервОтгрузка,
	|	0 КАК Сумма,
	|	ТаблицаЗапасы.ТипНоменклатуры КАК ТипНоменклатуры
	|ИЗ
	|	ВременнаяТаблицаМатериалы КАК ТаблицаЗапасы,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Финиш,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СценарийПланирования,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.СчетУчетаЗапасов,
	|	ТаблицаЗапасы.КоррСчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.КоррХарактеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.КоррПартия,
	|	ТаблицаЗапасы.Спецификация,
	|	ТаблицаЗапасы.КоррСпецификация,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.СчетДт,
	|	ТаблицаЗапасы.СчетКт,
	|	ТаблицаЗапасы.СодержаниеПроводки,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов,
	|	ТаблицаЗапасы.ТипНоменклатуры,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.СодержаниеПроводки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыЗапасы", Запрос.Выполнить().Выгрузить());
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыЗапасы[н];
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчетаЗапасов);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
		
		КоличествоТребуетсяРезерв = СтрокаТаблицаЗапасы.Резерв;
		КоличествоТребуетсяРезервОтгрузка = СтрокаТаблицаЗапасы.РезервОтгрузка;
		КоличествоТребуетсяСвободныйОстаток = СтрокаТаблицаЗапасы.Количество;
		
		ТаблицаЗапасыОстаткиПеремещение = РезультатЗапроса.Выгрузить();
		ТаблицаЗапасыОстаткиПеремещение.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
		
		Если КоличествоТребуетсяРезерв > 0 Тогда
			
			КоличествоТребуетсяСвободныйОстаток = КоличествоТребуетсяСвободныйОстаток - КоличествоТребуетсяРезерв;
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
			
			МассивСтрокОстатков = ТаблицаЗапасыОстаткиПеремещение.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяРезерв Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяРезерв / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяРезерв;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяРезерв Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			// Спишем запасы со склада (производственного подразделения).
			СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.ЗатратыНаВыпуск = Истина;
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяРезерв;
			
			// Отнесем списанные запасы либо на стоимость запасов на складе либо на затраты НЗП.
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
				
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
				СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
				СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
				СтрокаТаблицыПриход.Спецификация = СтрокаТаблицаЗапасы.КоррСпецификация;
				СтрокаТаблицыПриход.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
				
				СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыПриход.КоррСпецификация = СтрокаТаблицаЗапасы.Спецификация;
				СтрокаТаблицыПриход.КоррЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
				
				СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
				СтрокаТаблицыПриход.Количество = 0;
				
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				
				// Сформируем проводки.
				Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
					СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицыПриход);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Спишем материалы, которые зарезервированы др. документами.
		КоличествоОтгрузкаРезерв = КоличествоТребуетсяРезервОтгрузка - КоличествоТребуетсяРезерв;
		Если КоличествоОтгрузкаРезерв > 0 Тогда
			
			КоличествоТребуетсяСвободныйОстаток = КоличествоТребуетсяСвободныйОстаток - КоличествоОтгрузкаРезерв;
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", ДокументСсылкаЗаказПокупателя);
			
			МассивСтрокОтгрузкаОстатков = ТаблицаЗапасыОстаткиПеремещение.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОтгрузкаОстаток = 0;
			СуммаОтгрузкаОстаток = 0;
			
			Если МассивСтрокОтгрузкаОстатков.Количество() > 0 Тогда
				КоличествоОтгрузкаОстаток = МассивСтрокОтгрузкаОстатков[0].КоличествоОстаток;
				СуммаОтгрузкаОстаток = МассивСтрокОтгрузкаОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОтгрузкаОстаток > 0 И КоличествоОтгрузкаОстаток > КоличествоОтгрузкаРезерв Тогда
				
				СуммаОтгрузкаКСписанию = Окр(СуммаОтгрузкаОстаток * КоличествоОтгрузкаРезерв / КоличествоОтгрузкаОстаток , 2, 1);
				
				МассивСтрокОтгрузкаОстатков[0].КоличествоОстаток = МассивСтрокОтгрузкаОстатков[0].КоличествоОстаток - КоличествоОтгрузкаРезерв;
				МассивСтрокОтгрузкаОстатков[0].СуммаОстаток = МассивСтрокОтгрузкаОстатков[0].СуммаОстаток - СуммаОтгрузкаКСписанию;
				
			ИначеЕсли КоличествоОтгрузкаОстаток = КоличествоОтгрузкаРезерв Тогда
				
				СуммаОтгрузкаКСписанию = СуммаОтгрузкаОстаток;
				
				МассивСтрокОтгрузкаОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОтгрузкаОстатков[0].СуммаОстаток = 0;
				
			Иначе
				СуммаОтгрузкаКСписанию = 0;
			КонецЕсли;
			
			// Спишем запасы со склада (производственного подразделения).
			СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.ЗатратыНаВыпуск = Истина;
			СтрокаТаблицыРасход.Сумма = СуммаОтгрузкаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоОтгрузкаРезерв;
			
			// Отнесем списанные запасы либо на стоимость запасов на складе либо на затраты НЗП.
			Если Окр(СуммаОтгрузкаКСписанию, 2, 1) <> 0 Тогда
				
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
				
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
				СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
				СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
				СтрокаТаблицыПриход.Спецификация = СтрокаТаблицаЗапасы.КоррСпецификация;
				СтрокаТаблицыПриход.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
				
				СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыПриход.КоррСпецификация = СтрокаТаблицаЗапасы.Спецификация;
				СтрокаТаблицыПриход.КоррЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
				
				СтрокаТаблицыПриход.Сумма = СуммаОтгрузкаКСписанию;
				СтрокаТаблицыПриход.Количество = 0;
				
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				
				// Сформируем проводки.
				Если Окр(СуммаОтгрузкаКСписанию, 2, 1) <> 0 Тогда
					СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицыПриход);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоТребуетсяСвободныйОстаток > 0 Тогда
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
			
			МассивСтрокОстатков = ТаблицаЗапасыОстаткиПеремещение.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяСвободныйОстаток Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяСвободныйОстаток / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяСвободныйОстаток;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяСвободныйОстаток Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			// Расход.
			СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяСвободныйОстаток;
			СтрокаТаблицыРасход.ЗатратыНаВыпуск = Истина;
			
			Если РезервированиеЗапасов Тогда
				СтрокаТаблицыРасход.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
			Иначе
				СтрокаТаблицыРасход.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
				СтрокаТаблицыРасход.КоррЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
			КонецЕсли;
			
			// Приход
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
				
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
				СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
				СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
				СтрокаТаблицыПриход.Спецификация = СтрокаТаблицаЗапасы.КоррСпецификация;
				
				СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыПриход.КоррСпецификация = СтрокаТаблицаЗапасы.Спецификация;
				
				СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
				СтрокаТаблицыПриход.Количество = 0;
				
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				
				Если РезервированиеЗапасов Тогда
					СтрокаТаблицыПриход.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
					СтрокаТаблицыПриход.КоррЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
				Иначе
					СтрокаТаблицыПриход.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
					СтрокаТаблицыПриход.КоррЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
				КонецЕсли;
				
				// Сформируем проводки.
				Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
					СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицыПриход);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Удалить("ТаблицаЗапасыЗапасы");
	
КонецПроцедуры // СформироватьТаблицаЗапасыМатериалы()

Процедура СформироватьТаблицаЗапасыИсполнителиЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыИсполнители.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасыИсполнители.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаЗапасыИсполнители.Период КАК Период,
	|	ТаблицаЗапасыИсполнители.Организация КАК Организация,
	|	ТаблицаЗапасыИсполнители.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасыИсполнители.СтруктурнаяЕдиница КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасыИсполнители.СчетУчетаЗапасов КАК СчетУчета,
	|	ТаблицаЗапасыИсполнители.КоррСчетУчетаЗапасов КАК КоррСчетУчета,
	|	ТаблицаЗапасыИсполнители.КоррНоменклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасыИсполнители.КоррХарактеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасыИсполнители.КоррПартия КАК КоррПартия,
	|	ТаблицаЗапасыИсполнители.КоррСпецификация КАК КоррСпецификация,
	|	ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка) КАК Спецификация,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК Партия,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРезервирование
	|			ТОГДА ТаблицаЗапасыИсполнители.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРезервирование
	|			ТОГДА ТаблицаЗапасыИсполнители.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК КоррЗаказПокупателя,
	|	СУММА(ТаблицаЗапасыИсполнители.Сумма) КАК Сумма,
	|	ИСТИНА КАК ФиксированнаяСтоимость,
	|	ЛОЖЬ КАК ЗатратыНаВыпуск,
	|	&НачислениеЗарплаты КАК СодержаниеПроводки
	|ИЗ
	|	ВременнаяТаблицаИсполнители КАК ТаблицаЗапасыИсполнители
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыИсполнители.Период,
	|	ТаблицаЗапасыИсполнители.СценарийПланирования,
	|	ТаблицаЗапасыИсполнители.СчетУчетаЗапасов,
	|	ТаблицаЗапасыИсполнители.КоррСчетУчетаЗапасов,
	|	ТаблицаЗапасыИсполнители.КоррНоменклатура,
	|	ТаблицаЗапасыИсполнители.КоррХарактеристика,
	|	ТаблицаЗапасыИсполнители.КоррПартия,
	|	ТаблицаЗапасыИсполнители.КоррСпецификация,
	|	ТаблицаЗапасыИсполнители.Организация,
	|	ТаблицаЗапасыИсполнители.СтруктурнаяЕдиница,
	|	ТаблицаЗапасыИсполнители.ЗаказПокупателя,
	|	ТаблицаЗапасыИсполнители.СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапасыИсполнители.НомерСтроки КАК НомерСтроки,
	|	ТаблицаЗапасыИсполнители.Период КАК Период,
	|	ТаблицаЗапасыИсполнители.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ТаблицаЗапасыИсполнители.СчетУчетаЗапасов КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыИсполнители.СчетУчетаЗапасов.Валютный
	|			ТОГДА ТаблицаЗапасыИсполнители.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыИсполнители.СчетУчетаЗапасов.Валютный
	|			ТОГДА ТаблицаЗапасыИсполнители.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалДт,
	|	ТаблицаЗапасыИсполнители.СчетУчета КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыИсполнители.СчетУчета.Валютный
	|			ТОГДА ТаблицаЗапасыИсполнители.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыИсполнители.СчетУчета.Валютный
	|			ТОГДА ТаблицаЗапасыИсполнители.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалКт,
	|	ТаблицаЗапасыИсполнители.Сумма КАК Сумма,
	|	&НачислениеЗарплаты КАК Содержание
	|ИЗ
	|	ВременнаяТаблицаИсполнители КАК ТаблицаЗапасыИсполнители
	|ГДЕ
	|	ТаблицаЗапасыИсполнители.Сумма > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗапасыИсполнители.НомерСтроки,
	|	ТаблицаЗапасыИсполнители.Период,
	|	ТаблицаЗапасыИсполнители.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаЗапасыИсполнители.КоррСчетУчетаЗапасов,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыИсполнители.КоррСчетУчетаЗапасов.Валютный
	|			ТОГДА ТаблицаЗапасыИсполнители.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыИсполнители.КоррСчетУчетаЗапасов.Валютный
	|			ТОГДА ТаблицаЗапасыИсполнители.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаЗапасыИсполнители.СчетУчетаЗапасов,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыИсполнители.СчетУчетаЗапасов.Валютный
	|			ТОГДА ТаблицаЗапасыИсполнители.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыИсполнители.СчетУчетаЗапасов.Валютный
	|			ТОГДА ТаблицаЗапасыИсполнители.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаЗапасыИсполнители.Сумма,
	|	&РазноскаЗарплаты
	|ИЗ
	|	ВременнаяТаблицаИсполнители КАК ТаблицаЗапасыИсполнители
	|ГДЕ
	|	ТаблицаЗапасыИсполнители.Сумма > 0";
	
	Запрос.УстановитьПараметр("НачислениеЗарплаты", НСтр("ru = 'Начисление зарплаты'"));	
	Запрос.УстановитьПараметр("РазноскаЗарплаты", 	НСтр("ru = 'Отнесение затрат на продукцию'"));	
	Запрос.УстановитьПараметр("ИспользоватьРезервирование",  СтруктураДополнительныеСвойства.УчетнаяПолитика.РезервированиеЗапасов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаЗапасыИсполнители = МассивРезультатов[0].Выгрузить();
	ТаблицаУправленческий = МассивРезультатов[1].Выгрузить();
	
	Для каждого СтрокаТаблицы Из ТаблицаУправленческий Цикл
		СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицы);	
	КонецЦикла; 
	
	ПустаяСтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	ПустойСчетУчета = ПланыСчетов.Управленческий.ПустаяСсылка();
	ПустаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ПустаяПартия = Справочники.ПартииНоменклатуры.ПустаяСсылка();
    ПустаяСпецификация = Справочники.Спецификации.ПустаяСсылка();
	
	Для н = 0 По ТаблицаЗапасыИсполнители.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасыИсполнители = ТаблицаЗапасыИсполнители[н];
		
		// Оприходуем затраты по зарплате в НЗП.
		СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасыИсполнители);
		
		СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = ПустаяСтруктурнаяЕдиница;
		СтрокаТаблицыПриход.КоррСчетУчета = ПустойСчетУчета;
		СтрокаТаблицыПриход.КоррНоменклатура = ПустаяНоменклатура;
		СтрокаТаблицыПриход.КоррХарактеристика = ПустаяХарактеристика;
		СтрокаТаблицыПриход.КоррПартия = ПустаяПартия;
		СтрокаТаблицыПриход.КоррСпецификация = ПустаяСпецификация;
		СтрокаТаблицыПриход.КоррЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
		
		// Спишем их на продукцию.
		СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасыИсполнители);
		СтрокаТаблицыРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
		СтрокаТаблицыРасход.ФиксированнаяСтоимость = Ложь;
		СтрокаТаблицыРасход.ЗатратыНаВыпуск = Истина;

		// Включим в себестоимость продукции.
		СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасыИсполнители);
		
		СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыИсполнители.КоррСтруктурнаяЕдиница;
		СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасыИсполнители.КоррСчетУчета;
		СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасыИсполнители.КоррНоменклатура;
		СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасыИсполнители.КоррХарактеристика;
		СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасыИсполнители.КоррПартия;
		СтрокаТаблицыПриход.Спецификация = СтрокаТаблицаЗапасыИсполнители.КоррСпецификация;
		СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасыИсполнители.КоррЗаказПокупателя;
		
		СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыИсполнители.СтруктурнаяЕдиница;
		СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасыИсполнители.СчетУчета;
		СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасыИсполнители.Номенклатура;
		СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасыИсполнители.Характеристика;
		СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасыИсполнители.Партия;
		СтрокаТаблицыПриход.КоррСпецификация = СтрокаТаблицаЗапасыИсполнители.Спецификация;
		СтрокаТаблицыПриход.КоррЗаказПокупателя = СтрокаТаблицаЗапасыИсполнители.ЗаказПокупателя;
		
		СтрокаТаблицыПриход.ФиксированнаяСтоимость = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьТаблицаЗапасыТоварыЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.НомерСтроки КАК НомерСтроки,
	|	ТаблицаЗапасы.Финиш КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|				И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Выполнен,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ТаблицаЗапасы.Документ КАК Документ,
	|	ТаблицаЗапасы.Документ КАК ДокументПродажи,
	|	ТаблицаЗапасы.Заказ КАК ЗаказПродажи,
	|	ТаблицаЗапасы.ПодразделениеПродажи КАК Подразделение,
	|	ТаблицаЗапасы.Ответственный КАК Ответственный,
	|	ТаблицаЗапасы.НаправлениеДеятельностиПродажи КАК НаправлениеДеятельности,
	|	ТаблицаЗапасы.ПодразделениеПродажи КАК ПодразделениеПродажи,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость КАК СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.КоррОрганизация КАК КоррОрганизация,
	|	ЕСТЬNULL(ТаблицаЗапасы.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК СтруктурнаяЕдиница,
	|	ЕСТЬNULL(ТаблицаЗапасы.КоррСтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.КоррСчетУчета КАК КоррСчетУчета,
	|	ТаблицаЗапасы.ТоварыНаКомиссии КАК ТоварыНаКомиссии,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ТаблицаЗапасы.КоррНоменклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ТаблицаЗапасы.КоррХарактеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.КоррПартия КАК КоррПартия,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.КоррЗаказ КАК КоррЗаказПокупателя,
	|	ТаблицаЗапасы.Количество КАК Количество,
	|	ТаблицаЗапасы.Резерв КАК Резерв,
	|	ТаблицаЗапасы.РезервОтгрузка КАК РезервОтгрузка,
	|	ТаблицаЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаЗапасы.СуммаНДС КАК СуммаНДС,
	|	ТаблицаЗапасы.Сумма КАК Сумма,
	|	0 КАК Себестоимость,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ТаблицаЗапасы.СчетУчетаЗатрат
	|		ИНАЧЕ ТаблицаЗапасы.СчетУчетаСебестоимость
	|	КОНЕЦ КАК СчетДт,
	|	ТаблицаЗапасы.СчетУчета КАК СчетКт,
	|	ВЫРАЗИТЬ(&СписаниеЗапасов КАК СТРОКА(100)) КАК Содержание,
	|	ВЫРАЗИТЬ(&СписаниеЗапасов КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	ТаблицаЗапасы.ТипНоменклатуры КАК ТипНоменклатуры
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаЗапасы,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.НомерСтроки,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|				И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ТаблицаЗапасы.Финиш,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Заказ,
	|	ТаблицаЗапасы.НаправлениеДеятельностиПродажи,
	|	ТаблицаЗапасы.ПодразделениеПродажи,
	|	ТаблицаЗапасы.Ответственный,
	|	ТаблицаЗапасы.КоррОрганизация,
	|	ЕСТЬNULL(ТаблицаЗапасы.КоррСтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)),
	|	ТаблицаЗапасы.КоррСчетУчета,
	|	ТаблицаЗапасы.ТоварыНаКомиссии,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.НоменклатураНабора,
	|	ТаблицаЗапасы.КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.ХарактеристикаНабора,
	|	ТаблицаЗапасы.КоррХарактеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.КоррПартия,
	|	ТаблицаЗапасы.КоррЗаказ,
	|	ТаблицаЗапасы.Количество,
	|	ТаблицаЗапасы.Резерв,
	|	ТаблицаЗапасы.РезервОтгрузка,
	|	ТаблицаЗапасы.СтавкаНДС,
	|	ТаблицаЗапасы.СуммаНДС,
	|	ТаблицаЗапасы.Сумма,
	|	ТаблицаЗапасы.Документ,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.СчетУчета,
	|	ЕСТЬNULL(ТаблицаЗапасы.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)),
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ТаблицаЗапасы.СчетУчетаЗатрат
	|		ИНАЧЕ ТаблицаЗапасы.СчетУчетаСебестоимость
	|	КОНЕЦ,
	|	ТаблицаЗапасы.Документ,
	|	ТаблицаЗапасы.ПодразделениеПродажи,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.ТипНоменклатуры";
	
	Запрос.УстановитьПараметр("СписаниеЗапасов", НСтр("ru = 'Списание запасов'"));
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыЗапасы", Запрос.Выполнить().Выгрузить());
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация КАК Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|		ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|		ТаблицаЗапасы.Характеристика КАК Характеристика,
	|		ТаблицаЗапасы.Партия КАК Партия,
	|		ВЫБОР
	|			КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				ТОГДА ТаблицаЗапасы.Заказ
	|			ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		КОНЕЦ КАК ЗаказПокупателя
	|	ИЗ
	|		ВременнаяТаблицаТовары КАК ТаблицаЗапасы
	|	ГДЕ
	|		ТаблицаЗапасы.Заказ <> НЕОПРЕДЕЛЕНО
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчета,
	|		ТаблицаЗапасы.Номенклатура,
	|		ТаблицаЗапасы.Характеристика,
	|		ТаблицаЗапасы.Партия,
	|		ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	ИЗ
	|		ВременнаяТаблицаТовары КАК ТаблицаЗапасы) КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя";
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Блокировка = Новый БлокировкаДанных;
    ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
    ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
    ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
    
    Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
    	ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
    КонецЦикла;
    Блокировка.Заблокировать();
    
    // Получение остатков запасов по стоимости.
    Запрос.Текст =
    "ВЫБРАТЬ
    |	ЗапасыОстатки.Организация КАК Организация,
    |	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
    |	ЗапасыОстатки.СчетУчета КАК СчетУчета,
    |	ЗапасыОстатки.Номенклатура КАК Номенклатура,
    |	ЗапасыОстатки.Характеристика КАК Характеристика,
    |	ЗапасыОстатки.Партия КАК Партия,
    |	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
    |	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
    |	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
    |ПОМЕСТИТЬ втЗапасыИтоги
    |ИЗ
    |	ВременнаяТаблицаТовары КАК втТаблицаЗапасы
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(&МоментКонтроля, ) КАК ЗапасыОстатки
    |		ПО (ЗапасыОстатки.Организация = втТаблицаЗапасы.Организация)
    |			И (ЗапасыОстатки.СтруктурнаяЕдиница = втТаблицаЗапасы.СтруктурнаяЕдиница)
    |			И (ЗапасыОстатки.СчетУчета = втТаблицаЗапасы.СчетУчета)
    |			И (ЗапасыОстатки.Номенклатура = втТаблицаЗапасы.Номенклатура)
    |			И (ЗапасыОстатки.Характеристика = втТаблицаЗапасы.Характеристика)
    |			И (ЗапасыОстатки.Партия = втТаблицаЗапасы.Партия)
    |			И (ЗапасыОстатки.ЗаказПокупателя = ВЫБОР
    |				КОГДА втТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
    |					ТОГДА втТаблицаЗапасы.Заказ
    |				ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
    |			КОНЕЦ)
    |
    |СГРУППИРОВАТЬ ПО
    |	ЗапасыОстатки.Организация,
    |	ЗапасыОстатки.СтруктурнаяЕдиница,
    |	ЗапасыОстатки.СчетУчета,
    |	ЗапасыОстатки.Номенклатура,
    |	ЗапасыОстатки.Характеристика,
    |	ЗапасыОстатки.Партия,
    |	ЗапасыОстатки.ЗаказПокупателя
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	ЗапасыОстатки.Организация,
    |	ЗапасыОстатки.СтруктурнаяЕдиница,
    |	ЗапасыОстатки.СчетУчета,
    |	ЗапасыОстатки.Номенклатура,
    |	ЗапасыОстатки.Характеристика,
    |	ЗапасыОстатки.Партия,
    |	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка),
    |	СУММА(ЗапасыОстатки.КоличествоОстаток),
    |	СУММА(ЗапасыОстатки.СуммаОстаток)
    |ИЗ
    |	ВременнаяТаблицаТовары КАК втТаблицаЗапасы
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(&МоментКонтроля, ) КАК ЗапасыОстатки
    |		ПО ЗапасыОстатки.Организация = втТаблицаЗапасы.Организация
    |			И ЗапасыОстатки.СтруктурнаяЕдиница = втТаблицаЗапасы.СтруктурнаяЕдиница
    |			И ЗапасыОстатки.СчетУчета = втТаблицаЗапасы.СчетУчета
    |			И ЗапасыОстатки.Номенклатура = втТаблицаЗапасы.Номенклатура
    |			И ЗапасыОстатки.Характеристика = втТаблицаЗапасы.Характеристика
    |			И ЗапасыОстатки.Партия = втТаблицаЗапасы.Партия
    |			И (ЗапасыОстатки.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))
    |
    |СГРУППИРОВАТЬ ПО
    |	ЗапасыОстатки.Организация,
    |	ЗапасыОстатки.СтруктурнаяЕдиница,
    |	ЗапасыОстатки.СчетУчета,
    |	ЗапасыОстатки.Номенклатура,
    |	ЗапасыОстатки.Характеристика,
    |	ЗапасыОстатки.Партия
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	ДвиженияДокументаЗапасы.Организация,
    |	ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
    |	ДвиженияДокументаЗапасы.СчетУчета,
    |	ДвиженияДокументаЗапасы.Номенклатура,
    |	ДвиженияДокументаЗапасы.Характеристика,
    |	ДвиженияДокументаЗапасы.Партия,
    |	ДвиженияДокументаЗапасы.ЗаказПокупателя,
    |	ВЫБОР
    |		КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
    |			ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
    |		ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
    |	КОНЕЦ,
    |	ВЫБОР
    |		КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
    |			ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
    |		ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
    |	КОНЕЦ
    |ИЗ
    |	РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
    |ГДЕ
    |	ДвиженияДокументаЗапасы.Регистратор = &Ссылка
    |	И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	втЗапасыИтоги.Организация КАК Организация,
    |	втЗапасыИтоги.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
    |	втЗапасыИтоги.СчетУчета КАК СчетУчета,
    |	втЗапасыИтоги.Номенклатура КАК Номенклатура,
    |	втЗапасыИтоги.Характеристика КАК Характеристика,
    |	втЗапасыИтоги.Партия КАК Партия,
    |	втЗапасыИтоги.ЗаказПокупателя КАК ЗаказПокупателя,
    |	СУММА(втЗапасыИтоги.КоличествоОстаток) КАК КоличествоОстаток,
    |	СУММА(втЗапасыИтоги.СуммаОстаток) КАК СуммаОстаток
    |ИЗ
    |	втЗапасыИтоги КАК втЗапасыИтоги
    |
    |СГРУППИРОВАТЬ ПО
    |	втЗапасыИтоги.СтруктурнаяЕдиница,
    |	втЗапасыИтоги.СчетУчета,
    |	втЗапасыИтоги.ЗаказПокупателя,
    |	втЗапасыИтоги.Номенклатура,
    |	втЗапасыИтоги.Характеристика,
    |	втЗапасыИтоги.Партия,
    |	втЗапасыИтоги.Организация";

	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПокупателя);
	Запрос.УстановитьПараметр("МоментКонтроля",
		Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.Ссылка.Финиш, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.Ссылка.Финиш);

	РезультатЗапроса = Запрос.Выполнить();

	ТаблицаЗапасыОстатки = РезультатЗапроса.Выгрузить();
	ТаблицаЗапасыОстатки.Индексы.Добавить(
		"Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
		
	РезервированиеЗапасов = СтруктураДополнительныеСвойства.УчетнаяПолитика.РезервированиеЗапасов;
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыЗапасы[н];
				
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
				
		// Т.к. в заказе-наряде сами резервируем и сами списываем, то всегда списываем из свободного остатка все количество.
		КоличествоТребуетсяВсего = СтрокаТаблицаЗапасы.Количество;
		
		КоличествоТребуетсяРезерв = СтрокаТаблицаЗапасы.Резерв;
		КоличествоТребуетсяРезервОтгрузка = СтрокаТаблицаЗапасы.РезервОтгрузка;
		КоличествоТребуетсяСвободныйОстаток = КоличествоТребуетсяВсего - КоличествоТребуетсяРезерв;
		
		Если КоличествоТребуетсяВсего > 0 Тогда
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоТребуетсяРезерв > 0 Тогда // Нужно сделать резерв.
				
				Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяРезерв Тогда

					СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяРезерв / КоличествоОстаток , 2, 1);

					МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяРезерв;
					МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;

				ИначеЕсли КоличествоОстаток = КоличествоТребуетсяРезерв Тогда

					СуммаКСписанию = СуммаОстаток;

					МассивСтрокОстатков[0].КоличествоОстаток = 0;
					МассивСтрокОстатков[0].СуммаОстаток = 0;

				Иначе
					СуммаКСписанию = 0;
				КонецЕсли;
				
				// Спишем запасы из свободного остатка.
				СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
				
				СтрокаТаблицыРасход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыРасход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыРасход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыРасход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыРасход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыРасход.КоррЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
				
				СтрокаТаблицыРасход.ЗаказПродажи = Неопределено;
				СтрокаТаблицыРасход.ДокументПродажи = Неопределено;
				СтрокаТаблицыРасход.Подразделение = Неопределено;
				СтрокаТаблицыРасход.Ответственный = Неопределено;
				СтрокаТаблицыРасход.СтавкаНДС = Неопределено;
				
				СтрокаТаблицыРасход.ЗатратыНаВыпуск = Ложь;
				СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
				СтрокаТаблицыРасход.Количество = КоличествоТребуетсяРезерв;
				СтрокаТаблицыРасход.СодержаниеПроводки = НСтр("ru='Списание запасов из свободного остатка в резерв'");
				
				// Поставим их в резерв.
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
				
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыПриход.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
				
				СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыПриход.КоррЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
				
				СтрокаТаблицыПриход.ЗаказПродажи = Неопределено;
				СтрокаТаблицыПриход.ДокументПродажи = Неопределено;
				СтрокаТаблицыПриход.Подразделение = Неопределено;
				СтрокаТаблицыПриход.Ответственный = Неопределено;
				СтрокаТаблицыПриход.СтавкаНДС = Неопределено;
				
				СтрокаТаблицыПриход.ЗатратыНаВыпуск = Ложь;
				СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
				СтрокаТаблицыПриход.Количество = КоличествоТребуетсяРезерв;
				СтрокаТаблицыПриход.СодержаниеПроводки = НСтр("ru='Поступление запасов в резерв из свободного остатка'");
				
				Если СтрокаТаблицаЗапасы.Выполнен Тогда // Если заказ выполнен - надо и продать.
					
					// Спишем запасы из резерва.
					СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
					
					СтрокаТаблицыРасход.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
					СтрокаТаблицыРасход.ЗатратыНаВыпуск = Ложь;
					СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
					СтрокаТаблицыРасход.Количество = КоличествоТребуетсяРезерв;
					СтрокаТаблицыРасход.СодержаниеПроводки = НСтр("ru='Продажа запасов из резерва'");
					
					Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
						
						// Сформируем проводки.
						СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
						СтрокаТаблицаУправленческий.Сумма = СуммаКСписанию;
						
						// Продвигаем доходы и расходы.
						СтрокаДоходыИРасходы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходы.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходы, СтрокаТаблицаЗапасы);
						
						СтрокаДоходыИРасходы.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.ПодразделениеПродажи;
						СтрокаДоходыИРасходы.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
						Если СтрокаТаблицаЗапасы.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
							СтрокаДоходыИРасходы.СчетУчета = СтрокаТаблицаЗапасы.СчетДт;
						Иначе
							СтрокаДоходыИРасходы.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаСебестоимость;
						КонецЕсли;
						СтрокаДоходыИРасходы.СуммаДоходов = 0;
						СтрокаДоходыИРасходы.СуммаРасходов = СуммаКСписанию;
						СтрокаДоходыИРасходы.Сумма = СуммаКСписанию;
						
						СтрокаДоходыИРасходы.Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылкаЗаказПокупателя, "Проект");
						
						СтрокаДоходыИРасходы.СодержаниеПроводки = НСтр("ru='Отражение расходов'");
						
						// Продвигаем себестоимость продаж.
						Если Не СтрокаТаблицаЗапасы.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
							СтрокаПродажи = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаПродажи, СтрокаТаблицаЗапасы);
							СтрокаПродажи.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
							СтрокаПродажи.Количество = 0;
							СтрокаПродажи.Сумма = 0;
							СтрокаПродажи.СуммаНДС = 0;
							СтрокаПродажи.Себестоимость = СуммаКСписанию;
							СтрокаПродажи.Склад = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
						КонецЕсли;
						
					КонецЕсли;
						
				КонецЕсли;
				
			КонецЕсли;
			
			// Если заказ на выполнении - надо списать резерв др. документов.
			КоличествоРезервОтгрузка = КоличествоТребуетсяРезервОтгрузка - КоличествоТребуетсяРезерв;
			Если СтрокаТаблицаЗапасы.Выполнен 
				И КоличествоРезервОтгрузка > 0 Тогда
				
				КоличествоТребуетсяСвободныйОстаток = КоличествоТребуетсяСвободныйОстаток - КоличествоРезервОтгрузка;
				
				СтруктураДляПоиска.Вставить("ЗаказПокупателя", ДокументСсылкаЗаказПокупателя);
			
				МассивСтрокОстатковОтгрузка = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
				
				КоличествоОстатокОтгрузка = 0;
				СуммаОстатокОтгрузка = 0;
				
				Если МассивСтрокОстатковОтгрузка.Количество() > 0 Тогда
					КоличествоОстатокОтгрузка = МассивСтрокОстатковОтгрузка[0].КоличествоОстаток;
					СуммаОстатокОтгрузка = МассивСтрокОстатковОтгрузка[0].СуммаОстаток;
				КонецЕсли;
				
				Если КоличествоОстатокОтгрузка > 0 И КоличествоОстатокОтгрузка > КоличествоРезервОтгрузка Тогда

					СуммаКСписаниюОтгрузка = Окр(СуммаОстатокОтгрузка * КоличествоРезервОтгрузка / КоличествоОстатокОтгрузка , 2, 1);

					МассивСтрокОстатковОтгрузка[0].КоличествоОстаток = МассивСтрокОстатковОтгрузка[0].КоличествоОстаток - КоличествоРезервОтгрузка;
					МассивСтрокОстатковОтгрузка[0].СуммаОстаток = МассивСтрокОстатковОтгрузка[0].СуммаОстаток - СуммаКСписаниюОтгрузка;

				ИначеЕсли КоличествоОстатокОтгрузка = КоличествоРезервОтгрузка Тогда

					СуммаКСписаниюОтгрузка = СуммаОстатокОтгрузка;

					МассивСтрокОстатковОтгрузка[0].КоличествоОстаток = 0;
					МассивСтрокОстатковОтгрузка[0].СуммаОстаток = 0;

				Иначе
					СуммаКСписаниюОтгрузка = 0;	
				КонецЕсли;
				
				// Спишем запасы из резерва.
				СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
					
				СтрокаТаблицыРасход.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
				СтрокаТаблицыРасход.ЗатратыНаВыпуск = Ложь;
				СтрокаТаблицыРасход.Сумма = СуммаКСписаниюОтгрузка;
				
				СтрокаТаблицыРасход.Количество = КоличествоРезервОтгрузка;
				
				СтрокаТаблицыРасход.СодержаниеПроводки = НСтр("ru='Продажа запасов из резерва'");
				
				Если Окр(СуммаКСписаниюОтгрузка, 2, 1) <> 0 Тогда
					
					// Сформируем проводки.
					СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
					СтрокаТаблицаУправленческий.Сумма = СуммаКСписаниюОтгрузка;
					
					// Продвигаем доходы и расходы.
					СтрокаДоходыИРасходы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходы, СтрокаТаблицаЗапасы);
					
					СтрокаДоходыИРасходы.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.ПодразделениеПродажи;
					СтрокаДоходыИРасходы.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
					Если СтрокаТаблицаЗапасы.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
						СтрокаДоходыИРасходы.СчетУчета = СтрокаТаблицаЗапасы.СчетДт;
					Иначе
						СтрокаДоходыИРасходы.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаСебестоимость;
					КонецЕсли;
					СтрокаДоходыИРасходы.СуммаДоходов = 0;
					СтрокаДоходыИРасходы.СуммаРасходов = СуммаКСписаниюОтгрузка;
					СтрокаДоходыИРасходы.Сумма = СуммаКСписаниюОтгрузка;
					
					СтрокаДоходыИРасходы.Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылкаЗаказПокупателя, "Проект");
					
					СтрокаДоходыИРасходы.СодержаниеПроводки = НСтр("ru='Отражение расходов'");
					
					// Продвигаем себестоимость продаж.
					Если Не СтрокаТаблицаЗапасы.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
						СтрокаПродажи = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаПродажи, СтрокаТаблицаЗапасы);
						СтрокаПродажи.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
						СтрокаПродажи.Количество = 0;
						СтрокаПродажи.Сумма = 0;
						СтрокаПродажи.СуммаНДС = 0;
						СтрокаПродажи.Себестоимость = СуммаКСписаниюОтгрузка;
						СтрокаПродажи.Склад = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если КоличествоТребуетсяСвободныйОстаток > 0 Тогда
				
				Если СтрокаТаблицаЗапасы.Выполнен Тогда // Если заказ выполнен - надо и продать.
					
					Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяСвободныйОстаток Тогда

						СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяСвободныйОстаток / КоличествоОстаток , 2, 1);

						МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяСвободныйОстаток;
						МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;

					ИначеЕсли КоличествоОстаток = КоличествоТребуетсяСвободныйОстаток Тогда

						СуммаКСписанию = СуммаОстаток;

						МассивСтрокОстатков[0].КоличествоОстаток = 0;
						МассивСтрокОстатков[0].СуммаОстаток = 0;

					Иначе
						СуммаКСписанию = 0;	
					КонецЕсли;	
				
					// Спишем запасы из свободного остатка.
					СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
						
					СтрокаТаблицыРасход.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
					СтрокаТаблицыРасход.ЗатратыНаВыпуск = Ложь;
					СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
					СтрокаТаблицыРасход.Количество = КоличествоТребуетсяСвободныйОстаток;
					СтрокаТаблицыРасход.СодержаниеПроводки = НСтр("ru='Продажа запасов из свободного остатка'");
					
					Если НЕ РезервированиеЗапасов Тогда
						СтрокаТаблицыРасход.КоррЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
					КонецЕсли;
					
					Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
						
						// Сформируем проводки.
						СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
						СтрокаТаблицаУправленческий.Сумма = СуммаКСписанию;
						
						// Продвигаем доходы и расходы.
						СтрокаДоходыИРасходы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходы.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходы, СтрокаТаблицаЗапасы);
						
						СтрокаДоходыИРасходы.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.ПодразделениеПродажи;
						СтрокаДоходыИРасходы.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
						СтрокаДоходыИРасходы.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаСебестоимость;
						СтрокаДоходыИРасходы.СуммаДоходов = 0;
						СтрокаДоходыИРасходы.СуммаРасходов = СуммаКСписанию;
						СтрокаДоходыИРасходы.Сумма = СуммаКСписанию;
						
						СтрокаДоходыИРасходы.Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылкаЗаказПокупателя, "Проект");
						
						СтрокаДоходыИРасходы.СодержаниеПроводки = НСтр("ru='Отражение расходов'");
						
						// Продвигаем себестоимость продаж.
						СтрокаПродажи = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаПродажи, СтрокаТаблицаЗапасы);
						СтрокаПродажи.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
						СтрокаПродажи.Количество = 0;
						СтрокаПродажи.Сумма = 0;
						СтрокаПродажи.СуммаНДС = 0;
						СтрокаПродажи.Себестоимость = СуммаКСписанию;
						СтрокаПродажи.Склад = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Удалить("ТаблицаЗапасыЗапасы");
	
КонецПроцедуры

Процедура СформироватьТаблицаЗапасыИАгентскиеУслугиПринятыеЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыПринятые.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасыПринятые.Финиш КАК Период,
	|	ТаблицаЗапасыПринятые.Организация КАК Организация,
	|	ТаблицаЗапасыПринятые.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыПринятые.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыПринятые.Партия КАК Партия,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ТаблицаЗапасыПринятые.Заказ КАК Заказ,
	|	ТаблицаЗапасыПринятые.СчетУчета КАК СчетУчета,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтчетКомитенту) КАК ТипПриемаПередачи,
	|	СУММА(ТаблицаЗапасыПринятые.Количество) КАК Количество,
	|	0 КАК СуммаРасчетов,
	|	СУММА(ТаблицаЗапасыПринятые.Сумма) КАК Сумма,
	|	СУММА(ТаблицаЗапасыПринятые.Сумма) КАК СуммаПродажи,
	|	&ВалютаУпрУчета КАК Валюта,
	|	СУММА(ТаблицаЗапасыПринятые.Сумма) КАК СуммаВал,
	|	ВЫРАЗИТЬ(&ПриемЗапасовТоварыНаКомиссии КАК СТРОКА(100)) КАК СодержаниеПроводки
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаЗапасыПринятые,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И ТаблицаЗапасыПринятые.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И ТаблицаЗапасыПринятые.ТоварыНаКомиссии
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыПринятые.Финиш,
	|	ТаблицаЗапасыПринятые.Организация,
	|	ТаблицаЗапасыПринятые.Номенклатура,
	|	ТаблицаЗапасыПринятые.Характеристика,
	|	ТаблицаЗапасыПринятые.Партия,
	|	ТаблицаЗапасыПринятые.Заказ,
	|	ТаблицаЗапасыПринятые.СчетУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыИАгентскиеУслугиПринятые.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Период,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Организация,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Характеристика,
	|	НЕОПРЕДЕЛЕНО,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура.Поставщик,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура.Договор,
	|	НЕОПРЕДЕЛЕНО,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.СчетУчетаРасчетовСПоставщиком,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеОтКомитента),
	|	СУММА(ТаблицаЗапасыИАгентскиеУслугиПринятые.Количество),
	|	0,
	|	СУММА(ТаблицаЗапасыИАгентскиеУслугиПринятые.Сумма),
	|	СУММА(ТаблицаЗапасыИАгентскиеУслугиПринятые.Сумма),
	|	&ВалютаУпрУчета,
	|	СУММА(ТаблицаЗапасыИАгентскиеУслугиПринятые.Сумма),
	|	ВЫРАЗИТЬ(&ТекстАгентскаУслуга КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ТаблицаЗапасыИАгентскиеУслугиПринятые
	|ГДЕ
	|	&ИспользуютсяАгентскиеУслуги
	|	И ТаблицаЗапасыИАгентскиеУслугиПринятые.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	И ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура.ЭтоАгентскаяУслуга
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Период,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Организация,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Характеристика,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура.Поставщик,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура.Договор,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Заказ,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.СчетУчетаРасчетовСПоставщиком";
	
	Запрос.УстановитьПараметр("ПриемЗапасовТоварыНаКомиссии", НСтр("ru = 'Прием запасов'"));
	Запрос.УстановитьПараметр("ИспользуютсяАгентскиеУслуги", ПолучитьФункциональнуюОпцию("АгентскиеУслуги"));
	Запрос.УстановитьПараметр("ТекстАгентскаУслуга", НСтр("ru = 'Реализация агентской услуги'"));
	Запрос.УстановитьПараметр("ВалютаУпрУчета", УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыИАгентскиеУслугиПринятые", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗапасыПринятые()

Процедура ОтнестиЗатратыНаРаботы(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)

	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы[н];
		
		Если СтрокаТаблицаЗапасы.ВидДвижения = ВидДвиженияНакопления.Расход 
			И СтрокаТаблицаЗапасы.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
		
			СтруктураДляПоиска = Новый Структура;
			СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
			СтруктураДляПоиска.Вставить("КоррСтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
			СтруктураДляПоиска.Вставить("КоррСчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
			СтруктураДляПоиска.Вставить("КоррНоменклатура", СтрокаТаблицаЗапасы.Номенклатура);
			СтруктураДляПоиска.Вставить("КоррХарактеристика", СтрокаТаблицаЗапасы.Характеристика);
			СтруктураДляПоиска.Вставить("КоррПартия", СтрокаТаблицаЗапасы.Партия);
			СтруктураДляПоиска.Вставить("ВидДвижения", ВидДвиженияНакопления.Расход);
			
			НайденныеСтроки = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.НайтиСтроки(СтруктураДляПоиска);
			
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
				СтрокаТаблицаЗапасы.Сумма = СтрокаТаблицаЗапасы.Сумма + НайденнаяСтрока.Сумма;
				Если СтрокаТаблицаЗапасы.Сумма <> 0 Тогда
				
					// Сформируем проводки.
					СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
					СтрокаТаблицаУправленческий.СценарийПланирования = Справочники.СценарииПланирования.Фактический;
					СтрокаТаблицаУправленческий.Содержание = НСтр("ru = 'Списание запасов'");
					СтрокаТаблицаУправленческий.Сумма = НайденнаяСтрока.Сумма;
					
					// Продвигаем себестоимость продаж.
					СтрокаТаблицаПродажи = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаПродажи, СтрокаТаблицаЗапасы);
					
					СтрокаТаблицаПродажи.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
					СтрокаТаблицаПродажи.Количество = 0;
					СтрокаТаблицаПродажи.Сумма = 0;
					СтрокаТаблицаПродажи.СуммаНДС = 0;
					СтрокаТаблицаПродажи.Себестоимость = НайденнаяСтрока.Сумма;

					// Продвигаем доходы и расходы.
					СтрокаДоходыИРасходы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходы, СтрокаТаблицаЗапасы);
					
					СтрокаДоходыИРасходы.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
					СтрокаДоходыИРасходы.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаСебестоимость;
					СтрокаДоходыИРасходы.СуммаДоходов = 0;
					СтрокаДоходыИРасходы.СуммаРасходов = НайденнаяСтрока.Сумма;
					СтрокаДоходыИРасходы.Сумма = НайденнаяСтрока.Сумма;
					
					СтрокаДоходыИРасходы.Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылкаЗаказПокупателя, "Проект");
					
					СтрокаДоходыИРасходы.СодержаниеПроводки = НСтр("ru='Отражение расходов'");
				
				КонецЕсли;
			
			КонецЦикла;
		
		КонецЕсли; 
		
	КонецЦикла;		
	

КонецПроцедуры // ОтнестиЗатратыНаРаботы()

Процедура СформироватьТаблицаОплатаСчетовИЗаказовЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	МассивДоступныхОпераций = Новый Массив;
	МассивДоступныхОпераций.Добавить(Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд);
	РасчетыПроведениеДокументов.СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства, МассивДоступныхОпераций);
	
КонецПроцедуры

Процедура СформироватьТаблицаПродажиПоДисконтнойКартеЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Если ДокументСсылкаЗаказПокупателя.ДисконтнаяКарта.Пустая() Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнымКартам", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|		И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен) КАК ФормироватьДвиженияРасчетов
	|ИЗ
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Запрос.Текст = ДисконтныеКартыУНФСервер.ТекстЗапросаПродажиПоДисконтнойКарте("ЗаказПокупателя");
		Запрос.УстановитьПараметр("ПроцентСкидки", ДисконтныеКартыУНФСервер.ВычислитьПроцентСкидкиПоДисконтнойКарте(СтруктураДополнительныеСвойства.ДляПроведения.Дата,
																														   ДокументСсылкаЗаказПокупателя.ДисконтнаяКарта));
		РезультатЗапроса = Запрос.Выполнить();
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнымКартам", РезультатЗапроса.Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьТаблицаПродажиПоПредоставленнымСкидкамЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Период КАК Период,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.СкидкаНаценка КАК ВидСкидкиНаценки,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Сумма КАК СуммаСкидки,
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаТовары.Документ КАК ДокументСкидки,
	|	ВременнаяТаблицаТовары.Контрагент КАК ПолучательСкидки,
	|	ВременнаяТаблицаТовары.Ответственный КАК Ответственный
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаАвтоСкидкиНаценки КАК ВременнаяТаблицаАвтоСкидкиНаценки
	|		ПО ВременнаяТаблицаТовары.КлючСвязи = ВременнаяТаблицаАвтоСкидкиНаценки.КлючСвязи,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Период,
	|	ВременнаяТаблицаШапка.ВидСкидкиНаценки,
	|	ВременнаяТаблицаТовары.СуммаСкидкиНаценки,
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика,
	|	ВременнаяТаблицаТовары.Документ,
	|	ВременнаяТаблицаТовары.Контрагент,
	|	ВременнаяТаблицаТовары.Ответственный
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаТовары.СуммаСкидкиНаценки <> 0
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Период,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.СкидкаНаценка,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Сумма,
	|	ВременнаяТаблицаРаботы.Номенклатура,
	|	ВременнаяТаблицаРаботы.Характеристика,
	|	ВременнаяТаблицаРаботы.Документ,
	|	ВременнаяТаблицаРаботы.Контрагент,
	|	ВременнаяТаблицаРаботы.Ответственный
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ВременнаяТаблицаРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаАвтоСкидкиНаценки КАК ВременнаяТаблицаАвтоСкидкиНаценки
	|		ПО ВременнаяТаблицаРаботы.КлючСвязиДляСкидокНаценок = ВременнаяТаблицаАвтоСкидкиНаценки.КлючСвязи,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаРаботы.Период,
	|	ВременнаяТаблицаШапка.ВидСкидкиНаценки,
	|	ВременнаяТаблицаРаботы.СуммаСкидкиНаценки,
	|	ВременнаяТаблицаРаботы.Номенклатура,
	|	ВременнаяТаблицаРаботы.Характеристика,
	|	ВременнаяТаблицаРаботы.Документ,
	|	ВременнаяТаблицаРаботы.Контрагент,
	|	ВременнаяТаблицаРаботы.Ответственный
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ВременнаяТаблицаРаботы,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаРаботы.СуммаСкидкиНаценки <> 0
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПредоставленныеСкидки", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура СформироватьТаблицаСерииНоменклатурыЗаказНаряд(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Если ДокументСсылка.СерииНоменклатуры.Количество()=0 И ДокументСсылка.СерииНоменклатурыМатериалы.Количество()=0 Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатуры", Новый ТаблицаЗначений);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыГарантии", Новый ТаблицаЗначений);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерииНоменклатуры", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СНОбщаяТаблица.Период КАК Период,
	|	СНОбщаяТаблица.ВидДвижения КАК ВидДвижения,
	|	СНОбщаяТаблица.ДатаСобытия КАК ДатаСобытия,
	|	СНОбщаяТаблица.Операция КАК Операция,
	|	СНОбщаяТаблица.Серия КАК Серия,
	|	СНОбщаяТаблица.Организация КАК Организация,
	|	СНОбщаяТаблица.Номенклатура КАК Номенклатура,
	|	СНОбщаяТаблица.Характеристика КАК Характеристика,
	|	СНОбщаяТаблица.Партия КАК Партия,
	|	СНОбщаяТаблица.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СНОбщаяТаблица.Ячейка КАК Ячейка,
	|	СУММА(СНОбщаяТаблица.Количество) КАК Количество,
	|	СНОбщаяТаблица.ОстаткиСерийНоменклатуры КАК ОстаткиСерийНоменклатуры
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВременнаяТаблицаЗапасы.Период КАК Период,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|		ВременнаяТаблицаЗапасы.Период КАК ДатаСобытия,
	|		ЗНАЧЕНИЕ(Перечисление.ОперацииСерийНоменклатуры.Расход) КАК Операция,
	|		СерииНоменклатуры.Серия КАК Серия,
	|		СерииНоменклатуры.ОстаткиСерийНоменклатуры КАК ОстаткиСерийНоменклатуры,
	|		ВременнаяТаблицаЗапасы.Организация КАК Организация,
	|		ВременнаяТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|		ВременнаяТаблицаЗапасы.Характеристика КАК Характеристика,
	|		ВременнаяТаблицаЗапасы.Партия КАК Партия,
	|		ВременнаяТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ВременнаяТаблицаЗапасы.Ячейка КАК Ячейка,
	|		СерииНоменклатуры.Количество КАК Количество
	|	ИЗ
	|		ВременнаяТаблицаТовары КАК ВременнаяТаблицаЗапасы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСерииНоменклатуры КАК СерииНоменклатуры
	|			ПО ВременнаяТаблицаЗапасы.КлючСвязи = СерииНоменклатуры.КлючСвязи,
	|		ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|	ГДЕ
	|		ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|		И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВременнаяТаблицаМатериалы.Период,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|		ВременнаяТаблицаМатериалы.Период,
	|		ЗНАЧЕНИЕ(Перечисление.ОперацииСерийНоменклатуры.Расход),
	|		СерииНоменклатуры.Серия,
	|		СерииНоменклатуры.ОстаткиСерийНоменклатуры,
	|		ВременнаяТаблицаМатериалы.Организация,
	|		ВременнаяТаблицаМатериалы.Номенклатура,
	|		ВременнаяТаблицаМатериалы.Характеристика,
	|		ВременнаяТаблицаМатериалы.Партия,
	|		ВременнаяТаблицаМатериалы.СтруктурнаяЕдиницаЗапасов,
	|		ВременнаяТаблицаМатериалы.Ячейка,
	|		СерииНоменклатуры.Количество
	|	ИЗ
	|		ВременнаяТаблицаМатериалы КАК ВременнаяТаблицаМатериалы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСерииНоменклатурыМатериалы КАК СерииНоменклатуры
	|			ПО ВременнаяТаблицаМатериалы.КлючСвязиСерииНоменклатуры = СерииНоменклатуры.КлючСвязи,
	|		ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|	ГДЕ
	|		ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|		И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)) КАК СНОбщаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	СНОбщаяТаблица.Период,
	|	СНОбщаяТаблица.ДатаСобытия,
	|	СНОбщаяТаблица.Операция,
	|	СНОбщаяТаблица.Серия,
	|	СНОбщаяТаблица.Организация,
	|	СНОбщаяТаблица.Номенклатура,
	|	СНОбщаяТаблица.Характеристика,
	|	СНОбщаяТаблица.Партия,
	|	СНОбщаяТаблица.СтруктурнаяЕдиница,
	|	СНОбщаяТаблица.Ячейка,
	|	СНОбщаяТаблица.ВидДвижения,
	|	СНОбщаяТаблица.ОстаткиСерийНоменклатуры";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если Не СтруктураДополнительныеСвойства.УчетнаяПолитика.МиграцияСерийНоменклатурыВыполнена Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыГарантии", РезультатЗапроса);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерииНоменклатуры", Новый ТаблицаЗначений);
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерииНоменклатуры", РезультатЗапроса);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыГарантии", Новый ТаблицаЗначений);
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ОстаткиСерийНоменклатуры", Истина);
	ОстаткиСерийНоменклатурыСтроки = РезультатЗапроса.НайтиСтроки(ПараметрыОтбора);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатуры", РезультатЗапроса.Скопировать(ОстаткиСерийНоменклатурыСтроки));
	
КонецПроцедуры

Процедура СформироватьТаблицаПодарочныеСертификатыЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПодарочныеСертификаты Тогда
	
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		
		Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерииНоменклатуры Тогда
		
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ВременнаяТаблицаТовары.Период КАК Период,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
			|	ВременнаяТаблицаТовары.Номенклатура КАК ПодарочныйСертификат,
			|	СерииНоменклатуры.Серия КАК НомерСертификата,
			|	ВременнаяТаблицаТовары.НоминалСертификата КАК Сумма
			|ИЗ
			|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСерииНоменклатуры КАК СерииНоменклатуры
			|		ПО ВременнаяТаблицаТовары.КлючСвязи = СерииНоменклатуры.КлючСвязи
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|		ПО ВременнаяТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка,
			|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
			|ГДЕ
			|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
			|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
			|	И ВременнаяТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаДокумента.Период,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
			|	ТаблицаДокумента.Документ,
			|	ТаблицаДокумента.НомерСертификата,
			|	ВЫБОР
			|		КОГДА ТаблицаДокумента.ЧастичноеПогашение
			|			ТОГДА ТаблицаДокумента.СуммаСертификата
			|		КОГДА ТаблицаДокумента.ИспользоватьСерииНоменклатуры
			|			ТОГДА ВЫБОР
			|					КОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) > ТаблицаДокумента.СуммаСертификата
			|						ТОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0)
			|					ИНАЧЕ ТаблицаДокумента.СуммаСертификата
			|				КОНЕЦ
			|		ИНАЧЕ ТаблицаДокумента.Номинал
			|	КОНЕЦ
			|ИЗ
			|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиСертификатов КАК ПодарочныеСертификатыОстатки
			|		ПО ТаблицаДокумента.Документ = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
			|			И ТаблицаДокумента.НомерСертификата = ПодарочныеСертификатыОстатки.НомерСертификата,
			|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
			|ГДЕ
			|	ТаблицаДокумента.ОплатаСертификатом
			|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда
			|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)";
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ВременнаяТаблицаТовары.Период КАК Период,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
			|	ВременнаяТаблицаТовары.Номенклатура КАК ПодарочныйСертификат,
			|	ВременнаяТаблицаТовары.НоминалСертификата КАК Сумма
			|ИЗ
			|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары,
			|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
			|ГДЕ
			|	ВременнаяТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
			|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
			|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаДокумента.Период,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
			|	ТаблицаДокумента.Документ,
			|	ТаблицаДокумента.Номинал
			|ИЗ
			|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента,
			|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
			|ГДЕ
			|	ТаблицаДокумента.ОплатаСертификатом
			|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда
			|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)";
			
		КонецЕсли;
		
		Результат = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Результат = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПодарочныеСертификаты", Результат);
	
КонецПроцедуры

Процедура СформироватьТаблицаОплатаПодарочнымиСертификатамиЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПодарочныеСертификаты Тогда
	
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
		|		И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен) КАК ФормироватьДвиженияРасчетов
		|ИЗ
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Запрос.Текст = РаботаСПодарочнымиСертификатами.СформироватьТекстЗапросаПоОплатеПодарочнымиСертификатами(Истина);
			Результат = Запрос.Выполнить().Выгрузить();
			
		Иначе
			
			Результат = Новый ТаблицаЗначений;
			
		КонецЕсли;
		
	Иначе
		
		Результат = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаПодарочнымиСертификатами", Результат);
	
КонецПроцедуры

Процедура СформироватьТаблицаРезервыТоваровОрганизацийЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Если Не ПолучитьФункциональнуюОпцию("ПередачаТоваровМеждуОрганизациями") Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРезервыТоваровОрганизаций", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ДанныеЗапасы.Период КАК Период,
	|	ДанныеЗапасы.Организация КАК Организация,
	|	ДанныеЗапасы.Номенклатура КАК Номенклатура,
	|	ДанныеЗапасы.Характеристика КАК Характеристика,
	|	ДанныеЗапасы.Партия КАК Партия,
	|	ДанныеЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ДанныеЗапасы.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеЗапасы.Ячейка КАК Ячейка,
	|	ДанныеЗапасы.НомерГТД КАК НомерГТД,
	|	ДанныеЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ДанныеЗапасы.Количество КАК Количество
	|ПОМЕСТИТЬ ЗапасыДляРезервовТоваровОрганизаций
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|		ТаблицаТовары.Период КАК Период,
	|		ТаблицаТовары.Организация КАК Организация,
	|		ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
	|		ТаблицаТовары.Партия КАК Партия,
	|		ТаблицаТовары.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ТаблицаШапка.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		ТаблицаТовары.Ячейка КАК Ячейка,
	|		ТаблицаТовары.НомерГТД КАК НомерГТД,
	|		ТаблицаТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|		ВЫБОР
	|			КОГДА ТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда
	|				ТОГДА ТаблицаТовары.Количество
	|			ИНАЧЕ ТаблицаТовары.Резерв
	|		КОНЕЦ КАК Количество
	|	ИЗ
	|		ВременнаяТаблицаТовары КАК ТаблицаТовары,
	|		ВременнаяТаблицаШапка КАК ТаблицаШапка
	|	ГДЕ
	|		НЕ ТаблицаТовары.ОрдерныйСклад
	|		И (ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|				ИЛИ ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаМатериалы.НомерСтроки,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|		ТаблицаМатериалы.Период,
	|		ТаблицаМатериалы.Организация,
	|		ТаблицаМатериалы.Номенклатура,
	|		ТаблицаМатериалы.Характеристика,
	|		ТаблицаМатериалы.Партия,
	|		ТаблицаМатериалы.СтруктурнаяЕдиницаЗапасов,
	|		ТаблицаШапка.ХозяйственнаяОперация,
	|		ТаблицаМатериалы.Ячейка,
	|		ТаблицаМатериалы.НомерГТД,
	|		ТаблицаМатериалы.СтранаПроисхождения,
	|		ВЫБОР
	|			КОГДА ТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда
	|				ТОГДА ТаблицаМатериалы.Количество
	|			ИНАЧЕ ТаблицаМатериалы.Резерв
	|		КОНЕЦ
	|	ИЗ
	|		ВременнаяТаблицаМатериалы КАК ТаблицаМатериалы,
	|		ВременнаяТаблицаШапка КАК ТаблицаШапка
	|	ГДЕ
	|		НЕ ТаблицаМатериалы.ОрдерныйСклад
	|		И ТаблицаМатериалы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)) КАК ДанныеЗапасы";
	Запрос.Выполнить();
	
	ИнтеркампаниСервер.СформироватьТаблицаРезервыТоваровОрганизаций(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	
КонецПроцедуры

Процедура СформироватьТаблицаУправленческийЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаУправленческий.НомерСтроки КАК НомерСтроки,
	|	ТаблицаУправленческий.Финиш КАК Период,
	|	ТаблицаУправленческий.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ЭтоАгентскаяУслуга
	|			ТОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПоставщиком
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчетаПродажи
	|	КОНЕЦ КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаПродажи.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаПродажи.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалКт,
	|	ТаблицаУправленческий.Сумма КАК Сумма,
	|	&ОтражениеВыручки КАК Содержание
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ТаблицаУправленческий,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И ТаблицаУправленческий.Сумма <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Финиш,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии ИЛИ ТаблицаУправленческий.ЭтоАгентскаяУслуга
	|			ТОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПоставщиком
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчетаПродажи
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии ИЛИ ТаблицаУправленческий.ЭтоАгентскаяУслуга
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии ИЛИ ТаблицаУправленческий.ЭтоАгентскаяУслуга
	|			ТОГДА ТаблицаУправленческий.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.Сумма,
	|	&ОтражениеВыручки
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаУправленческий,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И ТаблицаУправленческий.Сумма <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	1,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ОплатаСертификатом = ИСТИНА
	|			ТОГДА &СчетУчетаАвансовПокупателя
	|		ИНАЧЕ ТаблицаДокумента.СчетУчетаАвансовПокупателя
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ОплатаСертификатом = ИСТИНА
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ТаблицаДокумента.СчетУчетаАвансовПокупателяВалютный
	|			ТОГДА ТаблицаДокумента.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ОплатаСертификатом = ИСТИНА
	|			ТОГДА 0
	|		КОГДА ТаблицаДокумента.СчетУчетаАвансовПокупателяВалютный
	|			ТОГДА ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаРасчетовСПокупателемВалютный
	|			ТОГДА ТаблицаДокумента.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаРасчетовСПокупателемВалютный
	|			ТОГДА ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаДокумента.Сумма,
	|	&ЗачетПредоплаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДокумента.Период КАК Период,
	|		ТаблицаДокумента.Организация КАК Организация,
	|		ТаблицаДокумента.СчетУчетаАвансовПокупателя КАК СчетУчетаАвансовПокупателя,
	|		ТаблицаДокумента.СчетУчетаАвансовПокупателяВалютный КАК СчетУчетаАвансовПокупателяВалютный,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПокупателемВалютный КАК СчетУчетаРасчетовСПокупателемВалютный,
	|		ТаблицаДокумента.ВалютаРасчетов КАК ВалютаРасчетов,
	|		СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВал,
	|		СУММА(ТаблицаДокумента.Сумма) КАК Сумма,
	|		ТаблицаДокумента.ОплатаСертификатом КАК ОплатаСертификатом
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаДокумента.Период КАК Период,
	|			ТаблицаДокумента.Организация КАК Организация,
	|			ТаблицаДокумента.Контрагент.СчетУчетаАвансовПокупателя КАК СчетУчетаАвансовПокупателя,
	|			ТаблицаДокумента.Контрагент.СчетУчетаАвансовПокупателя.Валютный КАК СчетУчетаАвансовПокупателяВалютный,
	|			ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|			ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПокупателем.Валютный КАК СчетУчетаРасчетовСПокупателемВалютный,
	|			ТаблицаДокумента.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|			ТаблицаДокумента.СуммаВал КАК СуммаВал,
	|			ТаблицаДокумента.Сумма КАК Сумма,
	|			ТаблицаДокумента.ОплатаСертификатом КАК ОплатаСертификатом
	|		ИЗ
	|			ВременнаяТаблицаРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|			И ТаблицаДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И (ТаблицаДокумента.СуммаВал <> 0 ИЛИ ТаблицаДокумента.Сумма <> 0)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаДокумента.Дата,
	|			ТаблицаДокумента.Организация,
	|			ТаблицаДокумента.Контрагент.СчетУчетаАвансовПокупателя,
	|			ТаблицаДокумента.Контрагент.СчетУчетаАвансовПокупателя.Валютный,
	|			ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПокупателем,
	|			ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПокупателем.Валютный,
	|			ТаблицаДокумента.Валюта,
	|			0,
	|			ТаблицаДокумента.СуммаКурсовойРазницы,
	|			NULL
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК ТаблицаДокумента
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаДокумента.Период,
	|		ТаблицаДокумента.Организация,
	|		ТаблицаДокумента.СчетУчетаАвансовПокупателя,
	|		ТаблицаДокумента.СчетУчетаАвансовПокупателяВалютный,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПокупателемВалютный,
	|		ТаблицаДокумента.ВалютаРасчетов,
	|		ТаблицаДокумента.ОплатаСертификатом
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ТаблицаДокумента.Сумма) >= 0.005
	|			ИЛИ СУММА(ТаблицаДокумента.Сумма) <= -0.005
	|			ИЛИ СУММА(ТаблицаДокумента.СуммаВал) >= 0.005
	|			ИЛИ СУММА(ТаблицаДокумента.СуммаВал) <= -0.005)) КАК ТаблицаДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4,
	|	1,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СчетУчета
	|		ИНАЧЕ &ОтрицательнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|				И ТаблицаУправленческий.СчетУчетаВалютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА &ПоложительнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы < 0
	|				И ТаблицаУправленческий.СчетУчетаВалютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаУправленческий.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	&КурсоваяРазница
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Дата КАК Дата,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Организация КАК Организация,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.СчетУчета КАК СчетУчета,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.СчетУчетаВалютный КАК СчетУчетаВалютный,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Валюта КАК Валюта,
	|		СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) КАК СуммаКурсовойРазницы
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаДокумента.Дата КАК Дата,
	|			ТаблицаДокумента.Организация КАК Организация,
	|			ТаблицаДокумента.СчетУчета КАК СчетУчета,
	|			ТаблицаДокумента.СчетУчета.Валютный КАК СчетУчетаВалютный,
	|			ТаблицаДокумента.Валюта КАК Валюта,
	|			ТаблицаДокумента.СуммаКурсовойРазницы КАК СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаДокумента.Дата,
	|			ТаблицаДокумента.Организация,
	|			ТаблицаДокумента.СчетУчета,
	|			ТаблицаДокумента.СчетУчета.Валютный,
	|			ТаблицаДокумента.Валюта,
	|			ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК ТаблицаКурсовыхРазницРасчетыСПокупателями
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Дата,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Организация,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.СчетУчета,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.СчетУчетаВалютный,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Валюта
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) >= 0.005
	|			ИЛИ СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) <= -0.005)) КАК ТаблицаУправленческий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Финиш,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПоставщиком
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчетаПродажи
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА ТаблицаУправленческий.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	&СчетУчетаАвансовПокупателя,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	ТаблицаУправленческий.Сумма,
	|	&ВозникновениеАвансаПокупателя
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаУправленческий,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И ТаблицаУправленческий.Сумма <> 0
	|	И ТаблицаУправленческий.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ЗачетПредоплаты", НСтр("ru = 'Зачет предоплаты'"));
	Запрос.УстановитьПараметр("ОтражениеВыручки", НСтр("ru = 'Выручка от продажи'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	Запрос.УстановитьПараметр("ВозникновениеАвансаПокупателя", НСтр("ru = 'Возникновение аванса покупателя'"));
	Запрос.УстановитьПараметр("ПоложительнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ОтрицательнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеРасходы);
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	
	Для Каждого КлючИЗначение Из СтруктураДополнительныеСвойства.ДляСертификатов Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяПроводка = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПроводка, Выборка);
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьТаблицаВыполнениеДоговораОбслуживанияЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьБиллинг") Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыполнениеДоговоровОбслуживания", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаРаботы.Период,
	|	ВременнаяТаблицаРаботы.Договор,
	|	ВременнаяТаблицаРаботы.Номенклатура КАК ОбъектДоговораОбслуживания,
	|	ВременнаяТаблицаРаботы.Характеристика,
	|	ИСТИНА КАК УказанаСтоимость,
	|	ВременнаяТаблицаРаботы.КоличествоПлан КАК Количество,
	|	ВременнаяТаблицаРаботы.СуммаВал КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ВременнаяТаблицаРаботы,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоДоговорОбслуживания
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Период,
	|	ВременнаяТаблицаТовары.Договор,
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика,
	|	ИСТИНА,
	|	ВременнаяТаблицаТовары.Количество,
	|	ВременнаяТаблицаТовары.СуммаВал
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоДоговорОбслуживания";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыполнениеДоговоровОбслуживания", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

#КонецОбласти 

#КонецЕсли

