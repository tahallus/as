
#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция НачатьЗамерВремени()
	
	Возврат ?(ВыполнятьЗамерыПроизводительности, ОценкаПроизводительности.НачатьЗамерВремени(), Неопределено);
	
КонецФункции

&НаСервере
Процедура ЗакончитьЗамерВремени(НачалоЗамера, ИмяКлючевойОперации, Комментарий = "");

	Если ВыполнятьЗамерыПроизводительности Тогда
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени(ИмяКлючевойОперации, НачалоЗамера, , Комментарий);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет таблицу показателей параметрами.
//
&НаСервере
Функция ЗаполнитьПоказатели(СтруктураДанных)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Показатель1", "");
	СтруктураВозврата.Вставить("Представление1", Справочники.ПараметрыРасчетов.ПустаяСсылка());
	СтруктураВозврата.Вставить("Значение1", 0);
	СтруктураВозврата.Вставить("Показатель2", "");
	СтруктураВозврата.Вставить("Представление2", Справочники.ПараметрыРасчетов.ПустаяСсылка());
	СтруктураВозврата.Вставить("Значение2", 0);
	СтруктураВозврата.Вставить("Показатель3", "");
	СтруктураВозврата.Вставить("Представление3", Справочники.ПараметрыРасчетов.ПустаяСсылка());
	СтруктураВозврата.Вставить("Значение3", 0);
	СтруктураВозврата.Вставить("СчетЗатрат", Неопределено);
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанных.Сотрудник)
		ИЛИ НЕ ЗначениеЗаполнено(СтруктураДанных.ВидНачисленияУдержания) Тогда
		
		Возврат СтруктураВозврата;
		
	КонецЕсли; 
	
	СтруктураПараметров = Новый Структура;
	ЗарплатаУНФВызовСервера.ДобавитьПараметрыВСтруктуру(СтруктураДанных.ВидНачисленияУдержания.Формула, СтруктураПараметров);
	
	Счетчик = 0;
	Для каждого ПараметрСтруктуры Из СтруктураПараметров Цикл
		
		Если ПараметрСтруктуры.Ключ = "ОтработаноДней" 
			ИЛИ ПараметрСтруктуры.Ключ = "ОтработаноЧасов"
			ИЛИ ПараметрСтруктуры.Ключ = "ТарифнаяСтавка" Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		ПараметрРасчета = Справочники.ПараметрыРасчетов.НайтиПоРеквизиту("Идентификатор", ПараметрСтруктуры.Ключ);
		Если НЕ ЗначениеЗаполнено(ПараметрРасчета) Тогда
			
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не найден параметр '") + ПараметрРасчета + НСтр("ru = ' для формулы начисления (удержания) '") + СтруктураДанных.ВидНачисленияУдержания;
			Сообщение.Сообщить();
			Продолжить;
			
		КонецЕсли; 
		
		Счетчик = Счетчик + 1;
		
		Если Счетчик > 3 Тогда
			
			Прервать;
			
		КонецЕсли; 
		
		СтруктураВозврата["Показатель" + Счетчик] = ПараметрСтруктуры.Ключ;
		СтруктураВозврата["Представление" + Счетчик] = ПараметрРасчета;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", 			СтруктураДанных.НачалоМесяца);
	Запрос.УстановитьПараметр("Организация", 			СтруктураДанных.Организация);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", 	СтруктураДанных.СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("Валюта", 				СтруктураДанных.Валюта);
	Запрос.УстановитьПараметр("Сотрудник", 				СтруктураДанных.Сотрудник);
	Запрос.УстановитьПараметр("ВидНачисленияУдержания", СтруктураДанных.ВидНачисленияУдержания);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиСрезПоследних.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ СотрудникиПодразделенияНаНачалоМесяца
	|ИЗ
	|	РегистрСведений.Сотрудники.СрезПоследних(
	|			&НачалоМесяца,
	|			Организация = &Организация
	|				И Сотрудник = &Сотрудник
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК СотрудникиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ПлановыеНачисленияИУдержания.СчетЗатрат, НЕОПРЕДЕЛЕНО) КАК СчетЗатрат
	|ИЗ
	|	СотрудникиПодразделенияНаНачалоМесяца КАК СотрудникиПодразделенияНаНачалоМесяца
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияИУдержания.СрезПоследних(
	|				&НачалоМесяца,
	|				Организация = &Организация
	|					И Сотрудник = &Сотрудник
	|					И ВидНачисленияУдержания = &ВидНачисленияУдержания
	|					И Валюта = &Валюта
	|					И ВидНачисленияУдержания <> ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплата)
	|					И ВидНачисленияУдержания <> ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплатаПроцент)
	|					И ВидНачисленияУдержания <> ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.ФиксированнаяСумма)) КАК ПлановыеНачисленияИУдержания
	|		ПО СотрудникиПодразделенияНаНачалоМесяца.Сотрудник = ПлановыеНачисленияИУдержания.Сотрудник";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			
			СтруктураВозврата.Вставить("СчетЗатрат", Выборка.СчетЗатрат);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции // ЗаполнитьПоказатели()

&НаСервере
// Функция формирует таблицу начислений.
//
Функция СформироватьТаблицуНачислений()

	ТаблицаНачислений = Новый ТаблицаЗначений;

    Массив = Новый Массив;
	
	Массив.Добавить(Тип("СправочникСсылка.Сотрудники"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();

	ТаблицаНачислений.Колонки.Добавить("Сотрудник", ОписаниеТипов);

	Массив.Добавить(Тип("СправочникСсылка.Должности"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();

	ТаблицаНачислений.Колонки.Добавить("Должность", ОписаниеТипов);
	
	Массив.Добавить(Тип("СправочникСсылка.ВидыНачисленийИУдержаний"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();

	ТаблицаНачислений.Колонки.Добавить("ВидНачисленияУдержания", ОписаниеТипов);

	Массив.Добавить(Тип("Дата"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНачислений.Колонки.Добавить("ДатаНачала", ОписаниеТипов);
	  
	Массив.Добавить(Тип("Дата"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНачислений.Колонки.Добавить("ДатаОкончания", ОписаниеТипов);
		        
	Массив.Добавить(Тип("ПланСчетовСсылка.Управленческий"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();

	ТаблицаНачислений.Колонки.Добавить("СчетЗатрат", ОписаниеТипов);

	Массив.Добавить(Тип("Число"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНачислений.Колонки.Добавить("Размер", ОписаниеТипов);
	
	Массив.Добавить(Тип("СправочникСсылка.ГрафикиРаботы"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНачислений.Колонки.Добавить("ГрафикРаботы", ОписаниеТипов);
	
	Для каждого СтрокаТЧ Из Объект.НачисленияУдержания Цикл
		
		НоваяСтрока = ТаблицаНачислений.Добавить();
		НоваяСтрока.Сотрудник = СтрокаТЧ.Сотрудник;
		НоваяСтрока.Должность = СтрокаТЧ.Должность;
		НоваяСтрока.ВидНачисленияУдержания = СтрокаТЧ.ВидНачисленияУдержания;
		НоваяСтрока.ДатаНачала = СтрокаТЧ.ДатаНачала;
		НоваяСтрока.ДатаОкончания = СтрокаТЧ.ДатаОкончания;
		НоваяСтрока.СчетЗатрат = СтрокаТЧ.СчетЗатрат;
		НоваяСтрока.Размер = СтрокаТЧ.Размер;
		НоваяСтрока.ГрафикРаботы = СтрокаТЧ.ГрафикРаботы;
		
	КонецЦикла;
	
	Возврат ТаблицаНачислений;
	
КонецФункции // СформироватьТаблицуНачислений()

&НаСервере
// Процедура заполняет табличную часть "Сотрудники" с отбором по подразделению.
//
Процедура ЗаполнитьПоПодразделению()
	Перем НачалоЗамераПодразделение, НачалоЗамераПараметр;
	
	НачалоЗамераПодразделение = НачатьЗамерВремени();
	
	Объект.НачисленияУдержания.Очистить();
	Объект.НалогиНаДоходы.Очистить();
	Объект.Взносы.Очистить();
	
	КорректныеТипыСчетовНачислений = Новый Массив(6);
	КорректныеТипыСчетовНачислений[0] = Перечисления.ТипыСчетов.КосвенныеЗатраты;
	КорректныеТипыСчетовНачислений[1] = Перечисления.ТипыСчетов.Расходы;
	КорректныеТипыСчетовНачислений[2] = Перечисления.ТипыСчетов.ПрочиеОборотныеАктивы;
	КорректныеТипыСчетовНачислений[3] = Перечисления.ТипыСчетов.НезавершенноеПроизводство;
	КорректныеТипыСчетовНачислений[4] = Перечисления.ТипыСчетов.ПрочиеОборотныеАктивы;
	
	Запрос = Новый Запрос;
	
	Запрос.Параметры.Вставить("НачалоМесяца", 		Объект.ПериодРегистрации);
	Запрос.Параметры.Вставить("ОкончаниеМесяца",	КонецМесяца(Объект.ПериодРегистрации));
	Запрос.Параметры.Вставить("Организация", 		Константы.УчетПоКомпании.Компания(Объект.Организация));
	Запрос.Параметры.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница);
	Запрос.Параметры.Вставить("Валюта", 			Объект.ВалютаДокумента);
		
	// 1. Определяем интересующих сотрудников	
	// 2. Определяем все движения интересующих сотрудников и начисления в нужном подразделении.
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ СотрудникиПодразделения
	|ИЗ
	|	(ВЫБРАТЬ
	|		СотрудникиСрезПоследних.Сотрудник КАК Сотрудник
	|	ИЗ
	|		РегистрСведений.Сотрудники.СрезПоследних(&НачалоМесяца, Организация = &Организация) КАК СотрудникиСрезПоследних
	|	ГДЕ
	|		СотрудникиСрезПоследних.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Сотрудники.Сотрудник
	|	ИЗ
	|		РегистрСведений.Сотрудники КАК Сотрудники
	|	ГДЕ
	|		Сотрудники.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|		И Сотрудники.Период МЕЖДУ &НачалоМесяца И &ОкончаниеМесяца
	|		И Сотрудники.Организация = &Организация) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Сотрудник КАК Сотрудник,
	|	ВложенныйЗапрос.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВложенныйЗапрос.Должность КАК Должность,
	|	ПлановыеНачисленияИУдержания.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
	|	ПлановыеНачисленияИУдержания.Сумма КАК Сумма,
	|	ПлановыеНачисленияИУдержания.СчетЗатрат КАК СчетЗатрат,
	|	ПлановыеНачисленияИУдержания.Актуальность КАК Актуальность,
	|	ВложенныйЗапрос.Период КАК Период,
	|	ВложенныйЗапрос.ДругоеПодразделениеУвольнение КАК ДругоеПодразделениеУвольнение,
	|	ВложенныйЗапрос.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ ДвиженияСотрудники
	|ИЗ
	|	(ВЫБРАТЬ
	|		СотрудникиПодразделения.Сотрудник КАК Сотрудник,
	|		Сотрудники.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		Сотрудники.Должность КАК Должность,
	|		МАКСИМУМ(ПлановыеНачисленияИУдержания.Период) КАК ПериодНачисления,
	|		Сотрудники.Период КАК Период,
	|		ВЫБОР
	|			КОГДА Сотрудники.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ КАК ДругоеПодразделениеУвольнение,
	|		ПлановыеНачисленияИУдержания.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
	|		ПлановыеНачисленияИУдержания.Валюта КАК Валюта,
	|		Сотрудники.ГрафикРаботы КАК ГрафикРаботы
	|	ИЗ
	|		СотрудникиПодразделения КАК СотрудникиПодразделения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Сотрудники КАК Сотрудники
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияИУдержания КАК ПлановыеНачисленияИУдержания
	|				ПО Сотрудники.Организация = ПлановыеНачисленияИУдержания.Организация
	|					И Сотрудники.Сотрудник = ПлановыеНачисленияИУдержания.Сотрудник
	|					И Сотрудники.Период >= ПлановыеНачисленияИУдержания.Период
	|					И (Сотрудники.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|					И (ПлановыеНачисленияИУдержания.Валюта = &Валюта)
	|					И (ПлановыеНачисленияИУдержания.ВидНачисленияУдержания <> ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплата))
	|					И (ПлановыеНачисленияИУдержания.ВидНачисленияУдержания <> ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплатаПроцент))
	|					И (ПлановыеНачисленияИУдержания.ВидНачисленияУдержания <> ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.ФиксированнаяСумма))
	|			ПО СотрудникиПодразделения.Сотрудник = Сотрудники.Сотрудник
	|	ГДЕ
	|		Сотрудники.Организация = &Организация
	|		И Сотрудники.Период МЕЖДУ ДОБАВИТЬКДАТЕ(&НачалоМесяца, ДЕНЬ, 1) И &ОкончаниеМесяца
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Сотрудники.СтруктурнаяЕдиница,
	|		СотрудникиПодразделения.Сотрудник,
	|		Сотрудники.Должность,
	|		Сотрудники.Период,
	|		ПлановыеНачисленияИУдержания.ВидНачисленияУдержания,
	|		ПлановыеНачисленияИУдержания.Валюта,
	|		ВЫБОР
	|			КОГДА Сотрудники.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ,
	|		Сотрудники.ГрафикРаботы) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияИУдержания КАК ПлановыеНачисленияИУдержания
	|		ПО ВложенныйЗапрос.Сотрудник = ПлановыеНачисленияИУдержания.Сотрудник
	|			И (ПлановыеНачисленияИУдержания.Валюта = &Валюта)
	|			И (ПлановыеНачисленияИУдержания.Организация = &Организация)
	|			И ВложенныйЗапрос.ПериодНачисления = ПлановыеНачисленияИУдержания.Период
	|			И ВложенныйЗапрос.ВидНачисленияУдержания = ПлановыеНачисленияИУдержания.ВидНачисленияУдержания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Сотрудник КАК Сотрудник,
	|	ВложенныйЗапрос.Период КАК Период,
	|	ВложенныйЗапрос.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
	|	ВложенныйЗапрос.Сумма КАК Сумма,
	|	ВложенныйЗапрос.СчетЗатрат КАК СчетЗатрат,
	|	ВложенныйЗапрос.Актуальность КАК Актуальность,
	|	Сотрудники.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	Сотрудники.Должность КАК Должность
	|ПОМЕСТИТЬ ДвиженияПлановыеНачисления
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПлановыеНачисленияИУдержания.Сотрудник КАК Сотрудник,
	|		ПлановыеНачисленияИУдержания.Период КАК Период,
	|		ПлановыеНачисленияИУдержания.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
	|		ПлановыеНачисленияИУдержания.Сумма КАК Сумма,
	|		ВЫБОР
	|			КОГДА ПлановыеНачисленияИУдержания.СчетЗатрат = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка)
	|				ТОГДА ПлановыеНачисленияИУдержания.ВидНачисленияУдержания.СчетЗатрат
	|			ИНАЧЕ ПлановыеНачисленияИУдержания.СчетЗатрат
	|		КОНЕЦ КАК СчетЗатрат,
	|		ПлановыеНачисленияИУдержания.Актуальность КАК Актуальность,
	|		МАКСИМУМ(Сотрудники.Период) КАК ПериодСотрудники
	|	ИЗ
	|		СотрудникиПодразделения КАК СотрудникиПодразделения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияИУдержания КАК ПлановыеНачисленияИУдержания
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Сотрудники КАК Сотрудники
	|				ПО ПлановыеНачисленияИУдержания.Сотрудник = Сотрудники.Сотрудник
	|					И ПлановыеНачисленияИУдержания.Период >= Сотрудники.Период
	|					И (Сотрудники.Организация = &Организация)
	|			ПО СотрудникиПодразделения.Сотрудник = ПлановыеНачисленияИУдержания.Сотрудник
	|				И (ПлановыеНачисленияИУдержания.Валюта = &Валюта)
	|				И (ПлановыеНачисленияИУдержания.Период МЕЖДУ ДОБАВИТЬКДАТЕ(&НачалоМесяца, ДЕНЬ, 1) И &ОкончаниеМесяца)
	|				И (ПлановыеНачисленияИУдержания.ВидНачисленияУдержания <> ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплата))
	|				И (ПлановыеНачисленияИУдержания.ВидНачисленияУдержания <> ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплатаПроцент))
	|				И (ПлановыеНачисленияИУдержания.ВидНачисленияУдержания <> ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.ФиксированнаяСумма))
	|				И (ПлановыеНачисленияИУдержания.Организация = &Организация)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПлановыеНачисленияИУдержания.Актуальность,
	|		ВЫБОР
	|			КОГДА ПлановыеНачисленияИУдержания.СчетЗатрат = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка)
	|				ТОГДА ПлановыеНачисленияИУдержания.ВидНачисленияУдержания.СчетЗатрат
	|			ИНАЧЕ ПлановыеНачисленияИУдержания.СчетЗатрат
	|		КОНЕЦ,
	|		ПлановыеНачисленияИУдержания.Период,
	|		ПлановыеНачисленияИУдержания.ВидНачисленияУдержания,
	|		ПлановыеНачисленияИУдержания.Сотрудник,
	|		ПлановыеНачисленияИУдержания.Сумма) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Сотрудники КАК Сотрудники
	|		ПО ВложенныйЗапрос.ПериодСотрудники = Сотрудники.Период
	|			И (Сотрудники.Организация = &Организация)
	|			И ВложенныйЗапрос.Сотрудник = Сотрудники.Сотрудник
	|ГДЕ
	|	Сотрудники.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Сотрудник КАК Сотрудник,
	|	ВложенныйЗапрос.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВложенныйЗапрос.Должность КАК Должность,
	|	ВложенныйЗапрос.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
	|	ВложенныйЗапрос.Размер КАК Размер,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|			ТОГДА 0
	|		КОГДА ВложенныйЗапрос.СтруктурнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ДругоеПодразделениеУвольнение,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.ВидНачисленияУдержания.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Налог)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоНалог,
	|	ВложенныйЗапрос.ГрафикРаботы КАК ГрафикРаботы,
	|	ВложенныйЗапрос.СчетЗатрат КАК СчетЗатрат,
	|	ВложенныйЗапрос.Актуальность КАК Актуальность,
	|	ВложенныйЗапрос.ДатаДействияНачало КАК ДатаДействияНачало
	|ИЗ
	|	(ВЫБРАТЬ
	|		СотрудникиПодразделения.Сотрудник КАК Сотрудник,
	|		СотрудникиСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		СотрудникиСрезПоследних.Должность КАК Должность,
	|		ПлановыеНачисленияИУдержанияСрезПоследних.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
	|		ПлановыеНачисленияИУдержанияСрезПоследних.Сумма КАК Размер,
	|		&НачалоМесяца КАК ДатаДействияНачало,
	|		ВЫБОР
	|			КОГДА ПлановыеНачисленияИУдержанияСрезПоследних.СчетЗатрат = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка)
	|				ТОГДА ПлановыеНачисленияИУдержанияСрезПоследних.ВидНачисленияУдержания.СчетЗатрат
	|			ИНАЧЕ ПлановыеНачисленияИУдержанияСрезПоследних.СчетЗатрат
	|		КОНЕЦ КАК СчетЗатрат,
	|		ИСТИНА КАК Актуальность,
	|		СотрудникиСрезПоследних.ГрафикРаботы КАК ГрафикРаботы
	|	ИЗ
	|		СотрудникиПодразделения КАК СотрудникиПодразделения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Сотрудники.СрезПоследних(&НачалоМесяца, Организация = &Организация) КАК СотрудникиСрезПоследних
	|			ПО СотрудникиПодразделения.Сотрудник = СотрудникиСрезПоследних.Сотрудник
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияИУдержания.СрезПоследних(
	|					&НачалоМесяца,
	|					Организация = &Организация
	|						И Валюта = &Валюта) КАК ПлановыеНачисленияИУдержанияСрезПоследних
	|			ПО СотрудникиПодразделения.Сотрудник = ПлановыеНачисленияИУдержанияСрезПоследних.Сотрудник
	|	ГДЕ
	|		ПлановыеНачисленияИУдержанияСрезПоследних.Актуальность
	|		И ПлановыеНачисленияИУдержанияСрезПоследних.ВидНачисленияУдержания <> ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплата)
	|		И ПлановыеНачисленияИУдержанияСрезПоследних.ВидНачисленияУдержания <> ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплатаПроцент)
	|		И ПлановыеНачисленияИУдержанияСрезПоследних.ВидНачисленияУдержания <> ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.ФиксированнаяСумма)
	|		И СотрудникиСрезПоследних.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПлановыеНачисленияИУдержания.Сотрудник,
	|		ПлановыеНачисленияИУдержания.СтруктурнаяЕдиница,
	|		ПлановыеНачисленияИУдержания.Должность,
	|		ПлановыеНачисленияИУдержания.ВидНачисленияУдержания,
	|		ПлановыеНачисленияИУдержания.Сумма,
	|		ПлановыеНачисленияИУдержания.Период,
	|		ПлановыеНачисленияИУдержания.СчетЗатрат,
	|		ПлановыеНачисленияИУдержания.Актуальность,
	|		Сотрудники.ГрафикРаботы
	|	ИЗ
	|		ДвиженияСотрудники КАК Сотрудники
	|			ПОЛНОЕ СОЕДИНЕНИЕ ДвиженияПлановыеНачисления КАК ПлановыеНачисленияИУдержания
	|			ПО Сотрудники.Сотрудник = ПлановыеНачисленияИУдержания.Сотрудник
	|				И Сотрудники.Период = ПлановыеНачисленияИУдержания.Период
	|				И Сотрудники.ВидНачисленияУдержания = ПлановыеНачисленияИУдержания.ВидНачисленияУдержания) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник
	|ИТОГИ ПО
	|	Сотрудник";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// 3. Определяем даты окончания периодов, заполняем таблицу значений.
	
	КонецМесяца = НачалоДня(КонецМесяца(Объект.ПериодРегистрации));
	ВыборкаСотрудник = МассивРезультатов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Сотрудник");
	Пока ВыборкаСотрудник.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаСотрудник.Сотрудник) Тогда Продолжить КонецЕсли;
		
		Выборка = ВыборкаСотрудник.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ДругоеПодразделениеУвольнение Тогда
				ЗаменитьДатуМассив = Объект.НачисленияУдержания.НайтиСтроки(Новый Структура("ДатаОкончания, Сотрудник", КонецМесяца, Выборка.Сотрудник));
				Для каждого ЭлементМассива Из ЗаменитьДатуМассив Цикл
					ЭлементМассива.ДатаОкончания = Выборка.ДатаДействияНачало - ?(Выборка.ДругоеПодразделениеУвольнение = 1, 60*60*24, 0);
				КонецЦикла;
				Продолжить;
			КонецЕсли; 
			
			ЗаменитьДатуМассив = Объект.НачисленияУдержания.НайтиСтроки(Новый Структура("ДатаОкончания, Сотрудник, ВидНачисленияУдержания", КонецМесяца, Выборка.Сотрудник, Выборка.ВидНачисленияУдержания));
			Для каждого ЭлементМассива Из ЗаменитьДатуМассив Цикл
				ЭлементМассива.ДатаОкончания = Выборка.ДатаДействияНачало - 60*60*24;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Выборка.ВидНачисленияУдержания) И Выборка.Актуальность Тогда
			
				Если Выборка.ЭтоНалог Тогда
										
					НоваяСтрока							= Объект.НалогиНаДоходы.Добавить();
					НоваяСтрока.Сотрудник 				= Выборка.Сотрудник;
					НоваяСтрока.ВидНачисленияУдержания 	= Выборка.ВидНачисленияУдержания;
				
				Иначе
				
					НоваяСтрока							= Объект.НачисленияУдержания.Добавить();
					НоваяСтрока.Сотрудник 				= Выборка.Сотрудник;
					НоваяСтрока.Должность 				= Выборка.Должность;
											
					НоваяСтрока.ВидНачисленияУдержания 	= Выборка.ВидНачисленияУдержания;
					НоваяСтрока.ДатаНачала 				= Выборка.ДатаДействияНачало;
					НоваяСтрока.ДатаОкончания 			= КонецМесяца;
					НоваяСтрока.Размер 					= Выборка.Размер;
					НоваяСтрока.ГрафикРаботы 			= Выборка.ГрафикРаботы;
					
					ТипСчета = Выборка.СчетЗатрат.ТипСчета;
					
					СчетНачисленияУдержанияУказанСОшибкой = Ложь;
					Если Выборка.ВидНачисленияУдержания.Тип = Перечисления.ТипыНачисленийИУдержаний.Начисление Тогда
						
						СчетНачисленияУдержанияУказанСОшибкой = (КорректныеТипыСчетовНачислений.Найти(ТипСчета) = Неопределено);
						
					ИначеЕсли Выборка.ВидНачисленияУдержания.Тип = Перечисления.ТипыНачисленийИУдержаний.Удержание Тогда
						
						СчетНачисленияУдержанияУказанСОшибкой = (ТипСчета <> Перечисления.ТипыСчетов.ПрочиеДоходы);
						
					ИначеЕсли Выборка.ВидНачисленияУдержания.Тип = Перечисления.ТипыНачисленийИУдержаний.Налог Тогда
						
						СчетНачисленияУдержанияУказанСОшибкой = (ТипСчета <> Перечисления.ТипыСчетов.Кредиторы);
						
					КонецЕсли;
					
					Если Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение
						И СчетНачисленияУдержанияУказанСОшибкой
						Тогда
						
						НоваяСтрока.СчетЗатрат = ПланыСчетов.Управленческий.ПустаяСсылка();
						
					Иначе
						
						НоваяСтрока.СчетЗатрат = Выборка.СчетЗатрат;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла;
	
	// 4. Заполняем отработанное время
		
	Запрос.Параметры.Вставить("ТаблицаНачисленияУдержания", СформироватьТаблицуНачислений());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНачисленияУдержания.Сотрудник КАК Сотрудник,
	|	ТаблицаНачисленияУдержания.Должность КАК Должность,
	|	ТаблицаНачисленияУдержания.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
	|	ТаблицаНачисленияУдержания.ДатаНачала КАК ДатаНачала,
	|	ТаблицаНачисленияУдержания.ДатаОкончания КАК ДатаОкончания,
	|	ТаблицаНачисленияУдержания.Размер КАК Размер,
	|	ТаблицаНачисленияУдержания.СчетЗатрат КАК СчетЗатрат,
	|	ТаблицаНачисленияУдержания.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ ТаблицаНачисленияУдержания
	|ИЗ
	|	&ТаблицаНачисленияУдержания КАК ТаблицаНачисленияУдержания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументНачисление.Сотрудник КАК Сотрудник,
	|	ДокументНачисление.Должность КАК Должность,
	|	ДокументНачисление.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
	|	ДокументНачисление.ДатаНачала КАК ДатаНачала,
	|	ДокументНачисление.ДатаОкончания КАК ДатаОкончания,
	|	ДокументНачисление.Размер КАК Размер,
	|	ДокументНачисление.СчетЗатрат КАК СчетЗатрат,
	|	ДанныеТабеля.ОтработаноДней КАК ОтработаноДней,
	|	ДанныеТабеля.ОтработаноЧасов КАК ОтработаноЧасов,
	|	ЕСТЬNULL(ДанныеТабеля.ВЦеломЗаПериод, ЛОЖЬ) КАК ВЦеломЗаПериод,
	|	ДокументНачисление.ГрафикРаботы КАК ГрафикРаботы
	|ИЗ
	|	ТаблицаНачисленияУдержания КАК ДокументНачисление
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДокументНачисление.Сотрудник КАК Сотрудник,
	|			СУММА(Табель.Дней) КАК ОтработаноДней,
	|			СУММА(Табель.Часов) КАК ОтработаноЧасов,
	|			ДокументНачисление.ДатаНачала КАК ДатаНачала,
	|			ДокументНачисление.ДатаОкончания КАК ДатаОкончания,
	|			МАКСИМУМ(Табель.ВЦеломЗаПериод) КАК ВЦеломЗаПериод
	|		ИЗ
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ДокументНачисление.Сотрудник КАК Сотрудник,
	|				ДокументНачисление.ДатаНачала КАК ДатаНачала,
	|				ДокументНачисление.ДатаОкончания КАК ДатаОкончания
	|			ИЗ
	|				ТаблицаНачисленияУдержания КАК ДокументНачисление) КАК ДокументНачисление
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Табель КАК Табель
	|				ПО ДокументНачисление.Сотрудник = Табель.Сотрудник
	|					И (Табель.ВидВремени = ЗНАЧЕНИЕ(Справочник.ВидыРабочегоВремени.Работа))
	|					И (Табель.Организация = &Организация)
	|					И (Табель.СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|					И (НЕ Табель.ВЦеломЗаПериод
	|							И ДокументНачисление.ДатаНачала <= Табель.Период
	|							И ДокументНачисление.ДатаОкончания >= Табель.Период
	|						ИЛИ Табель.ВЦеломЗаПериод
	|							И Табель.Период = НАЧАЛОПЕРИОДА(ДокументНачисление.ДатаНачала, МЕСЯЦ))
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДокументНачисление.Сотрудник,
	|			ДокументНачисление.ДатаНачала,
	|			ДокументНачисление.ДатаОкончания) КАК ДанныеТабеля
	|		ПО ДокументНачисление.Сотрудник = ДанныеТабеля.Сотрудник
	|			И ДокументНачисление.ДатаНачала = ДанныеТабеля.ДатаНачала
	|			И ДокументНачисление.ДатаОкончания = ДанныеТабеля.ДатаОкончания";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет()[1].Выгрузить();
	Объект.НачисленияУдержания.Загрузить(РезультатЗапроса); 
	
	Объект.НачисленияУдержания.Сортировать("Сотрудник Возр, ДатаНачала Возр, ВидНачисленияУдержания Возр");
	
	Для каждого СтрокаТабличнойЧасти Из Объект.НачисленияУдержания Цикл
		
		// 1. Проверка
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидНачисленияУдержания) Тогда
			Продолжить;
		КонецЕсли; 
		МассивПовторов = РезультатЗапроса.НайтиСтроки(Новый Структура("Сотрудник, ВидНачисленияУдержания", СтрокаТабличнойЧасти.Сотрудник, СтрокаТабличнойЧасти.ВидНачисленияУдержания));
		Если МассивПовторов.Количество() > 1 И МассивПовторов[0].ВЦеломЗаПериод Тогда
			
			СтрокаТабличнойЧасти.ОтработаноДней = 0;
			СтрокаТабличнойЧасти.ОтработаноЧасов = 0;
			
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = '%1, %2: Данные об отработанном времени введены сводно. Расчет времени по каждому виду начисления (удержания) невозможен.'"),
				СтрокаТабличнойЧасти.Сотрудник, СтрокаТабличнойЧасти.ВидНачисленияУдержания);
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.НачисленияУдержания",
				СтрокаТабличнойЧасти.НомерСтроки, "Сотрудник");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , КонтекстноеПоле);
			
		КонецЕсли;
		
		// 2. Очистка
		Для Счетчик = 1 По 3 Цикл
			
			СтрокаТабличнойЧасти["Показатель" + Счетчик] = "";
			СтрокаТабличнойЧасти["Представление" + Счетчик] = Справочники.ПараметрыРасчетов.ПустаяСсылка();
			СтрокаТабличнойЧасти["Значение" + Счетчик] = 0;
			
		КонецЦикла;
		
		// 3. Поиск всех параметров-идентификаторов формулы
		СтруктураПараметров = Новый Структура;
		ЗарплатаУНФВызовСервера.ДобавитьПараметрыВСтруктуру(СтрокаТабличнойЧасти.ВидНачисленияУдержания.Формула, СтруктураПараметров);
		
		// 4. Добавление показателя
		Счетчик = 0;
		Для каждого ПараметрСтруктуры Из СтруктураПараметров Цикл
			
			Если ПараметрСтруктуры.Ключ = "ОтработаноДней"
				ИЛИ ПараметрСтруктуры.Ключ = "ОтработаноЧасов"
				ИЛИ ПараметрСтруктуры.Ключ = "ТарифнаяСтавка" Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ПараметрРасчета = Справочники.ПараметрыРасчетов.НайтиПоРеквизиту("Идентификатор", ПараметрСтруктуры.Ключ);
			Если НЕ ЗначениеЗаполнено(ПараметрРасчета) Тогда
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = НСтр("ru = 'Не найден параметр '") + ПараметрРасчета + НСтр("ru = ' для сотрудника в строке № '") + (Объект.НачисленияУдержания.Индекс(СтрокаТабличнойЧасти) + 1);
				Сообщение.Сообщить();
			КонецЕсли; 
			
			Счетчик = Счетчик + 1;
			
			Если Счетчик > 3 Тогда
				Прервать;
			КонецЕсли; 
			
			СтрокаТабличнойЧасти["Показатель" + Счетчик] = ПараметрСтруктуры.Ключ;
			СтрокаТабличнойЧасти["Представление" + Счетчик] = ПараметрРасчета;
			
			Если ПараметрРасчета.ЗадаватьЗначениеПриРасчетеЗП Тогда
				Продолжить;
			КонецЕсли; 
			
		// 5. Расчет показателя
			
			СтруктураОтборов = Новый Структура;
			СтруктураОтборов.Вставить("ПериодРегистрации", 		Объект.ПериодРегистрации);
			СтруктураОтборов.Вставить("Организация", 			Константы.УчетПоКомпании.Компания(Объект.Организация));
			СтруктураОтборов.Вставить("Валюта", 				Объект.ВалютаДокумента);
			СтруктураОтборов.Вставить("Подразделение", 			Объект.СтруктурнаяЕдиница);
			СтруктураОтборов.Вставить("СтруктурнаяЕдиница", 	Объект.СтруктурнаяЕдиница);
			СтруктураОтборов.Вставить("МоментВремени", 			КонецДня(СтрокаТабличнойЧасти.ДатаОкончания));
			СтруктураОтборов.Вставить("НачалоПериода", 			СтрокаТабличнойЧасти.ДатаНачала);
			СтруктураОтборов.Вставить("КонецПериода", 			КонецДня(СтрокаТабличнойЧасти.ДатаОкончания));
			СтруктураОтборов.Вставить("Сотрудник",		 		СтрокаТабличнойЧасти.Сотрудник);
			СтруктураОтборов.Вставить("Ответственный",		 	СтрокаТабличнойЧасти.Сотрудник);
			СтруктураОтборов.Вставить("ТипЗанятости",		 	СтрокаТабличнойЧасти.Сотрудник.ТипЗанятости);
			СтруктураОтборов.Вставить("ТабельныйНомер",		 	СтрокаТабличнойЧасти.Сотрудник.Код);
			СтруктураОтборов.Вставить("ТабНомер",		 		СтрокаТабличнойЧасти.Сотрудник.Код);
			СтруктураОтборов.Вставить("Исполнитель",		 	СтрокаТабличнойЧасти.Сотрудник);
			СтруктураОтборов.Вставить("ФизЛицо",		 		СтрокаТабличнойЧасти.Сотрудник.Физлицо);
			СтруктураОтборов.Вставить("ФизическоеЛицо",		 	СтрокаТабличнойЧасти.Сотрудник.Физлицо);
			СтруктураОтборов.Вставить("Должность", 				СтрокаТабличнойЧасти.Должность);
			СтруктураОтборов.Вставить("ВидНачисленияУдержания", СтрокаТабличнойЧасти.ВидНачисленияУдержания);
			СтруктураОтборов.Вставить("ЗаказПокупателя", 		СтрокаТабличнойЧасти.ЗаказПокупателя);
			СтруктураОтборов.Вставить("Заказ", 					СтрокаТабличнойЧасти.ЗаказПокупателя);
			СтруктураОтборов.Вставить("Проект", 				СтрокаТабличнойЧасти.ЗаказПокупателя.Проект);
			СтруктураОтборов.Вставить("СчетЗатрат", 			СтрокаТабличнойЧасти.СчетЗатрат);
			СтруктураОтборов.Вставить("НаправлениеДеятельности",СтрокаТабличнойЧасти.НаправлениеДеятельности);
			СтруктураОтборов.Вставить("Размер",					СтрокаТабличнойЧасти.Размер);
			СтруктураОтборов.Вставить("ОтработаноДней",			СтрокаТабличнойЧасти.ОтработаноДней);
			СтруктураОтборов.Вставить("ОтработаноЧасов",		СтрокаТабличнойЧасти.ОтработаноЧасов);
			СтруктураОтборов.Вставить("ГрафикРаботы",			СтрокаТабличнойЧасти.ГрафикРаботы); 
			
			// СуммаПродажВНациональнойВалюте
			ВалютаУчета = Константы.ВалютаУчета.Получить();
			Если ВалютаУчета = Объект.ВалютаДокумента Тогда
				
				СтруктураОтборов.Вставить("ВалютаУчетаКратность", 1);
				СтруктураОтборов.Вставить("ВалютаУчетаКурс", 1);
				СтруктураОтборов.Вставить("ВалютаДокументаКратность", 1);
				СтруктураОтборов.Вставить("ВалютаДокументаКурс", 1);
				
			Иначе
				
				СтруктураКурсаВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУчета, Объект.Дата);
				СтруктураОтборов.Вставить("ВалютаУчетаКратность", СтруктураКурсаВалюты.Кратность);
				СтруктураОтборов.Вставить("ВалютаУчетаКурс", СтруктураКурсаВалюты.Курс);
				
				СтруктураКурсаВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
				СтруктураОтборов.Вставить("ВалютаДокументаКратность", СтруктураКурсаВалюты.Кратность);
				СтруктураОтборов.Вставить("ВалютаДокументаКурс", СтруктураКурсаВалюты.Курс);
				
			КонецЕсли;
			
			НачалоЗамераПараметр = НачатьЗамерВремени();
			
			СтрокаТабличнойЧасти["Значение" + Счетчик] = ЗарплатаИПерсоналСлужебный.РассчитатьЗначениеПараметра(СтруктураОтборов, ПараметрРасчета, НСтр("ru = ' для сотрудника в строке №'") + (Объект.НачисленияУдержания.Индекс(СтрокаТабличнойЧасти) + 1));
			
			ЗакончитьЗамерВремени(НачалоЗамераПараметр, "НачислениеЗарплаты_РассчитатьЗначениеПараметра", Строка(ПараметрРасчета.Идентификатор));
			
		КонецЦикла;
		
	КонецЦикла; 
	
	ЗаполнитьЗаймыСотрудникам(); // Прочие расчеты. Займы сотрудникам.
	РассчитатьПоФормулам();
	РассчитатьНалогиИВзносы();
	ОбновитьПодвалФормы();
	
	ЗакончитьЗамерВремени(НачалоЗамераПодразделение, "НачислениеЗарплаты_ЗаполнитьПоПодразделению");
	
КонецПроцедуры // ЗаполнитьПоПодразделению()

&НаСервере
// Процедура выполняет расчет размера начисления или удержания по формуле.
//
Процедура РассчитатьПоФормулам()

	Для каждого СтрокаНачислений Из Объект.НачисленияУдержания Цикл
		
		Если СтрокаНачислений.РучнаяКорректировка ИЛИ НЕ ЗначениеЗаполнено(СтрокаНачислений.ВидНачисленияУдержания.Формула) Тогда
			Продолжить;
		КонецЕсли; 
		
		// 1. Добавляем параметры и значения в структуру
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ТарифнаяСтавка", СтрокаНачислений.Размер);
		СтруктураПараметров.Вставить("ОтработаноДней", СтрокаНачислений.ОтработаноДней);
		СтруктураПараметров.Вставить("ОтработаноЧасов", СтрокаНачислений.ОтработаноЧасов);
		
		Для Счетчик = 1 По 3 Цикл
			Если ЗначениеЗаполнено(СтрокаНачислений["Представление" + Счетчик]) Тогда
				СтруктураПараметров.Вставить(СтрокаНачислений["Показатель" + Счетчик], СтрокаНачислений["Значение" + Счетчик]);
			КонецЕсли; 
		КонецЦикла; 
		
		
		// 2. Рассчитываем по формулам
			 
		Формула = СтрокаНачислений.ВидНачисленияУдержания.Формула;
		Для каждого Параметр Из СтруктураПараметров Цикл
			Формула = СтрЗаменить(Формула, "[" + Параметр.Ключ + "]", Формат(Параметр.Значение, "ЧРД=.; ЧН=0; ЧГ=0"));
		КонецЦикла;
		Попытка
			РассчитаннаяСумма = ОбщегоНазначения.ВычислитьВБезопасномРежиме(Формула);
		Исключение
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Не удалось рассчитать сумму начисления  в строке №%1. Возможно, формула содержит ошибку или не заполнены показатели.'"),
				СтрокаНачислений.НомерСтроки);
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.НачисленияУдержания",
				СтрокаНачислений.НомерСтроки, "ВидНачисленияУдержания");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , КонтекстноеПоле);
			
			РассчитаннаяСумма = 0;
		КонецПопытки;
		СтрокаНачислений.Сумма = Окр(РассчитаннаяСумма, 2); 

	КонецЦикла;
	
	ОбновитьПодвалФормы();

КонецПроцедуры // РассчитатьПоФормулам()

&НаСервере
// Процедура выполняет расчет размера налога и взносов.
//
Процедура РассчитатьНалогиИВзносы()
	
	Если РассчитыватьБезВзносов Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТранзакцияАктивна() Тогда
		НачатьТранзакцию();
		ОтменятьЗапись = Истина;
	КонецЕсли;
	
	НаборыЗаписей = УчетСтраховыхВзносов.НаборыЗаписейРегистратора(Объект.Ссылка.Метаданные(),?(Объект.Ссылка.Пустая(), Неопределено, Объект.Ссылка));
	
	
	
	НачисленияИУдержания = Объект.НачисленияУдержания.Выгрузить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НачислениеЗаработнойПлаты.Сотрудник КАК Сотрудник,
	|	НачислениеЗаработнойПлаты.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
	|	НачислениеЗаработнойПлаты.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВтНачисления
	|ИЗ
	|	&НачисленияИУдержания КАК НачислениеЗаработнойПлаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеЗаработнойПлатыНачисления.Сотрудник КАК Сотрудник,
	|	НачислениеЗаработнойПлатыНачисления.ВидНачисленияУдержания КАК ВидНачисления,
	|	ВЫБОР
	|		КОГДА ВидыНачисленийИУдержаний.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Начисление)
	|			ТОГДА ВЫРАЗИТЬ(НачислениеЗаработнойПлатыНачисления.Сумма * КурсыВалютРасчетов.Курс * КурсыВалютУчета.Кратность / (КурсыВалютУчета.Курс * КурсыВалютРасчетов.Кратность) КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Начисление,
	|	ВЫБОР
	|		КОГДА ВидыНачисленийИУдержаний.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Удержание)
	|			ТОГДА ВЫРАЗИТЬ(НачислениеЗаработнойПлатыНачисления.Сумма * КурсыВалютРасчетов.Курс * КурсыВалютУчета.Кратность / (КурсыВалютУчета.Курс * КурсыВалютРасчетов.Кратность) КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Удержание,
	|	ВидыНачисленийИУдержаний.КодДоходаНДФЛ.СтавкаНДФЛ КАК СтавкаНДФЛ,
	|	ВидыНачисленийИУдержаний.КодДоходаНДФЛ.СтавкаНДФЛПовышенная КАК СтавкаНДФЛПовышенная
	|ПОМЕСТИТЬ ВТНачислениеЗаработнойПлатыНачисления
	|ИЗ
	|	ВтНачисления КАК НачислениеЗаработнойПлатыНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНачисленийИУдержаний КАК ВидыНачисленийИУдержаний
	|		ПО (ВидыНачисленийИУдержаний.Ссылка = НачислениеЗаработнойПлатыНачисления.ВидНачисленияУдержания)
	|			И (ВидыНачисленийИУдержаний.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Начисление)
	|				ИЛИ ВидыНачисленийИУдержаний.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Удержание))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&ДатаДокумента,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						Константы.ВалютаУчета
	|					ИЗ
	|						Константы КАК Константы)) КАК КурсыВалютУчета
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютРасчетов
	|		ПО (&ВалютаДокумента = КурсыВалютРасчетов.Валюта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеЗаработнойПлатыНачисления.Сотрудник КАК Сотрудник,
	|	НачислениеЗаработнойПлатыНачисления.ВидНачисления КАК ВидНачисления,
	|	СУММА(НачислениеЗаработнойПлатыНачисления.Начисление) КАК Сумма,
	|	СУММА(НачислениеЗаработнойПлатыНачисления.Удержание) КАК Скидка
	|ПОМЕСТИТЬ ВтНачисления
	|ИЗ
	|	ВТНачислениеЗаработнойПлатыНачисления КАК НачислениеЗаработнойПлатыНачисления
	|
	|СГРУППИРОВАТЬ ПО
	|	НачислениеЗаработнойПлатыНачисления.Сотрудник,
	|	НачислениеЗаработнойПлатыНачисления.ВидНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачислениеЗаработнойПлатыНачисления.Сотрудник КАК Сотрудник,
	|	НачислениеЗаработнойПлатыНачисления.СтавкаНДФЛ КАК СтавкаНДФЛ,
	|	СУММА(НачислениеЗаработнойПлатыНачисления.Начисление) КАК Сумма,
	|	ЕСТЬNULL(НачисленияОбороты.СуммаПриход, 0) КАК СуммаНачисленийПрошлыхПериодов
	|ПОМЕСТИТЬ ВтСотрудникиИСтавкаНДФЛ
	|ИЗ
	|	ВТНачислениеЗаработнойПлатыНачисления КАК НачислениеЗаработнойПлатыНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПерсоналом.Обороты(
	|				НАЧАЛОПЕРИОДА(&ПериодРегистрации, ГОД),
	|				,
	|				,
	|				Организация = &Организация
	|					И ПериодРегистрации < &ПериодРегистрации) КАК НачисленияОбороты
	|		ПО НачислениеЗаработнойПлатыНачисления.Сотрудник = НачисленияОбороты.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	НачислениеЗаработнойПлатыНачисления.Сотрудник,
	|	НачислениеЗаработнойПлатыНачисления.СтавкаНДФЛ,
	|	ЕСТЬNULL(НачисленияОбороты.СуммаПриход, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВтНачисления.Сотрудник КАК Сотрудник,
	|	СУММА(ВтНачисления.Сумма) КАК Сумма,
	|	ЕСТЬNULL(НачисленияОбороты.СуммаПриход, 0) КАК СуммаНачисленийПрошлыхПериодов
	|ПОМЕСТИТЬ ВтСотрудники
	|ИЗ
	|	ВтНачисления КАК ВтНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПерсоналом.Обороты(
	|				НАЧАЛОПЕРИОДА(&ПериодРегистрации, ГОД),
	|				,
	|				,
	|				Организация = &Организация
	|					И ПериодРегистрации < &ПериодРегистрации) КАК НачисленияОбороты
	|		ПО ВтНачисления.Сотрудник = НачисленияОбороты.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтНачисления.Сотрудник,
	|	ЕСТЬNULL(НачисленияОбороты.СуммаПриход, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛИмущественныйВычетСрезПоследних.Сотрудник КАК Сотрудник,
	|	НДФЛИмущественныйВычетСрезПоследних.СуммаРасходов КАК СуммаРасходов,
	|	НДФЛИмущественныйВычетСрезПоследних.ПроцентыПоКредиту КАК ПроцентыПоКредиту,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ПредоставленныйИмущественныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код312)
	|				ТОГДА ПредоставленныйИмущественныйВычет.СуммаВычетаОборот
	|		КОНЕЦ, 0) КАК ПредоставленныйВычетПоПроцентам,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ПредоставленныйИмущественныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код311)
	|				ТОГДА ПредоставленныйИмущественныйВычет.СуммаВычетаОборот
	|		КОНЕЦ, 0) КАК ПредоставленныйВычетПоРасходам
	|ПОМЕСТИТЬ ВтИмущественныйВычет
	|ИЗ
	|	РегистрСведений.НДФЛИмущественныйВычет.СрезПоследних(
	|			&ПериодРегистрации,
	|			Сотрудник В
	|				(ВЫБРАТЬ
	|					ВтСотрудники.Сотрудник
	|				ИЗ
	|					ВтСотрудники)) КАК НДФЛИмущественныйВычетСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПримененныеВычетыПоНДФЛ.Обороты(
	|				,
	|				,
	|				,
	|				Организация = &Организация
	|					И ПериодРегистрации < &ПериодРегистрации
	|					И (КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код312)
	|						ИЛИ КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код311))) КАК ПредоставленныйИмущественныйВычет
	|		ПО НДФЛИмущественныйВычетСрезПоследних.Сотрудник = ПредоставленныйИмущественныйВычет.Сотрудник
	|ГДЕ
	|	НДФЛИмущественныйВычетСрезПоследних.Применяется
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛСоциальныеВычетыСрезПоследних.Сотрудник КАК Сотрудник,
	|	НДФЛСоциальныеВычетыСрезПоследних.КодВычета КАК КодВычета,
	|	НДФЛСоциальныеВычетыСрезПоследних.СуммаРасходов КАК СуммаРасходов,
	|	ЕСТЬNULL(ПредоставленныйСоциальныйВычет.СуммаВычетаОборот, 0) КАК ПредоставленныйВычетПоРасходам
	|ПОМЕСТИТЬ ВТСоциальныйВычет
	|ИЗ
	|	РегистрСведений.НДФЛСоциальныеВычеты.СрезПоследних(
	|			&ПериодРегистрации,
	|			Сотрудник В
	|				(ВЫБРАТЬ
	|					ВтСотрудники.Сотрудник
	|				ИЗ
	|					ВтСотрудники)) КАК НДФЛСоциальныеВычетыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПримененныеВычетыПоНДФЛ.Обороты(
	|				,
	|				,
	|				,
	|				Организация = &Организация
	|					И ПериодРегистрации < &ПериодРегистрации) КАК ПредоставленныйСоциальныйВычет
	|		ПО НДФЛСоциальныеВычетыСрезПоследних.Сотрудник = ПредоставленныйСоциальныйВычет.Сотрудник
	|			И НДФЛСоциальныеВычетыСрезПоследних.КодВычета = ПредоставленныйСоциальныйВычет.КодВычета
	|ГДЕ
	|	НДФЛСоциальныеВычетыСрезПоследних.Применяется
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛСтандартныеВычетыНаДетейСрезПоследних.Сотрудник КАК Сотрудник,
	|	СУММА(ЕСТЬNULL(НДФЛРазмерВычетовСрезПоследних.Размер, 0)) КАК СуммаВычета,
	|	НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета КАК КодВычета,
	|	ЕСТЬNULL(НДФЛРазмерВычетовСрезПоследних.ОграничениеПоДоходам, 0) КАК ОграничениеПоДоходам
	|ПОМЕСТИТЬ ВтВычетНаДетей
	|ИЗ
	|	РегистрСведений.НДФЛСтандартныеВычетыНаДетей.СрезПоследних(
	|			&ПериодРегистрации,
	|			Сотрудник В
	|				(ВЫБРАТЬ
	|					ВтСотрудники.Сотрудник
	|				ИЗ
	|					ВтСотрудники)) КАК НДФЛСтандартныеВычетыНаДетейСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛРазмерВычетов.СрезПоследних(&ПериодРегистрации, ) КАК НДФЛРазмерВычетовСрезПоследних
	|		ПО НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета = НДФЛРазмерВычетовСрезПоследних.КодВычета
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(НДФЛСтандартныеВычетыНаДетейСрезПоследних.ПериодЗавершения, МЕСЯЦ) > &ПериодРегистрации
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛСтандартныеВычетыНаДетейСрезПоследних.Сотрудник,
	|	НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета,
	|	НДФЛРазмерВычетовСрезПоследних.ОграничениеПоДоходам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛСтандартныеЛичныеВычетыСрезПоследних.Сотрудник КАК Сотрудник,
	|	НДФЛСтандартныеЛичныеВычетыСрезПоследних.КодВычета КАК КодВычета,
	|	ЕСТЬNULL(НДФЛРазмерВычетовСрезПоследних.Размер, 0) КАК РазмерВычета,
	|	ЕСТЬNULL(НДФЛРазмерВычетовСрезПоследних.ОграничениеПоДоходам, 0) КАК ОграничениеПоДоходам
	|ПОМЕСТИТЬ ВтЛичныйВычет
	|ИЗ
	|	РегистрСведений.НДФЛСтандартныеЛичныеВычеты.СрезПоследних(
	|			&ПериодРегистрации,
	|			Сотрудник В
	|				(ВЫБРАТЬ
	|					ВтСотрудники.Сотрудник
	|				ИЗ
	|					ВтСотрудники)) КАК НДФЛСтандартныеЛичныеВычетыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛРазмерВычетов.СрезПоследних(&ПериодРегистрации, ) КАК НДФЛРазмерВычетовСрезПоследних
	|		ПО НДФЛСтандартныеЛичныеВычетыСрезПоследних.КодВычета = НДФЛРазмерВычетовСрезПоследних.КодВычета
	|ГДЕ
	|	НДФЛСтандартныеЛичныеВычетыСрезПоследних.Применяется
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтВычетНаДетей.Сотрудник КАК Сотрудник,
	|	ВтВычетНаДетей.КодВычета КАК КодВычета,
	|	ВЫБОР
	|		КОГДА ВтСотрудники.Сумма + ВтСотрудники.СуммаНачисленийПрошлыхПериодов > ВтВычетНаДетей.ОграничениеПоДоходам
	|				И ВтВычетНаДетей.ОграничениеПоДоходам > 0
	|			ТОГДА 0
	|		ИНАЧЕ ВтВычетНаДетей.СуммаВычета
	|	КОНЕЦ КАК СуммаВычетаНаДетей,
	|	ВтСотрудники.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВтПредоставленныеВычетыНаДетей
	|ИЗ
	|	ВтВычетНаДетей КАК ВтВычетНаДетей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСотрудники КАК ВтСотрудники
	|		ПО ВтВычетНаДетей.Сотрудник = ВтСотрудники.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Организация КАК Организация,
	|	Начисления.Сотрудник КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизЛицаОрганизаций
	|ИЗ
	|	ВтНачисления КАК Начисления");
	
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ПериодДокумента", Объект.Дата);
	Запрос.УстановитьПараметр("НачисленияИУдержания", НачисленияИУдержания);
	Запрос.УстановитьПараметр("ПериодРегистрации", Объект.ПериодРегистрации);
	Запрос.УстановитьПараметр("ОбъединятьНакопительнуюИСтраховуюЧасть", Объект.Дата >= УчетСтраховыхВзносов.ДатаОбъединенияСтраховойИНакопительнойЧастейВзносовПФР());
	Запрос.УстановитьПараметр("ВалютаДокумента", Объект.ВалютаДокумента);
	Запрос.УстановитьПараметр("ДатаДокумента", Объект.Дата);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = Запрос.ВыполнитьПакет();
	
	
	// Создадим временную таблицу предоставленных имущественных вычетов
	// в одном запросе данные движения не получатся из-за того, что нужно разбивать 
	// на несколько строк по процентам и основным величинам
	ОбработатьВременнуюТаблицуПредоставленныхВычетовНаДетей(Запрос);
	
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВтВычетНаДетей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтЛичныйВычет.Сотрудник,
	|	ВтЛичныйВычет.КодВычета,
	|	ВЫБОР
	|		КОГДА ВтСотрудники.СуммаНачисленийПрошлыхПериодов + ВтСотрудники.Сумма > ВтЛичныйВычет.ОграничениеПоДоходам
	|				И ВтЛичныйВычет.ОграничениеПоДоходам > 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВтСотрудники.Сумма - ЕСТЬNULL(СуммаВычетовНаДетей.Сумма, 0) > ВтЛичныйВычет.РазмерВычета
	|					ТОГДА ВтЛичныйВычет.РазмерВычета
	|				ИНАЧЕ ВтСотрудники.Сумма - ЕСТЬNULL(СуммаВычетовНаДетей.Сумма, 0)
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаЛичногоВычета
	|ПОМЕСТИТЬ ВтПредоставленныйЛичныйВычет
	|ИЗ
	|	ВтЛичныйВычет КАК ВтЛичныйВычет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСотрудники КАК ВтСотрудники
	|		ПО ВтЛичныйВычет.Сотрудник = ВтСотрудники.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВтПредоставленныеВычетыНаДетей.Сотрудник КАК Сотрудник,
	|			СУММА(ВтПредоставленныеВычетыНаДетей.СуммаВычетаНаДетей) КАК Сумма
	|		ИЗ
	|			ВтПредоставленныеВычетыНаДетей КАК ВтПредоставленныеВычетыНаДетей
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВтПредоставленныеВычетыНаДетей.Сотрудник) КАК СуммаВычетовНаДетей
	|		ПО ВтЛичныйВычет.Сотрудник = СуммаВычетовНаДетей.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтЛичныйВычет
	|;";
	
	Результат = Запрос.ВыполнитьПакет();
	// обработаем строки ВтПредоставленныеВычетыНаДетей
	ОбработатьВременнуюТаблицуПредоставленныхИмущественныхВычетов(Запрос);
	ОбработатьВременнуюТаблицуПредоставленныхСоциальныхВычетов(Запрос);
	
	// Рассчитываем начисления в страховую
	
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецГода", КонецГода(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("МесяцРасчета", Месяц(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("ОбщийНалоговыйРежим", РегламентированнаяОтчетностьПереопределяемый.СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "ОбщийНалоговыйРежим"));
	Запрос.УстановитьПараметр("УпрощенныйНалоговыйРежим", РегламентированнаяОтчетностьПереопределяемый.СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "УпрощенныйНалоговыйРежим"));
	Запрос.УстановитьПараметр("ЕНВД", РегламентированнаяОтчетностьПереопределяемый.СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "ЕНВД")); 
	Запрос.УстановитьПараметр("ТарифНаТравматизм", Объект.Организация.ТарифНаТравматизм);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	
	// Для начисления страховых взносов запишем изначально доходы по страховым взносам
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&ПериодРегистрации КАК Период,
	|	&Организация КАК Организация,
	|	Начисления.Сотрудник,
	|	Начисления.ВидНачисления.ВидДоходаПоСтраховымВзносам КАК ВидДохода,
	|	СУММА(Начисления.Сумма) КАК Сумма,
	|	0 КАК Скидка
	| ИЗ ВТНачисления КАК Начисления
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.Сотрудник,
	|	Начисления.ВидНачисления.ВидДоходаПоСтраховымВзносам";
	
	НаборыЗаписей.СтраховыеВзносыДоходы.Загрузить(Запрос.Выполнить().Выгрузить());
	НаборыЗаписей.СтраховыеВзносыДоходы.Записать();
	НаборыЗаписей.СтраховыеВзносыДоходы.Записывать = Ложь;
	
	УчетСтраховыхВзносов.СформироватьВТРасширенныхСведенийОДоходах(Объект.ПериодРегистрации, КонецМесяца(Объект.ПериодРегистрации), Объект.Организация, Запрос.МенеджерВременныхТаблиц, Истина);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Основная.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Основная.ФизическоеЛицоНаименование,
	|	Основная.НачислятьНакопительнуюЧасть,
	|	Основная.ВидТарифаСтраховыхВзносов,
	|	МЕСЯЦ(Основная.Период) КАК Месяц,
	|	СУММА(Основная.БазаПФР) КАК БазаПФР,
	|	СУММА(Основная.БазаФСС) КАК БазаФСС,
	|	СУММА(Основная.БазаФОМС) КАК БазаФОМС,
	|	СУММА(Основная.СуммаПревысившаяПределПФР) КАК СуммаПревысившаяПределПФР,
	|	СУММА(Основная.СуммаПревысившаяПределФСС) КАК СуммаПревысившаяПределФСС,
	|	СУММА(Основная.СуммаПревысившаяПределФОМС) КАК СуммаПревысившаяПределФОМС,
	|	СУММА(ВЫБОР
	|			КОГДА Основная.ВходитВБазуФСС
	|				ТОГДА Основная.Сумма - Основная.Скидка
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК БазаФСС_НСПоОсновномуТарифу
	|ПОМЕСТИТЬ ВТДоходыЗастрахованныхЛиц
	|ИЗ
	|	ВТСведенияОДоходах КАК Основная
	|
	|СГРУППИРОВАТЬ ПО
	|	Основная.ФизическоеЛицо,
	|	Основная.НачислятьНакопительнуюЧасть,
	|	Основная.ФизическоеЛицоНаименование,
	|	Основная.ВидТарифаСтраховыхВзносов,
	|	Основная.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоходыЗастрахованныхЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДоходыЗастрахованныхЛиц.ФизическоеЛицоНаименование,
	|	ДоходыЗастрахованныхЛиц.НачислятьНакопительнуюЧасть,
	|	ДоходыЗастрахованныхЛиц.ВидТарифаСтраховыхВзносов,
	|	СУММА(ДоходыЗастрахованныхЛиц.БазаПФР) КАК БазаПФР,
	|	СУММА(ДоходыЗастрахованныхЛиц.БазаФСС) КАК БазаФСС,
	|	СУММА(ДоходыЗастрахованныхЛиц.БазаФОМС) КАК БазаФОМС,
	|	СУММА(ДоходыЗастрахованныхЛиц.СуммаПревысившаяПределПФР) КАК СуммаПревысившаяПределПФР,
	|	СУММА(ДоходыЗастрахованныхЛиц.СуммаПревысившаяПределФСС) КАК СуммаПревысившаяПределФСС,
	|	СУММА(ДоходыЗастрахованныхЛиц.СуммаПревысившаяПределФОМС) КАК СуммаПревысившаяПределФОМС
	|ПОМЕСТИТЬ ВТНакопленнаяОблагаемаяБаза
	|ИЗ
	|	ВТДоходыЗастрахованныхЛиц КАК ДоходыЗастрахованныхЛиц
	|ГДЕ
	|	ДоходыЗастрахованныхЛиц.Месяц МЕЖДУ 1 И &МесяцРасчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоходыЗастрахованныхЛиц.ФизическоеЛицо,
	|	ДоходыЗастрахованныхЛиц.ФизическоеЛицоНаименование,
	|	ДоходыЗастрахованныхЛиц.НачислятьНакопительнуюЧасть,
	|	ДоходыЗастрахованныхЛиц.ВидТарифаСтраховыхВзносов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеОграниченнаяОблагаемаяБаза.ФизическоеЛицо,
	|	НеОграниченнаяОблагаемаяБаза.ФизическоеЛицоНаименование,
    |	(ВЫРАЗИТЬ((НеОграниченнаяОблагаемаяБаза.БазаПФР - ЕСТЬNULL(НеОграниченнаяОблагаемаяБаза.СуммаПревысившаяПределПФР, 0)) * ОсновнойТариф.ПФР / 100 КАК ЧИСЛО(15, 2))) + (ВЫРАЗИТЬ(ВЫБОР
    |			КОГДА НеОграниченнаяОблагаемаяБаза.ВидТарифаСтраховыхВзносов В (&ОбщийНалоговыйРежим, &УпрощенныйНалоговыйРежим)
    |				ТОГДА ЕСТЬNULL(НеОграниченнаяОблагаемаяБаза.СуммаПревысившаяПределПФР, 0) * 0.1
    |			ИНАЧЕ 0
    |		КОНЕЦ КАК ЧИСЛО(15, 2))) КАК РезультатПФРПоСуммарномуТарифу,
	|	ВЫРАЗИТЬ((НеОграниченнаяОблагаемаяБаза.БазаПФР - ЕСТЬNULL(НеОграниченнаяОблагаемаяБаза.СуммаПревысившаяПределПФР, 0)) * ВЫБОР
	|			КОГДА НеОграниченнаяОблагаемаяБаза.НачислятьНакопительнуюЧасть
	|				ТОГДА ОсновнойТариф.ПФРНакопительная
	|			ИНАЧЕ 0
	|		КОНЕЦ / 100 КАК ЧИСЛО(15, 2)) КАК РезультатПФРНакопительная,
	|	(ВЫРАЗИТЬ((НеОграниченнаяОблагаемаяБаза.БазаПФР - ЕСТЬNULL(НеОграниченнаяОблагаемаяБаза.СуммаПревысившаяПределПФР, 0)) * (ОсновнойТариф.ПФР - ВЫБОР
	|			КОГДА НеОграниченнаяОблагаемаяБаза.НачислятьНакопительнуюЧасть
	|				ТОГДА ОсновнойТариф.ПФРНакопительная
	|			ИНАЧЕ 0
	|		КОНЕЦ) / 100 КАК ЧИСЛО(15, 2))) + (ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА НеОграниченнаяОблагаемаяБаза.ВидТарифаСтраховыхВзносов В (&ОбщийНалоговыйРежим, &УпрощенныйНалоговыйРежим, &ЕНВД)
	|				ТОГДА ЕСТЬNULL(НеОграниченнаяОблагаемаяБаза.СуммаПревысившаяПределПФР, 0) * 0.1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(15, 2))) КАК РезультатПФРСтраховая,
	|	ВЫРАЗИТЬ((НеОграниченнаяОблагаемаяБаза.БазаФСС - ЕСТЬNULL(НеОграниченнаяОблагаемаяБаза.СуммаПревысившаяПределФСС, 0)) * ОсновнойТариф.ФСС / 100 КАК ЧИСЛО(15, 2)) КАК РезультатФСС,
	|	ВЫРАЗИТЬ((НеОграниченнаяОблагаемаяБаза.БазаФОМС - ЕСТЬNULL(НеОграниченнаяОблагаемаяБаза.СуммаПревысившаяПределФОМС, 0)) * ОсновнойТариф.ФФОМС / 100 КАК ЧИСЛО(15, 2)) КАК РезультатФФОМС,
	|	ВЫРАЗИТЬ((НеОграниченнаяОблагаемаяБаза.БазаФОМС - ЕСТЬNULL(НеОграниченнаяОблагаемаяБаза.СуммаПревысившаяПределФОМС, 0)) * ОсновнойТариф.ТФОМС / 100 КАК ЧИСЛО(15, 2)) КАК РезультатТФОМС
	|ПОМЕСТИТЬ ВТИсчисленоПоОсновномуТарифу
	|ИЗ
	|	ВТНакопленнаяОблагаемаяБаза КАК НеОграниченнаяОблагаемаяБаза
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыТарифныхСтавок КАК ОсновнойТариф
	|		ПО НеОграниченнаяОблагаемаяБаза.ВидТарифаСтраховыхВзносов = ОсновнойТариф.ВидТарифа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РанееИсчисленныеВзносы.ФизическоеЛицо,
	|	СУММА(РанееИсчисленныеВзносы.ФССОборот) КАК ФССОборот,
	|	СУММА(РанееИсчисленныеВзносы.ФФОМСОборот) КАК ФФОМСОборот,
	|	СУММА(РанееИсчисленныеВзносы.ТФОМСОборот) КАК ТФОМСОборот,
	|	СУММА(РанееИсчисленныеВзносы.ПФРПоСуммарномуТарифуОборот) КАК ПФРПоСуммарномуТарифуОборот,
	|	СУММА(РанееИсчисленныеВзносы.ПФРНакопительнаяОборот) КАК ПФРНакопительнаяОборот,
	|	СУММА(РанееИсчисленныеВзносы.ПФРСтраховаяОборот) КАК ПФРСтраховаяОборот,
	|	СУММА(РанееИсчисленныеВзносы.ФССНесчастныеСлучаиОборот) КАК ФССНесчастныеСлучаиОборот
	|ПОМЕСТИТЬ ВТРанееИсчисленныеВзносы
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСФондамиПоСтраховымВзносамОбороты.Сотрудник КАК ФизическоеЛицо,
	|	ВЫБОР
	|			КОГДА РасчетыСФондамиПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРПоСуммарномуТарифу)
	|				ТОГДА РасчетыСФондамиПоСтраховымВзносамОбороты.СуммаПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ПФРПоСуммарномуТарифуОборот,
	|	ВЫБОР
	|			КОГДА РасчетыСФондамиПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРНакопительная)
	|				ТОГДА РасчетыСФондамиПоСтраховымВзносамОбороты.СуммаПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ПФРНакопительнаяОборот,
	|	ВЫБОР
	|			КОГДА РасчетыСФондамиПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРСтраховая)
	|				ТОГДА РасчетыСФондамиПоСтраховымВзносамОбороты.СуммаПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ПФРСтраховаяОборот,
	|	ВЫБОР
	|			КОГДА РасчетыСФондамиПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФФОМС)
	|				ТОГДА РасчетыСФондамиПоСтраховымВзносамОбороты.СуммаПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ФФОМСОборот,
	|	ВЫБОР
	|			КОГДА РасчетыСФондамиПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)
	|				ТОГДА РасчетыСФондамиПоСтраховымВзносамОбороты.СуммаПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ФССОборот,
	|	ВЫБОР
	|			КОГДА РасчетыСФондамиПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)
	|					И РасчетыСФондамиПоСтраховымВзносамОбороты.Период = &ПериодРегистрации
	|				ТОГДА РасчетыСФондамиПоСтраховымВзносамОбороты.СуммаПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ФССНесчастныеСлучаиОборот,
	|		0 КАК ТФОМСОборот
	|	ИЗ
	|		РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам.Обороты(
	|				&НачалоГода,
	|				&КонецМесяца,
	|				Месяц,
	|				Организация = &Организация
	|					И Сотрудник В
	|						(ВЫБРАТЬ
	|							СписокСотрудников.ФизическоеЛицо
	|						ИЗ
	|							ВТФизЛицаОрганизаций КАК СписокСотрудников)) КАК РасчетыСФондамиПоСтраховымВзносамОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыСФондамиПоСтраховымВзносам.Сотрудник,
	|	ВЫБОР
	|			КОГДА РасчетыСФондамиПоСтраховымВзносам.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРПоСуммарномуТарифу)
	|				ТОГДА -РасчетыСФондамиПоСтраховымВзносам.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|	ВЫБОР
	|			КОГДА РасчетыСФондамиПоСтраховымВзносам.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРНакопительная)
	|				ТОГДА -РасчетыСФондамиПоСтраховымВзносам.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|	ВЫБОР
	|			КОГДА РасчетыСФондамиПоСтраховымВзносам.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРСтраховая)
	|				ТОГДА -РасчетыСФондамиПоСтраховымВзносам.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|	ВЫБОР
	|			КОГДА РасчетыСФондамиПоСтраховымВзносам.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФФОМС)
	|				ТОГДА -РасчетыСФондамиПоСтраховымВзносам.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|	ВЫБОР
	|			КОГДА РасчетыСФондамиПоСтраховымВзносам.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)
	|				ТОГДА -РасчетыСФондамиПоСтраховымВзносам.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|	ВЫБОР
	|			КОГДА РасчетыСФондамиПоСтраховымВзносам.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)
	|				ТОГДА -РасчетыСФондамиПоСтраховымВзносам.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		0
	|	ИЗ
	|		РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам КАК РасчетыСФондамиПоСтраховымВзносам
	|	ГДЕ
	|		РасчетыСФондамиПоСтраховымВзносам.Регистратор = &Ссылка
	|		И РасчетыСФондамиПоСтраховымВзносам.Сотрудник В
	|				(ВЫБРАТЬ
	|					СписокСотрудников.ФизическоеЛицо
	|				ИЗ
	|					ВТФизЛицаОрганизаций КАК СписокСотрудников)
	|		И РасчетыСФондамиПоСтраховымВзносам.Период МЕЖДУ &НачалоГода И &КонецМесяца) КАК РанееИсчисленныеВзносы
	|
	|СГРУППИРОВАТЬ ПО
	|	РанееИсчисленныеВзносы.ФизическоеЛицо
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Начислено.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начислено.ФизическоеЛицоНаименование,
	|	(ВЫРАЗИТЬ(СУММА(Начислено.БазаФСС_НСПоОсновномуТарифу) * &ТарифНаТравматизм/100 КАК ЧИСЛО(15, 2))) КАК Взносов
	|ПОМЕСТИТЬ ВТВзносыФССНесчастныеСлучаи
	|ИЗ
	|	ВТДоходыЗастрахованныхЛиц КАК Начислено
	|ГДЕ
	|	Начислено.Месяц = &МесяцРасчета
	|
	|СГРУППИРОВАТЬ ПО
	|	Начислено.ФизическоеЛицоНаименование,
	|	Начислено.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсегоИсчислено.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВсегоИсчислено.Порядок,
	|	СУММА(ВсегоИсчислено.РезультатПФРПоСуммарномуТарифу) КАК РезультатПФРПоСуммарномуТарифу,
	|	СУММА(ВсегоИсчислено.РезультатПФРНакопительная) КАК РезультатПФРНакопительная,
	|	СУММА(ВсегоИсчислено.РезультатПФРСтраховая) КАК РезультатПФРСтраховая,
	|	СУММА(ВсегоИсчислено.РезультатФСС) КАК РезультатФСС,
	|	СУММА(ВсегоИсчислено.РезультатФФОМС) КАК РезультатФФОМС,
	|	СУММА(ВсегоИсчислено.РезультатТФОМС) КАК РезультатТФОМС,
	|	СУММА(ВсегоИсчислено.РезультатФССНесчастныеСлучаи) КАК РезультатФССНесчастныеСлучаи
	|ПОМЕСТИТЬ ВТСуммыВзносовНарастающимИтогом
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИсчисленоПоОсновномуТарифу.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ИсчисленоПоОсновномуТарифу.ФизическоеЛицоНаименование КАК Порядок,
	|		ИсчисленоПоОсновномуТарифу.РезультатПФРПоСуммарномуТарифу КАК РезультатПФРПоСуммарномуТарифу,
	|		ИсчисленоПоОсновномуТарифу.РезультатПФРНакопительная КАК РезультатПФРНакопительная,
	|		ИсчисленоПоОсновномуТарифу.РезультатПФРСтраховая КАК РезультатПФРСтраховая,
	|		ИсчисленоПоОсновномуТарифу.РезультатФСС КАК РезультатФСС,
	|		ИсчисленоПоОсновномуТарифу.РезультатФФОМС КАК РезультатФФОМС,
	|		ИсчисленоПоОсновномуТарифу.РезультатТФОМС КАК РезультатТФОМС,
	|		0 КАК РезультатФССНесчастныеСлучаи
	|	ИЗ
	|		ВТИсчисленоПоОсновномуТарифу КАК ИсчисленоПоОсновномуТарифу
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВзносыФССНесчастныеСлучаи.ФизическоеЛицо,
	|		ВзносыФССНесчастныеСлучаи.ФизическоеЛицоНаименование,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ВзносыФССНесчастныеСлучаи.Взносов
	|	ИЗ
	|		ВТВзносыФССНесчастныеСлучаи КАК ВзносыФССНесчастныеСлучаи
	|	) КАК ВсегоИсчислено
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсегоИсчислено.ФизическоеЛицо,
	|	ВсегоИсчислено.Порядок;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СуммыНарастающимИтогом.ФизическоеЛицо КАК Сотрудник,
	|	СуммыНарастающимИтогом.Порядок КАК Порядок,
	|	СуммыНарастающимИтогом.РезультатФСС - ЕСТЬNULL(ИсчисленныеВзносы.ФССОборот, 0) КАК ФСС,
	|	СуммыНарастающимИтогом.РезультатФФОМС - ЕСТЬNULL(ИсчисленныеВзносы.ФФОМСОборот, 0) КАК ФФОМС,
	|	СуммыНарастающимИтогом.РезультатТФОМС - ЕСТЬNULL(ИсчисленныеВзносы.ТФОМСОборот, 0) КАК ТФОМС,
	|	ВЫБОР КОГДА &ОбъединятьНакопительнуюИСтраховуюЧасть ТОГДА
	|	СуммыНарастающимИтогом.РезультатПФРПоСуммарномуТарифу - ЕСТЬNULL(ИсчисленныеВзносы.ПФРПоСуммарномуТарифуОборот, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПФРПоСуммарномуТарифу,
	|	СуммыНарастающимИтогом.РезультатПФРНакопительная - ЕСТЬNULL(ИсчисленныеВзносы.ПФРНакопительнаяОборот, 0) КАК ПФРНакопительная,
	|	ВЫБОР КОГДА &ОбъединятьНакопительнуюИСтраховуюЧасть ТОГДА
	|	0
	|	ИНАЧЕ СуммыНарастающимИтогом.РезультатПФРСтраховая - ЕСТЬNULL(ИсчисленныеВзносы.ПФРСтраховаяОборот, 0)
	|	КОНЕЦ КАК ПФРСтраховая,
	|	СуммыНарастающимИтогом.РезультатФССНесчастныеСлучаи - ЕСТЬNULL(ИсчисленныеВзносы.ФССНесчастныеСлучаиОборот, 0) КАК ФССНесчастныеСлучаи
	|ПОМЕСТИТЬ ВТВзносыЗаМесяц
	|ИЗ
	|	ВТСуммыВзносовНарастающимИтогом КАК СуммыНарастающимИтогом
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРанееИсчисленныеВзносы КАК ИсчисленныеВзносы
	|		ПО СуммыНарастающимИтогом.ФизическоеЛицо = ИсчисленныеВзносы.ФизическоеЛицо
	|;
	|";
	Запрос.Выполнить();
	
	РассчитатьНДФЛ(Запрос);
	
	Запрос.Текст=
	"УНИЧТОЖИТЬ ВтИмущественныйВычет
	|;
	|УНИЧТОЖИТЬ ВТСоциальныйВычет
	|;
	|////////////////////////////////////////////////////////////////////////////////
	// 1. Таблица предоставленных стандартных вычетов вычетов
	|ВЫБРАТЬ
	|	ВтПредоставленныеВычетыНаДетей.Сотрудник КАК Сотрудник,
	|	ВтПредоставленныеВычетыНаДетей.КодВычета КАК КодВычета,
	|	ВтПредоставленныеВычетыНаДетей.СуммаВычетаНаДетей КАК СуммаВычета
	|ИЗ
	|	ВтПредоставленныеВычетыНаДетей КАК ВтПредоставленныеВычетыНаДетей
	|ГДЕ
	|	ВтПредоставленныеВычетыНаДетей.СуммаВычетаНаДетей <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтПредоставленныйЛичныйВычет.Сотрудник,
	|	ВтПредоставленныйЛичныйВычет.КодВычета,
	|	ВтПредоставленныйЛичныйВычет.СуммаЛичногоВычета
	|ИЗ
	|	ВтПредоставленныйЛичныйВычет КАК ВтПредоставленныйЛичныйВычет
	|ГДЕ
	|	ВтПредоставленныйЛичныйВычет.СуммаЛичногоВычета <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтПредоставленныйИмущественныйВычет.Сотрудник,
	|	ВтПредоставленныйИмущественныйВычет.КодВычета,
	|	ВтПредоставленныйИмущественныйВычет.СуммаИмущественногоВычета
	|ИЗ
	|	ВтПредоставленныйИмущественныйВычет КАК ВтПредоставленныйИмущественныйВычет
	|ГДЕ
	|	ВтПредоставленныйИмущественныйВычет.СуммаИмущественногоВычета <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтПредоставленныйСоциальныйВычет.Сотрудник,
	|	ВтПредоставленныйСоциальныйВычет.КодВычета,
	|	ВтПредоставленныйСоциальныйВычет.СуммаСоциальногоВычета
	|ИЗ
	|	ВтПредоставленныйСоциальныйВычет КАК ВтПредоставленныйСоциальныйВычет
	|ГДЕ
	|	ВтПредоставленныйСоциальныйВычет.СуммаСоциальногоВычета <> 0
	|;
	|
	// НДФЛ
	|
	|ВЫБРАТЬ
	|	НДФЛНалог.Сотрудник,
	|	&ВидНалогНаДоход КАК ВидНачисленияУдержания,
	|	НДФЛНалог.Сумма КАК Сумма,
	|	НДФЛНалог.СуммаСПревышения КАК СуммаСПревышения
	|ИЗ ВТНДФЛНалог КАК НДФЛНалог;
	|
	|
	// ПФРПоСуммарномуТарифу
	|ВЫБРАТЬ
	|	ВзносыЗаМесяц.Сотрудник,
	|	&ПФРПоСуммарномуТарифу КАК ВидНачисленияУдержания,
	|	ВЫБОР КОГДА &ОбъединятьНакопительнуюИСтраховуюЧасть ТОГДА
	|		ВзносыЗаМесяц.ПФРПоСуммарномуТарифу
	|	ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма
	|ИЗ ВТВзносыЗаМесяц КАК ВзносыЗаМесяц
	|	ГДЕ ВзносыЗаМесяц.ПФРПоСуммарномуТарифу <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// ПФРСтраховая
	|ВЫБРАТЬ
	|	ВзносыЗаМесяц.Сотрудник,
	|	&ПФРСтраховая,
	|	ВЫБОР КОГДА &ОбъединятьНакопительнуюИСтраховуюЧасть ТОГДА
	|		0
	|	ИНАЧЕ ВзносыЗаМесяц.ПФРСтраховая
	|	КОНЕЦ КАК Сумма
	|ИЗ ВТВзносыЗаМесяц КАК ВзносыЗаМесяц
	|	ГДЕ ВзносыЗаМесяц.ПФРСтраховая <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// ПФРНакопительная
	|ВЫБРАТЬ
	|	ВзносыЗаМесяц.Сотрудник,
	|	&ПФРНакопительная,
	|	ВзносыЗаМесяц.ПФРНакопительная КАК Сумма
	|ИЗ ВТВзносыЗаМесяц КАК ВзносыЗаМесяц
	|	ГДЕ ВзносыЗаМесяц.ПФРНакопительная <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// ФСС
	|ВЫБРАТЬ
	|	ВзносыЗаМесяц.Сотрудник,
	|	&ФСС,
	|	ВзносыЗаМесяц.ФСС КАК Сумма
	|ИЗ ВТВзносыЗаМесяц КАК ВзносыЗаМесяц
	|	ГДЕ ВзносыЗаМесяц.ФСС <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// ФССНесчастныеСлучаи
	|ВЫБРАТЬ
	|	ВзносыЗаМесяц.Сотрудник,
	|	&ФССНесчастныеСлучаи,
	|	ВзносыЗаМесяц.ФССНесчастныеСлучаи КАК Сумма
	|ИЗ ВТВзносыЗаМесяц КАК ВзносыЗаМесяц
	|	ГДЕ ВзносыЗаМесяц.ФССНесчастныеСлучаи <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// ФФОМС
	|ВЫБРАТЬ
	|	ВзносыЗаМесяц.Сотрудник,
	|	&ФФОМС,
	|	ВзносыЗаМесяц.ФФОМС КАК Сумма
	|ИЗ ВТВзносыЗаМесяц КАК ВзносыЗаМесяц
	|	ГДЕ ВзносыЗаМесяц.ФФОМС <> 0;
	|";
	
	Запрос.УстановитьПараметр("ВидНалогНаДоход", Справочники.ВидыНачисленийИУдержаний.НалогНаДоходы);
	Запрос.УстановитьПараметр("ПФРПоСуммарномуТарифу", Справочники.ВидыНачисленийИУдержаний.ПФРПоСуммарномуТарифу);
	Запрос.УстановитьПараметр("ПФРСтраховая", Справочники.ВидыНачисленийИУдержаний.ПФРСтраховая);
	Запрос.УстановитьПараметр("ПФРНакопительная", Справочники.ВидыНачисленийИУдержаний.ПФРНакопительная);
	Запрос.УстановитьПараметр("ФСС", Справочники.ВидыНачисленийИУдержаний.ФСС);
	Запрос.УстановитьПараметр("ФССНесчастныеСлучаи", Справочники.ВидыНачисленийИУдержаний.ФССНесчастныеСлучаи);
	Запрос.УстановитьПараметр("ФФОМС", Справочники.ВидыНачисленийИУдержаний.ФФОМС);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	Если ОтменятьЗапись = Истина Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Объект.ПримененныеВычетыПоНДФЛ.Загрузить(Результат[2].Выгрузить());
	Объект.НалогиНаДоходы.Загрузить(Результат[3].Выгрузить());
	Объект.Взносы.Загрузить(Результат[4].Выгрузить());
	
	Для Каждого СтрокаВзносов Из Объект.Взносы Цикл
		
		СчетЗатрат = СтрокаВзносов.ВидНачисленияУдержания.СчетЗатрат;
		ТипСчета = СчетЗатрат.ТипСчета;
		
		Если Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение
			И НЕ (ТипСчета = Перечисления.ТипыСчетов.КосвенныеЗатраты
			ИЛИ ТипСчета = Перечисления.ТипыСчетов.Расходы
			ИЛИ ТипСчета = Перечисления.ТипыСчетов.ПрочиеОборотныеАктивы
			ИЛИ ТипСчета = Перечисления.ТипыСчетов.НезавершенноеПроизводство
			ИЛИ ТипСчета = Перечисления.ТипыСчетов.ПрочиеОборотныеАктивы
			ИЛИ ТипСчета = Перечисления.ТипыСчетов.Кредиторы) Тогда
			
			СтрокаВзносов.СчетЗатрат = ПланыСчетов.Управленческий.ПустаяСсылка();
			СтрокаВзносов.ТипСчета = Перечисления.ТипыСчетов.ПустаяСсылка();
			
		Иначе
			
			СтрокаВзносов.СчетЗатрат = СчетЗатрат;
			СтрокаВзносов.ТипСчета = ТипСчета;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает ситуацию с имущественными вычетами сотрудника
// Разбивает на несколько строк в том случае, когда необходимо разбить на основную часть
// и проценты
Процедура ОбработатьВременнуюТаблицуПредоставленныхИмущественныхВычетов(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВтИмущественныйВычет.Сотрудник,
	|	ВтИмущественныйВычет.СуммаРасходов,
	|	ВтИмущественныйВычет.ПроцентыПоКредиту,
	|	ВтИмущественныйВычет.ПредоставленныйВычетПоПроцентам,
	|	ВтИмущественныйВычет.ПредоставленныйВычетПоРасходам,
	|	isnull(ВтСотрудники.Сумма,0) КАК СуммаНачисления,
	|	isnull(ПредоставленныеВычеты.СуммаВычетов,0) КАК СуммаВычетов
	|ИЗ
	|	ВтИмущественныйВычет КАК ВтИмущественныйВычет
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.Сотрудник КАК Сотрудник,
	|			СУММА(ВложенныйЗапрос.СуммаВычетов) КАК СуммаВычетов
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ВтПредоставленныеВычетыНаДетей.Сотрудник КАК Сотрудник,
	|				ВтПредоставленныеВычетыНаДетей.СуммаВычетаНаДетей КАК СуммаВычетов
	|			ИЗ
	|				ВтПредоставленныеВычетыНаДетей КАК ВтПредоставленныеВычетыНаДетей
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ВтПредоставленныйЛичныйВычет.Сотрудник,
	|				ВтПредоставленныйЛичныйВычет.СуммаЛичногоВычета
	|			ИЗ
	|				ВтПредоставленныйЛичныйВычет КАК ВтПредоставленныйЛичныйВычет) КАК ВложенныйЗапрос
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.Сотрудник) КАК ПредоставленныеВычеты
	|		ПО ВтИмущественныйВычет.Сотрудник = ПредоставленныеВычеты.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСотрудники КАК ВтСотрудники
	|		ПО ВтИмущественныйВычет.Сотрудник = ВтСотрудники.Сотрудник";
	
	
	ТаблицаИмущественныхВычетов = Запрос.Выполнить().Выгрузить();
	
	
	ТаблицаПредоставленногоИмущественногоВычета = Новый ТаблицаЗначений;
	ТаблицаПредоставленногоИмущественногоВычета.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПредоставленногоИмущественногоВычета.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВычетыНДФЛ"));
	ТаблицаПредоставленногоИмущественногоВычета.Колонки.Добавить("СуммаИмущественногоВычета", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Для Каждого СтрокаВычета Из ТаблицаИмущественныхВычетов Цикл
		
		// проверим, есть ли вообще смысл в предоставлении вычета
		Если СтрокаВычета.СуммаНачисления > СтрокаВычета.СуммаВычетов Тогда
			
			Если СтрокаВычета.СуммаРасходов > СтрокаВычета.ПредоставленныйВычетПоРасходам Тогда
				// Вычет по расходам еще предоставлен не в полном объеме
				// значит сначала гасим его
					
				Если СтрокаВычета.СуммаРасходов - СтрокаВычета.ПредоставленныйВычетПоРасходам >= СтрокаВычета.СуммаНачисления - СтрокаВычета.СуммаВычетов Тогда
					// Сумма вычета по расходам больше, чем мы можем списать из текущего начисления
					// поэтому вычет применяем на все оставшееся начисление
					
					СтрокаПредоставленногоВычета = ТаблицаПредоставленногоИмущественногоВычета.Добавить();
					СтрокаПредоставленногоВычета.Сотрудник = СтрокаВычета.Сотрудник;
					СтрокаПредоставленногоВычета.КодВычета = Справочники.ВычетыНДФЛ.Код311; //вычет по расходам
					СтрокаПредоставленногоВычета.СуммаИмущественногоВычета = СтрокаВычета.СуммаНачисления - СтрокаВычета.СуммаВычетов;//спишем весь остаток начисления в вычет
					
				Иначе
					// Сумма вычета по расходам меньше, чем текущее начисление,
					// поэтому списываем сначала расходы, а затем пробуем проценты
					
					СтрокаПредоставленногоВычета = ТаблицаПредоставленногоИмущественногоВычета.Добавить();
					СтрокаПредоставленногоВычета.Сотрудник = СтрокаВычета.Сотрудник;
					СтрокаПредоставленногоВычета.КодВычета = Справочники.ВычетыНДФЛ.Код311; //вычет по расходам
					СтрокаПредоставленногоВычета.СуммаИмущественногоВычета = СтрокаВычета.СуммаРасходов - СтрокаВычета.ПредоставленныйВычетПоРасходам;// спишем весь остаток расходов
					
					Если СтрокаВычета.ПроцентыПоКредиту - СтрокаВычета.ПредоставленныйВычетПоПроцентам > 0 Тогда
						// если есть возможность списать проценты, то пробуем
						СтрокаПредоставленногоВычета = ТаблицаПредоставленногоИмущественногоВычета.Добавить();
						СтрокаПредоставленногоВычета.Сотрудник = СтрокаВычета.Сотрудник;
						СтрокаПредоставленногоВычета.КодВычета = Справочники.ВычетыНДФЛ.Код312; //вычет по процентам
						
						// Сумма начисления, уменьшенная на сумму вычетов, и за вычетом предоставленного имущественного вычета по расходам
						// это и есть сумма остатка списания
						СуммаОстаткаСписания =  СтрокаВычета.СуммаНачисления - СтрокаВычета.СуммаВычетов - (СтрокаВычета.СуммаРасходов - СтрокаВычета.ПредоставленныйВычетПоРасходам);
						
						СтрокаПредоставленногоВычета.СуммаИмущественногоВычета = Мин(СуммаОстаткаСписания, // списываем весь остаток от начисления
																					СтрокаВычета.ПроцентыПоКредиту - СтрокаВычета.ПредоставленныйВычетПоПроцентам // списываем весь остаток вычета
																				);
						
						
					КонецЕсли;
					
				КонецЕсли;
				
				
			ИначеЕсли СтрокаВычета.ПроцентыПоКредиту > СтрокаВычета.ПредоставленныйВычетПоПроцентам Тогда
				// списываем проценты
				Если СтрокаВычета.ПроцентыПоКредиту - СтрокаВычета.ПредоставленныйВычетПоПроцентам > 0 Тогда
					
					СтрокаПредоставленногоВычета = ТаблицаПредоставленногоИмущественногоВычета.Добавить();
					СтрокаПредоставленногоВычета.Сотрудник = СтрокаВычета.Сотрудник;
					СтрокаПредоставленногоВычета.КодВычета = Справочники.ВычетыНДФЛ.Код312; //вычет по процентам
					
					СуммаОстаткаСписания =  СтрокаВычета.СуммаНачисления - СтрокаВычета.СуммаВычетов;
					
					СтрокаПредоставленногоВычета.СуммаИмущественногоВычета = Мин(СуммаОстаткаСписания, // списываем весь остаток от начисления
																				СтрокаВычета.ПроцентыПоКредиту - СтрокаВычета.ПредоставленныйВычетПоПроцентам // списываем весь остаток вычета
																			);
						
						
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Т.Сотрудник,
	|	Т.КодВычета,
	|	Т.СуммаИмущественногоВычета
	|ПОМЕСТИТЬ
	|	ВтПредоставленныйИмущественныйВычет
	|ИЗ
	|	&ВтПредоставленныйИмущественныйВычет КАК Т
	|;";
	
	Запрос.УстановитьПараметр("ВтПредоставленныйИмущественныйВычет", ТаблицаПредоставленногоИмущественногоВычета);
	Запрос.Выполнить();
	
	Запрос.Параметры.Удалить("ВтПредоставленныйИмущественныйВычет");
	
КонецПроцедуры

// Обрабатывает ситуацию с имущественными вычетами сотрудника
// Разбивает на несколько строк в том случае, когда необходимо разбить на основную часть
// и проценты
Процедура ОбработатьВременнуюТаблицуПредоставленныхСоциальныхВычетов(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТСоциальныйВычет.Сотрудник,
	|	ВТСоциальныйВычет.СуммаРасходов,
	|	ВТСоциальныйВычет.КодВычета,
	|	ВТСоциальныйВычет.ПредоставленныйВычетПоРасходам,
	|	isnull(ВтСотрудники.Сумма,0) КАК СуммаНачисления,
	|	isnull(ПредоставленныеВычеты.СуммаВычетов,0) КАК СуммаВычетов
	|ИЗ
	|	ВТСоциальныйВычет КАК ВТСоциальныйВычет
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.Сотрудник КАК Сотрудник,
	|			СУММА(ВложенныйЗапрос.СуммаВычетов) КАК СуммаВычетов
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ВтПредоставленныеВычетыНаДетей.Сотрудник КАК Сотрудник,
	|				ВтПредоставленныеВычетыНаДетей.СуммаВычетаНаДетей КАК СуммаВычетов
	|			ИЗ
	|				ВтПредоставленныеВычетыНаДетей КАК ВтПредоставленныеВычетыНаДетей
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ВтПредоставленныйЛичныйВычет.Сотрудник,
	|				ВтПредоставленныйЛичныйВычет.СуммаЛичногоВычета
	|			ИЗ
	|				ВтПредоставленныйЛичныйВычет КАК ВтПредоставленныйЛичныйВычет
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ВтПредоставленныйИмущественныйВычет.Сотрудник,
	|				ВтПредоставленныйИмущественныйВычет.СуммаИмущественногоВычета
	|			ИЗ
	|				ВтПредоставленныйИмущественныйВычет КАК ВтПредоставленныйИмущественныйВычет) КАК ВложенныйЗапрос
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.Сотрудник) КАК ПредоставленныеВычеты
	|		ПО ВТСоциальныйВычет.Сотрудник = ПредоставленныеВычеты.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСотрудники КАК ВтСотрудники
	|		ПО ВТСоциальныйВычет.Сотрудник = ВтСотрудники.Сотрудник";
	
	
	ТаблицаСоциальныхВычетов = Запрос.Выполнить().Выгрузить();
	
	
	ТаблицаПредоставленногоСоциальногоВычета = Новый ТаблицаЗначений;
	ТаблицаПредоставленногоСоциальногоВычета.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПредоставленногоСоциальногоВычета.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВычетыНДФЛ"));
	ТаблицаПредоставленногоСоциальногоВычета.Колонки.Добавить("СуммаСоциальногоВычета", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Для Каждого СтрокаВычета Из ТаблицаСоциальныхВычетов Цикл
		
		// проверим, есть ли вообще смысл в предоставлении вычета
		Если СтрокаВычета.СуммаНачисления > СтрокаВычета.СуммаВычетов Тогда
			
			Если СтрокаВычета.СуммаРасходов > СтрокаВычета.ПредоставленныйВычетПоРасходам Тогда
				// Вычет по расходам еще предоставлен не в полном объеме
				// значит сначала гасим его
					
				Если СтрокаВычета.СуммаРасходов - СтрокаВычета.ПредоставленныйВычетПоРасходам >= СтрокаВычета.СуммаНачисления - СтрокаВычета.СуммаВычетов Тогда
					// Сумма вычета по расходам больше, чем мы можем списать из текущего начисления
					// поэтому вычет применяем на все оставшееся начисление
					
					СтрокаПредоставленногоВычета = ТаблицаПредоставленногоСоциальногоВычета.Добавить();
					СтрокаПредоставленногоВычета.Сотрудник = СтрокаВычета.Сотрудник;
					СтрокаПредоставленногоВычета.КодВычета = СтрокаВычета.КодВычета; //вычет по расходам
					СтрокаПредоставленногоВычета.СуммаСоциальногоВычета = СтрокаВычета.СуммаНачисления - СтрокаВычета.СуммаВычетов;//спишем весь остаток начисления в вычет
					
				Иначе
					// Сумма вычета по расходам меньше, чем текущее начисление,
					// поэтому списываем сначала расходы, а затем пробуем проценты
					
					СтрокаПредоставленногоВычета = ТаблицаПредоставленногоСоциальногоВычета.Добавить();
					СтрокаПредоставленногоВычета.Сотрудник = СтрокаВычета.Сотрудник;
					СтрокаПредоставленногоВычета.КодВычета = СтрокаВычета.КодВычета; //вычет по расходам
					СтрокаПредоставленногоВычета.СуммаСоциальногоВычета = СтрокаВычета.СуммаРасходов - СтрокаВычета.ПредоставленныйВычетПоРасходам;// спишем весь остаток расходов
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Т.Сотрудник,
	|	Т.КодВычета,
	|	Т.СуммаСоциальногоВычета
	|ПОМЕСТИТЬ
	|	ВтПредоставленныйСоциальныйВычет
	|ИЗ
	|	&ВтПредоставленныйСоциальныйВычет КАК Т
	|;";
	
	Запрос.УстановитьПараметр("ВтПредоставленныйСоциальныйВычет", ТаблицаПредоставленногоСоциальногоВычета);
	Запрос.Выполнить();
	
	Запрос.Параметры.Удалить("ВтПредоставленныйСоциальныйВычет");
	
КонецПроцедуры

// Рассчитываем НДФЛ
Процедура РассчитатьНДФЛ(Запрос)
	
	ДатаНачалаПрогрессивнойШкалы = УчетНДФЛПредпринимателяКлиентСервер.ДатаНачалаПрогрессивнойШкалы();
	ВыполнятьРасчетНДФЛПоПрогрессивнойШкале = ПолучитьФункциональнуюОпцию("ВыполнятьРасчетНДФЛПоПрогрессивнойШкале"); 
	
	Если Запрос.Параметры.ПериодДокумента < ДатаНачалаПрогрессивнойШкалы
		Или Не ВыполнятьРасчетНДФЛПоПрогрессивнойШкале Тогда
		РассчитатьНДФЛПоОбычнойШкале(Запрос);
	Иначе
		РассчитатьНДФЛПоПрогрессивнойШкале(Запрос);
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьНДФЛПоОбычнойШкале(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВтСотрудники.Сотрудник КАК Сотрудник,
	|	ВтСотрудники.Сумма КАК Сумма,
	|	ВтСотрудники.ВидНачисления.КодДоходаНДФЛ.СтавкаНДФЛ КАК ИсчисленПоСтавке
	|ИЗ
	|	ВтНачисления КАК ВтСотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Сотрудник КАК Сотрудник,
	|	СУММА(ВложенныйЗапрос.СуммаВычета) КАК СуммаВычета
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВтПредоставленныеВычетыНаДетей.Сотрудник КАК Сотрудник,
	|		ВтПредоставленныеВычетыНаДетей.СуммаВычетаНаДетей КАК СуммаВычета
	|	ИЗ
	|		ВтПредоставленныеВычетыНаДетей КАК ВтПредоставленныеВычетыНаДетей
	|	ГДЕ
	|		ВтПредоставленныеВычетыНаДетей.СуммаВычетаНаДетей <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВтПредоставленныйЛичныйВычет.Сотрудник,
	|		ВтПредоставленныйЛичныйВычет.СуммаЛичногоВычета
	|	ИЗ
	|		ВтПредоставленныйЛичныйВычет КАК ВтПредоставленныйЛичныйВычет
	|	ГДЕ
	|		ВтПредоставленныйЛичныйВычет.СуммаЛичногоВычета <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВтПредоставленныйИмущественныйВычет.Сотрудник,
	|		ВтПредоставленныйИмущественныйВычет.СуммаИмущественногоВычета
	|	ИЗ
	|		ВтПредоставленныйИмущественныйВычет КАК ВтПредоставленныйИмущественныйВычет
	|	ГДЕ
	|		ВтПредоставленныйИмущественныйВычет.СуммаИмущественногоВычета <> 0) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Сотрудник";
	
	Пакет = Запрос.ВыполнитьПакет();
	ТаблицаНачислений = Пакет[0].Выгрузить();
	ТаблицаВычетов =  Пакет[1].Выгрузить();
	
	Для Каждого СтрокаНачислений Из ТаблицаНачислений Цикл
		// Ищем вычет по сотруднику
		СтрокаВычетов = ТаблицаВычетов.Найти(СтрокаНачислений.Сотрудник, "Сотрудник");
		Если СтрокаВычетов <> Неопределено И СтрокаВычетов.СуммаВычета > 0 Тогда
			Если СтрокаНачислений.Сумма >= СтрокаВычетов.СуммаВычета Тогда
				СуммаВычета = СтрокаВычетов.СуммаВычета;
			Иначе
				СуммаВычета = СтрокаНачислений.Сумма;
			КонецЕсли;
			СтрокаНачислений.Сумма = СтрокаНачислений.Сумма - СуммаВычета;
			СтрокаВычетов.СуммаВычета = СтрокаВычетов.СуммаВычета - СуммаВычета;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаНачислений.Свернуть(
		"Сотрудник, ИсчисленПоСтавке",
		"Сумма");
	
	Запрос.УстановитьПараметр("ТаблицаДляВТНалогНДФЛ",ТаблицаНачислений);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&ПериодДокумента КАК Период,
	|	&Организация,
	|	ТаблицаДляВТНалогНДФЛ.Сотрудник,
	|	&ПериодРегистрации,
	|	ВЫРАЗИТЬ(ТаблицаДляВТНалогНДФЛ.Сумма * ТаблицаДляВТНалогНДФЛ.ИсчисленПоСтавке / 100 КАК ЧИСЛО(15, 0)) КАК СуммаНалога,
	|	ВЫРАЗИТЬ(ТаблицаДляВТНалогНДФЛ.Сумма * ТаблицаДляВТНалогНДФЛ.ИсчисленПоСтавке / 100 КАК ЧИСЛО(15, 0)) КАК Сумма,
	|	0 КАК СуммаНалогаСПревышения,
	|	0 КАК СуммаСПревышения,
	|	ТаблицаДляВТНалогНДФЛ.ИсчисленПоСтавке КАК ИсчисленПоСтавке
	|ПОМЕСТИТЬ ВТНДФЛНалог
	|ИЗ
	|	&ТаблицаДляВТНалогНДФЛ КАК ТаблицаДляВТНалогНДФЛ
	|ГДЕ
	|	ТаблицаДляВТНалогНДФЛ.Сумма > 0";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура РассчитатьНДФЛПоПрогрессивнойШкале(Запрос)
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Получим данные
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВтСотрудники.Сотрудник КАК Сотрудник,
	|	ВтСотрудники.Сумма КАК Сумма,
	|	ВтСотрудники.ВидНачисления.КодДоходаНДФЛ.СтавкаНДФЛ КАК ИсчисленПоСтавке,
	|	ВтСотрудники.ВидНачисления.КодДоходаНДФЛ.СтавкаНДФЛПовышенная КАК ИсчисленПоПовышеннойСтавке
	|ИЗ
	|	ВтНачисления КАК ВтСотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Сотрудник КАК Сотрудник,
	|	СУММА(ВложенныйЗапрос.СуммаВычета) КАК СуммаВычета
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВтПредоставленныеВычетыНаДетей.Сотрудник КАК Сотрудник,
	|		ВтПредоставленныеВычетыНаДетей.СуммаВычетаНаДетей КАК СуммаВычета
	|	ИЗ
	|		ВтПредоставленныеВычетыНаДетей КАК ВтПредоставленныеВычетыНаДетей
	|	ГДЕ
	|		ВтПредоставленныеВычетыНаДетей.СуммаВычетаНаДетей <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВтПредоставленныйЛичныйВычет.Сотрудник,
	|		ВтПредоставленныйЛичныйВычет.СуммаЛичногоВычета
	|	ИЗ
	|		ВтПредоставленныйЛичныйВычет КАК ВтПредоставленныйЛичныйВычет
	|	ГДЕ
	|		ВтПредоставленныйЛичныйВычет.СуммаЛичногоВычета <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВтПредоставленныйИмущественныйВычет.Сотрудник,
	|		ВтПредоставленныйИмущественныйВычет.СуммаИмущественногоВычета
	|	ИЗ
	|		ВтПредоставленныйИмущественныйВычет КАК ВтПредоставленныйИмущественныйВычет
	|	ГДЕ
	|		ВтПредоставленныйИмущественныйВычет.СуммаИмущественногоВычета <> 0) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛРасчетыНалоговыхАгентовСБюджетом.СуммаПриход КАК СуммаНДФЛНарастающимИтогом,
	|	НДФЛРасчетыНалоговыхАгентовСБюджетом.Сотрудник КАК Сотрудник,
	|	НДФЛРасчетыНалоговыхАгентовСБюджетом.СуммаСПревышенияПриход КАК СуммаСПревышенияНДФЛНарастающимИтогом
	|ИЗ
	|	РегистрНакопления.НДФЛРасчетыНалоговыхАгентовСБюджетом.Обороты(
	|			НАЧАЛОПЕРИОДА(&ПериодРегистрации, ГОД),
	|			,
	|			,
	|			Организация = &Организация
	|				И ПериодРегистрации < &ПериодРегистрации) КАК НДФЛРасчетыНалоговыхАгентовСБюджетом
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияИУдержанияОбороты.Сотрудник КАК Сотрудник,
	|	СУММА(НачисленияИУдержанияОбороты.СуммаВал) КАК СуммаВалНарастающимИтогом
	|ИЗ
	|	РегистрНакопления.НачисленияИУдержания КАК НачисленияИУдержанияОбороты
	|ГДЕ
	|	НачисленияИУдержанияОбороты.Период >= НАЧАЛОПЕРИОДА(&ПериодРегистрации, ГОД)
	|	И НачисленияИУдержанияОбороты.Регистратор.Организация = &Организация
	|	И НачисленияИУдержанияОбороты.ПериодРегистрации <= &ПериодРегистрации
	|	И (НачисленияИУдержанияОбороты.ВидНачисленияУдержания.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Начисление)
	|			ИЛИ НачисленияИУдержанияОбороты.ВидНачисленияУдержания.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Удержание))
	|	И НачисленияИУдержанияОбороты.Регистратор <> &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияИУдержанияОбороты.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтСотрудники.Сотрудник КАК Сотрудник,
	|	СУММА(ВтСотрудники.Сумма) КАК Сумма
	|ИЗ
	|	ВтНачисления КАК ВтСотрудники
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтСотрудники.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВтСотрудники.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВтНачисления КАК ВтСотрудники";
	
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	
	Пакет = Запрос.ВыполнитьПакет();
	ТаблицаНачислений = Пакет[0].Выгрузить();
	ТаблицаНачисленийИтоги = Пакет[4].Выгрузить();
	ТаблицаВычетов =  Пакет[1].Выгрузить();
	ТаблицаНДФЛСНачалаГода = Пакет[2].Выгрузить();
	ТаблицаНачисленийСНачалаГода = Пакет[3].Выгрузить();
	ТаблицаСотрудников = Пакет[5].Выгрузить();
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Рассчитаем сумму вычетов
	
	Для Каждого СтрокаНачислений Из ТаблицаНачислений Цикл
		// Ищем вычет по сотруднику
		СтрокаВычетов = ТаблицаВычетов.Найти(СтрокаНачислений.Сотрудник, "Сотрудник");
		Если СтрокаВычетов <> Неопределено И СтрокаВычетов.СуммаВычета > 0 Тогда
			Если СтрокаНачислений.Сумма >= СтрокаВычетов.СуммаВычета Тогда
				СуммаВычета = СтрокаВычетов.СуммаВычета;
			Иначе
				СуммаВычета = СтрокаНачислений.Сумма;
			КонецЕсли;
			СтрокаНачислений.Сумма = СтрокаНачислений.Сумма - СуммаВычета;
			СтрокаВычетов.СуммаВычета = СтрокаВычетов.СуммаВычета - СуммаВычета;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаНачислений.Свернуть(
		"Сотрудник, ИсчисленПоСтавке, ИсчисленПоПовышеннойСтавке",
		"Сумма");
	
	ТаблицаНачислений.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2))); 
	ТаблицаНачислений.Колонки.Добавить("СуммаНалогаСПревышения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2))); 
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Рассчитаем НДФЛ
	
	ГраницаНалоговойБазы = УчетНДФЛПредпринимателяКлиентСервер.ГраницаНалоговойБазыДляПримененияПовышеннойСтавки();
	
	Для Каждого СтрокаСТекущимСотрудником Из ТаблицаСотрудников Цикл
		ТекущийСотрудник = СтрокаСТекущимСотрудником.Сотрудник;
		
		НДФЛСНачалаГода = 0;
		НачисленоСНачалаГода = 0;
		НачисленоВТекущемДокументе = 0;
		НачисленоВсего = 0;
		
		// Получим суммы для расчета
		СтрокаНДФЛ = ТаблицаНДФЛСНачалаГода.Найти(ТекущийСотрудник, "Сотрудник");
		Если СтрокаНДФЛ <> Неопределено И (СтрокаНДФЛ.СуммаНДФЛНарастающимИтогом <> 0 
			ИЛИ СтрокаНДФЛ.СуммаСПревышенияНДФЛНарастающимИтогом <> 0) Тогда
			НДФЛСНачалаГода = СтрокаНДФЛ.СуммаНДФЛНарастающимИтогом + СтрокаНДФЛ.СуммаСПревышенияНДФЛНарастающимИтогом;
		КонецЕсли;
		
		СтрокаНачисленоСНачалаГода = ТаблицаНачисленийСНачалаГода.Найти(ТекущийСотрудник, "Сотрудник");
		Если СтрокаНачисленоСНачалаГода <> Неопределено И СтрокаНачисленоСНачалаГода.СуммаВалНарастающимИтогом <> 0 Тогда
			НачисленоСНачалаГода = СтрокаНачисленоСНачалаГода.СуммаВалНарастающимИтогом;
		КонецЕсли;
		НачисленоВсего = НачисленоСНачалаГода;
		
		СтрокаНачисленоВТекущемДокументе = ТаблицаНачисленийИтоги.Найти(ТекущийСотрудник, "Сотрудник");
		Если СтрокаНачисленоВТекущемДокументе <> Неопределено И СтрокаНачисленоВТекущемДокументе.Сумма <> 0 Тогда
			НачисленоВТекущемДокументе = СтрокаНачисленоВТекущемДокументе.Сумма;
		КонецЕсли;
		
		СтруктураОтбораСтрок = Новый Структура("Сотрудник", ТекущийСотрудник);
		СтрокиНачисленийТекущегоСотрудника = ТаблицаНачислений.НайтиСтроки(СтруктураОтбораСтрок);
		
		Для Каждого СтрокаНачислено Из СтрокиНачисленийТекущегоСотрудника Цикл
			
			// Рассчитаем НДФЛ
			Если СтрокаНачислено.Сумма > 0 Тогда
				Если (НачисленоВсего + НачисленоВТекущемДокументе) <= ГраницаНалоговойБазы Тогда
					// Все начисления по обычной ставке НДФЛ.
					СтрокаНачислено.СуммаНалога = Окр(СтрокаНачислено.Сумма * СтрокаНачислено.ИсчисленПоСтавке / 100,2,1);
				ИначеЕсли НачисленоВсего >= ГраницаНалоговойБазы Тогда
					// Все начисления по повышенной ставке НДФЛ. 					
					СтрокаНачислено.СуммаНалогаСПревышения = Окр(СтрокаНачислено.Сумма * СтрокаНачислено.ИсчисленПоПовышеннойСтавке / 100,2,1);
				Иначе
					// Часть начисления облагается обычной ставкой НДФЛ, а часть начисления облагается повышенной ставкой начисления.
					СуммаНачисленияПоПовышеннойСтавке = (НачисленоВсего + СтрокаНачислено.Сумма) - ГраницаНалоговойБазы;
					СуммаНачисленияПоОбычнойСтавке = СтрокаНачислено.Сумма - СуммаНачисленияПоПовышеннойСтавке;
					
					СтрокаНачислено.СуммаНалога = Окр(СуммаНачисленияПоОбычнойСтавке * СтрокаНачислено.ИсчисленПоСтавке / 100,2,1);
					СтрокаНачислено.СуммаНалогаСПревышения = Окр(СуммаНачисленияПоПовышеннойСтавке * СтрокаНачислено.ИсчисленПоПовышеннойСтавке / 100,2,1);
				КонецЕсли;
				
				НачисленоВсего = НачисленоВсего + СтрокаНачислено.Сумма;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Подготовим временную таблицу для последующей обработки
	
	Запрос.УстановитьПараметр("ТаблицаДляВТНалогНДФЛ", ТаблицаНачислений);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&ПериодДокумента КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДляВТНалогНДФЛ.Сотрудник КАК Сотрудник,
	|	&ПериодРегистрации КАК ПериодРегистрации,
	|	ТаблицаДляВТНалогНДФЛ.СуммаНалога КАК СуммаНалога,
	|	ТаблицаДляВТНалогНДФЛ.СуммаНалога КАК Сумма,
	|	ТаблицаДляВТНалогНДФЛ.СуммаНалогаСПревышения КАК СуммаНалогаСПревышения,
	|	ТаблицаДляВТНалогНДФЛ.СуммаНалогаСПревышения КАК СуммаСПревышения,
	|	ТаблицаДляВТНалогНДФЛ.ИсчисленПоСтавке КАК ИсчисленПоСтавке
	|ПОМЕСТИТЬ ВТНДФЛНалог
	|ИЗ
	|	&ТаблицаДляВТНалогНДФЛ КАК ТаблицаДляВТНалогНДФЛ
	|ГДЕ
	|	(ТаблицаДляВТНалогНДФЛ.Сумма > 0
	|			ИЛИ ТаблицаДляВТНалогНДФЛ.СуммаНалогаСПревышения > 0)";
	
	Запрос.Выполнить();

КонецПроцедуры

// Обрабатывает ситуацию, когда сумма вычетов на детей больше, чем сумма начислений
// в текущем периоде работнику
Процедура ОбработатьВременнуюТаблицуПредоставленныхВычетовНаДетей(Запрос)
	
	Запрос.Текст = "
	|ВЫБРАТЬ * 
	|ИЗ ВтПредоставленныеВычетыНаДетей 
	|УПОРЯДОЧИТЬ ПО 
	|	ВтПредоставленныеВычетыНаДетей.Сотрудник";
	
	// Получим таблицу вычетов на детей
	ТаблицаВычетовНаДетей = Запрос.Выполнить().Выгрузить();
	
	// Проверим все строки по каждому сотруднику и определим те, в которых сумма вычета
	// превышает сумму начислений, такие строки удалим или скорректируем
	КоличествоСтрок = ТаблицаВычетовНаДетей.Количество();
	
	СчетчикВычетаСотрудника = 0;
	ПредыдущийСотрудник = Неопределено;
	УдалитьПоследующиеСтроки = Ложь;
	К = 0;
	
	Пока К < КоличествоСтрок Цикл
		
		ТекущаяСтрока = ТаблицаВычетовНаДетей[к];
		
		// Если перешли к обработки нового сотрудника, то сбрасываем все счетчики
		Если ПредыдущийСотрудник <> ТекущаяСтрока.Сотрудник Тогда
			ПредыдущийСотрудник = ТекущаяСтрока.Сотрудник;
			УдалитьПоследующиеСтроки = Ложь;
			СчетчикВычетаСотрудника = 0;
		КонецЕсли;
		
		Если УдалитьПоследующиеСтроки Тогда
			
			ТаблицаВычетовНаДетей.Удалить(ТекущаяСтрока);
			КоличествоСтрок = КоличествоСтрок - 1;
			
			// продолжаем, пока сотрудник не сменится
			Продолжить;
		КонецЕсли;
		
		
		// Если накопленная сумма вычета с учетом текущей строки больше, чем сумма начисления,
		// то сумму вычета уменьшаем до соответствующей величины и следующие строки удаляем
		Если ТекущаяСтрока.СуммаВычетаНаДетей + СчетчикВычетаСотрудника > ТекущаяСтрока.Сумма Тогда
			
			ТекущаяСтрока.СуммаВычетаНаДетей = ТекущаяСтрока.Сумма - СчетчикВычетаСотрудника;
			УдалитьПоследующиеСтроки = Истина;
			
		// Если накопленная сумма вычета с учетом текущей строки равна начислению, 
		// то последующие строки удаляем
		ИначеЕсли ТекущаяСтрока.СуммаВычетаНаДетей + СчетчикВычетаСотрудника = ТекущаяСтрока.Сумма Тогда
			
			УдалитьПоследующиеСтроки = Истина;
			
		Иначе
			
			// накапливаем сумму вычетов по детям в разрезе сотрудника
			СчетчикВычетаСотрудника = СчетчикВычетаСотрудника + ТекущаяСтрока.СуммаВычетаНаДетей;
			
		КонецЕсли;
		
		К = К + 1;
		
	КонецЦикла;
	
	// Подменяем таблицу
	Запрос.Текст = "
	|УНИЧТОЖИТЬ ВтПредоставленныеВычетыНаДетей
	|;
	|////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Сотрудник,
	|	Т.КодВычета,
	|	Т.СуммаВычетаНаДетей
	|ПОМЕСТИТЬ ВтПредоставленныеВычетыНаДетей 
	|ИЗ &ВтПредоставленныеВычетыНаДетей КАК Т
	|;";
	
	Запрос.УстановитьПараметр("ВтПредоставленныеВычетыНаДетей", ТаблицаВычетовНаДетей);
	Запрос.ВыполнитьПакет();
	Запрос.Параметры.Удалить("ВтПредоставленныеВычетыНаДетей");
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПоФормуламИНалогиИВзносы()
	
	РассчитатьПоФормулам();
	РассчитатьНалогиИВзносы();
	ОбновитьПодвалФормы();
	
КонецПроцедуры

// Получает набор данных с сервера для реквизита СчетЗатрат табличной части НачисленияИУдержания
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеСчетаЗатрат(СчетЗатрат)
	
	СтруктураДанных = Новый Структура("ТипСчета", Неопределено);
	Если ЗначениеЗаполнено(СчетЗатрат) Тогда
		
		СтруктураДанных.ТипСчета = СчетЗатрат.ТипСчета;
		
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции // ПолучитьДанныеСчетаЗатрат()

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", ДокументыУНФ.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", Константы.УчетПоКомпании.Компания(Организация));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

&НаСервере
// Процедура обновляет данные в подвале формы.
//
Процедура ОбновитьПодвалФормы()
	
	Документ = РеквизитФормыВЗначение("Объект");
	СтруктураИтогов = Документ.ПолучитьСуммуДокумента();
	СуммаДокумента = СтруктураИтогов.СуммаДокумента;
	СуммаНачислено = СтруктураИтогов.СуммаНачислено;
	СуммаУдержано = СтруктураИтогов.СуммаУдержано;
	СуммаПогашено = СтруктураИтогов.СуммаПогашено;
	СуммаВзносов = СтруктураИтогов.СуммаВзносов;
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры // ОбновитьПодвалФормы()

&НаСервереБезКонтекста
Функция ПроверитьЗаполнениеРеквизитовОрганизацииДляРасчетаВзносов(Организация, ДатаАнализа, ТекстВопроса, РассчитыватьБезВзносов, Расшифровка)
	
	УчетНалогов = ПолучитьФункциональнуюОпцию("ВестиУчетНалогаНаДоходыИВзносов");
	Если Не УчетНалогов Тогда
		РассчитыватьБезВзносов = Истина;
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.ИспользуетсяОтчетность,
	|	Организации.ТарифНаТравматизм,
	|	ТарифыСтраховыхВзносов.ВидТарифа
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов.СрезПоследних(&ДатаАнализа, ) КАК ТарифыСтраховыхВзносов
	|		ПО (ТарифыСтраховыхВзносов.Организация = &Организация)
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаАнализа", ДатаАнализа);
	
	Расшифровка = Новый Структура;
	Расшифровка.Вставить("ТипРасшифровки", "Объектная");
	Расшифровка.Вставить("ЗначениеРасшифровки", Организация);
	ПоляСОшибками = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Не Выборка.ИспользуетсяОтчетность Тогда
			РассчитыватьБезВзносов = Истина;
			Возврат Истина;
		Иначе
			ЗаполненТарифНаТравматизм = Выборка.ТарифНаТравматизм > 0;
			ЗаполненТарифСтраховыхВзносов = ЗначениеЗаполнено(Выборка.ВидТарифа);
			Если Не ЗаполненТарифНаТравматизм И Не ЗаполненТарифСтраховыхВзносов Тогда
				ТекстВопроса = НСтр("ru = 'В организации не заполнены тариф на травматизм и тариф страховых взносов. Заполнить?'");
				ПоляСОшибками.Вставить("КлючТарифаСтраховыхВзносов.ВидТарифа", НСтр("ru='Не указан тариф страховых взносов'"));
				ПоляСОшибками.Вставить("Объект.ТарифНаТравматизм",НСтр("ru='Не указан тариф на травматизм'"));
				Расшифровка.Вставить("ПараметрыРасшифровки",ПоляСОшибками);
				
				Возврат Ложь;
			ИначеЕсли Не ЗаполненТарифНаТравматизм Тогда
				ТекстВопроса = НСтр("ru = 'В организации не заполнены тариф на травматизм. Заполнить?'");
				ПоляСОшибками.Вставить("Объект.ТарифНаТравматизм",НСтр("ru='Не указан тариф на травматизм'"));
				Расшифровка.Вставить("ПараметрыРасшифровки",ПоляСОшибками);
				
				Возврат Ложь;
			ИначеЕсли Не ЗаполненТарифСтраховыхВзносов Тогда
				ТекстВопроса = НСтр("ru = 'В организации не заполнены тариф страховых взносов. Заполнить?'");
				ПоляСОшибками.Вставить("КлючТарифаСтраховыхВзносов.ВидТарифа", НСтр("ru='Не указан тариф страховых взносов'"));
				Расшифровка.Вставить("ПараметрыРасшифровки",ПоляСОшибками);
				
				Возврат Ложь;
			Иначе
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПолучитьСчетЗатратВзноса(СтруктураПараметров)
	
	ЗарплатаИПерсоналСлужебный.ПолучитьСчетЗатратВидаНачисления(СтруктураПараметров);
	СтруктураПараметров.СчетЗатрат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.ВидНачисленияУдержания, "СчетЗатрат");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере формы.
// В процедуре осуществляется
// - инициализация параметров формы,
// - установка параметров функциональных опций формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОтображениеПериодаРегистрации = Формат(Объект.ПериодРегистрации, "ДФ='MMMM yyyy'");
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	ВалютаДокумента = Объект.ВалютаДокумента;
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	
	ВыполнятьЗамерыПроизводительности = ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности();
	
	ОбновитьПодвалФормы();
	
	Если НЕ Константы.ФункциональнаяОпцияИспользоватьСовместительство.Получить() Тогда
		
		Если Элементы.Найти("НачисленияУдержанияСотрудникКод") <> Неопределено Тогда
			
			Элементы.НачисленияУдержанияСотрудникКод.Видимость = Ложь;
			
		КонецЕсли;
		
		Если Элементы.Найти("НалогиНаДоходыСотрудникКод") <> Неопределено Тогда
			
			Элементы.НалогиНаДоходыСотрудникКод.Видимость = Ложь;
			
		КонецЕсли;
		
		Если Элементы.Найти("СтраховыеВзносыСотрудникКод") <> Неопределено Тогда
			
			Элементы.СтраховыеВзносыСотрудникКод.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВыполнятьРасчетНДФЛПоПрогрессивнойШкале") Тогда
		
		Элементы.НалогиНаДоходыСуммаСПревышения.Видимость = Ложь;
		
	КонецЕсли;
		
	Если Объект.НачисленияУдержания.Количество() > 0 Тогда
		
		Для каждого СтрокаДанных Из Объект.НачисленияУдержания Цикл
			
			Если ЗначениеЗаполнено(СтрокаДанных.СчетЗатрат) Тогда
				
				СтрокаДанных.ТипСчета = СтрокаДанных.СчетЗатрат.ТипСчета;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Объект.Взносы.Количество() > 0 Тогда
		
		Для каждого СтрокаДанных Из Объект.Взносы Цикл
			
			Если ЗначениеЗаполнено(СтрокаДанных.СчетЗатрат) Тогда
				
				СтрокаДанных.ТипСчета = СтрокаДанных.СчетЗатрат.ТипСчета;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы ОбработкаВыбора
//
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И СтрНайти(ИсточникВыбора.ИмяФормы, "ФормаКалендаря") > 0 Тогда
		
		Объект.ПериодРегистрации = КонецДня(ВыбранноеЗначение);
		УправлениеНебольшойФирмойКлиент.ПриИзмененииПериодаРегистрации(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура - обработчик команды Рассчитать.
//
Процедура Рассчитать(Команда)
	
	ТекстВопроса = "";
	РассчитыватьБезВзносов = Ложь;
	Расшифровка = Новый Структура;
	Если Не ПроверитьЗаполнениеРеквизитовОрганизацииДляРасчетаВзносов(Объект.Организация, Объект.ПериодРегистрации, ТекстВопроса, РассчитыватьБезВзносов, Расшифровка) Тогда
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Заполнить'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Рассчитать без взносов'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьРеквизитыОрганизацииЗавершение", ЭтотОбъект, Новый Структура("Расшифровка, ПроцедураВыполнения", Расшифровка, "РассчитатьПоФормуламИНалогиИВзносы")), ТекстВопроса, СписокКнопок);
			
			Возврат; 
	КонецЕсли;
	
	РассчитатьПоФормуламИНалогиИВзносы();
	
КонецПроцедуры

&НаКлиенте
// Процедура заполняет табличную часть "Сотрудники" с отбором по подразделению.
//
Процедура Заполнить(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не заполнено подразделение. Заполнение документа отменено.'");
		Сообщение.Поле = "Объект.СтруктурнаяЕдиница";
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.НачисленияУдержания.Количество() > 0 И Объект.НалогиНаДоходы.Количество() > 0 Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗавершение1", ЭтотОбъект), НСтр(
			"ru = 'Табличные части документа будут очищены. Продолжить выполнение операции?'"),
			РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
		
	ИначеЕсли Объект.НачисленияУдержания.Количество() > 0 ИЛИ Объект.НалогиНаДоходы.Количество() > 0 ИЛИ
		Объект.ПогашениеЗаймов.Количество() > 0 Тогда // Прочие расчеты
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект), НСтр(
			"ru = 'Табличная часть документа будет очищена. Продолжить выполнение операции?'"),
			РежимДиалогаВопрос.ДаНет, 0);
		Возврат; 
		
	КонецЕсли;
	
	ТекстВопроса = "";
	РассчитыватьБезВзносов = Ложь;
	Расшифровка = Новый Структура;
	Если Не ПроверитьЗаполнениеРеквизитовОрганизацииДляРасчетаВзносов(Объект.Организация, Объект.ПериодРегистрации,
		ТекстВопроса, РассчитыватьБезВзносов, Расшифровка) Тогда
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Заполнить'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Рассчитать без взносов'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьРеквизитыОрганизацииЗавершение", ЭтотОбъект,
			Новый Структура("Расшифровка, ПроцедураВыполнения", Расшифровка, "ЗаполнитьПоПодразделению")),
			ТекстВопроса, СписокКнопок);
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьФрагмент1();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение1(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекстВопроса = "";
	РассчитыватьБезВзносов = Ложь;
	Расшифровка = Новый Структура;
	Если Не ПроверитьЗаполнениеРеквизитовОрганизацииДляРасчетаВзносов(Объект.Организация, Объект.ПериодРегистрации, ТекстВопроса, РассчитыватьБезВзносов, Расшифровка) Тогда
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Заполнить'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Рассчитать без взносов'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьРеквизитыОрганизацииЗавершение", ЭтотОбъект, Новый Структура("Расшифровка, ПроцедураВыполнения", Расшифровка, "ЗаполнитьПоПодразделению")), ТекстВопроса, СписокКнопок);
			
			Возврат; 
	КонецЕсли;
	
	ЗаполнитьФрагмент1();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ПроверкаДанныхКлиент.ПровестиРасшифровку(ДополнительныеПараметры.Расшифровка, Объект.Организация);
		Возврат;
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	РассчитыватьБезВзносов = Истина;
	Если ДополнительныеПараметры.ПроцедураВыполнения = "ЗаполнитьПоПодразделению" Тогда
		ЗаполнитьПоПодразделению();
	ИначеЕсли ДополнительныеПараметры.ПроцедураВыполнения = "РассчитатьПоФормуламИНалогиИВзносы" Тогда
		РассчитатьПоФормуламИНалогиИВзносы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФрагмент1()
	
	ЗаполнитьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
		
	КонецЕсли; 
	
	ТекстВопроса = "";
	РассчитыватьБезВзносов = Ложь;
	Расшифровка = Новый Структура;
	Если Не ПроверитьЗаполнениеРеквизитовОрганизацииДляРасчетаВзносов(Объект.Организация, Объект.ПериодРегистрации, ТекстВопроса, РассчитыватьБезВзносов, Расшифровка) Тогда
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Заполнить'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Рассчитать без взносов'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьРеквизитыОрганизацииЗавершение", ЭтотОбъект, Новый Структура("Расшифровка, ПроцедураВыполнения", Расшифровка, "ЗаполнитьПоПодразделению")), ТекстВопроса, СписокКнопок);
			
			Возврат; 
	КонецЕсли;
	
	ЗаполнитьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФрагмент()
	
	ЗаполнитьПоПодразделению();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
Процедура ВалютаДокументаПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Объект.НачисленияУдержания.Очистить();
		Объект.НалогиНаДоходы.Очистить();
		Объект.ПогашениеЗаймов.Очистить();
	КонецЕсли;
    
    
    ВалютаДокументаПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзмененииФрагмент()
    
    ВалютаДокумента = Объект.ВалютаДокумента;

КонецПроцедуры // ВалютаДокументаПриИзменении()

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении табличной части Начисления.
//
Процедура НалогиНаДоходыПриИзменении(Элемент)
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита ВидНачисленияУдержания табличной части НачисленияУдержания.
//
Процедура НачисленияУдержанияВидНачисленияУдержанияПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = Элементы.НачисленияУдержания.ТекущиеДанные;
	Если ДанныеТекущейСтроки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НачалоМесяца", 			НачалоМесяца(Объект.ПериодРегистрации));
	СтруктураДанных.Вставить("Организация", 			Объект.Организация);
	СтруктураДанных.Вставить("СтруктурнаяЕдиница", 		Объект.СтруктурнаяЕдиница);
	СтруктураДанных.Вставить("Валюта", 					Объект.ВалютаДокумента);
	СтруктураДанных.Вставить("Сотрудник", 				ДанныеТекущейСтроки.Сотрудник);
	СтруктураДанных.Вставить("ВидНачисленияУдержания",	ДанныеТекущейСтроки.ВидНачисленияУдержания);
	
	СтруктураДанных = ЗаполнитьПоказатели(СтруктураДанных);
	ЗаполнитьЗначенияСвойств(ДанныеТекущейСтроки, СтруктураДанных);
	
	Если НЕ ЗначениеЗаполнено(ДанныеТекущейСтроки.СчетЗатрат) Тогда
		
		ЗарплатаИПерсоналКлиент.СчетЗатратПоУмолчаниюВТекущуюСтроку(ЭтаФорма, Объект.СтруктурнаяЕдиница);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаСервере
Процедура ЗаполнитьЗаймыСотрудникам()

	Объект.ПогашениеЗаймов.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ СотрудникиПодразделения
	|ИЗ
	|	(ВЫБРАТЬ
	|		СотрудникиСрезПоследних.Сотрудник КАК Сотрудник
	|	ИЗ
	|		РегистрСведений.Сотрудники.СрезПоследних(&НачалоМесяца, Организация = &Организация) КАК СотрудникиСрезПоследних
	|	ГДЕ
	|		СотрудникиСрезПоследних.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Сотрудники.Сотрудник
	|	ИЗ
	|		РегистрСведений.Сотрудники КАК Сотрудники
	|	ГДЕ
	|		Сотрудники.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|		И Сотрудники.Период МЕЖДУ &НачалоМесяца И &ОкончаниеМесяца
	|		И Сотрудники.Организация = &Организация) КАК ВложенныйЗапрос
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоКредитамИЗаймамОбороты.ДоговорКредитаЗайма КАК ДоговорЗаймаСотруднику,
	|	РасчетыПоКредитамИЗаймамОбороты.ДоговорКредитаЗайма.ВалютаРасчетов КАК ВалютаРасчетов,
	|	РасчетыПоКредитамИЗаймамОбороты.ОсновнойДолгВалПриход КАК ОсновнойДолгВалВыплачено,
	|	РасчетыПоКредитамИЗаймамОбороты.ОсновнойДолгВалРасход КАК ОсновнойДолгПогашеноРанее,
	|	РасчетыПоКредитамИЗаймамОбороты.ПроцентыВалПриход КАК ПроцентыВалНачислено,
	|	РасчетыПоКредитамИЗаймамОбороты.ПроцентыВалРасход КАК ПроцентыВалПогашено,
	|	РасчетыПоКредитамИЗаймамОбороты.КомиссияВалПриход КАК КомиссияВалНачислено,
	|	РасчетыПоКредитамИЗаймамОбороты.КомиссияВалРасход КАК КомиссияВалПогашено
	|ПОМЕСТИТЬ ВременнаяТаблицаСуммыНачисленныеИПогашенныеСУчетомДвижений
	|ИЗ
	|	РегистрНакопления.РасчетыПоКредитамИЗаймам.Обороты(
	|			,
	|			,
	|			,
	|			ДоговорКредитаЗайма.ПогашатьИзЗаработнойПлаты
	|				И Организация = &Организация
	|				И ДоговорКредитаЗайма.ВидДоговора = &ВидДоговораДоговорЗаймаСотруднику
	|				И ВидДоговора = &ВидДоговораДоговорЗаймаСотруднику
	|				И ДоговорКредитаЗайма.ВалютаРасчетов = &Валюта
	|				И Контрагент В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						СотрудникиПодразделения.Сотрудник
	|					ИЗ
	|						СотрудникиПодразделения КАК СотрудникиПодразделения)) КАК РасчетыПоКредитамИЗаймамОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыПоКредитамИЗаймам.ДоговорКредитаЗайма,
	|	РасчетыПоКредитамИЗаймам.ДоговорКредитаЗайма.ВалютаРасчетов,
	|	ВЫБОР
	|		КОГДА РасчетыПоКредитамИЗаймам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -РасчетыПоКредитамИЗаймам.ОсновнойДолгВал
	|		ИНАЧЕ РасчетыПоКредитамИЗаймам.ОсновнойДолгВал
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыПоКредитамИЗаймам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА -РасчетыПоКредитамИЗаймам.ОсновнойДолгВал
	|		ИНАЧЕ РасчетыПоКредитамИЗаймам.ОсновнойДолгВал
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыПоКредитамИЗаймам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -РасчетыПоКредитамИЗаймам.ПроцентыВал
	|		ИНАЧЕ РасчетыПоКредитамИЗаймам.ПроцентыВал
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыПоКредитамИЗаймам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА -РасчетыПоКредитамИЗаймам.ПроцентыВал
	|		ИНАЧЕ РасчетыПоКредитамИЗаймам.ПроцентыВал
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыПоКредитамИЗаймам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -РасчетыПоКредитамИЗаймам.КомиссияВал
	|		ИНАЧЕ РасчетыПоКредитамИЗаймам.КомиссияВал
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыПоКредитамИЗаймам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА -РасчетыПоКредитамИЗаймам.КомиссияВал
	|		ИНАЧЕ РасчетыПоКредитамИЗаймам.КомиссияВал
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.РасчетыПоКредитамИЗаймам КАК РасчетыПоКредитамИЗаймам
	|ГДЕ
	|	РасчетыПоКредитамИЗаймам.Регистратор = &Ссылка
	|	И РасчетыПоКредитамИЗаймам.ДоговорКредитаЗайма.ПогашатьИзЗаработнойПлаты
	|	И РасчетыПоКредитамИЗаймам.Организация = &Организация
	|	И РасчетыПоКредитамИЗаймам.ДоговорКредитаЗайма.ВидДоговора = &ВидДоговораДоговорЗаймаСотруднику
	|	И РасчетыПоКредитамИЗаймам.ВидДоговора = &ВидДоговораДоговорЗаймаСотруднику
	|	И РасчетыПоКредитамИЗаймам.Контрагент В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				СотрудникиПодразделения.Сотрудник
	|			ИЗ
	|				СотрудникиПодразделения КАК СотрудникиПодразделения)
	|	И РасчетыПоКредитамИЗаймам.ДоговорКредитаЗайма.ВалютаРасчетов = &Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаСуммыНачисленныеИПогашенныеСУчетомДвижений.ДоговорЗаймаСотруднику,
	|	ВременнаяТаблицаСуммыНачисленныеИПогашенныеСУчетомДвижений.ВалютаРасчетов,
	|	СУММА(ВременнаяТаблицаСуммыНачисленныеИПогашенныеСУчетомДвижений.ОсновнойДолгВалВыплачено) КАК ОсновнойДолгВалВыплачено,
	|	СУММА(ВременнаяТаблицаСуммыНачисленныеИПогашенныеСУчетомДвижений.ОсновнойДолгПогашеноРанее) КАК ОсновнойДолгПогашеноРанее,
	|	СУММА(ВременнаяТаблицаСуммыНачисленныеИПогашенныеСУчетомДвижений.ПроцентыВалНачислено) КАК ПроцентыВалНачислено,
	|	СУММА(ВременнаяТаблицаСуммыНачисленныеИПогашенныеСУчетомДвижений.ПроцентыВалПогашено) КАК ПроцентыВалПогашено,
	|	СУММА(ВременнаяТаблицаСуммыНачисленныеИПогашенныеСУчетомДвижений.КомиссияВалНачислено) КАК КомиссияВалНачислено,
	|	СУММА(ВременнаяТаблицаСуммыНачисленныеИПогашенныеСУчетомДвижений.КомиссияВалПогашено) КАК КомиссияВалПогашено
	|ПОМЕСТИТЬ ВременнаяТаблицаСуммыНачисленныеИПогашенные
	|ИЗ
	|	ВременнаяТаблицаСуммыНачисленныеИПогашенныеСУчетомДвижений КАК ВременнаяТаблицаСуммыНачисленныеИПогашенныеСУчетомДвижений
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаСуммыНачисленныеИПогашенныеСУчетомДвижений.ДоговорЗаймаСотруднику,
	|	ВременнаяТаблицаСуммыНачисленныеИПогашенныеСУчетомДвижений.ВалютаРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикПогашенияКредитовИЗаймов.ДоговорКредитаЗайма,
	|	ГрафикПогашенияКредитовИЗаймов.ДоговорКредитаЗайма.ВалютаРасчетов,
	|	СУММА(ГрафикПогашенияКредитовИЗаймов.СуммаОсновногоДолга) КАК СуммаОсновногоДолгаГрафик,
	|	СУММА(ГрафикПогашенияКредитовИЗаймов.СуммаПроцентов) КАК СуммаПроцентовГрафик,
	|	СУММА(ГрафикПогашенияКредитовИЗаймов.СуммаКомиссии) КАК СуммаКомиссииГрафик
	|ПОМЕСТИТЬ ВременнаяТаблицаСуммыКоторыеДолжныПогасить
	|ИЗ
	|	СотрудникиПодразделения КАК СотрудникиПодразделения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикПогашенияКредитовИЗаймов КАК ГрафикПогашенияКредитовИЗаймов
	|		ПО СотрудникиПодразделения.Сотрудник = ГрафикПогашенияКредитовИЗаймов.ДоговорКредитаЗайма.Сотрудник
	|ГДЕ
	|	ГрафикПогашенияКредитовИЗаймов.Период <= &ОкончаниеМесяца
	|	И ГрафикПогашенияКредитовИЗаймов.ДоговорКредитаЗайма.ВалютаРасчетов = &Валюта
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикПогашенияКредитовИЗаймов.ДоговорКредитаЗайма,
	|	ГрафикПогашенияКредитовИЗаймов.ДоговорКредитаЗайма.ВалютаРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаСуммыКоторыеДолжныПогасить.ДоговорКредитаЗайма КАК ДоговорЗаймаСотруднику,
	|	ВременнаяТаблицаСуммыКоторыеДолжныПогасить.ДоговорКредитаЗаймаВалютаРасчетов КАК ВалютаРасчетов,
	|	ВременнаяТаблицаСуммыКоторыеДолжныПогасить.СуммаОсновногоДолгаГрафик,
	|	ВременнаяТаблицаСуммыКоторыеДолжныПогасить.СуммаПроцентовГрафик,
	|	ВременнаяТаблицаСуммыКоторыеДолжныПогасить.СуммаКомиссииГрафик,
	|	ЕСТЬNULL(ВременнаяТаблицаСуммыНачисленныеИПогашенные.ОсновнойДолгВалВыплачено, 0) КАК ОсновнойДолгВалВыплачено,
	|	ЕСТЬNULL(ВременнаяТаблицаСуммыНачисленныеИПогашенные.ОсновнойДолгПогашеноРанее, 0) КАК ОсновнойДолгПогашеноРанее,
	|	ЕСТЬNULL(ВременнаяТаблицаСуммыНачисленныеИПогашенные.ПроцентыВалНачислено, 0) КАК ПроцентыВалНачислено,
	|	ЕСТЬNULL(ВременнаяТаблицаСуммыНачисленныеИПогашенные.ПроцентыВалПогашено, 0) КАК ПроцентыВалПогашено,
	|	ЕСТЬNULL(ВременнаяТаблицаСуммыНачисленныеИПогашенные.КомиссияВалНачислено, 0) КАК КомиссияВалНачислено,
	|	ЕСТЬNULL(ВременнаяТаблицаСуммыНачисленныеИПогашенные.КомиссияВалПогашено, 0) КАК КомиссияВалПогашено,
	|	ВременнаяТаблицаСуммыКоторыеДолжныПогасить.ДоговорКредитаЗайма.Сотрудник КАК Сотрудник,
	|	ВременнаяТаблицаСуммыКоторыеДолжныПогасить.ДоговорКредитаЗайма.СуммаДокумента КАК ОбщаяСуммаЗайма
	|ИЗ
	|	ВременнаяТаблицаСуммыКоторыеДолжныПогасить КАК ВременнаяТаблицаСуммыКоторыеДолжныПогасить
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСуммыНачисленныеИПогашенные КАК ВременнаяТаблицаСуммыНачисленныеИПогашенные
	|		ПО ВременнаяТаблицаСуммыКоторыеДолжныПогасить.ДоговорКредитаЗайма = ВременнаяТаблицаСуммыНачисленныеИПогашенные.ДоговорЗаймаСотруднику";
	
	Запрос.УстановитьПараметр("ВидДоговораДоговорЗаймаСотруднику", Перечисления.ВидыДоговоровКредитаИЗайма.ДоговорЗаймаСотруднику);
	Запрос.Параметры.Вставить("НачалоМесяца", 		Объект.ПериодРегистрации);
	Запрос.Параметры.Вставить("ОкончаниеМесяца",	КонецМесяца(Объект.ПериодРегистрации));
	Запрос.Параметры.Вставить("Организация", 		Константы.УчетПоКомпании.Компания(Объект.Организация));
	Запрос.Параметры.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница);
	Запрос.Параметры.Вставить("Валюта", 			Объект.ВалютаДокумента);
	Запрос.Параметры.Вставить("Ссылка", 			Объект.Ссылка);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Если деньги по договору займа ещё не выплатили, то погашать не будем.
		Если Выборка.ОсновнойДолгВалВыплачено = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НужноПогаситьЗайма = Выборка.СуммаОсновногоДолгаГрафик - Выборка.ОсновнойДолгПогашеноРанее;
		НужноПогаситьЗайма = ?(НужноПогаситьЗайма < 0, 0, НужноПогаситьЗайма);
		НужноПогаситьЗайма = ?(Выборка.ОсновнойДолгПогашеноРанее > Выборка.ОбщаяСуммаЗайма, 0, НужноПогаситьЗайма);
		
		НачисленоПроцентов = (Выборка.СуммаПроцентовГрафик + Выборка.СуммаКомиссииГрафик) - (Выборка.ПроцентыВалНачислено + Выборка.КомиссияВалНачислено);
		НачисленоПроцентов = ?(НачисленоПроцентов < 0, 0, НачисленоПроцентов);
		
		ПогашеноПроцентов = (Выборка.СуммаПроцентовГрафик + Выборка.СуммаКомиссииГрафик) - (Выборка.ПроцентыВалПогашено + Выборка.КомиссияВалПогашено);
		ПогашеноПроцентов = ?(ПогашеноПроцентов < 0, 0, ПогашеноПроцентов);
		
		Если НужноПогаситьЗайма > 0 Или НачисленоПроцентов > 0 Тогда
			НоваяСтрока = Объект.ПогашениеЗаймов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ПогашеноЗайма = НужноПогаситьЗайма;
			НоваяСтрока.НачисленоПроцентов = НачисленоПроцентов;
			НоваяСтрока.ПогашеноПроцентов = ПогашеноПроцентов;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Организация.
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
Процедура ОрганизацияПриИзменении(Элемент)

	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
	Компания = СтруктураДанные.Компания;
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода ВалютаДокумента.
//
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	Если Объект.ВалютаДокумента = ВалютаДокумента Тогда
		Возврат;
	КонецЕсли; 
	
	Если Объект.НачисленияУдержания.Количество() > 0 Или Объект.ПогашениеЗаймов.Количество() > 0 Тогда

		Режим = РежимДиалогаВопрос.ДаНет;

		ПоказатьВопрос(Новый ОписаниеОповещения("ВалютаДокументаПриИзмененииЗавершение", ЭтотОбъект), НСтр(
			"ru = 'Табличные части будут очищены. Продолжить выполнение операции?'"), Режим, 0);
		Возврат;

	КонецЕсли; 
	
	ВалютаДокументаПриИзмененииФрагмент();
КонецПроцедуры

// Процедура обработчик события регулирования поля ПериодРегистрации
//
&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УправлениеНебольшойФирмойКлиент.ПриРегулированииПериодаРегистрации(ЭтаФорма, Направление);
	УправлениеНебольшойФирмойКлиент.ПриИзмененииПериодаРегистрации(ЭтаФорма);
	
КонецПроцедуры //ПериодРегистрацииРегулирование()

// Процедура обработчик события начала ввода данных поля ПериодРегистрации
//
&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		ДатаКалендаряПриОткрытии = Объект.ПериодРегистрации;
	Иначе
		ДатаКалендаряПриОткрытии = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ФормаКалендаря", ОбщегоНазначенияУНФКлиент.ПараметрыОткрытияФормыКалендаря(
		ДатаКалендаряПриОткрытии), ЭтотОбъект);
	
КонецПроцедуры //ПериодРегистрацииНачалоВыбора()

&НаКлиенте
Процедура НачисленияУдержанияСчетЗатратПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = Элементы.НачисленияУдержания.ТекущиеДанные;
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		СтруктураДанных = ПолучитьДанныеСчетаЗатрат(ДанныеТекущейСтроки.СчетЗатрат);
		ДанныеТекущейСтроки.ТипСчета = СтруктураДанных.ТипСчета;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияУдержанияСчетЗатратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаИПерсоналКлиент.ПараметрыВыбораСчетаЗатрат(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриНачалеРедактирования табличной части Начисления.
//
Процедура НачисленияУдержанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Если НЕ Копирование Тогда
			
			ТекущиеДанные 				= Элементы.НачисленияУдержания.ТекущиеДанные;
			
			ТекущиеДанные.ДатаНачала 	= Объект.ПериодРегистрации;
			ТекущиеДанные.ДатаОкончания = КонецМесяца(Объект.ПериодРегистрации);
			ТекущиеДанные.РучнаяКорректировка = Истина;
			
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении табличной части Начисления.
//
Процедура НачисленияУдержанияПриИзменении(Элемент)
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении табличной части Начисления.
//
Процедура СтраховыеВзносыПриИзменении(Элемент)
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении табличной части ПогашениеЗаймов.
//
&НаКлиенте
Процедура ПогашениеЗаймовПриИзменении(Элемент)
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраховыеВзносыСчетЗатратПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = Элементы.СтраховыеВзносы.ТекущиеДанные;
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		СтруктураДанных = ПолучитьДанныеСчетаЗатрат(ДанныеТекущейСтроки.СчетЗатрат);
		ДанныеТекущейСтроки.ТипСчета = СтруктураДанных.ТипСчета;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраховыеВзносыСчетЗатратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаИПерсоналКлиент.ПараметрыВыбораСчетаЗатрат(ЭтаФорма, "СтраховыеВзносы");
	
КонецПроцедуры

&НаКлиенте
Процедура СтраховыеВзносыВидНачисленияУдержанияПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = Элементы.СтраховыеВзносы.ТекущиеДанные;
	СтруктураПараметров = Новый Структура("СчетЗатрат, ТипСчета");
	СтруктураПараметров.Вставить("ВидНачисленияУдержания", ДанныеТекущейСтроки.ВидНачисленияУдержания);
	СтруктураПараметров.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница);
	
	Если ЗначениеЗаполнено(ДанныеТекущейСтроки.ВидНачисленияУдержания) Тогда
		
		ПолучитьСчетЗатратВзноса(СтруктураПараметров);
		ДанныеТекущейСтроки.СчетЗатрат = СтруктураПараметров.СчетЗатрат;
		
	КонецЕсли;
	
	Если ДанныеТекущейСтроки.Свойство("ТипСчета") Тогда
		
		ДанныеТекущейСтроки.ТипСчета = СтруктураПараметров.ТипСчета;
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
