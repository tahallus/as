#Область ОписаниеПеременных

&НаКлиенте
Перем СтрокаПоискаПоКБК;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ФормыДокументовДеньги.ПриСозданииНаСервере(ЭтаФорма);
	
	ОтображениеПериодаРегистрации = Формат(Объект.ПериодРегистрации, "ДФ='MMMM yyyy'");
	
	ЭтоФизЛицо = Объект.Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	БезНалогаНДС = Объект.СтавкаНДС.НеОблагается;
	ВидКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ВидКонтрагента");
	Договор = Объект.Договор;
	СпособЗаполненияСтавкиНДС = Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоДоговору(
		Договор);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
	   И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет)
			И ЗначениеЗаполнено(Объект.ДокументОснование)
			И Объект.ДокументОснование.ВалютаДокумента = Объект.Организация.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств Тогда
				Объект.БанковскийСчет = Объект.Организация.БанковскийСчетПоУмолчанию;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет)
			И НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
				Объект.БанковскийСчет = Объект.Организация.БанковскийСчетПоУмолчанию;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ИННПлательщика) Тогда
			Объект.ИННПлательщика = Объект.Организация.ИНН;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.КПППлательщика) Тогда
			НеобходимостьУказанияКПППлательщика = ПолучитьНеобходимостьУказанияКПП(Объект.БанковскийСчет, Объект.ВидОперации);
			Объект.КПППлательщика = ?(НеобходимостьУказанияКПППлательщика, Объект.Организация.КПП, "");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ТекстПлательщика) Тогда
			СтруктураДанные = Новый Структура(
				"НаименованиеПлательщикаПриПеречисленииНалогов, ТекстКорреспондента, НаименованиеПолное, ТекстБанкДляРасчетов",
				Объект.Организация.НаименованиеПлательщикаПриПеречисленииНалогов, Объект.БанковскийСчет.ТекстКорреспондента,
				Объект.Организация.НаименованиеПолное, Документы.ПлатежноеПоручение.ПолучитьТекстБанкДляРасчетов(Объект.БанковскийСчет)
			);
			ЗаполнитьТекстПлательщика(СтруктураДанные);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Если НЕ ЗначениеЗаполнено(Объект.СчетКонтрагента)
				И ЗначениеЗаполнено(Объект.ДокументОснование)
				И Объект.ДокументОснование.ВалютаДокумента = Объект.Контрагент.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств Тогда
					Объект.СчетКонтрагента = Объект.Контрагент.БанковскийСчетПоУмолчанию;
			КонецЕсли;
			Объект.ИННПолучателя = Объект.Контрагент.ИНН;
			Объект.КПППолучателя = Объект.Контрагент.КПП;
			Объект.ТекстПолучателя = ?(
				ЗначениеЗаполнено(Объект.СчетКонтрагента.ТекстКорреспондента),
				Объект.СчетКонтрагента.ТекстКорреспондента,
				Объект.Контрагент.НаименованиеПолное);
			СтруктураДанные = Новый Структура(
				"ТекстКорреспондента, НаименованиеПолное, ТекстБанкДляРасчетов",
				Объект.СчетКонтрагента.ТекстКорреспондента, Объект.Контрагент.НаименованиеПолное, Документы.ПлатежноеПоручение.ПолучитьТекстБанкДляРасчетов(Объект.СчетКонтрагента)
			);
			ЗаполнитьТекстПолучателя(СтруктураДанные);
			Если ПустаяСтрока(СтруктураДанные.ТекстКорреспондента) Тогда
				
				Объект.ТекстПолучателя = СтруктураДанные.НаименованиеПолное;
				Если ЗначениеЗаполнено(СтруктураДанные.ТекстБанкДляРасчетов) Тогда
					Объект.ТекстПолучателя = Объект.ТекстПолучателя + СтруктураДанные.ТекстБанкДляРасчетов;
				КонецЕсли;
				
			Иначе
				
				Объект.ТекстПолучателя = СтруктураДанные.ТекстКорреспондента;
				
			КонецЕсли;
			
			НазначениеПлатежа = Объект.СчетКонтрагента.ТекстНазначения;
		КонецЕсли; 
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога Тогда
			Объект.КодОКАТО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "КодПоОКТМО");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) И НЕ ЭтоВидОперацииБезНДС(Объект.ВидОперации) Тогда
			Объект.СтавкаНДС = РасчетыРаботаСФормамиВызовСервера.СтавкаНДСПоОрганизацииНалогообложениеНДСИСпособуЗаполнения(Объект.Организация, Объект.Дата, СпособЗаполненияСтавкиНДС);
			ОбновитьСуммуНДС();
		КонецЕсли;
		
		ЗаполнитьРеквизитыПоВидуОперации();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		НазначениеПлатежа = Объект.СчетКонтрагента.ТекстНазначения;
	КонецЕсли;
	
	ИсходнаяСуммаРавнаНулю = (Объект.СуммаДокумента = 0);
	
	Если Объект.ПоказательПериода = "0"
	 ИЛИ ПустаяСтрока(Объект.ПоказательПериода)
	 ИЛИ ПустаяСтрока(СтрЗаменить(Объект.ПоказательПериода, ".", "")) Тогда
		ПериодичностьУплаты = "0";
	Иначе
		СтрокаВидаПериода = Лев(Объект.ПоказательПериода, 2);
		СтрокаПериода     = Сред(Объект.ПоказательПериода, 4, 2);
		СтрокаГода        = Сред(Объект.ПоказательПериода, 7);
		Если СтрокаВидаПериода = "ГД" Тогда
			ПериодичностьУплаты = "ГД";
		ИначеЕсли СтрокаВидаПериода = "ПЛ" Тогда
			ПериодичностьУплаты = "ПЛ";
		ИначеЕсли СтрокаВидаПериода = "КВ" Тогда
			ПериодичностьУплаты = "КВ";
		ИначеЕсли СтрокаВидаПериода = "МС" Тогда
			ПериодичностьУплаты = "МС";
		Иначе
			ПериодичностьУплаты = "-";
		КонецЕсли;
		Попытка
			ГодЧислом    = Число(СтрокаГода);
			ПериодЧислом = Число(СтрокаПериода);
			Если ПериодичностьУплаты = "-" Тогда
				ДеньЧислом  = Число(СтрокаВидаПериода);
				ДатаПлатежа = Дата(ГодЧислом, ПериодЧислом, ДеньЧислом);
			Иначе
				ГодПлатежа    = ГодЧислом;
				ПериодПлатежа = ПериодЧислом;
			КонецЕсли;
		Исключение
			ПериодичностьУплаты = "0";
		КонецПопытки;
	КонецЕсли;

	Если ПериодичностьУплаты = "0" Тогда
		Элементы.ГодПериод.Видимость = Ложь;
		Элементы.ДатаПлатежа.Видимость = Ложь;
	Иначе
		Если ПериодичностьУплаты = "-" Тогда
			Элементы.ГодПериод.Видимость = Ложь;
			Элементы.ДатаПлатежа.Видимость = Истина;
		Иначе
			Элементы.ГодПериод.Видимость = Истина;
			Элементы.ДатаПлатежа.Видимость = Ложь;
			Элементы.ПериодПлатежа.Видимость = ПериодичностьУплаты <> "ГД";
			Если ПериодичностьУплаты = "МС" Тогда
				Элементы.ПериодПлатежа.МинимальноеЗначение = 1;
				Элементы.ПериодПлатежа.МаксимальноеЗначение = 12;
				Элементы.ПериодПлатежа.Заголовок = НСтр("ru = 'Месяц'");
			ИначеЕсли ПериодичностьУплаты = "КВ" Тогда
				Элементы.ПериодПлатежа.МинимальноеЗначение = 1;
				Элементы.ПериодПлатежа.МаксимальноеЗначение = 4;
				Элементы.ПериодПлатежа.Заголовок = НСтр("ru = 'Квартал'");
			ИначеЕсли ПериодичностьУплаты = "ПЛ" Тогда
				Элементы.ПериодПлатежа.МинимальноеЗначение = 1;
				Элементы.ПериодПлатежа.МаксимальноеЗначение = 2;
				Элементы.ПериодПлатежа.Заголовок = НСтр("ru = 'Полугодие'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		СтруктураДанные = ПолучитьДанныеДокументОснованиеПриИзменении(Объект.ДокументОснование);
		НомерВходящегоДокумента = СтруктураДанные.НомерВходящегоДокумента;
		ДатаВходящегоДокумента = СтруктураДанные.ДатаВходящегоДокумента;
	КонецЕсли;

	УстановитьФормуС2014Года();
	УстановитьФормуС2015Года();
	
	УстановитьВидимостьВЗависимостиОтВидаПеречисленияВБюджет(ЭтаФорма);
	УстановитьВидимостьПоДаннымКонтрагента();
	РасчетыРаботаСФормамиВызовСервера.УстановитьСвязьПараметровВыбораПоОрганизации(ЭтотОбъект);
	
	ЗаполнитьСписокОчередностьПлатежа();
	
	ДополнительныеДействияРасшифровкаПлатежа(Истина);
	ОбновитьДанныеПоФизЛицуНаСервере();
	ОбновитьЗаголовкиСворачиваемыхГруппНаСервере();
	ОбновитьТекстДекорацииНазначенияНаСервере();
	НастроитьСписокВыбораКодВидаДохода();
	УстановитьВидимостьКодаВидаДохода(ЭтотОбъект);
	УстановитьВидимостьКодаВыплат(ЭтотОбъект);
	
	НовыйМассив = Новый Массив();
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	ПараметрыВыбораДокументаОснования = НовыеПараметры;
	
	Если ТолькоПросмотр И НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Элементы.ДокументОснованиеНадпись.Доступность = Ложь;
	КонецЕсли;
	// Конец Документ основание.
	
	// Остатки ДС и взаиморасчетов на форме
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	ОбновитьВидимостьИОстаткиДС(Объект.БанковскийСчет);
	// Конец Остатки ДС и взаиморасчетов на форме
	
	АвтоподборКонтактов.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	ПараметрыОтображения = ОбменСБанкамиКлиентСервер.ПараметрыСозданияФормыДокумента();
	ПараметрыОтображения.МестоРасположенияСостояния = Элементы.Дополнительно.Имя;
	ОбменСБанками.ПриСозданииФормыДокументаНаСервере(ЭтотОбъект, ПараметрыОтображения);
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	
	ИспользуетсяОтчетность = ПолучитьФункциональнуюОпцию("ИспользоватьОтчетность");
	ИзменитьОтображениеПодсказки(Элементы, Объект.ВидОперации, Не ЗначениеЗаполнено(Объект.Ссылка)И ИспользуетсяОтчетность);
	// МобильныйКлиент
	МобильныйКлиентУНФ.НастроитьФормуОбъектаМобильныйКлиент(Элементы);
	// Конец МобильныйКлиент
	
	КодВидаДоходаПоУмолчанию();
	
КонецПроцедуры

// Процедура устанавливает видимость договора в зависимости от установленного параметра контрагенту.
//
&НаСервере
Процедура УстановитьВидимостьДоговора()
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) И ЗначениеЗаполнено(Объект.Контрагент)
		И ВидОперации <> Перечисления.ВидыОперацийПлатежноеПоручение.ПереводНаДругойСчет 
		И ВидОперации <> Перечисления.ВидыОперацийПлатежноеПоручение.ЛичныеСредстваПредпринимателя 
		И ВидОперации <> Перечисления.ВидыОперацийПлатежноеПоручение.РасчетыПоКредитам Тогда
		
		ПараметрыРасчетовСКонтрагентом = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, "ВестиРасчетыПоДоговорам");
		Элементы.Договор.Видимость = ПараметрыРасчетовСКонтрагентом.ВестиРасчетыПоДоговорам;
		
	Иначе
		
		Элементы.Договор.Видимость = Ложь;
		
	 КонецЕсли;
	 
КонецПроцедуры // УстановитьВидимостьДоговора()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Для работы с расшифровкой платежа
	ДатаПриСозданииНаСервере = Объект.Дата;
	ИсходнаяСуммаРавнаНулю = (Объект.СуммаДокумента = 0);
	// Конец Для работы с расшифровкой платежа
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	ОбменСБанками.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	ОбновитьВидимостьИОстаткиДС(Объект.БанковскийСчет);
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);	
	// Конец Обсуждения
	
	Если ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата Тогда
		Справочники.ДоговорыКонтрагентов.ЗаписатьСпособЗаполненияСтавкиНДСПоДокументу(ТекущийОбъект.Договор,
			ТекущийОбъект.Ссылка, ТекущийОбъект.СуммаНДС > 0);
	КонецЕсли;
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	ОбменСБанкамиКлиент.ОбработатьОповещениеФормыДокумента(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
	Если ИмяСобытия = "ОповещениеОЗаписиРасходаСоСчета" И НЕ Модифицированность Тогда
		Прочитать();
	КонецЕсли; 
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения

КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	Если СозданПоКомандеИзФормыСписка Тогда
		ПараметрыОповещения = Новый Структура("Ссылка", Объект.Ссылка);
		Оповестить("Запись_ПлатежноеПоручение", ПараметрыОповещения);
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	ОбменСБанкамиКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// Процедура устанавливает видимость счета контрагента в зависимости от установленного параметра контрагенту.
//
&НаСервере
Процедура УстановитьВидимостьСчетаПолучателя()
	
	Элементы.СчетКонтрагента.Видимость = ЗначениеЗаполнено(Объект.Контрагент) 
									ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ЛичныеСредстваПредпринимателя
									ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПереводНаДругойСчет;
	
КонецПроцедуры // УстановитьВидимостьДоговора()

&НаСервере
Процедура УстановитьВидимостьПоДаннымКонтрагента()
	
	УстановитьВидимостьДоговора();
	УстановитьВидимостьСчетаПолучателя();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении реквизита ПериодичностьУплаты.
// В процедуре устанавливается максимальное значение реквизита ПериодПлатежа в
// зависимости от реквизита ПериодичностьУплаты.
//
&НаКлиенте
Процедура ПериодичностьУплатыПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(ПериодичностьУплаты)) Тогда
		ПериодичностьУплаты= "0";
	КонецЕсли;

	Модифицированность = Истина;
	
	Если ПериодичностьУплаты <> "0"
	   И ПериодичностьУплаты <> "-" Тогда
		Если ГодПлатежа = 0 Тогда
			ГодПлатежа = Год(Объект.Дата);
		КонецЕсли;
		Если ПериодичностьУплаты = "ГД" Тогда
			ПериодПлатежа = 0;
		Иначе
			Если ПериодичностьУплаты = "МС" Тогда
				ПериодПлатежа = Мин(ПериодПлатежа, 12);
			ИначеЕсли ПериодичностьУплаты = "КВ" Тогда
				ПериодПлатежа = Мин(ПериодПлатежа, 4);
			ИначеЕсли ПериодичностьУплаты = "ПЛ" Тогда
				ПериодПлатежа = Мин(ПериодПлатежа, 2);
			КонецЕсли;
			ПериодПлатежа = Макс(1, ПериодПлатежа);
		КонецЕсли;
	Иначе
		ГодПлатежа = 0;
	КонецЕсли;
	
	УстановитьПоказательПериода();
	УстановитьДоступностьРеквизитовПеречисленияНалогов();
	
КонецПроцедуры // ПериодичностьУплатыПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита ГодПлатежа.
// В процедуре устанавливается реквизит Показатель периода.
//
&НаКлиенте
Процедура ГодПлатежаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	УстановитьПоказательПериода();
	
КонецПроцедуры // ГодПлатежаПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита ПериодПлатежа.
// В процедуре устанавливается реквизит Показатель периода.
//
&НаКлиенте
Процедура ПериодПлатежаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	УстановитьПоказательПериода();
	
КонецПроцедуры // ПериодПлатежаПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита ДатаПлатежа.
// В процедуре устанавливается реквизит Показатель периода.
//
&НаКлиенте
Процедура ДатаПлатежаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	УстановитьПоказательПериода();
	
КонецПроцедуры // ДатаПлатежаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Организация.
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.Номер 			= "";
	СтруктураДанные 		= ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация, Объект.БанковскийСчет, Объект.Контрагент, Объект.СчетКонтрагента, Объект.ВидОперации, Объект.Дата);
	Компания 				= СтруктураДанные.Компания;
	Объект.БанковскийСчет	= СтруктураДанные.БанковскийСчет;
	Объект.ВалютаДокумента	= СтруктураДанные.ВалютаДокумента;
	Объект.СчетКонтрагента	= СтруктураДанные.СчетКонтрагента;
	Объект.ИННПлательщика	= СтруктураДанные.ИННПлательщика;
	Объект.КПППлательщика	= СтруктураДанные.КПППлательщика;
	
	ЗаполнитьТекстПлательщика(СтруктураДанные);
	
	ЭтоФизЛицо = СтруктураДанные.ЭтоФизЛицо;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога") Тогда
			Объект.КодОКАТО = СтруктураДанные.КодОКАТО;
			Если ЭтоФизЛицо Тогда
				Объект.КПППлательщика = 0;
			КонецЕсли;
		Иначе
			Объект.КодОКАТО = "";
			Если ЭтоФизЛицо Тогда
				Объект.КПППлательщика = "";
			КонецЕсли;
		КонецЕсли;
	Иначе
		Объект.БанковскийСчет = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
	КонецЕсли;
	
	ОбновитьЗаголовокПлательщика();
	ЗаполнитьРеквизитыПоВидуОперации();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении реквизита  СчетОрганизации.
//
&НаКлиенте
Процедура СчетОрганизацииПриИзменении(Элемент)
	
	СтруктураДанные = ПолучитьДанныеСчетОрганизацииПриИзменении(Объект.Организация, Объект.БанковскийСчет, Объект.ВалютаДокумента, Объект.Дата, Объект.ВидОперации);
	Объект.КПППлательщика = СтруктураДанные.КПППлательщика;
	
	Если НЕ Объект.ВалютаДокумента = СтруктураДанные.ВалютаДенежныхСредств Тогда
		
		Объект.СчетКонтрагента = Неопределено;
		Объект.ВалютаДокумента = СтруктураДанные.ВалютаДенежныхСредств;
		
		Если Объект.СуммаДокумента <> 0 Тогда
			ТекстСообщения = НСтр("ru = 'Изменилась валюта банковского счета. Пересчитать суммы документа?'");
			
			Режим = РежимДиалогаВопрос.ДаНет;
			
			ПоказатьВопрос(Новый ОписаниеОповещения("СчетОрганизацииПриИзмененииЗавершение", ЭтотОбъект,
				Новый Структура("СтруктураДанные", СтруктураДанные)), ТекстСообщения, Режим, 0);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьТекстПлательщика(СтруктураДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Оплата") И Договор <> Объект.Договор Тогда
		ОбновитьКурсыРасчетовРасшифровкиПлатежаНаСервере();
	КонецЕсли;
	
	СпособЗаполненияСтавкиНДСДоИзменения = СпособЗаполненияСтавкиНДС;
	СпособЗаполненияСтавкиНДС = СпособЗаполненияСтавкиНДС();
	Если СпособЗаполненияСтавкиНДСДоИзменения <> СпособЗаполненияСтавкиНДС 
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Оплата") Тогда 
		Объект.СтавкаНДС =РасчетыРаботаСФормамиВызовСервера.СтавкаНДСПоОрганизацииНалогообложениеНДСИСпособуЗаполнения(Объект.Организация, Объект.Дата, СпособЗаполненияСтавкиНДС);
	КонецЕсли;
	
	Договор = Объект.Договор;
	ДополнительныеДействияРасшифровкаПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетОрганизацииПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	СтруктураДанные = ДополнительныеПараметры.СтруктураДанные;

	Ответ = Результат;

	Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Курс = ?(
			СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
		Кратность = ?(
			СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	КонецЕсли;

	Если Ответ = КодВозвратаДиалога.Да Тогда

		Объект.СуммаДокумента = ВалютыУНФКлиентСервер.Пересчитать(Объект.СуммаДокумента,
			СтруктураДанные.ВалютаКурсКратностьПередИзменением.Курс, СтруктураДанные.ВалютаКурсКратность.Курс,
			СтруктураДанные.ВалютаКурсКратностьПередИзменением.Кратность, СтруктураДанные.ВалютаКурсКратность.Кратность);
		Объект.СуммаНДС = ВалютыУНФКлиентСервер.Пересчитать(Объект.СуммаНДС,
			СтруктураДанные.ВалютаКурсКратностьПередИзменением.Курс, СтруктураДанные.ВалютаКурсКратность.Курс,
			СтруктураДанные.ВалютаКурсКратностьПередИзменением.Кратность, СтруктураДанные.ВалютаКурсКратность.Кратность);

		Для Каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
				СтрокаТабличнойЧасти.СуммаПлатежа, СтруктураДанные.ВалютаКурсКратностьПередИзменением.Курс,
				СтруктураДанные.ВалютаКурсКратность.Курс, СтруктураДанные.ВалютаКурсКратностьПередИзменением.Кратность,
				СтруктураДанные.ВалютаКурсКратность.Кратность);

			РасчетыРаботаСФормамиКлиент.РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
		КонецЦикла;

	КонецЕсли;

	ЗаполнитьТекстПлательщика(СтруктураДанные);

КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
	УстановитьФормуС2014Года();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога")
	   И ((ПлатежиВБюджетКлиентСервер.ДействуетПриказ107н(Объект.Дата)
	   И НЕ ПлатежиВБюджетКлиентСервер.ДействуетПриказ107н(ДатаПередИзменением))
	   ИЛИ (НЕ ПлатежиВБюджетКлиентСервер.ДействуетПриказ107н(Объект.Дата)
	   И ПлатежиВБюджетКлиентСервер.ДействуетПриказ107н(ДатаПередИзменением))) Тогда
		ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчанию();
	КонецЕсли;
	
	УстановитьФормуС2015Года();
	
	// Заменим (добавим) УИН (уникальный идентификатор начисления)
	// С 01 января 2014 по 30 марта 2014 он указывается в назначении платежа
	ПлатежиВБюджетКлиентСервер.ЗаменитьВНазначенииПлатежаУИН(
		Объект.НазначениеПлатежа,
		Объект.ИдентификаторПлатежа,
		Объект.Дата,
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога")
	);
	
	ДатаПриИзмененииФрагментНаСервере();
	
КонецПроцедуры // ДатаПриИзменении()

&НаСервере
Процедура ДатаПриИзмененииФрагментНаСервере()
	
	УстановитьВидимостьКодаВидаДохода(ЭтотОбъект);
	КодВидаДоходаПоУмолчанию();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении реквизита ВидОперации.
// В процедуре устанавливается доступность реквизитов формы в зависимости от
// вида операции.
//
&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ВидОперации Тогда
		Возврат;
	КонецЕсли;
	ВидОперации = Объект.ВидОперации;
	
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация, Объект.БанковскийСчет, Объект.Контрагент, Объект.СчетКонтрагента, Объект.ВидОперации, Объект.Дата);
	
	Объект.КПППлательщика = СтруктураДанные.КПППлательщика;
	Объект.КПППолучателя = СтруктураДанные.КПППолучателя;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога") Тогда
		Объект.КодБК = "";
		Объект.КодОКАТО = СтруктураДанные.КодОКАТО;
		Объект.ВидПеречисленияВБюджет = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж");
		Если ЭтоФизЛицо Тогда
			Объект.КПППлательщика = 0;
		КонецЕсли;
		ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчанию();
		Объект.ИдентификаторПлатежа = "";
		Элементы.ИдентификаторПлатежа.Заголовок = НСтр("ru = 'УИН'");
	Иначе
		Объект.КодБК  = "";
		Объект.КодОКАТО = "";
		Объект.СтатусСоставителя = "";
		Объект.ПоказательОснования = "";
		Объект.ПоказательТипа = "";
		Объект.ПоказательПериода = "";
		Объект.ПоказательНомера = "";
		Объект.ПоказательДаты = "";
		ПериодичностьУплаты = "";
		ГодПлатежа = 0;
		ПериодПлатежа = 0;
		Объект.ВидПеречисленияВБюджет = Неопределено;
		Если ЭтоФизЛицо Тогда
			Объект.КПППлательщика = "";
		КонецЕсли;
		Объект.ИдентификаторПлатежа = "";
		Элементы.ИдентификаторПлатежа.Заголовок = НСтр("ru = 'УИП'");
	КонецЕсли;
	
	ОчиститьРеквизитыНеОтносящиесяКОперации();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога")
	   И ЗначениеЗаполнено(СтруктураДанные.НаименованиеПлательщикаПриПеречисленииНалогов) Тогда
		Объект.ТекстПлательщика = СтруктураДанные.НаименованиеПлательщикаПриПеречисленииНалогов;
	Иначе
		Объект.ТекстПлательщика = ?(
			ЗначениеЗаполнено(СтруктураДанные.ТекстКорреспондента),
			СтруктураДанные.ТекстКорреспондента,
			СтруктураДанные.НаименованиеПолное
		);
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(Объект.Дата) И Объект.Дата >= ПлатежиВБюджетКлиентСервер.НачалоПримененияИдентификатораПлатежа())
	 ИЛИ (НЕ ЗначениеЗаполнено(Объект.Дата) И ТекущаяДата() >= ПлатежиВБюджетКлиентСервер.НачалоПримененияИдентификатораПлатежа())
	 ИЛИ (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога")) Тогда
		Элементы.ИдентификаторПлатежа.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Авто;
		Элементы.ИдентификаторПлатежа.ПредупреждениеПриРедактировании = "";
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Оплата") Тогда
		Элементы.ИдентификаторПлатежа.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.ИдентификаторПлатежа.ПредупреждениеПриРедактировании = НСтр("ru = 'До 31.03.2014 идентификатор платежа используется только для платежей в бюджет'");
	КонецЕсли;
	
	СформироватьНазначениеПлатежа();
	
	// Заменим (добавим) УИН (уникальный идентификатор начисления)
	// С 01 января 2014 по 30 марта 2014 он указывается в назначении платежа
	ПлатежиВБюджетКлиентСервер.ЗаменитьВНазначенииПлатежаУИН(
		Объект.НазначениеПлатежа,
		Объект.ИдентификаторПлатежа,
		Объект.Дата,
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога")
	);
	
	ВидОперацииПриИзмененииФрагментНаСервере();
	ОбновитьЗаголовокПлательщика();
	ОбновитьЗаголовокПолучателя();
	ИзменитьОтображениеПодсказки(Элементы, Объект.ВидОперации, Не ЗначениеЗаполнено(Объект.Ссылка)И ИспользуетсяОтчетность);
	
КонецПроцедуры // ВидОперацииПриИзменении()

&НаСервере
Процедура ВидОперацииПриИзмененииФрагментНаСервере()
	
	ФормыДокументовДеньги.УстановитьВидимостьЭлементовВЗависимостиОтВидаОперации(ЭтаФорма);
	ДополнительныеДействияРасшифровкаПлатежа(Истина);
	ЗаполнитьРеквизитыПоВидуОперации();
	УстановитьСтатьюДДСПриСменеВидаОперации();
	
	// Код вида дохода
	НастроитьСписокВыбораКодВидаДохода();
	УстановитьВидимостьКодаВидаДохода(ЭтотОбъект);
	УстановитьВидимостьКодаВыплат(ЭтотОбъект);
	КодВидаДоходаПоУмолчанию();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении реквизита Контрагент.
// В процедуре устанавливаются реквизиты формы, относящиеся к контрагенту.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.ВалютаДокумента, Объект.ВидОперации);
	
	ВидКонтрагента = СтруктураДанные.ВидКонтрагента;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		ОчиститьКодВыплат();
		Объект.Договор = СтруктураДанные.Договор;
		Договор = Объект.Договор;
		Объект.РасшифровкаПлатежа.Очистить();
		Если ЗначениеЗаполнено(СтруктураДанные.СтатьяДДСПоУмолчанию) Тогда
			Объект.Статья = СтруктураДанные.СтатьяДДСПоУмолчанию;
		КонецЕсли;
	Иначе
		Объект.Договор = Договор; // Восстанавливаем автоматически очищенный договор.
	КонецЕсли;
	
	СпособЗаполненияСтавкиНДСДоИзменения = СпособЗаполненияСтавкиНДС;
	СпособЗаполненияСтавкиНДС = СтруктураДанные.СпособЗаполненияСтавкиНДС;
	Если СпособЗаполненияСтавкиНДСДоИзменения <> СпособЗаполненияСтавкиНДС 
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Оплата") Тогда 
		Объект.СтавкаНДС = РасчетыРаботаСФормамиВызовСервера.СтавкаНДСПоОрганизацииНалогообложениеНДСИСпособуЗаполнения(Объект.Организация, Объект.Дата, СпособЗаполненияСтавкиНДС);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ДоговорКредитаЗаймаПоУмолчанию") Тогда
		Объект.ДоговорКредитаЗайма = СтруктураДанные.ДоговорКредитаЗаймаПоУмолчанию;
		ОбработатьИзменениеДоговораКредитаИлиЗайма();
	КонецЕсли;
	
	Объект.СчетКонтрагента 	= СтруктураДанные.СчетКонтрагента;
	Объект.ИННПолучателя	= СтруктураДанные.ИННПолучателя;
	Объект.КПППолучателя	= СтруктураДанные.КПППолучателя;
	ЗаполнитьТекстПолучателя(СтруктураДанные);
	
	НазначениеПлатежа 		= СтруктураДанные.НазначениеПлатежа;
	
	ОбновитьЗаголовокПолучателя();
	ДополнительныеДействияРасшифровкаПлатежа();
	СуммаДокументаПриИзмененииФрагмент();
	КонтрагентПриИзмененииФрагментНаСервере();
	
КонецПроцедуры // КонтрагентПриИзменении()

&НаСервере
Процедура КонтрагентПриИзмененииФрагментНаСервере()
	
	СформироватьНазначениеПлатежа();
	ФормыДокументовДеньги.УстановитьСтатьиДДСВРасшифровкеПлатежа(ЭтотОбъект);
	УстановитьВидимостьКодаВидаДохода(ЭтотОбъект);
	УстановитьВидимостьКодаВыплат(ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении реквизита СчетКонтрагента.
// В процедуре устанавливаются реквизиты формы, относящиеся к счету контрагента.
//
&НаКлиенте
Процедура СчетКонтрагентаПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ЗарплатаСотруднику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Подотчетнику") Тогда
	
		СтруктураДанные = ПолучитьДанныеСчетКонтрагентаПриИзменении(Объект.Контрагент, Объект.СчетКонтрагента, Объект.ВидОперации);
	Иначе
		СтруктураДанные = ПолучитьДанныеСчетКонтрагентаПриИзменении(Объект.Контрагент, Объект.СчетКонтрагента, Объект.ВидОперации);
	КонецЕсли;
	
	Объект.КПППолучателя = СтруктураДанные.КПППолучателя;
	ЗаполнитьТекстПолучателя(СтруктураДанные);
	
	НазначениеПлатежа = СтруктураДанные.НазначениеПлатежа;
	СформироватьНазначениеПлатежа();
	
	ЗаполнитьРеквизитыПоВидуОперации();
	
КонецПроцедуры // СчетКонтрагентаПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита ИННПолучателя.
//
&НаКлиенте
Процедура ИННПолучателяПриИзменении(Элемент)
	ОбновитьЗаголовокПолучателя();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении реквизита КПППолучателя.
//
&НаКлиенте
Процедура КПППолучателяПриИзменении(Элемент)
	ОбновитьЗаголовокПолучателя();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении реквизита ТекстПолучателя.
//
&НаКлиенте
Процедура ТекстПолучателяПриИзменении(Элемент)
	ОбновитьЗаголовокПолучателя();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении реквизита ИННПлательщика.
//
&НаКлиенте
Процедура ИННПлательщикаПриИзменении(Элемент)
	ОбновитьЗаголовокПлательщика();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении реквизита КПППлательщика.
//
&НаКлиенте
Процедура КПППлательщикаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация)
	И НЕ ЗначениеЗаполнено(Объект.КПППлательщика)
	И Строка(Объект.ВидОперации) = "Перечисление в бюджет"
	И ЭтоФизЛицо Тогда
		Объект.КПППлательщика = 0;
	КонецЕсли;
	
	ОбновитьЗаголовокПлательщика();
	
КонецПроцедуры // КПППлательщикаПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита ТекстПлательщика.
//
&НаКлиенте
Процедура ТекстПлательщикаПриИзменении(Элемент)
	ОбновитьЗаголовокПлательщика();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении реквизита СуммаДокумента.
// В процедуре формируется реквизит НазначениеПлатежа.
//
&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ИсходнаяСуммаРавнаНулю = (Объект.СуммаДокумента = 0);
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДС);
	
	Объект.СуммаНДС = Объект.СуммаДокумента - (Объект.СуммаДокумента) / ((СтавкаНДС + 100) / 100);
	
	СформироватьНазначениеПлатежа(Истина);
	
	СуммаДокументаПриИзмененииФрагмент();
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита СтавкаНДС.
// В процедуре рассчитывается сумма НДС и формируется реквизит НазначениеПлатежа.
//
&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	СтруктураДанные = ПолучитьДанныеСтавкаНДСПриИзменении(Объект.СтавкаНДС);
	
	СтавкаНДС = СтруктураДанные.Ставка;
	БезНалогаНДС = СтруктураДанные.НеОблагается;
	
	Объект.СуммаНДС = Объект.СуммаДокумента - (Объект.СуммаДокумента) / ((СтавкаНДС + 100) / 100);
	
	СтавкаНДСПоУмолчанию =  Объект.СтавкаНДС;
	СтавкаНДСПоУмолчаниюЧисло = СтавкаНДС;
	
	СуммаДокументаПриИзмененииФрагмент();
	СформироватьНазначениеПлатежа(Истина);
	
КонецПроцедуры // СтавкаНДСПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита СуммаНДС.
// В процедуре формируется реквизит НазначениеПлатежа.
//
&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)
	
	СформироватьНазначениеПлатежа(Истина);
	
КонецПроцедуры // СуммаНДСПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита ВидПеречисленияВБюджет.
//
&НаКлиенте
Процедура ВидПеречисленияВБюджетПриИзменении(Элемент)
	
	НастроитьСписокВыбора(
		Элементы.ПоказательОснования,
		ПлатежиВБюджетКлиентСервер.ОснованияПлатежа(Объект.ВидПеречисленияВБюджет, Объект.Дата)
	);
	
	НастроитьСписокВыбора(
		Элементы.ПоказательТипа,
		ПлатежиВБюджетКлиентСервер.ТипыПлатежа(Объект.ВидПеречисленияВБюджет, Объект.Дата)
	);
	
	ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчанию();
	УстановитьВидимостьВЗависимостиОтВидаПеречисленияВБюджет(ЭтаФорма);
	
КонецПроцедуры // ВидПеречисленияВБюджетПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита СтатусСоставителя.
//
&НаКлиенте
Процедура СтатусСоставителяПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Объект.СтатусСоставителя)) Тогда
		Объект.СтатусСоставителя = "01";
	КонецЕсли;
		
КонецПроцедуры // СтатусСоставителяПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита ПоказательОснования.
//
&НаКлиенте
Процедура ПоказательОснованияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Объект.ПоказательОснования)) Тогда
		Объект.ПоказательОснования = "0";
	КонецЕсли;

КонецПроцедуры // ПоказательОснованияПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита ПоказательТипа.
//
&НаКлиенте
Процедура ПоказательТипаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Объект.ПоказательТипа)) Тогда
		Объект.ПоказательТипа = "0";
	КонецЕсли;
	
КонецПроцедуры // ПоказательТипаПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита ПоказательПериодаТаможенныйПлатеж.
//
&НаКлиенте
Процедура ПоказательПериодаТаможенныйПлатежПриИзменении(Элемент)
	
	Если Объект.ВидПеречисленияВБюджет <> ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж")
	   И НЕ ЗначениеЗаполнено(СокрЛП(Объект.ПоказательПериода)) Тогда
		Объект.ПоказательПериода = "0";
	КонецЕсли;
	
КонецПроцедуры // ПоказательПериодаТаможенныйПлатежПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита ПоказательПериодаИнойПлатеж.
//
&НаКлиенте
Процедура ПоказательПериодаИнойПлатежПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Объект.ПоказательПериода)) Тогда
		Объект.ПоказательПериода = "0";
	КонецЕсли;

КонецПроцедуры // ПоказательПериодаИнойПлатежПриИзменении()

&НаКлиенте
Процедура ОстатокВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетыСКонтрагентом(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокДенежныхСредствОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетДенежныеСредства(Объект.БанковскийСчет);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) > 13 Тогда
		
		СтрокаПоискаПоКБК = СтрЗаменить(ПараметрыПолученияДанных.СтрокаПоиска, " ", "");
		
		Если СтрДлина(СтрокаПоискаПоКБК) <= 20 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоискаПоКБК) Тогда
			
			// Строка поиска похожа на КБК. Код включает код подвида доходов.
			ДанныеВыбора = ДвиженияДенежныхСредствВызовСервера.ДанныеВыбораНалогаПоКБК(СтрокаПоискаПоКБК);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) > 13 Тогда
		
		СтрокаПоискаПоКБК = СтрЗаменить(ПараметрыПолученияДанных.СтрокаПоиска, " ", "");
		
		Если СтрДлина(СтрокаПоискаПоКБК) <= 20 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоискаПоКБК) Тогда
			
			// Строка поиска похожа на КБК. Код включает код подвида доходов.
			ДанныеВыбора = ДвиженияДенежныхСредствВызовСервера.ДанныеВыбораНалогаПоКБК(СтрокаПоискаПоКБК);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Налог) Тогда
		СформироватьНазначениеПлатежа();
		
		НастроитьСписокВыбора(
			Элементы.ПоказательОснования,
			ПлатежиВБюджетКлиентСервер.ОснованияПлатежа(Объект.ВидПеречисленияВБюджет, Объект.Дата)
		);
		
		НастроитьСписокВыбора(
			Элементы.ПоказательТипа,
			ПлатежиВБюджетКлиентСервер.ТипыПлатежа(Объект.ВидПеречисленияВБюджет, Объект.Дата)
		);
		
		ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчанию();
		УстановитьВидимостьВЗависимостиОтВидаПеречисленияВБюджет(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодБКПриИзменении(Элемент)
	КодБК = ПлатежиВБюджетКлиентСервер.ОставитьВСтрокеТолькоЦифры(Объект.КодБК);
	Объект.КодБК = КодБК;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "НачалоВыбора");
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбораДоговора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбораДоговора(Документ, Организация, Контрагент, Договор)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ДоговорСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта",Новый Структура("Владелец, Организация, ВидДоговора, ОповеститьОЗаписиДоговора",Объект.Контрагент,Объект.Организация,ВидДоговораПриСоздании(Объект.ВидОперации)), Элемент);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидДоговораПриСоздании(ВидОперации)
	Если ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога Тогда
		Возврат Перечисления.ВидыДоговоров.Прочее;
	Иначе
		Возврат Перечисления.ВидыДоговоров.СПоставщиком;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПодотчетникПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ЗарплатаСотруднику") Тогда
		Объект.Подразделение = РасчетыРаботаСФормамиВызовСервера.ПолучитьТекущееПодразделениеСотрудника(Объект.Подотчетник);
	КонецЕсли;
	
	ОбновитьДанныеПоФизЛицуНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Подотчетник.Пустая() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Сначала нужно выбрать подотчетника'"), ,
			"Объект.Подотчетник");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УправлениеНебольшойФирмойКлиент.ПриРегулированииПериодаРегистрации(ЭтотОбъект, Направление);
	УправлениеНебольшойФирмойКлиент.ПриИзмененииПериодаРегистрации(ЭтотОбъект);
	
КонецПроцедуры //ПериодРегистрацииРегулирование()

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		ДатаКалендаряПриОткрытии = Объект.ПериодРегистрации;
	Иначе
		ДатаКалендаряПриОткрытии = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ФормаКалендаря", ОбщегоНазначенияУНФКлиент.ПараметрыОткрытияФормыКалендаря(
		ДатаКалендаряПриОткрытии), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагентаРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент,
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ключ", Объект.Подотчетник);
	СтруктураПараметров.Вставить("НеобходимаОтметкаФизЛицо", Истина);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПослеЗаполнениеФизЛица", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.Сотрудники.Форма.ФормаЭлемента", СтруктураПараметров, ЭтотОбъект, , , ,
		ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаполнениеФизЛица(Параметры, ДополнительныеПараметры) Экспорт
	
	ОбновитьДанныеПоФизЛицуНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПлатежаПриИзменении(Элемент)
	
	ОбновитьТекстДекорацииНазначения();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеДоговораКредитаИлиЗайма()
	
	ФормыДокументовДеньги.ЗаполнитьИнформациюПоКредитуЗаймуНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКредитаПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговораКредитаИлиЗайма();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КодВыплат

&НаКлиентеНаСервереБезКонтекста
Функция ВозможноПеречислениеПособияНаКартуМир(ВидОперации, ВидКонтрагента, Контрагент)
	
	ВыплатаФизлицу = (ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Прочее")
		И Не Контрагент.Пустая() И ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.ФизическоеЛицо"));
		
	ВыплатаСотруднику = (ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ЗарплатаСотруднику")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Зарплата"));
	
	Возврат ВыплатаФизлицу
		Или ВыплатаСотруднику;
	
КонецФункции

#КонецОбласти

#Область КодВидаДохода

&НаСервере
Процедура КодВидаДоходаПоУмолчанию()
	
	Если ВозможноВзысканиеСПеречисленияФизлицу(
			Объект.Дата, Объект.ВидОперации, ВидКонтрагента, Объект.Контрагент) Тогда
		Если ПустаяСтрока(Объект.КодВидаДохода) Тогда
			Если ДвиженияДенежныхСредствКлиентСервер.ПеречислениеЗарплаты(Объект.ВидОперации) Тогда
				Объект.КодВидаДохода = "1";
			КонецЕсли;
		КонецЕсли;
	Иначе
		Объект.КодВидаДохода = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПрочиеВыплатыКонтрагентам(ВидОперации)
	
	ПрочиеВыплатыКонтрагентам =
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Прочее")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.НаРасходы")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПрочиеРасчеты");
		
	Возврат ПрочиеВыплатыКонтрагентам;
	
КонецФункции

&НаСервере
Процедура НастроитьСписокВыбораКодВидаДохода()
	
	СписокВыбора = Элементы.КодВидаДохода.СписокВыбора;
	СписокВыбора.Очистить();
	
	ПрочиеВыплатыКонтрагентам = ЭтоПрочиеВыплатыКонтрагентам(Объект.ВидОперации);
	
	Если ПрочиеВыплатыКонтрагентам Тогда
		СписокВыбора.Добавить("", НСтр("ru = 'не производится (это не доход физ.лица)'"));
	КонецЕсли;
	
	СписокВыбора.Добавить("1",
		НСтр("ru = '1 - разрешено, с ограничением по сумме'"));
	СписокВыбора.Добавить("2",
		НСтр("ru = '2 - запрещено'"));
	СписокВыбора.Добавить("3",
		НСтр("ru = '3 - разрешено без ограничений п. 2'"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВозможноВзысканиеСПеречисленияФизлицу(Знач Дата, ВидОперации, ВидКонтрагента, Контрагент)
	
	Дата = ?(Дата = '00010101', ТекущаяДатаСеанса(), Дата);
	
	Результат = Ложь;
	Если Не ДвиженияДенежныхСредствКлиентСервер.ДействуетУказаниеБанкаРоссии5286У(Дата) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПеречислениеСотруднику =
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ЗарплатаСотруднику")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Подотчетнику");
		
	ВыплатаВБанкПоВедомости =
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Зарплата");
	
	ПрочиеВыплатыКонтрагентам = ЭтоПрочиеВыплатыКонтрагентам(ВидОперации);
	
	КонтрагентФизическоеЛицо =
		НЕ Контрагент.Пустая()
		И ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.ФизическоеЛицо");
	
	Результат = ПеречислениеСотруднику
		ИЛИ ВыплатаВБанкПоВедомости
		ИЛИ ПрочиеВыплатыКонтрагентам И КонтрагентФизическоеЛицо;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьВидимостьКодаВидаДохода(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ВозможноВзысканиеСПеречисленияФизлицу = ВозможноВзысканиеСПеречисленияФизлицу(
		Объект.Дата,
		Объект.ВидОперации,
		Форма.ВидКонтрагента,
		Объект.Контрагент);
		
	Элементы.КодВидаДохода.Видимость = ВозможноВзысканиеСПеречисленияФизлицу;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьВидимостьКодаВыплат(Форма)
	
	ВозможноПеречислениеПособияНаКартуМир = ВозможноПеречислениеПособияНаКартуМир(
		Форма.Объект.ВидОперации, Форма.ВидКонтрагента, Форма.Объект.Контрагент);
	
	Форма.Элементы.КодВыплат.Видимость = ВозможноПеречислениеПособияНаКартуМир;
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСписокВыбора(Элемент, СписокДанных, РедактированиеОграничено = Ложь, Предупреждение = "")
	
	Элемент.СписокВыбора.Очистить();
	
	Элемент.РежимВыбораИзСписка = Истина;
	Элемент.КнопкаОчистки       = Ложь;
	Для каждого ЭлементДанных Из СписокДанных Цикл
		Элемент.СписокВыбора.Добавить(ЭлементДанных.Значение, ЭлементДанных.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФормуС2014Года()
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата)
	    ИЛИ Объект.Дата >= '20140101' Тогда // ОКТМО действует в любом случае с 01.01.2014
		Элементы.КодОКАТО.Заголовок = НСтр("ru = 'Код ОКТМО'");
		Элементы.КодОКАТО.Подсказка = НСтр("ru = 'Код ОКТМО - территории (населенного пункта), на которой мобилизуются средства'");
	Иначе
		Элементы.КодОКАТО.Заголовок = НСтр("ru = 'Код ОКАТО'");
		Элементы.КодОКАТО.Подсказка = НСтр("ru = 'Код ОКАТО сборщика платежей'");
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(Объект.Дата) И Объект.Дата >= ПлатежиВБюджетКлиентСервер.НачалоПримененияИдентификатораПлатежа())
	 ИЛИ (НЕ ЗначениеЗаполнено(Объект.Дата) И ТекущаяДата() >= ПлатежиВБюджетКлиентСервер.НачалоПримененияИдентификатораПлатежа()) Тогда
		Элементы.ИдентификаторПлатежа.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Авто;
		Элементы.ИдентификаторПлатежа.ПредупреждениеПриРедактировании = "";
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата Тогда
		Элементы.ИдентификаторПлатежа.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.ИдентификаторПлатежа.ПредупреждениеПриРедактировании = НСтр("ru = 'До 31.03.2014 идентификатор платежа используется только для платежей в бюджет'");
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога Тогда
		Элементы.ИдентификаторПлатежа.Заголовок = НСтр("ru = 'УИН'");
	Иначе
		Элементы.ИдентификаторПлатежа.Заголовок = НСтр("ru = 'УИП'");
	КонецЕсли;
	
	НастроитьСписокВыбора(
		Элементы.СтатусСоставителя,
		ПлатежиВБюджетКлиентСервер.СтатусыПлательщика(Объект.Дата));
	
	НастроитьСписокВыбора(
		Элементы.ПоказательОснования,
		ПлатежиВБюджетКлиентСервер.ОснованияПлатежа(Объект.ВидПеречисленияВБюджет, Объект.Дата));
		
	НастроитьСписокВыбора(
		Элементы.ПоказательТипа,
		ПлатежиВБюджетКлиентСервер.ТипыПлатежа(Объект.ВидПеречисленияВБюджет, Объект.Дата));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФормуС2015Года()
	
	Если ДатаДокумента >= '20150101'
		ИЛИ Объект.Дата >= '20150101' Тогда // Приказ Минфина №126н от 30.10.2014.
		Элементы.ПоказательТипа.Видимость = Ложь;
		Объект.ПоказательТипа = "";
	Иначе
		Элементы.ПоказательТипа.Видимость = Истина;
		Объект.ПоказательТипа = "0";
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет текст плательщика.
//
Процедура ЗаполнитьТекстПлательщика(СтруктураДанные)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога")
		И ЗначениеЗаполнено(СтруктураДанные.НаименованиеПлательщикаПриПеречисленииНалогов) Тогда
		
		Объект.ТекстПлательщика = СтруктураДанные.НаименованиеПлательщикаПриПеречисленииНалогов;
		
	ИначеЕсли ПустаяСтрока(СтруктураДанные.ТекстКорреспондента) Тогда
		
		Объект.ТекстПлательщика = СтруктураДанные.НаименованиеПолное;
		Если ЗначениеЗаполнено(СтруктураДанные.ТекстБанкДляРасчетов) Тогда
			Объект.ТекстПлательщика = Объект.ТекстПлательщика + СтруктураДанные.ТекстБанкДляРасчетов;
		КонецЕсли;
		
	Иначе
		
		Объект.ТекстПлательщика = СтруктураДанные.ТекстКорреспондента;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТекстПлательщика()

// Процедура заполняет текст получателя.
//
Процедура ЗаполнитьТекстПолучателя(СтруктураДанные)
	
	Если ПустаяСтрока(СтруктураДанные.ТекстКорреспондента) Тогда
		
		Объект.ТекстПолучателя = СтруктураДанные.НаименованиеПолное;
		Если ЗначениеЗаполнено(СтруктураДанные.ТекстБанкДляРасчетов) Тогда
			Объект.ТекстПолучателя = Объект.ТекстПолучателя + СтруктураДанные.ТекстБанкДляРасчетов;
		КонецЕсли;
		
	Иначе
		
		Объект.ТекстПолучателя = СтруктураДанные.ТекстКорреспондента;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТекстПолучателя()

// Процедура вызывает обработку заполнения документа по основанию.
//
&НаСервере
Процедура ЗаполнитьПоДокументу(ДокОснование)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(ДокОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	ВидОперации = Объект.ВидОперации;
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") 
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		СтруктураДанные = ПолучитьДанныеДокументОснованиеПриИзменении(Объект.ДокументОснование);
		НомерВходящегоДокумента = СтруктураДанные.НомерВходящегоДокумента;
		ДатаВходящегоДокумента = СтруктураДанные.ДатаВходящегоДокумента;
	Иначе
		НомерВходящегоДокумента = "";
		ДатаВходящегоДокумента = '00010101';
	КонецЕсли;
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РасходДСПлан") Тогда
		Для Каждого ТекущаяСтрока Из Объект.РасшифровкаПлатежа Цикл
			ТекущаяСтрока.ДокументПланирования = Объект.ДокументОснование;
		КонецЦикла;
	КонецЕсли;
	
	Контрагент = Объект.Контрагент;
	Договор = Объект.Договор;
	
	УстановитьВидимостьПоДаннымКонтрагента();
	
КонецПроцедуры // ЗаполнитьПоДокументу()

// Процедура вызывает процедуру заполнения документа по основанию.
// и устанавливает доступность реквизитов после заполнения
//
&НаКлиенте
Процедура ЗаполнитьПоДокументуИУстановитьДоступность()
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоДокументуИУстановитьДоступностьЗавершение", ЭтотОбъект), НСтр(
		"ru = 'Документ будет очищен и заполнен по ""Основанию"". Продолжить выполнение операции?'"),
		РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДокументу(Объект.ДокументОснование);
		ВидОперацииПриИзменении(Неопределено);
		УстановитьДоступностьРеквизитовПеречисленияНалогов();
	Иначе
		УстановитьВидимостьПоДаннымКонтрагента();
	КонецЕсли;

КонецПроцедуры

// Процедура выполняет необходимые действия формирования текста назначения
// платежа.
//
&НаСервере
Процедура СформироватьНазначениеПлатежа(ИзменениеСуммы = Ложь)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьНазначениеПлатежа(НазначениеПлатежа, ИзменениеСуммы);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ОбновитьТекстДекорацииНазначенияНаСервере();
	
КонецПроцедуры // СформироватьНазначениеПлатежа()

// Процедура выполняет необходимые действия по формированию реквизита
// ПоказательПериода.
//
&НаКлиенте
Процедура УстановитьПоказательПериода()
	
	Если Объект.ВидПеречисленияВБюджет = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж") Тогда
		Объект.ПоказательПериода = "";
	ИначеЕсли ПериодичностьУплаты = "0" Тогда
		Объект.ПоказательПериода = "0";
	ИначеЕсли ПериодичностьУплаты = "-" Тогда
		Объект.ПоказательПериода = Формат(ДатаПлатежа, "ДФ=dd.MM.yyyy");
	Иначе
		Объект.ПоказательПериода = Лев(ПериодичностьУплаты, 2)
								 + "."
								 + Формат(ПериодПлатежа, "ЧЦ=2; ЧН=; ЧВН=")
								 + "."
								 + Формат(ГодПлатежа, "ЧЦ=4; ЧГ=");
	КонецЕсли;
	
КонецПроцедуры // УстановитьПоказательПериода()

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДокументОснованиеПриИзменении(ДокументОснование)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("ДатаВходящегоДокумента",  ДокументОснование.ДатаВходящегоДокумента);
	СтруктураДанные.Вставить("НомерВходящегоДокумента", ДокументОснование.НомерВходящегоДокумента);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДокументОснованиеПриИзменении()

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация, БанковскийСчет, Контрагент, СчетКонтрагента, ВидОперации, Период)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("Компания", 				Константы.УчетПоКомпании.Компания(Организация));
	СтруктураДанные.Вставить("НаименованиеПолное",		Организация.НаименованиеПолное);
	СтруктураДанные.Вставить("НаименованиеПлательщикаПриПеречисленииНалогов", Организация.НаименованиеПлательщикаПриПеречисленииНалогов);
	Если Период >= '20140101' Тогда // ОКТМО действует в любом случае с 01.01.2014
		СтруктураДанные.Вставить("КодОКАТО", 			Организация.КодПоОКТМО);
	Иначе
		СтруктураДанные.Вставить("КодОКАТО", 			Организация.КодПоОКАТО);
	КонецЕсли;
	
	//  Банковский счет организации
	ЗначениеДляСтруктуры	= ?(БанковскийСчет.Владелец = Организация, БанковскийСчет, Организация.БанковскийСчетПоУмолчанию);
	СтруктураДанные.Вставить("БанковскийСчет", 			ЗначениеДляСтруктуры);
	НеобходимостьУказанияКПППлательщика = ПолучитьНеобходимостьУказанияКПП(ЗначениеДляСтруктуры, ВидОперации);
	
	//  Валюта документа
	ЗначениеДляСтруктуры	= ?(ЗначениеЗаполнено(ЗначениеДляСтруктуры), ЗначениеДляСтруктуры.ВалютаДенежныхСредств, Константы.НациональнаяВалюта.Получить());
	СтруктураДанные.Вставить("ВалютаДокумента", 		ЗначениеДляСтруктуры);
	
	//  Банковский счет контрагента
	ЗначениеДляСтруктуры	= ?(ЗначениеЗаполнено(СчетКонтрагента) И ЗначениеДляСтруктуры = СчетКонтрагента.ВалютаДенежныхСредств, СчетКонтрагента, Справочники.БанковскиеСчета.ПустаяСсылка());
	СтруктураДанные.Вставить("СчетКонтрагента", 		ЗначениеДляСтруктуры);
	НеобходимостьУказанияКПППолучателя = ПолучитьНеобходимостьУказанияКПП(ЗначениеДляСтруктуры, ВидОперации);
	
	СтруктураДанные.Вставить("ТекстКорреспондента", 	Организация.БанковскийСчетПоУмолчанию.ТекстКорреспондента);
	СтруктураДанные.Вставить("ИННПлательщика", 			Организация.ИНН);
	СтруктураДанные.Вставить("КПППлательщика", 			?(НеобходимостьУказанияКПППлательщика, Организация.КПП, ""));
	СтруктураДанные.Вставить("ЭтоФизЛицо", 				Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	
	СтруктураДанные.Вставить("КПППолучателя",			?(НеобходимостьУказанияКПППолучателя, Контрагент.КПП, ""));
	
	СтруктураДанные.Вставить("ТекстБанкДляРасчетов", 	Документы.ПлатежноеПоручение.ПолучитьТекстБанкДляРасчетов(СтруктураДанные.БанковскийСчет));
	
	ОбновитьВидимостьИОстаткиДС(СтруктураДанные.БанковскийСчет);
	Объект.СтавкаНДС = РасчетыРаботаСФормамиВызовСервера.СтавкаНДСПоОрганизацииНалогообложениеНДСИСпособуЗаполнения(Объект.Организация, Объект.Дата, СпособЗаполненияСтавкиНДС);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

// Получает набор данных с сервера для процедуры СчетОрганизацииПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеСчетОрганизацииПриИзменении(Организация, СчетОрганизации, ВалютаПередИзменением, Дата, ВидОперации)
	
	НеобходимостьУказанияКПП = ПолучитьНеобходимостьУказанияКПП(СчетОрганизации, ВидОперации);
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("ТекстКорреспондента", СчетОрганизации.ТекстКорреспондента);
	СтруктураДанные.Вставить("НаименованиеПолное", ?(ЗначениеЗаполнено(СчетОрганизации), СчетОрганизации.Владелец.НаименованиеПолное, ""));
	СтруктураДанные.Вставить("НаименованиеПлательщикаПриПеречисленииНалогов", ?(ЗначениеЗаполнено(СчетОрганизации), СчетОрганизации.Владелец.НаименованиеПлательщикаПриПеречисленииНалогов, ""));
	СтруктураДанные.Вставить("ВалютаДенежныхСредств", СчетОрганизации.ВалютаДенежныхСредств);
	СтруктураДанные.Вставить("КПППлательщика", ?(НеобходимостьУказанияКПП, Организация.КПП, ""));
	
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
			Дата,
			Новый Структура("Валюта", СчетОрганизации.ВалютаДенежныхСредств)
		)
	);
	
	СтруктураДанные.Вставить(
		"ВалютаКурсКратностьПередИзменением",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
			Дата,
			Новый Структура("Валюта", ВалютаПередИзменением)
		)
	);
	
	СтруктураДанные.Вставить("ТекстБанкДляРасчетов", Документы.ПлатежноеПоручение.ПолучитьТекстБанкДляРасчетов(СчетОрганизации));
	
	ОбновитьВидимостьИОстаткиДС(СчетОрганизации);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеСчетОрганизацииПриИзменении()

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	РазностьДат = ДокументыУНФ.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
		
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", РазностьДат);
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Получает необходимость указания КПП.
//
&НаСервереБезКонтекста
Функция ПолучитьНеобходимостьУказанияКПП(СчетКонтрагента, ВидОперации)
	
	Если ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога Тогда
		НеобходимостьУказанияКПП = Истина;
	Иначе
		Если СчетКонтрагента.ВариантУказанияКПП = Перечисления.ВариантыУказанияКПП.ВоВсехПлатежныхПоручениях Тогда
			НеобходимостьУказанияКПП = Истина;
		Иначе
			НеобходимостьУказанияКПП = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НеобходимостьУказанияКПП;

КонецФункции // ПолучитьНеобходимостьУказанияКПП()

// Получает договор по умолчанию в зависимости от способа ведения расчетов.
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Знач ПолучательПлатежа, ВалютаДокумента, ВидОперации)
	
	ЭтоРасчетыССотрудником = (ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ЗарплатаСотруднику ИЛИ ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Подотчетнику);
	
	Если ЭтоРасчетыССотрудником И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПолучательПлатежа, "ФизЛицо") Тогда
		ПолучательПлатежа = ПолучательПлатежа.ФизЛицо;
	КонецЕсли;
	
	СчетКонтрагента = ДвижениеДенежныхСредствСервер.ПолучитьБанковскийСчетКонтрагентаПоВалюте(ПолучательПлатежа, ВалютаДокумента);
	
	НеобходимостьУказанияКПП = ПолучитьНеобходимостьУказанияКПП(СчетКонтрагента, ВидОперации);
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("НаименованиеПолное", 	?(ЭтоРасчетыССотрудником, ПолучательПлатежа.Наименование, ПолучательПлатежа.НаименованиеПолное));
	СтруктураДанные.Вставить("СчетКонтрагента", 	СчетКонтрагента);
	СтруктураДанные.Вставить("ИННПолучателя", 		ПолучательПлатежа.ИНН);
	СтруктураДанные.Вставить("КПППолучателя", 		?(НеобходимостьУказанияКПП И НЕ ЭтоРасчетыССотрудником, ПолучательПлатежа.КПП, ""));
	СтруктураДанные.Вставить("НазначениеПлатежа",	ПолучательПлатежа.БанковскийСчетПоУмолчанию.ТекстНазначения);
	СтруктураДанные.Вставить("ТекстКорреспондента",	ПолучательПлатежа.БанковскийСчетПоУмолчанию.ТекстКорреспондента);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.РасчетыПоКредитам Тогда
		ДоговорКредитаЗаймаПоУмолчанию = ПолучитьДоговорКредитаЗаймаПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
		СтруктураДанные.Вставить(
			"ДоговорКредитаЗаймаПоУмолчанию",
			ДоговорКредитаЗаймаПоУмолчанию
		);
	КонецЕсли;
	
	Если ЭтоРасчетыССотрудником Тогда
		СтруктураДанные.Вставить("СтатьяДДСПоУмолчанию", Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());
		СтруктураДанные.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Иначе
		СтруктураДанные.Вставить("СтатьяДДСПоУмолчанию", ПолучательПлатежа.СтатьяДДСПоУмолчанию);
		ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, ПолучательПлатежа, Объект.Организация);
		СтруктураДанные.Вставить("Договор", ДоговорПоУмолчанию);
		ОбновитьВидимостьИОстаткиВзаиморасчетов();
		УстановитьВидимостьПоДаннымКонтрагента();
	КонецЕсли;
	СтруктураДанные.Вставить(
		"СпособЗаполненияСтавкиНДС",
		Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоДоговору(
			СтруктураДанные.Договор));
	
	СтруктураДанные.Вставить("ТекстБанкДляРасчетов",  Документы.ПлатежноеПоручение.ПолучитьТекстБанкДляРасчетов(СчетКонтрагента));
	СтруктураДанные.Вставить("ВидКонтрагента", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ВидКонтрагента"));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеСчетКонтрагентаПриИзменении(Контрагент, СчетКонтрагента, ВидОперации)
	
	НеобходимостьУказанияКПП = ПолучитьНеобходимостьУказанияКПП(СчетКонтрагента, ВидОперации);
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("НазначениеПлатежа", СчетКонтрагента.ТекстНазначения);
	СтруктураДанные.Вставить("ТекстКорреспондента", СчетКонтрагента.ТекстКорреспондента);
	СтруктураДанные.Вставить("КПППолучателя", ?(НеобходимостьУказанияКПП, Контрагент.КПП, ""));
	
	Если ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ЗарплатаСотруднику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Подотчетнику Тогда
		
		Если ЗначениеЗаполнено(СчетКонтрагента.Владелец) Тогда
			СтруктураДанные.Вставить("НаименованиеПолное", СчетКонтрагента.Владелец.Наименование);
		Иначе
			СтруктураДанные.Вставить("НаименованиеПолное", Контрагент.НаименованиеПолное);
		КонецЕсли;
		
	Иначе
		Если ЗначениеЗаполнено(СчетКонтрагента.Владелец) Тогда
			СтруктураДанные.Вставить("НаименованиеПолное", СчетКонтрагента.Владелец.НаименованиеПолное);
		Иначе
			СтруктураДанные.Вставить("НаименованиеПолное", Контрагент.НаименованиеПолное);
		КонецЕсли;
	КонецЕсли;
	СтруктураДанные.Вставить("ТекстБанкДляРасчетов",  Документы.ПлатежноеПоручение.ПолучитьТекстБанкДляРасчетов(СчетКонтрагента));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеСчетКонтрагентаПриИзменении()

// Получает набор данных с сервера для процедуры СтавкаНДСПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеСтавкаНДСПриИзменении(СтавкаНДС)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("НеОблагается", СтавкаНДС.НеОблагается);
	СтруктураДанные.Вставить("Ставка", СтавкаНДС.Ставка);	
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеСтавкаНДСПриИзменении()

// Заполняет реквизиты платежа в бюджет по умолчанию.
//
&НаКлиенте
Процедура ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчанию()
	
	Если Объект.ВидПеречисленияВБюджет = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж") Тогда
		Если ЗначениеЗаполнено(Объект.Налог) И Объект.Налог = ПредопределенноеЗначение("Справочник.ВидыНалогов.НДФЛСотрудники") Тогда
			Объект.СтатусСоставителя = "02";
		ИначеЕсли ЭтоФизЛицо Тогда
			Если ПлатежиВБюджетКлиентСервер.ДействуетПриказ2020_199н_Отложенный(Объект.Дата) Тогда
				Объект.СтатусСоставителя = "13";
			Иначе
				Объект.СтатусСоставителя = "09";
			КонецЕсли;
		Иначе
			Объект.СтатусСоставителя = "01";
		КонецЕсли;
		Объект.ПоказательОснования = Элементы.ПоказательОснования.СписокВыбора[0].Значение;
		Объект.ПоказательПериода   = "МС." + Формат(Месяц(Объект.Дата), "ЧЦ=2; ЧВН=") + "." + Формат(Год(Объект.Дата), "ЧГ=");
		ПериодичностьУплаты = "МС";
		ГодПлатежа = Год(Объект.Дата);
		ПериодПлатежа = Месяц(Объект.Дата);
		Объект.ПоказательНомера = "";
		Объект.ПоказательДаты = "";
	ИначеЕсли Объект.ВидПеречисленияВБюджет = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж") Тогда
		Объект.СтатусСоставителя   = "06";
		Объект.ПоказательОснования = Элементы.ПоказательОснования.СписокВыбора[0].Значение;
		Объект.ПоказательПериода   = "";
		Объект.ПоказательНомера    = "";
		Объект.ПоказательДаты = "";
		ПериодичностьУплаты = "0";
		ГодПлатежа = 0;
	Иначе
		Объект.СтатусСоставителя   = "08";
		Объект.ПоказательОснования = "0";
		Объект.ПоказательПериода   = "0";
		Объект.ПоказательНомера    = "";
		Объект.ПоказательДаты = "";
		ПериодичностьУплаты = "0";
		ГодПлатежа = 0;
	КонецЕсли;
	
	Если ДатаДокумента >= '20150101'
	 ИЛИ Объект.Дата >= '20150101' Тогда // Приказ Минфина №126н от 30.10.2014.
		Объект.ПоказательТипа = "";
	Иначе
		Объект.ПоказательТипа = "0";
	КонецЕсли;
	
	УстановитьПоказательПериода();
	УстановитьДоступностьРеквизитовПеречисленияНалогов();
	
КонецПроцедуры // ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчанию()

// Устанавливает текущую страницу в зависимости от вида перечисления в бюджет.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьВЗависимостиОтВидаПеречисленияВБюджет(Форма)
	Элементы =  Форма.Элементы;
	Элементы.НалоговыйПлатеж.Видимость = Ложь;
	Элементы.ТаможенныйПлатеж.Видимость = Ложь;
	Элементы.ИнойПлатеж.Видимость = Ложь;
	
	Если Форма.Объект.ВидПеречисленияВБюджет = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж") Тогда
		Элементы.НалоговыйПлатеж.Видимость = Истина;
	ИначеЕсли Форма.Объект.ВидПеречисленияВБюджет = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж") Тогда
		Элементы.ТаможенныйПлатеж.Видимость = Истина;
	Иначе
		Элементы.ИнойПлатеж.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры // УстановитьТекущуюСтраницуВЗависимостиОтВидаПеречисленияВБюджет()

&НаСервере
Процедура ОбновитьВидимостьИОстаткиВзаиморасчетов()
	
	Элементы.ОстатокВзаиморасчетов.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Контрагент);

	Если НЕ Элементы.ОстатокВзаиморасчетов.Видимость Тогда
		// Только для новых объектов
		Элементы.Контрагент.АвтоМаксимальнаяШирина = Истина;
		Возврат;
	КонецЕсли;
	
	Элементы.Контрагент.АвтоМаксимальнаяШирина = Ложь;
	Элементы.Контрагент.МаксимальнаяШирина = 22;
	Элементы.ОстатокВзаиморасчетов.Заголовок = РаботаСКонтрагентамиУНФ.ЗаголовокНадписиВзаиморасчетов(Объект.Контрагент);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИОстаткиДС(БанковскийСчет = Неопределено)
	
	Если БанковскийСчет = Неопределено Тогда
		ТекущийБанковскийСчет = Объект.БанковскийСчет;
	Иначе
		ТекущийБанковскийСчет = БанковскийСчет;
	КонецЕсли;
	
	Элементы.ОстатокДенежныхСредств.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(ТекущийБанковскийСчет);

	Если НЕ Элементы.ОстатокДенежныхСредств.Видимость Тогда
		Элементы.СчетОрганизации.АвтоМаксимальнаяШирина = Истина;
		// Только для новых объектов
		Возврат;
	КонецЕсли;
	
	Элементы.СчетОрганизации.АвтоМаксимальнаяШирина = Ложь;
	Элементы.СчетОрганизации.МаксимальнаяШирина = 22;
	Элементы.ОстатокДенежныхСредств.Заголовок = ДвиженияДенежныхСредствВызовСервера.ЗаголовокНадписиОстатковДС(ТекущийБанковскийСчет, Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокОчередностьПлатежа()
	
	Элементы.ОчередностьПлатежа.СписокВыбора.Добавить(1, НСтр("ru = '1 - Платежи по исполнительным документам: алименты и др.'"));
	Элементы.ОчередностьПлатежа.СписокВыбора.Добавить(2, НСтр("ru = '2 - Платежи по исполнительным документам: оплата труда и др.'"));
	Элементы.ОчередностьПлатежа.СписокВыбора.Добавить(3, НСтр("ru = '3 - Оплата труда, платежи по поручениям контролирующих органов'"));
	Элементы.ОчередностьПлатежа.СписокВыбора.Добавить(4, НСтр("ru = '4 - Платежи по исполнительным документам прочие'"));
	Элементы.ОчередностьПлатежа.СписокВыбора.Добавить(5, НСтр("ru = '5 - Прочие платежи (в т.ч. налоги и взносы)'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКодВыплат()
	
	Если Не ВозможноПеречислениеПособияНаКартуМир(Объект.ВидОперации, ВидКонтрагента, Объект.Контрагент) Тогда
		Объект.КодВыплат = "";
	КонецЕсли;
	
КонецПроцедуры

// Процедура очищает реквизиты, которые ранее могли быть заполнены, но не
// относятся к текущей операции.
//
&НаКлиенте
Процедура ОчиститьРеквизитыНеОтносящиесяКОперации()
	
	ОчиститьКодВыплат();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Оплата")
	 ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Покупателю") Тогда
	 	Объект.Контрагент = Неопределено;
		Объект.СчетКонтрагента = Неопределено;
	 	Объект.Корреспонденция = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Объект.Подразделение = Неопределено;
		Объект.НаправлениеДеятельности = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Зарплата") Тогда
		Объект.ПериодРегистрации = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.Договор = Неопределено;
		Объект.СчетКонтрагента = Неопределено;
		Объект.Подразделение = Неопределено;
		Объект.СтавкаНДС = Неопределено;
		Объект.СуммаНДС = 0;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Если НЕ ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов Тогда
			Объект.НаправлениеДеятельности = Неопределено;
		КонецЕсли;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.РасшифровкаПлатежа.Очистить();
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Прочее")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПереводНаДругойСчет") 
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ЛичныеСредстваПредпринимателя") Тогда
		Объект.ПериодРегистрации = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.Договор = Неопределено;
		Объект.СчетКонтрагента = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.СтавкаНДС = Неопределено;
		Объект.СуммаНДС = 0;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.НаРасходы") Тогда
		Объект.ПериодРегистрации = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.Договор = Неопределено;
		Объект.СчетКонтрагента = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.СтавкаНДС = Неопределено;
		Объект.СуммаНДС = 0;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Подотчетнику") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.Договор = Неопределено;
		Объект.СчетКонтрагента = Неопределено;
		Объект.Подразделение = Неопределено;
		Объект.НаправлениеДеятельности = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.СтавкаНДС = Неопределено;
		Объект.СуммаНДС = 0;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ЗарплатаСотруднику") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.Договор = Неопределено;
		Объект.СчетКонтрагента = Неопределено;
		Объект.Подразделение = Неопределено;
		Объект.НаправлениеДеятельности = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.СтавкаНДС = Неопределено;
		Объект.СуммаНДС = 0;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Если НЕ ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов Тогда
			Объект.НаправлениеДеятельности = Неопределено;
		КонецЕсли;
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПрочиеРасчеты") Тогда
		Объект.ПериодРегистрации = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.Договор = Неопределено;
		Объект.СчетКонтрагента = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.СтавкаНДС = Неопределено;
		Объект.СуммаНДС = 0;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Объект.РасшифровкаПлатежа.Очистить();
		Объект.РасшифровкаПлатежа.Добавить();
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога") Тогда
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Объект.ПериодРегистрации = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.СтавкаНДС = Неопределено;
		Объект.СуммаНДС = 0;
		Объект.ДоговорКредитаЗайма = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.РасчетыПоКредитам") Тогда
		Объект.ПериодРегистрации = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.Договор = Неопределено;
		Объект.СчетКонтрагента = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.СтавкаНДС = Неопределено;
		Объект.СуммаНДС = 0;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Объект.РасшифровкаПлатежа.Очистить();
		Объект.РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	Корреспонденция = Объект.Корреспонденция;
	
КонецПроцедуры // ОчиститьРеквизитыНеОтносящиесяКОперации()

// Процедура устанавливает устанавливает видимость реквизитов в зависимости от корреспонденции.
//
&НаСервере
Процедура УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(ОчиститьАналитику = Ложь)
	
	ФормыДокументовДеньги.УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(ЭтаФорма, ОчиститьАналитику)
	
КонецПроцедуры

// Процедура обработки изменения поля Вид операции на сервере.
//
&НаСервере
Процедура УстановитьСтатьюДДСПриСменеВидаОперации()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Покупателю
		И (Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам
		ИЛИ Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее
		ИЛИ Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей) Тогда
		Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата
		И (Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей
		ИЛИ Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее
		ИЛИ Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам) Тогда
		Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
	ИначеЕсли (Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей
		ИЛИ Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам) Тогда
		Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
	КонецЕсли;
	
КонецПроцедуры // УстановитьСтатьюДДСПриСменеВидаОперации()

// Получает структуру параметров формы выбора договора контрагента.
//
&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор, ВидОперации)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыПоВидуОперации()
	
	Если ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата Тогда
		ДополнительныеДействияРасшифровкаПлатежа(Истина);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПереводНаДругойСчет ИЛИ ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ЛичныеСредстваПредпринимателя Тогда
		Объект.ИННПолучателя = Объект.Организация.ИНН;
		Объект.КПППолучателя = Объект.Организация.КПП;
		СтруктураДанные = ПолучитьДанныеСчетКонтрагентаПриИзменении(Объект.Организация, Объект.БанковскийСчет, Объект.ВидОперации);
		ЗаполнитьТекстПолучателя(СтруктураДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоФизЛицуНаСервере(ПриИзменении = Ложь)
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийПлатежноеПоручение.ЗарплатаСотруднику
		 И Объект.ВидОперации <> Перечисления.ВидыОперацийПлатежноеПоручение.Подотчетнику Тогда
		 
		Элементы.СчетКонтрагента.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		Физлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		Возврат;
		
	КонецЕсли;
	
	Если ПриИзменении И Объект.Подотчетник.Физлицо <> Физлицо Тогда
		
		СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Подотчетник, Объект.ВалютаДокумента, Объект.ВидОперации);
		
		Объект.СчетКонтрагента 	= СтруктураДанные.СчетКонтрагента;
		Объект.ИННПолучателя	= СтруктураДанные.ИННПолучателя;
		Объект.КПППолучателя	= СтруктураДанные.КПППолучателя;
		ЗаполнитьТекстПолучателя(СтруктураДанные);
		
		НазначениеПлатежа 		= СтруктураДанные.НазначениеПлатежа;
		
		СформироватьНазначениеПлатежа();
		
	КонецЕсли;
	
	Физлицо = Объект.Подотчетник.Физлицо;
	
	Элементы.СчетКонтрагента.Доступность = ЗначениеЗаполнено(Объект.Подотчетник) И ЗначениеЗаполнено(Физлицо);
	Элементы.СчетКонтрагента.Видимость = ЗначениеЗаполнено(Объект.Подотчетник);
	
	Если ЗначениеЗаполнено(Объект.Подотчетник) Тогда
		Элементы.СчетКонтрагента.ОтображениеПодсказки = ?(ЗначениеЗаполнено(Физлицо), ОтображениеПодсказки.Нет, ОтображениеПодсказки.ОтображатьСнизу); 
	КонецЕсли;
	
	ОбновитьЗаголовкиСворачиваемыхГруппНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокПолучателя()
	
	ЗаголовокПолучателя = ПолучитьЗаголовокПлательщикаПолучателя(Объект.ИННПолучателя, Объект.КПППолучателя, Объект.ТекстПолучателя, Истина, Элементы.КПППолучателя.Видимость);
	Элементы.ИННКПППолучателяТекст.Заголовок = ЗаголовокПолучателя;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокПлательщика()
	
	ЗаголовокПлательщика = ПолучитьЗаголовокПлательщикаПолучателя(Объект.ИННПлательщика, Объект.КПППлательщика, Объект.ТекстПлательщика, Ложь, Элементы.КПППлательщика.Видимость);
	Элементы.ИННКПППлательщикаТекст.Заголовок = ЗаголовокПлательщика;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовкиСворачиваемыхГруппНаСервере()
	
	ЗаголовокПолучателя = ПолучитьЗаголовокПлательщикаПолучателя(Объект.ИННПолучателя, Объект.КПППолучателя, Объект.ТекстПолучателя, Истина, Элементы.КПППолучателя.Видимость);
	ЗаголовокПлательщика = ПолучитьЗаголовокПлательщикаПолучателя(Объект.ИННПлательщика, Объект.КПППлательщика, Объект.ТекстПлательщика, Ложь, Элементы.КПППлательщика.Видимость);
	Элементы.ИННКПППолучателяТекст.Заголовок = ЗаголовокПолучателя;
	Элементы.ИННКПППлательщикаТекст.Заголовок = ЗаголовокПлательщика;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекстДекорацииНазначения()
	
	ТекстЗаголовка = ПолучитьТекстДекорацииНазначения(Объект.НазначениеПлатежа);
	Элементы.ДекорацияДлинаНазначенияПлатежа.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекстДекорацииНазначенияНаСервере()
	
	ТекстЗаголовка = ПолучитьТекстДекорацииНазначения(Объект.НазначениеПлатежа);
	Элементы.ДекорацияДлинаНазначенияПлатежа.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗаголовокПлательщикаПолучателя(Знач ИНН, Знач КПП, Знач Текст, ЭтоГруппаПолучателя, КППИспользуется = Истина)
	
	Если КППИспользуется Тогда
		Шаблон = НСтр("ru='%1: %2 / %3 - %4'");
	Иначе
		Шаблон = НСтр("ru='%1: %2 - %4'");
	КонецЕсли;
	
	Если ЭтоГруппаПолучателя Тогда
		НаименованиеГруппы = НСтр("ru='Получатель'");
		ПустойТекст = НСтр("ru='<Текст получателя>'");
	Иначе
		НаименованиеГруппы = НСтр("ru='Плательщик'");
		ПустойТекст = НСтр("ru='<Текст плательщика>'");
	КонецЕсли;
	
	ИНН = ?(ЗначениеЗаполнено(ИНН), ИНН, НСтр("ru='<ИНН>'"));
	КПП = ?(ЗначениеЗаполнено(КПП), КПП, НСтр("ru='<КПП>'"));
	Текст = ?(ЗначениеЗаполнено(Текст), Текст, ПустойТекст);
	
	ТекстЗаголовка = СтрШаблон(Шаблон, НаименованиеГруппы, ИНН, КПП, Текст);
	Возврат СтрЗаменить(ТекстЗаголовка, " ", Символы.НПП);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТекстДекорацииНазначения(НазначениеПлатежа)
	
	РекомендуемаяДлина = 210;
	ТекстЗаголовка = "";
	
	Если СтрДлина(НазначениеПлатежа) > РекомендуемаяДлина Тогда
		Шаблон = НСтр("ru='Длина назначения превышена на %1'");
		СклоняемыйТекст = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
							НСтр("ru = ';%1 символ;;%1 символа;%1 символов;%1 символа'"), СтрДлина(НазначениеПлатежа) - РекомендуемаяДлина);
		ТекстЗаголовка = СтрШаблон(Шаблон, СклоняемыйТекст);
	КонецЕсли;
	
	Возврат ТекстЗаголовка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоВидОперацииБезНДС(ВидОперации)
	
	Возврат (ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Зарплата
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ЗарплатаСотруднику
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ЛичныеСредстваПредпринимателя
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Подотчетнику
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Прочее
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПереводНаДругойСчет
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.НаРасходы
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПрочиеРасчеты
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.РасчетыПоКредитам);
	
КонецФункции

&НаСервере
Процедура ОбновитьСуммуНДС()
	СтавкаНДСЗначение = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДС);
	Объект.СуммаНДС = Объект.СуммаДокумента - (Объект.СуммаДокумента) / ((СтавкаНДСЗначение + 100) / 100);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОтображениеПодсказки(Элементы, ВидОперации, Показать)
	
	Если ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Зарплата") И
		 ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ЗарплатаСотруднику") Тогда
		Показать = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаПодсказкаАссистента",
		"Видимость",
		Показать);
	
КонецПроцедуры


#КонецОбласти

#Область УправлениеВнешнимВидомФормы

// Процедура устанавливает доступность реквизитов перечисления налогов.
//
&НаКлиенте
Процедура УстановитьДоступностьРеквизитовПеречисленияНалогов()
	
	Если ПериодичностьУплаты = "0" Тогда
		Элементы.ГодПериод.Видимость = Ложь;
		Элементы.ДатаПлатежа.Видимость = Ложь;
	Иначе
		Если ПериодичностьУплаты = "-" Тогда
			Элементы.ГодПериод.Видимость = Ложь;
			Элементы.ДатаПлатежа.Видимость = Истина;
		Иначе
			Элементы.ГодПериод.Видимость = Истина;
			Элементы.ДатаПлатежа.Видимость = Ложь;
			Элементы.ПериодПлатежа.Видимость = ПериодичностьУплаты <> "ГД";
			Если ПериодичностьУплаты = "МС" Тогда
				Элементы.ПериодПлатежа.МинимальноеЗначение = 1;
				Элементы.ПериодПлатежа.МаксимальноеЗначение = 12;
				Элементы.ПериодПлатежа.Заголовок = НСтр("ru = 'Месяц'");
			ИначеЕсли ПериодичностьУплаты = "КВ" Тогда
				Элементы.ПериодПлатежа.МинимальноеЗначение = 1;
				Элементы.ПериодПлатежа.МаксимальноеЗначение = 4;
				Элементы.ПериодПлатежа.Заголовок = НСтр("ru = 'Квартал'");
			ИначеЕсли ПериодичностьУплаты = "ПЛ" Тогда
				Элементы.ПериодПлатежа.МинимальноеЗначение = 1;
				Элементы.ПериодПлатежа.МаксимальноеЗначение = 2;
				Элементы.ПериодПлатежа.Заголовок = НСтр("ru = 'Полугодие'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьРеквизитовПеречисленияНалогов()

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область АвтоподборКонтактов

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_ОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_АвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, Параметры, Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// ЭлектронноеВзаимодействие.ОбменСБанками
// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПриНажатииНаСсылкуДиректБанк()
	
	ОбменСБанкамиКлиент.ОткрытьАктуальныйЭД(Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ОбменСБанками

// СтандартныеПодсистемы.ПодключаемыеКоманды
// @skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыгрузитьВКлиентБанкаТекущийДокумент(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, "Сначала запишите документ.");
		Возврат;
	КонецЕсли;
	
	СписокВыгрузки = Новый СписокЗначений;
	СписокВыгрузки.Добавить(Объект.Ссылка);
	ПараметрыОткрытия = Новый Структура("СписокПлатежек, БанковскийСчет", СписокВыгрузки, Объект.БанковскийСчет);
	ОткрытьФорму("Обработка.КлиентБанк.Форма.СохранениеПлатежек", ПараметрыОткрытия,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторКБК(Команда)
	ОткрытьФорму("Справочник.ВидыНалогов.Форма.КонструкторКБК", Новый Структура("КБК, ВидПеречисления", Объект.КодБК, ПлатежиВБюджетКлиентСервер.ВидПеречисления(Объект.КодБК, ТекущаяДата())), Элементы.КодБК);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДоговоруКредита(Команда)
	
	Если Объект.ДоговорКредитаЗайма.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, "Выберите договор");
		Возврат;
	КонецЕсли;
	
	АдресРасшифровкиПлатежаВХранилище = ПоместитьРасшифровкаПлатежаВХранилище();
	ПараметрыОтбора = Новый Структура("
		|АдресРасшифровкиПлатежаВХранилище,
		|Организация,
		|Регистратор,
		|ИдентификаторФормыДокумента,
		|ВидОперации,
		|Дата,
		|Валюта,
		|ДоговорКредитаЗайма,
		|СуммаДокумента,
		|Контрагент,
		|СтавкаНДСПоУмолчанию,
		|СуммаПлатежа,
		|Курс,
		|Кратность,
		|Сотрудник",
		АдресРасшифровкиПлатежаВХранилище,
		Объект.Организация,
		Объект.Ссылка,
		УникальныйИдентификатор,
		Объект.ВидОперации,
		Объект.Дата,
		Объект.ВалютаДокумента,
		Объект.ДоговорКредитаЗайма,
		Объект.СуммаДокумента,
		Объект.Контрагент,
		СтавкаНДСПоУмолчанию,
		Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа"),
		Курс,
		Кратность,
		Неопределено);
	
	ОткрытьФорму("ОбщаяФорма.ФормаЗаполненияРасшифровкиПлатежаПоКредитамИЗаймам", 
						ПараметрыОтбора,
						ЭтаФорма,,,, Новый ОписаниеОповещения("ЗаполнитьПоДоговоруКредитаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

// Процедура - обработчик команды ЗаполнитьПоДоговоруКредита. Завершающая часть, которая вызывается после выбора данных заполнения.
//
&НаКлиенте
Процедура ЗаполнитьПоДоговоруКредитаЗавершение(РезультатЗаполнения, ПараметрыЗавершения) Экспорт

	Если ТипЗнч(РезультатЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьСуммуДокумента = Ложь;
		Если РезультатЗаполнения.Свойство("ОчищатьТабличнуюЧастьПриЗаполнении") И РезультатЗаполнения.ОчищатьТабличнуюЧастьПриЗаполнении Тогда
			Объект.РасшифровкаПлатежа.Очистить();
			ЗаполнитьСуммуДокумента = Истина;
		КонецЕсли;
		Если РезультатЗаполнения.Свойство("АдресРасшифровкиПлатежаВХранилище") Тогда
			ПолучитьРасшифровкаПлатежаИзХранилища(РезультатЗаполнения.АдресРасшифровкиПлатежаВХранилище, Ложь);
			
			Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
				Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
			КонецЕсли;
		КонецЕсли;
		Если ЗаполнитьСуммуДокумента Тогда
			Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
			СуммаДокументаПриИзменении(Элементы.СуммаДокумента);
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШапкаТабличнаяЧасть(Команда)
	
	ФормыДокументовДеньгиКлиент.ШапкаТабличнаяЧасть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ШапкаТабличнаяЧастьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.БылиВнесеныИзменения Тогда
		ШапкаТабличнаяЧастьЗавершениеНаСервере(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ШапкаТабличнаяЧастьЗавершениеНаСервере(Знач Результат)
	
	ФормыДокументовДеньги.ШапкаТабличнаяЧастьЗавершение(ЭтаФорма, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область Основание

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ФормыДокументовДеньгиКлиент.ДокументОснованиеНадписьОбработкаНавигационнойСсылки(ЭтаФорма, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипаОснованияЗавершение(ИмяФормыОснования, Параметры) Экспорт
	
	Если ИмяФормыОснования <> Неопределено Тогда
		
		СтруктураПараметровОтбора = Новый Структура();
		Для каждого ЭлементОтбора Из ПараметрыВыбораДокументаОснования Цикл
			ИмяПоляОтбора = СтрЗаменить(ЭлементОтбора.Имя,"Отбор.","");
			СтруктураПараметровОтбора.Вставить(ИмяПоляОтбора, ЭлементОтбора.Значение);
		КонецЦикла;
		Если СтрНайти(ИмяФормыОснования.Значение, "Документ.НачислениеНалогов") > 0 Тогда
			СтруктураПараметровОтбора.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийНачислениеНалогов.Начисление"));
		КонецЕсли;
		Если СтрНайти(ИмяФормыОснования.Значение, "Документ.РасходДСПлан") > 0 Тогда
			СтруктураПараметровОтбора.Вставить("ТипДенежныхСредств", ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные"));
		КонецЕсли;
		ПараметрыДляОткрытияФормы = Новый Структура("Отбор", СтруктураПараметровОтбора);
		_ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ОткрытьФорму(ИмяФормыОснования.Значение, ПараметрыДляОткрытияФормы, ЭтотОбъект, ,,,_ОповещениеОЗакрытии);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбЗначение, Параметры) Экспорт

	Если ВыбЗначение<>Неопределено Тогда
		Объект.ДокументОснование = ВыбЗначение;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбЗначение);
		Модифицированность = Истина;
		
		ФормыДокументовДеньгиКлиент.ЗаполнитьПоОснованиюНачало(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РасшифровкаПлатежа

// Процедура выполняет дополнительные действия, необходимые для корректной работы табличной части "Расшифровка платежа"
//
&НаСервере
Процедура ДополнительныеДействияРасшифровкаПлатежа(ПриСозданииНаСервере = Ложь)
	
	Если  Объект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата
			   ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Покупателю Тогда
		
		Если ПриСозданииНаСервере Тогда
			
			УстановитьУсловноеОформление();
			
			Если ЗначениеЗаполнено(Объект.СтавкаНДС) Тогда
				СтавкаНДСПоУмолчанию = Объект.СтавкаНДС;
				СтавкаНДСПоУмолчаниюЧисло = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДС);
			Иначе
				СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
				СтавкаНДСПоУмолчаниюЧисло = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(Объект.СтавкаНДС) И (ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Покупателю
				ИЛИ ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата) Тогда
					Объект.СтавкаНДС = СтавкаНДСПоУмолчанию;
			КонецЕсли;
			
			ДатаПриСозданииНаСервере = Объект.Дата;
			
		КонецЕсли;
		
		РасчетыРаботаСФормамиВызовСервера.УстановитьВидимостьРеквизитовРасчетовФрагмент(ЭтотОбъект);
		РасчетыРаботаСФормамиВызовСервера.ЗаполнитьРеквизитыКурсИКратность(ЭтотОбъект);
		
		Элементы.РасшифровкаПлатежаДоговор.Видимость = НЕ Элементы.Договор.Видимость;
		
		Если Элементы.РасшифровкаПлатежаДоговор.Видимость Тогда
		    Элементы.РасшифровкаПлатежаДоговорИСтатьяДДС.Заголовок = НСтр("ru = 'Договор / Статья ДДС'");
		Иначе
			Элементы.РасшифровкаПлатежаДоговорИСтатьяДДС.Заголовок = НСтр("ru = 'Статья ДДС'");
		КонецЕсли; 
		
		Элементы.РасшифровкаПлатежаСчетНаОплату.Видимость = Объект.Контрагент.ВестиУчетОплатыПоСчетам;
		Элементы.РасчетыСКонтрагентом.Видимость = Истина;
		Элементы.РасшифровкаПлатежаСуммаПлатежа.Видимость = УчетВалютныхОпераций;
		
		СпособЗачетаПоУмолчаниюДляКонтрагента = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляКонтрагента(Объект.Контрагент, Ложь);
		
	КонецЕсли;
	
		Если НЕ (Объект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Зарплата) Тогда
			
		Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
			ДобавитьПервуюСтрокуРасшифровкиНаСервере();
			Если НЕ Объект.Ссылка.Пустая() Тогда //Открыт документ, созданный до добавления табличной части РасшифровкаПлатежа
				Модифицированность = Ложь;
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет суммы в шапке соответствие с табличной частью "Расшифровка платежа", если в расшифровке указана одна строка
//
&НаКлиенте
Процедура ОбновитьСуммыВШапкеДокумента() Экспорт
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 ИЛИ ИсходнаяСуммаРавнаНулю Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		Объект.СуммаНДС = Объект.РасшифровкаПлатежа.Итог("СуммаНДС");
		СформироватьНазначениеПлатежа(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаДокумента.
//
&НаКлиенте
Процедура СуммаДокументаПриИзмененииФрагмент()
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		
		СтрокаТабличнойЧасти = Объект.РасшифровкаПлатежа[0];
		
		СтрокаТабличнойЧасти.СуммаПлатежа = Объект.СуммаДокумента;
		
		СтрокаТабличнойЧасти.Курс = ?(
			СтрокаТабличнойЧасти.Курс = 0,
			1,
			СтрокаТабличнойЧасти.Курс
		);
		
		СтрокаТабличнойЧасти.Кратность = ?(
			СтрокаТабличнойЧасти.Кратность = 0,
			1,
			СтрокаТабличнойЧасти.Кратность
		);
		
		СтрокаТабличнойЧасти.СуммаРасчетов = ВалютыУНФКлиентСервер.Пересчитать(
			СтрокаТабличнойЧасти.СуммаПлатежа, Курс, СтрокаТабличнойЧасти.Курс, Кратность,
			СтрокаТабличнойЧасти.Кратность);
		
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		
		СтрокаТабличнойЧасти.Аванс = ?(СтрокаТабличнойЧасти.ПризнакАванса, СтрокаТабличнойЧасти.СуммаПлатежа, 0);
		
		РасчетыРаботаСФормамиКлиент.РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// Рассчитывает сумму платежа в зависимости от валюты и кратности в строке и документе
//
&НаКлиенте
Процедура РассчитатьСуммуПлатежаНаКлиенте(СтрокаТабличнойЧасти, ИмяКолонки = "", НеПересчитыватьИтоги = Ложь, ЭтоПомощник = Ложь) Экспорт
	
	СтруктураДанные = РасчетыРаботаСФормамиВызовСервера.ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(
			?(ЭтоПомощник, ДатаДокумента, Объект.Дата),
			СтрокаТабличнойЧасти.Договор
		);
		
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		?(СтруктураДанные.ДоговорВалютаКурсКратность.Курс =0, 1, СтруктураДанные.ДоговорВалютаКурсКратность.Курс),
		СтрокаТабличнойЧасти.Курс
	);
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	Если СтрокаТабличнойЧасти.СуммаРасчетов = 0 Тогда
		СтрокаТабличнойЧасти.СуммаПлатежа = 0;
		СтрокаТабличнойЧасти.Курс = СтруктураДанные.ДоговорВалютаКурсКратность.Курс;
	ИначеЕсли Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов Тогда
		СтрокаТабличнойЧасти.СуммаПлатежа = СтрокаТабличнойЧасти.СуммаРасчетов;
	ИначеЕсли СтрокаТабличнойЧасти.СуммаПлатежа = 0 ИЛИ
		(ИмяКолонки = "Курс" ИЛИ ИмяКолонки = "Кратность") Тогда
		Если СтрокаТабличнойЧасти.Курс = 0 Тогда
			СтрокаТабличнойЧасти.СуммаПлатежа = 0;
		Иначе
			СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
				СтрокаТабличнойЧасти.СуммаРасчетов, СтрокаТабличнойЧасти.Курс, Курс, СтрокаТабличнойЧасти.Кратность,
				Кратность);
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.Курс = ?(
			СтрокаТабличнойЧасти.СуммаРасчетов = 0 ИЛИ СтрокаТабличнойЧасти.СуммаПлатежа = 0,
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс, //СтрокаТабличнойЧасти.Курс,
			СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.СуммаРасчетов * Курс
		);
		СтрокаТабличнойЧасти.Кратность = ?(
			СтрокаТабличнойЧасти.СуммаРасчетов = 0 ИЛИ СтрокаТабличнойЧасти.СуммаПлатежа = 0,
			СтруктураДанные.ДоговорВалютаКурсКратность.Кратность,
			СтрокаТабличнойЧасти.Кратность
		);
	КонецЕсли;
	
	Если Не ЭтоПомощник Тогда
		СтрокаТабличнойЧасти.Аванс = ?(СтрокаТабличнойЧасти.ПризнакАванса, СтрокаТабличнойЧасти.СуммаПлатежа, 0);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
	КонецЕсли;
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
	
КонецПроцедуры // РассчитатьСуммуПлатежаНаКлиенте()

// Процедура заполняет расшифровку платежа.
//
&НаСервере
Процедура ЗаполнитьРасшифровкуПлатежа(ТекущийОбъект = Неопределено)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьРасшифровкуПлатежа();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
КонецПроцедуры // ЗаполнитьРасшифровкуПлатежа()

// Устанавливает условное оформление табличной части "Расшифровка платежа"
//
&НаСервере
Процедура УстановитьУсловноеОформление()
	
	РасчетыРаботаСФормамиВызовСервера.УстановитьУсловноеОформлениеРасчетов(ЭтотОбъект, Перечисления.ВидыОперацийРасходСоСчета.Поставщику);
	
КонецПроцедуры

// Добавляет строку расшифровки платежа, если табличная часть "РасшифровкаПлатежа" пуста
//
&НаСервере
Процедура ДобавитьПервуюСтрокуРасшифровкиНаСервере()
	
	Модифицированность = Истина;
	
	Объект.РасшифровкаПлатежа.Добавить();
	Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
	Объект.РасшифровкаПлатежа[0].Договор =
		?(Объект.Контрагент = Договор.Владелец, Договор,
		ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.ВалютаДокумента, ВидОперации).Договор
	);
	Объект.РасшифровкаПлатежа[0].СпособЗачета = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(Объект.РасшифровкаПлатежа[0].Договор, Объект.Контрагент, Ложь);
	Объект.РасшифровкаПлатежа[0].ПризнакАванса = Истина;
	
	// Для совместимости с предыдущей версией, заполнение расшифровки по данным основания
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		Если НЕ Объект.Ссылка.Пустая() Тогда
			Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				
				Если Объект.Контрагент.ВестиРасчетыПоЗаказам Тогда
					Объект.РасшифровкаПлатежа[0].Заказ = Объект.ДокументОснование;
				КонецЕсли; 
				
			ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
				Объект.РасшифровкаПлатежа[0].СчетНаОплату = Объект.ДокументОснование;
				Объект.РасшифровкаПлатежа[0].Заказ = Объект.ДокументОснование.ДокументОснование;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РасходДСПлан") Тогда
			Объект.РасшифровкаПлатежа[0].ДокументПланирования = Объект.ДокументОснование;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события Выполнить команды Подбор.
// Открывает форму подбора документов.
//
&НаКлиенте
Процедура Подбор(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите вначале контрагента.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет)
	   И НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите вначале банковский счет.'"));
		Возврат;
	КонецЕсли;
	
	АдресРасшифровкаПлатежаВХранилище = ПоместитьРасшифровкаПлатежаВХранилище();
	
	ПараметрыПодбора = Новый Структура(
		"АдресРасшифровкаПлатежаВХранилище,
		|Компания,
		|Дата,
		|Контрагент,
		|Ссылка,
		|ВидОперации,
		|ВалютаДенежныхСредств,
		|СуммаДокумента",
		АдресРасшифровкаПлатежаВХранилище,
		Компания,
		Объект.Дата,
		Объект.Контрагент,
		Объект.Ссылка,
		Объект.ВидОперации,
		Объект.ВалютаДокумента,
		Объект.СуммаДокумента
	);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораДолговПоставщикам", ПараметрыПодбора, , , , ,
		Новый ОписаниеОповещения("ПодборЗавершение", ЭтотОбъект, Новый Структура("АдресРасшифровкаПлатежаВХранилище",
		АдресРасшифровкаПлатежаВХранилище)));
	
КонецПроцедуры

// Процедура - обработчик результата выполнения команды Подбор.
// Завершение подбора документов.
//
&НаКлиенте
Процедура ПодборЗавершение(Результат1, ДополнительныеПараметры) Экспорт
	
	АдресРасшифровкаПлатежаВХранилище = ДополнительныеПараметры.АдресРасшифровкаПлатежаВХранилище;
	
	Результат = Результат1;
	Если Результат = КодВозвратаДиалога.OK Тогда
		
		ПолучитьРасшифровкаПлатежаИзХранилища(АдресРасшифровкаПлатежаВХранилище);
		Для каждого СтрокаРасшифровкаПлатежа Из Объект.РасшифровкаПлатежа Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаРасшифровкаПлатежа.СтавкаНДС) Тогда
				СтрокаРасшифровкаПлатежа.СтавкаНДС = СтавкаНДСПоУмолчанию;
			КонецЕсли;
			РассчитатьСуммуПлатежаНаКлиенте(СтрокаРасшифровкаПлатежа);
			СтрокаРасшифровкаПлатежа.СпособЗачета = ПредопределенноеЗначение(
				"Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную");
		КонецЦикла;
		
		ОбновитьСуммыВШапкеДокумента();
		
	КонецЕсли;

КонецПроцедуры // Подбор()

// Процедура - обработчик события Выполнить команды ЗаполнитьРасшифровку.
// Заполняет табличную часть "Расшифровка платежа" данными документов.
//
&НаКлиенте
Процедура ЗаполнитьРасшифровку(Команда)
		
	Если Объект.СуммаДокумента = 0 Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru='Укажите вначале сумму документа.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет)
	   И НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите вначале банковский счет.'"));
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьРасшифровкуЗавершение", ЭтотОбъект), НСтр(
		"ru='Расшифровка будет полностью перезаполнена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Процедура - обработчик результата выполнения команды ЗаполнитьРасшифровку.
// Завершение заполнения табличной части "Расшифровка платежа" данными документов.
//
&НаКлиенте
Процедура ЗаполнитьРасшифровкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.РасшифровкаПлатежа.Очистить();
	
	ЗаполнитьРасшифровкуПлатежа();
	
КонецПроцедуры // ЗаполнитьРасшифровку()

// Процедура - обработчик события Выполнить команды РаспределитьСуммуПлатежа.
// Начинает открытие формы распределения платежа.
//
&НаКлиенте
Процедура РаспределитьСуммуПлатежа(Команда) Экспорт
	
	Если Объект.Контрагент.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите вначале контрагента.'"));
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуРаспределенияПлатежа();
	
КонецПроцедуры

// Открывает форму распределения платежа при выполнении команды РаспределитьСуммуПлатежа.
//
&НаКлиенте
Процедура ОткрытьФормуРаспределенияПлатежа()
	
	СтруктураПараметров = Новый Структура();
	СтруктураАдресов = ПолучитьСтруктуруАдресовВХранилище();
	СтруктураПараметров.Вставить("СтруктураАдресов", СтруктураАдресов);
	СтруктураПараметров.Вставить("ЭтоРасчетыСПоставщиком", Истина);
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	
	РасчетыРаботаСФормамиКлиент.ОткрытьФормуРаспределенияСуммыПлатежа(Истина, ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

// Заполняет табличную часть "Расшифровка платежа" результатом выбора данных заполнения в помощнике
//
&НаКлиенте
Процедура РаспределитьСуммуПлатежаПослеРаспределения(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") И РезультатЗакрытия.Свойство("ДеревоРаспределенияСуммыПлатежа") Тогда
		
		СтруктураВидыИзменяемыхДокументов = РасчетыРаботаСФормамиКлиент.ЗаполнитьРасшифровкуПлатежаДеньгиПоДеревуРаспределения(ЭтотОбъект, РезультатЗакрытия, ДопПараметры);
		ЗаполнитьРасшифровкуПлатежаПоДеревуРаспределенияЗавершение(РезультатЗакрытия, ДопПараметры);
		
		РасчетыРаботаСФормамиКлиент.НастроитьЭлементыДляИзменяемыхДокументов(Истина, ЭтотОбъект, СтруктураВидыИзменяемыхДокументов);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет табличную часть "Расшифровка платежа" результатом выбора данных заполнения в помощнике
//
&НаКлиенте
Процедура ЗаполнитьРасшифровкуПлатежаПоДеревуРаспределенияЗавершение(РезультатЗакрытия, ДопПараметры)
	
	// Если больше строк не осталось, то добавить одну строку с автоматическим распределением всей суммы на основной договор.
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Объект.РасшифровкаПлатежа.Добавить();
		Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
		Объект.РасшифровкаПлатежа[0].Договор = РезультатЗакрытия.ДоговорПоУмолчанию;
		Объект.РасшифровкаПлатежа[0].СпособЗачета = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(Объект.РасшифровкаПлатежа[0].Договор, Объект.Контрагент, Ложь);
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
		РасшифровкаПлатежаСуммаПлатежаПриИзменении(Неопределено);
	КонецЕсли;
	
	Если Объект.СуммаДокумента = 0 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		СформироватьНазначениеПлатежа(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру адресов хранения данных табличных частей формы для передачи в обработку подбора документов
//
&НаСервере
Функция ПолучитьСтруктуруАдресовВХранилище()
	
	СтруктураДляВозврата = Новый Структура();
	
	СтруктураДляВозврата.Вставить("АдресРасшифровкаПлатежаВХранилище",
		ПоместитьВоВременноеХранилище(
			Объект.РасшифровкаПлатежа.Выгрузить(),
			УникальныйИдентификатор
		)
	);
	
	СтруктураДляВозврата.Вставить("АдресТаблицаДокументовДляИзмененияВХранилище",
		ПоместитьВоВременноеХранилище(
			Новый ТаблицаЗначений,
			УникальныйИдентификатор
		)
	);
	
	Возврат СтруктураДляВозврата;
	
КонецФункции // ПоместитьРасшифровкаПлатежаВХранилище()

// Функция получает табличную часть РасшифровкаРасчетов из временного хранилища.
//
&НаСервере
Процедура ПолучитьРасшифровкаПлатежаИзХранилища(АдресРасшифровкаПлатежаВХранилище, Очищать = Истина)
	
	ТаблицаРасшифровкаПлатежа = ПолучитьИзВременногоХранилища(АдресРасшифровкаПлатежаВХранилище);
	Если Очищать Тогда
		Объект.РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	Для каждого СтрокаРасшифровкаПлатежа Из ТаблицаРасшифровкаПлатежа Цикл
		Строка = Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаРасшифровкаПлатежа);
		Если НЕ Строка.Договор.Пустая() Тогда
			Строка.СтатьяДДС = Строка.Договор.СтатьяДДСПоУмолчанию;
		КонецЕсли;
		Если Строка.СпособЗачета.Пустая() Тогда
			Строка.СпособЗачета = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(Строка.Договор, Объект.Контрагент, Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьРасшифровкаПлатежаИзХранилища()

// Функция помещает табличную часть РасшифровкаРасчетов во временное хранилище
// и возвращает адрес
//
&НаСервере
Функция ПоместитьРасшифровкаПлатежаВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.РасшифровкаПлатежа.Выгрузить(,
			"Договор,
			|ПризнакАванса,
			|Документ,
			|Заказ,
			|СуммаРасчетов,
			|Курс,
			|Кратность,
			|СпособЗачета,
			|СуммаПлатежа"
		),
		УникальныйИдентификатор
	);
	
КонецФункции // ПоместитьРасшифровкаПлатежаВХранилище()

#Область ОбработчикиСобытийРасшифровкиПлатежа

// Процедура - обработчик события ПередУдалением табличной части РасшифровкаПлатежа.
//
&НаКлиенте
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если Объект.РасшифровкаПлатежа.Количество() <= 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // РасшифровкаПлатежаПередУдалением()

// Процедура - обработчик события ПриНачалеРедактирования табличной части РасшифровкаПлатежа.
//
&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено И ТекущиеДанные.СпособЗачета.Пустая() Тогда
			ТекущиеДанные.СпособЗачета = СпособЗачетаПоУмолчаниюДляКонтрагента;
		КонецЕсли;
		Если НЕ Копирование Тогда
			Если ЗначениеЗаполнено(Объект.Договор) Тогда
				ТекущиеДанные.Договор = Объект.Договор;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаСпособЗачета.
//
&НаКлиенте
Процедура РасшифровкаПлатежаСпособЗачетаПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.РасшифровкаПлатежаСпособЗачетаПриИзменении(Элементы.РасшифровкаПлатежа.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаВидРасчетов.
// Очищает реквизит документ если тип расчетов - "Аванс".
//
&НаКлиенте
Процедура РасшифровкаПлатежаПризнакАвансаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ПризнакАванса Тогда
		СтрокаТабличнойЧасти.Документ = Неопределено;
	Иначе
		СтрокаТабличнойЧасти.ДокументПланирования = Неопределено;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Аванс = ?(СтрокаТабличнойЧасти.ПризнакАванса , СтрокаТабличнойЧасти.СуммаПлатежа, 0);
	
КонецПроцедуры // РасшифровкаПлатежаПризнакАвансаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаЗаказ.
//
&НаКлиенте
Процедура РасшифровкаПлатежаЗаказПриИзменении(Элемент)
	
	РасшифровкаПлатежаЗаказПриИзмененииФрагмент(Элементы.РасшифровкаПлатежа.ТекущиеДанные.ПолучитьИдентификатор());
	ОбновитьСуммыВШапкеДокумента();
	
КонецПроцедуры

// Процедура - фрагмент обработчика события ПриИзменении поля ввода РасшифровкаПлатежаЗаказ.
//
&НаСервере
Функция РасшифровкаПлатежаЗаказПриИзмененииФрагмент(ТекущиеДанныеИдентификатор)
	
	Возврат РасчетыРаботаСФормамиВызовСервера.РасшифровкаПлатежаЗаказПриИзмененииФрагмент(Объект, ТекущиеДанныеИдентификатор);
	
КонецФункции

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаДокумент.
//
&НаКлиенте
Процедура РасшифровкаПлатежаДокументПриИзменении(Элемент)
	
	ВыполнитьДействияПриИзмененииДокументаРасчетов();
	
КонецПроцедуры // РасшифровкаПлатежаДокументПриИзменении() 

// Процедура - обработчик события НачалоВыбора поля ввода РасшифровкаПлатежаДокумент.
// Передает в параметры текущее значение реквизита.
//
&НаКлиенте
Процедура РасшифровкаПлатежаДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено И СтрокаТабличнойЧасти.СпособЗачета = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоРасчетыСПокупателями = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Покупателю");
	
	СтруктураОтбор = Новый Структура();
	СтруктураОтбор.Вставить("Контрагент", Объект.Контрагент);
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
		СтруктураОтбор.Вставить("Договор", СтрокаТабличнойЧасти.Договор);
	КонецЕсли;
	Если НЕ УчетПоКомпании Тогда
		СтруктураОтбор.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура("Отбор, ЭтоРасчетыСПокупателями, ТипДокумента",
		СтруктураОтбор,
		ЭтоРасчетыСПокупателями,
		ТипЗнч(Объект.Ссылка)
	);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыборДокументаРасчетов", СтруктураПараметры, Элемент);
	
КонецПроцедуры // РасшифровкаПлатежаДокументНачалоВыбора()

// Процедура - обработчик события ОбработкаВыбора поля ввода РасшифровкаПлатежаДокумент.
//
&НаКлиенте
Процедура РасшифровкаПлатежаДокументОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьВыборДокументаРасчетов(ВыбранноеЗначение);
	
КонецПроцедуры

// Процедура заполняет строку ТЧ РасшифровкаПлатежа данными документа расчетов.
//
&НаКлиенте
Процедура ОбработатьВыборДокументаРасчетов(ДанныеДокумента)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ТипЗнч(ДанныеДокумента) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти.Документ = ДанныеДокумента.Документ;
		СтрокаТабличнойЧасти.Заказ = ДанныеДокумента.Заказ;
		СтрокаТабличнойЧасти.СчетНаОплату = ДанныеДокумента.СчетНаОплату;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
			СтрокаТабличнойЧасти.Договор = ДанныеДокумента.Договор;
			ОбработатьИзменениеДоговораКонтрагента(СтрокаТабличнойЧасти);
		КонецЕсли;
		
		ВыполнитьДействияПриИзмененииДокументаРасчетов();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборДокументаРасчетов()

// Процедура выполняет действия при изменении договора контрагента.
//
&НаКлиенте
Процедура ОбработатьИзменениеДоговораКонтрагента(СтрокаТабличнойЧасти)
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
		СтруктураДанные = РасчетыРаботаСФормамиВызовСервера.ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(
			Объект.Дата,
			СтрокаТабличнойЧасти.Договор,
			СтрокаТабличнойЧасти.ДокументПланирования,
			СтрокаТабличнойЧасти.СтатьяДДС
		);
		СтрокаТабличнойЧасти.Курс = ?(
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс = 0,
			1,
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс
		);
		СтрокаТабличнойЧасти.Кратность = ?(
			СтруктураДанные.ДоговорВалютаКурсКратность.Кратность = 0,
			1,
			СтруктураДанные.ДоговорВалютаКурсКратность.Кратность
		);
		
		СтрокаТабличнойЧасти.СтатьяДДС = СтруктураДанные.СтатьяДДСПоУмолчанию;
		СтрокаТабличнойЧасти.СпособЗачета = СтруктураДанные.СпособЗачета;
		СтрокаТабличнойЧасти.СтавкаНДС = РасчетыРаботаСФормамиВызовСервера.СтавкаНДСПоОрганизацииНалогообложениеНДСИСпособуЗаполнения(
			Объект.Организация, Объект.Дата,
			СтруктураДанные.СпособЗаполненияСтавкиНДС);
	Иначе
		СтрокаТабличнойЧасти.СтатьяДДС = РасчетыРаботаСФормамиВызовСервера.ПолучитьСтатьюДДСПоУмолчаниюДляСтрокиРасшифровки(
			СтрокаТабличнойЧасти.Договор,
			СтрокаТабличнойЧасти.ДокументПланирования,
			СтрокаТабличнойЧасти.СтатьяДДС
		);
		СтрокаТабличнойЧасти.СпособЗачета = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(
			СтрокаТабличнойЧасти.Договор,
			Объект.Контрагент,
			Ложь
		);
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СуммаРасчетов = ВалютыУНФКлиентСервер.Пересчитать(
		СтрокаТабличнойЧасти.СуммаПлатежа,
		Курс,
		СтрокаТабличнойЧасти.Курс,
		Кратность,
		СтрокаТабличнойЧасти.Кратность
	);
	
	
	СтрокаТабличнойЧасти.ЭтоВзаимозачет = (ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.Взаимозачет"));
	
КонецПроцедуры // ОбработатьИзменениеДоговораКонтрагента()

// Процедура определяет признак аванса в зависимости от типа документа расчетов.
//
&НаКлиенте
Процедура ВыполнитьДействияПриИзмененииДокументаРасчетов()
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.ПризнакАванса = НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Документ);
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Документ) Тогда
		СтрокаТабличнойЧасти.СпособЗачета = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную");
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЭтоВзаимозачет = (ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.Взаимозачет"));
	
КонецПроцедуры // ВыполнитьДействияПриИзмененииДокументаРасчетов()

// Процедура выполняет обновление курса расчётов в ТЧ РасшифровкаПлатежа и пересчет суммы расчетов при изменении даты документа.
//
&НаСервере
Процедура ОбновитьКурсыРасчетовРасшифровкиПлатежаНаСервере()
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
		
		СтрокаТабличнойЧасти.Договор = Объект.Договор;
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
			СтруктураДанные = РасчетыРаботаСФормамиВызовСервера.ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(
				Объект.Дата,
				СтрокаТабличнойЧасти.Договор
			);
			СтрокаТабличнойЧасти.Курс = ?(
				СтруктураДанные.ДоговорВалютаКурсКратность.Курс = 0,
				1,
				СтруктураДанные.ДоговорВалютаКурсКратность.Курс
			);
			СтрокаТабличнойЧасти.Кратность = ?(
				СтруктураДанные.ДоговорВалютаКурсКратность.Кратность = 0,
				1,
				СтруктураДанные.ДоговорВалютаКурсКратность.Кратность
			);
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СуммаРасчетов = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаТабличнойЧасти.СуммаПлатежа,
			Курс,
			СтрокаТабличнойЧасти.Курс,
			Кратность,
			СтрокаТабличнойЧасти.Кратность
		);
		
	КонецЦикла;
	
КонецПроцедуры // ОбработатьИзменениеДоговораКонтрагента()

&НаСервере
Функция СпособЗаполненияСтавкиНДС()
	Возврат Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоДоговору(
		Объект.Договор);
КонецФункции

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаСуммаПлатежа.
// Рассчитывает курс и кратность валюты расчетов и сумму НДС.
//
&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	РасчетыРаботаСФормамиКлиент.РасшифровкаПлатежаСуммаПлатежаПриИзмененииЗавершениеНаКлиенте(СтрокаТабличнойЧасти,
		Объект.Дата, Объект.ВалютаДокумента, СтрокаТабличнойЧасти.Курс, СтрокаТабличнойЧасти.Кратность, СтавкаНДСПоУмолчанию
	);
	
	ОбновитьСуммыВШапкеДокумента();
		
КонецПроцедуры // РасшифровкаПлатежаСуммаПлатежаПриИзменении()

// Процедура - обработчик события ПриИзменении поля в РасшифровкаПлатежаСуммаРасчетов.
// Рассчитывает сумму платежа.
//
&НаКлиенте
Процедура РасшифровкаПлатежаСуммаРасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаНаКлиенте(Элементы.РасшифровкаПлатежа.ТекущиеДанные);
	ОбновитьСуммыВШапкеДокумента();
	
КонецПроцедуры // РасшифровкаПлатежаСуммаРасчетовПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаКурс.
// Рассчитывает сумму платежа.
//
&НаКлиенте
Процедура РасшифровкаПлатежаКурсПриИзменении(Элемент)
	
	РасшифровкаПлатежаКурсПриИзмененииФрагмент(Элементы.РасшифровкаПлатежа.ТекущиеДанные);
	
КонецПроцедуры // РасшифровкаПлатежаКурсПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаКурс.
// Рассчитывает сумму платежа.
//
&НаКлиенте
Процедура РасшифровкаПлатежаКурсПриИзмененииФрагмент(ТекущиеДанные)
	
	Если ТекущиеДанные.СуммаПлатежа = 0 И ТекущиеДанные.СуммаРасчетов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуПлатежаНаКлиенте(ТекущиеДанные, "Курс");
		
	ОбновитьСуммыВШапкеДокумента();
	
КонецПроцедуры // РасшифровкаПлатежаКурсПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаКратность.
// Рассчитывает сумму платежа.
//
&НаКлиенте
Процедура РасшифровкаПлатежаКратностьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ТекущиеДанные.СуммаПлатежа = 0 И ТекущиеДанные.СуммаРасчетов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуПлатежаНаКлиенте(Элементы.РасшифровкаПлатежа.ТекущиеДанные, "Кратность");
	
	ОбновитьСуммыВШапкеДокумента();
	
КонецПроцедуры // РасшифровкаПлатежаКратностьПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаСтавкаНДС.
// Рассчитывает сумму НДС.
//
&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
	
КонецПроцедуры // РасшифровкаПлатежаСтавкаНДСПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаСчетНаОплату.
//
&НаКлиенте
Процедура РасшифровкаПлатежаСчетНаОплатуПриИзменении(Элемент)
	
	РасшифровкаПлатежаСчетНаОплатуПриИзмененииФрагмент(Элементы.РасшифровкаПлатежа.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

// Процедура - фрагмент обработчика события ПриИзменении поля ввода РасшифровкаПлатежаСчетНаОплату.
// Заполняет поле "Заказ" данными документа основания счета на оплату
//
&НаСервере
Процедура РасшифровкаПлатежаСчетНаОплатуПриИзмененииФрагмент(ТекущиеДанныеИдентификатор)
	
	ТекущиеДанные = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	Если Объект.Контрагент.ВестиРасчетыПоЗаказам Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.СчетНаОплату) Тогда
			ТекущиеДанные.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Заказ) И
				ТипЗнч(ТекущиеДанные.СчетНаОплату) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") И
				ТипЗнч(ТекущиеДанные.СчетНаОплату.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				ТекущиеДанные.Заказ = ТекущиеДанные.СчетНаОплату.ДокументОснование;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаДокументПланирования.
//
&НаКлиенте
Процедура РасшифровкаПлатежаДокументПланированияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтруктураДанных = ПолучитьДанныеДокументаПланированияПриИзменении(ТекущиеДанные.ДокументПланирования);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументПланирования) Тогда
		ТекущиеДанные.СтатьяДДС = СтруктураДанных.СтатьяДДС;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает данные документа планирования из табличной части "РасшифровкаПлатежа".
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДокументаПланированияПриИзменении(ДокументПланирования)
	
	СтруктураДанных = Новый Структура("СтатьяДДС", Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходДСПлан.СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.РасходДСПлан КАК РасходДСПлан
		|ГДЕ
		|	РасходДСПлан.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументПланирования);
	
	Если ТипЗнч(ДокументПланирования) = Тип("ДокументСсылка.ПеремещениеДСПлан") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.РасходДСПлан КАК РасходДСПлан", "Документ.ПеремещениеДСПлан КАК РасходДСПлан");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтруктураДанных.Вставить("СтатьяДДС", Выборка.СтатьяДвиженияДенежныхСредств);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаСуммаНДС.
//
&НаКлиенте
Процедура РасшифровкаПлатежаСуммаНДСПриИзменении(Элемент)
	
	ОбновитьСуммыВШапкеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ОбработатьИзменениеДоговораКонтрагента(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ОбработатьНачалоВыбораДоговораКонтрагента(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта",Новый Структура("Владелец, Организация, ВидДоговора, ОповеститьОЗаписиДоговора",Объект.Контрагент,Объект.Организация,ВидДоговораПриСоздании(Объект.ВидОперации)), Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ПредоплатаКурсНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, "РасшифровкаПлатежа");
	
КонецПроцедуры

#КонецОбласти 


#КонецОбласти 

#Область ВыплатаЗаработнойПлаты

// Процедура - обработчик события ПриИзменении поля ввода ВыплатаЗаработнойПлатыВедомость.
//
&НаКлиенте
Процедура ВыплатаЗаработнойПлатыВедомостьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
	ПараметрыВедомости = ПолучитьДанныеВыплатаЗаработнойПлатыВедомостьПриИзменении(СтрокаТабличнойЧасти.Ведомость);
	СтрокаТабличнойЧасти.Подразделение = ПараметрыВедомости.Подразделение;
	СтрокаТабличнойЧасти.СуммаПлатежа = ПараметрыВедомости.СуммаПлатежа;
	
КонецПроцедуры // ВыплатаЗаработнойПлатыВедомостьПриИзменении()

// Получает набор данных с сервера для процедуры ВыплатаЗаработнойПлатыВедомостьПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеВыплатаЗаработнойПлатыВедомостьПриИзменении(Ведомость)
	
	ПараметрыВедомости = Новый Структура;
	ПараметрыВедомости.Вставить("Подразделение", Ведомость.СтруктурнаяЕдиница);
	ПараметрыВедомости.Вставить("СуммаПлатежа", Ведомость.Сотрудники.Итог("СуммаПлатежа"));
	
	Возврат ПараметрыВедомости;
	
КонецФункции // ПолучитьДанныеВыплатаЗаработнойПлатыВедомостьПриИзменении()

#КонецОбласти

#Область ПрочийРасход

// Процедура - обработчик события ПриИзменении поля ввода Корреспонденция.
//
&НаКлиенте
Процедура КорреспонденцияПриИзменении(Элемент)
	
	Если Корреспонденция <> Объект.Корреспонденция Тогда
		УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Истина);
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Корреспонденция = Объект.Корреспонденция;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ПрочиеРасчеты

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаПрочиеРасчеты.СуммаРасчетов.
//
&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыСуммаРасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаНаКлиенте(Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные);
	ОбновитьСуммыВШапкеДокумента();
	
КонецПроцедуры

// Процедура - обработчик события ПередУдалением элемента РасшифровкаПлатежаПрочиеРасчеты (ТЧ).
//
&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыПередУдалением(Элемент, Отказ)
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные;
		Если НЕ Копирование Тогда
			Если ЗначениеЗаполнено(Объект.Договор) Тогда
				ТекущиеДанные.Договор = Объект.Договор;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаПрочиеРасчеты.Курс.
//
&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыКурсПриИзменении(Элемент)
		
	РасшифровкаПлатежаКурсПриИзмененииФрагмент(Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыКурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ПредоплатаКурсНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, "РасшифровкаПлатежаПрочиеРасчеты");
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаПрочиеРасчеты.Кратность.
//
&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыКратностьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные;
	Если ТекущиеДанные.СуммаПлатежа = 0 И ТекущиеДанные.СуммаРасчетов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуПлатежаНаКлиенте(Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные, "Кратность");
	
	ОбновитьСуммыВШапкеДокумента();

	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаПрочиеРасчеты.СуммаПлатежа.
//
&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные;
	
	РасчетыРаботаСФормамиКлиент.РасшифровкаПлатежаСуммаПлатежаПриИзмененииЗавершениеНаКлиенте(СтрокаТабличнойЧасти,
		Объект.Дата, Объект.ВалютаДокумента, СтрокаТабличнойЧасти.Курс, СтрокаТабличнойЧасти.Кратность, СтавкаНДСПоУмолчанию
	);
	
	ОбновитьСуммыВШапкеДокумента();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаПрочиеРасчеты.Договор.
//
&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговораКонтрагентаПрочиеРасчеты();
	
КонецПроцедуры

// Процедура выполняет действия при изменении договора контрагента.
//
&НаКлиенте
Процедура ОбработатьИзменениеДоговораКонтрагентаПрочиеРасчеты()
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
		СтруктураДанные = РасчетыРаботаСФормамиВызовСервера.ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(
			Объект.Дата,
			СтрокаТабличнойЧасти.Договор,
			СтрокаТабличнойЧасти.ДокументПланирования,
			СтрокаТабличнойЧасти.СтатьяДДС
		);
		СтрокаТабличнойЧасти.Курс = ?(
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс = 0,
			1,
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс
		);
		СтрокаТабличнойЧасти.Кратность = ?(
			СтруктураДанные.ДоговорВалютаКурсКратность.Кратность = 0,
			1,
			СтруктураДанные.ДоговорВалютаКурсКратность.Кратность
		);
		
		СтрокаТабличнойЧасти.СтатьяДДС = СтруктураДанные.СтатьяДДСПоУмолчанию;
	Иначе
		СтрокаТабличнойЧасти.СтатьяДДС = Неопределено;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СуммаРасчетов = ВалютыУНФКлиентСервер.Пересчитать(
		СтрокаТабличнойЧасти.СуммаПлатежа, Курс, СтрокаТабличнойЧасти.Курс, Кратность, СтрокаТабличнойЧасти.Кратность);
	
КонецПроцедуры // ОбработатьИзменениеДоговораКонтрагента()

// Процедура - обработчик события НачалоВыбора поля ввода РасшифровкаПлатежаПрочиеРасчеты.Договор.
//
&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Контрагент.Пустая() Тогда
		СтандартнаяОбработка = Ложь;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Сначала выберите контрагента'");
		Сообщение.Поле = "Объект.Контрагент";
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	ОбработатьНачалоВыбораДоговораКонтрагентаПрочиеРасчеты(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура выполняет действия при начале выбора договора контрагента.
//
&НаКлиенте
Процедура ОбработатьНачалоВыбораДоговораКонтрагентаПрочиеРасчеты(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, СтрокаТабличнойЧасти.Договор, Объект.ВидОперации);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеДоговораКонтрагента()

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаПрочиеРасчеты.СтавкаНДС.
//
&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные;
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыДокументПланированияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные;
	СтруктураДанных = ПолучитьДанныеДокументаПланированияПриИзменении(ТекущиеДанные.ДокументПланирования);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументПланирования) Тогда
		ТекущиеДанные.СтатьяДДС = СтруктураДанных.СтатьяДДС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Оплата") Тогда
		
		СуммаИтог = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
		Если СуммаИтог <> 0 И СуммаИтог <> Объект.СуммаДокумента Тогда
			НадписьВСкобках = НСтр("ru = 'разнесено вручную'");
			Элемент.СписокВыбора.Добавить(СуммаИтог, ""+СуммаИтог+" ("+НадписьВСкобках+")");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗакрытьПодсказкуНажатие(Элемент)
	
	ИзменитьОтображениеПодсказки(Элементы, Объект.ВидОперации, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетыПоКредитам

// Получает договор кредита (займа) по умолчанию в зависимости от вида операции документа.
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорКредитаЗаймаПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	МенеджерДокумента = Документы.ДоговорКредитаИЗайма;
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКредитаИЗайма.КредитПолученный);
	
	ДоговорКредитаЗаймаПоУмолчанию = МенеджерДокумента.ПолучитьДоговорКредитаИЗаймаПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорКредитаЗаймаПоУмолчанию;
	
КонецФункции


// Процедура - обработчик события ПередУдалением табличной части РасшифровкаПлатежаРасчетыПоКредитам.
//
&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамПередУдалением(Элемент, Отказ)
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаРасчетыПоКредитам.СуммаРасчетов.
//
&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамСуммаРасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаНаКлиенте(Элементы.РасшифровкаПлатежаРасчетыПоКредитам.ТекущиеДанные);
	ОбновитьСуммыВШапкеДокумента();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаРасчетыПоКредитам.СуммаРасчетов.
//
&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамКурсПриИзменении(Элемент)
	
		РассчитатьСуммуПлатежаНаКлиенте(Элементы.РасшифровкаПлатежаРасчетыПоКредитам.ТекущиеДанные);
	ОбновитьСуммыВШапкеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамКурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ПредоплатаКурсНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, "РасшифровкаПлатежаРасчетыПоКредитам");
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаРасчетыПоКредитам.Кратность.
//
&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамКратностьПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаНаКлиенте(Элементы.РасшифровкаПлатежаРасчетыПоКредитам.ТекущиеДанные);
	ОбновитьСуммыВШапкеДокумента();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаРасчетыПоКредитам.СуммаПлатежа.
//
&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамСуммаПлатежаПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаНаКлиенте(Элементы.РасшифровкаПлатежаРасчетыПоКредитам.ТекущиеДанные);
	ОбновитьСуммыВШапкеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамДокументПланированияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежаРасчетыПоКредитам.ТекущиеДанные;
	СтруктураДанных = ПолучитьДанныеДокументаПланированияПриИзменении(ТекущиеДанные.ДокументПланирования);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументПланирования) Тогда
		ТекущиеДанные.СтатьяДДС = СтруктураДанных.СтатьяДДС;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 