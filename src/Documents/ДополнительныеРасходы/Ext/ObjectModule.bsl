#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура выполняет распределение затрат по количеству.
//
Процедура РаспределитьТабЧастьРасходыПоКоличеству() Экспорт
	
	ИсхСумма = 0;
	БазаРаспределенияКоличество = Запасы.Итог("Количество");
	ВсегоРасходы = Расходы.Итог("Всего");
	
	НОД = ПолучитьНОДДляМассива(Запасы.ВыгрузитьКолонку("Количество"), 1000);
	
	Если НОД = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаЗапасы Из Запасы Цикл
		
		СтрокаЗапасы.Коэффициент = СтрокаЗапасы.Количество / НОД * 1000;
		СтрокаЗапасы.СуммаРасходов = ?(БазаРаспределенияКоличество <> 0, Окр((ВсегоРасходы - ИсхСумма) * СтрокаЗапасы.Количество / БазаРаспределенияКоличество, 2, 1),0);
		БазаРаспределенияКоличество = БазаРаспределенияКоличество - СтрокаЗапасы.Количество;
		ИсхСумма = ИсхСумма + СтрокаЗапасы.СуммаРасходов;
		
	КонецЦикла;
	
КонецПроцедуры // РаспределитьТабЧастьРасходыПоКоличеству()

// Процедура выполняет распределение затрат по сумме.
//
Процедура РаспределитьТабЧастьРасходыПоСумме() Экспорт
	
	ИсхСумма = 0;
	БазаРаспределенияСумма = Запасы.Итог("Сумма");
	ВсегоРасходы = Расходы.Итог("Всего");
	
	НОД = ПолучитьНОДДляМассива(Запасы.ВыгрузитьКолонку("Сумма"), 100);
	
	Если НОД = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаЗапасы Из Запасы Цикл
		
		СтрокаЗапасы.Коэффициент = СтрокаЗапасы.Сумма / НОД * 100;
		СтрокаЗапасы.СуммаРасходов = ?(БазаРаспределенияСумма <> 0, Окр((ВсегоРасходы - ИсхСумма) * СтрокаЗапасы.Сумма / БазаРаспределенияСумма, 2, 1), 0);
		БазаРаспределенияСумма = БазаРаспределенияСумма - СтрокаЗапасы.Сумма;
		ИсхСумма = ИсхСумма + СтрокаЗапасы.СуммаРасходов;
		
	КонецЦикла;
	
КонецПроцедуры // РаспределитьТабЧастьРасходыПоСумме()

#Область ПроцедурыЗаполненияДокумента

// Процедура заполняет авансы.
//
Процедура ЗаполнитьПредоплату() Экспорт
	
	Компания = Константы.УчетПоКомпании.Компания(Организация);
	
	// Заполнение расшифровки предоплаты.
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|	РасчетыСПоставщикамиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПоставщикамиОстатки.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПоставщикамиОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПоставщикамиОстатки.Договор КАК Договор,
	|		РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|		РасчетыСПоставщикамиОстатки.Документ.Дата КАК ДокументДата,
	|		РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками.Остатки(
	|				,
	|				Организация = &Организация
	|					И Контрагент = &Контрагент
	|					И Договор = &Договор
	|					И Заказ В (&Заказ)
	|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПоставщикамиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРасчетыСПоставщиками.Договор,
	|		ДвиженияДокументаРасчетыСПоставщиками.Документ,
	|		ДвиженияДокументаРасчетыСПоставщиками.Документ.Дата,
	|		ДвиженияДокументаРасчетыСПоставщиками.Заказ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.Сумма, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.Сумма, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.СуммаВал, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.СуммаВал, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками КАК ДвиженияДокументаРасчетыСПоставщиками
	|	ГДЕ
	|		ДвиженияДокументаРасчетыСПоставщиками.Регистратор = &Ссылка
	|		И ДвиженияДокументаРасчетыСПоставщиками.Период <= &Период
	|		И ДвиженияДокументаРасчетыСПоставщиками.Организация = &Организация
	|		И ДвиженияДокументаРасчетыСПоставщиками.Контрагент = &Контрагент
	|		И ДвиженияДокументаРасчетыСПоставщиками.Договор = &Договор
	|		И ДвиженияДокументаРасчетыСПоставщиками.Заказ В (&Заказ)
	|		И ДвиженияДокументаРасчетыСПоставщиками.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПоставщикамиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщикамиОстатки.Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ,
	|	РасчетыСПоставщикамиОстатки.ДокументДата,
	|	РасчетыСПоставщикамиОстатки.Договор.ВалютаРасчетов
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаВалОстаток) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|	РасчетыСПоставщикамиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПоставщикамиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|	-СУММА(РасчетыСПоставщикамиОстатки.СуммаУчета) КАК СуммаУчета,
	|	-СУММА(РасчетыСПоставщикамиОстатки.СуммаРасчетов) КАК СуммаРасчетов,
	|	-СУММА(РасчетыСПоставщикамиОстатки.СуммаПлатежа) КАК СуммаПлатежа,
	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаУчета / ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаРасчетов, 0) <> 0
	|				ТОГДА РасчетыСПоставщикамиОстатки.СуммаРасчетов
	|			ИНАЧЕ 1
	|		КОНЕЦ) * (РасчетыСПоставщикамиОстатки.КурсыВалютыУчетаКурс / РасчетыСПоставщикамиОстатки.КурсыВалютыУчетаКратность) КАК Курс,
	|	1 КАК Кратность,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыДокументаКурс КАК КурсыВалютыДокументаКурс,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыДокументаКратность КАК КурсыВалютыДокументаКратность
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПоставщикамиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|		РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|		РасчетыСПоставщикамиОстатки.ДокументДата КАК ДокументДата,
	|		РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаОстаток, 0) КАК СуммаУчета,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаВалОстаток, 0) КАК СуммаРасчетов,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаОстаток, 0) * КурсыВалютыУчета.Курс * &КратностьВалютыДокумента / (&КурсВалютыДокумента * КурсыВалютыУчета.Кратность) КАК СуммаПлатежа,
	|		КурсыВалютыУчета.Курс КАК КурсыВалютыУчетаКурс,
	|		КурсыВалютыУчета.Кратность КАК КурсыВалютыУчетаКратность,
	|		&КурсВалютыДокумента КАК КурсыВалютыДокументаКурс,
	|		&КратностьВалютыДокумента КАК КурсыВалютыДокументаКратность
	|	ИЗ
	|		ВременнаяТаблицаРасчетыСПоставщикамиОстатки КАК РасчетыСПоставщикамиОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУчета) КАК КурсыВалютыУчета
	|			ПО (ИСТИНА)) КАК РасчетыСПоставщикамиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщикамиОстатки.Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ,
	|	РасчетыСПоставщикамиОстатки.ДокументДата,
	|	РасчетыСПоставщикамиОстатки.ВалютаРасчетов,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыУчетаКурс,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыУчетаКратность,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыДокументаКурс,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыДокументаКратность
	|
	|ИМЕЮЩИЕ
	|	-СУММА(РасчетыСПоставщикамиОстатки.СуммаРасчетов) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата";
	
	Запрос.УстановитьПараметр("Заказ", ?(Контрагент.ВестиРасчетыПоЗаказам, ЗаказПоставщику, Документы.ЗаказПоставщику.ПустаяСсылка()));
	
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Если Договор.ВалютаРасчетов = ВалютаДокумента Тогда
		Запрос.УстановитьПараметр("КурсВалютыДокумента", Курс);
		Запрос.УстановитьПараметр("КратностьВалютыДокумента", Кратность);
	Иначе
		Запрос.УстановитьПараметр("КурсВалютыДокумента", 1);
		Запрос.УстановитьПараметр("КратностьВалютыДокумента", 1);
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = ТекстЗапроса;
	
	Предоплата.Очистить();
	СуммаОсталосьРаспределить = Расходы.Итог("Всего");
	СуммаОсталосьРаспределить = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
		СуммаОсталосьРаспределить,
		?(Договор.ВалютаРасчетов = ВалютаДокумента, Курс, 1),
		Курс,
		?(Договор.ВалютаРасчетов = ВалютаДокумента, Кратность, 1),
		Кратность
	);
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока СуммаОсталосьРаспределить > 0 Цикл
		
		Если ВыборкаРезультатаЗапроса.Следующий() Тогда
			
			Если ВыборкаРезультатаЗапроса.СуммаРасчетов <= СуммаОсталосьРаспределить Тогда // сумма остатка меньше или равна чем осталось распределить
				
				НоваяСтрока = Предоплата.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
				СуммаОсталосьРаспределить = СуммаОсталосьРаспределить - ВыборкаРезультатаЗапроса.СуммаРасчетов;
				
			Иначе // сумма остатка больше чем нужно распределить
				
				НоваяСтрока = Предоплата.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
				НоваяСтрока.СуммаРасчетов = СуммаОсталосьРаспределить;
				НоваяСтрока.СуммаПлатежа = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
					НоваяСтрока.СуммаРасчетов,
					ВыборкаРезультатаЗапроса.Курс,
					ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКурс,
					ВыборкаРезультатаЗапроса.Кратность,
					ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКратность
				);
				СуммаОсталосьРаспределить = 0;
				
			КонецЕсли;
			
		Иначе
			
			СуммаОсталосьРаспределить = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполнения документа на основании приходная накладной.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.ПриходнаяНакладная - приходная накладная
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоПриходнойНакладной(ДанныеЗаполнения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходнаяНакладная.Организация КАК Организация,
	|	ПриходнаяНакладная.Контрагент КАК Контрагент,
	|	ПриходнаяНакладная.Договор КАК Договор,
	|	ПриходнаяНакладная.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ПриходнаяНакладная.ПоложениеСклада КАК ПоложениеСклада,
	|	ПриходнаяНакладная.ВалютаДокумента КАК ВалютаДокумента,
	|	ПриходнаяНакладная.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ПриходнаяНакладная.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
	|	ПриходнаяНакладная.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ПриходнаяНакладная.Курс КАК КурсОснования,
	|	ПриходнаяНакладная.Кратность КАК КратностьОснования,
	|	ПриходнаяНакладная.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладная.ПоложениеЗаказаПоставщику = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|				ИЛИ НЕ ПриходнаяНакладная.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|		ИНАЧЕ ПриходнаяНакладная.Заказ
	|	КОНЕЦ КАК ЗаказПоставщику,
	|	ПриходнаяНакладная.Запасы.(
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		Партия КАК Партия,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ВЫБОР
	|			КОГДА ПриходнаяНакладная.Запасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				ТОГДА ВЫРАЗИТЬ(ПриходнаяНакладная.Запасы.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК Коэффициент,
	|		Ссылка КАК ДокументПоступления,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		Заказ КАК Заказ,
	|		ЗаказПокупателя КАК ЗаказПокупателя,
	|		СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|	) КАК Запасы
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|ГДЕ
	|	ПриходнаяНакладная.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РазмещениеЗаказов.Номенклатура КАК Номенклатура,
	|	РазмещениеЗаказов.Характеристика КАК Характеристика,
	|	РазмещениеЗаказов.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ВЫБОР
	|			КОГДА РазмещениеЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА РазмещениеЗаказов.Количество
	|			ИНАЧЕ -РазмещениеЗаказов.Количество
	|		КОНЕЦ) КАК Количество
	|ИЗ
	|	РегистрНакопления.РазмещениеЗаказов КАК РазмещениеЗаказов
	|ГДЕ
	|	РазмещениеЗаказов.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РазмещениеЗаказов.ЗаказПокупателя,
	|	РазмещениеЗаказов.Характеристика,
	|	РазмещениеЗаказов.Номенклатура";
	Результат = Запрос.ВыполнитьПакет();
	
	Шапка = Результат[0].Выбрать();
	Шапка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Шапка);
	Если ВалютаДокумента = Константы.НациональнаяВалюта.Получить() Тогда
		Курс = Шапка.КурсОснования;
		Кратность = Шапка.КратностьОснования;
	Иначе
		ОтборПоВалютеРасчетов = Новый Структура("Валюта", Шапка.ВалютаРасчетов);
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, ОтборПоВалютеРасчетов);
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
	ТаблицаОстатков = Результат[1].Выгрузить();
	ТаблицаОстатков.Индексы.Добавить("Номенклатура, Характеристика");
	
	// Заполнение табличной части документа.
	Запасы.Очистить();
	СтруктураОтбора = Новый Структура;
	ВыборкаЗапасы = Шапка.Запасы.Выбрать();
	Пока ВыборкаЗапасы.Следующий() Цикл
			
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗапасы, , "ЗаказПокупателя");
		
		Если Не ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ВыборкаЗапасы.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			НоваяСтрока.ЗаказПокупателя = ВыборкаЗапасы.ЗаказПокупателя;
		ИначеЕсли ТипЗнч(ВыборкаЗапасы.Заказ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			// Определение заказов покупателей по размещению
			Распределить = ВыборкаЗапасы.Количество;
			СтруктураОтбора.Очистить();
			СтруктураОтбора.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
			СтруктураОтбора.Вставить("Характеристика", НоваяСтрока.Характеристика);
			Если ЗначениеЗаполнено(ВыборкаЗапасы.ЗаказПокупателя) Тогда
				НоваяСтрока.ЗаказПокупателя = ВыборкаЗапасы.ЗаказПокупателя;
				СтруктураОтбора.Вставить("ЗаказПокупателя", ВыборкаЗапасы.ЗаказПокупателя);
				СтрокиОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);
				Для каждого СтрокаОстатка Из СтрокиОстатков Цикл
					Количество = Мин(Распределить, СтрокаОстатка.Количество / ВыборкаЗапасы.Коэффициент);
					СтрокаОстатка.Количество = СтрокаОстатка.Количество - Количество * ВыборкаЗапасы.Коэффициент;
					Распределить = Распределить - Количество;
				КонецЦикла; 
			Иначе
				СтрокиОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);
				Для каждого СтрокаОстатка Из СтрокиОстатков Цикл
					Количество = Мин(Распределить, СтрокаОстатка.Количество / ВыборкаЗапасы.Коэффициент);
					Если Количество = 0 Тогда
						Продолжить;
					КонецЕсли; 
					Если Количество = Распределить Тогда
						НоваяСтрока.ЗаказПокупателя = СтрокаОстатка.ЗаказПокупателя;
						Распределить = 0;
						СтрокаОстатка.Количество = СтрокаОстатка.Количество - Количество * ВыборкаЗапасы.Коэффициент;
					Иначе
						ДополнительнаяСтрока = Запасы.Добавить();
						ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока, НоваяСтрока);
						ДополнительнаяСтрока.ЗаказПокупателя = СтрокаОстатка.ЗаказПокупателя;
						ДополнительнаяСтрока.Количество = Количество;
						НоваяСтрока.Количество = НоваяСтрока.Количество - Количество;
						ПеренестиВПропорции(ДополнительнаяСтрока, НоваяСтрока, "Сумма", Количество / Распределить);
						ПеренестиВПропорции(ДополнительнаяСтрока, НоваяСтрока, "СуммаНДС", Количество / Распределить);
						ПеренестиВПропорции(ДополнительнаяСтрока, НоваяСтрока, "Всего", Количество / Распределить);
						Распределить = Распределить - Количество;
						СтрокаОстатка.Количество = 0;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполнения документа на основании авансовый отчет.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.АвансовыйОтчет - авансовый отчет
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоАвансовомуОтчету(ДанныеЗаполнения) Экспорт
	
	Организация = ДанныеЗаполнения.Организация;
	ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
	СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
	НДСВключатьВСтоимость = ДанныеЗаполнения.НДСВключатьВСтоимость;
	Курс = ДанныеЗаполнения.Курс;
	Кратность = ДанныеЗаполнения.Кратность;
	НалогообложениеНДС = ДанныеЗаполнения.НалогообложениеНДС; 
	
	// Заполнение табличной части документа.	
	Запасы.Очистить();
	Для каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Запасы Цикл
		
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		НоваяСтрока.ДокументПоступления	= ДанныеЗаполнения.Ссылка;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоАвансовомуОтчету()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриходнаяНакладная")] = "ЗаполнитьПоПриходнойНакладной";
	СтратегияЗаполнения[Тип("ДокументСсылка.АвансовыйОтчет")] = "ЗаполнитьПоАвансовомуОтчету";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	Если Запасы.Итог("СуммаРасходов") <> Расходы.Итог("Всего") Тогда
		ТекстСообщения = НСтр("ru = 'Сумма услуг не равна распределенной сумме по запасам.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
	РасчетыРаботаСФормамиВызовСервера.ПроверитьЗаполнениеДокументаПредоплаты(Контрагент, ПроверяемыеРеквизиты);
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, Отказ, Истина);
	
	Если Запасы.Количество() > 0 Тогда
		Если ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			ПроверяемыеРеквизиты.Добавить("Запасы.СтруктурнаяЕдиница");
		Иначе
			ПроверяемыеРеквизиты.Добавить("СтруктурнаяЕдиница");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Контрагент) И НЕ Контрагент.ВестиРасчетыПоДоговорам
			И НЕ ЗначениеЗаполнено(Договор) Тогда
		Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;

	СуммаДокумента = Расходы.Итог("Всего");

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ДополнительныеРасходы.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ПроведениеДокументовУНФ.ОтразитьДвижения("Запасы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("Закупки", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗаказыПоставщикам", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыСПоставщиками", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыКассовыйМетод", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыНераспределенные", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыОтложенные", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗакупкиДляКУДиР", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаДокументов", ТаблицыДляДвижений, Движения, Отказ);
	
	// Запись наборов записей.
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.ДополнительныеРасходы.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	// Запись цен в регистр сведений Цены номенклатуры контрагентов.
	Документы.ДополнительныеРасходы.ЗарегистрироватьЦеныПоставщика(Ссылка, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.ДополнительныеРасходы.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
	// Удаление цен из регистра сведений Цены номенклатуры контрагентов.
	Документы.ДополнительныеРасходы.УдалитьЦеныПоставщика(Ссылка);
	
	// Подчиненный счет-фактура (полученный)
	Если Не Отказ Тогда
		СчетаФактурыУНФ.ОтменитьПроведениеПодчиненногоСчетаФактуры(Ссылка, Номер, Дата, ДополнительныеСвойства, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриКопировании объекта.
//
Процедура ПриКопировании(ОбъектКопирования)

	Предоплата.Очистить();

КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка Тогда

		Возврат;

	КонецЕсли;

	СчетаФактурыУНФ.ПриЗаписиДокументаОснованияСчетаФактуры(Ссылка, ДополнительныеСвойства, Истина);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПеренестиВПропорции(СтрокаПриемник, СтрокаИсточник, ИмяПоля, Пропорция)
	
	Значение = СтрокаИсточник[ИмяПоля] * Пропорция;
	СтрокаПриемник[ИмяПоля] = Значение;
	СтрокаИсточник[ИмяПоля] = СтрокаИсточник[ИмяПоля] - Значение;
	
КонецПроцедуры

Функция ПолучитьНОДДляМассива(МассивЧисел, Кратность)
	
	Если МассивЧисел.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	НОД = МассивЧисел[0] * Кратность;
	
	Для каждого Сч Из МассивЧисел Цикл
		НОД = ПолучитьНОД(НОД, Сч * Кратность);
	КонецЦикла;
	
	Возврат НОД;
	
КонецФункции

Функция ПолучитьНОД(ЧислоА, ЧислоБ)
	
	Возврат ?(ЧислоБ = 0, ЧислоА, ПолучитьНОД(ЧислоБ, ЧислоА % ЧислоБ));
	
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли