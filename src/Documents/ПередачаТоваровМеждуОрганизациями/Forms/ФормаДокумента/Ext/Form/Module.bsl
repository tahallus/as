
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; // Используется механизмом обработки изменения реквизитов ТЧ

&НаСервере
Перем КэшХарактеристикиИПартии;

#КонецОбласти 

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ТипЗнч(КэшЗначений) <> Тип("Структура") Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	
	КэшЗначений.Вставить("ИспользоватьМинимальныеЦены", ЦенообразованиеСерверПовтИсп.МинимальныеЦеныИспользуются());
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы", Ложь);

	
	УстановитьУсловноеОформлениеФормы();
	
	РазрешеноРедактированиеДокумента = ПравоДоступа("Редактирование",
		Метаданные.Документы.ПередачаТоваровМеждуОрганизациями);
	
	// Запомним предопределенные значения
	ВариантЗаполненияРасшифровкиПросмотр = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Просмотр");
	ВариантЗаполненияРасшифровкиВручную = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Вручную");
	
	СпособыЗачетаВручную = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную");
	СпособыЗачетаАвто = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто");
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	ЭтотОбъект.ОснованиеСоздания = Параметры.Основание;
	ДатаПриСозданииНаСервере = Объект.Дата;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	Организация = Объект.ОрганизацияПолучатель;
	Договор = Объект.Договор;
	Если ЗначениеЗаполнено(Договор) Тогда
		ВалютаРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВалютаРасчетов", Истина);
		СпособЗаполненияСтавкиНДС = Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоДоговору(
			Договор);
	КонецЕсли;
	НациональнаяВалюта = УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту();
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ ЗначениеЗаполнено(Параметры.Основание) И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС(Истина);
		КонецЕсли;
		// ГИСМ/ВЕТИС
		Если Не ЗначениеЗаполнено(Объект.СпособПродажиГИСМ) Тогда
			Объект.СпособПродажиГИСМ = "опт";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация, 
				?(ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница), Объект.СтруктурнаяЕдиница, Неопределено), Объект.Дата);
		КонецЕсли;
		Если Объект.ВидОперации <> Перечисления.ВидыОперацийПередачаТоваровМеждуОрганизациями.РучноеЗаполнение 
			И НЕ ТолькоПросмотр Тогда
			Объект.ВидОперации = Перечисления.ВидыОперацийПередачаТоваровМеждуОрганизациями.РучноеЗаполнение;
		КонецЕсли;
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			СтрокаТабличнойЧасти.КоличествоПлан = 0;
		КонецЦикла; 
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СпециальныйНалоговыйРежим) Тогда
		Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация, 
			?(ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница), Объект.СтруктурнаяЕдиница, Неопределено), Объект.Дата);
	КонецЕсли;
	
	// Сформируем надпись цены и валюты.
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	СтруктураНадписи = Новый Структура;
	СтруктураНадписи.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураНадписи.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("ВалютаРасчетов", ВалютаРасчетов);
	СтруктураНадписи.Вставить("Курс", Объект.Курс);
	СтруктураНадписи.Вставить("КурсНациональнаяВалюта", КурсНациональнаяВалюта);
	СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураНадписи.Вставить("УчетВалютныхОпераций", УчетВалютныхОпераций);
	СтруктураНадписи.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураНадписи.Вставить("СпециальныйНалоговыйРежим", Объект.СпециальныйНалоговыйРежим);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	ИменаТЧ = Новый Массив;
	ИменаТЧ.Добавить(Новый Структура("ИмяПоляПроверки, ИмяПоляОформления", "Объект.Запасы.СтранаПроисхождения", "ЗапасыНомерГТД"));
	
	ГрузовыеТаможенныеДекларацииСервер.ПриСозданииНаСервере(ЭтаФорма, ИменаТЧ, КэшЗначений);
	КэшЗначений.Вставить("ВерсияПодчиненногоСчетФактуры", Неопределено);
	КэшЗначений.Вставить("МодифицированностьФормы", Ложь);
	КэшЗначений.Вставить("ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати", 
		Константы.ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати.Получить());
	КэшЗначений.Вставить("Заказы", Новый Соответствие);
	
	// Наборы
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)  Тогда
		Если Параметры.ЗначенияЗаполнения.Свойство("Запасы") Тогда
			Для каждого ДанныеСтроки Из Параметры.ЗначенияЗаполнения.Запасы Цикл
				Если ДанныеСтроки.Свойство("ЭтоНабор") И ДанныеСтроки.ЭтоНабор Тогда
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
					Если ДанныеСтроки.Свойство("Характеристика") И ЗначениеЗаполнено(ДанныеСтроки.Характеристика) Тогда
						СтруктураОтбора.Вставить("Характеристика", ДанныеСтроки.Характеристика);
					КонецЕсли;
					Строки = Объект.Запасы.НайтиСтроки(СтруктураОтбора);
					Для каждого СтрокаНабора Из Строки Цикл
						СтруктураДанные = Новый Структура;
						СтруктураДанные.Вставить("Организация", Объект.Организация);
						СтруктураДанные.Вставить("Номенклатура", СтрокаНабора.Номенклатура);
						СтруктураДанные.Вставить("Характеристика", СтрокаНабора.Характеристика);
						СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
						Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
							СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
							СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
							СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
							СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
							СтруктураДанные.Вставить("Коэффициент", 1);
						КонецЕсли;     
						
						ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, СтрокаНабора, СтруктураДанные);

						СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
						Если НЕ СтруктураДанные.ИспользоватьХарактеристики Тогда
							ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, СтрокаНабора, СтруктураДанные);
						КонецЕсли; 
					КонецЦикла; 
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы);
		ОбновитьПризнакиНабора(Объект.Запасы);
	КонецЕсли;
	// Конец Наборы
	
	// НДС 20% Переходный период
	ПересчитатьНДСС18На20 = Ложь;
	Если ЗначениеЗаполнено(Параметры.Основание)
		И ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
		И Год(Параметры.Основание.Дата) < 2019 Тогда
		СтавкаНДС18 = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.Общая, Дата('20180101'));
		СтавкаНДС18Расчетная = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.ОбщаяРасчетная, Дата('20180101'));
		Для Каждого СтрокаЗапасы Из Объект.Запасы Цикл
			Если СтрокаЗапасы.СтавкаНДС = СтавкаНДС18 Тогда
				ПересчитатьНДСС18На20 = Истина;
				Прервать;
			КонецЕсли;
			Если СтрокаЗапасы.СтавкаНДС = СтавкаНДС18Расчетная Тогда
				ПересчитатьНДСС18На20 = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// Конец  НДС 20% Переходный период
	
	// Ячейки
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		КэшЗначений.Вставить("УчетПоЯчейкам", ПолучитьФункциональнуюОпцию("УчетПоЯчейкам"));
		ОбновитьДоступностьЯчеек();
		ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	КонецЕсли; 
	// Конец Ячейки
	
	УстановитьВидимостьИДоступность();
	
	// Установить надписи счет-фактура и основание
	СчетФактураСсылка = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(Объект.Ссылка, Ложь);
	Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(СчетФактураСсылка);
	КэшЗначений.Вставить("СчетФактураСсылка", ?(ТипЗнч(СчетФактураСсылка) = Тип("Структура"), СчетФактураСсылка.Ссылка, Неопределено));
	
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование);
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойСклад");
	ОсновнойСклад = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
	
	// Установка видимости договора.
	УстановитьВидимостьДоговора();
	
	// Настройка подразделения
	Если НЕ ПолучитьФункциональнуюОпцию("УчетПоНесколькимПодразделениям") Тогда
		Элементы.ДополнительноПраваяКолонка.Объединенная = Истина;
	КонецЕсли;
	
	// ЭДО
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец ЭДО
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Запасы");
	
	// ГрупповоеИзменениеСтрок
	ЗаполнитьСписокДействий();
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер(), 
		ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
	ЗапасыИзменениеСтрокДействиеПриОткрытии = ЗапасыИзменениеСтрокДействие;
	УстановитьПометку(Истина);
	// Конец ГрупповоеИзменениеСтрок
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.РасходнаяНакладная.ТабличныеЧасти.Запасы, 
		НастройкиЗагрузкиДанных, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	ПечатьДокументовУНФ.КорректировкаРазмещениеПодчиненнойГруппыКомандПечати(ЭтаФорма, Элементы.ПодменюПечать, 
		Элементы.ПодменюПечатьФаксимиле);
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ЭлектронныеВесы", , 
		МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	УстановитьВидимостьПечатиЧека();
	Если ИспользоватьПодключаемоеОборудование И ЗначениеЗаполнено(Объект.КонтрагентПолучатель) Тогда
		Справочники.Контрагенты.ДанныеКИКонтрагентаДляВыбораНаФорме(Объект.КонтрагентПолучатель, Элементы, ПоляКИДляОтправкиЧека());
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	// Серии номенклатуры
	ИспользоватьСерииНоменклатурыОстатки = СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки();
	Элементы.ЗапасыГруппаСерииНоменклатуры.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Элементы.ФормаОбщаяКомандаНапомнить.Видимость = Ложь;
		Элементы.ГруппаГлобальныеКоманды.Видимость = Ложь;
		Элементы.ШапкаТабличнаяЧасть.Видимость = Ложь;
		Элементы.ПоказатьВЖурналеКонтрагентов.Видимость = Ложь;
		Элементы.ГруппаПредоплата.Видимость = Ложь;
		Элементы.ГруппаПредоплатаПолучатель.Видимость = Ложь;
		Элементы.ГруппаДополнительно.Видимость = Ложь;
		Элементы.ИтогСуммаНДС.Видимость = Ложь;
		Элементы.ГруппаСсылки.Видимость = Ложь;
		Элементы.ГруппаЦеныИВалюта.Видимость = Ложь;
		Элементы.ЗапасыГруппаКопированиеСтрок.Видимость = Ложь;
		Элементы.ЗапасыПодбор.Видимость = Ложь;
		Элементы.ЗагрузкаДанныхИзВнешнегоИсточника.Видимость = Ложь;
		Элементы.ЗапасыИзменитьСтроки.Видимость = Ложь;
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		
		Элементы.ФормаЗаписать.Видимость = Ложь;
		Элементы.ФормаПровести.Видимость = Ложь;
		Элементы.ФормаОтменаПроведения.Видимость = Ложь;
		Элементы.ФормаПоказатьВСписке.Видимость = Ложь;
		Элементы.ФормаКоманднаяПанельКомандыЭДО.Видимость = Ложь;
		Элементы.ФормаПровестиИЗакрыть.Заголовок = НСтр("ru = 'Готово'");
	КонецЕсли;
	// Конец МобильноеПриложение
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииСервер();
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияВЕТИС
	ФОВестиУчетПодконтрольныхТоваровВЕТИС = ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС");
	Если ФОВестиУчетПодконтрольныхТоваровВЕТИС Тогда
		ИнтеграцияИС.ПриСозданииНаСервереВФормеДокументаОснования(
			ЭтотОбъект,
			Объект,
			ИнтеграцияИС.ПараметрыИнтеграцииВФорме("ВетИС",ИнтеграцияИС.ИмяЭлементаДляРазмещения()));
	КонецЕсли;
	// Конец ИнтеграцияВЕТИС
	
	// ИнтеграцияГосИС
	СобытияФормИС.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
	ШтрихкодированиеИС.ИнициализироватьКэшМаркируемойПродукции(ЭтотОбъект);
	// Конец ИнтеграцияГосИС
	
	ОпределитьВидимостьНастроекУчетаВНалогообложении();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПрочитатьВесИОбъемЕдиницыТовара();
	КонецЕсли;
	
	Если Параметры.Свойство("Страница")
		И НЕ ПустаяСтрока(Параметры.Страница)
		И НЕ Элементы.Найти(Параметры.Страница) = Неопределено Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы[Параметры.Страница];
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая()
		Тогда
		НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект, Истина)
	КонецЕсли;
	
	// ПодарочныеСертификаты
	КэшЗначений.Вставить("ВыводитьСоветОплатаСертификатомВВалюте", УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователи.ТекущийПользователь(),
		"ВыводитьСоветОплатаСертификатомВВалюте",
		Истина));
	
	ИсходноеОписаниеТипов = РеквизитФормыВЗначение("Объект").Метаданные().ТабличныеЧасти.Предоплата.Реквизиты.Документ.Тип;
	ОписаниеТиповБезНоменклатуры = Новый ОписаниеТипов(ИсходноеОписаниеТипов,, "СправочникСсылка.Номенклатура");
	Элементы.ПредоплатаДокумент.ОграничениеТипа = ОписаниеТиповБезНоменклатуры;
	Элементы.ПредоплатаПолучательДокумент.ОграничениеТипа = ОписаниеТиповБезНоменклатуры;
	//Конец ПодарочныеСертификаты
	
	// Взаиморасчеты
	ВзаиморасчетыПриСозданииНаСервере(ИмяТЧПредоплата());
	ВзаиморасчетыПриСозданииНаСервере(ИмяТЧПредоплатаПолучатель());
	// Конец Взаиморасчеты
	
	МобильныйКлиентУНФ.НастроитьФормуОбъектаМобильныйКлиент(Элементы, "Запасы");
	
	РезервированиеЗапасов	= ПолучитьФункциональнуюОпцию("РезервированиеЗапасов");
	РазрешитьСкладыВТабличныхЧастях = ПолучитьФункциональнуюОпцию("РазрешитьСкладыВТабличныхЧастях");
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаЗаполнить",
		"Видимость",
		Объект.ВидОперации = Перечисления.ВидыОперацийПередачаТоваровМеждуОрганизациями.АвтоЗаполнен 
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПередачаТоваровМеждуОрганизациями.АвтоТребуетЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	СтатистикаИспользованияФормКлиент.ПроверитьЗаписатьСтатистикуКоманды(
		"СоздатьНаОсновании.РасходнаяНакладная",
		ЭтотОбъект.ВладелецФормы,
		ЭтотОбъект.ОснованиеСоздания);
	
	// ГрупповоеИзменениеСтрок
	ОпределитьОбъектИзменений();
	// Конец ГрупповоеИзменениеСтрок
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	УправлениеНебольшойФирмойКлиент.ЗаполнитьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП);
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП);
	// Конец ПодключаемоеОборудование
	
	// ЭДО
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭДО
	
	ОбновитьПодвалФормы();
	
	// НДС 20% Переходный период
	Если ПересчитатьНДСС18На20 Тогда
		ОповещениеНДСС18На20 = Новый ОписаниеОповещения("ВыполнитьПересчетНДСС18На20", ЭтаФорма);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Пересчитать(сумма не изменяется)'"));
		Если Объект.СуммаВключаетНДС Тогда
			Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Пересчитать (сумма увеличится на 2% НДС)'"));
		КонецЕсли;
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
		ТекстВопроса = НСтр("ru = 'В документе указана ставка 18%. Пересчитать автоматически на 20%?'");
		ПоказатьВопрос(ОповещениеНДСС18На20, ТекстВопроса, Кнопки);
	КонецЕсли;
	// Конец  НДС 20% Переходный период
	
	ОбновитьОтображениеКолонокВРазрезеЗапасов();
	УстановитьДоступностьПечатиЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	СтатистикаИспользованияФормКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
	
	Если НЕ ЗавершениеРаботы Тогда
		// ГрупповоеИзменениеСтрок
		СохранитьТекущееДействиеИзмененияСтрок();
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПечатьТТН.Форма.ДанныеПечати" Тогда
		
		Для каждого ЗначенияРеквизита Из ВыбранноеЗначение Цикл
			
			Если ЗначенияРеквизита.Ключ = "БанковскийСчетОрганизации" Тогда
				
				Объект.БанковскийСчет = ЗначенияРеквизита.Значение;
				
			Иначе
				
				Объект[ЗначенияРеквизита.Ключ] = ЗначенияРеквизита.Значение;
				
			КонецЕсли;
			
			Модифицированность = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() И Не СчитанаДисконтнаяКарта Тогда
		Если ИмяСобытия = "ScanData" Тогда
			// Преобразуем предварительно к ожидаемому формату
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[0], 1)); // Достаем штрихкод из основных данных
			Иначе
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1)); // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// ДисконтныеКарты
	Если СчитанаДисконтнаяКарта Тогда
		СчитанаДисконтнаяКарта = Ложь;
	КонецЕсли;
	// Конец ДисконтныеКарты
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		
		ЭтотОбъект.Прочитать();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновлениеТекстаПроСчетФактуру" Тогда
		
		ПредставлениеЗаголовка = РаботаСФормойДокументаКлиент.ПредставлениеЗаголовкаПодчиненногоСчетаФактуры(Объект.Ссылка, Источник, Параметр, КэшЗначений);
		Если ПредставлениеЗаголовка <> Неопределено Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетФактураНадпись", "Заголовок", ПредставлениеЗаголовка);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Контрагент" 
		И ЗначениеЗаполнено(Параметр) Тогда
		
		Если Объект.ОрганизацияПолучатель = Параметр Тогда
			УстановитьВидимостьДоговора();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище	= Параметр;
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, "Запасы", Истина, Истина);
		
	
	ИначеЕсли ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ИзменилосьКоличество = ПолучитьСерииНоменклатурыИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки);
		Если ИзменилосьКоличество Тогда
			РассчитатьСуммуВСтрокеТабличнойЧасти();
		КонецЕсли; 
		
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Запасы");
	КонецЕсли;
	
	// ИнтеграцияГИСМ
	Если ИмяСобытия = "Запись_УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииСервер();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияГИСМ"
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		ОбновитьСтатусГИСМ();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменГИСМ"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусГИСМФормахВДокументах)) Тогда
		
		ОбновитьСтатусГИСМ();
		
	КонецЕсли;
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияГосИС
	Если ФОВестиУчетПодконтрольныхТоваровВЕТИС Тогда
		ИнтеграцияИСКлиент.ОбработкаОповещенияВФормеДокументаОснования(
			ЭтотОбъект,
			Объект,
			ИмяСобытия,
			Параметр,
			Источник);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КэшированныеЗначения",    Неопределено);
	ДополнительныеПараметры.Вставить("СтандартнаяОбработка",    Истина);
	ДополнительныеПараметры.Вставить("ТребуетсяСерверныйВызов", Ложь);
	СобытияФормИСКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
	// Конец ИнтеграцияГосИС
	 
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// ЭДО
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭДО
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// Наборы
	Если НаборыКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Источник) Тогда
		ОбновитьСоставНабора(Параметр.НоменклатураНабора, Параметр.ХарактеристикаНабора, Параметр.Количество, 
			Параметр.Цена, Параметр.СоставНабора);
	КонецЕсли; 
	// Конец Наборы
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииСервер();
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияВЕТИС
	//++(
	//ФОВестиУчетПодконтрольныхТоваровВЕТИС = ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС");
	//Если ФОВестиУчетПодконтрольныхТоваровВЕТИС Тогда
	//	ПараметрыИнтеграции = ИнтеграцияИС.ПараметрыИнтеграцииВФорме();
	//	ИнтеграцияИС.ОбновитьПолеИнтеграцииВФормеДокументаОснования(ЭтотОбъект, Объект, ПараметрыИнтеграции);
	//КонецЕсли;
	//)++
	// Конец ИнтеграцияВЕТИС
	
	// ИнтеграцияГосИС
	СобытияФормИС.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец ИнтеграцияГосИС
	
	ПрочитатьВесИОбъемЕдиницыТовара();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Наборы
	ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы);
	ОбновитьПризнакиНабора(Объект.Запасы); 
	// Конец Наборы
	
	// Ячейки
	Если ТипЗнч(КэшЗначений) <> Тип("Структура") Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	КэшЗначений.Вставить("УчетПоЯчейкам", ПолучитьФункциональнуюОпцию("УчетПоЯчейкам"));
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ОбновитьЗаголовкиЗакладокОплаты(ИмяТЧПредоплата());
	ОбновитьЗаголовкиЗакладокОплаты(ИмяТЧПредоплатаПолучатель());
	
	// Обновим реквизиты формы
	Организация = Объект.ОрганизацияПолучатель;
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	// ЭДО
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.КомандыЭДО_ПриЧтенииФормыДокумента(ЭтотОбъект);
	// Конец ЭДО
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("Проведение"
			+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	КэшЗначений.МодифицированностьФормы = Модифицированность;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТекстСообщения = "";
		Справочники.ДоговорыКонтрагентов.ПроверитьСоответствиеДоговораУсловиямДокумента(
			ТекстСообщения,
			Объект.Договор,
			Объект.Ссылка,
			Объект.Организация,
			Объект.ОрганизацияПолучатель,
			Отказ);
		
		Если ТекстСообщения <> "" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ?(Отказ, СтрШаблон(НСтр("ru = 'Документ не проведен. %1'"), ТекстСообщения), ТекстСообщения);
			
			Если Отказ Тогда
				Сообщение.ПутьКДанным = "Объект";
				Сообщение.Поле = "Договор";
				Сообщение.Сообщить();
				Возврат;
			Иначе
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
		
		Если УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройкиЗачетаАвансов() = ПредопределенноеЗначение("Перечисление.ДаНет.Да")
			И ТекущийОбъект.Предоплата.Количество() = 0
			И ТекущийОбъект.СпособЗачетаПредоплаты = СпособыЗачетаВручную Тогда
			ЗаполнитьПредоплату(ТекущийОбъект, ИмяТЧПредоплата());
		КонецЕсли;
		
		Если УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройкиЗачетаАвансов() = ПредопределенноеЗначение("Перечисление.ДаНет.Да")
			И ТекущийОбъект.ПредоплатаПолучатель.Количество() = 0
			И ТекущийОбъект.СпособЗачетаПредоплатыПолучатель = СпособыЗачетаВручную Тогда
			ЗаполнитьПредоплату(ТекущийОбъект, ИмяТЧПредоплатаПолучатель());
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТаблицаДокументовДляИзменения", ТаблицаДокументовДляИзменения);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
	СохранитьДанныеХарактеристикиПартииВКэш();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// ЭДО
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭДО
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	ТекущийОбъект.ДополнительныеСвойства.Свойство("ВерсияПодчиненногоСчетФактуры", КэшЗначений.ВерсияПодчиненногоСчетФактуры);
	
	// ГрупповоеИзменениеСтрок
	Если Элементы.ГруппаЗапасыИзменениеСтрок.Видимость Тогда
		УстановитьПометку(Истина);
	КонецЕсли;
	// Конец ГрупповоеИзменениеСтрок
	
	// ЕГАИС
	УстановитьДоступностьЭлементовЕГАИС();
	// Конец ЕГАИС
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииСервер();
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияГосИС
	СобытияФормИС.ПослеЗаписиНаСервере(ЭтаФорма);
	// Конец ИнтеграцияГосИС
	
	ПрочитатьВесИОбъемЕдиницыТовара();
	
	// Наборы
	ОбновитьПризнакиНабора(Объект.Запасы);
	// Конец Наборы
	
	//Ячейки
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ВосстановитьДанныеХарактеристикиПартииИзКэш();

	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы", Ложь);

	// Взаиморасчеты
	ДатаПриСозданииНаСервере = Объект.Дата;
	
	Если ТекущийОбъект.Проведен ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ТаблицаДокументовДляИзменения.Очистить();
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаПредоплата
		И Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаПросмотр Тогда
		ИстинаПослеЗаписиНаСервере = Истина;
		ЗаполнитьТаблицуПросмотраНаСервере(ИстинаПослеЗаписиНаСервере, ИмяТЧПредоплата());
	КонецЕсли;
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаПредоплатаПолучатель
		И Элементы.СтраницыРасчетовСКонтрагентомПолучатель.ТекущаяСтраница = Элементы.СтраницаПросмотрПолучатель Тогда
		ИстинаПослеЗаписиНаСервере = Истина;
		ЗаполнитьТаблицуПросмотраНаСервере(ИстинаПослеЗаписиНаСервере, ИмяТЧПредоплатаПолучатель());
	КонецЕсли;
	// Конец Взаиморасчеты
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	// Наборы
	ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы); 
	// Конец Наборы
	
	Если КэшЗначений.МодифицированностьФормы = Истина
		И КэшЗначений.ВерсияПодчиненногоСчетФактуры = "1.6.11" Тогда
		
		ТекстВопроса = НСтр("ru = 'В накладную были внесены изменения.
			|Требуется самостоятельно поправить подчиненный документ счет-фактура'");
		
		ПоказатьПредупреждение(, ТекстВопроса, 0, НСтр("ru ='Счет-фактура'"));
		
	КонецЕсли;
	
	Оповестить("ОповещениеОбИзмененииДолга");
	
	Если ПараметрыЗаписи.Свойство("ПринудительноЗакрытьФорму") И ПараметрыЗаписи.ПринудительноЗакрытьФорму Тогда
		Закрыть();
	КонецЕсли;
	
	// Подарочные сертификаты
	Если Объект.ВалютаДокумента <> УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеКонстанты("НациональнаяВалюта")
		И ЕстьСертификаты() Тогда
		
		Если КэшЗначений.ВыводитьСоветОплатаСертификатомВВалюте Тогда
		
			ПараметрыСовета = Новый Структура;
			ПараметрыСовета.Вставить("Заголовок", НСтр("ru = 'Предупреждение'"));
			ПараметрыСовета.Вставить("ТекстСообщения", НСтр("ru = 'Оплата сертификатом будет возможна только в национальной валюте.'"));
			ПараметрыСовета.Вставить("ВидимостьБольшеНеПоказывать", Истина);
			ПараметрыСовета.Вставить("ИмяПользовательскойНастройки", "ВыводитьСоветОплатаСертификатомВВалюте");
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыводаСовета", ЭтотОбъект, ПараметрыСовета);
			ОткрытьФорму("ОбщаяФорма.ФормаСообщения", ПараметрыСовета, ЭтаФорма, Истина, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьОтображениеКолонокВРазрезеЗапасов();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
// Процедура обрабатывает результаты открытия формы совета пользователю
//
Процедура ПослеВыводаСовета(РезультатЗакрытия, ПараметрыСовета) Экспорт
	
	Если ПараметрыСовета.ВидимостьБольшеНеПоказывать 
		И ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		КэшЗначений.Вставить(ПараметрыСовета.ИмяПользовательскойНастройки, РезультатЗакрытия.ЗначениеПользовательскойНастройки);
		ПерсональныеНастройкиВызовСервера.Установить(РезультатЗакрытия.ЗначениеПользовательскойНастройки,
			ПараметрыСовета.ИмяПользовательскойНастройки);
		
	КонецЕсли;
	
КонецПроцедуры // ПослеВыводаСовета()

&НаСервере
Функция ЕстьСертификаты()
	
	Возврат РаботаСПодарочнымиСертификатами.ЕстьСертификаты(Объект.Запасы.Выгрузить());
	
КонецФункции

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением, ВалютаРасчетов);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВалютаРасчетов) Тогда
			ПересчитатьКурсКратностьВалютыРасчетов(СтруктураДанные);
		КонецЕсли;	
		
		// Сформируем надпись цены и валюты.
		СтруктураНадписи = Новый Структура;
		СтруктураНадписи.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураНадписи.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураНадписи.Вставить("ВалютаРасчетов", ВалютаРасчетов);
		СтруктураНадписи.Вставить("Курс", Объект.Курс);
		СтруктураНадписи.Вставить("КурсНациональнаяВалюта", КурсНациональнаяВалюта);
		СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураНадписи.Вставить("УчетВалютныхОпераций", УчетВалютныхОпераций);
		СтруктураНадписи.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураНадписи.Вставить("СпециальныйНалоговыйРежим", Объект.СпециальныйНалоговыйРежим);
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
	КонецЕсли;
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.Номер = "";
	
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении();
	
	Компания = СтруктураДанные.Компания;
	
	Объект.БанковскийСчет = СтруктураДанные.БанковскийСчет;
	Объект.ПодписьРуководителя = СтруктураДанные.ПодписьРуководителя;
	Объект.ПодписьГлавногоБухгалтера = СтруктураДанные.ПодписьГлавногоБухгалтера;
	
	Объект.Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.ОрганизацияПолучатель, Объект.Организация);
	ОбработатьИзменениеДоговора();
	
	УстановитьНастройкиУчетаВНалогообложении();
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура;
	СтруктураНадписи.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураНадписи.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("ВалютаРасчетов", ВалютаРасчетов);
	СтруктураНадписи.Вставить("Курс", Объект.Курс);
	СтруктураНадписи.Вставить("КурсНациональнаяВалюта", КурсНациональнаяВалюта);
	СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураНадписи.Вставить("УчетВалютныхОпераций", УчетВалютныхОпераций);
	СтруктураНадписи.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураНадписи.Вставить("СпециальныйНалоговыйРежим", Объект.СпециальныйНалоговыйРежим);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита();
	ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	СтруктурнаяЕдиницаПриИзмененииНаСервере();
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЯчейкаПриИзменении(Элемент)
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		СтрокаТабличнойЧасти.Ячейка = Объект.Ячейка;
	КонецЦикла; 
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПолучательПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.КонтрагентПолучатель) Тогда
		Объект.КонтактноеЛицоПодписант = ПолучитьПодписантаКонтрагентаПолучателя();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговора();
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.ОрганизацияПолучатель, Объект.Договор);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "НачалоВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Модифицированность = Истина;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		ЗаполнитьПоОснованиюНачало();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		// Выбрать основание
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТипаОснованияЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокДокументОснование, Элементы.ДокументОснованиеНадпись);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда
		
		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоСсылке(Объект.ДокументОснование);
		
	КонецЕсли;
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ОбработкаНавигационнойСсылки");
	
КонецПроцедуры

&НаКлиенте
Процедура СчетФактураНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СчетаФактурыУНФКлиент.ОткрытьСчетФактуру(ЭтотОбъект);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ОбработкаНавигационнойСсылки");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипаОснованияЗавершение(ВыбранноеЗначение, Параметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		СтруктураПараметровОтбора = Новый Структура();
		Для каждого ЭлементОтбора Из ПараметрыВыбораДокументаОснования Цикл
			ИмяПоляОтбора = СтрЗаменить(ЭлементОтбора.Имя, "Отбор.", "");
			СтруктураПараметровОтбора.Вставить(ИмяПоляОтбора, ЭлементОтбора.Значение);
		КонецЦикла;
		Если ВыбранноеЗначение.Значение = "Документ.ПриемИПередачаВРемонт.ФормаВыбора" Тогда
			СтруктураОтбора = Новый Структура("ВариантРемонта", ПредопределенноеЗначение("Перечисление.ВариантыРемонта.НашаМастерскаяМногоэтапныйРемонт"));
			СтруктураПараметровОтбора.Вставить("Отбор", СтруктураОтбора);
		КонецЕсли;
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ОткрытьФорму(ВыбранноеЗначение.Значение, СтруктураПараметровОтбора, ЭтотОбъект, , , , ОповещениеОЗакрытии);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбранноеЗначение, Параметры) Экспорт

	Если ВыбранноеЗначение <> Неопределено Тогда
		Объект.ДокументОснование = ВыбранноеЗначение;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбранноеЗначение);
		Модифицированность = Истина;
		ЗаполнитьПоОснованиюНачало();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало()

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения, 
		НСтр("ru = 'Заполнить документ по выбранному основанию?'"), 
		РежимДиалогаВопрос.ДаНет, 0);		

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДокументу(Объект.ДокументОснование);
		ОбновитьПодвалФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПродажиГИСМПриИзменении(Элемент)
	
	ИспользоватьГИСМ = Ложь;
	#Если НЕ МобильныйКлиент Тогда
		
		ИспользоватьГИСМ = Объект.ЕстьМаркируемаяПродукцияГИСМ;
		
	#КонецЕсли
	
	Если ИспользоватьГИСМ Тогда
		СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПолучательОткрытие(Элемент, СтандартнаяОбработка)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "Открытие");
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПолучательПриИзменении(Элемент)
	
	КонтрагентВестиРасчетыПоЗаказамПередИзменением = Ложь;
	ПустаяОрганизацияПередИзменением = Организация.Пустая();
	
	Если Организация <> Объект.ОрганизацияПолучатель Тогда
		
		ВидимостьДоговораПередИзменением = Элементы.Договор.Видимость;
		
		СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.ОрганизацияПолучатель, Объект.Организация);
		
		// Дисконтные карты
		СтруктураДанные.Вставить("ВызовИзПроцедурыПриИзмененииКонтрагента", Истина);
		СтруктураДанные.Вставить("ПустаяОрганизацияПередИзменением", ПустаяОрганизацияПередИзменением);
		// Конец Дисконтные карты.
		
		Объект.Договор = СтруктураДанные.Договор;
		
		Если Объект.Договор <> Договор 
			И Объект.СпособЗачетаПредоплаты <> СтруктураДанные.СпособЗачетаПредоплаты Тогда
			Объект.СпособЗачетаПредоплаты = СтруктураДанные.СпособЗачетаПредоплаты;
			СпособЗачетаПредоплатыПриИзмененииНаСервере(ИмяТЧПредоплата());
		КонецЕсли;
		
		Если Объект.Договор <> Договор Тогда
			СпособЗаполненияСтавкиНДС = СтруктураДанные.СпособЗаполненияСтавкиНДС;
		КонецЕсли;
		
		ПечатьДокументовУНФКлиент.ПриИзмененииДоговораКонтрагента(Объект.Договор, Объект.ОснованиеПечатиСсылка, Объект.ОснованиеПечати, КэшЗначений);
		
		Если (Объект.Предоплата.Количество() > 0 ИЛИ Объект.ПредоплатаПолучатель.Количество() > 0)
			И Объект.Договор <> Договор Тогда
			
			ПараметрыДокумента = Новый Структура;
			ПараметрыДокумента.Вставить("ИзменениеКонтрагента", Истина);
			ПараметрыДокумента.Вставить("ДанныеДоговора", СтруктураДанные);
			ПараметрыДокумента.Вставить("ОрганизацияПередИзменением", Организация);
			ПараметрыДокумента.Вставить("КонтрагентВестиРасчетыПоЗаказамПередИзменением", КонтрагентВестиРасчетыПоЗаказамПередИзменением);
			ПараметрыДокумента.Вставить("ВидимостьДоговораПередИзменением", ВидимостьДоговораПередИзменением);
			ПараметрыДокумента.Вставить("ДоговорПередИзменением", Договор);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОбОчисткеПредоплатыЗавершение", ЭтотОбъект, ПараметрыДокумента);
			ТекстВопроса = НСтр("ru = 'Зачет предоплаты будет очищен, продолжить?'");
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
		ОбработатьИзменениеУсловийДоговора(СтруктураДанные, Договор);
		
		Организация = Объект.ОрганизацияПолучатель;
		Договор = Объект.Договор;
		
	Иначе
		
		Объект.Договор = Договор; // Восстанавливаем автоматически очищенный договор.
		
	КонецЕсли;
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПодвалаФормы

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтранаПроисхожденияПриИзменении(Элемент)
	
	Если КэшЗначений.УчетГТД Тогда
	
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения)
			ИЛИ СтрокаТабличнойЧасти.СтранаПроисхождения = КэшЗначений.Россия Тогда
			
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНомерГТДПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
		
		ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
		Если ДатаГТД > КонецДня(Объект.Дата) Тогда
			
			ТекстСообщения = НСтр("ru ='Выбранная ГТД датирована более поздней датой, чем текущий документ.'");
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Запасы",
				СтрокаТабличнойЧасти.НомерСтроки, "НомерГТД");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , КонтекстноеПоле);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока И Копирование Тогда
		СтрокаТабличнойЧасти.КлючСвязи = 0;
		СтрокаТабличнойЧасти.СерииНоменклатуры = "";
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "СтруктурнаяЕдиница", "ПоложениеСклада");
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "Ячейка", "ПоложениеСклада");
	КонецЕсли;

	// ГрупповоеИзменениеСтрок
	СтрокаТабличнойЧасти.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗапасыСерииНоменклатуры" Тогда
		ОткрытьПодборСерииНоменклатуры();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПослеУдаленияСтрокиЗапасов()
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки",	 Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента",  Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		
	КонецЕсли;
	
	// ДисконтныеКарты
	// Конец ДисконтныеКарты
	
	Если СкладВШапке Тогда
		СтруктураДанные.Вставить("Склад", Объект.СтруктурнаяЕдиница);
		СтруктураДанные.Вставить("Ячейка", Объект.Ячейка);
	КонецЕсли;
	
	СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанные);
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, СтрокаТабличнойЧасти, СтруктураДанные);

	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	Если СтруктураДанные.Свойство("МинимальнаяЦена") 
		И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
		СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;
	КонецЕсли;
	
	// Серии номенклатуры
	Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанныеСтроки,
			ИспользоватьСерииНоменклатурыОстатки);
	КонецЦикла;
	
	Если  СтруктураДанные.ЭтоНабор И НЕ СтруктураДанные.ИспользоватьХарактеристики Тогда
		
		// Наборы
		ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, СтрокаТабличнойЧасти, СтруктураДанные);
		
		#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
		Элементы.Запасы.ЗакончитьРедактированиеСтроки(Истина);
		#КонецЕсли 
		
		ЗаполнитьПризнакиИспользованияХарактеристик();
		ОбновитьДоступностьЯчеек();
		ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
		
	Иначе
		
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
		СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
		СтрокаТабличнойЧасти.Количество = 1;
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		СтрокаТабличнойЧасти.Содержание = "";
		
		СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
		
		Если СтруктураДанные.ИспользоватьХарактеристики Тогда
			Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
				СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
			Иначе
				СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
		КонецЕсли;
		
		//Партии
		СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
		
		Если СтруктураДанные.ИспользоватьПартии Тогда
			Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
				СтруктураВыбораНоменклатуры.Партия = Неопределено;
			Иначе
				СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
			КонецЕсли;
		КонецЕсли;
		// Конец Партии
		
		СтрокаТабличнойЧасти.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
		
		// Наборы
		СтрокаТабличнойЧасти.ЭтоНабор = СтруктураДанные.ЭтоНабор;
		
		СтрокаТабличнойЧасти.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
		СтрокаТабличнойЧасти.НеобходимостьВводаСправкиНаАлкоголь = СтруктураДанные.ЭтоАлкогольнаяПродукция;
		
		СтрокаТабличнойЧасти.ВесЕдиницыТовара = СтруктураДанные.ВесЕдиницыТовара;
		СтрокаТабличнойЧасти.Вес = СтруктураДанные.ВесЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
		СтрокаТабличнойЧасти.ОбъемЕдиницыТовара = СтруктураДанные.ОбъемЕдиницыТовара;
		СтрокаТабличнойЧасти.Объем = СтруктураДанные.ОбъемЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
		
		Если Не (ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиница) И ПодборНоменклатурыИзСписка) Тогда
			ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСкладВСтрокеТЧЗапасы(СтрокаТабличнойЧасти, Объект, СтруктураДанные);
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
		
		РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	КонецЕсли;
	
	ПодборНоменклатурыИзСписка = Ложь;
	
	// Интеграция ГосИС
	Если ФОВестиУчетТабачнойПродукцииМОТП ИЛИ ФОВестиУчетОбувнойПродукцииИСМП Тогда
		ИнтеграцияИСМПУНФКлиент.ЗаполнитьСлужебныеРеквизитыИСМПВСтрокеТЧ(СтрокаТабличнойЧасти, СтруктураДанные);
	КонецЕсли;
	// Конец ИнтеграцияГосИС
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "РасходнаяНакладная", НастройкиФормыВыбораНоменклатуры, Истина, "Запасы", ВыбранноеЗначение.СтруктураНастроек);
		КонецЕсли;
		
		Если РазрешитьСкладыВТабличныхЧастях Тогда
			Если Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти")
				Или Объект.СтруктурнаяЕдиница = ВыбранноеЗначение.Склад
				Или Не ЗначениеЗаполнено(ВыбранноеЗначение.Склад) Тогда
				
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
				
				Если СтрокаТабличнойЧасти.Свойство("СтруктурнаяЕдиница") Тогда
					СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ВыбранноеЗначение.Склад;
				КонецЕсли;
				
				НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
			ИначеЕсли ЗначениеЗаполнено(ВыбранноеЗначение.Склад) И Не Объект.СтруктурнаяЕдиница = ВыбранноеЗначение.Склад Тогда
				Режим = РежимДиалогаВопрос.ДаНет;
				ПараметрыОповещения = ВыбранноеЗначение;
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаСкладВТЧ", ЭтотОбъект, ПараметрыОповещения);
				ПоказатьВопрос(Оповещение, НСтр("ru = 'Выбранный склад отличен от склада в шапке. Отобразить склад в табличной части?'"), Режим, 0);
				СтандартнаяОбработка = Ложь;
				Возврат;
			Иначе
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
				НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
		КонецЕсли;
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаСкладВТЧ(Результат, ПараметрыОповещения) Экспорт
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПараметрыОповещения);
		ЗапасыНоменклатураПриИзменении(Неопределено);
		НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
		Возврат;
	КонецЕсли;
	
	Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
	
	ОбновитьДанныеПослеПереключенияСкладШапка();
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПараметрыОповещения);
	
	Если СтрокаТабличнойЧасти.Свойство("СтруктурнаяЕдиница") Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ПараметрыОповещения.Склад;
	КонецЕсли;
	
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
	
	ЗапасыНоменклатураПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура",	 СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",	 СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия",				СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("СтранаПроисхождения",	СтрокаТабличнойЧасти.СтранаПроисхождения);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки",	 	Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента",	 	Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
		
		СтруктураДанные.Вставить("СтавкаНДС", 			СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("Цена",			 	СтрокаТабличнойЧасти.Цена);
		
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		
	КонецЕсли;    
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, СтрокаТабличнойЧасти, СтруктураДанные); 
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	Если СтруктураДанные.Свойство("МинимальнаяЦена") 
		И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
		СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;			
	КонецЕсли;
	
	Если  СтруктураДанные.ЭтоНабор Тогда
		
		// Наборы
		ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, СтрокаТабличнойЧасти, СтруктураДанные);
		
	Иначе
		
		СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
		СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
		
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.Содержание = "";
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		
	КонецЕсли;
	
	ОбновитьПодвалФормы();
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПартияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", 				Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура",				СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",				СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", 						СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",	СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
	СтруктураДанные.Вставить("ИспользоватьПартии", 			СтрокаТабличнойЧасти.ИспользоватьПартии);
	СтруктураДанные.Вставить("СтранаПроисхождения",			СтрокаТабличнойЧасти.СтранаПроисхождения);
	
	ЗапасыПартияПриИзмененииНаСервереБезКонтекста(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСодержаниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		ШаблонСодержания = ТекстСодержания(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ШаблонСодержания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СтрокаТабличнойЧасти.Вес = СтрокаТабличнойЧасти.ВесЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
	СтрокаТабличнойЧасти.Объем = СтрокаТабличнойЧасти.ОбъемЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
	
	НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти);
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	ОбновитьПодвалФормы();
	
КонецПроцедуры // ЗапасыКоличествоПриИзменении()

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Цена = 0
		И СтрокаТабличнойЧасти.Вес = 0
		И СтрокаТабличнойЧасти.Объем = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.Номенклатура, Неопределено, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
		СтруктураДанные,
		ВесИОбъемЕдиницТоваров(СтрокаТабличнойЧасти.Номенклатура, ВыбранноеЗначение, Коэффициент));
	КонецЕсли;
	
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда 
		Если КэшЗначений.ИспользоватьМинимальныеЦены
			И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
			
			СтрокаТабличнойЧасти.МинимальнаяЦена = СтрокаТабличнойЧасти.МинимальнаяЦена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		
		КонецЕсли;
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		СтрокаТабличнойЧасти.ВесЕдиницыТовара = СтруктураДанные.ВесЕдиницыТовара;
		СтрокаТабличнойЧасти.Вес = СтрокаТабличнойЧасти.ВесЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
		СтрокаТабличнойЧасти.ОбъемЕдиницыТовара = СтруктураДанные.ОбъемЕдиницыТовара;
		СтрокаТабличнойЧасти.Объем = СтрокаТабличнойЧасти.ОбъемЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	Если СтруктураДанные.Коэффициент <> 0 И СтруктураДанные.Коэффициент <> СтруктураДанные.ТекущийКоэффициент Тогда
		СтрокаТабличнойЧасти.КоличествоПлан = СтрокаТабличнойЧасти.КоличествоПлан * СтруктураДанные.ТекущийКоэффициент / СтруктураДанные.Коэффициент;
	КонецЕсли; 
	
КонецПроцедуры // ЗапасыЕдиницаИзмеренияОбработкаВыбора()

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияПриИзменении(Элемент)
	
	// В процедуре РассчитатьСуммуВСтрокеТабличнойЧасти есть вызов серверной процедуры.
	// Из-за этого данный вызов нельзя выполнить в процедуре ЗапасыЕдиницаИзмеренияОбработкаВыбора.
	// Использование ЗапасыЕдиницаИзмеренияОбработкаВыбора более оптимально, т.к. позволяет отказаться от выполнения большей части алгоритма,
	// если единица измерения не поменялась.
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	ОбновитьПодвалФормы();
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	ОбновитьПодвалФормы();
	
КонецПроцедуры // ЗапасыЦенаПриИзменении()

&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	ПараметрыРасчета = Новый Структура("РассчитатьЦену", Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
КонецПроцедуры // ЗапасыСуммаПриИзменении()

&НаКлиенте
Процедура ЗапасыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(СтрокаТабличнойЧасти, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
	
КонецПроцедуры // ЗапасыСтавкаНДСПриИзменении()

&НаКлиенте
Процедура ЗапасыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);	
	
КонецПроцедуры // ЗапасыСуммаНДСПриИзменении()

&НаКлиенте
Процедура ЗапасыСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Запасы.ТекущиеДанные;
	СтруктураРеквизита = Новый Структура;
	СтруктураРеквизита.Вставить("Объект", "Объект");
	СтруктураРеквизита.Вставить("ТабЧасть", "Запасы");
	СтруктураРеквизита.Вставить("НомерСтроки", ТекущаяСтрока.НомерСтроки - 1);
	СтруктураРеквизита.Вставить("ИмяРеквизита", "Содержание");
	ЗаголовокФормыРедактирования = СтрШаблон(НСтр("ru='%1: содержание'"), Строка(ТекущаяСтрока.Номенклатура));
	ОбщегоНазначенияУНФКлиент.ПоказатьФормуРедактированияРеквизита(Элемент.ТекстРедактирования, ЭтотОбъект,
		СтруктураРеквизита, ЗаголовокФормыРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьПодвалФормы();
	
	// ИнтеграцияГосИС
	ДополнительныеПараметры = Новый Структура;
	СобытияФормИСКлиент.ПриИзмененииЭлемента(ЭтаФорма, Элементы.Запасы, ДополнительныеПараметры);
	Если ДополнительныеПараметры.Свойство("ТребуетсяСерверныйВызов") Тогда
		ПодключитьОбработчикОжидания("ЗапасыПриОкончанииРедактированияДляСерверногоВызова", 0.5, Истина);
	КонецЕсли;
	// Конец ИнтеграцияГосИС
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	// Наборы
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ХарактеристикиНабора(СтрокаТабличнойЧасти.Номенклатура, Текст);
	КонецЕсли;
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	// Наборы
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтандартнаяОбработка = Ложь;
		СтруктураОткрытия = Новый Структура;
		СтруктураОткрытия.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураОткрытия.Вставить("РежимВыбора", Истина);
		СтруктураОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
		ОткрытьФорму("РегистрСведений.СоставНаборов.Форма.ФормаРедактированияСостава", СтруктураОткрытия, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	КонецЕсли;                              
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные; 
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура",	 СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",	 СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия",				СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("СтранаПроисхождения",	СтрокаТабличнойЧасти.СтранаПроисхождения);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки",	 	Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента",	 	Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
		
		СтруктураДанные.Вставить("СтавкаНДС", 			СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("Цена",			 	СтрокаТабличнойЧасти.Цена);
		
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		
	КонецЕсли;
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, СтрокаТабличнойЧасти, СтруктураДанные); 
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	Если СтруктураДанные.Свойство("МинимальнаяЦена") 
		И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
		СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;			
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
	ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(СтрокаТабличнойЧасти.НомерСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(НомерСтроки, ИмяТаблицы = "Запасы")
	ДополнительныеСвойства = Новый Структура("НомерСтроки", НомерСтроки);
	СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект, ИмяТаблицы, ДополнительныеСвойства);
КонецПроцедуры

// ИнтеграцияГосИС
&НаКлиенте
Процедура ЗапасыПриОкончанииРедактированияДляСерверногоВызова()
	
	ЗапасыПриОкончанииРедактированияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗапасыПриОкончанииРедактированияНаСервере()
	
	СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Запасы", Новый Структура);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПредоплата

&НаКлиенте
Процедура ПредоплатаСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
		
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
			?(Объект.Курс = 0,
			1,
			Объект.Курс),
		СтрокаТабличнойЧасти.Курс);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
			?(Объект.Кратность = 0,
			1,
			Объект.Кратность),
		СтрокаТабличнойЧасти.Кратность);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
		СтрокаТабличнойЧасти.Кратность,
		?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность));

КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс);
	
	СтрокаТабличнойЧасти.Кратность = 1;
	
	СтрокаТабличнойЧасти.Курс =
		?(СтрокаТабличнойЧасти.СуммаРасчетов = 0,
			1,
			СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.СуммаРасчетов * Объект.Курс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаДокументПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Документ) Тогда
		
		СтруктураДанные = ПолучитьДанныеДокументПриИзменении(СтрокаТабличнойЧасти.Документ, Объект.ОрганизацияПолучатель, Объект.Договор);
		
		СтрокаТабличнойЧасти.СуммаРасчетов = СтруктураДанные.СуммаРасчетов;
		
		Если СтруктураДанные.Свойство("Курс") Тогда
			СтрокаТабличнойЧасти.Курс = СтруктураДанные.Курс;
		Иначе
			СтрокаТабличнойЧасти.Курс = 
				?(СтрокаТабличнойЧасти.Курс = 0,
					?(Объект.Курс = 0,
					1,
					Объект.Курс),
				СтрокаТабличнойЧасти.Курс);
		КонецЕсли;
		
		Если СтруктураДанные.Свойство("Кратность") Тогда
			СтрокаТабличнойЧасти.Кратность = СтруктураДанные.Кратность;
		Иначе
			СтрокаТабличнойЧасти.Кратность =
				?(СтрокаТабличнойЧасти.Кратность = 0,
					?(Объект.Кратность = 0,
					1,
					Объект.Кратность),
				СтрокаТабличнойЧасти.Кратность);
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
			СтрокаТабличнойЧасти.СуммаРасчетов,
			СтрокаТабличнойЧасти.Курс,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
			СтрокаТабличнойЧасти.Кратность,
			?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность));
		
		СтруктураДанные.Свойство("ОплатаСертификатом", СтрокаТабличнойЧасти.ОплатаСертификатом);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДокументПриИзменении(Документ, Контрагент, Договор)
	
	СтруктураДанные = Новый Структура();
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.Взаимозачет") Тогда
		
		СуммаРасчетовПоДокументу = 0;
		
		Если Документ.КонтрагентИсточник = Контрагент Тогда
			ТЧДляАнализа = Документ.Дебитор;
		Иначе
			ТЧДляАнализа = Документ.Кредитор;
		КонецЕсли;
		
		Для Каждого СтрокаДляАнализа Из ТЧДляАнализа Цикл
			Если СтрокаДляАнализа.Договор = Договор Тогда
				СуммаРасчетовПоДокументу = СуммаРасчетовПоДокументу + СтрокаДляАнализа.СуммаРасчетов;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураДанные.Вставить("СуммаРасчетов", СуммаРасчетовПоДокументу);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		СтруктураДанные.Вставить("СуммаРасчетов", Документ.Номинал);
		СтруктураДанные.Вставить("ОплатаСертификатом", Истина);
		
	Иначе
		
		СуммаРасчетовПоДокументу = 0;
		СуммаПлатежаПоДокументу = 0;
		Кратность = 0;
		Курс = 0;
		КоличествоСтрок = 0;
		
		// Нужно обойти все строки, чтобы получить данные только по нужному нам договору.
		Для Каждого СтрокаДляАнализа Из Документ.РасшифровкаПлатежа Цикл
			Если СтрокаДляАнализа.Договор = Договор Тогда
				СуммаРасчетовПоДокументу = СуммаРасчетовПоДокументу + СтрокаДляАнализа.СуммаРасчетов;
				СуммаПлатежаПоДокументу = СуммаПлатежаПоДокументу + СтрокаДляАнализа.СуммаПлатежа;
				Курс = СтрокаДляАнализа.Курс;
				Кратность = СтрокаДляАнализа.Кратность;
				КоличествоСтрок = КоличествоСтрок + 1;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураДанные.Вставить("СуммаРасчетов", СуммаРасчетовПоДокументу);
		Если КоличествоСтрок = 1 Тогда
			СтруктураДанные.Вставить("Курс", Курс);
		Иначе
			Если СуммаРасчетовПоДокументу > 0 Тогда
				СтруктураДанные.Вставить("Курс", Окр(СуммаПлатежаПоДокументу / СуммаРасчетовПоДокументу * Кратность, 4));
			КонецЕсли;
		КонецЕсли;
		Если Кратность > 0 Тогда
			СтруктураДанные.Вставить("Кратность", Кратность);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДокументПриИзменении()

&НаКлиенте
Процедура ПредоплатаКурсПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.ПриИзмененииКурсаВСтрокеПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ПредоплатаКурсНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры


&НаКлиенте
Процедура ПредоплатаКратностьПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.ПриИзмененииКурсаВСтрокеПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные.ОплатаСертификатом Тогда
		СтандартнаяОбработка = Ложь;
		РедактироватьОплату(ИмяТЧПредоплата());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПриИзменении(Элемент)
	
	Элементы.ГруппаПредоплата.Заголовок = ЗаголовокОплаты(Объект.СпособЗачетаПредоплаты, Объект.Предоплата, 
		ИмяТЧПредоплата());
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОплату(ИмяТЧ)
	
	Оповещение = Новый ОписаниеОповещения("РедактироватьОплатуЗавершение", ЭтаФорма, ИмяТЧ);
	СтрокаОплаты = Элементы[ИмяТЧ].ТекущиеДанные;
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("КОплате", ИтогВсего - Объект[ИмяТЧ].Итог("СуммаРасчетов")
									+ СтрокаОплаты.СуммаРасчетов);
	СтруктураПараметров.Вставить("ПодарочныйСертификат", СтрокаОплаты.Документ);
	СтруктураПараметров.Вставить("НомерСертификата", СтрокаОплаты.НомерСертификата);
	СтруктураПараметров.Вставить("Сумма", СтрокаОплаты.СуммаРасчетов);
	СтруктураПараметров.Вставить("Документ", Объект.Ссылка);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаОплатыСертификатом", СтруктураПараметров,,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОплатуЗавершение(Результат, ИмяТЧ) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		СтрокаОплаты = Элементы[ИмяТЧ].ТекущиеДанные;
		
		СтрокаОплаты.Документ = Результат.ПодарочныйСертификат;
		СтрокаОплаты.НомерСертификата = Результат.НомерСертификата;
		СтрокаОплаты.СуммаРасчетов = Результат.Сумма;
		
		СтрокаОплаты.Курс = 
			?(СтрокаОплаты.Курс = 0,
				?(Объект.Курс = 0,
				1,
				Объект.Курс),
			СтрокаОплаты.Курс);
			
		СтрокаОплаты.Кратность =
			?(СтрокаОплаты.Кратность = 0,
				?(Объект.Кратность = 0,
				1,
				Объект.Кратность),
			СтрокаОплаты.Кратность);
			
		СтрокаОплаты.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
			СтрокаОплаты.СуммаРасчетов,
			СтрокаОплаты.Курс,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
			СтрокаОплаты.Кратность,
			?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблиц

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	// Наборы
	Если Элементы.Запасы.ВыделенныеСтроки.Количество()=Объект.Запасы.Количество() Тогда
		// Если выделены все строки - проверки удаления наборов не выполняются
		Объект.ДобавленныеНаборы.Очистить();
	Иначе
		ДанныеНабора = Новый Структура("НоменклатураНабора, ХарактеристикаНабора");
		Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
			Если ДанныеНабора.НоменклатураНабора=Неопределено Тогда
				ДанныеНабора.НоменклатураНабора = ТекущиеДанныеСтроки.НоменклатураНабора;
				ДанныеНабора.ХарактеристикаНабора = ТекущиеДанныеСтроки.ХарактеристикаНабора;
			ИначеЕсли ДанныеНабора.НоменклатураНабора<>ТекущиеДанныеСтроки.НоменклатураНабора 
				ИЛИ ДанныеНабора.ХарактеристикаНабора<>ТекущиеДанныеСтроки.ХарактеристикаНабора Тогда
				// Выделены строки разных наборов
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Действие недоступно для наборов.'");
				Сообщение.Поле = "Объект.Запасы";
				Сообщение.Сообщить();
				Отказ = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		Если НЕ Отказ И ЗначениеЗаполнено(ДанныеНабора.НоменклатураНабора) Тогда
			// Набор можно удалить только целиком
			Отказ = Истина;
			ДобавленныеНаборы = Объект.ДобавленныеНаборы.НайтиСтроки(ДанныеНабора);
			Оповещение = Новый ОписаниеОповещения("ЗапасыПередУдалениемЗавершение", ЭтотОбъект, ДанныеНабора);
			СписокКнопок = Новый СписокЗначений;
			Если ДобавленныеНаборы.Количество()>0 И ДобавленныеНаборы[0].Количество>1 Тогда
				// в ТЧ есть несколько одинаковых наборов
				ТекстВопроса = НСтр("ru = 'Набор можно удалить только целиком. В табличную часть добавлено несколько экземпляров данного набора'");
				СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить все'"));
				СписокКнопок.Добавить("УдалитьОдин", НСтр("ru = 'Удалить один экземпляр'"));
			Иначе
				ТекстВопроса = НСтр("ru = 'Набор можно удалить только целиком'");
				СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить'"));
			КонецЕсли; 
			СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Редактировать состав'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
			ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок, 0, КодВозвратаДиалога.Да);
		КонецЕсли; 
	КонецЕсли; 
	// Конец Наборы
	
	// Серии номенклатуры
	Если НЕ Отказ Тогда
		Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанныеСтроки,
				ИспользоватьСерииНоменклатурыОстатки);
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	Модифицированность = Истина;
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "Нажатие");
	
КонецПроцедуры // РедактироватьЦеныИВалюту()

&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект), НСтр("ru = 'Документ будет полностью перезаполнен по ""Основанию"". Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплаты(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ОрганизацияПолучатель) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале организацию-получателя.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале договор контрагента.'"));
		Возврат;
	КонецЕсли;
	
	АдресПредоплатаВХранилище = ПоместитьПредоплатаВХранилище(ИмяТЧПредоплата());
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("АдресПредоплатаВХранилище", АдресПредоплатаВХранилище);
	ПараметрыПодбора.Вставить("Подбор", Истина);
	ПараметрыПодбора.Вставить("ЕстьЗаказ", Ложь);
	ПараметрыПодбора.Вставить("ЗаказВШапке", ЗаказВШапке);
	ПараметрыПодбора.Вставить("Компания", Объект.Организация);
	ПараметрыПодбора.Вставить("Заказ", Неопределено);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Контрагент", Объект.КонтрагентПолучатель);
	ПараметрыПодбора.Вставить("Договор", Объект.Договор);
	ПараметрыПодбора.Вставить("Курс", Объект.Курс);
	ПараметрыПодбора.Вставить("Кратность", Объект.Кратность);
	ПараметрыПодбора.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("СуммаДокумента", Объект.Запасы.Итог("Всего"));
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовПокупателей", ПараметрыПодбора, , , , ,
		Новый ОписаниеОповещения("РедактироватьЗачетПредоплатыЗавершение", ЭтотОбъект,
		Новый Структура("АдресПредоплатаВХранилище, ПараметрыПодбора, ИмяТЧ", АдресПредоплатаВХранилище,
		ПараметрыПодбора, ИмяТЧПредоплата())));
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    АдресПредоплатаВХранилище = ДополнительныеПараметры.АдресПредоплатаВХранилище;
    
    КодВозврата = Результат;
    
    РедактироватьЗачетПредоплатыФрагмент(АдресПредоплатаВХранилище, КодВозврата, ДополнительныеПараметры.ИмяТЧ);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыФрагмент(Знач АдресПредоплатаВХранилище, Знач КодВозврата, ИмяТЧ)

	Если (КодВозврата = КодВозвратаДиалога.OK) Тогда
		ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище, ИмяТЧ);
	КонецЕсли;

КонецПроцедуры

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения(
		"ПоискПоШтрихкодуЗавершение",
		ЭтотОбъект, 
		Новый Структура("ТекШтрихкод", ТекШтрихкод));

	#Если МобильныйКлиент Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду", , , , , , ОбработкаЗавершения);
	#Иначе
		ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкодуЗавершение()

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, "Запасы");
	
КонецПроцедуры // ПолучитьВес()

&НаКлиенте
Процедура ПолучитьВесЗавершение(Параметры) Экспорт
	
	СтрокаТабличнойЧасти = Параметры;
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "Запасы");
	
	ПодключаемоеОборудованиеУНФКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПечатьНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КонтекстПечати", Объект);
	ПараметрыОткрытия.Вставить("НаборОснований", НаборОснованийПечати());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияРеквизитовПечати", ЭтотОбъект);
	ОткрытьФорму("Обработка.РеквизитыПечати.Форма.РеквизитыПечатиПередачаТоваровМеждуОрганизациями", ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

&НаКлиенте
Процедура ШапкаТабличнаяЧасть(Команда)
	
	ЗаполнениеОбъектовУНФКлиент.ЗаполнитьПустыеПоложения(Объект, "ПоложениеСклада");
	
		
	ПараметрыДиалога = Новый Структура;
	ПараметрыДиалога.Вставить("ПоложениеСкладаВДокументахОтгрузки", Объект.ПоложениеСклада);
	ПараметрыДиалога.Вставить("БылиВнесеныИзменения", Ложь);
	
	ОткрытьФорму(
	"ОбщаяФорма.ШапкаТабличнаяЧасть",
	ПараметрыДиалога,,,,,
	Новый ОписаниеОповещения("ШапкаТабличнаяЧастьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ШапкаТабличнаяЧастьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.БылиВнесеныИзменения Тогда
		
		
		ШапкаТабличнаяЧастьЗавершениеНаСервере(Результат);
		ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ШапкаТабличнаяЧастьЗавершениеНаСервере(Знач Результат)
	
	Если Объект.ПоложениеСклада <> Результат.ПоложениеСкладаВДокументахОтгрузки Тогда
		Объект.ПоложениеСклада = Результат.ПоложениеСкладаВДокументахОтгрузки;
		Если Объект.ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			СтруктураПолей = ЗаполнениеОбъектовУНФ.СтруктурнаяЕдиницаИЯчейкаДляШапки(Объект.Запасы);
			ЗаполнитьЗначенияСвойств(Объект, СтруктураПолей);
		КонецЕсли; 
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
			СтрокаТабличнойЧасти.Ячейка = Объект.Ячейка;
		КонецЦикла; 
	КонецЕсли; 
	
	УстановитьВидимостьОтПользовательскихНастроек();
	ЗаполнитьСписокДействий();
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	// Наборы
	Если НЕ ТолькоПросмотр И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) 
		И (Элемент.ТекущийЭлемент = Элементы.ЗапасыНоменклатура
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ЗапасыХарактеристика
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ЗапасыКартинкаНабора
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ЗапасыКоличество
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ЗапасыЕдиницаИзмерения) Тогда 
		СтандартнаяОбработка = Ложь;
		РедактироватьСоставНабора(СтрокаТабличнойЧасти);
	КонецЕсли;
	// Конец Наборы
	
	// Подарочные сертификаты
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыЦена И Элемент.ТекущийЭлемент.ТолькоПросмотр Тогда
		
		ПоляНоменклатуры = ТипНоменклатурыПроизвольныйНоминал(СтрокаТабличнойЧасти.Номенклатура);
			
		Если ПоляНоменклатуры.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")
			И ПоляНоменклатуры.ПроизвольныйНоминал Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("УказатьЦенуСертификата", ЭтотОбъект, СтрокаТабличнойЧасти);
			ПоказатьВводЧисла(ОписаниеОповещения, СтрокаТабличнойЧасти.Цена, НСтр(
				"ru = 'Введите стоимость сертификата'"), 15, 2);
		КонецЕсли;
			
	КонецЕсли;
	// Конец Подарочные сертификаты
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипНоменклатурыПроизвольныйНоминал(Знач Номенклатура)
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ТипНоменклатуры, ПроизвольныйНоминал");
КонецФункции

&НаКлиенте
Процедура ЗапасыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Наборы
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если Копирование И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) Тогда
		// Состав набора не копируется
		Отказ = Истина;
	КонецЕсли; 
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПослеУдаления(Элемент)
	
	ВыполнитьДействияПослеУдаленияСтрокиЗапасов();
	
	ЗапасыПослеУдаленияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалениемЗавершение(Результат, ДанныеНабора) Экспорт
	
	// Наборы
	Если Результат=Неопределено ИЛИ Результат=КодВозвратаДиалога.Отмена Тогда
		Возврат
	КонецЕсли;
	
	СтрокиНабора = Объект.Запасы.НайтиСтроки(ДанныеНабора);
	Если СтрокиНабора.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаТабличнойЧасти = СтрокиНабора[0];
	
	Если Результат=КодВозвратаДиалога.Нет Тогда
		
		РедактироватьСоставНабора(СтрокаТабличнойЧасти);
		
	ИначеЕсли Результат=КодВозвратаДиалога.Да Тогда
		
		Для каждого Стр Из СтрокиНабора Цикл
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, Стр,
				ИспользоватьСерииНоменклатурыОстатки);
		КонецЦикла; 
		НаборыКлиент.УдалитьСтрокиНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора, , Объект.Запасы, Объект.ДобавленныеНаборы);
		
		Модифицированность = Истина;
		ВыполнитьДействияПослеУдаленияСтрокиЗапасов();
		
	ИначеЕсли Результат="УдалитьОдин" Тогда
		
		ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(ДанныеНабора);
		Если ДобавленныеСтроки.Количество()=0 ИЛИ ДобавленныеСтроки[0].Количество<=1 Тогда
			Для каждого Стр Из СтрокиНабора Цикл
				СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, Стр,
					ИспользоватьСерииНоменклатурыОстатки);
			КонецЦикла; 
			НаборыКлиент.УдалитьСтрокиНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора, , Объект.Запасы, Объект.ДобавленныеНаборы);
		Иначе
			СтароеКоличество = ДобавленныеСтроки[0].Количество;
			ДобавленныеСтроки[0].Количество = СтароеКоличество-1;
			НаборыКлиентСервер.УдалитьЭкземплярНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора, , Объект.Запасы, , СтароеКоличество);
			НаборыКлиент.УдалитьЛишниеСтрокиПодчиненнойТЧ(Объект.Запасы, Объект.СерииНоменклатуры);
			СтрокиНабора = Объект.Запасы.НайтиСтроки(ДанныеНабора);
			Для каждого Стр Из СтрокиНабора Цикл
				РассчитатьСуммуВСтрокеТабличнойЧасти(Стр);
			КонецЦикла;
		КонецЕсли;
		
		Модифицированность = Истина;
		ВыполнитьДействияПослеУдаленияСтрокиЗапасов();
		
	КонецЕсли; 
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДляПросмотраОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)

	РасчетыРаботаСФормамиКлиент.ТаблицаДляПросмотраОбработкаРасшифровки(ЭтотОбъект, Элемент, Расшифровка,
		СтандартнаяОбработка, СтруктураПараметровРасчетов, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтборПоДублямОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Элементы.Запасы.ОтборСтрок = Неопределено;
	Элементы.ЗапасыКонтекстноеМенюПоказатьДублиСтрок.Пометка = Ложь;
	Элементы.ДекорацияОтборПоДублям.Видимость = Ложь;
КонецПроцедуры

&НаСервере
Процедура ЗапасыПослеУдаленияСервер()
	
	// ИнтеграцияГосИС
	СобытияФормИС.ПриИзмененииЭлемента(ЭтаФорма, "Запасы", Неопределено);
	// Конец ИнтеграцияГосИС
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыПолучатель(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале организацию-отправителя.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале договор контрагента.'"));
		Возврат;
	КонецЕсли;
	
	АдресПредоплатаВХранилище = ПоместитьПредоплатаВХранилище(ИмяТЧПредоплатаПолучатель());
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("АдресПредоплатаВХранилище", АдресПредоплатаВХранилище);
	ПараметрыПодбора.Вставить("Подбор", Истина);
	ПараметрыПодбора.Вставить("ЕстьЗаказ", Ложь);
	ПараметрыПодбора.Вставить("ЗаказВШапке", ЗаказВШапке);
	ПараметрыПодбора.Вставить("Компания", Объект.ОрганизацияПолучатель);
	ПараметрыПодбора.Вставить("Заказ", Неопределено);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Контрагент", Объект.КонтрагентВладелец);
	ПараметрыПодбора.Вставить("Договор", Объект.Договор);
	ПараметрыПодбора.Вставить("Курс", Объект.Курс);
	ПараметрыПодбора.Вставить("Кратность", Объект.Кратность);
	ПараметрыПодбора.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("СуммаДокумента", Объект.Запасы.Итог("Всего"));
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовПоставщикам", ПараметрыПодбора, , , , ,
		Новый ОписаниеОповещения("РедактироватьЗачетПредоплатыЗавершение", ЭтотОбъект,
		Новый Структура("АдресПредоплатаВХранилище, ПараметрыПодбора, ИмяТЧ", АдресПредоплатаВХранилище,
		ПараметрыПодбора, ИмяТЧПредоплатаПолучатель())));

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДляПросмотраПолучательОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка,
	ДополнительныеПараметры)

	ПараметрыРасшифровки = Новый Структура;
	ПараметрыРасшифровки.Вставить("ИмяТЧПредоплата", ИмяТЧПредоплатаПолучатель());
	ПараметрыРасшифровки.Вставить("ИменаЭлементов", ИменаЭлементов(ИмяТЧПредоплатаПолучатель()));
	
	РасчетыРаботаСФормамиКлиент.ТаблицаДляПросмотраОбработкаРасшифровки(ЭтотОбъект, Элемент, Расшифровка,
		СтандартнаяОбработка, СтруктураПараметровРасчетов, Истина, ПараметрыРасшифровки);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи",		РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("РежимПроведения",	РежимПроведенияДокумента.Неоперативный);
	ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Истина);
	
	Записать(ПараметрыЗаписи);
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элементы.ФормаПровестиИЗакрыть, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКоманда(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи",		РежимЗаписиДокумента.Запись);
	
	Записать(ПараметрыЗаписи);
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элементы.ФормаЗаписать, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура Провести(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи",		РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("РежимПроведения",	РежимПроведенияДокумента.Неоперативный);
	
	Записать(ПараметрыЗаписи);
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элементы.ФормаПровести, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура РежимГТД(Команда)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТД", "Пометка", НЕ Элементы.РежимГТД.Пометка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТДКонтекст", "Пометка", НЕ Элементы.РежимГТДКонтекст.Пометка);
	
	ИзменитьРежимРаботаГТД(Элементы.РежимГТД.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРежимРаботаГТД()
	
	НеизменяемыеРеквизиты = Новый Массив;
	НеизменяемыеРеквизиты.Добавить("ЗапасыПометка");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНомерСтроки");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНоменклатура");
	НеизменяемыеРеквизиты.Добавить("ЗапасыХарактеристика");
	НеизменяемыеРеквизиты.Добавить("ЗапасыПартия");
	НеизменяемыеРеквизиты.Добавить("ЗапасыКоличество");
	НеизменяемыеРеквизиты.Добавить("ЗапасыЕдиницаИзмерения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыСтранаПроисхождения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНомерГТД");
	
	Для каждого ЭлементФормы Из Элементы.Запасы.ПодчиненныеЭлементы Цикл
		
		Если НеизменяемыеРеквизиты.Найти(ЭлементФормы.Имя) = Неопределено
			И ЭлементФормы.Видимость = Истина Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементФормы.Имя, "Видимость", Ложь);
			КэшЗначений.ОбрабатываемыеРеквизиты.Добавить(ЭлементФормы.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЕдиницаИзмерения", "Доступность", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьРежимРаботаГТД()
	
	Для каждого ИмяЭлементаФормы Из КэшЗначений.ОбрабатываемыеРеквизиты Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлементаФормы, "Видимость", Истина);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЕдиницаИзмерения", "Доступность", Истина);
	
	КэшЗначений.ОбрабатываемыеРеквизиты = Новый Массив;
	
КонецПроцедуры

&НаКлиенте 
Процедура ИзменитьРежимРаботаГТД(ВключитьРежимГТД)
	
	Если НЕ КэшЗначений.Свойство("ОбрабатываемыеРеквизиты") Тогда
		
		КэшЗначений.Вставить("ОбрабатываемыеРеквизиты", Новый Массив);
		
	КонецЕсли;
	
	Если ВключитьРежимГТД Тогда
		
		ВключитьРежимРаботаГТД();
		
	Иначе
		
		ВыключитьРежимРаботаГТД();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОкругления(Команда)
	
	ОткрытьФорму("Обработка.ВидыСкидокНаценокРучныеИАвтоматические.Форма", Новый Структура("Округления", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура НомераГТДЗаполнитьПоФактическимОстаткам(Команда)
	
	НомераГТДЗаполнитьПоФактическимОстаткамНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НомераГТДПодобрать(Команда)
	
	НомераГТДПодобратьНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств",
		ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_ПередачаТоваровМеждуОрганизациями"));
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЧека(Команда)
	
	Если Модифицированность Тогда
		Если Объект.Проведен Тогда
			ТекстВопроса = НСтр("ru = 'Для выполнения команды ""Предварительный просмотр""
				|документ будет проведен. Продолжить?'");
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Провести и продолжить'"));
		Иначе
			ТекстВопроса = НСтр("ru = 'Для выполнения команды ""Предварительный просмотр""
				|документ будет записан. Продолжить?'");
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Записать и продолжить'"));
		КонецЕсли;
		Обработчик = Новый ОписаниеОповещения("ПредварительныйПросмотрЧекаПродолжение", ЭтотОбъект);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки);
	Иначе
		ПредварительныйПросмотрЧекаПродолжение(Неопределено, "");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЧекаПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		Если Объект.Проведен Тогда
			РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		Иначе
			РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		КонецЕсли;
		Если Не РезультатЗаписи Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПредварительныйПросмотрЧекаЗавершение", ЭтотОбъект);
		МассивОборудования = Новый Массив;
		МассивОборудования.Добавить("ФискальныйРегистратор");
		МассивОборудования.Добавить("ККТ");
		МассивОборудования.Добавить("ПринтерЧеков");
		МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, МассивОборудования,
				НСтр("ru='Выберите оборудование'"), НСтр("ru='Оборудование не подключено.'"));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЧекаЗавершение(ИдентификаторУстройстваФР, Параметры) Экспорт
	
	Если ИдентификаторУстройстваФР = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР);
	
	Если ОбщиеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры.ДатаВремя = ТекущаяДата();
	
	РабочееМестоКассираКлиент.ПредпросмотрЧекаДенежныхДокументов(ОбщиеПараметры, ЭтаФорма, ИдентификаторУстройстваФР);
	
КонецПроцедуры

#Область ИнтеграцияИС

// ИнтеграцияИС

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПолеИнтеграцииИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОбработкаНавигационнойСсылкиВФормеДокументаОснования(
		ЭтотОбъект,
		Объект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры
// Конец ИнтеграцияИС

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьПоПлануПередачи(Команда)
	
	ЗаполнитьПоПлануПередачиСервер();	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПлануПередачиСервер()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьПоПлануПередачи();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
	// Наборы
	ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы);
	// Конец Наборы
	
	//Ячейки
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки	
	
	УстановитьВидимостьИДоступность();
	
	ОбновитьРеквизитыВТЧ(Объект);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоФактическойНехватке(Команда)
	
	ЗаполнитьПоФактическойНехваткеСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоФактическойНехваткеСервер()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьПоФактическойНехватке();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
	// Наборы
	ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы);
	// Конец Наборы
	
	//Ячейки
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки	
	
	УстановитьВидимостьИДоступность();
	
	ОбновитьРеквизитыВТЧ(Объект);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов()
	ДополнительныеСвойства = Новый Структура("ИзменениеКлючевыхРеквизитов", Истина);
	СерииНоменклатурыУНФ.ЗаполнитьПризнакиИспользованияСерий(Объект, ДополнительныеСвойства);
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита()
	НоменклатураВДокументахСервер.ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита(ЭтотОбъект,
		"РасходнаяНакладная", "Запасы", НастройкиФормыВыбораНоменклатуры);
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПослеПереключенияСкладШапка()
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьТаблицуПоШапке(Объект, "Запасы", "СтруктурнаяЕдиница", "ПоложениеСклада");
	Если КэшЗначений.УчетПоЯчейкам Тогда
		ЗаполнениеОбъектовУНФ.ЗаполнитьТаблицуПоШапке(Объект, "Запасы", "Ячейка", "ПоложениеСклада");
	КонецЕсли; 
	УстановитьВидимостьОтПользовательскихНастроек();
	ЗаполнитьСписокДействий();
	
КонецПроцедуры
// Конец ГосИС

&НаКлиенте
Процедура ВыполнитьПересчетНДСС18На20(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да 
		ИЛИ Результат = КодВозвратаДиалога.Нет Тогда
		
		СтавкиСоответствие = ПолучитьСтавкиНДС();
		СтавкаНДС18 = СтавкиСоответствие.Получить("НДС18");
		СтавкаНДС18Расчетная = СтавкиСоответствие.Получить("НДС18Расчетная");
		СтавкаНДС20 = СтавкиСоответствие.Получить("НДС20");
		СтавкаНДС20Расчетная = СтавкиСоответствие.Получить("НДС20Расчетная");
		
		Для Каждого СтрокаЗапасы Из Объект.Запасы Цикл
			Если СтрокаЗапасы.СтавкаНДС = СтавкаНДС18 И ЗначениеЗаполнено(СтавкаНДС20) Тогда
				// Сумма изменяется на сумму НДС
				Если Результат = КодВозвратаДиалога.Нет  Тогда
					СтавкаНДСТекущая = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаЗапасы.СтавкаНДС);
					СтавкаНДСНовая = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДС20);
					СтрокаЗапасы.Сумма = ТабличныеЧастиУНФКлиент.НоваяСтоимостьСУчетомИзмененийПоНДС2018(СтрокаЗапасы.Сумма, СтавкаНДСТекущая, СтавкаНДСНовая)
				КонецЕсли;
				СтрокаЗапасы.СтавкаНДС = СтавкаНДС20;
				ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(СтрокаЗапасы, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
			ИначеЕсли СтрокаЗапасы.СтавкаНДС = СтавкаНДС18Расчетная И ЗначениеЗаполнено(СтавкаНДС20Расчетная) Тогда
				// Сумма изменяется на сумму НДС
				Если Результат = КодВозвратаДиалога.Нет  Тогда
					СтавкаНДСТекущая = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаЗапасы.СтавкаНДС)%100;
					СтавкаНДСНовая = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДС20Расчетная)%100;
					СтрокаЗапасы.Сумма = ТабличныеЧастиУНФКлиент.НоваяСтоимостьСУчетомИзмененийПоНДС2018(СтрокаЗапасы.Сумма, СтавкаНДСТекущая, СтавкаНДСНовая)
				КонецЕсли;
				СтрокаЗапасы.СтавкаНДС = СтавкаНДС20Расчетная;
				ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(СтрокаЗапасы, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
			КонецЕсли;
		КонецЦикла;
		
		ОбновитьПодвалФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция  ПолучитьСтавкиНДС()
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("НДС18", Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.Общая, Дата('20180101')));
	Соответствие.Вставить("НДС18Расчетная", Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.ОбщаяРасчетная, Дата('20180101')));
	Соответствие.Вставить("НДС20", Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.Общая, Дата('20191111')));
	Соответствие.Вставить("НДС20Расчетная", Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.ОбщаяРасчетная, Дата('20191111')));
	
	Возврат Соответствие;
КонецФункции

&НаКлиенте
Процедура ОбработатьИзмененияРеквизитовПечати(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ПечатьДокументовУНФКлиент.ОбновитьЗначенияРеквизитовПечати(ЭтотОбъект, Результат.ИзмененныеРеквизиты);
		
		Если Результат.Свойство("Команда") Тогда
			
			Подключаемый_ВыполнитьКоманду(Результат.Команда);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурнаяЕдиницаПриИзмененииНаСервере()
	
	Перем СтрокаТабличнойЧасти, СтруктураДанные, СтруктураНадписи;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
	КонецЦикла; 
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	УстановитьВидимостьЯчейки("Ячейка", Объект.СтруктурнаяЕдиница);
	
	СтруктураДанные = ПолучитьДанныеСтруктурнойЕдиницыПриИзменении(Объект.СтруктурнаяЕдиница);
	
	Объект.ПодписьКладовщика = СтруктураДанные.ПодписьКладовщика;
	
	Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		Склад = Объект.СтруктурнаяЕдиница
	Иначе
		Склад = Неопределено;
	КонецЕсли;
	Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация, Склад, Объект.Дата);
	СтруктураНадписи = Новый Структура;
	СтруктураНадписи.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураНадписи.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("ВалютаРасчетов", ВалютаРасчетов);
	СтруктураНадписи.Вставить("Курс", Объект.Курс);
	СтруктураНадписи.Вставить("КурсНациональнаяВалюта", КурсНациональнаяВалюта);
	СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураНадписи.Вставить("УчетВалютныхОпераций", УчетВалютныхОпераций);
	СтруктураНадписи.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураНадписи.Вставить("СпециальныйНалоговыйРежим", Объект.СпециальныйНалоговыйРежим);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита();
	ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();

КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеСтруктурнойЕдиницыПриИзменении(СтруктурнаяЕдиница)
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("ПодписьКладовщика", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница, "ПодписьМол", Истина));
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоДокументу(ДокОснование)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(ДокОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
	// Наборы
	ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы);
	// Конец Наборы
	
	//Ячейки
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки	
	
	Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.СчетФактураНадпись.Видимость = Истина;
		
	Иначе
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НаЭкспорт Тогда
			Элементы.СчетФактураНадпись.Видимость = Истина;
		Иначе
			Элементы.СчетФактураНадпись.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Договор = Объект.Договор;
	Если ЗначениеЗаполнено(Договор) Тогда
		ВалютаРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВалютаРасчетов", Истина);
	КонецЕсли;
	
	УстановитьВидимостьДоговора();
	
	УстановитьВидимостьИДоступность();
	
	ОбновитьРеквизитыВТЧ(Объект);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры // ЗаполнитьПоДокументу()

&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением, ВалютаРасчетов)
	
	РазностьДат = ДокументыУНФ.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", ВалютаРасчетов));
		
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность);
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервере
Функция ПолучитьДанныеОрганизацияПриИзменении()
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Компания", Константы.УчетПоКомпании.Компания(Объект.Организация));
	СтруктураДанные.Вставить("БанковскийСчет", Справочники.БанковскиеСчета.БанковскийСчетСубъекта(Объект.Организация, Объект.ВалютаДокумента, Объект.Дата));
	СтруктураДанные.Вставить("ПодписьРуководителя", Объект.Организация.ПодписьРуководителя);
	СтруктураДанные.Вставить("ПодписьГлавногоБухгалтера", Объект.Организация.ПодписьГлавногоБухгалтера);
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Наборы
	Если НЕ СтруктураДанные.Свойство("ЕдиницаИзмерения") Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	КонецЕсли; 
	Если НЕ СтруктураДанные.Свойство("Коэффициент") Тогда
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", 1);
		КонецЕсли; 
	КонецЕсли;
	// Конец Наборы
	
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	СтруктураДанные.Вставить("НомерГТД", Неопределено);
	СтруктураДанные.Вставить("ЭтоЗапас", (СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"))
									ИЛИ (СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")));
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС") 
		И НЕ СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ВидСтавкиНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Номенклатура.ВидСтавкиНДС));
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию));
	КонецЕсли;
	
	// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",Ложь);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьХарактеристики
		Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура);
		
		Если Не ЗначенияПоУмолчанию = Неопределено
			Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика",ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика), СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
		
		СтруктураДанные.Вставить("ИспользоватьХарактеристики",Истина);
		СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",СтруктураДанные.Номенклатура.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли; 
	// Конец Характеристики
	
	Если СтруктураДанные.Свойство("Цена") И ЗначениеЗаполнено(СтруктураДанные.Цена) Тогда
		// При подборе наборов расчет цены не требуется - используется цена, указанная в подборе
	ИначеЕсли СтруктураДанные.Свойство("ВидЦен") Тогда
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
	Иначе
		СтруктураДанные.Вставить("Цена", 0);
	КонецЕсли; 
	
	СтруктураДанные.Вставить("МинимальнаяЦена", ЦенообразованиеСервер.ПолучитьМинимальнуюЦенуНоменклатуры(СтруктураДанные));
	
	СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	
	// Серии номенклатуры
	СтруктураДанные.Вставить("ИспользоватьСерииНоменклатуры", СтруктураДанные.Номенклатура.ИспользоватьСерииНоменклатуры);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьСерииНоменклатуры Тогда
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(СтруктураДанные));
	Иначе
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", 0);
	КонецЕсли;
	// Конец Серии номенклатуры
	
	СтруктураДанные.Вставить("ЭтоАлкогольнаяПродукция", СтруктураДанные.Номенклатура.АлкогольнаяПродукция);
	
	СтруктураДанные.Вставить("ВесЕдиницыТовара", СтруктураДанные.Номенклатура.Вес);
	СтруктураДанные.Вставить("ОбъемЕдиницыТовара", СтруктураДанные.Номенклатура.Объем);
	
	Если НЕ СтруктураДанные.Свойство("Склад") Тогда
		СтруктураДанные.Вставить("Склад", СтруктураДанные.Номенклатура.Склад);
		СтруктураДанные.Вставить("Ячейка", СтруктураДанные.Номенклатура.Ячейка);
	КонецЕсли;
	
	// Наборы
	НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(СтруктураДанные);
	// Конец Наборы
	
	//Партии
	СтруктураДанные.Вставить("ИспользоватьПартии",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеПартий",Ложь);
	
	Если НЕ СтруктураДанные.Свойство("Партия") Тогда
		СтруктураДанные.Вставить("Партия", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьПартии Тогда
		
		СтатусПартии = НоменклатураВДокументахСервер.СоответствиеВидаОперацииИлиХозОперацииСтатусуПартии(, , Справочники.ХозяйственныеОперации.ПродажаПокупателю);
		ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтатусПартии);
		
		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		
		Если НЕ ЗначенияПартииПоУмолчанию = Неопределено Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;
		
		СтруктураДанные.Партия = ?(ЗначениеЗаполнено(СтруктураДанные.Партия), СтруктураДанные.Партия, ПартияПоУмолчанию);
		
		СтруктураДанные.ПроверятьЗаполнениеПартий = СтруктураДанные.Номенклатура.ПроверятьЗаполнениеПартий;
		СтруктураДанные.ИспользоватьПартии = Истина;
	
	КонецЕсли;
	// Конец Партии
	
	ГрузовыеТаможенныеДекларацииСервер.АвтоматическийПодборВРеализацииНомераГТД(СтруктураДанные);
	
	// ИнтеграцияГосИС
	ИнтеграцияИСМПУНФ.ЗаполнитьСлужебныеРеквизитыИСМП(СтруктураДанные);
	// Конец ИнтеграцияГосИС
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
			
		Иначе
			
			СтруктураДанные.Вставить("Коэффициент", 1);
			
		КонецЕсли;
		
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли; 
	
	СтруктураДанные.Вставить("МинимальнаяЦена", ЦенообразованиеСервер.ПолучитьМинимальнуюЦенуНоменклатуры(СтруктураДанные));
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанные.СтранаПроисхождения) Тогда
		
		СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("НомерГТД", Неопределено);
	
	// Наборы
	НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(СтруктураДанные);
	// Конец Наборы
	
	ГрузовыеТаможенныеДекларацииСервер.АвтоматическийПодборВРеализацииНомераГТД(СтруктураДанные);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

&НаСервере
Процедура ЗапасыПартияПриИзмененииНаСервереБезКонтекста(СтруктураДанные)
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанные.СтранаПроисхождения) Тогда
		
		СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("НомерГТД", Неопределено);
	
	ГрузовыеТаможенныеДекларацииСервер.АвтоматическийПодборВРеализацииНомераГТД(СтруктураДанные);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(Номенклатура, ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	Результат = Новый Структура;
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		Результат.Вставить("ТекущийКоэффициент", 1);
	Иначе
		Результат.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		Результат.Вставить("Коэффициент", 1);
	Иначе
		Результат.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
	Результат,
	ВесИОбъемЕдиницТоваров(Номенклатура, ЕдиницаИзмерения, Результат.Коэффициент));
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВесИОбъемЕдиницТоваров(Знач Номенклатура, Знач ЕдиницаИзмерения, Знач Коэффициент)
	
	Возврат РегистрыСведений.ВесИОбъемЕдиницТоваров.Значения(Номенклатура, ЕдиницаИзмерения, Коэффициент);
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Дата, ВалютаДокумента, Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация);
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"Договор",
		ДоговорПоУмолчанию);
	
	СтруктураДанные.Вставить(
		"НаименованиеДоговора",
		ДоговорПоУмолчанию.Наименование);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорПоУмолчанию.ВалютаРасчетов);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ДоговорПоУмолчанию.ВалютаРасчетов)));
	
	СтруктураДанные.Вставить(
		"РасчетыВУсловныхЕдиницах",
		ДоговорПоУмолчанию.РасчетыВУсловныхЕдиницах);
	
	СтруктураДанные.Вставить(
		"ВидЦен",
		ДоговорПоУмолчанию.ВидЦен);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНДС",
		?(ЗначениеЗаполнено(ДоговорПоУмолчанию.ВидЦен), ДоговорПоУмолчанию.ВидЦен.ЦенаВключаетНДС, Неопределено));
	
	СтруктураДанные.Вставить(
		"СпособЗаполненияСтавкиНДС",
		Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоДоговору(ДоговорПоУмолчанию));
	
	СтруктураДанные.Вставить("СпособЗачетаПредоплаты", ПолучитьСпособЗачетаДляДоговора(ДоговорПоУмолчанию, Объект.КонтрагентПолучатель, Истина));
	
	СтруктураДанные.Вставить("БанковскийСчетКонтрагента", Справочники.БанковскиеСчета.БанковскийСчетСубъекта(Контрагент, СтруктураДанные.ВалютаРасчетов));
	
	Если ВалютаДокумента <> СтруктураДанные.ВалютаРасчетов Тогда
		
		СтруктураДанные.Вставить("БанковскийСчет", Справочники.БанковскиеСчета.БанковскийСчетСубъекта(Организация, СтруктураДанные.ВалютаРасчетов, Объект.Дата));
		
	КонецЕсли;
	
	УстановитьВидимостьДоговора();
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		Если ЗначениеЗаполнено(Объект.КонтрагентПолучатель) Тогда
			ДанныеКИКонтрагента = Справочники.Контрагенты.ДанныеКИКонтрагентаДляВыбораНаФорме(
				Объект.КонтрагентПолучатель, Элементы, ПоляКИДляОтправкиЧека());
		КонецЕсли;
		ЗаполнитьПоляКИДляОтправкиЧекаПоУмолчанию(ДанныеКИКонтрагента);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеДоговорПриИзменении()
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"НаименованиеДоговора",
		Объект.Договор.Наименование);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		Объект.Договор.ВалютаРасчетов);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.Договор.ВалютаРасчетов)));
	
	СтруктураДанные.Вставить(
		"ВидЦен",
		Объект.Договор.ВидЦен);
	
	СтруктураДанные.Вставить(
		"РасчетыВУсловныхЕдиницах",
		Объект.Договор.РасчетыВУсловныхЕдиницах);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНДС",
		?(ЗначениеЗаполнено(Объект.Договор.ВидЦен), Объект.Договор.ВидЦен.ЦенаВключаетНДС, Неопределено));
	
	СтруктураДанные.Вставить(
		"СпособЗачетаПредоплаты",
		ПолучитьСпособЗачетаДляДоговора(Объект.Договор, Объект.КонтрагентПолучатель, Истина));
	
	СтруктураДанные.Вставить(
		"СпособЗаполненияСтавкиНДС",
		Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоДоговору(
			Объект.Договор));
			
	Если Объект.ВалютаДокумента <> СтруктураДанные.ВалютаРасчетов Тогда
		
		СтруктураДанные.Вставить("БанковскийСчет", Справочники.БанковскиеСчета.БанковскийСчетСубъекта(Объект.Организация, СтруктураДанные.ВалютаРасчетов, Объект.Дата));
		СтруктураДанные.Вставить("БанковскийСчетКонтрагента", Справочники.БанковскиеСчета.БанковскийСчетСубъекта(Объект.ОрганизацияПолучатель, СтруктураДанные.ВалютаРасчетов, Объект.Дата));
		
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС(ЭтоОткрытие = Ложь)
	
	НалогообложениеПередИзменением = Объект.НалогообложениеНДС;
	
	
	Объект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Объект.Организация, Объект.СтруктурнаяЕдиница, Объект.Дата);
	
	
	Если НЕ НалогообложениеПередИзменением = Объект.НалогообложениеНДС ИЛИ ЭтоОткрытие Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.СчетФактураНадпись.Видимость = Истина;
		
		СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию);
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС);
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			КонецЕсли;	
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;	
		
	Иначе
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		// Доставка
		
		Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
		    СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			Элементы.СчетФактураНадпись.Видимость = Ложь;
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
			Элементы.СчетФактураНадпись.Видимость = Истина;
		КонецЕсли;	
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено, ПараметрыРасчета = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат 
	КонецЕсли;
	Если ПараметрыРасчета = Неопределено Тогда
		ПараметрыРасчета = Новый Структура;
	КонецЕсли;	
	ПараметрыРасчета.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	ТабличныеЧастиУНФКлиент.РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	// Серии номенклатуры
	Если ИспользоватьСерииНоменклатурыОстатки<>Неопределено Тогда
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСерииНоменклатурыКоличество(Объект, СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыРасчетов(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый
		ИЛИ Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой = Строка(Объект.Кратность) + " " + СокрЛП(ВалютаРасчетов) + " = " + Строка(Объект.Курс) + " " + СокрЛП(НациональнаяВалюта);
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(ВалютаРасчетов) + " = " + Строка(КурсНовый) + " " + СокрЛП(НациональнаяВалюта);
		
		ПараметрыВопроса = Новый Структура;
		ПараметрыВопроса.Вставить("КурсНовый", КурсНовый);
		ПараметрыВопроса.Вставить("КратностьНовый", КратностьНовый);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОПересчетеКурсаКратностиВалютыРасчетовЗавершение", ЭтотОбъект, ПараметрыВопроса);
		
		ТекстВопроса = СтрШаблон(НСтр("ru = 'На дату документа у валюты расчетов (%1) был задан курс.
			|Установить курс расчетов (%2) в соответствии с курсом валюты?'"),
			КурсВалютыСтрокой,
			КурсНовыйВалютыСтрокой);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОПересчетеКурсаКратностиВалютыРасчетовЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.Курс = ДополнительныеПараметры.КурсНовый;
		Объект.Кратность = ДополнительныеПараметры.КратностьНовый;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
				СтрокаТабличнойЧасти.СуммаРасчетов,
				СтрокаТабличнойЧасти.Курс,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
				СтрокаТабличнойЧасти.Кратность,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КратностьНациональнаяВалюта, Объект.Кратность));
		КонецЦикла;
			
		Для каждого СтрокаТабличнойЧасти Из Объект.ПредоплатаПолучатель Цикл
			СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
				СтрокаТабличнойЧасти.СуммаРасчетов,
				СтрокаТабличнойЧасти.Курс,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
				СтрокаТабличнойЧасти.Кратность,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КратностьНациональнаяВалюта, Объект.Кратность));
		КонецЦикла;
			
		// Сформируем надпись цены и валюты.
		СтруктураНадписи = Новый Структура;
		СтруктураНадписи.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураНадписи.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураНадписи.Вставить("ВалютаРасчетов", ВалютаРасчетов);
		СтруктураНадписи.Вставить("Курс", Объект.Курс);
		СтруктураНадписи.Вставить("КурсНациональнаяВалюта", КурсНациональнаяВалюта);
		СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураНадписи.Вставить("УчетВалютныхОпераций", УчетВалютныхОпераций);
		СтруктураНадписи.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураНадписи.Вставить("СпециальныйНалоговыйРежим", Объект.СпециальныйНалоговыйРежим);
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением,
		ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ТекстПредупреждения = "")
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТолькоПросмотр", 		  ЭтотОбъект.ТолькоПросмотр);
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				  Объект.Курс);
	СтруктураПараметров.Вставить("Кратность",			  Объект.Кратность);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.НалогообложениеНДС);
	СтруктураПараметров.Вставить("СпециальныйНалоговыйРежим", Объект.СпециальныйНалоговыйРежим);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",	  Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НДСВключатьВСтоимость", Объект.НДСВключатьВСтоимость);
	СтруктураПараметров.Вставить("Контрагент",			  Объект.ОрганизацияПолучатель);
	СтруктураПараметров.Вставить("Договор",				  Объект.Договор);
	СтруктураПараметров.Вставить("Организация",			  Компания);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("ТекстПредупреждения",   ТекстПредупреждения);
	СтруктураПараметров.Вставить("ВалютаПередИзменением", ВалютаРасчетовПередИзменением);
	
	СтруктураПараметров.Вставить("ВидЦен", Объект.ВидЦен);
	
	ЦенообразованиеКлиент.ДополнитьСтруктуруВызоваФормыЦеныИВалютыСтруктурнойЕдиницей(Объект, 
		Объект.Запасы, Элементы.Запасы.ТекущиеДанные, СтруктураПараметров);
	
	// Открываем форму "Цены и Валюта".
	// Перезаполняем табличную часть "Затраты" если были внесены изменения в форме "Цены и Валюта".
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтруктураЦеныИВалюта = РезультатЗакрытия;
	ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
		
		Объект.ВидЦен = СтруктураЦеныИВалюта.ВидЦен;
		
		Объект.ВалютаДокумента = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.Курс = СтруктураЦеныИВалюта.КурсРасчетов;
		Объект.Кратность = СтруктураЦеныИВалюта.КратностьРасчетов;
		Объект.НалогообложениеНДС = СтруктураЦеныИВалюта.НалогообложениеНДС;
		Объект.СпециальныйНалоговыйРежим = СтруктураЦеныИВалюта.СпециальныйНалоговыйРежим;
		Объект.СуммаВключаетНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.НДСВключатьВСтоимость = СтруктураЦеныИВалюта.НДСВключатьВСтоимость;
		
		ОбработатьИзмененияПоКнопкеЦеныИВалютыНаСервере(РезультатЗакрытия, ДополнительныеПараметры);
		
		// Пересчитываем цены по виду цен.
		Если СтруктураЦеныИВалюта.ПерезаполнитьЦены Тогда
			ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, "Запасы", Истина);
		КонецЕсли;
		
		// Пересчитываем цены по валюте.
		Если НЕ СтруктураЦеныИВалюта.ПерезаполнитьЦены
			  И СтруктураЦеныИВалюта.ПересчитатьЦены Тогда	
			ЦенообразованиеКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект, ВалютаРасчетовПередИзменением, "Запасы", СтруктураЦеныИВалюта.КурсПересчетаЦен);
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак Налогообложение НДС.
		Если СтруктураЦеныИВалюта.НалогообложениеНДС <> СтруктураЦеныИВалюта.ПредНалогообложениеНДС Тогда
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если НЕ СтруктураЦеныИВалюта.ПерезаполнитьЦены
			И НЕ СтруктураЦеныИВалюта.СуммаВключаетНДС = СтруктураЦеныИВалюта.ПредСуммаВключаетНДС Тогда
			ЦенообразованиеКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтотОбъект, "Запасы");
		КонецЕсли;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
				СтрокаТабличнойЧасти.СуммаРасчетов,
				СтрокаТабличнойЧасти.Курс,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
				СтрокаТабличнойЧасти.Кратность,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КратностьНациональнаяВалюта, Объект.Кратность));  
		КонецЦикла;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.ПредоплатаПолучатель Цикл
			СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
				СтрокаТабличнойЧасти.СуммаРасчетов,
				СтрокаТабличнойЧасти.Курс,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
				СтрокаТабличнойЧасти.Кратность,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КратностьНациональнаяВалюта, Объект.Кратность));  
		КонецЦикла;
		
	КонецЕсли;
	
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура;
	СтруктураНадписи.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураНадписи.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("ВалютаРасчетов", ВалютаРасчетов);
	СтруктураНадписи.Вставить("Курс", Объект.Курс);
	СтруктураНадписи.Вставить("КурсНациональнаяВалюта", КурсНациональнаяВалюта);
	СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураНадписи.Вставить("УчетВалютныхОпераций", УчетВалютныхОпераций);
	СтруктураНадписи.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураНадписи.Вставить("СпециальныйНалоговыйРежим", Объект.СпециальныйНалоговыйРежим);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры // ОткрытьФормуЦеныИВалютаЗавершение()

&НаСервере
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыНаСервере(РезультатЗакрытия, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.ВалютаРасчетовПередИзменением <> РезультатЗакрытия.ВалютаДокумента Тогда
		
		Объект.БанковскийСчет = Справочники.БанковскиеСчета.БанковскийСчетСубъекта(Объект.Организация, Объект.ВалютаДокумента, Объект.Дата);
		Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчета.БанковскийСчетСубъекта(Объект.ОрганизацияПолучатель, Объект.ВалютаДокумента, Объект.Дата);
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(ПоляНадписи)
	
	КомпонентыНадписи = Новый Массив;
	
	Если ПоляНадписи.УчетВалютныхОпераций И ЗначениеЗаполнено(ПоляНадписи.ВалютаДокумента) Тогда
		КомпонентыНадписи.Добавить(ПредставлениеВалютаИКурс(ПоляНадписи));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоляНадписи.ВидЦен) Тогда
		КомпонентыНадписи.Добавить(СокрЛП(ПоляНадписи.ВидЦен));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоляНадписи.НалогообложениеНДС) Тогда
		КомпонентыНадписи.Добавить(РаботаСФормойДокументаКлиентСервер.КраткоеПредставлениеТипаНалогообложенияНДС(ПоляНадписи.НалогообложениеНДС));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоляНадписи.СпециальныйНалоговыйРежим)
		И ПоляНадписи.СпециальныйНалоговыйРежим <> ПредопределенноеЗначение("Перечисление.СпециальныеНалоговыеРежимы.НеПрименяется") Тогда
		КомпонентыНадписи.Добавить(СокрЛП(ПоляНадписи.СпециальныйНалоговыйРежим));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КомпонентыНадписи) Тогда
		Если ПоляНадписи.СуммаВключаетНДС Тогда
			КомпонентыНадписи.Добавить(НСтр("ru = 'Сумма включает НДС'"));
		Иначе
			КомпонентыНадписи.Добавить(НСтр("ru = 'Сумма не включает НДС'"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрСоединить(КомпонентыНадписи, " • ");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеВалютаИКурс(Знач ПоляНадписи)
	
	КомпонентыВалютаИКурс = Новый Массив;
	
	Если ПоляНадписи.ВалютаДокумента = УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
		КомпонентыВалютаИКурс.Добавить(СокрЛП(ПоляНадписи.ВалютаДокумента));
	Иначе
		КомпонентыВалютаИКурс.Добавить(
			СокрЛП(УправлениеНебольшойФирмойПовтИсп.ПолучитьСимвольноеПредставлениеВалюты(ПоляНадписи.ВалютаДокумента)));
		КомпонентыВалютаИКурс.Добавить(СокрЛП(ПоляНадписи.Курс));
	КонецЕсли;
	
	Возврат СтрСоединить(КомпонентыВалютаИКурс, " ");
	
КонецФункции

// ПодключаемоеОборудование
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		ДанныеШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() <> 0 Тогда
			
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("Организация", СтруктураДанные.Организация);
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			СтруктураДанныеНоменклатуры.Вставить("СтранаПроисхождения", ДанныеШтрихкода.Номенклатура.СтранаПроисхождения);
			СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
			СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", СтруктураДанные.НалогообложениеНДС);
			Если ЗначениеЗаполнено(СтруктураДанные.ВидЦен) Тогда
				СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);
				СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", СтруктураДанные.ВалютаДокумента);
				СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", СтруктураДанные.СуммаВключаетНДС);
				СтруктураДанныеНоменклатуры.Вставить("ВидЦен", СтруктураДанные.ВидЦен);
				Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения)
					И ТипЗнч(ДанныеШтрихкода.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
					СтруктураДанныеНоменклатуры.Вставить("Коэффициент", ДанныеШтрихкода.ЕдиницаИзмерения.Коэффициент);
				Иначе
					СтруктураДанныеНоменклатуры.Вставить("Коэффициент", 1);
				КонецЕсли;
			КонецЕсли;
			
			// МинимальныеЦены
			Если СтруктураДанные.Свойство("СтруктурнаяЕдиница") Тогда 					
				СтруктураДанныеНоменклатуры.Вставить("СтруктурнаяЕдиница", СтруктураДанные.СтруктурнаяЕдиница);					
			КонецЕсли;				
			// Конец МинимальныеЦены
			
			ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
			
			Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
				ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого Параметр Из СтруктураДанные.ПараметрыВыбора Цикл
		Если Параметр.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(Параметр.Значение) = Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", Параметр.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(Параметр.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("ПараметрыВыбора", Элементы.ЗапасыНоменклатура.ПараметрыВыбора);
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, Неопределено, СтруктураДанные);
	
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
			ДанныеШтрихкода = Новый Структура;
			ДанныеШтрихкода.Вставить("Штрихкод", ТекШтрихкод.Штрихкод);
			ДанныеШтрихкода.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			ДанныеШтрихкода.Вставить("ТипНоменклатуры", ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры);
			ДанныеШтрихкода.Вставить("ЭтоНабор", ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор);
			ШтрихкодыНекорректногоТипа.Добавить(ДанныеШтрихкода);
		Иначе
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			СтруктураПоиска.Вставить("ЕдиницаИзмерения", ДанныеШтрихкода.ЕдиницаИзмерения);
			СтруктураПоиска.Вставить("НоменклатураНабора", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
			МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				НоваяСтрока = Объект.Запасы.Добавить();
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиница", "ПоложениеСклада");
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Ячейка", "ПоложениеСклада");
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				Если КэшЗначений.ИспользоватьМинимальныеЦены
					И НоваяСтрока.Свойство("МинимальнаяЦена")
					И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("МинимальнаяЦена") Тогда
					
					НоваяСтрока.МинимальнаяЦена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.МинимальнаяЦена;
					
				КонецЕсли;
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				НоваяСтрока.ТипНоменклатурыЗапас = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоЗапас;
				
				НоваяСтрока.ВесЕдиницыТовара = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ВесЕдиницыТовара;
				НоваяСтрока.Вес = НоваяСтрока.ВесЕдиницыТовара * НоваяСтрока.Количество;
				НоваяСтрока.ОбъемЕдиницыТовара = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ОбъемЕдиницыТовара;
				НоваяСтрока.Объем = НоваяСтрока.ОбъемЕдиницыТовара * НоваяСтрока.Количество;
				
				ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("СтранаПроисхождения", НоваяСтрока.СтранаПроисхождения);
				ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("НомерГТД", НоваяСтрока.НомерГТД);
				
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСкладВСтрокеТЧЗапасы(НоваяСтрока, Объект, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
				НоваяСтрока.ЯчейкаДоступна = ЯчейкаДоступна(НоваяСтрока.СтруктурнаяЕдиница);
				
				Если  ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
					// Наборы
					ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
					// Конец Наборы
				Иначе
					РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
					Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				КонецЕсли; 
				
			Иначе
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				НоваяСтрока.Вес = НоваяСтрока.ВесЕдиницыТовара * НоваяСтрока.Количество;
				НоваяСтрока.Объем = НоваяСтрока.ОбъемЕдиницыТовара * НоваяСтрока.Количество;
				
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
			Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьПодвалФормы();
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов) Экспорт
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов);
	НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект, , , , Оповещение);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияХарактеристик()
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

&НаСервере
Процедура УстановитьВидимостьДоговора()
	
	Если ЗначениеЗаполнено(Объект.ОрганизацияПолучатель) Тогда
		
		
		КонтрагентВестиРасчетыПоЗаказам = Ложь;
		Элементы.Договор.Видимость = Истина;
		
	Иначе
		
		КонтрагентВестиРасчетыПоЗаказам = Ложь;
		Элементы.Договор.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьДоговора()

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Истина);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	Возврат Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеДоговора()
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.Договор;
	
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		ДанныеДоговора = ПолучитьДанныеДоговорПриИзменении();
		ПечатьДокументовУНФКлиент.ПриИзмененииДоговораКонтрагента(Объект.Договор, Объект.ОснованиеПечатиСсылка, Объект.ОснованиеПечати, КэшЗначений);
		
		Если Объект.СпособЗачетаПредоплаты <> ДанныеДоговора.СпособЗачетаПредоплаты Тогда
			Объект.СпособЗачетаПредоплаты = ДанныеДоговора.СпособЗачетаПредоплаты;
			СпособЗачетаПредоплатыПриИзмененииНаСервере(ИмяТЧПредоплата());
		КонецЕсли;
		Если Объект.СпособЗачетаПредоплатыПолучатель <> ДанныеДоговора.СпособЗачетаПредоплаты Тогда
			Объект.СпособЗачетаПредоплатыПолучатель = ДанныеДоговора.СпособЗачетаПредоплаты;
			СпособЗачетаПредоплатыПриИзмененииНаСервере(ИмяТЧПредоплатаПолучатель());
		КонецЕсли; 
		
		Если (Объект.Предоплата.Количество() > 0 ИЛИ Объект.ПредоплатаПолучатель.Количество() > 0)
			И Объект.Договор <> ДоговорПередИзменением Тогда
			
			ПараметрыДокумента = Новый Структура;
			ПараметрыДокумента.Вставить("ДоговорПередИзменением", ДоговорПередИзменением);
			ПараметрыДокумента.Вставить("ДанныеДоговора", ДанныеДоговора);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОбОчисткеПредоплатыЗавершение", ЭтотОбъект, ПараметрыДокумента);
			ТекстВопроса = НСтр("ru = 'Зачет предоплаты будет очищен, продолжить?'");
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
		ОбработатьИзменениеУсловийДоговора(ДанныеДоговора, ДоговорПередИзменением);
		ЗаполнитьТаблицуПросмотраНаКлиенте();
		СпособЗаполненияСтавкиНДС = ДанныеДоговора.СпособЗаполненияСтавкиНДС;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОбОчисткеПредоплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДоговорПередИзменением = ДополнительныеПараметры.ДоговорПередИзменением;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Предоплата.Очистить();
		Объект.ПредоплатаПолучатель.Очистить();
	Иначе
		Если ДополнительныеПараметры.Свойство("ИзменениеКонтрагента") Тогда
			Объект.ОрганизацияПолучатель = ДополнительныеПараметры.ОрганизацияПередИзменением;
			Организация = ДополнительныеПараметры.ОрганизацияПередИзменением;
			КонтрагентВестиРасчетыПоЗаказам = ДополнительныеПараметры.КонтрагентВестиРасчетыПоЗаказамПередИзменением;
			Элементы.Договор.Видимость = ДополнительныеПараметры.ВидимостьДоговораПередИзменением;
		КонецЕсли;
		Объект.Договор = ДоговорПередИзменением;
		Договор = ДоговорПередИзменением;
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеУсловийДоговора(ДополнительныеПараметры.ДанныеДоговора, ДоговорПередИзменением);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеУсловийДоговора(ДанныеДоговора, ДоговорПередИзменением)
	
	Если КэшЗначений.ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати Тогда
		ШаблонПредставления = НСтр("ru = 'Договор: %1'");
	Иначе
		ШаблонПредставления = НСтр("ru = '%1'");
	КонецЕсли;
	Объект.ОснованиеПечати = СтрШаблон(ШаблонПредставления, Строка(Объект.Договор));
	
	ВалютаРасчетовПередИзменением = ВалютаРасчетов;
	ВалютаРасчетов = ДанныеДоговора.ВалютаРасчетов;
	
	Если Не ДанныеДоговора.СуммаВключаетНДС = Неопределено Тогда
		Объект.СуммаВключаетНДС = ДанныеДоговора.СуммаВключаетНДС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		Объект.Курс      = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс);
		Объект.Кратность = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность);
	КонецЕсли;
	
	ИзменилсяВидЦен = Объект.ВидЦен <> ДанныеДоговора.ВидЦен 
		И ЗначениеЗаполнено(ДанныеДоговора.ВидЦен);
		
	ПечатьДокументовУНФКлиент.ПриИзмененииДоговораКонтрагента(Объект.Договор, Объект.ОснованиеПечатиСсылка, Объект.ОснованиеПечати, КэшЗначений);
	
	ВопросВидЦен = ЗначениеЗаполнено(Объект.Договор) И ИзменилсяВидЦен;
	Если ВопросВидЦен Тогда
		Если ИзменилсяВидЦен Тогда
			Объект.ВидЦен = ДанныеДоговора.ВидЦен;
		КонецЕсли; 
	КонецЕсли;
	
	ОткрытьФормуЦеныИВалюты = (ЗначениеЗаполнено(Объект.Договор) И ЗначениеЗаполнено(ВалютаРасчетов)
		И Объект.Договор <> ДоговорПередИзменением И ВалютаРасчетовПередИзменением <> ДанныеДоговора.ВалютаРасчетов)
		И Объект.ВалютаДокумента <> ДанныеДоговора.ВалютаРасчетов
		И Объект.Запасы.Количество() > 0;
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ДоговорПередИзменением", ДоговорПередИзменением);
	ПараметрыДокумента.Вставить("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением);
	ПараметрыДокумента.Вставить("ДанныеДоговора", ДанныеДоговора);
	
	Объект.ВалютаДокумента = ВалютаРасчетов;
	Если ДанныеДоговора.Свойство("БанковскийСчет") Тогда
		
		Объект.БанковскийСчет = ДанныеДоговора.БанковскийСчет;
		
	КонецЕсли;
	
	Если ДанныеДоговора.Свойство("БанковскийСчетКонтрагента") Тогда
		
		Объект.БанковскийСчетКонтрагента = ДанныеДоговора.БанковскийСчетКонтрагента;
		
	КонецЕсли;
	
	Если ОткрытьФормуЦеныИВалюты Тогда
		
		ТекстПредупреждения = "";
		Если ВопросВидЦен Тогда
			ТекстПредупреждения = НСтр("ru = 'Договор с контрагентом предусматривает условия цен и скидок, 
				|отличные от установленных в документе. 
				|Возможно, необходимо перезаполнить цены.'") + Символы.ПС + Символы.ПС;
		КонецЕсли;
		
		ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом. 
										|Необходимо проверить валюту документа.'");
		
		ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, ИзменилсяВидЦен, Истина, ТекстПредупреждения);
		
	ИначеЕсли ВопросВидЦен Тогда
		
		ПересчетНеобходим = (Объект.Запасы.Количество() > 0);
		
		СтруктураНадписи = Новый Структура;
		СтруктураНадписи.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураНадписи.Вставить("ВалютаРасчетов", ВалютаРасчетов);
		СтруктураНадписи.Вставить("Курс", Объект.Курс);
		СтруктураНадписи.Вставить("КурсНациональнаяВалюта", КурсНациональнаяВалюта);
		СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураНадписи.Вставить("УчетВалютныхОпераций", УчетВалютныхОпераций);
		СтруктураНадписи.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураНадписи.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураНадписи.Вставить("СпециальныйНалоговыйРежим", Объект.СпециальныйНалоговыйРежим);
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
		Если ПересчетНеобходим Тогда
			
			ТекстВопроса = НСтр("ru = 'Договор с контрагентом предусматривает условия цен и скидок, отличные от установленных в документе. 
				|Пересчитать документ в соответствии с договором?'");
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПересчетаПоВидуЦенЗавершение", ЭтотОбъект, ПараметрыДокумента);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	Иначе
		
		СтруктураНадписи = Новый Структура;
		СтруктураНадписи.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураНадписи.Вставить("ВалютаРасчетов", ВалютаРасчетов);
		СтруктураНадписи.Вставить("Курс", Объект.Курс);
		СтруктураНадписи.Вставить("КурсНациональнаяВалюта", КурсНациональнаяВалюта);
		СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураНадписи.Вставить("УчетВалютныхОпераций", УчетВалютныхОпераций);
		СтруктураНадписи.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураНадписи.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураНадписи.Вставить("СпециальныйНалоговыйРежим", Объект.СпециальныйНалоговыйРежим);
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
	КонецЕсли;
	
	// Номенклатура
	УстановитьПараметрыВыбораНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПересчетаПоВидуЦенЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, "Запасы", Истина);
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора()

&НаСервере
Процедура ОбновитьВидимостьИОстаткиВзаиморасчетов()
	
	Если (ОбщегоНазначения.ЭтоМобильныйКлиент() ИЛИ НЕ Элементы.ГруппаПредоплата.Видимость) Тогда
		Элементы.ОстатокВзаиморасчетовСтраницаОплата.Видимость = Ложь;
	Иначе
		Элементы.ОстатокВзаиморасчетовСтраницаОплата.Видимость = НЕ Объект.ОрганизацияПолучатель.Ссылка.Пустая();
	КонецЕсли;
	
	Если (ОбщегоНазначения.ЭтоМобильныйКлиент() ИЛИ НЕ Элементы.ГруппаПредоплатаПолучатель.Видимость) Тогда
		Элементы.ОстатокВзаиморасчетовСтраницаОплатаПолучатель.Видимость = Ложь;
	Иначе
		Элементы.ОстатокВзаиморасчетовСтраницаОплатаПолучатель.Видимость = НЕ Объект.Организация.Ссылка.Пустая();
	КонецЕсли;
	
	Элементы.ОстатокВзаиморасчетовСтраницаОплата.Заголовок = РаботаСКонтрагентамиУНФ.ЗаголовокНадписиВзаиморасчетов(Объект.ОрганизацияПолучатель);;
	Элементы.ОстатокВзаиморасчетовСтраницаОплатаПолучатель.Заголовок = РаботаСКонтрагентамиУНФ.ЗаголовокНадписиВзаиморасчетов(Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредоплату(ТекущийОбъект, ИмяТЧ)
	
	ТекущийОбъект.ЗаполнитьПредоплату(ИмяТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодвалФормы()
	
	ИтогВсего = Объект.Запасы.Итог("Всего");
	ИтогСуммаНДС = Объект.Запасы.Итог("СуммаНДС") ;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьВидимостьНастроекУчетаВНалогообложении(ЭтоИзменениеОперации = Ложь)
	
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда
		Элементы.ЗапасыТоварыНеДляПродажи.Видимость = Ложь;
		Элементы.ГруппаУчетВНУ.Видимость = Ложь;
		
		Возврат;
	Иначе
		Элементы.ЗапасыТоварыНеДляПродажи.Видимость = Истина;
		Элементы.ГруппаУчетВНУ.Видимость = Истина;
	КонецЕсли;
	
	СистемаНалогообложенияСтруктура = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(Объект.Организация, Объект.Дата);
	
	Если Не СистемаНалогообложенияСтруктура.ПлательщикУСН Тогда
		Элементы.ГруппаУчетВНУ.Видимость = Ложь;
	Иначе
		Элементы.ГруппаУчетВНУ.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ЗапасыТоварыНеДляПродажи.Видимость = Элементы.ГруппаУчетВНУ.Видимость;
	
	Элементы.ЗапасыТоварыНеДляПродажи.Видимость = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И Не ЭтоИзменениеОперации И СистемаНалогообложенияСтруктура.ПлательщикУСН И СистемаНалогообложенияСтруктура.ПлательщикЕНВД Тогда
		Объект.УчитыватьВНУ = НЕ (Объект.Организация.ВидУчетаСтраховыхВзносов = Перечисления.ВидыУчетаСтраховыхВзносов.УчитыватьВЕНВД);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиУчетаВНалогообложении()
	
	ОпределитьВидимостьНастроекУчетаВНалогообложении();
	Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация,?(ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница),Объект.СтруктурнаяЕдиница, Неопределено),Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Функция НаборОснованийПечати()
	
	Результат = Новый Массив;
	
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплату") Тогда
		
		Результат.Добавить(Объект.ДокументОснование);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УказатьЦенуСертификата(Результат, ВыбраннаяСтрока) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ВыбраннаяСтрока.Цена = Результат;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеХарактеристикиПартииВКэш()
	
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	ИспользоватьПартии = ПолучитьФункциональнуюОпцию("ИспользоватьПартии");
	
	Если НЕ ИспользоватьПартии И НЕ ИспользоватьХарактеристики Тогда Возврат КонецЕсли;
	
	КэшХарактеристикиИПартии = Новый ТаблицаЗначений;
	
	КэшХарактеристикиИПартии.Колонки.Добавить("Номенклатура");
	КэшХарактеристикиИПартии.Колонки.Добавить("ИспользоватьХарактеристики");
	КэшХарактеристикиИПартии.Колонки.Добавить("ПроверятьЗаполнениеХарактеристики");
	КэшХарактеристикиИПартии.Колонки.Добавить("ЗаполнениеХарактеристикиПроверено");
	КэшХарактеристикиИПартии.Колонки.Добавить("ИспользоватьПартии");
	КэшХарактеристикиИПартии.Колонки.Добавить("ПроверятьЗаполнениеПартий");
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	МассивИменТабличныхЧастей = Новый Массив;
	
	Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		
		Если НЕ ТабличнаяЧасть.Реквизиты.Найти("Характеристика") = Неопределено Тогда
			МассивИменТабличныхЧастей.Добавить(ТабличнаяЧасть.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ИмяТабличнойЧасти Из МассивИменТабличныхЧастей Цикл
		
		Для Каждого СтрокаТЧ Из Объект[ИмяТабличнойЧасти] Цикл
			
			НоваяСтрока = КэшХарактеристикиИПартии.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДанныеХарактеристикиПартииИзКэш()
	
	Если КэшХарактеристикиИПартии = Неопределено Тогда Возврат КонецЕсли;
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	МассивИменТабличныхЧастей = Новый Массив;
	
	Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		
		Если НЕ ТабличнаяЧасть.Реквизиты.Найти("Характеристика") = Неопределено Тогда
			МассивИменТабличныхЧастей.Добавить(ТабличнаяЧасть.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ИмяТабличнойЧасти Из МассивИменТабличныхЧастей Цикл
		
		Для Каждого СтрокаТЧ Из Объект[ИмяТабличнойЧасти] Цикл
		
			ПараметрыОтбора = Новый Структура("Номенклатура", СтрокаТЧ.Номенклатура);
			
			НайденныеСтроки = КэшХарактеристикиИПартии.НайтиСтроки(ПараметрыОтбора);
			
			Если Не НайденныеСтроки.Количество() Тогда Продолжить КонецЕсли;
			
			СтрокаКэша = НайденныеСтроки[0];
			
			СтрокаТЧ.ИспользоватьХарактеристики = СтрокаКэша.ИспользоватьХарактеристики;
			СтрокаТЧ.ПроверятьЗаполнениеХарактеристики = СтрокаКэша.ПроверятьЗаполнениеХарактеристики;
			СтрокаТЧ.ЗаполнениеХарактеристикиПроверено = СтрокаКэша.ЗаполнениеХарактеристикиПроверено;
			СтрокаТЧ.ИспользоватьПартии = СтрокаКэша.ИспользоватьПартии;
			СтрокаТЧ.ПроверятьЗаполнениеПартий = СтрокаКэша.ПроверятьЗаполнениеПартий;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НомераГТДЗаполнитьПоФактическимОстаткамНаСервере(ЭтоКонтекстныйВызов)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ТаблицаЗапасы", Неопределено);
	ПараметрыПодбора.Вставить("ОстаткиПоГТД", Неопределено);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("ИндексТекущейСтроки", ?(ЗначениеЗаполнено(Элементы.Запасы.ТекущаяСтрока), Объект.Запасы.Индекс(Объект.Запасы.НайтиПоИдентификатору(Элементы.Запасы.ТекущаяСтрока)), 0));
	ПараметрыПодбора.Вставить("ЕстьКлючСвязиАвтоматическихСкидок", Неопределено);
		
	Если НЕ ЭтоКонтекстныйВызов Тогда
		
		ПараметрыПодбора.Вставить("ПроверятьПометку", Истина);
		
	КонецЕсли;
	
	МассивИменПолей = Новый Массив;
	МассивИменПолей.Добавить("Резерв");
	МассивИменПолей.Добавить("Сумма");
	МассивИменПолей.Добавить("СуммаНДС");
	МассивИменПолей.Добавить("Всего");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиНаценкиПродажи") Тогда
		
		МассивИменПолей.Добавить("СуммаСкидкиНаценки");
		
	КонецЕсли;
	
	ПараметрыПодбора.Вставить("ИменаПолей", МассивИменПолей);
	
	ГрузовыеТаможенныеДекларацииСервер.ПодготовитьТаблицуЗапасовИзТаблицыФормы(ПараметрыПодбора, Объект.Запасы);
	ГрузовыеТаможенныеДекларацииСервер.СформироватьОстаткиНомеровГТД(ПараметрыПодбора);
	ГрузовыеТаможенныеДекларацииСервер.ПеренестиОстаткиНомеровГТДВТаблицуФормы(Объект.Запасы, ПараметрыПодбора);
	
	Если ПараметрыПодбора.ИндексТекущейСтроки <> -1 Тогда
		
		СтрокаКоллекции = Объект.Запасы.Получить(ПараметрыПодбора.ИндексТекущейСтроки);
		Элементы.Запасы.ТекущаяСтрока = СтрокаКоллекции.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НомераГТДПодобратьНаСервере(ЭтоКонтекстныйВызов)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ТаблицаЗапасы", Неопределено);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	
	Если НЕ ЭтоКонтекстныйВызов Тогда
		
		ПараметрыПодбора.Вставить("ПроверятьПометку", Истина);
		
	КонецЕсли;
	
	ГрузовыеТаможенныеДекларацииСервер.ПодготовитьТаблицуЗапасовИзТаблицыФормы(ПараметрыПодбора, Объект.Запасы);
	ГрузовыеТаможенныеДекларацииСервер.ПодобратьНомераГТДПоПредыдущимПоступлениям(ПараметрыПодбора);
	ГрузовыеТаможенныеДекларацииСервер.ПеренестиНомераГТДВТаблицуФормы(Объект.Запасы, ПараметрыПодбора);
	
КонецПроцедуры

&НаСервере
Процедура НомераГТДОчиститьНомераИСтраныПроисхожденияНаСервере()
	
	ГрузовыеТаможенныеДекларацииСервер.ОчиститьНомераГТДИСтраныПроисхождения(Объект.Запасы);
	
КонецПроцедуры

// Остатки в Табличной части
&НаКлиенте
Процедура ОбновитьОтображениеКолонокВРазрезеЗапасов()
	
	Элементы.ЗапасыСтруктурнаяЕдиница.Видимость = НЕ СкладВШапке;
	
	Если КэшЗначений.УчетПоЯчейкам Тогда
		Элементы.ЗапасыЯчейка.Видимость = НЕ СкладВШапке;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьРеквизитыВТЧ(Объект, ИмяРеквизита = "")
	
	ЕстьИзменения = Ложь;
	
	Если (ПустаяСтрока(ИмяРеквизита)
		ИЛИ ИмяРеквизита = "СтруктурнаяЕдиница")
		И Объект.ПоложениеСклада <> ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			Если СтрокаТабличнойЧасти.СтруктурнаяЕдиница <> Объект.СтруктурнаяЕдиница
				ИЛИ СтрокаТабличнойЧасти.Ячейка <> Объект.Ячейка Тогда
				ЕстьИзменения = Истина;
				СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
				СтрокаТабличнойЧасти.Ячейка = Объект.Ячейка;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	Возврат ЕстьИзменения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстСодержания(Знач Номенклатура, Знач Характеристика)
	Возврат ТабличныеЧастиУНФ.ТекстСодержания(Номенклатура, Характеристика);
КонецФункции

#КонецОбласти

#Область РаботаСПодбором

&НаКлиенте
Процедура Подбор(Команда)
	
	ИмяТабличнойЧасти  = "Запасы";
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры // ПодборВыполнить()

&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиница", "ПоложениеСклада");
		ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Ячейка", "ПоложениеСклада");
		
		Если НоваяСтрока.Свойство("Пометка") Тогда
			
			НоваяСтрока.Пометка = Истина;
			
		КонецЕсли;
		
		Если НЕ СкладВШапке = Истина Тогда
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтруктурнаяЕдиница) Тогда
				
				НоваяСтрока.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаЗагрузки.Номенклатура) Тогда
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаЗагрузки.Номенклатура, "ТипНоменклатуры, Вес, Объем, ЭтоНабор, СпособРасчетаЦеныНабора");
			
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
			СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ЗначенияРеквизитов.ТипНоменклатуры);
			СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
			СтруктураДанныеНоменклатуры.Вставить("Партия", СтрокаЗагрузки.Партия);
			СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
			СтруктураДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", СтрокаЗагрузки.ЕдиницаИзмерения);
			СтруктураДанныеНоменклатуры.Вставить("СтруктурнаяЕдиница", НоваяСтрока.СтруктурнаяЕдиница);
			
			Если ЗначенияРеквизитов.ЭтоНабор Тогда
				
				// Наборы
				Если ЗначениеЗаполнено(НоваяСтрока.Цена) 
					И ЗначенияРеквизитов.СпособРасчетаЦеныНабора <> Перечисления.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих Тогда
					СтруктураДанныеНоменклатуры.Вставить("Цена", НоваяСтрока.Цена);
				КонецЕсли;
				Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
					СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
					СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
					СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
					СтруктураДанныеНоменклатуры.Вставить("ВидЦен", Объект.ВидЦен);
				КонецЕсли;
				
				ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры);

				СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
				
				ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, НоваяСтрока, СтруктураДанные);
				
				ЗаполнитьПризнакиИспользованияХарактеристик();
				
				Продолжить;
				// Конец Наборы
				
			Иначе
				
				НоваяСтрока.ТипНоменклатурыЗапас = (ЗначенияРеквизитов.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"))
												ИЛИ (ЗначенияРеквизитов.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
				НоваяСтрока.ВесЕдиницыТовара = ЗначенияРеквизитов.Вес;
				НоваяСтрока.Вес = НоваяСтрока.ВесЕдиницыТовара * СтрокаЗагрузки.Количество;
				НоваяСтрока.ОбъемЕдиницыТовара = ЗначенияРеквизитов.Объем;
				НоваяСтрока.Объем = НоваяСтрока.ОбъемЕдиницыТовара * СтрокаЗагрузки.Количество;
				
				ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры);

				СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанныеНоменклатуры);
				СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
				
			КонецЕсли;
			
			// Характеристики
			НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
			НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
			НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
			
			Если СтруктураДанные.ИспользоватьХарактеристики
				Тогда
				НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
			// Конец Характеристики
			
			//Партии
			НоваяСтрока.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
			НоваяСтрока.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
			
			Если СтруктураДанные.ИспользоватьПартии
				Тогда
				НоваяСтрока.Партия = СтруктураДанные.Партия;
			КонецЕсли;
			// Конец Партии
			
			НоваяСтрока.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
			ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТабличнойЧасти], НоваяСтрока, "КлючСвязи");
			
			НоваяСтрока.СтранаПроисхождения  = СтруктураДанные.СтранаПроисхождения;
			НоваяСтрока.НомерГТД = СтруктураДанные.НомерГТД;
			
			// ИнтеграцияГосИС
			Если ФОВестиУчетТабачнойПродукцииМОТП ИЛИ ФОВестиУчетОбувнойПродукцииИСМП Тогда
				ИнтеграцияИСМПУНФ.ЗаполнитьСлужебныеРеквизитыИСМПВСтрокеТЧ(НоваяСтрока);
			КонецЕсли;
			// Конец ИнтеграцияГосИС
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы", Ложь);

	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	
	// ИнтеграцияГосИС
	СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Запасы", Новый Структура);
	// Конец ИнтеграцияГосИС
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

&НаСервере
Функция ПоместитьПредоплатаВХранилище(ИмяТЧ)
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект[ИмяТЧ].Выгрузить(,
			"Документ,
			|НомерСертификата,
			|СуммаРасчетов,
			|Курс,
			|Кратность,
			|СуммаПлатежа"),
		УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище, ИмяТЧ)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресПредоплатаВХранилище);
	
	Объект[ИмяТЧ].Загрузить(ТаблицаДляЗагрузки);
	ОбновитьЗаголовкиЗакладокОплаты(ИмяТЧ);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	УсловноеОформление.Элементы.Очистить();
	
	
	// Доступность колонки СтруктурнаяЕдиница
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ТипНоменклатурыЗапас", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСтруктурнаяЕдиница,ЗапасыЯчейка,ЗапасыЯчейкаДляРежимаОстатки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Для товаров>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	// Наборы
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.НоменклатураНабора", Справочники.Номенклатура.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыНоменклатура,ЗапасыХарактеристика,ЗапасыКоличество,ЗапасыЕдиницаИзмерения");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	// Конец Наборы
	
	// Характеристики
	НоменклатураВДокументахСервер.ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик(ЭтаФорма);
	
	// Ячейки
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ЯчейкаДоступна", Ложь);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЯчейка");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыОстатокВЯчейке");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЯчейкаДляРежимаОстатки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "");
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	НоменклатураВДокументахСервер.УстановитьУсловноеОформлениеЗапасыИРезервы(ЭтаФорма);
	
	// Минимальные цены
	ЦенообразованиеСервер.УстановитьУсловноеОформлениеМинимальнойЦены(УсловноеОформление, "Запасы", ?(КэшЗначений.Свойство("ИспользоватьМинимальныеЦены"), КэшЗначений.ИспользоватьМинимальныеЦены, Ложь));

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступность()
	
	Элементы.ФормаПровести.Доступность = РазрешеноРедактированиеДокумента;
	Элементы.ФормаЗаписать.Доступность = РазрешеноРедактированиеДокумента;
	Элементы.ФормаПровестиИЗакрыть.Доступность = РазрешеноРедактированиеДокумента;
	
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура;
	СтруктураНадписи.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураНадписи.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("ВалютаРасчетов", ВалютаРасчетов);
	СтруктураНадписи.Вставить("Курс", Объект.Курс);
	СтруктураНадписи.Вставить("КурсНациональнаяВалюта", КурсНациональнаяВалюта);
	СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураНадписи.Вставить("УчетВалютныхОпераций", УчетВалютныхОпераций);
	СтруктураНадписи.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураНадписи.Вставить("СпециальныйНалоговыйРежим", Объект.СпециальныйНалоговыйРежим);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	// Номенклатура.
	УстановитьПараметрыВыбораНоменклатуры();
	
	// Партии.
	МассивСтатусовДляВыбораНоменклатуры = Новый Массив;
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
	
	МассивСтатусовДляВыбораНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	МассивСтатусовДляВыбораНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
	
	МассивСобственныеЗапасыИТоварыНаКомиссии = Новый ФиксированныйМассив(НовыйМассив);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", МассивСобственныеЗапасыИТоварыНаКомиссии);
	НовыйПараметр2 = Новый ПараметрВыбора("Дополнительно.ОграничениеСтатуса", МассивСобственныеЗапасыИТоварыНаКомиссии);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыйМассив.Добавить(НовыйПараметр2);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыПартия.ПараметрыВыбора = НовыеПараметры;
	
	// Зачет предоплаты.
	Элементы.ГруппаПредоплата.Видимость = Истина;
	Элементы.ГруппаПредоплатаПолучатель.Видимость = Истина;
	Элементы.СпособЗачетаПредоплаты.Доступность = Истина;
	Элементы.ВариантЗаполненияРасшифровки.Доступность = Элементы.СпособЗачетаПредоплаты.Доступность;
	Элементы.ОткрытьПомощникЗачетаПредоплаты.Доступность = Элементы.СпособЗачетаПредоплаты.Доступность;
	Элементы.СпособЗачетаПредоплатыПолучатель.Доступность = Истина;
	Элементы.ВариантЗаполненияРасшифровкиПолучатель.Доступность = Элементы.СпособЗачетаПредоплатыПолучатель.Доступность;
	Элементы.ОткрытьПомощникЗачетаПредоплатыПолучатель.Доступность = Элементы.СпособЗачетаПредоплатыПолучатель.Доступность;
	
	// Подразделение.
	Элементы.Подразделение.АвтоВыборНезаполненного = Истина;
	Элементы.Подразделение.АвтоОтметкаНезаполненного = Истина;
	
	// Ставка НДС, Сумма НДС, Всего.
	Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.СчетФактураНадпись.Видимость = Истина;
		
	Иначе
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НаЭкспорт Тогда
			Элементы.СчетФактураНадпись.Видимость = Истина;
		Иначе
			Элементы.СчетФактураНадпись.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ВидимостьЭлементовПродажаВозврат = Истина;
	
	Если Элементы.СчетФактураНадпись.Видимость Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетФактураНадпись", "Видимость", ВидимостьЭлементовПродажаВозврат);
	КонецЕсли;
	
	ЭтоПередачаНаКомиссию = Ложь;
	ЭтоВозвратПоставщику = Ложь;
	ЭтоВозвратКомитенту = Ложь;
	ЭтоПродажаПокупателю = Истина;
	
	СведенияОбИмпортеВидны = ЭтоПродажаПокупателю ИЛИ ЭтоВозвратПоставщику ИЛИ ЭтоПередачаНаКомиссию ИЛИ ЭтоВозвратКомитенту;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыНомерГТД", "Видимость", 							СведенияОбИмпортеВидны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтранаПроисхождения", "Видимость", 				СведенияОбИмпортеВидны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТД", "Видимость", 								СведенияОбИмпортеВидны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТДКонтекст", "Видимость", 						СведенияОбИмпортеВидны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НомераГТДКонтекстЗаполнитьПоФактическимОстаткам", "Видимость", СведенияОбИмпортеВидны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НомераГТДКонтекстПодобрать", "Видимость", 				СведенияОбИмпортеВидны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НомераГТДЗаполнитьПоФактическимОстаткам", "Видимость",	СведенияОбИмпортеВидны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НомераГТДПодобрать", "Видимость", 						СведенияОбИмпортеВидны);
	
	Если НЕ СведенияОбИмпортеВидны Тогда
		
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			
			СтрокаЗапасы.НомерГТД = Неопределено;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Установка доступности цен для редактирования.
	РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	
	Элементы.ЗапасыЦена.ТолькоПросмотр = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСумма.ТолькоПросмотр = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаНДС.ТолькоПросмотр = НЕ РазрешеноРедактированиеЦенДокументов;
	
	РаботаСФормойДокумента.НастроитьГруппуЦеныИВалюты(ЭтотОбъект);
	
	// Установка видимости и доступности элементов ЕГАИС
	УстановитьДоступностьЭлементовЕГАИС();
	
	// Наборы
	Элементы.ЗапасыКартинкаНабора.Видимость = Ложь;
	Для каждого Стр Из Объект.Запасы Цикл
		Если Стр.КартинкаНабора > 0 Тогда
			Элементы.ЗапасыКартинкаНабора.Видимость = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	МассивПараметров = Новый Массив;
	МассивСтатусов = Новый ФиксированныйМассив(МассивСтатусовДляВыбораНоменклатуры);
	Для каждого ЭлементМассива Из Элементы.ЗапасыНоменклатура.ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ЭтоНабор" Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементМассива.Имя = "Дополнительно.СтатусыПартий" Тогда 
			Продолжить;
		КонецЕсли;
		МассивПараметров.Добавить(ЭлементМассива);
	КонецЦикла; 
	
	МассивПараметров.Добавить(Новый ПараметрВыбора("Дополнительно.СтатусыПартий", МассивСтатусов));
	Элементы.ЗапасыНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	// Конец Наборы
	
	Элементы.ЗапасыКоличествоПлан.Видимость = (Объект.Запасы.Итог("КоличествоПлан"));
	
	УстановитьВидимостьОтПользовательскихНастроек();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораНоменклатуры()
	
	ТипЗапас = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас");
	ТипУслуга = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга");
	ТипПодарочныйСертификат = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат");
	
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтотОбъект,
		"РасходнаяНакладная", НастройкиФормыВыбораНоменклатуры);
	
	ОбщийПараметр = Новый ПараметрВыбора("Дополнительно.ТипВладельца", "РасходнаяНакладная");
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(ТипЗапас);
	НовыйМассив.Добавить(ТипУслуга);
	Если Не РаботаСПодарочнымиСертификатамиКлиентСервер.ИспользованиеСертификатовЗапрещено(ВалютаРасчетов, НациональнаяВалюта) Тогда
		НовыйМассив.Добавить(ТипПодарочныйСертификат);
	КонецЕсли;
	МассивЗапасыИУслуги = Новый ФиксированныйМассив(НовыйМассив);
	НовыйМассив = Новый Массив;
	НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", МассивЗапасыИУслуги));
	НовыйМассив.Добавить(Новый ПараметрВыбора("Дополнительно.ОграничениеТипа", МассивЗапасыИУслуги));
	НовыйМассив.Добавить(ОбщийПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыНоменклатура.ПараметрыВыбора = НовыеПараметры;
	
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		Если СтрокаЗапасы.Номенклатура.ТипНоменклатуры = ТипПодарочныйСертификат
			И РаботаСПодарочнымиСертификатамиКлиентСервер.ИспользованиеСертификатовЗапрещено(ВалютаРасчетов, НациональнаяВалюта) Тогда
			СтрокаЗапасы.Номенклатура = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОтПользовательскихНастроек()
	
	Если Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиница", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Ячейка", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтруктурнаяЕдиница", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЯчейка", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЯчейкаДляРежимаОстатки", "Видимость", Истина);
		СкладВШапке = Ложь;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиница", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Ячейка", "Видимость", Не Объект.СтруктурнаяЕдиница.ОрдерныйСклад);
		Элементы.СтруктурнаяЕдиница.АвтоМаксимальнаяШирина = НЕ УправлениеНебольшойФирмойПовтИсп.ВключеноИспользованиеЯчеек() ИЛИ НЕ Элементы.Ячейка.Видимость;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтруктурнаяЕдиница", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЯчейка", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЯчейкаДляРежимаОстатки", "Видимость", Ложь);
		СкладВШапке = Истина;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьОтПользовательскихНастроек()

&НаСервере
Процедура УстановитьВидимостьЯчейки(ИмяЯчейки, Склад)
	
	Элементы[ИмяЯчейки].Видимость = НЕ Склад.ОрдерныйСклад;
	Элементы.СтруктурнаяЕдиница.АвтоМаксимальнаяШирина = НЕ УправлениеНебольшойФирмойПовтИсп.ВключеноИспользованиеЯчеек() ИЛИ НЕ Элементы.Ячейка.Видимость;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПечатиЧека()
	
	ИспользоватьПО = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	Если ИспользоватьПО
		И НЕ ТолькоПросмотр Тогда
		НапечататьЧекВидимость = Истина;
	Иначе
		НапечататьЧекВидимость = Ложь;
	КонецЕсли;
	
	РасчетыРаботаСФормамиВызовСервера.УстановитьВидимостьЭлементовПечатиЧека(ЭтотОбъект, НапечататьЧекВидимость);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПечатиЧека()
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		Элементы.ГруппаОтправкаЧека.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЯчейкаДоступна(СтруктурнаяЕдиница)
	
	Если НЕ КэшЗначений.УчетПоЯчейкам Тогда
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) ИЛИ ТипЗнч(СтруктурнаяЕдиница)<>Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		Возврат Ложь;
	КонецЕсли; 
	Если НЕ КэшЗначений.Свойство("ДоступностьЯчеек") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтруктурнаяЕдиница);
	Если Результат = Неопределено Тогда
		МассивСтруктурныхЕдиниц = Новый Массив;
		МассивСтруктурныхЕдиниц.Добавить(СтруктурнаяЕдиница);
		ДополнитьДоступностьЯчеек(МассивСтруктурныхЕдиниц, КэшЗначений.ДоступностьЯчеек);
		Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтруктурнаяЕдиница);
		Если Результат=Неопределено Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьДоступностьЯчеек()
	
	Если НЕ КэшЗначений.УчетПоЯчейкам Тогда
		Возврат;
	КонецЕсли; 	
	
	Если НЕ КэшЗначений.Свойство("ДоступностьЯчеек") Тогда
		КэшЗначений.Вставить("ДоступностьЯчеек", Новый ФиксированноеСоответствие(Новый Соответствие));
	КонецЕсли; 
	
	МассивСтруктурныхЕдиниц = Новый Массив;
	Если Объект.ПоложениеСклада=Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			МассивСтруктурныхЕдиниц.Добавить(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
		КонецЦикла; 
	Иначе
		МассивСтруктурныхЕдиниц.Добавить(Объект.СтруктурнаяЕдиница);
	КонецЕсли;
	МассивСтруктурныхЕдиниц = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСтруктурныхЕдиниц);
	ДополнитьДоступностьЯчеек(МассивСтруктурныхЕдиниц, КэшЗначений.ДоступностьЯчеек);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьДоступностьЯчеек(СтруктурныеЕдиницы, СоответствиеСтруктурныхЕдиниц)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурныеЕдиницы", СтруктурныеЕдиницы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Ссылка,
	|	СтруктурныеЕдиницы.ОрдерныйСклад КАК ОрдерныйСклад,
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.Ссылка В(&СтруктурныеЕдиницы)";
	Выборка = Запрос.Выполнить().Выбрать();
	Соответствие = Новый Соответствие(СоответствиеСтруктурныхЕдиниц);
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.Ссылка, НЕ Выборка.ОрдерныйСклад И Выборка.ТипСтруктурнойЕдиницы=Перечисления.ТипыСтруктурныхЕдиниц.Склад);
	КонецЦикла; 
	СоответствиеСтруктурныхЕдиниц = Новый ФиксированноеСоответствие(Соответствие);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПризнакиДоступностиЯчеек(Форма)

	Объект = Форма.Объект;
	КэшЗначений = Форма.КэшЗначений;
	Если НЕ КэшЗначений.УчетПоЯчейкам Тогда
		Возврат;
	КонецЕсли;
	Если Объект.ПоложениеСклада<>ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Возврат;
	КонецЕсли; 
	 
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
		Если Результат=Неопределено Тогда
			Результат = Ложь;
		КонецЕсли; 
		СтрокаТабличнойЧасти.ЯчейкаДоступна = Результат И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиница) И СтрокаТабличнойЧасти.ТипНоменклатурыЗапас;
	КонецЦикла; 
	
КонецПроцедуры 

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	
	ВставитьСтроки("Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных);
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы", Ложь);

	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);
		
		Если ИмяТЧ="Запасы" Тогда
			
			// Наборы
			Строка.НоменклатураНабора = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
			Строка.ХарактеристикаНабора = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
			Строка.ДоляСтоимости = 0;
			// Конец Наборы
			
			Строка.ЯчейкаДоступна = ЯчейкаДоступна(Строка.СтруктурнаяЕдиница);
			
		КонецЕсли; 
			
	КонецЦикла;
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация",        Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура",       Строка.Номенклатура);
		СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
		Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		Строка.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ГрупповоеИзменениеСтрок

&НаКлиенте
Процедура ЗапасыСнятьФлажки(Команда)
	УстановитьПометку(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыУстановитьФлажки(Команда)
	УстановитьПометку(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменитьСтроки(Команда)
	
	ПоказатьСкрытьПанельРедактирования(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыполнитьДействие(Команда)
	
	ОбработатьТаблицу();
	НастроитьОформлениеПанелиРедактирования(4);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОтменитьИзменения(Команда)
	
	ПоказатьСкрытьПанельРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменениеСтрокДействиеПриИзменении(Элемент)
	
	ОпределитьОбъектИзменений();
	НастроитьОформлениеПанелиРедактирования(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменениеСтрокЗначениеПриИзменении(Элемент)
	
	НастроитьОформлениеПанелиРедактирования(3);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометку(Пометка)
	
	Элементы.ЗапасыСнятьФлажки.Видимость = НЕ Элементы.ЗапасыСнятьФлажки.Видимость;
	Элементы.ЗапасыУстановитьФлажки.Видимость = НЕ Элементы.ЗапасыУстановитьФлажки.Видимость;
	
	Для каждого Строка Из Объект.Запасы Цикл
		Строка.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьПанельРедактирования(ИзменяетДанные = Неопределено)
	
	Перем СостояниеПерехода;
	ГрупповоеИзменениеСтрокСервер.ПоказатьСкрытьПанельРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокСервер(),
		СостояниеПерехода,
		ИзменяетДанные);
	
	
	УправлениеРезервнымиКопиямиТаблицы(СостояниеПерехода, ИзменяетДанные);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеРезервнымиКопиямиТаблицы(СостояниеПерехода, ИзменяетДанные)
	
	ГрупповоеИзменениеСтрокСервер.УправлениеРезервнымиКопиями(
		ЭтотОбъект,
		Объект.Запасы,
		ЗапасыРезервнаяКопияТаблицыАдрес,
		СостояниеПерехода,
		ИзменяетДанные);
	
	ГрупповоеИзменениеСтрокСервер.УправлениеРезервнымиКопиями(
		ЭтотОбъект,
		Объект.СерииНоменклатуры,
		СерииНоменклатурыРезервнаяКопияТаблицыАдрес,
		СостояниеПерехода,
		ИзменяетДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОформлениеПанелиРедактирования(Состояние, СохранитьИзменения = Неопределено)
	
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы") Тогда
		Элементы.НастроитьОкругления.Видимость = Истина;
	Иначе
		Элементы.НастроитьОкругления.Видимость = Ложь;
	КонецЕсли;
	
	Результат = ГрупповоеИзменениеСтрокКлиент.НастроитьОформлениеПанелиРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокКлиент(),
		Состояние,
		ЗапасыИзменениеСтрокЗначение);
	
	Если Результат.Свойство("УстановитьСвязиПараметровВыбора") И Результат.УстановитьСвязиПараметровВыбора Тогда
		УстановитьСвязиПараметровВыбораДляЗначения();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбораДляЗначения()
	
	ГрупповоеИзменениеСтрокСервер.УстановитьСвязиПараметровВыбора(НаборЭлементовГрупповогоИзмененияСтрокСервер());
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущееДействиеИзмененияСтрок()
	
	Если ЗапасыИзменениеСтрокДействие = ЗапасыИзменениеСтрокДействиеПриОткрытии Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьТекущееДействиеИзмененияСтрокСервер();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущееДействиеИзмененияСтрокСервер()
	
	ГрупповоеИзменениеСтрокСервер.СохранитьНастройки(НаборЭлементовГрупповогоИзмененияСтрокСервер());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТаблицу()
	
	// Наборы
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки") Тогда
		
		ИзменяемыеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Пометка", Истина));
		
		Если ИзменяемыеСтроки.Количество()=Объект.Запасы.Количество() Тогда
			// Если выделены все строки - проверки удаления наборов не выполняются
			Объект.ДобавленныеНаборы.Очистить();
		Иначе
			Для каждого Строка Из ИзменяемыеСтроки Цикл
				Если ЗначениеЗаполнено(Строка.НоменклатураНабора) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Действие недоступно для наборов.'");
					Сообщение.Поле = "Объект.Запасы";
					Сообщение.Сообщить();
					Возврат;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	// Конец Наборы
	
	ОбработатьТаблицуНаСервере();
	
	ИзменяемыеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Пометка", Истина));
	
	Для каждого Строка Из ИзменяемыеСтроки Цикл
		
		Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента")
			Тогда
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы") Тогда
			
			// Цена.
			Если Строка.Количество <> 0 Тогда
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли;
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);
				
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
			
			ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(Строка, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			Если Строка.Количество <> 0 Тогда
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли;
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(Строка, Новый Структура("РассчитатьЦену", Истина));			

		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьТаблицуНаСервере()
	
	ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
		ЭтотОбъект,
		Объект.Запасы,
		ЗапасыИзменениеСтрокДействие,
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит,
		ЗапасыИзменениеСтрокЗначение,
		"ЗапасыНоменклатура");
	
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
		
		ИзменяемыеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Пометка", Истина));
		Для каждого Строка Из ИзменяемыеСтроки Цикл
			
			СтруктураДанные = Новый Структура();
			СтруктураДанные.Вставить("Организация", Объект.Организация);
			СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
			СтруктураДанные.Вставить("Характеристика", Строка.Характеристика);
			СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
			
			Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				
				СтруктураДанные.Вставить("ДатаОбработки",	 Объект.Дата);
				СтруктураДанные.Вставить("ВалютаДокумента",  Объект.ВалютаДокумента);
				СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
				СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
				СтруктураДанные.Вставить("Коэффициент", 1);
			
			КонецЕсли;
			
			ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, Строка, СтруктураДанные);			
	
			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
			
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
			Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
				Строка.Количество = 1;
			КонецЕсли;
			Строка.Цена = СтруктураДанные.Цена;
			Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
			Строка.Содержание = "";
			
			Строка.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.ЗаполнитьПоФактическимОстаткамНомераГТД Тогда
		
		НомераГТДЗаполнитьПоФактическимОстаткамНаСервере(Ложь);
		
	КонецЕсли;
	
	Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.ПодобратьНомераГТД Тогда
		
		НомераГТДПодобратьНаСервере(Ложь);
		
	КонецЕсли;
	
	Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.ОчиститьНомераГТДИСтраныПроисхождения Тогда
		
		НомераГТДОчиститьНомераИСтраныПроисхожденияНаСервере();
		
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьОбъектИзменений()
	
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "СтавкаНДС";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСтавкаНДС";
		
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСклад") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "СтруктурнаяЕдиница";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСтруктурнаяЕдиница";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЯчейку") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Ячейка";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЯчейка";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки")
		ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НаборЭлементовГрупповогоИзмененияСтрокКлиент()
	
	НаборЭлементов = Новый Структура();
	НаборЭлементов.Вставить("ИмяТЧ", "Запасы");
	НаборЭлементов.Вставить("ДокументСсылка", Объект.Ссылка);
	НаборЭлементов.Вставить("ПанельРедактирования", Элементы.ГруппаЗапасыИзменениеСтрок);
	НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
	НаборЭлементов.Вставить("КолонкаПометка", Элементы.ЗапасыПометка);
	НаборЭлементов.Вставить("КолонкаНомерСтроки", Элементы.ЗапасыНомерСтроки);
	НаборЭлементов.Вставить("Действие", ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("ДействиеЭлемент", Элементы.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("Значение", ЭтотОбъект.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ЗначениеЭлемент", Элементы.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ОбъектИзменений", ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
	НаборЭлементов.Вставить("КолонкаОбъектИзменений", ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент), Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Функция НаборЭлементовГрупповогоИзмененияСтрокСервер()
	
	НаборЭлементов = Новый Структура();
	НаборЭлементов.Вставить("ИмяТЧ", "Запасы");
	НаборЭлементов.Вставить("ДокументСсылка", Объект.Ссылка);
	НаборЭлементов.Вставить("ПанельРедактирования", Элементы.ГруппаЗапасыИзменениеСтрок);
	НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
	НаборЭлементов.Вставить("КнопкаИзменитьСтроки", Элементы.ЗапасыИзменитьСтроки);
	НаборЭлементов.Вставить("КолонкаПометка", Элементы.ЗапасыПометка);
	НаборЭлементов.Вставить("КолонкаНомерСтроки", Элементы.ЗапасыНомерСтроки);
	НаборЭлементов.Вставить("Действие", ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("ДействиеЭлемент", Элементы.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("Значение", ЭтотОбъект.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ЗначениеЭлемент", Элементы.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ОбъектИзменений", ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
	НаборЭлементов.Вставить("КолонкаОбъектИзменений", ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент), Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокДействий()
	
	РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	
	Действия = Новый Массив;
	Если РазрешеноРедактированиеЦенДокументов Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду);
	Если РазрешеноРедактированиеЦенДокументов Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС);
	Если Не СкладВШапке Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСклад);
		Если ПолучитьФункциональнуюОпцию("УчетПоЯчейкам") Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЯчейку);
		КонецЕсли;
	КонецЕсли;
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
	
		
		ГрузовыеТаможенныеДекларацииСервер.ЗаполнитьСписокДействий(Действия);
		
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ЗаполнитьСерииНоменклатуры);
	КонецЕсли;
	
	Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Очистить();
	Для каждого Действие Из Действия Цикл
		ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
		Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПометкаПриИзменении(Элемент)
	ГрупповоеИзменениеСтрокКлиент.СтрокаПометкаПриИзменении(Объект.Запасы, Элементы.ЗапасыУстановитьФлажки, Элементы.ЗапасыСнятьФлажки);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Владелец", Объект.ОрганизацияПолучатель);
	СтруктураОткрытия.Вставить("Организация", Объект.Организация);
	СтруктураОткрытия.Вставить("ВидДоговора", ВидДоговораПриСоздании());
	СтруктураОткрытия.Вставить("ОповеститьОЗаписиДоговора", Истина);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", СтруктураОткрытия, Элемент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидДоговораПриСоздании()
	Возврат Перечисления.ВидыДоговоров.СПокупателем;
КонецФункции

#КонецОбласти

#Область ЕГАИС

&НаСервере
Процедура УстановитьДоступностьЭлементовЕГАИС()
	
	ДоступнаОтправкаЕГАИС = Истина;

	Если Элементы.Найти("ФормаОбщаяКомандаВыгрузитьВЕГАИС") <> Неопределено Тогда
			
		Элементы.ФормаОбщаяКомандаВыгрузитьВЕГАИС.Видимость = ДоступнаОтправкаЕГАИС;
		Элементы.ФормаОбщаяКомандаВыгрузитьВЕГАИС.Доступность = Объект.Проведен И НЕ ЭтотОбъект.ТолькоПросмотр;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССериямиНоменклатуры

&НаКлиенте
Процедура ЗапасыСерииНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерииНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерииНоменклатуры()
		
	ТекущиеДанныеИдентификатор = Элементы.Запасы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийНоменклатуры = ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор);
	
	ОткрытьФорму("Обработка.ПодборСерийНоменклатуры.Форма", ПараметрыСерийНоменклатуры, ЭтотОбъект);

КонецПроцедуры

&НаСервере
Функция ПолучитьСерииНоменклатурыИзХранилища(АдресВоВременномХранилище, КлючСтроки)

	Модифицированность = Истина;
	Возврат СерииНоменклатурыУНФ.ПолучитьСерииНоменклатурыИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки);

КонецФункции

&НаСервере
Функция ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор)
	
	Возврат СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатуры(Объект, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор);
	
КонецФункции

#КонецОбласти

#Область Доставка

&НаСервере
Процедура ПрочитатьВесИОбъемЕдиницыТовара()
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтроки,
	|	РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|	РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ ВТРасходнаяНакладнаяЗапасы
	|ИЗ
	|	&РасходнаяНакладнаяЗапасы КАК РасходнаяНакладнаяЗапасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТРасходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ВесИОбъемЕдиницТоваров.Вес, СпрНоменклатура.Вес * ЕСТЬNULL(СпрЕдиницыИзмерения.Коэффициент, 1)) КАК ВесЕдиницыТовара,
	|	ЕСТЬNULL(ВесИОбъемЕдиницТоваров.Объем, СпрНоменклатура.Объем * ЕСТЬNULL(СпрЕдиницыИзмерения.Коэффициент, 1)) КАК ОбъемЕдиницыТовара
	|ИЗ
	|	ВТРасходнаяНакладнаяЗапасы КАК ВТРасходнаяНакладнаяЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ВТРасходнаяНакладнаяЗапасы.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК СпрЕдиницыИзмерения
	|		ПО ВТРасходнаяНакладнаяЗапасы.ЕдиницаИзмерения = СпрЕдиницыИзмерения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВесИОбъемЕдиницТоваров КАК ВесИОбъемЕдиницТоваров
	|		ПО ВТРасходнаяНакладнаяЗапасы.Номенклатура = ВесИОбъемЕдиницТоваров.Номенклатура
	|			И ВТРасходнаяНакладнаяЗапасы.ЕдиницаИзмерения = ВесИОбъемЕдиницТоваров.ЕдиницаИзмерения");
	Запрос.УстановитьПараметр("РасходнаяНакладнаяЗапасы", Объект.Запасы.Выгрузить(Новый Структура("ТипНоменклатурыЗапас", Истина), "НомерСтроки, Номенклатура, ЕдиницаИзмерения"));
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВесИОбъемЕдиницыТовара = Новый Соответствие;
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ВесИОбъемЕдиницыТовара[Выборка.НомерСтроки] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВесИОбъемЕдиницыТовара[Выборка.НомерСтроки] = Новый Структура;
		ВесИОбъемЕдиницыТовара[Выборка.НомерСтроки].Вставить("ВесЕдиницыТовара", Выборка.ВесЕдиницыТовара);
		ВесИОбъемЕдиницыТовара[Выборка.НомерСтроки].Вставить("ОбъемЕдиницыТовара", Выборка.ОбъемЕдиницыТовара);
		
	КонецЦикла;
	
	Для Каждого ТекСтрокаЗапасы Из Объект.Запасы Цикл
		
		Если ВесИОбъемЕдиницыТовара[ТекСтрокаЗапасы.НомерСтроки] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекСтрокаЗапасы.ВесЕдиницыТовара = ВесИОбъемЕдиницыТовара[ТекСтрокаЗапасы.НомерСтроки].ВесЕдиницыТовара;
		Если Не ЗначениеЗаполнено(ТекСтрокаЗапасы.Вес)
			И ЗначениеЗаполнено(ТекСтрокаЗапасы.ВесЕдиницыТовара * ТекСтрокаЗапасы.Количество) Тогда
			ТекСтрокаЗапасы.Вес = ТекСтрокаЗапасы.ВесЕдиницыТовара * ТекСтрокаЗапасы.Количество;
		КонецЕсли;
		
		ТекСтрокаЗапасы.ОбъемЕдиницыТовара = ВесИОбъемЕдиницыТовара[ТекСтрокаЗапасы.НомерСтроки].ОбъемЕдиницыТовара;
		Если Не ЗначениеЗаполнено(ТекСтрокаЗапасы.Объем)
			И ЗначениеЗаполнено(ТекСтрокаЗапасы.ВесЕдиницыТовара * ТекСтрокаЗапасы.Количество) Тогда
			ТекСтрокаЗапасы.Объем = ТекСтрокаЗапасы.ОбъемЕдиницыТовара * ТекСтрокаЗапасы.Количество;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// ЭДО
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДОНажатие(Элемент, СтандартнаяОбработка)
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
КонецПроцедуры
// Конец ЭДО

// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ТоварыДобавлены = Ложь;
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТовары = Объект.Запасы.Добавить();
		НоваяСтрокаТовары.Номенклатура = СтрокаТаблицы.Номенклатура;
		ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрокаТовары, Объект, "СтруктурнаяЕдиница", "ПоложениеСклада");
		ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрокаТовары, Объект, "Ячейка", "ПоложениеСклада");
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			НоваяСтрокаТовары.Характеристика = СтрокаТаблицы.Характеристика;
			
		КонецЕсли;
		
		НоваяСтрокаТовары.Цена = СтрокаТаблицы.Цена;
		НоваяСтрокаТовары.Количество = СтрокаТаблицы.Количество;
		
		Если ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения") Тогда
			
			НоваяСтрокаТовары.ЕдиницаИзмерения = СтрокаТаблицы.ЕдиницаИзмерения;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрокаТовары.Номенклатура) Тогда
			
			НоваяСтрокаТовары.ЕдиницаИзмерения = СтрокаТаблицы.Номенклатура.ЕдиницаИзмерения;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
			НоваяСтрокаТовары.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
		Иначе
			НоваяСтрокаТовары.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТаблицы.Номенклатура.ВидСтавкиНДС);
		КонецЕсли;
		
		ТоварыДобавлены = Истина;
		
	КонецЦикла;
	
	Если ТоварыДобавлены Тогда
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(АдресЗагруженныхДанных) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных);
	
	Для каждого СтрокаТаблицы Из Объект.Запасы Цикл 
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТаблицы);
		СтрокаТаблицы.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТаблицы.СтруктурнаяЕдиница);
	КонецЦикла;
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			ОбработатьПодготовленныеДанные(РезультатЗагрузки);
			
		КонецЕсли;
		
	Иначе
		
		ЗагрузитьИзФайлаЗавершение(РезультатЗагрузки);
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанные(РезультатЗагрузки)
	
	НачатьТранзакцию();
		
	Попытка
		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = Объект.Запасы.Добавить();
				
				ИменаСвойств = "Номенклатура, Содержание, Количество, Резерв, ЕдиницаИзмерения, СтавкаНДС";
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
					
					ИменаСвойств = ИменаСвойств + ", Характеристика";
					
				КонецЕсли;
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
					
					ИменаСвойств = ИменаСвойств + ", Партия";
					
				КонецЕсли;
				
				Если ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам") Тогда
					
					ИменаСвойств = ИменаСвойств + ", СтруктурнаяЕдиница";
					
				КонецЕсли;
				
				Если ПолучитьФункциональнуюОпцию("УчетГТД") Тогда
					
					ИменаСвойств = ИменаСвойств + ", СтранаПроисхождения, НомерГТД";
					
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ИменаСвойств);
				ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиница", "ПоложениеСклада");
				ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Ячейка", "ПоложениеСклада");
				
				НоваяСтрока.ТипНоменклатурыЗапас = (НоваяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас)
												ИЛИ (НоваяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат);
				НоваяСтрока.Цена = СтрокаТаблицы.Цена;
				НоваяСтрока.Сумма = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
				
				Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
					
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
						
						НоваяСтрока.СтавкаНДС = ?(ЗначениеЗаполнено(НоваяСтрока.Номенклатура.ВидСтавкиНДС), Справочники.СтавкиНДС.СтавкаНДС(НоваяСтрока.Номенклатура.ВидСтавкиНДС), Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию));
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаТаблицы.СуммаНДС) Тогда
						
						НоваяСтрока.СуммаНДС = СтрокаТаблицы.СуммаНДС;
						
					Иначе
						
						СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
						
						НоваяСтрока.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
							НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100),
							НоваяСтрока.Сумма * СтавкаНДС / 100);
						
					КонецЕсли;
					
				Иначе
					
					НоваяСтрока.СтавкаНДС = ?(Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС,
						УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС(),
						УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
					
					НоваяСтрока.СуммаНДС = 0;
					
				КонецЕсли;
				
				НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.СтранаПроисхождения)
					И СтрокаТаблицы.СтранаПроисхождения <> Справочники.СтраныМира.Россия
					И НЕ ЗначениеЗаполнено(СтрокаТаблицы.НомерГТД)
					И НЕ ПустаяСтрока(СтрокаТаблицы.НомерГТД_ВходящиеДанные)
					Тогда
					
					СправочникОбъект = Справочники.НомераГТД.СоздатьЭлемент();
					СправочникОбъект.Код = СтрокаТаблицы.НомерГТД_ВходящиеДанные;
					СправочникОбъект.ДопускаетсяЗаписьСОшибкой = Ложь;
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект, Истина, Истина);
					
					НоваяСтрока.НомерГТД = СправочникОбъект.Ссылка;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Загрузка данных'", 
			ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка, 
			Метаданные.Справочники.Номенклатура,
			, 
			ПредставлениеОшибки);
		
		ВызватьИсключение ПредставлениеОшибки;
		
	КонецПопытки;
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы", Ложь);

	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)

	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
//Конец ИнтеграцияГосИС

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_РедактироватьСоставСвойств()

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область ГосИС

// ИнтеграцияГИСМ
&НаКлиенте
Процедура ТекстУведомленияОбОтгрузкеГИСМОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияГИСМУНФКлиент.ТекстУведомленияОбОтгрузкеГИСМОбработкаНавигационнойСсылки(ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииСервер()
	
	ИспользоватьГИСМ = Объект.ЕстьМаркируемаяПродукцияГИСМ И Не ОбщегоНазначения.ЭтоМобильныйКлиент();
	
	Если ИспользоватьГИСМ Или Объект.ЕстьПодконтрольнаяПродукцияВЕТИС Тогда
		
		Элементы.ГруппаГИСМ.Видимость = Истина;
		Элементы.ТекстУведомленияОбОтгрузкеГИСМ.Видимость = Ложь;
		Элементы.СтатусГИСМ.Видимость = Ложь;
		
		Если ИспользоватьГИСМ Тогда
			Элементы.ГруппаГИСМСсылки.Видимость = Истина;
			Если Объект.СпособПродажиГИСМ = "опт" Тогда
				Элементы.ТекстУведомленияОбОтгрузкеГИСМ.Видимость = Истина;
				ИнтеграцияГИСМУНФ.СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукции(ЭтаФорма);
			Иначе
				Элементы.СтатусГИСМ.Видимость = Ложь;
				ОбновитьСтатусГИСМ();
			КонецЕсли;
		Иначе
			Элементы.ГруппаГИСМСсылки.Видимость = Ложь;
		КонецЕсли;
		
	Иначе
		
		Элементы.ГруппаГИСМ.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьОптовойПродажей(Команда)
	Объект.СпособПродажиГИСМ = "опт";
	СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииСервер();
КонецПроцедуры

&НаКлиенте
Процедура СделатьРозничнойПродажей(Команда)
	Объект.СпособПродажиГИСМ = "роз";
	СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииСервер();
КонецПроцедуры

&НаКлиенте
Процедура СтатусГИСМОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Отчет о розничных продажах был изменен. Записать?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Отчет о розничных продажах не записан. Записать?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные" Тогда
		
		ИнтеграцияГИСМКлиент.ПодготовитьСообщениеКПередаче(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ОперацииОбменаГИСМ.ПередачаДанных"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать();
	КонецЕсли;
	
	Если Не Модифицированность И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусГИСМ()
	
	Элементы.СтатусГИСМ.Видимость = Объект.ЕстьМаркируемаяПродукцияГИСМ;
	
	Если НЕ Объект.ЕстьМаркируемаяПродукцияГИСМ Тогда
		Возврат
	КонецЕсли;
	
	СтатусГИСМ         = Перечисления.СтатусыИнформированияГИСМ.Черновик;
	ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПустаяСсылка();
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СтатусыИнформированияГИСМ.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.Черновик)) КАК СтатусИнформированияГИСМ,
		|	ВЫБОР
		|		КОГДА СтатусыИнформированияГИСМ.ДальнейшееДействие В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПустаяСсылка)
		|		ИНАЧЕ ЕСТЬNULL(СтатусыИнформированияГИСМ.ДальнейшееДействие, ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные))
		|	КОНЕЦ КАК ДальнейшееДействие
		|ИЗ
		|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
		|		ПО (СтатусыИнформированияГИСМ.Документ = РасходнаяНакладная.Ссылка)
		|ГДЕ
		|	РасходнаяНакладная.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка",                   Объект.Ссылка);
		Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ИнтеграцияГИСМ.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтатусГИСМ         = Выборка.СтатусИнформированияГИСМ;
			ДальнейшееДействие = Выборка.ДальнейшееДействие;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтатусГИСМПредставление = ИнтеграцияГИСМ.ПредставлениеСтатусаГИСМ(
		СтатусГИСМ,
		ДальнейшееДействие,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные);
	
КонецПроцедуры
// Конец ИнтеграцияГИСМ

#КонецОбласти
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияГосИС

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	СобытияФормИСКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда, Неопределено);
КонецПроцедуры
// Конец ИнтеграцияГосИС

#КонецОбласти

#Область Наборы

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаменитьСтрокуЗапасовДаннымиНабора(Форма, СтрокаТабличнойЧасти, СтруктураДанные)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, СтрокаТабличнойЧасти,
		Форма.ИспользоватьСерииНоменклатурыОстатки);
	
	НаборыКлиентСервер.ЗаменитьСтрокуДаннымиНабора(Объект, "Запасы", СтрокаТабличнойЧасти, СтруктураДанные); 
	
	Элементы.ЗапасыКартинкаНабора.Видимость = Истина;
			
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСоставНабора(СтрокаТабличнойЧасти)
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.НоменклатураНабора);
	СтруктураОткрытия.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.ХарактеристикаНабора);
	ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОткрытия);
	СтрокиНабора = Объект.Запасы.НайтиСтроки(СтруктураОткрытия);
	Если ДобавленныеСтроки.Количество() = 0 Тогда
		СтруктураОткрытия.Вставить("Количество", 1);
	Иначе
		СтруктураОткрытия.Вставить("Количество", ДобавленныеСтроки[0].Количество);
	КонецЕсли; 
	СтруктураОткрытия.Вставить("СоставНабора", Новый Массив);
	Для каждого Стр Из СтрокиНабора Цикл
		СтруктураСтроки = Новый Структура("Номенклатура,Характеристика,Количество,Цена,ДоляСтоимости,ЕдиницаИзмерения,Активная");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Стр);
		СтруктураСтроки.Активная = (Стр = СтрокаТабличнойЧасти); 
		СтруктураОткрытия.СоставНабора.Добавить(СтруктураСтроки);
	КонецЦикла; 
	ОткрытьФорму("РегистрСведений.СоставНаборов.Форма.ФормаРедактированияСостава", СтруктураОткрытия, ЭтотОбъект, , , , , 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставНабора(НоменклатураНабора, ХарактеристикаНабора, КоличествоНаборов, ЦенаНабора, СоставНабора)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НоменклатураНабора", НоменклатураНабора);
	СтруктураДанных.Вставить("ХарактеристикаНабора", ХарактеристикаНабора);
	СтруктураДанных.Вставить("ИмяТабличнойЧасти", "Запасы");
	СтруктураДанных.Вставить("СоставНабора", СоставНабора);
	СтруктураДанных.Вставить("КоличествоНаборов", КоличествоНаборов);
	СтруктураДанных.Вставить("ЦенаНабора", ЦенаНабора);
	НаборыСервер.ОбновитьСоставНабораВДокументе(СтруктураДанных, Объект);
	Модифицированность = Истина;

	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДанныеКартинокНаборов(Запасы, ДобавленныеНаборы)
	
	Для каждого Стр Из Запасы Цикл
		Стр.КартинкаНабора = НаборыКлиентСервер.КартинкаНабора(Стр, ДобавленныеНаборы);
		Если Стр.КартинкаНабора>5 Тогда
			Стр.КартинкаНабора = ((Стр.КартинкаНабора - 1) % 5) + 1;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры
 
&НаСервереБезКонтекста
Процедура ОбновитьПризнакиНабора(Запасы)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНаборы") Тогда
		Возврат;
	КонецЕсли; 
	
	МассивНоменклатуры = Новый Массив;
	Для каждого Стр Из Запасы Цикл
		Если ЗначениеЗаполнено(Стр.Номенклатура) И НЕ ЗначениеЗаполнено(Стр.НоменклатураНабора) И ТипЗнч(Стр.Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
			МассивНоменклатуры.Добавить(Стр.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивНоменклатуры.Количество()>0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)
		|	И Номенклатура.ЭтоНабор";
		Выборка = Запрос.Выполнить().Выбрать();
		ПараметрыНоменклатуры = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			ПараметрыНоменклатуры.Вставить(Выборка.Ссылка, Истина);	
		КонецЦикла; 
		
		Для каждого Стр Из Запасы Цикл
			Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) ИЛИ ЗначениеЗаполнено(Стр.НоменклатураНабора) ИЛИ ТипЗнч(Стр.Номенклатура)<>Тип("СправочникСсылка.Номенклатура") Тогда
				Стр.ЭтоНабор = Ложь;
			Иначе
				Стр.ЭтоНабор = ПараметрыНоменклатуры.Получить(Стр.Номенклатура);
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция  ХарактеристикиНабора(Номенклатура, Текст)
	
	СтруктураПараметров = Новый Структура();
	Если ПустаяСтрока(Текст) Тогда
		СтруктураПараметров.Вставить("СтрокаПоиска", Неопределено);
	Иначе
		СтруктураПараметров.Вставить("СтрокаПоиска", Текст);
	КонецЕсли; 
	СтруктураПараметров.Вставить("Отбор", Новый Структура);
	СтруктураПараметров.Отбор.Вставить("Владелец", Номенклатура);
	Возврат Справочники.ХарактеристикиНоменклатуры.ПолучитьДанныеВыбора(СтруктураПараметров);
	
КонецФункции
 
#КонецОбласти 

#Область ПечатьЧековККМ

&НаКлиенте
Процедура НапечататьЧек(Команда)
	
	Если Объект.ВалютаДокумента <> УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
		ТекстСообщения = НСтр("ru = 'Валюта документа отличается от национальной.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат
	КонецЕсли;
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на оборудовании.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ПечатьДокументовУНФКлиент.ПечатьЧекаНевозможна(ЭтотОбъект, НСтр("ru = 'Не удалось провести документ'")) Тогда
		Возврат;
	КонецЕсли;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключенияФискальногоРегистратораЗавершение", ЭтотОбъект);
		МассивОборудования = Новый Массив;
		МассивОборудования.Добавить("ФискальныйРегистратор");
		МассивОборудования.Добавить("ККТ");
		МассивОборудования.Добавить("ПринтерЧеков");
		МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, МассивОборудования,
				НСтр("ru='Выберите оборудование'"), НСтр("ru='Оборудование не подключено.'"));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // НапечататьЧек()

&НаСервере
Функция ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР) 
	
	// Подготовка таблицы товаров
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	СуммаПлатежей = 0;
	
	РозничныеПродажиСервер.ДополнитьТоварамиПриОтгрузкеПараметрыПриПробитииЧека(РеквизитФормыВЗначение("Объект"), ОбщиеПараметры, СуммаПлатежей);
	
	// Общие параметры чека
	РеквизитыОрганизация = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "НаименованиеПолное,ИНН,КПП");
	
	КассаККМ = Справочники.КассыККМ.ПолучитьКассуККМПоЭкземпляруОборудования(ИдентификаторУстройстваФР);
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		ТекстСообщения = НСтр("ru = 'Не найдена касса ККМ соответствующая устройству %устройство%.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%устройство%", ИдентификаторУстройстваФР);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("ЭлектронныйЧекSMSПередаютсяПрограммой1С,ЭлектронныйЧекEmailПередаютсяПрограммой1С,СерийныйНомер,Код,ПодключаемоеОборудование");
	СтруктураРеквизитов.Вставить("СпособФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.СпособФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ДопустимоеРасхождениеФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.ДопустимоеРасхождениеФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ТипОборудования", "ПодключаемоеОборудование.ТипОборудования");
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КассаККМ, СтруктураРеквизитов);
	
	РеквизитыКассира = РозничныеПродажиСервер.ПолучитьРеквизитыКассира(Объект.Автор, Объект.ПодписьКассира);
	
	ОбщиеПараметры.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	
	ОбщиеПараметры.Электронно = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Телефон) Тогда
		Если РеквизитыКассыККМ.ЭлектронныйЧекSMSПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СSMS = Истина;
		КонецЕсли;
		ОбщиеПараметры.ПокупательНомер = "+7" + РозничныеПродажиСервер.УбратьРазделителиВНомереТелефона(Объект.Телефон);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АдресЭП) Тогда
		Если РеквизитыКассыККМ.ЭлектронныйЧекEmailПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СEmail = Истина;
		КонецЕсли;
		ОбщиеПараметры.ПокупательEmail = Объект.АдресЭП;
	КонецЕсли;
	
	ОбщиеПараметры.ДокументОснование = Объект.Ссылка;
	
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ОбщиеПараметры.Кассир = РеквизитыКассира.ИмяКассираИДолжность;
	ОбщиеПараметры.Вставить("ИмяКассира", РеквизитыКассира.ИмяКассира);
	ОбщиеПараметры.КассирИНН = РеквизитыКассира.КассирИНН;
	
	ОбщиеПараметры.ОрганизацияНазвание = РеквизитыОрганизация.НаименованиеПолное;
	ОбщиеПараметры.ОрганизацияИНН = РеквизитыОрганизация.ИНН;
	ОбщиеПараметры.ОрганизацияКПП = РеквизитыОрганизация.КПП;
	ОбщиеПараметры.НомерКассы     = "00001";
	ОбщиеПараметры.НомерЧека      = "1";
	ОбщиеПараметры.НомерСмены     = "1";
	
	АдресМагазина = ПечатьДокументовУНФ.КонтактнаяИнформация(Объект.Организация, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации"));
	
	СерийныйНомер = РеквизитыКассыККМ.СерийныйНомер;
	Если НЕ ЗначениеЗаполнено(СерийныйНомер) Тогда
		СерийныйНомер = "1";
	КонецЕсли;
	
	ОбщиеПараметры.АдресМагазина = АдресМагазина;
	ОбщиеПараметры.НаименованиеМагазина = Строка(Объект.Организация);
	ОбщиеПараметры.СерийныйНомер = СерийныйНомер;
	ОбщиеПараметры.СистемаНалогообложения = РозничныеПродажиСервер.ПолучитьТипСистемыНалогообложенияККТ(
		Объект.Организация,
		,
		Объект.Дата,
		Объект.СпециальныйНалоговыйРежим);
		
	Если РеквизитыКассыККМ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
		ОбщиеПараметры.СпособФорматноЛогическогоКонтроля = РеквизитыКассыККМ.СпособФорматноЛогическогоКонтроля;
		ОбщиеПараметры.ДопустимоеРасхождениеФорматноЛогическогоКонтроля = РеквизитыКассыККМ.ДопустимоеРасхождениеФорматноЛогическогоКонтроля;
		Если ФорматноЛогическийКонтрольКлиентСервер.НуженФорматноЛогическийКонтроль(ОбщиеПараметры) Тогда
			ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ОбщиеПараметры);
		КонецЕсли;
	КонецЕсли;
	
	Если СуммаПлатежей = 0 Тогда
		СтрокаОплаты = Новый Структура("ТипОплаты,Наименование,Сумма", Перечисления.ТипыОплатыККТ.Постоплата, НСтр("ru = 'Постоплата'"), Объект.СуммаДокумента);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	ИначеЕсли СуммаПлатежей >= Объект.СуммаДокумента Тогда
		СтрокаОплаты = Новый Структура("ТипОплаты,Наименование,Сумма", Перечисления.ТипыОплатыККТ.Предоплата, НСтр("ru = 'Зачет аванса'"), Объект.СуммаДокумента);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	Иначе
		СтрокаОплаты = Новый Структура("ТипОплаты,Наименование,Сумма", Перечисления.ТипыОплатыККТ.Предоплата, НСтр("ru = 'Зачет аванса'"), СуммаПлатежей);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
		РазницаСумм = Объект.СуммаДокумента - СуммаПлатежей;
		Если РазницаСумм > 0 Тогда
			СтрокаОплаты = Новый Структура("ТипОплаты,Наименование,Сумма", Перечисления.ТипыОплатыККТ.Постоплата, НСтр("ru = 'Постоплата'"), РазницаСумм);
			ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты") Тогда
		РаботаСПодарочнымиСертификатами.ДобавитьВнереализационнуюПрибыль(Объект, ОбщиеПараметры);
	КонецЕсли;
	
	Возврат ОбщиеПараметры;
	
КонецФункции

&НаКлиенте
Процедура ПодключенияФискальногоРегистратораЗавершение(ИдентификаторУстройстваФР, Параметры) Экспорт
	
	Если ИдентификаторУстройстваФР = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР);
	
	Если ОбщиеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры.ДатаВремя = ТекущаяДата();
	
	Контекст = Новый Структура();

	Оповещение = Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект, Контекст);
	
	МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
		Оповещение, 
		УникальныйИдентификатор, 
		ОбщиеПараметры, 
		ИдентификаторУстройстваФР);
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		Если РезультатВыполнения.ВыходныеПараметры <> Неопределено Тогда
			Объект.НомерСменыККМ = РезультатВыполнения.ВыходныеПараметры[0];
			Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		КонецЕсли;
		
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		Если НЕ ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
			Объект.НомерЧекаККМ = 1;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
	Иначе
		
		ТекстСообщения = СтрШаблон(НСтр(
		"ru = 'При печати чека произошла ошибка.
		|Чек не напечатан на фискальном регистраторе.
		|Дополнительное описание:
		|%1'"), РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	УстановитьДоступностьПечатиЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонАдресЭППриИзменении(Элемент)
	
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП, Истина);
	
КонецПроцедуры

&НаСервере
Функция ПоляКИДляОтправкиЧека()
	
	ПоляКИ = Новый Соответствие;
	ПоляКИ.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Элементы.АдресЭП.Имя);
	ПоляКИ.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, Элементы.Телефон.Имя);
	
	Возврат ПоляКИ;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоляКИДляОтправкиЧекаПоУмолчанию(ДанныеКИ)
	
	Если ДанныеКИ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.АдресЭП = ДанныеКИ.Получить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Объект.Телефон = ДанныеКИ.Получить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	
КонецПроцедуры

#КонецОбласти

#Область Взаиморасчеты

&НаКлиенте
Процедура СпособЗачетаПредоплатыПриИзменении(Элемент)
	СпособЗачетаПредоплатыПриИзмененииНаСервере(ИмяТЧПредоплата());
КонецПроцедуры

&НаСервере
Процедура СпособЗачетаПредоплатыПриИзмененииНаСервере(ИмяТЧ)
	
	РасчетыРаботаСФормамиВызовСервера.СпособЗачетаПредоплатыПриИзмененииНаСервере(ЭтотОбъект, ИмяТЧ,
		ИменаЭлементов(ИмяТЧ));
	ОбновитьЗаголовкиЗакладокОплаты(ИмяТЧ); 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовкиЗакладокОплаты(ИмяТЧ)
	
	Если ИмяТЧ = ИмяТЧПредоплатаПолучатель() Тогда
		Элементы.ГруппаПредоплатаПолучатель.Заголовок = ЗаголовокОплаты(Объект.СпособЗачетаПредоплатыПолучатель, 
			Объект.ПредоплатаПолучатель, ИмяТЧ);
	Иначе
		Элементы.ГруппаПредоплата.Заголовок = ЗаголовокОплаты(Объект.СпособЗачетаПредоплаты, Объект.Предоплата, ИмяТЧ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокОплаты(СпособЗачетаПредоплаты, Предоплата, ИмяТЧ)
	
	ЗаголовокСтраницы = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(
		СпособЗачетаПредоплаты, Предоплата);
	Если ИмяТЧ = ИмяТЧПредоплатаПолучатель() Тогда
		ЗаголовокСтраницы = СтрЗаменить(ЗаголовокСтраницы, НСтр("ru = 'Оплата'"), НСтр("ru = 'Оплата поставщику'"));
	Иначе
		ЗаголовокСтраницы = СтрЗаменить(ЗаголовокСтраницы, НСтр("ru = 'Оплата'"), НСтр("ru = 'Оплата покупателя'"));
	КонецЕсли;
		Возврат ЗаголовокСтраницы;
	
КонецФункции

&НаСервере
Процедура ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(ИмяТЧ, ПриСозданииНаСервере = Ложь)
	
	РасчетыРаботаСФормамиВызовСервера.ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(ЭтотОбъект, 
		ПриСозданииНаСервере, ИмяТЧ, ИменаЭлементов(ИмяТЧ));
		
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияРасшифровкиПриИзменении(Элемент)
	ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(ИмяТЧПредоплата());
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПросмотра(Команда)
	ЗаполнитьТаблицуПросмотраНаСервере(, ИмяТЧПредоплата());
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПросмотраНаКлиенте()
	Если (Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаПредоплата
		И ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиПросмотр) Тогда
		ЗаполнитьТаблицуПросмотраНаСервере(, ИмяТЧПредоплата());
	ИначеЕсли (Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаПредоплатаПолучатель
		И ВариантЗаполненияРасшифровкиПолучатель = ВариантЗаполненияРасшифровкиПросмотр) Тогда
		ЗаполнитьТаблицуПросмотраНаСервере(, ИмяТЧПредоплатаПолучатель());
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПросмотраНаСервере(ЗаписьНаСервере = Ложь, ИмяТЧ = "Предоплата")
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьТаблицуПросмотраНаСервере(ЭтотОбъект, ЗаписьНаСервере, ИмяТЧ, ИменаЭлементов(ИмяТЧ));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникЗачетаПредоплаты(Команда) Экспорт
	
	Если Объект.Ссылка.Пустая()
		ИЛИ Объект.Дата <> ДатаПриСозданииНаСервере Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗаписатьИОткрытьФормуРаспределенияПлатежа", ЭтотОбъект, 
			ИмяТЧПредоплата());
		ПоказатьВопрос(Оповещение, 
		НСтр("ru = 'Перед открытием помощника данные будут записаны.
					|Продолжить?'"),
		РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФормуРаспределенияПлатежа(ИмяТЧПредоплата());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИОткрытьФормуРаспределенияПлатежа(Ответ, ИмяТЧ) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать();
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		КонецЕсли;
		ОткрытьФормуРаспределенияПлатежа(ИмяТЧ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРаспределенияПлатежа(ИмяТЧ)
	
	СтруктураПараметров = Новый Структура();
	СтруктураАдресов = ПолучитьСтруктуруАдресовВХранилище(ИмяТЧ);
	СтруктураПараметров.Вставить("СтруктураАдресов", СтруктураАдресов);
	
	СоответствиеИменТЧИРеквизитовДляИтогов = Новый Соответствие;
	СоответствиеИменТЧИРеквизитовДляИтогов.Вставить("Запасы", "Всего");
	СтруктураПараметров.Вставить("СоответствиеИменТЧИРеквизитовДляИтогов", СоответствиеИменТЧИРеквизитовДляИтогов);
	СтруктураПараметров.Вставить("ВалютаРасчетов", ВалютаРасчетов);
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	
	СтруктураПараметров.Вставить("ЭтоРасчетыСПоставщиком", ИмяТЧ = ИмяТЧПредоплатаПолучатель());
	СтруктураПараметров.Вставить("ЕстьДоставка", Ложь);
	СтруктураПараметров.Вставить("ЭтоПередачаТоваровМеждуОрганизациями", Истина);
	СтруктураПараметров.Вставить("ИмяТЧПредоплата", ИмяТЧ);
	
	РасчетыРаботаСФормамиКлиент.ОткрытьФормуРаспределенияСуммыПлатежа(Ложь, ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруАдресовВХранилище(ИмяТЧ)
	
	СтруктураДляВозврата = Новый Структура();
	
	СтруктураДляВозврата.Вставить("АдресРасшифровкаПлатежаВХранилище",
		ПоместитьВоВременноеХранилище(
			Объект[ИмяТЧ].Выгрузить(),
			УникальныйИдентификатор));
	
	СтруктураДляВозврата.Вставить("АдресТаблицаДокументовДляИзмененияВХранилище",
		ПоместитьВоВременноеХранилище(
			ТаблицаДокументовДляИзменения.Выгрузить(),
			УникальныйИдентификатор));
	
	// Суммы в разрезе заказов.
	ТЗЗаказыИСуммы = Объект.Запасы.Выгрузить(, "Всего");
	ТЗЗаказыИСуммы.Свернуть("Всего");
	Если ИмяТЧ = ИмяТЧПредоплатаПолучатель() Тогда
		ТЗЗаказыИСуммы.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику"));
	Иначе
		ТЗЗаказыИСуммы.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	КонецЕсли;
	
	СтруктураДляВозврата.Вставить("АдресТаблицаЗаказыИСумма",
		ПоместитьВоВременноеХранилище(
			ТЗЗаказыИСуммы,
			УникальныйИдентификатор));
	
	Возврат СтруктураДляВозврата;
	
КонецФункции

&НаКлиенте
Процедура РаспределитьСуммуПлатежаПослеРаспределения(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") И РезультатЗакрытия.Свойство("ДеревоРаспределенияСуммыПлатежа") Тогда
		
		РасчетыРаботаСФормамиКлиент.РаспределитьСуммуПлатежаПослеРаспределения(ЭтотОбъект, РезультатЗакрытия, ДопПараметры);
		
		РаспределитьСуммуПлатежаПослеРаспределенияЗавершение(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьСуммуПлатежаПослеРаспределенияЗавершение(ДопПараметры)
	
	РасчетыРаботаСФормамиВызовСервера.РаспределитьСуммуПлатежаПослеРаспределенияЗавершение(ЭтотОбъект, 
		ДопПараметры.ИмяТЧПредоплата, ИменаЭлементов(ДопПараметры.ИмяТЧПредоплата));
	ОбновитьЗаголовкиЗакладокОплаты(ДопПараметры.ИмяТЧПредоплата); 
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ЗаполнитьТаблицуПросмотраНаКлиенте();
КонецПроцедуры

&НаСервере
Процедура ВзаиморасчетыПриСозданииНаСервере(ИмяТЧ)
	
	ВидОперацииПомощника = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю;
	Если Объект.Ссылка.Пустая() ИЛИ Объект.СпособЗачетаПредоплаты.Пустая() Тогда
		Объект.СпособЗачетаПредоплаты = СпособыЗачетаВручную;
	КонецЕсли;
	Если Объект.Ссылка.Пустая() ИЛИ Объект.СпособЗачетаПредоплатыПолучатель.Пустая() Тогда
		Объект.СпособЗачетаПредоплатыПолучатель = СпособыЗачетаВручную;
	КонецЕсли;	
	ВариантЗаполненияРасшифровки = РасчетыРаботаСФормамиВызовСервера.ПолучитьВариантЗаполненияРасшифровкиДляДокументаОтгрузки(
		Объект.Проведен, Объект.СпособЗачетаПредоплаты);
	ВариантЗаполненияРасшифровкиПолучатель = РасчетыРаботаСФормамиВызовСервера.ПолучитьВариантЗаполненияРасшифровкиДляДокументаОтгрузки(
		Объект.Проведен, Объект.СпособЗачетаПредоплатыПолучатель);
	ИстинаПриСозданииНаСервере = Истина;
	ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(ИмяТЧ, ИстинаПриСозданииНаСервере);
	
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьРеквизитыРасчетов(ЭтотОбъект, СтруктураПараметровРасчетов, Неопределено,
		Истина);
	
	РасчетыРаботаСФормамиВызовСервера.СпособЗачетаПредоплатыПриИзмененииНаСервере(ЭтотОбъект);
	РасчетыРаботаСФормамиВызовСервера.СпособЗачетаПредоплатыПриИзмененииНаСервере(ЭтотОбъект, 
		ИмяТЧПредоплатаПолучатель(), ИменаЭлементов(ИмяТЧПредоплатаПолучатель()));
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	ОбновитьЗаголовкиЗакладокОплаты(ИмяТЧПредоплата());
	ОбновитьЗаголовкиЗакладокОплаты(ИмяТЧПредоплатаПолучатель());
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПодписантаКонтрагентаПолучателя()
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтрагентПолучатель,"КонтактноеЛицоПодписант");
КонецФункции

&НаСервере
Функция ПолучитьСпособЗачетаДляДоговора(Договор, Контрагент, ЭтоЗачет) Экспорт
	
	вСпособ = Перечисления.СпособыЗачетаИРаспределенияПлатежей.ПустаяСсылка();
	Если ЗначениеЗаполнено(Договор.СпособЗачетаПредоплатыПоУмолчанию) Тогда
		вСпособ = Договор.СпособЗачетаПредоплатыПоУмолчанию;
	ИначеЕсли ЗначениеЗаполнено(Контрагент) Тогда
		вСпособ = Контрагент.СпособЗачетаПредоплатыПоУмолчанию;
	КонецЕсли;
	
	Если вСпособ.Пустая() Тогда
		Возврат РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаПредоплатыПоУмолчанию();
	Иначе
		Возврат вСпособ;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СпособЗачетаПредоплатыПолучательПриИзменении(Элемент)
	СпособЗачетаПредоплатыПриИзмененииНаСервере(ИмяТЧПредоплатаПолучатель());
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияРасшифровкиПолучательПриИзменении(Элемент)
	ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(ИмяТЧПредоплатаПолучатель());
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПросмотраПолучатель(Команда)
	ЗаполнитьТаблицуПросмотраНаСервере(, ИмяТЧПредоплатаПолучатель());
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникЗачетаПредоплатыПолучатель(Команда)
	
	Если Объект.Ссылка.Пустая()
		ИЛИ Объект.Дата <> ДатаПриСозданииНаСервере Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗаписатьИОткрытьФормуРаспределенияПлатежа", ЭтотОбъект,
			ИмяТЧПредоплатаПолучатель());
		ПоказатьВопрос(Оповещение, 
		НСтр("ru = 'Перед открытием помощника данные будут записаны.
					|Продолжить?'"),
		РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФормуРаспределенияПлатежа(ИмяТЧПредоплатаПолучатель());

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИменаЭлементов(ИмяТЧ)
	
	Если ИмяТЧ = ИмяТЧПредоплатаПолучатель() Тогда
		ИменаЭлементов = Новый Структура;
		ИменаЭлементов.Вставить("ВариантЗаполненияРасшифровки", "ВариантЗаполненияРасшифровкиПолучатель");
		ИменаЭлементов.Вставить("СтраницыРасчетовСКонтрагентом", "СтраницыРасчетовСКонтрагентомПолучатель");
		ИменаЭлементов.Вставить("СтраницаПросмотр", "СтраницаПросмотрПолучатель");
		ИменаЭлементов.Вставить("СтраницаРедактирование", "СтраницаРедактированиеПолучатель");
		ИменаЭлементов.Вставить("СтраницаРучноеЗаполнение", "СтраницаРучноеЗаполнениеПолучатель");
		ИменаЭлементов.Вставить("ТаблицаДляПросмотра", "ТаблицаДляПросмотраПолучатель");
		ИменаЭлементов.Вставить("ГруппаКомандыТаблицыДляПросмотра", "ГруппаКомандыТаблицыДляПросмотраПолучатель");
		ИменаЭлементов.Вставить("СпособЗачетаПредоплаты", "СпособЗачетаПредоплатыПолучатель");
		ИменаЭлементов.Вставить("ГруппаПредоплата", "ГруппаПредоплатаПолучатель");
		ИменаЭлементов.Вставить("ОткрытьПомощникЗачетаПредоплаты", "ОткрытьПомощникЗачетаПредоплатыПолучатель");
	Иначе
		ИменаЭлементов = Неопределено;
	КонецЕсли;
	Возврат ИменаЭлементов;
		
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПредоплатаПолучатель

&НаКлиенте
Процедура ПредоплатаПолучательСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ПредоплатаПолучатель.ТекущиеДанные;
		
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
			?(Объект.Курс = 0,
			1,
			Объект.Курс),
		СтрокаТабличнойЧасти.Курс);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
			?(Объект.Кратность = 0,
			1,
			Объект.Кратность),
		СтрокаТабличнойЧасти.Кратность);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
		СтрокаТабличнойЧасти.Кратность,
		?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность));

КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПолучательСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ПредоплатаПолучатель.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс);
	
	СтрокаТабличнойЧасти.Кратность = 1;
	
	СтрокаТабличнойЧасти.Курс =
		?(СтрокаТабличнойЧасти.СуммаРасчетов = 0,
			1,
			СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.СуммаРасчетов * Объект.Курс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПолучательДокументПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ПредоплатаПолучатель.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Документ) Тогда
		
		СтруктураДанные = ПолучитьДанныеДокументПриИзменении(СтрокаТабличнойЧасти.Документ, Объект.Организация, Объект.Договор);
		
		СтрокаТабличнойЧасти.СуммаРасчетов = СтруктураДанные.СуммаРасчетов;
		
		Если СтруктураДанные.Свойство("Курс") Тогда
			СтрокаТабличнойЧасти.Курс = СтруктураДанные.Курс;
		Иначе
			СтрокаТабличнойЧасти.Курс = 
				?(СтрокаТабличнойЧасти.Курс = 0,
					?(Объект.Курс = 0,
					1,
					Объект.Курс),
				СтрокаТабличнойЧасти.Курс);
		КонецЕсли;
		
		Если СтруктураДанные.Свойство("Кратность") Тогда
			СтрокаТабличнойЧасти.Кратность = СтруктураДанные.Кратность;
		Иначе
			СтрокаТабличнойЧасти.Кратность =
				?(СтрокаТабличнойЧасти.Кратность = 0,
					?(Объект.Кратность = 0,
					1,
					Объект.Кратность),
				СтрокаТабличнойЧасти.Кратность);
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
			СтрокаТабличнойЧасти.СуммаРасчетов,
			СтрокаТабличнойЧасти.Курс,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
			СтрокаТабличнойЧасти.Кратность,
			?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность));
		
		СтруктураДанные.Свойство("ОплатаСертификатом", СтрокаТабличнойЧасти.ОплатаСертификатом);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПолучательКурсПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.ПриИзмененииКурсаВСтрокеПредоплаты(ЭтаФорма, ИмяТЧПредоплатаПолучатель());
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПолучательКурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ПредоплатаКурсНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка,
		ИмяТЧПредоплатаПолучатель());
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПолучательКратностьПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.ПриИзмененииКурсаВСтрокеПредоплаты(ЭтаФорма, ИмяТЧПредоплатаПолучатель());
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПолучательВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные.ОплатаСертификатом Тогда
		СтандартнаяОбработка = Ложь;
		РедактироватьОплату(ИмяТЧПредоплатаПолучатель());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПолучательПриИзменении(Элемент)
	
	Элементы.ГруппаПредоплатаПолучатель.Заголовок = ЗаголовокОплаты(Объект.СпособЗачетаПредоплатыПолучатель, 
		Объект.ПредоплатаПолучатель, ИмяТЧПредоплатаПолучатель());
	
КонецПроцедуры

#КонецОбласти

#Область ФиксированныеСтроки

&НаКлиентеНаСервереБезКонтекста
Функция ИмяТЧПредоплата()
	Возврат "Предоплата";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяТЧПредоплатаПолучатель()
	Возврат "ПредоплатаПолучатель";
КонецФункции

#КонецОбласти
