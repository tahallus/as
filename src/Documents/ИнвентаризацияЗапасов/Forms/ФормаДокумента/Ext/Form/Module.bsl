
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	
	ОбновитьРеквизитыВидимостиФормы();
	
	// Установка способа выбора структурной единицы в зависимости от ФО.
	Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить()
		И НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
		
		Элементы.СтруктурнаяЕдиница.РежимВыбораИзСписка = Истина;
		Элементы.СтруктурнаяЕдиница.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		Элементы.СтруктурнаяЕдиница.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		
	КонецЕсли;
	
	ВосстановитьНастройкиОтборов();
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ЭлектронныеВесы", ,
		МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Запасы");
	
	// Серии номенклатуры
	ИспользоватьСерииНоменклатурыОстатки = СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки();
	
	// Характеристики
	НоменклатураВДокументахСервер.ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик(ЭтаФорма);
	Если Параметры.Ключ.Пустая()
		Тогда
		НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект, Истина)
	КонецЕсли;
	
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ИнвентаризацияЗапасов", НастройкиФормыВыбораНоменклатуры);
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	Элементы.ЗапасыГруппаСерииНоменклатуры.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события ПередЗаписьюНаСервере.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СтруктураНастроекОтборов = Новый Структура;
	СтруктураНастроекОтборов.Вставить("СписокНоменклатуры", СписокНоменклатуры);
	СтруктураНастроекОтборов.Вставить("СписокГруппНоменклатуры", СписокГруппНоменклатуры);
	СтруктураНастроекОтборов.Вставить("СписокКатегорийНоменклатуры", СписокКатегорийНоменклатуры);
	
	ТекущийОбъект.НастройкиОтборов = Новый ХранилищеЗначения(СтруктураНастроекОтборов);
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);	
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьЗаголовкиОтборов();
	
	УправлениеФормой();
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события ОбработкаОповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Данные = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище = Параметр;
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, "Запасы", Истина, Истина);
		
	ИначеЕсли ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ИзменилосьКоличество = ПолучитьСерииНоменклатурыИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки);
		Если ИзменилосьКоличество Тогда
			РассчитатьСуммуВСтрокеТабличнойЧасти();
		КонецЕсли; 
		
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Запасы");
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения

КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Организация.
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
	Компания = СтруктураДанные.Компания;
	
	Объект.ПодписьПроверяющего = СтруктураДанные.ПодписьПроверяющего;
	
	ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита();
	ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтруктурнаяЕдиница.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	ОбновитьРеквизитыВидимостиФормы();
	УправлениеФормой();
	
	ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита();
	ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
	
КонецПроцедуры // СтруктурнаяЕдиницаПриИзменении()

// Процедура - обработчик события Открытие поля СтруктурнаяЕдиница.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.СтруктурнаяЕдиница.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаОткрытие()

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье"));
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ОтветственноеХранение"));
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
	
	СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
	
	СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанные);
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	СтрокаТабличнойЧасти.КоличествоУчет = 0;
	СтрокаТабличнойЧасти.СуммаУчет = 0;
	
	// Расчет отклонения.
	СтрокаТабличнойЧасти.Отклонение = СтрокаТабличнойЧасти.Количество - СтрокаТабличнойЧасти.КоличествоУчет;
	
	// Серии номенклатуры
	Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанныеСтроки,
			ИспользоватьСерииНоменклатурыОстатки);
	КонецЦикла;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
			СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
			СтруктураВыбораНоменклатуры.Партия = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
		КонецЕсли;
	КонецЕсли;
	// Конец Партии
	
	СтрокаТабличнойЧасти.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
	
	ПодборНоменклатурыИзСписка = Ложь;

КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗапасыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ИнвентаризацияЗапасов", НастройкиФормыВыбораНоменклатуры, Истина, "Запасы", ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаВыбора поля ввода ЕдиницаИзмерения.
//
&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	Если СтруктураДанные.ТекущийКоэффициент <> 0 И СтруктураДанные.Коэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество * СтруктураДанные.ТекущийКоэффициент / СтруктураДанные.Коэффициент;
		СтрокаТабличнойЧасти.КоличествоУчет = СтрокаТабличнойЧасти.КоличествоУчет * СтруктураДанные.ТекущийКоэффициент / СтруктураДанные.Коэффициент;
	КонецЕсли;
	
	// Расчет отклонения.
	СтрокаТабличнойЧасти.Отклонение = СтрокаТабличнойЧасти.Количество - СтрокаТабличнойЧасти.КоличествоУчет;
	
КонецПроцедуры // ЗапасыЕдиницаИзмеренияОбработкаВыбора()

// Процедура - обработчик события ПриИзменении поля ввода Количество
// в строке табличной части Запасы.
// Осуществляет пересчет суммы в строке табличной части.
//
&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	СтрокаТабличнойЧасти = Элементы["Запасы"].ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);

КонецПроцедуры // ТоварыКоличествоЕдиницПриИзменении()

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы["Запасы"].ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат 
	КонецЕсли;
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	// Расчет отклонения.
	СтрокаТабличнойЧасти.Отклонение = СтрокаТабличнойЧасти.Количество - СтрокаТабличнойЧасти.КоличествоУчет;
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	// Серии номенклатуры
	Если ИспользоватьСерииНоменклатурыОстатки<>Неопределено Тогда
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСерииНоменклатурыКоличество(Объект, СтрокаТабличнойЧасти);
	КонецЕсли;	
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

// Процедура - обработчик события ПриИзменении поля ввода Цена
// в строке табличной части Запасы.
// Осуществляет пересчет сумм в строке табличной части.
//
&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма
// в строке табличной части Запасы.
// Осуществляет пересчет цен в строке табличной части.
//
&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	ЦенаСтроки = ?(СтрокаТабличнойЧасти.Количество = 0, 0, СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество);
	
	СтрокаТабличнойЧасти.Цена = ?(ЦенаСтроки < 0, -1 * ЦенаСтроки, ЦенаСтроки);
	
КонецПроцедуры // ЗапасыСуммаПриИзменении()

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.КлючСвязи = 0;
		Элемент.ТекущиеДанные.СерииНоменклатуры = "";
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, Элемент.ТекущиеДанные);
	КонецЕсли;	

	Если Элемент.ТекущийЭлемент.Имя = "ЗапасыСерииНоменклатуры" Тогда
		ОткрытьПодборСерииНоменклатуры();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	// Серии номенклатуры
	Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанныеСтроки,
			ИспользоватьСерииНоменклатурыОстатки);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДекорацияПечатьНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияРеквизитовПечати", ЭтотОбъект);
	ОткрытьФорму("Обработка.РеквизитыПечати.Форма.РеквизитыПечатиИнвентаризацияЗапасов", Новый Структура("КонтекстПечати", Объект), ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку ЗаполнитьПоОстаткамНаСкладе.
// 
&НаКлиенте
Процедура КомандаЗаполнитьПоОстаткамНаСкладе()

	Если Объект.Запасы.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("КомандаЗаполнитьПоОстаткамНаСкладеЗавершение", ЭтотОбъект), НСтр(
			"ru = 'Табличная часть будет очищена. Продолжить операцию?'"), РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	КонецЕсли;

	КомандаЗаполнитьПоОстаткамНаСкладеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоОстаткамНаСкладеЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	КомандаЗаполнитьПоОстаткамНаСкладеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоОстаткамНаСкладеФрагмент()

	КомандаЗаполнитьПоОстаткамНаСкладеФрагментНаСервере();

КонецПроцедуры

&НаСервере
Процедура КомандаЗаполнитьПоОстаткамНаСкладеФрагментНаСервере()

	Документы.ИнвентаризацияЗапасов.ЗаполнитьПоОстаткамНаСкладе(Объект, СписокНоменклатуры, СписокГруппНоменклатуры, СписокКатегорийНоменклатуры);

КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "ЗаполнитьТолькоУчетныеДанные".
// 
&НаКлиенте
Процедура КомандаЗаполнитьТолькоУчетныеДанные()

	Если Объект.Запасы.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("КомандаЗаполнитьТолькоУчетныеДанныеЗавершение", ЭтотОбъект), НСтр(
			"ru = 'Учетные данные будут очищены. Продолжить операцию?'"), РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьТолькоУчетныеДанныеЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	КомандаЗаполнитьТолькоУчетныеДанныеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьТолькоУчетныеДанныеФрагмент()

	ЗаполнитьТолькоУчетныеДанные();

КонецПроцедуры // ЗаполнитьТолькоУчетныеДанные()

// Процедура - обработчик нажатия на кнопку "ЗаполнитьПоВидуЦен".
// 
&НаКлиенте
Процедура КомандаЗаполнитьПоВидуЦен(Команда)

	ПоказатьВопрос(Новый ОписаниеОповещения("КомандаЗаполнитьПоВидуЦенЗавершение1", ЭтотОбъект),
		НСтр("ru = 'Цены будут перезаполнены. Продолжить операцию?'"), РежимДиалогаВопрос.ДаНет, 0);

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоВидуЦенЗавершение1(Результат, ДополнительныеПараметры) Экспорт

	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ОткрытьФорму("Справочник.ВидыЦен.Форма.ФормаВыбора", , , , , ,
		Новый ОписаниеОповещения("КомандаЗаполнитьПоВидуЦенЗавершение", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоВидуЦенЗавершение(Результат, ДополнительныеПараметры) Экспорт

	ВидЦен = Результат;

	Если ТипЗнч(ВидЦен) = Тип("СправочникСсылка.ВидыЦен") Тогда
		ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ВидЦен);
	КонецЕсли;

КонецПроцедуры // КомандаЗаполнитьПоВидуЦен()

// Процедура - обработчик нажатия на кнопку "КомандаОбнулитьКоличествоИСумму".
// 
&НаКлиенте
Процедура КомандаОбнулитьКоличествоИСумму(Команда)

	Если Объект.Запасы.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("КомандаОбнулитьКоличествоИСуммуЗавершение", ЭтотОбъект),
			НСтр("ru = 'Колонки ""Количество"" и ""Сумма"" будут очищены. Продолжить операцию?'"),
			РежимДиалогаВопрос.ДаНет, 0);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаОбнулитьКоличествоИСуммуЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Ответ = Результат;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	КомандаОбнулитьКоличествоИСуммуФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура КомандаОбнулитьКоличествоИСуммуФрагмент()

	Перем СтрокаТабличнойЧасти;

	Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл

		СтрокаТабличнойЧасти.Количество = 0;
		СтрокаТабличнойЧасти.Сумма = 0;
		СтрокаТабличнойЧасти.Отклонение = СтрокаТабличнойЧасти.Количество - СтрокаТабличнойЧасти.КоличествоУчет;

	КонецЦикла;

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборПоНоменклатуреНажатие(Элемент)
	
	ОчиститьУсловиеОтбораПоНоменклатуре();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборПоГруппамНоменклатурыНажатие(Элемент)
	
	ОчиститьУсловиеОтбораПоГруппамНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборПоКатегориямНоменклатурыНажатие(Элемент)
	
	ОчиститьУсловиеОтбораПоКатегориямНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоНоменклатуре(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидОтбора", "ОтборПоНоменклатуре");
	ПараметрыФормы.Вставить("СписокЗначенийОтбора", СписокНоменклатуры);
	
	Оповещение = Новый ОписаниеОповещения("УстановитьОтборЗавершение",ЭтотОбъект);
	ОткрытьФорму("Документ.ИнвентаризацияЗапасов.Форма.ФормаВыбораЗначенийОтбора", ПараметрыФормы, ЭтотОбъект,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоГруппамНоменклатуры(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидОтбора", "ОтборПоГруппамНоменклатуры");
	ПараметрыФормы.Вставить("СписокЗначенийОтбора", СписокГруппНоменклатуры);
	
	Оповещение = Новый ОписаниеОповещения("УстановитьОтборЗавершение",ЭтотОбъект);
	ОткрытьФорму("Документ.ИнвентаризацияЗапасов.Форма.ФормаВыбораЗначенийОтбора", ПараметрыФормы, ЭтотОбъект,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоКатегориямНоменклатуры(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидОтбора", "ОтборПоКатегориямНоменклатуры");
	ПараметрыФормы.Вставить("СписокЗначенийОтбора", СписокКатегорийНоменклатуры);
	
	Оповещение = Новый ОписаниеОповещения("УстановитьОтборЗавершение",ЭтотОбъект);
	ОткрытьФорму("Документ.ИнвентаризацияЗапасов.Форма.ФормаВыбораЗначенийОтбора", ПараметрыФормы, ЭтотОбъект,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборЗавершение(Результат,Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		СписокЗначенийОтбора = ПолучитьИзВременногоХранилища(Результат.АдресСпискаЗначенийОтбора);
		ЗаголовокСписка = СформироватьЗаголовокОтбораИзСписка(СписокЗначенийОтбора);
		
		ВидОтбора = Результат.ВидОтбора;
		Если ВидОтбора = "ОтборПоНоменклатуре" Тогда
			СписокНоменклатуры = СписокЗначенийОтбора;
			Элементы.УстановитьОтборПоНоменклатуре.Заголовок = ЗаголовокСписка;
		ИначеЕсли ВидОтбора = "ОтборПоГруппамНоменклатуры" Тогда
			СписокГруппНоменклатуры = СписокЗначенийОтбора;
			Элементы.УстановитьОтборПоГруппамНоменклатуры.Заголовок = ЗаголовокСписка;
		Иначе
			СписокКатегорийНоменклатуры = СписокЗначенийОтбора;
			Элементы.УстановитьОтборПоКатегориямНоменклатуры.Заголовок = ЗаголовокСписка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоГруппам(Команда)
	СортироватьТаблицуТоваров();
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоКатегориям(Команда)
	СортироватьТаблицуТоваров(Истина);
КонецПроцедуры

&НаСервере
Процедура СортироватьТаблицуТоваров(ПоКатегориям = Ложь)
	
	ТаблицаТовары = Объект.Запасы.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Партия КАК Партия,
	|	Товары.СерииНоменклатуры КАК СерииНоменклатуры,
	|	Товары.Отклонение КАК Отклонение,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоУчет КАК КоличествоУчет,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СуммаУчет КАК СуммаУчет,
	|	Товары.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ Вт_Товары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_Товары.Номенклатура,
	|	Вт_Товары.Характеристика,
	|	Вт_Товары.Партия,
	|	Вт_Товары.СерииНоменклатуры,
	|	Вт_Товары.Отклонение,
	|	Вт_Товары.Количество,
	|	Вт_Товары.КоличествоУчет,
	|	Вт_Товары.ЕдиницаИзмерения,
	|	Вт_Товары.Цена,
	|	Вт_Товары.Сумма,
	|	Вт_Товары.СуммаУчет,
	|	Вт_Товары.КлючСвязи
	|ИЗ
	|	Вт_Товары КАК Вт_Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Вт_Товары.Номенклатура = СпрНоменклатура.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СпрНоменклатура.Наименование
	|ИТОГИ ПО
	|	СпрНоменклатура.Ссылка ТОЛЬКО ИЕРАРХИЯ";
	
	Если ПоКатегориям Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СпрНоменклатура.Ссылка ТОЛЬКО ИЕРАРХИЯ", "СпрНоменклатура.КатегорияНоменклатуры ТОЛЬКО ИЕРАРХИЯ");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТовары);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Объект.Запасы.Очистить();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипЗаписи() <> ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = Объект.Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов()
	ДополнительныеСвойства = Новый Структура("ИзменениеКлючевыхРеквизитов", Истина);
	СерииНоменклатурыУНФ.ЗаполнитьПризнакиИспользованияСерий(Объект, ДополнительныеСвойства);
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита()
	НоменклатураВДокументахСервер.ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита(ЭтотОбъект,
		"ИнвентаризацияЗапасов", "Запасы", НастройкиФормыВыбораНоменклатуры);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияРеквизитовПечати(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ПечатьДокументовУНФКлиент.ОбновитьЗначенияРеквизитовПечати(ЭтотОбъект, Результат.ИзмененныеРеквизиты);
		
		Если Результат.Свойство("Команда") Тогда
			
			Подключаемый_ВыполнитьКоманду(Результат.Команда);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыВидимостиФормы()
	
	СтрокаРеквизитов = "ТипСтруктурнойЕдиницы, ОрдерныйСклад";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СтруктурнаяЕдиница, СтрокаРеквизитов);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначенияРеквизитов, СтрокаРеквизитов);
	
	УчетПоЯчейкам = ПолучитьФункциональнуюОпцию("УчетПоЯчейкам");
	
КонецПроцедуры

// Функция возвращает текст запроса по учетным данным на складе.
//
&НаСервере
Функция СформироватьТекстЗапросаУчетныеДанныеНаСкладе()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЛОЖЬ КАК ПризнакВЯчейке,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК Количество,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоУчет,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаУчет
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасыОстатки
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|				И (Номенклатура, Характеристика, Партия) В
	|					(ВЫБРАТЬ
	|						ИнвентаризацияЗапасов.Номенклатура КАК Номенклатура,
	|						ИнвентаризацияЗапасов.Характеристика КАК Характеристика,
	|						ИнвентаризацияЗапасов.Партия КАК Партия
	|					ИЗ
	|						ИнвентаризацияЗапасов КАК ИнвентаризацияЗапасов)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Партия";
	
	Возврат ТекстЗапроса + Символы.ПС +
		";
		|
		|////////////////////////////////////////////////////////////////////////////////"
		+ Символы.ПС;
	
КонецФункции // СформироватьТекстЗапросаУчетныеДанныеНаСкладе()

// Функция возвращает текст запроса по учетным данным в ячейке на складе.
//
&НаСервере
Функция СформироватьТекстЗапросаУчетныеДанныеВЯчейкеНаСкладе()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИСТИНА КАК ПризнакВЯчейке,
	|	ЗапасыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗапасыНаСкладахОстатки.Характеристика КАК Характеристика,
	|	ЗапасыНаСкладахОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыНаСкладахОстатки.КоличествоОстаток) КАК Количество,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоУчет,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаУчет
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасыОстатки
	|ИЗ
	|	РегистрНакопления.ЗапасыНаСкладах.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|				И Ячейка = &Ячейка
	|				И (Номенклатура, Характеристика, Партия) В
	|					(ВЫБРАТЬ
	|						ИнвентаризацияЗапасов.Номенклатура КАК Номенклатура,
	|						ИнвентаризацияЗапасов.Характеристика КАК Характеристика,
	|						ИнвентаризацияЗапасов.Партия КАК Партия
	|					ИЗ
	|						ИнвентаризацияЗапасов КАК ИнвентаризацияЗапасов)) КАК ЗапасыНаСкладахОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
	|				&Период,
	|				Организация = &Организация
	|					И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЗапасыОстатки
	|		ПО ЗапасыНаСкладахОстатки.Номенклатура = ЗапасыОстатки.Номенклатура
	|			И ЗапасыНаСкладахОстатки.Характеристика = ЗапасыОстатки.Характеристика
	|			И ЗапасыНаСкладахОстатки.Партия = ЗапасыОстатки.Партия
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыНаСкладахОстатки.Номенклатура,
	|	ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения,
	|	ЗапасыНаСкладахОстатки.Характеристика,
	|	ЗапасыНаСкладахОстатки.Партия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Партия";
	
	Возврат ТекстЗапроса + Символы.ПС +
		";
		|
		|////////////////////////////////////////////////////////////////////////////////"
		+ Символы.ПС;
	
КонецФункции // СформироватьТекстЗапросаУчетныеДанныеВЯчейкеНаСкладе()

// Процедура заполняет табличную часть "Запасы" учетными данными.
// 
&НаСервере
Процедура ЗаполнитьТолькоУчетныеДанные()
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗатраты.Номенклатура КАК Номенклатура,
	|	ТаблицаЗатраты.Характеристика КАК Характеристика,
	|	ТаблицаЗатраты.Партия КАК Партия,
	|	ТаблицаЗатраты.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаЗатраты.Количество КАК Количество,
	|	ТаблицаЗатраты.Цена КАК Цена,
	|	ТаблицаЗатраты.Сумма КАК Сумма
	|ПОМЕСТИТЬ ИнвентаризацияЗапасов
	|ИЗ
	|	&ТаблицаЗатраты КАК ТаблицаЗатраты";
	
	Запрос.УстановитьПараметр("ТаблицаЗатраты", Объект.Запасы.Выгрузить());
	
	Запрос.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ЗначениеЗаполнено(Объект.Ячейка) Тогда
		ТекстЗапроса = СформироватьТекстЗапросаУчетныеДанныеВЯчейкеНаСкладе();
		Запрос.УстановитьПараметр("Ячейка", Объект.Ячейка);
	Иначе
		ТекстЗапроса = СформироватьТекстЗапросаУчетныеДанныеНаСкладе();
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ИнвентаризацияЗапасовЗапасы.Номенклатура КАК Номенклатура,
	|	ИнвентаризацияЗапасовЗапасы.Характеристика КАК Характеристика,
	|	ИнвентаризацияЗапасовЗапасы.Партия КАК Партия,
	|	ИнвентаризацияЗапасовЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ИнвентаризацияЗапасовЗапасы.Количество КАК Количество,
	|	ИнвентаризацияЗапасовЗапасы.Цена КАК Цена,
	|	ИнвентаризацияЗапасовЗапасы.Сумма КАК Сумма,
	|	ЕСТЬNULL(ВТЗапасыОстатки.Количество, 0) / ЕСТЬNULL(ИнвентаризацияЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент, 1) КАК КоличествоВЯчейке,
	|	ЕСТЬNULL(ВТЗапасыОстатки.КоличествоУчет, 0) / ЕСТЬNULL(ИнвентаризацияЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент, 1) КАК КоличествоУчет,
	|	ЕСТЬNULL(ВТЗапасыОстатки.СуммаУчет, 0) КАК СуммаУчет,
	|	ВЫБОР
	|		КОГДА ВТЗапасыОстатки.ПризнакВЯчейке
	|			ТОГДА ИнвентаризацияЗапасовЗапасы.Количество - ЕСТЬNULL(ВТЗапасыОстатки.Количество, 0) / ЕСТЬNULL(ИнвентаризацияЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент, 1)
	|		ИНАЧЕ ИнвентаризацияЗапасовЗапасы.Количество - ЕСТЬNULL(ВТЗапасыОстатки.КоличествоУчет, 0) / ЕСТЬNULL(ИнвентаризацияЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент, 1)
	|	КОНЕЦ КАК Отклонение
	|ИЗ
	|	ИнвентаризацияЗапасов КАК ИнвентаризацияЗапасовЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаЗапасыОстатки КАК ВТЗапасыОстатки
	|		ПО ИнвентаризацияЗапасовЗапасы.Номенклатура = ВТЗапасыОстатки.Номенклатура
	|			И ИнвентаризацияЗапасовЗапасы.Характеристика = ВТЗапасыОстатки.Характеристика
	|			И ИнвентаризацияЗапасовЗапасы.Партия = ВТЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("Период", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если ЗначениеЗаполнено(Объект.Ячейка) Тогда
		
		Объект.Запасы.Очистить();
		Объект.СерииНоменклатуры.Очистить();
		
		Выборка = МассивРезультатов[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = Объект.Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			Если Выборка.КоличествоВЯчейке <> Выборка.КоличествоУчет Тогда
				
				НоваяСтрока.КоличествоУчет = Выборка.КоличествоВЯчейке;
				Если Выборка.КоличествоВЯчейке = 0
					ИЛИ Выборка.КоличествоУчет <= 0
					ИЛИ Выборка.СуммаУчет = 0 Тогда
					НоваяСтрока.СуммаУчет = 0;
				Иначе
					НоваяСтрока.СуммаУчет = Выборка.СуммаУчет / Выборка.КоличествоУчет * НоваяСтрока.КоличествоУчет;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Объект.Запасы.Загрузить(МассивРезультатов[1].Выгрузить());
		
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры // ЗаполнитьТолькоУчетныеДанные()

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", ДокументыУНФ.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Получает набор данных с сервера.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", Константы.УчетПоКомпании.Компания(Организация));
	СтруктураДанные.Вставить("ПодписьПроверяющего", Организация.ПодписьГлавногоБухгалтера);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	// Наборы
	СтруктураДанные.Вставить("ЭтоНабор", СтруктураДанные.Номенклатура.ЭтоНабор);
	
	// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",Ложь);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьХарактеристики
		Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура);
		
		Если Не ЗначенияПоУмолчанию = Неопределено
			Тогда		
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика",ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика), СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
		
		СтруктураДанные.Вставить("ИспользоватьХарактеристики",Истина);
		СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",СтруктураДанные.Номенклатура.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли; 
	// Конец Характеристики
	
	//Партии
	СтруктураДанные.Вставить("ИспользоватьПартии",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеПартий",Ложь);
	
	Если НЕ СтруктураДанные.Свойство("Партия") Тогда
		СтруктураДанные.Вставить("Партия", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьПартии
		Тогда
		
		Если СтруктураДанные.Свойство("СтатусПартии")
			Тогда
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтруктураДанные.СтатусПартии);
		Иначе
			Если Не СтруктураДанные.Свойство("ВидОперации")
				Тогда
				ВидОперации = Неопределено
			Иначе
				ВидОперации = СтруктураДанные.ВидОперации
			КонецЕсли;
			
			СтатусПартии = НоменклатураВДокументахСервер.СоответствиеВидаОперацииИлиХозОперацииСтатусуПартии(, ВидОперации);
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтатусПартии);
		КонецЕсли;
		
		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		
		Если Не ЗначенияПартииПоУмолчанию = Неопределено
			Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;
		
		СтруктураДанные.Партия = ?(ЗначениеЗаполнено(СтруктураДанные.Партия), СтруктураДанные.Партия, ПартияПоУмолчанию);
		
		СтруктураДанные.ПроверятьЗаполнениеПартий = СтруктураДанные.Номенклатура.ПроверятьЗаполнениеПартий;
		СтруктураДанные.ИспользоватьПартии = Истина;
		
	КонецЕсли;
	// Конец Партии
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьСерииНоменклатуры Тогда
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(СтруктураДанные));
	Иначе
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", 0);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура;
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()	

// Устанавливает видимость ячейки.
//
&НаКлиенте
Процедура УправлениеФормой()
	
	Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) 
		И НЕ ОрдерныйСклад 
		И НЕ ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Розница") 
		И УчетПоЯчейкам Тогда
		
		Элементы.Ячейка.Видимость = Истина;
		Элементы.СтруктурнаяЕдиница.АвтоМаксимальнаяШирина = Ложь;
	Иначе
		Элементы.Ячейка.Видимость = Ложь;
		Элементы.СтруктурнаяЕдиница.АвтоМаксимальнаяШирина = Истина;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьЯчейки()	

// ПодключаемоеОборудование
// Процедура получает данные по штрихкодам.
//
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодамВМассиве(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		МассивДанныхШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если МассивДанныхШтрихкода <> Неопределено
			И МассивДанныхШтрихкода.Количество() <> 0 Тогда
			
			Для Каждого ДанныеШтрихкода Из МассивДанныхШтрихкода Цикл
				
				СтруктураДанныеНоменклатуры = Новый Структура();
				СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
				СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
				ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
				
				Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
					ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из Метаданные.Документы.ИнвентаризацияЗапасов.ТабличныеЧасти.Запасы.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение", ЭтотОбъект, Новый Структура("СтруктураДанные",СтруктураДанные));
			
			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам", ПараметрыОткрытия, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода <> Неопределено
			И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено 
			ИЛИ ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры,ЭтоНабор"
			, ТекШтрихкод.Штрихкод, ДанныеШтрихкода[0].Номенклатура, ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры, ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ЭтоНабор));
		Иначе
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.ЕдиницаИзмерения));
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				
				НоваяСтрока = Объект.Запасы.Добавить();
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				
				// Расчет отклонения.
				НоваяСтрока.Отклонение = НоваяСтрока.Количество - НоваяСтрока.КоличествоУчет;
				
			Иначе
				
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				
				// Расчет отклонения.
				НоваяСтрока.Отклонение = НоваяСтрока.Количество - НоваяСтрока.КоличествоУчет;
				
			КонецЕсли;
			
			Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры) Экспорт
	
	Если СтруктураНоменклатуры = Неопределено Тогда Возврат КонецЕсли;
	
	ДанныеШтрихкода = СтруктураНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = СтруктураНоменклатуры.ТекШтрихкод;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	СтруктураДанные = Параметры.СтруктураДанные;
	
	Если СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено ИЛИ ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
		ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры,ЭтоНабор", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор));
	Иначе
		МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.ЕдиницаИзмерения));
		Если МассивСтрокТЧ.Количество() = 0 Тогда
			
			НоваяСтрока = Объект.Запасы.Добавить();
			НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
			НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
			НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
			НоваяСтрока.Количество = ТекШтрихкод.Количество;
			НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
			НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
			Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			
			// Расчет отклонения.
			НоваяСтрока.Отклонение = НоваяСтрока.Количество - НоваяСтрока.КоличествоУчет;
			
		Иначе
			
			НоваяСтрока = МассивСтрокТЧ[0];
			НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
			НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
			Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			
			// Расчет отклонения.
			НоваяСтрока.Отклонение = НоваяСтрока.Количество - НоваяСтрока.КоличествоУчет;
			
		КонецЕсли;
		
		Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
			СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов) Экспорт
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов);
	НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект,,,,Оповещение
		);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияХарактеристик()
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		Если ТекНекорректныйШтрихкод.Свойство("ЭтоНабор") И ТекНекорректныйШтрихкод.ЭтоНабор Тогда
			// Наборы
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", НСтр("ru = 'Набор'"));
		Иначе
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		КонецЕсли; 
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

// Конец ПодключаемоеОборудование

// Выполняет пересчет цен табличной части документа.
//
&НаКлиенте
Процедура ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ВидЦен)
	
	СтруктураДанных = Новый Структура;
	ТабличнаяЧастьДокумента = Новый Массив;
	
	СтруктураДанных.Вставить("Дата", Объект.Дата);
	СтруктураДанных.Вставить("Организация", Компания);
	СтруктураДанных.Вставить("ВидЦен", ВидЦен);
	СтруктураДанных.Вставить("ВалютаДокумента", НациональнаяВалюта);
	
	Для каждого СтрокаТЧ Из Объект.Запасы Цикл
		
		СтрокаТЧ.Цена = 0;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			Продолжить;
		КонецЕсли; 
		
		СтрокаТабличнойЧасти = Новый Структура();
		СтрокаТабличнойЧасти.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтрокаТабличнойЧасти.Вставить("Характеристика", СтрокаТЧ.Характеристика);
		СтрокаТабличнойЧасти.Вставить("ЕдиницаИзмерения", СтрокаТЧ.ЕдиницаИзмерения);
		СтрокаТабличнойЧасти.Вставить("Цена", 0);
		
		ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
	ЦенообразованиеСервер.ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанных, ТабличнаяЧастьДокумента);
	
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаТЧ.Характеристика);
		СтруктураПоиска.Вставить("ЕдиницаИзмерения", СтрокаТЧ.ЕдиницаИзмерения);
		
		РезультатПоиска = Объект.Запасы.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаРезультат Из РезультатПоиска Цикл
			
			СтрокаРезультат.Цена = СтрокаТЧ.Цена;
			СтрокаРезультат.Сумма = СтрокаРезультат.Количество * СтрокаРезультат.Цена;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен()

&НаКлиенте
Функция СформироватьЗаголовокОтбораИзСписка(СписокЭлементов)
	
	ЗаголовокОтбораСтрока = "";
	Для каждого ЭлементСписка Из СписокЭлементов Цикл
		
		ЗаголовокОтбораСтрока = ЗаголовокОтбораСтрока + ?(ЗаголовокОтбораСтрока = "","","; ") + ЭлементСписка.Представление;
		
	КонецЦикла;
	
	Если ЗаголовокОтбораСтрока = "" Тогда
		ЗаголовокОтбораСтрока = НСтр("ru = 'Отбор не установлен'");
	КонецЕсли;
	
	Возврат ЗаголовокОтбораСтрока;
	
КонецФункции // СформироватьЗаголовокОтбораИзСписка()

// Обновляет заголовки отборов условий проведения инвентаризации.
//
&НаКлиенте
Процедура ОбновитьЗаголовкиОтборов()

	ЗаголовокСписка = СформироватьЗаголовокОтбораИзСписка(СписокНоменклатуры);
	Элементы.УстановитьОтборПоНоменклатуре.Заголовок = ЗаголовокСписка;
	
	ЗаголовокСписка = СформироватьЗаголовокОтбораИзСписка(СписокГруппНоменклатуры);
	Элементы.УстановитьОтборПоГруппамНоменклатуры.Заголовок = ЗаголовокСписка;
	
	ЗаголовокСписка = СформироватьЗаголовокОтбораИзСписка(СписокКатегорийНоменклатуры);
	Элементы.УстановитьОтборПоКатегориямНоменклатуры.Заголовок = ЗаголовокСписка;

КонецПроцедуры // ОбновитьЗаголовкиОтборов()

// Восстанавливает настройки отборов условий проведения инвентаризации.
//
&НаСервере
Процедура ВосстановитьНастройкиОтборов()

	СтруктураНастроекОтборов = РеквизитФормыВЗначение("Объект").НастройкиОтборов.Получить();
	Если ТипЗнч(СтруктураНастроекОтборов) = Тип("Структура") Тогда
		СтруктураНастроекОтборов.Свойство("СписокНоменклатуры", СписокНоменклатуры);
		СтруктураНастроекОтборов.Свойство("СписокГруппНоменклатуры", СписокГруппНоменклатуры);
		СтруктураНастроекОтборов.Свойство("СписокКатегорийНоменклатуры", СписокКатегорийНоменклатуры);
	КонецЕсли;

КонецПроцедуры // ВосстановитьНастройкиОтборов()

&НаКлиенте
Процедура ОчиститьУсловиеОтбораПоНоменклатуре()

	СписокНоменклатуры.Очистить();
	Элементы.УстановитьОтборПоНоменклатуре.Заголовок = НСтр("ru = 'Отбор не установлен'");

КонецПроцедуры // ОчиститьУсловиеОтбораПоНоменклатуре()

&НаКлиенте
Процедура ОчиститьУсловиеОтбораПоГруппамНоменклатуры()

	СписокГруппНоменклатуры.Очистить();
	Элементы.УстановитьОтборПоГруппамНоменклатуры.Заголовок = НСтр("ru = 'Отбор не установлен'");

КонецПроцедуры // ОчиститьУсловиеОтбораПоГруппамНоменклатуры()

&НаКлиенте
Процедура ОчиститьУсловиеОтбораПоКатегориямНоменклатуры()

	СписокКатегорийНоменклатуры.Очистить();
	Элементы.УстановитьОтборПоКатегориямНоменклатуры.Заголовок = НСтр("ru = 'Отбор не установлен'");

КонецПроцедуры // ОчиститьУсловиеОтбораПоКатегориямНоменклатуры()

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

// Процедура - обработчик нажатия кнопки Копировать строки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Запасы");
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Вставить строки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	
	ВставитьСтроки("Запасы");
	
КонецПроцедуры

// Вызывает процедуру копирования строк и оповещает пользователя о количестве скопированных.
//
&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуру вставки строк и оповещает пользователя о количестве вставленных.
//
&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

// Выполняет копирование выделенных строк в буфер обмена.
//
&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

// Вставляет скопированные строки из буфера обмена в выбранную табличную часть.
//
&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры

// Обрабатывает вставленные строки.
//
&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПодбором

// Процедура - обработчик события Действие команды Подбор
//
&НаКлиенте
Процедура Подбор(Команда)
	
	ИмяТабличнойЧасти 	= "Запасы";
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры // ПодборВыполнить()

// Функция получает список товаров из временного хранилища
//
&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		// Расчет отклонения.
		НоваяСтрока.Отклонение = НоваяСтрока.Количество - НоваяСтрока.КоличествоУчет;
		
		Если ИмяТабличнойЧасти = "Запасы" Тогда
			
			ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтрокаЗагрузки.Номенклатура);
			
			НоваяСтрока.Характеристика = ?(ЗначениеЗаполнено(СтрокаЗагрузки.Характеристика), СтрокаЗагрузки.Характеристика, ЗначенияПоУмолчанию);
			
			НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтрокаЗагрузки.Номенклатура.ПроверятьЗаполнениеХарактеристики;
			НоваяСтрока.ИспользоватьХарактеристики = СтрокаЗагрузки.Номенклатура.ИспользоватьХарактеристики;
			НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
			
			//Партии
			
			СтатусПартии = Новый СписокЗначений;
			СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
			СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье"));
			СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ОтветственноеХранение"));
			СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
			
			НоваяСтрока.ИспользоватьПартии = СтрокаЗагрузки.Номенклатура.ИспользоватьПартии;
			НоваяСтрока.ПроверятьЗаполнениеПартий = СтрокаЗагрузки.Номенклатура.ПроверятьЗаполнениеПартий;
			
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтрокаЗагрузки.Номенклатура,СтатусПартии);
			
			НоваяСтрока.Партия = ?(ЗначениеЗаполнено(СтрокаЗагрузки.Партия), СтрокаЗагрузки.Партия, ЗначенияПартииПоУмолчанию);
			// Конец Партии
			
			// Серии номенклатуры
			Если ЗначениеЗаполнено(СтрокаЗагрузки.Номенклатура) И СтрокаЗагрузки.Номенклатура.ИспользоватьСерииНоменклатуры Тогда
				СтруктураДанные = Новый Структура;
				СтруктураДанные.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
				СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанные);
				НоваяСтрока.СтатусыСерийНоменклатуры = СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(СтруктураДанные);
			Иначе
				НоваяСтрока.СтатусыСерийНоменклатуры = 0;
			КонецЕсли;
			
			ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТабличнойЧасти], НоваяСтрока, "КлючСвязи");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

// ПодключаемоеОборудование
// Процедура - обработчик команды командной панели табличной части.
//
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения(
		"ПоискПоШтрихкодуЗавершение",
		ЭтотОбъект, 
		Новый Структура("ТекШтрихкод", ТекШтрихкод)
	);
	
	#Если МобильныйКлиент Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду",,,,,,ОбработкаЗавершения);
	#Иначе
		ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкоду()

// Процедура - обработчик события Действие команды ПолучитьВес
//
&НаКлиенте
Процедура ПолучитьВес(Команда)
	
ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, "Запасы");
	
КонецПроцедуры // ПолучитьВес()

&НаКлиенте
Процедура ПолучитьВесЗавершение(Параметры) Экспорт
	
	СтрокаТабличнойЧасти = Параметры;
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	// Расчет отклонения.
	СтрокаТабличнойЧасти.Отклонение = СтрокаТабличнойЧасти.Количество - СтрокаТабличнойЧасти.КоличествоУчет;
	
КонецПроцедуры

// Процедура - обработчик команды ЗагрузитьДанныеИзТСД.
//
&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "Запасы");
	
	ПодключаемоеОборудованиеУНФКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина, ДополнительныеПараметры);
	
КонецПроцедуры

// Конец ПодключаемоеОборудование

#КонецОбласти

#Область РаботаССериямиНоменклатуры

&НаКлиенте
Процедура ЗапасыСерииНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерииНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерииНоменклатуры()
		
	ТекущиеДанныеИдентификатор = Элементы.Запасы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийНоменклатуры = ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор);
	
	ОткрытьФорму("Обработка.ПодборСерийНоменклатуры.Форма", ПараметрыСерийНоменклатуры, ЭтотОбъект);

КонецПроцедуры

Функция ПолучитьСерииНоменклатурыИзХранилища(АдресВоВременномХранилище, КлючСтроки)
	
	Модифицированность = Истина;
	Возврат СерииНоменклатурыУНФ.ПолучитьСерииНоменклатурыИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки);
	
КонецФункции

Функция ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор)

	Возврат СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатуры(Объект, ЭтотОбъект.УникальныйИдентификатор,
		ТекущиеДанныеИдентификатор, Ложь);

КонецФункции
// Конец ПодключаемоеОборудование

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
