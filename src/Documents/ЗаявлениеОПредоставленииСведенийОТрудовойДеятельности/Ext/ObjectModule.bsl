#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий
	
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	УникальныеСотрудники = Новый Соответствие;
	ТекущиеЗаявления = ТекущиеЗаявленияСотрудников();
	
	Для Каждого ДанныеСотрудника Из Сотрудники Цикл 
		
		Если ЗначениеЗаполнено(ДанныеСотрудника.Сотрудник) Тогда 
			Если УникальныеСотрудники[ДанныеСотрудника.Сотрудник] <> Неопределено Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Строка %1: Сотрудник %2 уже был введен ранее в строке %3.'"),
					ДанныеСотрудника.НомерСтроки, ДанныеСотрудника.Сотрудник, УникальныеСотрудники[ДанныеСотрудника.Сотрудник]);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ,
					"Объект.Сотрудники[" + Формат(ДанныеСотрудника.НомерСтроки - 1, "ЧН=0; ЧГ=0") + "].Сотрудник" , , Отказ);
			Иначе 
				УникальныеСотрудники.Вставить(ДанныеСотрудника.Сотрудник, ДанныеСотрудника.НомерСтроки);
			КонецЕсли;
		КонецЕсли;
		
		ТекущееЗаявление = ТекущиеЗаявления.Найти(ДанныеСотрудника.Сотрудник, "Сотрудник");
		Если ТекущееЗаявление <> Неопределено Тогда
			Если ТекущееЗаявление.ВидЗаявления = Перечисления.ВидыЗаявленийОПредоставленииСведенийОТрудовойДеятельности.СведенияОТрудовойДеятельностиВЭлектроннойФорме Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Строка %1: Сотруднику %2 уже оформлено заявление на предоставление сведений о трудовой деятельности в электронной форме в документе %3.'"),
					ДанныеСотрудника.НомерСтроки, ДанныеСотрудника.Сотрудник, ТекущееЗаявление.Регистратор);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ТекущееЗаявление.Регистратор, , , Отказ);
			КонецЕсли;
			Если ТекущееЗаявление.ВидЗаявления = Перечисления.ВидыЗаявленийОПредоставленииСведенийОТрудовойДеятельности.ВедениеБумажнойТрудовойКнижки 
				И ДанныеСотрудника.ВидЗаявления = Перечисления.ВидыЗаявленийОПредоставленииСведенийОТрудовойДеятельности.ВедениеБумажнойТрудовойКнижки Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Строка %1: Сотруднику %2 уже оформлено заявление на ведение бумажной трудовой книжки в документе %3.'"),
					ДанныеСотрудника.НомерСтроки, ДанныеСотрудника.Сотрудник, ТекущееЗаявление.Регистратор);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ТекущееЗаявление.Регистратор, , , Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКраткийСоставДокумента();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьКраткийСоставДокумента()
	
	МаксимальнаяДлинаСтроки = 100;
	СписокСотрудников = Сотрудники.ВыгрузитьКолонку("Сотрудник");
	
	КраткийСостав = "";
	Для Каждого Сотрудник Из СписокСотрудников Цикл
		КраткийСостав = КраткийСостав + Сотрудник +", ";
	КонецЦикла;
	
	Если Не ПустаяСтрока(КраткийСостав) Тогда
		КраткийСостав = Лев(КраткийСостав, СтрДлина(КраткийСостав)-2);
	КонецЕсли;
	
	Если СтрДлина(КраткийСостав) > МаксимальнаяДлинаСтроки Тогда
		КраткийСостав = Лев(КраткийСостав, МаксимальнаяДлинаСтроки - 3) + "...";
	КонецЕсли;
	КраткийСоставДокумента = КраткийСостав;
	
КонецПроцедуры

Функция ТекущиеЗаявленияСотрудников()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники.Выгрузить(, "Сотрудник").ВыгрузитьКолонку("Сотрудник"));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявлениеОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Сотрудник КАК Сотрудник,
	               |	ЗаявлениеОПредоставленииСведенийОТрудовойДеятельностиСотрудники.ВидЗаявления КАК ВидЗаявления,
	               |	ЗаявлениеОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка.Дата КАК Дата,
	               |	ЗаявлениеОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТЗаявленияСотрудников
	               |ИЗ
	               |	Документ.ЗаявлениеОПредоставленииСведенийОТрудовойДеятельности.Сотрудники КАК ЗаявлениеОПредоставленииСведенийОТрудовойДеятельностиСотрудники
	               |ГДЕ
	               |	НЕ ЗаявлениеОПредоставленииСведенийОТрудовойДеятельностиСотрудники.ЗаявлениеОтозвано
	               |	И ЗаявлениеОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка <> &Ссылка
	               |	И ЗаявлениеОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Сотрудник В(&Сотрудники)
	               |	И ЗаявлениеОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка.Дата < &Дата
	               |	И ЗаявлениеОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка.Проведен
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(ЗаявленияСотрудников.Дата) КАК Дата,
	               |	ЗаявленияСотрудников.Сотрудник КАК Сотрудник
	               |ПОМЕСТИТЬ ВТМаксимальныеДаты
	               |ИЗ
	               |	ВТЗаявленияСотрудников КАК ЗаявленияСотрудников
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаявленияСотрудников.Сотрудник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаявленияСотрудников.Сотрудник КАК Сотрудник,
	               |	ЗаявленияСотрудников.ВидЗаявления КАК ВидЗаявления,
	               |	ЗаявленияСотрудников.Ссылка КАК Регистратор
	               |ИЗ
	               |	ВТЗаявленияСотрудников КАК ЗаявленияСотрудников
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМаксимальныеДаты КАК МаксимальныеДаты
	               |		ПО ЗаявленияСотрудников.Дата = МаксимальныеДаты.Дата
	               |			И ЗаявленияСотрудников.Сотрудник = МаксимальныеДаты.Сотрудник";
	
	ТекущиеЗаявления = Запрос.Выполнить().Выгрузить();
	
	Возврат ТекущиеЗаявления;
	
КонецФункции


#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли