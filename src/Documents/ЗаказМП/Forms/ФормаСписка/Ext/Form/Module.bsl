
#Область ОбщегоНазначения

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если ЗначениеЗаполнено(ВидОтбора) Тогда
		Заголовок = НСтр("ru='Заказы (';en='Estimates ('") + ВидОтбора + ")";
	Иначе
		Заголовок = НСтр("ru='Заказы';en='Estimates'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Сбор статистики
	СборСтатистикиМПКлиентСерверПереопределяемый.ОтправитьОткрытиеЭкранаВGA(ЭтаФорма.ИмяФормы);
	// Конец Сбор статистики
	
	ВидОтбора = Константы.ФильтрПоЗаказуМП.Получить();
	
	// Предустановка отборов на список.
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("СостояниеЗаказа");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ИндексОтбораНезавершенные = Список.Отбор.Элементы.Индекс(ЭлементОтбора);
	
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Отгружен");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ИндексОтбораНеотгруженные = Список.Отбор.Элементы.Индекс(ЭлементОтбора);
	
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Оплачен");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ИндексОтбораНеоплаченные = Список.Отбор.Элементы.Индекс(ЭлементОтбора);
	
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Ложь;
	ИндексОтбораПометкаУдаления = Список.Отбор.Элементы.Индекс(ЭлементОтбора);
	
	Список.Параметры.УстановитьЗначениеПараметра("СимволНомера", НСтр("ru='№ ';en='# '"));
	УстановитьФильтр(ВидОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// Сбор статистики
	СборСтатистикиМПКлиентПереопределяемый.ОтправитьДействиеВGA(ЭтаФорма.ИмяФормы + ".Закрытие",,,ЗавершениеРаботы);
	// Конец Сбор статистики
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ДекорацияСинхронизация.Видимость = Ложь;
	Элементы.ДекорацияНетСоединения.Видимость = Ложь;
	
	#Если МобильноеПриложениеКлиент Тогда
		
		Если НЕ ОбщегоНазначенияМПВызовСервера.ПолучитьЗначениеКонстанты("СоединениеСЦБУстановленоМП") Тогда
			Оповестить("ПрошелОбмен");
			Возврат;
		КонецЕсли;
		
		ОжиданиеВыполненияОбмена();
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПрошелОбмен"
		ИЛИ ИмяСобытия = "ДействиеСКорзиной"
		ИЛИ ИмяСобытия = "ЗаписанЗаказ" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Незавершенные(Команда)
	
	// Сбор статистики
	СборСтатистикиМПКлиентСерверПереопределяемый.ОтправитьДействиеВGA(ЭтаФорма.ИмяФормы + ".Команда." + Команда.Имя);
	// Конец Сбор статистики
	
	УстановитьФильтр(ПредопределенноеЗначение("Перечисление.ФильтрыПоЗаказуМП.ВРаботе"));
	
КонецПроцедуры

&НаКлиенте
Процедура Неоплаченные(Команда)
	
	// Сбор статистики
	СборСтатистикиМПКлиентСерверПереопределяемый.ОтправитьДействиеВGA(ЭтаФорма.ИмяФормы + ".Команда." + Команда.Имя);
	// Конец Сбор статистики
	
	УстановитьФильтр(ПредопределенноеЗначение("Перечисление.ФильтрыПоЗаказуМП.БезОплаты"));
	
КонецПроцедуры

&НаКлиенте
Процедура Неотгруженные(Команда)
	
	// Сбор статистики
	СборСтатистикиМПКлиентСерверПереопределяемый.ОтправитьДействиеВGA(ЭтаФорма.ИмяФормы + ".Команда." + Команда.Имя);
	// Конец Сбор статистики
	
	УстановитьФильтр(ПредопределенноеЗначение("Перечисление.ФильтрыПоЗаказуМП.Неотгруженные"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьФильтр(Команда)
	
	// Сбор статистики
	СборСтатистикиМПКлиентСерверПереопределяемый.ОтправитьДействиеВGA(ЭтаФорма.ИмяФормы + ".Команда." + Команда.Имя);
	// Конец Сбор статистики
	
	УстановитьФильтр("");
	
КонецПроцедуры

&НаКлиенте
Процедура Выполненные(Команда)
	
	// Сбор статистики
	СборСтатистикиМПКлиентСерверПереопределяемый.ОтправитьДействиеВGA(ЭтаФорма.ИмяФормы + ".Команда." + Команда.Имя);
	// Конец Сбор статистики
	
	УстановитьФильтр(ПредопределенноеЗначение("Перечисление.ФильтрыПоЗаказуМП.Выполненные"));
	
КонецПроцедуры

&НаКлиенте
Процедура Оплаченные(Команда)
	
	// Сбор статистики
	СборСтатистикиМПКлиентСерверПереопределяемый.ОтправитьДействиеВGA(ЭтаФорма.ИмяФормы + ".Команда." + Команда.Имя);
	// Конец Сбор статистики
	
	УстановитьФильтр(ПредопределенноеЗначение("Перечисление.ФильтрыПоЗаказуМП.Оплаченные"));
	
КонецПроцедуры

&НаКлиенте
Процедура Отгруженные(Команда)
	
	// Сбор статистики
	СборСтатистикиМПКлиентСерверПереопределяемый.ОтправитьДействиеВGA(ЭтаФорма.ИмяФормы + ".Команда." + Команда.Имя);
	// Конец Сбор статистики
	
	УстановитьФильтр(ПредопределенноеЗначение("Перечисление.ФильтрыПоЗаказуМП.Отгруженные"));
	
КонецПроцедуры

&НаКлиенте
Процедура Справка(Команда)
	
	// Сбор статистики
	СборСтатистикиМПКлиентСерверПереопределяемый.ОтправитьДействиеВGA(ЭтаФорма.ИмяФормы + ".Команда." + Команда.Имя);
	// Конец Сбор статистики
	
	// АПК:534-выкл методы безопасного запуска обеспечиваются этой функцией
	ПерейтиПоНавигационнойСсылке("https://sbm.1c.ru/about/razdel-zakazy/spisok-zakazov/");
	// АПК:534-вкл
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьФильтр(ВидОтбораДляУстановки)
	
	ВидОтбора = ВидОтбораДляУстановки;
	
	Список.Отбор.Элементы[ИндексОтбораНезавершенные].Использование = Ложь;
	Список.Отбор.Элементы[ИндексОтбораНеоплаченные].Использование = Ложь;
	Список.Отбор.Элементы[ИндексОтбораНеотгруженные].Использование = Ложь;
	Список.Отбор.Элементы[ИндексОтбораПометкаУдаления].Использование = Ложь;
	
	Если ВидОтбора = Перечисления.ФильтрыПоЗаказуМП.ВРаботе Тогда
		Список.Отбор.Элементы[ИндексОтбораНезавершенные].Использование = Истина;
		Список.Отбор.Элементы[ИндексОтбораНезавершенные].ПравоеЗначение = Перечисления.СостоянияЗаказовМП.ВРаботе;
		Список.Отбор.Элементы[ИндексОтбораПометкаУдаления].Использование = Истина;
	ИначеЕсли ВидОтбора = Перечисления.ФильтрыПоЗаказуМП.Неотгруженные Тогда
		Список.Отбор.Элементы[ИндексОтбораНеотгруженные].Использование = Истина;
		Список.Отбор.Элементы[ИндексОтбораНеотгруженные].ПравоеЗначение = Ложь;
		Список.Отбор.Элементы[ИндексОтбораПометкаУдаления].Использование = Истина;
	ИначеЕсли ВидОтбора = Перечисления.ФильтрыПоЗаказуМП.Отгруженные Тогда
		Список.Отбор.Элементы[ИндексОтбораНеотгруженные].Использование = Истина;
		Список.Отбор.Элементы[ИндексОтбораНеотгруженные].ПравоеЗначение = Истина;
		Список.Отбор.Элементы[ИндексОтбораПометкаУдаления].Использование = Истина;
	ИначеЕсли ВидОтбора = Перечисления.ФильтрыПоЗаказуМП.БезОплаты Тогда
		Список.Отбор.Элементы[ИндексОтбораНеоплаченные].Использование = Истина;
		Список.Отбор.Элементы[ИндексОтбораНеоплаченные].ПравоеЗначение = Ложь;
		Список.Отбор.Элементы[ИндексОтбораПометкаУдаления].Использование = Истина;
	ИначеЕсли ВидОтбора = Перечисления.ФильтрыПоЗаказуМП.Оплаченные Тогда
		Список.Отбор.Элементы[ИндексОтбораНеоплаченные].Использование = Истина;
		Список.Отбор.Элементы[ИндексОтбораНеоплаченные].ПравоеЗначение = Истина;
		Список.Отбор.Элементы[ИндексОтбораПометкаУдаления].Использование = Истина;
	ИначеЕсли ВидОтбора = Перечисления.ФильтрыПоЗаказуМП.Выполненные Тогда
		Список.Отбор.Элементы[ИндексОтбораНезавершенные].Использование = Истина;
		Список.Отбор.Элементы[ИндексОтбораНезавершенные].ПравоеЗначение = Перечисления.СостоянияЗаказовМП.Выполнен;
		Список.Отбор.Элементы[ИндексОтбораПометкаУдаления].Использование = Истина;
	КонецЕсли;
	
	УстановитьЗаголовокФормы();
	Элементы.ФормаОтменитьФильтр.Доступность = ЗначениеЗаполнено(ВидОтбора);
	СохранитьНастройкиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиНаСервере()
	
	Константы.ФильтрПоЗаказуМП.Установить(ВидОтбора);
	
КонецПроцедуры

#КонецОбласти

#Область Синхронизация

&НаКлиенте
Процедура СписокОбработкаЗапросаОбновления()
	
	Оповестить("ПрошелОбмен");
	
	#Если МобильноеПриложениеКлиент Тогда
		Если Элементы.ДекорацияСинхронизация.Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ОбщегоНазначенияМПВызовСервера.ПолучитьЗначениеКонстанты("СоединениеСЦБУстановленоМП") Тогда
			Возврат;
		КонецЕсли;
		
		
		Если ИнформацияОбИнтернетСоединении.ПолучитьТипСоединения() = ТипИнтернетСоединения.НетСоединения Тогда
			Элементы.ДекорацияНетСоединения.Видимость = Истина;
			ПодключитьОбработчикОжидания("ОтключитьОповещениеОбОтсутствииИнтернета", 3, Истина);
			Возврат;
		КонецЕсли;
		
		Элементы.ДекорацияСинхронизация.Видимость = Истина;
		
		ОбщегоНазначенияМПВызовСервера.УстановитьЗначениеКонстанты("НачатьСинхронизацию", Истина);
		ПодключитьОбработчикОжидания("ОжиданиеВыполненияОбмена", 5, Истина); // 0.1 // 3
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОжиданиеВыполненияОбмена()
	
	#Если МобильноеПриложениеКлиент Тогда
		
		ОбменВыполняется = ОбщегоНазначенияМПВызовСервера.ПолучитьЗначениеКонстанты("СинхронизацияВыполняется");
		Если ОбменВыполняется Тогда
			Элементы.ДекорацияСинхронизация.Видимость = Истина;
			ПодключитьОбработчикОжидания("ОжиданиеВыполненияОбмена", 3, Истина);
		ИначеЕсли Элементы.ДекорацияСинхронизация.Видимость Тогда
			Элементы.ДекорацияСинхронизация.Видимость = Ложь;
			Если ИнформацияОбИнтернетСоединении.ПолучитьТипСоединения() = ТипИнтернетСоединения.НетСоединения Тогда
				Элементы.ДекорацияНетСоединения.Видимость = Истина;
				ПодключитьОбработчикОжидания("ОтключитьОповещениеОбОтсутствииИнтернета", 3, Истина);
				Возврат;
			КонецЕсли;
			
			Оповестить("ПрошелОбмен");
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОповещениеОбОтсутствииИнтернета()
	
	#Если МобильноеПриложениеКлиент Тогда
		Элементы.ДекорацияНетСоединения.Видимость = Ложь;
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти
