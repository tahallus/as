#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Контрагент)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	Возврат;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасы(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.Документ КАК Документ,
	|	ТаблицаЗапасы.Документ КАК ДокументПродажи,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПродажи,
	|	ТаблицаЗапасы.НаправлениеДеятельностиПродажи КАК НаправлениеДеятельности,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость КАК СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ТаблицаЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	0 КАК Сумма,
	|	СУММА(ТаблицаЗапасы.СуммаНДС) КАК СуммаНДС,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК Подразделение,
	|	ТаблицаЗапасы.Ответственный КАК Ответственный,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость КАК СчетДт,
	|	ТаблицаЗапасы.СчетУчета КАК СчетКт,
	|	&СборкаЗапасов КАК СодержаниеПроводки,
	|	ТаблицаЗапасы.Проект КАК Проект
	|ИЗ
	|	ВременнаяТаблицаРаботыИУслуги КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Документ,
	|	ТаблицаЗапасы.НаправлениеДеятельностиПродажи,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.НоменклатураНабора,
	|	ТаблицаЗапасы.ХарактеристикаНабора,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.СтавкаНДС,
	|	ТаблицаЗапасы.Ответственный,
	|	ТаблицаЗапасы.Документ,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Проект";
	
	Запрос.УстановитьПараметр("СборкаЗапасов", НСтр("ru = 'Сборка запасов'"));
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", РезультатЗапроса.Выгрузить());
	
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	ВременнаяТаблицаРаботыИУслуги КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|		СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ТаблицаЗапасы.ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаРаботыИУслуги КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия,
	|	ЗапасыОстатки.ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаАктВыполненныхРабот);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапасыОстатки = РезультатЗапроса.Выгрузить();
	ТаблицаЗапасыОстатки.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
	
	РезервированиеЗапасов = Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить();
	ЗаказПустаяСсылка = Документы.ЗаказПокупателя.ПустаяСсылка();
	
	ВременнаяТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.СкопироватьКолонки();
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы[н];
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
		
		Если РезервированиеЗапасов Тогда
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", СтрокаТаблицаЗапасы.ЗаказПокупателя);
		Иначе
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", ЗаказПустаяСсылка);
		КонецЕсли;
		
		КоличествоТребуется = СтрокаТаблицаЗапасы.Количество;
		
		Если КоличествоТребуется > 0 Тогда
			
			// Добавим выпуск работы.
			СтрокаТаблицыПриход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
			
			Если НЕ РезервированиеЗапасов Тогда
				СтрокаТаблицыПриход.ЗаказПокупателя = ЗаказПустаяСсылка;
			КонецЕсли;
			
			СтрокаТаблицыПриход.ДокументПродажи = Неопределено;
			СтрокаТаблицыПриход.ЗаказПродажи = Неопределено;
			СтрокаТаблицыПриход.Подразделение = Неопределено;
			СтрокаТаблицыПриход.Ответственный = Неопределено;
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуется Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуется / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуется;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = КоличествоТребуется Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;
				
			ИначеЕсли КоличествоОстаток = 0 Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
				Если МассивСтрокОстатков.Количество() > 0 Тогда
					МассивСтрокОстатков[0].СуммаОстаток = 0;
				КонецЕсли;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			// Добавим реализацию работы.
			СтрокаТаблицыРасход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			Если НЕ РезервированиеЗапасов Тогда
				СтрокаТаблицыРасход.ЗаказПокупателя = ЗаказПустаяСсылка;
			КонецЕсли;
			
			СтрокаТаблицыРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
			СтрокаТаблицыРасход.СодержаниеПроводки = НСтр("ru = 'Списание запасов'");
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				// Сформируем проводки.
				СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
				СтрокаТаблицаУправленческий.СценарийПланирования = Справочники.СценарииПланирования.Фактический;
				СтрокаТаблицаУправленческий.Содержание = НСтр("ru = 'Списание запасов'");
				СтрокаТаблицаУправленческий.Сумма = СуммаКСписанию;
				
				// Продвигаем себестоимость продаж.
				СтрокаТаблицаПродажи = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаПродажи, СтрокаТаблицаЗапасы);
				
				СтрокаТаблицаПродажи.Количество = 0;
				СтрокаТаблицаПродажи.Сумма = 0;
				СтрокаТаблицаПродажи.СуммаНДС = 0;
				СтрокаТаблицаПродажи.Себестоимость = СуммаКСписанию;
				
				// Продвигаем доходы и расходы.
				СтрокаДоходыИРасходы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходы, СтрокаТаблицаЗапасы);
				
				СтрокаДоходыИРасходы.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаСебестоимость;
				СтрокаДоходыИРасходы.СуммаДоходов = 0;
				СтрокаДоходыИРасходы.СуммаРасходов = СуммаКСписанию;
				СтрокаДоходыИРасходы.Сумма = СуммаКСписанию;
				
				СтрокаДоходыИРасходы.СодержаниеПроводки = НСтр("ru='Отражение расходов'");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы = ВременнаяТаблицаЗапасы;
	
КонецПроцедуры // СформироватьТаблицаЗапасы()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаВыпускПродукции(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаВыпускПродукции.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаВыпускПродукции.Период КАК Период,
	|	ТаблицаВыпускПродукции.Организация КАК Организация,
	|	ТаблицаВыпускПродукции.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаВыпускПродукции.Номенклатура КАК Номенклатура,
	|	ТаблицаВыпускПродукции.Характеристика КАК Характеристика,
	|	ТаблицаВыпускПродукции.Партия КАК Партия,
	|	ТаблицаВыпускПродукции.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаВыпускПродукции.Спецификация КАК Спецификация,
	|	СУММА(ТаблицаВыпускПродукции.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаРаботыИУслуги КАК ТаблицаВыпускПродукции
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВыпускПродукции.Период,
	|	ТаблицаВыпускПродукции.Организация,
	|	ТаблицаВыпускПродукции.СтруктурнаяЕдиница,
	|	ТаблицаВыпускПродукции.Номенклатура,
	|	ТаблицаВыпускПродукции.Характеристика,
	|	ТаблицаВыпускПродукции.Партия,
	|	ТаблицаВыпускПродукции.ЗаказПокупателя,
	|	ТаблицаВыпускПродукции.Спецификация";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыпускПродукции", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаВыпускПродукции()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажи(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродажи.Период КАК Период,
	|	ТаблицаПродажи.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка) КАК Склад,
	|	ТаблицаПродажи.Номенклатура КАК Номенклатура,
	|	ТаблицаПродажи.Характеристика КАК Характеристика,
	|	ТаблицаПродажи.Партия КАК Партия,
	|	ТаблицаПродажи.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаПродажи.Документ КАК Документ,
	|	ТаблицаПродажи.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаПродажи.СтруктурнаяЕдиница КАК Подразделение,
	|	ТаблицаПродажи.Проект КАК Проект,
	|	ТаблицаПродажи.Ответственный КАК Ответственный,
	|	СУММА(ТаблицаПродажи.Количество) КАК Количество,
	|	СУММА(ТаблицаПродажи.СуммаНДСПродажи) КАК СуммаНДС,
	|	СУММА(ТаблицаПродажи.Сумма) КАК Сумма,
	|	СУММА(ТаблицаПродажи.Сумма + ТаблицаПродажи.СуммаСкидкиНаценки + ТаблицаПродажи.СуммаАвтоматическойСкидки) КАК СуммаБезСкидки,
	|	0 КАК Себестоимость,
	|	ТаблицаПродажи.НоменклатураНабора КАК НоменклатураНабора,
	|	ТаблицаПродажи.ХарактеристикаНабора КАК ХарактеристикаНабора
	|ИЗ
	|	ВременнаяТаблицаРаботыИУслуги КАК ТаблицаПродажи
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродажи.Период,
	|	ТаблицаПродажи.Организация,
	|	ТаблицаПродажи.Номенклатура,
	|	ТаблицаПродажи.Характеристика,
	|	ТаблицаПродажи.Партия,
	|	ТаблицаПродажи.ЗаказПокупателя,
	|	ТаблицаПродажи.Документ,
	|	ТаблицаПродажи.СтавкаНДС,
	|	ТаблицаПродажи.СтруктурнаяЕдиница,
	|	ТаблицаПродажи.Проект,
	|	ТаблицаПродажи.Ответственный,
	|	ТаблицаПродажи.НоменклатураНабора,
	|	ТаблицаПродажи.ХарактеристикаНабора";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажи", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажи()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗаказыПокупателей(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗаказыПокупателей.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗаказыПокупателей.Период КАК Период,
	|	ТаблицаЗаказыПокупателей.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка) КАК Склад,
	|	ТаблицаЗаказыПокупателей.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика КАК Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ТаблицаЗаказыПокупателей.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаРаботыИУслуги КАК ТаблицаЗаказыПокупателей
	|ГДЕ
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказыПокупателей.Период,
	|	ТаблицаЗаказыПокупателей.Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказыПокупателей", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗаказыПокупателей()

Процедура СформироватьТаблицаЗаказыНаПроизводство(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗаказыНаПроизводство.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗаказыНаПроизводство.Период КАК Период,
	|	ТаблицаЗаказыНаПроизводство.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка) КАК Склад,
	|	ТаблицаЗаказыНаПроизводство.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказыНаПроизводство.Характеристика КАК Характеристика,
	|	ТаблицаЗаказыНаПроизводство.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	СУММА(ТаблицаЗаказыНаПроизводство.Количество) КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаЗаказыНаПроизводство
	|ИЗ
	|	ВременнаяТаблицаРаботыИУслуги КАК ТаблицаЗаказыНаПроизводство
	|ГДЕ
	|	ТаблицаЗаказыНаПроизводство.ЗаказНаПроизводство <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказыНаПроизводство.Период,
	|	ТаблицаЗаказыНаПроизводство.Организация,
	|	ТаблицаЗаказыНаПроизводство.Номенклатура,
	|	ТаблицаЗаказыНаПроизводство.Характеристика,
	|	ТаблицаЗаказыНаПроизводство.ЗаказНаПроизводство";
	
	Запрос.Выполнить();
	
	ПроизводствоСервер.СформироватьДвиженияЗаказыНаПроизводствоСУчетомОстатков(ДокументСсылкаАктВыполненныхРабот,
		СтруктураДополнительныеСвойства);
	
КонецПроцедуры // СформироватьТаблицаЗаказыПокупателей()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходы(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства)
	
	// Установка исключительной блокировки остатков подарочных сертификатов и создание временной таблицы
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПодарочныеСертификаты Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Документ КАК ПодарочныйСертификат,
		|	ТаблицаДокумента.НомерСертификата КАК НомерСертификата
		|ИЗ
		|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
		|ГДЕ
		|	НЕ ТаблицаДокумента.ЧастичноеПогашение
		|	И ТаблицаДокумента.ОплатаСертификатом
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.НомерСертификата,
		|	ТаблицаДокумента.Документ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			// Создадим пустую временную таблицу, чтобы избежать
			// ошибок при обращениях к ней в других процедурах
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НЕОПРЕДЕЛЕНО КАК ПодарочныйСертификат,
			|	НЕОПРЕДЕЛЕНО КАК НомерСертификата,
			|	0 КАК СуммаОстаток
			|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиСертификатов";
			Запрос.Выполнить();
			
		Иначе
		
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПодарочныеСертификаты");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
			
			Для Каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
			КонецЦикла;
			Блокировка.Заблокировать();
			
			Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерииНоменклатуры Тогда
				
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
				Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаАктВыполненныхРабот);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВложенныйЗапрос.ПодарочныйСертификат КАК ПодарочныйСертификат,
				|	ВложенныйЗапрос.НомерСертификата КАК НомерСертификата,
				|	СУММА(ВложенныйЗапрос.СуммаОстаток) КАК СуммаОстаток
				|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиСертификатов
				|ИЗ
				|	(ВЫБРАТЬ
				|		ПодарочныеСертификатыОстатки.ПодарочныйСертификат КАК ПодарочныйСертификат,
				|		ПодарочныеСертификатыОстатки.НомерСертификата КАК НомерСертификата,
				|		ПодарочныеСертификатыОстатки.СуммаОстаток КАК СуммаОстаток
				|	ИЗ
				|		РегистрНакопления.ПодарочныеСертификаты.Остатки(, ) КАК ПодарочныеСертификатыОстатки
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаПредоплата КАК ВременнаяТаблицаПредоплата
				|			ПО ПодарочныеСертификатыОстатки.ПодарочныйСертификат = ВременнаяТаблицаПредоплата.Документ
				|				И ПодарочныеСертификатыОстатки.НомерСертификата = ВременнаяТаблицаПредоплата.НомерСертификата
				|				И (ВременнаяТаблицаПредоплата.ОплатаСертификатом)
				|				И (НЕ ВременнаяТаблицаПредоплата.ЧастичноеПогашение)
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		ПодарочныеСертификаты.ПодарочныйСертификат,
				|		ПодарочныеСертификаты.НомерСертификата,
				|		ВЫБОР
				|			КОГДА ПодарочныеСертификаты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
				|				ТОГДА ПодарочныеСертификаты.Сумма
				|			ИНАЧЕ -ПодарочныеСертификаты.Сумма
				|		КОНЕЦ
				|	ИЗ
				|		РегистрНакопления.ПодарочныеСертификаты КАК ПодарочныеСертификаты
				|	ГДЕ
				|		ПодарочныеСертификаты.Регистратор = &Ссылка) КАК ВложенныйЗапрос
				|
				|СГРУППИРОВАТЬ ПО
				|	ВложенныйЗапрос.ПодарочныйСертификат,
				|	ВложенныйЗапрос.НомерСертификата";
				
				Запрос.Выполнить();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаДоходыИРасходы.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДоходыИРасходы.Период КАК Период,
	|	ТаблицаДоходыИРасходы.Организация КАК Организация,
	|	ТаблицаДоходыИРасходы.ПодразделениеПродажи КАК СтруктурнаяЕдиница,
	|	ТаблицаДоходыИРасходы.Проект КАК Проект,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельностиПродажи КАК НаправлениеДеятельности,
	|	ТаблицаДоходыИРасходы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаДоходыИРасходы.СчетУчетаПродажи КАК СчетУчета,
	|	НЕОПРЕДЕЛЕНО КАК Аналитика,
	|	&ОтражениеДоходов КАК СодержаниеПроводки,
	|	СУММА(ТаблицаДоходыИРасходы.Сумма) КАК СуммаДоходов,
	|	0 КАК СуммаРасходов,
	|	СУММА(ТаблицаДоходыИРасходы.Сумма) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаРаботыИУслуги КАК ТаблицаДоходыИРасходы
	|ГДЕ
	|	ТаблицаДоходыИРасходы.Сумма <> 0
	|	И НЕ ТаблицаДоходыИРасходы.ЭтоАгентскаяУслуга
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДоходыИРасходы.Период,
	|	ТаблицаДоходыИРасходы.НомерСтроки,
	|	ТаблицаДоходыИРасходы.Организация,
	|	ТаблицаДоходыИРасходы.ПодразделениеПродажи,
	|	ТаблицаДоходыИРасходы.Проект,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельностиПродажи,
	|	ТаблицаДоходыИРасходы.ЗаказПокупателя,
	|	ТаблицаДоходыИРасходы.СчетУчетаПродажи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	1,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Организация,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее),
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА &ПоложительнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ &ОтрицательнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ТаблицаДокумента.Валюта,
	|	&КурсоваяРазница,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА 0
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Дата КАК Дата,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Организация КАК Организация,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Валюта КАК Валюта,
	|		СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) КАК СуммаКурсовойРазницы
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаДокумента.Дата КАК Дата,
	|			ТаблицаДокумента.Организация КАК Организация,
	|			ТаблицаДокумента.Валюта КАК Валюта,
	|			ТаблицаДокумента.СуммаКурсовойРазницы КАК СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаДокумента.Дата,
	|			ТаблицаДокумента.Организация,
	|			ТаблицаДокумента.Валюта,
	|			ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК ТаблицаКурсовыхРазницРасчетыСПокупателями
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Дата,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Организация,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Валюта
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) >= 0.005
	|			ИЛИ СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) <= -0.005)) КАК ТаблицаДокумента";
	
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПодарочныеСертификаты Тогда
		Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерииНоменклатуры Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	3,
			|	0,
			|	ТаблицаДоходыИРасходы.Период,
			|	ТаблицаДоходыИРасходы.Организация,
			|	ТаблицаДоходыИРасходы.Подразделение,
			|	ТаблицаДоходыИРасходы.Проект,
			|	НЕОПРЕДЕЛЕНО,
			|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка),
			|	ТаблицаДоходыИРасходы.СчетУчетаДоходов,
			|	НЕОПРЕДЕЛЕНО,
			|	ВЫРАЗИТЬ(&ОтражениеДоходов КАК СТРОКА(100)),
			|	СУММА(ВЫБОР
			|			КОГДА ТаблицаДоходыИРасходы.ИспользоватьСерииНоменклатуры
			|				ТОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) - ТаблицаДоходыИРасходы.Сумма
			|			ИНАЧЕ ТаблицаДоходыИРасходы.Номинал - ТаблицаДоходыИРасходы.Сумма
			|		КОНЕЦ),
			|	0,
			|	СУММА(ВЫБОР
			|			КОГДА ТаблицаДоходыИРасходы.ИспользоватьСерииНоменклатуры
			|				ТОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) - ТаблицаДоходыИРасходы.Сумма
			|			ИНАЧЕ ТаблицаДоходыИРасходы.Номинал - ТаблицаДоходыИРасходы.Сумма
			|		КОНЕЦ)
			|ИЗ
			|	ВременнаяТаблицаПредоплата КАК ТаблицаДоходыИРасходы
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиСертификатов КАК ПодарочныеСертификатыОстатки
			|		ПО ТаблицаДоходыИРасходы.Документ = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
			|			И ТаблицаДоходыИРасходы.НомерСертификата = ПодарочныеСертификатыОстатки.НомерСертификата
			|ГДЕ
			|	ТаблицаДоходыИРасходы.ОплатаСертификатом
			|	И НЕ ТаблицаДоходыИРасходы.ЧастичноеПогашение
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаДоходыИРасходы.Организация,
			|	ТаблицаДоходыИРасходы.Подразделение,
			|	ТаблицаДоходыИРасходы.Проект,
			|	ТаблицаДоходыИРасходы.СчетУчетаДоходов,
			|	ТаблицаДоходыИРасходы.Период
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок,
			|	НомерСтроки";
			
		Иначе
			
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	3,
			|	0,
			|	ТаблицаДоходыИРасходы.Период,
			|	ТаблицаДоходыИРасходы.Организация,
			|	ТаблицаДоходыИРасходы.Подразделение,
			|	ТаблицаДоходыИРасходы.Проект,
			|	НЕОПРЕДЕЛЕНО,
			|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка),
			|	ТаблицаДоходыИРасходы.СчетУчетаДоходов,
			|	НЕОПРЕДЕЛЕНО,
			|	ВЫРАЗИТЬ(&ОтражениеДоходов КАК СТРОКА(100)),
			|	СУММА(ТаблицаДоходыИРасходы.Номинал - ТаблицаДоходыИРасходы.Сумма),
			|	0,
			|	СУММА(ТаблицаДоходыИРасходы.Номинал - ТаблицаДоходыИРасходы.Сумма)
			|ИЗ
			|	ВременнаяТаблицаПредоплата КАК ТаблицаДоходыИРасходы
			|ГДЕ
			|	ТаблицаДоходыИРасходы.ОплатаСертификатом
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаДоходыИРасходы.Организация,
			|	ТаблицаДоходыИРасходы.Подразделение,
			|	ТаблицаДоходыИРасходы.Проект,
			|	ТаблицаДоходыИРасходы.СчетУчетаДоходов,
			|	ТаблицаДоходыИРасходы.Период
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок,
			|	НомерСтроки";
			
		КонецЕсли;
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ПоложительнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ОтрицательнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеРасходы);
	Запрос.УстановитьПараметр("ОтражениеДоходов", НСтр("ru='Отражение доходов'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Исключая));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходы", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходы()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРасчетыСПокупателями(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаАктВыполненныхРабот);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ВозникновениеОбязательствПокупателя", НСтр("ru='Возникновение обязательств покупателя'"));
	Запрос.УстановитьПараметр("ЗачетАванса", НСтр("ru='Зачет предоплаты'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	
	Для Каждого КлючИЗначение Из СтруктураДополнительныеСвойства.ДляСертификатов Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	РасчетыПроведениеДокументов.СформироватьДвиженияПоВзаиморасчетам(СтруктураДополнительныеСвойства, ДокументСсылкаАктВыполненныхРабот, Запрос.Параметры);
	РасчетыПроведениеДокументов.ПересчитатьТаблицыПоКурсамВалют(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства);
	РасчетыПроведениеДокументов.ПоместитьПересчитанныеТаблицыВМенеджерВременныхТаблиц(СтруктураДополнительныеСвойства);
	
	// Установка исключительной блокировки контролируемых остатков расчетов с контрагентами.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаРасчетыСПокупателями.Организация КАК Организация,
	|	ВременнаяТаблицаРасчетыСПокупателями.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаРасчетыСПокупателями.Договор КАК Договор,
	|	ВременнаяТаблицаРасчетыСПокупателями.Документ КАК Документ,
	|	ВременнаяТаблицаРасчетыСПокупателями.Заказ КАК Заказ,
	|	ВременнаяТаблицаРасчетыСПокупателями.ТипРасчетов КАК ТипРасчетов
	|ИЗ
	|	ВременнаяТаблицаРасчетыСПокупателями КАК ВременнаяТаблицаРасчетыСПокупателями";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСПокупателями");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	НомерЗапроса = 0;
	Запрос.Текст = КурсовыеРазницыУНФ.ПолучитьТекстЗапросаКурсовыеРазницыРасчетыСПокупателями(Запрос.МенеджерВременныхТаблиц, Истина, НомерЗапроса, Истина);
	МассивРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПокупателями", МассивРезультатов[НомерЗапроса].Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаРасчетыСПокупателями()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходыОтложенные(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства)
	
	// НУЖНО!!! Переработать алгоритм.
	// Сначала выполнить движения по регистру "ДоходыИРасходыКассовыйМетодЭквайринг" для тех сумм, где Направление пустое.
	// Потом на эти суммы уменьшить данные в таблице ВременнаяТаблицаПредоплата.
	// Только после этого вызывать текущую процедуру.
	// Т.е. процедура "СформироватьТаблицаДоходыИРасходыКассовыйМетодЭквайринг" должна вызываться до вызова этой.
	// И в процедуре "СформироватьТаблицаДоходыИРасходыКассовыйМетодЭквайринг" должны быть только движения
	// по регистру "ДоходыИРасходыКассовыйМетодЭквайринг" для тех сумма, где Направление пустое и уменьшение на эти суммы
	// данных в таблице ВременнаяТаблицаПредоплата.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаАктВыполненныхРабот);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ТаблицаДокумента.НаправлениеДеятельностиПродажи КАК НаправлениеДеятельности,
	|	ТаблицаДокумента.Сумма КАК СуммаДоходов,
	|	ТаблицаДокумента.Сумма КАК НеРаспределено
	|ИЗ
	|	ВременнаяТаблицаРаботыИУслуги КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|	И ТаблицаДокумента.Сумма <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Организация КАК Организация,
	|	СУММА(ТаблицаДокумента.Сумма) КАК СуммаКСписанию
	|ИЗ
	|	ВременнаяТаблицаПредоплатаДляКассовогоМетода КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Статья КАК Статья
	|ИЗ
	|	ВременнаяТаблицаПредоплатаДляКассовогоМетода КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаЗапасыДоходыИРасходыОтложенные = МассивРезультатов[0].Выгрузить();
	ВыборкаРезультатаЗапроса = МассивРезультатов[1].Выбрать();
	
	ТаблицаПредоплатаДоходыИРасходыОтложенные = ТаблицаЗапасыДоходыИРасходыОтложенные.Скопировать();
	ТаблицаПредоплатаДоходыИРасходыОтложенные.Очистить();
	
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		СуммаКСписанию = ВыборкаРезультатаЗапроса.СуммаКСписанию;
		Для каждого СтрокаЗапасыДоходыИРасходыОтложенные Из ТаблицаЗапасыДоходыИРасходыОтложенные Цикл
			Если СуммаКСписанию = 0 Тогда
				Продолжить
			ИначеЕсли СтрокаЗапасыДоходыИРасходыОтложенные.СуммаДоходов <= СуммаКСписанию Тогда
				СтрокаПредоплатаДоходыИРасходыОтложенные = ТаблицаПредоплатаДоходыИРасходыОтложенные.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПредоплатаДоходыИРасходыОтложенные, СтрокаЗапасыДоходыИРасходыОтложенные);
				СуммаКСписанию = СуммаКСписанию - СтрокаЗапасыДоходыИРасходыОтложенные.СуммаДоходов;
			ИначеЕсли СтрокаЗапасыДоходыИРасходыОтложенные.СуммаДоходов > СуммаКСписанию Тогда
				СтрокаПредоплатаДоходыИРасходыОтложенные = ТаблицаПредоплатаДоходыИРасходыОтложенные.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПредоплатаДоходыИРасходыОтложенные, СтрокаЗапасыДоходыИРасходыОтложенные);
				СтрокаПредоплатаДоходыИРасходыОтложенные.СуммаДоходов = СуммаКСписанию;
				СуммаКСписанию = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого СтрокаПредоплатаДоходыИРасходыОтложенные Из ТаблицаПредоплатаДоходыИРасходыОтложенные Цикл
		СтрокаЗапасыДоходыИРасходыОтложенные = ТаблицаЗапасыДоходыИРасходыОтложенные.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗапасыДоходыИРасходыОтложенные, СтрокаПредоплатаДоходыИРасходыОтложенные);
		СтрокаЗапасыДоходыИРасходыОтложенные.ВидДвижения = ВидДвиженияНакопления.Расход;
		СтрокаЗапасыДоходыИРасходыОтложенные.НеРаспределено = -СтрокаПредоплатаДоходыИРасходыОтложенные.СуммаДоходов;
	КонецЦикла;
	
	ВыборкаРезультатаЗапроса = МассивРезультатов[2].Выбрать();
	
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		Статья = ВыборкаРезультатаЗапроса.Статья;
	Иначе
		Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Период КАК Период,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Документ КАК Документ,
	|	Таблица.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&Статья КАК Статья,
	|	Таблица.СуммаДоходов КАК СуммаДоходов
	|ПОМЕСТИТЬ ВременнаяТаблицаПредоплатаДоходыИРасходыОтложенные
	|ИЗ
	|	&Таблица КАК Таблица";
	Запрос.УстановитьПараметр("Таблица", ТаблицаПредоплатаДоходыИРасходыОтложенные);
	Запрос.УстановитьПараметр("Статья", Статья);
	
	Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыОтложенные", ТаблицаЗапасыДоходыИРасходыОтложенные);
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыОтложенные()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходыНераспределенные(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	Если СтруктураДополнительныеСвойства.СпособЗачетаПредоплаты <> Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто
		И СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПодарочныеСертификаты Тогда
		Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерииНоменклатуры Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
			|	ТаблицаДокумента.Период КАК Период,
			|	ТаблицаДокумента.Организация КАК Организация,
			|	ВЫБОР
			|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
			|			ТОГДА ТаблицаДокумента.Документ
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ КАК Документ,
			|	ТаблицаДокумента.Статья КАК Статья,
			|	ВЫБОР
			|		КОГДА НЕ ТаблицаДокумента.ОплатаСертификатом
			|			ТОГДА ТаблицаДокумента.Сумма
			|		КОГДА ТаблицаДокумента.ЧастичноеПогашение
			|			ТОГДА ТаблицаДокумента.Сумма
			|		КОГДА ТаблицаДокумента.ИспользоватьСерииНоменклатуры
			|			ТОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0)
			|		ИНАЧЕ ТаблицаДокумента.Номинал
			|	КОНЕЦ КАК СуммаДоходов
			|ИЗ
			|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиСертификатов КАК ПодарочныеСертификатыОстатки
			|		ПО ТаблицаДокумента.Документ = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
			|			И ТаблицаДокумента.НомерСертификата = ПодарочныеСертификатыОстатки.НомерСертификата,
			|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
			|ГДЕ
			|	&КассовыйМетодУчетаДоходовИРасходов
			|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
			|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация";
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
			|	ТаблицаДокумента.Период КАК Период,
			|	ТаблицаДокумента.Организация КАК Организация,
			|	ВЫБОР
			|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
			|			ТОГДА ТаблицаДокумента.Документ
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ КАК Документ,
			|	ТаблицаДокумента.Статья КАК Статья,
			|	ВЫБОР
			|		КОГДА НЕ ТаблицаДокумента.ОплатаСертификатом
			|			ТОГДА ТаблицаДокумента.Сумма
			|		ИНАЧЕ ТаблицаДокумента.Номинал
			|	КОНЕЦ КАК СуммаДоходов
			|ИЗ
			|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента,
			|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
			|ГДЕ
			|	&КассовыйМетодУчетаДоходовИРасходов
			|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
			|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация";
			
		КонецЕсли;
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	ТаблицаДокумента.Период КАК Период,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
		|			ТОГДА ТаблицаДокумента.Документ
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Документ,
		|	ТаблицаДокумента.Статья КАК Статья,
		|	ТаблицаДокумента.Сумма КАК СуммаДоходов
		|ИЗ
		|	ВременнаяТаблицаПредоплатаДляКассовогоМетода КАК ТаблицаДокумента,
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|ГДЕ
		|	&КассовыйМетодУчетаДоходовИРасходов
		|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
		|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация";
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыНераспределенные", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыНераспределенные()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходыКассовыйМетод(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаАктВыполненныхРабот);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ДокументДата КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
	|	ТаблицаДокумента.Статья КАК Статья,
	|	-ТаблицаДокумента.Сумма КАК СуммаДоходов
	|ИЗ
	|	ВременнаяТаблицаПредоплатаДляКассовогоМетода КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Период,
	|	Таблица.Организация,
	|	Таблица.НаправлениеДеятельности,
	|	Таблица.Статья,
	|	Таблица.СуммаДоходов
	|ИЗ
	|	ВременнаяТаблицаПредоплатаДоходыИРасходыОтложенные КАК Таблица";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыКассовыйМетод", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыКассовыйМетод()

// Формирует таблицу значений, содержащую данные для проведения по регистру "ОплатаДокументов".
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаДокументов(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	МассивДоступныхОпераций = Неопределено;
	РасчетыПроведениеДокументов.СформироватьТаблицаОплатаДокументовНакладные(ДокументСсылка, СтруктураДополнительныеСвойства, МассивДоступныхОпераций);
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру "ОплатаДокументов".
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	МассивДоступныхОпераций = Неопределено;
	РасчетыПроведениеДокументов.СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылка, СтруктураДополнительныеСвойства, МассивДоступныхОпераций);
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаУправленческий(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаУправленческий.НомерСтроки КАК НомерСтроки,
	|	ТаблицаУправленческий.Период КАК Период,
	|	ТаблицаУправленческий.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ЭтоАгентскаяУслуга
	|			ТОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПоставщиком
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчетаПродажи
	|	КОНЕЦ КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаПродажи.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаПродажи.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалКт,
	|	ТаблицаУправленческий.Сумма КАК Сумма,
	|	&ОтражениеВыручки КАК Содержание
	|ИЗ
	|	ВременнаяТаблицаРаботыИУслуги КАК ТаблицаУправленческий
	|ГДЕ
	|	ТаблицаУправленческий.Сумма <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	1,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ОплатаСертификатом = ИСТИНА
	|			ТОГДА &СчетУчетаАвансовПокупателя
	|		ИНАЧЕ ТаблицаДокумента.СчетУчетаАвансовПокупателя
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ОплатаСертификатом = ИСТИНА
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ТаблицаДокумента.СчетУчетаАвансовПокупателяВалютный
	|			ТОГДА ТаблицаДокумента.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ОплатаСертификатом = ИСТИНА
	|			ТОГДА 0
	|		КОГДА ТаблицаДокумента.СчетУчетаАвансовПокупателяВалютный
	|			ТОГДА ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаРасчетовСПокупателемВалютный
	|			ТОГДА ТаблицаДокумента.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаРасчетовСПокупателемВалютный
	|			ТОГДА ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаДокумента.Сумма,
	|	&ЗачетПредоплаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДокумента.Период КАК Период,
	|		ТаблицаДокумента.Организация КАК Организация,
	|		ТаблицаДокумента.СчетУчетаАвансовПокупателя КАК СчетУчетаАвансовПокупателя,
	|		ТаблицаДокумента.СчетУчетаАвансовПокупателяВалютный КАК СчетУчетаАвансовПокупателяВалютный,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПокупателемВалютный КАК СчетУчетаРасчетовСПокупателемВалютный,
	|		ТаблицаДокумента.ВалютаРасчетов КАК ВалютаРасчетов,
	|		СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВал,
	|		СУММА(ТаблицаДокумента.Сумма) КАК Сумма,
	|		ТаблицаДокумента.ОплатаСертификатом КАК ОплатаСертификатом
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаДокумента.Период КАК Период,
	|			ТаблицаДокумента.Организация КАК Организация,
	|			ТаблицаДокумента.Контрагент.СчетУчетаАвансовПокупателя КАК СчетУчетаАвансовПокупателя,
	|			ТаблицаДокумента.Контрагент.СчетУчетаАвансовПокупателя.Валютный КАК СчетУчетаАвансовПокупателяВалютный,
	|			ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|			ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПокупателем.Валютный КАК СчетУчетаРасчетовСПокупателемВалютный,
	|			ТаблицаДокумента.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|			ТаблицаДокумента.СуммаВал КАК СуммаВал,
	|			ТаблицаДокумента.Сумма КАК Сумма,
	|			ТаблицаДокумента.ОплатаСертификатом КАК ОплатаСертификатом
	|		ИЗ
	|			ВременнаяТаблицаРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|			И ТаблицаДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И (ТаблицаДокумента.СуммаВал <> 0
	|					ИЛИ ТаблицаДокумента.Сумма <> 0)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаДокумента.Дата,
	|			ТаблицаДокумента.Организация,
	|			ТаблицаДокумента.Контрагент.СчетУчетаАвансовПокупателя,
	|			ТаблицаДокумента.Контрагент.СчетУчетаАвансовПокупателя.Валютный,
	|			ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПокупателем,
	|			ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПокупателем.Валютный,
	|			ТаблицаДокумента.Валюта,
	|			0,
	|			ТаблицаДокумента.СуммаКурсовойРазницы,
	|			NULL
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК ТаблицаДокумента
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаДокумента.Период,
	|		ТаблицаДокумента.Организация,
	|		ТаблицаДокумента.СчетУчетаАвансовПокупателя,
	|		ТаблицаДокумента.СчетУчетаАвансовПокупателяВалютный,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПокупателемВалютный,
	|		ТаблицаДокумента.ВалютаРасчетов,
	|		ТаблицаДокумента.ОплатаСертификатом
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ТаблицаДокумента.Сумма) >= 0.005
	|			ИЛИ СУММА(ТаблицаДокумента.Сумма) <= -0.005
	|			ИЛИ СУММА(ТаблицаДокумента.СуммаВал) >= 0.005
	|			ИЛИ СУММА(ТаблицаДокумента.СуммаВал) <= -0.005)) КАК ТаблицаДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	1,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СчетУчета
	|		ИНАЧЕ &ОтрицательнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|				И ТаблицаУправленческий.СчетУчетаВалютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА &ПоложительнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы < 0
	|				И ТаблицаУправленческий.СчетУчетаВалютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаУправленческий.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	&КурсоваяРазница
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Дата КАК Дата,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Организация КАК Организация,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.СчетУчета КАК СчетУчета,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.СчетУчетаВалютный КАК СчетУчетаВалютный,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Валюта КАК Валюта,
	|		СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) КАК СуммаКурсовойРазницы
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаДокумента.Дата КАК Дата,
	|			ТаблицаДокумента.Организация КАК Организация,
	|			ТаблицаДокумента.СчетУчета КАК СчетУчета,
	|			ТаблицаДокумента.СчетУчета.Валютный КАК СчетУчетаВалютный,
	|			ТаблицаДокумента.Валюта КАК Валюта,
	|			ТаблицаДокумента.СуммаКурсовойРазницы КАК СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаДокумента.Дата,
	|			ТаблицаДокумента.Организация,
	|			ТаблицаДокумента.СчетУчета,
	|			ТаблицаДокумента.СчетУчета.Валютный,
	|			ТаблицаДокумента.Валюта,
	|			ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК ТаблицаКурсовыхРазницРасчетыСПокупателями
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Дата,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Организация,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.СчетУчета,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.СчетУчетаВалютный,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Валюта
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) >= 0.005
	|			ИЛИ СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) <= -0.005)) КАК ТаблицаУправленческий
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ЗачетПредоплаты", НСтр("ru = 'Зачет предоплаты'"));
	Запрос.УстановитьПараметр("ОтражениеВыручки", НСтр("ru = 'Выручка от продажи'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru = 'Курсовая разница'"));
	Запрос.УстановитьПараметр("ПоложительнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ОтрицательнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеРасходы);
	
	Для Каждого КлючИЗначение Из СтруктураДополнительныеСвойства.ДляСертификатов Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл  
		НоваяПроводка = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПроводка, Выборка);
	КонецЦикла;
	
КонецПроцедуры // СформироватьТаблицаУправленческий()

// Формирует таблицу значений, содержащую данные для проведения по регистру "СуммыДокументовРегламентированныйУчет".
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСуммыДокументовРегламентированныйУчет(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства)
	
	Если ДокументСсылкаАктВыполненныхРабот.Договор.ВалютаРасчетов <> СтруктураДополнительныеСвойства.НациональнаяВалюта Тогда
		РасчетыПроведениеДокументов.СформироватьТаблицаСуммыДокументовРегламентированныйУчет(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства);
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСуммыДокументовРегламентированныйУчет", Новый ТаблицаЗначений);
	КонецЕсли;
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыИАгентскиеУслугиПринятые(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	МИНИМУМ(ТаблицаЗапасыИАгентскиеУслугиПринятые.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Период КАК Период,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Организация КАК Организация,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Характеристика КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО КАК Партия,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура.Поставщик КАК Контрагент,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура.Договор КАК Договор,
	|	НЕОПРЕДЕЛЕНО Заказ,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.СчетУчетаРасчетовСПоставщиком КАК СчетУчета,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеОтКомитента) КАК ТипПриемаПередачи,
	|	СУММА(ТаблицаЗапасыИАгентскиеУслугиПринятые.Количество) КАК Количество,
	|	0 КАК СуммаРасчетов,
	|	СУММА(ТаблицаЗапасыИАгентскиеУслугиПринятые.Сумма) КАК Сумма,
	|	СУММА(ТаблицаЗапасыИАгентскиеУслугиПринятые.Сумма) КАК СуммаПродажи,
	|	&ВалютаУпрУчета КАК Валюта,
	|	СУММА(ТаблицаЗапасыИАгентскиеУслугиПринятые.СуммаВал) КАК СуммаВал,
	|	ВЫРАЗИТЬ(&ТекстАгентскаяУслуга КАК СТРОКА(100)) КАК СодержаниеПроводки
	|ИЗ
	|	ВременнаяТаблицаРаботыИУслуги КАК ТаблицаЗапасыИАгентскиеУслугиПринятые
	|ГДЕ
	|	&ИспользуютсяАгентскиеУслуги
	|	И ТаблицаЗапасыИАгентскиеУслугиПринятые.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	И ТаблицаЗапасыИАгентскиеУслугиПринятые.ЭтоАгентскаяУслуга
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Период,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Организация,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Характеристика,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура.Поставщик,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура.Договор,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.ЗаказПокупателя,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.СчетУчетаРасчетовСПоставщиком,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.СчетУчета";
	
	Запрос.УстановитьПараметр("ИспользуютсяАгентскиеУслуги", ПолучитьФункциональнуюОпцию("АгентскиеУслуги"));
	Запрос.УстановитьПараметр("ТекстАгентскаяУслуга", НСтр("ru = 'Реализация агентской услуги'"));
	Запрос.УстановитьПараметр("ВалютаУпрУчета", УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыИАгентскиеУслугиПринятые", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаИнициализироватьДанныеДокумента()
	
	ТекстЗапроса =
	
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА АктВыполненныхРабот.Договор.ЭтоДоговорОбслуживания
	|				И АктВыполненныхРабот.Договор.ДоговорОбслуживанияНаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВестиУчетРасходовПоДоговорамОбслуживания,
	|	АктВыполненныхРабот.Договор.ДоговорОбслуживанияНаправлениеДеятельности КАК НаправлениеДеятельности,
	|	АктВыполненныхРабот.Договор.ВалютаРасчетов КАК ДоговорВалютаРасчетов,
	|	АктВыполненныхРабот.Договор.РасчетыВУсловныхЕдиницах КАК ДоговорРасчетыВУсловныхЕдиницах,
	|	АктВыполненныхРабот.Контрагент КАК Контрагент,
	|	АктВыполненныхРабот.ВалютаДокумента КАК ВалютаДокумента,
	|	АктВыполненныхРабот.Кратность КАК Кратность,
	|	АктВыполненныхРабот.Курс КАК Курс,
	|	АктВыполненныхРабот.Договор КАК Договор,
	|	АктВыполненныхРабот.Дата КАК Дата,
	|	АктВыполненныхРабот.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|	АктВыполненныхРабот.Дата КАК Период,
	|	АктВыполненныхРабот.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	АктВыполненныхРабот.СпособЗачетаПредоплаты КАК СпособЗачетаПредоплаты,
	|	АктВыполненныхРабот.ЗаказПокупателя КАК ЗаказПокупателя,
	|	АктВыполненныхРабот.Ссылка КАК Ссылка,
	|	АктВыполненныхРабот.ПоложениеЗаказаПокупателя КАК ПоложениеЗаказаПокупателя,
	|	АктВыполненныхРабот.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	АктВыполненныхРабот.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам
	|ПОМЕСТИТЬ ВременнаяТаблицаШапка
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
	|ГДЕ
	|	АктВыполненныхРабот.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВременнаяТаблицаКурсыВалютСрезПоследних
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(
	|			&МоментВремени,
	|			Валюта В (&ВалютаУчета, &ВалютаНациональная, &ВалютаНакладной)
	|				ИЛИ Валюта В
	|					(ВЫБРАТЬ
	|						ВременнаяТаблицаШапка.ДоговорВалютаРасчетов
	|					ИЗ
	|						ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктВыполненныхРаботРаботыИУслуги.НомерСтроки КАК НомерСтроки,
	|	АктВыполненныхРаботРаботыИУслуги.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	АктВыполненныхРаботРаботыИУслуги.Ссылка.Подразделение КАК СтруктурнаяЕдиница,
	|	АктВыполненныхРаботРаботыИУслуги.Ссылка.Ответственный КАК Ответственный,
	|	АктВыполненныхРаботРаботыИУслуги.Номенклатура.СчетУчетаЗатрат КАК СчетУчета,
	|	АктВыполненныхРаботРаботыИУслуги.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА АктВыполненныхРаботРаботыИУслуги.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	АктВыполненныхРаботРаботыИУслуги.НоменклатураНабора КАК НоменклатураНабора,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА АктВыполненныхРаботРаботыИУслуги.ХарактеристикаНабора
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК ХарактеристикаНабора,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК Партия,
	|	АктВыполненныхРаботРаботыИУслуги.ЗаказПокупателя КАК ЗаказПокупателя,
	|	АктВыполненныхРаботРаботыИУслуги.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ВЫБОР
	|		КОГДА АктВыполненныхРаботРаботыИУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ТОГДА АктВыполненныхРаботРаботыИУслуги.Спецификация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
	|	КОНЕЦ КАК Спецификация,
	|	АктВыполненныхРаботРаботыИУслуги.Ссылка КАК Документ,
	|	АктВыполненныхРаботРаботыИУслуги.Ссылка.Контрагент КАК Контрагент,
	|	АктВыполненныхРаботРаботыИУслуги.Ссылка.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	АктВыполненныхРаботРаботыИУслуги.Ссылка.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	АктВыполненныхРаботРаботыИУслуги.Ссылка.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	АктВыполненныхРаботРаботыИУслуги.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	АктВыполненныхРаботРаботыИУслуги.Ссылка.Контрагент.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|	АктВыполненныхРаботРаботыИУслуги.Ссылка.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	АктВыполненныхРаботРаботыИУслуги.Ссылка.Договор КАК Договор,
	|	АктВыполненныхРаботРаботыИУслуги.Ссылка.Подразделение КАК ПодразделениеПродажи,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|			ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности
	|		ИНАЧЕ АктВыполненныхРаботРаботыИУслуги.Номенклатура.НаправлениеДеятельности
	|	КОНЕЦ КАК НаправлениеДеятельностиПродажи,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|			ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж
	|		ИНАЧЕ АктВыполненныхРаботРаботыИУслуги.Номенклатура.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж
	|	КОНЕЦ КАК СчетУчетаПродажи,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|			ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж
	|		ИНАЧЕ АктВыполненныхРаботРаботыИУслуги.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж
	|	КОНЕЦ КАК СчетУчетаСебестоимость,
	|	АктВыполненныхРаботРаботыИУслуги.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА АктВыполненныхРаботРаботыИУслуги.Количество
	|		ИНАЧЕ АктВыполненныхРаботРаботыИУслуги.Количество * АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	АктВыполненныхРаботРаботыИУслуги.Цена КАК Цена,
	|	АктВыполненныхРаботРаботыИУслуги.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА АктВыполненныхРаботРаботыИУслуги.Ссылка.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|				ТОГДА АктВыполненныхРаботРаботыИУслуги.Всего * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ АктВыполненныхРаботРаботыИУслуги.Всего * АктВыполненныхРаботРаботыИУслуги.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * АктВыполненныхРаботРаботыИУслуги.Ссылка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА АктВыполненныхРаботРаботыИУслуги.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА АктВыполненныхРаботРаботыИУслуги.Ссылка.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|						ТОГДА АктВыполненныхРаботРаботыИУслуги.СуммаНДС * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|					ИНАЧЕ АктВыполненныхРаботРаботыИУслуги.СуммаНДС * АктВыполненныхРаботРаботыИУслуги.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * АктВыполненныхРаботРаботыИУслуги.Ссылка.Кратность)
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА АктВыполненныхРаботРаботыИУслуги.Ссылка.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|				ТОГДА АктВыполненныхРаботРаботыИУслуги.СуммаНДС * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ АктВыполненныхРаботРаботыИУслуги.СуммаНДС * АктВыполненныхРаботРаботыИУслуги.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * АктВыполненныхРаботРаботыИУслуги.Ссылка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСПродажи,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА АктВыполненныхРаботРаботыИУслуги.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА АктВыполненныхРаботРаботыИУслуги.Ссылка.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|						ТОГДА АктВыполненныхРаботРаботыИУслуги.СуммаНДС * КурсыРегВалюты.Курс * АктВыполненныхРаботРаботыИУслуги.Ссылка.Кратность / (АктВыполненныхРаботРаботыИУслуги.Ссылка.Курс * КурсыРегВалюты.Кратность)
	|					ИНАЧЕ АктВыполненныхРаботРаботыИУслуги.СуммаНДС
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСВал,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА АктВыполненныхРаботРаботыИУслуги.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА АктВыполненныхРаботРаботыИУслуги.Ссылка.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|						ТОГДА АктВыполненныхРаботРаботыИУслуги.СуммаНДС
	|					ИНАЧЕ АктВыполненныхРаботРаботыИУслуги.СуммаНДС * АктВыполненныхРаботРаботыИУслуги.Ссылка.Курс / КурсыРегВалюты.Кратность
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСРег,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА АктВыполненныхРаботРаботыИУслуги.Ссылка.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|				ТОГДА АктВыполненныхРаботРаботыИУслуги.Всего * КурсыРегВалюты.Курс * АктВыполненныхРаботРаботыИУслуги.Ссылка.Кратность / (АктВыполненныхРаботРаботыИУслуги.Ссылка.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ АктВыполненныхРаботРаботыИУслуги.Всего
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаВал,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА АктВыполненныхРаботРаботыИУслуги.Ссылка.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|				ТОГДА АктВыполненныхРаботРаботыИУслуги.Всего
	|			ИНАЧЕ АктВыполненныхРаботРаботыИУслуги.Всего * АктВыполненныхРаботРаботыИУслуги.Ссылка.Курс / КурсыРегВалюты.Кратность
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРег,
	|	АктВыполненныхРаботРаботыИУслуги.КлючСвязи КАК КлючСвязи,
	|	АктВыполненныхРаботРаботыИУслуги.Всего КАК ВсегоВалютаДокумента,
	|	АктВыполненныхРаботРаботыИУслуги.СуммаНДС КАК СуммаНДСВалютаДокумента,
	|	АктВыполненныхРаботРаботыИУслуги.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	АктВыполненныхРаботРаботыИУслуги.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ВЫБОР
	|		КОГДА АктВыполненныхРаботРаботыИУслуги.Ссылка.ПоложениеПроекта <> ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|			ТОГДА АктВыполненныхРаботРаботыИУслуги.Ссылка.Проект
	|		ИНАЧЕ АктВыполненныхРаботРаботыИУслуги.Проект
	|	КОНЕЦ КАК Проект,
	|	ВременнаяТаблицаШапка.Контрагент.СчетУчетаРасчетовСПоставщиком КАК СчетУчетаРасчетовСПоставщиком,
	|	АктВыполненныхРаботРаботыИУслуги.Номенклатура.ЭтоАгентскаяУслуга КАК ЭтоАгентскаяУслуга
	|ПОМЕСТИТЬ ВременнаяТаблицаРаботыИУслуги
	|ИЗ
	|	Документ.АктВыполненныхРабот.РаботыИУслуги КАК АктВыполненныхРаботРаботыИУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						КонстантаВалютаУчета.Значение
	|					ИЗ
	|						Константа.ВалютаУчета КАК КонстантаВалютаУчета)) КАК КурсыУпрВалюты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						КонстантаНациональнаяВалюта.Значение
	|					ИЗ
	|						Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта)) КАК КурсыРегВалюты
	|		ПО (ИСТИНА),
	|	Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	АктВыполненныхРаботРаботыИУслуги.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаАвансовПокупателя КАК СчетУчетаАвансовПокупателя,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаРасчетовСПоставщиком КАК СчетУчетаРасчетовСПоставщиком,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаАвансовПоставщику КАК СчетУчетаАвансовПоставщику,
	|	ТаблицаДокумента.Ссылка.Договор КАК Договор,
	|	ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ТаблицаДокумента.Заказ КАК Заказ,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее) КАК НаправлениеДеятельностиПродажи,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс) КАК ТипРасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг) КАК ТипРасчетовКуда,
	|	&Ссылка КАК ДокументКуда,
	|	ТаблицаДокумента.Ссылка.ДокументОснование КАК ДокументОснование,
	|	ТаблицаДокумента.Документ КАК Документ,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам
	|				ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.Взаимозачет)
	|				ИЛИ ТаблицаДокумента.ОплатаСертификатом
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей)
	|		ИНАЧЕ ТаблицаДокумента.Документ.Статья
	|	КОНЕЦ КАК Статья,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам
	|				И НЕ ТаблицаДокумента.ОплатаСертификатом
	|			ТОГДА ТаблицаДокумента.Документ.Дата
	|		ИНАЧЕ ТаблицаДокумента.Ссылка.Дата
	|	КОНЕЦ КАК ДокументДата,
	|	ВЫБОР
	|		КОГДА КонстантаВалютаУчета.Значение = &ВалютаРасчетов
	|			ТОГДА ТаблицаДокумента.СуммаРасчетов
	|		КОГДА КонстантаВалютаУчета.Значение = КонстантаНациональнаяВалюта.Значение
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.СуммаРасчетов * ТаблицаДокумента.Курс / ТаблицаДокумента.Кратность КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДокумента.СуммаРасчетов * ТаблицаДокумента.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * ТаблицаДокумента.Кратность) КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК Сумма,
	|	ТаблицаДокумента.СуммаРасчетов КАК СуммаВал,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.ОперацияПоПлатежнымКартам)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЭквайринговаяОперация,
	|	ТаблицаДокумента.Документ.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Документ.Дата, ДЕНЬ) КАК ДатаПлатежа,
	|	ТаблицаДокумента.Курс КАК Курс,
	|	ТаблицаДокумента.Кратность КАК Кратность,
	|	ТаблицаДокумента.Ссылка.Договор.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.СуммаРасчетов * ТаблицаДокумента.Курс / ТаблицаДокумента.Кратность КАК ЧИСЛО(15, 2)) КАК СуммаРубПоКурсуАванса,
	|	ТаблицаДокумента.ОплатаСертификатом КАК ОплатаСертификатом,
	|	ТаблицаДокумента.НомерСертификата КАК НомерСертификата,
	|	ТаблицаДокумента.Документ.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры,
	|	ТаблицаДокумента.Документ.СчетУчетаДоходов КАК СчетУчетаДоходов,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ОплатаСертификатом
	|			ТОГДА ТаблицаДокумента.Документ.Номинал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Номинал,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ОплатаСертификатом
	|			ТОГДА ТаблицаДокумента.СуммаПлатежа
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСертификата,
	|	ТаблицаДокумента.Ссылка.Подразделение КАК Подразделение,
	|	ТаблицаДокумента.Документ.ЧастичноеПогашение КАК ЧастичноеПогашение,
	|	ТаблицаДокумента.СуммаПлатежа КАК СуммаПлатежа,
	|	ТаблицаДокумента.СуммаРасчетов КАК СуммаРасчетов,
	|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка) КАК СтруктурнаяЕдиница,
	|	ТаблицаДокумента.Ссылка.Проект КАК Проект
	|ПОМЕСТИТЬ ВременнаяТаблицаПредоплата
	|ИЗ
	|	Документ.АктВыполненныхРабот.Предоплата КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						КонстантаВалютаУчета.Значение
	|					ИЗ
	|						Константа.ВалютаУчета КАК КонстантаВалютаУчета)) КАК КурсыВалютУчетаСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта = &ВалютаНакладной) КАК КурсыВалютДокументаСрезПоследних
	|		ПО (ИСТИНА),
	|	Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта,
	|	Константа.ВалютаУчета КАК КонстантаВалютаУчета
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктВыполненныхРаботСкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	АктВыполненныхРаботСкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА АктВыполненныхРаботСкидкиНаценки.Ссылка.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|				ТОГДА АктВыполненныхРаботСкидкиНаценки.Сумма * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ АктВыполненныхРаботСкидкиНаценки.Сумма * АктВыполненныхРаботСкидкиНаценки.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * АктВыполненныхРаботСкидкиНаценки.Ссылка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	АктВыполненныхРаботСкидкиНаценки.Ссылка.Дата КАК Период,
	|	АктВыполненныхРаботСкидкиНаценки.Ссылка.Подразделение КАК СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВременнаяТаблицаАвтоСкидкиНаценки
	|ИЗ
	|	Документ.АктВыполненныхРабот.СкидкиНаценки КАК АктВыполненныхРаботСкидкиНаценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						КонстантаВалютаУчета.Значение
	|					ИЗ
	|						Константа.ВалютаУчета КАК КонстантаВалютаУчета)) КАК КурсыУпрВалюты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						КонстантаНациональнаяВалюта.Значение
	|					ИЗ
	|						Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта)) КАК КурсыРегВалюты
	|		ПО (ИСТИНА),
	|	Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта
	|ГДЕ
	|	АктВыполненныхРаботСкидкиНаценки.Ссылка = &Ссылка
	|	И АктВыполненныхРаботСкидкиНаценки.Сумма <> 0";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст = ПолучитьТекстЗапросаИнициализироватьДанныеДокумента();
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаАктВыполненныхРабот);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаНациональная", Константы.НациональнаяВалюта.Получить());
	Запрос.УстановитьПараметр("ВалютаНакладной", ДокументСсылкаАктВыполненныхРабот.ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаРасчетов", СтруктураДополнительныеСвойства.Договор.ВалютаРасчетов);
	Запрос.УстановитьПараметр("ДатаДокумента", СтруктураДополнительныеСвойства.ДляПроведения.Дата);
	
	// Перед выполнением запроса проверим, необходим ли пересчет из валюты в валюту
	РасчетыПроведениеДокументов.МодифицироватьЗапросДляПересчетаВВалюту(ДокументСсылкаАктВыполненныхРабот, Запрос, СтруктураДополнительныеСвойства);

	Запрос.ВыполнитьПакет();
	
	// Формирование проводок документа.
	ПроведениеДокументовУНФ.СформироватьТаблицуПроводок(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаРасчетыСПокупателями(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства);
	СформироватьТаблицаВыпускПродукции(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПродажи(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗаказыПокупателей(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходы(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасы(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства);
	// Кассовый метод
	РасчетыПроведениеДокументов.СформироватьВременнаяТаблицаПредоплатаДляКассовогоМетода(СтруктураДополнительныеСвойства, Метаданные.РегистрыНакопления.РасчетыСПокупателями.Имя);
	СформироватьТаблицаДоходыИРасходыОтложенные(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходыНераспределенные(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходыКассовыйМетод(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства);
	// Конец Кассовый метод
	СформироватьТаблицаЗаказыНаПроизводство(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОплатаДокументов(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыИАгентскиеУслугиПринятые(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаУправленческий(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства);
	
	// ДисконтныеКарты
	СформироватьТаблицаПродажиПоДисконтнойКарте(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства);
	// АвтоматическиеСкидки
	СформироватьТаблицаПродажиПоПредоставленнымСкидкам(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства);
	// Подарочные сертификаты
	СформироватьТаблицаПодарочныеСертификаты(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОплатаПодарочнымиСертификатами(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства);
	// Эквайринг
	ЭквайринговыеОперацииСервер.СформироватьТаблицаДоходыИРасходыКассовыйМетодЭквайринг(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства);
	
	// Суммы документов регламентированный учет
	СформироватьТаблицаСуммыДокументовРегламентированныйУчет(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылкаАктВыполненныхРабот, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если ПроведениеДокументовУНФ.КонтрольОстатковВыключен() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временные таблицы "ДвиженияЗапасыИзменение", "ДвиженияЗаказыПокупателейИзменение"
	// содержат записи, необходимо выполнить контроль реализации товаров.
	Если СтруктураВременныеТаблицы.ДвиженияЗапасыИзменение
	 ИЛИ СтруктураВременныеТаблицы.ДвиженияЗаказыПокупателейИзменение
	 ИЛИ СтруктураВременныеТаблицы.ДвиженияРасчетыСПокупателямиИзменение
	 // Для режима зачета аванса Авто тоже выполняем контроль, т.к. может быть более поздняя оплата.
	 ИЛИ СтруктураВременныеТаблицы.ДвиженияПодарочныеСертификатыИзменение Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияЗапасыИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиницаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.СчетУчета) КАК СчетУчетаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.ЗаказПокупателя) КАК ЗаказПокупателяПредставление,
		|	ЗапасыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) КАК СуммаОстатокЗапасы
		|ИЗ
		|	ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
		|				&МоментКонтроля,
		|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|						ДвиженияЗапасыИзменение.СчетУчета КАК СчетУчета,
		|						ДвиженияЗапасыИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыИзменение.ЗаказПокупателя КАК ЗаказПокупателя
		|					ИЗ
		|						ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение)) КАК ЗапасыОстатки
		|		ПО ДвиженияЗапасыИзменение.Организация = ЗапасыОстатки.Организация
		|			И ДвиженияЗапасыИзменение.СтруктурнаяЕдиница = ЗапасыОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыИзменение.СчетУчета = ЗапасыОстатки.СчетУчета
		|			И ДвиженияЗапасыИзменение.Номенклатура = ЗапасыОстатки.Номенклатура
		|			И ДвиженияЗапасыИзменение.Характеристика = ЗапасыОстатки.Характеристика
		|			И ДвиженияЗапасыИзменение.Партия = ЗапасыОстатки.Партия
		|			И ДвиженияЗапасыИзменение.ЗаказПокупателя = ЗапасыОстатки.ЗаказПокупателя
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗаказыПокупателейИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗаказыПокупателейИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗаказыПокупателейИзменение.ЗаказПокупателя) КАК ЗаказПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗаказыПокупателейИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗаказыПокупателейИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗаказыПокупателейОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗаказыПокупателейИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК ОстатокЗаказыПокупателей,
		|	ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗаказыПокупателей
		|ИЗ
		|	ДвиженияЗаказыПокупателейИзменение КАК ДвиженияЗаказыПокупателейИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
		|				&МоментКонтроля,
		|				(Организация, ЗаказПокупателя, Номенклатура, Характеристика) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗаказыПокупателейИзменение.Организация КАК Организация,
		|						ДвиженияЗаказыПокупателейИзменение.ЗаказПокупателя КАК ЗаказПокупателя,
		|						ДвиженияЗаказыПокупателейИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗаказыПокупателейИзменение.Характеристика КАК Характеристика
		|					ИЗ
		|						ДвиженияЗаказыПокупателейИзменение КАК ДвиженияЗаказыПокупателейИзменение)) КАК ЗаказыПокупателейОстатки
		|		ПО ДвиженияЗаказыПокупателейИзменение.Организация = ЗаказыПокупателейОстатки.Организация
		|			И ДвиженияЗаказыПокупателейИзменение.ЗаказПокупателя = ЗаказыПокупателейОстатки.ЗаказПокупателя
		|			И ДвиженияЗаказыПокупателейИзменение.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
		|			И ДвиженияЗаказыПокупателейИзменение.Характеристика = ЗаказыПокупателейОстатки.Характеристика
		|ГДЕ
		|	ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияРасчетыСПокупателямиИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРасчетыСПокупателямиИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРасчетыСПокупателямиИзменение.Контрагент) КАК КонтрагентПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРасчетыСПокупателямиИзменение.Договор) КАК ДоговорПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРасчетыСПокупателямиИзменение.Договор.ВалютаРасчетов) КАК ВалютаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРасчетыСПокупателямиИзменение.Документ) КАК ДокументПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРасчетыСПокупателямиИзменение.Заказ) КАК ЗаказПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов) КАК ТипРасчетовПредставление,
		|	ЛОЖЬ КАК ДвиженияДенежныхДокументов,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаПередЗаписью КАК СуммаПередЗаписью,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаПриЗаписи КАК СуммаПриЗаписи,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаИзменение КАК СуммаИзменение,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПередЗаписью КАК СуммаВалПередЗаписью,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПриЗаписи КАК СуммаВалПриЗаписи,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалИзменение КАК СуммаВалИзменение,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПриЗаписи - ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаПолученныхАвансов,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалИзменение + ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаНепогашеннойЗадолженности,
		|	ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
		|	ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток,
		|	ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов КАК ТипРасчетов
		|ИЗ
		|	ДвиженияРасчетыСПокупателямиИзменение КАК ДвиженияРасчетыСПокупателямиИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПокупателями.Остатки(
		|				&МоментКонтроля,
		|				(Организация, Контрагент, Договор, Документ, Заказ, ТипРасчетов) В
		|					(ВЫБРАТЬ
		|						ДвиженияРасчетыСПокупателямиИзменение.Организация КАК Организация,
		|						ДвиженияРасчетыСПокупателямиИзменение.Контрагент КАК Контрагент,
		|						ДвиженияРасчетыСПокупателямиИзменение.Договор КАК Договор,
		|						ДвиженияРасчетыСПокупателямиИзменение.Документ КАК Документ,
		|						ДвиженияРасчетыСПокупателямиИзменение.Заказ КАК Заказ,
		|						ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов КАК ТипРасчетов
		|					ИЗ
		|						ДвиженияРасчетыСПокупателямиИзменение КАК ДвиженияРасчетыСПокупателямиИзменение)) КАК РасчетыСПокупателямиОстатки
		|		ПО ДвиженияРасчетыСПокупателямиИзменение.Организация = РасчетыСПокупателямиОстатки.Организация
		|			И ДвиженияРасчетыСПокупателямиИзменение.Контрагент = РасчетыСПокупателямиОстатки.Контрагент
		|			И ДвиженияРасчетыСПокупателямиИзменение.Договор = РасчетыСПокупателямиОстатки.Договор
		|			И ДвиженияРасчетыСПокупателямиИзменение.Документ = РасчетыСПокупателямиОстатки.Документ
		|			И ДвиженияРасчетыСПокупателямиИзменение.Заказ = РасчетыСПокупателямиОстатки.Заказ
		|			И ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов = РасчетыСПокупателямиОстатки.ТипРасчетов
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
		|				ТОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) > 0
		|			ИНАЧЕ ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) < 0
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияПодарочныеСертификатыИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияПодарочныеСертификатыИзменение.ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	ДвиженияПодарочныеСертификатыИзменение.НомерСертификата КАК НомерСертификата,
		|	ЕСТЬNULL(ДвиженияПодарочныеСертификатыИзменение.СуммаИзменение, 0) + ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) КАК ОстатокПодарочныеСертификаты,
		|	ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) КАК СуммаОстатокПодарочныеСертификаты
		|ИЗ
		|	ДвиженияПодарочныеСертификатыИзменение КАК ДвиженияПодарочныеСертификатыИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты.Остатки(&МоментКонтроля, ) КАК ПодарочныеСертификатыОстатки
		|		ПО ДвиженияПодарочныеСертификатыИзменение.ПодарочныйСертификат = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
		|			И ДвиженияПодарочныеСертификатыИзменение.НомерСертификата = ПодарочныеСертификатыОстатки.НомерСертификата
		|			И (ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Если НЕ МассивРезультатов[0].Пустой()
			ИЛИ НЕ МассивРезультатов[1].Пустой()
			ИЛИ НЕ МассивРезультатов[2].Пустой()
			ИЛИ НЕ МассивРезультатов[3].Пустой() Тогда
			ДокументОбъектАктВыполненныхРабот = ДокументСсылкаАктВыполненныхРабот.ПолучитьОбъект()
		КонецЕсли;
		
		// Отрицательный остаток учета запасов.
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[0].Выбрать();
			КонтрольОстатковУНФ.Запасы(ДокументОбъектАктВыполненныхРабот, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по заказу покупателя.
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
			КонтрольОстатковУНФ.ЗаказыПокупателей(ДокументОбъектАктВыполненныхРабот, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по расчетам с покупателями.
		Если НЕ МассивРезультатов[2].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
			КонтрольОстатковУНФ.РасчетыСПокупателями(ДокументОбъектАктВыполненныхРабот, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по подарочным сертификатам
		Если Не МассивРезультатов[3].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[3].Выбрать();
			КонтрольОстатковУНФ.ПодарочныеСертификаты(ДокументОбъектАктВыполненныхРабот, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКонтроль()

#Область ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - состав полей см. в функции ВерсионированиеОбъектов.НастройкиПодсистемы
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	Возврат;
КонецПроцедуры

#КонецОбласти

#Область ДисконтныеКарты

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажиПоДисконтнойКарте(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства)
	
	Если ДокументСсылкаАктВыполненныхРабот.ДисконтнаяКарта.Пустая() Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнымКартам", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = ДисконтныеКартыУНФСервер.ТекстЗапросаПродажиПоДисконтнойКарте("АктВыполненныхРабот");
	Запрос.УстановитьПараметр("ПроцентСкидки", ДисконтныеКартыУНФСервер.ВычислитьПроцентСкидкиПоДисконтнойКарте(СтруктураДополнительныеСвойства.ДляПроведения.Дата,
																													   ДокументСсылкаАктВыполненныхРабот.ДисконтнаяКарта));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнымКартам", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажиПоДисконтнойКарте()

#КонецОбласти

#Область АвтоматическиеСкидки

Процедура СформироватьТаблицаПродажиПоПредоставленнымСкидкам(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Период КАК Период,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.СкидкаНаценка КАК ВидСкидкиНаценки,
	|	ВременнаяТаблицаРаботыИУслуги.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаРаботыИУслуги.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаРаботыИУслуги.Документ КАК ДокументСкидки,
	|	ВременнаяТаблицаРаботыИУслуги.Контрагент КАК ПолучательСкидки,
	|	ВременнаяТаблицаРаботыИУслуги.Ответственный КАК Ответственный,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Сумма КАК СуммаСкидки
	|ИЗ
	|	ВременнаяТаблицаРаботыИУслуги КАК ВременнаяТаблицаРаботыИУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаАвтоСкидкиНаценки КАК ВременнаяТаблицаАвтоСкидкиНаценки
	|		ПО ВременнаяТаблицаРаботыИУслуги.КлючСвязи = ВременнаяТаблицаАвтоСкидкиНаценки.КлючСвязи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаШапка.Дата,
	|	ВременнаяТаблицаШапка.ВидСкидкиНаценки,
	|	ВременнаяТаблицаРаботыИУслуги.Номенклатура,
	|	ВременнаяТаблицаРаботыИУслуги.Характеристика,
	|	ВременнаяТаблицаРаботыИУслуги.Документ,
	|	ВременнаяТаблицаРаботыИУслуги.Контрагент,
	|	ВременнаяТаблицаРаботыИУслуги.Ответственный,
	|	ВременнаяТаблицаРаботыИУслуги.СуммаСкидкиНаценки
	|ИЗ
	|	ВременнаяТаблицаРаботыИУслуги КАК ВременнаяТаблицаРаботыИУслуги,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаРаботыИУслуги.СуммаСкидкиНаценки <> 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПредоставленныеСкидки", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажиПоПредоставленнымАвтоматическимСкидкам()

#КонецОбласти

#Область ИнтерфейсПечати

Функция ДанныеДокументовРегУчет(МассивОбъектов, ИспользоватьФаксимиле, ПечатнаяФормаТолькоВРублях = Истина, Ошибки = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ИспользоватьФаксимиле", ИспользоватьФаксимиле);
	Запрос.УстановитьПараметр("ПечатнаяФормаТолькоВРублях", ПечатнаяФормаТолькоВРублях);
	Запрос.УстановитьПараметр("НациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктВыполненныхРабот.Ссылка КАК Ссылка,
	|	ВЫРАЗИТЬ(АктВыполненныхРабот.Номер КАК СТРОКА(12)) КАК Номер,
	|	АктВыполненныхРабот.Дата КАК ДатаДокумента,
	|	НЕОПРЕДЕЛЕНО КАК НомерИсправления,
	|	НЕОПРЕДЕЛЕНО КАК ДатаИсправления,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактура.Продажа) КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА АктВыполненныхРабот.Организация.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА АктВыполненныхРабот.Организация.ГоловнаяОрганизация
	|		ИНАЧЕ АктВыполненныхРабот.Организация
	|	КОНЕЦ КАК Организация,
	|	АктВыполненныхРабот.Организация.Префикс КАК Префикс,
	|	АктВыполненныхРабот.Организация.ФайлФаксимильнаяПечать КАК ФаксимилеПечати,
	|	ВЫБОР
	|		КОГДА АктВыполненныхРабот.Организация.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА АктВыполненныхРабот.Организация.ЦифровойИндексОбособленногоПодразделения
	|		КОГДА АктВыполненныхРабот.Подразделение.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				И АктВыполненныхРабот.Подразделение.ГоловнаяОрганизация = АктВыполненныхРабот.Организация
	|			ТОГДА АктВыполненныхРабот.Подразделение.ЦифровойИндексОбособленногоПодразделения
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ЦифровойИндексОбособленногоПодразделения,
	|	ВЫБОР
	|		КОГДА &ИспользоватьФаксимиле = ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДаНет.Да)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ДаНет.Нет)
	|	КОНЕЦ КАК ИспользоватьФаксимиле,
	|	АктВыполненныхРабот.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА АктВыполненныхРабот.Организация.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА АктВыполненныхРабот.Организация
	|		КОГДА АктВыполненныхРабот.Подразделение.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				И АктВыполненныхРабот.Подразделение.ГоловнаяОрганизация = АктВыполненныхРабот.Организация
	|			ТОГДА АктВыполненныхРабот.Подразделение
	|		ИНАЧЕ АктВыполненныхРабот.Организация
	|	КОНЕЦ КАК ОбособленноеПодразделениеПоставщика,
	|	ВЫБОР
	|		КОГДА АктВыполненныхРабот.Организация.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА АктВыполненныхРабот.Организация.ГоловнаяОрганизация
	|		ИНАЧЕ АктВыполненныхРабот.Организация
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР
	|		КОГДА АктВыполненныхРабот.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА АктВыполненныхРабот.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СтатусУПД,
	|	НЕОПРЕДЕЛЕНО КАК ФаксимилеПустая,
	|	АктВыполненныхРабот.ПодписьРуководителя.Должность КАК ДолжностьРуководителя,
	|	АктВыполненныхРабот.ПодписьРуководителя.РасшифровкаПодписи КАК РасшифровкаПодписиРуководителя,
	|	АктВыполненныхРабот.ПодписьРуководителя.Факсимиле КАК ФаксимилеРуководителя,
	|	АктВыполненныхРабот.ПодписьГлавногоБухгалтера.Должность КАК ДолжностьГлавногоБухгалтера,
	|	АктВыполненныхРабот.ПодписьГлавногоБухгалтера.РасшифровкаПодписи КАК РасшифровкаПодписиГлавногоБухгалтера,
	|	АктВыполненныхРабот.ПодписьГлавногоБухгалтера.Факсимиле КАК ФаксимилеГлавногоБухгалтера,
	|	НЕОПРЕДЕЛЕНО КАК ДолжностьКладовщика,
	|	НЕОПРЕДЕЛЕНО КАК РасшифровкаПодписиКладовщика,
	|	НЕОПРЕДЕЛЕНО КАК ФаксимилеКладовщика,
	|	АктВыполненныхРабот.ОснованиеПечати КАК ПредставлениеОснования,
	|	АктВыполненныхРабот.ОснованиеПечатиСсылка КАК ОснованиеПечатиСсылка,
	|	ВЫБОР
	|		КОГДА АктВыполненныхРабот.Контрагент.ГоловнойКонтрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И АктВыполненныхРабот.Контрагент.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА АктВыполненныхРабот.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ АктВыполненныхРабот.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА АктВыполненныхРабот.Контрагент.ГоловнойКонтрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И АктВыполненныхРабот.Контрагент.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА АктВыполненныхРабот.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ АктВыполненныхРабот.Контрагент
	|	КОНЕЦ КАК Покупатель,
	|	ВЫБОР
	|		КОГДА АктВыполненныхРабот.Контрагент.ГоловнойКонтрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И АктВыполненныхРабот.Контрагент.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА АктВыполненныхРабот.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ АктВыполненныхРабот.Контрагент
	|	КОНЕЦ КАК Грузополучатель,
	|	АктВыполненныхРабот.Контрагент КАК ОбособленноеПодразделениеПокупателя,
	|	НЕОПРЕДЕЛЕНО КАК АдресДоставки,
	|	АктВыполненныхРабот.КонтактноеЛицоПодписант.Наименование КАК РасшифровкаПодписиКонтрагента,
	|	ЕСТЬNULL(АктВыполненныхРабот.Договор.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	АктВыполненныхРабот.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях = ИСТИНА
	|			ТОГДА НациональнаяВалюта.Значение
	|		ИНАЧЕ АктВыполненныхРабот.ВалютаДокумента
	|	КОНЕЦ КАК ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях = ИСТИНА
	|			ТОГДА НациональнаяВалюта.Значение.НаименованиеПолное
	|		ИНАЧЕ АктВыполненныхРабот.ВалютаДокумента.НаименованиеПолное
	|	КОНЕЦ КАК ВалютаНаименование,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях = ИСТИНА
	|			ТОГДА НациональнаяВалюта.Значение.Код
	|		ИНАЧЕ АктВыполненныхРабот.ВалютаДокумента.Код
	|	КОНЕЦ КАК ВалютаКод,
	|	ЛОЖЬ КАК ЭтоКорректировка,
	|	ЛОЖЬ КАК ЭтоСводныйСчетФактура,
	|	0 КАК Вес,
	|	0 КАК Объем,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьНомер,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьВыдана,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьДата,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьЛицо,
	|	АктВыполненныхРабот.РаботыИУслуги.(
	|		НомерСтроки КАК НомерСтроки,
	|		Содержание КАК Содержание,
	|		Номенклатура КАК Номенклатура,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(АктВыполненныхРабот.РаботыИУслуги.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА АктВыполненныхРабот.РаботыИУслуги.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(АктВыполненныхРабот.РаботыИУслуги.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ПредставлениеНоменклатуры,
	|		Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|		Номенклатура.Код КАК ЗапасКод,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Штрихкод КАК Штрихкод,
	|		Номенклатура.ТоварнаяНоменклатураВЭД КАК КодТНВЭД,
	|		Характеристика КАК Характеристика,
	|		ВЫБОР
	|			КОГДА АктВыполненныхРабот.РаботыИУслуги.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|					И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|					И АктВыполненныхРабот.РаботыИУслуги.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|				ТОГДА АктВыполненныхРабот.РаботыИУслуги.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору.Наименование
	|			ИНАЧЕ АктВыполненныхРабот.РаботыИУслуги.Номенклатура.ЕдиницаИзмерения.Наименование
	|		КОНЕЦ КАК ЕдиницаИзмеренияПоОКЕИ_Наименование,
	|		ВЫБОР
	|			КОГДА АктВыполненныхРабот.РаботыИУслуги.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|					И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|					И АктВыполненныхРабот.РаботыИУслуги.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|				ТОГДА АктВыполненныхРабот.РаботыИУслуги.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору.Код
	|			ИНАЧЕ АктВыполненныхРабот.РаботыИУслуги.Номенклатура.ЕдиницаИзмерения.Код
	|		КОНЕЦ КАК ЕдиницаИзмеренияПоОКЕИ_Код,
	|		ВЫБОР
	|			КОГДА АктВыполненныхРабот.РаботыИУслуги.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|					И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|					И АктВыполненныхРабот.РаботыИУслуги.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|				ТОГДА АктВыполненныхРабот.РаботыИУслуги.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору
	|			ИНАЧЕ АктВыполненныхРабот.РаботыИУслуги.Номенклатура.ЕдиницаИзмерения
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|		ВЫБОР
	|			КОГДА АктВыполненныхРабот.РаботыИУслуги.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|					И ПечатьПользовательскихЕдиницИзмерения.Значение <> ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|				ТОГДА АктВыполненныхРабот.РаботыИУслуги.ЕдиницаИзмерения.Коэффициент
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК КоэффициентЕдиницыИзмерения,
	|		НЕОПРЕДЕЛЕНО КАК ВидУпаковки,
	|		НЕОПРЕДЕЛЕНО КАК КоличествоВОдномМесте,
	|		НЕОПРЕДЕЛЕНО КАК КоличествоМест,
	|		Количество КАК Количество,
	|		СтавкаНДС КАК СтавкаНДС,
	|		0 КАК МассаБрутто,
	|		ВЫБОР
	|			КОГДА АктВыполненныхРабот.РаботыИУслуги.ЕдиницаИзмерения ССЫЛКА Справочник.КлассификаторЕдиницИзмерения
	|				ТОГДА ВЫБОР
	|						КОГДА &ПечатнаяФормаТолькоВРублях
	|							ТОГДА ВЫБОР
	|									КОГДА АктВыполненныхРабот.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|											И АктВыполненныхРабот.Ссылка.ВалютаДокумента <> &НациональнаяВалюта
	|										ТОГДА ВЫРАЗИТЬ(АктВыполненныхРабот.РаботыИУслуги.Цена * АктВыполненныхРабот.Курс / АктВыполненныхРабот.Кратность КАК ЧИСЛО(15, 2))
	|									ИНАЧЕ АктВыполненныхРабот.РаботыИУслуги.Цена
	|								КОНЕЦ
	|						ИНАЧЕ АктВыполненныхРабот.РаботыИУслуги.Цена
	|					КОНЕЦ
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК Цена,
	|		ВЫБОР
	|			КОГДА &ПечатнаяФормаТолькоВРублях
	|				ТОГДА ВЫБОР
	|						КОГДА АктВыполненныхРабот.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|								И АктВыполненныхРабот.Ссылка.ВалютаДокумента <> &НациональнаяВалюта
	|							ТОГДА ВЫРАЗИТЬ(АктВыполненныхРабот.РаботыИУслуги.Сумма * АктВыполненныхРабот.Курс / АктВыполненныхРабот.Кратность КАК ЧИСЛО(15, 2))
	|						ИНАЧЕ АктВыполненныхРабот.РаботыИУслуги.Сумма
	|					КОНЕЦ
	|			ИНАЧЕ АктВыполненныхРабот.РаботыИУслуги.Сумма
	|		КОНЕЦ КАК Сумма,
	|		ВЫБОР
	|			КОГДА &ПечатнаяФормаТолькоВРублях
	|				ТОГДА ВЫБОР
	|						КОГДА АктВыполненныхРабот.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|								И АктВыполненныхРабот.Ссылка.ВалютаДокумента <> &НациональнаяВалюта
	|							ТОГДА ВЫРАЗИТЬ(АктВыполненныхРабот.РаботыИУслуги.СуммаНДС * АктВыполненныхРабот.Курс / АктВыполненныхРабот.Кратность КАК ЧИСЛО(15, 2))
	|						ИНАЧЕ АктВыполненныхРабот.РаботыИУслуги.СуммаНДС
	|					КОНЕЦ
	|			ИНАЧЕ АктВыполненныхРабот.РаботыИУслуги.СуммаНДС
	|		КОНЕЦ КАК СуммаНДС,
	|		ВЫБОР
	|			КОГДА &ПечатнаяФормаТолькоВРублях
	|				ТОГДА ВЫБОР
	|						КОГДА АктВыполненныхРабот.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|								И АктВыполненныхРабот.Ссылка.ВалютаДокумента <> &НациональнаяВалюта
	|							ТОГДА ВЫРАЗИТЬ(АктВыполненныхРабот.РаботыИУслуги.Всего * АктВыполненныхРабот.Курс / АктВыполненныхРабот.Кратность КАК ЧИСЛО(15, 2))
	|						ИНАЧЕ АктВыполненныхРабот.РаботыИУслуги.Всего
	|					КОНЕЦ
	|			ИНАЧЕ АктВыполненныхРабот.РаботыИУслуги.Всего
	|		КОНЕЦ КАК Всего,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА АктВыполненныхРабот.РаботыИУслуги.ПроцентСкидкиНаценки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		ЛОЖЬ КАК ЭтоНабор,
	|		ВЫБОР
	|			КОГДА АктВыполненныхРабот.РаботыИУслуги.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И АктВыполненныхРабот.РаботыИУслуги.НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		НЕОПРЕДЕЛЕНО КАК СтранаСсылка,
	|		НЕОПРЕДЕЛЕНО КАК СтранаПредставление,
	|		НЕОПРЕДЕЛЕНО КАК СтранаКод,
	|		НЕОПРЕДЕЛЕНО КАК ПредставлениеГТД
	|	) КАК ТаблицаЗапасы,
	|	АктВыполненныхРабот.ДобавленныеНаборы.(
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(АктВыполненныхРабот.ДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА АктВыполненныхРабот.ДобавленныеНаборы.НоменклатураНабора.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(АктВыполненныхРабот.ДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ЗапасНабора,
	|		НоменклатураНабора.ВариантПечатиНабора КАК ВариантПечатиНабора,
	|		НоменклатураНабора.ТипНоменклатуры КАК ТипНоменклатурыНабора,
	|		НоменклатураНабора.Артикул КАК АртикулНабора,
	|		НоменклатураНабора.Код КАК КодНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияНабора,
	|		ИСТИНА КАК ВыводитьИтоги
	|	) КАК ТаблицаДобавленныеНаборы,
	|	АктВыполненныхРабот.ЕстьПрослеживаемыеТовары КАК ЕстьПрослеживаемыеТовары
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК АктВыполненныхРабот,
	|	Константа.НациональнаяВалюта КАК НациональнаяВалюта,
	|	Константа.ПечатьПользовательскихЕдиницИзмерения КАК ПечатьПользовательскихЕдиницИзмерения
	|ГДЕ
	|	АктВыполненныхРабот.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктВыполненныхРаботРаботыИУслуги.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(АктВыполненныхРаботРаботыИУслуги.Содержание КАК СТРОКА(1000)) КАК Содержание,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(АктВыполненныхРаботРаботыИУслуги.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА АктВыполненныхРаботРаботыИУслуги.Номенклатура.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(АктВыполненныхРаботРаботыИУслуги.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ КАК ПредставлениеНоменклатуры,
	|	АктВыполненныхРаботРаботыИУслуги.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	АктВыполненныхРаботРаботыИУслуги.Номенклатура.Код КАК ЗапасКод,
	|	АктВыполненныхРаботРаботыИУслуги.Номенклатура.Артикул КАК Артикул,
	|	АктВыполненныхРаботРаботыИУслуги.Номенклатура.Штрихкод КАК Штрихкод,
	|	АктВыполненныхРаботРаботыИУслуги.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|				И АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|			ТОГДА АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору.Наименование
	|		ИНАЧЕ АктВыполненныхРаботРаботыИУслуги.Номенклатура.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ КАК ЕдиницаИзмеренияПоОКЕИ_Наименование,
	|	ВЫБОР
	|		КОГДА АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|				И АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|			ТОГДА АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору.Код
	|		ИНАЧЕ АктВыполненныхРаботРаботыИУслуги.Номенклатура.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияПоОКЕИ_Код,
	|	ВЫБОР
	|		КОГДА АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|				И АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|			ТОГДА АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору
	|		ИНАЧЕ АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ПересчитыватьВБазовуюЕдиницуИзмеренияНоменклатуры)
	|			ТОГДА АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоэффициентЕдиницыИзмерения,
	|	НЕОПРЕДЕЛЕНО КАК ВидУпаковки,
	|	НЕОПРЕДЕЛЕНО КАК КоличествоВОдномМесте,
	|	НЕОПРЕДЕЛЕНО КАК КоличествоМест,
	|	АктВыполненныхРаботРаботыИУслуги.Количество КАК Количество,
	|	АктВыполненныхРаботРаботыИУслуги.СтавкаНДС КАК СтавкаНДС,
	|	АктВыполненныхРаботРаботыИУслуги.СуммаАвтоматическойСкидки + АктВыполненныхРаботРаботыИУслуги.СуммаСкидкиНаценки КАК СуммаСкидкиПоСтроке,
	|	АктВыполненныхРаботРаботыИУслуги.Цена КАК Цена,
	|	АктВыполненныхРаботРаботыИУслуги.НомерСтроки КАК НомерСтроки,
	|	АктВыполненныхРаботРаботыИУслуги.Сумма КАК Сумма,
	|	АктВыполненныхРаботРаботыИУслуги.СуммаНДС КАК СуммаНДС,
	|	АктВыполненныхРаботРаботыИУслуги.Всего КАК Всего,
	|	АктВыполненныхРаботРаботыИУслуги.Ссылка КАК Ссылка,
	|	АктВыполненныхРаботРаботыИУслуги.НоменклатураНабора КАК НоменклатураНабора,
	|	АктВыполненныхРаботРаботыИУслуги.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЛОЖЬ КАК ЭтоНабор,
	|	ВЫБОР
	|		КОГДА АктВыполненныхРаботРаботыИУслуги.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				И АктВыполненныхРаботРаботыИУслуги.НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора,
	|	АктВыполненныхРаботРаботыИУслуги.Ссылка.Номер КАК НомерОтгрузочногоДокумента,
	|	АктВыполненныхРаботРаботыИУслуги.Ссылка.Дата КАК ДатаОтгрузочногоДокумента
	|ПОМЕСТИТЬ ВременнаяТаблица_АктВыполненныхРаботРаботыИУслуги
	|ИЗ
	|	Документ.АктВыполненныхРабот.РаботыИУслуги КАК АктВыполненныхРаботРаботыИУслуги,
	|	Константа.ПечатьПользовательскихЕдиницИзмерения КАК ПечатьПользовательскихЕдиницИзмерения
	|ГДЕ
	|	АктВыполненныхРаботРаботыИУслуги.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктВыполненныхРаботРаботыИУслуги.Номенклатура КАК Номенклатура,
	|	АктВыполненныхРаботРаботыИУслуги.Содержание КАК Содержание,
	|	АктВыполненныхРаботРаботыИУслуги.ПредставлениеНоменклатуры КАК ПредставлениеНоменклатуры,
	|	АктВыполненныхРаботРаботыИУслуги.ТипНоменклатуры КАК ТипНоменклатуры,
	|	АктВыполненныхРаботРаботыИУслуги.ЗапасКод КАК ЗапасКод,
	|	АктВыполненныхРаботРаботыИУслуги.ЗапасКод КАК Код,
	|	АктВыполненныхРаботРаботыИУслуги.Артикул КАК Артикул,
	|	АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмеренияПоОКЕИ_Наименование КАК ЕдиницаИзмеренияПоОКЕИ_Наименование,
	|	АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмеренияПоОКЕИ_Код КАК ЕдиницаИзмеренияПоОКЕИ_Код,
	|	АктВыполненныхРаботРаботыИУслуги.Характеристика КАК Характеристика,
	|	АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	АктВыполненныхРаботРаботыИУслуги.ВидУпаковки КАК ВидУпаковки,
	|	АктВыполненныхРаботРаботыИУслуги.Количество КАК Количество,
	|	АктВыполненныхРаботРаботыИУслуги.КоэффициентЕдиницыИзмерения КАК КоэффициентЕдиницыИзмерения,
	|	АктВыполненныхРаботРаботыИУслуги.КоличествоВОдномМесте КАК КоличествоВОдномМесте,
	|	АктВыполненныхРаботРаботыИУслуги.КоличествоМест КАК КоличествоМест,
	|	АктВыполненныхРаботРаботыИУслуги.СтавкаНДС КАК СтавкаНДС,
	|	АктВыполненныхРаботРаботыИУслуги.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА АктВыполненныхРаботРаботыИУслуги.Ссылка.ВалютаДокумента = &НациональнаяВалюта
	|			ТОГДА АктВыполненныхРаботРаботыИУслуги.СуммаСкидкиПоСтроке
	|		ИНАЧЕ ВЫРАЗИТЬ(АктВыполненныхРаботРаботыИУслуги.СуммаСкидкиПоСтроке * АктВыполненныхРаботРаботыИУслуги.Ссылка.Курс / АктВыполненныхРаботРаботыИУслуги.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК СуммаСкидкиПоСтроке,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях
	|			ТОГДА ВЫБОР
	|					КОГДА АктВыполненныхРаботРаботыИУслуги.Ссылка.ВалютаДокумента = &НациональнаяВалюта
	|						ТОГДА АктВыполненныхРаботРаботыИУслуги.Цена
	|					КОГДА СуммыДокументовРегламентированныйУчет.Всего ЕСТЬ NULL
	|						ТОГДА ВЫРАЗИТЬ(АктВыполненныхРаботРаботыИУслуги.Цена * АктВыполненныхРаботРаботыИУслуги.Ссылка.Курс / АктВыполненныхРаботРаботыИУслуги.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ ВЫБОР
	|							КОГДА АктВыполненныхРаботРаботыИУслуги.Количество = 0
	|								ТОГДА СуммыДокументовРегламентированныйУчет.Всего - СуммыДокументовРегламентированныйУчет.НДС
	|							ИНАЧЕ ВЫРАЗИТЬ((СуммыДокументовРегламентированныйУчет.Всего - СуммыДокументовРегламентированныйУчет.НДС) / АктВыполненныхРаботРаботыИУслуги.Количество КАК ЧИСЛО(15, 2))
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ АктВыполненныхРаботРаботыИУслуги.Цена
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях
	|			ТОГДА ВЫБОР
	|					КОГДА АктВыполненныхРаботРаботыИУслуги.Ссылка.ВалютаДокумента = &НациональнаяВалюта
	|						ТОГДА АктВыполненныхРаботРаботыИУслуги.Сумма
	|					КОГДА СуммыДокументовРегламентированныйУчет.Всего ЕСТЬ NULL
	|						ТОГДА ВЫРАЗИТЬ(АктВыполненныхРаботРаботыИУслуги.Сумма * АктВыполненныхРаботРаботыИУслуги.Ссылка.Курс / АктВыполненныхРаботРаботыИУслуги.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ ВЫБОР
	|							КОГДА АктВыполненныхРаботРаботыИУслуги.Ссылка.СуммаВключаетНДС
	|								ТОГДА ВЫРАЗИТЬ(СуммыДокументовРегламентированныйУчет.Всего КАК ЧИСЛО(15, 2))
	|							ИНАЧЕ ВЫРАЗИТЬ(СуммыДокументовРегламентированныйУчет.Всего - СуммыДокументовРегламентированныйУчет.НДС КАК ЧИСЛО(15, 2))
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ АктВыполненныхРаботРаботыИУслуги.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях
	|			ТОГДА ВЫБОР
	|					КОГДА АктВыполненныхРаботРаботыИУслуги.Ссылка.ВалютаДокумента = &НациональнаяВалюта
	|						ТОГДА АктВыполненныхРаботРаботыИУслуги.СуммаНДС
	|					КОГДА СуммыДокументовРегламентированныйУчет.Всего ЕСТЬ NULL
	|						ТОГДА ВЫРАЗИТЬ(АктВыполненныхРаботРаботыИУслуги.СуммаНДС * АктВыполненныхРаботРаботыИУслуги.Ссылка.Курс / АктВыполненныхРаботРаботыИУслуги.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ СуммыДокументовРегламентированныйУчет.НДС
	|				КОНЕЦ
	|		ИНАЧЕ АктВыполненныхРаботРаботыИУслуги.СуммаНДС
	|	КОНЕЦ КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях
	|			ТОГДА ВЫБОР
	|					КОГДА АктВыполненныхРаботРаботыИУслуги.Ссылка.ВалютаДокумента = &НациональнаяВалюта
	|						ТОГДА АктВыполненныхРаботРаботыИУслуги.Всего
	|					КОГДА СуммыДокументовРегламентированныйУчет.Всего ЕСТЬ NULL
	|						ТОГДА ВЫРАЗИТЬ(АктВыполненныхРаботРаботыИУслуги.Всего * АктВыполненныхРаботРаботыИУслуги.Ссылка.Курс / АктВыполненныхРаботРаботыИУслуги.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ СуммыДокументовРегламентированныйУчет.Всего
	|				КОНЕЦ
	|		ИНАЧЕ АктВыполненныхРаботРаботыИУслуги.Всего
	|	КОНЕЦ КАК Всего,
	|	АктВыполненныхРаботРаботыИУслуги.Ссылка КАК Ссылка,
	|	АктВыполненныхРаботРаботыИУслуги.НоменклатураНабора КАК НоменклатураНабора,
	|	АктВыполненныхРаботРаботыИУслуги.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	АктВыполненныхРаботРаботыИУслуги.ЭтоНабор КАК ЭтоНабор,
	|	НЕОПРЕДЕЛЕНО КАК СтранаСсылка,
	|	НЕОПРЕДЕЛЕНО КАК СтранаПредставление,
	|	НЕОПРЕДЕЛЕНО КАК СтранаКод,
	|	НЕОПРЕДЕЛЕНО КАК ПредставлениеГТД,
	|	АктВыполненныхРаботРаботыИУслуги.НеобходимоВыделитьКакСоставНабора КАК НеобходимоВыделитьКакСоставНабора,
	|	ВЫБОР
	|		КОГДА АктВыполненныхРаботРаботыИУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА АктВыполненныхРаботРаботыИУслуги.Номенклатура.ТоварнаяНоменклатураВЭД.Код
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КодТНВЭД,
	|	АктВыполненныхРаботРаботыИУслуги.ДатаОтгрузочногоДокумента КАК ДатаОтгрузочногоДокумента,
	|	АктВыполненныхРаботРаботыИУслуги.НомерОтгрузочногоДокумента КАК НомерОтгрузочногоДокумента
	|ИЗ
	|	ВременнаяТаблица_АктВыполненныхРаботРаботыИУслуги КАК АктВыполненныхРаботРаботыИУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовРегламентированныйУчет КАК СуммыДокументовРегламентированныйУчет
	|		ПО АктВыполненныхРаботРаботыИУслуги.Ссылка = СуммыДокументовРегламентированныйУчет.Регистратор
	|			И АктВыполненныхРаботРаботыИУслуги.НомерСтроки = СуммыДокументовРегламентированныйУчет.НомерСтрокиДокумента
	|ГДЕ
	|	АктВыполненныхРаботРаботыИУслуги.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Результат = МассивРезультатов[0].Выгрузить();
	
	ТЗСтрок = МассивРезультатов[2].Выгрузить();
	Для Каждого ТекущаяСтрока Из Результат Цикл
		
		НайденныеСтроки = ТЗСтрок.НайтиСтроки(Новый Структура("Ссылка", ТекущаяСтрока.Ссылка));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекущаяСтрока.ТаблицаЗапасы = ТЗСтрок.Скопировать(НайденныеСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	//Наборы
	НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(Результат, "ТаблицаЗапасы");
	
	Возврат Результат;
	
КонецФункции

Функция УниверсальныйЗапросПоДаннымДокумента(МассивОбъектов, ИспользоватьФаксимиле)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ИспользоватьФаксимиле", ИспользоватьФаксимиле);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктВыполненныхРабот.Ссылка КАК Ссылка,
	|	АктВыполненныхРабот.Номер КАК Номер,
	|	АктВыполненныхРабот.Дата КАК ДатаДокумента,
	|	АктВыполненныхРабот.Организация КАК Организация,
	|	АктВыполненныхРабот.Организация.Префикс КАК Префикс,
	|	АктВыполненныхРабот.Организация.ФайлЛоготип КАК ФайлЛоготип,
	|	АктВыполненныхРабот.Организация.ФайлФаксимильнаяПечать КАК ФаксимилеПечати,
	|	АктВыполненныхРабот.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(АктВыполненныхРабот.Договор.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	АктВыполненныхРабот.ПодписьРуководителя.РасшифровкаПодписи КАК РасшифровкаПодписиВыполнилРаботыУслуги,
	|	АктВыполненныхРабот.ПодписьРуководителя.Факсимиле КАК ФаксимилеРуководителя,
	|	АктВыполненныхРабот.КонтактноеЛицоПодписант.Наименование КАК РасшифровкаПодписиПринялРаботыУслуги,
	|	АктВыполненныхРабот.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	АктВыполненныхРабот.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА &ИспользоватьФаксимиле = ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДаНет.Да)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ДаНет.Нет)
	|	КОНЕЦ КАК ИспользоватьФаксимиле,
	|	АктВыполненныхРабот.ОснованиеПечатиСсылка КАК ОснованиеПечатиСсылка,
	|	АктВыполненныхРабот.ОснованиеПечати КАК ОснованиеПечати,
	|	АктВыполненныхРабот.Комментарий КАК Комментарий,
	|	АктВыполненныхРабот.РаботыИУслуги.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(АктВыполненныхРабот.РаботыИУслуги.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА АктВыполненныхРабот.РаботыИУслуги.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(АктВыполненныхРабот.РаботыИУслуги.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ПредставлениеНоменклатуры,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Штрихкод КАК Штрихкод,
	|		Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|		ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		Характеристика КАК Характеристика,
	|		Содержание КАК Содержание,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА АктВыполненныхРабот.РаботыИУслуги.ПроцентСкидкиНаценки <> 0
	|					ИЛИ АктВыполненныхРабот.РаботыИУслуги.СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|		ЛОЖЬ КАК ЭтоНабор,
	|		ВЫБОР
	|			КОГДА АктВыполненныхРабот.РаботыИУслуги.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И АктВыполненныхРабот.РаботыИУслуги.НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора
	|	) КАК ТаблицаРаботыУслуги,
	|	АктВыполненныхРабот.ДобавленныеНаборы.(
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(АктВыполненныхРабот.ДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА АктВыполненныхРабот.ДобавленныеНаборы.НоменклатураНабора.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(АктВыполненныхРабот.ДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ЗапасНабора,
	|		НоменклатураНабора.ВариантПечатиНабора КАК ВариантПечатиНабора,
	|		НоменклатураНабора.ТипНоменклатуры КАК ТипНоменклатурыНабора,
	|		НоменклатураНабора.Артикул КАК АртикулНабора,
	|		НоменклатураНабора.Код КАК КодНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияНабора,
	|		ИСТИНА КАК ВыводитьИтоги
	|	) КАК ТаблицаДобавленныеНаборы,
	|	АктВыполненныхРабот.ЕстьПрослеживаемыеТовары КАК ЕстьПрослеживаемыеТовары
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
	|ГДЕ
	|	АктВыполненныхРабот.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	ДанныеДокументов = Запрос.Выполнить().Выгрузить();
	
	// Наборы
	НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(ДанныеДокументов, "ТаблицаРаботыУслуги");
	
	Возврат ДанныеДокументов;
	
КонецФункции

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, Обработки.ПечатьАктаОбОказанииУслуг.ИдентификаторПечатнойФормы(Ложь, Ложь));
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = Обработки.ПечатьАктаОбОказанииУслуг.КлючПараметровПечати();
		ПечатнаяФорма.ПолныйПутьКМакету = Обработки.ПечатьАктаОбОказанииУслуг.ПолныйПутьКМакету(Ложь);
		ПечатнаяФорма.СинонимМакета = Обработки.ПечатьАктаОбОказанииУслуг.ПредставлениеПФ(Ложь, Ложь);
		
		ДанныеОбъектовПечати = УниверсальныйЗапросПоДаннымДокумента(МассивОбъектов, Ложь);
		Обработки.ПечатьАктаОбОказанииУслуг.СформироватьПФ(ПечатнаяФорма, ДанныеОбъектовПечати, ОбъектыПечати, Ложь);
		
	КонецЕсли;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, Обработки.ПечатьАктаОбОказанииУслуг.ИдентификаторПечатнойФормы(Ложь, Истина));
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = Обработки.ПечатьАктаОбОказанииУслуг.КлючПараметровПечати();
		ПечатнаяФорма.ПолныйПутьКМакету = Обработки.ПечатьАктаОбОказанииУслуг.ПолныйПутьКМакету(Ложь);
		ПечатнаяФорма.СинонимМакета = Обработки.ПечатьАктаОбОказанииУслуг.ПредставлениеПФ(Ложь, Истина);
		
		ДанныеОбъектовПечати = УниверсальныйЗапросПоДаннымДокумента(МассивОбъектов, Истина);
		Обработки.ПечатьАктаОбОказанииУслуг.СформироватьПФ(ПечатнаяФорма, ДанныеОбъектовПечати, ОбъектыПечати, Ложь);
		
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	ЭлектроннаяПочтаУНФ.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, 
		КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = Обработки.ПечатьАктаОбОказанииУслуг.ИдентификаторПечатнойФормы(Ложь, Ложь);
	КомандаПечати.Представление = Обработки.ПечатьАктаОбОказанииУслуг.ПредставлениеПФ(Ложь, Ложь);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = Обработки.ПечатьАктаОбОказанииУслуг.ИдентификаторПечатнойФормы(Ложь, Истина);
	КомандаПечати.Представление = Обработки.ПечатьАктаОбОказанииУслуг.ПредставлениеПФ(Ложь, Истина);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечатьФаксимиле";
	КомандаПечати.Порядок = 4;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Обработка.ПечатьСчетФактура.СчетФактура";
	КомандаПечати.Представление = Обработки.ПечатьСчетФактура.ПредставлениеПФ(Ложь, Ложь);
	КомандаПечати.ФункциональныеОпции = "ПередачаТоваровНаКомиссию,ПриемТоваровНаКомиссию,ИспользуетсяОСНО,ИспользоватьСчетаФактурыИсходящие";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 7;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Обработка.ПечатьСчетФактура.УниверсальныйПередаточныйДокумент";
	КомандаПечати.Представление = Обработки.ПечатьСчетФактура.ПредставлениеПФ(Истина, Ложь);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 10;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Обработка.ПечатьСчетФактура.УниверсальныйПередаточныйДокументФаксимиле";
	КомандаПечати.Представление = Обработки.ПечатьСчетФактура.ПредставлениеПФ(Истина, Истина);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечатьФаксимиле";
	КомандаПечати.Порядок = 14;
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
	ФорматТолькоДата = "ДЛФ=D";
	ДополнительныеПараметры.ФорматыРеквизитов.Вставить("ДоговорДатаДоговора", ФорматТолькоДата);
	ДополнительныеПараметры.ФорматыРеквизитов.Вставить("ДоговорСрокДействия", ФорматТолькоДата);
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.//
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПодарочнымиСертификатами

Процедура СформироватьТаблицаПодарочныеСертификаты(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства)
	
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПодарочныеСертификаты Тогда
	
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		
		Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерииНоменклатуры Тогда
		
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаДокумента.Период КАК Период,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
			|	ТаблицаДокумента.Документ КАК ПодарочныйСертификат,
			|	ТаблицаДокумента.НомерСертификата КАК НомерСертификата,
			|	ВЫБОР
			|		КОГДА ТаблицаДокумента.ЧастичноеПогашение
			|			ТОГДА ТаблицаДокумента.СуммаСертификата
			|		КОГДА ТаблицаДокумента.ИспользоватьСерииНоменклатуры
			|			ТОГДА ВЫБОР
			|					КОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) > ТаблицаДокумента.СуммаСертификата
			|						ТОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0)
			|					ИНАЧЕ ТаблицаДокумента.СуммаСертификата
			|				КОНЕЦ
			|		ИНАЧЕ ТаблицаДокумента.Номинал
			|	КОНЕЦ КАК Сумма
			|ИЗ
			|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиСертификатов КАК ПодарочныеСертификатыОстатки
			|		ПО ТаблицаДокумента.Документ = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
			|			И ТаблицаДокумента.НомерСертификата = ПодарочныеСертификатыОстатки.НомерСертификата
			|ГДЕ
			|	ТаблицаДокумента.ОплатаСертификатом";
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаДокумента.Период КАК Период,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
			|	ТаблицаДокумента.Документ КАК ПодарочныйСертификат,
			|	ТаблицаДокумента.Номинал КАК Сумма
			|ИЗ
			|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
			|ГДЕ
			|	ТаблицаДокумента.ОплатаСертификатом";
			
		КонецЕсли;
		
		Результат = Запрос.Выполнить().Выгрузить();
	
	Иначе
		
		Результат = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПодарочныеСертификаты", Результат);
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру ОплатаПодарочнымиСертификатами.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаПодарочнымиСертификатами(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства)
	
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПодарочныеСертификаты Тогда
	
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		
		Запрос.Текст = РаботаСПодарочнымиСертификатами.СформироватьТекстЗапросаПоОплатеПодарочнымиСертификатами(Истина);
		
		Результат = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Результат = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаПодарочнымиСертификатами", Результат);
	
КонецПроцедуры // СформироватьТаблицаОплатаПодарочнымиСертификатами()

#КонецОбласти

#КонецЕсли