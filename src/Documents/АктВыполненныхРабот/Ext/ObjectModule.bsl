#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыЗаполненияДокумента

// Процедура заполняет авансы.
//
Процедура ЗаполнитьПредоплату(ОстаткиПолучатьНаДатуДокумента = Ложь) Экспорт
	
	ЗаказВШапке = (ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке);
	Компания = Константы.УчетПоКомпании.Компания(Организация);
	
	ТаблицаЗаказов = РаботыИУслуги.Выгрузить(, "ЗаказПокупателя, Всего");
	ТаблицаЗаказов.Колонки.Добавить("ВсегоРасч");
	Для каждого ТекСтрока Из ТаблицаЗаказов Цикл
		Если НЕ Контрагент.ВестиРасчетыПоЗаказам Тогда
			ТекСтрока.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
		ИначеЕсли ЗаказВШапке Тогда
			ТекСтрока.ЗаказПокупателя = ЗаказПокупателя;
		КонецЕсли;
		ТекСтрока.ВсегоРасч = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
			ТекСтрока.Всего,
			?(Договор.ВалютаРасчетов = ВалютаДокумента, Курс, 1),
			Курс,
			?(Договор.ВалютаРасчетов = ВалютаДокумента, Кратность, 1),
			Кратность
		);
	КонецЦикла;
	ТаблицаЗаказов.Свернуть("ЗаказПокупателя", "Всего, ВсегоРасч");
	ТаблицаЗаказов.Сортировать("ЗаказПокупателя Возр");
	
	// Заполнение расшифровки предоплаты.
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаРегОстаток) КАК СуммаРегОстаток
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПокупателямиОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.Договор КАК Договор,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.Документ.Дата КАК ДокументДата,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРегОстаток, 0) КАК СуммаРегОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями.Остатки(
	|				&ПериодОстатков,
	|				Организация = &Организация
	|					И Контрагент = &Контрагент
	|					И Договор = &Договор
	|					И Заказ В (&Заказ)
	|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПокупателямиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРасчетыСПокупателями.Договор,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ.Дата,
	|		ДвиженияДокументаРасчетыСПокупателями.Заказ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаРег, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаРег, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями КАК ДвиженияДокументаРасчетыСПокупателями
	|	ГДЕ
	|		ДвиженияДокументаРасчетыСПокупателями.Регистратор = &Ссылка
	|		И ДвиженияДокументаРасчетыСПокупателями.Период <= &Период
	|		И ДвиженияДокументаРасчетыСПокупателями.Организация = &Организация
	|		И ДвиженияДокументаРасчетыСПокупателями.Контрагент = &Контрагент
	|		И ДвиженияДокументаРасчетыСПокупателями.Договор = &Договор
	|		И ДвиженияДокументаРасчетыСПокупателями.Заказ В(&Заказ)
	|		И ДвиженияДокументаРасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПокупателямиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата,
	|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаУчета) КАК СуммаУчета,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) КАК СуммаРасчетов,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаПлатежа) КАК СуммаПлатежа,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРег, 0) = 0
	|				ТОГДА РасчетыСПокупателямиОстатки.СуммаУчета / ВЫБОР
	|						КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРасчетов, 0) <> 0
	|							ТОГДА РасчетыСПокупателямиОстатки.СуммаРасчетов
	|						ИНАЧЕ 1
	|					КОНЕЦ * (РасчетыСПокупателямиОстатки.КурсыВалютыУчетаКурс / РасчетыСПокупателямиОстатки.КурсыВалютыУчетаКратность)
	|			ИНАЧЕ РасчетыСПокупателямиОстатки.СуммаРег / ВЫБОР
	|					КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРасчетов, 0) <> 0
	|						ТОГДА РасчетыСПокупателямиОстатки.СуммаРасчетов
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК Курс,
	|	1 КАК Кратность,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКурс КАК КурсыВалютыДокументаКурс,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКратность КАК КурсыВалютыДокументаКратность
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаУчета,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаРасчетов,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) * КурсыВалютыУчета.Курс * &КратностьВалютыДокумента / (&КурсВалютыДокумента * КурсыВалютыУчета.Кратность) КАК СуммаПлатежа,
	|		КурсыВалютыУчета.Курс КАК КурсыВалютыУчетаКурс,
	|		КурсыВалютыУчета.Кратность КАК КурсыВалютыУчетаКратность,
	|		&КурсВалютыДокумента КАК КурсыВалютыДокументаКурс,
	|		&КратностьВалютыДокумента КАК КурсыВалютыДокументаКратность,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРегОстаток, 0) КАК СуммаРег
	|	ИЗ
	|		ВременнаяТаблицаРасчетыСПокупателямиОстатки КАК РасчетыСПокупателямиОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУчета) КАК КурсыВалютыУчета
	|			ПО (ИСТИНА)) КАК РасчетыСПокупателямиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата,
	|	РасчетыСПокупателямиОстатки.ВалютаРасчетов,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыУчетаКурс,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыУчетаКратность,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКурс,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКратность
	|
	|ИМЕЮЩИЕ
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата";
	
	Запрос.УстановитьПараметр("Заказ", ТаблицаЗаказов.ВыгрузитьКолонку("ЗаказПокупателя"));
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Если Договор.ВалютаРасчетов = ВалютаДокумента Тогда
		Запрос.УстановитьПараметр("КурсВалютыДокумента", Курс);
		Запрос.УстановитьПараметр("КратностьВалютыДокумента", Кратность);
	Иначе
		Запрос.УстановитьПараметр("КурсВалютыДокумента", 1);
		Запрос.УстановитьПараметр("КратностьВалютыДокумента", 1);
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ПериодОстатков", ?(ОстаткиПолучатьНаДатуДокумента, Новый Граница(КонецДня(Дата), ВидГраницы.Включая), Неопределено));
	
	Запрос.Текст = ТекстЗапроса;
	
	Предоплата.Очистить();
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		
		НайденнаяСтрока = ТаблицаЗаказов.Найти(ВыборкаРезультатаЗапроса.Заказ, "ЗаказПокупателя");
		
		Если НайденнаяСтрока.ВсегоРасч = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаРезультатаЗапроса.СуммаРасчетов <= НайденнаяСтрока.ВсегоРасч Тогда // сумма остатка меньше или равна чем осталось распределить
			
			НоваяСтрока = Предоплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			НайденнаяСтрока.ВсегоРасч = НайденнаяСтрока.ВсегоРасч - ВыборкаРезультатаЗапроса.СуммаРасчетов;
			
		Иначе // сумма остатка больше чем нужно распределить
			
			НоваяСтрока = Предоплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			НоваяСтрока.СуммаРасчетов = НайденнаяСтрока.ВсегоРасч;
			НоваяСтрока.СуммаПлатежа = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
				НоваяСтрока.СуммаРасчетов,
				ВыборкаРезультатаЗапроса.Курс,
				ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКурс,
				ВыборкаРезультатаЗапроса.Кратность,
				ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКратность
			);
			НайденнаяСтрока.ВсегоРасч = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик заполнения на основании документа ЗаказПокупателя.
//
// Параметры:
//	ДокументСсылкаЗаказПокупателя - ДокументСсылка.ЗаказПокупателя - заказ покупателя.
//	
Процедура ЗаполнитьПоЗаказуПокупателя(ДокументСсылкаЗаказПокупателя) Экспорт
	
	// Основание и настройка документа.
	МассивЗаказов = Новый Массив;
	Если ТипЗнч(ДокументСсылкаЗаказПокупателя) = Тип("Структура") И ДокументСсылкаЗаказПокупателя.Свойство("МассивЗаказовПокупателей") Тогда
		МассивЗаказов = ДокументСсылкаЗаказПокупателя.МассивЗаказовПокупателей;
		ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	Иначе
		МассивЗаказов.Добавить(ДокументСсылкаЗаказПокупателя);
		ПоложениеЗаказаПокупателя = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ПоложениеЗаказаПокупателяВДокументахОтгрузки");
		Если НЕ ЗначениеЗаполнено(ПоложениеЗаказаПокупателя) Тогда
			ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		КонецЕсли;
		Если ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
			ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
		КонецЕсли;
		ПоложениеПроекта = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ПоложениеПроекта");
		Если НЕ ЗначениеЗаполнено(ПоложениеПроекта) Тогда
			ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		КонецЕсли;
		Если ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
			Проект = ДокументСсылкаЗаказПокупателя.Проект;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение шапки.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателя.Ссылка КАК ОснованиеСсылка,
	|	ЗаказПокупателя.Проведен КАК ОснованиеПроведен,
	|	ЗаказПокупателя.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЗаказПокупателя.Организация КАК Организация,
	|	ЗаказПокупателя.Организация.ПодписьРуководителя КАК ПодписьРуководителя,
	|	ЗаказПокупателя.Контрагент КАК Контрагент,
	|	ЗаказПокупателя.Контрагент.КонтактноеЛицоПодписант КАК КонтактноеЛицоПодписант,
	|	ЗаказПокупателя.Договор КАК Договор,
	|	ЗаказПокупателя.ВидОперации КАК ВидОперации,
	|	ЗаказПокупателя.ВидЦен КАК ВидЦен,
	|	ЗаказПокупателя.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|	ЗаказПокупателя.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ЗаказПокупателя.ПроцентСкидкиПоДисконтнойКарте КАК ПроцентСкидкиПоДисконтнойКарте,
	|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗаказПокупателя.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказПокупателя.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
	|	ЗаказПокупателя.ОснованиеПечатиСсылка КАК ОснованиеПечатиСсылка,
	|	ЗаказПокупателя.ОснованиеПечати КАК ОснованиеПечати,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ВалютаДокумента = НациональнаяВалюта.Значение
	|			ТОГДА ЗаказПокупателя.Курс
	|		ИНАЧЕ КурсыВалютСрезПоследних.Курс
	|	КОНЕЦ КАК Курс,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ВалютаДокумента = НациональнаяВалюта.Значение
	|			ТОГДА ЗаказПокупателя.Кратность
	|		ИНАЧЕ КурсыВалютСрезПоследних.Кратность
	|	КОНЕЦ КАК Кратность,
	|	ЗаказПокупателя.ОжидаетсяВыборВариантаКП КАК ОжидаетсяВыборВариантаКП,
	|	ЗаказПокупателя.СпособЗачетаПредоплаты КАК СпособЗачетаПредоплаты,
	|	ЗаказПокупателя.Проект
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	|		ПО ЗаказПокупателя.Ссылка.Договор.ВалютаРасчетов = КурсыВалютСрезПоследних.Валюта},
	|	Константа.НациональнаяВалюта КАК НациональнаяВалюта
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&МассивЗаказов)");
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Запрос.УстановитьПараметр("ДатаДокумента", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя ввести Акт выполненных работ на основании заказ-наряда %1!'"),
			Выборка.ОснованиеСсылка);
		КонецЕсли;
		
		ЗначенияПроверяемыхРеквизитов = Новый Структура(
			"СостояниеЗаказа,Проведен,ОжидаетсяВыборВариантаКП",
			Выборка.СостояниеЗаказа,
			Выборка.ОснованиеПроведен,
			Выборка.ОжидаетсяВыборВариантаКП
		);
		Документы.ЗаказПокупателя.ПроверитьВозможностьВводаНаОснованииЗаказаПокупателя(Выборка.ОснованиеСсылка, ЗначенияПроверяемыхРеквизитов);
		
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	// Заполнение табличной части.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыОстатки.Характеристика КАК Характеристика,
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыОстатки.Характеристика КАК Характеристика,
	|		ЗаказыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(
	|				,
	|				ЗаказПокупателя В (&МассивЗаказов)
	|					И (Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|						ИЛИ Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))) КАК ЗаказыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗаказыПокупателей.ЗаказПокупателя,
	|		ДвиженияДокументаЗаказыПокупателей.Номенклатура,
	|		ДвиженияДокументаЗаказыПокупателей.Характеристика,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗаказыПокупателей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗаказыПокупателей.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗаказыПокупателей.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей КАК ДвиженияДокументаЗаказыПокупателей
	|	ГДЕ
	|		ДвиженияДокументаЗаказыПокупателей.Регистратор = &Ссылка) КАК ЗаказыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыОстатки.ЗаказПокупателя,
	|	ЗаказыОстатки.Номенклатура,
	|	ЗаказыОстатки.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	ЗаказПокупателяЗапасы.Количество КАК Количество,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказПокупателяЗапасы.Цена КАК Цена,
	|	ЗаказПокупателяЗапасы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ЗаказПокупателяЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ЗаказПокупателяЗапасы.Сумма КАК Сумма,
	|	ЗаказПокупателяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателяЗапасы.СуммаНДС КАК СуммаНДС,
	|	ЗаказПокупателяЗапасы.Всего КАК Всего,
	|	ЗаказПокупателяЗапасы.Ссылка КАК ЗаказПокупателя,
	|	ЗаказПокупателяЗапасы.Спецификация КАК Спецификация,
	|	ЗаказПокупателяЗапасы.Содержание КАК Содержание,
	|	ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ЗаказПокупателяЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЗаказПокупателяЗапасы.КлючСвязи КАК КлючСвязи,
	|	ЗаказПокупателяЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ЗаказПокупателяЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЗаказПокупателяЗапасы.ДоляСтоимости КАК ДоляСтоимости
	|ИЗ
	|	ВТЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	(ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ИЛИ ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СкидкиНаценки.Ссылка КАК Заказ,
	|	СкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СкидкиНаценки.Сумма КАК Сумма
	|ИЗ
	|	Документ.ЗаказПокупателя.СкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Ссылка В(&МассивЗаказов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДобавленныеНаборы.Ссылка КАК ЗаказПокупателя,
	|	ДобавленныеНаборы.НоменклатураНабора КАК НоменклатураНабора,
	|	ДобавленныеНаборы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ДобавленныеНаборы.Количество КАК Количество
	|ПОМЕСТИТЬ ВТДобавленныеНаборы
	|ИЗ
	|	Документ.ЗаказПокупателя.ДобавленныеНаборы КАК ДобавленныеНаборы
	|ГДЕ
	|	ДобавленныеНаборы.Ссылка В(&МассивЗаказов)
	|	И ДобавленныеНаборы.Ссылка.ОсновнойВариантКП = ДобавленныеНаборы.НомерВариантаКП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДобавленныеНаборы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ДобавленныеНаборы.НоменклатураНабора КАК НоменклатураНабора,
	|	ДобавленныеНаборы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ДобавленныеНаборы.Количество КАК Количество
	|ИЗ
	|	ВТДобавленныеНаборы КАК ДобавленныеНаборы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателяПредоплата.Ссылка КАК Ссылка,
	|	ЗаказПокупателяПредоплата.НомерСтроки КАК НомерСтроки,
	|	ЗаказПокупателяПредоплата.Документ КАК Документ,
	|	ЗаказПокупателяПредоплата.НомерСертификата КАК НомерСертификата,
	|	ЗаказПокупателяПредоплата.СуммаРасчетов КАК СуммаРасчетов,
	|	ЗаказПокупателяПредоплата.Курс КАК Курс,
	|	ЗаказПокупателяПредоплата.Кратность КАК Кратность,
	|	ЗаказПокупателяПредоплата.СуммаПлатежа КАК СуммаПлатежа,
	|	ЗаказПокупателяПредоплата.ОплатаСертификатом КАК ОплатаСертификатом,
	|	ЗаказПокупателяПредоплата.Ссылка КАК Заказ
	|ИЗ
	|	Документ.ЗаказПокупателя.Предоплата КАК ЗаказПокупателяПредоплата
	|ГДЕ
	|	ЗаказПокупателяПредоплата.Ссылка В(&МассивЗаказов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДобавленныеНаборы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ДобавленныеНаборы.НоменклатураНабора КАК НоменклатураНабора,
	|	ДобавленныеНаборы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ДобавленныеНаборы.Количество КАК Количество
	|ИЗ
	|	ВТДобавленныеНаборы КАК ДобавленныеНаборы
	|ГДЕ
	|	ДобавленныеНаборы.НоменклатураНабора.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)";
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Документы.ЗаказПокупателя.ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(МассивЗаказов, Запрос.МенеджерВременныхТаблиц, Истина);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаОстатков = МассивРезультатов[0].Выгрузить();
	ТаблицаОстатков.Индексы.Добавить("ЗаказПокупателя, Номенклатура,Характеристика");
	
	// АвтоматическиеСкидки.
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки");
	Если ИспользоватьАвтоматическиеСкидки Тогда
		СкидкиНаценкиЗаказа = МассивРезультатов[2].Выгрузить();
		СкидкиНаценки.Очистить();
	КонецЕсли;
	// Конец АвтоматическиеСкидки.
	
	// Наборы
	ПропускаемыеНаборы = Новый Массив;
	ВыборкаИсключаемыеНаборы = МассивРезультатов[6].Выбрать();
	Пока ВыборкаИсключаемыеНаборы.Следующий() Цикл
		ДобавитьОписаниеНабора(ПропускаемыеНаборы, ВыборкаИсключаемыеНаборы.ЗаказПокупателя, ВыборкаИсключаемыеНаборы.НоменклатураНабора, ВыборкаИсключаемыеНаборы.ХарактеристикаНабора);	
	КонецЦикла; 
	// Конец Наборы
	
	// Ключ связи нужно поменять, т.к. накладную можно вводить на основании сразу двух заказов.
	// В этом случае ключи связи могут дублироваться.
	ТекКлючСвязи = 0;
	
	РаботыИУслуги.Очистить();
	Если ТаблицаОстатков.Количество() > 0 Тогда
		
		Выборка = МассивРезультатов[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтруктураДляПоиска = Новый Структура;
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", Выборка.ЗаказПокупателя);
			СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
			СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
			
			МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураДляПоиска);
			Если МассивСтрокОстатков.Количество() = 0 Тогда
				// Наборы
				Если ЗначениеЗаполнено(Выборка.НоменклатураНабора) Тогда
					ДобавитьОписаниеНабора(ПропускаемыеНаборы, Выборка.ЗаказПокупателя, Выборка.НоменклатураНабора, Выборка.ХарактеристикаНабора);
				КонецЕсли;
				// Конец Наборы
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = РаботыИУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			ТекКлючСвязи = ТекКлючСвязи + 1;
			
			КоличествоКСписанию = Выборка.Количество * Выборка.Коэффициент;
			МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоКСписанию;
			Если МассивСтрокОстатков[0].КоличествоОстаток < 0 Тогда
				
				// Наборы
				Если ЗначениеЗаполнено(Выборка.НоменклатураНабора) Тогда
					ДобавитьОписаниеНабора(ПропускаемыеНаборы, Выборка.ЗаказПокупателя, Выборка.НоменклатураНабора, Выборка.ХарактеристикаНабора);
				КонецЕсли;
				// Конец Наборы
				
				КоличествоКСписанию = (КоличествоКСписанию + МассивСтрокОстатков[0].КоличествоОстаток) / Выборка.Коэффициент;
				
				СтруктураРасчета = Новый Структура;
				СтруктураРасчета.Вставить("Количество", КоличествоКСписанию);
				СтруктураРасчета.Вставить("Цена", Выборка.Цена);
				СтруктураРасчета.Вставить("Сумма", 0);
				СтруктураРасчета.Вставить("ПроцентСкидкиНаценки", Выборка.ПроцентСкидкиНаценки);
				СтруктураРасчета.Вставить("СуммаСкидкиНаценки", 0);
				СтруктураРасчета.Вставить("СтавкаНДС", Выборка.СтавкаНДС);
				СтруктураРасчета.Вставить("СуммаНДС", 0);
				СтруктураРасчета.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
				СтруктураРасчета.Вставить("Всего", 0);
				ЗаполнениеОбъектовУНФ.РассчитатьСуммыВСтрокеТабличнойЧасти(СтруктураРасчета);
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураРасчета);
				
			КонецЕсли;
			
			// АвтоматическиеСкидки
			Если ИспользоватьАвтоматическиеСкидки Тогда
				КоличествоВДокументе = Выборка.Количество * Выборка.Коэффициент;
				ПересчитатьСуммы = КоличествоВДокументе <> КоличествоКСписанию;
				КоэффициентПересчетаСкидки = ?(ПересчитатьСуммы, КоличествоКСписанию / КоличествоВДокументе, 1);
				Если КоэффициентПересчетаСкидки <> 1 Тогда
					НоваяСтрока.СуммаАвтоматическойСкидки = ОКР(Выборка.СуммаАвтоматическойСкидки * КоэффициентПересчетаСкидки,2);
				КонецЕсли;
				
				// Формирование табличной части скидок
				СуммаКРаспределению = НоваяСтрока.СуммаАвтоматическойСкидки;
				
				ЕстьСтрокаСкидки = Ложь;
				Если Выборка.КлючСвязи <> 0 Тогда
					Для Каждого СтрокаСкидкиЗаказа Из СкидкиНаценкиЗаказа.НайтиСтроки(Новый Структура("Заказ,КлючСвязи", Выборка.ЗаказПокупателя, Выборка.КлючСвязи)) Цикл
						
						СтрокаСкидки = СкидкиНаценки.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаСкидки, СтрокаСкидкиЗаказа);
						// Ключ связи нужно поменять, т.к. накладную можно вводить на основании сразу двух заказов.
						// В этом случае ключи связи могут дублироваться.
						СтрокаСкидки.КлючСвязи = ТекКлючСвязи;
						СтрокаСкидки.Сумма = КоэффициентПересчетаСкидки * СтрокаСкидки.Сумма;
						СуммаКРаспределению = СуммаКРаспределению - СтрокаСкидки.Сумма;
						ЕстьСтрокаСкидки = Истина;
						
					КонецЦикла;
				КонецЕсли;
				
				Если ЕстьСтрокаСкидки И СуммаКРаспределению <> 0 Тогда
					СтрокаСкидки.Сумма = СтрокаСкидки.Сумма + СуммаКРаспределению;
				КонецЕсли;
				
				// Ключ связи нужно поменять, т.к. накладную можно вводить на основании сразу двух заказов.
				// В этом случае ключи связи могут дублироваться.
				НоваяСтрока.КлючСвязи = ТекКлючСвязи;
			КонецЕсли;
			// Конец АвтоматическиеСкидки
			
			Если МассивСтрокОстатков[0].КоличествоОстаток <= 0 Тогда
				ТаблицаОстатков.Удалить(МассивСтрокОстатков[0]);
			КонецЕсли;
			
			Если ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
				НоваяСтрока.Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ЗаказПокупателя, "Проект");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Наборы
	// Удаление неполных и неподходящих наборов
	Для каждого ОписаниеНабора Из ПропускаемыеНаборы Цикл
		УдаляемыеСтроки = РаботыИУслуги.НайтиСтроки(ОписаниеНабора);
		Для каждого СтрокаЗапаса Из УдаляемыеСтроки Цикл
			Для Каждого СтрокаСкидки Из СкидкиНаценки.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаЗапаса.КлючСвязи)) Цикл
				СкидкиНаценки.Удалить(СтрокаСкидки);
			КонецЦикла;
			РаботыИУслуги.Удалить(СтрокаЗапаса);
		КонецЦикла; 
	КонецЦикла;
	
	ДобавленныеНаборы.Очистить();
	ВыборкаНаборы = МассивРезультатов[4].Выбрать();
	Пока ВыборкаНаборы.Следующий() Цикл
		Если ПропуститьНабор(ПропускаемыеНаборы, ВыборкаНаборы) Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьНаборы(ВыборкаНаборы);
	КонецЦикла;  
	// Конец Наборы
	
	// АвтоматическиеСкидки.
	Если ИспользоватьАвтоматическиеСкидки Тогда
		РезультатРасчетаСкидокНаценок = СкидкиНаценки.Выгрузить();
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(ЭтотОбъект, "РаботыИУслуги", РезультатРасчетаСкидокНаценок);
	КонецЕсли;
	
	// Взаиморасчеты
	Предоплата.Очистить();
	Предоплата.Загрузить(МассивРезультатов[5].Выгрузить());
	
	Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПокупателя, "Проект");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказуПокупателя()

// Обработчик заполнения на основании документа ЗаказПокупателя.
//
// Параметры:
//	ДокументСсылкаЗаказПокупателя - ДокументСсылка.ЗаказПокупателя - заказ покупателя.
//	
Процедура ЗаполнитьПоЗаказуНаПроизводство(ДокументСсылкаЗаказНаПроизводство) Экспорт
	
	// Основание и настройка документа.
	МассивЗаказов = Новый Массив;
	Если ТипЗнч(ДокументСсылкаЗаказНаПроизводство) = Тип("Структура") И ДокументСсылкаЗаказНаПроизводство.Свойство("МассивЗаказовНаПроизводство") Тогда
		МассивЗаказов = ДокументСсылкаЗаказНаПроизводство.МассивЗаказовНаПроизводство;
		ПоложениеЗаказаНаПроизводство = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
		ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	Иначе
		МассивЗаказов.Добавить(ДокументСсылкаЗаказНаПроизводство);
		ПоложениеЗаказаНаПроизводство = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ПоложениеЗаказаНаПроизводствоВДокументахОтгрузки");
		Если НЕ ЗначениеЗаполнено(ПоложениеЗаказаНаПроизводство) Тогда
			ПоложениеЗаказаНаПроизводство = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		КонецЕсли;
		Если ПоложениеЗаказаНаПроизводство = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
			ЗаказНаПроизводство = ДокументСсылкаЗаказНаПроизводство;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение шапки.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказНаПроизводство.Ссылка КАК ОснованиеСсылка,
	|	ЗаказНаПроизводство.Проведен КАК ОснованиеПроведен,
	|	ЗаказНаПроизводство.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЗаказНаПроизводство.Организация КАК Организация,
	|	ЗаказНаПроизводство.Организация.ПодписьРуководителя КАК ПодписьРуководителя,
	|	ЗаказНаПроизводство.ПоложениеЗаказаПокупателя КАК ПоложениеЗаказаПокупателя,
	|	ЗаказНаПроизводство.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказНаПроизводство.ЗаказПокупателя.Контрагент КАК Контрагент,
	|	ЗаказНаПроизводство.ЗаказПокупателя.Контрагент.КонтактноеЛицоПодписант КАК КонтактноеЛицоПодписант,
	|	ЗаказНаПроизводство.ЗаказПокупателя.Договор КАК Договор,
	|	ЗаказНаПроизводство.ЗаказПокупателя.ВидОперации КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводство.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА &ОсновнойВидЦен
	|		ИНАЧЕ ЗаказНаПроизводство.ЗаказПокупателя.ВидЦен
	|	КОНЕЦ КАК ВидЦен,
	|	ЗаказНаПроизводство.ЗаказПокупателя.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|	ЗаказНаПроизводство.ЗаказПокупателя.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ЗаказНаПроизводство.ЗаказПокупателя.ПроцентСкидкиПоДисконтнойКарте КАК ПроцентСкидкиПоДисконтнойКарте,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводство.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА НациональнаяВалюта.Значение
	|		ИНАЧЕ ЗаказНаПроизводство.ЗаказПокупателя.ВалютаДокумента
	|	КОНЕЦ КАК ВалютаДокумента,
	|	ЗаказНаПроизводство.ЗаказПокупателя.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводство.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЗаказНаПроизводство.ЗаказПокупателя.СуммаВключаетНДС
	|	КОНЕЦ КАК СуммаВключаетНДС,
	|	ЗаказНаПроизводство.ЗаказПокупателя.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводство.ЗаказПокупателя.ВалютаДокумента = НациональнаяВалюта.Значение
	|			ТОГДА ЗаказНаПроизводство.ЗаказПокупателя.Курс
	|		ИНАЧЕ КурсыВалютСрезПоследних.Курс
	|	КОНЕЦ КАК Курс,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводство.ЗаказПокупателя.ВалютаДокумента = НациональнаяВалюта.Значение
	|			ТОГДА ЗаказНаПроизводство.ЗаказПокупателя.Кратность
	|		ИНАЧЕ КурсыВалютСрезПоследних.Кратность
	|	КОНЕЦ КАК Кратность,
	|	ЗаказНаПроизводство.ЗаказПокупателя.ОжидаетсяВыборВариантаКП КАК ОжидаетсяВыборВариантаКП
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	|		ПО ЗаказНаПроизводство.ЗаказПокупателя.Договор.ВалютаРасчетов = КурсыВалютСрезПоследних.Валюта},
	|	Константа.НациональнаяВалюта КАК НациональнаяВалюта
	|ГДЕ
	|	ЗаказНаПроизводство.Ссылка В(&МассивЗаказов)");
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Запрос.УстановитьПараметр("ДатаДокумента", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()));
	Запрос.УстановитьПараметр("ОсновнойВидЦен", УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойВидЦенПродажи"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
			ТекстОшибки = НСтр("ru = 'Нельзя ввести Акт выполненных работ на основании заказа на производство %1, созданного по заказ-наряду!'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Выборка.ОснованиеСсылка);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Если Выборка.СостояниеЗаказа = Справочники.СостоянияЗаказовНаПроизводство.Завершен Тогда
			ТекстОшибки = НСтр("ru='Документ %1 в состоянии Завершен. Ввод на основании завершенного заказа на производство запрещен.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Выборка.ОснованиеСсылка);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	// Заполнение табличной части.
	Запрос = Новый Запрос;
	Запрос.Текст = Справочники.СтавкиНДС.ПолучитьТекстЗапросаСозданияВТСтавкиНДС( ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата())) +
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ЗаказыНаПроизводствоОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыНаПроизводствоОстатки.Характеристика КАК Характеристика,
	|	СУММА(ЗаказыНаПроизводствоОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|		ЗаказыНаПроизводствоОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыНаПроизводствоОстатки.Характеристика КАК Характеристика,
	|		ЗаказыНаПроизводствоОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаПроизводство.Остатки(
	|				,
	|				ЗаказНаПроизводство В (&МассивЗаказов)
	|					И (Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|						ИЛИ Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))) КАК ЗаказыНаПроизводствоОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗаказыНаПроизводство.ЗаказНаПроизводство,
	|		ДвиженияДокументаЗаказыНаПроизводство.Номенклатура,
	|		ДвиженияДокументаЗаказыНаПроизводство.Характеристика,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗаказыНаПроизводство.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗаказыНаПроизводство.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗаказыНаПроизводство.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаПроизводство КАК ДвиженияДокументаЗаказыНаПроизводство
	|	ГДЕ
	|		ДвиженияДокументаЗаказыНаПроизводство.Регистратор = &Ссылка) КАК ЗаказыНаПроизводствоОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство,
	|	ЗаказыНаПроизводствоОстатки.Номенклатура,
	|	ЗаказыНаПроизводствоОстатки.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаказыНаПроизводствоОстатки.КоличествоОстаток) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказНаПроизводствоПродукция.Ссылка КАК ЗаказНаПроизводство,
	|	ЗаказНаПроизводствоПродукция.НомерСтроки КАК НомерСтроки,
	|	ЗаказНаПроизводствоПродукция.Номенклатура КАК Номенклатура,
	|	ЗаказНаПроизводствоПродукция.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНаПроизводствоПродукция.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказНаПроизводствоПродукция.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	ЗаказНаПроизводствоПродукция.Количество КАК Количество,
	|	ЗаказНаПроизводствоПродукция.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказНаПроизводствоПродукция.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказНаПроизводствоПродукция.Спецификация КАК Спецификация,
	|	ЕСТЬNULL(ВТСтавкиНДС.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)) КАК СтавкаНДС
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДС
	|	ПО ВТСтавкиНДС.ВидСтавкиНДС = ЗаказНаПроизводствоПродукция.Номенклатура.ВидСтавкиНДС
	|ГДЕ
	|	ЗаказНаПроизводствоПродукция.Ссылка В(&МассивЗаказов)
	|	И (ЗаказНаПроизводствоПродукция.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ИЛИ ЗаказНаПроизводствоПродукция.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаОстатков = МассивРезультатов[МассивРезультатов.Количество() - 2].Выгрузить();
	ТаблицаОстатков.Индексы.Добавить("ЗаказНаПроизводство, Номенклатура, Характеристика");
	
	РаботыИУслуги.Очистить();
	Если ТаблицаОстатков.Количество() > 0 Тогда
		
		Выборка = МассивРезультатов[МассивРезультатов.Количество() - 1].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтруктураДляПоиска = Новый Структура;
			СтруктураДляПоиска.Вставить("ЗаказНаПроизводство", Выборка.ЗаказНаПроизводство);
			СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
			СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
			
			МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураДляПоиска);
			Если МассивСтрокОстатков.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = РаботыИУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			КоличествоКСписанию = Выборка.Количество * Выборка.Коэффициент;
			МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоКСписанию;
			Если МассивСтрокОстатков[0].КоличествоОстаток < 0 Тогда
				НоваяСтрока.Количество = (КоличествоКСписанию + МассивСтрокОстатков[0].КоличествоОстаток) / Выборка.Коэффициент;
			КонецЕсли;
			
			Если МассивСтрокОстатков[0].КоличествоОстаток <= 0 Тогда
				ТаблицаОстатков.Удалить(МассивСтрокОстатков[0]);
			КонецЕсли;
			
			Если ПоложениеЗаказаПокупателя<>Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти И НоваяСтрока.ЗаказПокупателя<>ЗаказПокупателя Тогда
				ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Дата",				Дата);
		СтруктураДанных.Вставить("Организация",			Организация);
		СтруктураДанных.Вставить("ВидЦен",				ВидЦен);
		СтруктураДанных.Вставить("ВалютаДокумента",		ВалютаДокумента);
		СтруктураДанных.Вставить("СуммаВключаетНДС",	СуммаВключаетНДС); 
		
		ТаблицаРаботыИУслуги = РаботыИУслуги.Выгрузить();
		ТаблицаРаботыИУслуги.Колонки.Добавить("СтруктурнаяЕдиница", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
		
		ЦенообразованиеСервер.ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанных, ТаблицаРаботыИУслуги);
		
		РаботыИУслуги.Загрузить(ТаблицаРаботыИУслуги);		

		ЦенообразованиеСервер.ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанных, РаботыИУслуги);
		Для каждого СтрокаТабличнойЧасти Из РаботыИУслуги Цикл
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(
				СуммаВключаетНДС, 
				СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
				СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100
			);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьПоЗаказуПокупателя()

// Обработчик заполнения на основании документа СчетНаОплату.
//
// Параметры:
//	ДокументСсылкаСчетНаОплату - ДокументСсылка.СчетНаОплату - счет на оплату.
//	
Процедура ЗаполнитьПоСчетуНаОплату(ДокументСсылкаСчетНаОплату) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетНаОплату", ДокументСсылкаСчетНаОплату);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетНаОплату.Ссылка КАК ДокументОснование,
	|	СчетНаОплату.Организация КАК Организация,
	|	СчетНаОплату.ПодписьРуководителя КАК ПодписьРуководителя,
	|	СчетНаОплату.Контрагент КАК Контрагент,
	|	СчетНаОплату.Контрагент.КонтактноеЛицоПодписант КАК КонтактноеЛицоПодписант,
	|	СчетНаОплату.Договор КАК Договор,
	|	СчетНаОплату.ВидЦен КАК ВидЦен,
	|	СчетНаОплату.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|	СчетНаОплату.ВалютаДокумента КАК ВалютаДокумента,
	|	СчетНаОплату.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	СчетНаОплату.НалогообложениеНДС КАК НалогообложениеНДС,
	|	СчетНаОплату.ОснованиеПечатиСсылка КАК ОснованиеПечатиСсылка,
	|	СчетНаОплату.ОснованиеПечати КАК ОснованиеПечати,
	|	СчетНаОплату.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	СчетНаОплату.ПроцентСкидкиПоДисконтнойКарте КАК ПроцентСкидкиПоДисконтнойКарте,
	|	СчетНаОплату.Курс КАК Курс,
	|	СчетНаОплату.Кратность КАК Кратность,
	|	СчетНаОплату.СкидкиРассчитаны КАК СкидкиРассчитаны,
	|	ВЫБОР
	|		КОГДА СчетНаОплату.ДокументОснование ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА СчетНаОплату.ДокументОснование
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателяОснование,
	|	ВЫБОР
	|		КОГДА СчетНаОплату.ДокументОснование ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА СчетНаОплату.ДокументОснование.ВидОперации
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидОперацииОснования
	|ИЗ
	|	Документ.СчетНаОплату КАК СчетНаОплату
	|ГДЕ
	|	СчетНаОплату.Ссылка = &СчетНаОплату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетНаОплатуЗапасы.НомерСтроки КАК НомерСтроки,
	|	СчетНаОплатуЗапасы.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуЗапасы.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(СчетНаОплатуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ СчетНаОплатуЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	СчетНаОплатуЗапасы.Количество КАК Количество,
	|	СчетНаОплатуЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СчетНаОплатуЗапасы.Цена КАК Цена,
	|	СчетНаОплатуЗапасы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	СчетНаОплатуЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	СчетНаОплатуЗапасы.Сумма КАК Сумма,
	|	СчетНаОплатуЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	СчетНаОплатуЗапасы.СуммаНДС КАК СуммаНДС,
	|	СчетНаОплатуЗапасы.Всего КАК Всего,
	|	СчетНаОплатуЗапасы.Ссылка КАК ЗаказПокупателя,
	|	СчетНаОплатуЗапасы.Содержание КАК Содержание,
	|	СчетНаОплатуЗапасы.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	СчетНаОплатуЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	СчетНаОплатуЗапасы.КлючСвязи КАК КлючСвязи,
	|	СчетНаОплатуЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	СчетНаОплатуЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	СчетНаОплатуЗапасы.ДоляСтоимости КАК ДоляСтоимости
	|ИЗ
	|	ВТСчетНаОплатуЗапасы КАК СчетНаОплатуЗапасы
	|ГДЕ
	|	(СчетНаОплатуЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ИЛИ СчетНаОплатуЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СкидкиНаценки.Ссылка КАК Заказ,
	|	СкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СкидкиНаценки.Сумма КАК Сумма
	|ИЗ
	|	Документ.СчетНаОплату.СкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Ссылка = &СчетНаОплату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДобавленныеНаборы.Ссылка КАК Заказ,
	|	ДобавленныеНаборы.НоменклатураНабора КАК НоменклатураНабора,
	|	ДобавленныеНаборы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ДобавленныеНаборы.Количество КАК Количество
	|ПОМЕСТИТЬ ВТДобавленныеНаборы
	|ИЗ
	|	Документ.СчетНаОплату.ДобавленныеНаборы КАК ДобавленныеНаборы
	|ГДЕ
	|	ДобавленныеНаборы.Ссылка = &СчетНаОплату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДобавленныеНаборы.Заказ КАК Заказ,
	|	ДобавленныеНаборы.НоменклатураНабора КАК НоменклатураНабора,
	|	ДобавленныеНаборы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ДобавленныеНаборы.Количество КАК Количество
	|ИЗ
	|	ВТДобавленныеНаборы КАК ДобавленныеНаборы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДобавленныеНаборы.НоменклатураНабора КАК НоменклатураНабора,
	|	ДобавленныеНаборы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ДобавленныеНаборы.Количество КАК Количество
	|ИЗ
	|	ВТДобавленныеНаборы КАК ДобавленныеНаборы
	|ГДЕ
	|	ДобавленныеНаборы.НоменклатураНабора.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)";
	
	Документы.СчетНаОплату.ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(ДокументСсылкаСчетНаОплату, Запрос.МенеджерВременныхТаблиц, Истина);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ВыборкаШапка = МассивРезультатов[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	Если ВыборкаШапка.ВидОперацииОснования = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		ВызватьИсключение НСтр("ru = 'Нельзя ввести Акт выполненных работ на основании Счета на оплату, выписанного на Заказ-наряд!'");;
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка, , "СкидкиРассчитаны");
	
	Если ВалютаДокумента<>Константы.НациональнаяВалюта.Получить() Тогда
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
	ЗаказВТабличнойЧасти = НЕ УправлениеНебольшойФирмойПовтИсп.РеквизитВШапке("ПоложениеЗаказаПокупателяВДокументахОтгрузки");
	ЗаказПокупателяДляЗаполнения = ВыборкаШапка.ЗаказПокупателяОснование;
	
	Если НЕ ЗаказВТабличнойЧасти Тогда
		ЗаказПокупателя = ЗаказПокупателяДляЗаполнения;
	КонецЕсли;
	
	// Наборы
	ПропускаемыеНаборы = Новый Массив;
	ВыборкаИсключаемыеНаборы = МассивРезультатов[5].Выбрать();
	Пока ВыборкаИсключаемыеНаборы.Следующий() Цикл
		ДобавитьОписаниеНабора(ПропускаемыеНаборы, , ВыборкаИсключаемыеНаборы.НоменклатураНабора, ВыборкаИсключаемыеНаборы.ХарактеристикаНабора);	
	КонецЦикла; 
	// Конец Наборы
	
	// Заполнение табличной части документа.
	ВыборкаРаботы = МассивРезультатов[1].Выбрать();
	РаботыИУслуги.Очистить();
	Пока ВыборкаРаботы.Следующий() Цикл
			
		Если ЗначениеЗаполнено(ВыборкаРаботы.НоменклатураНабора) 
			И ПропуститьНабор(ПропускаемыеНаборы, ВыборкаРаботы) Тогда
			Продолжить;
		КонецЕсли; 
			
		НоваяСтрока = РаботыИУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРаботы);
		
		Если ЗаказВТабличнойЧасти Тогда
			НоваяСтрока.ЗаказПокупателя = ЗаказПокупателяДляЗаполнения;
		КонецЕсли;
			
	КонецЦикла;
	ЗаполнениеОбъектовУНФ.ЗаполнитьТаблицуПоШапке(ЭтотОбъект, "РаботыИУслуги", "ЗаказПокупателя", "ПоложениеЗаказаПокупателя");
	ЗаполнениеОбъектовУНФ.ЗаполнитьТаблицуПоШапке(ЭтотОбъект, "РаботыИУслуги", "ЗаказНаПроизводство", "ПоложениеЗаказаНаПроизводство");
	
	// АвтоматическиеСкидки
	СкидкиНаценки.Очистить();
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		ВыборкаСкидки = МассивРезультатов[2].Выбрать();
		Пока ВыборкаСкидки.Следующий() Цикл
			Если РаботыИУслуги.Найти(ВыборкаСкидки.КлючСвязи, "КлючСвязи") <> Неопределено Тогда
				НоваяСтрокаСкидокНаценок = СкидкиНаценки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаСкидокНаценок, ВыборкаСкидки);
			КонецЕсли;
		КонецЦикла;
		СкидкиРассчитаны = ВыборкаШапка.СкидкиРассчитаны;
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	// Наборы
	ДобавленныеНаборы.Очистить();
	ВыборкаНаборы = МассивРезультатов[4].Выбрать();
	Пока ВыборкаНаборы.Следующий() Цикл
		Если ПропуститьНабор(ПропускаемыеНаборы, ВыборкаНаборы) Тогда
			Продолжить;
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(ДобавленныеНаборы.Добавить(), ВыборкаНаборы);
	КонецЦикла; 
	// Конец Наборы
	
	// Взаиморасчеты
	СпособЗачетаПредоплаты = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(Договор, Контрагент, Истина);
	
КонецПроцедуры // ЗаполнитьПоСчетуНаОплату()

Процедура ЗаполнитьПоПриемуВРемонт(ДокументСсылкаПриемВРемонт) Экспорт
	
	// Заполнение шапки документа.
	ДокументОснование = ДокументСсылкаПриемВРемонт.Ссылка;
	Организация = ДокументСсылкаПриемВРемонт.Организация;
	ПодписьРуководителя = Организация.ПодписьРуководителя;
	Контрагент = ДокументСсылкаПриемВРемонт.Контрагент;
	КонтактноеЛицоПодписант = Контрагент.КонтактноеЛицоПодписант;
	Договор = ДокументСсылкаПриемВРемонт.Договор;
	
	ВидЦен = Договор.ВидЦен;
	ВидСкидкиНаценки = Договор.ВидСкидкиНаценки;
	ВалютаДокумента = Договор.ВалютаРасчетов;
	СуммаВключаетНДС = ?(ЗначениеЗаполнено(Договор.ВидЦен), Договор.ВидЦен.ЦенаВключаетНДС, Неопределено);
	НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Организация,, Дата);
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
	Курс = СтруктураПоВалюте.Курс;
	Кратность = СтруктураПоВалюте.Кратность;
	
	Проект = ДокументСсылкаПриемВРемонт.Проект;
	
КонецПроцедуры

Процедура ЗаполнитьПоСтруктуре(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.Свойство("МассивЗаказовПокупателей") Тогда
		ЗаполнитьПоЗаказуПокупателя(ДанныеЗаполнения)
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоДоговоруКонтрагента(ДанныеЗаполнения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
	|	ДоговорыКонтрагентов.Организация КАК Организация,
	|	ДоговорыКонтрагентов.ВалютаРасчетов КАК ВалютаДокумента,
	|	ДоговорыКонтрагентов.ВидЦен КАК ВидЦен,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ВидЦен.ЦенаВключаетНДС, ЛОЖЬ) КАК СуммаВключаетНДС,
	|	ДоговорыКонтрагентов.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|	ДоговорыКонтрагентов.ЭтоДоговорПередачиТоваровМеждуОрганизациями КАК ЭтоДоговорПередачиТоваровМеждуОрганизациями
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	ВыборкаШапка = Запрос.Выполнить().Выбрать();
	
	Если НЕ ВыборкаШапка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	Если ВыборкаШапка.ЭтоДоговорПередачиТоваровМеждуОрганизациями Тогда
		ВызватьИсключение НСтр("ru = 'Нельзя ввести акт выполненных работ по договору передачи товаров между организациями.'");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоДоговоруКонтрагента()

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЗаказВШапке = ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	
	ТаблицаРаботыИУслуги = РаботыИУслуги.Выгрузить(, "ЗаказПокупателя, Всего");
	ТаблицаРаботыИУслуги.Свернуть("ЗаказПокупателя", "Всего");
	
	ТаблицаПредоплата = Предоплата.Выгрузить(, "Заказ, СуммаПлатежа");
	ТаблицаПредоплата.Свернуть("Заказ", "СуммаПлатежа");
	
	Если ЗаказВШапке Тогда
		Для каждого СтрокаРаботыИУслуги Из ТаблицаРаботыИУслуги Цикл
			СтрокаРаботыИУслуги.ЗаказПокупателя = ЗаказПокупателя;
		КонецЦикла;
		Если Контрагент.ВестиРасчетыПоЗаказам Тогда
			Для каждого СтрокаПредоплата Из ТаблицаПредоплата Цикл
				СтрокаПредоплата.Заказ = ЗаказПокупателя;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Скидка 100%.
	ЕстьРучныеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиНаценкиПродажи");
	ЕстьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки"); // АвтоматическиеСкидки
	Если ЕстьРучныеСкидки Или ЕстьАвтоматическиеСкидки Тогда
		Для Каждого СтрокаРаботыИУслуги Из РаботыИУслуги Цикл
			// АвтоматическиеСкидки
			ТекСумма = СтрокаРаботыИУслуги.Цена * СтрокаРаботыИУслуги.Количество;
			ТекСуммаРучнойСкидки = ?(ЕстьРучныеСкидки, СтрокаРаботыИУслуги.СуммаСкидкиНаценки, 0);
			ТекСуммаАвтоматическойСкидки = ?(ЕстьАвтоматическиеСкидки, СтрокаРаботыИУслуги.СуммаАвтоматическойСкидки, 0);
			ТекСуммаСкидки = ТекСуммаРучнойСкидки + ТекСуммаАвтоматическойСкидки;
			Если СтрокаРаботыИУслуги.ПроцентСкидкиНаценки <> 100
				И ТекСуммаСкидки < ТекСумма
				И Не ЗначениеЗаполнено(СтрокаРаботыИУслуги.Сумма) Тогда
				ТекстСообщения = СтрШаблон(НСтр(
					"ru = 'Не заполнена колонка ""Сумма"" в строке %1 списка ""Работы и услуги"".'"),
					СтрокаРаботыИУслуги.НомерСтроки);
				КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РаботыИУслуги",
					СтрокаРаботыИУслуги.НомерСтроки, "Сумма");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	КоличествоРаботыИУслуги = РаботыИУслуги.Количество();
	
	Для каждого Строка Из ТаблицаПредоплата Цикл
		
		НайденнаяСтрокаРаботыИУслуги = Неопределено;
		
		Если Контрагент.ВестиРасчетыПоЗаказам
		   И Строка.Заказ <> Неопределено
		   И Строка.Заказ <> Документы.ЗаказПокупателя.ПустаяСсылка()
		   И Строка.Заказ <> Документы.ЗаказПоставщику.ПустаяСсылка() Тогда
			НайденнаяСтрокаРаботыИУслуги = ТаблицаРаботыИУслуги.Найти(Строка.Заказ, "ЗаказПокупателя");
			Всего = ?(НайденнаяСтрокаРаботыИУслуги = Неопределено, 0, НайденнаяСтрокаРаботыИУслуги.Всего);
		ИначеЕсли Контрагент.ВестиРасчетыПоЗаказам Тогда
			НайденнаяСтрокаРаботыИУслуги = ТаблицаРаботыИУслуги.Найти(Неопределено, "ЗаказПокупателя");
			НайденнаяСтрокаРаботыИУслуги = ?(НайденнаяСтрокаРаботыИУслуги = Неопределено, ТаблицаРаботыИУслуги.Найти(Документы.ЗаказПокупателя.ПустаяСсылка(), "ЗаказПокупателя"), НайденнаяСтрокаРаботыИУслуги);
			Всего = ?(НайденнаяСтрокаРаботыИУслуги = Неопределено, 0, НайденнаяСтрокаРаботыИУслуги.Всего);
		Иначе
			Всего = РаботыИУслуги.Итог("Всего");
		КонецЕсли;
		
		Если НайденнаяСтрокаРаботыИУслуги = Неопределено И КоличествоРаботыИУслуги > 0 И ЗначениеЗаполнено(Строка.Заказ)
			И Контрагент.ВестиРасчетыПоЗаказам И Контрагент.ВестиРасчетыПоЗаказам Тогда
			ТекстСообщения = НСтр(
				"ru = 'Нельзя зачесть аванс по заказу отличному от указанных в табличной части ""Работы и услуги"".'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	РасчетыРаботаСФормамиВызовСервера.ПроверитьЗаполнениеДокументаПредоплаты(Контрагент, ПроверяемыеРеквизиты);
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
	КонецЕсли;
	
	ПроверитьЗаполнениеНоменклатурыПоДоговоруОбслуживания(Отказ);
	
	// Наборы
	НаборыСервер.ПроверитьТабличнуюЧасть(ЭтотОбъект, "РаботыИУслуги", Отказ);
	// КонецНаборы
	
	// ПодарочныеСертификаты
	Если Константы.ФункциональнаяОпцияИспользоватьПодарочныеСертификаты.Получить() Тогда
		
		Если Не РаботаСПодарочнымиСертификатами.УказанКонтрагентДляПредоплаты() Тогда
			ТекстСообщения = НСтр(
				"ru = 'Не заполнена константа ""Служебный контрагент для подарочных сертификатов"".
				|Необходимо указать контрагента: Продажи - Еще больше возможностей.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли;
		
		// Проверка срока и области действия подарочных сертификатов
		ВыполнитьПроверкуОграниченийСертификатов(Отказ);
		
	КонецЕсли;
	// Конец ПодарочныеСертификаты
	
	НоменклатураВДокументахСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, Отказ);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ОбработкаЗаполнения.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("Структура")] = "ЗаполнитьПоСтруктуре";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПокупателя")] = "ЗаполнитьПоЗаказуПокупателя";
	СтратегияЗаполнения[Тип("ДокументСсылка.СчетНаОплату")] = "ЗаполнитьПоСчетуНаОплату";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриемИПередачаВРемонт")] = "ЗаполнитьПоПриемуВРемонт";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказНаПроизводство")] = "ЗаполнитьПоЗаказуНаПроизводство";
	СтратегияЗаполнения[Тип("СправочникСсылка.ДоговорыКонтрагентов")] = "ЗаполнитьПоДоговоруКонтрагента";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПоложениеЗаказаПокупателя <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Для каждого СтрокаТабличнойЧасти Из РаботыИУслуги Цикл
			СтрокаТабличнойЧасти.ЗаказПокупателя = ЗаказПокупателя;
		КонецЦикла;
	Иначе
		ЗаказПокупателя = ЗаполнениеОбъектовУНФ.ЗначениеДляШапки(РаботыИУслуги, "ЗаказПокупателя");
	КонецЕсли;
	Если ПоложениеЗаказаНаПроизводство <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Для каждого СтрокаТабличнойЧасти Из РаботыИУслуги Цикл
			СтрокаТабличнойЧасти.ЗаказНаПроизводство = ЗаказНаПроизводство;
		КонецЦикла;
	Иначе
		ЗаказНаПроизводство = ЗаполнениеОбъектовУНФ.ЗначениеДляШапки(РаботыИУслуги, "ЗаказНаПроизводство");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент)
	И НЕ Контрагент.ВестиРасчетыПоДоговорам
	И НЕ ЗначениеЗаполнено(Договор) Тогда
		Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	СуммаДокумента = РаботыИУслуги.Итог("Всего");
	
	РасчетыПроведениеДокументов.ПередЗаписьюНакладной(ЭтотОбъект);
	
	// До включения автоматических скидок будем считать, что скидки рассчитаны.
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		СкидкиРассчитаны = Истина;
	КонецЕсли;
	
	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ИдентификаторПлатежа) Тогда
		ИдентификаторПлатежа = РасчетыСлужебный.ПолучитьУникальныйИдентификаторПлатежа(ЭтотОбъект);
	КонецЕсли; 
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	// Взаиморасчеты
	СоответствиеТабличныхЧастейИРеквизитаЗаказ = Новый Соответствие;
	СоответствиеТабличныхЧастейИРеквизитаЗаказ.Вставить("РаботыИУслуги", "ЗаказПокупателя");
	РасчетыПроведениеДокументов.ИнициализироватьДополнительныеСвойстваДляПроведения(ЭтотОбъект, ДополнительныеСвойства, Отказ, Ложь, СоответствиеТабличныхЧастейИРеквизитаЗаказ);
	// Конец Взаиморасчеты
	
	// Инициализация данных документа.
	Документы.АктВыполненныхРабот.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Взаиморасчеты
	// Проверим, можно ли продолжать и не было ли отказа в процедурах
	// формирования движений по взаиморасчетам.
	Отказ = ДополнительныеСвойства.Отказ;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// Конец Взаиморасчеты
	
	// Подготовка наборов записей.
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ПроведениеДокументовУНФ.ОтразитьДвижения("Запасы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ВыпускПродукции", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("Продажи", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗаказыПокупателей", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыСПокупателями", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыКассовыйМетод", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыНераспределенные", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыОтложенные", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗаказыНаПроизводство", ТаблицыДляДвижений, Движения, Отказ);
	
	ПроведениеДокументовУНФ.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	
	// ДисконтныеКарты
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПродажиПоДисконтнымКартам", ТаблицыДляДвижений, Движения, Отказ);
	// АвтоматическиеСкидки
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПредоставленныеСкидки", ТаблицыДляДвижений, Движения, Отказ);
	// Эквайринг
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыКассовыйМетодЭквайринг", ТаблицыДляДвижений, Движения, Отказ);
	// Подарочные сертификаты
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПодарочныеСертификаты", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаПодарочнымиСертификатами", ТаблицыДляДвижений, Движения, Отказ);
	
	// Суммы документов для регламентированного учета
	ПроведениеДокументовУНФ.ОтразитьДвижения("СуммыДокументовРегламентированныйУчет", ТаблицыДляДвижений, Движения, Отказ);
	
	// Взаиморасчеты
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаДокументов", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаСчетовИЗаказов", ТаблицыДляДвижений, Движения, Отказ);
	// Конец Взаиморасчеты
	
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыИАгентскиеУслугиПринятые", ТаблицыДляДвижений, Движения, Отказ);
	
	// Запись наборов записей.
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Взаиморасчеты
	Если ДополнительныеСвойства.Свойство("ТаблицаДокументовДляИзменения")
		И ДополнительныеСвойства.ТаблицаДокументовДляИзменения.Количество() > 0 Тогда
		РасчетыПроведениеДокументов.ОбработатьТаблицуДокументовДляИзмененияПриОтгрузке(ДополнительныеСвойства, Отказ);
	КонецЕсли;
	// Конец Взаиморасчеты
	
	// Контроль возникновения отрицательного остатка.
	Документы.АктВыполненныхРабот.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа.
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	// Взаиморасчеты
	СоответствиеТабличныхЧастейИРеквизитаЗаказ = Новый Соответствие;
	СоответствиеТабличныхЧастейИРеквизитаЗаказ.Вставить("РаботыИУслуги", "ЗаказПокупателя");
	РасчетыПроведениеДокументов.ИнициализироватьДополнительныеСвойстваДляПроведения(ЭтотОбъект, ДополнительныеСвойства, Отказ, Ложь, СоответствиеТабличныхЧастейИРеквизитаЗаказ);
	// Конец Взаиморасчеты
	
	// Подготовка наборов записей.
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей.
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Взаиморасчеты
	Если ДополнительныеСвойства.Свойство("ТаблицаДокументовДляИзменения")
		И ДополнительныеСвойства.ТаблицаДокументовДляИзменения.Количество() > 0 Тогда
		РасчетыПроведениеДокументов.ОбработатьТаблицуДокументовДляИзмененияПриОтгрузке(ДополнительныеСвойства, Отказ);
	КонецЕсли;
	// Конец Взаиморасчеты
	
	// Контроль возникновения отрицательного остатка.
	Документы.АктВыполненныхРабот.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
	// Подчиненный счет-фактура
	Если НЕ Отказ Тогда
		
		СчетаФактурыУНФ.ОтменитьПроведениеПодчиненногоСчетаФактуры(Ссылка, Номер, Дата, ДополнительныеСвойства, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Процедура - обработчик события ПриКопировании объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	Предоплата.Очистить();
	
	НомерЧекаККМ = 0;
	ПодписьКассира = Неопределено;
	
КонецПроцедуры // ПриКопировании()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СчетаФактурыУНФ.ПриЗаписиДокументаОснованияСчетаФактуры(Ссылка, ДополнительныеСвойства, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьПроверкуОграниченийСертификатов(Отказ)
	
	// Проверка срока действия
	РаботаСПодарочнымиСертификатами.ПроверитьСрокДействия(ЭтотОбъект, "Предоплата", Отказ);
	
	// Проверка области действия
	СтруктураДляПроверки = Новый Структура;
	СтруктураДляПроверки.Вставить("Запасы", РаботыИУслуги.Выгрузить(,"Номенклатура, Характеристика, Сумма"));
	Сертификаты = Предоплата.Выгрузить(
		Новый Структура("ОплатаСертификатом", Истина),
		"Документ, СуммаРасчетов");
	Сертификаты.Колонки.Документ.Имя = "ПодарочныйСертификат";
	Сертификаты.Колонки.СуммаРасчетов.Имя = "Сумма";
	СтруктураДляПроверки.Вставить("Сертификаты", Сертификаты);
	РаботаСПодарочнымиСертификатами.ПроверитьОбластьДействияСертификатов(СтруктураДляПроверки, Отказ);
	
КонецПроцедуры

// Наборы
Процедура ДобавитьОписаниеНабора(ПропускаемыеНаборы, Заказ = Неопределено, НоменклатураНабора, ХарактеристикаНабора)
	
	Для каждого ОписаниеНабора Из ПропускаемыеНаборы Цикл
		Если ОписаниеНабора.НоменклатураНабора=НоменклатураНабора 
			И ОписаниеНабора.ХарактеристикаНабора=ХарактеристикаНабора
			И (Заказ=Неопределено ИЛИ НЕ ОписаниеНабора.Свойство("ЗаказПокупателя") ИЛИ ОписаниеНабора.ЗаказПокупателя=Заказ) Тогда
			// Уже добавлено
			Возврат;
		КонецЕсли; 
	КонецЦикла; 	
	СтруктураНабора = Новый Структура;
	Если Заказ<>Неопределено Тогда
		СтруктураНабора.Вставить("ЗаказПокупателя", Заказ);
	КонецЕсли; 
	СтруктураНабора.Вставить("НоменклатураНабора", НоменклатураНабора);
	СтруктураНабора.Вставить("ХарактеристикаНабора", ХарактеристикаНабора);
	ПропускаемыеНаборы.Добавить(СтруктураНабора);
	
КонецПроцедуры

Функция ПропуститьНабор(ПропускаемыеНаборы, СтрокаНабора)
	
	Для каждого ОписаниеНабора Из ПропускаемыеНаборы Цикл
		Если ОписаниеНабора.НоменклатураНабора=СтрокаНабора.НоменклатураНабора И
			ОписаниеНабора.ХарактеристикаНабора=СтрокаНабора.ХарактеристикаНабора И
			(НЕ ОписаниеНабора.Свойство("Заказ") ИЛИ ОписаниеНабора.Заказ=СтрокаНабора.Заказ) Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

Процедура ДобавитьНаборы(ВыборкаНаборы)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("НоменклатураНабора", ВыборкаНаборы.НоменклатураНабора);
	СтруктураОтбора.Вставить("ХарактеристикаНабора", ВыборкаНаборы.ХарактеристикаНабора);
	СтрокиНаборы = ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
	Если СтрокиНаборы.Количество()=0 Тогда
		ЗаполнитьЗначенияСвойств(ДобавленныеНаборы.Добавить(), ВыборкаНаборы);
	Иначе
		СтрокиНаборы[0].Количество = СтрокиНаборы[0].Количество + ВыборкаНаборы.Количество;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеНоменклатурыПоДоговоруОбслуживания(Отказ)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБиллинг") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "ЭтоДоговорОбслуживания, ДоговорОбслуживанияТарифныйПлан");
	
	Если Не ДанныеДоговора.ЭтоДоговорОбслуживания Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаЗапасы Из РаботыИУслуги Цикл
		РазрешенаПродажаПозиции = Справочники.ДоговорыКонтрагентов.РазрешенаПродажаНоменклатурыПоДоговоруОбслуживания(
			Договор, СтрокаЗапасы.Номенклатура, СтрокаЗапасы.Характеристика);
		Если РазрешенаПродажаПозиции Тогда
			Продолжить;
		КонецЕсли;
		ТекстСообщения = НСтр("ru = 'Запрещено проводить незапланированные услуги/работы по текущему договору обслуживания.'");
		ПутьКДанным = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РаботыИУслуги", СтрокаЗапасы.НомерСтроки, "Номенклатура");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДанныеДоговора.ДоговорОбслуживанияТарифныйПлан,
			ПутьКДанным, , Отказ);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли