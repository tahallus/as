#Область ОписаниеПеременных

&НаКлиенте
Перем КэшНайденныхКонтактов;

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиенте
Процедура УстановитьДоступностьКнопкиОткрытияКонтрагента()
	
	Если ЗначениеЗаполнено(Объект.Поставщик) Тогда
		Элементы.Поставщик.КнопкаОткрытия = Истина;
	Иначе
		Элементы.Поставщик.КнопкаОткрытия = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкорректироватьСуммуОплатыЕслиНужно(СПредупреждением = Ложь)
	
	Если Объект.СуммаОплаты > Объект.Товары.Итог("Сумма") Тогда
		Если СПредупреждением Тогда
			ПоказатьПредупреждение(Новый ОписаниеОповещения("СкорректироватьСуммуОплатыЕслиНужноЗавершение", ЭтаФорма), НСтр("ru='Сумма оплаты не может быть больше суммы документа!';en='Payment amount cannot be greater than the sum of the document!'"),,ОбщегоНазначенияМПВызовСервераПовтИсп.ПолучитьСинонимКонфигурации());
			Возврат;
		КонецЕсли;
		Объект.СуммаОплаты = Объект.Товары.Итог("Сумма");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкорректироватьСуммуОплатыЕслиНужноЗавершение(ДополнительныеПараметры) Экспорт
	
	Объект.СуммаОплаты = Объект.Товары.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуДокумента()
	
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма");
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеТоварПриИзменении(СтруктураДанных)
	
	ТоварСсылка = СтруктураДанных.Товар;
	
	Если ЗначениеЗаполнено(ТоварСсылка) Тогда
		ТоварОбъект = ТоварСсылка.ПолучитьОбъект();
		ТоварЦена = ?(СтруктураДанных.ПриходТовара, ТоварОбъект.ПолучитьЦенуПоставщиков(), ТоварОбъект.ПолучитьЦенуПродажи());
	Иначе
		ТоварОбъект = Неопределено;
		ТоварЦена = 0;
	КонецЕсли;
	
	СтруктураДанных.Вставить("Цена", ТоварЦена);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВСтроке(ТекущаяСтрока)
	
	ТекущаяСтрока.Сумма = ТекущаяСтрока.Количество * ТекущаяСтрока.Цена;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЦенуВСтроке(ТекущаяСтрока)
	
	Если ТекущаяСтрока.Количество <> 0 Тогда
		ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма / ТекущаяСтрока.Количество;
	Иначе
		ТекущаяСтрока.Цена = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДействияКомандныхПанелейФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	// Сбор статистики
	СборСтатистикиМПКлиентСерверПереопределяемый.ОтправитьДействиеВGA(ЭтаФорма.ИмяФормы + ".Команда." + Команда.Имя);
	// Конец Сбор статистики

	Объект.СуммаОплаты = Объект.Товары.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура Справка(Команда)
	
	// Сбор статистики
	СборСтатистикиМПКлиентСерверПереопределяемый.ОтправитьДействиеВGA(ЭтаФорма.ИмяФормы + ".Команда." + Команда.Имя);
	// Конец Сбор статистики
	
	// АПК:534-выкл методы безопасного запуска обеспечиваются этой функцией
	ПерейтиПоНавигационнойСсылке("https://sbm.1c.ru/about/tovarnye-dokumenty/kartochka-dokumenta-zakupka/");
	// АПК:534-вкл
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Сбор статистики
	СборСтатистикиМПКлиентСерверПереопределяемый.ОтправитьОткрытиеЭкранаВGA(ЭтаФорма.ИмяФормы);
	// Конец Сбор статистики
	
	ОбщегоНазначенияМПСервер.УстановитьЗаголовокФормы(ЭтаФорма, НСтр("ru='Закупка';en='Purchase Invoice'"));
	ИспользоватьБыстрыйПодборТоваров = ОбщегоНазначенияМПВызовСервера.ПолучитьЗначениеКонстанты("ИспользоватьБыстрыйПодборТоваровМП");
	
	УстановитьОтображениеНомера();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ОбщегоНазначенияМПСервер.УстановитьЗаголовокФормы(ЭтаФорма, НСтр("ru='Закупка';en='Purchase Invoice'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ИзменилосьКоличествоТовара");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СозданНовыйКонтрагент" Тогда
		Объект.Поставщик = Параметр;
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменилисьНастройки" Тогда
		ИспользоватьБыстрыйПодборТоваров = ОбщегоНазначенияМПВызовСервера.ПолучитьЗначениеКонстанты("ИспользоватьБыстрыйПодборТоваровМП");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьКнопкиОткрытияКонтрагента();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	#Если НЕ МобильноеПриложениеСервер Тогда
		Если ВРег(Метаданные.Имя) = ВРег("УправлениеНебольшойФирмойНаМобильном") Тогда
			Возврат;
		КонецЕсли;
		// АПК:488-выкл методы безопасного запуска обеспечиваются этой функцией
		МодульСинхронизацияПушУведомленияМПУНФ = Вычислить("СинхронизацияПушУведомленияМПУНФ");
		// АПК:488-вкл
		Если ТипЗнч(МодульСинхронизацияПушУведомленияМПУНФ) = Тип("ОбщийМодуль") Тогда
			МодульСинхронизацияПушУведомленияМПУНФ.ОтправитьПушУведомление("001");
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПоставщикАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	#Если МобильноеПриложениеКлиент Тогда
		// АПК:488-выкл методы безопасного запуска обеспечиваются этой функцией
		МодульМенеджерКонтактовКлиент = Вычислить("МенеджерКонтактовКлиент");
		// АПК:488-вкл
		Если ТипЗнч(МодульМенеджерКонтактовКлиент) = Тип("ОбщийМодуль") Тогда
			МодульМенеджерКонтактовКлиент.ЗаполнитьСписокВыбораИзКонтактнойКниги(
			Текст,
			ДанныеВыбора,
			СтандартнаяОбработка,
			КэшНайденныхКонтактов,
			Истина
			);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	#Если МобильноеПриложениеКлиент Тогда
		// АПК:488-выкл методы безопасного запуска обеспечиваются этой функцией
		МодульМенеджерКонтактовКлиент = Вычислить("МенеджерКонтактовКлиент");
		// АПК:488-вкл
		Если ТипЗнч(МодульМенеджерКонтактовКлиент) = Тип("ОбщийМодуль") Тогда
			МодульМенеджерКонтактовКлиент.ОбработкаВыбора(
			Элемент,
			ВыбранноеЗначение,
			СтандартнаяОбработка,
			ЭтаФорма,
			КэшНайденныхКонтактов
			);
		КонецЕсли;
	#КонецЕсли

	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	СкорректироватьСуммуОплатыЕслиНужно();
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыТоварПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураДанных = Новый Структура("Товар, ПриходТовара", ТекущаяСтрока.Товар, Истина);
	ПолучитьДанныеТоварПриИзменении(СтруктураДанных);
	
	Если СтруктураДанных.Цена <> 0 Тогда
		ТекущаяСтрока.Цена = СтруктураДанных.Цена;
	КонецЕсли;
	Если ТекущаяСтрока.Количество = 0 Тогда
		ТекущаяСтрока.Количество = 1;
	КонецЕсли;
	
	РассчитатьСуммуВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	РассчитатьСуммуВСтроке(ТекущаяСтрока);
	СкорректироватьСуммуОплатыЕслиНужно();
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	РассчитатьСуммуВСтроке(ТекущаяСтрока);
	СкорректироватьСуммуОплатыЕслиНужно();
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	РассчитатьЦенуВСтроке(ТекущаяСтрока);
	СкорректироватьСуммуОплатыЕслиНужно();
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплатыПриИзменении(Элемент)
	
	СкорректироватьСуммуОплатыЕслиНужно(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	
	УстановитьДоступностьКнопкиОткрытияКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если ИспользоватьБыстрыйПодборТоваров Тогда
		Отказ = Истина;
		ОткрытьФорму("Справочник.ТоварыМП.ФормаВыбора", Новый Структура("РежимВыбора, ТекущаяСтрока", Истина, ВыбранныйТовар), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ДобавитьТоварВТаблицу(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварВТаблицу(Товар)
	
	Если НЕ ЗначениеЗаполнено(Товар) Тогда
		Возврат;
	КонецЕсли;
	ВыбранныйТовар = Товар;
	НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Товар", Товар));
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + 1;
		РассчитатьСуммуВСтроке(НайденныеСтроки[0]);
	Иначе
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Количество = 1;
		НоваяСтрока.Товар = Товар;
		СтруктураДанных = Новый Структура("Товар, ПриходТовара", Товар, Ложь);
		ПолучитьДанныеТоварПриИзменении(СтруктураДанных);
		Если СтруктураДанных.Цена <> 0 Тогда
			НоваяСтрока.Цена = СтруктураДанных.Цена;
		КонецЕсли;
		Если НоваяСтрока.Количество = 0 Тогда
			НоваяСтрока.Количество = 1;
		КонецЕсли;
		РассчитатьСуммуВСтроке(НоваяСтрока);
	КонецЕсли;
	СкорректироватьСуммуОплатыЕслиНужно();
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// Сбор статистики
	СборСтатистикиМПКлиентПереопределяемый.ОтправитьДействиеВGA(ЭтаФорма.ИмяФормы + ".Закрытие",,,ЗавершениеРаботы);
	// Конец Сбор статистики
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеНомера()
	
	Если Константы.СинхронизацияВключенаМП.Получить() И Объект.НомерПодтвержден = Ложь Тогда
		ЭтаФорма.Элементы.НомерНеПодтвержденЦБ.Видимость = Истина;
		ЭтаФорма.Элементы.Номер.Видимость = Ложь;
	Иначе
		ЭтаФорма.Элементы.НомерНеПодтвержденЦБ.Видимость = Ложь;
		ЭтаФорма.Элементы.Номер.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
