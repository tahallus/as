#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ИнтерфейсПечати

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Справки2НДФЛ") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Справки2НДФЛ", "Справка 2-НДФЛ для передачи в ИФНС", СформироватьПечатнуюФорму2НДФЛ(МассивОбъектов,ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Реестр2011") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Реестр2011", "Реестр справок о доходах (2-НДФЛ)", СформироватьПечатнуюФормуРеестрСведений(МассивОбъектов,ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Реестр2019") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПФ_MXL_Реестр2019", "Реестр", СформироватьПечатнуюФормуРеестрСведений(МассивОбъектов, ОбъектыПечати, "ПФ_MXL_Реестр2019"));
	КонецЕсли;
КонецПроцедуры

// Функция формирует табличный документ с печатной формой справки 2-НДФЛ
//
// Возвращаемое значение:
//  Табличный документ - печатная форма справки 2-НДФЛ
//
Функция СформироватьПечатнуюФорму2НДФЛ(МассивОбъектов,ОбъектыПечати) Экспорт
	
	ДанныеНА = СправкиПоНДФЛ.СправкиНДФЛДанныеДляПечати(МассивОбъектов);
	ТаблицыДокумента = ПолучитьДанныеПоСправке2НДФЛ(МассивОбъектов);
	
	Документы2019Года = Новый Массив;
	ДокументыДо2019Года = Новый Массив;
	Для Каждого Справка Из ДанныеНА Цикл
		Если СправкиПоНДФЛ.ВыводитьФорму2НДФЛ2019Года(Справка.Значение.НалоговыйПериод, Справка.Значение.Дата) Тогда
			Документы2019Года.Добавить(Справка.Ключ);
		Иначе
			ДокументыДо2019Года.Добавить(Справка.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	ПечатныеФормы2НДФЛ = Новый ТабличныйДокумент;
	ПечатныеФормы2НДФЛ.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Если ДокументыДо2019Года.Количество() Тогда
		ПечатныеФормы2НДФЛ.Вывести(
			СправкиПоНДФЛ.СформироватьПечатнуюФорму2НДФЛ(
				ОбъектыПечати,
				ДокументыДо2019Года,
				ДанныеНА,
				ТаблицыДокумента.Сотрудники,
				ТаблицыДокумента.СведенияОДоходах,
				ТаблицыДокумента.СведенияОВычетах,
				ТаблицыДокумента.Уведомления));
	КонецЕсли;
	
	Если Документы2019Года.Количество() <> 0 Тогда 
		Если ПечатныеФормы2НДФЛ.ВысотаТаблицы > 0 Тогда
			ПечатныеФормы2НДФЛ.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПечатныеФормы2НДФЛ.Вывести(СформироватьПечатнуюФорму2НДФЛ2019Года(
			ОбъектыПечати,
			Документы2019Года,
			ДанныеНА,
			ТаблицыДокумента.Сотрудники,
			ТаблицыДокумента.СведенияОДоходах,
			ТаблицыДокумента.СведенияОВычетах,
			ТаблицыДокумента.Уведомления));
	КонецЕсли;
	
	Возврат ПечатныеФормы2НДФЛ;
	
КонецФункции

Функция СформироватьПечатнуюФорму2НДФЛ2019Года(ОбъектыПечати, МассивОбъектов, ДанныеДокументов, ДанныеСотрудниковДокументов, ДанныеОДоходахДокументов, ДанныеОВычетахДокументов, ДанныеОбУведомленияхДокументов)

	СоответствиеКодовСтран = Новый Соответствие;
	СоответствиеИменСтран = Новый Соответствие;
	СоответствиеДокументовУдостоверяющихЛичность = Новый Соответствие;
	СоответствиеКодовДоходов = Новый Соответствие;
	СоответствиеКодовВычетов = Новый Соответствие;
	СправкиПоНДФЛ.ПрочитатьКлассификаторыВСоответствия( СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющихЛичность, СоответствиеКодовДоходов, СоответствиеКодовВычетов);
		
	ТабличныйДокументСправки = Новый ТабличныйДокумент;
	ТабличныйДокументСправки.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Справок2_НДФЛ_2019";
	ТабличныйДокументСправки.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокументСправки.ПолеСлева = 5;
	ТабличныйДокументСправки.ПолеСправа = 5;
	ТабличныйДокументСправки.ПолеСверху = 5;
	ТабличныйДокументСправки.ПолеСнизу = 5;
	ТабличныйДокументСправки.РазмерКолонтитулаСверху = 0;
	ТабличныйДокументСправки.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокументСправки.АвтоМасштаб = Истина;
	
	МакетСправки = Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.ПолучитьМакет("Форма2НДФЛс2019");
	
	НомерСтраницы = 0;
	Для Каждого Ссылка Из МассивОбъектов Цикл
		
		ДанныеТекущегоДокумента = ДанныеДокументов.Получить(Ссылка);
		
		СтрокиДанныхПоСотрудникам = ДанныеСотрудниковДокументов.Скопировать(Новый Структура("Ссылка", Ссылка));
		СтрокиДанныхПоСотрудникам.Сортировать("НомерСправки");
		
		СтруктураОтбора = Новый Структура("Ссылка, Сотрудник");
		Для Каждого ДанныеСотрудника Из СтрокиДанныхПоСотрудникам Цикл
			
			СтруктураОтбора = Новый Структура("Ссылка, НомерСправки", Ссылка, ДанныеСотрудника.НомерСправки);
			
				ТитульныйЛист = МакетСправки.ПолучитьОбласть("ТитульныйЛист");
				НомерСтраницы = НомерСтраницы + 1;
				
				// Шапка справки.
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(ДанныеТекущегоДокумента.ИННорг, ТитульныйЛист, "ИННорг", 12);
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(ДанныеТекущегоДокумента.КПП, ТитульныйЛист, "КППорг", 9);
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Формат(НомерСтраницы, "ЧЦ=3; ЧВН=; ЧГ="), ТитульныйЛист, "НомерСтраницы", 3);
				ВывестиЦелоеЧислоВЯчейки(ДанныеСотрудника.НомерСправки, ТитульныйЛист, "НомерСправки", 7);
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Формат(ДанныеТекущегоДокумента.НалоговыйПериод, "ЧЦ=10; ЧДЦ=0; ЧГ=0"), ТитульныйЛист, "Год", 4);
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(ДанныеТекущегоДокумента.Признак, ТитульныйЛист, "Признак", 1);
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Формат(ДанныеТекущегоДокумента.НомерКорректировки, "ЧЦ=2; ЧН=00; ЧВН="), ТитульныйЛист, "НомерКорректировки", 2);
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(ДанныеТекущегоДокумента.КодНалоговогоОргана, ТитульныйЛист, "КодНО", 4);
				
				НазваниеОрганизации = ДанныеТекущегоДокумента.НазваниеОрганизации;
				Если ЗначениеЗаполнено(ДанныеТекущегоДокумента.ФормаРеорганизации) Тогда
					НазваниеОрганизации = ДанныеТекущегоДокумента.НаименованиеРеорганизованнойОрганизации
				КонецЕсли;
				ВывестиНаименованиеНалоговогоАгента(НазваниеОрганизации, ТитульныйЛист, "НА", 3, 40);
				
				Если ЗначениеЗаполнено(ДанныеТекущегоДокумента.ФормаРеорганизации) Тогда
					ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(ДанныеТекущегоДокумента.ФормаРеорганизации, ТитульныйЛист, "ФР", 1);
					ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(ДанныеТекущегоДокумента.ИННРеорганизованнойОрганизации, ТитульныйЛист, "ИННР", 10);
					ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(ДанныеТекущегоДокумента.КППРеорганизованнойОрганизации, ТитульныйЛист, "КППР", 9);
				КонецЕсли;
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(ДанныеТекущегоДокумента.ОКТМО, ТитульныйЛист, "ОКТМО", 11);
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(ДанныеТекущегоДокумента.Телефон, ТитульныйЛист, "Телефон", 20);
				
				// Подписант
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно("1", ТитульныйЛист, "ТипПодписанта", 1);
				ВывестиНаименованиеНалоговогоАгента(ДанныеТекущегоДокумента.ФИОПодписавшего, ТитульныйЛист, "ФИОПодписанта", 3, 40);
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Формат(ДанныеТекущегоДокумента.Дата, "ДФ=ddMMyyyy"), ТитульныйЛист, "ДатаПодписи", 8);
				
				// Раздел 1. Данные о физическом лице.
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(ДанныеСотрудника.ИНН, ТитульныйЛист, "ИННФЛ", 12);
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(ДанныеСотрудника.Фамилия, ТитульныйЛист, "Фамилия", 36);
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(ДанныеСотрудника.Имя, ТитульныйЛист, "Имя", 36);
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(ДанныеСотрудника.Отчество, ТитульныйЛист, "Отчество", 36);
				
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно("1", ТитульныйЛист, "СтатусНП", 1);
				
				Если ЗначениеЗаполнено(ДанныеСотрудника.ДатаРождения) Тогда
					ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Формат(ДанныеСотрудника.ДатаРождения, "ДФ=ddMMyyyy"), ТитульныйЛист, "ДатаРождения", 8);
				КонецЕсли;
				
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(СоответствиеКодовСтран[ДанныеСотрудника.Гражданство], ТитульныйЛист, "Страна", 3);
				
				Описание = СоответствиеДокументовУдостоверяющихЛичность.Получить(ДанныеСотрудника.ВидДокумента);
				Если Описание <> Неопределено Тогда
					ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Описание, ТитульныйЛист, "Документ", 2);
				КонецЕсли;
				
				СерияНомерДокумента = СокрЛП(ДанныеСотрудника.СерияДокумента) + " " + СокрЛП(ДанныеСотрудника.НомерДокумента);
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(СерияНомерДокумента, ТитульныйЛист, "СерияНомер", 20);
				
				Если ДанныеТекущегоДокумента.НомерКорректировки = 99 Тогда
					Если ТабличныйДокументСправки.ВысотаТаблицы > 0 Тогда
						ТабличныйДокументСправки.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					ТабличныйДокументСправки.Вывести(ТитульныйЛист);
					Продолжить;
				КонецЕсли;
				
				// Раздел 2. Общие суммы.
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно("13", ТитульныйЛист, "Ставка", 2);
				ВывестиСуммуВРубляхКопейкахВЯчейки(
					ДанныеСотрудника.ОбщаяСуммаДохода,
					ТитульныйЛист, "Доход", 17);
				ВывестиСуммуВРубляхКопейкахВЯчейки(
					ДанныеСотрудника.ОблагаемаяСуммаДохода,
					ТитульныйЛист, "База", 17);
				ВывестиЦелоеЧислоВЯчейки(
					ДанныеСотрудника.Исчислено,
					ТитульныйЛист, "Исчислено", 11);
				ВывестиЦелоеЧислоВЯчейки(
					ДанныеСотрудника.Удержано,
					ТитульныйЛист, "Удержано", 11);
				ВывестиЦелоеЧислоВЯчейки(
					ДанныеСотрудника.Перечислено,
					ТитульныйЛист, "Перечислено", 11);
				ВывестиЦелоеЧислоВЯчейки(
					ДанныеСотрудника.ИзлишнеУдержано,
					ТитульныйЛист, "ИзлишнеУдержано", 11);
				ВывестиЦелоеЧислоВЯчейки(
					ДанныеСотрудника.Задолженность,
					ТитульныйЛист, "НеУдержано", 11);
					
				// Раздел 3. Вычеты.
				ВычетыПоВидам = ДанныеОВычетахДокументов.Скопировать(СтруктураОтбора);
				ВычетыПоВидам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
				Для Каждого СтрокаТЗ Из ВычетыПоВидам Цикл
					СтрокаТЗ.КодВычетаСтрокой = СправкиПоНДФЛ.КодВычетаДляНалоговойОтчетности(ДанныеТекущегоДокумента.НалоговыйПериод, СтрокаТЗ.КодВычета);
					СтрокаТЗ.ГруппаВычета = СтрокаТЗ.ГруппаВычета;
				КонецЦикла;
				
				Уведомления = ДанныеОбУведомленияхДокументов.Скопировать(СтруктураОтбора);
				Уведомления.Колонки.Добавить("КодВидаУведомления", ОбщегоНазначения.ОписаниеТипаСтрока(1));
				НеопределенныеУведомления = Новый Массив;
				Для Каждого СтрокаУведомления Из Уведомления Цикл
					Если СтрокаУведомления.ГруппаВычета = Перечисления.ГруппыВычетовПоНДФЛ.Имущественные Тогда
						СтрокаУведомления.КодВидаУведомления = "1";
					ИначеЕсли СтрокаУведомления.ГруппаВычета = Перечисления.ГруппыВычетовПоНДФЛ.Социальные Тогда
						СтрокаУведомления.КодВидаУведомления = "2";
					Иначе
						НеопределенныеУведомления.Добавить(СтрокаУведомления);
					КонецЕсли;
				КонецЦикла;
				Для Каждого СтрокаУведомления Из НеопределенныеУведомления Цикл
					Уведомления.Удалить(СтрокаУведомления);
				КонецЦикла;
				
				// На листе помещаются 6 строк о вычетах и 1 уведомление 
				НеобходимоеКоличествоСтраниц = Макс(Уведомления.Количество(), Цел(ВычетыПоВидам.Количество()/6) + ?(ВычетыПоВидам.Количество()%6, 1, 0));
				Для НомерСтраницыСотрудника = 1 По НеобходимоеКоличествоСтраниц Цикл
					Если НомерСтраницыСотрудника <> 1 Тогда
						// дополнительный титульный лист
						Если ТабличныйДокументСправки.ВысотаТаблицы > 0 Тогда
							ТабличныйДокументСправки.ВывестиГоризонтальныйРазделительСтраниц();
						КонецЕсли;
						ТабличныйДокументСправки.Вывести(ТитульныйЛист);
						НомерСтраницы = НомерСтраницы + 1;
						ТитульныйЛист = МакетСправки.ПолучитьОбласть("ТитульныйЛист");
						
						ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(ДанныеТекущегоДокумента.ИННорг, ТитульныйЛист, "ИННорг", 12);
						ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(ДанныеТекущегоДокумента.КПП, ТитульныйЛист, "КППорг", 9);
						ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Формат(НомерСтраницы, "ЧЦ=3; ЧВН=; ЧГ="), ТитульныйЛист, "НомерСтраницы", 3);
						ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Формат(ДанныеТекущегоДокумента.НалоговыйПериод, "ЧЦ=10; ЧДЦ=0; ЧГ=0"), ТитульныйЛист, "Год", 4);
						ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(ДанныеТекущегоДокумента.Признак, ТитульныйЛист, "Признак", 1);
						ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Формат(ДанныеТекущегоДокумента.НомерКорректировки, "ЧЦ=2; ЧН=00; ЧВН="), ТитульныйЛист, "НомерКорректировки", 2);
						ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(ДанныеТекущегоДокумента.КодНалоговогоОргана, ТитульныйЛист, "КодНО", 4);
						ВывестиЦелоеЧислоВЯчейки(ДанныеСотрудника.НомерСправки, ТитульныйЛист, "НомерСправки", 7);
						
						НеобходимоВыводитьНаименованиеНА = ВычетыПоВидам.Количество() > (НомерСтраницыСотрудника-1) * 6;
						Если НеобходимоВыводитьНаименованиеНА Тогда
							НазваниеОрганизации = ДанныеТекущегоДокумента.НазваниеОрганизации;
							Если ЗначениеЗаполнено(ДанныеТекущегоДокумента.ФормаРеорганизации) Тогда
								НазваниеОрганизации = ДанныеТекущегоДокумента.НаименованиеРеорганизованнойОрганизации
							КонецЕсли;
							ВывестиНаименованиеНалоговогоАгента(НазваниеОрганизации, ТитульныйЛист, "НА", 3, 40);
						КонецЕсли;
					КонецЕсли;
					
					Для Индекс = 1 По 6 Цикл
						ИндексСтрокиВычетов = Индекс + 6 * (НомерСтраницыСотрудника - 1);
						Если ВычетыПоВидам.Количество() < ИндексСтрокиВычетов Тогда
							Прервать;
						КонецЕсли;
						СтрокаВычетов = ВычетыПоВидам[ИндексСтрокиВычетов-1];
						ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(СтрокаВычетов.КодВычетаСтрокой, ТитульныйЛист, "КодВычета" + Индекс, 3);
						ВывестиСуммуВРубляхКопейкахВЯчейки(СтрокаВычетов.СуммаВычета, ТитульныйЛист, "СуммаВычета" + Индекс, 9);
					КонецЦикла;
					
					Если Уведомления.Количество() >= НомерСтраницыСотрудника Тогда
						СтрокаУведомления = Уведомления[НомерСтраницыСотрудника-1];
						ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(СтрокаУведомления.КодВидаУведомления, ТитульныйЛист, "КодУведомления", 1);
						ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(СтрокаУведомления.НомерУведомления, ТитульныйЛист, "НомерУведомления", 15);
						ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Формат(СтрокаУведомления.ДатаУведомления, "ДФ=ddMMyyyy"), ТитульныйЛист, "ДатаУведомления", 8);
						ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(СтрокаУведомления.КодНалоговогоОрганаУведомления, ТитульныйЛист, "НОУведомления", 4);
					КонецЕсли;
				КонецЦикла;
				
				Если ТабличныйДокументСправки.ВысотаТаблицы > 0 Тогда
					ТабличныйДокументСправки.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				ТабличныйДокументСправки.Вывести(ТитульныйЛист);
				
			// Приложение к справке.
			ДоходыСотрудника = ДанныеОДоходахДокументов.Скопировать(СтруктураОтбора);
			Если ДоходыСотрудника.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДоходыСотрудника.Сортировать("НомерСправки, МесяцНалоговогоПериода, КодДохода, КодВычета Убыв");
			
			ДоходыПоМесяцамИКодам = ДанныеОДоходахДокументов.СкопироватьКолонки();
			ДоходыПоМесяцамИКодам.Колонки.Добавить("КодДоходаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4)));
			ДоходыПоМесяцамИКодам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
			
			ДанныеПрошлойСтроки = Новый Структура("НомерСправки, Ставка, МесяцНалоговогоПериода, КодДохода, КодВычета");
			СтрокаВидаДохода = Неопределено;
			СтрокаВидаВычета = Неопределено;
			Для Каждого ДоходСотрудника Из ДоходыСотрудника Цикл
				Если ДоходСотрудника.НомерСправки <> ДанныеПрошлойСтроки.НомерСправки 
					Или ДоходСотрудника.МесяцНалоговогоПериода <> ДанныеПрошлойСтроки.МесяцНалоговогоПериода
					Или ДоходСотрудника.КодДохода <> ДанныеПрошлойСтроки.КодДохода Тогда
					СтрокаВидаДохода = ДоходыПоМесяцамИКодам.Добавить();
					ЗаполнитьЗначенияСвойств(ДанныеПрошлойСтроки, ДоходСотрудника);
					ЗаполнитьЗначенияСвойств(СтрокаВидаДохода, ДоходСотрудника);
					СтрокаВидаДохода.КодДоходаСтрокой = СоответствиеКодовДоходов[СтрокаВидаДохода.КодДохода];
					СтрокаВидаДохода.КодВычетаСтрокой = СправкиПоНДФЛ.КодВычетаДляНалоговойОтчетности(ДанныеТекущегоДокумента.НалоговыйПериод, СтрокаВидаДохода.КодВычета);
					СтрокаВидаВычета = СтрокаВидаДохода;
				ИначеЕсли ДоходСотрудника.КодВычета <> ДанныеПрошлойСтроки.КодВычета Тогда
					Если ЗначениеЗаполнено(ДоходСотрудника.КодВычета) Тогда
						СтрокаВидаВычета = ДоходыПоМесяцамИКодам.Добавить();
						ЗаполнитьЗначенияСвойств(ДанныеПрошлойСтроки, ДоходСотрудника);
						ЗаполнитьЗначенияСвойств(СтрокаВидаВычета, ДоходСотрудника);
						СтрокаВидаВычета.КодВычетаСтрокой = СправкиПоНДФЛ.КодВычетаДляНалоговойОтчетности(ДанныеТекущегоДокумента.НалоговыйПериод, СтрокаВидаВычета.КодВычета);
						СтрокаВидаВычета.СуммаДохода = 0;
					КонецЕсли;
					СтрокаВидаДохода.СуммаДохода = СтрокаВидаДохода.СуммаДохода + ДоходСотрудника.СуммаДохода;
				Иначе
					СтрокаВидаДохода.СуммаДохода = СтрокаВидаДохода.СуммаДохода + ДоходСотрудника.СуммаДохода;
					СтрокаВидаВычета.СуммаВычета = СтрокаВидаВычета.СуммаВычета + ДоходСотрудника.СуммаВычета;
				КонецЕсли;
			КонецЦикла;
			ДоходыПоМесяцамИКодам.Сортировать("НомерСправки, МесяцНалоговогоПериода, КодДохода, КодВычета");
			
			ДанныеПрошлойСтроки = Новый Структура("НомерСправки");
			ИндексДоходаНаЛисте = 0;
			ПриложениеСправки = Неопределено;
			Для Каждого СтрокаДоходов Из ДоходыПоМесяцамИКодам Цикл
				Если СтрокаДоходов.НомерСправки <> ДанныеПрошлойСтроки.НомерСправки 
					Или ИндексДоходаНаЛисте >= 15 Тогда
					
					Если ПриложениеСправки <> Неопределено Тогда
						Если ТабличныйДокументСправки.ВысотаТаблицы > 0 Тогда
							ТабличныйДокументСправки.ВывестиГоризонтальныйРазделительСтраниц();
						КонецЕсли;
						ТабличныйДокументСправки.Вывести(ПриложениеСправки);
					КонецЕсли;
					
					ПриложениеСправки = МакетСправки.ПолучитьОбласть("Приложение");
					НомерСтраницы = НомерСтраницы + 1;
					ИндексДоходаНаЛисте = 0;
					
					ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(ДанныеТекущегоДокумента.ИННорг, ПриложениеСправки, "ПИНН", 12);
					ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(ДанныеТекущегоДокумента.КПП, ПриложениеСправки, "ПКПП", 9);
					ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Формат(НомерСтраницы, "ЧЦ=3; ЧВН=; ЧГ="), ПриложениеСправки, "ПСтраница", 3);
					ВывестиЦелоеЧислоВЯчейки(СтрокаДоходов.НомерСправки, ПриложениеСправки, "ПСправка", 7);
					ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Формат(ДанныеТекущегоДокумента.НалоговыйПериод, "ЧЦ=10; ЧДЦ=0; ЧГ=0"), ПриложениеСправки, "ПГод", 4);
					ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно("13", ПриложениеСправки, "ПСтавка", 2);
					
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(ДанныеПрошлойСтроки, СтрокаДоходов);
				
				ИндексДоходаНаЛисте = ИндексДоходаНаЛисте + 1;
				ПостфиксИмени = Формат(ИндексДоходаНаЛисте, "ЧЦ=2; ЧВН=");
				
				ИмяЯчейки = "М" + ПостфиксИмени;
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Формат(СтрокаДоходов.МесяцНалоговогоПериода, "ЧЦ=2; ЧВН="), ПриложениеСправки, ИмяЯчейки, 2);
				Если СтрокаДоходов.СуммаДохода <> 0 Тогда 
					ИмяЯчейки = "КД" + ПостфиксИмени;
					ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(СтрокаДоходов.КодДоходаСтрокой, ПриложениеСправки, ИмяЯчейки, 4);
					ИмяЯчейки = "СД" + ПостфиксИмени;
					ВывестиСуммуВРубляхКопейкахВЯчейки(СтрокаДоходов.СуммаДОхода, ПриложениеСправки, ИмяЯчейки, 17);
				КонецЕсли;
				Если СтрокаДоходов.СуммаВычета <> 0 Тогда
					ИмяЯчейки = "КВ" + ПостфиксИмени;
					ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(СтрокаДоходов.КодВычетаСтрокой, ПриложениеСправки, ИмяЯчейки, 3);
					ИмяЯчейки = "СВ" + ПостфиксИмени;
					ВывестиСуммуВРубляхКопейкахВЯчейки(СтрокаДоходов.СуммаВычета, ПриложениеСправки, ИмяЯчейки, 16);
				КонецЕсли;
			КонецЦикла;
			
			Если ТабличныйДокументСправки.ВысотаТаблицы > 0 Тогда
				ТабличныйДокументСправки.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ТабличныйДокументСправки.Вывести(ПриложениеСправки);
			
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат ТабличныйДокументСправки

КонецФункции

// Функция формирует табличный документ с печатной формой реестра справок о доходах
//
// Возвращаемое значение:
//   Табличный документ - печатная форма реестра справок о доходах
//
Функция СформироватьПечатнуюФормуРеестрСведений(МассивОбъектов,ОбъектыПечати, ИмяМакета = Неопределено) Экспорт
	
	Документ = МассивОбъектов[0];
	ПакетЗапроса = ПолучитьДанныеПоСправке2НДФЛ(Документ);
	ДанныеПоСотрудникам = ПакетЗапроса.Сотрудники;
	СуммыНалогов = ПакетЗапроса.СведенияОСуммах;
	
	ДанныеДокументов = СправкиПоНДФЛ.СправкиНДФЛДанныеДляПечати(МассивОбъектов, Истина);
	Для Каждого СтруктураДанныхДокумента Из ДанныеДокументов Цикл
		
		ДанныеДокумента = СтруктураДанныхДокумента.Значение;
		
		СтруктураЗаголовка = Новый Структура("ИНН, НаименованиеПолное, КодНалоговогоОргана", ДанныеДокумента.ИННорг, ДанныеДокумента.НаименованиеПолное, ДанныеДокумента.КодНалоговогоОргана);
		
		СтруктураЗаголовка.Вставить("ОбщаяСуммаДохода", ДанныеДокумента.ОбщаяСуммаДохода);	
		СтруктураЗаголовка.Вставить("ОбщаяСуммаДохода", СуммыНалогов.Итог("ОбщаяСуммаДохода"));	
		СтруктураЗаголовка.Вставить("Исчислено", СуммыНалогов.Итог("Исчислено"));	
		СтруктураЗаголовка.Вставить("Удержано", СуммыНалогов.Итог("Удержано"));
		СтруктураЗаголовка.Вставить("Перечислено", СуммыНалогов.Итог("Перечислено"));
		СтруктураЗаголовка.Вставить("ФИОРуководителя", ДанныеДокумента.ФИОПодписавшего);
		СтруктураЗаголовка.Вставить("Год", Формат(ДанныеДокумента.НалоговыйПериод,"ЧЦ=4; ЧДЦ=0; ЧГ=0"));
		СтруктураЗаголовка.Вставить("ДатаСоставления", Формат(ДанныеДокумента.Дата, "ДФ=dd.MM.yyyy"));
		СтруктураЗаголовка.Вставить("НомерРеестра", СправкиПоНДФЛ.НомерПачкиДокумента(ДанныеДокумента.Номер));
		СтруктураЗаголовка.Вставить("Признак", "1");
		СтруктураЗаголовка.Вставить("ИмяФайла", СтруктураДанныхДокумента.Ключ.ИмяФайла);
		СтруктураЗаголовка.Вставить("ОКТМО", ДанныеДокумента.ОКТМО);
		СтруктураЗаголовка.Вставить("ОКАТО", ДанныеДокумента.ОКАТО);
		СтруктураЗаголовка.Вставить("КПП", ДанныеДокумента.КПП);
		СтруктураЗаголовка.Вставить("КоличествоСправок", Формат(ДанныеДокумента.КоличествоСправок,"ЧЦ=4; ЧДЦ=0; ЧГ=0"));
		СтруктураЗаголовка.Вставить("ИННРеорганизованнойОрганизации", ДанныеДокумента.ИННРеорганизованнойОрганизации);
		СтруктураЗаголовка.Вставить("КППРеорганизованнойОрганизации", ДанныеДокумента.КППРеорганизованнойОрганизации);
		СтруктураЗаголовка.Вставить("РазделительРеорганизации", ?(ЗначениеЗаполнено(ДанныеДокумента.КППРеорганизованнойОрганизации), "/", ""));
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеестрСправок2_НДФЛ";
		
		// запоминаем области макета
		Если ИмяМакета = Неопределено Тогда
			Макет = ПолучитьМакет("Реестр2011");
		Иначе
			Макет = ПолучитьМакет(ИмяМакета);
		КонецЕсли;
		
		ОбластьМакетаШапка	= Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
		ОбластьМакетаПодвал	= Макет.ПолучитьОбласть("Подвал");// Подвал документа
		ОбластьМакета 		= Макет.ПолучитьОбласть("Строка"); // область сотрудника
		ОбластьМакетаШапка.Параметры.Заполнить(СтруктураЗаголовка); // Шапка документа.
		// Начинаем формировать выходной документ
		ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.
		
		СтруктураПоиска = Новый Структура("НомерСправки");
		// выводим строки по сотрудникам
		Для Каждого Сотрудник Из ДанныеПоСотрудникам Цикл
			
			ОбластьМакета.Параметры.Заполнить(Сотрудник);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Сотрудник);
			СтрокиИтогов = СуммыНалогов.Скопировать(СуммыНалогов.НайтиСтроки(СтруктураПоиска));
			Если СтрокиИтогов.Количество() > 0 Тогда
				СтрокиИтогов.Свернуть("НомерСправки", "ОбщаяСуммаДохода,ОблагаемаяСуммаДохода,Исчислено,Удержано,Перечислено,ИзлишнеУдержано,Задолженность");
				ОбластьМакета.Параметры.Заполнить(СтрокиИтогов[0]);
			КонецЕсли;
			ТабДокумент.Вывести(ОбластьМакета);
		
		КонецЦикла;
		
		ОбластьМакетаПодвал.Параметры.Заполнить(СтруктураЗаголовка);
		
		// выводим предварительно подготовленный Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
	КонецЦикла;	
	Возврат ТабДокумент;
	
КонецФункции


Процедура ВывестиНаименованиеНалоговогоАгента(НазваниеАгента, ТабличныйДокумент, ИмяПоказателя, КоличествоСтрок, КоличествоЯчеек)
	
	Если СтрДлина(НазваниеАгента) < КоличествоЯчеек Тогда
		ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(НазваниеАгента, ТабличныйДокумент, ИмяПоказателя +"01", КоличествоЯчеек);
	Иначе
		МассивДлинПодстрок = Новый Массив;
		МассивДлинПодстрок.Добавить(КоличествоЯчеек);
		РазграниченнаяСтрока = РазбитьСтрокуНаПодСтроки(НазваниеАгента, МассивДлинПодстрок);

		Если СтрДлина(РазграниченнаяСтрока) > КоличествоЯчеек * КоличествоСтрок Тогда
			РазграниченнаяСтрока = НазваниеАгента;
		КонецЕсли;
			
		МассивПодстрок = Новый Массив;
		Для ИндексСтроки = 1 По КоличествоСтрок Цикл
			ЧастьНаименования = Сред(РазграниченнаяСтрока, КоличествоЯчеек*(ИндексСтроки - 1) + 1, КоличествоЯчеек);
			МассивПодстрок.Добавить(ЧастьНаименования);
		КонецЦикла;
		
		Для ИндексСтроки = 1 По МассивПодстрок.Количество() Цикл
			ЧастьНаименования = МассивПодстрок[ИндексСтроки-1];
			ПрефиксИмени = ИмяПоказателя + Формат(ИндексСтроки, "ЧЦ=2; ЧВН=");
			ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(ЧастьНаименования, ТабличныйДокумент, ПрефиксИмени, КоличествоЯчеек);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьДанныеПоСправке2НДФЛ(Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка КАК Ссылка,
	|	СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Сотрудник КАК Сотрудник,
	|	СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.ИНН КАК ИНН,
	|	СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.НомерСправки КАК НомерСправки,
	|	СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Фамилия КАК Фамилия,
	|	СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Имя КАК Имя,
	|	СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Отчество КАК Отчество,
	|	СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.АдресРФ КАК АдресРФ,
	|	СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.ВидДокумента КАК ВидДокумента,
	|	СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.СерияДокумента КАК СерияДокумента,
	|	СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.НомерДокумента КАК НомерДокумента,
	|	СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Гражданство КАК Гражданство,
	|	СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.ДатаРождения КАК ДатаРождения,
	|	СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.СтатусНалогоплательщика КАК СтатусНалогоплательщика,
	|	СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.ДатаУведомления КАК ДатаУведомления,
	|	СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.НомерУведомления КАК НомерУведомления,
	|	СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.КодНалоговогоОрганаУведомления КАК КодНалоговогоОрганаУведомления,
	|	СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.АдресЗарубежом КАК АдресЗарубежом,
	|	ЕСТЬNULL(СуммыНалоговСотрудники.ОбщаяСуммаДохода, 0) КАК ОбщаяСуммаДохода,
	|	ЕСТЬNULL(СуммыНалоговСотрудники.ОблагаемаяСуммаДохода, 0) КАК ОблагаемаяСуммаДохода,
	|	ЕСТЬNULL(СуммыНалоговСотрудники.Исчислено, 0) КАК Исчислено,
	|	ЕСТЬNULL(СуммыНалоговСотрудники.Удержано, 0) КАК Удержано,
	|	ЕСТЬNULL(СуммыНалоговСотрудники.Задолженность, 0) КАК Задолженность,
	|	ЕСТЬNULL(СуммыНалоговСотрудники.ИзлишнеУдержано, 0) КАК ИзлишнеУдержано,
	|	ЕСТЬNULL(СуммыНалоговСотрудники.Перечислено, 0) КАК Перечислено
	|ИЗ
	|	Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.СотрудникиОрганизации КАК СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.СуммыНалогов КАК СуммыНалоговСотрудники
	|		ПО (СуммыНалоговСотрудники.Ссылка = СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка)
	|			И (СуммыНалоговСотрудники.НомерСправки = СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.НомерСправки)
	|ГДЕ
	|	СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка В(&Документ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправкаПоНДФЛВНалоговыйОрганСведенияОДоходах.Ссылка КАК Ссылка,
	|	СправкаПоНДФЛВНалоговыйОрганСведенияОДоходах.НомерСтроки КАК НомерСтроки,
	|	СправкаПоНДФЛВНалоговыйОрганСведенияОДоходах.Месяц КАК МесяцНалоговогоПериода,
	|	СправкаПоНДФЛВНалоговыйОрганСведенияОДоходах.КодДохода КАК КодДохода,
	|	СправкаПоНДФЛВНалоговыйОрганСведенияОДоходах.СуммаДохода КАК СуммаДохода,
	|	СправкаПоНДФЛВНалоговыйОрганСведенияОДоходах.КодВычета КАК КодВычета,
	|	СправкаПоНДФЛВНалоговыйОрганСведенияОДоходах.СуммаВычета КАК СуммаВычета,
	|	СправкаПоНДФЛВНалоговыйОрганСведенияОДоходах.НомерСправки КАК НомерСправки
	|ИЗ
	|	Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.СведенияОДоходах КАК СправкаПоНДФЛВНалоговыйОрганСведенияОДоходах
	|ГДЕ
	|	СправкаПоНДФЛВНалоговыйОрганСведенияОДоходах.Ссылка В(&Документ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправкаПоНДФЛВНалоговыйОрганСведенияОВычетах.Ссылка КАК Ссылка,
	|	СправкаПоНДФЛВНалоговыйОрганСведенияОВычетах.НомерСтроки КАК НомерСтроки,
	|	СправкаПоНДФЛВНалоговыйОрганСведенияОВычетах.НомерСправки КАК НомерСправки,
	|	СправкаПоНДФЛВНалоговыйОрганСведенияОВычетах.КодВычета КАК КодВычета,
	|	СправкаПоНДФЛВНалоговыйОрганСведенияОВычетах.КодВычета.ГруппаВычета КАК ГруппаВычета,
	|	СправкаПоНДФЛВНалоговыйОрганСведенияОВычетах.СуммаВычета КАК СуммаВычета
	|ИЗ
	|	Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.СведенияОВычетах КАК СправкаПоНДФЛВНалоговыйОрганСведенияОВычетах
	|ГДЕ
	|	СправкаПоНДФЛВНалоговыйОрганСведенияОВычетах.Ссылка В(&Документ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправкаПоНДФЛВНалоговыйОрганСведенияОВычетах.Ссылка КАК Ссылка,
	|	СправкаПоНДФЛВНалоговыйОрганСведенияОВычетах.НомерСтроки КАК НомерСтроки,
	|	СправкаПоНДФЛВНалоговыйОрганСведенияОВычетах.НомерСправки КАК НомерСправки,
	|	СправкаПоНДФЛВНалоговыйОрганСведенияОВычетах.Ставка КАК Ставка,
	|	СправкаПоНДФЛВНалоговыйОрганСведенияОВычетах.ОбщаяСуммаДохода КАК ОбщаяСуммаДохода,
	|	СправкаПоНДФЛВНалоговыйОрганСведенияОВычетах.ОблагаемаяСуммаДохода КАК ОблагаемаяСуммаДохода,
	|	СправкаПоНДФЛВНалоговыйОрганСведенияОВычетах.Исчислено КАК Исчислено,
	|	СправкаПоНДФЛВНалоговыйОрганСведенияОВычетах.Удержано КАК Удержано,
	|	СправкаПоНДФЛВНалоговыйОрганСведенияОВычетах.Перечислено КАК Перечислено,
	|	СправкаПоНДФЛВНалоговыйОрганСведенияОВычетах.ИзлишнеУдержано КАК ИзлишнеУдержано,
	|	СправкаПоНДФЛВНалоговыйОрганСведенияОВычетах.Задолженность КАК Задолженность
	|ИЗ
	|	Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.СуммыНалогов КАК СправкаПоНДФЛВНалоговыйОрганСведенияОВычетах
	|ГДЕ
	|	СправкаПоНДФЛВНалоговыйОрганСведенияОВычетах.Ссылка В(&Документ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Уведомления.Ссылка КАК Ссылка,
	|	Уведомления.НомерСправки КАК НомерСправки,
	|	Уведомления.НомерСтроки КАК НомерСтроки,
	|	Уведомления.ДатаУведомления КАК ДатаУведомления,
	|	Уведомления.НомерУведомления КАК НомерУведомления,
	|	Уведомления.КодНалоговогоОрганаУведомления КАК КодНалоговогоОрганаУведомления,
	|	Уведомления.ГруппаВычета КАК ГруппаВычета
	|ИЗ
	|	Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.УведомленияНОоПравеНаВычеты КАК Уведомления";
	Запрос.УстановитьПараметр("Документ", Документ);
	Результаты =  Запрос.ВыполнитьПакет();
	
	Возврат Новый Структура("Сотрудники, СведенияОДоходах, СведенияОВычетах, СведенияОСуммах, Уведомления", Результаты[0].Выгрузить(), Результаты[1].Выгрузить(), Результаты[2].Выгрузить(), Результаты[3].Выгрузить(), Результаты[4].Выгрузить());
	
КонецФункции


// Разбивает строку (не разрывая слов) на подстроки указанной длинны, 
//							строки дополняются пробелами, переводы строк удаляются.
// Параметры:
//  ТекстСтроки  - Строка, которую необходимо разбить на подстроки.
//                 
//  МассивДлинСтрок  - Массив длин строк, если в результирующей строке оказалось подстрок больше.
//                     Чем количество указанных длин, то все "лишние" строки выравниваются по последнему
//                     значению длинны строки.
// Возвращаемое значение:
//   Строка   - разбитая на подстроки указанной длинны.
//
Функция РазбитьСтрокуНаПодСтроки(Знач ТекстСтроки, МассивДлинСтрок) Экспорт

	ВозвращаемаяСтрока = "";
	
	РазделителиСлов = " .,:;?!%\<>+-*/=_" + Символы.ПС;
	
	ТекстСтроки = СокрЛП(ТекстСтроки);
	
	// Обыграем случай, когда у нас многострочная строка.
	Если СтрЧислоСтрок(ТекстСтроки) > 1 Тогда
	
		Для НомерПодстроки = 1 По СтрЧислоСтрок(ТекстСтроки) Цикл
			
			НовыйМассивДлинСтроки = Новый Массив;
			
			Если НомерПодстроки = 1 Тогда
			
				НачальнаяГраница = 0;
			
			Иначе
				
				Если СтрЧислоСтрок(ВозвращаемаяСтрока) > МассивДлинСтрок.ВГраница() Тогда
				
					НачальнаяГраница = МассивДлинСтрок.ВГраница();
					
				Иначе
					
					НачальнаяГраница = СтрЧислоСтрок(ВозвращаемаяСтрока);
				
				КонецЕсли; 
			
			КонецЕсли; 
			
			Для ИндексСтроки = НачальнаяГраница По МассивДлинСтрок.ВГраница() Цикл
			
				НовыйМассивДлинСтроки.Добавить(МассивДлинСтрок[ИндексСтроки]);
			
			КонецЦикла; 
		
			ВозвращаемаяСтрока = ВозвращаемаяСтрока + ?(ПустаяСтрока(ВозвращаемаяСтрока), "", Символы.ПС) + РазбитьСтрокуНаПодСтроки(СтрПолучитьСтроку(ТекстСтроки, НомерПодстроки), НовыйМассивДлинСтроки);
		
		КонецЦикла; 
		
	Иначе
		
		ДлинаСтроки = МассивДлинСтрок[0];
		
		// Если длина строки меньше или равна нужной длине - просто вернем ее.
		Если СтрДлина(ТекстСтроки) <= ДлинаСтроки Тогда
		
			ВозвращаемаяСтрока = ТекстСтроки; 
			
		Иначе
			
			// Заменим все разделители символом _, для удобства анализа.
			ТестируемаяСтрока = ТекстСтроки;
			
			Для НомерРазделителя = 1 По СтрДлина(РазделителиСлов)  Цикл
				
				РазделительСлов = Сред(РазделителиСлов, НомерРазделителя, 1);
				
				ТестируемаяСтрока = СтрЗаменить(ТестируемаяСтрока, РазделительСлов, "_");
			
			КонецЦикла; 
			
			// Найдем первый разделитель
			Разрыв = СтрНайти(ТестируемаяСтрока, "_");
			
			ИндексМассиваДлинСтрок = 0;
			
			// Обрабатываем строку пока она не закончится.
			Пока СтрДлина(ТекстСтроки) > 0 Цикл
				
				Если ИндексМассиваДлинСтрок <= МассивДлинСтрок.ВГраница() Тогда
				
					ДлинаСтроки = МассивДлинСтрок[ИндексМассиваДлинСтрок];
				
				Иначе
				
					ДлинаСтроки = МассивДлинСтрок[МассивДлинСтрок.ВГраница()];
				
				КонецЕсли; 
				
				// Если разрыв больше чем нужная длина
				// если разрывов больше нет
				// и частный случай, когда есть разрыв - пробел в самом конце строки нужной длины
				// или длина оставшейся строки меньше или равна нужной длине.
				Если Разрыв >= ДлинаСтроки ИЛИ Разрыв = 0 ИЛИ Сред(ТекстСтроки, ДлинаСтроки + 1, 1) = " " ИЛИ СтрДлина(ТекстСтроки) <= ДлинаСтроки Тогда
				
					ВозвращаемаяСтрока = ВозвращаемаяСтрока + ?(ПустаяСтрока(ВозвращаемаяСтрока), "", Символы.ПС) + СокрЛП(Лев(ТекстСтроки, ДлинаСтроки));
					
					ТекстСтроки = СокрЛП(Сред(ТекстСтроки, ДлинаСтроки + 1));
					
					ТестируемаяСтрока = Сред(ТестируемаяСтрока, ДлинаСтроки + 1);
					
					Если Лев(ТестируемаяСтрока,1) = "_" Тогда
					
						ТестируемаяСтрока = Сред(ТестируемаяСтрока, 2);
					
					КонецЕсли; 
					
					ИндексМассиваДлинСтрок = ИндексМассиваДлинСтрок + 1;
					
					Разрыв = СтрНайти(ТестируемаяСтрока, "_");
				
				Иначе 
					
					НовыйРазрыв = СтрНайти(Сред(ТестируемаяСтрока, Разрыв + 1), "_");
					
					// Есть еще один разрыв и он вместе с предыдущим меньше или равен длине строки.
					Если НовыйРазрыв > 0 И Разрыв + НовыйРазрыв <= ДлинаСтроки Тогда
						
						Разрыв = Разрыв + НовыйРазрыв;
						
					Иначе
						
						// Больше разрывов нет
						// или он вместе с предыдущим больше нужной длины.
						ВозвращаемаяСтрока = ВозвращаемаяСтрока + ?(ПустаяСтрока(ВозвращаемаяСтрока), "", Символы.ПС) + СокрЛП(Лев(ТекстСтроки, Разрыв));
						
						ТекстСтроки = СокрЛП(Сред(ТекстСтроки, Разрыв + 1));
						
						ТестируемаяСтрока = Сред(ТестируемаяСтрока, Разрыв + 1);
						
						Если Лев(ТестируемаяСтрока,1) = "_" Тогда
					
							ТестируемаяСтрока = Сред(ТестируемаяСтрока, 2);
					
						КонецЕсли; 
					
						ИндексМассиваДлинСтрок = ИндексМассиваДлинСтрок + 1;
					
						Разрыв = СтрНайти(ТестируемаяСтрока, "_");
						
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЦикла; 
				
		КонецЕсли; 
	
	КонецЕсли;
	
	Если СтрЧислоСтрок(ВозвращаемаяСтрока) > 1 Тогда
		
		ВыровненнаяСтрока = "";
		
		Для НомерПодстроки = 1 По СтрЧислоСтрок(ВозвращаемаяСтрока) - 1 Цикл
			
			ВыравниваемаяСтрока = СтрПолучитьСтроку(ВозвращаемаяСтрока, НомерПодстроки);
			
			Если НомерПодстроки - 1 <= МассивДлинСтрок.ВГраница() Тогда
				
				ДлинаСтроки = МассивДлинСтрок[НомерПодстроки - 1];
				
			Иначе
				
				ДлинаСтроки = МассивДлинСтрок[МассивДлинСтрок.ВГраница()];
				
			КонецЕсли; 
				
			Для НомерПозицииВСтроке = СтрДлина(ВыравниваемаяСтрока) + 1 По ДлинаСтроки Цикл
			
				ВыравниваемаяСтрока = ВыравниваемаяСтрока + " ";
			
			КонецЦикла; 
			
			ВыровненнаяСтрока = ВыровненнаяСтрока + ?(ПустаяСтрока(ВыровненнаяСтрока), "", Символы.ПС) + ВыравниваемаяСтрока;
		
		КонецЦикла;
		
		ВозвращаемаяСтрока = ВыровненнаяСтрока + Символы.ПС + СтрПолучитьСтроку(ВозвращаемаяСтрока, СтрЧислоСтрок(ВозвращаемаяСтрока));
		
	КонецЕсли; 
	
	ВозвращаемаяСтрока = СтрЗаменить(ВозвращаемаяСтрока, Символы.ПС, "");
	
	Возврат ВозвращаемаяСтрока;

КонецФункции // РазбитьСтрокуПоСтрочно()

Процедура ВывестиЦелоеЧислоВЯчейки(Данные, ТабличныйДокумент, ПрефиксЯчеек, КоличествоЯчеек)
	ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Прав("                  " + Формат(Данные, "ЧЦ=" + (КоличествоЯчеек + 1) + "; ЧДЦ=0; ЧН=0; ЧГ="), КоличествоЯчеек), ТабличныйДокумент, ПрефиксЯчеек, КоличествоЯчеек);
КонецПроцедуры

Процедура ВывестиСуммуВРубляхКопейкахВЯчейки(Данные, ТабличныйДокумент, ПрефиксЯчеек, КоличествоЯчеек) Экспорт
	ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Прав("                  " + Формат(Данные, "ЧЦ=" + (КоличествоЯчеек + 1) + "; ЧДЦ=0; ЧС=-2; ЧГ="), КоличествоЯчеек), ТабличныйДокумент, ПрефиксЯчеек, КоличествоЯчеек);
КонецПроцедуры

#КонецОбласти

#КонецЕсли