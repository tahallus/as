#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получает специализированную форму задачи
//
// Параметры:
//  ЗадачаСсылка         - ЗадачаСсылка - задача, для которой получается форма
//  ТочкаМаршрутаСсылка  - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута, для которой получается форма.
//
// Возвращаемое значение:
//   ФормаКлиентскогоПриложения   - специализированная форма выполнения задачи.
//
Функция ФормаВыполненияЗадачи(ЗадачаСсылка, ТочкаМаршрутаСсылка) Экспорт

	Если ТочкаМаршрутаСсылка = БизнесПроцессы.ЗаявкаКлиента.ТочкиМаршрута.ПодготовкаМедиаплана
		ИЛИ ТочкаМаршрутаСсылка = БизнесПроцессы.ЗаявкаКлиента.ТочкиМаршрута.БронированиеМедиаплана Тогда
		ИмяФормы = "БизнесПроцесс.ЗаявкаКлиента.Форма.Медиаплан";
	ИначеЕсли ТочкаМаршрутаСсылка = БизнесПроцессы.ЗаявкаКлиента.ТочкиМаршрута.ПодготовкаСметы Тогда
		ИмяФормы = "БизнесПроцесс.ЗаявкаКлиента.Форма.Смета";
	ИначеЕсли ТочкаМаршрутаСсылка = БизнесПроцессы.ЗаявкаКлиента.ТочкиМаршрута.ФормированиеЗаказа Тогда
		ИмяФормы = "БизнесПроцесс.ЗаявкаКлиента.Форма.ЗаказПокупателя";
	Иначе
		ИмяФормы = "БизнесПроцесс.ЗаявкаКлиента.Форма.Документы";
	КонецЕсли;

	ПараметрыФормы = Новый Структура("Ключ", ЗадачаСсылка);
	
	Возврат Новый Структура(
		"ПараметрыФормы, ИмяФормы", ПараметрыФормы, ИмяФормы);

КонецФункции

// Вызывается при выполнении задачи из формы списка.
//
// Параметры:
//   ЗадачаСсылка.ЗадачаИсполнителя - задача, для которой выполняется обработка 
//   ТочкаМаршрутаСсылка - точка маршрута.
//
Процедура ОбработкаВыполненияПоУмолчанию(ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса) Экспорт

КонецПроцедуры

// Вызывается при перенаправлении задачи.
//
// Параметры:
//   ЗадачаСсылка       - ЗадачаСсылка.ЗадачаИсполнителя - перенаправляемая задача.
//   НоваяЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача для нового исполнителя.
//
Процедура ПриПеренаправленииЗадачи(ЗадачаСсылка, НоваяЗадачаСсылка) Экспорт
	
	БизнесПроцессОбъект = ЗадачаСсылка.БизнесПроцесс.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(БизнесПроцессОбъект.Ссылка);
	БизнесПроцессОбъект.РезультатВыполнения = РезультатВыполненияПриПеренаправлении(ЗадачаСсылка) + БизнесПроцессОбъект.РезультатВыполнения;
	УстановитьПривилегированныйРежим(Истина);
	БизнесПроцессОбъект.Записать();
	
КонецПроцедуры

// Получить описание задачи процесса.
//
// Параметры:
//  ТочкаМаршрутаБизнесПроцесса  - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута для которой 
//                                 возвращается описание.
//
// Возвращаемое значение:
//   Строка   - описание для точки маршрута.
//
Функция ОписаниеТочки(ТочкаМаршрутаБизнесПроцесса) Экспорт

	Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.ЗаявкаКлиента.ТочкиМаршрута.ПодготовкаМедиаплана Тогда
		Возврат НСтр(
			"ru='- сформируйте медиаплан (обязательный).'");
	ИначеЕсли ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.ЗаявкаКлиента.ТочкиМаршрута.ПодготовкаСметы Тогда
		Возврат НСтр(
			"ru='- сформируйте смету (обязательный).'");
	КонецЕсли;

КонецФункции

// Получить типовой срок исполнения задачи в днях.
//
// Параметры:
//  ТочкаМаршрутаБизнесПроцесса  - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута для которой 
//                                 возвращается типовой срок исполнения.
//
// Возвращаемое значение:
//   Число   - типовой срок исполнения для точки маршрута.
//
Функция СрокИсполнения(ТочкаМаршрутаБизнесПроцесса) Экспорт

	Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.ЗаявкаКлиента.ТочкиМаршрута.ПодготовкаМедиаплана Тогда
		Возврат 2;
	ИначеЕсли ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.ЗаявкаКлиента.ТочкиМаршрута.ПодготовкаСметы Тогда
		Возврат 2;
	КонецЕсли;

КонецФункции

// Возвращает список этапов процесса при его плановом выполнении
//
// Возвращаемое значение:
//   Массив   - содержит список этапов бизнес-процесса.
//
Функция СписокЭтапов() Экспорт

	мЭтапы = Новый Массив;
	
	Возврат мЭтапы;

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	//Ограничение.Текст =
	//"РазрешитьЧтениеИзменение
	//|ГДЕ
	//|	ЗначениеРазрешено(Предмет.Контрагент)
	//|	ИЛИ ЗначениеРазрешено(Автор)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РезультатВыполненияПриПеренаправлении(Знач ЗадачаСсылка)
	
	СтрокаФормат = НСтр("ru = '%1, %2 перенаправил(а) задачу:
	                    |%3'");
	
	Комментарий = СокрЛП(ЗадачаСсылка.РезультатВыполнения);
	Комментарий = ?(ПустаяСтрока(Комментарий), "", Комментарий + Символы.ПС);
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаФормат,
	              ЗадачаСсылка.ДатаИсполнения,
	              ЗадачаСсылка.Исполнитель,
	              Комментарий);
	
	Результат = Результат + Символы.ПС;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецЕсли
