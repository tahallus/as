
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УзелОбмена = Параметры.Ключ;
	ТекущаяСтрокаИдентификатор = Параметры.ТекущаяСтрокаИдентификатор;

	ИдентификаторКаталога = Параметры.ИдентификаторКаталога;
	
	ОтборКатегорииИерархия = Параметры.ОтборГруппыКатегорииНоменклатуры;
	Если Параметры.ОтборГруппыКатегорииНоменклатуры = Перечисления.ВидыОтборовНоменклатуры.КатегорииНоменклатуры Тогда
		ЗаполнитьДеревоКатегорий(Параметры.ТаблицаКаталоговГруппы);
		Элементы.СтраницыКатегорииИерархия.ТекущаяСтраница = Элементы.КатегорииОтбор;
	Иначе
		ЗаполнитьДеревоИерархии(Параметры.ТаблицаКаталоговГруппы);
		Элементы.СтраницыКатегорииИерархия.ТекущаяСтраница = Элементы.ИерархияГруппыОтбор;
	КонецЕсли;
	ДетализацияОтбора = Параметры.РучнаяНастройкаКаталога;
	Если ДетализацияОтбора = 0 Тогда
		ДетализацияОтбора = 1;
	Иначе
		ЗаполнитьДеревоИзСохраненныхДанных(Параметры.ИдентификаторКаталога, Параметры.АдресНастроекСтруктурыКаталога);	
	КонецЕсли;
	
	Номенклатура.Параметры.УстановитьЗначениеПараметра("Выбранные", Неопределено);
	Элементы.НоменклатураОтбор.Доступность = (ДетализацияОтбора = 1);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтборИерархияПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ОтборИерархия.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовоеЗначение = Элементы.ОтборИерархия.ТекущиеДанные.Значение;
	НовоеПредставление = Элементы.ОтборИерархия.ТекущиеДанные.Представление;
	
	Для каждого элОтбора Из ЭтотОбъект.Номенклатура.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы Цикл
		Если Строка(элОтбора.ЛевоеЗначение) = "Родитель" Тогда
			
			Если элОтбора.ПравоеЗначение = НовоеЗначение И элОтбора.Представление = НовоеПредставление И элОтбора.Использование Тогда
				Возврат;
			Иначе
				УстановитьОтборПоИерархии();
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// отбор не был установлен ранее, и текущее значение отбора = <Все группы>
	Если Не Элементы.ОтборИерархия.ТекущиеДанные.Представление = ПредставлениеВсеГруппы() Тогда
		УстановитьОтборПоИерархии();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКатегорииПриАктивизацииСтроки(Элемент)

	Если ОтборКатегорииИерархия <> ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.КатегорииНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ОтборКатегории.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтборКатегорииТекущая = Элементы.ОтборКатегории.ТекущиеДанные.Значение Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОтборКатегорииПриАктивизацииСтрокиНаКлиенте", 0.2, Истина);
	
	ТекущийЭлемент = Элементы.ОтборКатегории;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоИерархии()
	
	Если Элементы.ОтборИерархия.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоОтборПоГруппе = ЗначениеЗаполнено(Элементы.ОтборИерархия.ТекущиеДанные.Значение);
	
	ПравоеЗначение	= Неопределено;
	Сравнение		= ВидСравненияКомпоновкиДанных.Равно;
	Использование	= Истина;
	Представление	= Элементы.ОтборИерархия.ТекущиеДанные.Представление;
	
	Если ЭтоОтборПоГруппе Тогда
		
		Если Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка Тогда
			Сравнение = ВидСравненияКомпоновкиДанных.ВИерархии;
		КонецЕсли;
		ПравоеЗначение = Элементы.ОтборИерархия.ТекущиеДанные.Значение;
		
	ИначеЕсли Элементы.ОтборИерархия.ТекущиеДанные.Представление = ПредставлениеВсеГруппы() Тогда
		
		Использование = Ложь;
		
	ИначеЕсли Элементы.ОтборИерархия.ТекущиеДанные.Представление = ПредставлениеНетГруппы() Тогда
		
		ПравоеЗначение = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЭтотОбъект.Номенклатура,
		"Родитель",
		ПравоеЗначение,
		Сравнение,
		Представление,
		Использование
	);
	
	ОтборИерархияТекущая = ПравоеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСТрока И НЕ Копирование Тогда
		Данные = Элементы.Дерево.ТекущиеДанные;
		Данные.ЭтоГруппа = Истина;
		Данные.Идентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПослеУдаления(Элемент)

	Если ПоказыватьВыбранные Тогда
		ОбновитьВыбранныеТовары(ПоказыватьВыбранные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ГруппаКаталога = "" Тогда
		Элемент.ТекущиеДанные.ГруппаКаталога = Элемент.ТекущиеДанные.Идентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Отказ = Истина;
	Если НЕ Копирование Тогда
		
		ТекСтрока = Элементы.Дерево.ТекущаяСтрока;
		Если ТекСтрока = Неопределено Тогда
			Приемник = ДеревоНаСайте;
		Иначе
			Приемник = ДеревоНаСайте.НайтиПоИдентификатору(ТекСтрока);
			Если НЕ Приемник.ЭтоГруппа Тогда
				Приемник = Приемник.ПолучитьРодителя();
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
		НоваяСтрока.ЭтоГруппа = Истина;
		НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
		Элемент.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элемент.ИзменитьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементДеревоПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если Строка = Неопределено Тогда
		// перетаскивание из других ТЧ - можно
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоНаСайте.НайтиПоИдентификатору(Строка);
	Если НайденнаяСтрока = Неопределено Тогда
		// Новый элемент - можно
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда

		Для каждого стр Из ПараметрыПеретаскивания.Значение Цикл
			Если ТипЗнч(стр) = Тип("СправочникСсылка.Номенклатура") Тогда
				Возврат;
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("ДанныеФормыЭлементДерева") Тогда
		Возврат;
	КонецЕсли;
	
	Если Строка = Неопределено Тогда
		Приемник = ДеревоНаСайте;
	Иначе
		Приемник = ДеревоНаСайте.НайтиПоИдентификатору(Строка);                                                                                                         
		Если НЕ Приемник.ЭтоГруппа Тогда
			Приемник = Приемник.ПолучитьРодителя();
		КонецЕсли;
	КонецЕсли;	
	
	Если НайденнаяСтрока.ПолучитьРодителя() = Приемник Тогда
		// перетаскивание второй номенклатуры в ту же группу
	КонецЕсли;
	
	Для каждого ИДПереносимыйЭлемент Из ПараметрыПеретаскивания.Значение Цикл
		
		ПереносимыйЭлемент = ДеревоНаСайте.НайтиПоИдентификатору(ИДПереносимыйЭлемент);

		Если НЕ ПроверитьВозможностьПереноса(ПереносимыйЭлемент, Приемник) Тогда
			ПараметрыПеретаскивания.Действие=ДействиеПеретаскивания.Отмена;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка=Ложь;
	
	ИДПриемник = Строка;
	Если ИДПриемник = Неопределено Тогда
		Приемник = ДеревоНаСайте;
	Иначе
		Приемник = ДеревоНаСайте.НайтиПоИдентификатору(ИДПриемник);
		Если НЕ Приемник.ЭтоГруппа Тогда
			Приемник = Приемник.ПолучитьРодителя();
		КонецЕсли;
	КонецЕсли;
	
	МассивИДИсточник = ПараметрыПеретаскивания.Значение;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("ДанныеФормыЭлементДерева") Тогда
		
		// перетаскивание из дерева групп
		НоваяСтрока = ПеренестиСПодчиненными(ИДПриемник, МассивИДИсточник.Значение, ДетализацияОтбора);
		
	ИначеЕсли ТипЗнч(МассивИДИсточник) = Тип("Массив") 
		И ТипЗнч(МассивИДИсточник[0]) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		// перетаскивание из списка Номенклатуры
		ДобавитьСтрокиНаСервере(ИДПриемник, МассивИДИсточник);
		
	Иначе
		
		Для Каждого ИДИсточник Из МассивИДИсточник Цикл
			
			Если ТипЗнч(ИДИсточник) = Тип("СправочникСсылка.Номенклатура") Тогда
				// перетаскивание из динамического списка
				Источник = Элементы.Номенклатура.ДанныеСтроки(ИДИсточник);
				НоваяСтрока = СкопироватьСтрокуДерева(Приемник, Источник, Источник.ЭтоГруппа);
			ИначеЕсли ТипЗнч(ИДИсточник) = Тип("ДанныеФормыЭлементДерева") Тогда
				// перетаскивание из дерева групп
				НоваяСтрока = СкопироватьСтрокуДерева(Приемник, ИДИсточник, Истина);			
			Иначе 
				// перетаскивание внутри дерева
				Источник = ДеревоНаСайте.НайтиПоИдентификатору(ИДИсточник);
				Если Приемник = Источник.ПолучитьРодителя() Тогда
					Продолжить;
				КонецЕсли; 
				НоваяСтрока = СкопироватьСтрокуДерева(Приемник, Источник, Источник.ЭтоГруппа);
				
				СтрокаРодитель = Источник.ПолучитьРодителя();
				Если СтрокаРодитель = Неопределено Тогда
					ДеревоНаСайте.ПолучитьЭлементы().Удалить(Источник);
				Иначе
					СтрокаРодитель.ПолучитьЭлементы().Удалить(Источник);
				КонецЕсли;
			КонецЕсли;
			
			Если ИДПриемник = Неопределено И НоваяСтрока <> Неопределено Тогда
				Элементы.Дерево.Развернуть(НоваяСтрока.ПолучитьИдентификатор(), Истина);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ Приемник = Неопределено И ИДПриемник <> Неопределено Тогда
		Элементы.Дерево.Развернуть(ИДПриемник, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДетализацияОтбораОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если ДеревоНаСайте.ПолучитьЭлементы().Количество() > 0 Тогда
	
		ПоказатьВопрос(Новый ОписаниеОповещения("ИзменитьДетализациюРезультат", ЭтотОбъект, ВыбранноеЗначение), 
			НСтр("ru = 'Настройки структуры каталога будут очищены. Продолжить?'"),
			РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		ИзменитьДетализацию(ВыбранноеЗначение);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если ЭтаФорма.Элементы.Дерево.ТекущиеДанные = Неопределено Тогда
		ТекущаяСтрокаИдентификатор = Неопределено;
	Иначе
		ТекущаяСтрокаИдентификатор = ЭтаФорма.Элементы.Дерево.ТекущиеДанные.Идентификатор;
	КонецЕсли;
	
	Закрыть(ЗаписатьИЗакрытьСервер());
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияВключаяВложенные(Команда)
	
	Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка = Не Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка;
	УстановитьОтборПоИерархии();
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	СвернутьДерево(ДеревоНаСайте);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	РазвернутьДерево(ДеревоНаСайте, 5);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьУровень(Команда)
	
	Если Элементы.Дерево.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийУровень = ПолучитьУровень(ДеревоНаСайте.НайтиПоИдентификатору(Элементы.Дерево.ТекущаяСтрока));
	ПоказатьУровеньДерева(ТекущийУровень);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВыбранныеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПоказыватьВыбранные = Истина;
	Если ВыбранноеЗначение = "Выбранные" Тогда
		ОтборВыбранныеНаСервере();
	ИначеЕсли ВыбранноеЗначение = "НеВыбранные" Тогда
		ОтборНЕВыбранныеНаСервере();
	ИначеЕсли ВыбранноеЗначение = "Все" Тогда
		ОтборВсеНаСервере();
	КонецЕсли;
	
	Элементы.Выбран.Видимость = ПоказыватьВыбранные;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВыбранныеОчистка(Элемент, СтандартнаяОбработка)
	
	ОтключитьОтборВыбранные();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДеревоИзСохраненныхДанных(ИдентификаторКаталога, АдресНастроекСтруктурыКаталога)
	
	Дерево = РеквизитФормыВЗначение("ДеревоНаСайте");
	
	Если ЗначениеЗаполнено(АдресНастроекСтруктурыКаталога) Тогда
		СохраненныеДанные = ПолучитьИзВременногоХранилища(АдресНастроекСтруктурыКаталога);
	Иначе	
		ТЗ = РегистрыСведений.ОбменССайтомСтруктураКаталога.СоздатьНаборЗаписей();
		ТЗ.Отбор.УзелОбмена.Установить(УзелОбмена);
		ТЗ.Отбор.ИдентификаторКаталога.Установить(ИдентификаторКаталога);
		ТЗ.Прочитать();
		СохраненныеДанные = ТЗ.Выгрузить();
	КонецЕсли;
	
	Если СохраненныеДанные <> Неопределено Тогда
	
		МассивИсключений = Новый Массив;
		Попытка
			ПреобразоватьВДеревоРекурсия(Дерево, СохраненныеДанные, "", МассивИсключений);
		Исключение
			ЗаписьЖурналаРегистрации("ПреобразоватьВДеревоРекурсия", УровеньЖурналаРегистрации.Ошибка,,, ЗначениеВСтрокуВнутр(СохраненныеДанные));
		КонецПопытки;
		
		ЗначениеВРеквизитФормы(Дерево, "ДеревоНаСайте");
		
		ТекущаяСтрокаДерева = НайтиВДереве(ДеревоНаСайте);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиВДереве(Дерево, НайденнаяСтрока = 0)
	
	Для Каждого СтрДерева Из Дерево.ПолучитьЭлементы() Цикл
		
		Если НайденнаяСтрока > 0 Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
		
		Если СтрДерева.Идентификатор = ТекущаяСтрокаИдентификатор Тогда
			НайденнаяСтрока = СтрДерева.ПолучитьИдентификатор();
			Возврат НайденнаяСтрока;
		КонецЕсли;
		
		Если СтрДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			НайтиВДереве(СтрДерева, НайденнаяСтрока);
		КонецЕсли;
		
	КонецЦикла;

	Возврат НайденнаяСтрока;
	
КонецФункции

&НаСервере
Процедура ПреобразоватьВДеревоРекурсия(Дерево, тТаблица, Идентификатор = "", МассивИсключений)
	
	Если МассивИсключений.Найти(Идентификатор) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивИсключений.Добавить(Идентификатор);
	
	тПоиск = Новый Структура("РодительИдентификатор", Идентификатор);
	тМассив = тТаблица.НайтиСтроки(тПоиск);
	
	Для Каждого стр Из тМассив Цикл
		новаяСтрока = Дерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(новаяСтрока, стр);
		Если ЗначениеЗаполнено(стр.РодительКатегория) Тогда
			новаяСтрока.Номенклатура = стр.РодительКатегория;
		КонецЕсли;
		Если НоваяСтрока.ЭтоГруппа Тогда
			НоваяСтрока.Картинка = ?(ЗначениеЗаполнено(новаяСтрока.Номенклатура), 1, 0);
		Иначе
			НоваяСтрока.Картинка = 2;
			новаяСтрока.ГруппаКаталога = стр.Номенклатура;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(стр.Идентификатор)
			И стр.Идентификатор <> Идентификатор Тогда
			ПреобразоватьВДеревоРекурсия(новаяСтрока, тТаблица, стр.Идентификатор, МассивИсключений);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьВТаблицуРекурсия(тДерево, СохраненныеДанные, РодительИдентификатор = "")
	
	Для Каждого стр Из тДерево.Строки Цикл
		новаяСтрока = СохраненныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(новаяСтрока, стр);
		Если ЗначениеЗаполнено(РодительИдентификатор) Тогда
			новаяСтрока.РодительИдентификатор = стр.Родитель.Идентификатор;
		КонецЕсли;
		Если ТипЗнч(стр.Номенклатура) = Тип("СправочникСсылка.КатегорииНоменклатуры") Тогда
			новаяСтрока.РодительКатегория = стр.Номенклатура;
		ИначеЕсли ТипЗнч(стр.Номенклатура) = Тип("СправочникСсылка.Номенклатура") 
			И стр.ЭтоГруппа Тогда
			новаяСтрока.РодительГруппа = стр.Номенклатура;
		КонецЕсли; 
		
		Если стр.Строки.Количество()>0 Тогда
			ПреобразоватьВТаблицуРекурсия(стр, СохраненныеДанные, новаяСтрока.Идентификатор);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ЗаписатьИЗакрытьСервер()
	
	Дерево = РеквизитФормыВЗначение("ДеревоНаСайте");
		
	ТЗ = РегистрыСведений.ОбменССайтомСтруктураКаталога.СоздатьНаборЗаписей();
	ТЗ.Отбор.УзелОбмена.Установить(УзелОбмена);
	ТЗ.Отбор.ИдентификаторКаталога.Установить(ИдентификаторКаталога);
	
	СохраненныеДанные = ТЗ.Выгрузить();
	
	ЕстьНастройки = Дерево.Строки.Количество() > 0;	
	Если ЕстьНастройки Тогда
		ПреобразоватьВТаблицуРекурсия(Дерево, СохраненныеДанные);
	КонецЕсли;
	
	СохраненныеДанные.ЗаполнитьЗначения(УзелОбмена, "УзелОбмена");
	СохраненныеДанные.ЗаполнитьЗначения(ИдентификаторКаталога, "ИдентификаторКаталога");
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(СохраненныеДанные, Новый УникальныйИдентификатор);
	
	Возврат Новый Структура("ЕстьНастройки, ТекущаяСтрокаИдентификатор, ДетализацияОтбора, АдресВХранилище", 
		ЕстьНастройки,
		ТекущаяСтрокаИдентификатор,
		?(ЕстьНастройки, ДетализацияОтбора, 0),
		АдресВХранилище);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоИерархии(Группы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИерархияНоменклатуры.Номенклатура КАК Значение,
	|	ИерархияНоменклатуры.КартинкаГруппы КАК Картинка,
	|	ИерархияНоменклатуры.ПометкаУдаленияГруппы КАК ПометкаУдаления,
	|	ИерархияНоменклатуры.Номенклатура.Наименование КАК Представление,
	|	ИерархияНоменклатуры.Номенклатура.РеквизитДопУпорядочиванияУНФ КАК Порядок
	|ИЗ
	|	РегистрСведений.ИерархияНоменклатуры КАК ИерархияНоменклатуры
	|ГДЕ
	|	ИерархияНоменклатуры.Номенклатура В ИЕРАРХИИ(&Группы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок ИЕРАРХИЯ,
	|	Представление ИЕРАРХИЯ";
	Запрос.УстановитьПараметр("Группы", Группы);
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Если Группы.НайтиПоЗначению(Справочники.Номенклатура.ПустаяСсылка()) <> Неопределено Тогда
		СтрокаНетГруппы = Дерево.Строки.Вставить(0);
		СтрокаНетГруппы.Значение	 = Справочники.Номенклатура.ПустаяСсылка();
		СтрокаНетГруппы.Представление= ПредставлениеВсеГруппы();
		СтрокаНетГруппы.Картинка = -1;
		
		СтрокаНетГруппы = Дерево.Строки.Добавить();
		СтрокаНетГруппы.Значение	 = Справочники.Номенклатура.ПустаяСсылка();
		СтрокаНетГруппы.Представление= ПредставлениеНетГруппы();
		СтрокаНетГруппы.Картинка = -1;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Дерево,"ОтборИерархия");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеВсеГруппы()
	Возврат НСтр("ru = '<Все группы>'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеНетГруппы()
	Возврат НСтр("ru = '<Нет группы>'");
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоКатегорий(КатегорииСписок)
	
	Дерево = ДеревоКатегорий(КатегорииСписок);
	ЗначениеВРеквизитФормы(Дерево, "ОтборКатегории");
	
КонецПроцедуры

&НаСервере
Функция ДеревоКатегорий(КатегорииСписок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КатегорииНоменклатуры.Ссылка КАК Значение,
	|	КатегорииНоменклатуры.Наименование КАК Представление
	|ИЗ
	|	Справочник.КатегорииНоменклатуры КАК КатегорииНоменклатуры
	|ГДЕ
	|	КатегорииНоменклатуры.Ссылка В(&КатегорииСписок)
	|	ИЛИ &ВсеКатегории
	|
	|УПОРЯДОЧИТЬ ПО
	|	КатегорииНоменклатуры.ЭтоГруппа ИЕРАРХИЯ,
	|	КатегорииНоменклатуры.РеквизитДопУпорядочивания,
	|	КатегорииНоменклатуры.Наименование";
	Запрос.УстановитьПараметр("КатегорииСписок", КатегорииСписок);
	Запрос.УстановитьПараметр("ВсеКатегории", КатегорииСписок.НайтиПоЗначению(Справочники.КатегорииНоменклатуры.ПустаяСсылка()) <> Неопределено);
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Если Дерево.Строки.Количество() > 1 Тогда
		
		СтрокаНетКатегории = Дерево.Строки.Вставить(0);
		СтрокаНетКатегории.Значение = Справочники.Номенклатура.ПустаяСсылка();
		СтрокаНетКатегории.Представление = НСтр("ru='<Все категории>'");
		
	КонецЕсли;
	
	Возврат Дерево;
	
КонецФункции

&НаКлиенте
Процедура ОтборКатегорииПриАктивизацииСтрокиНаКлиенте()
	
	Если ОтборКатегорииИерархия = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.ГруппыНоменклатуры") Тогда
		
		ОтборКатегорииТекущая = ПредопределенноеЗначение("Справочник.КатегорииНоменклатуры.ПустаяСсылка");
		
	ИначеЕсли ОтборКатегорииИерархия = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.КатегорииНоменклатуры") Тогда
		
		Если Элементы.ОтборКатегории.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОтборКатегорииТекущая = Элементы.ОтборКатегории.ТекущиеДанные.Значение;
		
	КонецЕсли;
	
	ОтборКатегорииПриАктивизацииСтрокиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОтборКатегорииПриАктивизацииСтрокиНаСервере()
	
	КатегорииНоменклатурыСервер.УстановитьОтборПоКатегории(
		ЭтотОбъект,
		Номенклатура, 
		ОтборКатегорииТекущая
	);
	
КонецПроцедуры

&НаСервере
Функция ИдентификаторВСтроке(СтрокаДерева)
	
	Если НЕ ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
		Возврат Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ТекИдентификатор = СтрокаДерева.Номенклатура.УникальныйИдентификатор();
	Если НЕ СтрокаДерева.ЭтоГруппа Тогда
		СтрокаДерева.Картинка = 2;
		Возврат ТекИдентификатор;
	КонецЕсли;
	
	Дерево = РеквизитФормыВЗначение("ДеревоНаСайте");
	ОтборИдентификатор = Новый Структура("Идентификатор, ЭтоГруппа", Строка(ТекИдентификатор), Истина);
	СтрокиДерева = Дерево.Строки.НайтиСтроки(ОтборИдентификатор, Истина);
	Если СтрокиДерева.Количество() > 0 Тогда
		// эта группа уже добавлена
		СтрокаДерева.Картинка = 0; //добавленная вручную группа
		СтрокаДерева.Номенклатура = Неопределено;
		Возврат Новый УникальныйИдентификатор;
	Иначе
		СтрокаДерева.Картинка = 1; //перенесенная группа
		Возврат ТекИдентификатор;
	КонецЕсли; 
	
КонецФункции

&НаКлиенте
Функция ПроверитьВозможностьПереноса(ПереносимыйЭлемент, Знач НовыйРодитель)
	
	Пока НЕ НовыйРодитель = Неопределено Цикл
		Если ПереносимыйЭлемент = НовыйРодитель Тогда
			Возврат Ложь;
		КонецЕсли;
		НовыйРодитель = НовыйРодитель.ПолучитьРодителя();
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СкопироватьСтрокуДерева(Приемник, Источник, ЭтоГруппа = Ложь)
	
	Перем НоваяСтрока;
	
	Если Источник = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДанныеФормыДерево") Тогда
		
		Для каждого элДерева Из Источник.ПолучитьЭлементы() Цикл
			СкопироватьСтрокуДерева(Приемник, элДерева, Истина);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДанныеФормыКоллекцияЭлементовДерева") Тогда
		
		Для каждого элДерева Из Источник Цикл
			СкопироватьСтрокуДерева(Приемник, элДерева, элДерева.ПолучитьЭлементы().Количество() > 0);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДанныеФормыЭлементДерева") Тогда
		
		НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Номенклатура = Источник.Номенклатура;
		Если Источник.Свойство("ГруппаКаталога") Тогда
			Если Источник.ГруппаКаталога="" Тогда
				НоваяСтрока.ГруппаКаталога = Источник.Идентификатор;
			Иначе
				НоваяСтрока.ГруппаКаталога = Источник.ГруппаКаталога;
			КонецЕсли;
		Иначе
			НоваяСтрока.ГруппаКаталога = Источник.Номенклатура;	
		КонецЕсли;
		
		Если Источник.Свойство("ЭтоГруппа") Тогда
			НоваяСтрока.ЭтоГруппа = Источник.ЭтоГруппа;
			НоваяСтрока.Картинка = Источник.Картинка;
		Иначе
			НоваяСтрока.ЭтоГруппа = ЭтоГруппа;
			НоваяСтрока.Картинка = ?(ЭтоГруппа, 1, 2);
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
		    НоваяСтрока.Идентификатор = НоваяСтрока.Номенклатура.УникальныйИдентификатор();
		Иначе 
			НоваяСтрока.Идентификатор = Источник.Идентификатор;
		КонецЕсли;
		Если ТипЗнч(Приемник) = Тип("ДанныеФормыЭлементДерева") Тогда
			НоваяСтрока.РодительИдентификатор = Приемник.Идентификатор;
		КонецЕсли; 
		
		Если Источник.ПолучитьЭлементы().Количество() > 0 Тогда
			СкопироватьСтрокуДерева(НоваяСтрока, Источник.ПолучитьЭлементы());
		КонецЕсли;
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокиНаСервере(ИДПриемник, ИсточникМассив)

	Если ДетализацияОтбора = 2 Тогда
		// перетаскиваем только группы
		Для каждого стр Из ИсточникМассив Цикл
			Если ТипЗнч(стр) = Тип("СправочникСсылка.Номенклатура") И НЕ стр.ЭтоГруппа Тогда
				Возврат;
			КонецЕсли;
			
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Если ИДПриемник = Неопределено Тогда
		Приемник = ДеревоНаСайте;
	Иначе
		Приемник = ДеревоНаСайте.НайтиПоИдентификатору(ИДПриемник);
		Если НЕ Приемник.ЭтоГруппа Тогда
			// перетаскивание на элемент (не группу)
			Приемник = Приемник.ПолучитьРодителя();
			
			Если Приемник = Неопределено Тогда
				Приемник = ДеревоНаСайте;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыВГруппе = Приемник.ПолучитьЭлементы();
	
	Для каждого Источник Из ИсточникМассив Цикл
		
		НоваяСтрока = ЭлементыВГруппе.Добавить();
		НоваяСтрока.ГруппаКаталога = Источник.Наименование;
		НоваяСтрока.ЭтоГруппа = Источник.ЭтоГруппа;
		НоваяСтрока.Номенклатура = Источник.Ссылка;
		
		НоваяСтрока.Идентификатор = ИдентификаторВСтроке(НоваяСтрока);		
		
		ТекущийРодитель = НоваяСтрока.ПолучитьРодителя();
		Если ТекущийРодитель <> Неопределено Тогда
			 НоваяСтрока.РодительИдентификатор = ТекущийРодитель.Идентификатор;
		КонецЕсли;

	КонецЦикла;
	
	Если ПоказыватьВыбранные Тогда
		ОбновитьВыбранныеТовары(ПоказыватьВыбранные);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьНоменклатуруРекурсивно(Приемник, ИсточникМассив)

	Для каждого Источник Из ИсточникМассив Цикл
	
		НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
		НоваяСтрока.ГруппаКаталога = Источник.Наименование;
		НоваяСтрока.ЭтоГруппа = Источник.ЭтоГруппа;

		НоваяСтрока.Номенклатура = Источник.Ссылка;
		НоваяСтрока.Идентификатор = ИдентификаторВСтроке(НоваяСтрока);
		
		ТекущийРодитель = НоваяСтрока.ПолучитьРодителя();
		Если ТекущийРодитель <> Неопределено Тогда
			 НоваяСтрока.РодительИдентификатор = ТекущийРодитель.Идентификатор;
		КонецЕсли;
		
		Если Источник.Строки.Количество() > 0 Тогда
			ДобавитьНоменклатуруРекурсивно(НоваяСтрока, Источник.Строки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПоказыватьВыбранные Тогда
		ОбновитьВыбранныеТовары(ПоказыватьВыбранные);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьКатегориюРекурсивно(Приемник, ИсточникМассив)

	Для каждого Источник Из ИсточникМассив Цикл
	
		НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
		
		Если НЕ ЗначениеЗаполнено(Источник.Ссылка) Тогда
			НоваяСтрока.Номенклатура = Источник.Категория;
			НоваяСтрока.ЭтоГруппа = Истина;
			НоваяСтрока.ГруппаКаталога = Источник.Категория;
		Иначе
			НоваяСтрока.Номенклатура = Источник.Ссылка;
			НоваяСтрока.ЭтоГруппа = Источник.ЭтоГруппа;
			НоваяСтрока.ГруппаКаталога = Источник.Ссылка;
		КонецЕсли;
	    НоваяСтрока.Идентификатор = ИдентификаторВСтроке(НоваяСтрока);
		
		Если Источник.Строки.Количество() > 0 Тогда
			ДобавитьКатегориюРекурсивно(НоваяСтрока, Источник.Строки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПоказыватьВыбранные Тогда
		ОбновитьВыбранныеТовары(ПоказыватьВыбранные);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПеренестиСПодчиненными(ИДПриемник, Источник, ДетализацияОтбора)
	
	Если ЗначениеЗаполнено(ИДПриемник) Тогда
		Приемник = ДеревоНаСайте.НайтиПоИдентификатору(ИДПриемник);
	Иначе
		Приемник = ДеревоНаСайте;
	КонецЕсли; 
	
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.Номенклатура") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.Наименование КАК Наименование,
		|	Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
		|	Номенклатура.Родитель КАК Родитель
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В ИЕРАРХИИ(&Источник)
		|	И (Номенклатура.ЭтоГруппа ИЛИ НЕ &ТолькоГруппы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура.Ссылка ИЕРАРХИЯ";
		Запрос.УстановитьПараметр("Источник", Источник);
		Запрос.УстановитьПараметр("ТолькоГруппы", ДетализацияОтбора = 2);
		
		Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		ДобавитьНоменклатуруРекурсивно(Приемник, Результат.Строки);
		
	ИначеЕсли ДетализацияОтбора = 2 Тогда
		// одна категория без подчиненных товаров
		
		НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Номенклатура = Источник;
		НоваяСтрока.ЭтоГруппа = Истина;
		НоваяСтрока.ГруппаКаталога = Источник;
	    НоваяСтрока.Идентификатор = ИдентификаторВСтроке(НоваяСтрока);
		
		Если ПоказыватьВыбранные Тогда
			ОбновитьВыбранныеТовары(ПоказыватьВыбранные);
		КонецЕсли;
		
	Иначе
		// категория с подчиненными товарами
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.Наименование КАК Наименование,
		|	Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
		|	Номенклатура.КатегорияНоменклатуры КАК Категория
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.КатегорияНоменклатуры В ИЕРАРХИИ(&Источник)
		|ИТОГИ ПО
		|	Категория";
		Запрос.УстановитьПараметр("Источник", Источник);
		
		Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		ДобавитьКатегориюРекурсивно(Приемник, Результат.Строки);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьУровень(ТекущаяСтрока, ТекУровень = 0)
	
	РодительВИерархии = ТекущаяСтрока.ПолучитьРодителя();
	Если РодительВИерархии <> Неопределено Тогда
		ТекУровень = ТекУровень + 1;
		ПолучитьУровень(РодительВИерархии, ТекУровень);
	Иначе
		Возврат ТекУровень;
	КонецЕсли;
	
	Возврат ТекУровень;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьУровеньДерева(Уровень)
	
	СвернутьДерево(ДеревоНаСайте);
	РазвернутьДерево(ДеревоНаСайте, Уровень);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДерево(Дерево)
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		СвернутьДерево(Строка);
		
		Элементы.Дерево.Свернуть(ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(Дерево, знач Уровень)
	
	Уровень=Уровень-1;
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		
		Если Уровень>=0 Тогда
			ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
			Элементы.Дерево.Развернуть(ИдентификаторСтроки);

			РазвернутьДерево(Строка, Уровень);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВыбранныеТовары(Показывать)

	МассивОтбор = Новый Массив;
	Если Показывать Тогда
		Дерево = РеквизитФормыВЗначение("ДеревоНаСайте");
		ОбойтиДеревоРекурсивноНаСервере(Дерево, МассивОтбор);
	КонецЕсли; 
	
	Номенклатура.Параметры.УстановитьЗначениеПараметра("Выбранные", МассивОтбор);
	
КонецПроцедуры

&НаСервере
Процедура ОбойтиДеревоРекурсивноНаСервере(ДеревоЗначений, МассивОтбор)
	Для Каждого СтрокаДерева Из ДеревоЗначений.Строки Цикл
        МассивОтбор.Добавить(СтрокаДерева.Номенклатура);
         
        Если СтрокаДерева.Строки.Количество() > 0 Тогда
           ОбойтиДеревоРекурсивноНаСервере(СтрокаДерева, МассивОтбор);
        КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОтборВыбранныеНаСервере()
	
	ОбновитьВыбранныеТовары(Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Номенклатура, "Выбран", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОтборНЕВыбранныеНаСервере()
	
	ОбновитьВыбранныеТовары(Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Номенклатура, "Выбран", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОтборВсеНаСервере()
	
	ОбновитьВыбранныеТовары(Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Номенклатура, "Выбран", , , , Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОтборВыбранные()
	
	ОтборВыбранные = "";
	ПоказыватьВыбранные = Ложь;
	Элементы.Выбран.Видимость = Ложь;
	ОбновитьВыбранныеТовары(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДетализацию(Детализация) Экспорт
		
	Модифицированность = Истина;
	ДетализацияОтбора = Детализация;
	Элементы.НоменклатураОтбор.Доступность = (ДетализацияОтбора = 1);
	ДеревоНаСайте.ПолучитьЭлементы().Очистить();
	
	ОтключитьОтборВыбранные();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДетализациюРезультат(Результат, ДополнительныеПараметры) Экспорт
		
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		ИзменитьДетализацию(ДополнительныеПараметры);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ТекущаяСтрокаДерева) Тогда
		Элементы.Дерево.Развернуть(ТекущаяСтрокаДерева, Истина);
		Элементы.Дерево.ТекущаяСтрока = ТекущаяСтрокаДерева;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
