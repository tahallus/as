
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновитьДанныеНаСервере();
	ОбновитьОтображениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьОтображениеНаКлиенте();
	
	Если Объект.НастройкаЗавершена Тогда
		ПоказатьСтраницуИнтеграции();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьОтображениеВремениЗапускаНаКлиенте", 15);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "НеКорректныйВводКапчи" Тогда
		ЗапуститьОперациюВФонеЗавершение("Капча",Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СтрШаблон = "Интеграция (%1)";
	Объект.Наименование = СтрШаблон(СтрШаблон, Объект.НаименованиеГруппы);
	
	Если Не ЗначениеЗаполнено(Объект.Код) Тогда
		УстановитьНовыйКодНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовЭлементовФормы

&НаКлиенте
Процедура ИнтеграцииКартинкаНажатие(Элемент)
	ПоказатьСтраницуИнтеграции();
КонецПроцедуры

&НаКлиенте
Процедура ИнтеграцииНадписьНажатие(Элемент)
	ПоказатьСтраницуИнтеграции();
КонецПроцедуры

&НаКлиенте
Процедура СтрокаСопоставленияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ФормаВыбораНоменклатурыЗавершение", ЭтаФорма);
	
	ОписаниеУзлаОбменаВК = Новый Структура;
	ОписаниеУзлаОбменаВК.Вставить("ИдентификаторГруппы" , Объект.ИдентификаторГруппы);
	ОписаниеУзлаОбменаВК.Вставить("МагазинДляИнтеграции" , Объект.МагазинДляИнтеграции);
	ОписаниеУзлаОбменаВК.Вставить("СсылкаНаУзелОбмена" , Объект.Ссылка);
	
	ОткрытьФорму("ПланОбмена.ИнтеграцияСМагазинамиСоцСетей.Форма.ФормаВыбораНоменклатуры", ОписаниеУзлаОбменаВК, ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТокенДоступа(Команда)
	ОбновитьТокенДоступаНаКлиенте(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СтрокаАвторизацииПриИзменении(Элемент) 
	
	ОбработатьСтрокуАвторизацииНаКлиенте();
	
	ОбновитьСписокГруппНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторГруппыПриИзменении(Элемент)
	Объект.НаименованиеГруппы =
	Элементы.ИдентификаторГруппы.СписокВыбора.НайтиПоЗначению(Объект.ИдентификаторГруппы).Представление;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокГрупп(Команда)
	ОбновитьСписокГруппНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СтатусыЗаказовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СтатусыЗаказовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьОстатокПриИзменении(Элемент)
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура СпособУстановкиДатыОтгрузкиЗаказаПриИзменении(Элемент)
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура СтрокаАвторизацииСообществаПриИзменении(Элемент) 
	
	ОбработатьСтрокуАвторизацииНаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		СтрокаЗначениеСКартинки = Результат;
		
		ЗапуститьОперациюВФоне(Истина);
		
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТокенДоступаСообщества(Команда)
	ОбновитьТокенДоступаСообществаНаКлиенте(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбмениватьсяСтатусамиЗаказаПриИзменении(Элемент)
	
	ОбновитьОтображениеНаКлиенте();
	
	Если Объект.ОбмениватьсяСтатусамиЗаказа Тогда
		
		НовСтр = Объект.СтатусыЗаказов.Добавить();
		НовСтр.КодСтатуса = 0;
		НовСтр.НаименованиеСтатуса = "Новый";
		
		НовСтр = Объект.СтатусыЗаказов.Добавить();
		НовСтр.КодСтатуса = 1;
		НовСтр.НаименованиеСтатуса = "Согласуется";
		
		НовСтр = Объект.СтатусыЗаказов.Добавить();
		НовСтр.КодСтатуса = 2;
		НовСтр.НаименованиеСтатуса = "Собирается";
		
		НовСтр = Объект.СтатусыЗаказов.Добавить();
		НовСтр.КодСтатуса = 3;
		НовСтр.НаименованиеСтатуса = "Доставляется";
		
		НовСтр = Объект.СтатусыЗаказов.Добавить();
		НовСтр.КодСтатуса = 4;
		НовСтр.НаименованиеСтатуса = "Выполнен";
		НовСтр.СостояниеЗаказаПокупателя = ПредопределенноеЗначение("Справочник.СостоянияЗаказовПокупателей.Завершен");
		
		НовСтр = Объект.СтатусыЗаказов.Добавить();
		НовСтр.КодСтатуса = 5;
		НовСтр.НаименованиеСтатуса = "Отменен";
		
		НовСтр = Объект.СтатусыЗаказов.Добавить();
		НовСтр.КодСтатуса = 6;
		НовСтр.НаименованиеСтатуса = "Возвращен";
		
	Иначе
		Объект.СтатусыЗаказов.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДоставкуПриИзменении(Элемент)
	ОбновитьОтображениеНаКлиенте();
	
	Если Объект.ИспользоватьДоставку Тогда
		// Идентификаторы доставки
		НовСтр = Объект.СлужбыДоставки.Добавить();
		НовСтр.Идентификатор = "В ближайшее почтовое отделение";
		НовСтр.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.Почта");
		
		НовСтр = Объект.СлужбыДоставки.Добавить();
		НовСтр.Идентификатор = "Курьерская доставка";
		НовСтр.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.Курьер");
		
		НовСтр = Объект.СлужбыДоставки.Добавить();
		НовСтр.Идентификатор = "Самовывоз";
		НовСтр.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.Самовывоз");
		НовСтр.СлужбаДоставки = ПредопределенноеЗначение("Справочник.СлужбыДоставки.ДоставкаСобственнымиСилами");
		
		НовСтр = Объект.СлужбыДоставки.Добавить();
		НовСтр.Идентификатор = "Доставка в пункт выдачи СДЭК";
		НовСтр.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.ПунктВыдачи");
		
		НовСтр = Объект.СлужбыДоставки.Добавить();
		НовСтр.Идентификатор = "Доставка в пункт выдачи Boxberry";
		НовСтр.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.ПунктВыдачи");
	Иначе
		Объект.СлужбыДоставки.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВариантВыгрузкиХарактеристикПриИзменении(Элемент)
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОперациюВФонеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "Капча" Тогда
	КонецЕсли;
	
	ОбновитьДанныеНаСервере();
	ОбновитьОтображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбменТолькоИзменения(Команда)
	ЗапуститьОперациюВФоне();
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПроверкиНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("ПланОбмена.ИнтеграцияСМагазинамиСоцСетей.Форма.ФормаПроверкиИзображенийТоваров",,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборкуТоваров(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторГруппы" , Объект.ИдентификаторГруппы);
	ПараметрыФормы.Вставить("МагазинДляИнтеграции" , Объект.МагазинДляИнтеграции);
	ПараметрыФормы.Вставить("СсылкаНаУзелОбмена" , Объект.Ссылка);
	
	ОткрытьФорму("ПланОбмена.ИнтеграцияСМагазинамиСоцСетей.Форма.ФормаНаполненияВиртуальныхКаталогов",ПараметрыФормы,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПодборкиТоваровПриИзменении(Элемент)
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКартинкаНажатие(Элемент)
	ПоказатьСтраницуТовары();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНадписьНажатие(Элемент)
	ПоказатьСтраницуТовары();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКартинкаНажатие(Элемент)
	ПоказатьСтраницуЗаказы();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыНадписьНажатие(Элемент)
	ПоказатьСтраницуЗаказы();
КонецПроцедуры

&НаКлиенте
Процедура СтатусыЗаказаКартинкаНажатие(Элемент)
	ПоказатьСтраницуСтатусыЗаказа();
КонецПроцедуры

&НаКлиенте
Процедура СтатусыЗаказаНадписьНажатие(Элемент)
	ПоказатьСтраницуСтатусыЗаказа();
КонецПроцедуры

&НаКлиенте
Процедура ДоставкаКартинкаНажатие(Элемент)
	ПоказатьСтраницуДоставка();
КонецПроцедуры

&НаКлиенте
Процедура ДоставкаНадписьНажатие(Элемент)
	ПоказатьСтраницуДоставка();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительноНадписьНажатие(Элемент)
	ПоказатьСтраницуДополнительно();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительноКартинкаНажатие(Элемент)
	ПоказатьСтраницуДополнительно();
КонецПроцедуры

&НаКлиенте
Процедура ЧатКартинкаНажатие(Элемент)
	ПоказатьСтраницуЧат();
КонецПроцедуры

&НаКлиенте
Процедура ЧатНадписьНажатие(Элемент)
	ПоказатьСтраницуЧат();
КонецПроцедуры 

&НаКлиенте
Процедура ПриветствиеКартинкаНажатие(Элемент)
	ПоказатьСтраницуПриветствие();
КонецПроцедуры

&НаКлиенте
Процедура ПриветствиеНадписьНажатие(Элемент)
	ПоказатьСтраницуПриветствие();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаТоваровНадписьНажатие(Элемент)
	ЗагрузитьТоварыВКонтактеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаТоваровКартинкаНажатие(Элемент)
	ЗагрузитьТоварыВКонтактеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура НачатьНастройку(Команда)
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",1);
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНазад4(Команда)
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("Чат",1);
	ДобавитьНастройкуНаКлиенте("Товары",0);
	ОбновитьОтображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДалее4(Команда)
	
	Если КоличествоКатегорий = 0
		И (Объект.ВыгружатьИзмененияНоменклатуры Или Объект.ВыгружатьЦены Или Объект.ВыгружатьОстаток) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не выбраны товары для выгрузки!",,"СтрокаСопоставления","Объект");
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ВыгружатьЦены И Не ЗначениеЗаполнено(Объект.ВидЦеныНоменклатуры) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю("Укажите основную цену!",,"ВидЦеныНоменклатуры","Объект");
		
		Возврат;
		
	КонецЕсли;
	
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("Чат",2);
	ДобавитьНастройкуНаКлиенте("Товары",2);
	ДобавитьНастройкуНаКлиенте("Заказы",1);
	ОбновитьОтображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНазад5(Команда)
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("Чат",2);
	ДобавитьНастройкуНаКлиенте("Товары",1);
	ДобавитьНастройкуНаКлиенте("Заказы",0);
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДалее5(Команда)
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("Чат",2);
	ДобавитьНастройкуНаКлиенте("Товары",2);
	ДобавитьНастройкуНаКлиенте("Заказы",2);
	ДобавитьНастройкуНаКлиенте("СтатусыЗаказа",1);
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНазад6(Команда)
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("Чат",2);
	ДобавитьНастройкуНаКлиенте("Товары",2);
	ДобавитьНастройкуНаКлиенте("Заказы",1);
	ДобавитьНастройкуНаКлиенте("СтатусыЗаказа",0);
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДалее6(Команда)
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("Чат",2);
	ДобавитьНастройкуНаКлиенте("Товары",2);
	ДобавитьНастройкуНаКлиенте("Заказы",2);
	ДобавитьНастройкуНаКлиенте("СтатусыЗаказа",2);
	ДобавитьНастройкуНаКлиенте("Доставка",1);
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНазад7(Команда)
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("Чат",2);
	ДобавитьНастройкуНаКлиенте("Товары",2);
	ДобавитьНастройкуНаКлиенте("Заказы",2);
	ДобавитьНастройкуНаКлиенте("СтатусыЗаказа",1);
	ДобавитьНастройкуНаКлиенте("Доставка",0);
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДалее7(Команда)
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("Чат",2);
	ДобавитьНастройкуНаКлиенте("Товары",2);
	ДобавитьНастройкуНаКлиенте("Заказы",2);
	ДобавитьНастройкуНаКлиенте("СтатусыЗаказа",2);
	ДобавитьНастройкуНаКлиенте("Доставка",2);
	ДобавитьНастройкуНаКлиенте("Оповещения",1);
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНазад8(Команда)
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("Чат",2);
	ДобавитьНастройкуНаКлиенте("Товары",2);
	ДобавитьНастройкуНаКлиенте("Заказы",2);
	ДобавитьНастройкуНаКлиенте("СтатусыЗаказа",2);
	ДобавитьНастройкуНаКлиенте("Доставка",1);
	ДобавитьНастройкуНаКлиенте("Оповещения",0);
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДалее8(Команда)
	
	Если Объект.ИспользоватьОповещения И Не ЗначениеЗаполнено(Объект.УчетнаяЗаписьДляОповещения) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю("Укажите учетную запись для отправки писем!",,"УчетнаяЗаписьДляОповещения","Объект");
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ИспользоватьОповещения И ЗначениеЗаполнено(Объект.УчетнаяЗаписьДляОповещения) 
		И НЕ УчетнаяЗаписьНастроена(Объект.УчетнаяЗаписьДляОповещения) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю("Требуется настроить учетную запись для отправки писем!",,"УчетнаяЗаписьДляОповещения","Объект"); 
		
		ПоказатьЗначение(,Объект.УчетнаяЗаписьДляОповещения);
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ИспользоватьОповещения И Объект.ПодпискиНаСобытие.Количество() = 0  Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю("Укажите минимум 1 получателя!",,"ПодпискиНаСобытие","Объект"); 
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ИспользоватьОповещения И Объект.ПодпискиНаСобытие.Количество() > 0 Тогда
		
		ПроверкаНеПройдена = Ложь;
		Для Каждого Стр из Объект.ПодпискиНаСобытие Цикл
			Если Не ИнтеграцияСМагазинамиСоцСетейСервер.ЭтоКорректныйEmail(Стр.ЭлектроннаяПочта) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю("Не корректный Email!",,"ПодпискиНаСобытие[" +( Стр.НомерСтроки - 1) + "].ЭлектроннаяПочта","Объект");
				ПроверкаНеПройдена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ПроверкаНеПройдена Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("Чат",2);
	ДобавитьНастройкуНаКлиенте("Товары",2);
	ДобавитьНастройкуНаКлиенте("Заказы",2);
	ДобавитьНастройкуНаКлиенте("СтатусыЗаказа",2);
	ДобавитьНастройкуНаКлиенте("Доставка",2);
	ДобавитьНастройкуНаКлиенте("Оповещения",2);
	ОбновитьОтображениеНаКлиенте();
	ПоказатьСтраницуИнтеграции();
КонецПроцедуры 

&НаКлиенте
Процедура КнопкаНазад2(Команда)
	ДобавитьНастройкуНаКлиенте("Приветствие",1);
	ДобавитьНастройкуНаКлиенте("Дополнительно",0);
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДалее2(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.КодПриложения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните поле ""ID приложения""",,"КодПриложения","Объект");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтрокаАвторизации) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните поле ""Строка авторизации""",,"СтрокаАвторизации","Объект");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТокенДоступа) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните поле ""Токен доступа""",,"ТокенДоступа","Объект");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ИдентификаторГруппы) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните поле ""Сообщество ВКонтакте""",,"ИдентификаторГруппы","Объект");
		Возврат;
	КонецЕсли;
	
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("Чат",1);
	ОбновитьОтображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНазад3(Команда)
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",1);
	ДобавитьНастройкуНаКлиенте("Чат",0);
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДалее3(Команда)
	
	Если Объект.ПодключитьВходящиеСообщения Тогда
		
		Если ОбсужденияПодключены() Тогда
			ОбсужденияПодключеныЗавершение(Истина, Неопределено);
			
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбсужденияПодключеныЗавершение",ЭтаФорма);
			ОбсужденияКлиент.ПоказатьПодключение(ОписаниеОповещения);
		КонецЕсли;
		
	Иначе 
		
		ОбсужденияПодключеныЗавершение(Истина, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомощьКартинкаНажатие(Элемент)
	
	ОткрытьИнструкцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПомощьНадписьНажатие(Элемент)
	
	ОткрытьИнструкцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьВходящиеСообщенияПриИзменении(Элемент)
	Элементы.СтраницыЧатВыбор.ТекущаяСтраница 
	= ?(Объект.ПодключитьВходящиеСообщения, Элементы.СтраницаЧатИспользовать, Элементы.СтраницаЧатНеИспользовать);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОповещениеПриИзменении(Элемент)
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ОповещенияКартинкаНажатие(Элемент)
	ПоказатьСтраницуОповещение();
КонецПроцедуры

&НаКлиенте
Процедура ОповещенияНадписьНажатие(Элемент)
	ПоказатьСтраницуОповещение();
КонецПроцедуры

&НаКлиенте
Процедура ПодпискиНаСобытиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 
		ТекущиеДанные = Элементы.ПодпискиНаСобытие.ТекущиеДанные;
		ТекущиеДанные.Капча = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТекстПодсказки11ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "КакСоздатьПриложениеВКонтакте" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок" , "Как создать приложение ВКонтакте?");
		ПараметрыФормы.Вставить("ИмяМакета" , "ПодсказкаСоздатьПриложение");
		
		ОткрытьФорму("ПланОбмена.ИнтеграцияСМагазинамиСоцСетей.Форма.ФормаПодсказки",ПараметрыФормы,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ДекорацияТекстПодсказки10ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ЧатВКонтакте" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок" , "Чат сообщества ВКонтакте в УНФ");
		ПараметрыФормы.Вставить("ИмяМакета" , "ПодсказкаЧат");
		
		ОткрытьФорму("ПланОбмена.ИнтеграцияСМагазинамиСоцСетей.Форма.ФормаПодсказки",ПараметрыФормы,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура УдалитьИнтеграциюНаКлиенте(Команда)
	УдалитьИнтеграцию();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьТокенДоступаНаКлиенте(ОбновитьПринудительно = Ложь) 
	Если ЗначениеЗаполнено(Объект.КодПриложения) И (ОбновитьПринудительно Или Объект.ОкончанияДействияТокенаДоступа <= ТекущаяДата()) Тогда
		ПерейтиПоНавигационнойСсылке(ПолучитьСсылкуНаСтрокуАвторизацииНаКлиенте());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТокенДоступаСообществаНаКлиенте(ОбновитьПринудительно = Ложь) 
	Если ЗначениеЗаполнено(Объект.КодПриложения) И (ОбновитьПринудительно Или Объект.ОкончанияДействияТокенДоступаСообщества <= ТекущаяДата()) Тогда
		ПерейтиПоНавигационнойСсылке(ПолучитьСсылкуНаСтрокуАвторизацииНаКлиенте(Истина));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСсылкуНаСтрокуАвторизацииНаКлиенте(ЭтоСообщество = Ложь) Экспорт
	
	НастройкиУзла = Новый Структура;
	НастройкиУзла.Вставить("МагазинДляИнтеграции" , Объект.МагазинДляИнтеграции);
	НастройкиУзла.Вставить("КодПриложения" , Объект.КодПриложения);
	НастройкиУзла.Вставить("ИдентификаторГруппы" , Объект.ИдентификаторГруппы);
	
	Возврат ПолучитьСсылкуНаСтрокуАвторизацииНаСервереБезКонтекста(НастройкиУзла, ЭтоСообщество);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаСтрокуАвторизацииНаСервереБезКонтекста(НастройкиУзла, ЭтоСообщество) Экспорт
	
	Возврат ПланыОбмена.ИнтеграцияСМагазинамиСоцСетей.ПолучитьСсылкуНаСтрокуАвторизации(НастройкиУзла, ЭтоСообщество);
	
КонецФункции

&НаСервере
Процедура ОбновитьСписокГруппНаСервере()
	
	Элементы.ИдентификаторГруппы.СписокВыбора.Очистить();
	
	ОписаниеУзлаОбменаВК = Новый Структура;
	ОписаниеУзлаОбменаВК.Вставить("ТокенДоступа", Объект.ТокенДоступа);
	СписокЗначений = ПланыОбмена.ИнтеграцияСМагазинамиСоцСетей.ПолучитьСписокГруппПользователя(ОписаниеУзлаОбменаВК);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ИнтеграцияСМагазинамиСоцСетей.ИдентификаторГруппы КАК ИдентификаторГруппы
	|ИЗ
	|	ПланОбмена.ИнтеграцияСМагазинамиСоцСетей КАК ИнтеграцияСМагазинамиСоцСетей
	|ГДЕ
	|	ИнтеграцияСМагазинамиСоцСетей.МагазинДляИнтеграции = ЗНАЧЕНИЕ(Перечисление.МагазиныСоцСетейДляИнтеграции.VK)
	|	И НЕ ИнтеграцияСМагазинамиСоцСетей.ПометкаУдаления
	|	И ИнтеграцияСМагазинамиСоцСетей.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивРанееВыбранных = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ИдентификаторГруппы");
	
	Если СписокЗначений <> Неопределено Тогда
		СписокВыбора = Элементы.ИдентификаторГруппы.СписокВыбора;
		Для Каждого Стр Из СписокЗначений Цикл
			Если МассивРанееВыбранных.Найти(Стр.Значение) = Неопределено Тогда
				СписокВыбора.Добавить(Стр.Значение, Стр.Представление, Стр.Значение = Объект.ИдентификаторГруппы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеВремениЗапускаНаКлиенте() Экспорт
	
	Если Объект.НастройкаЗавершена Тогда
		ОбновитьОтображениеВремениЗапуска();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеВремениЗапуска()
	
	СтрокаВремени = "--:--";
	СтрокаВремени2 = "--:--";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(ПоследняяУспешнаяОперацияОбменаДляМагазинаСоцСетей.ДатаОперации), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОперации
		|ИЗ
		|	РегистрСведений.ПоследняяУспешнаяОперацияОбменаДляМагазинаСоцСетей КАК ПоследняяУспешнаяОперацияОбменаДляМагазинаСоцСетей
		|ГДЕ
		|	ПоследняяУспешнаяОперацияОбменаДляМагазинаСоцСетей.УзелИнформационнойБазы = &УзелИнформационнойБазы";
	
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Элементы.СтраницыВариантаПоздравления.ТекущаяСтраница = Элементы.СтраницаПоздравлениеПочтиВсе;
	
	Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДатаОперации) Тогда
		СтрокаВремени = Формат(ВыборкаДетальныеЗаписи.ДатаОперации, "ДФ=HH:mm");
		СтрокаВремени2 = Формат(ВыборкаДетальныеЗаписи.ДатаОперации + 300, "ДФ=HH:mm") + " -" + Формат(ВыборкаДетальныеЗаписи.ДатаОперации + 900, "ДФ=HH:mm");
		Элементы.ВыполнитьОбменТолькоИзменения.Заголовок = "Выполнить обмен вручную"; 
		Элементы.СтраницыВариантаПоздравления.ТекущаяСтраница = Элементы.СтраницаПоздравление;
	КонецЕсли;
	
	ТекстПоследнегоЗапуска = Новый ФорматированнаяСтрока(СтрокаВремени, Новый Шрифт("Arial", 10, Истина));
	ТекстПоследнегоЗапуска = Новый ФорматированнаяСтрока("Последний запуск задания обмена: ", ТекстПоследнегоЗапуска);
	
	ТекстСледующегоЗапуска = Новый ФорматированнаяСтрока(СтрокаВремени2, Новый Шрифт("Arial", 10, Истина));
	ТекстСледующегоЗапуска = Новый ФорматированнаяСтрока("Ожидаемый следующий запуск: ", ТекстСледующегоЗапуска);
	
	Элементы.ДекорацияДатаПоследнегоЗапуска.Заголовок = ТекстПоследнегоЗапуска;
	Элементы.ДекорацияДатаСледующегоЗапуска.Заголовок = ТекстСледующегоЗапуска;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНастройкуНаНаСервере(ИмяСтраницы, Статус = 0)
	
	МассивСтрок = Объект.СостояниеНастроек.НайтиСтроки(Новый Структура("ИмяСтраницы", ИмяСтраницы));
	
	Если МассивСтрок.количество() Тогда
		ТекНастройка = МассивСтрок[0];
	Иначе
		ТекНастройка = Объект.СостояниеНастроек.Добавить();
	КонецЕсли;
	
	ТекНастройка.ИмяСтраницы = ИмяСтраницы;
	ТекНастройка.Статус = Статус;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНастройкуНаКлиенте(ИмяСтраницы, Статус = 0)
	
	МассивСтрок = Объект.СостояниеНастроек.НайтиСтроки(Новый Структура("ИмяСтраницы", ИмяСтраницы));
	
	Если МассивСтрок.количество() Тогда
		ТекНастройка = МассивСтрок[0];
	Иначе
		ТекНастройка = Объект.СостояниеНастроек.Добавить();
	КонецЕсли;
	
	ТекНастройка.ИмяСтраницы = ИмяСтраницы;
	ТекНастройка.Статус = Статус;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаСервере() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоследняяУспешнаяОперацияОбменаДляМагазинаСоцСетей.ДатаОперации КАК ДатаОперации,
		|	ПоследняяУспешнаяОперацияОбменаДляМагазинаСоцСетей.ТребуетсяРучноеПодтверждение КАК ТребуетсяРучноеПодтверждение,
		|	ПоследняяУспешнаяОперацияОбменаДляМагазинаСоцСетей.ПодтверждениеОперацииСтрокой КАК ПодтверждениеОперацииСтрокой
		|ИЗ
		|	РегистрСведений.ПоследняяУспешнаяОперацияОбменаДляМагазинаСоцСетей КАК ПоследняяУспешнаяОперацияОбменаДляМагазинаСоцСетей
		|ГДЕ
		|	ПоследняяУспешнаяОперацияОбменаДляМагазинаСоцСетей.УзелИнформационнойБазы = &УзелИнформационнойБазы";
	
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТребуетсяРучноеПодтверждение = Ложь;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		ДатаОперации = ВыборкаДетальныеЗаписи.ДатаОперации;
		ТребуетсяРучноеПодтверждение = ВыборкаДетальныеЗаписи.ТребуетсяРучноеПодтверждение;
		ПодтверждениеОперацииСтрокой = ВыборкаДетальныеЗаписи.ПодтверждениеОперацииСтрокой;
		
		Если ТребуетсяРучноеПодтверждение Тогда
			СоответствиеОтвет = ИнтеграцияСМагазинамиСоцСетейСервер.ПолучитьСоответствиеИзJSON(ПодтверждениеОперацииСтрокой);
			СтрокаURL = ИнтеграцияСМагазинамиСоцСетейСервер.ПолучитьЗначениеСоответствия(СоответствиеОтвет, "error.captcha_img");
		КонецЕсли;
		
	КонецЕсли;
	
	ВерсияAPI = ПланыОбмена.ИнтеграцияСМагазинамиСоцСетей.ПолучитьАктуальнуюВерсиюAPI();
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	ИспользоватьВидыЗаказовПокупателей = ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей");
	УчетПоНесколькимПодразделениям = ПолучитьФункциональнуюОпцию("УчетПоНесколькимПодразделениям");
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	ИспользоватьГруппыДоступаКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаКонтрагентов");
	
	ОбновитьОтображениеСтрокиСопоставления();
	
	Если ЗначениеЗаполнено(Объект.ТокенДоступа) Тогда
		ОбновитьСписокГруппНаСервере();
	КонецЕсли;
	
	ОбновитьОтображениеСтрокиПроверки();
	ОбновитьОтображениеВремениЗапуска();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеСтрокиПроверки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеПоляФайловДляМагазинаСоцСетей.Файл КАК Файл
	|ИЗ
	|	РегистрСведений.ДополнительныеПоляФайловДляМагазинаСоцСетей КАК ДополнительныеПоляФайловДляМагазинаСоцСетей
	|ГДЕ
	|	(ДополнительныеПоляФайловДляМагазинаСоцСетей.Высота < 400
	|			ИЛИ ДополнительныеПоляФайловДляМагазинаСоцСетей.Ширина < 400)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Элементы.СтрокаПроверки.Видимость = не РезультатЗапроса.Пустой();
	Элементы.СтрокаПроверкиИнтеграция.Видимость = не РезультатЗапроса.Пустой();
	
	СтрокаПроверки = "Изображения не прошедшие проверку";
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеСтрокиСопоставления()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(НоменклатураХарактеристикДляМагазинаСоцСетей.Номенклатура), 0) КАК КоличествоЭлементов
	|ИЗ
	|	РегистрСведений.НоменклатураХарактеристикДляМагазинаСоцСетей КАК НоменклатураХарактеристикДляМагазинаСоцСетей
	|ГДЕ
	|	НоменклатураХарактеристикДляМагазинаСоцСетей.УзелИнформационнойБазы = &УзелИнформационнойБазы";
	
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	КоличествоКатегорий = ВыборкаДетальныеЗаписи.КоличествоЭлементов;
	
	Если КоличествоКатегорий = 0 Тогда
		СтрокаСопоставления = "<Требуется выбрать номенклатуру к обмену с ВКонтакте>";
		Элементы.СтрокаСопоставления.ЦветТекста = WebЦвета.Красный;
	Иначе
		СтрШаблонСопоставления = "Управление товарами выбранными к обмену с ВКонтакте (%1)";
		СтрокаСопоставления = СтрШаблон(СтрШаблонСопоставления, КоличествоКатегорий);
		Элементы.СтрокаСопоставления.ЦветТекста = Новый Цвет;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаСопоставленияНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьОтображениеСтрокиСопоставления();
	
	Если Результат = Истина Тогда
		
		ОткрытьФорму("Справочник.Номенклатура.ФормаСписка",,ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ФормаВыбораНоменклатурыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьОтображениеСтрокиСопоставления();
	
КонецПроцедуры

&НаКлиенте
Функция ИзвлечьТокенДоступаИзСтрокиАвторизации(СтрокиАвторизации)
	
	СтрокаПоиска = "https://oauth.vk.com/blank.html#";
	Позиция = СтрНайти(СтрокиАвторизации, СтрокаПоиска);
	
	ТекущаяДата = ТекущаяДата() - 1;
	
	Результат = Новый Соответствие;
	
	МассивЧастей = СтрРазделить(СтрЗаменить(СтрокиАвторизации,СтрокаПоиска,""),"&",Ложь);
	Если МассивЧастей.Количество() > 0 Тогда
		
		Для Каждого СтрокаПараметры Из МассивЧастей Цикл 
			
			МассивКлючЗначение = СтрРазделить(СтрокаПараметры,"=");
			Если МассивКлючЗначение.Количество() = 2 Тогда 
				Результат.Вставить(МассивКлючЗначение[0],МассивКлючЗначение[1]);
			ИначеЕсли МассивКлючЗначение.Количество() = 1 Тогда
				Результат.Вставить(МассивКлючЗначение[0],Неопределено);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОкончанияДействияТокенаДоступа = ТекущаяДата + (60*60*24 * 365); // По умолчанию 1 год
	
	СрокЖизниВСекундах = Результат.Получить("expires_in");
	Если СрокЖизниВСекундах = Неопределено Тогда
		СрокЖизниВСекундах = 0;
	Иначе
		СрокЖизниВСекундах = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СрокЖизниВСекундах);
	КонецЕсли;
	
	Если СрокЖизниВСекундах <> 0 Тогда  
		ОкончанияДействияТокенаДоступа = ТекущаяДата + СрокЖизниВСекундах;
	КонецЕсли;
	
	Результат.Вставить("ОкончанияДействияТокенаДоступа" , ОкончанияДействияТокенаДоступа);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьНовыйКодНаСервере()
	
	ТекОбъект = РеквизитФормыВЗначение("Объект", Тип("ПланОбменаОбъект.ИнтеграцияСМагазинамиСоцСетей"));
	ТекОбъект.УстановитьНовыйКод();
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеНаСервере()
	
	Если Объект.НастройкаЗавершена Тогда
		Для Каждого Стр Из Объект.СостояниеНастроек Цикл
			Элементы["СтраницыЭтапыНастройки" + Стр.ИмяСтраницы].ТекущаяСтраница = Элементы["Страница" + Стр.ИмяСтраницы + "2"];
			Элементы["ГруппаНижнееМеню" + Стр.ИмяСтраницы].Видимость = Ложь;
		КонецЦикла;
		
		Элементы.ГруппаПоздравление.Видимость = Ложь;
		Элементы.СтраницыВариантаПоздравления.Видимость = Ложь;
		Элементы.ЗагрузкаТоваровПункт.Доступность = Истина;
		
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ДобавитьНастройкуНаНаСервере("Приветствие",1);
		ДобавитьНастройкуНаНаСервере("Дополнительно");
		ДобавитьНастройкуНаНаСервере("Чат");
		ДобавитьНастройкуНаНаСервере("Товары");
		ДобавитьНастройкуНаНаСервере("Заказы");
		ДобавитьНастройкуНаНаСервере("СтатусыЗаказа");
		ДобавитьНастройкуНаНаСервере("Доставка");
		ДобавитьНастройкуНаНаСервере("Оповещения");
		
		Элементы.ОбновитьТокенДоступа.Заголовок = "Авторизоваться";
		Элементы.ОбновитьТокенДоступаСообщества.Заголовок = "Авторизоваться";
		
		Элементы.СтраницыПодсказкаАссистентаДополнительно.ТекущаяСтраница
		= Элементы.СтраницаПодсказкаАссистентаДополнительноАвторизация;
		
		Элементы.СтраницыПодсказкаАссистентаЧат.ТекущаяСтраница
		= Элементы.СтраницаПодсказкаАссистентаЧатАвторизация;
		
		//Элементы.ГруппаКоманднаяПанель.Видимость = Ложь;
		
		Элементы.СтрокаАвторизации.ПодсказкаВвода = "Нажмите кнопку ""Авторизоваться"" и скопируйте URL из браузера";
		Элементы.СтрокаАвторизацииСообщества.ПодсказкаВвода = "Нажмите кнопку ""Авторизоваться"" и скопируйте URL из браузера";
		
	Иначе
		
		//Элементы.ГруппаКоманднаяПанель.Видимость = Ложь;
		
		Элементы.ОбновитьТокенДоступа.Заголовок = "Обновить токен";
		Элементы.ОбновитьТокенДоступаСообщества.Заголовок = "Обновить токен";
		
		Элементы.СтраницыПодсказкаАссистентаДополнительно.ТекущаяСтраница
		= Элементы.СтраницаПодсказкаАссистентаДополнительноОбновить;
		
		Элементы.СтраницыПодсказкаАссистентаЧат.ТекущаяСтраница
		= Элементы.СтраницаПодсказкаАссистентаЧатОбновить;
		
		Элементы.ИдентификаторГруппы.ТолькоПросмотр = Истина;
		
		Элементы.СтрокаАвторизации.ПодсказкаВвода = "Нажмите кнопку ""Обновите токен"" и скопируйте URL из браузера";
		Элементы.СтрокаАвторизацииСообщества.ПодсказкаВвода = "Нажмите кнопку ""Обновите токен"" и скопируйте URL из браузера";
		
	КонецЕсли;
	
	Элементы.СтраницыЧатВыбор.ТекущаяСтраница 
	= ?(Объект.ПодключитьВходящиеСообщения, Элементы.СтраницаЧатИспользовать, Элементы.СтраницаЧатНеИспользовать);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПризнакПоПунктуНаКлиенте(ИмяПункта)
	
	Для Каждого Стр Из Объект.СостояниеНастроек Цикл
		Элементы["СтраницыЭтапыНастройки" + Стр.ИмяСтраницы].ТекущаяСтраница = Элементы["Страница" + Стр.ИмяСтраницы + Стр.Статус];
		Элементы["" + Стр.ИмяСтраницы + "Надпись"].Шрифт = Новый Шрифт();
	КонецЦикла;
	
	Если ИмяПункта <> "Интеграции" Тогда
		Элементы["СтраницыЭтапыНастройки" + ИмяПункта].ТекущаяСтраница = Элементы["Страница" + ИмяПункта + "1"];
	КонецЕсли;
	
	Элементы["" + ИмяПункта + "Надпись"].Шрифт = Новый Шрифт("Arial",8,Истина);
	
	Элементы.СтраницыПунктыМеню.ТекущаяСтраница = Элементы["Страница" + ИмяПункта];
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеНаКлиенте()
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		
		ЕстьПереходПоСтранице = Ложь;
		Для Каждого Стр Из Объект.СостояниеНастроек Цикл
			
			Элементы["СтраницыЭтапыНастройки" + Стр.ИмяСтраницы].ТекущаяСтраница = Элементы["Страница" + Стр.ИмяСтраницы + Стр.Статус];
			
			Если Стр.Статус = 1 Тогда
				ЕстьПереходПоСтранице = Истина;
				Элементы.СтраницыПунктыМеню.ТекущаяСтраница = Элементы["Страница" + Стр.ИмяСтраницы];
				Элементы["" + Стр.ИмяСтраницы + "Надпись"].Шрифт = Новый Шрифт("Arial",8,Истина);
			Иначе
				Элементы["" + Стр.ИмяСтраницы + "Надпись"].Шрифт = Новый Шрифт;
			КонецЕсли;
			
			Элементы["" + Стр.ИмяСтраницы + "Пункт"].Доступность = (Стр.Статус <> 0);
			
		КонецЦикла;
		
		Если Не ЕстьПереходПоСтранице Тогда
			Объект.НастройкаЗавершена = Истина;
			Записать();
			ОбновитьОтображениеНаСервере();
			Элементы.ГруппаПоздравление.Видимость = Истина;
			Элементы.СтраницыВариантаПоздравления.Видимость = Истина;
			Элементы.СтраницыВариантаПоздравления.ТекущаяСтраница = Элементы.СтраницаПоздравлениеПочтиВсе;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СписокСкладов.Видимость = Объект.ВыгружатьОстаток;
	Элементы.ВариантВыгрузкиХарактеристик.Видимость = ИспользоватьХарактеристики;
	
	Элементы.НаименованиеНабораВариантов.Видимость = ИспользоватьХарактеристики И (Объект.ВариантВыгрузкиХарактеристик
	= ПредопределенноеЗначение("Перечисление.ВариантыВыгрузкиХарактеристикДляМагазинаСоцСетей.ВыгружатьХарактеристикуКакНаборСвойств"));
	
	Элементы.Организация.Видимость = ИспользоватьНесколькоОрганизаций;
	Элементы.ДобавлятьФайлыХарактеристикиИзНоменклатуры.Видимость = ИспользоватьХарактеристики;
	Элементы.ВидЗаказа.Видимость = ИспользоватьВидыЗаказовПокупателей;
	Элементы.ПодразделениеДляПодстановкиВЗаказы.Видимость = УчетПоНесколькимПодразделениям;
	Элементы.ВалютаДляПодстановкиВЗаказы.Видимость = УчетВалютныхОпераций;
	Элементы.ГруппаДоступаДляНовыхКонтрагентов.Видимость = ИспользоватьГруппыДоступаКонтрагентов;
	Элементы.ГруппаСтатусыЗаказов.Видимость = Объект.ОбмениватьсяСтатусамиЗаказа;
	Элементы.ГруппаСлужбыДоставки.Видимость = Объект.ИспользоватьДоставку;
	Элементы.ОткрытьПодборкуТоваров.Видимость = Объект.ИспользоватьПодборкиТоваров;
	Элементы.ГруппаОповещения.Видимость = Объект.ИспользоватьОповещения;
	
	Элементы.СпособУстановкиДатыОтгрузкиЗаказаКоличествоДней.Видимость = Объект.СпособУстановкиДатыОтгрузкиЗаказа
	<> ПредопределенноеЗначение("Перечисление.СпособыУстановкиДатыДляМагазинаСоцСетей.ПустаяСсылка");
	
	ПроверитьОткрытьФормуПодтверждения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОткрытьФормуПодтверждения() Экспорт
	
	Если ТребуетсяРучноеПодтверждение Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СтрокаURL", СтрокаURL);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьОтображениеНаКлиентеЗавершение", ЭтаФорма);
		
		ОткрытьФорму("ПланОбмена.ИнтеграцияСМагазинамиСоцСетей.Форма.ФормаПодтверждения", ПараметрыФормы, ЭтаФорма
		,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСтрокуАвторизацииНаКлиенте(ЭтоСообщество = Ложь)
	
	Если ЭтоСообщество Тогда 
		
		Результат = ИзвлечьТокенДоступаИзСтрокиАвторизации(Объект.СтрокаАвторизацииСообщества);
		
		Объект.ТокенДоступаСообщества = Результат.Получить(СтрШаблон("access_token_%1", Объект.ИдентификаторГруппы));
		Объект.ОкончанияДействияТокенДоступаСообщества = Результат.Получить("ОкончанияДействияТокенаДоступа");
		
	Иначе
		
		Результат = ИзвлечьТокенДоступаИзСтрокиАвторизации(Объект.СтрокаАвторизации);
		
		Объект.ИдентификаторПользователя = Результат.Получить("user_id");
		Объект.ТокенДоступа = Результат.Получить("access_token");
		Объект.ОкончанияДействияТокенаДоступа = Результат.Получить("ОкончанияДействияТокенаДоступа");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТоварыВКонтактеНаКлиенте()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СтрокаСопоставленияНажатиеЗавершение", ЭтаФорма);
	
	ОписаниеУзлаОбменаВК = Новый Структура;
	ОписаниеУзлаОбменаВК.Вставить("ТокенДоступа" , Объект.ТокенДоступа);
	ОписаниеУзлаОбменаВК.Вставить("ИдентификаторГруппы" , Объект.ИдентификаторГруппы);
	ОписаниеУзлаОбменаВК.Вставить("МагазинДляИнтеграции" , Объект.МагазинДляИнтеграции);
	ОписаниеУзлаОбменаВК.Вставить("СсылкаНаУзелОбмена" , Объект.Ссылка);
	ОписаниеУзлаОбменаВК.Вставить("ПоказатьНоменклатуру" , Истина);
	
	ОткрытьФорму("ПланОбмена.ИнтеграцияСМагазинамиСоцСетей.Форма.ФормаСопоставления", ОписаниеУзлаОбменаВК, ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОперациюВФоне(ПолныйОбмен = Ложь) 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗапуститьОперациюВФонеЗавершение", ЭтаФорма);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТребуетсяРучноеПодтверждение" , ТребуетсяРучноеПодтверждение);
	ПараметрыФормы.Вставить("СтрокаЗначениеСКартинки" , СтрокаЗначениеСКартинки);
	ПараметрыФормы.Вставить("ПолныйОбмен" , ПолныйОбмен);
	ПараметрыФормы.Вставить("СсылкаНаУзелОбмена" , Объект.Ссылка);
	
	ОткрытьФорму("ПланОбмена.ИнтеграцияСМагазинамиСоцСетей.Форма.ФормаОжидания",ПараметрыФормы,ЭтаФорма,УникальныйИдентификатор,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуТовары()
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПризнакПоПунктуНаКлиенте("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуЗаказы()
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПризнакПоПунктуНаКлиенте("Заказы");
КонецПроцедуры 

&НаКлиенте
Процедура ПоказатьСтраницуСтатусыЗаказа()
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПризнакПоПунктуНаКлиенте("СтатусыЗаказа");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуДоставка()
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПризнакПоПунктуНаКлиенте("Доставка");
КонецПроцедуры 

&НаКлиенте
Процедура ПоказатьСтраницуИнтеграции()
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПризнакПоПунктуНаКлиенте("Интеграции");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуДополнительно() 
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПризнакПоПунктуНаКлиенте("Дополнительно");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуЧат()
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПризнакПоПунктуНаКлиенте("Чат");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуПриветствие()
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПризнакПоПунктуНаКлиенте("Приветствие");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуОповещение()
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПризнакПоПунктуНаКлиенте("Оповещения");
КонецПроцедуры

&НаКлиенте
Процедура ОбсужденияПодключеныЗавершение(Результат,ДополнительныеПараметры) Экспорт
	
	Если Объект.ПодключитьВходящиеСообщения Тогда
		СоздатьИнтеграциюЧатаНаСервере();
	КонецЕсли;
	
	Записать();
	
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("Чат",2);
	ДобавитьНастройкуНаКлиенте("Товары",1);
	
	ОбновитьОтображениеНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьИнтеграциюЧатаНаСервере(ПрефиксПроверки = "") Экспорт
	
	Если ОбсужденияПодключены() Тогда
		
		ПараметрыИнтеграции = Новый Структура;
		ПараметрыИнтеграции.Вставить("Идентификатор", Неопределено);
		ПараметрыИнтеграции.Вставить("Ключ", СтрШаблон("VK (%1) %2", Объект.НаименованиеГруппы, ПрефиксПроверки));
		ПараметрыИнтеграции.Вставить("Тип", ОбсужденияСлужебныйКлиентСервер.ТипыВнешнихСистем().ВКонтакте);
		ПараметрыИнтеграции.Вставить("token", Объект.ТокенДоступаСообщества);
		ПараметрыИнтеграции.Вставить("groupId", Объект.ИдентификаторГруппы);
		
		Участники = Новый Массив(1);
		Участники[0] = ПользователиКлиентСервер.ТекущийПользователь();
		ПараметрыИнтеграции.Вставить("Участники", Участники);
		
		Попытка
			ОбсужденияСлужебный.СоздатьИзменитьИнтеграцию(ПараметрыИнтеграции);
		Исключение
			ЗаписьЖурналаРегистрации(ОбсужденияСлужебный.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В процессе подключения чата произошла ошибка. Подключите чат в ручную.");
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбсужденияПодключены()
	
	Возврат Обсуждения.ОбсужденияДоступны();
	
КонецФункции

&НаСервереБезКонтекста
Функция УчетнаяЗаписьНастроена(УчетнаяЗаписьДляОповещения)
	Возврат РаботаСПочтовымиСообщениями.УчетнаяЗаписьНастроена(УчетнаяЗаписьДляОповещения, Истина, Неопределено);
КонецФункции

&НаКлиенте
Процедура ОткрытьИнструкцию()
	
	ПерейтиПоНавигационнойСсылке("https://its.1c.ru/db/metod81#content:7804:hdoc");
	
КонецПроцедуры

&НаКлиенте
Процедура КодПриложенияПриИзменении(Элемент)
	Объект.СтрокаАвторизации = Неопределено;
	Объект.ТокенДоступа = Неопределено;
	Объект.ОкончанияДействияТокенаДоступа = Неопределено;
КонецПроцедуры

&НаСервере
Процедура УдалитьИнтеграциюНаСервере()
	
	Объект.ПометкаУдаления = Истина;
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИнтеграцию()
	Оповещение = Новый ОписаниеОповещения("УдалитьИнтеграциюЗавершение", ЭтотОбъект, Параметры);
	ТекстВопроса = НСтр("ru = 'После отмены публикации существующие клиенты не смогут подключаться и оформлять заказы.
	|
	|При повторной публикации потребуется подключить приложение с новым кодом.
	|
	|Продолжить?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
КонецПроцедуры

&НаКлиенте
Процедура ФормаОпубликоватьПодменюНажатие(Элемент)
	
	Список = Новый СписокЗначений;
	Список.Добавить("УдалитьИнтеграцию", НСтр("ru='Удалить интеграцию'"), Ложь, БиблиотекаКартинок.СерыйКрест);
	Список.Добавить("ЗарегистрироватьВсеДанныеКОбмену", НСтр("ru='Зарегистрировать все данные к обмену'"), Ложь);
	Список.Добавить("ЗарегистрироватьЦенуИКоличествоКОбмену", НСтр("ru='Зарегистрировать цену и количество к обмену'"), Ложь);
	Оповещение = Новый ОписаниеОповещения("ФормаОпубликоватьПослеВыбораПодменю", ЭтотОбъект);
	
	ПоказатьВыборИзМеню(Оповещение, Список, Элементы.ФормаОпубликоватьПодменю);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОпубликоватьПослеВыбораПодменю(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "УдалитьИнтеграцию" Тогда
		НачатьУдалениеИнтеграции();
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "ЗарегистрироватьВсеДанныеКОбмену" Тогда
		ЗарегистрироватьВсеДанныеКОбменуНаКлиенте();
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "ЗарегистрироватьЦенуИКоличествоКОбмену" Тогда
		ЗарегистрироватьЦенуИКоличествоКОбменуНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУдалениеИнтеграции()
	
	Оповещение = Новый ОписаниеОповещения("УдалитьИнтеграциюЗавершение", ЭтотОбъект, Параметры);
	ТекстВопроса = НСтр("ru = 'После удаления, будет потеряна связь с сообществом ВКонтакте.
	|
	|Продолжить?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИнтеграциюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьИнтеграциюНаСервере();
	Оповестить("ОбновитьСписокИнтеграцияСМагазинамиСоцСетей");
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область БольшеВозможностей

&НаКлиенте
Процедура ПредложитьВозможностьНажатие(Элемент)
	
	ТекстДляПисьма = НСтр("ru = 'Опишите, каких возможностей вам не хватает для приложения ""Магазин ВКонтакте"":'");
	Тег = НСтр("ru = 'Магазин ВКонтакте'");
	
	УправлениеНебольшойФирмойКлиент.ПредложитьВозможностьНажатие(СлужебнаяИнформацияДляПисьма(Тег), ТекстДляПисьма);
	
КонецПроцедуры

&НаСервере
Функция СлужебнаяИнформацияДляПисьма(Тег)
	
	Возврат Обработки.НастройкаПрограммы.СлужебнаяИнформацияДляПисьма(Тег);
	
КонецФункции

&НаКлиенте
Процедура ДобавитьНовыйМагазин(Команда)
	
	ОткрытьФорму("ПланОбмена.ИнтеграцияСМагазинамиСоцСетей.Форма.ФормаУзлаВКонтакте",,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьВсеДанныеКОбменуНаСервере(УзелИнформационнойБазы, ТолькоЦенаИКоличество = Ложь)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НоменклатураХарактеристикДляМагазинаСоцСетей.Номенклатура КАК СсылкаДанные
		|ИЗ
		|	РегистрСведений.НоменклатураХарактеристикДляМагазинаСоцСетей КАК НоменклатураХарактеристикДляМагазинаСоцСетей
		|ГДЕ
		|	НЕ &ТолькоЦенаИКоличество
		|			И НоменклатураХарактеристикДляМагазинаСоцСетей.УзелИнформационнойБазы = &УзелИнформационнойБазы
		|	И НоменклатураХарактеристикДляМагазинаСоцСетей.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НоменклатураХарактеристикДляМагазинаСоцСетей.Характеристика
		|ИЗ
		|	РегистрСведений.НоменклатураХарактеристикДляМагазинаСоцСетей КАК НоменклатураХарактеристикДляМагазинаСоцСетей
		|ГДЕ
		|	НЕ &ТолькоЦенаИКоличество
		|			И НоменклатураХарактеристикДляМагазинаСоцСетей.УзелИнформационнойБазы = &УзелИнформационнойБазы
		|	И НоменклатураХарактеристикДляМагазинаСоцСетей.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НоменклатураХарактеристикДляМагазинаСоцСетейВиртуальныеКаталоги.ВиртуальныйКаталог
		|ИЗ
		|	РегистрСведений.НоменклатураХарактеристикДляМагазинаСоцСетейВиртуальныеКаталоги КАК НоменклатураХарактеристикДляМагазинаСоцСетейВиртуальныеКаталоги
		|ГДЕ
		|	НЕ &ТолькоЦенаИКоличество
		|			И НоменклатураХарактеристикДляМагазинаСоцСетейВиртуальныеКаталоги.УзелИнформационнойБазы = &УзелИнформационнойБазы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Период КАК Период,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			ВидЦен В
		|					(ВЫБРАТЬ
		|						ИнтеграцияСМагазинамиСоцСетей.ВидЦеныНоменклатуры КАК ВидЦены
		|					ИЗ
		|						ПланОбмена.ИнтеграцияСМагазинамиСоцСетей КАК ИнтеграцияСМагазинамиСоцСетей
		|					ГДЕ
		|						ИнтеграцияСМагазинамиСоцСетей.Ссылка = &УзелИнформационнойБазы
		|			
		|					ОБЪЕДИНИТЬ ВСЕ
		|			
		|					ВЫБРАТЬ
		|						ИнтеграцияСМагазинамиСоцСетей.ВидЦеныНоменклатурыСтарая
		|					ИЗ
		|						ПланОбмена.ИнтеграцияСМагазинамиСоцСетей КАК ИнтеграцияСМагазинамиСоцСетей
		|					ГДЕ
		|						ИнтеграцияСМагазинамиСоцСетей.Ссылка = &УзелИнформационнойБазы)
		|				И (Номенклатура, Характеристика) В
		|					(ВЫБРАТЬ
		|						НоменклатураХарактеристикДляМагазинаСоцСетей.Номенклатура КАК Номенклатура,
		|						НоменклатураХарактеристикДляМагазинаСоцСетей.Характеристика КАК Характеристика
		|					ИЗ
		|						РегистрСведений.НоменклатураХарактеристикДляМагазинаСоцСетей КАК НоменклатураХарактеристикДляМагазинаСоцСетей
		|					ГДЕ
		|						НоменклатураХарактеристикДляМагазинаСоцСетей.УзелИнформационнойБазы = &УзелИнформационнойБазы)) КАК ЦеныНоменклатурыСрезПоследних";
	
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", УзелИнформационнойБазы);
	Запрос.УстановитьПараметр("ТолькоЦенаИКоличество", ТолькоЦенаИКоличество);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если НЕ ТолькоЦенаИКоличество Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса[0].Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ПланыОбмена.ЗарегистрироватьИзменения(УзелИнформационнойБазы, ВыборкаДетальныеЗаписи.СсылкаДанные);
		КонецЦикла;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[1].Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НЗ = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
		НЗ.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
		НЗ.Отбор.ВидЦен.Установить(ВыборкаДетальныеЗаписи.ВидЦен);
		НЗ.Отбор.Номенклатура.Установить(ВыборкаДетальныеЗаписи.Номенклатура);
		НЗ.Отбор.Характеристика.Установить(ВыборкаДетальныеЗаписи.Характеристика);
		
		ПланыОбмена.ЗарегистрироватьИзменения(УзелИнформационнойБазы, НЗ);
	КонецЦикла;
	
	Если НЕ ТолькоЦенаИКоличество Тогда
		НЗ = РегистрыСведений.ХешКонтролируемыхРеквизитовДляМагазинаСоцСетей.СоздатьНаборЗаписей();
		НЗ.Записать();
	КонецЕсли;
	
	НЗ = РегистрыСведений.ОстаткиТоваровМагазинаСоцСетей.СоздатьНаборЗаписей();
	НЗ.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьВсеДанныеКОбмену(Команда)
	ЗарегистрироватьВсеДанныеКОбменуНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьЦенуИКоличествоКОбмену(Команда)
	ЗарегистрироватьЦенуИКоличествоКОбменуНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьВсеДанныеКОбменуНаКлиенте()
	ЗарегистрироватьВсеДанныеКОбменуНаСервере(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьЦенуИКоличествоКОбменуНаКлиенте()
	ЗарегистрироватьВсеДанныеКОбменуНаСервере(Объект.Ссылка, Истина);
КонецПроцедуры

#КонецОбласти
