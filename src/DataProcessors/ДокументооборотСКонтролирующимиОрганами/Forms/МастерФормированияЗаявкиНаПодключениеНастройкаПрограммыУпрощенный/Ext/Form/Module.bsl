&НаКлиенте
Перем КонтекстЭДОКлиент Экспорт;

&НаКлиенте
Перем СсылкаНаДокумент;

&НаКлиенте
Перем МенеджерКриптографии;

&НаКлиенте
Перем СертификатКриптографии;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьПараметры(Параметры);
	ОткрытьНаНужнойСтраницеПриСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ПрограммноеЗакрытие Тогда
		Возврат;
	КонецЕсли;
	
	Если СпроситьПроЗаявлениеПФР() Тогда
		
		Отказ = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_СпроситьПроСохранениеЗаявленияПФР", 0.1, Истина);
		
	ИначеЕсли СпроситьПроЭДО() Тогда
			
		Отказ = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_СпроситьПроЭДОПередЗакрытием", 0.1, Истина);

	Иначе
			
		ТекстПредупреждения = НСтр("ru = 'Прервать настройку 1С-Отчетности?'");
		
		ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(
			ЭтотОбъект, 
			Отказ, 
			ЗавершениеРаботы,
			ТекстПредупреждения, 
			"ПрограммноеЗакрытие");
			
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ЗаявленияВПФР

&НаКлиенте
Процедура ОшибкаОтправкиЗаявленияВПФР_НайтиВСпискеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КонтекстЭДОКлиент.НайтиЗаявлениеПФРВФорме1СОтчетность(ОтправляемоеЗаявлениеПФР, Организация);
		
КонецПроцедуры	
	
&НаКлиенте
Процедура ОшибкаОтправкиЗаявленияВПФР_ЗаявлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КонтекстЭДОКлиент.ОткрытьНеотправленноеЗаявлениеВПФР(ЭтотОбъект);
		
КонецПроцедуры
	
&НаКлиенте
Процедура ФлагЗаявлениеУжеПредоставленоВПФРПриИзменении(Элемент)
	
	ИзменитьОформлениеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагСертификатУжеОтправленВПФРПриИзменении(Элемент)
	
	ИзменитьОформлениеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеВПФР_СсылкаНаЗаявлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	КонтекстЭДОКлиент.ОткрытьЗаявлениеВПФР(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеВПФР_ОтправьтеСертификатОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СоздатьЗаявленияВПФРЕслиНеСозданы();
	ДокументооборотСКОКлиент.СоздатьНовоеИлиОткрытьЗаявлениеВПФР(,,ЭтотОбъект.СертификатВПФР, Истина);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СсылкаРаспискаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Отсканируйте" Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"СканироватьФайл_Завершение", 
			ЭтотОбъект);
		
		РаботаСФайламиКлиент.ДобавитьФайл(
			ОписаниеОповещения,
			ДокументЗаявление.Ссылка,
			ЭтотОбъект,
			3,
			Истина);
		
	Иначе
		
		Требования = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ТребованияКИзображениямВЗаявленииПо1СОтчетности();
					
		ПараметрыДобавления = Новый Структура;
		ПараметрыДобавления.Вставить("МаксимальныйРазмерФайла", Требования.МаксимальныйРазмерФайла);
		ПараметрыДобавления.Вставить("ВозвращатьРазмер",        Истина);
		ПараметрыДобавления.Вставить("ДопустимыеТипыФайлов", 	Требования.ДопустимыеТипыФайлов);
		ПараметрыДобавления.Вставить("Требования",           	Требования);
				
		Оповещение = Новый ОписаниеОповещения("СканРаспискаПослеДобавленияФайлов", ЭтотОбъект);
		ОперацииСФайламиЭДКОКлиент.ДобавитьФайлы(Оповещение, УникальныйИдентификатор, "Выберите файл <Сведения о сертификате>", ПараметрыДобавления);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСсылкаРаспискаНажатие(Элемент)
	
	ФайлСканРасписка = Неопределено;
	ИзменитьОформлениеДокумента(0, 0, "");
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечатайтеСертификатОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КонтекстЭДОКлиент.НапечататьДокумент(Расписка, НСтр("ru = 'Расписка'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокСообщитеОбОтправкеРекомендацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "закрытого ключа" Тогда
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ДокументЗаявление", ДокументЗаявление.Ссылка);
		
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_КонтейнерЗакрытогоКлюча", ДополнительныеПараметры);
		
	Иначе
		Если ДокументЗаявление.ТипКриптопровайдера = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro") Тогда
			ИнтернетПоддержкаПользователейКлиент.ОткрытьСтраницуИнтегрированногоСайта("https://its.1c.ru/bmk/elreps/key_trans_cryptopro");
		Иначе
			ИнтернетПоддержкаПользователейКлиент.ОткрытьСтраницуИнтегрированногоСайта("https://its.1c.ru/bmk/elreps/key_trans_vipnet");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяПомощь2Нажатие(Элемент)
	ОткрытьФормуПомощи();
КонецПроцедуры

&НаКлиенте
Процедура ЧтоДелать2ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуПомощи();
	
КонецПроцедуры

&НаКлиенте
Процедура ОзнакомьтесьССертифкатомЭлектронноеПодписаниеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если АдресСертификата = "" Тогда
		ПолучитьАдресНовогоСертификата();
		Если АдресСертификата = "" Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось скачать сертификат с сервера удостоверяющего центра. Попробуйте позже.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;

	КонтекстЭДОКлиент.НапечататьДокумент(Расписка, НСтр("ru = 'Расписка'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокДругиеПриложенияРекомендацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтернетПоддержкаПользователейКлиент.ОткрытьСтраницуИнтегрированногоСайта("https://its.1c.ru/bmk/elreps/additional_account");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакрытьОшибку(Команда)
	
	ПрограммноеЗакрытие = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПропуститьОтправкуЗявленияПФР(Команда)
	КонтекстЭДОКлиент.ОтправитьЗаявлениеВПФРПозже(ЭтотОбъект, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗаявлениеВПФРПозже(Команда)
	
	КонтекстЭДОКлиент.ОтправитьЗаявлениеВПФРПозже(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявленияВПФР_ОтправитьЗаявлениеСейчас(Команда = Неопределено)
	
	КонтекстЭДОКлиент.ОтправитьЗаявлениВПФРИзПредупреждения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьОтправкуСЭлПодписью(Команда)
	ПолучитьРаспискуВБумажномВиде = Ложь;
	НастроитьАвтоматически(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура КомандаБольшеНеНапоминать(Команда)
	
	ПрограммноеЗакрытие = Истина;
	НапоминитьПозжеПроЗаявление(ДокументЗаявление.Ссылка, Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"КомандаБольшеНеНапоминать_Завершение", 
		ЭтотОбъект);
		
	Текст = НСтр("ru = 'Вы сможете завершить настройку 1С-Отчетности по данному заявлению позже, нажав в форме заявления кнопку ""Обновить"" сверху.
                  |Все заявления доступны по ссылке ""Список заявлений"" в разделе ""Настройки"" формы ""1С-Отчетность""'");
	ПоказатьПредупреждение(ОписаниеОповещения, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаБольшеНеНапоминать_Завершение(ВходящийКонтекст) Экспорт
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьНовоеЗаявление(Команда)
	
	ОтметитьЗаявлениеКакНастроенное();
	СоздатьНовоеЗаявление();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьБумажнуюИлиЭлектроннуюРасписку(Команда)
	
	Если НЕ СертификатДействителен() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТребуетсяПолучениеРасписки И ПолучитьРаспискуВБумажномВиде Тогда
		
		Если Не ЗначениеЗаполнено(ФайлСканРасписка) Тогда
			ТекстСообщения = НСтр("ru = 'Укажите скан-копию подписанного бланка сертификата'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "УказательСканРасписка");
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.Подождите.Заголовок = НСтр("ru = 'Выполняется отправка расписки...'");
	
	АктивизироватьСтраницу(
		ЭтотОбъект, 
		Элементы.ДлительноеДействие,
		НСтр("ru = 'Подождите, пожалуйста...'"));
	ИзменитьОформлениеФормы();
		
	// Чтобы бублик крутился
	ПодключитьОбработчикОжидания("Подключаемый_ОтправитьБумажнуюИлиЭлектроннуюРасписку", 0.1, Истина);
	
КонецПроцедуры
	
&НаКлиенте
Функция СертификатДействителен()
	
	Если СертификатДляПодписания = Неопределено Тогда
		ПолучитьРаспискуВБумажномВиде = Истина;
		Возврат Истина;
	КонецЕсли;
	
	Если СертификатДляПодписания.Свойство("ДействителенПо") Тогда
		ДействителенПо = СертификатДляПодписания.ДействителенПо;
	ИначеЕсли СертификатДляПодписания.Свойство("ДатаОкончания") Тогда
		ДействителенПо = СертификатДляПодписания.ДатаОкончания;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	СертификатПросрочен = МестноеВремя(ДействителенПо) < ТекущаяДата();
	
	Если СертификатПросрочен
		И Элементы.Страницы.ТекущаяСтраница = Элементы.ЗаявлениеОдобрено Тогда
		
		ПолучитьРаспискуВБумажномВиде = Истина;
		ТекстОшибки = НСтр("ru = 'Сертификат, которым выполняется подписание, просрочен'");
		Элементы.ПовторитьОтправкуСЭлПодписью.Видимость = Ложь;
		ПодписатьРасписку_СообщитьОбОшибкеПодписания();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
	
&НаКлиенте
Процедура ОтправитьРасписку(ОповещениеОЗавершении)
	
	Результат = ОтправитьРаспискуНаСервере();
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьАвтоматически(Команда)
	
	Если ТребуетсяПолучениеРасписки Тогда
		
		Если АдресСертификата = "" Тогда
			
			// Пробуем еще раз
			ПолучитьАдресНовогоСертификата();

			Если АдресСертификата = "" Тогда
				ПоказатьСтраницуСОшибкой();
			КонецЕсли;
			
		Иначе
			ОтправитьБумажнуюИлиЭлектроннуюРасписку(Неопределено);
		КонецЕсли;
			
	Иначе
		НастроитьАвтоматическиБезРасписки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьАвтоматическиБезРасписки()
	
	Элементы.Подождите.Заголовок = НСтр("ru = 'Выполняется настройка 1С-Отчетности...'");
	
	АктивизироватьСтраницу(
		ЭтотОбъект, 
		Элементы.ДлительноеДействие,
		НСтр("ru = 'Подождите, пожалуйста...'"));
	ИзменитьОформлениеФормы();
	
	// Чтобы бублик крутился
	ПодключитьОбработчикОжидания("Подключаемый_НастроитьАвтоматически", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПодключениеКЭДО(Команда)
	
	ПрограммноеЗакрытие = Истина;
	
	Если ЗначениеЗаполнено(ПараметрыПодключениеЭДО) Тогда
		
		// по данному заявлению сформирована учетная запись, 
		// у заявления ПодключитьЭДО = Истина
		
		//выполним отмену закрытия без возвращаемого значения и инициируем закрытие с параметрами подключения ЭДО
		РезультатЗакрытия = Новый Структура();
		РезультатЗакрытия.Вставить("ПодключитьЭДО", 				 ПодключитьЭДО);
		РезультатЗакрытия.Вставить("ПереиздатьСертификатЭДО",        ПереиздатьСертификатЭДО);
		РезультатЗакрытия.Вставить("Организация", 					 ДокументЗаявление.Организация);
		РезультатЗакрытия.Вставить("ПараметрыЗапускаПодключениеЭДО", ПараметрыПодключениеЭДО);
		РезультатЗакрытия.Вставить("ДокументЗаявление", 			 ДокументЗаявление.Ссылка);
		
		Закрыть(РезультатЗакрытия);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_СпроситьПроЭДОПередЗакрытием() Экспорт
	
	КонтекстЭДОКлиент.Подключаемый_СпроситьПроЭДОПередЗакрытием(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция СпроситьПроЭДО()

	Одобрено          = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено");
	ЗаявлениеОдобрено = НовыйСтатусДокумента = Одобрено;
	ЭтоПоследнийШаг   = Элементы.Страницы.ТекущаяСтраница = Элементы.УспешноеЗавершение;
	ЕстьЭДО           = ПодключитьЭДО ИЛИ ПереиздатьСертификатЭДО;
	
	СпроситьПроЭДО = ЕстьЭДО И ЗаявлениеОдобрено И ЭтоПоследнийШаг;

	Возврат СпроситьПроЭДО;

КонецФункции

&НаКлиенте
Функция СпроситьПроЗаявлениеПФР()

	УстановленФлаг     = ФлагСертификатУжеОтправленВПФР ИЛИ ФлагЗаявлениеУжеПредоставленоВПФР;
	ЭтоШагЗаявленияПФР = Элементы.Страницы.ТекущаяСтраница = Элементы.ОтправкаЗаявленияВПФР;
	СпроситьПроЗаявлениеПФР = УстановленФлаг И ЭтоШагЗаявленияПФР;

	Возврат СпроситьПроЗаявлениеПФР;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура АктивизироватьСтраницу(Форма, ТекущаяСтраница, ЗаголовокСтраницы = "")
	
	Если ЗаголовокСтраницы <> "" Тогда
		Форма.Заголовок = ЗаголовокСтраницы;
	КонецЕсли;
	
	ДокументооборотСКОКлиентСервер.АктивизироватьСтраницу(Форма.Элементы.Страницы, ТекущаяСтраница);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПараметры(Параметры)
	
	// Из параметров
	ИдентификаторАбонента 			= Параметры.ИдентификаторАбонента;
	НовыйСтатусДокумента  			= Параметры.НовыйСтатусДокумента;
	ОтпечатокСертификатаИзОтвета	= Параметры.ОтпечатокСертификатаИзОтвета;

	// Из документа
	ПодключитьЭДО 					= ДокументЗаявление.ПодключитьЭДО;
	ПереиздатьСертификатЭДО 		= ДокументЗаявление.ПереиздатьСертификатЭДО;
	Организация 					= ДокументЗаявление.Организация;
	ЭтоЭлектронноеПодписание		= ДокументЗаявление.ПодписатьЭП;
	Статус							= ДокументЗаявление.Статус;
	СпецоператорСвязи				= ДокументЗаявление.СпецоператорСвязи;
	ИдентификаторДокументооборота	= ДокументЗаявление.ИдентификаторДокументооборота;
	ЭтоПервичноеЗаявление			= ДокументЗаявление.ТипЗаявления = Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное;
	КрасныйЦвет 					= Новый Цвет(226, 40, 40);
	ЗаявлениеОдобрено				= НовыйСтатусДокумента = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено;
	
	Если ЭтоПервичноеЗаявление Тогда
		СертификатДляПодписания = ДокументЗаявление.Ссылка.РеквизитыСертификата.Получить();
	Иначе
		СертификатДляПодписания = ДокументЗаявление.Ссылка.Сертификат.Получить();
	КонецЕсли;
	
	ТребуетсяПолучениеРасписки = ТребуетсяПолучениеРасписки();
	НапоминитьПозжеПроЗаявление(ДокументЗаявление);
	ПолучитьАдресНовогоСертификата();
	
	ИнициализироватьСостояниеЭДОсПФР();
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяПолучениеРасписки()
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ИспользоватьСуществующий = ОбработкаЗаявленийАбонентаКлиентСервер.ИспользоватьСуществующий(ДокументЗаявление);
	
	// Певичное
	ТребуетсяВПервичном = ЭтоПервичноеЗаявление И НЕ ИспользоватьСуществующий;
	
	// Вторичное
	ЭтоВторичное    = НЕ ЭтоПервичноеЗаявление;
	ЭтоСертификатКА = НЕ ДокументЗаявление.ЭтоСертификатДругогоУЦ;
	ЭтоПереизданиеСертификата = КонтекстЭДОСервер.ЭтоПереизданиеСертификата(ДокументЗаявление);
	
	ТребуетсяВоВторичном = 
		НЕ ИспользоватьСуществующий 
		И ЭтоВторичное 
		И ЭтоСертификатКА 
		И ЭтоПереизданиеСертификата;

	// Итоговое значение
	Требуется = 
		ЭтоЭлектронноеПодписание 
		И ЗаявлениеОдобрено
		И СертификатДляПодписания <> Неопределено
		И (ТребуетсяВПервичном ИЛИ ТребуетсяВоВторичном);
		
	Возврат Требуется;
	
КонецФункции

&НаСервере
Функция ИдентификаторФайлаАвтонастройки()

	Если НЕ ЗначениеЗаполнено(ИдентификаторАбонента)
		И ЗначениеЗаполнено(ДокументЗаявление.УчетнаяЗапись)
		И НЕ ЭтоПервичноеЗаявление Тогда
		
		Идентификатор = Сред(ДокументЗаявление.УчетнаяЗапись.ИдентификаторАбонента, 4);
		
	Иначе
		
		Идентификатор = ИдентификаторАбонента;
		
	КонецЕсли;
	
	Возврат Идентификатор;
			
КонецФункции

&НаСервере
Процедура ПолучитьАдресНовогоСертификата()

	Если ЗаявлениеОдобрено И ТребуетсяПолучениеРасписки Тогда
		
		Идентификатор = ИдентификаторФайлаАвтонастройки();
		
		Результат = ПолучитьФайлАвтонастройки(
			ДокументЗаявление.СпецоператорСвязи, 
			Идентификатор);
		
		Если Результат.Выполнено Тогда
			
			СертификатыИзФайлаНастройки = ПолучитьСертификатыИзФайлаНастройки(Результат.Настройки);
			Для Каждого СертификатИзФайлаНастройки Из СертификатыИзФайлаНастройки Цикл
				Если Врег(СертификатИзФайлаНастройки.Хранилище) = "MY" Тогда
					НовыйСертификат = СертификатИзФайлаНастройки.Сертификат;
				КонецЕсли;
			КонецЦикла;
			
			КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
			КонтекстЭДОСервер.ПечатьСертификатаНаСервере(Расписка, НовыйСертификат);
			
			АдресСертификата = ПоместитьВоВременноеХранилище(НовыйСертификат, УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСледующееДействиеПослеОтправкиЗаявленияВПФР(ПродолжитьДействиеПрерванноеПоказомПредупреждения = Неопределено) Экспорт
	
	ПоказатьЗавершениеНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием_Завершение(ПродолжитьДействиеПрерванноеПоказомПредупреждения = Неопределено) Экспорт
	
	ПрограммноеЗакрытие = Истина;
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ДействияПередОтправкойЗаявленияВПФР() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ДействияПередОтправкойЗаявленияВПФР(ЭтотОбъект);

КонецПроцедуры
	
&НаКлиенте
Процедура Подключаемый_СпроситьПроСохранениеЗаявленияПФР()
	
	КонтекстЭДОКлиент.Подключаемый_СпроситьПроСохранениеЗаявленияПФР(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеДокумента(Размер, Количество, ИмяФайлаРасписки)
	
	ДокументооборотСКОКлиентСервер.ИзменитьОформлениеДокумента(ЭтотОбъект, "Расписка", Размер, Количество, ИмяФайлаРасписки);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НастроитьАвтоматически()
	
	ВыполнитьЗавершениеПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьБумажнуюИлиЭлектроннуюРасписку()
	
	Если ТребуетсяПолучениеРасписки И НЕ ПолучитьРаспискуВБумажномВиде Тогда
		
		ПодписатьРасписку(); // асинхронно
		
	Иначе
		
		ПрисоединитьФайлРаспискиКДокументу(ФайлСканРасписка.Адрес, Неопределено);
		Оповещение = Новый ОписаниеОповещения("ОтправитьРаспискуПослеВыполнения", ЭтотОбъект);
		ОтправитьРасписку(Оповещение); // асинхронно
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыДляЗапускаМетодаБЭД(ЗаявлениеСсылка)
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ПолучитьПараметрыДляЗапускаМетодаБЭД(ЗаявлениеСсылка); 
	
КонецФункции

&НаКлиенте
Функция НужноПодписатьКомпонентой()
	
	ЭтоВторичное    = НЕ ЭтоПервичноеЗаявление;
	ЭтоСертификатКА = НЕ ДокументЗаявление.ЭтоСертификатДругогоУЦ;
	ИспользоватьСуществующий = ОбработкаЗаявленийАбонентаКлиентСервер.ИспользоватьСуществующий(ДокументЗаявление);
	
	ПервичноеССертификатом1С  = ИспользоватьСуществующий И ЭтоСертификатКА И ЭтоПервичноеЗаявление;
	ВторичноеПерешлиОтСУЦкКА  = НЕ ИспользоватьСуществующий И ЭтоВторичное И ЭтоСертификатКА;
	
	ПодписатьКомпонентой = 
		 ПервичноеССертификатом1С
		 ИЛИ ВторичноеПерешлиОтСУЦкКА;
		 
	Возврат ПодписатьКомпонентой;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьМенеджерИСертификатКриптографии()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодписатьРасписку_ПослеПолученияМенеджераИСертификатКриптографии", 
		ЭтотОбъект);
			
	КонтекстЭДОКлиент.ПолучитьМенеджерИСертификатКриптографии(
		СертификатДляПодписания, 
		ОписаниеОповещения,
		ДокументЗаявление.ТипКриптопровайдера);
	
КонецПроцедуры

&НаКлиенте
Функция НужноПодписатьКомпонентойСАвтонастройкой()
	
	ЭтоВторичное = НЕ ЭтоПервичноеЗаявление;
	ЭтоСУЦ       = ДокументЗаявление.ЭтоСертификатДругогоУЦ;
	ИспользоватьСуществующий = ОбработкаЗаявленийАбонентаКлиентСервер.ИспользоватьСуществующий(ДокументЗаявление);
	
	НужнаАвтонастройка = 
		ИспользоватьСуществующий 
		И ЭтоСУЦ 
		И ЭтоВторичное;
	
	Возврат НужнаАвтонастройка;
	
КонецФункции

&НаКлиенте
Функция НужноПодписатьПлатформой()
	
	ПодписатьПлатформой = 
		НЕ НужноПодписатьКомпонентойСАвтонастройкой()
		И НЕ НужноПодписатьКомпонентой();
		
	Возврат ПодписатьПлатформой;
	
КонецФункции

&НаКлиенте
Процедура ПодписатьРасписку()
	
	Если НужноПодписатьКомпонентойСАвтонастройкой() Тогда
		
		ПодписатьРаспискуКомпонентойСАвтонастройкой();
		
	ИначеЕсли НужноПодписатьКомпонентой() Тогда
		
		ПодписатьРаспискуКомпонентой();
		
	ИначеЕсли НужноПодписатьПлатформой() Тогда
		
		ПолучитьМенеджерИСертификатКриптографии();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьРаспискуКомпонентойСАвтонастройкой()
	
	ШаблонНастроек = КонтекстЭДОКлиент.ШаблонИнформацииОСервереОнлайнПроверки();
	
	РезультатАвтонастройки = КонтекстЭДОКлиент.РезультатАвтонастройкиИзКэша(Организация);
	
	Если РезультатАвтонастройки = Неопределено Тогда
		
		// Сначала выполняем автонастроку, чтобы обозначить сертификат СУЦ как доверенный
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПодписатьРаспискуКомпонентойСАвтонастройкой_ПослеАвтонастройки", 
			ЭтотОбъект);
		
		КонтекстЭДОКлиент.АвтоматическаяНастройкаУчетнойЗаписи(
			ДокументЗаявление.УчетнаяЗапись,
			,
			ОписаниеОповещения,
			,
			,
			Истина,
			,
			,
			,
			ШаблонНастроек);
			
	Иначе
			
		ПодписатьРаспискуКомпонентойСАвтонастройкой_ПослеАвтонастройки(РезультатАвтонастройки, Неопределено);
		
	КонецЕсли;
			
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПодписатьРаспискуКомпонентойСАвтонастройкой_ПослеАвтонастройки(Результат, ВходящийКонтекст) Экспорт
	
	Если ЗначениеЗаполнено(Результат)
		И Результат.Свойство("СтруктураДляИнформацииОСервереОнлайнПроверки") Тогда
		
		ШаблонНастроек = Результат.СтруктураДляИнформацииОСервереОнлайнПроверки;
		
		ПодписатьРаспискуКомпонентой();
		
	Иначе
		// Пробуем подписать платформой
		ПолучитьМенеджерИСертификатКриптографии();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьРасписку_ПослеПолученияМенеджераИСертификатКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено = Истина Тогда
		
		СертификатКриптографии 	= Результат.СертификатКриптографии;
		МенеджерКриптографии 	= Результат.МенеджерКриптографии;
		
		ПодписатьРаспискуПлатформой();
		
	ИначеЕсли Результат.Выполнено = Ложь Тогда
		
		ТекстОшибки = НСтр("ru = 'Не удалось установить расширение для работы с криптографией'");
		ПодписатьРасписку_СообщитьОбОшибкеПодписания();
		
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Пользователь отказался от установки расширения для работы с криптографией'");
		ПодписатьРасписку_СообщитьОбОшибкеПодписания();
		
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПодписатьРаспискуКомпонентой() Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПодписатьРасписку_ПослеПодписания", ЭтотОбъект);
	
	КриптографияЭДКОКлиент.ПодписатьPKCS7(
		Оповещение, 
		СертификатДляПодписания,
		АдресСертификата, 
		Ложь, 
		ПоместитьВоВременноеХранилище(, УникальныйИдентификатор),
		Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьРаспискуПлатформой() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодписатьРасписку_ПослеВводаПароля", 
		ЭтотОбъект);

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("СертификатДляПодписания", СертификатДляПодписания);
	ДополнительныеПараметры.Вставить("Расписка", Расписка);
		
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_ВводПароляЗакрытогоКлюча", 
		ДополнительныеПараметры,
		,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьРасписку_ПослеВводаПароля(Пароль, ВходящийКонтекст) Экспорт
	
	Если Пароль = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru = 'Пользователь отказался от ввода пароля'");
		ПодписатьРасписку_СообщитьОбОшибкеПодписания();
		
	Иначе
		
		МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПодписатьРасписку_ПослеПодписания", 
			ЭтотОбъект, 
			,
			"ПодписатьРасписку_ОбработчикОшибкиПодписания",
			ЭтотОбъект);
				
		ДвДанные = ПолучитьИзВременногоХранилища(АдресСертификата);
		
		МенеджерКриптографии.НачатьПодписывание(
			ОписаниеОповещения, 
			ДвДанные, 
			СертификатКриптографии);
			
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьРасписку_ОбработчикОшибкиПодписания(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ТекстОшибки = КраткоеПредставлениеОшибки(ОбщегоНазначенияЭДКОКлиентСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке));
	ПодписатьРасписку_СообщитьОбОшибкеПодписания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьРасписку_ПослеПодписания(Результат, ВходящийКонтекст) Экспорт
	
	// Из-за того, что подписание выполняется методом компоненты или платформы, то результат возвращается разный
	Выполнено = НЕ НужноПодписатьПлатформой() И Результат.Выполнено ИЛИ НужноПодписатьПлатформой();
	
	Если Выполнено Тогда
		
		Если НужноПодписатьПлатформой() Тогда
			ФайлПодписи = ПоместитьВоВременноеХранилище(Результат, Новый УникальныйИдентификатор);
		Иначе
			ФайлПодписи = Результат.ФайлПодписи;
		КонецЕсли;
		
		ПрисоединитьФайлРаспискиКДокументу(АдресСертификата, ФайлПодписи);
		Оповещение = Новый ОписаниеОповещения("ОтправитьРаспискуПослеВыполнения", ЭтотОбъект);
		ОтправитьРасписку(Оповещение);
		
	ИначеЕсли НЕ НужноПодписатьПлатформой() Тогда
		ТекстОшибки = Результат.ОписаниеОшибки;
		ПодписатьРасписку_СообщитьОбОшибкеПодписания();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьРасписку_СообщитьОбОшибкеПодписания() Экспорт

	СканированиеДоступно = РаботаСФайламиСлужебныйКлиент.ДоступнаКомандаСканировать();
	ПолучитьРаспискуВБумажномВиде = Истина;
	
	АктивизироватьСтраницу(
		ЭтотОбъект, 
		Элементы.ОшибкаОтправкиРасписки, 
		НСтр("ru = 'Отправка расписки'"));
		
	ИзменитьОформлениеФормы();
		
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьРаспискуПослеВыполнения(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВыполнитьЗавершениеПодключения();
	Иначе
		ТекстОшибки = Результат.ОписаниеОшибки;
		ПоказатьСтраницуСОшибкой();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПользователейВУчетнуюЗапись(СсылкаУчетнаяЗапись)
	
	НаборЗаписей = РегистрыСведений.ПользователиУчетныхЗаписейДокументооборота.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УчетнаяЗапись.Установить(СсылкаУчетнаяЗапись.Ссылка);
	ФлагОтметки = Ложь;
	
	Для Каждого СтрокаТаблицы Из ДокументЗаявление.ПользователиУчетнойЗаписи Цикл
		НоваяСтрока = НаборЗаписей.Добавить();
		НоваяСтрока.УчетнаяЗапись = СсылкаУчетнаяЗапись.Ссылка;
		НоваяСтрока.Пользователь  = СтрокаТаблицы.Пользователь;
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		РегламентированнаяОтчетностьКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки(), Ложь,
		"Не удалось обновить список пользователей по учетной записи налогоплательщика """ + СокрЛП(СсылкаУчетнаяЗапись.Ссылка) + """.");
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗавершениеПодключения()
	
	// Чтобы отрисовался заголовок
	Заголовок = НСтр("ru = 'Подождите, пожалуйста...'");
	Элементы.Подождите.Заголовок = НСтр("ru = 'Выполняется настройка 1С-Отчетности...'");
	
	ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьЗавершениеПодключения", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗавершениеПодключения()
	
	ПараметрыОбработатьОбновление = ПараметрыАвтонастройкиУчетнойЗаписи();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыполнитьЗавершениеПодключения_ПослеОбработкиОбновления", 
		ЭтотОбъект);
		
	КонтекстЭДОКлиент.ОбработатьОбновление(ПараметрыОбработатьОбновление, ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗавершениеПодключения_ПослеОбработкиОбновления(Результат, ВходящийКонтекст) Экспорт
	
	ОбновлениеВыполненоУспешно 	= Результат.РезультатОбновления;
	ОбновлениеВыполнилось 		= ОбновлениеВыполненоУспешно И ИдентификаторАбонента <> "";
	
	ОбновитьРеквизитыЗаявления();
	
	Если НЕ ОбновлениеВыполнилось Тогда
		ПоказатьОшибкуНастройки(Результат);
	ИначеЕсли НужноОтправитьЗаявлениеВПФР() Тогда
		ПоказатьСтраницуОтправкиЗаявленияВПФР();
	Иначе
		ПоказатьЗавершениеНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НужноОтправитьЗаявлениеВПФР()
	
	// Даже если соглашение уже отправлено, то в этом случае все равно показываем,
	// так как нужно отправить не заявление на подключение, а сертификат
	
	ИнициализироватьСостояниеЭДОсПФР();
	
	Возврат НужноОтправитьЗаявлениеВПФРИзМастера(НаПодключение)
		ИЛИ НужноОтправитьЗаявлениеВПФРИзМастера(НаСертификат);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьОшибкуНастройки(Результат)
	
	Если Результат.Свойство("ПараметрыФункции") 
		И ТипЗнч(Результат.ПараметрыФункции) = Тип("Структура") 
		И Результат.ПараметрыФункции.Свойство("ТекстОшибокДляМастераПодключенияК1СОтчетности")
		И ЗначениеЗаполнено(Результат.ПараметрыФункции.ТекстОшибокДляМастераПодключенияК1СОтчетности) Тогда
		ТекстОшибки = Результат.ПараметрыФункции.ТекстОшибокДляМастераПодключенияК1СОтчетности;
	КонецЕсли;
	
	Если Результат.Свойство("ОшибкаУстановкиЛичногоСертификата") 
		И ЗначениеЗаполнено(Результат.ОшибкаУстановкиЛичногоСертификата) Тогда
		ТекстОшибки = Результат.ОшибкаУстановкиЛичногоСертификата;
	КонецЕсли;
	
	ПоказатьСтраницуСОшибкой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗавершениеНастройки()
	
	Если ПодключитьЭДО ИЛИ ПереиздатьСертификатЭДО Тогда
		// Прерываем только при необходимости подключения ЭДО
		ПрограммноеЗакрытие = Ложь;
	Иначе
		ПрограммноеЗакрытие = Истина;
	КонецЕсли;
	
	ОтметитьЗаявлениеКакНастроенное();
	ПараметрыПодключениеЭДО = ПолучитьПараметрыДляЗапускаМетодаБЭД(ДокументЗаявление.Ссылка);
	ПоказатьСтраницуУспешногоЗавершения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуУспешногоЗавершения()
	
	АктивизироватьСтраницу(
		ЭтотОбъект, 
		Элементы.УспешноеЗавершение,
		НСтр("ru = 'Настройка 1С-Отчетности завершена'"));
	ИзменитьОформлениеФормы();
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыЗаявления()
	
	Если ОбновлениеВыполнилось Тогда
		
		СтатусКомментарий 	= "Создана учетная запись.";
		Статус 				= ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено");
		НастройкаЗавершена 	= Истина;
		
		ЗаписатьРеквизитыЗаявления(
			СтатусКомментарий, 
			Статус, 
			НастройкаЗавершена, 
			КонтекстЭДОКлиент.НоваяУчетнаяЗапись);
		
		КонтекстЭДОКлиент.УстановитьУчетнуюЗаписьОрганизации(
			Организация, 
			КонтекстЭДОКлиент.НоваяУчетнаяЗапись);
		
		ОповеститьОбИзменении(КонтекстЭДОКлиент.НоваяУчетнаяЗапись);
		Оповестить("ОбновитьУчетнуюЗапись", КонтекстЭДОКлиент.НоваяУчетнаяЗапись,);
		
		Если ЭтоПервичноеЗаявление Тогда
			ДобавитьПользователейВУчетнуюЗапись(КонтекстЭДОКлиент.НоваяУчетнаяЗапись);
		КонецЕсли;
		
		Оповестить("ЗаполнитьСводнуюИнформациюПоЗаявлениюАбонентаСпецоператораСвязи", ДокументЗаявление.Ссылка);
		
	Иначе
		
		СтатусКомментарий 	= "Заявление одобрено, но не удалось создать учетную запись.";
		Статус 				= ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено");
		НастройкаЗавершена 	= Ложь;
		
		ЗаписатьРеквизитыЗаявления(
			СтатусКомментарий, 
			Статус, 
			НастройкаЗавершена);
			
	КонецЕсли;
	
	ЭтотОбъект.Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьРеквизитыЗаявления(СтатусКомментарий, Статус, НастройкаЗавершена, УчетнаяЗапись = Неопределено)
	
	ЗаписатьРеквизитыЗаявленияНаСервере(СтатусКомментарий, Статус, НастройкаЗавершена, УчетнаяЗапись);
	ОповеститьОбИзменении(ДокументЗаявление.Ссылка);

КонецПроцедуры

&НаСервере
Процедура ЗаписатьРеквизитыЗаявленияНаСервере(СтатусКомментарий, Статус, НастройкаЗавершена, УчетнаяЗапись)
	
	РеквизитыДокументаДляЗаписи = Новый Структура;
	РеквизитыДокументаДляЗаписи.Вставить("ДатаПолученияОтвета", ТекущаяДатаСеанса());
	РеквизитыДокументаДляЗаписи.Вставить("Статус",				Статус);
	РеквизитыДокументаДляЗаписи.Вставить("СтатусКомментарий",	СтатусКомментарий);
	РеквизитыДокументаДляЗаписи.Вставить("НастройкаЗавершена", 	НастройкаЗавершена);
	
	Если УчетнаяЗапись <> Неопределено Тогда
		РеквизитыДокументаДляЗаписи.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	КонецЕсли;
	
	ОбработкаЗаявленийАбонентаВызовСервера.ОбновитьРеквизитыЗаявления(ДокументЗаявление.Ссылка, РеквизитыДокументаДляЗаписи);

КонецПроцедуры

&НаКлиенте
Функция ПараметрыАвтонастройкиУчетнойЗаписи() Экспорт
	
	ПараметрыОбработатьОбновление = КонтекстЭДОКлиент.ПараметрыОбработатьОбновление();
	ПараметрыОбработатьОбновление.ЭтоЭлектроннаяПодписьВМоделиСервиса 	 = ДокументЗаявление.ЭлектроннаяПодписьВМоделиСервиса;
	ПараметрыОбработатьОбновление.ТелефонМобильныйДляАвторизации 		 = ДокументЗаявление.ТелефонМобильныйДляАвторизации;
	ПараметрыОбработатьОбновление.ИдентификаторАбонента 				 = ИдентификаторАбонента;
	ПараметрыОбработатьОбновление.СпецОператорСвязи 					 = СпецоператорСвязи;
	ПараметрыОбработатьОбновление.ПутьКонтейнерЗакрытогоКлюча 			 = ДокументЗаявление.ПутьКонтейнерЗакрытогоКлюча;
	ПараметрыОбработатьОбновление.Организация 							 = Организация;
	ПараметрыОбработатьОбновление.ЭтоВторичноеЗаявление 				 = Ложь;
	ПараметрыОбработатьОбновление.ОтпечатокСертификатаИзОтвета 			 = ОтпечатокСертификатаИзОтвета;
	ПараметрыОбработатьОбновление.ВызовИзМастераПодключенияК1СОтчетности = Истина;
	
	ИдентификаторДокументооборота = ?(ЗначениеЗаполнено(ДокументЗаявление.ИдентификаторКлючевогоКонтейнера), 
		ДокументЗаявление.ИдентификаторКлючевогоКонтейнера, 
		ДокументЗаявление.ИдентификаторДокументооборота);
	
	ПараметрыОбработатьОбновление.ИдентификаторДокументооборота = ИдентификаторДокументооборота;
	
	Возврат ПараметрыОбработатьОбновление;
	
КонецФункции

&НаСервере
Процедура ПоказатьСтраницуСОшибкой()
	
	АктивизироватьСтраницу(
		ЭтотОбъект, 
		Элементы.ОшибкаНастройки, 
		НСтр("ru = 'Настройка 1С-Отчетности'"));
		
	ИзменитьОформлениеФормы();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеСтраницыЗаявлениеОдобрено()
	
	КонтекстЭДОСервер  =  ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ИзменитьОформлениеПредложенияОтправитьЗаявлениеВПФР(ЭтотОбъект, Элементы.ПредложениеОтправитьЗаявлениеВПФР);
		
	КонтекстЭДОСервер.УстановитьПредставлениеЗаявленияВВидеФорматированнойСтроки(
		ДокументЗаявление.Ссылка, 
		Элементы.ЗаголовокЗаявлениеОдобрено, 
		Истина);
		
	Элементы.ЗаголовокЗаявлениеОдобрено.Заголовок = 
		Новый ФорматированнаяСтрока(Элементы.ЗаголовокЗаявлениеОдобрено.Заголовок, Новый Шрифт(,11));
		
	Элементы.НастроитьАвтоматически.КнопкаПоУмолчанию 	= Истина;
	Элементы.ПояснениеКЭлектронномуПодписанию.Видимость = ТребуетсяПолучениеРасписки;
	Элементы.ПояснениеКБумажномуПодписанию.Видимость    = НЕ ТребуетсяПолучениеРасписки;
	
	Если ТребуетсяПолучениеРасписки Тогда
		Элементы.НастроитьАвтоматически.Заголовок = НСтр("ru = 'Отправить расписку'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеСтраницыЗаявлениеОтклонено()
	
	// Обход ошибки платформы 10187361
	Элементы.ЗаголовокПричинаОтклонения.Шрифт = Новый Шрифт(,,,Ложь);
	
	// Текст заголовка
	КонтекстЭДОСервер  =  ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.УстановитьПредставлениеЗаявленияВВидеФорматированнойСтроки(
		ДокументЗаявление.Ссылка, 
		Элементы.ЗаголовокПричинаОтклонения, 
		Истина);
		
	Элементы.ЗаголовокПричинаОтклонения.Заголовок = Новый ФорматированнаяСтрока(
		Элементы.ЗаголовокПричинаОтклонения.Заголовок, 
		Новый Шрифт(,11));
		
	Элементы.ПричинаОтклонения.Заголовок = ДокументЗаявление.СтатусКомментарий;
	Элементы.ПодготовитьНовоеЗаявление.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеСтраницыОшибкаНастройки()
	
	СерверОбновленияНедоступен = СтрНайти(ВРЕГ(ТекстОшибки), НСтр("ru = 'СЕРВЕР'"));

	Если СерверОбновленияНедоступен Тогда
		Элементы.ОписаниеОшибки.Заголовок = НСтр("ru = 'Не удалось подключиться к серверу удостоверяющего центра'");
	ИначеЕсли ЗначениеЗаполнено(ТекстОшибки) Тогда
		Элементы.ОписаниеОшибки.Заголовок = ТекстОшибки;
	Иначе
		Элементы.ОписаниеОшибки.Заголовок = НСтр("ru = 'Не удалось установить сертификаты и выполнить автоматическую настройку'");
	КонецЕсли;
	
	Элементы.ПовторитьНастройку.КнопкаПоУмолчанию  = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеСтраницыОшибкаОтправкиРасписки()
	
	ИзменитьОформлениеДокумента(0, 0, "");

	Элементы.ПричинаОшибкиОтправкиРасписки.Заголовок = ТекстОшибки;
	Элементы.ПовторитьОтправку.КнопкаПоУмолчанию 	 = Истина;

КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеСтраницыУспешноеЗавершение()
	
	// Заголовок
	Если ЭтоПервичноеЗаявление Тогда
		
		Шаблон = НСтр("ru = 'Поздравляем!
	                   |Организация %1 успешно подключена к 1С-Отчетности'");
		
		Элементы.НадписьОбУспешнойОтправке.Заголовок = СтрШаблон(Шаблон, Организация);
		
	Иначе
		Шаблон = НСтр("ru = 'Поздравляем!
			|Новые настройки подключения к 1С-Отчетности успешно применены'");
		
		Элементы.НадписьОбУспешнойОтправке.Заголовок = Шаблон;
	КонецЕсли;
		
	// Видимость рекомндаций
	ЛокальныйКлюч 				= НЕ ДокументЗаявление.ЭлектроннаяПодписьВМоделиСервиса;
	ОтображатьБлокРезервныйКлюч = ЛокальныйКлюч;
	ОтображатьЭлементыЭДО	 	= (ПодключитьЭДО ИЛИ ПереиздатьСертификатЭДО) И ЛокальныйКлюч И ЗначениеЗаполнено(ПараметрыПодключениеЭДО);
	
	// 1С-ЭДО
	Элементы.ЗавершитьПодключениеКЭДО.КнопкаПоУмолчанию = ОтображатьЭлементыЭДО;
	Элементы.ЗавершитьПодключениеКЭДО.Видимость 		= ОтображатьЭлементыЭДО;
	
	Элементы.ЗавершениеНастройки1СЭДО.Видимость = ОтображатьЭлементыЭДО; // Надпись
	Если ПодключитьЭДО Тогда
		Элементы.ЗавершениеНастройки1СЭДО.Заголовок = НСтр("ru = 'Далее будет выполнено завершение подключения к сервису 1С-ЭДО.'");
		Элементы.ЗавершитьПодключениеКЭДО.Заголовок = ИмяКнопкиПодключенияЭДО();
	ИначеЕсли ПереиздатьСертификатЭДО Тогда
		Элементы.ЗавершениеНастройки1СЭДО.Заголовок = НСтр("ru = 'Далее будет выполнено завершение обновления сертификата сервиса 1С-ЭДО.'");
		Элементы.ЗавершитьПодключениеКЭДО.Заголовок = ИмяКнопкиПереизданияСертификатаЭДО();
	КонецЕсли;
	
	Элементы.Закрыть1.Видимость 		= НЕ ОтображатьЭлементыЭДО;
	Элементы.Закрыть1.КнопкаПоУмолчанию = НЕ ОтображатьЭлементыЭДО;
	
	// Резервный ключ
	Элементы.РекомендацияРезервныйКлюч.Видимость = ЛокальныйКлюч И ЭтоПервичноеЗаявление;
	Элементы.ГруппаЧтоДелать.Видимость = ЭтоПервичноеЗаявление;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКнопкиПодключенияЭДО()
	
	Возврат НСтр("ru = 'Завершить подключение к 1С-ЭДО'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКнопкиПереизданияСертификатаЭДО()
	
	Возврат НСтр("ru = 'Завершить обновление сертификата 1С-ЭДО'");
	
КонецФункции

&НаСервере
Процедура ИзменитьОформлениеФормы() Экспорт
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ЗаявлениеОдобрено Тогда
		
		ИзменитьОформлениеСтраницыЗаявлениеОдобрено();
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ЗаявлениеОтклонено Тогда
		
		ИзменитьОформлениеСтраницыЗаявлениеОтклонено();
			
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ОшибкаНастройки Тогда
		
		ИзменитьОформлениеСтраницыОшибкаНастройки();
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ОшибкаОтправкиРасписки Тогда
		
		ИзменитьОформлениеСтраницыОшибкаОтправкиРасписки();
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.УспешноеЗавершение Тогда
		
		ИзменитьОформлениеСтраницыУспешноеЗавершение();
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ОтправкаЗаявленияВПФР Тогда
		
		ДокументооборотСКОКлиентСервер.ИзменитьОформлениеСтраницыОтправкаЗаявленияВПФР(ЭтотОбъект);
		ДокументооборотСКОКлиентСервер.ИзменитьЗаголовокФормыОтправкиВПФР(ЭтотОбъект);
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ОшибкаОтправкиВПФР Тогда
		
		ДокументооборотСКОКлиентСервер.ИзменитьОформлениеСтраницыОшибкаОтправкиВПФР(ЭтотОбъект);
		ДокументооборотСКОКлиентСервер.ИзменитьЗаголовокФормыОтправкиВПФР(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СоздатьНовоеЗаявление()

	// Если статус заявления - "Отклонено", тогда создаем новое заявление
	ДополнительныеПараметры = ДокументооборотСКОКлиентСервер.ПараметрыОткрытияМастера();
	ДополнительныеПараметры.Вставить("ЗначениеКопирования", ДокументЗаявление.Ссылка);
	ДополнительныеПараметры.Вставить("ВидЗаявления", 		ДокументЗаявление.ТипЗаявления);
		
	Если Открыта() Тогда 
		Закрыть(ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(РезультатПолученияКонтекста, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = РезультатПолученияКонтекста.КонтекстЭДО;
	
	Если ДокументЗаявление <> Неопределено Тогда
		// Обновление состояния и панели отправки
		Оповестить("ЗаполнитьСводнуюИнформациюПоЗаявлениюАбонентаСпецоператораСвязи",ДокументЗаявление.Ссылка);
	КонецЕсли;
	
	ПриДобавленииКлючаВРеестр();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриДобавленииКлючаВРеестр()
	
	УдалосьПогаситьВыводОшибок = КонтекстЭДОКлиент.ЗапретитьВыводОшибокКриптоПро(ДокументЗаявление, НовыйСтатусДокумента);
	Элементы.ПредупреждениеКриптоПро.Видимость = ДокументЗаявление.ВключитьЛицензиюКриптоПро И НЕ УдалосьПогаситьВыводОшибок;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПомощи()
	
	ФИО = СокрЛП(ДокументЗаявление.ВладелецЭЦПИмя + " " + ДокументЗаявление.ВладелецЭЦПОтчество);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Фио", ФИО);
	ДополнительныеПараметры.Вставить("НомерТелефона", ДокументЗаявление.ТелефонМобильныйДляАвторизации);
	
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_Помощь", ДополнительныеПараметры);
	
КонецПроцедуры

#Область Расписка

&НаСервереБезКонтекста
Функция ПолучитьФайлАвтонастройки(СпецоператорСвязи, ИдентификаторАбонента, ДатаПоследнегоОбновления = Неопределено)
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ПолучитьФайлАвтонастройки(СпецоператорСвязи, ИдентификаторАбонента, ДатаПоследнегоОбновления);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСертификатыИзФайлаНастройки(АдресФайла)
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ПолучитьСертификатыИзФайлаНастройки(АдресФайла);
	
КонецФункции

&НаСервере
Процедура ПрисоединитьФайлРаспискиКДокументу(АдресФайлаРасписки, АдресФайлаПодписи)
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("Автор", Неопределено);
	ПараметрыФайла.Вставить("ВладелецФайлов", ДокументЗаявление.Ссылка);
	ПараметрыФайла.Вставить("ИмяБезРасширения", "Расписка");
	ПараметрыФайла.Вставить("РасширениеБезТочки", "cer");
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	
	ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайлаРасписки);
	
	Если ЗначениеЗаполнено(АдресФайлаПодписи) Тогда
		СвойстваПодписи = Новый Структура;
		СвойстваПодписи.Вставить("Подпись", ПолучитьИзВременногоХранилища(АдресФайлаПодписи));
		СвойстваПодписи.Вставить("Сертификат", ПолучитьИзВременногоХранилища(АдресСертификата));
		СвойстваПодписи.Вставить("ПодписьВерна", Истина);
		СвойстваПодписи.Вставить("ДатаПроверкиПодписи", ТекущаяДатаСеанса());
		СвойстваПодписи.Вставить("КомуВыданСертификат", "");
		
		РаботаСФайлами.ДобавитьПодписьКФайлу(ПрисоединенныйФайл, СвойстваПодписи, УникальныйИдентификатор);
	КонецЕсли;
	
	СтрокаТаблицы = Неопределено;
	Для Каждого ЭлектронныйДокумент Из ДокументЗаявление.ЭлектронныеДокументы Цикл
		Если ЭлектронныйДокумент.Документ = "Расписка" Тогда
			СтрокаТаблицы = ЭлектронныйДокумент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = ДокументЗаявление.ЭлектронныеДокументы.Добавить();
	КонецЕсли;
	
	СтрокаТаблицы.Документ = "Расписка";
	СтрокаТаблицы.Файл = ПрисоединенныйФайл;
	
КонецПроцедуры

&НаСервере
Функция ОтправитьРаспискуНаСервере()
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ОтправитьРаспискуНаСервере(ДокументЗаявление, ИдентификаторАбонента);
	
КонецФункции

&НаКлиенте
Процедура СканРаспискаПослеДобавленияФайлов(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено И ЗначениеЗаполнено(Результат.ОписанияФайлов) Тогда
		
		ФайлСканРасписка = Новый Структура;
		ФайлСканРасписка.Вставить("Адрес", Результат.ОписанияФайлов[0].Адрес);
		Файл = Новый Файл(Результат.ОписанияФайлов[0].Имя);
		ФайлСканРасписка.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
		ФайлСканРасписка.Вставить("Расширение", 	  СтрЗаменить(Файл.Расширение, ".", ""));
		
		Размер = Результат.ОписанияФайлов[0].Размер;
		
		ИзменитьОформлениеДокумента(Размер, 1, Файл.Имя);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОтметитьЗаявлениеКакНастроенное()
	
	Если ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено")
		И НЕ ДокументЗаявление.НастройкаЗавершена Тогда
		
		ОбработкаЗаявленийАбонентаВызовСервера.ОбновитьРеквизитыЗаявления(
			ДокументЗаявление.Ссылка, 
			Новый Структура("НастройкаЗавершена", Истина));
	
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НапоминитьПозжеПроЗаявление(ЗаявлениеАбонента, БольшеНеНапоминать = Ложь)
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.НапоминитьПозжеПроЗаявление(ЗаявлениеАбонента, БольшеНеНапоминать);

КонецПроцедуры

&НаКлиенте
Процедура СканироватьФайл_Завершение(Результат, ВидДокумента) Экспорт
	
	Если Результат <> Неопределено И Результат.ФайлДобавлен Тогда
		ДобавитьОтсканированныеФайлы(Результат.ФайлСсылка, ВидДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтсканированныеФайлы(ПрисоединенныйФайл, ВидДокумента)
	
	ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ДополнительныеПараметры.ИдентификаторФормы 				= УникальныйИдентификатор;
	ДополнительныеПараметры.ПолучатьСсылкуНаДвоичныеДанные 	= Истина;
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, ДополнительныеПараметры);
	
	НовоеИмя = НСтр("ru = 'Расписка'") + "." + ДанныеФайла.Расширение;
	
	ФайлСканРасписка = Новый Структура;
	ФайлСканРасписка.Вставить("Адрес", 			  ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ФайлСканРасписка.Вставить("ИмяБезРасширения", НовоеИмя);
	ФайлСканРасписка.Вставить("Расширение", 	  ДанныеФайла.Расширение);
	
	ИзменитьОформлениеДокумента(ДанныеФайла.Размер, 1, НовоеИмя);

КонецПроцедуры

#Область ЗаявленияВПФР

&НаКлиенте
Процедура ПоказатьСтраницуОтправкиЗаявленияВПФР()
	
	// Делаем это повторно при переключении страниц, потому что после автонастройки может все поменяться 
	// (сертификат, например)
	СостояниеЭДОсПФР = КонтекстЭДОКлиент.СостояниеЭДОсПФР(Организация);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПоказатьСтраницуОтправкиЗаявленияВПФР_Завершение", 
		ЭтотОбъект);
		
	КонтекстЭДОКлиент.ДвДанныеСертификатаПоОрганизации(Организация, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуОтправкиЗаявленияВПФР_Завершение(СвойстваСертификата, ВходящийКонтекст) Экспорт
	
	Если СвойстваСертификата = Неопределено Тогда
		СостояниеЭДОсПФР.НаСертификат.ДвДанныеСертификата = Неопределено;
	Иначе
		СостояниеЭДОсПФР.НаСертификат.ДвДанныеСертификата = СвойстваСертификата.ДвДанныеСертификата;
	КонецЕсли;
	
	ПрограммноеЗакрытие = Ложь;
	
	АктивизироватьСтраницу(
		ЭтотОбъект, 
		Элементы.ОтправкаЗаявленияВПФР);
		
	ИзменитьОформлениеФормы();
	
КонецПроцедуры

&НаСервере
Функция НужноОтправитьЗаявлениеВПФРИзМастера(Вид) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.НужноОтправитьЗаявлениеВПФРИзМастера(ЭтотОбъект, Вид);

КонецФункции

&НаСервере
Процедура ОткрытьНаНужнойСтраницеПриСозданииНаСервере()
	
	Если ЗаявлениеОдобрено Тогда
		
		АктивизироватьСтраницу(
			ЭтотОбъект, 
			Элементы.ЗаявлениеОдобрено,
			НСтр("ru = 'Заявление одобрено'"));
			
	Иначе
		
		ПрограммноеЗакрытие = Истина;
		ОтметитьЗаявлениеКакНастроенное();
		
		АктивизироватьСтраницу(
			ЭтотОбъект, 
			Элементы.ЗаявлениеОтклонено,
			НСтр("ru = 'Заявление отклонено'"));
		
	КонецЕсли;
	
	ИзменитьОформлениеФормы();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСостояниеЭДОсПФР()
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ИнициализироватьВидыЗаявленийНаЭДОВПФР(ЭтотОбъект);
	СостояниеЭДОсПФР = КонтекстЭДОСервер.СостояниеЭДОсПФР(Организация);
	
	ТекущееЗаявлениеПо1СОтчетности = ДокументЗаявление.Ссылка;
		
	Если НужноОтправитьЗаявлениеВПФРИзМастера(НаПодключение) Тогда
		ИзначальныйВидЗаявленияПФР = НаПодключение;
	ИначеЕсли НужноОтправитьЗаявлениеВПФРИзМастера(НаОтключение) Тогда
		ИзначальныйВидЗаявленияПФР = НаОтключение;
	ИначеЕсли НужноОтправитьЗаявлениеВПФРИзМастера(НаСертификат) Тогда
		ИзначальныйВидЗаявленияПФР = НаСертификат;
	КонецЕсли;

	ЭтоПредупреждениеИзМастера = Истина;
	
	КонтекстЭДОСервер.ИнициализироватьПараметрыЭДОСПФР(ЭтотОбъект, Ложь);

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиСостоянияЭДОСПФР() Экспорт

	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.СохранитьНастройкиСостоянияЭДОСПФР(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаявленияВПФРЕслиНеСозданы() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.СоздатьЗаявленияВПФРЕслиНеСозданы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ЗаявлениеЗаполненоКорректно(ОтправляемоеЗаявление) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ЗаявлениеВПФРЗаполненоКорректно(ОтправляемоеЗаявление);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСтраницуОшибкиОтправкиВПФР() Экспорт
	
	АктивизироватьСтраницу(
		ЭтотОбъект, 
		Элементы.ОшибкаОтправкиВПФР);
		
	ИзменитьОформлениеФормы();
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти