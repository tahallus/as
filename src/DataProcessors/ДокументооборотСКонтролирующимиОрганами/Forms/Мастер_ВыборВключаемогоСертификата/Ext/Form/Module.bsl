#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ИнициализироватьПараметры(Параметры);
	РежимРаботыСКлючами = 2; // Локально
	
	ДокументооборотСКОКлиентСервер.ИнициализироватьПроверкиТелефонаДляОблака(ЭтотОбъект);
	ПроверкаТелефонДляПаролей.ЗначениеВведено = ЗначениеЗаполнено(ТелефонДляПаролей);

	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ТелефонДляПаролей.ОбновитьТекстРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИсправленыОшибкиЛокальногоХраненияКлюча" Тогда
		ИнициализироватьПараметры(Параметр);
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТелефонДляПаролейПриИзменении(Элемент)
	
	ТелефонДляПаролейИзменениеТекстаРедактирования(Элемент, Элемент.ТекстРедактирования, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРаботыСКлючамиПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкаВключенияСертификатаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("НавигационнаяСсылка", НавигационнаяСсылкаФорматированнойСтроки);
	ДополнительныеПараметры.Вставить("РежимРаботыСКлючами", РежимРаботыСКлючами);
	
	Оповестить("ИсправитьОшибкиЛокальногоХраненияКлюча", ДополнительныеПараметры);
	
	ИзменитьОформлениеОшибкаВключенияСертификата(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонДляПаролейИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Представление = ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ПолучитьПредставлениеТелефона(Текст);
	ТелефонДляПаролей = Представление;
	
	ПроверкаТелефонДляПаролей.ЗначениеВведено = ЗначениеЗаполнено(Представление);
	Если Не ЗначениеЗаполнено(Представление) Тогда
		ТелефонДляПаролей = Текст;
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчета");
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьТелефонДляПаролей");
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьТелефонДляПаролей", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КодПодтвержденияПриИзменении(Элемент)
	
	КодПодтвержденияИзменениеТекстаРедактирования(Элемент, Элемент.ТекстРедактирования, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КодПодтвержденияИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если СтрДлина(СокрЛП(Текст)) = 6 Тогда
		КодПодтверждения = СокрЛП(Текст);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьКодПодтверждения", 0.5, Истина); 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПродолжитьВыборСертификата(Команда)
	
	ВыбраноЭПВМоделиСервиса = РежимРаботыСКлючами = 1;
	Если ВыбраноЭПВМоделиСервиса Тогда
		
		Если НЕ ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для продолжения подтвердите номер телефона'")); 
			Возврат;
		КонецЕсли;
		
		Если НЕ УдалосьПолучитьСписокОблачныхСертификатов() Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ЕстьОшибкаЛокальногоХраненияКлючей(ЭтотОбъект) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для продолжения устраните ошибку'"),,"РежимРаботыСКлючамиЛокально"); 
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("РежимРаботыСКлючами", РежимРаботыСКлючами);
	 
	Если ВыбраноЭПВМоделиСервиса Тогда
		ДополнительныеПараметры.Вставить("ИдентификаторПроверки", 	  ПроверкаТелефонДляПаролей.ИдентификаторПроверки);
		ДополнительныеПараметры.Вставить("ОблачныеСертификатыКалуги", ОблачныеСертификатыКалуги);
		ДополнительныеПараметры.Вставить("ТелефонДляПаролей", ТелефонДляПаролей);
	КонецЕсли;
	
	Закрыть(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция УдалосьПолучитьСписокОблачныхСертификатов()

	Результат = МенеджерСервисаКриптографии.СертификатыАбонентаПоИдентификаторуПроверкиИНН(
		ИНН, ПроверкаТелефонДляПаролей.ИдентификаторПроверки, Истина);
		
	Если Результат.Выполнено Тогда
		
		Для Каждого Сертификат Из Результат.Сертификаты Цикл 
			
			СертификатКалуги = Новый Структура;
			СертификатКалуги.Вставить("Отпечаток", Сертификат.Thumbprint);
			СертификатКалуги.Вставить("СерийныйНомер", Сертификат.SerialNumber);
			СертификатКалуги.Вставить("Издатель", Сертификат.Issuer);
			СертификатКалуги.Вставить("ДействителенС", Сертификат.ValidFrom);
			СертификатКалуги.Вставить("ДействителенПо", Сертификат.ValidTo);
			СертификатКалуги.Вставить("ФИО", Сертификат.FIO);
			СертификатКалуги.Вставить("Должность", Сертификат.Position);
			СертификатКалуги.Вставить("Наименование", Сертификат.CommonName);
			СертификатКалуги.Вставить("ИНН", Сертификат.INN); // именно так, INNLE здесь не нужен 
			СертификатКалуги.Вставить("ОГРН", Сертификат.OGRN);
			СертификатКалуги.Вставить("КодРегиона", Сертификат.Region);
			СертификатКалуги.Вставить("СНИЛС", Сертификат.SNILS);
			СертификатКалуги.Вставить("Base64", Сертификат.Certificate);
			
			ОблачныеСертификатыКалуги.Добавить(СертификатКалуги);
			
		КонецЦикла;
		
		Возврат Истина;
	Иначе
		ОбщегоНазначения.СообщитьПользователю(Результат.ОписаниеОшибки); 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьНомер(Команда)
	
	ОтправитьКодПодтверждения();

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПроверкуТелефонаНажатие(Элемент)
	
	ПроверкаТелефонДляПаролей = ДокументооборотСКОКлиентСервер.ШаблонПроверкиДляОблака();
	ТелефонДляПаролей = Неопределено;
	Таймер = 0;
	ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчета");
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьТекстПоляТелефонДляПаролей", 0.1, Истина);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКодПовторно(Команда)
	
	ОтправитьКодПодтверждения();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОтправитьКодПодтверждения()
	
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьТелефонДляПаролей");
	ОчиститьСообщения();
	КодПодтверждения = Неопределено;
	
	Результат = ПроверитьНомерНаСервере(ТелефонДляПаролей, ПроверкаТелефонДляПаролей.ИдентификаторПроверки);
	Если Результат.Выполнено Тогда
		Таймер = Результат.ЗадержкаПередПовторнойОтправкой;
		ПроверкаТелефонДляПаролей.ИдентификаторПроверки = Результат.Идентификатор;
		ЗапуститьОбратныйОтсчет();
		ПроверкаТелефонДляПаролей.ВыполняетсяПроверка = Истина;
		ПроверкаТелефонДляПаролей.КодОтправлен = Истина;
		
		ПодключитьОбработчикОжидания("Подключаемый_АктивироватьПолеКодПодтверждения", 0.1, Истина);	
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ОписаниеОшибки,, "ТелефонДляПаролей");
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьНомерНаСервере(Телефон, Идентификатор)
	
	Возврат МенеджерСервисаКриптографии.ПолучитьКодПроверкиТелефона(Телефон, Идентификатор);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_АктивироватьПолеКодПодтверждения()
	
	ТекущийЭлемент = Элементы.КодПодтверждения;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбратныйОтсчет()
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчета", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОбратногоОтсчета()
	
	Таймер = Таймер - 1;
	Если Таймер >= 0 Тогда
		НадписьОбратногоОтсчета = СтрШаблон(НСтр("ru = 'Запросить код повторно можно будет через %1 сек.'"), Таймер);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчета", 1, Истина);		
	Иначе
		НадписьОбратногоОтсчета = "";
		ПроверкаТелефонДляПаролей.КодОтправлен = Ложь;
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	ИзменитьОформлениеЭПВОблаке(Форма);
	ИзменитьОформлениеОшибкаВключенияСертификата(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеЭПВОблаке(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаВОблакеВертикальная.Доступность = Форма.РежимРаботыСКлючами = 1;
	
	// Облачное хранение
	Элементы.КартинкаТелефонПроверен.Видимость = Форма.ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено;
	Элементы.ПроверитьНомер.Видимость = 
		Форма.ПроверкаТелефонДляПаролей.ЗначениеВведено 
		И Не Форма.ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено 
		И Не Форма.ПроверкаТелефонДляПаролей.ВыполняетсяПроверка;
	Элементы.ТелефонДляПаролей.ТолькоПросмотр = ЗначениеЗаполнено(Форма.ПроверкаТелефонДляПаролей.ИдентификаторПроверки);
	Элементы.ГруппаКодПодтверждения.Видимость = 
		Форма.ПроверкаТелефонДляПаролей.ВыполняетсяПроверка 
		И Не Форма.ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено;
		
	Элементы.ОтправитьКодПовторно.Видимость = Не Форма.ПроверкаТелефонДляПаролей.КодОтправлен;
	Элементы.НадписьОбратногоОтсчета.Видимость = Форма.ПроверкаТелефонДляПаролей.КодОтправлен;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеОшибкаВключенияСертификата(Форма, ЭтоСтартИсправления = Ложь)
	
	Элементы = Форма.Элементы;
	Элементы.ОшибкаВключенияСертификата.Заголовок = "";
	
	Если ЭтоСтартИсправления Тогда
		Элементы.ОшибкаВключенияСертификата.Заголовок = Новый ФорматированнаяСтрока(БиблиотекаКартинок.ДлительнаяОперация16);
	Иначе
		// Локальное хранение
		ЭтоКонфликтКриптопровайдеров        = Форма.CryptoProCSPУстановлен И Форма.ViPNetCSPУстановлен;
		УстановленХотяБыОдинКриптопровайдер = Форма.CryptoProCSPУстановлен ИЛИ Форма.ViPNetCSPУстановлен;
		ЕстьОшибкаЛокальногоХраненияКлючей  = ЕстьОшибкаЛокальногоХраненияКлючей(Форма);
		
		Если ЕстьОшибкаЛокальногоХраненияКлючей Тогда
			// Подсказки вопросиком не будет, но подсказка будет выведена в специальном поле справа
			Элементы.РежимРаботыСКлючамиЛокально.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		Иначе
			Элементы.РежимРаботыСКлючамиЛокально.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		КонецЕсли;
		
		Если ЕстьОшибкаЛокальногоХраненияКлючей Тогда

			Текст = ТекстОшибкиВключенияЛокальногоСертификата(Форма);
			
			Если ЭтоКонфликтКриптопровайдеров Тогда
				Ссылка = Новый ФорматированнаяСтрока(НСтр("ru = 'Исправить'"),,,,"Исправить конфликт");
			ИначеЕсли НЕ Форма.КомпонентаДляРаботыСКриптографиейПодключена Тогда
				Ссылка = Новый ФорматированнаяСтрока(НСтр("ru = 'Установить'"),,,,"Установить компоненту");
			ИначеЕсли НЕ УстановленХотяБыОдинКриптопровайдер Тогда
				Ссылка = Новый ФорматированнаяСтрока(НСтр("ru = 'Установить'"),,,,"Установить криптопровайдер");
			КонецЕсли;
			
			КрасныйТекст = Новый ФорматированнаяСтрока(Текст,,Форма.КрасныйЦвет);
			
			Элементы.ОшибкаВключенияСертификата.Заголовок = Новый ФорматированнаяСтрока(КрасныйТекст, Ссылка);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиВключенияЛокальногоСертификата(Форма)
	
	ЭтоКонфликтКриптопровайдеров        = Форма.CryptoProCSPУстановлен И Форма.ViPNetCSPУстановлен;
	УстановленХотяБыОдинКриптопровайдер = Форма.CryptoProCSPУстановлен ИЛИ Форма.ViPNetCSPУстановлен;
	
	Текст = "";
	Если ЭтоКонфликтКриптопровайдеров Тогда
		
		Текст  = НСтр("ru = 'Недоступно при конфликте криптопровайдеров. '");
		
	ИначеЕсли НЕ Форма.КомпонентаДляРаботыСКриптографиейПодключена Тогда
		
		Текст  = НСтр("ru = 'Для выбора сертификата необходимо установить внешнюю компоненту криптографии. '");
		
	ИначеЕсли НЕ УстановленХотяБыОдинКриптопровайдер Тогда
		
		Текст  = НСтр("ru = 'Для выбора сертификата необходимо установить криптопровайдер. '");
		
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьКодПодтверждения()
	
	ОчиститьСообщения();
	
	КодПодтверждения = СокрЛП(КодПодтверждения);
	Если СтрДлина(КодПодтверждения) = 6 Тогда
		Если ПроверкаТелефонДляПаролей.ВыполняетсяПроверка Тогда
			Результат = ПроверитьТелефонПоКодуНаСервере(
			ПроверкаТелефонДляПаролей.ИдентификаторПроверки, КодПодтверждения);
			Если Результат.Выполнено Тогда
				ПроверкаТелефонДляПаролей.ВыполняетсяПроверка = Ложь;
				ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено = Истина;
				ОтключитьОбработчикОжидания("Подключаемый_ПроверитьКодПодтверждения");
				УправлениеФормой(ЭтаФорма);
			Иначе
				ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ОписаниеОшибки,, "КодПодтверждения");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьТелефонПоКодуНаСервере(Идентификатор, КодПодтверждения) 
	
	Возврат МенеджерСервисаКриптографии.ПроверитьТелефонПоКоду(Идентификатор, КодПодтверждения);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбновитьТелефонДляПаролей()
	
	Элементы.ПроверитьНомер.Видимость = ПроверкаТелефонДляПаролей.ЗначениеВведено;
	Если ПроверкаТелефонДляПаролей.ЗначениеВведено Тогда
		Элементы.ТелефонДляПаролей.ОбновитьТекстРедактирования();
		ОтключитьОбработчикОжидания("Подключаемый_АктивироватьКнопкуПроверитьНомер");
		ПодключитьОбработчикОжидания("Подключаемый_АктивироватьКнопкуПроверитьНомер", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьТекстПоляТелефонДляПаролей()
	
	Элементы.ТелефонДляПаролей.ОбновитьТекстРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АктивироватьКнопкуПроверитьНомер()
	
	ТекущийЭлемент = Элементы.ПроверитьНомер;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьОшибкаЛокальногоХраненияКлючей(Форма)
	
	ЭтоКонфликтКриптопровайдеров        = Форма.CryptoProCSPУстановлен И Форма.ViPNetCSPУстановлен;
	УстановленХотяБыОдинКриптопровайдер = Форма.CryptoProCSPУстановлен ИЛИ Форма.ViPNetCSPУстановлен;
	
	Возврат 
		(ЭтоКонфликтКриптопровайдеров И НЕ Форма.ИгнорироватьКонфликт)
		ИЛИ НЕ УстановленХотяБыОдинКриптопровайдер
		ИЛИ НЕ Форма.КомпонентаДляРаботыСКриптографиейПодключена;	
	
КонецФункции
	
&НаСервере
Процедура ИнициализироватьПараметры(ВхПараметры)
	
	ПараметрыФормы = ВхПараметры.ПараметрыФормы;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВхПараметры, ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти