&НаКлиенте
Перем МенеджерКриптографии;

&НаКлиенте
Перем СертификатКриптографии;

&НаКлиенте
Перем КонтекстЭДОКлиент;


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПоказатьСтраницуПоискаСертификатов();
	ИнициализироватьДанные(Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("Подключаемый_НачатьПолучениеКонтекста", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ РезультатВернули Тогда
		Отказ = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_ВернутьРезультат", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеСертификатаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранныйСертификат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПредставлениеСертификатаОткрытие_ПослеПолученияДвДанных", 
		ЭтотОбъект);
	
	КриптографияЭДКОКлиент.ЭкспортироватьСертификатВBase64(ОписаниеОповещения, ВыбранныйСертификат, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСертификатаОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьСертификат();
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СертификатНачалоВыбора_ПослеВыбораСертификата", 
		ЭтотОбъект);
		
	ДопПараметры = ПараметрыВыбораСертификата();

	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ВыборСертификатовОблачныхИлиЛокальных",
		ДопПараметры,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьПакет(Команда)
	
	Если ВыбранныйСертификат = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выберите сертификат'"),,"ПредставлениеСертификата");
		Возврат;  
	КонецЕсли;
	
	ОбъединитьВTIFСканы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОперацию(Команда)
	
	РезультатВернули = Истина;
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбъединениеСканыВТиф

&НаКлиенте
Процедура ОбъединитьВTIFСканы()
	
	ПоказатьСтраницуФормированияПакета();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбъединитьВTIFСканы_ПроверитьСостояние", 
		ЭтотОбъект); 
		
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.Интервал = 1;
	
	ДлительнаяОперация = НачатьОбъединениеВTIFСканов();
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция НачатьОбъединениеВTIFСканов()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = Объединение картинок в tif'");
	ПараметрыВыполнения.ОжидатьЗавершение = Истина;
	
	ОписаниеФайловТемп = ОбщегоНазначения.СкопироватьРекурсивно(Новый Массив(ОписаниеФайлов));
	Для каждого СтрокаОписанияФайлов Из ОписаниеФайловТемп Цикл
		МассивДвоичныхДанных = Новый Массив;
		Для Каждого Адрес из СтрокаОписанияФайлов.АдресаФайлов Цикл
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
			МассивДвоичныхДанных.Добавить(ДвоичныеДанные);
		КонецЦикла;
		СтрокаОписанияФайлов.Вставить("МассивДвоичныхДанных", МассивДвоичныхДанных);
	КонецЦикла; 
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ДокументооборотСКО.ОбъединитьВTIFСканы", 
		ОписаниеФайловТемп, 
		ПараметрыВыполнения);

КонецФункции
	
&НаКлиенте
Процедура ОбъединитьВTIFСканы_ПроверитьСостояние(ДлительнаяОперация, ВходящийКонтекст) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		Результат = РезультатФоновогоЗадания(ДлительнаяОперация);
		ОписаниеФайлов = Новый ФиксированныйМассив(Результат);
		ОписаниеФайловИсходное = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ОписаниеФайлов);

		Если Результат <> Неопределено Тогда
			Элементы.ТекстПриОжидании.Заголовок = НСтр("ru = 'Выполняется подписание...'");
			ПодключитьОбработчикОжидания("Подключаемый_СформироватьПакет", 1, Истина);
		КонецЕсли;
		
	ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
		
		ПоказатьОшибку(ДлительнаяОперация.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультатФоновогоЗадания(ДлительнаяОперация)
	
	Результат = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		
	Если Результат.Выполнено Тогда
		
		ОписаниеФайловТемп = Результат.ОписаниеФайлов;
		Для каждого СтрокаОписанияФайлов Из ОписаниеФайловТемп Цикл
			
			НовыйАдрес = ПоместитьВоВременноеХранилище(
				СтрокаОписанияФайлов.ДвДанныеИтоговогоФайла, 
				Новый УникальныйИдентификатор);
				
			СтрокаОписанияФайлов.Вставить("АдресИтоговогоФайла", НовыйАдрес);
			СтрокаОписанияФайлов.Удалить("ДвДанныеИтоговогоФайла");
			СтрокаОписанияФайлов.Удалить("МассивДвоичныхДанных");
		
		КонецЦикла;
		
		Возврат Результат.ОписаниеФайлов;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Подписание

&НаКлиенте
Процедура ПодписатьДанные_ПослеПолученияСвойствСертификата(Результат, ВходящийКонтекст) Экспорт
	
	ПодготовитьДанныеДляФормированияПакета();
	ТекущийФайл = 0;
	ПодписатьСледующийФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьСледующийФайл(Результат = Неопределено, ВходящийКонтекст = Неопределено)
	
	Если ТекущийФайл = ОписаниеФайлов.Количество() Тогда
	     СформироватьПакетПослеПодписания();
	 Иначе
		 ОписаниеФайла = ОписаниеФайлов[ТекущийФайл];
		 ПодписатьДанные(ОписаниеФайла.АдресИтоговогоФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДанные(АдресФайла)
	
	ДвДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	
	Если ВыбранныйСертификат.ЭтоЭлектроннаяПодписьВМоделиСервиса Тогда
		ПодписатьДанныеВМоделиСервиса(ДвДанные);
	Иначе
		ПодписатьДанныеМетодомПлатформы(ДвДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДанныеМетодомПлатформы(ДвДанные)
	
	// Нельзя объединять оповещения, так как параметры оповещения различные
	Оповещение = Новый ОписаниеОповещения(
		"ПодписатьДанныеМетодомПлатформы_ПослеПодписания", 
		ЭтотОбъект, 
		,
		"ПодписатьДанныеМетодомПлатформы_ОбработчикОшибкиПодписания",
		ЭтотОбъект);
			
	Если ЗначениеЗаполнено(Пароль) Тогда
		МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
	КонецЕсли;
	
	// Методом платформы, так как компонента не подписывает сертификатами сторонних УЦ
	МенеджерКриптографии.НачатьПодписывание(
		Оповещение, 
		ДвДанные, 
		СертификатКриптографии);
		
КонецПроцедуры
	
&НаКлиенте
Процедура ПодписатьДанныеМетодомПлатформы_ПослеПодписания(ПодписанноеСообщение, ВходящийКонтекст) Экспорт
	
	Если ПодписанноеСообщение = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось сформировать цифровую подпись.'");
		ПоказатьОшибку(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	АдресПодписи = ПоместитьВоВременноеХранилище(ПодписанноеСообщение, Новый УникальныйИдентификатор);
	ДобавитьПодписьВОписание(АдресПодписи);
	ВыполнитьДействиеПослеПодписанияОдного();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеПослеПодписанияОдного() Экспорт
	
	ТекущийФайл = ТекущийФайл + 1;
	ПодписатьСледующийФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДанныеМетодомПлатформы_ОбработчикОшибкиПодписания(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ТекстОшибки = КраткоеПредставлениеОшибки(ОбщегоНазначенияЭДКОКлиентСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке));
	ПоказатьОшибку(ТекстОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПодписьВОписание(АдресПодписи)
	
	ТекущееОписание = ОписаниеФайлов[ТекущийФайл];
	ТекущееОписание.Вставить("АдресПодписи", АдресПодписи);
	ТекущееОписание.Вставить("ИмяФайлаПодписи", ТекущееОписание.ИмяФайла + ПостфиксПодписи());
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДанныеВМоделиСервиса(ДвДанные)
	
	// Нельзя объединять оповещения, так как параметры оповещения различные
	Оповещение = Новый ОписаниеОповещения(
		"ПодписатьДанныеВМоделиСервиса_ПослеПодписания", 
		ЭтотОбъект);
		
	АдресДанных     = ПоместитьВоВременноеХранилище(ДвДанные, Новый УникальныйИдентификатор);
	АдресРезультата = ПоместитьВоВременноеХранилище(, Новый УникальныйИдентификатор);
	
	КриптографияЭДКОКлиент.ПодписатьPKCS7(Оповещение, ВыбранныйСертификат, АдресДанных, Ложь, АдресРезультата,,, Истина);
		
КонецПроцедуры	
		
&НаКлиенте
Процедура ПодписатьДанныеВМоделиСервиса_ПослеПодписания(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		ДобавитьПодписьВОписание(Результат.ИмяФайлаПодписи);
		ВыполнитьДействиеПослеПодписанияОдного();
		
	ИначеЕсли Результат.ОписаниеОшибки = НСтр("ru = 'Пользователь отказался от ввода пароля'") Тогда
		
		РезультатВернули = Истина;
		Закрыть();
		
	Иначе
		ПоказатьОшибку(Результат.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сертификат

&НаКлиенте
Процедура ПредставлениеСертификатаОткрытие_ПослеПолученияДвДанных(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено 
		И Результат.Выполнено 
		И ВыбранныйСертификат <> Неопределено Тогда
		
		ДвДанные = Base64Значение(Результат.СтрокаBase64);
		
		Адрес = ПоместитьВоВременноеХранилище(ДвДанные, Новый УникальныйИдентификатор);
	
		Сертификат = Новый Структура();
		Сертификат.Вставить("Адрес", Адрес);
		
		КриптографияЭДКОКлиент.ПоказатьСертификат(Сертификат, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСертификат()
	
	ВыбранныйСертификат      = Неопределено;
	ПредставлениеСертификата = Неопределено;
	МенеджерКриптографии     = Неопределено;
	СертификатКриптографии   = Неопределено;
	Пароль = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкуПоискаСертификата(ДополнительныеПараметры, ТекстОшибки)
	
	ОчиститьСертификат();
	ПоказатьОшибкуПоискаСертификата(ТекстОшибки);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачатьПолучениеСертификата()
	
	ДополнительныеПараметрыМетода = Новый Структура;
	ДополнительныеПараметрыМетода.Вставить("ПредлагатьУстановкуВнешнейКомпоненты", Истина);
	ДополнительныеПараметрыМетода.Вставить("ВыводитьСообщения", Ложь);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПолучитьСертификатыЗавершение", 
		ЭтотОбъект);
		
	Хранилища_Сертификатов = Новый Массив;
		
	Хранилище_Сертификатов = Новый Структура;
	Хранилище_Сертификатов.Вставить("Хранилище", "MY");
	Хранилище_Сертификатов.Вставить("ЭтоЛокальноеХранилище", Истина);
	
	Хранилища_Сертификатов.Добавить(Хранилище_Сертификатов );
	
	Хранилище_Сертификатов = Новый Структура;
	Хранилище_Сертификатов.Вставить("Хранилище", "MY");
	Хранилище_Сертификатов.Вставить("ЭтоЛокальноеХранилище", Ложь);
	
	Хранилища_Сертификатов.Добавить(Хранилище_Сертификатов);
	
	КриптографияЭДКОКлиент.ПолучитьСертификаты(ОписаниеОповещения, Хранилища_Сертификатов, ДополнительныеПараметрыМетода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСертификатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Выполнено Тогда
		
		ЗаполнитьСписокВсехСертификатов(Результат.Сертификаты);
		ОставитьТолькоНужныеСертификаты();
		
		Если НужныеСертификаты.Количество() = 0 Тогда
			ПоказатьОшибкуОтсутствияСертификатов();
			Возврат;
		КонецЕсли;
		
		НайтиОдинПодходящийСертификат();
		ПоказатьСтраницуВводаПароля();
		
	Иначе
		
		ПоказатьОшибкуПоискаСертификата(Результат.ОписаниеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиОдинПодходящийСертификат() Экспорт
	
	Отпечаток = ОтпечатокТекущегоСертификата();
	
	НайденныйСертификат = Неопределено;
	Для Каждого ТекущийСертификат Из НужныеСертификаты Цикл
		
		Если Отпечаток = ТекущийСертификат.Отпечаток Тогда
			НайденныйСертификат = ТекущийСертификат;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НайденныйСертификат = Неопределено И НужныеСертификаты.Количество() = 1 Тогда
		НайденныйСертификат = НужныеСертификаты[0];
	КонецЕсли;
	
	Если НайденныйСертификат <> Неопределено Тогда
		ЗаполнитьСведенияВыбранногоСертификата(НайденныйСертификат);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОтпечатокТекущегоСертификата()
	
	Отпечаток = "";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Организация.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате
		И ЗначениеЗаполнено(Организация.УчетнаяЗаписьОбмена) Тогда
		
		Отпечаток = Организация.УчетнаяЗаписьОбмена.СертификатРуководителя;
		
	КонецЕсли;
	
	Возврат Отпечаток;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьСертификаты_ПослеЗаполненияСведенийВыбранногоСертификата(Результат, ДополнительныеПараметры) Экспорт
	
	ПоказатьСтраницуВводаПароля();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВсехСертификатов(СписокСертификаты)
	
	// заполняем полную таблицу сертификатов из хранилища
	Для Каждого ЭлементСертификат Из СписокСертификаты Цикл
		НовСтр = ВсеСертификаты.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ЭлементСертификат);
	КонецЦикла;
	
	Для Каждого СтрСертификат Из ВсеСертификаты Цикл
		
		СтрСертификат.Поставщик = ЗначениеПоля(СтрСертификат.Поставщик);
		СтрСертификат.СерийныйНомер = ЗначениеПоля(СтрСертификат.СерийныйНомер);
		СтрСертификат.Владелец = ЗначениеПоля(СтрСертификат.Владелец);
		СтрСертификат.Наименование = ЗначениеПоля(СтрСертификат.Наименование);
		СтрСертификат.Отпечаток = нрег(СтрСертификат.Отпечаток);
		
		ПараметрыВладельца = РазложитьСтрокуВладелец(СтрСертификат.ВладелецСтруктура);
		СтрСертификат.ИмяВладельца = ЗначениеПоля(ПараметрыВладельца.Имя);
		СтрСертификат.Организация = ЗначениеПоля(ПараметрыВладельца.Организация);
		СтрСертификат.Должность = ЗначениеПоля(?(ЗначениеЗаполнено(ПараметрыВладельца.Должность) И ПараметрыВладельца.Должность <> "0", ПараметрыВладельца.Должность, ПараметрыВладельца.Подразделение));
		СтрСертификат.EMail = ЗначениеПоля(ПараметрыВладельца.ЭлектроннаяПочта);
		СтрСертификат.ИНН = ЗначениеПоля(ПараметрыВладельца.ИНН);
		СтрСертификат.СНИЛС = ЗначениеПоля(ПараметрыВладельца.СНИЛС);
		
		ПоставщикСтруктура = СтрСертификат.ПоставщикСтруктура;
		Если ПоставщикСтруктура.Свойство("CN") Тогда
			СтрСертификат.Издатель = ПоставщикСтруктура["CN"];
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОставитьТолькоНужныеСертификаты()
	
	Для Каждого ТекущийСертификат Из ВсеСертификаты Цикл
		
		Просрочен = 
			НачалоДня(ТекДата) < НачалоДня(ТекущийСертификат.ДействителенС)
			ИЛИ НачалоДня(ТекДата) > НачалоДня(ТекущийСертификат.ДействителенПо);
			
		НеТоХранилище = ТекущийСертификат.Хранилище.Хранилище <> "MY";
		
		ПропуститьСертификат = Просрочен ИЛИ НеТоХранилище;
			
		Если ПропуститьСертификат Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйСертификат = НужныеСертификаты.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйСертификат, ТекущийСертификат);
		НовыйСертификат.ЭтоЭлектроннаяПодписьВМоделиСервиса = НЕ ТекущийСертификат.Хранилище.ЭтоЛокальноеХранилище;
		
	КонецЦикла;
	
	НужныеСертификаты.Сортировать("ДействителенС, ДействителенПо");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазложитьСтрокуВладелец(Знач ВладелецСтруктура)
	
	СвойстваРезультат = Новый Структура();
	СвойстваРезультат.Вставить("Имя",              "");
	СвойстваРезультат.Вставить("Организация",      "");
	СвойстваРезультат.Вставить("Подразделение",    "");
	СвойстваРезультат.Вставить("ЭлектроннаяПочта", "");
	СвойстваРезультат.Вставить("Должность",        "");
	СвойстваРезультат.Вставить("ИНН",              "");
	СвойстваРезультат.Вставить("СНИЛС",            "");
	
	// ФИО
	Если ВладелецСтруктура.Свойство("SN") И ВладелецСтруктура.Свойство("GN") Тогда
		ФИО = ВладелецСтруктура["SN"] + " " + ВладелецСтруктура["GN"];
	ИначеЕсли ВладелецСтруктура.Свойство("CN") Тогда
		// У ПФРовских сертификатов поля с ФИО не заполнены.
		ФИО = ВладелецСтруктура["CN"];
	Иначе
		ФИО = "";
	КонецЕсли;
	
	СвойстваРезультат.Вставить("Имя", ФИО);

	// Организация
	Если ВладелецСтруктура.Свойство("O") Тогда
		Организация = ВладелецСтруктура["O"];
	Иначе
		Организация = "";
	КонецЕсли;
	
	СвойстваРезультат.Вставить("Организация", Организация);
	
	// Подразделение
	Если ВладелецСтруктура.Свойство("OU") Тогда
		Подразделение = ВладелецСтруктура["OU"];
	Иначе
		Подразделение = "";
	КонецЕсли;
	
	СвойстваРезультат.Вставить("Подразделение", Подразделение);
	
	// ЭлектроннаяПочта
	Если ВладелецСтруктура.Свойство("E") Тогда
		ЭлектроннаяПочта = ВладелецСтруктура["E"];
	Иначе
		ЭлектроннаяПочта = "";
	КонецЕсли;
	
	СвойстваРезультат.Вставить("ЭлектроннаяПочта", ЭлектроннаяПочта);	

	// Должность
	Если ВладелецСтруктура.Свойство("T") Тогда
		Должность = ВладелецСтруктура["T"];
	Иначе
		Должность = "";
	КонецЕсли;
	
	СвойстваРезультат.Вставить("Должность", Должность);
	
	ИНН = ДокументооборотСКОКлиентСервер.ИННИзСертификата(ВладелецСтруктура, Ложь);
	СвойстваРезультат.Вставить("ИНН", ИНН);
	
	// СНИЛС
	Если ВладелецСтруктура.Свойство("SNILS") Тогда
		СНИЛС = ВладелецСтруктура["SNILS"];
	Иначе
		СНИЛС = "";
	КонецЕсли;
	
	СвойстваРезультат.Вставить("СНИЛС", СНИЛС);

	Возврат СвойстваРезультат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеПоля(СтрЗначениеПоля)
	
	Возврат ?(НЕ ЗначениеЗаполнено(СтрЗначениеПоля) ИЛИ СокрЛП(СтрЗначениеПоля) = "0", "", СтрЗначениеПоля);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСведенияВыбранногоСертификата(Сертификат)
	
	ВыбранныйСертификат = Новый Структура();
	ВыбранныйСертификат.Вставить("Представление",  ДокументооборотСКОКлиентСервер.ПредставлениеСертификата(Сертификат));
	ВыбранныйСертификат.Вставить("Отпечаток",      Сертификат.Отпечаток);
	ВыбранныйСертификат.Вставить("ЭтоЭлектроннаяПодписьВМоделиСервиса", Сертификат.ЭтоЭлектроннаяПодписьВМоделиСервиса);
	// Определим позже
	ВыбранныйСертификат.Вставить("ДвДанные",       Неопределено);
	ВыбранныйСертификат.Вставить("SubjectKeyId",   "");
	// Определим позже. Для подписания методами платформы
	ВыбранныйСертификат.Вставить("СерийныйНомер",  Сертификат.СерийныйНомер);
	ВыбранныйСертификат.Вставить("Поставщик",      Сертификат.Поставщик);
	
	Если Сертификат.Свойство("ВладелецСтруктура") Тогда
		
		ВладелецСтруктура = Сертификат.ВладелецСтруктура;
		
		Если ВладелецСтруктура.Свойство("SN")
			И ВладелецСтруктура.Свойство("GN") Тогда
			
			ВыбранныйСертификат.Вставить("Фамилия", ВладелецСтруктура.SN);
			ВыбранныйСертификат.Вставить("ИмяОтчество", ВладелецСтруктура.GN);
		КонецЕсли;
		
	КонецЕсли;
	
	ПредставлениеСертификата = ВыбранныйСертификат.Представление;
	
	Элементы.Пароль.Видимость = НЕ Сертификат.ЭтоЭлектроннаяПодписьВМоделиСервиса;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьСведенияВыбранногоСертификата(ВыполяемоеОповещение)
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ВыполяемоеОповещение", ВыполяемоеОповещение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СертификатНачалоВыбора_ПослеПолученияДвДанныхВыбранногоСертификата", 
		ЭтотОбъект, 
		ДопПараметры);
	
	КриптографияЭДКОКлиент.ЭкспортироватьСертификатВBase64(ОписаниеОповещения, ВыбранныйСертификат, Ложь);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыВыбораСертификата()
	
	ТаблицаНужныеСертификаты = РеквизитФормыВЗначение("НужныеСертификаты");
	Адрес = ПоместитьВоВременноеХранилище(ТаблицаНужныеСертификаты, Новый УникальныйИдентификатор);
	
	ДопПараметры = Новый Структура();
	Если ВыбранныйСертификат = Неопределено Тогда
		ДопПараметры.Вставить("Отпечаток", "");
	Иначе	
		ДопПараметры.Вставить("Отпечаток", ВыбранныйСертификат.Отпечаток);
	КонецЕсли; 
	
	ДопПараметры.Вставить("Адрес", Адрес);

	Возврат ДопПараметры;
		
КонецФункции

&НаКлиенте
Процедура СертификатНачалоВыбора_ПослеВыбораСертификата(
		Результат, 
		ВходящийКонтекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСведенияВыбранногоСертификата(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатНачалоВыбора_ПослеПолученияДвДанныхВыбранногоСертификата(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено 
		И Результат.Выполнено 
		И ВыбранныйСертификат <> Неопределено Тогда
		
		ВыбранныйСертификат.ДвДанные = Base64Значение(Результат.СтрокаBase64);
		
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Не удалось получить данные сертификата.'");
		ОбработатьОшибкуПоискаСертификата(ДополнительныеПараметры, ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	Если ВыбранныйСертификат.ЭтоЭлектроннаяПодписьВМоделиСервиса Тогда
		
		Если ДополнительныеПараметры.ВыполяемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ВыполяемоеОповещение);
		КонецЕсли;
		
	Иначе
	
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"СертификатНачалоВыбора_ПослеПолученияМенеджераКриптографии", 
			ЭтотОбъект,
			ДополнительныеПараметры);
			
		ВыбранныйСертификат.Вставить("Сертификат", ВыбранныйСертификат.ДвДанные);
		КонтекстЭДОКлиент.ПолучитьМенеджерИСертификатКриптографии(ВыбранныйСертификат, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатНачалоВыбора_ПослеПолученияМенеджераКриптографии(Результат , ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат.Выполнено = Истина И НЕ Результат.МенеджерКриптографии = Неопределено Тогда
		
		МенеджерКриптографии = Результат.МенеджерКриптографии;
		СертификатКриптографии = Результат.СертификатКриптографии;
	
	Иначе
		
		Если Результат.Выполнено = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Вы отказались от установки расширения для работы с криптографией, которое требуется для подписания файлов пакета.'");
		Иначе
			ТекстОшибки = НСтр("ru = 'Не удалось установить расширение для работы с криптографией, которое требуется для подписания файлов пакета электронной подписью.'");
		КонецЕсли;
		ОбработатьОшибкуПоискаСертификата(ДополнительныеПараметры, ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ВыполяемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ВыполяемоеОповещение);
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти

#Область ИзменениеОформленияФормы

&НаСервере
Процедура ПоказатьСтраницуВводаПароля()
	
	Заголовок = НСтр("ru = 'Выбор сертификата'");
	АктивизироватьСтраницу(Элементы.СертификатИПароль);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСтраницуФормированияПакета()
	
	Заголовок = НСтр("ru = 'Подождите, пожалуйста...'");
	Элементы.ТекстПриОжидании.Заголовок = НСтр("ru = 'Выполняется формирование пакета...'");
	
	АктивизироватьСтраницу(Элементы.ДлительноеДействие);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСтраницуПоискаСертификатов()
	
	Заголовок = НСтр("ru = 'Подождите, пожалуйста...'");
	Элементы.ТекстПриОжидании.Заголовок = НСтр("ru = 'Выполняется поиск сертификатов...'");
	
	АктивизироватьСтраницу(Элементы.ДлительноеДействие);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибку(ТекстОшибки, ОшибкаСервера = Ложь)
	
	Элементы.КартинкаСостояние.Картинка = БиблиотекаКартинок.ОшибкаОтправки;
	
	Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = Истина;
	
	Элементы.ТекстОшибки.Заголовок = ТекстОшибки;
	
	Элементы.РекомендацияКОшибке.Заголовок = НСтр("ru = 'Попробуйте устранить проблему и повторите действие.'");
	
	АктивизироватьСтраницу(Элементы.РезультатФормирования);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкуПоискаСертификата(ТекстОшибки)
	
	Элементы.КартинкаСостояние.Картинка = БиблиотекаКартинок.ОшибкаОтправки;
	
	Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = Истина;
	
	Заголовок = НСтр("ru = 'Поиск сертификатов'");
	Элементы.ТекстОшибки.Заголовок = ТекстОшибки;
	Элементы.РекомендацияКОшибке.Заголовок = НСтр("ru = 'Убедитесь, что в системе установлен криптопровайдер и есть сертификаты для шифрования'");
	
	АктивизироватьСтраницу(Элементы.РезультатФормирования);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкуОтсутствияСертификатов()
	
	Элементы.КартинкаСостояние.Картинка = БиблиотекаКартинок.ОшибкаОтправки;
	
	Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = Истина;
	
	Заголовок = НСтр("ru = 'Поиск сертификатов'");
	Элементы.ТекстОшибки.Заголовок = НСтр("ru = 'Не найдено ни одного действующего сертификата'");
	Элементы.РекомендацияКОшибке.Заголовок = НСтр("ru = 'Попробуйте устранить проблему и повторите действие.'");
	
	АктивизироватьСтраницу(Элементы.РезультатФормирования);
	
КонецПроцедуры

&НаСервере
Процедура АктивизироватьСтраницу(ТекущаяСтраница)
	
	ДокументооборотСКОКлиентСервер.АктивизироватьСтраницу(Элементы.Этапы, ТекущаяСтраница);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_НачатьПолучениеКонтекста()
	
	// инициализируем контекст ЭДО
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДанные(Параметры)
	
	ОписаниеФайлов = Новый ФиксированныйМассив(Параметры.ОписаниеФайлов);
	
	ЭлПочтаЗаявителя = Параметры.ЭлПочтаЗаявителя;
	Заявление   = Параметры.Заявление;
	КодНО       = Параметры.КодНО;
	СпособПредоставленияОтвета = Параметры.СпособПредоставленияОтвета;
	Организация = Заявление.Организация;
	ЭтоЮрЛицо   = РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация);
	
	Параметры.Свойство("ИННЗаявителя", ИНН_ФЛ);
	
	СведенияИзФормРегистрации = УведомлениеОСпецрежимахНалогообложения.СведенияИзФормРегистрации(Заявление);
	СведенияИзЗаявления = Новый ФиксированнаяСтруктура(СведенияИзФормРегистрации);
	
	ТекДата = ТекущаяДатаСеанса();
	
	ИнициализироватьКодыВидовДокументов();
	ИнициализироватьСпособыПредоставленияОтвета();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСпособыПредоставленияОтвета()
	
	Перечисление = Перечисления.СпособыПолученияОтветаНаЭлГосРегистрацию;
	
	Способы = Новый Соответствие;
	Способы.Вставить(Перечисление.ВыдатьДокументыЛично, "1");
	Способы.Вставить(Перечисление.ВыдатьПредставителюПоДоверенности, "4");
	Способы.Вставить(Перечисление.ВыслатьДокументыПоПочте, "2");
	Способы.Вставить(Перечисление.НеПредоставлять, "0");
	
	СпособыПредоставленияОтвета = Новый ФиксированноеСоответствие(Способы);
	
КонецПроцедуры

&НаСервере
Функция КолонкиДляПреобразованияВБулево()

	КолонкиБулево = Новый Массив;
	КолонкиБулево.Добавить("ЭтоЗаявление");
	
	Возврат КолонкиБулево;
		
КонецФункции

&НаСервере
Функция ВидыДокументовДляЭлГосРегистрации()
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Макет = КонтекстЭДОСервер.ПолучитьМакет("ВидыДокументовДляЭлГосРегистрации");
	КолонкиБулево = КолонкиДляПреобразованияВБулево();
	
	Виды = КонтекстЭДОСервер.ДанныеМакетаЧерезПостроительЗапроса(
		Макет, 
		КолонкиБулево);
		
	Виды.Колонки.Добавить("Значение");
	
	Для каждого Вид Из Виды Цикл
		Вид.Значение = Перечисления.ВидыДокументовДляЭлГосРегистрации[Вид.Имя];
	КонецЦикла; 
	
	Возврат Виды;
		
КонецФункции
	
&НаСервере
Процедура ИнициализироватьКодыВидовДокументов()
	
	Виды = ВидыДокументовДляЭлГосРегистрации();
	
	Коды = Новый Соответствие;
	Для каждого Вид Из Виды Цикл
		Коды.Вставить(Вид.Значение, Вид.Код);
	КонецЦикла; 
	
	КодыВидовДокументов = Новый ФиксированноеСоответствие(Коды);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВернутьРезультат()
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Выполнено", Ложь);
	ДополнительныеПараметры.Вставить("Адрес",     Неопределено);
	ДополнительныеПараметры.Вставить("ИмяПакета", Неопределено);
	
	Закрыть(ДополнительныеПараметры);

	РезультатВернули = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	ПодключитьОбработчикОжидания("Подключаемый_НачатьПолучениеСертификата", 1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Пакет

#Область Общие

&НаКлиенте
Процедура Подключаемый_СформироватьПакет()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодписатьДанные_ПослеПолученияСвойствСертификата", 
		ЭтотОбъект);
		
	РасчитатьСведенияВыбранногоСертификата(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПостфиксПодписи()

	Возврат ".zayav_1.p7s";

КонецФункции  

&НаСервере
Функция ПостфиксПоЛатински()
	
	Если ЭтоЮрЛицо Тогда 
		Возврат "UL";
	Иначе
		Возврат "IP";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПостфиксПоРусски()
	
	Если ЭтоЮрЛицо Тогда 
		Возврат "ЮЛ";
	Иначе
		Возврат "ИП";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УникальныйИдентификаторБезТире()
	
	Возврат СтрЗаменить(Новый УникальныйИдентификатор(), "-", "");
	
КонецФункции

&НаСервере
Процедура ДополнитьОписаниеФайлов()

	Для каждого ОписаниеФайла Из ОписаниеФайлов Цикл	
		
		ЭтоЗаявление = ЭтоЗаявление(ОписаниеФайла);
		ИдДок = УникальныйИдентификаторБезТире();
		
		Если ЭтоЗаявление Тогда
			ИсхИмяФайла = "Zayav" + ПостфиксПоЛатински() + "_" + ИдДок + ".tif";
		Иначе
			ИсхИмяФайла = "PrilozhDokum_" + ИдДок + ".tif";
		КонецЕсли;
		
		ОписаниеФайла.Вставить("ИдДок", ИдДок);
		ОписаниеФайла.Вставить("ИсхИмяФайла", ИсхИмяФайла);
		ОписаниеФайла.Вставить("ИмяФайла", ИсхИмяФайла);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеДляФормированияПакета()
	
	ОписаниеФайлов = ОбщегоНазначения.СкопироватьРекурсивно(ОписаниеФайловИсходное);
	ДополнитьОписаниеФайлов();
	ПодготовитьОпись();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПакетПослеПодписания()
	
	ПодготовитьpackageDescription();
	
	РезультатВернули = Истина;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Выполнено", Истина);
	ДополнительныеПараметры.Вставить("Адрес", АдресПакета());
	ДополнительныеПараметры.Вставить("ИмяПакета", ИмяПакета());

	Закрыть(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ИНН()
	
	Если ЗначениеЗаполнено(ИНН_ФЛ) Тогда
		ИНН = ИНН_ФЛ;
	Иначе
		ИНН = "000000000000";
	КонецЕсли;
	
	Возврат ИНН;
	
КонецФункции

&НаСервере
Функция ИмяПакета()
	
	Подстроки = Новый Массив;
	Подстроки.Добавить("FNS");
	Подстроки.Добавить(ИНН()); // идентификатор отправителя
	Подстроки.Добавить(КодНО); // идентификатор получателя
	Подстроки.Добавить(Строка(Новый УникальныйИдентификатор())); // UUID
	Подстроки.Добавить(ПостфиксПоРусски()); // код типа документооборота
	Подстроки.Добавить("01"); // код типа транзакции
	Подстроки.Добавить("01"); // код типа документа
	
	Имя = СтрСоединить(Подстроки, "_");
	Имя = Имя + ".zip";
	
	Возврат Имя;

КонецФункции

&НаСервере
Функция АдресПакета()
	
	ПолноеИмяФайлаПакета = ПолучитьИмяВременногоФайла();
	
	// создаем архив
	ЗаписьZIP = Новый ЗаписьZipФайла(ПолноеИмяФайлаПакета);

	Для каждого ОписаниеФайла Из ОписаниеФайлов Цикл
		
		// Файл
		ИмяФайла = КаталогВременныхФайлов() + ОписаниеФайла.ИмяФайла;
		ДвДанныеФайла = ПолучитьИзВременногоХранилища(ОписаниеФайла.АдресИтоговогоФайла);
		ДвДанныеФайла.Записать(ИмяФайла);
		ЗаписьZIP.Добавить(ИмяФайла);
		
		// Подпись
		Если ОписаниеФайла.Свойство("ИмяФайлаПодписи") Тогда
			ИмяФайлаПодписи = КаталогВременныхФайлов() + ОписаниеФайла.ИмяФайлаПодписи;
			ДвДанныеПодписи = ПолучитьИзВременногоХранилища(ОписаниеФайла.АдресПодписи);
			ДвДанныеПодписи.Записать(ИмяФайлаПодписи);
			ЗаписьZIP.Добавить(ИмяФайлаПодписи);
		КонецЕсли;
		
	КонецЦикла;
	ЗаписьZIP.Записать();
	
	ДвДанные = Новый ДвоичныеДанные(ПолноеИмяФайлаПакета);
	Адрес = ПоместитьВоВременноеХранилище(ДвДанные, Новый УникальныйИдентификатор);
	
	Возврат Адрес;

КонецФункции

&НаСервере
Процедура ЗаписатьФИО(ОбъектЗапись, Заявитель)

	ОбъектЗапись.ЗаписатьАтрибут("Фамилия", СведенияЗаявителя(Заявитель, "Фамилия"));
	ОбъектЗапись.ЗаписатьАтрибут("Имя", СведенияЗаявителя(Заявитель, "Имя"));
	
	Если ЗначениеЗаполнено(СведенияЗаявителя(Заявитель, "Отчество")) Тогда
		ОбъектЗапись.ЗаписатьАтрибут("Отчество", СведенияЗаявителя(Заявитель, "Отчество"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СведенияИзЗаявления(Свойство)

	Возврат ЗначениеИзСтруктуры(СведенияИзЗаявления, Свойство);

КонецФункции

&НаСервере
Функция СведенияЗаявителя(Заявитель, Свойство)

	Возврат ЗначениеИзСтруктуры(Заявитель, Свойство);

КонецФункции

&НаСервере
Функция ЗначениеИзСтруктуры(Структура, Свойство)

	Если Структура.Свойство(Свойство) Тогда
		Значение = Структура[Свойство];
		Если Значение = Неопределено Тогда
			Возврат "";
		Иначе
			Возврат Структура[Свойство];
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

&НаСервере
Функция ЭтоЗаявление(ОписаниеФайла) 
	
	ВидДокумента = ЗначениеИзСтруктуры(ОписаниеФайла, "ВидДокумента");
	Виды = ВидыДокументовДляЭлГосРегистрации();
	
	Для каждого Вид Из Виды Цикл
		Если Вид.Значение = ВидДокумента Тогда
			Возврат Вид.ЭтоЗаявление;
		КонецЕсли;
	КонецЦикла; 

	Возврат Ложь;

КонецФункции

#КонецОбласти

#Область Опись

&НаСервере
Процедура Опись_ЗаписатьЭлементПодпись(ОбъектЗапись, ОписаниеФайла)
	
	ОбъектЗапись.ЗаписатьНачалоЭлемента("Подпись");
		
	ОбъектЗапись.ЗаписатьАтрибут("ИмяФайла", ОписаниеФайла.ИмяФайла + ПостфиксПодписи());
	ОбъектЗапись.ЗаписатьАтрибут("Роль", "заявитель");
	
	ОбъектЗапись.ЗаписатьНачалоЭлемента("ФИО");
	
	Если ВыбранныйСертификат.Свойство("Фамилия") Тогда
		
		ИмяОтчество = ВыбранныйСертификат.ИмяОтчество;
		ИмяОтчествоМассив = СтрРазделить(ИмяОтчество, " ");
		
		ОбъектЗапись.ЗаписатьАтрибут("Фамилия", ВыбранныйСертификат.Фамилия);
		ОбъектЗапись.ЗаписатьАтрибут("Имя", ИмяОтчествоМассив[0]);
		Если ИмяОтчествоМассив.Количество() > 1 Тогда
			ОбъектЗапись.ЗаписатьАтрибут("Отчество", ИмяОтчествоМассив[1]);
		КонецЕсли;
		
	ИначеЕсли СведенияИзЗаявления("Заявители").Количество() > 0 Тогда
			
		Заявитель = СведенияИзЗаявления("Заявители")[0];
		ЗаписатьФИО(ОбъектЗапись, Заявитель);

	КонецЕсли;
	
	ОбъектЗапись.ЗаписатьКонецЭлемента(); // ФИО
	
	ОбъектЗапись.ЗаписатьКонецЭлемента(); // Подпись
	
КонецПроцедуры

&НаСервере
Процедура Опись_ЗаписатьЭлементДокумент(ОбъектЗапись, ОписаниеФайла)
	
	КодСВДРЕГ = КодыВидовДокументов.Получить(ОписаниеФайла.ВидДокумента);
	
	ОбъектЗапись.ЗаписатьНачалоЭлемента("Документ");
	
	ОбъектЗапись.ЗаписатьАтрибут("КодСВДРЕГ", КодСВДРЕГ);
	ОбъектЗапись.ЗаписатьАтрибут("типСодержимого", "tiff");
	ОбъектЗапись.ЗаписатьАтрибут("ИдДок", ОписаниеФайла.ИдДок);
	ОбъектЗапись.ЗаписатьАтрибут("ИсхИмяФайла", ОписаниеФайла.ИмяФайла);
	ОбъектЗапись.ЗаписатьАтрибут("ИмяФайла", ОписаниеФайла.ИмяФайла);
	
	Опись_ЗаписатьЭлементПодпись(ОбъектЗапись, ОписаниеФайла);
	
	ОбъектЗапись.ЗаписатьКонецЭлемента(); // Документ
	
КонецПроцедуры

&НаСервере
Процедура Опись_ЗаписатьЭлементСвЗаявит(ОбъектЗапись)
	
	Если ЭтоЮрЛицо Тогда
		Для каждого Заявитель Из СведенияИзЗаявления("Заявители") Цикл
			ОбъектЗапись.ЗаписатьНачалоЭлемента("СвЗаявит");
			Если ЗначениеЗаполнено(ЭлПочтаЗаявителя) Тогда
				ОбъектЗапись.ЗаписатьАтрибут("E-mail", ЭлПочтаЗаявителя);
			КонецЕсли;
			ОбъектЗапись.ЗаписатьНачалоЭлемента("ФИО");
			ЗаписатьФИО(ОбъектЗапись, Заявитель);
			ОбъектЗапись.ЗаписатьКонецЭлемента();
			ОбъектЗапись.ЗаписатьКонецЭлемента(); // СвЗаявит
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Опись_ЗаписатьЭлементСвЮЛ(ОбъектЗапись)
	
	ОбъектЗапись.ЗаписатьНачалоЭлемента("СвЮЛ");
	
	НаимЮЛПолн = СведенияИзЗаявления("НаимЮЛПолн");
	Если ЗначениеЗаполнено(НаимЮЛПолн) Тогда
		ОбъектЗапись.ЗаписатьАтрибут("НаимЮЛПолн", НаимЮЛПолн);
	КонецЕсли;
	
	ОГРН = СведенияИзЗаявления("ОГРН");
	Если ЗначениеЗаполнено(ОГРН) Тогда
		ОбъектЗапись.ЗаписатьАтрибут("ОГРН", ОГРН);
	КонецЕсли;
	
	ОбъектЗапись.ЗаписатьКонецЭлемента(); // СвЮЛ
	
КонецПроцедуры

&НаСервере
Процедура Опись_ЗаписатьЭлементСвИП(ОбъектЗапись)
	
	ОбъектЗапись.ЗаписатьНачалоЭлемента("СвИП");
	
	Если ЗначениеЗаполнено(СведенияИзЗаявления("ИНН")) Тогда
		ОбъектЗапись.ЗаписатьАтрибут("ИННФЛ", СведенияИзЗаявления("ИНН"));
	КонецЕсли;
	Если ЗначениеЗаполнено(СведенияИзЗаявления("ОГРНИП")) Тогда
		ОбъектЗапись.ЗаписатьАтрибут("ОГРНИП", СведенияИзЗаявления("ОГРНИП"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлПочтаЗаявителя) Тогда
		ОбъектЗапись.ЗаписатьАтрибут("E-mail", ЭлПочтаЗаявителя);
	КонецЕсли;
	ОбъектЗапись.ЗаписатьНачалоЭлемента("ФИО");
	ОбъектЗапись.ЗаписатьАтрибут("Фамилия", СведенияИзЗаявления("Фамилия"));
	ОбъектЗапись.ЗаписатьАтрибут("Имя", СведенияИзЗаявления("Имя"));
	
	Если ЗначениеЗаполнено(СведенияИзЗаявления("Отчество")) Тогда
		ОбъектЗапись.ЗаписатьАтрибут("Отчество", СведенияИзЗаявления("Отчество"));
	КонецЕсли;
	
	ОбъектЗапись.ЗаписатьКонецЭлемента(); // ФИО
	
	ОбъектЗапись.ЗаписатьКонецЭлемента(); // СвИП
	
КонецПроцедуры

&НаСервере
Процедура Опись_ЗаписатьЭлементФайл(ОбъектЗапись)
	
	Шаблон = "OP_REG%1_%2_%3";
	ИдФайл = СтрШаблон(
		Шаблон,
		ПостфиксПоЛатински(),
		Формат(ТекДата, "ДФ=yyyyMMdd"),
		Строка(Новый УникальныйИдентификатор));
		
	ИдФайл = ВРег(ИдФайл);
	
	ОбъектЗапись.ЗаписатьНачалоЭлемента("Файл");
	ОбъектЗапись.ЗаписатьАтрибут("ИдФайл",   ИдФайл);
	
	Если ЭтоЮрЛицо Тогда
		ОбъектЗапись.ЗаписатьАтрибут("ВерсФорм", "9.02");
	Иначе
		ОбъектЗапись.ЗаписатьАтрибут("ВерсФорм", "9.03");
	КонецЕсли;
	
	ОбъектЗапись.ЗаписатьАтрибут("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ОбъектЗапись.ЗаписатьАтрибут("КодСФРД",  СведенияИзЗаявления("КодЗаявления"));
	ОбъектЗапись.ЗаписатьАтрибут("КодНО",    КодНО);
	
	ПрВысБум = СпособыПредоставленияОтвета.Получить(СпособПредоставленияОтвета); 
	Если ПрВысБум <> "0" И ЗначениеЗаполнено(ПрВысБум) Тогда
		ОбъектЗапись.ЗаписатьАтрибут("ПрВысБум", ПрВысБум);
	КонецЕсли;
	
	Если ЭтоЮрЛицо Тогда
		Опись_ЗаписатьЭлементСвЮЛ(ОбъектЗапись);
	Иначе
		Опись_ЗаписатьЭлементСвИП(ОбъектЗапись);
	КонецЕсли;
	
	Опись_ЗаписатьЭлементСвЗаявит(ОбъектЗапись);
	
	Для каждого ОписаниеФайла Из ОписаниеФайлов Цикл
		Опись_ЗаписатьЭлементДокумент(ОбъектЗапись, ОписаниеФайла);
	КонецЦикла;
	
	ОбъектЗапись.ЗаписатьКонецЭлемента(); // Файл
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьОпись()
	
	УникальныйИдентификаторОписи = УникальныйИдентификаторБезТире();
	
	КороткоеИмяБезРасширения = "OpisDokum" + ПостфиксПоЛатински() + "_" + УникальныйИдентификаторОписи;
	КороткоеИмяФайла = КороткоеИмяБезРасширения + ".xml";
	ПолноеИмяФайла = КаталогВременныхФайлов() + КороткоеИмяФайла;

	ОбъектЗапись = Новый ЗаписьXML;
	ОбъектЗапись.ОткрытьФайл(ПолноеИмяФайла, "windows-1251");
	ОбъектЗапись.ЗаписатьОбъявлениеXML();

	Опись_ЗаписатьЭлементФайл(ОбъектЗапись);
	
	ОбъектЗапись.Закрыть();
	
	ДвДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
	АдресФайла = ПоместитьВоВременноеХранилище(ДвДанные, УникальныйИдентификатор);
	
	Опись_ДобавитьВОписание(АдресФайла, КороткоеИмяФайла, УникальныйИдентификаторОписи);
	
КонецПроцедуры

&НаСервере
Процедура Опись_ДобавитьВОписание(АдресФайла, КороткоеИмяФайла, УникальныйИдентификатор)
	
	АдресаФайлов = Новый Массив;
	АдресаФайлов.Добавить(АдресФайла);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ЭтоОпись",     Истина);
	ДополнительныеПараметры.Вставить("ИмяФайла",     КороткоеИмяФайла);
	ДополнительныеПараметры.Вставить("ИсхИмяФайла",  КороткоеИмяФайла);
	ДополнительныеПараметры.Вставить("АдресаФайлов", АдресаФайлов);
	ДополнительныеПараметры.Вставить("АдресИтоговогоФайла", АдресФайла);
	ДополнительныеПараметры.Вставить("ИдДок", УникальныйИдентификатор);
	
	ОписаниеФайловМассив = Новый Массив(ОписаниеФайлов);
	ОписаниеФайловМассив.Добавить(ДополнительныеПараметры);
	ОписаниеФайлов = Новый ФиксированныйМассив(ОписаниеФайловМассив);
	
КонецПроцедуры

#КонецОбласти

#Область packageDescription

&НаСервере
Процедура packageDescription_отправитель(ОбъектЗапись)
	
	ОбъектЗапись.ЗаписатьНачалоЭлемента("отправитель");
	ОбъектЗапись.ЗаписатьАтрибут("идентификаторСубъекта", ИНН());
	ОбъектЗапись.ЗаписатьАтрибут("типСубъекта", "заявитель");
	ОбъектЗапись.ЗаписатьКонецЭлемента(); // отправитель

КонецПроцедуры

&НаСервере
Процедура packageDescription_получатель(ОбъектЗапись)
	
	ОбъектЗапись.ЗаписатьНачалоЭлемента("получатель");
	ОбъектЗапись.ЗаписатьАтрибут("идентификаторСубъекта", КодНО);
	ОбъектЗапись.ЗаписатьАтрибут("типСубъекта", "налоговыйОрган");
	ОбъектЗапись.ЗаписатьКонецЭлемента(); // получатель

КонецПроцедуры

&НаСервере
Процедура packageDescription_документ(ОбъектЗапись, ОписаниеФайла)
	
	ЭтоЗаявление = ЭтоЗаявление(ОписаниеФайла);
	ЭтоОпись = ОписаниеФайла.Свойство("ЭтоОпись") И ОписаниеФайла.ЭтоОпись;
	
	ОбъектЗапись.ЗаписатьНачалоЭлемента("документ");
	
	Если ЭтоЗаявление Тогда
		кодТипаДокумента = "01";
		типДокумента = "Заявление" + ПостфиксПоРусски();
		типСодержимого = "tiff";
	ИначеЕсли ЭтоОпись Тогда
		кодТипаДокумента = "07";
		типДокумента = "ОписьДокументов" + ПостфиксПоРусски();
		типСодержимого = "xml";
	Иначе
		кодТипаДокумента = "03";
		типДокумента = "ПриложенныйДокумент";
		типСодержимого = "tiff";
	КонецЕсли;
	
	ОбъектЗапись.ЗаписатьАтрибут("кодТипаДокумента", кодТипаДокумента);
	ОбъектЗапись.ЗаписатьАтрибут("типДокумента", типДокумента);
	ОбъектЗапись.ЗаписатьАтрибут("типСодержимого", типСодержимого);
	ОбъектЗапись.ЗаписатьАтрибут("сжат", XMLСтрока(Ложь));
	ОбъектЗапись.ЗаписатьАтрибут("зашифрован", XMLСтрока(Ложь));
	ОбъектЗапись.ЗаписатьАтрибут("идентификаторДокумента", ОписаниеФайла.ИдДок);
	ОбъектЗапись.ЗаписатьАтрибут("исходноеИмяФайла", ОписаниеФайла.ИсхИмяФайла);
	
	ОбъектЗапись.ЗаписатьНачалоЭлемента("содержимое");
	ОбъектЗапись.ЗаписатьАтрибут("имяФайла", ОписаниеФайла.ИмяФайла);
	ОбъектЗапись.ЗаписатьКонецЭлемента(); // содержимое
	
	ОбъектЗапись.ЗаписатьНачалоЭлемента("подпись");
	ОбъектЗапись.ЗаписатьАтрибут("имяФайла", ОписаниеФайла.ИмяФайла + ПостфиксПодписи());
	ОбъектЗапись.ЗаписатьАтрибут("роль", "заявитель");
	ОбъектЗапись.ЗаписатьКонецЭлемента(); // подпись
	
	ОбъектЗапись.ЗаписатьКонецЭлемента(); // документ

КонецПроцедуры

&НаСервере
Процедура packageDescription_ТрансИнф(ОбъектЗапись)
	
	ОбъектЗапись.ЗаписатьНачалоЭлемента("ТрансИнф");
	ОбъектЗапись.ЗаписатьАтрибут("версияФормата", "ФНС:1.0");
	ОбъектЗапись.ЗаписатьАтрибут("кодТипаДокументооборота", ПостфиксПоРусски());
	ОбъектЗапись.ЗаписатьАтрибут("типДокументооборота", "Регистрация" + ПостфиксПоРусски());
	ОбъектЗапись.ЗаписатьАтрибут("кодТипаТранзакции", "01");
	ОбъектЗапись.ЗаписатьАтрибут("типТранзакции", "ДокумРегистрация" + ПостфиксПоРусски());
	ОбъектЗапись.ЗаписатьАтрибут("идентификаторДокументооборота", УникальныйИдентификаторБезТире());
	ОбъектЗапись.ЗаписатьАтрибут("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	packageDescription_отправитель(ОбъектЗапись);
	packageDescription_получатель(ОбъектЗапись);
	
	Для каждого ОписаниеФайла Из ОписаниеФайлов Цикл
		packageDescription_документ(ОбъектЗапись, ОписаниеФайла);
	КонецЦикла;

	ОбъектЗапись.ЗаписатьКонецЭлемента(); // ТрансИнф
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьpackageDescription()
	
	КороткоеИмяФайла = "packageDescription.xml";
	ПолноеИмяФайла = КаталогВременныхФайлов() + КороткоеИмяФайла;
	
	ОбъектЗапись = Новый ЗаписьXML;
	ОбъектЗапись.ОткрытьФайл(ПолноеИмяФайла, "windows-1251");
	ОбъектЗапись.ЗаписатьОбъявлениеXML();
	
	packageDescription_ТрансИнф(ОбъектЗапись);
	
	ОбъектЗапись.Закрыть();
	
	ДвДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
	АдресФайла = ПоместитьВоВременноеХранилище(ДвДанные, УникальныйИдентификатор);
	
	packageDescription_ДобавитьВОписание(АдресФайла, КороткоеИмяФайла);

КонецПроцедуры

&НаСервере
Процедура packageDescription_ДобавитьВОписание(АдресФайла, КороткоеИмяФайла)
	
	АдресаФайлов = Новый Массив;
	АдресаФайлов.Добавить(АдресФайла);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ЭтоpackageDescription",     Истина);
	ДополнительныеПараметры.Вставить("ИмяФайла",     КороткоеИмяФайла);
	ДополнительныеПараметры.Вставить("ИсхИмяФайла",  КороткоеИмяФайла);
	ДополнительныеПараметры.Вставить("АдресаФайлов", АдресаФайлов);
	ДополнительныеПараметры.Вставить("АдресИтоговогоФайла", АдресФайла);
	
	ОписаниеФайловМассив = Новый Массив(ОписаниеФайлов);
	ОписаниеФайловМассив.Добавить(ДополнительныеПараметры);
	ОписаниеФайлов = Новый ФиксированныйМассив(ОписаниеФайловМассив);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти