#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Перем СведенияОДокументе;
	
	Обработки.ПодборПеремещение.ПроверитьЗаполнениеПараметров(Параметры, Отказ);
	
	ЗаполнитьДанныеОбъекта();
	ЗаполнитьСведенияОДокументе(СведенияОДокументе);
	
	ПодключитьПолнотекстовыйПоискПриОткрытииПодбора();
	УстановитьПараметрыДинамическихСписков();
	
	// Избавимся от мерцания списка Складские остатки
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СписокСкладскиеОстатки.Отбор, "Номенклатура", ВидСравненияКомпоновкиДанных.Равно, Справочники.Номенклатура.ПустаяСсылка());
	
	КешНастройкиПодбора = Новый Структура;
	КешНастройкиПодбора.Вставить("ВыводитьСоветВернутьсяКНоменклатуре", УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ВыводитьСоветВернутьсяКНоменклатуре"));
	КешНастройкиПодбора.Вставить("ЗапрашиватьКоличество", УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ЗапрашиватьКоличество"));
	КешНастройкиПодбора.Вставить("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
	КешНастройкиПодбора.Вставить("СведенияОДокументе", СведенияОДокументе);
	КешНастройкиПодбора.Вставить("ПоискВыполненПриОкончанииРедактирования", Ложь);
	КешНастройкиПодбора.Вставить("ИнициаторПереходаКХарактеристикам", Неопределено);
	
	ЗначениеНастройкиПользователя = КатегорииНоменклатурыСервер.ПолучитьНастройкуВидОтбораНоменклатуры();
	ЭтоВидОтбораПоПапкамНоменклатуры = (ЗначениеНастройкиПользователя = Перечисления.ВидыОтборовНоменклатуры.ГруппыНоменклатуры);
	
	КешНастройкиПодбора.Вставить("ТекущийВидОтбора", ?(ЭтоВидОтбораПоПапкамНоменклатуры, "ОтборПоПапкамНоменклатуры", "ОтборПоНоменклатурнымГруппам"));
	
	ВзаимноИсключаемыеНастройкиПП = Новый Структура;
	ВзаимноИсключаемыеНастройкиПП.Вставить("ФормаПолнотекстовыйПоискЛюбыеОкончания",	"ФормаПолнотекстовыйПоискОпечатки");
	ВзаимноИсключаемыеНастройкиПП.Вставить("ФормаПолнотекстовыйПоискОпечатки", 		"ФормаПолнотекстовыйПоискЛюбыеОкончания");
	КешНастройкиПодбора.Вставить("ВзаимноИсключаемыеНастройкиПП", ВзаимноИсключаемыеНастройкиПП);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПолнотекстовыйПоискЛюбыеОкончания", "Пометка", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, КешНастройкиПодбора.ТекущийВидОтбора, "Пометка", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокИерархияНоменклатуры", "Видимость", КешНастройкиПодбора.ТекущийВидОтбора = "ОтборПоПапкамНоменклатуры");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокИерархияНоменклатурныхГрупп", "Видимость", КешНастройкиПодбора.ТекущийВидОтбора = "ОтборПоНоменклатурнымГруппам");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПолнотекстовыйПоиск", "Видимость", ИспользоватьПолнотекстовыйПоиск);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаАвтоСбросОтбораСписков", "Пометка", Истина);
	
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события ПриСозданииНаСервере
//
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("УстановитьОтборСпискаСкладскиеОстатки", 0.2, Истина);
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы


&НаКлиенте
// Процедура - обработчик события ПриАктивизацииСтроки реквизита СписокИерархияНоменклатуры
//
Процедура СписокИерархияНоменклатурыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьОтборПоГруппеДинамическихСписков", 0.2, Истина);
	
КонецПроцедуры // СписокИерархияНоменклатурыПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события ПриАктивизацииСтроки реквизита СписокИерархияНоменклатуры
//
Процедура СписокИерархияНоменклатурныхГруппПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьОтборПоГруппеДинамическихСписков", 0.2, Истина);
	
КонецПроцедуры // СписокИерархияНоменклатурныхГруппПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события Выбор реквизита СписокЗапасы
//
Процедура СписокЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеТекущейСтроки = ПолучитьДанныеТекущейСтрокиСписка();
	Если ДанныеТекущейСтроки.ИспользоватьХарактеристики Тогда
		
		КешНастройкиПодбора.ИнициаторПереходаКХарактеристикам = Элемент.Имя;
		ПерейтиКСпискуХарактеристикНоменклатуры(ДанныеТекущейСтроки.НоменклатураСсылка);
		
	Иначе
		
		ДобавитьНоменклатуруВКорзину();
		
	КонецЕсли;
	
КонецПроцедуры // СписокЗапасыВыбор()

&НаКлиенте
// Процедура - обработчик события ПриАктивизацииСтроки реквизита СписокЗапасы
//
Процедура СписокЗапасыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("УправлениеДоступностьюНавигацииСписковНоменклатураХарактеристика", 0.2, Истина);
	ПодключитьОбработчикОжидания("УстановитьОтборСпискаСкладскиеОстатки", 0.2, Истина);
	
КонецПроцедуры // СписокЗапасыПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события ОкончаниеПеретаскивания реквизита СписокЗапасы
//
Процедура СписокЗапасыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьНоменклатуруВКорзину();
	
КонецПроцедуры // СписокЗапасыОкончаниеПеретаскивания()

&НаСервереБезКонтекста
Процедура СписокЗапасыПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	СоответствиеСтавокНДС = Настройки.ДополнительныеСвойства.СоответствиеСтавокНДС;
	Для Каждого КлючИЗначение Из Строки Цикл
		
		// Заполняем ставки НДС
		СтрокаСписка =  КлючИЗначение.Значение.Данные;
		СтрокаСписка.СтавкаНДС = СоответствиеСтавокНДС.Получить(СтрокаСписка.ВидСтавкиНДС);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события Выбор реквизита СписокХарактеристик
//
Процедура СписокХарактеристикВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьНоменклатуруВКорзину();
	
КонецПроцедуры // СписокХарактеристикВыбор()

&НаКлиенте
// Процедура - обработчик события ОкончаниеПеретаскивания реквизита СписокХарактеристик
//
Процедура СписокХарактеристикОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьНоменклатуруВКорзину();
	
КонецПроцедуры // СписокХарактеристикОкончаниеПеретаскивания()

&НаСервереБезКонтекста
Процедура СписокХарактеристикПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	СоответствиеСтавокНДС = Настройки.ДополнительныеСвойства.СоответствиеСтавокНДС;
	Для Каждого КлючИЗначение Из Строки Цикл
		
		// Заполняем ставки НДС
		СтрокаСписка =  КлючИЗначение.Значение.Данные;
		СтрокаСписка.СтавкаНДС = СоответствиеСтавокНДС.Получить(СтрокаСписка.ВидСтавкиНДС);
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
// Процедура - обработчик события ПриАктивизацииСтроки реквизита СписокХарактеристик
//
Процедура СписокХарактеристикПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("УправлениеДоступностьюНавигацииСписковНоменклатураХарактеристика", 0.2, Истина);
	ПодключитьОбработчикОжидания("УстановитьОтборСпискаСкладскиеОстатки", 0.2, Истина);
	
КонецПроцедуры // СписокХарактеристикПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события Выбор реквизита СписокСкладскиеОстатки
//
Процедура СписокСкладскиеОстаткиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьНоменклатуруВКорзину();
	
КонецПроцедуры // СписокСкладскиеОстаткиВыбор()

&НаКлиенте
// Процедура - обработчик события ОкончаниеПеретаскивания реквизита СписокСкладскиеОстатки
//
Процедура СписокСкладскиеОстаткиОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьНоменклатуруВКорзину();
	
КонецПроцедуры // СписокСкладскиеОстаткиОкончаниеПеретаскивания()

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита ТекстПоиска
//
Процедура ТекстПоискаПриИзменении(Элемент)
	
	Если ПустаяСтрока(ТекстПоиска) Тогда
		
		СброситьОтборПоДинамическомуСписку();
		
	Иначе
		
		ВыполнитьПоискИУстановитьОтбор();
		КешНастройкиПодбора.ПоискВыполненПриОкончанииРедактирования = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ТекстПоискаПриИзменении()

&НаКлиенте
// Процедура - обработчик события Очистка реквизита ТекстПоиска
//
Процедура ТекстПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СброситьОтборПоДинамическомуСписку()
	
КонецПроцедуры // ТекстПоискаОчистка()

// Табличная часть "Корзина подбора"

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита Номенклатура табличного поля Корзина
//
Процедура КорзинаОстатокРезервХарактеристикаНоменклатураПриИзменении(Элемент)
	
	СтрокаКорзины = Элементы.КорзинаОстатокРезервХарактеристика.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", 		Объект.Организация);
	СтруктураДанные.Вставить("Дата", 				Объект.Дата);
	СтруктураДанные.Вставить("Номенклатура", 		СтрокаКорзины.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 		СтрокаКорзины.Характеристика);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаКорзины.Количество 		= 1;
	СтрокаКорзины.ЕдиницаИзмерения	= СтруктураДанные.ЕдиницаИзмерения;
	
КонецПроцедуры // КорзинаНоменклатураПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита Характеристика табличного поля Корзина
//
Процедура КорзинаОстатокРезервХарактеристикаХарактеристикаПриИзменении(Элемент)
	
	СтрокаКорзины = Элементы.КорзинаОстатокРезервХарактеристика.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", 		Объект.Организация);
	СтруктураДанные.Вставить("Дата", 				Объект.Дата);
	СтруктураДанные.Вставить("Номенклатура", 		СтрокаКорзины.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 		СтрокаКорзины.Характеристика);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаКорзины.Количество 		= 1;
	СтрокаКорзины.ЕдиницаИзмерения	= СтруктураДанные.ЕдиницаИзмерения;
	
КонецПроцедуры // КорзинаХарактеристикаПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита Количество табличного поля Корзина
//
Процедура КорзинаОстатокРезервХарактеристикаРезервПриИзменении(Элемент)
	
	СтрокаКорзины = Элементы.КорзинаОстатокРезервХарактеристика.ТекущиеДанные;
	
	Если СтрокаКорзины.Резерв > СтрокаКорзины.Количество Тогда
		
		СтрокаКорзины.Количество = СтрокаКорзины.Резерв;
		
	КонецЕсли;
	
КонецПроцедуры // КорзинаРезервПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура - обработчик команды ВыполнитьПоиск
//
Процедура ВыполнитьПоиск(Команда)
	
	Если НЕ КешНастройкиПодбора.ПоискВыполненПриОкончанииРедактирования Тогда
		
		ВыполнитьПоискИУстановитьОтбор();
		
	Иначе
		
		КешНастройкиПодбора.ПоискВыполненПриОкончанииРедактирования = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьПоиск()

&НаКлиенте
// Процедура - обработчик команды ИзменитьНастройки
//
Процедура ИзменитьНастройки(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьНастройкиПодбора", ЭтотОбъект);
	ОткрытьФорму("Обработка.ПодборПеремещение.Форма.Настройка", , ЭтаФорма, Истина, , , ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ИзменитьНастройки()

&НаКлиенте
// Процедура - обработчик команды ПеренестиВДокумент
//
Процедура ПеренестиВДокумент(Команда)
	
	Закрыть(ЗаписатьПодборВХранилище());
	
КонецПроцедуры // ПеренестиВДокумент()

// Процедура - обработчик команды Выбрать
//
&НаКлиенте
Процедура ДобавитьВКорзину(Команда)
	
	ДобавитьНоменклатуруВКорзину();
	
КонецПроцедуры // Выбрать()

&НаКлиенте
// Процедура - обработчик команды ПерейтиКРодителю (контекст. меню списка номенклатуры)
//
Процедура ПерейтиКРодителю(Команда)
	
	ДанныеТекущейСтроки = ПолучитьДанныеТекущейСтрокиСписка();
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		Если КешНастройкиПодбора.ТекущийВидОтбора = "ОтборПоПапкамНоменклатуры" Тогда
			
			Элементы.СписокИерархияНоменклатуры.ТекущаяСтрока = ДанныеТекущейСтроки.Родитель;
			
		Иначе
			
			Элементы.СписокИерархияНоменклатурныхГрупп.ТекущаяСтрока = ДанныеТекущейСтроки.КатегорияНоменклатуры;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПерейтиКРодителю()

&НаКлиенте
// Процедура - обработчик команды ПоказатьНоменклатуру (контекст. меню списка характеристик)
//
Процедура ПоказатьНоменклатуру(Команда)
	
	ПерейтиКСпискуНоменклатуры();
	
КонецПроцедуры // ПоказатьНоменклатуру()

&НаКлиенте
// Процедура - обработчик команды ИзменитьВидимостьСкладскихОстатков (меню формы)
//
Процедура ИзменитьВидимостьСкладскихОстатков(Команда)
	
	Элементы.ФормаИзменитьВидимостьСкладскихОстатков.Пометка = НЕ Элементы.ФормаИзменитьВидимостьСкладскихОстатков.Пометка;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСкладскиеОстатки", "Видимость", Элементы.ФормаИзменитьВидимостьСкладскихОстатков.Пометка);
	
КонецПроцедуры // ИзменитьВидимостьСкладскихОстатков()

&НаКлиенте
// Процедура - обработчик команды ИзменитьВидимостьКорзины (меню формы)
//
Процедура ИзменитьВидимостьКорзины(Команда)
	
	Элементы.ФормаИзменитьВидимостьКорзины.Пометка = НЕ Элементы.ФормаИзменитьВидимостьКорзины.Пометка;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КорзинаОстатокРезервХарактеристика", "Видимость", Элементы.ФормаИзменитьВидимостьКорзины.Пометка);
	
КонецПроцедуры // ИзменитьВидимостьКорзины()

&НаКлиенте
// Процедура - обработчик команды ПереходПолнотекстовыйПоиск
Процедура ПереходПолнотекстовыйПоиск(Команда)
	
	УстановитьТекущийЭлементыФормы(Элементы.ТекстПоиска);
	
КонецПроцедуры // ПереходПолнотекстовыйПоиск()

&НаКлиенте
// Процедура - обработчик команды ПереходИерархия
Процедура ПереходИерархия(Команда)
	
	ИмяЭлемента = ?(КешНастройкиПодбора.ТекущийВидОтбора = "ОтборПоПапкамНоменклатуры", "СписокИерархияНоменклатуры", "СписокИерархияНоменклатурныхГрупп");
	УстановитьТекущийЭлементыФормы(Элементы[ИмяЭлемента]);
	
КонецПроцедуры // ПереходИерархия()

&НаКлиенте
// Процедура - обработчик команды ПереходНоменклатураХарактеристики
//
Процедура ПереходНоменклатураХарактеристики(Команда)
	
	ЭтоХарактеристики = (Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница = Элементы.СтраницаХарактеристики);
	
	ЭлементСпискаЗапасы = ?(Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница = Элементы.СтраницаНоменклатураПоиска,
		Элементы.СписокЗапасыПоиска,
		Элементы.СписокЗапасы);
	
	УстановитьТекущийЭлементыФормы(?(ЭтоХарактеристики, Элементы.СписокХарактеристик, ЭлементСпискаЗапасы));
	
КонецПроцедуры // ПереходНоменклатураХарактеристики()

&НаКлиенте
// Процедура - обработчик команды ПереходКорзина
Процедура ПереходКорзина(Команда)
	
	УстановитьТекущийЭлементыФормы(Элементы.КорзинаОстатокРезервХарактеристика);
	
КонецПроцедуры // ПереходКорзина()

&НаКлиенте
// Процедура - обработчик команды ОбновлятьЗаголовки
//
Процедура ОбновлятьЗаголовки(Команда)
	
	Элементы.ФормаОбновлятьЗаголовки.Пометка = НЕ Элементы.ФормаОбновлятьЗаголовки.Пометка;
	
	// Если выключили обновление заголовок, вернем заголовки к типовому состоянию...
	Если НЕ Элементы.ФормаОбновлятьЗаголовки.Пометка Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокХарактеристикХарактеристикаСсылка", "Заголовок", НСтр("ru = 'Характеристика'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСкладскиеОстаткиСтруктурнаяЕдиница", "Заголовок", НСтр("ru = 'Склад'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПереходНоменклатураХарактеристики", "Заголовок", НСтр("ru = 'Номенклатура/Характеристики'"));
		
	КонецЕсли;
	
КонецПроцедуры // ОбновлятьЗаголовки()

&НаКлиенте
// Процедура - обработчик команды АвтоСбросТекстаПоиска
//
Процедура АвтоСбросОтбораСписков(Команда)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаАвтоСбросОтбораСписков", "Пометка", НЕ Элементы.ФормаАвтоСбросОтбораСписков.Пометка);
	
КонецПроцедуры // АвтоСбросТекстаПоиска()

&НаКлиенте
// Процедура - обработчик команды РасшифроватьРезерв
//
Процедура РасшифроватьРезерв(Команда)
	
	ДанныеТекущейСтроки = ПолучитьДанныеТекущейСтрокиСписка();
	Если ДанныеТекущейСтроки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыРасшифровки = Новый Структура;
	ПараметрыРасшифровки.Вставить("Организация", 	Объект.Организация);
	ПараметрыРасшифровки.Вставить("Номенклатура",	ДанныеТекущейСтроки.НоменклатураСсылка);
	ПараметрыРасшифровки.Вставить("Характеристика", ДанныеТекущейСтроки.ХарактеристикаСсылка);
	
	Если Элементы.СписокЗапасы.ТекущийЭлемент  = Элементы.СписокЗапасыСвободноПолучатель
		ИЛИ Элементы.СписокЗапасыПоиска.ТекущийЭлемент  = Элементы.СписокЗапасыПоискаСвободноПолучатель Тогда
		
		ПараметрыРасшифровки.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаПолучатель);
		
	Иначе
		
		ПараметрыРасшифровки.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаОтправитель);
		
	КонецЕсли;
	
	ОписаниеОповещенияПриЗакрытииПодбора = Новый ОписаниеОповещения("ПослеОткрытияРасшифровкиРезерва", ЭтотОбъект, ПараметрыРасшифровки);
	ОткрытьФорму("Обработка.ПодборПеремещение.Форма.РасшифроватьРезерв", ПараметрыРасшифровки, ЭтаФорма, Истина, , ,ОписаниеОповещенияПриЗакрытииПодбора , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // РасшифроватьРезерв()

&НаКлиенте
// Процедура - обработчик команды АналогиНоменклатуры
//
Процедура АналогиНоменклатуры(Команда)
	Перем ТекстСообщения;
	
	Если Элементы.СписокЗапасыКонтекстноеМенюАналогиНоменклатуры.Пометка Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокЗапасы, "НоменклатураСсылка");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокЗапасыПоиска, "НоменклатураСсылка");
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыКонтекстноеМенюАналогиНоменклатуры", "Пометка", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыПоискаКонтекстноеМенюАналогиНоменклатуры", "Пометка", Ложь);
		
		Если Элементы.ФормаОбновлятьЗаголовки.Пометка Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыНаименование", "Заголовок", НСтр("ru ='Номенклатура'"));
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыПоискаНаименование", "Заголовок", НСтр("ru ='Номенклатура'"));
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеТекущейСтроки = ПолучитьДанныеТекущейСтрокиСпискаЗапасов();
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		ОтборПоАналогамНоменклатуры(ДанныеТекущейСтроки.НоменклатураСсылка, ТекстСообщения);
		
		Если ПустаяСтрока(ТекстСообщения) Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыКонтекстноеМенюАналогиНоменклатуры", "Пометка", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыПоискаКонтекстноеМенюАналогиНоменклатуры", "Пометка", Истина);
			
			Если Элементы.ФормаОбновлятьЗаголовки.Пометка Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыНаименование", "Заголовок", НСтр("ru ='Номенклатура (вкл. Аналоги)'"));
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыПоискаНаименование", "Заголовок", НСтр("ru ='Номенклатура (вкл. Аналоги)'"));
				
			КонецЕсли
			
		Иначе
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "СписокЗапасыНаименование", , );
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // АналогиНоменклатуры()

&НаКлиенте
// Процедура - обработчик команды СведенияОДокументе
//
Процедура СведенияОДокументе(Команда)
	
	ОписаниеОповещенияПриЗакрытииПодбора = Новый ОписаниеОповещения("ПослеЗакрытияФормыСведенияОДокументе", ЭтотОбъект);
	ОткрытьФорму("Обработка.ПодборПеремещение.Форма.СведенияОДокументе", КешНастройкиПодбора.СведенияОДокументе, ЭтаФорма, Истина, , ,ОписаниеОповещенияПриЗакрытииПодбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // СведенияОДокументе()

&НаКлиенте
// Процедура - обработчик команды НоменклатураИмеетсяВНаличии
//
Процедура НоменклатураИмеетсяВНаличии(Команда)
	
	Если Элементы.ФормаНоменклатураИмеетсяВНаличии.Пометка Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокЗапасы, "ОстатокОтправитель");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокЗапасыПоиска, "ОстатокОтправитель");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокХарактеристик, "ОстатокОтправитель");
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаНоменклатураИмеетсяВНаличии", "Пометка", Ложь);
		
	Иначе
		
		МассивДинамическихСписков = Новый Массив(3);
		МассивДинамическихСписков[0] = СписокЗапасы;
		МассивДинамическихСписков[1] = СписокЗапасыПоиска;
		МассивДинамическихСписков[2] = СписокХарактеристик;
		
		Для каждого ДинамическийСписок Из МассивДинамическихСписков Цикл
		
			ЭлементыИГруппыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ДинамическийСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "ОстатокОтправитель");
			Если ЭлементыИГруппыОтбора.Количество() = 0 Тогда
				
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ДинамическийСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "ОстатокОтправитель", ВидСравненияКомпоновкиДанных.Заполнено, 0);
				
			Иначе
				
				ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(ДинамическийСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "ОстатокОтправитель", , 0, ВидСравненияКомпоновкиДанных.Заполнено);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаНоменклатураИмеетсяВНаличии", "Пометка", Истина);
		
	КонецЕсли;
	
КонецПроцедуры // НоменклатураИмеетсяВНаличии()

&НаКлиенте
// Процедура - обработчик команды ЗаполнятьКоличествоРезерва
//
Процедура ЗаполнятьКоличествоРезерва(Команда)
	
	ЗаполнятьКоличествоРезерва = НЕ ЗаполнятьКоличествоРезерва;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЗаполнятьКоличествоРезерва", "Пометка", ЗаполнятьКоличествоРезерва);
	
КонецПроцедуры // ЗаполнятьКоличествоРезерва()

&НаКлиенте
// Процедура - обработчик команды ПолнотекстовыйПоискЛюбыеОкончания
//
Процедура ПолнотекстовыйПоискЛюбыеОкончания(Команда)
	
	ИмяНастройки = "ФормаПолнотекстовыйПоискЛюбыеОкончания";
	УправлениеНастройкамиПолнотекстовогоПоискаНаКлиенте(ИмяНастройки);
	
КонецПроцедуры // ПолнотекстовыйПоискЛюбыеОкончания()

&НаКлиенте
// Процедура - обработчик команды ПолнотекстовыйПоискОпечатки
//
Процедура ПолнотекстовыйПоискОпечатки(Команда)
	
	ИмяНастройки = "ФормаПолнотекстовыйПоискОпечатки";
	УправлениеНастройкамиПолнотекстовогоПоискаНаКлиенте(ИмяНастройки);
	
КонецПроцедуры // ПолнотекстовыйПоискОпечатки()

&НаКлиенте
// Процедура - обработчик команды НавигацияСписковНоменклатураХарактеристики
//
Процедура НавигацияСписковНоменклатураХарактеристики(Команда)
	
	Если Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница = Элементы.СтраницаХарактеристики Тогда
		
		ПерейтиКСпискуНоменклатуры();
		
	Иначе
		
		ДанныеТекущейСтроки = ПолучитьДанныеТекущейСтрокиСпискаЗапасов();
		Если ДанныеТекущейСтроки.ИспользоватьХарактеристики Тогда
			
			ПерейтиКСпискуХарактеристикНоменклатуры(ДанныеТекущейСтроки.НоменклатураСсылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // НавигацияСписковНоменклатураХарактеристики()

&НаКлиенте
// Процедура - обработчик команды ОтборПоПапкамНоменклатуры
//
Процедура ОтборПоПапкамНоменклатуры(Команда)
	
	ПереключитьВидОтбора(Команда.Действие);
	
КонецПроцедуры // ОтборПоПапкамНоменклатуры()

&НаКлиенте
// Процедура - обработчик команды ОтборПоНоменклатурнымГруппам
//
Процедура ОтборПоНоменклатурнымГруппам(Команда)
	
	ПереключитьВидОтбора(Команда.Действие);
	
КонецПроцедуры // ОтборПоНоменклатурнымГруппам()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Полнотекстовый поиск

&НаСервереБезКонтекста
// Функция заполняет массив ссылок результата поиска или возвращает описание ошибки
//
//
Функция ПолнотекстовыйПоискНаСервереБезКонтекста(СтрокаПоиска, РезультатПоиска)
	
	ОписаниеОшибки = "";
	РезультатПоиска = ПодборНоменклатурыВДокументахПереопределяемый.ПоискТоваров(СтрокаПоиска, ОписаниеОшибки);
	
	Возврат ОписаниеОшибки;
	
КонецФункции // ПолнотекстовыйПоискНаСервереБезКонтекста()

&НаКлиенте
// Функция добавляет в строку ПП поиска служебные символы в зависимости от включенных опций
//
Функция СформироватьУниверсальнуюСтрокуПоиска(ТекстПоиска)
	
	Возврат ?(Элементы.ФормаПолнотекстовыйПоискОпечатки.Пометка, "#", "") + ТекстПоиска + ?(Элементы.ФормаПолнотекстовыйПоискЛюбыеОкончания.Пометка, "*", "");
	
КонецФункции // СформироватьУниверсальнуюСтрокуПоиска()

&НаКлиенте
// Процедура устанавливает отбор по ссылкам полученными полнотекстовым поиском
//
Процедура ПолнотекстовыйПоискНаКлиенте(РезультатПоиска)
	
	Если ПустаяСтрока(ТекстПоиска) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УниверсальнаяСтрокаПоиска = СформироватьУниверсальнуюСтрокуПоиска(ТекстПоиска);
	ОписаниеОшибки = ПолнотекстовыйПоискНаСервереБезКонтекста(УниверсальнаяСтрокаПоиска, РезультатПоиска);
	
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		
		РезультатПоиска = Неопределено;
		ПоказатьПредупреждение(Неопределено, ОписаниеОшибки, 5, "Поиск...");
		
	КонецЕсли;
	
КонецПроцедуры // ПолнотекстовыйПоискНаКлиенте()

&НаКлиенте
// Процедура устанавливает отбор по ссылкам полученными контекстным поиском
//
Процедура КонтекстныйПоискНаКлиенте(РезультатПоиска)
	
	Если ПустаяСтрока(ТекстПоиска) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РезультатПоиска = ПодборНоменклатурыВДокументахВызовСервера.МассивыОтборовНоменклатурыИХарактеристик(ТекстПоиска);
	
	Если РезультатПоиска.Номенклатура.Количество() = 0
		И РезультатПоиска.ХарактеристикиНоменклатуры.Количество() = 0 Тогда
		
		РезультатПоиска = Неопределено;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ничего не найдено'"), 5, "Поиск...");
		
	ИначеЕсли РезультатПоиска.Номенклатура.Количество() + РезультатПоиска.ХарактеристикиНоменклатуры.Количество() > 400 Тогда
		
		РезультатПоиска = Неопределено;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Слишком много результатов. Уточните запрос.'"), 5, "Поиск...");
		
	КонецЕсли;
	
КонецПроцедуры // КонтекстныйПоискНаКлиенте()

&НаКлиенте
// Процедура инициализирует выполнение полнотекстового поиска и установку отбора
// 
Процедура ПрименитьРезультатыПоиска(РезультатПоиска)
	
	Если Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница = Элементы.СтраницаХарактеристики Тогда
		
		Использование			= РезультатПоиска.ХарактеристикиНоменклатуры.Количество() > 0;
		ИмяДинамическогоСписка	= "СписокХарактеристик";
		ИмяЭлементаФормы		= "СписокХарактеристик";
		ИмяПоляОтбора			= "ХарактеристикаСсылка";
		МассивЭлементовОтбора	= РезультатПоиска.ХарактеристикиНоменклатуры;
		
		
	Иначе
		
		Использование			= РезультатПоиска.Номенклатура.Количество() > 0;
		ИмяДинамическогоСписка	= "СписокЗапасыПоиска";
		ИмяЭлементаФормы		= "СписокЗапасыПоиска";
		ИмяПоляОтбора			= "НоменклатураСсылка";
		МассивЭлементовОтбора	= РезультатПоиска.Номенклатура;
		
		Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница = Элементы.СтраницаНоменклатураПоиска;
		
	КонецЕсли;

	ЭлементыИГруппыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ЭтотОбъект[ИмяДинамическогоСписка].КомпоновщикНастроек.ФиксированныеНастройки.Отбор, ИмяПоляОтбора);
	Если ЭлементыИГруппыОтбора.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭтотОбъект[ИмяДинамическогоСписка].КомпоновщикНастроек.ФиксированныеНастройки.Отбор, ИмяПоляОтбора, ВидСравненияКомпоновкиДанных.ВСписке, МассивЭлементовОтбора, , Использование);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(ЭтотОбъект[ИмяДинамическогоСписка].КомпоновщикНастроек.ФиксированныеНастройки.Отбор, ИмяПоляОтбора, , МассивЭлементовОтбора, ВидСравненияКомпоновкиДанных.ВСписке, Использование);
		
	КонецЕсли;
	
	ЭтаФорма.ТекущийЭлемент = Элементы[ИмяЭлементаФормы];
		
КонецПроцедуры // ПрименитьРезультатыПоиска()

&НаКлиенте
// Процедура инициализирует выполнение полнотекстового поиска и установку отбора
// 
Процедура ВыполнитьПоискИУстановитьОтбор()
	Перем РезультатПоиска;
	
	Если ИспользоватьПолнотекстовыйПоиск Тогда
		
		ПолнотекстовыйПоискНаКлиенте(РезультатПоиска);
		
	Иначе
		
		КонтекстныйПоискНаКлиенте(РезультатПоиска);
		
	КонецЕсли;
	
	Если ТипЗнч(РезультатПоиска) = Тип("Структура") Тогда
		
		ПрименитьРезультатыПоиска(РезультатПоиска);
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьПоискИУстановитьОтбор()

&НаКлиенте
// Процедура сбрасывает отбор динамических списков
//
Процедура СброситьОтборПоДинамическомуСписку()
	
	ТекстПоиска = "";
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокХарактеристик, "ХарактеристикаСсылка");
	
	Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница = Элементы.СтраницаНоменклатура;
	
КонецПроцедуры //СброситьОтборПоДинамическомуСписку()

&НаКлиенте
// Процедура управляет переключением опций ПП и их зависимостью
//
Процедура УправлениеНастройкамиПолнотекстовогоПоискаНаКлиенте(ИмяНастройки)
	
	Элементы[ИмяНастройки].Пометка = НЕ Элементы[ИмяНастройки].Пометка;
	
	Если Элементы[ИмяНастройки].Пометка Тогда
		
		ВзаимноИсключаемыеНастройкиПП = КешНастройкиПодбора.ВзаимноИсключаемыеНастройкиПП;
		Элементы[ВзаимноИсключаемыеНастройкиПП[ИмяНастройки]].Пометка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ПереключитьВариантПолнотекстовогоПоискаНаКлиенте()

&НаСервере
// Процедура устанавливает подсказку ввода для элемента формы ПоискТекста
//
Процедура УстановитьПодсказкуВводаСтрокиПоискаНаСервере()
	
	ПолнотекстовыйПоискНастроенЧастично = (ИспользоватьПолнотекстовыйПоиск И НЕ АктуальностьИндексаППД);
	ПодсказкаВвода = ?(ПолнотекстовыйПоискНастроенЧастично, НСтр("ru = 'Необходимо обновить индекс полнотекстового поиска...'"), НСтр("ru = '(ALT+F3) Введите текст поиска...'"));
	Элементы.ТекстПоиска.ПодсказкаВвода = ПодсказкаВвода;
	
КонецПроцедуры // УстановитьПодсказкуВводаСтрокиПоискаНаСервере()

&НаСервере
// Процедура подключает полнотекстовый поиск и устанавливает свойства реквизитов формы
//
Процедура ПодключитьПолнотекстовыйПоискПриОткрытииПодбора()
	
	ИспользоватьПолнотекстовыйПоиск = ПолучитьФункциональнуюОпцию("ИспользоватьПолнотекстовыйПоиск");
	Если ИспользоватьПолнотекстовыйПоиск Тогда
		
		АктуальностьИндексаППД = ПолнотекстовыйПоиск.ИндексАктуален();
		
		Если НЕ АктуальностьИндексаППД Тогда
			
			Если ОбщегоНазначения.РазделениеВключено()
				И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
				
				// в разделенной ИБ считаем актуальным индекс в пределах 2 дней
				АктуальностьИндексаППД = ПолнотекстовыйПоиск.ДатаАктуальности() >= (ТекущаяДатаСеанса()-(2*24*60*60));
				
			Иначе
				
				// в неразделенной ИБ считаем актуальным индекс в пределах дня
				АктуальностьИндексаППД = ПолнотекстовыйПоиск.ДатаАктуальности() >= (ТекущаяДатаСеанса() - (1*24*60*60));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПодсказкуВводаСтрокиПоискаНаСервере();
	
КонецПроцедуры // ПодключитьПолнотекстовыйПоискПриОткрытииПодбора()

// Конец Полнотекстовый поиск


// Добавление товара в корзину

&НаКлиенте
// Функция возвращает контекст строки текущего динамического списка
//
Функция ПолучитьДанныеТекущейСтрокиСписка()
	
	ДанныеТекущейСтроки = ?(Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница = Элементы.СтраницаХарактеристики,
		Элементы.СписокХарактеристик.ТекущиеДанные,
		ПолучитьДанныеТекущейСтрокиСпискаЗапасов());
	
	Возврат ДанныеТекущейСтроки;
	
КонецФункции // ПолучитьДанныеТекущейСтрокиСписка()

&НаКлиенте
// Функция возвращает контекст текущей строки динамического списка запасов
//
Функция ПолучитьДанныеТекущейСтрокиСпискаЗапасов()
	
	ДанныеТекущейСтроки = ?(Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница = Элементы.СтраницаНоменклатураПоиска,
		Элементы.СписокЗапасыПоиска.ТекущиеДанные,
		Элементы.СписокЗапасы.ТекущиеДанные);
	
	Возврат ДанныеТекущейСтроки;
	
КонецФункции // ПолучитьДанныеТекущейСтрокиСписка()

&НаКлиенте
// Функция ищет строки в корзине подбора с казанной номенклатурой
// 	используется перед добавление номенклатуры в корзину.
//
// Возвращает:
//		- Неопределено, если номенклатура не найдена;
//		- Строку корзины, если номенклатура найдена;
//
Функция НайтиНоменклатуруВКорзине(ДанныеТекущейСтроки)
	
	СтруктураОтбора = Новый Структура("Номенклатура, Характеристика", ДанныеТекущейСтроки.НоменклатураСсылка, ДанныеТекущейСтроки.ХарактеристикаСсылка);
	НайденныеСтроки = Объект.КорзинаОстатокРезервХарактеристика.НайтиСтроки(СтруктураОтбора);
	
	Возврат ?(НайденныеСтроки.Количество() = 0, Неопределено, НайденныеСтроки[0]);
	
КонецФункции // НайтиНоменклатуруВКорзине()

&НаКлиенте
// Процедура добавления номенклатуры в корзину подбора
//
Процедура ДобавитьНоменклатуруВКорзину()
	
	ДанныеТекущейСтроки = ПолучитьДанныеТекущейСтрокиСписка();
	Если ДанныеТекущейСтроки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеСтрокиКорзины = Новый Структура;
	
	НайденнаяСтрока = НайтиНоменклатуруВКорзине(ДанныеТекущейСтроки);
	ДанныеСтрокиКорзины.Вставить("СтрокаКорзины", ?(НайденнаяСтрока <> Неопределено, НайденнаяСтрока.ПолучитьИдентификатор(), НайденнаяСтрока));
	ДанныеСтрокиКорзины.Вставить("Номенклатура", ДанныеТекущейСтроки.НоменклатураСсылка);
	ДанныеСтрокиКорзины.Вставить("Характеристика", ДанныеТекущейСтроки.ХарактеристикаСсылка);
	ДанныеСтрокиКорзины.Вставить("ЭтоНабор", ДанныеТекущейСтроки.ЭтоНабор);
	ДанныеСтрокиКорзины.Вставить("ЕдиницаИзмерения", ДанныеТекущейСтроки.ЕдиницаИзмерения);
	ДанныеСтрокиКорзины.Вставить("Свободно", ДанныеТекущейСтроки.СвободноОтправитель);
	ДанныеСтрокиКорзины.Вставить("СтранаПроисхождения", ДанныеТекущейСтроки.СтранаПроисхождения);
	
	Если КешНастройкиПодбора.ЗапрашиватьКоличество Тогда
		
		ДанныеСтрокиКорзины.Вставить("КешНастройкиПодбора",	КешНастройкиПодбора);
		ДанныеСтрокиКорзины.Вставить("Количество",			1);
		ДанныеСтрокиКорзины.Вставить("ЕдиницаИзмерения", 	ДанныеСтрокиКорзины.ЕдиницаИзмерения);
		
		ОписаниеОповещенияПриЗакрытииПодбора = Новый ОписаниеОповещения("ПослеВыбораКоличества", ЭтотОбъект, ДанныеСтрокиКорзины);
		ОткрытьФорму("Обработка.ПодборПеремещение.Форма.Количество", ДанныеСтрокиКорзины, ЭтаФорма, Истина, , ,ОписаниеОповещенияПриЗакрытииПодбора , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		Если ДанныеСтрокиКорзины.СтрокаКорзины = Неопределено Тогда
			
			СтрокаКорзины = Объект.КорзинаОстатокРезервХарактеристика.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКорзины, ДанныеСтрокиКорзины);
			
		Иначе
			
			СтрокаКорзины = НайденнаяСтрока;
			
		КонецЕсли;
		
		СтрокаКорзины.Количество = СтрокаКорзины.Количество + 1;
		СтрокаКорзины.Резерв	 = ?(ВключеноРезервирование И ЗаполнятьКоличествоРезерва, МИН(СтрокаКорзины.Количество, ДанныеСтрокиКорзины.Свободно),0);
		
		Элементы.КорзинаОстатокРезервХарактеристика.ТекущаяСтрока = СтрокаКорзины.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьНоменклатуруВКорзину()

// Конец Добавление товара в корзину


// Управление списками

&НаКлиенте
// Процедура устанавливает отбор в списке запасов по массиву аналогов номенклатуры
//
Процедура ОтборПоАналогамНоменклатуры(Номенклатура, ТекстСообщения)
	
	СписокАналоговНоменклатуры = Новый СписокЗначений;
	ПолучитьАналогиНоменклатуры(Номенклатура, СписокАналоговНоменклатуры);
	
	Если СписокАналоговНоменклатуры.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Для номенклатуры не заведены аналоги.'");
		
	Иначе
		
		МассивДинамическихСписков = Новый Массив(2);
		МассивДинамическихСписков[0] = СписокЗапасы;
		МассивДинамическихСписков[1] = СписокЗапасыПоиска;
		
		Для каждого ДинамическийСписок Из МассивДинамическихСписков Цикл
		
			МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ДинамическийСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "НоменклатураСсылка");
			Если МассивЭлементов.Количество() = 0 Тогда
				
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ДинамическийСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "НоменклатураСсылка", ВидСравненияКомпоновкиДанных.ВСписке, СписокАналоговНоменклатуры);
				
			Иначе
				
				ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(ДинамическийСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "НоменклатураСсылка", , СписокАналоговНоменклатуры, ВидСравненияКомпоновкиДанных.ВСписке);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОтборПоАналогамНоменклатуры()

&НаКлиенте
// Процедура обновляет динамические списки Запасы
//
Процедура ОбновитьОтборПоГруппеДинамическихСписков()
	
	Если КешНастройкиПодбора.ТекущийВидОтбора = "ОтборПоПапкамНоменклатуры" Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокЗапасы, "КатегорияНоменклатуры");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокЗапасыПоиска, "КатегорияНоменклатуры");
		ИмяДинамическогоСписка = "СписокИерархияНоменклатуры";
		ИмяОтбора = "Родитель";
		
	ИначеЕсли КешНастройкиПодбора.ТекущийВидОтбора = "ОтборПоНоменклатурнымГруппам" Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокЗапасы, "Родитель");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокЗапасыПоиска, "Родитель");
		ИмяДинамическогоСписка = "СписокИерархияНоменклатурныхГрупп";
		ИмяОтбора = "КатегорияНоменклатуры";
		
	КонецЕсли;
	
	ДанныеТекущейСтроки = Элементы[ИмяДинамическогоСписка].ТекущиеДанные;
	
	МассивДинамическихСписков = Новый Массив(2);
	МассивДинамическихСписков[0] = СписокЗапасы;
	МассивДинамическихСписков[1] = СписокЗапасыПоиска;
	
	Для каждого ДинамическийСписок Из МассивДинамическихСписков Цикл
		
		Если ДанныеТекущейСтроки = Неопределено Тогда
			
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(ДинамическийСписок, ИмяОтбора);
			
		Иначе

			ЭлементыИГруппыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ДинамическийСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, ИмяОтбора);
			Если ЭлементыИГруппыОтбора.Количество() = 0 Тогда
				
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ДинамическийСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, ИмяОтбора, ВидСравненияКомпоновкиДанных.ВИерархии, ДанныеТекущейСтроки.Ссылка);
				
			Иначе
				
				ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(ДинамическийСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, ИмяОтбора, , ДанныеТекущейСтроки.Ссылка, ВидСравненияКомпоновкиДанных.ВИерархии);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //ОбновитьОтборПоГруппеДинамическихСписков()

&НаКлиенте
// Открыть список характеристик и установить отбор по номенклатуре
//
Процедура ПоказатьСписокХарактеристик()
	
	ТекущиеДанныеСпискаНоменклатуры = ПолучитьДанныеТекущейСтрокиСпискаЗапасов();
	
	МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокХарактеристик.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "НоменклатураСсылка");
	Если МассивЭлементов.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СписокХарактеристик.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "НоменклатураСсылка", ВидСравненияКомпоновкиДанных.Равно, ТекущиеДанныеСпискаНоменклатуры.НоменклатураСсылка);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(СписокХарактеристик.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "НоменклатураСсылка", , ТекущиеДанныеСпискаНоменклатуры.НоменклатураСсылка, ВидСравненияКомпоновкиДанных.Равно);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокИерархияНоменклатуры", "Доступность", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокИерархияНоменклатуры", "ЦветТекста", Новый Цвет(150, 150, 150));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницыНоменклатураХарактеристики", "ТекущаяСтраница", Элементы.СтраницаХарактеристики);
	
КонецПроцедуры // ПоказатьСписокХарактеристик()

&НаСервере
// Процедура устанавливает значения параметров динамических списков 
//
// Значения считываются из реквизитов обработки
//
Процедура УстановитьПараметрыДинамическихСписков()
	
	// Параметры, заполняемые особым образом, например, Организация
	ПараметрОрганизация = Новый ПараметрКомпоновкиДанных("Организация");
	
	МассивСписков = Новый Массив;
	МассивСписков.Добавить(СписокИерархияНоменклатуры);
	МассивСписков.Добавить(СписокЗапасы);
	МассивСписков.Добавить(СписокЗапасыПоиска);
	МассивСписков.Добавить(СписокХарактеристик);
	МассивСписков.Добавить(СписокСкладскиеОстатки);
	
	Для каждого ДинамическийСписок Из МассивСписков Цикл
		ДинамическийСписок.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("СоответствиеСтавокНДС",
			УправлениеНебольшойФирмойПовтИсп.СоответствиеСтавокНДС(?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса())));
			
		Для Каждого ПараметрСписка Из ДинамическийСписок.Параметры.Элементы Цикл
			
			ЗначениеРеквизитаОбъекта = Неопределено;
			Если ПараметрСписка.Параметр = ПараметрОрганизация Тогда
				
				ДинамическийСписок.Параметры.УстановитьЗначениеПараметра(ПараметрСписка.Параметр, Константы.УчетПоКомпании.Компания(Объект.Организация));
				
			ИначеЕсли Объект.Свойство(ПараметрСписка.Параметр, ЗначениеРеквизитаОбъекта) Тогда
				
				Если ПодборНоменклатурыВДокументах.ЭтоСписокЗначений(ЗначениеРеквизитаОбъекта) Тогда
					
					ЗначениеРеквизитаОбъекта = ПодборНоменклатурыВДокументах.СписокЗначенийВМассив(ЗначениеРеквизитаОбъекта);
					
				КонецЕсли;
				
				ДинамическийСписок.Параметры.УстановитьЗначениеПараметра(ПараметрСписка.Параметр, ЗначениеРеквизитаОбъекта);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьПараметрыДинамическихСписков()

&НаКлиенте
// Процедура устанавливает значения параметров динамических списков 
//
Процедура УстановитьОтборСпискаСкладскиеОстатки()
	
	Если НЕ Элементы.ФормаИзменитьВидимостьСкладскихОстатков.Пометка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеТекущейСтроки = ПолучитьДанныеТекущейСтрокиСписка();
	ДанныеТекущейСтрокиЗаполнены = (ДанныеТекущейСтроки <> Неопределено);
	
	//Номенклатура
	НоменклатураСсылка = ?(ДанныеТекущейСтрокиЗаполнены, ДанныеТекущейСтроки.НоменклатураСсылка, ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	ОтборыНоменклатура = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокСкладскиеОстатки.Отбор, "Номенклатура");
	Если ОтборыНоменклатура.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СписокСкладскиеОстатки.Отбор, "Номенклатура", ВидСравненияКомпоновкиДанных.Равно, НоменклатураСсылка);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(СписокСкладскиеОстатки.Отбор, "Номенклатура", , НоменклатураСсылка, ВидСравненияКомпоновкиДанных.Равно);
		
	КонецЕсли;
	
	//Характеристики
	Если Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница = Элементы.СтраницаНоменклатура 
		ИЛИ Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница = Элементы.СтраницаНоменклатураПоиска Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(СписокСкладскиеОстатки.Отбор, "Характеристика");
		
	Иначе
		
		ХарактеристикаСсылка = ?(ДанныеТекущейСтрокиЗаполнены, ДанныеТекущейСтроки.ХарактеристикаСсылка, ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
		ОтборыХарактеристика = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокСкладскиеОстатки.Отбор, "Характеристика");
		Если ОтборыХарактеристика.Количество() = 0 Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СписокСкладскиеОстатки.Отбор, "Характеристика", ВидСравненияКомпоновкиДанных.Равно, ХарактеристикаСсылка);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(СписокСкладскиеОстатки.Отбор, "Характеристика", , ХарактеристикаСсылка, ВидСравненияКомпоновкиДанных.Равно);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьОтборСпискаСкладскиеОстатки()

&НаКлиенте
// Процедура устанавливает значения параметров динамических списков 
//
Процедура УстановитьЗаголовкиСписков()
	
	Если Элементы.ФормаОбновлятьЗаголовки.Пометка Тогда
	
		Если Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница = Элементы.СтраницаХарактеристики Тогда
			
			ДанныеТекущейСтроки = ПолучитьДанныеТекущейСтрокиСписка();
			ДанныеТекущейСтрокиЗаполнены = (ДанныеТекущейСтроки <> Неопределено);
			
			ПредставлениеНоменклатуры = ?(ДанныеТекущейСтрокиЗаполнены, Строка(ДанныеТекущейСтроки.НоменклатураСсылка),
				"<...>");
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"СписокХарактеристикХарактеристикаСсылка", "Заголовок", СтрШаблон(НСтр("ru = 'Характеристики: %1'"),
				ПредставлениеНоменклатуры));
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"СписокСкладскиеОстаткиСтруктурнаяЕдиница", "Заголовок", СтрШаблон(НСтр("ru = 'Склад. остатки: %1'"),
				ПредставлениеНоменклатуры));
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ФормаПереходНоменклатураХарактеристики", "Заголовок", НСтр("ru = 'Характеристики'"));
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"СписокХарактеристикХарактеристикаСсылка", "Заголовок", НСтр("ru = 'Характеристика'"));
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"СписокСкладскиеОстаткиСтруктурнаяЕдиница", "Заголовок", НСтр("ru = 'Склад'"));
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ФормаПереходНоменклатураХарактеристики", "Заголовок", НСтр("ru = 'Номенклатура'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьОтборСпискаСкладскиеОстатки()

&НаКлиенте
// Процедура управляет переключением видов отборов
//
Процедура ПереключитьВидОтбора(ВидОтбора)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, КешНастройкиПодбора.ТекущийВидОтбора, "Пометка", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ВидОтбора, "Пометка", Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокИерархияНоменклатуры", "Видимость", ВидОтбора = "ОтборПоПапкамНоменклатуры");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокИерархияНоменклатурныхГрупп", "Видимость", ВидОтбора = "ОтборПоНоменклатурнымГруппам");
	
	КешНастройкиПодбора.ТекущийВидОтбора = ВидОтбора;
	
КонецПроцедуры // ПереключитьВидОтбора()

&НаКлиенте
// Процедура отвечает за переход к списку характеристик номенклатуры
//
Процедура ПерейтиКСпискуХарактеристикНоменклатуры(НоменклатураСсылка)
	
	Если Элементы.ФормаОбновлятьЗаголовки.Пометка Тогда
		
		ВладелецХарактеристики = НоменклатураСсылка;
		
	КонецЕсли;
	
	ПоказатьСписокХарактеристик();
	ПодключитьОбработчикОжидания("УстановитьЗаголовкиСписков", 0.1, Истина);
	ВыводитьСоветВернутьсяКНоменклатуре();
	
	Элементы.НавигацияСписковНоменклатураХарактеристики.Заголовок = НСтр("ru ='Номенклатура'");
	
	Если НЕ ПустаяСтрока(ТекстПоиска) Тогда
		
		ТекстПоиска = "";
		
	КонецЕсли;
	
КонецПроцедуры // ПерейтиКСпискуХарактеристикНоменклатуры()

&НаКлиенте
// Процедура отвечает за возврат к списку номенклатуры из списка характеристик
//
Процедура ПерейтиКСпискуНоменклатуры()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокИерархияНоменклатуры", "Доступность", Истина);
	
	Если ЗначениеЗаполнено(ВладелецХарактеристики) Тогда
		
		Элементы.СписокЗапасы.ТекущаяСтрока = ВладелецХарактеристики;
		ВладелецХарактеристики = Неопределено;
		
	КонецЕсли;
	
	Элементы.СписокИерархияНоменклатуры.ЦветТекста = Новый Цвет();
	
	Если Элементы.ФормаАвтоСбросОтбораСписков.Пометка
		ИЛИ КешНастройкиПодбора.ИнициаторПереходаКХарактеристикам = "СписокЗапасы" Тогда
		
		Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница = Элементы.СтраницаНоменклатура;
		
	Иначе
		
		Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница = Элементы.СтраницаНоменклатураПоиска;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("УстановитьОтборСпискаСкладскиеОстатки", 0.1, Истина);
	ПодключитьОбработчикОжидания("УстановитьЗаголовкиСписков", 0.1, Истина);
	
	Элементы.НавигацияСписковНоменклатураХарактеристики.Заголовок = НСтр("ru ='Характеристики'");
	
	Если НЕ ПустаяСтрока(ТекстПоиска) Тогда
		
		ТекстПоиска = "";
		
	КонецЕсли;
	
КонецПроцедуры // ПерейтиКСпискуНоменклатуры()

&НаКлиенте
// Процедура отвечает за доступность кнопки перейти к характеристикам/номенклатуре
//
Процедура УправлениеДоступностьюНавигацииСписковНоменклатураХарактеристика()
	
	ДанныеТекущейСтроки = ПолучитьДанныеТекущейСтрокиСпискаЗапасов();
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НавигацияСписковНоменклатураХарактеристики", "Доступность", ДанныеТекущейСтроки.ИспользоватьХарактеристики);
		
	ИначеЕсли Элементы.НавигацияСписковНоменклатураХарактеристики.Доступность = Ложь
		И Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница <> Элементы.СтраницаНоменклатура
		И Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница <> Элементы.СтраницаНоменклатураПоиска Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НавигацияСписковНоменклатураХарактеристики", "Доступность", Истина);
		
	ИначеЕсли ДанныеТекущейСтроки = Неопределено
		И (Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница = Элементы.СтраницаНоменклатура 
			ИЛИ Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница = Элементы.СтраницаНоменклатураПоиска)Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НавигацияСписковНоменклатураХарактеристики", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыКонтекстноеМенюПоказатьСоставНабора", "Доступность", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры // УправлениеДоступностьюНавигацииСписковНоменклатураХарактеристика()

// Конец Управление списками


&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("НоменклатураСтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(СтруктураДанные.Дата),СтруктураДанные.Дата, ТекущаяДатаСеанса())));
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
// Процедура заполняет список аналогов по переданной номенклатуре
//
Процедура ПолучитьАналогиНоменклатуры(Номенклатура, СписокАналоговНоменклатуры)
	
	СписокАналоговНоменклатуры.Очистить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ РегистрСведений.АналогиНоменклатуры КАК Аналоги ГДЕ Номенклатура = &Номенклатура УПОРЯДОЧИТЬ ПО Приоритет");
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СписокАналоговНоменклатуры.Добавить(Выборка.Аналог);
		
	КонецЦикла;
	
	СписокАналоговНоменклатуры.Вставить(0, Номенклатура);
	
КонецПроцедуры // ПолучитьАналогиНоменклатуры()

&НаСервере
// Процедура заполняет данные объекта по переданным параметрам
// вызывается событием ПриЗаписиОбъекта, 
//
Процедура ЗаполнитьДанныеОбъекта()
	
	ЗаполнитьЗначенияСвойств(Объект, Параметры);
	
КонецПроцедуры // ЗаполнитьДанныеОбъекта()

&НаСервере
// Процедура заполняет сведения о документе вызвавшем подбор
// вызывается событием ПриЗаписиОбъекта, 
//
Процедура ЗаполнитьСведенияОДокументе(СведенияОДокументе)
	
	Обработки.ПодборПеремещение.СтруктураСведенийОДокументе(СведенияОДокументе);
	ЗаполнитьЗначенияСвойств(СведенияОДокументе, Объект);
	
КонецПроцедуры // ЗаполнитьСведенияОДокументе()

&НаСервере
// Функция помещает результаты подбора в хранилище
//
// Возвращает структуру:
//	Структура
//		- Адрес в хранилище, куда помещена выбранная номенклатура (корзина);
//		- Уникальный идентификатор формы владельца, необходим для идентификации при обработке результатов подбора;
//
Функция ЗаписатьПодборВХранилище() 
	
	ИмяПеречисления = ?(КешНастройкиПодбора.ТекущийВидОтбора = "ОтборПоНоменклатурнымГруппам", "КатегорииНоменклатуры", "ГруппыНоменклатуры");
	КатегорииНоменклатурыСервер.УстановитьНастройкуВидОтбораНоменклатуры(Перечисления.ВидыОтборовНоменклатуры[ИмяПеречисления]);
	
	АдресКорзиныВХранилище = ПоместитьВоВременноеХранилище(Объект.КорзинаОстатокРезервХарактеристика.Выгрузить(), Объект.УникальныйИдентификаторФормыВладельца);
	Возврат Новый Структура("АдресКорзиныВХранилище, УникальныйИдентификаторФормыВладельца", АдресКорзиныВХранилище, Объект.УникальныйИдентификаторФормыВладельца);
	
КонецФункции // ЗаписатьПодборВХранилище()

&НаСервере
// Процедура устанавливает свойства элементов формы
//
Процедура УстановитьСвойстваЭлементовФормы()
	
	ПодборНоменклатурыВДокументах.УстановитьПараметрыВыбораНоменклатуры(Элементы.КорзинаОстатокРезервХарактеристикаНоменклатура, Объект.ТипНоменклатуры);
	
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(СписокЗапасы);
	ТабличныеЧасти.Добавить(СписокЗапасыПоиска);
	ПодборНоменклатурыВДокументах.ВидимостьНаборовКомплектов(ТабличныеЧасти, КешНастройкиПодбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыЕдиницаИзмерения", "Видимость", ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокХарактеристикЕдиницаИзмерения", "Видимость", ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КорзинаОстатокРезервХарактеристикаЕдиницаИзмерения", "Видимость", ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИзменитьВидимостьСкладскихОстатков", "Пометка", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИзменитьВидимостьКорзины", "Пометка", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбновлятьЗаголовки", "Пометка", Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПереходНоменклатураХарактеристики", "Заголовок", НСтр("ru = 'Номенклатура'"));
	
	ВключеноРезервирование = ПолучитьФункциональнуюОпцию("РезервированиеЗапасов");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыРезервОтправитель", "Видимость", ВключеноРезервирование);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыРезервПолучатель", "Видимость", ВключеноРезервирование);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСкладскиеОстаткиРезерв", "Видимость", ВключеноРезервирование);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КорзинаОстатокРезервХарактеристикаРезерв", "Видимость", ВключеноРезервирование);
	
	ПоказатьКоманду_ЗаполнятьКоличествоРезерва = (Объект.ВидОперации <> Перечисления.ВидыОперацийПеремещениеЗапасов.ПередачаВЭксплуатацию 
		И Объект.ВидОперации <> Перечисления.ВидыОперацийПеремещениеЗапасов.ВозвратИзЭксплуатации
		И Объект.СтруктурнаяЕдиницаОтправитель.ТипСтруктурнойЕдиницы <> Перечисления.ТипыСтруктурныхЕдиниц.Розница 
		И Объект.СтруктурнаяЕдиницаОтправитель.ТипСтруктурнойЕдиницы <> Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет
		И ВключеноРезервирование); // Должны выполняться все условия из документа, а так же использоваться резервирование
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЗаполнятьКоличествоРезерва", "Видимость", ПоказатьКоманду_ЗаполнятьКоличествоРезерва);
	
КонецПроцедуры // УстановитьСвойстваЭлементовФормы()

&НаКлиенте
// Процедура устанавливает переданный элемент формы текущим
//
Процедура УстановитьТекущийЭлементыФормы(Элемент)
	
	ЭтаФорма.ТекущийЭлемент = Элемент;
	
КонецПроцедуры // УстановитьТекущийЭлементыФормы()

&НаКлиенте
// Процедура вызывает форму, которая содержит совет пользователю
//
Процедура ПоказатьСоветПользователю(ЗаголовокФормы, ТекстСообщения, ВидимостьБольшеНеПоказывать, ИмяПользовательскойНастройки)
	
	ПараметрыСовета = Новый Структура;
	ПараметрыСовета.Вставить("Заголовок", ЗаголовокФормы);
	ПараметрыСовета.Вставить("ТекстСообщения", ТекстСообщения);
	ПараметрыСовета.Вставить("ВидимостьБольшеНеПоказывать", ВидимостьБольшеНеПоказывать);
	ПараметрыСовета.Вставить("ИмяПользовательскойНастройки", ИмяПользовательскойНастройки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыводаСовета", ЭтотОбъект, ПараметрыСовета);
	ОткрытьФорму("ОбщаяФорма.ФормаСообщения", ПараметрыСовета, ЭтаФорма, Истина, , , ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ПоказатьСоветПользователю()

&НаКлиенте
// Процедура вывода совета пользователю о возврате к списку номенклатуры
//
Процедура ВыводитьСоветВернутьсяКНоменклатуре()
	
	Если КешНастройкиПодбора.ВыводитьСоветВернутьсяКНоменклатуре Тогда
		
		ЗаголовокФормы = НСтр("ru = 'Совет'");
		ТекстСообщения = НСтр("ru = 'Вернуться к списку номенклатуры можно при помощи контекстного меню или клавиши BackSpace.'");
		
		ПоказатьСоветПользователю(ЗаголовокФормы, ТекстСообщения, Истина, "ВыводитьСоветВернутьсяКНоменклатуре");
		
	КонецЕсли;
	
КонецПроцедуры // ВыводитьСоветВернутьсяКНоменклатуре()

&НаКлиенте
// Процедура обрабатывает результаты открытия дополнительной формы "Настройки"
//
Процедура ОбновитьНастройкиПодбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		Для Каждого ЭлементНастройки Из РезультатЗакрытия Цикл
			
			Если ЭлементНастройки.Значение <> КешНастройкиПодбора[ЭлементНастройки.Ключ] Тогда
				
				КешНастройкиПодбора[ЭлементНастройки.Ключ] = ЭлементНастройки.Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьНастройкиПодбора()

&НаКлиенте
// Процедура обрабатывает результаты открытия дополнительной формы "Количества"
//
//
Процедура ПослеВыбораКоличества(РезультатЗакрытия, ДанныеСтрокиКорзины) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		Если ДанныеСтрокиКорзины.СтрокаКорзины = Неопределено Тогда
			
			СтрокаКорзины = Объект.КорзинаОстатокРезервХарактеристика.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКорзины, ДанныеСтрокиКорзины);
			СтрокаКорзины.Количество = РезультатЗакрытия.Количество;
			
		Иначе
			
			СтрокаКорзины = Объект.КорзинаОстатокРезервХарактеристика.НайтиПоИдентификатору(ДанныеСтрокиКорзины.СтрокаКорзины);
			СтрокаКорзины.Количество = СтрокаКорзины.Количество + РезультатЗакрытия.Количество;
			
		КонецЕсли;
		
		СтрокаКорзины.Резерв	= ?(ВключеноРезервирование И ЗаполнятьКоличествоРезерва, МИН(СтрокаКорзины.Количество, ДанныеСтрокиКорзины.Свободно),0);
		
		Элементы.КорзинаОстатокРезервХарактеристика.ТекущаяСтрока = СтрокаКорзины.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры // ПослеВыбораКоличества()

&НаКлиенте
// Процедура обрабатывает результаты открытия дополнительной формы "Сведения о документе"
//
Процедура ПослеЗакрытияФормыСведенияОДокументе(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ПараметрыОсновнойФормыПодбора = ДополнительныеПараметры;
	
КонецПроцедуры // ПослеЗакрытияФормыСведенияОДокументе()

&НаКлиенте
// Процедура обрабатывает результаты открытия дополнительной формы "Расшифровка резерва"
//
Процедура ПослеОткрытияРасшифровкиРезерва(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ПараметрыОсновнойФормыПодбора = ДополнительныеПараметры;
	
КонецПроцедуры // ПослеОткрытияРасшифровкиРезерва()

&НаКлиенте
// Процедура обрабатывает результаты открытия формы совета пользователю
//
Процедура ПослеВыводаСовета(РезультатЗакрытия, ПараметрыСовета) Экспорт
	
	Если ПараметрыСовета.ВидимостьБольшеНеПоказывать 
		И ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		КешНастройкиПодбора.Вставить(ПараметрыСовета.ИмяПользовательскойНастройки, РезультатЗакрытия.ЗначениеПользовательскойНастройки);
		ПерсональныеНастройкиВызовСервера.Установить(РезультатЗакрытия.ЗначениеПользовательскойНастройки,
			ПараметрыСовета.ИмяПользовательскойНастройки);
		
	КонецЕсли;
	
КонецПроцедуры // ПослеВыводаСовета()

#КонецОбласти
