
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекДата = ТекущаяДатаСеанса();
	ТекГод = Год(ТекДата);
	Если Параметры.Свойство("ТекущиеДела") Тогда
		ПрошлыйМесяц = ДобавитьМесяц(ТекДата, -1);
		ТекГод = Год(ПрошлыйМесяц);
		ТекМесяц = Месяц(ПрошлыйМесяц);
	ИначеЕсли Параметры.Свойство("Месяц") И ЗначениеЗаполнено(Параметры.Месяц) Тогда
		ТекГод = Год(Параметры.Месяц);
		ТекМесяц = Месяц(Параметры.Месяц);
	Иначе
		ТекМесяц = Месяц(ТекДата);
	КонецЕсли;
	Если Параметры.Свойство("Организация") И ЗначениеЗаполнено(Параметры.Организация) Тогда
		Организация = Параметры.Организация;
	КонецЕсли; 
	Для ии = 1 По 12 Цикл
		Для каждого ИмяСекции Из ВсеСекцииПроверки() Цикл
			ИмяРеквизита = СтрШаблон("%1%2", ИмяСекции, ии);
			ЭтотОбъект[ИмяРеквизита] = Истина;
		КонецЦикла; 
		ИмяРеквизита = СтрШаблон("ПредварительныйАнализ%1", ии);
		ЭтотОбъект[ИмяРеквизита] = 1;
	КонецЦикла; 
	
	Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Элементы.Организация.Видимость = Ложь;
	ИначеЕсли Константы.УчетПоКомпании.Получить() Тогда
		Организация = Справочники.Организации.ОрганизацияКомпания();
		Элементы.Организация.Доступность = Ложь;
	КонецЕсли;
	
	УстановитьТекстНадписей();
	
	УчетИмущества = Константы.ФункциональнаяОпцияУчетВнеоборотныхАктивов.Получить();
	УчетРозничныхПродаж = Константы.ФункциональнаяОпцияУчетРозничныхПродаж.Получить();
	УчетВалютныхОпераций = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
	
	Для Сч = 1 По 12 Цикл
		Элементы.Найти("ГруппаНачислениеАмортизации" + Сч).Видимость = УчетИмущества;
		Элементы.Найти("ГруппаРасчетСебестоимостиВРознице" + Сч).Видимость = УчетРозничныхПродаж;
		Элементы.Найти("ГруппаРасчетКурсовыхРазниц" + Сч).Видимость = УчетВалютныхОпераций;
	КонецЦикла;
	
	СвойстваРазделов = ДатыЗапретаИзмененияСлужебный.СвойстваРазделов();
	ИспользоватьДатыЗапретаИзменения = Константы.ИспользоватьДатыЗапретаИзменения.Получить();
	ПереноситьДатуЗапретаРедактирования = Константы.ПереноситьДатуЗапретаРедактирования.Получить();
	
	ДатаЗапрета = ПолучитьДатуЗапретаРедактирования();
	
	Если ЗначениеЗаполнено(ДатаЗапрета) Тогда
		ДатаЗапретаРедактирования = ДатаЗапрета;
	Иначе
		Элементы.ДатаЗапретаРедактирования.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьЭлементовДляМобильногоКлиента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьПометкуТекМесяц();
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьФоновоеЗаданиеПолучениеДанных", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ФоновоеЗаданиеЗакрытиеМесяцаЗапущено Тогда
		ПредупредитьОАктивномФоновомЗадании(Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Элементы.Месяцы.Доступность = ЗначениеЗаполнено(Организация);
	ЗапуститьФоновоеЗаданиеПолучениеДанных();
	
	ОбновитьСписокОтчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗапретаРедактированияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ОткрытьФорму("Обработка.ЗакрытиеМесяца.Форма.ДатыЗапретаИзменения", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ФоновоеЗаданиеЗакрытиеМесяцаЗапущено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Месяцы.ТекущаяСтраница = Элементы.М1 Тогда
		ТекМесяц = 1;
	ИначеЕсли Элементы.Месяцы.ТекущаяСтраница = Элементы.М2 Тогда
		ТекМесяц = 2;
	ИначеЕсли Элементы.Месяцы.ТекущаяСтраница = Элементы.М3 Тогда
		ТекМесяц = 3;
	ИначеЕсли Элементы.Месяцы.ТекущаяСтраница = Элементы.М4 Тогда
		ТекМесяц = 4;
	ИначеЕсли Элементы.Месяцы.ТекущаяСтраница = Элементы.М5 Тогда
		ТекМесяц = 5;
	ИначеЕсли Элементы.Месяцы.ТекущаяСтраница = Элементы.М6 Тогда
		ТекМесяц = 6;
	ИначеЕсли Элементы.Месяцы.ТекущаяСтраница = Элементы.М7 Тогда
		ТекМесяц = 7;
	ИначеЕсли Элементы.Месяцы.ТекущаяСтраница = Элементы.М8 Тогда
		ТекМесяц = 8;
	ИначеЕсли Элементы.Месяцы.ТекущаяСтраница = Элементы.М9 Тогда
		ТекМесяц = 9;
	ИначеЕсли Элементы.Месяцы.ТекущаяСтраница = Элементы.М10 Тогда
		ТекМесяц = 10;
	ИначеЕсли Элементы.Месяцы.ТекущаяСтраница = Элементы.М11 Тогда
		ТекМесяц = 11;
	ИначеЕсли Элементы.Месяцы.ТекущаяСтраница = Элементы.М12 Тогда
		ТекМесяц = 12;
	КонецЕсли;
	
	ОбновитьСписокОтчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробноНажатие(Элемент)
	
	ЭтоКартинка = (Элемент.Вид = ВидДекорацииФормы.Картинка);
	Если ЭтоКартинка Тогда
		ИмяГруппы = СтрШаблон("Группа%1", СтрЗаменить(Элемент.Имя, "Картинка", "Подробно"));
	Иначе
		ИмяГруппы = СтрШаблон("Группа%1", СтрЗаменить(Элемент.Имя, "Описание", "Подробно"));
	КонецЕсли; 
	ВидимостьГруппы = НЕ Элементы[ИмяГруппы].Видимость;
	
	// Сворачиваем все развернутые группы подробностей
	Для ии = 1 По 12 Цикл
		НомерМесяца = Строка(ии);
		Для каждого ИмяСекции Из ВсеСекции() Цикл
			ИмяГруппыСвернуть = СтрШаблон("Группа%1Подробно%2", ИмяСекции, НомерМесяца);
			Если Элементы[ИмяГруппыСвернуть].Видимость Тогда
				Элементы[ИмяГруппыСвернуть].Видимость = Ложь;
				ИмяЭлементаОписание = СтрШаблон("%1Описание%2", ИмяСекции, ии);
				СтрокаСекция = СтрокаДерева(ОшибкиЗакрытияМесяца, ТекГод, ии, ИмяСекции);
				Если СтрокаСекция <> Неопределено И СтрокаСекция.СостояниеЗакрытия = СостояниеЗакрыт() Тогда
					Элементы[ИмяЭлементаОписание].Заголовок = ТекстЗакрытиеВыполненоСОшибками();
				ИначеЕсли СтрокаСекция <> Неопределено Тогда 
					Элементы[ИмяЭлементаОписание].Заголовок = ТекстОшибкиПередЗакрытием();
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	
	Элементы[ИмяГруппы].Видимость = ВидимостьГруппы;
	Если ВидимостьГруппы Тогда
		Если ЭтоКартинка Тогда
			ИмяЭлементаОписание = СтрЗаменить(Элемент.Имя, "Картинка", "Описание");
			Элементы[ИмяЭлементаОписание].Заголовок = НСтр("ru = 'скрыть детали'");
		Иначе
			Элемент.Заголовок = НСтр("ru = 'скрыть детали'");
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйАнализПриИзменении(Элемент)

	ИмяИзменяемогоРеквизита = СтрШаблон("ПредварительныйАнализ%1", ТекМесяц);
	Если ЭтотОбъект[ИмяИзменяемогоРеквизита] = 2 Тогда
		ЭтотОбъект[ИмяИзменяемогоРеквизита] = 0;
	КонецЕсли; 
	Для каждого ИмяСекции Из ВсеСекцииПроверки() Цикл
		ИмяРеквизита = СтрШаблон("%1%2", ИмяСекции, ТекМесяц);
		ЭтотОбъект[ИмяРеквизита] = (ЭтотОбъект[ИмяИзменяемогоРеквизита] = 1);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПредварительногоАнализаПриИзменении(Элемент)
	
	ОбновитьЗначениеПереключателяГруппы(ЭтотОбъект, ВсеСекцииПроверки(), ТекМесяц, "ПредварительныйАнализ");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеМесяцаПриИзменении(Элемент)
	
	ИмяИзменяемогоРеквизита = СтрШаблон("ЗакрытиеМесяца%1", ТекМесяц);
	Если ЭтотОбъект[ИмяИзменяемогоРеквизита] = 2 Тогда
		ЭтотОбъект[ИмяИзменяемогоРеквизита] = 0;
	КонецЕсли; 
	Для каждого ИмяСекции Из ВсеСекцииЗакрытияМесяца() Цикл
		Если СекцияНедоступна(ИмяСекции, ЭтотОбъект) Тогда
			Продолжить;
		КонецЕсли; 
		ИмяРеквизита = СтрШаблон("%1%2", ИмяСекции, ТекМесяц);
		ЭтотОбъект[ИмяРеквизита] = (ЭтотОбъект[ИмяИзменяемогоРеквизита] = 1);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура РежимЗакрытияМесяцаПриИзменении(Элемент)
	
	ПроверяемыеСекции = Новый Массив;
	Для каждого ИмяСекции Из ВсеСекцииЗакрытияМесяца() Цикл
		Если СекцияНедоступна(ИмяСекции, ЭтотОбъект) Тогда
			Продолжить;
		КонецЕсли; 
		ПроверяемыеСекции.Добавить(ИмяСекции);
	КонецЦикла; 
	ОбновитьЗначениеПереключателяГруппы(ЭтотОбъект, ПроверяемыеСекции, ТекМесяц, "ЗакрытиеМесяца");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекГодНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ГодНачала = ТекГод - 5;
	ГодКонца = ТекГод + 5;
	ТекущаяДата = ТекущаяДатаСервер();
	Если ГодКонца > Год(ТекущаяДата) Тогда
		ГодКонца = Год(ТекущаяДата);
	КонецЕсли; 
	СписокГодов = Новый СписокЗначений;
	Для НомерГода = ГодНачала По ГодКонца Цикл
		СписокГодов.Добавить(НомерГода, Формат(НомерГода, "ЧГ=0"));
	КонецЦикла;
	Оповещение = Новый ОписаниеОповещения("ТекГодНажатиеЗавершение", ЭтотОбъект);
	ПоказатьВыборИзМеню(Оповещение, СписокГодов, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекГодНажатиеЗавершение(ЭлементСписка, ДополнительныеПараметры) Экспорт
	
	Если ЭлементСписка = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ТекГод = ЭлементСписка.Значение;
	УстановитьТекстНадписей();
	ЗапуститьФоновоеЗаданиеПолучениеДанных();
	
	ОбновитьСписокОтчетов();
	
КонецПроцедуры

#Область Подключаемые

&НаКлиенте
Процедура Подключаемый_ОтрицательныеОстаткиНажатие(Элемент)
	
	ОтборРасшифровки = Новый Структура;
	Месяц = Дата(ТекГод, ТекМесяц, 1);
	ОтборРасшифровки.Вставить("ПериодРасшифровки", Новый СтандартныйПериод(НачалоМесяца(Месяц), КонецМесяца(Месяц)));
	ОтборРасшифровки.Вставить("Организация", Организация);
	ОткрытьФорму("Отчет.ЗакрытиеМесяцаАнализОтрицательныхОстатков.Форма", Новый Структура("Отбор, СформироватьПриОткрытии", 
		ОтборРасшифровки, Истина), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПереносРезерваНажатие(Элемент)
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Организация", Организация);
	СтруктураОткрытия.Вставить("Месяц", Дата(ТекГод, ТекМесяц, 1));
	Оповещение = Новый ОписаниеОповещения("ПереносРезерваНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ЗакрытиеМесяца.Форма.ПереносРезервов", СтруктураОткрытия, ЭтотОбъект, , , , 
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОстаткиСебестоимостиБезКоличестваНажатие(Элемент)
	
	ОтборРасшифровки = Новый Структура;
	Месяц = Дата(ТекГод, ТекМесяц, 1);
	ОтборРасшифровки.Вставить("ПериодРасшифровки", Новый СтандартныйПериод(НачалоМесяца(Месяц), КонецМесяца(Месяц)));
	ОтборРасшифровки.Вставить("Организация", Организация);
	ОткрытьФорму("Отчет.Запасы.Форма", Новый Структура("Отбор, КлючВарианта, СформироватьПриОткрытии", 
		ОтборРасшифровки, "ОстаткиСебестоимостиБезКоличества", Истина), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереносРезерваНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли; 	
	ЗапуститьФоновоеЗаданиеПолучениеДанных();
	
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОткрытыеКассовыеСменыНажатие(Элемент)
	
	СтрокаСекции = СтрокаДерева(ОшибкиЗакрытияМесяца, ТекГод, ТекМесяц, СекцияРасчетФактическойСебестоимости());
	Если СтрокаСекции = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Месяц = Дата(ТекГод, ТекМесяц, 1);
	Период = Новый СтандартныйПериод(НачалоМесяца(Месяц), КонецМесяца(Месяц));
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Режим", ТипСообщенияОткрытыеКассовыеСмены());
	Для каждого СтрокаОшибки Из СтрокаСекции.ПолучитьЭлементы() Цикл
		Если ТипЗнч(СтрокаОшибки.Подробности) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли; 
		Если СтрокаОшибки.Подробности.Тип <> ТипСообщенияОткрытыеКассовыеСмены() Тогда
			Продолжить;
		КонецЕсли;
		СтруктураОткрытия.Вставить("Документы", СтрокаОшибки.Подробности.Документы);
	КонецЦикла; 
	Оповещение = Новый ОписаниеОповещения("ОткрытыеКассовыеСменыНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ЗакрытиеМесяца.Форма.СписокДокументов", СтруктураОткрытия, ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытыеКассовыеСменыНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗапуститьФоновоеЗаданиеПолучениеДанных();
	
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ИзмененныеДокументыНажатие(Элемент)
	
	СтрокаСекции = СтрокаДерева(ОшибкиЗакрытияМесяца, ТекГод, ТекМесяц, СекцияРасчетФактическойСебестоимости());
	Если СтрокаСекции = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Режим", ТипСообщенияИзмененныеДокументы());
	Для каждого СтрокаОшибки Из СтрокаСекции.ПолучитьЭлементы() Цикл
		Если ТипЗнч(СтрокаОшибки.Подробности) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли; 
		Если СтрокаОшибки.Подробности.Тип <> ТипСообщенияИзмененныеДокументы() Тогда
			Продолжить;
		КонецЕсли;
		СтруктураОткрытия.Вставить("Документы", СтрокаОшибки.Подробности.Документы);
	КонецЦикла; 
	ОткрытьФорму("Обработка.ЗакрытиеМесяца.Форма.СписокДокументов", СтруктураОткрытия, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОшибкаИнтеркампаниНажатие(Элемент)
	
	СтрокаСекции = СтрокаДерева(ОшибкиЗакрытияМесяца, ТекГод, ТекМесяц, СекцияРасчетФактическойСебестоимости());
	Если СтрокаСекции = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("ПериодРегистрации", КонецМесяца(Дата(ТекГод, ТекМесяц, 1)));
	ОткрытьФорму("Обработка.ПомощникПередачиТоваровМеждуОрганизациями.Форма", СтруктураОткрытия, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НезачтенныеАвансыПокупателейНажатие(Элемент)
	
	СтрокаСекции = СтрокаДерева(ОшибкиЗакрытияМесяца, ТекГод, ТекМесяц, СекцияПроверкаАвансыПокупателей());
	Если СтрокаСекции = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Режим", "Покупатели");
	СтруктураОткрытия.Вставить("Организация", Организация);
	СтруктураОткрытия.Вставить("Месяц", Дата(ТекГод, ТекМесяц, 1));
	Для каждого СтрокаОшибки Из СтрокаСекции.ПолучитьЭлементы() Цикл
		Если ТипЗнч(СтрокаОшибки.Подробности) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли; 
		Если СтрокаОшибки.Подробности.Тип <> ТипСообщенияНезачтенныеАвансыПокупателей() Тогда
			Продолжить;
		КонецЕсли;
		СтруктураОткрытия.Вставить("Контрагенты", СтрокаОшибки.Подробности.Контрагенты);
	КонецЦикла; 
	Оповещение = Новый ОписаниеОповещения("НезачтенныеАвансыПокупателейЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ЗакрытиеМесяца.Форма.СписокКонтрагентов", СтруктураОткрытия, ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НезачтенныеАвансыПокупателейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли; 	
	ЗапуститьФоновоеЗаданиеПредварительныйАнализ();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НезачтенныеАвансыПоставщикамНажатие(Элемент)
	
	СтрокаСекции = СтрокаДерева(ОшибкиЗакрытияМесяца, ТекГод, ТекМесяц, СекцияПроверкаАвансыПоставщикам());
	Если СтрокаСекции = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Режим", "Поставщики");
	СтруктураОткрытия.Вставить("Организация", Организация);
	СтруктураОткрытия.Вставить("Месяц", Дата(ТекГод, ТекМесяц, 1));
	Для каждого СтрокаОшибки Из СтрокаСекции.ПолучитьЭлементы() Цикл
		Если ТипЗнч(СтрокаОшибки.Подробности) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли; 
		Если СтрокаОшибки.Подробности.Тип <> ТипСообщенияНезачтенныеАвансыПоставщикам() Тогда
			Продолжить;
		КонецЕсли;
		СтруктураОткрытия.Вставить("Контрагенты", СтрокаОшибки.Подробности.Контрагенты);
	КонецЦикла; 
	Оповещение = Новый ОписаниеОповещения("НезачтенныеАвансыПоставщикамЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ЗакрытиеМесяца.Форма.СписокКонтрагентов", СтруктураОткрытия, ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НезачтенныеАвансыПоставщикамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли; 	
	ЗапуститьФоновоеЗаданиеПредварительныйАнализ();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НеверноВыбранаСтатьяДДСНажатие(Элемент)
	
	СтрокаСекции = СтрокаДерева(ОшибкиЗакрытияМесяца, ТекГод, ТекМесяц, СекцияПроверкаСтатьиДДС());
	Если СтрокаСекции = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Режим", "НеверноВыбранаСтатьяДДС");
	Для каждого СтрокаОшибки Из СтрокаСекции.ПолучитьЭлементы() Цикл
		Если ТипЗнч(СтрокаОшибки.Подробности) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли; 
		Если СтрНайти(Элемент.Имя, СтрокаОшибки.Подробности.Тип) = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтруктураОткрытия.Вставить("Тип", СтрокаОшибки.Подробности.Тип);
		СтруктураОткрытия.Вставить("Документы", СтрокаОшибки.Подробности.Документы);
	КонецЦикла; 
	ОткрытьФорму("Обработка.ЗакрытиеМесяца.Форма.СписокДокументов", СтруктураОткрытия, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НесоответствиеДоговоровОрганизацийНажатие(Элемент)
	
	СтрокаСекции = СтрокаДерева(ОшибкиЗакрытияМесяца, ТекГод, ТекМесяц, СекцияПроверкаОрганизацииИДоговоры());
	Если СтрокаСекции = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Режим", "НесоответствиеДоговоровОрганизаций");
	Для каждого СтрокаОшибки Из СтрокаСекции.ПолучитьЭлементы() Цикл
		Если ТипЗнч(СтрокаОшибки.Подробности) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли; 
		Если СтрНайти(Элемент.Имя, СтрокаОшибки.Подробности.Тип) = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтруктураОткрытия.Вставить("Тип", СтрокаОшибки.Подробности.Тип);
		СтруктураОткрытия.Вставить("Документы", СтрокаОшибки.Подробности.Документы);
	КонецЦикла; 
	ОткрытьФорму("Обработка.ЗакрытиеМесяца.Форма.СписокДокументов", СтруктураОткрытия, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПредварительныйАнализ(Команда)
	
	Если ФоновоеЗаданиеПредварительныйАнализЗапущено Тогда
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеПредварительныйАнализИдентификатор);
		ФоновоеЗаданиеПредварительныйАнализЗапущено = Ложь;
		УстановитьДоступностьПредварительныйАнализ();
	Иначе
		ЗапуститьФоновоеЗаданиеПредварительныйАнализ();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗакрытиеМесяца(Команда)
	
	Если КонецМесяца(Дата(ТекГод, ТекМесяц, 1)) <= КонецДня(ДатаЗапретаРедактирования) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Нельзя отменить закрытие месяца, т.к. он относится к запрещенному для редактирования периоду.'"));
		Возврат;
	КонецЕсли;
	ПроверяемыеСекции = Новый Массив;
	Для каждого ИмяСекции Из ВсеСекцииЗакрытияМесяца() Цикл
		ИмяРеквизита = СтрШаблон("%1%2", ИмяСекции, ТекМесяц);
		ЭтотОбъект[ИмяРеквизита] = Ложь;
		Если СекцияНедоступна(ИмяСекции, ЭтотОбъект) Тогда
			Продолжить;
		КонецЕсли; 
		ПроверяемыеСекции.Добавить(ИмяСекции);
	КонецЦикла;
	ОбновитьЗначениеПереключателяГруппы(ЭтотОбъект, ПроверяемыеСекции, ТекМесяц, "ЗакрытиеМесяца");
	ЗапуститьФоновоеЗаданиеЗакрытиеМесяца();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗакрытиеМесяца(Команда)
	
	Если ФоновоеЗаданиеЗакрытиеМесяцаЗапущено Тогда
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеЗакрытиеМесяцаИдентификатор);
		ФоновоеЗаданиеЗакрытиеМесяцаЗапущено = Ложь;
		УстановитьДоступностьПриЗакрытииМесяца();
		ЗапуститьФоновоеЗаданиеПолучениеДанных();
	Иначе
		Если КонецМесяца(Дата(ТекГод, ТекМесяц, 1)) <= КонецДня(ДатаЗапретаРедактирования) Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru='Нельзя закрыть месяц, т.к. он относится к запрещенному для редактирования периоду.'"));
			Возврат;
		КонецЕсли;
		ЗапуститьФоновоеЗаданиеЗакрытиеМесяца();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ГодВперед(Команда)
	
	ТекГод = ТекГод + 1;
	УстановитьТекстНадписей();
	ЗапуститьФоновоеЗаданиеПолучениеДанных();
	
	ОбновитьСписокОтчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГодНазад(Команда)
	
	ТекГод = ?(ТекГод = 1, ТекГод, ТекГод - 1);
	УстановитьТекстНадписей();
	ЗапуститьФоновоеЗаданиеПолучениеДанных();
	
	ОбновитьСписокОтчетов();
	
КонецПроцедуры

#Область ДлительныеОперации

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ДатыЗапретаИзмененияПриЗакрытии" Тогда
		
		ДатаЗапрета = ПолучитьДатуЗапретаРедактирования();
		
		Если ЗначениеЗаполнено(ДатаЗапрета) Тогда
			ДатаЗапретаРедактирования = ДатаЗапрета;
		Иначе
			Элементы.ДатаЗапретаРедактирования.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область УправлениеВнешнимВидомФормы

&НаСервере
Процедура УстановитьВидимостьЭлементовДляМобильногоКлиента()
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстНадписей()
	
	Элементы.ГодНазад.Заголовок = СтрШаблон("%1 <<", Формат(ТекГод - 1, "ЧГ="));
	Элементы.ГодВперед.Заголовок = СтрШаблон(">> %1", Формат(ТекГод + 1, "ЧГ="));
	Элементы.ГодВперед.Доступность = НЕ (ТекГод + 1 > Год(ТекущаяДатаСеанса()));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуТекМесяц()
	
	Элементы.Месяцы.ТекущаяСтраница = Элементы.Найти("М" + ТекМесяц);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДанных

&НаСервере
Процедура ОбновитьДанные(АдресХранилища, ДополнениеДанных = Ложь)
	
	Если АдресХранилища = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли; 
	
	Если ДополнениеДанных Тогда
		
		ИзмененныеСтроки = ОбновитьДанныеДерева(ДанныеЗаполнения.ОшибкиЗакрытияМесяца);
		Для каждого СтрокаСекция Из ИзмененныеСтроки Цикл
			ВывестиСообщенияСекции(СтрокаСекция);
		КонецЦикла;
		
	Иначе
		
		ЗначениеВРеквизитФормы(ДанныеЗаполнения.ОшибкиЗакрытияМесяца, "ОшибкиЗакрытияМесяца");
		Для каждого СтрокаМесяц Из ОшибкиЗакрытияМесяца.ПолучитьЭлементы() Цикл
			Год = Год(СтрокаМесяц.Месяц);
			НомерМесяца = Строка(Месяц(СтрокаМесяц.Месяц));
			ПериодДетальногоАнализа = (Год = ТекГод);
			Если НЕ ПериодДетальногоАнализа Тогда
				Продолжить;
			КонецЕсли; 
			ТребуетсяЗакрытие = Ложь;
			ОбщееСостояние = СостояниеЗакрыт();
			Для каждого СтрокаСекция Из СтрокаМесяц.ПолучитьЭлементы() Цикл
				ВывестиСообщенияСекции(СтрокаСекция, ТребуетсяЗакрытие, ОбщееСостояние);
			КонецЦикла;
			ИмяГруппыСтраницы = СтрШаблон("Страницы%1", НомерМесяца);
			Если ТребуетсяЗакрытие Тогда
				ИмяСтраницы = СтрШаблон("Операции%1", НомерМесяца);
			Иначе
				ИмяСтраницы = СтрШаблон("ЗакрытиеНеТребуется%1", НомерМесяца);
			КонецЕсли; 
			Элементы[ИмяГруппыСтраницы].ТекущаяСтраница = Элементы[ИмяСтраницы];
			СтраницаМесяц = Элементы[СтрШаблон("М%1", НомерМесяца)];
			Если НЕ ТребуетсяЗакрытие Тогда
				СтраницаМесяц.Картинка = БиблиотекаКартинок.ЗеленыйШар;
			ИначеЕсли ОбщееСостояние = СостояниеЗакрыт() Тогда 
				СтраницаМесяц.Картинка = БиблиотекаКартинок.ЗеленыйШар;
			ИначеЕсли ОбщееСостояние = СостояниеНеЗакрыт() Тогда 
				СтраницаМесяц.Картинка = БиблиотекаКартинок.СерыйШар;
			ИначеЕсли ОбщееСостояние = СостояниеОшибки() Тогда
				СтраницаМесяц.Картинка = БиблиотекаКартинок.Внимание16;
			Иначе
				СтраницаМесяц.Картинка = БиблиотекаКартинок.ЗеленыйШар;
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли;
	
	ИменаСекций = Новый Массив;
	Для каждого ИмяСекции Из ВсеСекцииЗакрытияМесяца() Цикл
		Если СекцияНедоступна(ИмяСекции, ЭтотОбъект) Тогда
			Продолжить;
		КонецЕсли; 
		ИменаСекций.Добавить(ИмяСекции);
	КонецЦикла; 
	Для ии = 1 По 12 Цикл
		ОбновитьЗначениеПереключателяГруппы(ЭтотОбъект, ИменаСекций, ии, "ЗакрытиеМесяца");
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция ОбновитьДанныеДерева(Дерево)
	
	Результат = Новый Массив;
	Для каждого СтрокаДереваМесяц Из Дерево.Строки Цикл
		СтрокаМесяц = Неопределено;
		Для каждого Строка Из ОшибкиЗакрытияМесяца.ПолучитьЭлементы() Цикл
			Если Строка.Месяц = СтрокаДереваМесяц.Месяц Тогда
				СтрокаМесяц = Строка;
			КонецЕсли; 
		КонецЦикла;
		Если СтрокаМесяц = Неопределено Тогда
			Прервать;
		КонецЕсли; 
		Для каждого СтрокаДереваСекция Из СтрокаДереваМесяц.Строки Цикл
			СтрокаСекция = Неопределено;
			Для каждого Строка Из СтрокаМесяц.ПолучитьЭлементы() Цикл
				Если Строка.Секция = СтрокаДереваСекция.Секция Тогда
					СтрокаСекция = Строка;
				КонецЕсли; 
			КонецЦикла;
			Если СтрокаСекция = Неопределено Тогда
				СтрокаСекция = СтрокаМесяц.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСекция, СтрокаМесяц);
				СтрокаСекция.Секция = СтрокаДереваСекция.Секция;
			КонецЕсли;
			СтрокаСекция.СостояниеЗакрытия = СтрокаДереваСекция.СостояниеЗакрытия;
			СтрокаСекция.ТекстСообщения = СтрокаДереваСекция.ТекстСообщения;
			СтрокаСекция.ПолучитьЭлементы().Очистить();
			Для каждого СтрокаДереваСообщение Из СтрокаДереваСекция.Строки Цикл
				НоваяСтрока = СтрокаСекция.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДереваСообщение);
			КонецЦикла;
			Результат.Добавить(СтрокаСекция);
		КонецЦикла; 
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВывестиСообщенияСекции(СтрокаСекция, ТребуетсяЗакрытие = Неопределено, ОбщееСостояние = Неопределено)
	
	Год = Год(СтрокаСекция.Месяц);
	НомерМесяца = Строка(Месяц(СтрокаСекция.Месяц));
	ИмяСекции = СтрокаСекция.Секция;
	ИмяЭлементаКартинка = СтрШаблон("%1Картинка%2", ИмяСекции, НомерМесяца);
	ИмяЭлементаОписание = СтрШаблон("%1Описание%2", ИмяСекции, НомерМесяца);
	ИмяРеквизита = СтрШаблон("%1%2", ИмяСекции, НомерМесяца);
	Элементы[ИмяЭлементаОписание].Гиперссылка = Ложь;
	Если СтрокаСекция.ПолучитьЭлементы().Количество() <> 0 Тогда
		Элементы[ИмяЭлементаКартинка].Картинка = БиблиотекаКартинок.Внимание16;
		Элементы[ИмяЭлементаКартинка].Гиперссылка = Истина;
		Если СтрокаСекция.СостояниеЗакрытия = СостояниеЗакрыт() Тогда
			Элементы[ИмяЭлементаОписание].Заголовок = ТекстЗакрытиеВыполненоСОшибками();
		Иначе
			Элементы[ИмяЭлементаОписание].Заголовок = ТекстОшибкиПередЗакрытием();
		КонецЕсли;
		Элементы[ИмяЭлементаОписание].Гиперссылка = Истина;
		Если СтрокаСекция.СостояниеЗакрытия <> СостояниеЗакрытиеНеТребуется() Тогда
			ТребуетсяЗакрытие = Истина;
		КонецЕсли; 
		ОбщееСостояние = СостояниеОшибки();
	ИначеЕсли СтрокаСекция.СостояниеЗакрытия = СостояниеЗакрыт() Тогда
		Элементы[ИмяЭлементаКартинка].Картинка = БиблиотекаКартинок.ЗеленыйШар;
		Элементы[ИмяЭлементаКартинка].Гиперссылка = Ложь;
		Элементы[ИмяЭлементаОписание].Заголовок = ТекстЗакрытиеВыполненоУспешно();
		Элементы[ИмяЭлементаОписание].Гиперссылка = Ложь;
		ТребуетсяЗакрытие = Истина;
	ИначеЕсли СтрокаСекция.СостояниеЗакрытия = СостояниеНеЗакрыт() Тогда
		Элементы[ИмяЭлементаКартинка].Картинка = БиблиотекаКартинок.СерыйШар;
		Элементы[ИмяЭлементаКартинка].Гиперссылка = Ложь;
		Элементы[ИмяЭлементаОписание].Заголовок = ТекстЗакрытиеНеВыполнено();
		Элементы[ИмяЭлементаОписание].Гиперссылка = Ложь;
		ТребуетсяЗакрытие = Истина;
		Если ОбщееСостояние = СостояниеЗакрыт() Тогда
			ОбщееСостояние = СостояниеНеЗакрыт();
		КонецЕсли; 
	ИначеЕсли СтрокаСекция.СостояниеЗакрытия = СостояниеЗакрытиеНеТребуется() Тогда
		Элементы[ИмяЭлементаКартинка].Картинка = БиблиотекаКартинок.ЗеленыйШар;
		Элементы[ИмяЭлементаКартинка].Гиперссылка = Ложь;
		Элементы[ИмяЭлементаОписание].Заголовок = ТекстЗакрытиеНеТребуется();
		Элементы[ИмяЭлементаОписание].Гиперссылка = Ложь;
	Иначе
		Элементы[ИмяЭлементаКартинка].Картинка = БиблиотекаКартинок.ЗеленыйШар;
		Элементы[ИмяЭлементаКартинка].Гиперссылка = Ложь;
		Элементы[ИмяЭлементаОписание].Заголовок = ТекстЗакрытиеНеТребуется();
		Элементы[ИмяЭлементаОписание].Гиперссылка = Ложь;
	КонецЕсли;
	СекцииПроверки = ВсеСекцииПроверки();
	ЭтотОбъект[ИмяРеквизита] = (СтрокаСекция.СостояниеЗакрытия = СостояниеЗакрыт());
	Если СтрокаСекция.ПолучитьЭлементы().Количество() <> 0 Тогда
		ИмяГруппыПодробно = СтрШаблон("Группа%1Подробно%2", ИмяСекции, НомерМесяца);
		ВывестиСообщения(Элементы[ИмяГруппыПодробно], СтрокаСекция.ПолучитьЭлементы());
	КонецЕсли;
	
КонецПроцедуры
 
&НаСервере
Процедура УдалитьСообщения(УдалитьПроверки = Истина, УдалитьЗакрытия = Истина, ТолькоТекущийМесяц = Ложь)
	
	СекцииПроверки = ВсеСекцииПроверки();
	СекцииЗакрытие = ВсеСекцииЗакрытияМесяца();
	Если ТолькоТекущийМесяц Тогда
		МесяцНачало = ТекМесяц;
		МесяцКонец = ТекМесяц;
	Иначе
		МесяцНачало = 1;
		МесяцКонец = 12;
	КонецЕсли;
	ЭлементыКУдалению = Новый Массив;
	Для каждого ИмяСекции Из ВсеСекции() Цикл
		Если НЕ УдалитьПроверки И СекцииПроверки.Найти(ИмяСекции) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Если НЕ УдалитьЗакрытия И СекцииЗакрытие.Найти(ИмяСекции) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для ии = МесяцНачало По МесяцКонец Цикл
			ИмяГруппыПодробно = СтрШаблон("Группа%1Подробно%2", ИмяСекции, ии);
			ГруппаПодробно = Элементы[ИмяГруппыПодробно];
			ЭлементыКУдалению.Добавить(ГруппаПодробно);
		КонецЦикла; 
	КонецЦикла;
	Для каждого Элемент Из ЭлементыКУдалению Цикл
		УдалитьЭлементыРекурсивно(Элемент);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыРекурсивно(Группа)
	
	ЭлементыКУдалению = Новый Массив;
	Для каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			УдалитьЭлементыРекурсивно(Элемент);
		КонецЕсли;
		ЭлементыКУдалению.Добавить(Элемент);
	КонецЦикла;
	Для каждого Элемент Из ЭлементыКУдалению Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСообщения(Группа, СтрокиОшибки)
	
	Для каждого СтрокаОшибка Из СтрокиОшибки Цикл
		НомерМесяца = Строка(Месяц(СтрокаОшибка.Месяц));
		ИмяСекции = СтрокаОшибка.Секция;
		Если ТипЗнч(СтрокаОшибка.Подробности) = Тип("Структура") И СтрокаОшибка.Подробности.Свойство("Тип") Тогда
			ТипСообщения = СтрокаОшибка.Подробности.Тип;
		Иначе
			ТипСообщения = "Прочее";
		КонецЕсли; 
		ИмяСообщения = СтрШаблон("%1%2%3", ИмяСекции, ТипСообщения, НомерМесяца);
		ИмяГруппы = СтрШаблон("Группа%1", ИмяСообщения);
		ИмяЭлементаОписание = СтрШаблон("Описание%1", ИмяСообщения);
		ИмяЭлементаСсылка = СтрШаблон("Ссылка%1", ИмяСообщения);
		Если Элементы.Найти(ИмяЭлементаОписание) = Неопределено Тогда
			// Новое сообщение
			ГруппаСообщение = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Группа);
			ГруппаСообщение.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаСообщение.ОтображатьЗаголовок = Ложь;
			ГруппаСообщение.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаСообщение.РастягиватьПоВертикали = Ложь;
			ГруппаСообщение.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаСообщение.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
			ГруппаСообщение.ЦветФона = ЦветаСтиля.ЦветФонаПодсказки;
			ЭлементОписание = Элементы.Добавить(ИмяЭлементаОписание, Тип("ДекорацияФормы"), ГруппаСообщение);
			ЭлементОписание.Вид = ВидДекорацииФормы.Надпись;
			ЭлементОписание.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Верх;
			ЭлементОписание.РастягиватьПоГоризонтали = Истина;
			ЭлементОписание.АвтоМаксимальнаяШирина = Ложь;
			ЭлементОписание.МаксимальнаяШирина = 62;
			ЭлементОписание.Заголовок = СтрокаОшибка.ТекстСообщения;
			Если ТипСообщения = ТипСообщенияОтрицательныеОстатки() Тогда
				ЭлементСсылка = Элементы.Добавить(ИмяЭлементаСсылка, Тип("ДекорацияФормы"), ГруппаСообщение);
				ЭлементСсылка.Вид = ВидДекорацииФормы.Надпись;
				ЭлементСсылка.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Верх;
				ЭлементСсылка.Заголовок = НСтр("ru = 'Анализ отрицательных остатков'");
				ЭлементСсылка.Гиперссылка = Истина;
				ЭлементСсылка.УстановитьДействие("Нажатие", "Подключаемый_ОтрицательныеОстаткиНажатие");
			ИначеЕсли ТипСообщения = ТипСообщенияПереносРезерва() Тогда
				ЭлементСсылка = Элементы.Добавить(ИмяЭлементаСсылка, Тип("ДекорацияФормы"), ГруппаСообщение);
				ЭлементСсылка.Вид = ВидДекорацииФормы.Надпись;
				ЭлементСсылка.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Верх;
				ЭлементСсылка.Заголовок = НСтр("ru = 'Список резервов'");
				ЭлементСсылка.Гиперссылка = Истина;
				ЭлементСсылка.УстановитьДействие("Нажатие", "Подключаемый_ПереносРезерваНажатие");
			ИначеЕсли ТипСообщения = ТипСообщенияОстаткиСебестоимостиБезКоличества() Тогда
				ЭлементСсылка = Элементы.Добавить(ИмяЭлементаСсылка, Тип("ДекорацияФормы"), ГруппаСообщение);
				ЭлементСсылка.Вид = ВидДекорацииФормы.Надпись;
				ЭлементСсылка.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Верх;
				ЭлементСсылка.Заголовок = НСтр("ru = 'Остатки себестоимости без количества'");
				ЭлементСсылка.Гиперссылка = Истина;
				ЭлементСсылка.УстановитьДействие("Нажатие", "Подключаемый_ОстаткиСебестоимостиБезКоличестваНажатие");
			ИначеЕсли ТипСообщения = ТипСообщенияОткрытыеКассовыеСмены() Тогда
				ЭлементСсылка = Элементы.Добавить(ИмяЭлементаСсылка, Тип("ДекорацияФормы"), ГруппаСообщение);
				ЭлементСсылка.Вид = ВидДекорацииФормы.Надпись;
				ЭлементСсылка.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Верх;
				ЭлементСсылка.Заголовок = НСтр("ru = 'Открытые кассовые смены'");
				ЭлементСсылка.Гиперссылка = Истина;
				ЭлементСсылка.УстановитьДействие("Нажатие", "Подключаемый_ОткрытыеКассовыеСменыНажатие");
			ИначеЕсли ТипСообщения = ТипСообщенияИзмененныеДокументы() Тогда
				ЭлементСсылка = Элементы.Добавить(ИмяЭлементаСсылка, Тип("ДекорацияФормы"), ГруппаСообщение);
				ЭлементСсылка.Вид = ВидДекорацииФормы.Надпись;
				ЭлементСсылка.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Верх;
				ЭлементСсылка.Заголовок = НСтр("ru = 'Список измененных документов'");
				ЭлементСсылка.Гиперссылка = Истина;
				ЭлементСсылка.УстановитьДействие("Нажатие", "Подключаемый_ИзмененныеДокументыНажатие");
			ИначеЕсли ТипСообщения = ТипСообщенияОшибкаИнтеркампани() Тогда
				ЭлементСсылка = Элементы.Добавить(ИмяЭлементаСсылка, Тип("ДекорацияФормы"), ГруппаСообщение);
				ЭлементСсылка.Вид = ВидДекорацииФормы.Надпись;
				ЭлементСсылка.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Верх;
				ЭлементСсылка.Заголовок = НСтр("ru = 'Помощник передачи товаров'");
				ЭлементСсылка.Гиперссылка = Истина;
				ЭлементСсылка.УстановитьДействие("Нажатие", "Подключаемый_ОшибкаИнтеркампаниНажатие");
			ИначеЕсли ТипСообщения = ТипСообщенияНезачтенныеАвансыПокупателей() Тогда
				ЭлементСсылка = Элементы.Добавить(ИмяЭлементаСсылка, Тип("ДекорацияФормы"), ГруппаСообщение);
				ЭлементСсылка.Вид = ВидДекорацииФормы.Надпись;
				ЭлементСсылка.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Верх;
				ЭлементСсылка.Заголовок = НСтр("ru = 'Список покупателей'");
				ЭлементСсылка.Гиперссылка = Истина;
				ЭлементСсылка.УстановитьДействие("Нажатие", "Подключаемый_НезачтенныеАвансыПокупателейНажатие");
			ИначеЕсли ТипСообщения = ТипСообщенияНезачтенныеАвансыПоставщикам() Тогда
				ЭлементСсылка = Элементы.Добавить(ИмяЭлементаСсылка, Тип("ДекорацияФормы"), ГруппаСообщение);
				ЭлементСсылка.Вид = ВидДекорацииФормы.Надпись;
				ЭлементСсылка.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Верх;
				ЭлементСсылка.Заголовок = НСтр("ru = 'Список поставщиков'");
				ЭлементСсылка.Гиперссылка = Истина;
				ЭлементСсылка.УстановитьДействие("Нажатие", "Подключаемый_НезачтенныеАвансыПоставщикамНажатие");
			ИначеЕсли ТипСообщения = ТипСообщенияНеверноВыбранаСтатьяДДСПлатежи() 
				ИЛИ ТипСообщения = ТипСообщенияНеверноВыбранаСтатьяДДСПоступления() Тогда
				ЭлементСсылка = Элементы.Добавить(ИмяЭлементаСсылка, Тип("ДекорацияФормы"), ГруппаСообщение);
				ЭлементСсылка.Вид = ВидДекорацииФормы.Надпись;
				ЭлементСсылка.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Верх;
				ЭлементСсылка.Заголовок = НСтр("ru = 'Список документов'");
				ЭлементСсылка.Гиперссылка = Истина;
				ЭлементСсылка.УстановитьДействие("Нажатие", "Подключаемый_НеверноВыбранаСтатьяДДСНажатие");
			ИначеЕсли ТипСообщения = ТипСообщенияНесоответствиеДоговораВПодчиненномДокументе() 
				ИЛИ ТипСообщения = ТипСообщенияНесоответствиеОрганизацииВДокументеИДоговоре()
				ИЛИ ТипСообщения = ТипСообщенияНесоответствиеОрганизацииВПодчиненномДокументе() Тогда
				ЭлементСсылка = Элементы.Добавить(ИмяЭлементаСсылка, Тип("ДекорацияФормы"), ГруппаСообщение);
				ЭлементСсылка.Вид = ВидДекорацииФормы.Надпись;
				ЭлементСсылка.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Верх;
				ЭлементСсылка.Заголовок = НСтр("ru = 'Список документов'");
				ЭлементСсылка.Гиперссылка = Истина;
				ЭлементСсылка.УстановитьДействие("Нажатие", "Подключаемый_НесоответствиеДоговоровОрганизацийНажатие");
			КонецЕсли; 
		Иначе
			// Одинаковые типы сообщений
			ГруппаСообщение = Элементы[ИмяГруппы];
			ЭлементОписание = Элементы[ИмяЭлементаОписание];
			ЭлементОписание.Заголовок = ЭлементОписание.Заголовок 
			+ ?(ПустаяСтрока(ЭлементОписание.Заголовок), "", Символы.ПС) 
			+ СтрокаОшибка.ТекстСообщения; 
		КонецЕсли; 
	КонецЦикла; 	
	
КонецПроцедуры

#КонецОбласти 

#Область ДатаЗапретаРедактирования

// Процедура управляет актуализацией даты запрета редактирования в приложении
// 
&НаКлиенте
Процедура АктуализироватьДатуЗапретаРедактирования()
	
	Если ИспользоватьДатыЗапретаИзменения
		И НЕ ЗначениеЗаполнено(ПереноситьДатуЗапретаРедактирования) Тогда
		Ответ = Неопределено;
		ОткрытьФорму("Обработка.ЗакрытиеМесяца.Форма.ПереноситьДатуЗапретаРедактирования", , , , , , 
			Новый ОписаниеОповещения("АктуализироватьДатуЗапретаРедактированияЗавершение", ЭтотОбъект));
		Возврат;
	ИначеЕсли ИспользоватьДатыЗапретаИзменения
		И ПереноситьДатуЗапретаРедактирования = ПредопределенноеЗначение("Перечисление.ДаНет.Да") Тогда
		ВыполнитьПереносДатыЗапретаРедактирования(КонецМесяца(Дата(ТекГод, ТекМесяц, 1)));
	КонецЕсли;
	
	АктуализироватьДатуЗапретаРедактированияФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьДатуЗапретаРедактированияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если ЗначениеЗаполнено(Ответ) И Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьПереносДатыЗапретаРедактирования(КонецМесяца(Дата(ТекГод, ТекМесяц, 1)));
	КонецЕсли;
	
	АктуализироватьДатуЗапретаРедактированияФрагмент();
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьДатуЗапретаРедактированияФрагмент()
	
	ПереноситьДатуЗапретаРедактирования = Константы.ПереноситьДатуЗапретаРедактирования.Получить();
	
КонецПроцедуры // АктуализироватьДатуЗапретаРедактирования()

&НаСервере
Функция ПолучитьДатуЗапретаРедактирования()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатыЗапретаИзменения.Раздел КАК Раздел,
	|	ДатыЗапретаИзменения.Объект КАК Объект,
	|	ДатыЗапретаИзменения.Пользователь КАК Пользователь,
	|	ДатыЗапретаИзменения.ДатаЗапрета КАК ДатаЗапрета,
	|	ДатыЗапретаИзменения.ОписаниеДатыЗапрета КАК ОписаниеДатыЗапрета,
	|	ДатыЗапретаИзменения.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения,
	|	Константа.ИспользоватьДатыЗапретаИзменения КАК ИспользоватьДатыЗапретаИзменения
	|ГДЕ
	|	ДатыЗапретаИзменения.Пользователь = &ТекПользователь
	|	И ДатыЗапретаИзменения.Объект = &Объект
	|	И ИспользоватьДатыЗапретаИзменения.Значение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыЗапретаИзменения.Раздел КАК Раздел,
	|	ДатыЗапретаИзменения.Объект КАК Объект,
	|	ДатыЗапретаИзменения.Пользователь КАК Пользователь,
	|	ДатыЗапретаИзменения.ДатаЗапрета КАК ДатаЗапрета,
	|	ДатыЗапретаИзменения.ОписаниеДатыЗапрета КАК ОписаниеДатыЗапрета,
	|	ДатыЗапретаИзменения.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения,
	|	Константа.ИспользоватьДатыЗапретаИзменения КАК ИспользоватьДатыЗапретаИзменения
	|ГДЕ
	|	ДатыЗапретаИзменения.Пользователь = &Пользователь
	|	И ДатыЗапретаИзменения.Объект = &Объект
	|	И ИспользоватьДатыЗапретаИзменения.Значение";
	
	Запрос.УстановитьПараметр("ТекПользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("Пользователь", Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей);
	Запрос.УстановитьПараметр("Объект", ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаТекПользователь = РезультатЗапроса[0].Выбрать();
	ВыборкаВсеПользователи = РезультатЗапроса[1].Выбрать();
	
	Если ВыборкаТекПользователь.Следующий() Тогда
		Возврат ВыборкаТекПользователь.ДатаЗапрета;
	ИначеЕсли ВыборкаВсеПользователи.Следующий() Тогда
		Возврат ВыборкаВсеПользователи.ДатаЗапрета;
	Иначе
		ПереноситьДатуЗапретаРедактирования = Перечисления.ДаНет.Нет;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ВыполнитьПереносДатыЗапретаРедактирования(Дата)
	
	Константы.ИспользоватьДатыЗапретаИзменения.Установить(Истина);

	Запись = РегистрыСведений.ДатыЗапретаИзменения.СоздатьМенеджерЗаписи();
	Запись.Пользователь = Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей;
	Запись.Объект = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка();
	Запись.ДатаЗапрета = Дата;
	Запись.Комментарий = "(По умолчанию)";
	Запись.Записать(Истина);
	
	ДатаЗапретаРедактирования = Дата;
	Элементы.ДатаЗапретаРедактирования.Видимость = Истина;
	
КонецПроцедуры

#КонецОбласти 

#Область ФоновоеЗаданиеСборДанных

&НаКлиенте
Процедура Подключаемый_ЗапуститьФоновоеЗаданиеПолучениеДанных()
	
	ЗапуститьФоновоеЗаданиеПолучениеДанных();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФоновоеЗаданиеПолучениеДанных()
	
	РезультатФоновогоЗадания = ПолучитьДанныеНаСервере();
	Если РезультатФоновогоЗадания = Неопределено Тогда
		// Выполнено без ожидания
		Возврат;
	КонецЕсли; 
	
	Если РезультатФоновогоЗадания.Статус = "Выполняется" Тогда
		
		Обработчик = Новый ОписаниеОповещения("ФоновоеЗаданиеПолучениеДанныхВыполнено", ЭтотОбъект, Истина);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатФоновогоЗадания, Обработчик, ПараметрыОжидания);
		
	КонецЕсли;
	
	УстановитьДоступностьПриПолученииДанных();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеНаСервере()
	
	Если ФоновоеЗаданиеПолучениеДанныхЗапущено Тогда
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеПолучениеДанныхИдентификатор);
	КонецЕсли;
	
	ОшибкиЗакрытияМесяца.ПолучитьЭлементы().Очистить();
	УдалитьСообщения(Истина, Истина, Ложь);
	// Сворачиваем все развернутые группы подробностей
	Для ии = 1 По 12 Цикл
		НомерМесяца = Строка(ии);
		Для каждого ИмяСекции Из ВсеСекции() Цикл
			ИмяГруппыПодробно = СтрШаблон("Группа%1Подробно%2", ИмяСекции, НомерМесяца);
			Элементы[ИмяГруппыПодробно].Видимость = Ложь;
		КонецЦикла;
		Для каждого ИмяСекции Из ВсеСекцииПроверки() Цикл
			ИмяЭлементаКартинка = СтрШаблон("%1Картинка%2", ИмяСекции, НомерМесяца);
			ИмяЭлементаОписание = СтрШаблон("%1Описание%2", ИмяСекции, НомерМесяца);
			Элементы[ИмяЭлементаКартинка].Картинка = БиблиотекаКартинок.СерыйШар;
			Элементы[ИмяЭлементаКартинка].Гиперссылка = Ложь;
			Элементы[ИмяЭлементаОписание].Заголовок = ТекстЗакрытиеНеВыполнено();
			Элементы[ИмяЭлементаОписание].Гиперссылка = Ложь;
		КонецЦикла;
	КонецЦикла;
		
	// Параметры обернем в структуру для их передачи через механизм ДлительныеОперации.
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ТекМесяц", ТекМесяц);
	ПараметрыПроцедуры.Вставить("ТекГод", ТекГод);
	ПараметрыПроцедуры.Вставить("Организация", Организация);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ЗакрытиеМесяца.ПолучитьДанные",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
		
	ФоновоеЗаданиеПолучениеДанныхИдентификатор   = РезультатФоновогоЗадания.ИдентификаторЗадания;
	ФоновоеЗаданиеПолучениеДанныхАдресРезультата = РезультатФоновогоЗадания.АдресРезультата;
	
	Если РезультатФоновогоЗадания.Статус = "Ошибка" Тогда
		// Ошибка за время вызова
		ОбщегоНазначения.СообщитьПользователю(РезультатФоновогоЗадания.КраткоеПредставлениеОшибки);
	ИначеЕсли РезультатФоновогоЗадания.Статус <> "Выполняется" Тогда
		// Завершено за время вызова, данные получены
		ОбновитьДанные(ФоновоеЗаданиеПолучениеДанныхАдресРезультата);
	Иначе
		// иначе начнем ожидания завершения фонового задания
		ФоновоеЗаданиеПолучениеДанныхЗапущено = Истина;
	КонецЕсли;
	
	Возврат РезультатФоновогоЗадания;
	
КонецФункции

&НаКлиенте
Процедура ФоновоеЗаданиеПолучениеДанныхВыполнено(Результат, ЗагрузитьРезультат) Экспорт
	
	ФоновоеЗаданиеПолучениеДанныхЗапущено = Ложь;
	УстановитьДоступностьПриПолученииДанных();
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	Если Результат.Статус = "Выполнено" Тогда 
		ОбновитьДанные(ФоновоеЗаданиеПолучениеДанныхАдресРезультата);
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПриПолученииДанных()
	
	Если ФоновоеЗаданиеПолучениеДанныхЗапущено Тогда
		
		Элементы.ГодНазад.Доступность = Ложь;
		Элементы.ГодВперед.Доступность = Ложь;
		Элементы.ТекГод.Доступность = Ложь;
		
		Для ии = 1 По 12 Цикл
			Для каждого ИмяСекции Из ВсеСекцииЗакрытияМесяца() Цикл
				ИмяЭлементаКартинка = СтрШаблон("%1Картинка%2", ИмяСекции, ии);
				ИмяЭлементаОписание = СтрШаблон("%1Описание%2", ИмяСекции, ии);
				Элементы[ИмяЭлементаКартинка].Картинка = БиблиотекаКартинок.ДлительнаяОперация16;
				Элементы[ИмяЭлементаКартинка].Гиперссылка = Ложь;
				Элементы[ИмяЭлементаОписание].Заголовок = НСтр("ru = 'анализ'");
				Элементы[ИмяЭлементаОписание].Гиперссылка = Ложь;
			КонецЦикла;
			ИмяЭлементаКнопкаАнализ = СтрШаблон("ВыполнитьПредварительныйАнализ%1", ии);
			Элементы[ИмяЭлементаКнопкаАнализ].Доступность = Ложь;
		КонецЦикла;  
		
	Иначе
		
		Элементы.ГодНазад.Доступность = Истина;
		Элементы.ГодВперед.Доступность = Истина;
		Элементы.ТекГод.Доступность = Истина;
		Для ии = 1 По 12 Цикл
			ИмяЭлементаКнопкаАнализ = СтрШаблон("ВыполнитьПредварительныйАнализ%1", ии);
			Элементы[ИмяЭлементаКнопкаАнализ].Доступность = Истина;
		КонецЦикла;  
		
	КонецЕсли;
	
	Для ии = 1 По 12 Цикл
		ИмяКнопки = СтрШаблон("ВыполнитьЗакрытиеМесяца%1", ии);
		Элементы[ИмяКнопки].Доступность = НЕ ФоновоеЗаданиеПолучениеДанныхЗапущено И НЕ ФоновоеЗаданиеЗакрытиеМесяцаЗапущено;
		ИмяКнопки = СтрШаблон("ОтменитьЗакрытиеМесяца%1", ии);
		Элементы[ИмяКнопки].Доступность = НЕ ФоновоеЗаданиеПолучениеДанныхЗапущено И НЕ ФоновоеЗаданиеЗакрытиеМесяцаЗапущено;
	КонецЦикла; 
		
КонецПроцедуры

#КонецОбласти

#Область ФоновоеЗаданиеВыполнениеОбщихПроверок

&НаКлиенте
Процедура ЗапуститьФоновоеЗаданиеПредварительныйАнализ()
	
	РезультатФоновогоЗадания = ВыполнитьПредварительныйАнализНаСервере();
	Если РезультатФоновогоЗадания = Неопределено Тогда
		// Выполнено без ожидания
		Возврат;
	КонецЕсли; 
	
	Если РезультатФоновогоЗадания.Статус = "Выполняется" Тогда
		
		Обработчик = Новый ОписаниеОповещения("ФоновоеЗаданиеПредварительныйАнализВыполнено", ЭтотОбъект, Истина);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатФоновогоЗадания, Обработчик, ПараметрыОжидания);
		
	КонецЕсли;
	
	УстановитьДоступностьПредварительныйАнализ();
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПредварительныйАнализНаСервере()
	
	Если ФоновоеЗаданиеПредварительныйАнализЗапущено Тогда
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеПредварительныйАнализЗапущено);
	КонецЕсли;
	
	УдалитьСообщения(Истина, Ложь, Истина);
	// Сворачиваем все развернутые группы подробностей
	Для ии = 1 По 12 Цикл
		НомерМесяца = Строка(ии);
		Для каждого ИмяСекции Из ВсеСекцииПроверки() Цикл
			ИмяГруппыПодробно = СтрШаблон("Группа%1Подробно%2", ИмяСекции, НомерМесяца);
			Элементы[ИмяГруппыПодробно].Видимость = Ложь;
			ИмяЭлементаОписание = СтрШаблон("%1Описание%2", ИмяСекции, НомерМесяца);
			СтрокаСекция = СтрокаДерева(ОшибкиЗакрытияМесяца, ТекГод, ии, ИмяСекции);
			Если СтрокаСекция <> Неопределено Тогда
				Если СтрокаСекция.СостояниеЗакрытия = СостояниеЗакрыт() И СтрокаСекция.ПолучитьЭлементы().Количество() > 0 Тогда
					Элементы[ИмяЭлементаОписание].Заголовок = ТекстЗакрытиеВыполненоСОшибками();
				ИначеЕсли СтрокаСекция.СостояниеЗакрытия = СостояниеЗакрыт() Тогда
					Элементы[ИмяЭлементаОписание].Заголовок = ТекстЗакрытиеВыполненоУспешно();
				Иначе 
					Элементы[ИмяЭлементаОписание].Заголовок = ТекстОшибкиПередЗакрытием();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Параметры обернем в структуру для их передачи через механизм ДлительныеОперации.
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ТекМесяц", ТекМесяц);
	ПараметрыПроцедуры.Вставить("ТекГод", ТекГод);
	ПараметрыПроцедуры.Вставить("Организация", Организация);
	МассивОпераций = Новый Массив;
	Для каждого Секция Из ВсеСекцииПроверки() Цикл
		Если ЗначениеРеквизитаФормыПоЗначениюМесяца(ЭтотОбъект, Секция, ТекМесяц) Тогда
			МассивОпераций.Добавить(Секция);
		КонецЕсли; 
	КонецЦикла; 
	ПараметрыПроцедуры.Вставить("Операции", МассивОпераций);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ЗакрытиеМесяца.ВыполнитьПроверки",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
		
	ФоновоеЗаданиеПредварительныйАнализИдентификатор   = РезультатФоновогоЗадания.ИдентификаторЗадания;
	ФоновоеЗаданиеПредварительныйАнализАдресРезультата = РезультатФоновогоЗадания.АдресРезультата;
	
	Если РезультатФоновогоЗадания.Статус = "Ошибка" Тогда
		// Ошибка за время вызова
		ОбщегоНазначения.СообщитьПользователю(РезультатФоновогоЗадания.КраткоеПредставлениеОшибки);
	ИначеЕсли РезультатФоновогоЗадания.Статус <> "Выполняется" Тогда
		// Завершено за время вызова, данные получены
		ОбновитьДанные(ФоновоеЗаданиеПредварительныйАнализАдресРезультата, Истина);
	Иначе
		// иначе начнем ожидания завершения фонового задания
		ФоновоеЗаданиеПредварительныйАнализЗапущено = Истина;
	КонецЕсли;
	
	Возврат РезультатФоновогоЗадания;
	
КонецФункции

&НаКлиенте
Процедура ФоновоеЗаданиеПредварительныйАнализВыполнено(Результат, ЗагрузитьРезультат) Экспорт
	
	ФоновоеЗаданиеПредварительныйАнализЗапущено = Ложь;
	УстановитьДоступностьПредварительныйАнализ();
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	Если Результат.Статус = "Выполнено" Тогда 
		ОбновитьДанные(ФоновоеЗаданиеПредварительныйАнализАдресРезультата, Истина);
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПредварительныйАнализ()
	
	Если ФоновоеЗаданиеПредварительныйАнализЗапущено Тогда
		
		Элементы.ГодНазад.Доступность = Ложь;
		Элементы.ГодВперед.Доступность = Ложь;
		Элементы.ТекГод.Доступность = Ложь;
		
		Для каждого ИмяСекции Из ВсеСекцииПроверки() Цикл
			ИмяЭлементаКартинка = СтрШаблон("%1Картинка%2", ИмяСекции, ТекМесяц);
			ИмяЭлементаОписание = СтрШаблон("%1Описание%2", ИмяСекции, ТекМесяц);
			ИмяЭлементаПереключатель = СтрШаблон("%1%2", ИмяСекции, ТекМесяц);
			Элементы[ИмяЭлементаКартинка].Картинка = БиблиотекаКартинок.ДлительнаяОперация16;
			Элементы[ИмяЭлементаКартинка].Гиперссылка = Ложь;
			Элементы[ИмяЭлементаОписание].Заголовок = НСтр("ru = 'анализ'");
			Элементы[ИмяЭлементаОписание].Гиперссылка = Ложь;
			Элементы[ИмяЭлементаПереключатель].ТолькоПросмотр = Истина;
		КонецЦикла;
		ИмяЭлементаПереключательГруппы = СтрШаблон("ПредварительныйАнализ%1", ТекМесяц);
		Элементы[ИмяЭлементаПереключательГруппы].ТолькоПросмотр = Истина;
		
	Иначе
		
		Элементы.ГодНазад.Доступность = Истина;
		Элементы.ГодВперед.Доступность = Истина;
		Элементы.ТекГод.Доступность = Истина;
		
		Для каждого ИмяСекции Из ВсеСекцииПроверки() Цикл
			ИмяЭлементаПереключатель = СтрШаблон("%1%2", ИмяСекции, ТекМесяц);
			Элементы[ИмяЭлементаПереключатель].ТолькоПросмотр = Ложь;
		КонецЦикла; 
		ИмяЭлементаПереключательГруппы = СтрШаблон("ПредварительныйАнализ%1", ТекМесяц);
		Элементы[ИмяЭлементаПереключательГруппы].ТолькоПросмотр = Ложь;
		
	КонецЕсли;
	
	Для ии = 1 По 12 Цикл
		ИмяКнопки = СтрШаблон("ВыполнитьПредварительныйАнализ%1", ии);
		Если ии = ТекМесяц И ФоновоеЗаданиеПредварительныйАнализЗапущено Тогда
			Элементы[ИмяКнопки].Заголовок = НСтр("ru = 'Прервать'");
		Иначе
			Элементы[ИмяКнопки].Заголовок = НСтр("ru = 'Выполнить'");
			Элементы[ИмяКнопки].Доступность = НЕ ФоновоеЗаданиеПредварительныйАнализЗапущено;
		КонецЕсли; 
	КонецЦикла; 
		
КонецПроцедуры

#КонецОбласти 

#Область ФоновоеЗаданиеЗакрытиеМесяца

&НаКлиенте
Процедура ЗапуститьФоновоеЗаданиеЗакрытиеМесяца()
	
	РезультатФоновогоЗадания = ВыполнитьЗакрытиеМесяцаНаСервере();
	
	Если РезультатФоновогоЗадания = Неопределено Тогда
		АктуализироватьДатуЗапретаРедактирования();
		Возврат;
	КонецЕсли;
	
	Если РезультатФоновогоЗадания.Статус = "Выполняется" Тогда
		
		УстановитьДоступностьПриЗакрытииМесяца();
		
		Обработчик = Новый ОписаниеОповещения("ФоновоеЗаданиеЗакрытиеМесяцаВыполнено", ЭтотОбъект, Истина);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатФоновогоЗадания, Обработчик, ПараметрыОжидания);
		
		Оповестить("ЗакрытиеМесяца", Дата(ТекГод, ТекМесяц, 1), ЭтотОбъект);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупредитьОАктивномФоновомЗадании(Отказ = Истина)
	
	Отказ = Истина;
	ТекстПредупреждения = НСтр("ru = 'Дождитесь окончания рабочего процесса (рекомендуется) либо прервите его самостоятельно.'");
	ПоказатьПредупреждение(Неопределено,ТекстПредупреждения, 10, "Невозможно закрыть форму.");
	
КонецПроцедуры // ПредупредитьОАктивномФоновомЗадании()

&НаСервере
Функция ВыполнитьЗакрытиеМесяцаНаСервере()
	
	Если ФоновоеЗаданиеЗакрытиеМесяцаЗапущено Тогда
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеЗакрытиеМесяцаИдентификатор);
	КонецЕсли;
	
	УдалитьСообщения(Ложь, Истина, Ложь);
	// Сворачиваем все развернутые группы подробностей
	Для ии = 1 По 12 Цикл
		НомерМесяца = Строка(ии);
		Для каждого ИмяСекции Из ВсеСекцииЗакрытияМесяца() Цикл
			ИмяГруппыПодробно = СтрШаблон("Группа%1Подробно%2", ИмяСекции, НомерМесяца);
			Элементы[ИмяГруппыПодробно].Видимость = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	ПараметрыПроцедуры = СтруктураПараметровЗакрытиеМесяца();
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(
	"Обработки.ЗакрытиеМесяца.ВыполнитьЗакрытиеМесяца",
	ПараметрыПроцедуры,
	ПараметрыВыполнения);
	
	ФоновоеЗаданиеЗакрытиеМесяцаИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
	ФоновоеЗаданиеЗакрытиеМесяцаАдресРезультата = РезультатФоновогоЗадания.АдресРезультата;
	
	Если РезультатФоновогоЗадания.Статус = "Ошибка" Тогда
		// Ошибка за время вызова
		ОбщегоНазначения.СообщитьПользователю(РезультатФоновогоЗадания.КраткоеПредставлениеОшибки);
	ИначеЕсли РезультатФоновогоЗадания.Статус <> "Выполняется" Тогда
		// Завершено за время вызова, данные получены
		ОбновитьДанные(ФоновоеЗаданиеЗакрытиеМесяцаАдресРезультата);
	Иначе
		// иначе начнем ожидания завершения фонового задания
		ФоновоеЗаданиеЗакрытиеМесяцаЗапущено = Истина;
	КонецЕсли;
	
	Возврат РезультатФоновогоЗадания;
	
КонецФункции

&НаКлиенте
Процедура ФоновоеЗаданиеЗакрытиеМесяцаВыполнено(Результат, ЗагрузитьРезультат) Экспорт
	
	ФоновоеЗаданиеЗакрытиеМесяцаЗапущено = Ложь;
	УстановитьДоступностьПриЗакрытииМесяца();
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	Если Результат.Статус = "Выполнено" Тогда 
		ОбновитьДанные(ФоновоеЗаданиеЗакрытиеМесяцаАдресРезультата);
		АктуализироватьДатуЗапретаРедактирования();
		Оповестить("ЗакрытиеМесяца", Дата(ТекГод, ТекМесяц, 1), ЭтотОбъект);
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПриЗакрытииМесяца()
	
	Если ФоновоеЗаданиеЗакрытиеМесяцаЗапущено Тогда
		
		Элементы.ГодНазад.Доступность = Ложь;
		Элементы.ГодВперед.Доступность = Ложь;
		Элементы.ТекГод.Доступность = Ложь;
		
		Для каждого ИмяСекции Из ВсеСекцииЗакрытияМесяца() Цикл
			ИмяЭлементаКартинка = СтрШаблон("%1Картинка%2", ИмяСекции, ТекМесяц);
			ИмяЭлементаОписание = СтрШаблон("%1Описание%2", ИмяСекции, ТекМесяц);
			ИмяЭлементаПереключатель = СтрШаблон("%1%2", ИмяСекции, ТекМесяц);
			Элементы[ИмяЭлементаКартинка].Картинка = БиблиотекаКартинок.ДлительнаяОперация16;
			Элементы[ИмяЭлементаКартинка].Гиперссылка = Ложь;
			Если ЭтотОбъект[ИмяЭлементаПереключатель] Тогда
				Элементы[ИмяЭлементаОписание].Заголовок = НСтр("ru = 'закрытие'");
			Иначе
				Элементы[ИмяЭлементаОписание].Заголовок = НСтр("ru = 'отмена'");
			КонецЕсли; 
			Элементы[ИмяЭлементаОписание].Гиперссылка = Ложь;
			Элементы[ИмяЭлементаПереключатель].ТолькоПросмотр = Истина;
		КонецЦикла; 
		ИмяЭлементаПереключательГруппы = СтрШаблон("ЗакрытиеМесяца%1", ТекМесяц);
		Элементы[ИмяЭлементаПереключательГруппы].ТолькоПросмотр = Истина;
		
	Иначе
		
		Элементы.Месяцы.ТекущаяСтраница = Элементы["М" + Строка(ТекМесяц)];
		Элементы.ГодНазад.Доступность = Истина;
		Элементы.ГодВперед.Доступность = Истина;
		Элементы.ТекГод.Доступность = Истина;
		
		Для каждого ИмяСекции Из ВсеСекцииЗакрытияМесяца() Цикл
			ИмяЭлементаПереключатель = СтрШаблон("%1%2", ИмяСекции, ТекМесяц);
			Элементы[ИмяЭлементаПереключатель].ТолькоПросмотр = Ложь;
		КонецЦикла;
		ИмяЭлементаПереключательГруппы = СтрШаблон("ЗакрытиеМесяца%1", ТекМесяц);
		Элементы[ИмяЭлементаПереключательГруппы].ТолькоПросмотр = Ложь;
		
	КонецЕсли; 
	
	Для ии = 1 По 12 Цикл
		Если ии = ТекМесяц И ФоновоеЗаданиеЗакрытиеМесяцаЗапущено Тогда
			ИмяКнопки = СтрШаблон("ВыполнитьЗакрытиеМесяца%1", ии);
			Элементы[ИмяКнопки].Заголовок = НСтр("ru = 'Прервать'");
			ИмяКнопки = СтрШаблон("ОтменитьЗакрытиеМесяца%1", ии);
			Элементы[ИмяКнопки].Видимость = Ложь;
		Иначе
			ИмяКнопки = СтрШаблон("ВыполнитьЗакрытиеМесяца%1", ии);
			Элементы[ИмяКнопки].Заголовок = НСтр("ru = 'Выполнить'");
			Элементы[ИмяКнопки].Доступность = НЕ ФоновоеЗаданиеЗакрытиеМесяцаЗапущено;
			ИмяКнопки = СтрШаблон("ОтменитьЗакрытиеМесяца%1", ии);
			Элементы[ИмяКнопки].Доступность = НЕ ФоновоеЗаданиеЗакрытиеМесяцаЗапущено;
			Элементы[ИмяКнопки].Видимость = Истина;
		КонецЕсли; 
	КонецЦикла; 
		
КонецПроцедуры

// Функция формирует структуру параметров из значений реквизитов формы
//
&НаСервере
Функция СтруктураПараметровЗакрытиеМесяца()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ТекМесяц", ТекМесяц);
	СтруктураПараметров.Вставить("ТекГод", ТекГод);
	СтруктураПараметров.Вставить("Организация", Организация);
	
	ВыполнитьРасчетАмортизации = ЗначениеРеквизитаФормыПоЗначениюМесяца(ЭтаФорма, "НачислениеАмортизации", ТекМесяц);
	СтруктураПараметров.Вставить("ВыполнитьРасчетАмортизации", ВыполнитьРасчетАмортизации);
	
	МассивОпераций = Новый Массив;
	Для каждого Секция Из ВсеСекцииЗакрытияМесяца() Цикл
		Если ЗначениеРеквизитаФормыПоЗначениюМесяца(ЭтотОбъект, Секция, ТекМесяц) Тогда
			МассивОпераций.Добавить(Секция);
		КонецЕсли; 
	КонецЦикла; 
	СтруктураПараметров.Вставить("Операции", МассивОпераций);
	
	Возврат СтруктураПараметров;
	
КонецФункции // ПолучитьСтруктуруПараметровНаСервере()

#КонецОбласти

#Область ФоновоеЗаданиеОбщее

&НаСервереБезКонтекста
Процедура ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор)
	
	Если ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор) Тогда
		Возврат;
	КонецЕсли; 
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
	
КонецПроцедуры

#КонецОбласти 

#Область СвязанныеОтчеты

&НаКлиенте
Процедура ОбновитьСписокОтчетов()
	
	Для каждого ВстроенноеОкно Из ЭтотОбъект.Окно.Содержимое Цикл
		Если ВстроенноеОкно.ИмяФормы <> "ОбщаяФорма.ФормаСпискаОтчетов" Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураПараметров = Новый Структура("ТекГод, ТекМесяц, Организация");
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, ЭтотОбъект);
		СтруктураОткрытия = Новый Структура;
		ДополнитьСтруктуруОткрытияНаСервере(СтруктураПараметров, СтруктураОткрытия);
		ВстроенноеОкно.ПоОбъекту = СтруктураОткрытия;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьСтруктуруОткрытияНаСервере(СтруктураПараметров, СтруктураОткрытия)

	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ТекГод) Тогда
		СтруктураПараметров.ТекГод = Год(ТекущаяДатаСеанса());
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ТекМесяц) Тогда
		СтруктураПараметров.ТекМесяц = Месяц(ТекущаяДатаСеанса());
	КонецЕсли; 
	Месяц = Дата(СтруктураПараметров.ТекГод, СтруктураПараметров.ТекМесяц, 1);
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
		Если Константы.УчетПоКомпании.Получить() Тогда
			СтруктураПараметров.Организация = Справочники.Организации.ОрганизацияКомпания();
		Иначе
			СтруктураПараметров.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	СтруктураОткрытия.Вставить("ПериодРасшифровки", Новый СтандартныйПериод(НачалоМесяца(Месяц), КонецМесяца(Месяц)));
	СтруктураОткрытия.Вставить("Организация", СтруктураПараметров.Организация);
	СтруктураОткрытия.Вставить("Контекст", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Обработки.ЗакрытиеМесяца));
	
КонецПроцедуры 

#КонецОбласти 

#Область ФиксированныеСтроки

#Область Секции

&НаКлиентеНаСервереБезКонтекста
Функция СекцияПроверкаАвансыПокупателей()
	
	Возврат "ПроверкаАвансыПокупателей";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СекцияПроверкаАвансыПоставщикам()
	
	Возврат "ПроверкаАвансыПоставщикам";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СекцияПроверкаСтатьиДДС()
	
	Возврат "ПроверкаСтатьиДДС";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СекцияПроверкаОрганизацииИДоговоры()
	
	Возврат "ПроверкаОрганизацииИДоговоры";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВсеСекцииПроверки()
	
	Результат = Новый Массив;
	Результат.Добавить(СекцияПроверкаАвансыПокупателей());
	Результат.Добавить(СекцияПроверкаАвансыПоставщикам());
	Результат.Добавить(СекцияПроверкаСтатьиДДС());
	Результат.Добавить(СекцияПроверкаОрганизацииИДоговоры());
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СекцияНачислениеАмортизации()
	
	Возврат "НачислениеАмортизации";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СекцияРасчетПрямыхЗатрат()
	
	Возврат "РасчетПрямыхЗатрат";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СекцияРаспределениеЗатрат()
	
	Возврат "РаспределениеЗатрат";
	
КонецФункции
 
&НаКлиентеНаСервереБезКонтекста
Функция СекцияРасчетФактическойСебестоимости()
	
	Возврат "РасчетФактическойСебестоимости";
	
КонецФункции
 
&НаКлиентеНаСервереБезКонтекста
Функция СекцияРасчетСебестоимостиВРознице()
	
	Возврат "РасчетСебестоимостиВРознице";
	
КонецФункции
 
&НаКлиентеНаСервереБезКонтекста
Функция СекцияРасчетКурсовыхРазниц()
	
	Возврат "РасчетКурсовыхРазниц";
	
КонецФункции
 
&НаКлиентеНаСервереБезКонтекста
Функция СекцияРасчетФинансовогоРезультата()
	
	Возврат "РасчетФинансовогоРезультата";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВсеСекцииЗакрытияМесяца()
	
	Результат = Новый Массив;
	Результат.Добавить(СекцияНачислениеАмортизации());
	Результат.Добавить(СекцияРасчетПрямыхЗатрат());
	Результат.Добавить(СекцияРаспределениеЗатрат());
	Результат.Добавить(СекцияРасчетФактическойСебестоимости());
	Результат.Добавить(СекцияРасчетСебестоимостиВРознице());
	Результат.Добавить(СекцияРасчетКурсовыхРазниц());
	Результат.Добавить(СекцияРасчетФинансовогоРезультата());
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВсеСекции()
	
	Результат = ВсеСекцииПроверки();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ВсеСекцииЗакрытияМесяца());
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СекцияНедоступна(ИмяСекции, Форма)
	
	Если НЕ Форма.УчетИмущества И ИмяСекции = СекцияНачислениеАмортизации() Тогда
		Возврат Истина;
	ИначеЕсли НЕ Форма.УчетРозничныхПродаж И ИмяСекции = СекцияРасчетСебестоимостиВРознице() Тогда
		Возврат Истина;
	ИначеЕсли НЕ Форма.УчетВалютныхОпераций И ИмяСекции = СекцияРасчетКурсовыхРазниц() Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции 

#КонецОбласти 

#Область СостоянияЗакрытия

&НаКлиентеНаСервереБезКонтекста
Функция СостояниеЗакрыт()
	
	Возврат "Закрыт";
	
КонецФункции
 
&НаКлиентеНаСервереБезКонтекста
Функция СостояниеНеЗакрыт()
	
	Возврат "НеЗакрыт";
	
КонецФункции
 
&НаКлиентеНаСервереБезКонтекста
Функция СостояниеЗакрытиеНеТребуется()
	
	Возврат "ЗакрытиеНеТребуется";
	
КонецФункции
 
&НаКлиентеНаСервереБезКонтекста
Функция СостояниеОшибки()
	
	Возврат "Ошибки";
	
КонецФункции
 
&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиПередЗакрытием()
	
	Возврат НСтр("ru = 'не выполнено'");
	
КонецФункции
 
&НаКлиентеНаСервереБезКонтекста
Функция ТекстЗакрытиеНеВыполнено()
	
	Возврат НСтр("ru = 'не выполнено'");
	
КонецФункции
 
&НаКлиентеНаСервереБезКонтекста
Функция ТекстЗакрытиеВыполненоУспешно()
	
	Возврат НСтр("ru = 'успешно'");
	
КонецФункции
 
&НаКлиентеНаСервереБезКонтекста
Функция ТекстЗакрытиеВыполненоСОшибками()
	
	Возврат НСтр("ru = 'ошибки'");
	
КонецФункции
 
&НаКлиентеНаСервереБезКонтекста
Функция ТекстЗакрытиеНеТребуется()
	
	Возврат НСтр("ru = 'не требуется'");
	
КонецФункции

#КонецОбласти 

#Область ТипыСообщений

&НаКлиентеНаСервереБезКонтекста
Функция ТипСообщенияПереносРезерва()
	
	Возврат "ПереносРезерва";
	
КонецФункции
 
&НаКлиентеНаСервереБезКонтекста
Функция ТипСообщенияОтрицательныеОстатки()
	
	Возврат "ОтрицательныеОстатки";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСообщенияИзмененныеДокументы()
	
	Возврат "ИзмененныеДокументы";
	
КонецФункции
 
&НаКлиентеНаСервереБезКонтекста
Функция ТипСообщенияОшибкаИнтеркампани()
	
	Возврат "ОшибкаИнтеркампани";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСообщенияНезачтенныеАвансыПокупателей()
	
	Возврат "НезачтенныеАвансыПокупателей";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСообщенияНезачтенныеАвансыПоставщикам()
	
	Возврат "НезачтенныеАвансыПоставщикам";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСообщенияНеверноВыбранаСтатьяДДСПлатежи()
	
	Возврат "НеверноВыбранаСтатьяДДСПлатежи";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСообщенияНеверноВыбранаСтатьяДДСПоступления()
	
	Возврат "НеверноВыбранаСтатьяДДСПоступления";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСообщенияНесоответствиеОрганизацииВДокументеИДоговоре()
	
	Возврат "НесоответствиеОрганизацииВДокументеИДоговоре";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСообщенияНесоответствиеОрганизацииВПодчиненномДокументе()
	
	Возврат "НесоответствиеОрганизацииВПодчиненномДокументе";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСообщенияНесоответствиеДоговораВПодчиненномДокументе()
	
	Возврат "НесоответствиеДоговораВПодчиненномДокументе";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСообщенияОстаткиСебестоимостиБезКоличества()
	
	Возврат "ОстаткиСебестоимостиБезКоличества";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСообщенияОткрытыеКассовыеСмены()
	
	Возврат "ОткрытыеКассовыеСмены";
	
КонецФункции

#КонецОбласти 

#КонецОбласти 

#Область Прочее

// Функция считывает и возвращает значение реквизита формы для указанного месяца
// 
&НаСервереБезКонтекста
Функция ЗначениеРеквизитаФормыПоЗначениюМесяца(ЭтаФорма, ИмяФлага, ТекМесяц)
	
	Возврат ЭтаФорма[ИмяФлага + Строка(ТекМесяц)];
	
КонецФункции // ЗначениеРеквизитаФормыПоЗначениюМесяца()

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаДерева(ОшибкиЗакрытияМесяца, Год, НомерМесяца, Секция)
	
	Месяц = Дата(Год, НомерМесяца, 1);
	Результат = Неопределено;
	Для каждого СтрокаДереваМесяц Из ОшибкиЗакрытияМесяца.ПолучитьЭлементы() Цикл
		Если СтрокаДереваМесяц.Месяц <> Месяц Тогда
			Продолжить;
		КонецЕсли; 
		Для каждого СтрокаДереваСекция Из СтрокаДереваМесяц.ПолучитьЭлементы() Цикл
			Если СтрокаДереваСекция.Секция <> Секция Тогда
				Продолжить;
			КонецЕсли;
			Результат = СтрокаДереваСекция;
		КонецЦикла; 
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗначениеПереключателяГруппы(Форма, ИменаСекций, Месяц, ИмяГруппы)
	
	МассивЗначений = Новый Массив;
	Для каждого ИмяСекции Из ИменаСекций Цикл
		ИмяРеквизита = СтрШаблон("%1%2", ИмяСекции, Месяц);
		Значение = Форма[ИмяРеквизита];
		Если МассивЗначений.Найти(Значение) = Неопределено Тогда
			МассивЗначений.Добавить(Значение);
		КонецЕсли; 
	КонецЦикла;
	
	ИмяРеквизита = СтрШаблон("%1%2", ИмяГруппы, Месяц);
	Если МассивЗначений.Количество() <> 1 Тогда
		Форма[ИмяРеквизита] = 2;
	Иначе
		Форма[ИмяРеквизита] = ?(МассивЗначений[0], 1, 0);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекущаяДатаСервер()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

#КонецОбласти 

#КонецОбласти
 
