#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура - обработчик фонового задания получения данных для заполнения формы закрытия месяца
//
// Параметры:
//  СтруктураПараметров			 - 	Структура - Параметры выполнения расчета
//  ФоновоеЗаданиеАдресХранилища - 	Строка - Адрес хранилища для возвращения результата расчета
//
Процедура ПолучитьДанные(СтруктураПараметров, ФоновоеЗаданиеАдресХранилища = "") Экспорт
	
	Организация = СтруктураПараметров.Организация;
	ТекГод = СтруктураПараметров.ТекГод;
	ТекМесяц = СтруктураПараметров.ТекМесяц;
	МесяцРасчета = Дата(ТекГод, ТекМесяц, 1);
	ОшибкиЗакрытияМесяца = ДанныеПоЗакрытиюПериодов(Организация, МесяцРасчета);
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("ОшибкиЗакрытияМесяца", ОшибкиЗакрытияМесяца);
	ПоместитьВоВременноеХранилище(СтруктураРезультат, ФоновоеЗаданиеАдресХранилища);
	
КонецПроцедуры

// Процедура - обработчик фонового задания выполнения закрытия месяца
//
// Параметры:
//  СтруктураПараметров			 - 	Структура - Параметры выполнения закрытия
//  ФоновоеЗаданиеАдресХранилища - 	Строка - Адрес хранилища для возвращения результата расчета
//
Процедура ВыполнитьЗакрытиеМесяца(СтруктураПараметров, ФоновоеЗаданиеАдресХранилища = "") Экспорт
	
	ТекМесяц = СтруктураПараметров.ТекМесяц;
	ТекГод = СтруктураПараметров.ТекГод;
	Организация = СтруктураПараметров.Организация;
	Операции = СтруктураПараметров.Операции;
	
	СтруктураТекущихДокументов = ОтменитьЗакрытиеМесяца(СтруктураПараметров);
	
	Если СтруктураПараметров.ВыполнитьРасчетАмортизации Тогда
		
		Если ЗначениеЗаполнено(СтруктураТекущихДокументов.ДокументАмортизацияВА) Тогда
			
			ДокОбъект = СтруктураТекущихДокументов.ДокументАмортизацияВА.ПолучитьОбъект();
			Если ДокОбъект.ПометкаУдаления Тогда
				ДокОбъект.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			
		Иначе
			
			ДокОбъект = Документы.АмортизацияВА.СоздатьДокумент();
			ДокОбъект.Организация = Организация;
			ДокОбъект.Дата = КонецМесяца(Дата(ТекГод, ТекМесяц, 1));
			ДокОбъект.Комментарий = НСтр("ru='#Создан автоматически, помощником закрытия месяца.'");
			
		КонецЕсли;
		
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЕсли;
	
	МассивДокументовЗМ = СтруктураТекущихДокументов.ДокументЗакрытиеМесяца;
	РазмерМассиваДокументовЗМ = МассивДокументовЗМ.Количество() - 1;
	РазмерМассиваОпераций = Операции.Количество() - 1;
	
	Для Итератор = 0 По РазмерМассиваОпераций Цикл
		
		Операция = Операции[Итератор];
		Если Операция = СекцияНачислениеАмортизации() Тогда
			Продолжить;
		КонецЕсли;
		ДокументЗакрытияМесяца = ?(Итератор <= РазмерМассиваДокументовЗМ, МассивДокументовЗМ[Итератор], Неопределено);
		ВыполнитьОперациюЗакрытияМесяца(СтруктураПараметров, Операция, ДокументЗакрытияМесяца);
		
	КонецЦикла;
	
	ПолучитьДанные(СтруктураПараметров, ФоновоеЗаданиеАдресХранилища);
	
КонецПроцедуры

// Процедура - обработчик фонового задания выполнения предварительной проверки
//
// Параметры:
//  СтруктураПараметров			 - 	Структура - Параметры выполнения проверки
//  ФоновоеЗаданиеАдресХранилища - 	Строка - Адрес хранилища для возвращения результата проверки
//
Процедура ВыполнитьПроверки(СтруктураПараметров, ФоновоеЗаданиеАдресХранилища = "") Экспорт
	
	Организация = СтруктураПараметров.Организация;
	ТекГод = СтруктураПараметров.ТекГод;
	ТекМесяц = СтруктураПараметров.ТекМесяц;
	Операции = СтруктураПараметров.Операции;
	МесяцРасчета = Дата(ТекГод, ТекМесяц, 1);
	НижняяГраница = НачалоМесяца(Дата(ТекГод, ТекМесяц, 1));
	ВерхняяГраница = КонецМесяца(Дата(ТекГод, ТекМесяц, 1));
	ОшибкиЗакрытияМесяца = РезультатПроверок(Организация, МесяцРасчета, НижняяГраница, ВерхняяГраница, Операции);
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("ОшибкиЗакрытияМесяца", ОшибкиЗакрытияМесяца);
	ПоместитьВоВременноеХранилище(СтруктураРезультат, ФоновоеЗаданиеАдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеДанных

Функция ДанныеПоЗакрытиюПериодов(Организация, МесяцРасчета)
	
	Компания = Константы.УчетПоКомпании.Компания(Организация);
	НижняяГраница = НачалоГода(МесяцРасчета);
	ВерхняяГраница = КонецГода(МесяцРасчета);
	РезультатРасчета = ПустоеДеревоРезультатаРасчета();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ДобавитьВременныеТаблицыПериодовСОстатками(МенеджерВременныхТаблиц, Компания, НижняяГраница, ВерхняяГраница);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("НижняяГраница", НижняяГраница);
	Запрос.УстановитьПараметр("ВерхняяГраница", ВерхняяГраница);
	Запрос.Текст = ТекстЗапросаОперацииЗакрытияМесяца();
	Запрос.Выполнить();
	
	ТаблицаМесяцы = Новый ТаблицаЗначений;
	ТаблицаМесяцы.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	Позиция = НижняяГраница;
	Пока Позиция < ВерхняяГраница Цикл
		НоваяСтрока = ТаблицаМесяцы.Добавить();
		НоваяСтрока.Месяц = Позиция;
		Позиция = ДобавитьМесяц(Позиция, 1);	
	КонецЦикла;
	Запрос.УстановитьПараметр("ТаблицаМесяцы", ТаблицаМесяцы);
	
	Запрос.Текст = ТекстЗапросаПолучениеДанных();
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДобавитьСекции(РезультатЗапроса, РезультатРасчета, НижняяГраница, ВерхняяГраница);
	ДобавитьОшибкиЗакрытия(РезультатЗапроса, РезультатРасчета, НижняяГраница, ВерхняяГраница);
	ДобавитьСообщенияОбИзменениях(РезультатЗапроса, РезультатРасчета, НижняяГраница, ВерхняяГраница);
	ВыполнитьПроверкуИнтеркампани(РезультатЗапроса, РезультатРасчета, Компания, ТаблицаМесяцы); 
	ВыполнитьПроверкуОстатков(РезультатЗапроса, РезультатРасчета, НижняяГраница, ВерхняяГраница);
	ВыполнитьПроверкуЗависшихСумм(РезультатЗапроса, РезультатРасчета, НижняяГраница, ВерхняяГраница);
	ВыполнитьПроверкуКассовыхСмен(РезультатЗапроса, РезультатРасчета, НижняяГраница, ВерхняяГраница);
		
	Возврат РезультатРасчета;
	
КонецФункции

Процедура ДобавитьВременныеТаблицыПериодовСОстатками(МенеджерВременныхТаблиц, Организация, НижняяГраница, ВерхняяГраница)
	
	// Запасы
	ЗапросИтоги = Новый Запрос;
	ЗапросИтоги.УстановитьПараметр("Организация", Организация);
	ЗапросИтоги.УстановитьПараметр("НижняяГраница", НижняяГраница);
	ЗапросИтоги.УстановитьПараметр("ВерхняяГраница", ВерхняяГраница);
	ЗапросИтоги.Текст = 
	"ВЫБРАТЬ
	|	ЗапасыОстаткиИОбороты.Период КАК Период,
	|	ЗапасыОстаткиИОбороты.СуммаОборот КАК СуммаОборот,
	|	ЗапасыОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток
	|ИЗ
	|	РегистрНакопления.Запасы.ОстаткиИОбороты(
	|			&НижняяГраница,
	|			&ВерхняяГраница,
	|			Месяц,
	|			ДвиженияИГраницыПериода,
	|			Организация = &Организация
	|				И СчетУчета.СпособРаспределения <> ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияРасходов.НеРаспределять)
	|				И (СчетУчета.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|					ИЛИ СчетУчета.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство)
	|						И Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))) КАК ЗапасыОстаткиИОбороты
	|ИТОГИ
	|	СУММА(СуммаОборот),
	|	СУММА(СуммаКонечныйОстаток)
	|ПО
	|	Период ПЕРИОДАМИ(МЕСЯЦ, &НижняяГраница, &ВерхняяГраница)";
	Результат = ЗапросИтоги.Выполнить();
	ТаблицаДанных = Результат.Выгрузить().СкопироватьКолонки("Период");
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "ВСЕ");
	Пока Выборка.Следующий() Цикл
		Если Выборка.СуммаОборот = 0 И Выборка.СуммаКонечныйОстаток = 0 Тогда
			Продолжить;
		КонецЕсли;
		ТаблицаДанных.Добавить().Период = Выборка.Период;
	КонецЦикла;
	ЗапросВТ = Новый Запрос;
	ЗапросВТ.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросВТ.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	ЗапросВТ.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗапасов.Период КАК Период
	|ПОМЕСТИТЬ ЗапасыРаспределяемыеЗатраты
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаЗапасов";
	ЗапросВТ.Выполнить();
	
	// Курсовые разницы
	ЗапросИтоги = Новый Запрос;
	ЗапросИтоги.УстановитьПараметр("Организация", Организация);
	ЗапросИтоги.УстановитьПараметр("НижняяГраница", НижняяГраница);
	ЗапросИтоги.УстановитьПараметр("ВерхняяГраница", ВерхняяГраница);
	ЗапросИтоги.Текст = 
	"ВЫБРАТЬ
	|	ДенежныеСредстваОстаткиИОбороты.Период КАК Период,
	|	ДенежныеСредстваОстаткиИОбороты.СуммаОборот КАК СуммаОборот,
	|	ДенежныеСредстваОстаткиИОбороты.СуммаВалОборот КАК СуммаВалОборот,
	|	ДенежныеСредстваОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	|	ДенежныеСредстваОстаткиИОбороты.СуммаВалКонечныйОстаток КАК СуммаВалКонечныйОстаток
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.ОстаткиИОбороты(&НижняяГраница, &ВерхняяГраница, Месяц, ДвиженияИГраницыПериода, Организация = &Организация) КАК ДенежныеСредстваОстаткиИОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДенежныеСредстваВКассахККМОстаткиИОбороты.Период,
	|	ДенежныеСредстваВКассахККМОстаткиИОбороты.СуммаОборот,
	|	ДенежныеСредстваВКассахККМОстаткиИОбороты.СуммаВалОборот,
	|	ДенежныеСредстваВКассахККМОстаткиИОбороты.СуммаКонечныйОстаток,
	|	ДенежныеСредстваВКассахККМОстаткиИОбороты.СуммаВалКонечныйОстаток
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваВКассахККМ.ОстаткиИОбороты(&НижняяГраница, &ВерхняяГраница, Месяц, ДвиженияИГраницыПериода, Организация = &Организация) КАК ДенежныеСредстваВКассахККМОстаткиИОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДенежныеСредстваКПоступлениюОстаткиИОбороты.Период,
	|	ДенежныеСредстваКПоступлениюОстаткиИОбороты.СуммаОборот,
	|	ДенежныеСредстваКПоступлениюОстаткиИОбороты.СуммаВалОборот,
	|	ДенежныеСредстваКПоступлениюОстаткиИОбороты.СуммаКонечныйОстаток,
	|	ДенежныеСредстваКПоступлениюОстаткиИОбороты.СуммаВалКонечныйОстаток
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКПоступлению.ОстаткиИОбороты(&НижняяГраница, &ВерхняяГраница, Месяц, ДвиженияИГраницыПериода, Организация = &Организация) КАК ДенежныеСредстваКПоступлениюОстаткиИОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПерсоналомОстаткиИОбороты.Период,
	|	РасчетыСПерсоналомОстаткиИОбороты.СуммаОборот,
	|	РасчетыСПерсоналомОстаткиИОбороты.СуммаВалОборот,
	|	РасчетыСПерсоналомОстаткиИОбороты.СуммаКонечныйОстаток,
	|	РасчетыСПерсоналомОстаткиИОбороты.СуммаВалКонечныйОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСПерсоналом.ОстаткиИОбороты(&НижняяГраница, &ВерхняяГраница, Месяц, ДвиженияИГраницыПериода, Организация = &Организация) КАК РасчетыСПерсоналомОстаткиИОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПодотчетникамиОстаткиИОбороты.Период,
	|	РасчетыСПодотчетникамиОстаткиИОбороты.СуммаОборот,
	|	РасчетыСПодотчетникамиОстаткиИОбороты.СуммаВалОборот,
	|	РасчетыСПодотчетникамиОстаткиИОбороты.СуммаКонечныйОстаток,
	|	РасчетыСПодотчетникамиОстаткиИОбороты.СуммаВалКонечныйОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСПодотчетниками.ОстаткиИОбороты(&НижняяГраница, &ВерхняяГраница, Месяц, ДвиженияИГраницыПериода, Организация = &Организация) КАК РасчетыСПодотчетникамиОстаткиИОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПокупателямиОстаткиИОбороты.Период,
	|	РасчетыСПокупателямиОстаткиИОбороты.СуммаОборот,
	|	РасчетыСПокупателямиОстаткиИОбороты.СуммаВалОборот,
	|	РасчетыСПокупателямиОстаткиИОбороты.СуммаКонечныйОстаток,
	|	РасчетыСПокупателямиОстаткиИОбороты.СуммаВалКонечныйОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями.ОстаткиИОбороты(&НижняяГраница, &ВерхняяГраница, Месяц, ДвиженияИГраницыПериода, Организация = &Организация) КАК РасчетыСПокупателямиОстаткиИОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПоставщикамиОстаткиИОбороты.Период,
	|	РасчетыСПоставщикамиОстаткиИОбороты.СуммаОборот,
	|	РасчетыСПоставщикамиОстаткиИОбороты.СуммаВалОборот,
	|	РасчетыСПоставщикамиОстаткиИОбороты.СуммаКонечныйОстаток,
	|	РасчетыСПоставщикамиОстаткиИОбороты.СуммаВалКонечныйОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(&НижняяГраница, &ВерхняяГраница, Месяц, ДвиженияИГраницыПериода, Организация = &Организация) КАК РасчетыСПоставщикамиОстаткиИОбороты
	|ИТОГИ
	|	СУММА(СуммаОборот),
	|	СУММА(СуммаВалОборот),
	|	СУММА(СуммаКонечныйОстаток),
	|	СУММА(СуммаВалКонечныйОстаток)
	|ПО
	|	Период ПЕРИОДАМИ(МЕСЯЦ, &НижняяГраница, &ВерхняяГраница)";
	Результат = ЗапросИтоги.Выполнить();
	ТаблицаДанных = Результат.Выгрузить().СкопироватьКолонки("Период");
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "ВСЕ");
	Пока Выборка.Следующий() Цикл
		Если Выборка.СуммаОборот = Выборка.СуммаВалОборот И Выборка.СуммаКонечныйОстаток = Выборка.СуммаВалКонечныйОстаток Тогда
			Продолжить;
		КонецЕсли;
		ТаблицаДанных.Добавить().Период = Выборка.Период;
	КонецЦикла;
	ЗапросВТ = Новый Запрос;
	ЗапросВТ.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросВТ.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	ЗапросВТ.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаКурсовыхРазниц.Период КАК Период
	|ПОМЕСТИТЬ КурсовыеРазницы
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаКурсовыхРазниц";
	ЗапросВТ.Выполнить();
	
	// Имущество
	ЗапросИтоги = Новый Запрос;
	ЗапросИтоги.УстановитьПараметр("Организация", Организация);
	ЗапросИтоги.УстановитьПараметр("НижняяГраница", НижняяГраница);
	ЗапросИтоги.УстановитьПараметр("ВерхняяГраница", ВерхняяГраница);
	ЗапросИтоги.Текст = 
	"ВЫБРАТЬ
	|	ВнеоборотныеАктивыОстаткиИОбороты.Период КАК Период,
	|	ВнеоборотныеАктивыОстаткиИОбороты.СтоимостьКонечныйОстаток КАК СтоимостьКонечныйОстаток,
	|	ВнеоборотныеАктивыОстаткиИОбороты.АмортизацияКонечныйОстаток КАК АмортизацияКонечныйОстаток,
	|	ВнеоборотныеАктивыОстаткиИОбороты.СтоимостьНачальныйОстаток КАК СтоимостьНачальныйОстаток,
	|	ВнеоборотныеАктивыОстаткиИОбороты.АмортизацияНачальныйОстаток КАК АмортизацияНачальныйОстаток
	|ИЗ
	|	РегистрНакопления.ВнеоборотныеАктивы.ОстаткиИОбороты(&НижняяГраница, &ВерхняяГраница, Месяц, ДвиженияИГраницыПериода, Организация = &Организация) КАК ВнеоборотныеАктивыОстаткиИОбороты
	|ИТОГИ
	|	СУММА(СтоимостьКонечныйОстаток),
	|	СУММА(АмортизацияКонечныйОстаток),
	|	СУММА(СтоимостьНачальныйОстаток),
	|	СУММА(АмортизацияНачальныйОстаток)
	|ПО
	|	Период ПЕРИОДАМИ(МЕСЯЦ, &НижняяГраница, &ВерхняяГраница)";
	Результат = ЗапросИтоги.Выполнить();
	ТаблицаДанных = Результат.Выгрузить().СкопироватьКолонки("Период");
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "ВСЕ");
	Пока Выборка.Следующий() Цикл
		Если (Выборка.СтоимостьНачальныйОстаток = 0 ИЛИ Выборка.СтоимостьНачальныйОстаток = Выборка.АмортизацияНачальныйОстаток)
			И (Выборка.СтоимостьКонечныйОстаток = 0 ИЛИ Выборка.СтоимостьКонечныйОстаток = Выборка.АмортизацияКонечныйОстаток) Тогда
			Продолжить;
		КонецЕсли;
		ТаблицаДанных.Добавить().Период = Выборка.Период;
	КонецЦикла;
	ЗапросВТ = Новый Запрос;
	ЗапросВТ.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросВТ.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	ЗапросВТ.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИмущества.Период КАК Период
	|ПОМЕСТИТЬ Имущество
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаИмущества";
	ЗапросВТ.Выполнить();
	
КонецПроцедуры

Функция ТекстЗапросаОперацииЗакрытияМесяца()
	
	Возврат 
	"ВЫБРАТЬ
	|	ЗапасыОстаткиИОбороты.Период КАК Месяц,
	|	ИСТИНА КАК РасчетПрямыхЗатрат,
	|	ИСТИНА КАК РасчетФактическойСебестоимости,
	|	ЛОЖЬ КАК РаспределениеЗатрат,
	|	ЛОЖЬ КАК РасчетФинансовогоРезультата,
	|	ЛОЖЬ КАК РасчетКурсовыхРазниц,
	|	ЛОЖЬ КАК РасчетСебестоимостиВРозницеСуммовойУчет,
	|	ЛОЖЬ КАК НачислениеАмортизации
	|ПОМЕСТИТЬ ТребуемыеОперации
	|ИЗ
	|	РегистрНакопления.Запасы.ОстаткиИОбороты(&НижняяГраница, &ВерхняяГраница, Месяц, Движения, Организация = &Организация) КАК ЗапасыОстаткиИОбороты
	|ГДЕ
	|	ЗапасыОстаткиИОбороты.КоличествоОборот <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗапасыРаспределяемыеЗатраты.Период,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	ЗапасыРаспределяемыеЗатраты КАК ЗапасыРаспределяемыеЗатраты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоходыИРасходыОбороты.Период,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрНакопления.ДоходыИРасходы.Обороты(
	|			&НижняяГраница,
	|			&ВерхняяГраница,
	|			Месяц,
	|			Организация = &Организация
	|				И (СчетУчета.СпособРаспределения = ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияРасходов.НеРаспределять)
	|					ИЛИ (НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж = СчетУчета
	|						ИЛИ НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж = СчетУчета)
	|						И НаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее))) КАК ДоходыИРасходыОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КурсовыеРазницы.Период,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	КурсовыеРазницы КАК КурсовыеРазницы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СуммовойУчетВРозницеОбороты.Период,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрНакопления.СуммовойУчетВРознице.Обороты(&НижняяГраница, &ВерхняяГраница, Месяц, Организация = &Организация) КАК СуммовойУчетВРозницеОбороты
	|ГДЕ
	|	(СуммовойУчетВРозницеОбороты.СуммаПриход <> 0
	|			ИЛИ СуммовойУчетВРозницеОбороты.СуммаРасход <> 0
	|			ИЛИ СуммовойУчетВРозницеОбороты.СебестоимостьПриход <> 0
	|			ИЛИ СуммовойУчетВРозницеОбороты.СебестоимостьРасход <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Имущество.Период,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА
	|ИЗ
	|	Имущество КАК Имущество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ЗакрытиеМесяца.Дата, МЕСЯЦ) КАК Месяц,
	|	МАКСИМУМ(ЗакрытиеМесяца.РасчетПрямыхЗатрат) КАК РасчетПрямыхЗатрат,
	|	МАКСИМУМ(ЗакрытиеМесяца.РаспределениеЗатрат) КАК РаспределениеЗатрат,
	|	МАКСИМУМ(ЗакрытиеМесяца.РасчетФактическойСебестоимости) КАК РасчетФактическойСебестоимости,
	|	МАКСИМУМ(ЗакрытиеМесяца.РасчетФинансовогоРезультата) КАК РасчетФинансовогоРезультата,
	|	МАКСИМУМ(ЗакрытиеМесяца.РасчетКурсовыхРазниц) КАК РасчетКурсовыхРазниц,
	|	МАКСИМУМ(ЗакрытиеМесяца.РасчетСебестоимостиВРозницеСуммовойУчет) КАК РасчетСебестоимостиВРозницеСуммовойУчет,
	|	ЛОЖЬ КАК НачислениеАмортизации
	|ПОМЕСТИТЬ ВыполненныеОперации
	|ИЗ
	|	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
	|ГДЕ
	|	ЗакрытиеМесяца.Организация = &Организация
	|	И ЗакрытиеМесяца.Проведен
	|	И ЗакрытиеМесяца.Дата МЕЖДУ &НижняяГраница И &ВерхняяГраница
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ЗакрытиеМесяца.Дата, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(АмортизацияВА.Дата, МЕСЯЦ),
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА
	|ИЗ
	|	Документ.АмортизацияВА КАК АмортизацияВА
	|ГДЕ
	|	АмортизацияВА.Организация = &Организация
	|	И АмортизацияВА.Проведен
	|	И АмортизацияВА.Дата МЕЖДУ &НижняяГраница И &ВерхняяГраница
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(АмортизацияВА.Дата, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Месяц КАК Месяц,
	|	МАКСИМУМ(ВложенныйЗапрос.РасчетПрямыхЗатрат) КАК РасчетПрямыхЗатратТребуется,
	|	МАКСИМУМ(ВложенныйЗапрос.РасчетФактическойСебестоимости) КАК РасчетФактическойСебестоимостиТребуется,
	|	МАКСИМУМ(ВложенныйЗапрос.РаспределениеЗатрат) КАК РаспределениеЗатратТребуется,
	|	МАКСИМУМ(ВложенныйЗапрос.РасчетФинансовогоРезультата) КАК РасчетФинансовогоРезультатаТребуется,
	|	МАКСИМУМ(ВложенныйЗапрос.РасчетКурсовыхРазниц) КАК РасчетКурсовыхРазницТребуется,
	|	МАКСИМУМ(ВложенныйЗапрос.РасчетСебестоимостиВРозницеСуммовойУчет) КАК РасчетСебестоимостиВРозницеСуммовойУчетТребуется,
	|	МАКСИМУМ(ВложенныйЗапрос.НачислениеАмортизации) КАК НачислениеАмортизацииТребуется,
	|	МАКСИМУМ(ВложенныйЗапрос.РасчетПрямыхЗатратВыполнен) КАК РасчетПрямыхЗатратВыполнен,
	|	МАКСИМУМ(ВложенныйЗапрос.РасчетФактическойСебестоимостиВыполнен) КАК РасчетФактическойСебестоимостиВыполнен,
	|	МАКСИМУМ(ВложенныйЗапрос.РаспределениеЗатратВыполнен) КАК РаспределениеЗатратВыполнен,
	|	МАКСИМУМ(ВложенныйЗапрос.РасчетФинансовогоРезультатаВыполнен) КАК РасчетФинансовогоРезультатаВыполнен,
	|	МАКСИМУМ(ВложенныйЗапрос.РасчетКурсовыхРазницВыполнен) КАК РасчетКурсовыхРазницВыполнен,
	|	МАКСИМУМ(ВложенныйЗапрос.РасчетСебестоимостиВРозницеСуммовойУчетВыполнен) КАК РасчетСебестоимостиВРозницеСуммовойУчетВыполнен,
	|	МАКСИМУМ(ВложенныйЗапрос.НачислениеАмортизацииВыполнен) КАК НачислениеАмортизацииВыполнен
	|ПОМЕСТИТЬ ОперацииЗакрытияМесяца
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТребуемыеОперации.Месяц КАК Месяц,
	|		ТребуемыеОперации.РасчетПрямыхЗатрат КАК РасчетПрямыхЗатрат,
	|		ТребуемыеОперации.РасчетФактическойСебестоимости КАК РасчетФактическойСебестоимости,
	|		ТребуемыеОперации.РаспределениеЗатрат КАК РаспределениеЗатрат,
	|		ТребуемыеОперации.РасчетФинансовогоРезультата КАК РасчетФинансовогоРезультата,
	|		ТребуемыеОперации.РасчетКурсовыхРазниц КАК РасчетКурсовыхРазниц,
	|		ТребуемыеОперации.РасчетСебестоимостиВРозницеСуммовойУчет КАК РасчетСебестоимостиВРозницеСуммовойУчет,
	|		ТребуемыеОперации.НачислениеАмортизации КАК НачислениеАмортизации,
	|		ЛОЖЬ КАК РасчетПрямыхЗатратВыполнен,
	|		ЛОЖЬ КАК РасчетФактическойСебестоимостиВыполнен,
	|		ЛОЖЬ КАК РаспределениеЗатратВыполнен,
	|		ЛОЖЬ КАК РасчетФинансовогоРезультатаВыполнен,
	|		ЛОЖЬ КАК РасчетКурсовыхРазницВыполнен,
	|		ЛОЖЬ КАК РасчетСебестоимостиВРозницеСуммовойУчетВыполнен,
	|		ЛОЖЬ КАК НачислениеАмортизацииВыполнен
	|	ИЗ
	|		ТребуемыеОперации КАК ТребуемыеОперации
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВыполненныеОперации.Месяц,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ВыполненныеОперации.РасчетПрямыхЗатрат,
	|		ВыполненныеОперации.РасчетФактическойСебестоимости,
	|		ВыполненныеОперации.РаспределениеЗатрат,
	|		ВыполненныеОперации.РасчетФинансовогоРезультата,
	|		ВыполненныеОперации.РасчетКурсовыхРазниц,
	|		ВыполненныеОперации.РасчетСебестоимостиВРозницеСуммовойУчет,
	|		ВыполненныеОперации.НачислениеАмортизации
	|	ИЗ
	|		ВыполненныеОперации КАК ВыполненныеОперации) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Месяц";
	
КонецФункции

Функция ТекстЗапросаПолучениеДанных()
	
	Возврат
	"ВЫБРАТЬ
	|	ТаблицаМесяцы.Месяц КАК Месяц
	|ПОМЕСТИТЬ ТаблицаМесяцы
	|ИЗ
	|	&ТаблицаМесяцы КАК ТаблицаМесяцы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Месяц КАК Месяц,
	|	ИСТИНА КАК ПроверкаАвансыПокупателейТребуется,
	|	ИСТИНА КАК ПроверкаАвансыПоставщикамТребуется,
	|	ИСТИНА КАК ПроверкаСтатьиДДСТребуется,
	|	ИСТИНА КАК ПроверкаОрганизацииИДоговорыТребуется,
	|	МАКСИМУМ(ВложенныйЗапрос.НачислениеАмортизацииТребуется) КАК НачислениеАмортизацииТребуется,
	|	МАКСИМУМ(ВложенныйЗапрос.РасчетПрямыхЗатратТребуется) КАК РасчетПрямыхЗатратТребуется,
	|	МАКСИМУМ(ВложенныйЗапрос.РаспределениеЗатратТребуется) КАК РаспределениеЗатратТребуется,
	|	МАКСИМУМ(ВложенныйЗапрос.РасчетФактическойСебестоимостиТребуется) КАК РасчетФактическойСебестоимостиТребуется,
	|	МАКСИМУМ(ВложенныйЗапрос.РасчетСебестоимостиВРозницеСуммовойУчетТребуется) КАК РасчетСебестоимостиВРозницеТребуется,
	|	МАКСИМУМ(ВложенныйЗапрос.РасчетКурсовыхРазницТребуется) КАК РасчетКурсовыхРазницТребуется,
	|	МАКСИМУМ(ВложенныйЗапрос.РасчетФинансовогоРезультатаТребуется) КАК РасчетФинансовогоРезультатаТребуется,
	|	ЛОЖЬ КАК ПроверкаАвансыПокупателейВыполнен,
	|	ЛОЖЬ КАК ПроверкаАвансыПоставщикамВыполнен,
	|	ЛОЖЬ КАК ПроверкаСтатьиДДСВыполнен,
	|	ЛОЖЬ КАК ПроверкаОрганизацииИДоговорыВыполнен,
	|	МАКСИМУМ(ВложенныйЗапрос.НачислениеАмортизацииВыполнен) КАК НачислениеАмортизацииВыполнен,
	|	МАКСИМУМ(ВложенныйЗапрос.РасчетПрямыхЗатратВыполнен) КАК РасчетПрямыхЗатратВыполнен,
	|	МАКСИМУМ(ВложенныйЗапрос.РаспределениеЗатратВыполнен) КАК РаспределениеЗатратВыполнен,
	|	МАКСИМУМ(ВложенныйЗапрос.РасчетФактическойСебестоимостиВыполнен) КАК РасчетФактическойСебестоимостиВыполнен,
	|	МАКСИМУМ(ВложенныйЗапрос.РасчетСебестоимостиВРозницеСуммовойУчетВыполнен) КАК РасчетСебестоимостиВРозницеВыполнен,
	|	МАКСИМУМ(ВложенныйЗапрос.РасчетКурсовыхРазницВыполнен) КАК РасчетКурсовыхРазницВыполнен,
	|	МАКСИМУМ(ВложенныйЗапрос.РасчетФинансовогоРезультатаВыполнен) КАК РасчетФинансовогоРезультатаВыполнен,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ВложенныйЗапрос.РасчетПрямыхЗатратТребуется)
	|					И НЕ МАКСИМУМ(ВложенныйЗапрос.РасчетПрямыхЗатратВыполнен)
	|				ИЛИ МАКСИМУМ(ВложенныйЗапрос.РасчетФактическойСебестоимостиТребуется)
	|					И НЕ МАКСИМУМ(ВложенныйЗапрос.РасчетФактическойСебестоимостиВыполнен)
	|				ИЛИ МАКСИМУМ(ВложенныйЗапрос.РаспределениеЗатратТребуется)
	|					И НЕ МАКСИМУМ(ВложенныйЗапрос.РаспределениеЗатратВыполнен)
	|				ИЛИ МАКСИМУМ(ВложенныйЗапрос.РасчетФинансовогоРезультатаТребуется)
	|					И НЕ МАКСИМУМ(ВложенныйЗапрос.РасчетФинансовогоРезультатаВыполнен)
	|				ИЛИ МАКСИМУМ(ВложенныйЗапрос.РасчетКурсовыхРазницТребуется)
	|					И НЕ МАКСИМУМ(ВложенныйЗапрос.РасчетКурсовыхРазницВыполнен)
	|				ИЛИ МАКСИМУМ(ВложенныйЗапрос.РасчетСебестоимостиВРозницеСуммовойУчетТребуется)
	|					И НЕ МАКСИМУМ(ВложенныйЗапрос.РасчетСебестоимостиВРозницеСуммовойУчетВыполнен)
	|				ИЛИ МАКСИМУМ(ВложенныйЗапрос.НачислениеАмортизацииТребуется)
	|					И НЕ МАКСИМУМ(ВложенныйЗапрос.НачислениеАмортизацииВыполнен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗакрытиеНеВыполнено
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаМесяцы.Месяц КАК Месяц,
	|		ЛОЖЬ КАК РасчетПрямыхЗатратТребуется,
	|		ЛОЖЬ КАК РасчетФактическойСебестоимостиТребуется,
	|		ЛОЖЬ КАК РаспределениеЗатратТребуется,
	|		ЛОЖЬ КАК РасчетФинансовогоРезультатаТребуется,
	|		ЛОЖЬ КАК РасчетКурсовыхРазницТребуется,
	|		ЛОЖЬ КАК РасчетСебестоимостиВРозницеСуммовойУчетТребуется,
	|		ЛОЖЬ КАК НачислениеАмортизацииТребуется,
	|		ЛОЖЬ КАК РасчетПрямыхЗатратВыполнен,
	|		ЛОЖЬ КАК РасчетФактическойСебестоимостиВыполнен,
	|		ЛОЖЬ КАК РаспределениеЗатратВыполнен,
	|		ЛОЖЬ КАК РасчетФинансовогоРезультатаВыполнен,
	|		ЛОЖЬ КАК РасчетКурсовыхРазницВыполнен,
	|		ЛОЖЬ КАК РасчетСебестоимостиВРозницеСуммовойУчетВыполнен,
	|		ЛОЖЬ КАК НачислениеАмортизацииВыполнен
	|	ИЗ
	|		ТаблицаМесяцы КАК ТаблицаМесяцы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОперацииЗакрытияМесяца.Месяц,
	|		ОперацииЗакрытияМесяца.РасчетПрямыхЗатратТребуется,
	|		ОперацииЗакрытияМесяца.РасчетФактическойСебестоимостиТребуется,
	|		ОперацииЗакрытияМесяца.РаспределениеЗатратТребуется,
	|		ОперацииЗакрытияМесяца.РасчетФинансовогоРезультатаТребуется,
	|		ОперацииЗакрытияМесяца.РасчетКурсовыхРазницТребуется,
	|		ОперацииЗакрытияМесяца.РасчетСебестоимостиВРозницеСуммовойУчетТребуется,
	|		ОперацииЗакрытияМесяца.НачислениеАмортизацииТребуется,
	|		ОперацииЗакрытияМесяца.РасчетПрямыхЗатратВыполнен,
	|		ОперацииЗакрытияМесяца.РасчетФактическойСебестоимостиВыполнен,
	|		ОперацииЗакрытияМесяца.РаспределениеЗатратВыполнен,
	|		ОперацииЗакрытияМесяца.РасчетФинансовогоРезультатаВыполнен,
	|		ОперацииЗакрытияМесяца.РасчетКурсовыхРазницВыполнен,
	|		ОперацииЗакрытияМесяца.РасчетСебестоимостиВРозницеСуммовойУчетВыполнен,
	|		ОперацииЗакрытияМесяца.НачислениеАмортизацииВыполнен
	|	ИЗ
	|		ОперацииЗакрытияМесяца КАК ОперацииЗакрытияМесяца) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Месяц
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ОшибкиЗакрытияМесяца.Период, МЕСЯЦ) КАК Месяц,
	|	ОшибкиЗакрытияМесяца.ВидОперации КАК Секция,
	|	ОшибкиЗакрытияМесяца.ОписаниеОшибки КАК ТекстСообщения,
	|	ОшибкиЗакрытияМесяца.Аналитика КАК Аналитика
	|ИЗ
	|	РегистрСведений.ОшибкиЗакрытияМесяца КАК ОшибкиЗакрытияМесяца
	|ГДЕ
	|	ОшибкиЗакрытияМесяца.Период МЕЖДУ &НижняяГраница И &ВерхняяГраница
	|	И ОшибкиЗакрытияМесяца.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзмененияЗакрытогоМесяца.Месяц КАК Месяц,
	|	ИзмененияЗакрытогоМесяца.ИзмененныйДокумент КАК ИзмененныйДокумент
	|ИЗ
	|	РегистрСведений.ИзмененияЗакрытогоМесяца КАК ИзмененияЗакрытогоМесяца
	|ГДЕ
	|	ИзмененияЗакрытогоМесяца.Организация = &Организация
	|	И ИзмененияЗакрытогоМесяца.Месяц МЕЖДУ &НижняяГраница И &ВерхняяГраница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ЗапасыОстаткиИОбороты.Период, МЕСЯЦ) КАК Месяц,
	|	ЗапасыОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|	ЗапасыОстаткиИОбороты.Характеристика КАК Характеристика,
	|	ЗапасыОстаткиИОбороты.Партия КАК Партия,
	|	ЗапасыОстаткиИОбороты.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗапасыОстаткиИОбороты.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстаткиИОбороты.КоличествоКонечныйОстаток КАК Остаток
	|ПОМЕСТИТЬ ОтрицательныеОстатки
	|ИЗ
	|	РегистрНакопления.Запасы.ОстаткиИОбороты(&НижняяГраница, &ВерхняяГраница, Месяц, Движения, Организация = &Организация) КАК ЗапасыОстаткиИОбороты
	|ГДЕ
	|	ЗапасыОстаткиИОбороты.КоличествоКонечныйОстаток < 0
	|	И ЗапасыОстаткиИОбороты.КоличествоНачальныйОстаток <> ЗапасыОстаткиИОбороты.КоличествоКонечныйОстаток
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ЗапасыРезервОстаткиИОбороты.Период, МЕСЯЦ) КАК Месяц,
	|	ЗапасыРезервОстаткиИОбороты.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыРезервОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|	ЗапасыРезервОстаткиИОбороты.Характеристика КАК Характеристика,
	|	ЗапасыРезервОстаткиИОбороты.Партия КАК Партия,
	|	СУММА(ЗапасыРезервОстаткиИОбороты.КоличествоОборот) КАК ИзменениеРезерва
	|ПОМЕСТИТЬ Резервирования
	|ИЗ
	|	РегистрНакопления.Запасы.ОстаткиИОбороты(
	|			&НижняяГраница,
	|			&ВерхняяГраница,
	|			Регистратор,
	|			Движения,
	|			ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				И (Организация, СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия) В
	|					(ВЫБРАТЬ
	|						&Организация,
	|						ОтрицательныеОстатки.СтруктурнаяЕдиница,
	|						ОтрицательныеОстатки.Номенклатура,
	|						ОтрицательныеОстатки.Характеристика,
	|						ОтрицательныеОстатки.Партия
	|					ИЗ
	|						ОтрицательныеОстатки
	|					ГДЕ
	|						ОтрицательныеОстатки.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))) КАК ЗапасыРезервОстаткиИОбороты
	|ГДЕ
	|	(ЗапасыРезервОстаткиИОбороты.Регистратор ССЫЛКА Документ.ЗаказПокупателя
	|			ИЛИ ЗапасыРезервОстаткиИОбороты.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|			ИЛИ ЗапасыРезервОстаткиИОбороты.Регистратор ССЫЛКА Документ.РезервированиеЗапасов)
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ЗапасыРезервОстаткиИОбороты.Период, МЕСЯЦ),
	|	ЗапасыРезервОстаткиИОбороты.СтруктурнаяЕдиница,
	|	ЗапасыРезервОстаткиИОбороты.Номенклатура,
	|	ЗапасыРезервОстаткиИОбороты.Характеристика,
	|	ЗапасыРезервОстаткиИОбороты.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗапасыОстатки.КоличествоОстаток КАК ТекущийОстаток
	|ПОМЕСТИТЬ ТекущиеОстатки
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			,
	|			(Организация, СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|				(ВЫБРАТЬ
	|					&Организация,
	|					ОтрицательныеОстатки.СтруктурнаяЕдиница,
	|					ОтрицательныеОстатки.Номенклатура,
	|					ОтрицательныеОстатки.Характеристика,
	|					ОтрицательныеОстатки.Партия,
	|					ОтрицательныеОстатки.ЗаказПокупателя
	|				ИЗ
	|					ОтрицательныеОстатки)) КАК ЗапасыОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ЗапасыРезервОстаткиИОбороты.Период, МЕСЯЦ) КАК Месяц,
	|	ЗапасыРезервОстаткиИОбороты.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыРезервОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|	ЗапасыРезервОстаткиИОбороты.Характеристика КАК Характеристика,
	|	ЗапасыРезервОстаткиИОбороты.Партия КАК Партия,
	|	СУММА(ЗапасыРезервОстаткиИОбороты.КоличествоКонечныйОстаток) КАК ОстатокРезерва
	|ПОМЕСТИТЬ ОстаткиРезерва
	|ИЗ
	|	РегистрНакопления.Запасы.ОстаткиИОбороты(
	|			&НижняяГраница,
	|			&ВерхняяГраница,
	|			Месяц,
	|			ДвиженияИГраницыПериода,
	|			ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				И (Организация, СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия) В
	|					(ВЫБРАТЬ
	|						&Организация,
	|						ОтрицательныеОстатки.СтруктурнаяЕдиница,
	|						ОтрицательныеОстатки.Номенклатура,
	|						ОтрицательныеОстатки.Характеристика,
	|						ОтрицательныеОстатки.Партия
	|					ИЗ
	|						ОтрицательныеОстатки
	|					ГДЕ
	|						ОтрицательныеОстатки.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))) КАК ЗапасыРезервОстаткиИОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ЗапасыРезервОстаткиИОбороты.Период, МЕСЯЦ),
	|	ЗапасыРезервОстаткиИОбороты.СтруктурнаяЕдиница,
	|	ЗапасыРезервОстаткиИОбороты.Номенклатура,
	|	ЗапасыРезервОстаткиИОбороты.Характеристика,
	|	ЗапасыРезервОстаткиИОбороты.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтрицательныеОстатки.Месяц КАК Месяц,
	|	ОтрицательныеОстатки.Номенклатура КАК Номенклатура,
	|	ОтрицательныеОстатки.Характеристика КАК Характеристика,
	|	ОтрицательныеОстатки.Партия КАК Партия,
	|	ОтрицательныеОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ОтрицательныеОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОтрицательныеОстатки.Остаток КАК Остаток,
	|	ЕСТЬNULL(ТекущиеОстатки.ТекущийОстаток, 0) КАК ТекущийОстаток,
	|	ЕСТЬNULL(Резервирования.ИзменениеРезерва, 0) КАК ИзменениеРезерва,
	|	ЕСТЬNULL(ОстаткиРезерва.ОстатокРезерва, 0) КАК ОстатокРезерва
	|ИЗ
	|	ОтрицательныеОстатки КАК ОтрицательныеОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Резервирования КАК Резервирования
	|		ПО ОтрицательныеОстатки.СтруктурнаяЕдиница = Резервирования.СтруктурнаяЕдиница
	|			И ОтрицательныеОстатки.Месяц = Резервирования.Месяц
	|			И ОтрицательныеОстатки.Номенклатура = Резервирования.Номенклатура
	|			И ОтрицательныеОстатки.Характеристика = Резервирования.Характеристика
	|			И ОтрицательныеОстатки.Партия = Резервирования.Партия
	|			И (ОтрицательныеОстатки.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТекущиеОстатки КАК ТекущиеОстатки
	|		ПО ОтрицательныеОстатки.СтруктурнаяЕдиница = ТекущиеОстатки.СтруктурнаяЕдиница
	|			И ОтрицательныеОстатки.Номенклатура = ТекущиеОстатки.Номенклатура
	|			И ОтрицательныеОстатки.Характеристика = ТекущиеОстатки.Характеристика
	|			И ОтрицательныеОстатки.Партия = ТекущиеОстатки.Партия
	|			И ОтрицательныеОстатки.ЗаказПокупателя = ТекущиеОстатки.ЗаказПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиРезерва КАК ОстаткиРезерва
	|		ПО ОтрицательныеОстатки.СтруктурнаяЕдиница = ОстаткиРезерва.СтруктурнаяЕдиница
	|			И ОтрицательныеОстатки.Месяц = ОстаткиРезерва.Месяц
	|			И ОтрицательныеОстатки.Номенклатура = ОстаткиРезерва.Номенклатура
	|			И ОтрицательныеОстатки.Характеристика = ОстаткиРезерва.Характеристика
	|			И ОтрицательныеОстатки.Партия = ОстаткиРезерва.Партия
	|			И (ОтрицательныеОстатки.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ЗакрытиеМесяца.Дата, МЕСЯЦ) КАК Месяц,
	|	ЗакрытиеМесяца.Организация КАК Организация
	|ПОМЕСТИТЬ ЗакрытыеМесяцы
	|ИЗ
	|	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
	|ГДЕ
	|	ЗакрытиеМесяца.Проведен
	|	И ЗакрытиеМесяца.РасчетФактическойСебестоимости
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ЗакрытиеМесяца.Дата, МЕСЯЦ),
	|	ЗакрытиеМесяца.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ЗапасыОстаткиИОбороты.Период, МЕСЯЦ) КАК Месяц,
	|	ЗапасыОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|	ЗапасыОстаткиИОбороты.Характеристика КАК Характеристика,
	|	ЗапасыОстаткиИОбороты.Партия КАК Партия,
	|	ЗапасыОстаткиИОбороты.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗапасыОстаткиИОбороты.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстаткиИОбороты.КоличествоКонечныйОстаток КАК Остаток
	|ИЗ
	|	РегистрНакопления.Запасы.ОстаткиИОбороты(
	|			&НижняяГраница,
	|			&ВерхняяГраница,
	|			Месяц,
	|			Движения,
	|			Организация = &Организация
	|				И СчетУчета.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.Запасы)
	|				И СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)) КАК ЗапасыОстаткиИОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗакрытыеМесяцы КАК ЗакрытыеМесяцы
	|		ПО ЗапасыОстаткиИОбороты.Организация = ЗакрытыеМесяцы.Организация
	|			И (НАЧАЛОПЕРИОДА(ЗапасыОстаткиИОбороты.Период, МЕСЯЦ) = ЗакрытыеМесяцы.Месяц)
	|ГДЕ
	|	ЗапасыОстаткиИОбороты.КоличествоКонечныйОстаток = 0
	|	И ЗапасыОстаткиИОбороты.КоличествоНачальныйОстаток <> ЗапасыОстаткиИОбороты.КоличествоКонечныйОстаток
	|	И ЗапасыОстаткиИОбороты.СуммаКонечныйОстаток <> 0
	|	И НЕ ЗакрытыеМесяцы.Месяц ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(РНЗапасы.Период, МЕСЯЦ) КАК Месяц,
	|	НАЧАЛОПЕРИОДА(РНЗапасы.Период, ДЕНЬ) КАК День,
	|	ЕСТЬNULL(ДокументЧекККМ.КассоваяСмена, ДокументЧекККМВозврат.КассоваяСмена) КАК КассоваяСмена,
	|	ЕСТЬNULL(ДокументЧекККМ.КассаККМ, ДокументЧекККМВозврат.КассаККМ) КАК КассаККМ
	|ИЗ
	|	РегистрНакопления.Запасы КАК РНЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ДокументЧекККМ
	|		ПО РНЗапасы.Регистратор = ДокументЧекККМ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат КАК ДокументЧекККМВозврат
	|		ПО РНЗапасы.Регистратор = ДокументЧекККМВозврат.Ссылка
	|ГДЕ
	|	РНЗапасы.Период МЕЖДУ &НижняяГраница И &ВерхняяГраница
	|	И РНЗапасы.Регистратор ССЫЛКА Документ.ЧекККМ
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(РНЗапасы.Период, ДЕНЬ),
	|	НАЧАЛОПЕРИОДА(РНЗапасы.Период, МЕСЯЦ),
	|	ЕСТЬNULL(ДокументЧекККМ.КассоваяСмена, ДокументЧекККМВозврат.КассоваяСмена),
	|	ЕСТЬNULL(ДокументЧекККМ.КассаККМ, ДокументЧекККМВозврат.КассаККМ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц,
	|	День
	|ИТОГИ ПО
	|	Месяц,
	|	День";
	
КонецФункции

Процедура ДобавитьСекции(РезультатЗапроса, РезультатРасчета, НижняяГраница, ВерхняяГраница)
		
	ВыборкаМесяцы = РезультатЗапроса[1].Выбрать();
	Пока ВыборкаМесяцы.Следующий() Цикл
		СтрокаМесяца = СтрокаРезультата(РезультатРасчета, ВыборкаМесяцы.Месяц, , Истина);
		ПериодДетальногоАнализа = ПериодДетальногоАнализа(ВыборкаМесяцы, НижняяГраница, ВерхняяГраница);
		Если НЕ ПериодДетальногоАнализа И НЕ ВыборкаМесяцы.ЗакрытиеНеВыполнено  Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьСтрокуСекции(ПериодДетальногоАнализа, ВыборкаМесяцы, СекцияНачислениеАмортизации(), СтрокаМесяца);
		ДобавитьСтрокуСекции(ПериодДетальногоАнализа, ВыборкаМесяцы, СекцияРасчетПрямыхЗатрат(), СтрокаМесяца);
		ДобавитьСтрокуСекции(ПериодДетальногоАнализа, ВыборкаМесяцы, СекцияРаспределениеЗатрат(), СтрокаМесяца);
		ДобавитьСтрокуСекции(ПериодДетальногоАнализа, ВыборкаМесяцы, СекцияРасчетФактическойСебестоимости(), СтрокаМесяца);
		ДобавитьСтрокуСекции(ПериодДетальногоАнализа, ВыборкаМесяцы, СекцияРасчетСебестоимостиВРознице(), СтрокаМесяца);
		ДобавитьСтрокуСекции(ПериодДетальногоАнализа, ВыборкаМесяцы, СекцияРасчетКурсовыхРазниц(), СтрокаМесяца);
		ДобавитьСтрокуСекции(ПериодДетальногоАнализа, ВыборкаМесяцы, СекцияРасчетФинансовогоРезультата(), СтрокаМесяца);
	КонецЦикла;
	
КонецПроцедуры

Функция ПустоеДеревоРезультатаРасчета()
	
	Результат = Новый ДеревоЗначений;
	Результат.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	Результат.Колонки.Добавить("Секция", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)));
	Результат.Колонки.Добавить("ТекстСообщения", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	Результат.Колонки.Добавить("Подробности");
	Результат.Колонки.Добавить("СостояниеЗакрытия", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(25)));
	Возврат Результат;
	
КонецФункции

Функция СтрокаРезультата(ДеревоРезультата, Месяц, Секция = Неопределено, Создавать = Ложь)
	
	СтрокаМесяц = ДеревоРезультата.Строки.Найти(Месяц, "Месяц");
	Если СтрокаМесяц = Неопределено И Создавать Тогда
		СтрокаМесяц = ДеревоРезультата.Строки.Добавить();
		СтрокаМесяц.Месяц = Месяц;
	КонецЕсли; 
	Если СтрокаМесяц = Неопределено ИЛИ Секция = Неопределено Тогда
		Возврат СтрокаМесяц;
	Иначе
		СтрокаСекция = СтрокаМесяц.Строки.Найти(Секция, "Секция");
		Если СтрокаСекция = Неопределено И Создавать Тогда
			СтрокаСекция = СтрокаМесяц.Строки.Добавить();
			СтрокаСекция.Месяц = Месяц;
			СтрокаСекция.Секция = Секция;
		КонецЕсли; 
		Возврат СтрокаСекция; 
	КонецЕсли; 
	
КонецФункции

Процедура ДобавитьСтрокуСекции(ПериодДетальногоАнализа, ВыборкаМесяцы, Секция, СтрокаМесяца)
	
	ИмяПоляТребуется = СтрШаблон("%1Требуется", Секция);
	ИмяПоляВыполнен = СтрШаблон("%1Выполнен", Секция);
	
	Если ПериодДетальногоАнализа ИЛИ (ВыборкаМесяцы[ИмяПоляТребуется] И НЕ ВыборкаМесяцы[ИмяПоляВыполнен]) Тогда
		СтрокаСекции = СтрокаМесяца.Строки.Добавить();
		СтрокаСекции.Месяц = СтрокаМесяца.Месяц;
		СтрокаСекции.Секция = Секция;
		Если ВыборкаМесяцы[ИмяПоляВыполнен] Тогда
			СтрокаСекции.СостояниеЗакрытия = СостояниеЗакрыт();
		ИначеЕсли НЕ ВыборкаМесяцы[ИмяПоляТребуется] Тогда
			СтрокаСекции.СостояниеЗакрытия = СостояниеЗакрытиеНеТребуется();
		Иначе
			СтрокаСекции.СостояниеЗакрытия = СостояниеНеЗакрыт();
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Функция ПериодДетальногоАнализа(Выборка, НижняяГраница, ВерхняяГраница)
	
	Возврат (Выборка.Месяц >= НижняяГраница И Выборка.Месяц <= ВерхняяГраница);
	
КонецФункции

Процедура ДобавитьОшибкиЗакрытия(РезультатЗапроса, РезультатРасчета, НижняяГраница, ВерхняяГраница)
		
	ВыборкаОшибкиЗакрытия = РезультатЗапроса[2].Выбрать();
	Пока ВыборкаОшибкиЗакрытия.Следующий() Цикл
		СтрокаМесяца = СтрокаРезультата(РезультатРасчета, ВыборкаОшибкиЗакрытия.Месяц, , Истина);
		ПериодДетальногоАнализа = ПериодДетальногоАнализа(ВыборкаОшибкиЗакрытия, НижняяГраница, ВерхняяГраница);
		Если НЕ ПериодДетальногоАнализа Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаСекция = СтрокаРезультата(РезультатРасчета, ВыборкаОшибкиЗакрытия.Месяц, ВыборкаОшибкиЗакрытия.Секция, Истина);
		СтрокаОшибка = СтрокаСекция.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОшибка, ВыборкаОшибкиЗакрытия);
		СтруктураПодробностей = Новый Структура;
		СтруктураПодробностей.Вставить("Тип", ТипСообщенияОшибкаЗакрытияМесяца());
		СтруктураПодробностей.Вставить("Аналитика", ВыборкаОшибкиЗакрытия.Аналитика);
		СтрокаОшибка.Подробности = СтруктураПодробностей;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьПроверкуИнтеркампани(РезультатЗапроса, РезультатРасчета, Компания, ТаблицаМесяцы)
	
	Для каждого СтрокаМесяца Из ТаблицаМесяцы Цикл
		ТребуетсяЗакрытие = Документы.ПередачаТоваровМеждуОрганизациями.НужноЗаполнятьДокументыПередачТоваровМеждуОрганизациями(Компания, СтрокаМесяца.Месяц);
		Если ТребуетсяЗакрытие Тогда
			СтрокаСекция = СтрокаРезультата(РезультатРасчета, СтрокаМесяца.Месяц, СекцияРасчетФактическойСебестоимости(), Истина);
			СтрокаОшибка = СтрокаСекция.Строки.Добавить();
			СтрокаОшибка.Месяц = СтрокаМесяца.Месяц;
			СтрокаОшибка.Секция = СекцияРасчетФактическойСебестоимости();
			СтрокаОшибка.ТекстСообщения = НСтр("ru = 'Необходимо заполнить документы передачи товаров между организациями (интеркампани).'");
			СтруктураПодробностей = Новый Структура;
			СтруктураПодробностей.Вставить("Тип", ТипСообщенияОшибкаИнтеркампани());
			СтруктураПодробностей.Вставить("Аналитика", Неопределено);
			СтрокаОшибка.Подробности = СтруктураПодробностей;
		КонецЕсли; 
	КонецЦикла; 	
 
КонецПроцедуры
 
Процедура ДобавитьСообщенияОбИзменениях(РезультатЗапроса, РезультатРасчета, НижняяГраница, ВерхняяГраница)
		
	ВыборкаИзменения = РезультатЗапроса[3].Выбрать();
	ИзмененныеСтроки = Новый Массив;
	Пока ВыборкаИзменения.Следующий() Цикл
		СтрокаМесяца = СтрокаРезультата(РезультатРасчета, ВыборкаИзменения.Месяц, , Истина);
		ПериодДетальногоАнализа = ПериодДетальногоАнализа(ВыборкаИзменения, НижняяГраница, ВерхняяГраница);
		Если НЕ ПериодДетальногоАнализа Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаСекция = СтрокаРезультата(РезультатРасчета, ВыборкаИзменения.Месяц, СекцияРасчетФактическойСебестоимости(), Истина);
		СтрокаОшибка = Неопределено;
		Для каждого ВложеннаяСтрока Из СтрокаСекция.Строки Цикл
			Если ТипЗнч(ВложеннаяСтрока.Подробности) <> Тип("Структура") 
				ИЛИ НЕ ВложеннаяСтрока.Подробности.Свойство("Тип")
				ИЛИ ВложеннаяСтрока.Подробности.Тип <> ТипСообщенияИзмененныеДокументы() Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаОшибка = ВложеннаяСтрока;
			Прервать;
		КонецЦикла; 
		Если СтрокаОшибка = Неопределено Тогда
			СтрокаОшибка = СтрокаСекция.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОшибка, СтрокаСекция);
			СтруктураПодробностей = Новый Структура;
			СтруктураПодробностей.Вставить("Документы", Новый Массив);
		КонецЕсли;
		Если ТипЗнч(СтрокаОшибка.Подробности) <> Тип("Структура") Тогда
			СтруктураПодробностей = Новый Структура;
			СтруктураПодробностей.Вставить("Тип", ТипСообщенияИзмененныеДокументы());
			СтрокаОшибка.Подробности = СтруктураПодробностей;
		КонецЕсли; 
		Если НЕ СтрокаОшибка.Подробности.Свойство("Документы") Тогда
			СтрокаОшибка.Подробности.Вставить("Документы", Новый Массив);
		КонецЕсли;
		СтрокаОшибка.Подробности.Документы.Добавить(ВыборкаИзменения.ИзмененныйДокумент);
		Если ИзмененныеСтроки.Найти(СтрокаОшибка) = Неопределено Тогда
			ИзмененныеСтроки.Добавить(СтрокаОшибка);
		КонецЕсли; 
	КонецЦикла;
	Для каждого СтрокаОшибка Из ИзмененныеСтроки Цикл
		ШаблонСообщения = НСтр("ru = 'С последнего закрытия месяца изменено %1.
                             |Необходимо закрыть месяц еще раз чтобы актуализировать данные о фактической себестоимости.'");
		КоличествоДокументов = СтрокаОшибка.Подробности.Документы.Количество();
		ПодставляемаяСтрока = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru = ';%1 документ;;%1 документа;%1 документов;%1 документа'"), 
		КоличествоДокументов);
		СтрокаОшибка.ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодставляемаяСтрока);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ВыполнитьПроверкуОстатков(РезультатЗапроса, РезультатРасчета, НижняяГраница, ВерхняяГраница)
		
	ТаблицаОстатков = РезультатЗапроса[8].Выгрузить();
	Для каждого СтрокаМесяц Из РезультатРасчета.Строки Цикл
		ПериодДетальногоАнализа = ПериодДетальногоАнализа(СтрокаМесяц, НижняяГраница, ВерхняяГраница);
		Если НЕ ПериодДетальногоАнализа Тогда
			Продолжить;
		КонецЕсли;
		СтрокаСекция = СтрокаРезультата(РезультатРасчета, СтрокаМесяц.Месяц, СекцияРасчетФактическойСебестоимости(), Истина);
		МассивПереносРезерва = Новый Массив;
		МассивОтрицательныеОстатки = Новый Массив;
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Месяц", СтрокаМесяц.Месяц);
		СтрокиОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаОстатка Из СтрокиОстатков Цикл
			СтруктураОписания = Новый Структура("Номенклатура, Характеристика, Партия, ЗаказПокупателя, СтруктурнаяЕдиница");
			ЗаполнитьЗначенияСвойств(СтруктураОписания, СтрокаОстатка);
			Если НЕ ЗначениеЗаполнено(СтрокаОстатка.ЗаказПокупателя) 
				И СтрокаОстатка.ТекущийОстаток >= 0 
				И СтрокаОстатка.ИзменениеРезерва >= - СтрокаОстатка.Остаток 
				И СтрокаОстатка.ИзменениеРезерва <= СтрокаОстатка.ОстатокРезерва Тогда
				// Отрицательный свободный остаток на конец месяца, связанный с резервированием 
				// На текущий момент отрицательный остаток закрыт
				МассивПереносРезерва.Добавить(СтруктураОписания);
			Иначе
				МассивОтрицательныеОстатки.Добавить(СтруктураОписания);
			КонецЕсли; 
		КонецЦикла;
		СтрокаМесяц = ЗакрытиеМесяца.ИмяМесяцаВПадеже(Месяц(СтрокаМесяц.Месяц), 6);
		Если МассивПереносРезерва.Количество() > 0 Тогда
			СтрокаОшибка = СтрокаСекция.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОшибка, СтрокаСекция);
			СтруктураПодробностей = Новый Структура;
			СтруктураПодробностей.Вставить("Тип", ТипСообщенияПереносРезерва());
			СтруктураПодробностей.Вставить("Номенклатура", МассивПереносРезерва);
			СтрокаОшибка.Подробности = СтруктураПодробностей;
			ШаблонСообщения = НСтр("ru = 'На конец месяца возникли отрицательные остатки по %1 в %2. Необходимо перенести дату резервирования на дату поступления.'");
			КоличествоЭлементов = МассивПереносРезерва.Количество();
			ПодставляемаяСтрока = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';%1 позиции, зарезервированной;;%1 позициям, зарезервированным;%1 позициям, зарезервированным;%1 позициям, зарезервированным'"), 
			КоличествоЭлементов);
			СтрокаОшибка.ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодставляемаяСтрока, СтрокаМесяц);
		КонецЕсли; 
		Если МассивОтрицательныеОстатки.Количество() > 0 Тогда
			СтрокаОшибка = СтрокаСекция.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОшибка, СтрокаСекция);
			СтруктураПодробностей = Новый Структура;
			СтруктураПодробностей.Вставить("Тип", ТипСообщенияОтрицательныеОстатки());
			СтруктураПодробностей.Вставить("Номенклатура", МассивОтрицательныеОстатки);
			СтрокаОшибка.Подробности = СтруктураПодробностей;
			Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство") Тогда
				ШаблонСообщения = НСтр("ru = 'В %1 возникли отрицательные остатки по %2. Расчет фактической себестоимости для такой номенклатуры и произведенной из нее продукции будет выполнен некорректно.
	                                    |Необходимо исправить остатки вручную.'");
			Иначе
				ШаблонСообщения = НСтр("ru = 'В %1 возникли отрицательные остатки по %2. Расчет фактической себестоимости для такой номенклатуры%3 будет выполнен некорректно.
	                                    |Необходимо исправить остатки вручную.'");
			КонецЕсли; 
			КоличествоЭлементов = МассивОтрицательныеОстатки.Количество() + МассивПереносРезерва.Количество(); // В отчете отображаются в том числе и те позиции, для которых можно перенести резерв
			ПодставляемаяСтрока = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';%1 позиции;;%1 позициям;%1 позициям;%1 позициям'"), 
			КоличествоЭлементов);
			СтрокаОшибка.ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаМесяц, ПодставляемаяСтрока);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьПроверкуЗависшихСумм(РезультатЗапроса, РезультатРасчета, НижняяГраница, ВерхняяГраница)
		
	ТаблицаОстатков = РезультатЗапроса[10].Выгрузить();
	Для каждого СтрокаМесяц Из РезультатРасчета.Строки Цикл
		ПериодДетальногоАнализа = ПериодДетальногоАнализа(СтрокаМесяц, НижняяГраница, ВерхняяГраница);
		Если НЕ ПериодДетальногоАнализа Тогда
			Продолжить;
		КонецЕсли;
		СтрокаСекция = СтрокаРезультата(РезультатРасчета, СтрокаМесяц.Месяц, СекцияРасчетФактическойСебестоимости(), Истина);
		КоллекцияОписаний = Новый Массив;
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Месяц", СтрокаМесяц.Месяц);
		СтрокиОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаОстатка Из СтрокиОстатков Цикл
			СтруктураОписания = Новый Структура("Номенклатура, Характеристика, Партия, ЗаказПокупателя, СтруктурнаяЕдиница");
			ЗаполнитьЗначенияСвойств(СтруктураОписания, СтрокаОстатка);
			КоллекцияОписаний.Добавить(СтруктураОписания);
		КонецЦикла;
		СтрокаМесяц = ЗакрытиеМесяца.ИмяМесяцаВПадеже(Месяц(СтрокаМесяц.Месяц), 6);
		Если КоллекцияОписаний.Количество() > 0 Тогда
			СтрокаОшибка = СтрокаСекция.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОшибка, СтрокаСекция);
			Подробности = Новый Структура;
			Подробности.Вставить("Тип", ТипСообщенияОстаткиСебестоимостиБезКоличества());
			Подробности.Вставить("Номенклатура", КоллекцияОписаний);
			СтрокаОшибка.Подробности = Подробности;
			ШаблонСообщения = НСтр("ru = 'В %1 возникли остатки себестоимости без количества по %2. Следует выполнить повторное закрытие месяца для пересчета фактической себестоимости.'");
			КоличествоЭлементов = КоллекцияОписаний.Количество();
			ПодставляемаяСтрока = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';%1 позиции;;%1 позициям;%1 позициям;%1 позициям'"), 
			КоличествоЭлементов);
			СтрокаОшибка.ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаМесяц, ПодставляемаяСтрока);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьПроверкуКассовыхСмен(РезультатЗапроса, РезультатРасчета, НижняяГраница, ВерхняяГраница)
		
	ВыборкаМесяцы = РезультатЗапроса[11].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМесяцы.Следующий() Цикл
		ПериодДетальногоАнализа = ПериодДетальногоАнализа(ВыборкаМесяцы, НижняяГраница, ВерхняяГраница);
		Если НЕ ПериодДетальногоАнализа Тогда
			Продолжить;
		КонецЕсли;
		СтрокаСекция = СтрокаРезультата(РезультатРасчета, ВыборкаМесяцы.Месяц, СекцияРасчетФактическойСебестоимости(), Истина);
		СтрокаМесяц = ЗакрытиеМесяца.ИмяМесяцаВПадеже(Месяц(ВыборкаМесяцы.Месяц), 6);
		СтрокаДни = "";
		КоллекцияКассовыхСмен = Новый Массив;
		ВыборкаДни = ВыборкаМесяцы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДни.Следующий() Цикл
			ВыборкаДетали = ВыборкаДни.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
				ДанныеСмены = Новый Структура;
				ДанныеСмены.Вставить("Документ", ВыборкаДетали.КассоваяСмена);
				ДанныеСмены.Вставить("КассаККМ", ВыборкаДетали.КассаККМ);
				КоллекцияКассовыхСмен.Добавить(ДанныеСмены);
			КонецЦикла; 
			СоединяемыеСтроки = Новый Массив;
			Если Не ПустаяСтрока(СтрокаДни) Тогда
				СоединяемыеСтроки.Добавить(СтрокаДни);
			КонецЕсли; 
			СоединяемыеСтроки.Добавить(Формат(ВыборкаДни.День, "ДЛФ=D"));
			СтрокаДни = СтрСоединить(СоединяемыеСтроки, ", ");	
		КонецЦикла; 
		Если Не ПустаяСтрока(СтрокаДни) Тогда
			СтрокаОшибка = СтрокаСекция.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОшибка, СтрокаСекция);
			Подробности = Новый Структура;
			Подробности.Вставить("Тип", ТипСообщенияОткрытыеКассовыеСмены());
			Подробности.Вставить("Документы", КоллекцияКассовыхСмен);
			СтрокаОшибка.Подробности = Подробности;
			ШаблонСообщения = НСтр("ru = 'В %1 обнаружены открытые кассовые смены за даты: %2. Для корректного расчета фактической себестоимости следует выполнить закрытие кассовых смен.'");
			СтрокаОшибка.ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаМесяц, СтрокаДни);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ПредварительныйАнализ

Функция РезультатПроверок(Организация, МесяцРасчета, НижняяГраница, ВерхняяГраница, Операции)
		
	Компания = Константы.УчетПоКомпании.Компания(Организация);
	РезультатРасчета = ПустоеДеревоРезультатаРасчета();
	ВыполнитьОбщиеПроверки(РезультатРасчета, Компания, НижняяГраница, ВерхняяГраница, Операции);
	Возврат РезультатРасчета;
	
КонецФункции

Процедура ВыполнитьОбщиеПроверки(РезультатРасчета, Организация, НижняяГраница, ВерхняяГраница, Операции)
	
	Если Операции.Найти(СекцияПроверкаАвансыПокупателей()) <> Неопределено Тогда
		ПроверитьРасчетыСПокупателями(РезультатРасчета, Организация, НижняяГраница, ВерхняяГраница);
	КонецЕсли;
	Если Операции.Найти(СекцияПроверкаАвансыПоставщикам()) <> Неопределено Тогда
		ПроверитьРасчетыСПоставщиками(РезультатРасчета, Организация, НижняяГраница, ВерхняяГраница);
	КонецЕсли;
	Если Операции.Найти(СекцияПроверкаОрганизацииИДоговоры()) <> Неопределено Тогда
		ПроверкаОрганизацийИДоговоровВДокументах(РезультатРасчета, Организация, НижняяГраница, ВерхняяГраница);
	КонецЕсли;
	Если Операции.Найти(СекцияПроверкаСтатьиДДС()) <> Неопределено Тогда
		ПроверитьСтатьиДДС(РезультатРасчета, Организация, НижняяГраница, ВерхняяГраница);
	КонецЕсли;
	
	Позиция = НачалоМесяца(НижняяГраница);
	Пока Позиция < ВерхняяГраница Цикл
		Для каждого ИмяСекции Из ВсеСекцииПроверки() Цикл
			СтрокаСекция = СтрокаРезультата(РезультатРасчета, Позиция, ИмяСекции, Истина);
			Если СтрокаСекция = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			Если Операции.Найти(ИмяСекции) = Неопределено Тогда
				СтрокаСекция.СостояниеЗакрытия = СостояниеНеЗакрыт();
			Иначе
				СтрокаСекция.СостояниеЗакрытия = СостояниеЗакрыт();
			КонецЕсли; 
		КонецЦикла; 
		Позиция = ДобавитьМесяц(Позиция, 1);
	КонецЦикла;  
	
КонецПроцедуры

Процедура ПроверитьРасчетыСПокупателями(РезультатРасчета, Организация, НижняяГраница, ВерхняяГраница)
	
	Ошибки = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НижняяГраница", НижняяГраница);
	Запрос.УстановитьПараметр("ВерхняяГраница", ВерхняяГраница);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетыСПокупателямиОстаткиИОбороты.Период КАК Месяц,
	|	РасчетыСПокупателямиОстаткиИОбороты.Контрагент КАК Контрагент,
	|	РасчетыСПокупателямиОстаткиИОбороты.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателямиОстаткиИОбороты.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|			ТОГДА -РасчетыСПокупателямиОстаткиИОбороты.СуммаНачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК АвансНачало,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателямиОстаткиИОбороты.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|			ТОГДА РасчетыСПокупателямиОстаткиИОбороты.СуммаНачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДолгНачало,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателямиОстаткиИОбороты.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|			ТОГДА -РасчетыСПокупателямиОстаткиИОбороты.СуммаКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК АвансКонец,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателямиОстаткиИОбороты.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|			ТОГДА РасчетыСПокупателямиОстаткиИОбороты.СуммаКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДолгКонец,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателямиОстаткиИОбороты.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|			ТОГДА -РасчетыСПокупателямиОстаткиИОбороты.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК АвансИзменение,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателямиОстаткиИОбороты.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|			ТОГДА РасчетыСПокупателямиОстаткиИОбороты.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДолгИзменение
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями.ОстаткиИОбороты(&НижняяГраница, &ВерхняяГраница, Месяц, ДвиженияИГраницыПериода, Организация = &Организация) КАК РасчетыСПокупателямиОстаткиИОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц,
	|	Контрагент,
	|	Договор
	|ИТОГИ
	|	СУММА(АвансНачало),
	|	СУММА(ДолгНачало),
	|	СУММА(АвансКонец),
	|	СУММА(ДолгКонец),
	|	СУММА(АвансИзменение),
	|	СУММА(ДолгИзменение)
	|ПО
	|	Месяц ПЕРИОДАМИ(МЕСЯЦ, &НижняяГраница, &ВерхняяГраница),
	|	Контрагент,
	|	Договор";
	ВыборкаМесяц = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Месяц", "ВСЕ");
	Пока ВыборкаМесяц.Следующий() Цикл
		ВыборкаКонтрагент = ВыборкаМесяц.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКонтрагент.Следующий() Цикл
			ВыборкаДоговор = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДоговор.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(ВыборкаДоговор.АвансИзменение) И НЕ ЗначениеЗаполнено(ВыборкаДоговор.ДолгИзменение) Тогда
					// Нет оборотов в месяце 
					Продолжить;
				КонецЕсли;
				Если ВыборкаДоговор.АвансКонец > 0 И ВыборкаДоговор.ДолгКонец > 0 Тогда
					СтруктураКонтрагента = Новый Структура;
					СтруктураКонтрагента.Вставить("Контрагент", ВыборкаДоговор.Контрагент);
					СтруктураКонтрагента.Вставить("Договор", ВыборкаДоговор.Договор);
					СтруктураКонтрагента.Вставить("Аванс", ВыборкаДоговор.АвансКонец);
					СтруктураКонтрагента.Вставить("Долг", ВыборкаДоговор.ДолгКонец);
					СтруктураКонтрагента.Вставить("ОшибкиНаНачало", ВыборкаДоговор.АвансНачало > 0 И ВыборкаДоговор.ДолгНачало > 0);
					СтруктураКонтрагента.Вставить("КЗачету", Мин(ВыборкаДоговор.АвансКонец, ВыборкаДоговор.ДолгКонец));
					Если Ошибки.Получить(ВыборкаДоговор.Месяц) = Неопределено Тогда
						Ошибки.Вставить(ВыборкаДоговор.Месяц, Новый Массив);
					КонецЕсли; 
					Ошибки.Получить(ВыборкаДоговор.Месяц).Добавить(СтруктураКонтрагента);
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
	Для каждого КлючИЗначение Из Ошибки Цикл
		ПредставлениеМесяца = ЗакрытиеМесяца.ИмяМесяцаВПадеже(Месяц(КлючИЗначение.Ключ), 6);
		СтрокаСекция = СтрокаРезультата(РезультатРасчета, КлючИЗначение.Ключ, СекцияПроверкаАвансыПокупателей(), Истина);
		СтрокаОшибка = СтрокаСекция.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОшибка, СтрокаСекция);
		СтруктураПодробностей = Новый Структура;
		СтруктураПодробностей.Вставить("Тип", ТипСообщенияНезачтенныеАвансыПокупателей());
		СтруктураПодробностей.Вставить("Контрагенты", КлючИЗначение.Значение);
		СтрокаОшибка.Подробности = СтруктураПодробностей;
		ШаблонСообщения = НСтр("ru = 'На конец месяца есть незачтенные авансы по %1, возникшие в %2. По ссылке можно открыть список контрагентов и выполнить зачет аванса автоматически или вручную.'");
		КоличествоЭлементов = КлючИЗначение.Значение.Количество();
		ПодставляемаяСтрока = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru = ';%1 покупателю;;%1 покупателям;%1 покупателям;%1 покупателям'"), 
		КоличествоЭлементов);
		СтрокаОшибка.ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодставляемаяСтрока, ПредставлениеМесяца);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверитьРасчетыСПоставщиками(РезультатРасчета, Организация, НижняяГраница, ВерхняяГраница)
	
	Ошибки = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НижняяГраница", НижняяГраница);
	Запрос.УстановитьПараметр("ВерхняяГраница", ВерхняяГраница);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетыСПоставщикамиОстаткиИОбороты.Период КАК Месяц,
	|	РасчетыСПоставщикамиОстаткиИОбороты.Контрагент КАК Контрагент,
	|	РасчетыСПоставщикамиОстаткиИОбороты.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстаткиИОбороты.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|			ТОГДА -РасчетыСПоставщикамиОстаткиИОбороты.СуммаНачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК АвансНачало,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстаткиИОбороты.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|			ТОГДА РасчетыСПоставщикамиОстаткиИОбороты.СуммаНачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДолгНачало,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстаткиИОбороты.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|			ТОГДА -РасчетыСПоставщикамиОстаткиИОбороты.СуммаКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК АвансКонец,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстаткиИОбороты.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|			ТОГДА РасчетыСПоставщикамиОстаткиИОбороты.СуммаКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДолгКонец,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстаткиИОбороты.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|			ТОГДА -РасчетыСПоставщикамиОстаткиИОбороты.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК АвансИзменение,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстаткиИОбороты.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|			ТОГДА РасчетыСПоставщикамиОстаткиИОбороты.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДолгИзменение
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(&НижняяГраница, &ВерхняяГраница, Месяц, ДвиженияИГраницыПериода, Организация = &Организация) КАК РасчетыСПоставщикамиОстаткиИОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц,
	|	Контрагент,
	|	Договор
	|ИТОГИ
	|	СУММА(АвансНачало),
	|	СУММА(ДолгНачало),
	|	СУММА(АвансКонец),
	|	СУММА(ДолгКонец),
	|	СУММА(АвансИзменение),
	|	СУММА(ДолгИзменение)
	|ПО
	|	Месяц ПЕРИОДАМИ(МЕСЯЦ, &НижняяГраница, &ВерхняяГраница),
	|	Контрагент,
	|	Договор";
	ВыборкаМесяц = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Месяц", "ВСЕ");
	Пока ВыборкаМесяц.Следующий() Цикл
		ВыборкаКонтрагент = ВыборкаМесяц.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКонтрагент.Следующий() Цикл
			ВыборкаДоговор = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДоговор.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(ВыборкаДоговор.АвансИзменение) И НЕ ЗначениеЗаполнено(ВыборкаДоговор.ДолгИзменение) Тогда
					// Нет оборотов в месяце 
					Продолжить;
				КонецЕсли;
				Если ВыборкаДоговор.АвансКонец > 0 И ВыборкаДоговор.ДолгКонец > 0 Тогда
					СтруктураКонтрагента = Новый Структура;
					СтруктураКонтрагента.Вставить("Контрагент", ВыборкаДоговор.Контрагент);
					СтруктураКонтрагента.Вставить("Договор", ВыборкаДоговор.Договор);
					СтруктураКонтрагента.Вставить("Аванс", ВыборкаДоговор.АвансКонец);
					СтруктураКонтрагента.Вставить("Долг", ВыборкаДоговор.ДолгКонец);
					СтруктураКонтрагента.Вставить("ОшибкиНаНачало", ВыборкаДоговор.АвансНачало > 0 И ВыборкаДоговор.ДолгНачало > 0);
					СтруктураКонтрагента.Вставить("КЗачету", Мин(ВыборкаДоговор.АвансКонец, ВыборкаДоговор.ДолгКонец));
					Если Ошибки.Получить(ВыборкаДоговор.Месяц) = Неопределено Тогда
						Ошибки.Вставить(ВыборкаДоговор.Месяц, Новый Массив);
					КонецЕсли; 
					Ошибки.Получить(ВыборкаДоговор.Месяц).Добавить(СтруктураКонтрагента);
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
	Для каждого КлючИЗначение Из Ошибки Цикл
		ПредставлениеМесяца = ЗакрытиеМесяца.ИмяМесяцаВПадеже(Месяц(КлючИЗначение.Ключ), 6);
		СтрокаСекция = СтрокаРезультата(РезультатРасчета, КлючИЗначение.Ключ, СекцияПроверкаАвансыПоставщикам(), Истина);
		СтрокаОшибка = СтрокаСекция.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОшибка, СтрокаСекция);
		СтруктураПодробностей = Новый Структура;
		СтруктураПодробностей.Вставить("Тип", ТипСообщенияНезачтенныеАвансыПоставщикам());
		СтруктураПодробностей.Вставить("Контрагенты", КлючИЗначение.Значение);
		СтрокаОшибка.Подробности = СтруктураПодробностей;
		ШаблонСообщения = НСтр("ru = 'На конец месяца есть незачтенные авансы по %1, возникшие в %2. По ссылке можно открыть список контрагентов и выполнить зачет аванса автоматически или вручную.'");
		КоличествоЭлементов = КлючИЗначение.Значение.Количество();
		ПодставляемаяСтрока = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru = ';%1 поставщику;;%1 поставщикам;%1 поставщикам;%1 поставщикам'"), 
		КоличествоЭлементов);
		СтрокаОшибка.ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодставляемаяСтрока, ПредставлениеМесяца);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверитьСтатьиДДС(РезультатРасчета, Организация, НижняяГраница, ВерхняяГраница)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НижняяГраница", НижняяГраница);
	Запрос.УстановитьПараметр("ВерхняяГраница", ВерхняяГраница);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДенежныеСредства.Период, МЕСЯЦ) КАК Месяц,
	|	ДенежныеСредства.Статья КАК Статья,
	|	ДенежныеСредства.Регистратор КАК Регистратор,
	|	СУММА(ВЫБОР
	|			КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ДенежныеСредства.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПриход,
	|	СУММА(ВЫБОР
	|			КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ДенежныеСредства.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРасход,
	|	СУММА(ВЫБОР
	|			КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ДенежныеСредства.СуммаВал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВалПриход,
	|	СУММА(ВЫБОР
	|			КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ДенежныеСредства.СуммаВал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВалРасход
	|ПОМЕСТИТЬ ВТ_ДетальныеЗаписи
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства КАК ДенежныеСредства
	|ГДЕ
	|	ДенежныеСредства.Период МЕЖДУ &НижняяГраница И &ВерхняяГраница
	|	И ДенежныеСредства.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ДенежныеСредства.Период, МЕСЯЦ),
	|	ДенежныеСредства.Статья,
	|	ДенежныеСредства.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДетальныеЗаписи.Месяц КАК Месяц,
	|	ВТ_ДетальныеЗаписи.Статья КАК Статья,
	|	ВТ_ДетальныеЗаписи.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ВТ_ДетальныеЗаписи.Статья = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам)
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ ДокументПоступлениеВКассу.Ссылка ЕСТЬ NULL
	|							И ДокументПоступлениеВКассу.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВКассу.ОтПоставщика)
	|						ТОГДА 0
	|					КОГДА НЕ ДокументПоступлениеНаСчет.Ссылка ЕСТЬ NULL
	|							И ДокументПоступлениеНаСчет.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеНаСчет.ОтПоставщика)
	|						ТОГДА 0
	|					ИНАЧЕ ВТ_ДетальныеЗаписи.СуммаПриход
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ДетальныеЗаписи.СуммаПриход
	|	КОНЕЦ КАК СуммаПриход,
	|	ВЫБОР
	|		КОГДА ВТ_ДетальныеЗаписи.Статья = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей)
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ ДокументРасходИзКассы.Ссылка ЕСТЬ NULL
	|							И ДокументРасходИзКассы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.Покупателю)
	|						ТОГДА 0
	|					КОГДА НЕ ДокументРасходСоСчета.Ссылка ЕСТЬ NULL
	|							И ДокументРасходСоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСоСчета.Покупателю)
	|						ТОГДА 0
	|					ИНАЧЕ ВТ_ДетальныеЗаписи.СуммаРасход
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ДетальныеЗаписи.СуммаРасход
	|	КОНЕЦ КАК СуммаРасход
	|ПОМЕСТИТЬ ВТ_ОборотыПоСтатьямВалюте
	|ИЗ
	|	ВТ_ДетальныеЗаписи КАК ВТ_ДетальныеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеВКассу КАК ДокументПоступлениеВКассу
	|		ПО (ВТ_ДетальныеЗаписи.Регистратор ССЫЛКА Документ.ПоступлениеВКассу)
	|			И ВТ_ДетальныеЗаписи.Регистратор = ДокументПоступлениеВКассу.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаСчет КАК ДокументПоступлениеНаСчет
	|		ПО (ВТ_ДетальныеЗаписи.Регистратор ССЫЛКА Документ.ПоступлениеНаСчет)
	|			И ВТ_ДетальныеЗаписи.Регистратор = ДокументПоступлениеНаСчет.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходИзКассы КАК ДокументРасходИзКассы
	|		ПО (ВТ_ДетальныеЗаписи.Регистратор ССЫЛКА Документ.РасходИзКассы)
	|			И ВТ_ДетальныеЗаписи.Регистратор = ДокументРасходИзКассы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходСоСчета КАК ДокументРасходСоСчета
	|		ПО (ВТ_ДетальныеЗаписи.Регистратор ССЫЛКА Документ.РасходСоСчета)
	|			И ВТ_ДетальныеЗаписи.Регистратор = ДокументРасходСоСчета.Ссылка
	|ГДЕ
	|	(ВТ_ДетальныеЗаписи.СуммаВалПриход <> 0
	|			ИЛИ ВТ_ДетальныеЗаписи.СуммаВалРасход <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Платежи.ГруппаСтатей КАК ГруппаСтатей,
	|	Платежи.Статья КАК Статья,
	|	Платежи.Месяц КАК Месяц,
	|	Платежи.Регистратор КАК Регистратор
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ГруппаСтатей,
	|		ВТ_ОборотыПоСтатьямВалюте.Статья КАК Статья,
	|		ВТ_ОборотыПоСтатьямВалюте.Месяц КАК Месяц,
	|		ВТ_ОборотыПоСтатьямВалюте.Регистратор КАК Регистратор
	|	ИЗ
	|		ВТ_ОборотыПоСтатьямВалюте КАК ВТ_ОборотыПоСтатьямВалюте
	|	ГДЕ
	|		(ВТ_ОборотыПоСтатьямВалюте.Статья В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОперационныеПлатежи))
	|				ИЛИ ВТ_ОборотыПоСтатьямВалюте.Статья В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ИнвестиционныеПлатежи))
	|				ИЛИ ВТ_ОборотыПоСтатьямВалюте.Статья В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ФинансовыеПлатежи)))
	|		И ВТ_ОборотыПоСтатьямВалюте.СуммаПриход <> 0) КАК Платежи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Поступления.ГруппаСтатей,
	|	Поступления.Статья,
	|	Поступления.Месяц,
	|	Поступления.Регистратор
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ГруппаСтатей,
	|		ВТ_ОборотыПоСтатьямВалюте.Статья КАК Статья,
	|		ВТ_ОборотыПоСтатьямВалюте.Месяц КАК Месяц,
	|		ВТ_ОборотыПоСтатьямВалюте.Регистратор КАК Регистратор
	|	ИЗ
	|		ВТ_ОборотыПоСтатьямВалюте КАК ВТ_ОборотыПоСтатьямВалюте
	|	ГДЕ
	|		(ВТ_ОборотыПоСтатьямВалюте.Статья В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОперационныеПоступления))
	|				ИЛИ ВТ_ОборотыПоСтатьямВалюте.Статья В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ФинансовыеПоступления))
	|				ИЛИ ВТ_ОборотыПоСтатьямВалюте.Статья В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ИнвестиционныеПоступления)))
	|		И ВТ_ОборотыПоСтатьямВалюте.СуммаРасход <> 0) КАК Поступления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц,
	|	ГруппаСтатей,
	|	Статья,
	|	Регистратор
	|ИТОГИ ПО
	|	Месяц,
	|	ГруппаСтатей";
	
	ВыборкаМесяц = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМесяц.Следующий() Цикл
		ВыборкаГруппа = ВыборкаМесяц.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаГруппа.Следующий() Цикл
			СписокСтатей = Новый СписокЗначений;
			МассивДокументов = Новый Массив;
			ВыборкаДетали = ВыборкаГруппа.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
				Если СписокСтатей.НайтиПоЗначению(ВыборкаДетали.Статья) = Неопределено Тогда
					СписокСтатей.Добавить(ВыборкаДетали.Статья);	
				КонецЕсли;
				СтруктураОписания = Новый Структура;
				СтруктураОписания.Вставить("Документ", ВыборкаДетали.Регистратор);
				СтруктураОписания.Вставить("Статья", ВыборкаДетали.Статья);
				МассивДокументов.Добавить(СтруктураОписания);	
			КонецЦикла; 
			Если СписокСтатей.Количество() > 0 Тогда
				СтрокаСекция = СтрокаРезультата(РезультатРасчета, ВыборкаГруппа.Месяц, СекцияПроверкаСтатьиДДС(), Истина);
				СтрокаОшибка = СтрокаСекция.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОшибка, СтрокаСекция);
				СтруктураПодробностей = Новый Структура;
				Если ВыборкаГруппа.ГруппаСтатей = ВидДвиженияНакопления.Расход Тогда
					СтруктураПодробностей.Вставить("Тип", ТипСообщенияНеверноВыбранаСтатьяДДСПлатежи());
					ШаблонСообщения = НСтр("ru = 'Были обнаружены платежи по статьям денежных средств, относящимся к поступлениям: %1. По ссылке можно открыть список документов, для которых статья указана некорректно.'");
				Иначе
					СтруктураПодробностей.Вставить("Тип", ТипСообщенияНеверноВыбранаСтатьяДДСПоступления());
					ШаблонСообщения = НСтр("ru = 'Были обнаружены поступления по статьям денежных средств, относящимся к платежам: %1. По ссылке можно открыть список документов, для которых статья указана некорректно.'");
				КонецЕсли; 
				СтруктураПодробностей.Вставить("Статьи", СписокСтатей.ВыгрузитьЗначения());
				СтруктураПодробностей.Вставить("Документы", МассивДокументов);
				СтрокаОшибка.Подробности = СтруктураПодробностей;
				СтрокаОшибка.ТекстСообщения = СтрШаблон(ШаблонСообщения, СписокСтатей);
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверкаОрганизацийИДоговоровВДокументах(РезультатРасчета, Организация, НижняяГраница, ВерхняяГраница)
	
	Если Константы.УчетПоКомпании.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	МакетПравил = ПолучитьМакет("ПравилаКонтроляОрганизацийДоговоров");
	СтруктураПравил = СформироватьСтруктуруПравил(МакетПравил);
	Если СтруктураПравил.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", НижняяГраница);
	Запрос.УстановитьПараметр("ДатаКон", ВерхняяГраница);
	Запрос.Текст = СформироватьТекстЗапросаПоДокументам(СтруктураПравил);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаРасположенияДоговоров = СформироватьТаблицуРасположенияДоговоров();
	КонтролироватьСоответствиеОрганизацийВДоговорах = Истина;
	
	Пока Выборка.Следующий() Цикл
		ТаблицаПравилДокумента = Неопределено;
		ИмяДокумента = Выборка.ДокументСсылка.Метаданные().Имя;
		Если СтруктураПравил.Свойство(ИмяДокумента, ТаблицаПравилДокумента) Тогда
			Попытка
				ПроверитьСоответствияВДокументе(ИмяДокумента, Выборка, ТаблицаРасположенияДоговоров, ТаблицаПравилДокумента, РезультатРасчета, КонтролироватьСоответствиеОрганизацийВДоговорах);			
			Исключение
				ШаблонСообщения = НСтр("ru = 'Не удалось проверить документ %1
                                        |%2'");
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ШаблонСообщения, Строка(Выборка.ДокументСсылка), ОписаниеОшибки()));
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Позиция = НачалоМесяца(НижняяГраница);
	Пока Позиция < ВерхняяГраница Цикл
		СтрокаСекция = СтрокаРезультата(РезультатРасчета, Позиция, СекцияПроверкаОрганизацииИДоговоры());
		Если СтрокаСекция = Неопределено Тогда
			Позиция = ДобавитьМесяц(Позиция, 1);
			Продолжить;
		КонецЕсли; 
		СтрокаСекция.СостояниеЗакрытия = СостояниеЗакрыт();
		Если СтрокаСекция.Строки.Количество() > 0 Тогда
			Для каждого СтрокаОшибка Из СтрокаСекция.Строки Цикл
				Если СтрокаОшибка.Подробности.Тип = ТипСообщенияНесоответствиеОрганизацииВДокументеИДоговоре() Тогда
					ШаблонСообщения = НСтр("ru = 'Не совпадает организация, указанная в документе с организацией, указанной в договоре у %1. По ссылке можно открыть список документов, в которых требуется выбрать корректный договор.'");
					КоличествоЭлементов = СтрокаОшибка.Подробности.Документы.Количество();
					ПодставляемаяСтрока = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';%1 документа;;%1 документов;%1 документов;%1 документов'"), 
					КоличествоЭлементов);
					СтрокаОшибка.ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодставляемаяСтрока);
				ИначеЕсли СтрокаОшибка.Подробности.Тип = ТипСообщенияНесоответствиеОрганизацииВПодчиненномДокументе() Тогда
					ШаблонСообщения = НСтр("ru = 'Обнаружено несовпадение организаций в %1. По ссылке можно открыть список документов, в которых требуется указать корректную организацию.'");
					КоличествоЭлементов = СтрокаОшибка.Подробности.Документы.Количество();
					ПодставляемаяСтрока = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';%1 документе;;%1 документах;%1 документах;%1 документах'"), 
					КоличествоЭлементов);
					СтрокаОшибка.ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодставляемаяСтрока);
				ИначеЕсли СтрокаОшибка.Подробности.Тип = ТипСообщенияНесоответствиеДоговораВПодчиненномДокументе() Тогда
					ШаблонСообщения = НСтр("ru = 'Обнаружено несовпадение договоров в %1. По ссылке можно открыть список документов, в которых требуется указать корректный договор.'");
					КоличествоЭлементов = СтрокаОшибка.Подробности.Документы.Количество();
					ПодставляемаяСтрока = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';%1 документе;;%1 документах;%1 документах;%1 документах'"), 
					КоличествоЭлементов);
					СтрокаОшибка.ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодставляемаяСтрока);
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
		Позиция = ДобавитьМесяц(Позиция, 1);
	КонецЦикла;  
	
КонецПроцедуры

Функция СформироватьТаблицуРасположенияДоговоров()
	
	ТипДоговор = Тип("СправочникСсылка.ДоговорыКонтрагентов");
	
	ТаблицаРасположенияДоговоров = Новый ТаблицаЗначений;
	ТаблицаРасположенияДоговоров.Колонки.Добавить("ИмяДокумента");
	ТаблицаРасположенияДоговоров.Колонки.Добавить("ТипРеквизита");
	ТаблицаРасположенияДоговоров.Колонки.Добавить("ИмяТабличнойЧасти");
	
	Для каждого Документ Из Метаданные.Документы Цикл
		
		ДоговорВШапке = Ложь;
		
		Для каждого Реквизит Из Документ.Реквизиты Цикл
			
			Если Реквизит.Тип.СодержитТип(ТипДоговор) И Реквизит.Имя = "Договор" Тогда
				
				НоваяСтрока = ТаблицаРасположенияДоговоров.Добавить();
				НоваяСтрока.ИмяДокумента = Документ.Имя;
				НоваяСтрока.ТипРеквизита = "Реквизит";
				ДоговорВШапке = Истина;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ДоговорВШапке Тогда
			
			Для каждого ТабличнаяЧасть Из Документ.ТабличныеЧасти Цикл
				
				Для каждого РеквизитТабличнойЧасти Из ТабличнаяЧасть.Реквизиты Цикл
					
					Если РеквизитТабличнойЧасти.Тип.СодержитТип(ТипДоговор) И РеквизитТабличнойЧасти.Имя = "Договор" Тогда
						
						НоваяСтрока = ТаблицаРасположенияДоговоров.Добавить();
						НоваяСтрока.ИмяДокумента = Документ.Имя;
						НоваяСтрока.ТипРеквизита = "ТабличнаяЧасть";
						НоваяСтрока.ИмяТабличнойЧасти = ТабличнаяЧасть.Имя;
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаРасположенияДоговоров;
	
КонецФункции // ()

Функция СформироватьСтруктуруПравил(МакетПравил)
	
	СтруктураПравил = Новый Структура;
	
	ТаблицаПравил = Новый ТаблицаЗначений;
	ТаблицаПравил.Колонки.Добавить("ИмяДокумента");
	ТаблицаПравил.Колонки.Добавить("ТипРеквизита");
	ТаблицаПравил.Колонки.Добавить("ИмяРеквизита_ТабЧасти");
	ТаблицаПравил.Колонки.Добавить("СинонимРеквизитаТабЧасти");
	ТаблицаПравил.Колонки.Добавить("ИмяРеквизитаВТабЧасти");
	ТаблицаПравил.Колонки.Добавить("ИсключаемыеТипыДокументов");
	ТаблицаПравил.Колонки.Добавить("ИсключаемыеОперации");
	
	КоличествоСтрокМакета = МакетПравил.ВысотаТаблицы;
	
	Для Сч = 2 По КоличествоСтрокМакета Цикл
		
		ИмяДокумента = "";
		ТипРеквизита = "";
		ИмяРеквизита_ТабЧасти = "";
		ИмяРеквизитаВТабЧасти = "";
		СинонимРеквизитаТабЧасти = "";
		ИсключаемыеТипыДокументов = "";
		ИсключаемыеОперации = "";
		
		ИмяДокумента = СтрЗаменить(СокрЛП(МакетПравил.Область(Сч, 1, Сч, 1).Текст), " ", "");
		
		Если ИмяДокумента = "" ИЛИ ИмяДокумента = "ВводНачальныхОстатков" Тогда
			Продолжить;
		КонецЕсли;
		
		ТипРеквизита = СтрЗаменить(СокрЛП(МакетПравил.Область(Сч, 2, Сч, 2).Текст), " ", "");
		
		Если ТипРеквизита = "" Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита_ТабЧасти = СтрЗаменить(СокрЛП(МакетПравил.Область(Сч, 3, Сч, 3).Текст), " ", "");
		
		Если ИмяРеквизита_ТабЧасти = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипРеквизита = "Реквизит" Тогда
			
			СинонимРеквизитаТабЧасти = Метаданные.Документы[ИмяДокумента].Реквизиты[ИмяРеквизита_ТабЧасти].Синоним;
			
		Иначе
			
			ИмяРеквизитаВТабЧасти = СтрЗаменить(СокрЛП(МакетПравил.Область(Сч, 4, Сч, 4).Текст), " ", "");
			
			Если ИмяРеквизитаВТабЧасти = "" Тогда
				Продолжить;
			КонецЕсли;
			
			СинонимРеквизитаТабЧасти = Метаданные.Документы[ИмяДокумента].ТабличныеЧасти[ИмяРеквизита_ТабЧасти].Синоним;
			
		КонецЕсли;
		
		ИсключаемыеТипыДокументов = СокрЛП(МакетПравил.Область(Сч, 5, Сч, 5).Текст);
		ИсключаемыеОперации = СокрЛП(МакетПравил.Область(Сч, 6, Сч, 6).Текст);
		
		НоваяСтрока = ТаблицаПравил.Добавить();
		НоваяСтрока.ИмяДокумента = ИмяДокумента;
		НоваяСтрока.ТипРеквизита = ТипРеквизита;
		НоваяСтрока.ИмяРеквизита_ТабЧасти = ИмяРеквизита_ТабЧасти;
		НоваяСтрока.СинонимРеквизитаТабЧасти = СинонимРеквизитаТабЧасти;
		НоваяСтрока.ИмяРеквизитаВТабЧасти = ИмяРеквизитаВТабЧасти;
		НоваяСтрока.ИсключаемыеТипыДокументов = ИсключаемыеТипыДокументов;
		НоваяСтрока.ИсключаемыеОперации = ИсключаемыеОперации;
		
	КонецЦикла;
	
	ТаблицаПравилПоДокументу = ТаблицаПравил.СкопироватьКолонки();
	ТаблицаПравилПоДокументу.Колонки.Удалить("ИмяДокумента");
	
	ТаблицаИменДокументов = ТаблицаПравил.Скопировать();
	ТаблицаИменДокументов.Свернуть("ИмяДокумента");
	
	Для каждого СтрокаТаблицыИмен Из ТаблицаИменДокументов Цикл
		
		МассивСтрокПравил = ТаблицаПравил.НайтиСтроки(Новый Структура("ИмяДокумента", СтрокаТаблицыИмен.ИмяДокумента));
		
		СтруктураПравил.Вставить(СтрокаТаблицыИмен.ИмяДокумента, ТаблицаПравилПоДокументу.СкопироватьКолонки());
		
		Для каждого СтрокаМассива Из МассивСтрокПравил Цикл
			
			НоваяСтрока = СтруктураПравил[СтрокаТаблицыИмен.ИмяДокумента].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СтруктураПравил;
	
КонецФункции // ()

Функция СформироватьТекстЗапросаПоДокументам(СтруктураПравил)
	
	ТекстЗапроса = "";
	
	Для каждого КлючИЗначение Из СтруктураПравил Цикл
		
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
			
		КонецЕсли; 
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК ДокументСсылка,
		|	ТаблицаДокумента.Дата КАК Дата,
		|	НачалоПериода(ТаблицаДокумента.Дата, Месяц) КАК Месяц
		|ИЗ
		|	Документ." + КлючИЗначение.Ключ + " КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И ТаблицаДокумента.Проведен";
			
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС + "УПОРЯДОЧИТЬ ПО" + Символы.ПС + Символы.Таб + "Дата";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции // ()

Функция СтрокаОшибкиПроверкаОрганизацийИДоговоровВДокументах(РезультатРасчета, Месяц, Тип)
		
	СтрокаСекция = СтрокаРезультата(РезультатРасчета, Месяц, СекцияПроверкаОрганизацииИДоговоры(), Истина);
	Результат = Неопределено;
	Для каждого СтрокаОшибки Из СтрокаСекция.Строки Цикл
		Если СтрокаОшибки.Подробности.Тип = Тип Тогда
			Результат = СтрокаОшибки;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если Результат = Неопределено Тогда
		Результат = СтрокаСекция.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(Результат, СтрокаСекция);
		Результат.Подробности = Новый Структура;
		Результат.Подробности.Вставить("Тип", Тип);
		Результат.Подробности.Вставить("Документы", Новый Массив);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьСоответствияВДокументе(ИмяДокумента, Выборка, ТаблицаРасположенияДоговоров, ТаблицаПравил, РезультатРасчета, КонтролироватьСоответствиеОрганизацийВДоговорах)
	
	РасположениеДоговора = ТаблицаРасположенияДоговоров.Найти(ИмяДокумента);
	Если РасположениеДоговора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ДокументСсылка, "Организация", Истина);
	Документ = Выборка.ДокументСсылка;
	Если Документ.Метаданные().Реквизиты.Найти("ВидОперации") <> Неопределено Тогда
		Операция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ВидОперации", Истина);
	Иначе
		Операция = Неопределено;
	КонецЕсли; 
	
	Если РасположениеДоговора.ТипРеквизита = "Реквизит" Тогда
		
		Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Договор", Истина);
		
		Если КонтролироватьСоответствиеОрганизацийВДоговорах 
			И ЗначениеЗаполнено(Договор)
			И ПроверяемаяОперация(Операция) Тогда
			
			ОрганизацияДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "Организация", Истина);
			Если Организация <> ОрганизацияДоговора Тогда
				СтрокаОшибки = СтрокаОшибкиПроверкаОрганизацийИДоговоровВДокументах(РезультатРасчета, Выборка.Месяц, ТипСообщенияНесоответствиеОрганизацииВДокументеИДоговоре());
				Если НЕ ДокументДобавлен(СтрокаОшибки.Подробности.Документы, Документ) Тогда
					СтруктураОписания = Новый Структура;
					СтруктураОписания.Вставить("Документ", Документ);
					СтруктураОписания.Вставить("Договор", Договор);
					СтруктураОписания.Вставить("Организация", Организация);
					СтруктураОписания.Вставить("ОрганизацияДоговора", ОрганизацияДоговора);
					СтрокаОшибки.Подробности.Документы.Добавить(СтруктураОписания);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Для каждого СтрокаТаблицыПравил Из ТаблицаПравил Цикл
			
			Если СтрокаТаблицыПравил.ТипРеквизита = "Реквизит" Тогда
				
				ОбъектПроверки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, СтрокаТаблицыПравил.ИмяРеквизита_ТабЧасти, Истина);
				Если ЗначениеЗаполнено(ОбъектПроверки) Тогда
					СравнитьДанныеДокументов_ДоговорВРеквизите(ОбъектПроверки, ТаблицаРасположенияДоговоров, Организация, Договор, РезультатРасчета, Выборка, СтрокаТаблицыПравил);	
				КонецЕсли;
				
			ИначеЕсли СтрокаТаблицыПравил.ТипРеквизита = "ТабличнаяЧасть" Тогда
				
				Для каждого СтрокаТабЧасти Из Документ[СтрокаТаблицыПравил.ИмяРеквизита_ТабЧасти] Цикл
					
					ОбъектПроверки = СтрокаТабЧасти[СтрокаТаблицыПравил.ИмяРеквизитаВТабЧасти];
					Если ЗначениеЗаполнено(ОбъектПроверки) Тогда
						СравнитьДанныеДокументов_ДоговорВРеквизите(ОбъектПроверки, ТаблицаРасположенияДоговоров, Организация, Договор, РезультатРасчета, Выборка, СтрокаТаблицыПравил);	
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли РасположениеДоговора.ТипРеквизита = "ТабличнаяЧасть" Тогда
		
		МассивДоговоров = Документ[РасположениеДоговора.ИмяТабличнойЧасти].ВыгрузитьКолонку("Договор");
		
		Если КонтролироватьСоответствиеОрганизацийВДоговорах
			И ПроверяемаяОперация(Операция) Тогда
			
			Для каждого Договор Из МассивДоговоров Цикл
				
				ОрганизацияДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "Организация", Истина);
				Если ЗначениеЗаполнено(Договор) И Организация <> ОрганизацияДоговора Тогда
					СтрокаОшибки = СтрокаОшибкиПроверкаОрганизацийИДоговоровВДокументах(РезультатРасчета, Выборка.Месяц, ТипСообщенияНесоответствиеОрганизацииВДокументеИДоговоре());
					Если НЕ ДокументДобавлен(СтрокаОшибки.Подробности.Документы, Документ) Тогда
						СтруктураОписания = Новый Структура;
						СтруктураОписания.Вставить("Документ", Документ);
						СтруктураОписания.Вставить("Договор", Договор);
						СтруктураОписания.Вставить("Организация", Организация);
						СтруктураОписания.Вставить("ОрганизацияДоговора", ОрганизацияДоговора);
						СтрокаОшибки.Подробности.Документы.Добавить(СтруктураОписания);
					КонецЕсли; 
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Для каждого СтрокаТаблицыПравил Из ТаблицаПравил Цикл
			
			Если СтрокаТаблицыПравил.ТипРеквизита = "Реквизит" Тогда
				
				ОбъектПроверки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, СтрокаТаблицыПравил.ИмяРеквизита_ТабЧасти, Истина);
				Если ЗначениеЗаполнено(ОбъектПроверки) Тогда
					СравнитьДанныеДокументов_ДоговорВТабЧасти(ОбъектПроверки, ТаблицаРасположенияДоговоров, Организация, МассивДоговоров, РезультатРасчета, Выборка, СтрокаТаблицыПравил);	
				КонецЕсли;
				
			ИначеЕсли СтрокаТаблицыПравил.ТипРеквизита = "ТабличнаяЧасть" Тогда	
				
				Если РасположениеДоговора.ИмяТабличнойЧасти <> СтрокаТаблицыПравил.ИмяРеквизита_ТабЧасти Тогда
					// Нет смысла сравнивать договора и документы из разных табличных частей
					Продолжить;
				КонецЕсли;
				
				Для каждого СтрокаТабЧастиВладелец Из Документ[СтрокаТаблицыПравил.ИмяРеквизита_ТабЧасти] Цикл
					// Будем рассматривать каждую строку отдельно, т.е. сравнивать договор в строке с документом
					// проверять можно так, как если бы это был отдельный документ с договором в шапке

					ОбъектПроверки = СтрокаТабЧастиВладелец[СтрокаТаблицыПравил.ИмяРеквизитаВТабЧасти];
					Если ЗначениеЗаполнено(ОбъектПроверки) Тогда
						СравнитьДанныеДокументов_ДоговорВРеквизите(ОбъектПроверки, ТаблицаРасположенияДоговоров, Организация, СтрокаТабЧастиВладелец.Договор, РезультатРасчета, Выборка, СтрокаТаблицыПравил);
					КонецЕсли;
					
				КонецЦикла; 
				
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Функция ПроверяемаяОперация(Операция)
	
	Если Операция = Перечисления.ВидыОперацийПоступлениеНаСчет.Налоги
		ИЛИ Операция = Перечисления.ВидыОперацийРасходСоСчета.Налоги
		ИЛИ Операция = Перечисления.ВидыОперацийРасходИзКассы.Налоги
		// Интеркампани
		ИЛИ Операция = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтНашейОрганизации 
		ИЛИ Операция = Перечисления.ВидыОперацийПоступлениеВКассу.ОтНашейОрганизации 
		ИЛИ Операция = Перечисления.ВидыОперацийРасходСоСчета.НашейОрганизации 
		ИЛИ Операция = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации 
		Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

Процедура СравнитьДанныеДокументов_ДоговорВРеквизите(ОбъектПроверки, ТаблицаРасположенияДоговоров, Организация, Договор, РезультатРасчета, Выборка, СтрокаТаблицыПравил)
	
	ИмяПодчиненногоДокумента = ОбъектПроверки.Метаданные().Имя;
	Если НЕ ПустаяСтрока(СтрокаТаблицыПравил.ИсключаемыеТипыДокументов) 
		И СтрНайти(СтрокаТаблицыПравил.ИсключаемыеТипыДокументов, ИмяПодчиненногоДокумента) <> Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если ОбъектПроверки.Метаданные().Реквизиты.Найти("ВидОперации") <> Неопределено Тогда
		Операция = ОбщегоНазначения.ИмяЗначенияПеречисления(ОбъектПроверки.ВидОперации);
		Если НЕ ПустаяСтрока(Операция) 
			И НЕ ПустаяСтрока(СтрокаТаблицыПравил.ИсключаемыеОперации) 
			И СтрНайти(СтрокаТаблицыПравил.ИсключаемыеОперации, Операция) <> Неопределено Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	РасположениеДоговораПодчиненный = ТаблицаРасположенияДоговоров.Найти(ИмяПодчиненногоДокумента);
	Если РасположениеДоговораПодчиненный = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РасположениеДоговораПодчиненный.ТипРеквизита = "Реквизит" Тогда
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектПроверки, "Организация, Договор", Истина);
		Если Организация <> РеквизитыОбъекта.Организация Тогда
			СтрокаОшибки = СтрокаОшибкиПроверкаОрганизацийИДоговоровВДокументах(РезультатРасчета, Выборка.Месяц, ТипСообщенияНесоответствиеОрганизацииВПодчиненномДокументе());
			Если НЕ ДокументДобавлен(СтрокаОшибки.Подробности.Документы, Выборка.ДокументСсылка) Тогда
				СтруктураОписания = Новый Структура;
				СтруктураОписания.Вставить("Документ", Выборка.ДокументСсылка);
				СтруктураОписания.Вставить("ПодчиненныйДокумент", ОбъектПроверки);
				СтруктураОписания.Вставить("Организация", Организация);
				СтруктураОписания.Вставить("ОрганизацияДокумента", РеквизитыОбъекта.Организация);
				СтрокаОшибки.Подробности.Документы.Добавить(СтруктураОписания);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(РеквизитыОбъекта.Договор) И Договор <> РеквизитыОбъекта.Договор Тогда
			СтрокаОшибки = СтрокаОшибкиПроверкаОрганизацийИДоговоровВДокументах(РезультатРасчета, Выборка.Месяц, ТипСообщенияНесоответствиеДоговораВПодчиненномДокументе());
			Если НЕ ДокументДобавлен(СтрокаОшибки.Подробности.Документы, Выборка.ДокументСсылка) Тогда
				СтруктураОписания = Новый Структура;
				СтруктураОписания.Вставить("Документ", Выборка.ДокументСсылка);
				СтруктураОписания.Вставить("ПодчиненныйДокумент", ОбъектПроверки);
				СтруктураОписания.Вставить("Договор", Договор);
				СтруктураОписания.Вставить("ДоговорДокумента", РеквизитыОбъекта.Договор);
				СтрокаОшибки.Подробности.Документы.Добавить(СтруктураОписания);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли РасположениеДоговораПодчиненный.ТипРеквизита = "ТабличнаяЧасть" Тогда
		
		ОрганизацияДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектПроверки, "Организация", Истина);
		Если Организация <> ОрганизацияДокумента Тогда
			СтрокаОшибки = СтрокаОшибкиПроверкаОрганизацийИДоговоровВДокументах(РезультатРасчета, Выборка.Месяц, ТипСообщенияНесоответствиеОрганизацииВПодчиненномДокументе());
			Если НЕ ДокументДобавлен(СтрокаОшибки.Подробности.Документы, Выборка.ДокументСсылка) Тогда
				СтруктураОписания = Новый Структура;
				СтруктураОписания.Вставить("Документ", Выборка.ДокументСсылка);
				СтруктураОписания.Вставить("ПодчиненныйДокумент", ОбъектПроверки);
				СтруктураОписания.Вставить("Организация", Организация);
				СтруктураОписания.Вставить("ОрганизацияДокумента", ОрганизацияДокумента);
				СтрокаОшибки.Подробности.Документы.Добавить(СтруктураОписания);
			КонецЕсли;
		КонецЕсли;
		МассивДоговорПодчиненный = ОбъектПроверки[РасположениеДоговораПодчиненный.ИмяТабличнойЧасти].ВыгрузитьКолонку("Договор");
		Если МассивДоговорПодчиненный.Найти(Договор) = Неопределено Тогда
			СтрокаОшибки = СтрокаОшибкиПроверкаОрганизацийИДоговоровВДокументах(РезультатРасчета, Выборка.Месяц, ТипСообщенияНесоответствиеДоговораВПодчиненномДокументе());
			Если НЕ ДокументДобавлен(СтрокаОшибки.Подробности.Документы, Выборка.ДокументСсылка) Тогда
				СтруктураОписания = Новый Структура;
				СтруктураОписания.Вставить("Документ", Выборка.ДокументСсылка);
				СтруктураОписания.Вставить("ПодчиненныйДокумент", ОбъектПроверки);
				СтруктураОписания.Вставить("Договор", Договор);
				СтруктураОписания.Вставить("ДоговорДокумента", МассивДоговорПодчиненный);
				СтрокаОшибки.Подробности.Документы.Добавить(СтруктураОписания);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	 
	
КонецПроцедуры

Процедура СравнитьДанныеДокументов_ДоговорВТабЧасти(ОбъектПроверки, ТаблицаРасположенияДоговоров, Организация, МассивДоговоров, РезультатРасчета, Выборка, СтрокаТаблицыПравил)
	
	ИмяПодчиненногоДокумента = ОбъектПроверки.Метаданные().Имя;
	Если НЕ ПустаяСтрока(СтрокаТаблицыПравил.ИсключаемыеТипыДокументов) 
		И СтрНайти(СтрокаТаблицыПравил.ИсключаемыеТипыДокументов, ИмяПодчиненногоДокумента) <> Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если ОбъектПроверки.Метаданные().Реквизиты.Найти("ВидОперации") <> Неопределено Тогда
		Операция = ОбщегоНазначения.ИмяЗначенияПеречисления(ОбъектПроверки.ВидОперации);
		Если НЕ ПустаяСтрока(Операция) 
			И НЕ ПустаяСтрока(СтрокаТаблицыПравил.ИсключаемыеОперации) 
			И СтрНайти(СтрокаТаблицыПравил.ИсключаемыеОперации, Операция) <> Неопределено Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	РасположениеДоговораПодчиненный = ТаблицаРасположенияДоговоров.Найти(ИмяПодчиненногоДокумента);
	Если РасположениеДоговораПодчиненный = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РасположениеДоговораПодчиненный.ТипРеквизита = "Реквизит" Тогда
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектПроверки, "Организация, Договор", Истина);
		Если Организация <> РеквизитыОбъекта.Организация Тогда
			СтрокаОшибки = СтрокаОшибкиПроверкаОрганизацийИДоговоровВДокументах(РезультатРасчета, Выборка.Месяц, ТипСообщенияНесоответствиеОрганизацииВПодчиненномДокументе());
			Если НЕ ДокументДобавлен(СтрокаОшибки.Подробности.Документы, Выборка.ДокументСсылка) Тогда
				СтруктураОписания = Новый Структура;
				СтруктураОписания.Вставить("Документ", Выборка.ДокументСсылка);
				СтруктураОписания.Вставить("ПодчиненныйДокумент", ОбъектПроверки);
				СтруктураОписания.Вставить("Организация", Организация);
				СтруктураОписания.Вставить("ОрганизацияДокумента", РеквизитыОбъекта.Организация);
				СтрокаОшибки.Подробности.Документы.Добавить(СтруктураОписания);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(РеквизитыОбъекта.Договор) И МассивДоговоров.Найти(РеквизитыОбъекта.Договор) = Неопределено Тогда
			СтрокаОшибки = СтрокаОшибкиПроверкаОрганизацийИДоговоровВДокументах(РезультатРасчета, Выборка.Месяц, ТипСообщенияНесоответствиеДоговораВПодчиненномДокументе());
			Если НЕ ДокументДобавлен(СтрокаОшибки.Подробности.Документы, Выборка.ДокументСсылка) Тогда
				СтруктураОписания = Новый Структура;
				СтруктураОписания.Вставить("Документ", Выборка.ДокументСсылка);
				СтруктураОписания.Вставить("ПодчиненныйДокумент", ОбъектПроверки);
				СтруктураОписания.Вставить("Договор", МассивДоговоров);
				СтруктураОписания.Вставить("ДоговорДокумента", РеквизитыОбъекта.Договор);
				СтрокаОшибки.Подробности.Документы.Добавить(СтруктураОписания);
			КонецЕсли;
		КонецЕсли; 
		
	ИначеЕсли РасположениеДоговораПодчиненный.ТипРеквизита = "ТабличнаяЧасть" Тогда
		
		ОрганизацияДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектПроверки, "Организация", Истина);
		Если Организация <> ОрганизацияДокумента Тогда
			СтрокаОшибки = СтрокаОшибкиПроверкаОрганизацийИДоговоровВДокументах(РезультатРасчета, Выборка.Месяц, ТипСообщенияНесоответствиеОрганизацииВПодчиненномДокументе());
			Если НЕ ДокументДобавлен(СтрокаОшибки.Подробности.Документы, Выборка.ДокументСсылка) Тогда
				СтруктураОписания = Новый Структура;
				СтруктураОписания.Вставить("Документ", Выборка.ДокументСсылка);
				СтруктураОписания.Вставить("ПодчиненныйДокумент", ОбъектПроверки);
				СтруктураОписания.Вставить("Организация", Организация);
				СтруктураОписания.Вставить("ОрганизацияДокумента", ОрганизацияДокумента);
				СтрокаОшибки.Подробности.Документы.Добавить(СтруктураОписания);
			КонецЕсли;
		КонецЕсли;
		МассивДоговорПодчиненный = ОбъектПроверки[РасположениеДоговораПодчиненный.ИмяТабличнойЧасти].ВыгрузитьКолонку("Договор");
		Если МассивДоговорПодчиненный.Количество() > 0 И НЕ ЕстьСовпаденияДоговоровВМассивах(МассивДоговоров, МассивДоговорПодчиненный) Тогда
			СтрокаОшибки = СтрокаОшибкиПроверкаОрганизацийИДоговоровВДокументах(РезультатРасчета, Выборка.Месяц, ТипСообщенияНесоответствиеДоговораВПодчиненномДокументе());
			Если НЕ ДокументДобавлен(СтрокаОшибки.Подробности.Документы, Выборка.ДокументСсылка) Тогда
				СтруктураОписания = Новый Структура;
				СтруктураОписания.Вставить("Документ", Выборка.ДокументСсылка);
				СтруктураОписания.Вставить("ПодчиненныйДокумент", ОбъектПроверки);
				СтруктураОписания.Вставить("Договор", МассивДоговоров);
				СтруктураОписания.Вставить("ДоговорДокумента", МассивДоговорПодчиненный);
				СтрокаОшибки.Подробности.Документы.Добавить(СтруктураОписания);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	 
	
КонецПроцедуры

Функция ДокументДобавлен(МассивОписаний, Документ)
	
	Результат = Ложь;
	Для каждого СтруктураОписания Из МассивОписаний Цикл
		Если СтруктураОписания.Документ = Документ Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	Возврат Результат;
	
КонецФункции

Функция ЕстьСовпаденияДоговоровВМассивах(МассивДоговоров, МассивДоговорПодчиненный)
	
	Результат = Ложь;
	
	Для каждого ПодчиненныйДоговор Из МассивДоговорПодчиненный Цикл
		Если МассивДоговоров.Найти(ПодчиненныйДоговор) <> Неопределено Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ()

#КонецОбласти 

#Область ЗакрытиеМесяца

Функция ОтменитьЗакрытиеМесяца(СтруктураПараметров)
	
	ТекМесяц = СтруктураПараметров.ТекМесяц;
	ТекГод = СтруктураПараметров.ТекГод;
	Организация = СтруктураПараметров.Организация;
	
	СтруктураВозврата = Новый Структура("ДокументЗакрытиеМесяца, ДокументАмортизацияВА");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗакрытиеМесяца.Дата КАК Дата,
	|	ЗакрытиеМесяца.Ссылка КАК Ссылка,
	|	ЗакрытиеМесяца.Организация КАК Организация
	|ИЗ
	|	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца,
	|	Константа.УчетПоКомпании КАК УчетПоКомпании
	|ГДЕ
	|	ГОД(ЗакрытиеМесяца.Дата) = &Год
	|	И МЕСЯЦ(ЗакрытиеМесяца.Дата) = &Месяц
	|	И (ЗакрытиеМесяца.Организация = &Организация
	|			ИЛИ УчетПоКомпании.Значение)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АмортизацияВА.Дата КАК Дата,
	|	АмортизацияВА.Ссылка КАК Ссылка,
	|	АмортизацияВА.Организация КАК Организация
	|ИЗ
	|	Документ.АмортизацияВА КАК АмортизацияВА,
	|	Константа.УчетПоКомпании КАК УчетПоКомпании
	|ГДЕ
	|	ГОД(АмортизацияВА.Дата) = &Год
	|	И МЕСЯЦ(АмортизацияВА.Дата) = &Месяц
	|	И (АмортизацияВА.Организация = &Организация
	|			ИЛИ УчетПоКомпании.Значение)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка";
	
	Запрос.УстановитьПараметр("Год", ТекГод);
	Запрос.УстановитьПараметр("Месяц", ТекМесяц);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДокВыборка = РезультатЗапроса[1].Выбрать();
	Пока ДокВыборка.Следующий() Цикл
		
		ДокОбъект = ДокВыборка.Ссылка.ПолучитьОбъект();
		Если ДокОбъект.ПометкаУдаления Тогда
			ДокОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		
		ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Если ДокВыборка.Организация = Организация Тогда
			СтруктураВозврата.ДокументАмортизацияВА = ДокВыборка.Ссылка;
		КонецЕсли; 
		
	КонецЦикла;
	
	СтруктураВозврата.ДокументЗакрытиеМесяца = Новый Массив;
	
	ДокВыборка = РезультатЗапроса[0].Выбрать();
	Пока ДокВыборка.Следующий() Цикл
		
		ДокОбъект = ДокВыборка.Ссылка.ПолучитьОбъект();
		Если ДокОбъект.ПометкаУдаления Тогда
			ДокОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		
		ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Если ДокВыборка.Организация = Организация Тогда
			СтруктураВозврата.ДокументЗакрытиеМесяца.Добавить(ДокВыборка.Ссылка);
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ВыполнитьОперациюЗакрытияМесяца(СтруктураПараметров, Операция, ДокументЗакрытияМесяца)
	
	ТекМесяц = СтруктураПараметров.ТекМесяц;
	ТекГод = СтруктураПараметров.ТекГод;
	Организация = СтруктураПараметров.Организация;
	
	Если ДокументЗакрытияМесяца = Неопределено Тогда
		
		ДокОбъект = Документы.ЗакрытиеМесяца.СоздатьДокумент();
		ДокОбъект.Организация = Организация;
		ДокОбъект.Дата = КонецМесяца(Дата(ТекГод, ТекМесяц, 1));
		ДокОбъект.Комментарий = НСтр("ru='#Создан автоматически, помощником закрытия месяца.'");
		
	Иначе
		
		ДокОбъект = ДокументЗакрытияМесяца.ПолучитьОбъект();
		
		Если ДокОбъект.ПометкаУдаления Тогда
			ДокОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		
		ДокОбъект.РасчетПрямыхЗатрат = Ложь;
		ДокОбъект.РаспределениеЗатрат = Ложь;
		ДокОбъект.РасчетФактическойСебестоимости = Ложь;
		ДокОбъект.РасчетФинансовогоРезультата = Ложь;
		ДокОбъект.РасчетКурсовыхРазниц = Ложь;
		ДокОбъект.РасчетСебестоимостиВРозницеСуммовойУчет = Ложь;
		
	КонецЕсли;
	
	Если Операция = СекцияРасчетСебестоимостиВРознице() Тогда
		ДокОбъект.РасчетСебестоимостиВРозницеСуммовойУчет = Истина;
	Иначе
		ДокОбъект[Операция] = Истина;
	КонецЕсли; 
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

#КонецОбласти 

#Область ФиксированныеСтроки 

#Область Секции

Функция СекцияПроверкаАвансыПокупателей()
	
	Возврат "ПроверкаАвансыПокупателей";
	
КонецФункции

Функция СекцияПроверкаАвансыПоставщикам()
	
	Возврат "ПроверкаАвансыПоставщикам";
	
КонецФункции

Функция СекцияПроверкаСтатьиДДС()
	
	Возврат "ПроверкаСтатьиДДС";
	
КонецФункции

Функция СекцияПроверкаОрганизацииИДоговоры()
	
	Возврат "ПроверкаОрганизацииИДоговоры";
	
КонецФункции

Функция ВсеСекцииПроверки()
	
	Результат = Новый Массив;
	Результат.Добавить(СекцияПроверкаАвансыПокупателей());
	Результат.Добавить(СекцияПроверкаАвансыПоставщикам());
	Результат.Добавить(СекцияПроверкаСтатьиДДС());
	Результат.Добавить(СекцияПроверкаОрганизацииИДоговоры());
	Возврат Результат;
	
КонецФункции

Функция СекцияНачислениеАмортизации()
	
	Возврат "НачислениеАмортизации";
	
КонецФункции

Функция СекцияРасчетПрямыхЗатрат()
	
	Возврат "РасчетПрямыхЗатрат";
	
КонецФункции

Функция СекцияРаспределениеЗатрат()
	
	Возврат "РаспределениеЗатрат";
	
КонецФункции
 
Функция СекцияРасчетФактическойСебестоимости()
	
	Возврат "РасчетФактическойСебестоимости";
	
КонецФункции
 
Функция СекцияРасчетСебестоимостиВРознице()
	
	Возврат "РасчетСебестоимостиВРознице";
	
КонецФункции
 
Функция СекцияРасчетКурсовыхРазниц()
	
	Возврат "РасчетКурсовыхРазниц";
	
КонецФункции
 
Функция СекцияРасчетФинансовогоРезультата()
	
	Возврат "РасчетФинансовогоРезультата";
	
КонецФункции

#КонецОбласти 

#Область ТипыСообщений

Функция ТипСообщенияПереносРезерва()
	
	Возврат "ПереносРезерва";
	
КонецФункции
 
Функция ТипСообщенияОтрицательныеОстатки()
	
	Возврат "ОтрицательныеОстатки";
	
КонецФункции

Функция ТипСообщенияИзмененныеДокументы()
	
	Возврат "ИзмененныеДокументы";
	
КонецФункции
 
Функция ТипСообщенияОшибкаЗакрытияМесяца()
	
	Возврат "ОшибкаЗакрытияМесяца";
	
КонецФункции

Функция ТипСообщенияОшибкаИнтеркампани()
	
	Возврат "ОшибкаИнтеркампани";
	
КонецФункции

Функция ТипСообщенияНезачтенныеАвансыПокупателей()
	
	Возврат "НезачтенныеАвансыПокупателей";
	
КонецФункции

Функция ТипСообщенияНезачтенныеАвансыПоставщикам()
	
	Возврат "НезачтенныеАвансыПоставщикам";
	
КонецФункции

Функция ТипСообщенияНеверноВыбранаСтатьяДДСПлатежи()
	
	Возврат "НеверноВыбранаСтатьяДДСПлатежи";
	
КонецФункции

Функция ТипСообщенияНеверноВыбранаСтатьяДДСПоступления()
	
	Возврат "НеверноВыбранаСтатьяДДСПоступления";
	
КонецФункции

Функция ТипСообщенияНесоответствиеОрганизацииВДокументеИДоговоре()
	
	Возврат "НесоответствиеОрганизацииВДокументеИДоговоре";
	
КонецФункции

Функция ТипСообщенияНесоответствиеОрганизацииВПодчиненномДокументе()
	
	Возврат "НесоответствиеОрганизацииВПодчиненномДокументе";
	
КонецФункции

Функция ТипСообщенияНесоответствиеДоговораВПодчиненномДокументе()
	
	Возврат "НесоответствиеДоговораВПодчиненномДокументе";
	
КонецФункции

Функция ТипСообщенияОстаткиСебестоимостиБезКоличества()
	
	Возврат "ОстаткиСебестоимостиБезКоличества";
	
КонецФункции

Функция ТипСообщенияОткрытыеКассовыеСмены()
	
	Возврат "ОткрытыеКассовыеСмены";
	
КонецФункции

#КонецОбласти 

#Область СостоянияЗакрытия

Функция СостояниеЗакрыт()
	
	Возврат "Закрыт";
	
КонецФункции
 
Функция СостояниеНеЗакрыт()
	
	Возврат "НеЗакрыт";
	
КонецФункции
 
Функция СостояниеЗакрытиеНеТребуется()
	
	Возврат "ЗакрытиеНеТребуется";
	
КонецФункции
 
#КонецОбласти 

#КонецОбласти 

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел()
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ГруппаДел	= НСтр("ru = 'Закрытие месяца'");
	ИмяФормы	= "Обработка.ЗакрытиеМесяца.Форма.Форма";
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	Если Не ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
		Или ТекущиеДелаСервер.ДелоОтключено(ГруппаДел) Тогда
		
		Возврат;
	КонецЕсли;
	
	СтрокаМесяц = ЗакрытиеМесяца.ИмяМесяцаВПадеже(Месяц(ДобавитьМесяц(ТекущаяДатаСеанса(), -1)), 2);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(ЗапасыОстатки.Организация) КАК ЗакрытиеМесяцаНеРассчитаныИтоги
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -1), МЕСЯЦ), ) КАК ЗапасыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗакрытиеМесяца КАК ДокЗакрытиеМесяца
	|		ПО ЗапасыОстатки.Организация = ДокЗакрытиеМесяца.Организация
	|			И (ДокЗакрытиеМесяца.Проведен)
	|			И (ДокЗакрытиеМесяца.РасчетФактическойСебестоимости)
	|			И (НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -1), МЕСЯЦ) = НАЧАЛОПЕРИОДА(ДокЗакрытиеМесяца.Дата, МЕСЯЦ))
	|ГДЕ
	|	ДокЗакрытиеМесяца.Ссылка ЕСТЬ NULL";
	
	ДанныеДел = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	 = "ЗакрытиеМесяцаНеРассчитаныИтоги";
	Дело.ЕстьДела		= ДанныеДел.ЗакрытиеМесяцаНеРассчитаныИтоги > 0;
	Дело.Важное			= Истина;
	Дело.Представление	= СтрШаблон(НСтр("ru = 'Выполнить закрытие %1'"), СтрокаМесяц);
	Дело.Количество		= ДанныеДел.ЗакрытиеМесяцаНеРассчитаныИтоги;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("ТекущиеДела");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= НСтр("ru = 'Закрытие месяца необходимо выполнить для окончательного расчета себестоимости, финансового результата и курсовых разниц'");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИзмененияЗакрытогоМесяца.Организация) КАК ЗакрытиеМесяцаИзмененияПоОрганизациям,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИзмененияЗакрытогоМесяца.ИзмененныйДокумент) КАК ЗакрытиеМесяцаИзмененыДокументы
	|ИЗ
	|	РегистрСведений.ИзмененияЗакрытогоМесяца КАК ИзмененияЗакрытогоМесяца
	|ГДЕ
	|	ИзмененияЗакрытогоМесяца.Месяц = НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -1), МЕСЯЦ)
	|	И ИзмененияЗакрытогоМесяца.Организация В
	|			(ВЫБРАТЬ
	|				ДокЗакрытиеМесяца.Организация
	|			ИЗ
	|				Документ.ЗакрытиеМесяца КАК ДокЗакрытиеМесяца
	|			ГДЕ
	|				ДокЗакрытиеМесяца.Проведен
	|				И ДокЗакрытиеМесяца.РасчетФактическойСебестоимости
	|				И НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -1), МЕСЯЦ) = НАЧАЛОПЕРИОДА(ДокЗакрытиеМесяца.Дата, МЕСЯЦ))";
	
	ДанныеДел = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	 = "ЗакрытиеМесяцаИзмененыДокументы";
	Дело.ЕстьДела		= ДанныеДел.ЗакрытиеМесяцаИзмененыДокументы > 0;
	Дело.Важное			= Истина;
	Дело.Представление	= СтрШаблон(НСтр("ru = 'Выполнить повторное закрытие %1'"), СтрокаМесяц);
	Дело.Количество		= ДанныеДел.ЗакрытиеМесяцаИзмененияПоОрганизациям;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("ТекущиеДела");
	Дело.Владелец		= ГруппаДел;
	
	ПодставляемаяСтрока = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
	НСтр("ru = ';%1 документ;;%1 документа;%1 документов;%1 документа'"), 
	ДанныеДел.ЗакрытиеМесяцаИзмененыДокументы);
	
	Дело.Подсказка = СтрШаблон(НСтр("ru = 'После закрытия месяца были внесены изменения в %1'"), ПодставляемаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли