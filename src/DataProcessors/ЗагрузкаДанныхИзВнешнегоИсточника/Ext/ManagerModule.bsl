
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПредварительнаяОбработкаДанных(ПараметрыВыполнения, АдресХранилища) Экспорт
	
	ЗагрузкаДанныхИзВнешнегоИсточника.СоздатьТаблицуОписанияОшибок(ПараметрыВыполнения.Ошибки);
	
	ЭтоПустойТабличныйДокумент(ПараметрыВыполнения.ТабличныйДокумент, ПараметрыВыполнения.ЗапретитьПереходДалее);
	Если ПараметрыВыполнения.ЗапретитьПереходДалее Тогда
		
		ТекстОшибки = НСтр("ru = 'Не заполнены импортируемые данные...'");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьОшибку(ПараметрыВыполнения.Ошибки, ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ЕстьНезаполненныеОбязательныеКолонки(ПараметрыВыполнения.ДеревоПолей, ПараметрыВыполнения.Ошибки);
	Если ПараметрыВыполнения.Ошибки.Найти(Истина, "Критичная") = Неопределено Тогда
		
		ПроверитьЗаполнениеТабличногоДокументаИЗаполнитьТаблицуФормы(ПараметрыВыполнения);
		
	КонецЕсли;
	
	ЗагрузкаДанныхИзВнешнегоИсточника.СформироватьНастройкиОбновленияСвойств(ПараметрыВыполнения.ДеревоПолей, ПараметрыВыполнения.НастройкиЗагрузкиДанных);
	
	Если ПараметрыВыполнения.ТаблицаСопоставленияДанных.Колонки.Найти("НомерГТД_ВходящиеДанные") <> Неопределено Тогда
		
		ПроверитьКорректностьЗаполненияНомеровГТД(ПараметрыВыполнения.ТаблицаСопоставленияДанных, ПараметрыВыполнения.Ошибки);
		
	КонецЕсли;

	ПараметрыВыполнения.ПропуститьСтраницу = (ПараметрыВыполнения.Ошибки.Количество() < 1);
	Если НЕ ПараметрыВыполнения.ПропуститьСтраницу Тогда
		
		ПараметрыВыполнения.ЗапретитьПереходДалее = (ПараметрыВыполнения.Ошибки.Найти(Истина, "Критичная") <> Неопределено);
		ВывестиОтчетООшибках(ПараметрыВыполнения.ТабличныйДокументСообщения, ПараметрыВыполнения.Ошибки);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ПараметрыВыполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ДобавитьКолонкиТаблицыСопоставлений(ЭтотОбъект, ТаблицаСопоставленияДанных, НастройкиЗагрузкиДанных) Экспорт
	Перем ГруппыИПоля;
	
	Если ТаблицаСопоставленияДанных.Выгрузить().Колонки.Количество() > 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ НастройкиЗагрузкиДанных.ЭтоЗагрузкаТабличнойЧасти Тогда
		
		МенеджерОбъект = Неопределено;
		ЗагрузкаДанныхИзВнешнегоИсточника.ПолучитьМенеджерПоИмениОбъектаЗаполнения(НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения, МенеджерОбъект);
		БлокируемыеРеквизиты = МенеджерОбъект.ПолучитьБлокируемыеРеквизитыОбъекта();
		
	КонецЕсли;
	
	ЗагрузкаДанныхИзВнешнегоИсточника.СоздатьИЗаполнитьДеревоГруппыИПолейПоИмениОбъекта(НастройкиЗагрузкиДанных, ГруппыИПоля);
	
	МассивРеквизитов= Новый Массив;
	ПутьРеквизита	= "ТаблицаСопоставленияДанных";
	ГруппаОбязательныхПолей = Неопределено;
	ГруппаНеобязательныхПолей = Неопределено;
	ГруппаСлужебныхПолей = Неопределено;
	Для Каждого ГруппаПолей Из ГруппыИПоля.Строки Цикл
		
		ЭтоПользовательскаяГруппаПолей = ЗагрузкаДанныхИзВнешнегоИсточника.ЭтоПользовательскаяГруппаПолей(ГруппаПолей.ИмяГруппыПолей);
		Если ЭтоПользовательскаяГруппаПолей Тогда
			
			ДобавитьРеквизитыИзПользовательскойГруппыПолей(ЭтотОбъект, ГруппаПолей, ПутьРеквизита, БлокируемыеРеквизиты);
			
		ИначеЕсли ГруппаПолей.ИмяГруппыПолей = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяГруппыПолейОбязательныхКЗаполнению() Тогда
			
			ГруппаОбязательныхПолей = ГруппаПолей;
			
		ИначеЕсли ГруппаПолей.ИмяГруппыПолей = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяГруппыПолейНеобязательныхКЗаполнению() Тогда
			
			ГруппаНеобязательныхПолей = ГруппаПолей;
			
		ИначеЕсли ГруппаПолей.ИмяГруппыПолей = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяГруппыПолейСлужебные() Тогда
			
			ГруппаСлужебныхПолей = ГруппаПолей;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьОбязательныеРеквизиты(ЭтотОбъект, ГруппаОбязательныхПолей, ПутьРеквизита, БлокируемыеРеквизиты);
	ДобавитьНеобязательныеРеквизиты(ЭтотОбъект, ГруппаНеобязательныхПолей, ПутьРеквизита, БлокируемыеРеквизиты);
	ДобавитьСлужебныеРеквизиты(ЭтотОбъект, ГруппаСлужебныхПолей, ПутьРеквизита);
	
	ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПослеДобавленияЭлементовТаблицыСопоставлений(ЭтотОбъект, НастройкиЗагрузкиДанных);
	ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ДобавитьУсловноеОформлениеТаблицыСопоставлений(ЭтотОбъект, ПутьРеквизита, НастройкиЗагрузкиДанных);
	
КонецПроцедуры

Процедура СоздатьДеревоПолейЗагрузкиДоступныхПользователю(ДеревоПолей, НастройкиЗагрузкиДанных) Экспорт
	Перем ГруппыИПоля;
	
	СоздатьШаблонДереваПолейЗагрузкиДоступныхПользователю(ДеревоПолей);
	ЗагрузкаДанныхИзВнешнегоИсточника.СоздатьИЗаполнитьДеревоГруппыИПолейПоИмениОбъекта(НастройкиЗагрузкиДанных, ГруппыИПоля);
	
	НоваяСтрока = ДеревоПолей.Строки.Добавить();
	НоваяСтрока.ПредставлениеПоля	= "Не загружать";
	
	Для каждого ГруппаПолей Из ГруппыИПоля.Строки Цикл
		
		Если ГруппаПолей.ИмяГруппыПолей = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяГруппыПолейСлужебные() Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НомерЦвета						= 0;
		ЭтоПользовательскаяГруппаПолей	= ЗагрузкаДанныхИзВнешнегоИсточника.ЭтоПользовательскаяГруппаПолей(ГруппаПолей.ИмяГруппыПолей);
		Если ЭтоПользовательскаяГруппаПолей Тогда
			
			НомерЦвета = 2; 
			
			НоваяСтрока 					= ДеревоПолей.Строки.Добавить();
			НоваяСтрока.ПредставлениеПоля	= ГруппаПолей.ИмяГруппыПолей;
			НоваяСтрока.ИмяГруппыПолей		= ГруппаПолей.ИмяГруппыПолей;
			НоваяСтрока.НомерЦвета 			= ?(ГруппаПолей.ОбязательноеЗаполнениеГруппы, 1, 0);
			ДобавитьПоля(НоваяСтрока, ГруппаПолей, НомерЦвета, ЭтоПользовательскаяГруппаПолей);
			//ДобавитьПоля(НоваяСтрока, ГруппаПолей, НоваяСтрока.НомерЦвета, ЭтоПользовательскаяГруппаПолей);
			Продолжить;
			
		ИначеЕсли ГруппаПолей.ИмяГруппыПолей = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяГруппыПолейОбязательныхКЗаполнению() Тогда
			
			НомерЦвета = 1;
			
		КонецЕсли;
		
		ДобавитьПоля(ДеревоПолей, ГруппаПолей, НомерЦвета);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДополнительныеРеквизиты(ЭтотОбъект, ВыбранныеДополнительныеРеквизиты) Экспорт
	
	Элементы = ЭтотОбъект.Элементы;
	ПостФикс = ЗагрузкаДанныхИзВнешнегоИсточника.ПостФиксИменПолейВходящихДанных();
	ПутьРеквизита = "ТаблицаСопоставленияДанных";
	ОписаниеТиповСтрока1024 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1024));
	
	ГруппаПервогоУровня = Элементы.Найти(ЗагрузкаДанныхИзВнешнегоИсточника.ИмяГруппыПолейНеобязательныхКЗаполнению()); // Доп. реквизиты не являются обязательными
	
	МассивРеквизитов = Новый Массив;
	Для каждого СтрокаСоответствия Из ВыбранныеДополнительныеРеквизиты Цикл
		
		Если Элементы.Найти(СтрокаСоответствия.Значение) <> Неопределено Тогда
			Продолжить; // Добавлялся ранее
		КонецЕсли;
		Если СтрокаСоответствия.Значение = Неопределено Тогда
			Продолжить; // Нет соответствия
		КонецЕсли;
		
		ГруппаВторогоУровня = Элементы.Добавить("Группа" + СтрокаСоответствия.Значение, Тип("ГруппаФормы"), ГруппаПервогоУровня);
		ГруппаВторогоУровня.Группировка = ГруппировкаКолонок.Вертикальная;
		ГруппаВторогоУровня.ОтображатьЗаголовок = Ложь;
		ГруппаВторогоУровня.Ширина = 8;
		
		МассивРеквизитов.Очистить();
		
		НовыйРеквизит = Новый РеквизитФормы(СтрокаСоответствия.Значение, СтрокаСоответствия.Ключ.ТипЗначения, ПутьРеквизита, Строка(СтрокаСоответствия.Ключ.Наименование));
		МассивРеквизитов.Добавить(НовыйРеквизит);
		
		НовыйРеквизит = Новый РеквизитФормы(СтрокаСоответствия.Значение + ПостФикс, ОписаниеТиповСтрока1024, ПутьРеквизита, Строка(СтрокаСоответствия.Ключ.Наименование));
		МассивРеквизитов.Добавить(НовыйРеквизит);
		
		ЭтотОбъект.ИзменитьРеквизиты(МассивРеквизитов);
		
		НовыйЭлемент 				= Элементы.Добавить(СтрокаСоответствия.Значение, Тип("ПолеФормы"), ГруппаВторогоУровня);
		НовыйЭлемент.Вид			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным	= "ТаблицаСопоставленияДанных." + СтрокаСоответствия.Значение;
		НовыйЭлемент.Заголовок		= Строка(СтрокаСоответствия.Ключ.Наименование);
		НовыйЭлемент.ТолькоПросмотр = Ложь;
		НовыйЭлемент.КнопкаСоздания = Ложь;
		НовыйЭлемент.Ширина			= 8;
		
		НовыйЭлемент 				= Элементы.Добавить(СтрокаСоответствия.Значение + ПостФикс, Тип("ПолеФормы"), ГруппаВторогоУровня);
		НовыйЭлемент.Вид			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным	= "ТаблицаСопоставленияДанных." + СтрокаСоответствия.Значение + ПостФикс;
		НовыйЭлемент.Заголовок		= " ";
		НовыйЭлемент.ТолькоПросмотр = Истина;
		НовыйЭлемент.Ширина			= 8;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВывестиОтчетООшибках(ТабличныйДокументСообщения, Ошибки)
	
	ТабличныйДокументСообщения.Очистить();
	
	Макет					= ПолучитьМакет("Ошибки");
	ОбластьШапка			= Макет.ПолучитьОбласть("Шапка");
	ОбластьОшибкаОбычная	= Макет.ПолучитьОбласть("ОшибкаОбычная");
	ОбластьОшибкаКритичная	= Макет.ПолучитьОбласть("ОшибкаКритичная");
	
	ТабличныйДокументСообщения.Вывести(ОбластьШапка);
	Для каждого Ошибка Из Ошибки Цикл
		
		ОбластьМакета = ?(Ошибка.Критичная, ОбластьОшибкаКритичная, ОбластьОшибкаОбычная);
		ОбластьМакета.Параметры.Заполнить(Ошибка);
		
		ТабличныйДокументСообщения.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЭтоПустойТабличныйДокумент(ТабличныйДокумент, ЗапретитьПереходДалее)
	
	ЗапретитьПереходДалее = (ТабличныйДокумент.ВысотаТаблицы < 1);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличногоДокументаИЗаполнитьТаблицуФормы(ПараметрыВыполнения)
	
	ТабличныйДокумент = ПараметрыВыполнения.ТабличныйДокумент;
	ТаблицаСопоставленияДанных = ПараметрыВыполнения.ТаблицаСопоставленияДанных;
	Ошибки = ПараметрыВыполнения.Ошибки;
	ГруппыИПоля = ПараметрыВыполнения.ДеревоПолей;

	ТаблицаСопоставленияДанных.Очистить();
	
	ПостФикс = ЗагрузкаДанныхИзВнешнегоИсточника.ПостФиксИменПолейВходящихДанных();
	КопияГруппыИПоля = ГруппыИПоля.Скопировать();
	
	КоличествоПустыхСтрок = 0;
	Для НомерСтроки = 2 По ТабличныйДокумент.ВысотаТаблицы Цикл 
		
		ВСтрокеБылиЗначения = Ложь;
		
		НоваяСтрокаДанных = ТаблицаСопоставленияДанных.Добавить();
		
		Если ПараметрыВыполнения.НастройкиЗагрузкиДанных.ФиксированныйШаблон Тогда
			// колонки с 13 по 22 содержат значения доп. реквизитов
			
			СоответствиеСвойствСтроки = Новый Соответствие;
			Для номерКолонкиДопРеквизита = 13 По 22 Цикл
				
				ЗначениеЯчейки = ТабличныйДокумент.ПолучитьОбласть(НомерСтроки, номерКолонкиДопРеквизита).ТекущаяОбласть.Текст;
				Если НЕ ПустаяСтрока(ЗначениеЯчейки) Тогда
					ИмяСвойства = ТабличныйДокумент.ПолучитьОбласть(1, номерКолонкиДопРеквизита).ТекущаяОбласть.Текст;
					СоответствиеСвойствСтроки.Вставить(ИмяСвойства, ЗначениеЯчейки);
				КонецЕсли; 
			КонецЦикла;
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			ЗаписатьJSON(ЗаписьJSON, СоответствиеСвойствСтроки);
			СтрокаJSON = ЗаписьJSON.Закрыть();
			
			НоваяСтрокаДанных.ДопРеквизитыШаблона_ВходящиеДанные = СтрокаJSON;
		КонецЕсли;
		
		Для каждого ГруппаИлиПоле Из КопияГруппыИПоля.Строки Цикл
			
			Если ПустаяСтрока(ГруппаИлиПоле.ИмяГруппыПолей) Тогда
				
				Если ГруппаИлиПоле.ИмяПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяПоляДобавленияДополнительныхРеквизитов() Тогда
				
					Для каждого ПолеИзГруппыПолейДополнительныхРеквизитов Из ГруппаИлиПоле.Строки Цикл 
						
						Если ПолеИзГруппыПолейДополнительныхРеквизитов.НомерКолонки = 0 Тогда
							
							Продолжить;
							
						КонецЕсли;
						
						ЗначениеЯчейки = ТабличныйДокумент.ПолучитьОбласть(НомерСтроки, ПолеИзГруппыПолейДополнительныхРеквизитов.НомерКолонки).ТекущаяОбласть.Текст;
							
						ИмяРеквизита = ПолеИзГруппыПолейДополнительныхРеквизитов.ИмяПоля + ПостФикс;
						Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрокаДанных, ИмяРеквизита) Тогда
							
							НоваяСтрокаДанных[ИмяРеквизита] = ЗначениеЯчейки;
							
						КонецЕсли;							
						
					КонецЦикла;
					
					Продолжить;
					
				ИначеЕсли ГруппаИлиПоле.НомерКолонки = 0 Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ЗначениеЯчейки = ТабличныйДокумент.ПолучитьОбласть(НомерСтроки, ГруппаИлиПоле.НомерКолонки).ТекущаяОбласть.Текст;
				НоваяСтрокаДанных[ГруппаИлиПоле.ИмяПоля + ПостФикс] = ЗначениеЯчейки;	
				
				ВСтрокеБылиЗначения = (ВСтрокеБылиЗначения ИЛИ НЕ ПустаяСтрока(ЗначениеЯчейки));
				
				Если ГруппаИлиПоле.НомерЦветаОригинал = 1
					И НЕ ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
					
					ТекстОшибки = НСтр("ru = 'В колонке {%1} присутствуют незаполненные ячейки. При обработке данные строки будут пропущены.'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ГруппаИлиПоле.ПредставлениеПоля);
					МестоВозникновения = НСтр("ru = 'Строка № %1.'");
					МестоВозникновения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(МестоВозникновения, НомерСтроки);
					
					ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьОшибку(Ошибки, ТекстОшибки, Ложь, МестоВозникновения);
					
				КонецЕсли;
				
			Иначе
				
				Для каждого ПолеИзГруппыПолей Из ГруппаИлиПоле.Строки Цикл 
					
					Если ПолеИзГруппыПолей.НомерКолонки = 0 Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					ЗначениеЯчейки = ТабличныйДокумент.ПолучитьОбласть(НомерСтроки, ПолеИзГруппыПолей.НомерКолонки).ТекущаяОбласть.Текст;
					НоваяСтрокаДанных[ПолеИзГруппыПолей.ИмяПоля] = ЗначениеЯчейки;
					
					ВСтрокеБылиЗначения = (ВСтрокеБылиЗначения ИЛИ НЕ ПустаяСтрока(ЗначениеЯчейки));
					
					Если ПолеИзГруппыПолей.НомерЦветаОригинал = 1 
						И НЕ ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
							
							ТекстОшибки = НСтр("ru = 'В колонке {%1} присутствуют незаполненные ячейки. При обработке данные строки будут пропущены.'");
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ПолеИзГруппыПолей.ПредставлениеПоля);
							МестоВозникновения = НСтр("ru = 'Строка № %1.'");
							МестоВозникновения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(МестоВозникновения, НомерСтроки);
							
							ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьОшибку(Ошибки, ТекстОшибки, Ложь, МестоВозникновения);
							
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ВСтрокеБылиЗначения Тогда
			
			КоличествоПустыхСтрок = КоличествоПустыхСтрок + 1;
			
		КонецЕсли;
		
		ТекстПрогресса = СтрШаблон(НСтр("ru ='Проверено %1 из %2 строк...'"), НомерСтроки, ТабличныйДокумент.ВысотаТаблицы);
		ДлительныеОперации.СообщитьПрогресс(Цел(НомерСтроки * 100 / ТабличныйДокумент.ВысотаТаблицы), ТекстПрогресса);
		
		// В версии 8.3.10 для решения такой проблемы сделан метод ПолучитьРазмерОбластиДанныхПоВертикали, а пока так...
		Если КоличествоПустыхСтрок > ЗагрузкаДанныхИзВнешнегоИсточника.МаксимальноеКоличествоПустыхСтрок() Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// проверим, введены ли цены
	Если ТаблицаСопоставленияДанных.Колонки.Найти("Цена") <> Неопределено Тогда
		
		Для каждого ценаВТаблице Из ТаблицаСопоставленияДанных.ВыгрузитьКолонку("Цена_ВходящиеДанные") Цикл
			
			Если ЗначениеЗаполнено(ценаВТаблице) Тогда
				ПараметрыВыполнения.НастройкиЗагрузкиДанных.ЦеныЗаполнены = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли; 
	Если ТаблицаСопоставленияДанных.Колонки.Найти("Количество") <> Неопределено Тогда
		
		Для каждого КоличествоВТаблице Из ТаблицаСопоставленияДанных.ВыгрузитьКолонку("Количество_ВходящиеДанные") Цикл
			
			Если ЗначениеЗаполнено(КоличествоВТаблице) Тогда
				ПараметрыВыполнения.НастройкиЗагрузкиДанных.КоличествоЗаполнено = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЕстьНезаполненныеОбязательныеКолонки(ДеревоПолей, Ошибки)
	
	Для каждого ПолеИлиГруппаПолей Из ДеревоПолей.Строки Цикл
		
		Если НЕ ПустаяСтрока(ПолеИлиГруппаПолей.ИмяГруппыПолей) Тогда
			
			ИменаНевыбранныхКолонок = "";
			НеВыбраноКолонокВГруппе = 0;
			
			Для каждого ПолеИзГруппыПолей Из ПолеИлиГруппаПолей.Строки Цикл 
				
				Если ПолеИзГруппыПолей.НомерЦветаОригинал = 1 
					И ПолеИзГруппыПолей.НомерКолонки = 0 Тогда
					
					ТекстОшибки = НСтр("ru = 'Не выбрана обязательная колонка {%1}'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ПолеИзГруппыПолей.ПредставлениеПоля);
					МестоВозникновения = НСтр("ru = 'Настройка заголовков.'");
					
					ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьОшибку(Ошибки, ТекстОшибки, Истина, МестоВозникновения);
					
				ИначеЕсли ПолеИлиГруппаПолей.НомерЦвета = 1 // Если группа обязательна к заполнению
					И ПолеИзГруппыПолей.НомерЦвета = ПолеИзГруппыПолей.НомерЦветаОригинал Тогда // но поле не выбрано
					
					НеВыбраноКолонокВГруппе = НеВыбраноКолонокВГруппе + 1;
					ИменаНевыбранныхКолонок = ИменаНевыбранныхКолонок + ?(ПустаяСтрока(ИменаНевыбранныхКолонок), "", ", ") + ПолеИзГруппыПолей.ПредставлениеПоля;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПолеИлиГруппаПолей.Строки.Количество() = НеВыбраноКолонокВГруппе Тогда // Если группа обязательна к заполнению, а ни одно поле не выбрано
				
				ТекстОшибки = НСтр("ru = 'Для группы полей {%1}, состоящей из набора колонок {%2}, в загружаемых данных необходимо выбрать минимум одну колонку.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ПолеИлиГруппаПолей.ИмяГруппыПолей, ИменаНевыбранныхКолонок);
				МестоВозникновения = НСтр("ru = 'Настройка заголовков.'");
				
				ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьОшибку(Ошибки, ТекстОшибки, Истина, МестоВозникновения);
				
			КонецЕсли;
			
		ИначеЕсли ПолеИлиГруппаПолей.НомерЦветаОригинал = 1 
			И ПолеИлиГруппаПолей.НомерКолонки = 0 Тогда
			
			ТекстОшибки = НСтр("ru = 'Не выбрана обязательная колонка {%1}'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ПолеИлиГруппаПолей.ПредставлениеПоля);
			МестоВозникновения = НСтр("ru = 'Настройка заголовков.'");
			
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьОшибку(Ошибки, ТекстОшибки, Истина, МестоВозникновения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьКорректностьЗаполненияНомеровГТД(ТаблицаСопоставленияДанных, Ошибки)
	
	РазделительДекларации = "/";
	
	Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НомерГТД_ВходящиеДанные) Тогда
			Продолжить;
		КонецЕсли;
					
		НомерГрузовойДекларации = СокрЛП(СтрокаТаблицы.НомерГТД_ВходящиеДанные);             					
		НомерГрузовойДекларации = ОбработатьНомерГрузовойДекларации(НомерГрузовойДекларации, РазделительДекларации);
		
		ДанныеНомераГТД = Справочники.НомераГТД.ДанныеНомераГТД(НомерГрузовойДекларации, РазделительДекларации);
		
		ОшибкиГТД = Справочники.НомераГТД.ПроверитьКорректностьЗаполненияНомераГТД(ДанныеНомераГТД);
		Если ОшибкиГТД <> Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'В колонке {Номер ГТД} обнаружен некорректный номер.'", ОбщегоНазначения.КодОсновногоЯзыка()) + Символы.ПС;
			Для каждого ОшибкаГТД Из ОшибкиГТД.СписокОшибок Цикл
				ТекстОшибки = ТекстОшибки + ОшибкаГТД.ТекстДляОднойОшибки + ". ";		
			КонецЦикла;
			ТекстОшибки = ТекстОшибки + Символы.ПС;
			ТекстОшибки = СтрШаблон(НСтр("ru = '%1Номер ГТД будет пропущен.'", ОбщегоНазначения.КодОсновногоЯзыка()), ТекстОшибки);
			
			НомерСтроки = ТаблицаСопоставленияДанных.Индекс(СтрокаТаблицы) + 1;
			МестоВозникновения = СтрШаблон(НСтр("ru = 'Строка № %1.'", ОбщегоНазначения.КодОсновногоЯзыка()), НомерСтроки); 			
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьОшибку(Ошибки, ТекстОшибки, Ложь, МестоВозникновения);
			СтрокаТаблицы.НомерГТД_ВходящиеДанные = "";
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьНомерГрузовойДекларации(Номер, РазделительДекларации)
		
	МассивДопустимыхРазделителей = Новый Массив;
	МассивДопустимыхРазделителей.Добавить("-");
	МассивДопустимыхРазделителей.Добавить("\");
	МассивДопустимыхРазделителей.Добавить("|");
	МассивДопустимыхРазделителей.Добавить("~");
	
	Для каждого ВторичныйРазделитель Из МассивДопустимыхРазделителей Цикл
		
		Номер = СтрЗаменить(Номер, ВторичныйРазделитель, РазделительДекларации);
		
	КонецЦикла;
	Возврат Номер;
	
КонецФункции

// :::Построение дерева полей

Процедура СоздатьШаблонДереваПолейЗагрузкиДоступныхПользователю(ДеревоПолей)
	
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	ОписаниеТиповСтрока256 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(256));
	ОписаниеТиповЧисло1_0 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло2_0 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповОТ = Новый ОписаниеТипов("ОписаниеТипов");
	
	ДеревоПолей = Новый ДеревоЗначений;
	
	ДеревоПолей.Колонки.Добавить("ИмяГруппыПолей",			ОписаниеТиповСтрока100,,);
	ДеревоПолей.Колонки.Добавить("ТипПолучаемогоЗначения",	ОписаниеТиповОТ,,);
	ДеревоПолей.Колонки.Добавить("ИмяПоля",					ОписаниеТиповСтрока100,,);
	ДеревоПолей.Колонки.Добавить("ПредставлениеПоля",		ОписаниеТиповСтрока256,,);
	ДеревоПолей.Колонки.Добавить("НомерКолонки",			ОписаниеТиповЧисло2_0,,);
	ДеревоПолей.Колонки.Добавить("НомерЦвета",				ОписаниеТиповЧисло1_0,,);
	ДеревоПолей.Колонки.Добавить("НомерЦветаОригинал",		ОписаниеТиповЧисло1_0,,);
	
КонецПроцедуры

Процедура ДобавитьПоля(РодительПолей, ГруппаПолей, НомерЦвета, ЭтоПользовательскаяГруппаПолей = Ложь)
	
	Для каждого Поле Из ГруппаПолей.Строки Цикл
		
		Если Поле.Видимость Тогда
			
			НоваяСтрока 						= РодительПолей.Строки.Добавить();
			НоваяСтрока.ИмяГруппыПолей			= Поле.ИмяГруппыПолей;
			НоваяСтрока.ТипПолучаемогоЗначения	= Поле.ТипПолучаемогоЗначения;
			НоваяСтрока.ИмяПоля					= Поле.ИмяПоля;
			НоваяСтрока.ПредставлениеПоля		= Поле.ПредставлениеПоля;
			НоваяСтрока.НомерКолонки			= Поле.НомерКолонки;
			
			Если НоваяСтрока.НомерКолонки <> 0 Тогда
				
				НоваяСтрока.НомерЦвета			= 3;
				Если ЭтоПользовательскаяГруппаПолей Тогда
					
					РодительПолей.НомерЦвета	= 3;
					
				КонецЕсли;
				
			ИначеЕсли Поле.ДопРеквизитПризнак = Истина 
				И НомерЦвета <> 1 Тогда // Обязательные поля не перекрашиваем
				
				НоваяСтрока.НомерЦвета			= 4;
				
			Иначе
				
				НоваяСтрока.НомерЦвета			= ?(Поле.ОбязательноеЗаполнение, 1, НомерЦвета);
				
			КонецЕсли;
			
			НоваяСтрока.НомерЦветаОригинал 		= НоваяСтрока.НомерЦвета;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
// :::Работа с реквизитами и элементами форм помощника

Процедура ДобавитьРеквизитыИзПользовательскойГруппыПолей(ЭтотОбъект, ГруппаПолей, ПутьРеквизита, БлокируемыеРеквизиты = Неопределено)
	
	Элементы = ЭтотОбъект.Элементы;
	
	ГруппаПервогоУровня = Элементы.Добавить("Группа" + ГруппаПолей.ИмяГруппыПолей, Тип("ГруппаФормы"), Элементы.ТаблицаСопоставленияДанных);
	ГруппаПервогоУровня.Группировка = ГруппировкаКолонок.Вертикальная;
	ГруппаПервогоУровня.ОтображатьЗаголовок = Ложь;
	
	НовыйРеквизитГруппа = Новый РеквизитФормы(ГруппаПолей.ИмяГруппыПолей, ГруппаПолей.ТипПолучаемогоЗначения, ПутьРеквизита, ГруппаПолей.ИмяГруппыПолей);
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(НовыйРеквизитГруппа);
	ЭтотОбъект.ИзменитьРеквизиты(МассивРеквизитов);
	
	НовыйЭлемент 				= Элементы.Добавить(ГруппаПолей.ИмяГруппыПолей, Тип("ПолеФормы"), ГруппаПервогоУровня);
	НовыйЭлемент.Вид			= ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным	= "ТаблицаСопоставленияДанных." + ГруппаПолей.ИмяГруппыПолей;
	НовыйЭлемент.Заголовок		= ГруппаПолей.ПредставлениеПоля;
	НовыйЭлемент.РежимРедактирования = РежимРедактированияКолонки.Вход;
	НовыйЭлемент.ОтметкаНезаполненного = ГруппаПолей.ОбязательноеЗаполнениеГруппы;
	НовыйЭлемент.АвтоОтметкаНезаполненного = ГруппаПолей.ОбязательноеЗаполнениеГруппы;
	НовыйЭлемент.КнопкаСоздания = Ложь;
	
	ГруппаВторогоУровня = Элементы.Добавить("ГруппаВходящая" + ГруппаПолей.ИмяГруппыПолей, Тип("ГруппаФормы"), ГруппаПервогоУровня);
	ГруппаВторогоУровня.Группировка = ГруппировкаКолонок.ВЯчейке;
	ГруппаВторогоУровня.ОтображатьЗаголовок = Ложь;
	
	Для каждого СтрокаГруппы Из ГруппаПолей.Строки Цикл
		
		МассивРеквизитов.Очистить();
		
		НовыйРеквизит = Новый РеквизитФормы(СтрокаГруппы.ИмяПоля, СтрокаГруппы.ТипВходящихДанных, ПутьРеквизита, ГруппаПолей.ПредставлениеПоля);
		МассивРеквизитов.Добавить(НовыйРеквизит);
		
		ЭтотОбъект.ИзменитьРеквизиты(МассивРеквизитов);
		
		НовыйЭлемент 				= Элементы.Добавить(СтрокаГруппы.ИмяПоля, Тип("ПолеФормы"), ГруппаВторогоУровня);
		НовыйЭлемент.Вид			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным	= "ТаблицаСопоставленияДанных." + СтрокаГруппы.ИмяПоля;
		НовыйЭлемент.Заголовок		= СтрокаГруппы.ПредставлениеПоля;
		НовыйЭлемент.ТолькоПросмотр = Истина;
		НовыйЭлемент.Ширина 		= 4;
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьОбязательныеРеквизиты(ЭтотОбъект, ГруппаПолей, ПутьРеквизита, БлокируемыеРеквизиты = Неопределено)
	
	Элементы = ЭтотОбъект.Элементы;
	
	ГруппаПервогоУровня = Элементы.Добавить(ЗагрузкаДанныхИзВнешнегоИсточника.ИмяГруппыПолейОбязательныхКЗаполнению(), Тип("ГруппаФормы"), Элементы.ТаблицаСопоставленияДанных);
	ГруппаПервогоУровня.Группировка = ГруппировкаКолонок.Горизонтальная;
	ГруппаПервогоУровня.ОтображатьЗаголовок = Ложь;
	
	ПостФикс = ЗагрузкаДанныхИзВнешнегоИсточника.ПостФиксИменПолейВходящихДанных();
	
	МассивРеквизитов = Новый Массив;
	Для каждого СтрокаГруппы Из ГруппаПолей.Строки Цикл
		
		ГруппаВторогоУровня = Элементы.Добавить("Группа" + СтрокаГруппы.ИмяПоля, Тип("ГруппаФормы"), ГруппаПервогоУровня);
		ГруппаВторогоУровня.Группировка = ГруппировкаКолонок.Вертикальная;
		ГруппаВторогоУровня.ОтображатьЗаголовок = Ложь;
		
		МассивРеквизитов.Очистить();
		
		НовыйРеквизит = Новый РеквизитФормы(СтрокаГруппы.ИмяПоля, СтрокаГруппы.ТипПолучаемогоЗначения, ПутьРеквизита, ГруппаПолей.ПредставлениеПоля);
		МассивРеквизитов.Добавить(НовыйРеквизит);
		
		НовыйРеквизит = Новый РеквизитФормы(СтрокаГруппы.ИмяПоля + ПостФикс, СтрокаГруппы.ТипВходящихДанных, ПутьРеквизита, ГруппаПолей.ПредставлениеПоля);
		МассивРеквизитов.Добавить(НовыйРеквизит);
		
		ЭтотОбъект.ИзменитьРеквизиты(МассивРеквизитов);
		
		НовыйЭлемент 				= Элементы.Добавить(СтрокаГруппы.ИмяПоля, Тип("ПолеФормы"), ГруппаВторогоУровня);
		НовыйЭлемент.Вид			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным	= "ТаблицаСопоставленияДанных." + СтрокаГруппы.ИмяПоля;
		НовыйЭлемент.Заголовок		= СтрокаГруппы.ПредставлениеПоля;
		НовыйЭлемент.ТолькоПросмотр = Ложь;
		НовыйЭлемент.ОтметкаНезаполненного = Истина;
		НовыйЭлемент.АвтоОтметкаНезаполненного = Истина;
		НовыйЭлемент.КнопкаСоздания = Ложь;
		
		Если БлокируемыеРеквизиты <> Неопределено
			И БлокируемыеРеквизиты.Найти(СтрокаГруппы.ИмяПоля) = Неопределено Тогда
			
			НовыйЭлемент.КартинкаШапки = БиблиотекаКартинок.ВосклицательныйЗнакСерый;
			
		КонецЕсли;
		
		НовыйЭлемент 				= Элементы.Добавить(СтрокаГруппы.ИмяПоля + ПостФикс, Тип("ПолеФормы"), ГруппаВторогоУровня);
		НовыйЭлемент.Вид			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным	= "ТаблицаСопоставленияДанных." + СтрокаГруппы.ИмяПоля + ПостФикс;
		НовыйЭлемент.Заголовок		= " ";//СтрокаГруппы.ПредставлениеПоля + ПостФикс;
		НовыйЭлемент.ТолькоПросмотр = Истина;
		НовыйЭлемент.ОтметкаНезаполненного = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьНеобязательныеРеквизиты(ЭтотОбъект, ГруппаПолей, ПутьРеквизита, БлокируемыеРеквизиты = Неопределено)
	
	Элементы = ЭтотОбъект.Элементы;
	
	ГруппаПервогоУровня = Элементы.Добавить(ЗагрузкаДанныхИзВнешнегоИсточника.ИмяГруппыПолейНеобязательныхКЗаполнению(), Тип("ГруппаФормы"), Элементы.ТаблицаСопоставленияДанных);
	ГруппаПервогоУровня.Группировка = ГруппировкаКолонок.Горизонтальная;
	ГруппаПервогоУровня.ОтображатьЗаголовок = Ложь;
	
	ПостФикс = ЗагрузкаДанныхИзВнешнегоИсточника.ПостФиксИменПолейВходящихДанных();
	
	МассивРеквизитов = Новый Массив;
	Для каждого СтрокаГруппы Из ГруппаПолей.Строки Цикл
		
		Если СтрокаГруппы.ИмяПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяПоляДобавленияДополнительныхРеквизитов() Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ГруппаВторогоУровня = Элементы.Добавить("Группа" + СтрокаГруппы.ИмяПоля, Тип("ГруппаФормы"), ГруппаПервогоУровня);
		ГруппаВторогоУровня.Группировка = ГруппировкаКолонок.Вертикальная;
		ГруппаВторогоУровня.ОтображатьЗаголовок = Ложь;
		
		МассивРеквизитов.Очистить();
		
		НовыйРеквизит = Новый РеквизитФормы(СтрокаГруппы.ИмяПоля, СтрокаГруппы.ТипПолучаемогоЗначения, ПутьРеквизита, ГруппаПолей.ПредставлениеПоля);
		МассивРеквизитов.Добавить(НовыйРеквизит);
		
		НовыйРеквизит = Новый РеквизитФормы(СтрокаГруппы.ИмяПоля + ПостФикс, СтрокаГруппы.ТипВходящихДанных, ПутьРеквизита, ГруппаПолей.ПредставлениеПоля);
		МассивРеквизитов.Добавить(НовыйРеквизит);
		
		ЭтотОбъект.ИзменитьРеквизиты(МассивРеквизитов);
		
		НовыйЭлемент 				= Элементы.Добавить(СтрокаГруппы.ИмяПоля, Тип("ПолеФормы"), ГруппаВторогоУровня);
		НовыйЭлемент.Вид			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным	= "ТаблицаСопоставленияДанных." + СтрокаГруппы.ИмяПоля;
		НовыйЭлемент.Заголовок		= СтрокаГруппы.ПредставлениеПоля;
		НовыйЭлемент.ТолькоПросмотр = Ложь;
		НовыйЭлемент.КнопкаСоздания = Ложь;
		
		Если СтрокаГруппы.ИмяПоля = "Родитель" Тогда
			
			НовыйЭлемент.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
			
		КонецЕсли;
		Если СтрокаГруппы.ИмяПоля = "Серия" Тогда
			
			НовыйЭлемент.Доступность = Ложь;
			
			НовоеУсловноеОформление = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
			РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, СтрокаГруппы.ИмяПоля);
			РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Будут созданы при загрузке (разделитель: запятая, точка с запятой, пробел, перенос строки)>'"));
			РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
			РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
			
		КонецЕсли;
		
		Если БлокируемыеРеквизиты <> Неопределено
			И БлокируемыеРеквизиты.Найти(СтрокаГруппы.ИмяПоля) <> Неопределено Тогда
			
			НовыйЭлемент.КартинкаШапки = БиблиотекаКартинок.ИнформацияПоНедоступнымПолям;
			
		КонецЕсли;
		
		НовыйЭлемент 				= Элементы.Добавить(СтрокаГруппы.ИмяПоля + ПостФикс, Тип("ПолеФормы"), ГруппаВторогоУровня);
		НовыйЭлемент.Вид			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным	= "ТаблицаСопоставленияДанных." + СтрокаГруппы.ИмяПоля + ПостФикс;
		НовыйЭлемент.Заголовок		= " ";
		НовыйЭлемент.ТолькоПросмотр = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСлужебныеРеквизиты(ЭтотОбъект, ГруппаПолей, ПутьРеквизита)
	
	МассивРеквизитов = Новый Массив;
	Для каждого СтрокаГруппы Из ГруппаПолей.Строки Цикл
		
		НовыйРеквизит = Новый РеквизитФормы(СтрокаГруппы.ИмяПоля, СтрокаГруппы.ТипПолучаемогоЗначения, ПутьРеквизита, СтрокаГруппы.ИмяПоля);
		МассивРеквизитов.Добавить(НовыйРеквизит);
		
	КонецЦикла;
	
	ЭтотОбъект.ИзменитьРеквизиты(МассивРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли