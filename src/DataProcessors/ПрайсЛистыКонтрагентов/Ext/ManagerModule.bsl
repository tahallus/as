
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Функция ПроверитьУсловиеФильтра(Знач ПроверяемоеЗначение, Знач ВидСравненияЗначений, Знач Значение, Знач ЗначениеДо)
	
	Если ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.Равно Тогда
		
		Возврат ПроверяемоеЗначение = Значение;
		
	ИначеЕсли ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.НеРавно Тогда
		
		Возврат ПроверяемоеЗначение <> Значение;
		
	ИначеЕсли ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.Больше Тогда
		
		Возврат ПроверяемоеЗначение > Значение;
		
	ИначеЕсли ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.БольшеИлиРавно Тогда
		
		Возврат ПроверяемоеЗначение >= Значение;
		
	ИначеЕсли ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.Меньше Тогда
		
		Возврат ПроверяемоеЗначение < Значение;
		
	ИначеЕсли ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.МеньшеИлиРавно Тогда
		
		Возврат ПроверяемоеЗначение <= Значение;
		
	ИначеЕсли ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.ВИнтервале Тогда
		
		Возврат ПроверяемоеЗначение > Значение И ПроверяемоеЗначение < ЗначениеДо;
		
	ИначеЕсли ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.ВИнтервалеВключая Тогда
		
		Возврат ПроверяемоеЗначение >= Значение И ПроверяемоеЗначение <= ЗначениеДо;
		
	ИначеЕсли ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.ВСписке Тогда
		
		Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
			
			Возврат Значение.НайтиПоЗначению(ПроверяемоеЗначение) <> Неопределено;
			
		ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
			
			Возврат Значение.Найти(ПроверяемоеЗначение) <> Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#Область Оформление

Процедура СтандартнаяШиринаКолонкаЗаголовка(ТабличныйДокумент)
	
	ТабличныйДокумент.Область("C1").ШиринаКолонки = 2;
	ТабличныйДокумент.Область("C2").ШиринаКолонки = 12;
	ТабличныйДокумент.Область("C3").ШиринаКолонки = 34;
	ТабличныйДокумент.Область("C4").ШиринаКолонки = 25;
	
КонецПроцедуры

Процедура ДобавитьЛинииОбласти(ВыделениеОбласти, ЛинияЯчейки)
	
	ВыделениеОбласти.ГраницаСверху = ЛинияЯчейки;
	ВыделениеОбласти.ГраницаСлева = ЛинияЯчейки;
	ВыделениеОбласти.ГраницаСправа = ЛинияЯчейки;
	ВыделениеОбласти.ГраницаСнизу = ЛинияЯчейки;
	
КонецПроцедуры

Процедура ОформлениеСтрокиТабличногоДокумента(ПараметрыФормирования, ТабличныйДокумент, МассивВыделяемыхОбластей)
	
	Если МассивВыделяемыхОбластей.Количество() < 1 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ПараметрыФормирования.МаксимальнаяЦена = Истина Тогда
		
		НовыйЦветФона = Новый Цвет(250, 200, 200);
		
	ИначеЕсли ПараметрыФормирования.МинимальнаяЦена = Истина Тогда
		
		НовыйЦветФона = Новый Цвет(200, 200, 250);
		
	КонецЕсли;
	
	Для каждого ИмяОбласти Из МассивВыделяемыхОбластей Цикл
		
		ТабличныйДокумент.Область(ИмяОбласти).ЦветФона = НовыйЦветФона;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОформлениеПрайсЛистаКонтрагентов(ПараметрыФормирования, ТабличныйДокумент)
	
	// R3C2 - 3 строка, 2 колонка
	
	НомерПервойСтроки = 4; // РазмерШапкиТабличногоДокумента - в ПЛ контрагентов всегда 4
	НомерПоследнейСтроки = ТабличныйДокумент.ВысотаТаблицы;
	
	Если НомерПоследнейСтроки <= НомерПервойСтроки Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МассивВыделяемыхОбластей = Новый Массив;
	Для НомерСтроки = НомерПервойСтроки По НомерПоследнейСтроки Цикл
		
		МассивВыделяемыхОбластей.Очистить();
		
		МаксимальнаяЦена = Неопределено;
		МинимальнаяЦена = Неопределено;
		
		НомерКолонки = ПараметрыФормирования.ПоследняяКолонкаЗаголовка;
		Для каждого ОписаниеКолонки Из ПараметрыФормирования.ИменаКолонок Цикл
			
			НомерКолонки = НомерКолонки + 2;
			ИмяОбласти = СтрШаблон("R%1C%2:R%1C%3", Формат(НомерСтроки, "ЧГ="), Формат(НомерКолонки - 1, "ЧГ="), Формат(НомерКолонки, "ЧГ="));
			ТекущаяЦена		= 0;
			
			ТекущаяОбласть = ТабличныйДокумент.Область(ИмяОбласти);
			Если ТипЗнч(ТекущаяОбласть.Расшифровка) = Тип("Структура") Тогда
				
				ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 255);
				ТекущаяОбласть.Расшифровка.Свойство("Цена", ТекущаяЦена);
				
				Если ТекущаяЦена = Неопределено Тогда
					
					ТекущаяЦена = 0;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекущаяЦена = 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ПараметрыФормирования.МаксимальнаяЦена = Истина Тогда
				
				Если МаксимальнаяЦена = Неопределено Тогда
					
					МаксимальнаяЦена = ТекущаяЦена;
					МассивВыделяемыхОбластей.Добавить(ИмяОбласти);
					
				ИначеЕсли ТекущаяЦена > МаксимальнаяЦена Тогда
					
					МаксимальнаяЦена = ТекущаяЦена;
					
					МассивВыделяемыхОбластей.Очистить();
					МассивВыделяемыхОбластей.Добавить(ИмяОбласти);
					
				ИначеЕсли ТекущаяЦена = МаксимальнаяЦена Тогда
					
					МассивВыделяемыхОбластей.Добавить(ИмяОбласти);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПараметрыФормирования.МинимальнаяЦена = Истина Тогда
				
				Если МинимальнаяЦена = Неопределено Тогда
					
					МинимальнаяЦена = ТекущаяЦена;
					МассивВыделяемыхОбластей.Добавить(ИмяОбласти);
					
				ИначеЕсли ТекущаяЦена < МинимальнаяЦена Тогда
					
					МинимальнаяЦена = ТекущаяЦена;
					
					МассивВыделяемыхОбластей.Очистить();
					МассивВыделяемыхОбластей.Добавить(ИмяОбласти);
					
				ИначеЕсли ТекущаяЦена = МинимальнаяЦена Тогда
					
					МассивВыделяемыхОбластей.Добавить(ИмяОбласти);
					
				КонецЕсли;
				
			КонецЕсли;
		
			Если ПараметрыФормирования.УсловнаяЦена = Истина Тогда
				
				РезультатПроверки = ПроверитьУсловиеФильтра(ТекущаяЦена, ПараметрыФормирования.УсловнаяЦенаУсловие, ПараметрыФормирования.УсловнаяЦенаЗначение, ПараметрыФормирования.УсловнаяЦенаЗначениеДо);
				Если РезультатПроверки = Истина Тогда
					
					ТекущаяОбласть.ЦветФона = Новый Цвет(250, 250, 0);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОформлениеСтрокиТабличногоДокумента(ПараметрыФормирования, ТабличныйДокумент, МассивВыделяемыхОбластей);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеОбластейМакета

Функция СоздатьОбластьШапка(ПараметрыФормирования, ТабличныйДокумент, МакетПолотно)
	
	// R3C2 - 3 строка, 2 колонка
	ИмяСекции = ?(ПараметрыФормирования.ЕстьХарактеристики, "Шапка", "Шапка|Номенклатура");
	
	ОбластьШапка = МакетПолотно.ПолучитьОбласть(ИмяСекции);
	ЛинияЯчейки	 = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	НомерКолонки = ПараметрыФормирования.ПоследняяКолонкаЗаголовка;
	
	КоличествоЦен = ПараметрыФормирования.ТаблицаВидовЦенКонтрагентов.Количество();
	Для ИндексЦены = 1 По КоличествоЦен Цикл
		
		КолонкаЕдИзм = НомерКолонки + 1;
		КолонкаЦена = НомерКолонки + 2;
		
		ТабличныйДокумент.Область("C" + Строка(КолонкаЕдИзм)).ШиринаКолонки	= 5;	// ед. измерения
		ТабличныйДокумент.Область("C" + Строка(КолонкаЦена)).ШиринаКолонки	= 12;	// цена
		
		ВидЦенКонтрагента = ПараметрыФормирования.ТаблицаВидовЦенКонтрагентов[ИндексЦены - 1].ВидЦенКонтрагента;
		
		// ::: Наименование (в двух колонках)
		ВыделениеОбласти = ОбластьШапка.Область(1, КолонкаЕдИзм, 1, КолонкаЦена);
		ВыделениеОбласти.Объединить();
		ВыделениеОбласти.Текст						= Строка(ВидЦенКонтрагента);
		ВыделениеОбласти.РазмещениеТекста			= ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ВыделениеОбласти.ВертикальноеПоложение		= ВертикальноеПоложение.Верх;
		ВыделениеОбласти.ГоризонтальноеПоложение	= ГоризонтальноеПоложение.Центр;
		ВыделениеОбласти.ЦветФона					= ЦветаСтиля.ЦветРамкиГруппыЦеныИВалюты;
		ВыделениеОбласти.ПараметрРасшифровки		= "ВидЦенКонтрагента_" + Строка(ИндексЦены - 1);
		
		ДобавитьЛинииОбласти(ВыделениеОбласти, ЛинияЯчейки);
		
		НомерКолонки = НомерКолонки + 2; // 1 - ед. изм, 2 - цена
		
	КонецЦикла;
	
	ПараметрыФормирования.ПоследняяКолонкаПрайсЛиста = НомерКолонки;
	
	Возврат ОбластьШапка;
	
КонецФункции

Функция СоздатьОбластьСтрока(ПараметрыФормирования, МакетПолотно)
	
	// R3C2 - 3 строка, 2 колонка
	ИмяСекции = ?(ПараметрыФормирования.ЕстьХарактеристики, "Строка", "Строка|Номенклатура");
	
	ОбластьСтрока	= МакетПолотно.ПолучитьОбласть(ИмяСекции);
	ЛинияЯчейки		= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Точечная, 1);
	НомерКолонки	= ПараметрыФормирования.ПоследняяКолонкаЗаголовка;
	
	Для каждого СтрокаТаблицыВидовЦен Из ПараметрыФормирования.ТаблицаВидовЦенКонтрагентов Цикл
		
		КолонкаЕдИзм = НомерКолонки + 1;
		КолонкаЦена = НомерКолонки + 2;
		
		ВидЦенКонтрагента = СтрокаТаблицыВидовЦен.ВидЦенКонтрагента;
		
		ВыделениеОбласти 			= ОбластьСтрока.Область(1, КолонкаЕдИзм, 1, КолонкаЕдИзм);
		ВыделениеОбласти.Заполнение	= ТипЗаполненияОбластиТабличногоДокумента.Параметр;
		ВыделениеОбласти.Параметр	= "ЕдиницаЦена_" + Строка(СтрокаТаблицыВидовЦен.НомерСтроки);
		ВыделениеОбласти.ПараметрРасшифровки = "СтруктураРасшифровки" + Строка(СтрокаТаблицыВидовЦен.НомерСтроки);
		
		ДобавитьЛинииОбласти(ВыделениеОбласти, ЛинияЯчейки);
		
		ВыделениеОбласти 			= ОбластьСтрока.Область(1, КолонкаЦена, 1, КолонкаЦена);
		ВыделениеОбласти.Заполнение	= ТипЗаполненияОбластиТабличногоДокумента.Параметр;
		ВыделениеОбласти.Параметр	= "Цена_" + Строка(СтрокаТаблицыВидовЦен.НомерСтроки);
		ВыделениеОбласти.ПараметрРасшифровки = "СтруктураРасшифровки" + Строка(СтрокаТаблицыВидовЦен.НомерСтроки);
		ВыделениеОбласти.Формат		=  "ЧЦ=15; ЧДЦ=2";
		
		ДобавитьЛинииОбласти(ВыделениеОбласти, ЛинияЯчейки);
		
		НомерКолонки = НомерКолонки + 2;
		
	КонецЦикла;
	
	Возврат ОбластьСтрока;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеТабличногоДокумента

Процедура ВывестиГруппуВТабличныйДокументПолотно(ПараметрыФормирования, ТабличныйДокумент, КоллекцияСтрок)
	
	ОбластьГруппа	= ПараметрыФормирования.ОбластьГруппа;
	ОбластьСтрока	= ПараметрыФормирования.ОбластьСтрока;
	
	ЗначенияПараметров		= Новый Структура;
	ПараметрыНоменклатуры	= Новый Структура;
	
	Для каждого Строка Из КоллекцияСтрок Цикл
		
		Если Строка.Номенклатура = Неопределено Тогда
			
			Если Строка.Строки.Найти(Истина, "ОтобразитьСтроку", Истина) = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ПараметрыФормирования.ИерархияСодержимого = Перечисления.ИерархияПрайсЛистов.ИерархияКатегорийНоменклатуры Тогда
				
				ПредставлениеГруппы = ?(ЗначениеЗаполнено(Строка["КатегорияНоменклатуры"]), Строка["КатегорияНоменклатуры"], Строка[ПараметрыФормирования.ИмяПоляПредставленияГруппы]);
				
			Иначе
				
				ПредставлениеГруппы = ?(ПараметрыФормирования.ИмяПоляПредставленияГруппы = Неопределено, "", Строка[ПараметрыФормирования.ИмяПоляПредставленияГруппы]);
				
			КонецЕсли;
			
			ЗначенияПараметров.Вставить("ПредставлениеГруппы", ПредставлениеГруппы);
			
			ОбластьГруппа.Параметры.Заполнить(ЗначенияПараметров);
			ТабличныйДокумент.Вывести(ОбластьГруппа);
			
			ТабличныйДокумент.НачатьГруппуСтрок();
			ВывестиГруппуВТабличныйДокументПолотно(ПараметрыФормирования, ТабличныйДокумент, Строка.Строки);
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
			
			Продолжить;
			
		КонецЕсли;
		
		Если Строка.ОтобразитьСтроку = Ложь Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЗначенияПараметров.Очистить();
		
		ПараметрыНоменклатуры.Очистить();
		ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", Строка.ПредставлениеНоменклатуры);
		
		ЗначенияПараметров.Вставить("ПредставлениеКодаНоменклатуры", ПечатьДокументовУНФ.ПредставлениеКодаНоменклатуры(Строка));
		ЗначенияПараметров.Вставить("ПредставлениеНоменклатуры", ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры));
		
		Если ПараметрыФормирования.ЕстьХарактеристики Тогда
			
			ЗначенияПараметров.Вставить("ПредставлениеХарактеристики", Строка.ПредставлениеХарактеристики);
			
		КонецЕсли;
		
		// :::Расшифровки характеристики
		Если ПараметрыФормирования.ЕстьХарактеристики
			И ЗначениеЗаполнено(Строка.Характеристика) Тогда
			
			РасшифровкаХарактеристика = Новый Структура;
			РасшифровкаХарактеристика.Вставить("Номенклатура", Строка.Номенклатура);
			РасшифровкаХарактеристика.Вставить("Характеристика", Строка.Характеристика);
			РасшифровкаХарактеристика.Вставить("ЭтоХарактеристика", Истина);
			
			ЗначенияПараметров.Вставить("РасшифровкаХарактеристика", РасшифровкаХарактеристика);
			
		КонецЕсли;
		
		// :::Расшифровки цены
		Для каждого СтрокаВидЦеныКонтрагента Из ПараметрыФормирования.ТаблицаВидовЦенКонтрагентов Цикл
			
			Ключ = "СтруктураРасшифровки" + СтрокаВидЦеныКонтрагента.НомерСтроки;
			
			СтруктураРасшифровки = Новый Структура;
			СтруктураРасшифровки.Вставить("Актуальность",		Истина);
			СтруктураРасшифровки.Вставить("ВидЦенКонтрагента",	СтрокаВидЦеныКонтрагента.ВидЦенКонтрагента);
			СтруктураРасшифровки.Вставить("Номенклатура",		Строка.Номенклатура);
			СтруктураРасшифровки.Вставить("Цена",				Строка["Цена_" + СтрокаВидЦеныКонтрагента.НомерСтроки]);
			СтруктураРасшифровки.Вставить("ЕдиницаИзмерения",	Строка["ЕдиницаЦена_" + СтрокаВидЦеныКонтрагента.НомерСтроки]);
			
			Если ПараметрыФормирования.ЕстьХарактеристики Тогда
				
				СтруктураРасшифровки.Вставить("Характеристика", Строка.Характеристика);
				
			КонецЕсли;
			
			ЗначенияПараметров.Вставить(Ключ, СтруктураРасшифровки);
			
		КонецЦикла;
		
		ОбластьСтрока.Параметры.Заполнить(Строка);
		ОбластьСтрока.Параметры.Заполнить(ЗначенияПараметров);
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсключитьНоменклатуруПоСравнениюЦенКонтрагентов(ПараметрыФормирования, СтрокаДерева)
	Перем ЛевоеЗначение, ПравоеЗначение;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыФормирования.ВидЦенКонтрагентаУсловие) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыФормирования.ВидЦенКонтрагента1) Тогда
		
		ЛевоеЗначение = СтрокаДерева[ПараметрыФормирования.ИменаКолонок[ПараметрыФормирования.ВидЦенКонтрагента1.УникальныйИдентификатор()]];
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЛевоеЗначение) Тогда
		
		ЛевоеЗначение = 0;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыФормирования.ВидЦенКонтрагента2) Тогда
		
		ПравоеЗначение = СтрокаДерева[ПараметрыФормирования.ИменаКолонок[ПараметрыФормирования.ВидЦенКонтрагента2.УникальныйИдентификатор()]];
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПравоеЗначение) Тогда
		
		ПравоеЗначение = 0;
		
	КонецЕсли;
	
	СтрокаДерева.ОтобразитьСтроку = ПроверитьУсловиеФильтра(ЛевоеЗначение, ПараметрыФормирования.ВидЦенКонтрагентаУсловие, ПравоеЗначение, 0);
	
КонецПроцедуры

Процедура ОтобратьСтрокиРекурсивно(ПараметрыФормирования, КоллекцияСтрок)
	
	Для каждого СтрокаДерева Из КоллекцияСтрок Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
			
			ОтобратьСтрокиРекурсивно(ПараметрыФормирования, СтрокаДерева.Строки);
			
		КонецЕсли;
		
		ИсключитьНоменклатуруПоСравнениюЦенКонтрагентов(ПараметрыФормирования, СтрокаДерева);
		
	КонецЦикла;
	
КонецПроцедуры

// Инициализация формирования табличного документа
Процедура ЗаполнитьТабличныйДокумент(ПараметрыФормирования, ТабличныйДокумент, СтруктураТаблицДанных)
	
	Макет				= УправлениеПечатью.МакетПечатнойФормы("Обработка.ПрайсЛистыКонтрагентов.ПФ_MXL_ПрайсЛистыКонтрагентов");
	
	ЗначенияПараметров	= Новый Структура;
	ОписаниеЛиста		= НСтр("ru ='Сформирован '") + Формат(ПараметрыФормирования.ДатаФормирования, "ДЛФ=DD");
	
	// ::: Заголовок документа
	ИмяСекции = ?(ПараметрыФормирования.ЕстьХарактеристики, "Заголовок", "Заголовок|Номенклатура");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть(ИмяСекции);
	ОбластьЗаголовок.Параметры.Заполнить(ПараметрыФормирования);
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	СтандартнаяШиринаКолонкаЗаголовка(ТабличныйДокумент);
	
	// ::: Заголовок листа
	Если ПараметрыФормирования.ВыводитьДатуФормирования Тогда
		
		ЗначенияПараметров.Вставить("ОписаниеЛиста", ОписаниеЛиста);
		
		ИмяСекции = ?(ПараметрыФормирования.ЕстьХарактеристики, "ЗаголовокЛиста", "ЗаголовокЛиста|Номенклатура");
		
		ОбластьЗаголовокЛиста = Макет.ПолучитьОбласть(ИмяСекции);
		ОбластьЗаголовокЛиста.Параметры.Заполнить(ЗначенияПараметров);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовокЛиста);
		
	КонецЕсли;
	
	// ::: Шапка таблицы
	ОбластьШапка = СоздатьОбластьШапка(ПараметрыФормирования, ТабличныйДокумент, Макет);
	
	КоличествоЦен = ПараметрыФормирования.ТаблицаВидовЦенКонтрагентов.Количество();
	Для ИндексЦены = 1 По КоличествоЦен Цикл
		
		ЗначенияПараметров.Вставить("ВидЦенКонтрагента_" + Строка(ИндексЦены - 1), ПараметрыФормирования.ТаблицаВидовЦенКонтрагентов[ИндексЦены - 1].ВидЦенКонтрагента);
		
	КонецЦикла;
	
	ОбластьШапка.Параметры.Заполнить(ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	// ::: Вывод данных
	ИмяСекции = ?(ПараметрыФормирования.ЕстьХарактеристики, "Группа", "Группа|Номенклатура");
	
	ОбластьГруппа = Макет.ПолучитьОбласть(ИмяСекции);
	ПараметрыФормирования.Вставить("ОбластьГруппа", ОбластьГруппа);
	
	ОбластьСтрока = СоздатьОбластьСтрока(ПараметрыФормирования, Макет);
	ПараметрыФормирования.Вставить("ОбластьСтрока", ОбластьСтрока);
	ВывестиГруппуВТабличныйДокументПолотно(ПараметрыФормирования, ТабличныйДокумент, СтруктураТаблицДанных.ДеревоНоменклатуры.Строки);
	
	// ::: Подвал
	Если НЕ ПустаяСтрока(ПараметрыФормирования.Описание) Тогда
		
		ИмяСекции = ?(ПараметрыФормирования.ЕстьХарактеристики, "Описание", "Описание|Номенклатура");
		
		ОбластьОписание = Макет.ПолучитьОбласть(ИмяСекции);
		
		ЗначенияПараметров.Очистить();
		ЗначенияПараметров.Вставить("Описание", ПараметрыФормирования.Описание);
		ОбластьОписание.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьОписание);
		
	КонецЕсли;
	
	ТабличныйДокумент.ФиксацияСлева = ПараметрыФормирования.ПоследняяКолонкаЗаголовка;
	
КонецПроцедуры

#КонецОбласти

#Область ПостроениеДанных

Процедура УстановитьЗначениеПараметраВНастройкахСКД(НастройкиКомпоновкиДанных, ИмяПараметра, ЗначениеПараметра)
	
	Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрКомпоновкиДанных = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	
	ЗначениеПараметраКД = НастройкиКомпоновкиДанных.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКомпоновкиДанных);
	Если ЗначениеПараметраКД = Неопределено Тогда
		
		ЗначениеПараметраКД = НастройкиКомпоновкиДанных.ПараметрыДанных.Элементы.Добавить();
		ЗначениеПараметраКД.Параметр = ПараметрКомпоновкиДанных;
		
	КонецЕсли;
	
	ЗначениеПараметраКД.Значение = ЗначениеПараметра;
	ЗначениеПараметраКД.Использование = Истина;
	
КонецПроцедуры

Процедура ЭлементыОтбораВНастройкиСКД(ЭлементыОтбораПриемник, ЭлементыОтбораИсточник)
	
	Для каждого ЭлементОтбораФормы Из ЭлементыОтбораИсточник Цикл
		
		Если НЕ ЭлементОтбораФормы.Использование Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЭлементОтбораКД = ЭлементыОтбораПриемник.Добавить(ТипЗнч(ЭлементОтбораФормы));
		ЗаполнитьЗначенияСвойств(ЭлементОтбораКД, ЭлементОтбораФормы);
		
		Если Тип(ЭлементОтбораФормы) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			ЭлементыОтбораВНастройкиСКД(ЭлементОтбораКД.Элементы, ЭлементОтбораФормы.Элементы);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЭлементыИИерархияНоменклатуры(ПараметрыФормирования, СтруктураТаблицДанных)
	
	Если ПараметрыФормирования.ИерархияСодержимого = Перечисления.ИерархияПрайсЛистов.ИерархияКатегорийНоменклатуры Тогда
		
		ИмяВариантаСКД = "ИерархияКатегорий";
		ПараметрыФормирования.ИмяПоляПредставленияГруппы = "ИерархияПоКатегориямНоменклатуры";
		
	ИначеЕсли ПараметрыФормирования.ИерархияСодержимого = Перечисления.ИерархияПрайсЛистов.ИерархияЦеновыхГрупп Тогда
		
		ИмяВариантаСКД = "ИерархияЦеновыхГрупп";
		ПараметрыФормирования.ИмяПоляПредставленияГруппы = "ИерархияПоЦеновымГруппам";
		
	Иначе // ПараметрыФормирования.ИерархияСодержимого =Перечисления.ИерархияПрайсЛистов.ИерархияНоменклатуры
		
		ИмяВариантаСКД = "ИерархияНоменклатуры";
		ПараметрыФормирования.ИмяПоляПредставленияГруппы = "ИерархияПоНоменклатуре";
		
	КонецЕсли;
	
	// 1. Получим СКД
	СхемаКомпоновкиДанных = ПолучитьМакет("СКД_НоменклатураИХарактеристики");
	
	// 2. создаем настройки для схемы 
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.ВариантыНастроек[ИмяВариантаСКД].Настройки;
	
	// 2.1 установим значения параметров
	УстановитьЗначениеПараметраВНастройкахСКД(НастройкиКомпоновкиДанных, "МассивВидовЦенКонтрагентов",	ПараметрыФормирования.ВидыЦенКонтрагентов);
	УстановитьЗначениеПараметраВНастройкахСКД(НастройкиКомпоновкиДанных, "ПериодЦен",					ПараметрыФормирования.ПериодЦенКонтрагента);
	
	// 2.2 установим значения отборов
	ЭлементыОтбораВНастройкиСКД(НастройкиКомпоновкиДанных.Отбор.Элементы, ПараметрыФормирования.НастройкиКомпоновкиДанных.Элементы);
	
	Если ПараметрыФормирования.НоменклатураБезЦен
		ИЛИ ПараметрыФормирования.ВидыЦенКонтрагентов.Количество() = 0 Тогда
		
		ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос;
		СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос = СтрЗаменить(ТекстЗапроса, "НЕ ЕстьЗаписиСЦенами.ЕстьЗаписи ЕСТЬ NULL", "ИСТИНА");
		
	КонецЕсли;
	
	Если ПараметрыФормирования.ФормироватьПоОтсутствию Тогда
		
		НастройкиКомпоновкиДанных.Отбор.Элементы.Получить(0).Использование = Истина;
		
	КонецЕсли;
	
	// 2.3 установим сортировку
	Если ПараметрыФормирования.ВариантыСортировки = 1 Тогда
		
		Если ПараметрыФормирования.ИерархияСодержимого = Перечисления.ИерархияПрайсЛистов.ИерархияКатегорийНоменклатуры Тогда
			
			НастройкиКомпоновкиДанных.Структура[0].Порядок.Элементы[0].ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			НастройкиКомпоновкиДанных.Структура[0].Порядок.Элементы[1].ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			
			НастройкиКомпоновкиДанных.Структура[0].Структура[0].Порядок.Элементы[0].ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			НастройкиКомпоновкиДанных.Структура[0].Структура[0].Порядок.Элементы[1].ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			
			НастройкиКомпоновкиДанных.Структура[0].Структура[0].Структура[0].Порядок.Элементы[0].ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			НастройкиКомпоновкиДанных.Структура[0].Структура[0].Структура[0].Порядок.Элементы[1].ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			НастройкиКомпоновкиДанных.Структура[0].Структура[0].Структура[0].Порядок.Элементы[2].ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			
		Иначе
			// Ветка для:
			// ПараметрыФормирования.ИерархияСодержимого = Перечисления.ИерархияПрайсЛистов.ИерархияЦеновыхГрупп
			// ПараметрыФормирования.ИерархияСодержимого = Перечисления.ИерархияПрайсЛистов.ИерархияНоменклатуры
			
			НастройкиКомпоновкиДанных.Структура[0].Порядок.Элементы[0].ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			НастройкиКомпоновкиДанных.Структура[0].Порядок.Элементы[1].ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			НастройкиКомпоновкиДанных.Структура[0].Порядок.Элементы[2].ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			
			НастройкиКомпоновкиДанных.Структура[0].Структура[0].Порядок.Элементы[0].ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			НастройкиКомпоновкиДанных.Структура[0].Структура[0].Порядок.Элементы[1].ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			НастройкиКомпоновкиДанных.Структура[0].Структура[0].Порядок.Элементы[2].ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПараметрыФормирования.ЕстьХарактеристики Тогда
		
		НастройкиКомпоновкиДанных.Структура[0].Структура[0].Порядок.Элементы[2].Использование = Ложь;
		
	КонецЕсли;
	
	// 3. готовим макет 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// 4. исполняем макет 
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет);
	ПроцессорКомпоновки.Сбросить();
	
	// 5. выводим результат 
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(СтруктураТаблицДанных.ДеревоНоменклатуры);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры

Процедура ТаблицаЦенКонтрагентов(ПараметрыФормирования, СтруктураТаблицДанных)
	
	Валюта = ПараметрыФормирования.Валюта;
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		
		Валюта = Константы.НациональнаяВалюта.Получить();
		
	КонецЕсли;
	
	ДатаРасчетаКурсаВалюты = ПараметрыФормирования.ДатаРасчетаКурсаВалюты;
	Если НЕ ЗначениеЗаполнено(ДатаРасчетаКурсаВалюты) Тогда
		
		ДатаРасчетаКурсаВалюты = ТекущаяДатаСеанса();
		
	КонецЕсли;
	
	ДанныеКурсаВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, ДатаРасчетаКурсаВалюты);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РСЦеныКонтрагентов.ВидЦенКонтрагента КАК ВидЦенКонтрагента
	|	,РСЦеныКонтрагентов.Номенклатура КАК Номенклатура
	|	,РСЦеныКонтрагентов.Характеристика КАК Характеристика
	|	,Выбор КОГДА РСЦеныКонтрагентов.ВидЦенКонтрагента.ВалютаЦены = &Валюта 
	|		ТОГДА РСЦеныКонтрагентов.Цена 
	|		ИНАЧЕ ЕСТЬNULL(РСЦеныКонтрагентов.Цена * КурсВалютыВидаЦен.Курс * &КратностьВалютыПЛ / (&КурсВалютыПЛ * КурсВалютыВидаЦен.Кратность), 0) КОНЕЦ КАК Цена
	|	,РСЦеныКонтрагентов.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(&ПериодЦенКонтрагента, Актуальность И ВидЦенКонтрагента В (&МассивВидовЦен)) КАК РСЦеныКонтрагентов
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаРасчетаКурсаВалюты, ) КАК КурсВалютыВидаЦен
	|		ПО РСЦеныКонтрагентов.ВидЦенКонтрагента.ВалютаЦены = КурсВалютыВидаЦен.Валюта
	|";
	
	Запрос.УстановитьПараметр("ПериодЦенКонтрагента",	ПараметрыФормирования.ПериодЦенКонтрагента);
	Запрос.УстановитьПараметр("МассивВидовЦен",			ПараметрыФормирования.ВидыЦенКонтрагентов);
	Запрос.УстановитьПараметр("ДатаРасчетаКурсаВалюты", ДатаРасчетаКурсаВалюты);
	Запрос.УстановитьПараметр("Валюта", 				Валюта);
	Запрос.УстановитьПараметр("КурсВалютыПЛ",			ДанныеКурсаВалюты.Курс);
	Запрос.УстановитьПараметр("КратностьВалютыПЛ",		ДанныеКурсаВалюты.Кратность);
	
	СтруктураТаблицДанных.ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ТранспонированиеТаблиц(ПараметрыФормирования, СтруктураТаблицДанных)
	
	РазмерТаблицы = ПараметрыФормирования.ТаблицаВидовЦенКонтрагентов.Количество();
	Для ИндексСтроки = 1 По РазмерТаблицы Цикл
		
		Строка = ПараметрыФормирования.ТаблицаВидовЦенКонтрагентов[ИндексСтроки - 1];
		
		НоваяКолонка = СтруктураТаблицДанных.ДеревоНоменклатуры.Колонки.Добавить("Цена_" + Строка.НомерСтроки);
		НоваяКолонка.Заголовок = Строка.ВидЦенКонтрагента.Наименование;
		
		НоваяКолонка = СтруктураТаблицДанных.ДеревоНоменклатуры.Колонки.Добавить("ЕдиницаЦена_" + Строка.НомерСтроки);
		ПараметрыФормирования.ИменаКолонок.Вставить(Строка.ВидЦенКонтрагента.УникальныйИдентификатор(), "Цена_" + Строка.НомерСтроки);
		
	КонецЦикла;
	
	ОтборПоТаблице = Новый Структура("Номенклатура");
	Если ПараметрыФормирования.ЕстьХарактеристики Тогда
		
		ОтборПоТаблице.Вставить("Характеристика", Неопределено);
		
	КонецЕсли;
	
	Для каждого Строка Из СтруктураТаблицДанных.ТаблицаЦен Цикл
		
		ОтборПоТаблице.Номенклатура = Строка.Номенклатура;
		Если ПараметрыФормирования.ЕстьХарактеристики Тогда
			
			ОтборПоТаблице.Характеристика = Строка.Характеристика;
			
		КонецЕсли;
		
		РезультатПоиска = СтруктураТаблицДанных.ДеревоНоменклатуры.Строки.НайтиСтроки(ОтборПоТаблице, Истина);
		Если РезультатПоиска.Количество() < 1 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ИмяКолонкиЦена = ПараметрыФормирования.ИменаКолонок[Строка.ВидЦенКонтрагента.УникальныйИдентификатор()];
		
		РезультатПоиска[0][ИмяКолонкиЦена] = Строка.Цена;
		РезультатПоиска[0]["Единица" + ИмяКолонкиЦена] = Строка.ЕдиницаИзмерения;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтборСтрокДереваНоменклатуры(ПараметрыФормирования, СтруктураТаблицДанных)
	
	Если ПараметрыФормирования.ВидЦенКонтрагентаСравнить <> Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОтобратьСтрокиРекурсивно(ПараметрыФормирования, СтруктураТаблицДанных.ДеревоНоменклатуры.Строки);
	
КонецПроцедуры

Процедура ИсключитьПустыеВидыЦен(ПараметрыФормирования, СтруктураТаблицДанных)
	
	Если ПараметрыФормирования.ИсключитьПустыеВидыЦен = Ложь
		ИЛИ ПараметрыФормирования.ТаблицаВидовЦенКонтрагентов.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекстЗапросаОсновной =
	"ВЫБРАТЬ
	|	ИСТИНА КАК ПустоеПоле
	|	,ТаблицаНоменклатуры.ОтобразитьСтроку КАК ОтобразитьСтроку
	|ПОМЕСТИТЬ ТаблицаСКолонкамиЦен
	|ИЗ &ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|ГДЕ ТаблицаНоменклатуры.ОтобразитьСтроку = ИСТИНА";
	
	ТекстЗапросаОтборЦен =
	"ВЫБРАТЬ ПЕРВЫЕ 1 ТаблицаСКолонкамиЦен.%1 
	|ИЗ ТаблицаСКолонкамиЦен КАК ТаблицаСКолонкамиЦен 
	|ГДЕ ТаблицаСКолонкамиЦен.%1 <> 0";
	
	СтрокаЗамены =
	"ИСТИНА КАК ПустоеПоле
	|	,ТаблицаНоменклатуры.%1 КАК %1";
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНоменклатуры.Колонки.Добавить("ОтобразитьСтроку", Новый ОписаниеТипов("Булево"));
	
	Для каждого ОписаниеКолонки Из ПараметрыФормирования.ТаблицаВидовЦенКонтрагентов Цикл
		
		ИмяКолонки = "Цена_" + ОписаниеКолонки.НомерСтроки;
		
		ТаблицаНоменклатуры.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Число"));
		
		ТекстЗапросаОсновной = СтрЗаменить(ТекстЗапросаОсновной, "ИСТИНА КАК ПустоеПоле", СтрокаЗамены);
		ТекстЗапросаОсновной = ТекстЗапросаОсновной + ОбщегоНазначения.РазделительПакетаЗапросов() + ТекстЗапросаОтборЦен;
		ТекстЗапросаОсновной = СтрШаблон(ТекстЗапросаОсновной, ИмяКолонки);
		
	КонецЦикла;
	
	ЦенообразованиеСервер.ДеревоЗначенийВТаблицуЗначений(СтруктураТаблицДанных.ДеревоНоменклатуры, ТаблицаНоменклатуры);
	
	Запрос = Новый Запрос(ТекстЗапросаОсновной);
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	МассивУдаляемых = Новый Массив;
	Для каждого СтрокаВидаЦены Из ПараметрыФормирования.ТаблицаВидовЦенКонтрагентов Цикл
		
		Если РезультатЗапроса[СтрокаВидаЦены.НомерСтроки].Пустой() Тогда
			
			МассивУдаляемых.Добавить(СтрокаВидаЦены);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаИзМассива Из МассивУдаляемых Цикл
		
		ИндексУдаляемогоЭлемента = ПараметрыФормирования.ВидыЦенКонтрагентов.Найти(СтрокаИзМассива.ВидЦенКонтрагента);
		Если ИндексУдаляемогоЭлемента <> Неопределено Тогда
			
			ПараметрыФормирования.ВидыЦенКонтрагентов.Удалить(ИндексУдаляемогоЭлемента);
			
		КонецЕсли;
		
		ПараметрыФормирования.ТаблицаВидовЦенКонтрагентов.Удалить(СтрокаИзМассива);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрименитьОформлениеЯчеек(ПараметрыФормирования, ТабличныйДокумент)
	
	Если НЕ ПараметрыФормирования.МаксимальнаяЦена
		И НЕ ПараметрыФормирования.МинимальнаяЦена
		И НЕ ПараметрыФормирования.УсловнаяЦена
		Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОформлениеПрайсЛистаКонтрагентов(ПараметрыФормирования, ТабличныйДокумент);
	
КонецПроцедуры

Процедура ПостроитьПрайсЛист(ПараметрыФормирования, ТабличныйДокумент)
	
	СтруктураТаблицДанных = Новый Структура;
	СтруктураТаблицДанных.Вставить("ДеревоНоменклатуры",	Новый ДеревоЗначений);
	СтруктураТаблицДанных.Вставить("ТаблицаЦен",			Новый ТаблицаЗначений);
	
	ЭлементыИИерархияНоменклатуры(ПараметрыФормирования, СтруктураТаблицДанных);
	ТаблицаЦенКонтрагентов(ПараметрыФормирования, СтруктураТаблицДанных);
	ТранспонированиеТаблиц(ПараметрыФормирования, СтруктураТаблицДанных);
	ОтборСтрокДереваНоменклатуры(ПараметрыФормирования, СтруктураТаблицДанных);
	ИсключитьПустыеВидыЦен(ПараметрыФормирования, СтруктураТаблицДанных);
	
	ЗаполнитьТабличныйДокумент(ПараметрыФормирования, ТабличныйДокумент, СтруктураТаблицДанных);
	
	ПрименитьОформлениеЯчеек(ПараметрыФормирования, ТабличныйДокумент);
	
КонецПроцедуры

Процедура АдаптироватьПараметрыФормирования(ПараметрыФормирования)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// ::: ВИДЫ ЦЕН КОНТРАГЕНТОВ
	ПараметрыФормирования.Вставить("ИсключитьПустыеВидыЦен", ПараметрыФормирования.ИсключитьПустыеВидыЦен);
	ПараметрыФормирования.Вставить("ТаблицаВидовЦенКонтрагентов", Справочники.ПрайсЛистыКонтрагентов.СоздатьЭлемент().ОтборВидовЦенКонтрагентов.Выгрузить());
	
	НомерСтроки = 0;
	Для каждого ЭлементМассива Из ПараметрыФормирования.ВидыЦенКонтрагентов Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		НоваяСтрока = ПараметрыФормирования.ТаблицаВидовЦенКонтрагентов.Добавить();
		НоваяСтрока.ВидЦенКонтрагента = ЭлементМассива;
		НоваяСтрока.НомерСтроки = НомерСтроки;
		
	КонецЦикла;
	
	// ::: ОБЩИЕ
	ПараметрыФормирования.Вставить("ЕстьХарактеристики", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики"));
	ПараметрыФормирования.Вставить("НастройкиКомпоновкиДанных",	ПараметрыФормирования.ОтборНоменклатуры);
	
	// ::: СЛУЖЕБНЫЕ
	ПараметрыФормирования.Вставить("ИменаКолонок",					Новый Соответствие);
	ПараметрыФормирования.Вставить("ПоследняяКолонкаЗаголовка", 	?(ПараметрыФормирования.ЕстьХарактеристики, 4, 3)); // 1: отступ, 2: код, 3: ном-ра, 4: характеристика;
	ПараметрыФормирования.Вставить("ПоследняяКолонкаПрайсЛиста",	1);
	ПараметрыФормирования.Вставить("ИмяПоляПредставленияГруппы",	Неопределено);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Стартовая процедура отложенного формирования прайс-листов поставщиков
//
Процедура СформироватьПрайсЛистыКонтрагентов(ПараметрыФормирования, ФоновоеЗаданиеАдресХранилища = "") Экспорт
	
	Если НЕ ПараметрыФормирования.Свойство("ОтборНоменклатуры") Тогда
		
		ВызватьИсключение НСтр("ru ='Ошибка в начальных параметрах прайс-листа организации'");
		
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	АдаптироватьПараметрыФормирования(ПараметрыФормирования);
	ПостроитьПрайсЛист(ПараметрыФормирования, ТабличныйДокумент);
	
	// Для работы с вкл. параметром РежимОтладки
	ПараметрыФормирования.ТаблицаВидовЦенКонтрагентов = Неопределено;
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("ПоследняяКолонкаЗаголовка",	ПараметрыФормирования.ПоследняяКолонкаЗаголовка);
	РезультатВыполнения.Вставить("ПоследняяКолонкаПрайсЛиста",	ПараметрыФормирования.ПоследняяКолонкаПрайсЛиста);
	РезультатВыполнения.Вставить("ИменаКолонок",				ПараметрыФормирования.ИменаКолонок);
	РезультатВыполнения.Вставить("РазмерКартинокБайт",			0); // картинки в ПЛ контрагентов отсутствуют, оставлена для совместимости
	РезультатВыполнения.Вставить("ТабличныйДокумент",			ТабличныйДокумент);
	
	ПоместитьВоВременноеХранилище(РезультатВыполнения, ФоновоеЗаданиеАдресХранилища);
	
КонецПроцедуры // СформироватьПрайсЛистыПоставщиков()

#КонецОбласти

#КонецОбласти

#КонецЕсли