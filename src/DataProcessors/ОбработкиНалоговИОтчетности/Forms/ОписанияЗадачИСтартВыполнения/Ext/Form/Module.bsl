#Область ОписаниеПеременных

&НаКлиенте
 // Переменная используется извне формы механизмом длительных операций алкоотчетности.
Перем ПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
 // Переменная используется механизмом длительных операций алкоотчетности.
Перем СтруктураВспомДанныхДлитОперации, ФормаДлительнойОперации;

#КонецОбласти



///////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Организация = Параметры.Организация;
	Иначе
		Организация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация");
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Организация = Справочники.Организации.ПредопределеннаяОрганизация();
		КонецЕсли;
	КонецЕсли;
	
	
	
	Если ЗначениеЗаполнено(Параметры.СобытиеКалендаря) Тогда
		СобытиеКалендаря = Параметры.СобытиеКалендаря;
	КонецЕсли;
	
	ОбработатьПараметрСобытияКалендаря();
	
	Если ЗначениеЗаполнено(СобытиеКалендаря) И Параметры.ПоказыватьДанныеПоследнейПроверки Тогда
		ЗаполнитьДанныеПоследнейПроверки();
	КонецЕсли;
	ФормироватьПриОткрытии = Параметры.ФормироватьПриОткрытии;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ФормироватьПриОткрытии Тогда
		ПовторноеПредупреждение = Истина;
		ВыполнитьРасчетНажатие();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаТекущаяОрганизация" Тогда
		Если Окно.Основное Тогда
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("e1cib/navigationpoint/НалогиИОтчетность");
		Иначе
			Закрыть();
		КонецЕсли;
	ИначеЕсли НРег(ИмяСобытия) = НРег("ПослеВыполненияЗадания_АвтоЗаполнения") Тогда
		ФормаРегламентированногоОтчета = СтруктураВспомДанныхДлитОперации.ФормаРегламентированногоОтчета;
		Если  Источник = ФормаРегламентированногоОтчета.УникальностьФормы Тогда
			Если ФормаДлительнойОперации <> Неопределено Тогда
				ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			КонецЕсли;
			ФормаРегламентированногоОтчета.СохранитьНаКлиенте( Истина);
			ПараметрыОбработчикаОжидания = Неопределено;
			СтруктураВспомДанныхДлитОперации = Неопределено;
			
			ПараметрыФормы = Новый Структура(
				"Организация,СобытиеКалендаря", 
				Организация,
				СобытиеКалендаря);
				
			Оповестить("ИзменениеСостоянияСобытияКалендаря", СобытиеКалендаря, ЭтаФорма);
			ОткрытьФорму(ИмяФормыРезультата, ПараметрыФормы);
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ВыполнитьЗадачу(Команда)
	
	ВыполнитьРасчетНажатие();
	
КонецПроцедуры




// -----------------------------------------------------------------------------
// Ошибки 

&НаКлиенте
Процедура ОписаниеОшибки1Нажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПроверкаДанныхКлиент.ПровестиРасшифровку(МассивРасшифровок[0], Организация, СобытиеКалендаря);
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОшибки2Нажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПроверкаДанныхКлиент.ПровестиРасшифровку(МассивРасшифровок[1], Организация, СобытиеКалендаря);
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОшибки3Нажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПроверкаДанныхКлиент.ПровестиРасшифровку(МассивРасшифровок[2], Организация, СобытиеКалендаря);
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОшибки4Нажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПроверкаДанныхКлиент.ПровестиРасшифровку(МассивРасшифровок[3], Организация, СобытиеКалендаря);
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьПроверку(Команда)
	ПовторноеПредупреждение = Ложь;
	ВыполнитьКонтроль();
	ПовторноеПредупреждение = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВАрхив(Команда)
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, "Перенести");
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, "Отмена");
	ТекстВопроса = Нстр("ru='Задача будет перенесена в архив и удалена из списка актуальных событий. Перенести в архив?'");
	оп = Новый ОписаниеОповещения("ОповещениеПереносВАрхив", ЭтотОбъект);
	ПоказатьВопрос(оп, ТекстВопроса, СписокКнопок);
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПереносВАрхив(Ответ, Параметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ПеренестиЗадачуВАрхивСервер();
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("e1cib/navigationpoint/desktop");
		Оповестить("ИзменениеСостоянияСобытияКалендаря", СобытиеКалендаря, ЭтаФорма);
		
		Если Окно <> Неопределено И Не Окно.Основное Тогда
			Закрыть();
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеДлительнойОперацииНаКлиенте()
	
	Если СтруктураВспомДанныхДлитОперации = Неопределено Тогда
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеДлительнойОперацииНаКлиенте");
		Возврат;
	КонецЕсли;
	
	ФормаРегламентированногоОтчета = СтруктураВспомДанныхДлитОперации.ФормаРегламентированногоОтчета;
	ОперацияЗавершена = Ложь;
	
	Если СтрНайти(СтруктураВспомДанныхДлитОперации.ИмяФормыРезультата, "РасчетПоСтраховымВзносам") > 0 Тогда
		Попытка
			РезультатЗапуска = ФормаРегламентированногоОтчета.СтруктураРеквизитовФормы.РезультатЗапускаАвтозаполненияПриСоздании;
			Если РезультатЗапуска.Статус = "Выполнено" Тогда
				РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ФормаРегламентированногоОтчета);
				ОперацияЗавершена = Истина;
			ИначеЕсли РезультатЗапуска.Статус = "Выполняется" Тогда
				ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
				ПараметрыОжидания = ПараметрыОжидания();
				ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапуска, ОповещениеОЗавершении, ПараметрыОжидания);
			КонецЕсли;

			Если ОперацияЗавершена И ФормаДлительнойОперации <> Неопределено Тогда
				ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			КонецЕсли;
		Исключение
			Если ФормаДлительнойОперации <> Неопределено Тогда
				ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			КонецЕсли;
			ВызватьИсключение;
		КонецПопытки;
	ИначеЕсли СтрНайти(СтруктураВспомДанныхДлитОперации.ИмяФормыРезультата, "Декларация12") > 0
		ИЛИ СтрНайти(СтруктураВспомДанныхДлитОперации.ИмяФормыРезультата, "Декларация8") > 0 Тогда
		СтруктураВспомДанныхДлитОперации.Вставить("ИдентификаторЗадания", СтруктураВспомДанныхДлитОперации.ФормаРегламентированногоОтчета.СтруктураРеквизитовФормы.ИдентификаторЗадания);
		Если СтруктураВспомДанныхДлитОперации.ИдентификаторЗадания = Неопределено Тогда
			ОперацияЗавершена = Истина;
		Иначе
			Попытка
				ОперацияЗавершена = ДлительнаяОперацияЗавершена(СтруктураВспомДанныхДлитОперации.ИдентификаторЗадания);
				Если ОперацияЗавершена И ФормаДлительнойОперации <> Неопределено Тогда
					ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				КонецЕсли;
			Исключение
				Если ФормаДлительнойОперации <> Неопределено Тогда
					ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				КонецЕсли;
				ВызватьИсключение;
			КонецПопытки;
			Если ОперацияЗавершена Тогда
				СтруктураВспомДанныхДлитОперации.ФормаРегламентированногоОтчета.ЗагрузитьПодготовленныеДанныеАвтоЗаполненияНаСервере();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СтрНайти(СтруктураВспомДанныхДлитОперации.ИмяФормыРезультата, "6НДФЛ") > 0 Тогда
	Попытка
		РезультатЗапуска = ФормаРегламентированногоОтчета.СтруктураРеквизитовФормы.РезультатЗапускаАвтозаполненияПриСоздании;
		Если РезультатЗапуска.Статус = "Выполнено" Тогда
			РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ФормаРегламентированногоОтчета);
			ОперацияЗавершена = Истина;
		ИначеЕсли РезультатЗапуска.Статус = "Выполняется" Тогда
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
			ПараметрыОжидания = ПараметрыОжидания();
			ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапуска, ОповещениеОЗавершении, ПараметрыОжидания);
		КонецЕсли;
		
		Если ОперацияЗавершена И ФормаДлительнойОперации <> Неопределено Тогда
			ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		КонецЕсли;
	Исключение
		Если ФормаДлительнойОперации <> Неопределено Тогда
			ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;	
	КонецЕсли;
	
	Если ОперацияЗавершена Тогда
		ФормаРегламентированногоОтчета = СтруктураВспомДанныхДлитОперации.ФормаРегламентированногоОтчета;
		ФормаРегламентированногоОтчета.СохранитьНаКлиенте( Истина);
		ПараметрыОбработчикаОжидания = Неопределено;
		СтруктураВспомДанныхДлитОперации = Неопределено;
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеДлительнойОперацииНаКлиенте");
		
		ПараметрыФормы = Новый Структура(
			"Организация,СобытиеКалендаря", 
			Организация,
			СобытиеКалендаря);
			
		Оповестить("ИзменениеСостоянияСобытияКалендаря", СобытиеКалендаря, ЭтаФорма);
		ОткрытьФорму(ИмяФормыРезультата, ПараметрыФормы);
		Закрыть();
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
	Если СтрНайти(СтруктураВспомДанныхДлитОперации.ИмяФормыРезультата, "РасчетПоСтраховымВзносам") = 0 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеДлительнойОперацииНаКлиенте", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеАвтозаполненияВФоне(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если ФормаДлительнойОперации <> Неопределено Тогда
			ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		КонецЕсли;
		ФормаРегламентированногоОтчета = СтруктураВспомДанныхДлитОперации.ФормаРегламентированногоОтчета;
	
		Если Результат.Статус = "Выполнено" Тогда
			ФормаРегламентированногоОтчета.ОбработатьЗавершениеАвтозаполненияВФоне(Результат, ДополнительныеПараметры);
			ФормаРегламентированногоОтчета.СохранитьНаКлиенте( Истина);
			ПараметрыОбработчикаОжидания = Неопределено;
			СтруктураВспомДанныхДлитОперации = Неопределено;
			
			ПараметрыФормы = Новый Структура(
				"Организация,СобытиеКалендаря", 
				Организация,
				СобытиеКалендаря);
				
			Оповестить("ИзменениеСостоянияСобытияКалендаря", СобытиеКалендаря, ЭтаФорма);
			ОткрытьФорму(ИмяФормыРезультата, ПараметрыФормы);
			Закрыть();
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПараметрыОжидания()
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Отчет формируется.'");
	
	Возврат ПараметрыОжидания;
	
КонецФункции

Процедура ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации)
	
	Если ТипЗнч(ФормаДлительнойОперации) = Тип("УправляемаяФорма") Тогда
		Если ФормаДлительнойОперации.Открыта() Тогда
			ФормаДлительнойОперации.Закрыть();
		КонецЕсли;
	КонецЕсли;
	ФормаДлительнойОперации = Неопределено;
	
КонецПроцедуры

&НаСервере
Функция ДлительнаяОперацияЗавершена(ИдентификаторЗадания)
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура формирует кнопку перехода к следующему этапу расчета 
// налога или формирования отчетности
&НаСервере
Процедура ОбработатьПараметрСобытияКалендаря()
	
	
	СобытиеКалендаряДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СобытиеКалендаря, "Задача,ДатаДокументаОбработкиСобытия,ДатаНачалаДокументов,ДатаОкончанияДокументов");
	ПериодДокументовНачало = СобытиеКалендаряДанные.ДатаНачалаДокументов;
	ПериодДокументовОкончание = КонецДня(СобытиеКалендаряДанные.ДатаОкончанияДокументов);
	
	Элементы.ГруппаДекорацииОписанияДекларацииУСН.Видимость = Ложь;
	Элементы.ГруппаДекорацииОписанияЕдиныйНалог.Видимость = Ложь;
	Элементы.ГруппаДекорацииОписанияКУДиР.Видимость = Ложь;
	Элементы.ГруппаДекорацииОписанияАвансовыйПлатежПоУСН.Видимость = Ложь;
	Элементы.ГруппаДекорацииОписанияФССиПФР.Видимость = Ложь;
	Элементы.ГруппаДекорацииОписанияДекларацииЕНВД.Видимость = Ложь;
	Элементы.ГруппаДекорацииОписанияЕНВДНалог.Видимость = Ложь;
	Элементы.ГруппаДекорацииОписанияСреднесписочнойЧисленности.Видимость = Ложь;
	Элементы.ГруппаДекорацииОписанияСправки2НДФЛ.Видимость = Ложь;
	Элементы.ГруппаДекорацииОписанияОтчетностьВПФР.Видимость = Ложь;
	Элементы.ГруппаДекорацииОписанияНалогиСотрудников.Видимость = Ложь;
	Элементы.ГруппаДекорацииОписания4ФСС.Видимость = Ложь;
	Элементы.ГруппаДекорацииОписанияВзносыСвыше300тр.Видимость = Ложь;
	Элементы.ГруппаДекорацииОписанияПатент.Видимость = Ложь;
	Элементы.ГруппаДекорацииОписанияТорговыйСбор.Видимость = Ложь;
	Элементы.ГруппаДекорацииОписанияФорма1Предприниматель.Видимость = Ложь;
	Элементы.ГруппаДекорацииОписанияФорма6НДФЛ.Видимость = Ложь;
	Элементы.ГруппаДекорацииОписанияСЗВМ.Видимость = Ложь;
	Элементы.ГруппаДекорацииОписанияСЗВСтаж.Видимость = Ложь;
	Элементы.ГруппаДекорацииОписанияДекларации12.Видимость = Ложь;
	Элементы.ГруппаДекорацииОписанияРасчетСтраховыхВзносов.Видимость = Ложь;
	
	// Единый налог
	Если СобытиеКалендаряДанные.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ЕдиныйНалог Тогда
		
		Заголовок = НСтр("ru='Единый налог за '") 
					+ ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина");
		
		
		Элементы.ВыполнитьЗадачу.Заголовок = НСтр("ru='Рассчитать'");
		
		Элементы.ГруппаДекорацииОписанияЕдиныйНалог.Видимость = Истина;
		
		Элементы.ДекорацияНадписьПериодовДокументовЕН.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Элементы.ДекорацияНадписьПериодовДокументовЕН.Заголовок,
				ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина"));
	// Авансовый платеж
	ИначеЕсли СобытиеКалендаряДанные.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.АвансовыйПлатежПоУСН Тогда
		
		Заголовок = НСтр("ru='Авансовый платеж по УСН за '") 
					+ ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина");
		
		Элементы.ГруппаДекорацииОписанияАвансовыйПлатежПоУСН.Видимость = Истина;
		
		Элементы.ВыполнитьЗадачу.Заголовок = НСтр("ru='Рассчитать'");
		
		Элементы.ДекорацияНадписьПериодовДокументовАвПлатежа.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Элементы.ДекорацияНадписьПериодовДокументовЕН.Заголовок,
				ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина"));
		
	// Декларация по УСН
	ИначеЕсли СобытиеКалендаряДанные.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ДекларацияПоУСН Тогда
		
		Заголовок = НСтр("ru='Декларация по УСН за '") 
					+ ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина");
		
		Элементы.ДекорацияНадписьПериодовДокументовДекларацияУСН.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Элементы.ДекорацияНадписьПериодовДокументовДекларацияУСН.Заголовок,
				ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина"));
		
		Элементы.ГруппаДекорацииОписанияДекларацииУСН.Видимость = Истина;
		
		Элементы.ВыполнитьЗадачу.Заголовок = НСтр("ru='Сформировать'");
		
	// Взносы в ПФР и ФСС ИП
	//
	ИначеЕсли СобытиеКалендаряДанные.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыИП Тогда
		
		Заголовок = НСтр("ru='Страховые взносы индивидуального предпринимателя за '") 
					+ ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина");
		
		Элементы.ГруппаДекорацииОписанияФССиПФР.Видимость = Истина;
		
		Элементы.ВыполнитьЗадачу.Заголовок = НСтр("ru='Рассчитать'");
		
		Если Год(ПериодДокументовОкончание) = 2013 Тогда
			Элементы.Декорация14.Видимость = Ложь;
			Элементы.Декорация15.Видимость = Истина;
		Иначе
			Элементы.Декорация15.Видимость = Ложь;
			Элементы.Декорация14.Видимость = Истина;
		КонецЕсли;
		
		Если Год(ПериодДокументовОкончание) > 2017 Тогда
			ТекущиеВзносы = РегистрыСведений.ФиксированныеВзносыИП.ФиксированныеВзносыИПНаДату(НачалоГода(ПериодДокументовОкончание));
			Элементы.Декорация14.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сумма взносов - фиксированная.В ПФР: %1 руб.,в ФФОМС: %2 руб.'"), ТекущиеВзносы.РазмерПФР, ТекущиеВзносы.РазмерФОМС);
		КонецЕсли;
		
	// Декларация по ЕНВД
	ИначеЕсли СобытиеКалендаряДанные.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ДекларацияПоЕНВД Тогда
		
		Заголовок = НСтр("ru='Декларация по ЕНВД '") 
					+ ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина");
		
		Элементы.ГруппаДекорацииОписанияДекларацииЕНВД.Видимость = Истина;
		
		Элементы.ВыполнитьЗадачу.Заголовок = НСтр("ru='Сформировать'");
		
		Элементы.ДекорацияТекстОписание20.Заголовок = 
			Новый ФорматированнаяСтрока(Новый ФорматированнаяСтрока(НСтр("ru='Заполните'"),,,,"ЕНВД"),
			НСтр("ru=' сведения по ЕНВД за '"),
			ПредставлениеПериода(ПериодДокументовНачало,ПериодДокументовОкончание,"ФП=Истина"));
			
	// ЕНВД налог
	ИначеЕсли СобытиеКалендаряДанные.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ЕдиныйНалогЕНВД Тогда
		
		Заголовок = НСтр("ru='Уплата ЕНВД за '") 
					+ ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина");
		
		Элементы.ГруппаДекорацииОписанияЕНВДНалог.Видимость = Истина;
		
		Элементы.ВыполнитьЗадачу.Заголовок = НСтр("ru='Рассчитать'");
		
		Элементы.ДекорацияТекстОписаниеЕНВДНалог.Заголовок = 
			Новый ФорматированнаяСтрока(Новый ФорматированнаяСтрока(НСтр("ru='Заполните'"),,,,"ЕНВД"),
			НСтр("ru=' сведения по ЕНВД за '"),
			ПредставлениеПериода(ПериодДокументовНачало,ПериодДокументовОкончание,"ФП=Истина"));
		
	// Среднесписочная численность
	ИначеЕсли СобытиеКалендаряДанные.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СреднесписочнаяЧисленность Тогда
		
		Заголовок = НСтр("ru='Сведения о среднесписочной численности за '") 
					+ ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина");
		
		Элементы.ДекорацияНадписьПериодовДокументовСреднесписочнаяЧисленность.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Элементы.ДекорацияНадписьПериодовДокументовСреднесписочнаяЧисленность.Заголовок,
				ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина"));
		
		Элементы.ГруппаДекорацииОписанияСреднесписочнойЧисленности.Видимость = Истина;
		
		Элементы.ВыполнитьЗадачу.Заголовок = НСтр("ru='Сформировать'");
		
	// Справки 2-НДФЛ
	ИначеЕсли СобытиеКалендаряДанные.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Справки2НДФЛ Тогда
		
		Заголовок = НСтр("ru='Справки 2-НДФЛ по сотрудникам за '") 
					+ ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина");
		
		Элементы.ДекорацияНадписьПериодовДокументов2НДФЛ.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Элементы.ДекорацияНадписьПериодовДокументов2НДФЛ.Заголовок,
				ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина"));
		
		Элементы.ГруппаДекорацииОписанияСправки2НДФЛ.Видимость = Истина;
		
		Элементы.ВыполнитьЗадачу.Заголовок = НСтр("ru='Сформировать'");
		
	// Отчетность в ПФР
	ИначеЕсли СобытиеКалендаряДанные.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ОтчетностьВПФР Тогда
		
		Заголовок = НСтр("ru='Отчетность в ПФР за '") 
					+ ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина");
		
		Элементы.ДекорацияНадписьПериодовДокументовРСВ.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Элементы.ДекорацияНадписьПериодовДокументовРСВ.Заголовок,
				ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина"));
		
		Элементы.ГруппаДекорацииОписанияОтчетностьВПФР.Видимость = Истина;
		
		Элементы.ВыполнитьЗадачу.Заголовок = НСтр("ru='Сформировать'");
	// Налоги сотрудников
	ИначеЕсли СобытиеКалендаряДанные.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.НалогиСотрудников Тогда
		
		Заголовок = НСтр("ru='Налоги сотрудников за '") 
					+ ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина");
		
		Элементы.ДекорацияНадписьПериодовДокументовНалоговСотрудников.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Элементы.ДекорацияНадписьПериодовДокументовРСВ.Заголовок,
				ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина"));
		
		Элементы.ГруппаДекорацииОписанияНалогиСотрудников.Видимость = Истина;
		
		Элементы.ВыполнитьЗадачу.Заголовок = НСтр("ru='Рассчитать'");
	// Форма 4-ФСС
	ИначеЕсли СобытиеКалендаряДанные.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Форма4ФСС Тогда
		
		Заголовок = НСтр("ru='Отчет 4-ФСС '") 
					+ ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина");
		
		Элементы.ДекорацияНадписьПериодовДокументов4ФСС.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Элементы.ДекорацияНадписьПериодовДокументов4ФСС.Заголовок,
				ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина"));
		
		Элементы.ГруппаДекорацииОписания4ФСС.Видимость = Истина;
		
		Элементы.ВыполнитьЗадачу.Заголовок = НСтр("ru='Сформировать'");
	ИначеЕсли СобытиеКалендаряДанные.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыПриДоходахСвыше300тр Тогда
		
		Заголовок = НСтр("ru='Страховые взносы индивидуального предпринимателя в ПФР при доходах свыше 300 000 рублей'") 
					+ ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина");
		
		Элементы.ГруппаДекорацииОписанияВзносыСвыше300тр.Видимость = Истина;
		
		Элементы.ВыполнитьЗадачу.Заголовок = НСтр("ru='Рассчитать'");
		
	// Патент
	ИначеЕсли СобытиеКалендаряДанные.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.НалогПатент Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Патенты.НомерПатента,
		|	Патенты.ДатаПервогоПлатежа,
		|	Патенты.ДатаВторогоПлатежа
		|ИЗ
		|	Справочник.Патенты КАК Патенты
		|ГДЕ
		|	Патенты.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка",СобытиеКалендаря.Основание);
		Выборка = Запрос.Выполнить().Выбрать();
		
		НомерПатента = "";
		ДатаПервогоПлатежа = '00010101';
		ДатаВторогоПлатежа = '00010101';
		Если Выборка.Следующий() Тогда 
			НомерПатента = Выборка.НомерПатента;
			ДатаПервогоПлатежа = Выборка.ДатаПервогоПлатежа;
			ДатаВторогоПлатежа = Выборка.ДатаВторогоПлатежа;
		КонецЕсли;
		Если НачалоДня(ДатаПервогоПлатежа) = НачалоДня(ПериодДокументовОкончание) Тогда
			Если Не ЗначениеЗаполнено(ДатаВторогоПлатежа) Тогда
				Заголовок = НСтр("ru='Налог с патента '");
			Иначе
				Заголовок = НСтр("ru='1/3 налога с патента '");
			КонецЕсли;
		ИначеЕсли НачалоДня(ДатаВторогоПлатежа) = НачалоДня(ПериодДокументовОкончание) Тогда
			Заголовок = НСтр("ru='2/3 налога с патента '");
		Иначе
			Заголовок = НСтр("ru='Налог с патента '");
		КонецЕсли;
		
		Заголовок = Заголовок + ?(ПустаяСтрока(НомерПатента),"","№"+ НомерПатента)+" ("
					+ ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина")+ ")";
		
		Элементы.ГруппаДекорацииОписанияПатент.Видимость = Истина;
		
		Элементы.ВыполнитьЗадачу.Заголовок = НСтр("ru='Заплатить'");
	// Торговый сбор
	ИначеЕсли СобытиеКалендаряДанные.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ТорговыйСбор Тогда
		
		Заголовок = НСтр("ru='Торговый сбор за '") 
					+ ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина");
		
		Элементы.ГруппаДекорацииОписанияТорговыйСбор.Видимость = Истина;
		
		Элементы.ВыполнитьЗадачу.Заголовок = НСтр("ru='Уплатить'");
		
	// №1-Предприниматель
	ИначеЕсли СобытиеКалендаряДанные.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Форма1Предприниматель Тогда
		
		Заголовок = НСтр("ru='Форма №1-предприниматель'");
		
		Элементы.ГруппаДекорацииОписанияФорма1Предприниматель.Видимость = Истина;
		
		Элементы.ВыполнитьЗадачу.Заголовок = НСтр("ru='Сформировать'");
		
	// 6-НДФЛ
	ИначеЕсли СобытиеКалендаряДанные.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Форма6НДФЛ Тогда
		
		Заголовок = НСтр("ru='Форма 6-НДФЛ по сотрудникам за '") 
					+ ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина");
		
		Элементы.ДекорацияНадписьПериодовДокументов6НДФЛ.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Элементы.ДекорацияНадписьПериодовДокументов6НДФЛ.Заголовок,
				ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина"));
		
		Элементы.ГруппаДекорацииОписанияФорма6НДФЛ.Видимость = Истина;
		
		Элементы.ВыполнитьЗадачу.Заголовок = НСтр("ru='Сформировать'");
		
	// СЗВ-М
	ИначеЕсли СобытиеКалендаряДанные.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СведенияОЗастрахованныхЛицах Тогда
		
		Заголовок = НСтр("ru='Сведения о застрахованных лицах (СЗВ-М) по сотрудникам за '") 
					+ ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина");
		
		Элементы.ДекорацияНадписьПериодовДокументовСЗВМ.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Элементы.ДекорацияНадписьПериодовДокументовСЗВМ.Заголовок,
				ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина"));
		
		Элементы.ГруппаДекорацииОписанияСЗВМ.Видимость = Истина;
		
		Элементы.ВыполнитьЗадачу.Заголовок = НСтр("ru='Сформировать'");
	// СЗВ-Стаж
	ИначеЕсли СобытиеКалендаряДанные.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СЗВСтаж Тогда
		
		Заголовок = НСтр("ru='Сведения о страховом стаже застрахованных лиц (СЗВ-СТАЖ) по сотрудникам за '") 
					+ ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина");
		
		Элементы.ДекорацияНадписьПериодовДокументовСЗВстаж.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Элементы.ДекорацияНадписьПериодовДокументовСЗВМ.Заголовок,
				ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина"));
		
		Элементы.ГруппаДекорацииОписанияСЗВСтаж.Видимость = Истина;
		
		Элементы.ВыполнитьЗадачу.Заголовок = НСтр("ru='Сформировать'");
	// Декларация об объеме розничной продажи пива и пивных напитков (Приложение №12)
	ИначеЕсли СобытиеКалендаряДанные.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Декларация12 Тогда
		
		Заголовок = НСтр("ru='Декларация об объеме розничной продажи пива и пивных напитков (Приложение №12) за '") 
			+ ПредставлениеПериода(
				ПериодДокументовНачало,
				ПериодДокументовОкончание,
				"ФП=Истина");
		
		Элементы.ДекорацияНадписьПериодовДокументовДекларация12.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Элементы.ДекорацияНадписьПериодовДокументовДекларация12.Заголовок,
				ПредставлениеПериода(
					ПериодДокументовНачало,
					ПериодДокументовОкончание,
					"ФП=Истина"));
		
		Элементы.ГруппаДекорацииОписанияДекларации12.Видимость = Истина;		
		
		Элементы.ВыполнитьЗадачу.Заголовок = НСтр("ru='Сформировать'");   
		// Декларация об объеме розничной продажи пива и пивных напитков (Приложение №8)
	ИначеЕсли СобытиеКалендаряДанные.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Декларация8 Тогда
		
		Заголовок = НСтр("ru='Декларация об объеме розничной продажи пива и пивных напитков (Приложение №8) за '") 
		+ ПредставлениеПериода(
		ПериодДокументовНачало,
		ПериодДокументовОкончание,
		"ФП=Истина");
		
		Элементы.ДекорацияНадписьПериодовДокументовДекларация12.Заголовок = 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Элементы.ДекорацияНадписьПериодовДокументовДекларация12.Заголовок,
		ПредставлениеПериода(
		ПериодДокументовНачало,
		ПериодДокументовОкончание,
		"ФП=Истина"));
		
		Элементы.ГруппаДекорацииОписанияДекларации12.Видимость = Истина;  
		Элементы.ДекорацияТекстОписание47.Видимость = Ложь;
		
		Элементы.ВыполнитьЗадачу.Заголовок = НСтр("ru='Сформировать'");
	// Расчет по страховым взносам
	ИначеЕсли СобытиеКалендаряДанные.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.РасчетПоСтраховымВзносам Тогда
		
		Заголовок = НСтр("ru='Расчет по страховым взносам за '") 
					+ ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина");
		
		Элементы.ДекорацияНадписьПериодовДокументовРасчетСтраховыхВзносов.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Элементы.ДекорацияНадписьПериодовДокументовРасчетСтраховыхВзносов.Заголовок,
				ПредставлениеПериода(
						ПериодДокументовНачало,
						ПериодДокументовОкончание,
						"ФП=Истина"));
		
		Элементы.ГруппаДекорацииОписанияРасчетСтраховыхВзносов.Видимость = Истина;
		
		Элементы.ВыполнитьЗадачу.Заголовок = НСтр("ru='Сформировать'");
	КонецЕсли;
	
	РегламентированнаяОтчетностьУСНКлиентСервер.УстановитьЗаголовокФормыЗадачи(ЭтаФорма, Организация);
	
КонецПроцедуры

// Выполняет поиск последнего протокола проверки по событию календаря для организации
// и заполняет данные в форме из последнего протокола
//
&НаСервере
Процедура ЗаполнитьДанныеПоследнейПроверки()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПротоколыПроверкиДанных.ЕстьОшибки,
	|	ПротоколыПроверкиДанных.ЕстьПредупреждения,
	|	ПротоколыПроверкиДанных.ДатаПроверки
	|ИЗ
	|	РегистрСведений.ПротоколыПроверкиДанных КАК ПротоколыПроверкиДанных
	|ГДЕ
	|	ПротоколыПроверкиДанных.Организация = &Организация
	|	И ПротоколыПроверкиДанных.СобытиеКалендаря = &СобытиеКалендаря
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПротоколыПроверкиДанных.ДатаПроверки УБЫВ");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СобытиеКалендаря", СобытиеКалендаря);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = Результат.Выбрать();
	РезультатПроверки.Следующий();
	
	ПовторноеПредупреждение = Ложь;
	
	КлючПоследнегоПротокола = РегистрыСведений.ПротоколыПроверкиДанных.СоздатьКлючЗаписи(
		Новый Структура(
			" Организация, СобытиеКалендаря, ДатаПроверки", 
			Организация,
			СобытиеКалендаря,
			РезультатПроверки.ДатаПроверки));
	
	Если РезультатПроверки.ЕстьОшибки ИЛИ РезультатПроверки.ЕстьПредупреждения Тогда
		ОтразитьПервыеОшибки();
	КонецЕсли;
	
КонецПроцедуры

// Выполняет переход к требуемому расчету
&НаКлиенте
Процедура ВыполнитьРасчетНажатие()
	
	
	Если НЕ ВыполнитьКонтроль() Тогда
		Возврат;
	КонецЕсли;
	
	Результат = РегламентированнаяОтчетностьУСНКлиент.ОбработатьСобытиеКалендаря(
		Организация,
		СобытиеКалендаря);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("ИмяФормыРезультата") Тогда
		ИмяФормыРезультата = Результат.ИмяФормыРезультата;
		
		Если СтрНайти(ИмяФормыРезультата, "РасчетПоСтраховымВзносам") > 0 Тогда			
			ФормаОтчета = Результат.ФормаОтчетаДлитОперации;
			СтруктураВспомДанныхДлитОперации = Новый Структура;
			СтруктураВспомДанныхДлитОперации.Вставить("ФормаРегламентированногоОтчета", ФормаОтчета);
			СтруктураВспомДанныхДлитОперации.Вставить("ИмяФормыРезультата", ИмяФормыРезультата);
			
			ПараметрыОбработчикаОжидания = Новый Структура;
			ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
			ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 7);
			ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
			ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.25);
			Подключаемый_ПроверитьВыполнениеДлительнойОперацииНаКлиенте();
			
		ИначеЕсли СтрНайти(ИмяФормыРезультата, "Декларация12") > 0 
			Или СтрНайти(ИмяФормыРезультата, "Декларация8") > 0 Тогда
			ФормаОтчета = Результат.ФормаОтчетаДлитОперации;
			СтруктураВспомДанныхДлитОперации = Новый Структура;
			СтруктураВспомДанныхДлитОперации.Вставить("ФормаРегламентированногоОтчета", ФормаОтчета);
			СтруктураВспомДанныхДлитОперации.Вставить("ИмяФормыРезультата", ИмяФормыРезультата);
			СтруктураВспомДанныхДлитОперации.Вставить("ИдентификаторЗадания", ФормаОтчета.СтруктураРеквизитовФормы.ИдентификаторЗадания);
			
			ПараметрыОбработчикаОжидания = Новый Структура;
			ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
			ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 7);
			ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
			ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.25);
			ФормаОтчета.ВидДлительнойОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ЗаполнениеПоданнымИБ");
			РегламентированнаяОтчетностьАЛКОКлиент.ВыполнитьДлительнуюОперациюАЛКО(ФормаОтчета, ФормаОтчета.ВидДлительнойОперации,, ЭтаФорма);
			Подключаемый_ПроверитьВыполнениеДлительнойОперацииНаКлиенте();  
		ИначеЕсли СтрНайти(ИмяФормыРезультата, "Форма6НДФЛ") > 0 Тогда
			ФормаОтчета = Результат.ФормаОтчетаДлитОперации;
			СтруктураВспомДанныхДлитОперации = Новый Структура;
			СтруктураВспомДанныхДлитОперации.Вставить("ФормаРегламентированногоОтчета", ФормаОтчета);
			СтруктураВспомДанныхДлитОперации.Вставить("ИмяФормыРезультата", ИмяФормыРезультата);
			СтруктураВспомДанныхДлитОперации.Вставить("ИдентификаторЗадания", ФормаОтчета.СтруктураРеквизитовФормы.ИдентификаторЗадания);
			
			ПараметрыОбработчикаОжидания = Новый Структура;
			ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
			ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 7);
			ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
			ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.25);
			Подключаемый_ПроверитьВыполнениеДлительнойОперацииНаКлиенте(); 			
		Иначе
			ПараметрыФормы = Новый Структура(
				"Организация,СобытиеКалендаря", 
				Организация,
				СобытиеКалендаря);
				
			Оповестить("ИзменениеСостоянияСобытияКалендаря", СобытиеКалендаря, ЭтаФорма);
			ОткрытьФорму(Результат.ИмяФормыРезультата, ПараметрыФормы);
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает Ложь - если есть ошибки, Истина - если все хорошо
//
&НаКлиенте
Функция ВыполнитьКонтроль()
	Элементы.ПовторитьПроверку.Видимость = Ложь;
	
	СтруктураПараметровПроверкиДанных = ПроверкаДанныхКлиентСервер.ПолучитьОписаниеСтруктурПараметровПроверкиДанных(Организация);
	
	СтруктураПараметровПроверкиДанных.ПараметрыРаботы.Организация = Организация;
	СтруктураПараметровПроверкиДанных.ПараметрыРаботы.СобытиеКПроверке = СобытиеКалендаря;
	
	РезультатПроверки = ПроверкаДанныхКлиент.ВыполнитьПроверку(СтруктураПараметровПроверкиДанных, ЭтаФорма.Окно);
	
	// Если проверка закончилась с критической ошибкой и пользователь ее пропускает, то продолжаем
	Если РезультатПроверки.ЕстьКритическаяОшибка Тогда
		Возврат НЕ РезультатПроверки.ЕстьОшибки;
	КонецЕсли;
	
	Если РезультатПроверки.ЕстьОшибки Тогда
		Элементы.ВыполнитьЗадачу.Заголовок = НСтр("ru='Есть ошибки. Повторить проверку'");
	ИначеЕсли РезультатПроверки.ЕстьПредупреждения Тогда
		Элементы.ВыполнитьЗадачу.Заголовок = НСтр("ru='Игнорировать предупреждения'");
		Элементы.ПовторитьПроверку.Видимость = Истина;
	КонецЕсли;
	
	Продолжать = Истина;
	
	Если РезультатПроверки.ЕстьОшибки Тогда
		Продолжать = Ложь;
	ИначеЕсли РезультатПроверки.ЕстьПредупреждения И НЕ ПовторноеПредупреждение Тогда
		Продолжать = Ложь;
		ПовторноеПредупреждение = Истина;
	ИначеЕсли РезультатПроверки.ЕстьПредупреждения И ПовторноеПредупреждение Тогда
		Продолжать = Истина;
	КонецЕсли;
	
	КлючПоследнегоПротокола = РезультатПроверки.КлючПротоколаПроверки;
	ОтразитьПервыеОшибки();
	
	Возврат Продолжать;
	
КонецФункции

// Показывает первые ошибки из протокола
//
&НаСервере
Процедура ОтразитьПервыеОшибки()
	
	Элементы.ГруппаОшибка1.Видимость = Ложь;
	Элементы.ГруппаОшибка2.Видимость = Ложь;
	Элементы.ГруппаОшибка3.Видимость = Ложь;
	Элементы.ГруппаОшибка4.Видимость = Ложь;
	
	МенеджерЗаписи = РегистрыСведений.ПротоколыПроверкиДанных.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючПоследнегоПротокола);
	МенеджерЗаписи.Прочитать();
	
	Если НЕ МенеджерЗаписи.Выбран() Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоРезультат = МенеджерЗаписи.Протокол.Получить();
	
	
	ВременныйМассивРасшифровок = Новый Массив;
	
	КоличествоНайденных = 0;
	
	Для Каждого СтрВерхнийУровень Из ДеревоРезультат.Строки Цикл
		
		// Если верхний уровень проверки ОК, значит и подчиненные ок
		Если СтрВерхнийУровень.РезультатКонтроля = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Более 4х ошибок не показываем
		Если КоличествоНайденных > 4 Тогда
			Прервать;
		КонецЕсли;
		
		// Проверим ошибки и предупреждения
		Для Каждого СтрНижнийУровень Из СтрВерхнийУровень.Строки Цикл
			
			Если СтрНижнийУровень.РезультатКонтроля = 0 Тогда
				Продолжить;
			КонецЕсли;
			КоличествоНайденных = КоличествоНайденных + 1;
			
			// Более 4х ошибок не показываем
			Если КоличествоНайденных > 4 Тогда
				Прервать;
			КонецЕсли;
			
			// данные по ошибки
			ЭтаФорма["ОшибкаИлиПредупреждение"+КоличествоНайденных] = ?(СтрНижнийУровень.РезультатКонтроля=1, 1, 0);
			ЭтаФорма["ОписаниеОшибки"+КоличествоНайденных] = СтрВерхнийУровень.Описание+": " + СтрНижнийУровень.Описание;
			
			// показываем строку ошибки
			Элементы["ГруппаОшибка"+КоличествоНайденных].Видимость = Истина;
			
			ВременныйМассивРасшифровок.Добавить(Новый ФиксированнаяСтруктура(СтрНижнийУровень.Расшифровка));
			
		КонецЦикла;
		
	КонецЦикла;
	
	МассивРасшифровок = Новый ФиксированныйМассив(ВременныйМассивРасшифровок);
	
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьПереходКДаннымЕНВД(ЗаголовокВозврата)
	
	СтруктураПараметров = Новый Структура(
		"Организация,СобытиеКалендаря,СсылкаПереходаНазад",
		Организация,
		СобытиеКалендаря,
		Новый Структура("Представление, ИмяФормы, ПараметрыФормы",
			ЗаголовокВозврата,
			"Обработка.ОбработкиНалоговИОтчетности.Форма.ОписанияЗадачИСтартВыполнения", 
			Новый Структура("Организация,СобытиеКалендаря", Организация, СобытиеКалендаря)));
	
	ОткрытьФорму("Документ.ПоказателиЕНВД.ФормаОбъекта", СтруктураПараметров,,,);

	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПереходКДаннымТорговогоСбора(ЗаголовокВозврата)
	
	СтруктураПараметров = Новый Структура(
		"Организация,СобытиеКалендаря,СсылкаПереходаНазад",
		Организация,
		СобытиеКалендаря,
		Новый Структура("Представление, ИмяФормы, ПараметрыФормы",
			ЗаголовокВозврата,
			"Обработка.ОбработкиНалоговИОтчетности.Форма.ОписанияЗадачИСтартВыполнения", 
			Новый Структура("Организация,СобытиеКалендаря", Организация, СобытиеКалендаря)));
	
	ОткрытьФорму("Справочник.ТорговыеТочки.ФормаСписка", СтруктураПараметров,,,);

	
КонецПроцедуры

&НаСервере
Процедура ПеренестиЗадачуВАрхивСервер()
	
	ЗаписьКалендаря = Справочники.ЗаписиКалендаряПодготовкиОтчетности.ПолучитьЗаписьКалендаря(Организация, СобытиеКалендаря);
	Если ЗаписьКалендаря <> Неопределено Тогда
		ОбъектЗаписьКалендаря = ЗаписьКалендаря.ПолучитьОбъект();
		ОбъектЗаписьКалендаря.Завершено = Истина;
		ОбъектЗаписьКалендаря.Записать();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДекорацияПереходКПапкамДокументовИзЕНОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Организация", Организация);
	ОткрытьФорму("Документ.ЗаписиУСН.Форма.ФормаСпискаЗаписиПрочие", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПереходКПапкамДокументовИзАвПлатежаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Организация", Организация);
	ОткрытьФорму("Документ.ЗаписиУСН.Форма.ФормаСпискаЗаписиПрочие", ПараметрыФормы);
	
КонецПроцедуры


&НаКлиенте
Процедура ДекорацияПереходКПапкамДокументовИзДекларацияУСНОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылка = "КУДИР" Тогда
		ПараметрыФормы = Новый Структура("Организация", Организация);
		ОткрытьФорму("Документ.ЗаписиУСН.Форма.ФормаСпискаЗаписиПрочие", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПереходКПапкамДокументовИзКУДИРОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылка = "КУДИР" Тогда
		ПараметрыФормы = Новый Структура("Организация", Организация);
		ОткрытьФорму("Документ.ЗаписиУСН.Форма.ФормаСпискаЗаписиПрочие", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТекстОписаниеТорговыйСборОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыполнитьПереходКДаннымТорговогоСбора(НСтр("ru='« Вернуться к уплате торогового сбора'"));
КонецПроцедуры


&НаКлиенте
Процедура ДекорацияТекстОписание20ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыполнитьПереходКДаннымЕНВД(НСтр("ru='Декларации по ЕНВД'"));
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТекстОписаниеЕНВДНалог2ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыполнитьПереходКДаннымЕНВД(НСтр("ru='Уплаты ЕНВД'"));
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТекстОписание21ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Справочник.Сотрудники.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТекстОписание22ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылка = "СведенияПоСотрудникам" Тогда
		ОткрытьФорму("Справочник.Сотрудники.ФормаСписка");
	ИначеЕсли НавигационнаяСсылка = "НачисленияПоСотрудникам" Тогда
		ОткрытьФорму("ЖурналДокументов.ДокументыПоЗарплате.ФормаСписка", Новый Структура("Организация", Организация));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТекстОписание25ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылка = "СведенияПоСотрудникам" Тогда
		ОткрытьФорму("Справочник.Сотрудники.ФормаСписка");
	ИначеЕсли НавигационнаяСсылка = "НачисленияПоСотрудникам" Тогда
		ОткрытьФорму("ЖурналДокументов.ДокументыПоЗарплате.ФормаСписка", Новый Структура("Организация", Организация));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТекстОписание26ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "СведенияПоСотрудникам" Тогда
		ОткрытьФорму("Справочник.Сотрудники.ФормаСписка");
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "НачисленияПоСотрудникам" Тогда
		ОткрытьФорму("ЖурналДокументов.ДокументыПоЗарплате.ФормаСписка", Новый Структура("Организация", Организация));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТекстОписание29ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "СведенияПоСотрудникам" Тогда
		ОткрытьФорму("Справочник.Сотрудники.ФормаСписка");
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "НачисленияПоСотрудникам" Тогда
		ОткрытьФорму("ЖурналДокументов.ДокументыПоЗарплате.ФормаСписка", Новый Структура("Организация", Организация));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТекстОписание36ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "СведенияПоСотрудникам" Тогда
		ОткрытьФорму("Справочник.Сотрудники.ФормаСписка");
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "НачисленияПоСотрудникам" Тогда
		ОткрытьФорму("ЖурналДокументов.ДокументыПоЗарплате.ФормаСписка", Новый Структура("Организация", Организация));
	КонецЕсли;
КонецПроцедуры

