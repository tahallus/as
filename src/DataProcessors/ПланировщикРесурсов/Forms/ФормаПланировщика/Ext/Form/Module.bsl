
#Область ОписаниеПеременных

&НаКлиенте
Перем ПоследнийВариантОтображения;

&НаСервере
Перем НастройкиЗагружены;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Элементы.ДекорацияРазвернутьКалендарь.Видимость = Ложь;
		Элементы.СвернутьКалендарь.Видимость = Ложь;
		Элементы.СвернутьДополнительно.Видимость = Ложь;
		Элементы.СвернутьОтбор.Видимость = Ложь;
		Элементы.ГруппаПраваяПанель.ОтображатьЗаголовок = Истина;
		Элементы.ГруппаШапка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.ГруппаРазделитель.Видимость = Ложь;
	Иначе
		Элементы.ДекорацияРазвернутьКалендарь.Видимость = Ложь;
		Элементы.ГруппаСтраницы.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ОтборКонтакт.ОграничениеТипа = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	
	ВариантОтображения = 1;
	НомерПодсистемы = ?(Параметры.Свойство("НомерПодсистемы"), Параметры.НомерПодсистемы, 0);
	
	ЭтоПодбор = Параметры.Свойство("ЭтоПодбор");
	ТолькоПросмотрФормы = ТолькоПросмотрФормы();
	
	Элементы.ГруппаДокументы.Видимость = Не ЭтоПодбор;
	Элементы.ГруппаДокументы.Доступность = Не ТолькоПросмотрФормы;
	
	НастройкиЗагружены = Ложь;
	
	Если Не ТолькоПросмотрФормы Тогда
		ЗагрузитьНастройкиФормы();
	Иначе
		УстановитьНастройкиСтандартныхЦветов();
		Элементы.ЗагрузкаРесурсовКонтекстноеМенюГруппа.Видимость = Ложь;
		Элементы.ГруппаТипДокумента.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаКалендаря) Тогда ДатаКалендаря = ТекущаяДатаСеанса() КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РасписаниеРаботПереключатель) Тогда
		РасписаниеРаботПереключатель = ИнтервалПланирования();
	КонецЕсли;
	
	МассивДат = Неопределено;
	
	Если ЭтоПодбор Тогда
		
		МассивДат = Новый Массив;
		
		УстановитьНастройкиЭлементовФормыПриСоздании();
		
		Если Параметры.РесурсыПредприятия.Количество() Тогда
			ГраницыПланирования = Неопределено;
			ОбработатьСобытиеПодбора(Параметры.РесурсыПредприятия, МассивДат, ГраницыПланирования);
		КонецЕсли;
		
		ПериодНадпись = ОбновитьПредставлениеПериода(Период);
		
	КонецЕсли;
	
	Если Не НастройкиЗагружены Тогда
		УстановитьНастройкиСтандартныхЦветов();
		Если Не ЭтоПодбор Тогда
			Элементы.ОтобразитьИнтервалПланирования.Пометка = Истина;
			УстановитьНастройкиЭлементовФормыПриСоздании();
			ГраницыПланирования = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Заголовок = НСтр("ru = 'Планировщик ресурсов'");
	
	Если Не НомерПодсистемы = 0 Тогда 
		Если НомерПодсистемы = 1 Тогда ТолькоПоПодсистеме1 = Истина; КонецЕсли;
		Если НомерПодсистемы = 2 Тогда ТолькоПоПодсистеме2 = Истина; КонецЕсли;
		Если НомерПодсистемы = 3 Тогда 
			ТолькоПоПодсистеме3 = Истина; 
			Заголовок = НСтр("ru = 'Журнал записи'");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ТолькоПоПодсистеме1.Видимость = Не ЭтоПодбор;
	Элементы.ТолькоПоПодсистеме2.Видимость = Не ЭтоПодбор;
	Элементы.ТолькоПоПодсистеме3.Видимость = Не ЭтоПодбор;
	
	Если Не ПолучитьФункциональнуюОпцию("ПланироватьЗагрузкуРесурсовПредприятия")
	 Или (Не ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаПроизводство)) Тогда
		Элементы.ТолькоПоПодсистеме2.Видимость = Ложь;
		ТолькоПоПодсистеме2 = Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ПланироватьЗагрузкуРесурсовПредприятияЖурналЗаписи") Тогда
		Элементы.ТолькоПоПодсистеме3.Видимость = Ложь;
		ТолькоПоПодсистеме3 = Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ПланироватьЗагрузкуРесурсовПредприятияРаботы") Тогда
		Элементы.ТолькоПоПодсистеме1.Видимость = Ложь;
		ТолькоПоПодсистеме1 = Ложь;
	КонецЕсли;
	
	Если ЦветПодобранныхВКорзину = Новый Цвет(0,0,0) Тогда
		ЦветПодобранныхВКорзину = WebЦвета.КоролевскиГолубой;
	КонецЕсли;
	
	Элементы.ГруппаПанельМасштаб.РастягиватьПоГоризонтали = Элементы.ОтобразитьМесяц.Пометка;

	ВывестиТабличныйДокумент(МассивДат,Истина);
	
	ОбновитьПодобранныеПериоды(Ложь);
	
	УстановитьВидимостьПодсказкиАссистента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПоследнийВариантОтображения = ВариантОтображения;
	УстановитьНастройкиПоНомеруПодсистемы();
	НастроитьОтображениеКорзины(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЭтоПодбор И Не ТолькоПросмотрФормы И Не ЗавершениеРаботы Тогда
		ПараметрыОтбора =  Новый Структура("ВариантОтображения",ВариантОтображения);
		СтрокиПоВарианту = ДанныеРеквизитовФормыКэш.НайтиСтроки(ПараметрыОтбора);
		ОсновнойВариант = (СтрокиПоВарианту.Количество() И СтрокиПоВарианту[0].ОсновнойВариант) ИЛИ Не ДанныеРеквизитовФормыКэш.Количество();
		СохранитьДанныеВариантовОтображенияКлиент(ВариантОтображения, ОсновнойВариант);
	КонецЕсли;
	
	Если ВыбранныеРесурсы.Количество() И Не ЭтоПодбор И Не ЗавершениеРаботы Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ПараметрыОповещения = Новый Структура("ЗавершениеРаботы", ЗавершениеРаботы);
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриЗакрытии", ЭтаФорма, ПараметрыОповещения);
		
		ТекстВопроса = НСтр("ru = 'При закрытии данные о подборе будут утеряны. Продолжить?'");
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗавершениеРаботы Тогда
		ПередЗакрытиемНаСервере();
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ПередЗакрытиемНаСервере()
	Если Не ЭтоПодбор И Не ТолькоПросмотрФормы Тогда
		СохранитьНастройкиФормы();
	КонецЕсли;
	СписокДатПериода.Очистить();
	Элементы.Календарь.ВыделенныеДаты.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если Не ДобавлениеИзКорзины Тогда 
		КоллекцияРесурсов = БуферДобавленияВДокумент;
	Иначе
		КоллекцияРесурсов = ВыбранныеРесурсы;
	КонецЕсли;
	
	Если Не ВыбранноеЗначение = Неопределено Тогда 
		Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
			ПараметрыОткрытия = Новый Структура("Ключ, ВыбранныеРесурсы, ОткрытИзПланировщика",ВыбранноеЗначение, КоллекцияРесурсов, Истина);
			ОткрытьФорму("Документ.ЗаказНаПроизводство.ФормаОбъекта", ПараметрыОткрытия, ЭтаФорма);
		КонецЕсли;
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ПараметрыОткрытия = Новый Структура("Ключ, ВыбранныеРесурсы, ОткрытИзПланировщика",ВыбранноеЗначение, КоллекцияРесурсов, Истина);
			ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаЗаказНаряда", ПараметрыОткрытия, ЭтаФорма);
		КонецЕсли;
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.Событие") Тогда
			ПараметрыОткрытия = Новый Структура("Ключ, ВыбранныеРесурсы, ОткрытИзПланировщика",ВыбранноеЗначение, КоллекцияРесурсов, Истина);
			ОткрытьФорму("Документ.Событие.Форма.ФормаСобытияЗаписьКонтрагента", ПараметрыОткрытия, ЭтаФорма);
		КонецЕсли;
		
		БуферДобавленияВДокумент.Очистить();
		ВыбранныеРесурсы.Очистить();
		НастроитьОтображениеКорзины();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьПланировщик" Тогда
		ВывестиТабличныйДокумент();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДекорацияПодобраноНажатие(Элемент)
	ОткрытьКорзину();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаРесурсовВыбор(Элемент, Область, СтандартнаяОбработка)
	
	КоординатаСтроки = Формат(Область.Верх, "ЧГ=");
	Если РасписаниеРаботПереключатель = ИнтервалМесяц() Тогда
		КоординатаКолонки = Формат(Область.Лево, "ЧГ=")
	Иначе
		КоординатаКолонки =  1;
	КонецЕсли;
	
	РасшифровкаЯчейки = ЗагрузкаРесурсов.Область(СтрШаблон("R%1C%2", КоординатаСтроки, КоординатаКолонки)).Расшифровка;
	
	Ресурс = Неопределено;
	КонтрольГрафика = Ложь;
	
	Если ТипЗнч(РасшифровкаЯчейки) = Тип("Структура")
		И РасшифровкаЯчейки.Свойство("Ресурс")
		И Не РасшифровкаЯчейки.Свойство("СсылкаНаДокумент") Тогда
		Ресурс = РасшифровкаЯчейки.Ресурс;
		
		Если Область.Лево = 1 Тогда
			СтандартнаяОбработка = Ложь;
			
			ПараметрыОткрытия = Новый Структура("Ключ", Ресурс);
			ОткрытьФорму("Справочник.КлючевыеРесурсы.ФормаОбъекта",ПараметрыОткрытия,ЭтаФорма);
			Возврат
			
		КонецЕсли;
		
		Если РасшифровкаЯчейки.Свойство("КонтролироватьЗагрузкуТолькоВРабочееВремя") Тогда
			КонтрольГрафика = РасшифровкаЯчейки.КонтролироватьЗагрузкуТолькоВРабочееВремя
		Иначе
			КонтрольГрафика = Ложь;
		КонецЕсли;
		
		ДеньПериода = ПредставлениеПериода;
		
		Если (РасписаниеРаботПереключатель = ИнтервалПланирования() И ЗначениеЗаполнено(ДеньПериода))
			ИЛИ (РасписаниеРаботПереключатель = ИнтервалДень() И ЗначениеЗаполнено(ДеньПериода))
			ИЛИ РасписаниеРаботПереключатель = ИнтервалМесяц() Тогда
			СтандартнаяОбработка = Ложь;
			ОбработатьСобытиеВыбораИнтервала(Ресурс, Область, ДеньПериода, КонтрольГрафика);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаРесурсовОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") И Расшифровка.Свойство("ВидРасшифровки") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Расшифровка.ВидРасшифровки = "ПозиционированиеНаДокументе" Тогда
			
			СпозиционироватьНаОбласти(, Расшифровка.СсылкаНаДокумент, Расшифровка.Ресурс, Расшифровка.НомерСтрокиДокумента);
			Возврат
		КонецЕсли;
		
		Если Расшифровка.ВидРасшифровки = "СоздатьНовыйРесурс" Тогда
			
			СоздатьНовыйРесурс();
			Возврат
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаРесурсовПриАктивизации(Элемент)
	
	ПриАктивизацииТабличногоДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьКалендарьНажатие(Элемент)
	Элементы.ГруппаСтраницы.Видимость = Не Элементы.ГруппаСтраницы.Видимость;
	Элементы.ДекорацияРазвернутьКалендарь.Видимость = Не Элементы.ГруппаСтраницы.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРазвернутьКалендарьНажатие(Элемент)
	
	Элементы.ГруппаСтраницы.Видимость = Не Элементы.ГруппаСтраницы.Видимость;
	Элементы.ДекорацияРазвернутьКалендарь.Видимость = Не Элементы.ДекорацияРазвернутьКалендарь.Видимость;
	
	Элементы.Календарь.ВыделенныеДаты.Очистить();
	
	Для Каждого ДатаСписка Из СписокДатПериода Цикл
		Элементы.Календарь.ВыделенныеДаты.Добавить(ДатаСписка.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПозиционированияПриИзменении(Элемент)
	СпозиционироватьНаОбласти(ПредставлениеПериода);
КонецПроцедуры

&НаКлиенте
Процедура ОтборРесурсОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Ресурс", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПриАктивизацииДаты(Элемент)
	
	Если Не Элементы.Календарь.ВыделенныеДаты.Количество() Тогда Возврат КонецЕсли;
	
	БылаОчисткаСписка = Ложь;
	
	Если Элементы.Календарь.ВыделенныеДаты.Количество() = 1 И СписокДатПериода.Количество() = 1
		И Не Элементы.Календарь.ВыделенныеДаты[0] = СписокДатПериода[0].Значение Тогда
		СписокДатПериода.Очистить();
		БылаОчисткаСписка = Истина;
	КонецЕсли;
	
	Если Элементы.Календарь.ВыделенныеДаты.Количество() = СписокДатПериода.Количество() Тогда
		Возврат
	КонецЕсли;
	
	Если РасписаниеРаботПереключатель = ИнтервалМесяц() Тогда
		ДополнитьДатыДоКонцаМесяца();
	КонецЕсли;
	
	Если Не БылаОчисткаСписка Тогда
		СписокДатПериода.Очистить();
	КонецЕсли;
	
	СписокДатПериода.ЗагрузитьЗначения(Элементы.Календарь.ВыделенныеДаты);
	СписокДатПериода.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	ВыборПериода = Истина;
	
	ПодключитьОбработчикОжидания("ВывестиТабличныйДокументКлиент", 1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ТипЗнч(ВыбранноеЗначение) = Тип("Дата") Тогда
		ДатаПериода = Дата(ВыбранноеЗначение +" 00:00:00");
	Иначе
		ДатаПериода = НачалоДня(ВыбранноеЗначение);
	КонецЕсли;
	
	СпозиционироватьНаОбласти(ДатаПериода);
	
	Если ПереключательКалендарьОтборы = ИнтервалПланирования() Тогда
		ЗаполнитьСписокПериодаПозиционирования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПериодНадписьНажатиеЗавершение", ЭтотОбъект, Параметры);
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период = Период;
	
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ОтборКонтакты = Новый Массив;
	ОтборКонтакты.Добавить(ВыбранноеЗначение);
	
	ДополнитьОтборПоКонтрагентуКонтактами(ОтборКонтакты, ВыбранноеЗначение);
	
	УстановитьМеткуИОтборСписка("Контрагент", Элемент.Родитель.Имя, ОтборКонтакты, Строка(ВыбранноеЗначение));
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтображенияПриИзменении(Элемент)
	
	Если ВариантОтображения = 7 Тогда
		СоздатьВариант();
		Возврат;
	КонецЕсли;
	
	Если Не ПоследнийВариантОтображения = Неопределено Тогда
		
		ПараметрыОтбора =  Новый Структура("ВариантОтображения",ПоследнийВариантОтображения);
		СтрокиПоВарианту = ДанныеРеквизитовФормыКэш.НайтиСтроки(ПараметрыОтбора);
		ОсновнойВариант = СтрокиПоВарианту.Количество() И СтрокиПоВарианту[0].ОсновнойВариант;
		
		СохранитьДанныеВариантовОтображенияКлиент(ПоследнийВариантОтображения, ОсновнойВариант);
		
	КонецЕсли;
	
	ВосстановитьДанныеВариантовОтображения(ВариантОтображения);
	
	ПоследнийВариантОтображения = ВариантОтображения;
	
	ОбновитьПредставлениеПериода(Период);
	
	УстановитьНастройкиПоНомеруПодсистемы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВариантыПриИзменении(Элемент)
	Элементы.ГруппаВариантОтображения.Видимость = ИспользоватьВарианты;
	
	Если Не ИспользоватьВарианты Тогда
		ДанныеРеквизитовФормыКэш.Очистить();
		ДанныеМетокКэш.Очистить();
		Элементы.ВариантОтображения.СписокВыбора.Очистить();
		Элементы.ВариантОтображения.СписокВыбора.Добавить(1, НСтр("ru = 'Вариант 1(основной)'"));
		Элементы.ВариантОтображения.СписокВыбора.Добавить(7, "+");
	КонецЕсли;
	
	СохранитьДанныеВариантовОтображенияКлиент(1, Истина);
	ВариантОтображения = 1;
	ПоследнийВариантОтображения = 1;
	
	СписокВариантов = Новый СписокЗначений;
	Для Каждого ЗначениеВарианта Из Элементы.ВариантОтображения.СписокВыбора Цикл
		СписокВариантов.Добавить(ЗначениеВарианта.Значение, ЗначениеВарианта.Представление);
	КонецЦикла;
	ОбновитьСписокВариантов(СписокВариантов);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоИнтервалаОтображенияПриИзменении(Элемент)
	
	МассивДат = Элементы.Календарь.ВыделенныеДаты;
	
	ВывестиТабличныйДокумент(МассивДат);
	
	ЗаполнитьСписокПериодаПозиционирования();
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеИнтервалаОтображенияПриИзменении(Элемент)
	
	МассивДат = Элементы.Календарь.ВыделенныеДаты;
	
	ВывестиТабличныйДокумент(МассивДат);
	
	ЗаполнитьСписокПериодаПозиционирования();
КонецПроцедуры

&НаКлиенте
Процедура ШагИнтервалаМинПриИзменении(Элемент)
	
	ОстатокОтДеления = ШагИнтервалаМин%5;
	
	Если ШагИнтервалаМин < 15 И Не ШагИнтервалаМин = 0 Тогда
		ШагИнтервалаМин = 15
	Иначе
		Если Не ОстатокОтДеления%5 = 0 Тогда
			ШагИнтервалаМин = ШагИнтервалаМин + (5-ОстатокОтДеления);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШагИнтервалаМинРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ШагИнтервалаМин < 15 И Не ШагИнтервалаМин = 0 Тогда 
		ШагИнтервалаМин = 15
	Иначе
		ШагИнтервалаМин = ?(Направление>0, ШагИнтервалаМин+5, ШагИнтервалаМин-5);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидРесурсаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ВидРесурса", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Список = Новый СписокЗначений;
	
	Если ТолькоПоПодсистеме1 И Не ТолькоПоПодсистеме2 И Не ТолькоПоПодсистеме3 Тогда
		ПараметрыОткрытия = Новый Структура("РежимВыбора", Истина);
		ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаСпискаЗаказНаряда", ПараметрыОткрытия, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	ИначеЕсли ТолькоПоПодсистеме2 И Не ТолькоПоПодсистеме1 И Не ТолькоПоПодсистеме3 Тогда
		ПараметрыОткрытия = Новый Структура();
		ОткрытьФорму("Документ.ЗаказНаПроизводство.Форма.ФормаВыбора", ПараметрыОткрытия, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	ИначеЕсли ТолькоПоПодсистеме3 И Не ТолькоПоПодсистеме2 И Не ТолькоПоПодсистеме1 Тогда
		ПараметрыОткрытия = Новый Структура("РежимВыбора, ТипСобытия", Истина, ПредопределенноеЗначение("Перечисление.ТипыСобытий.Запись"));
		ОткрытьФорму("Документ.Событие.ФормаСписка", ПараметрыОткрытия, Параметры.Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	Иначе
		
		Если ТолькоПоПодсистеме2 Тогда
			Список.Добавить("Заказ на производство");
		КонецЕсли;
		
		Если ТолькоПоПодсистеме1 Тогда
			Список.Добавить("Заказ-Наряд");
		КонецЕсли;
		
		Если ТолькоПоПодсистеме3 Тогда
			Список.Добавить("Событие ""Запись""");
		КонецЕсли;
	
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("Элемент", Элемент);
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораДокументаИзМеню", ЭтаФорма, ПараметрыОповещения);
	
	ПоказатьВыборИзМеню(Оповещение, Список, Элемент);
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДокументОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьМеткуИОтборСписка("Документ", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ОтборДокумент = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтактПриИзменении(Элемент)
	ВывестиТабличныйДокумент();
КонецПроцедуры

&НаКлиенте
Процедура ЦветНеРабочееВремяПриИзменении(Элемент)
	ПриИзмененииЦветаИнтервала()
КонецПроцедуры

&НаКлиенте
Процедура ЦветРабочееВремяПриИзменении(Элемент)
	ПриИзмененииЦветаИнтервала()
КонецПроцедуры

&НаКлиенте
Процедура ЦветЧастичнойЗагрузкиДоПриИзменении(Элемент)
	ПриИзмененииЦветаИнтервала()
КонецПроцедуры

&НаКлиенте
Процедура ЦветЧастичнойЗагрузкиПослеПриИзменении(Элемент)
	ПриИзмененииЦветаИнтервала()
КонецПроцедуры

&НаКлиенте
Процедура ЦветПолнойЗагрузкиПриИзменении(Элемент)
	ПриИзмененииЦветаИнтервала()
КонецПроцедуры

&НаКлиенте
Процедура ЦветПревышенияЗагрузкиПриИзменении(Элемент)
	ПриИзмененииЦветаИнтервала()
КонецПроцедуры

&НаКлиенте
Процедура ЦветПодобранныхВКорзинуПриИзменении(Элемент)
	ПриИзмененииЦветаИнтервала()
КонецПроцедуры

&НаКлиенте
Процедура ТолькоПоПодсистемеПриИзменении(Элемент)
	УстановитьНастройкиПоНомеруПодсистемы();
КонецПроцедуры

&НаКлиенте
Процедура ТолькоПоПодсистеме2ПриИзменении(Элемент)
	УстановитьНастройкиПоНомеруПодсистемы()
КонецПроцедуры

&НаКлиенте
Процедура ТолькоПоПодсистеме3ПриИзменении(Элемент)
	УстановитьНастройкиПоНомеруПодсистемы();
КонецПроцедуры

&НаКлиенте
Процедура ТолькоРабочееВремяПриИзменении(Элемент)
	
	Если Не ТолькоРабочееВремя Тогда
		Элементы.ГруппаИнтервалОтображения.Доступность = Истина;
		НачалоИнтервалаОтображения = Дата(1,1,1);
		ОкончаниеИнтервалаОтображения = Дата(1,1,1);
	Иначе
		Элементы.ГруппаИнтервалОтображения.Доступность = Ложь;
	КонецЕсли;
	
	ВывестиТабличныйДокумент();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомандФормы

&НаКлиенте
Процедура КомандаУдалитьВариант(Команда)
	
	Если ВариантОтображения = 7 ИЛИ ВариантОтображения = 0 ИЛИ Элементы.ВариантОтображения.СписокВыбора.Количество() = 2 Тогда Возврат КонецЕсли;
	
	ПараметрыОтбора =  Новый Структура("ВариантОтображения",ВариантОтображения);
	СтрокиПоВарианту = ДанныеРеквизитовФормыКэш.НайтиСтроки(ПараметрыОтбора);
	
	УдаленОсновнойВариант = СтрокиПоВарианту.Количество() И СтрокиПоВарианту[0].ОсновнойВариант;
		
	Если Элементы.ВариантОтображения.СписокВыбора.Количество() = 2 ИЛИ УдаленОсновнойВариант Тогда 
		
		ПредставлениеПервогоВарианта = Элементы.ВариантОтображения.СписокВыбора[0].Представление;
		
		Элементы.ВариантОтображения.СписокВыбора[0].Представление  = ?(СтрНайти(ПредставлениеПервогоВарианта, "(основной)") = 0
																		, ПредставлениеПервогоВарианта + "(основной)", ПредставлениеПервогоВарианта);
		
		ДанныеРеквизитовФормыКэш[0].ОсновнойВариант = Истина;
		
	КонецЕсли;
	
	УдалитьСтрокиПоВариантуОтображения(ВариантОтображения);
	
	ДанныеМетокКэш.Сортировать("ВариантОтображения Возр");
	
	Для Каждого СтрокаМеток Из ДанныеМетокКэш Цикл
		СтрокаМеток.ВариантОтображения = ?(СтрокаМеток.ВариантОтображения>ВариантОтображения, СтрокаМеток.ВариантОтображения-1, СтрокаМеток.ВариантОтображения);
	КонецЦикла;
	
	ВариантОтображения = ВариантОтображения - 1;
	
	Элементы.ВариантОтображения.СписокВыбора.Удалить(ВариантОтображения);
	
	КоличествоВариантов = Элементы.ВариантОтображения.СписокВыбора.Количество()-1;
	
	ДанныеРеквизитовФормыКэш.Сортировать("ВариантОтображения Возр");
	
	Для ИндексСписка = 1 По КоличествоВариантов Цикл
		
		Элементы.ВариантОтображения.СписокВыбора[ИндексСписка-1].Значение = ИндексСписка;
		ДанныеРеквизитовФормыКэш[ИндексСписка-1].ВариантОтображения = ИндексСписка;
		
	КонецЦикла;
	
	ВариантОтображения = ?(ВариантОтображения = 0,1,ВариантОтображения);
	ВосстановитьДанныеВариантовОтображения(ВариантОтображения);
	
	ПоследнийВариантОтображения = ВариантОтображения;
	
	СписокВариантов = Новый СписокЗначений;
	
	Для Каждого ЗначениеВарианта Из Элементы.ВариантОтображения.СписокВыбора Цикл
		СписокВариантов.Добавить(ЗначениеВарианта.Значение, ЗначениеВарианта.Представление);
	КонецЦикла;
	ОбновитьСписокВариантов(СписокВариантов);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВариантов(СписокВариантов)
	
	Элементы.ВариантОтображения.СписокВыбора.Очистить();
	
	Для Каждого Вариант Из СписокВариантов Цикл
		Элементы.ВариантОтображения.СписокВыбора.Добавить(Вариант.Значение, Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КомандаЦветаПоУмолчаниюНаСервере()
	УстановитьНастройкиСтандартныхЦветов();
КонецПроцедуры

&НаКлиенте
Процедура КомандаЦветаПоУмолчанию(Команда)
	КомандаЦветаПоУмолчаниюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьВариант(Команда)
	
	СоздатьВариант();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСкопироватьВариант(Команда)
	
	СоздатьВариант(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереименоватьВариант(Команда)
	
	Если Не ЗначениеЗаполнено(ВариантОтображения) Тогда Возврат КонецЕсли;
	
	ПредставлениеВарианта = СтрЗаменить(Элементы.ВариантОтображения.СписокВыбора[ВариантОтображения-1].Представление, "(основной)", "");
	
	ПараметрыОткрытия = Новый Структура("НаименованиеВарианта", ПредставлениеВарианта);
	
	Оповещение = Новый ОписаниеОповещения("УстановитьНаименованиеВарианта", ЭтотОбъект, Параметры);
	
	ОткрытьФорму("Обработка.ПланировщикРесурсов.Форма.ФормаПереименоватьВариант", ПараметрыОткрытия, ЭтотОбъект, , , ,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОсновнойВариант(Команда)
	
	Если ВариантОтображения = 7 ИЛИ ВариантОтображения = 0 ИЛИ Элементы.ВариантОтображения.СписокВыбора.Количество() = 2 Тогда Возврат КонецЕсли;
	
	СохранитьДанныеВариантовОтображенияКлиент(ВариантОтображения, Истина);
	
	КоличествоВариантов = Элементы.ВариантОтображения.СписокВыбора.Количество()-1;
	
	Для ИндексСписка = 1 По КоличествоВариантов Цикл
		
		ПредставлениеВарианта = Элементы.ВариантОтображения.СписокВыбора[ИндексСписка-1].Представление;
		ПредставлениеВарианта= СтрЗаменить(ПредставлениеВарианта, "(основной)", "");
		
		Если ДанныеРеквизитовФормыКэш[ИндексСписка-1].ВариантОтображения = ВариантОтображения Тогда
			
			ПредставлениеВарианта= ?(ПредставлениеВарианта = "Вариант " + Строка(ИндексСписка)
									, "Вариант " + Строка(ИндексСписка) + "(основной)", ПредставлениеВарианта+"(основной)");
			
			Элементы.ВариантОтображения.СписокВыбора[ИндексСписка-1].Представление = ПредставлениеВарианта;
			Продолжить
		КонецЕсли;
		
		Если ДанныеРеквизитовФормыКэш[ИндексСписка-1].ОсновнойВариант Тогда
			ДанныеРеквизитовФормыКэш[ИндексСписка-1].ОсновнойВариант = Ложь;
			Элементы.ВариантОтображения.СписокВыбора[ИндексСписка-1].Представление = ПредставлениеВарианта;
		КонецЕсли;
	КонецЦикла;
	
	СписокВариантов = Новый СписокЗначений;
	Для Каждого ЗначениеВарианта Из Элементы.ВариантОтображения.СписокВыбора Цикл
		СписокВариантов.Добавить(ЗначениеВарианта.Значение, ЗначениеВарианта.Представление);
	КонецЦикла;
	ОбновитьСписокВариантов(СписокВариантов);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьЗаказПокупателя(Команда)
	ДобавлениеИзКорзины = Истина;
	СоздатьЗаказНаряд();
	
	ВыбранныеРесурсы.Очистить();
	НастроитьОтображениеКорзины();
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьЗаказНаПроизводство(Команда)
	ДобавлениеИзКорзины = Истина;
	СоздатьЗаказНаПроизводство();
	
	ВыбранныеРесурсы.Очистить();
	НастроитьОтображениеКорзины();
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьИнтервалПланирования(Команда)
	
	РасписаниеРаботПереключатель = ИнтервалПланирования();
	
	Элементы.ОтобразитьИнтервалПланирования.Пометка = Истина;
	Элементы.ОтобразитьДень.Пометка = Ложь;
	Элементы.ОтобразитьМесяц.Пометка = Ложь;
	Элементы.ГруппаНастройкаИнтервалов.Доступность = Истина;
	Элементы.ГруппаПанельМасштаб.РастягиватьПоГоризонтали = Ложь;
	Элементы.ГруппаШагИнтервалаМин.Видимость = Истина;
	
	МассивДат = Элементы.Календарь.ВыделенныеДаты;
	
	Если МассивДат.Количество()>14 Тогда
		ПоследняяДата = МассивДат[МассивДат.Количество()-1];
		МассивДат.Очистить();
		МассивДат.Добавить(ПоследняяДата);
		ДатаКалендаря = ПоследняяДата;
		ОчиститьПериодОтбора();
		ПериодНадпись = ОбновитьПредставлениеПериода(Период);
	КонецЕсли;
	
	ВывестиТабличныйДокумент(МассивДат);
	
	ЗаполнитьСписокПериодаПозиционирования();
	
	ТекущаяПозиция = Элементы.ЗагрузкаРесурсов.ТекущаяОбласть;
	ТекКоординатаСтроки = Строка(?(ТекущаяПозиция.Низ=1, 3, Формат(ТекущаяПозиция.Низ,"ЧГ=")));
	Элементы.ЗагрузкаРесурсов.ТекущаяОбласть = ЗагрузкаРесурсов.Область("R"+ТекКоординатаСтроки+"C"+"5");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьДень(Команда)
	
	РасписаниеРаботПереключатель = ИнтервалДень();
	
	Элементы.ОтобразитьИнтервалПланирования.Пометка = Ложь;
	Элементы.ОтобразитьДень.Пометка = Истина;
	Элементы.ОтобразитьМесяц.Пометка = Ложь;
	Элементы.ГруппаШагИнтервалаМин.Видимость = Ложь;
	Элементы.ГруппаНастройкаИнтервалов.Доступность = Истина;
	Элементы.ГруппаПанельМасштаб.РастягиватьПоГоризонтали = Ложь;
	
	ВывестиТабличныйДокумент();
	
	ТекущаяПозиция = Элементы.ЗагрузкаРесурсов.ТекущаяОбласть;
	ТекКоординатаСтроки = Строка(?(ТекущаяПозиция.Низ=1, 3, Формат(ТекущаяПозиция.Низ,"ЧГ=")));
	Элементы.ЗагрузкаРесурсов.ТекущаяОбласть = ЗагрузкаРесурсов.Область("R"+ТекКоординатаСтроки+"C"+"5");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьМесяц(Команда)
	
	РасписаниеРаботПереключатель = ИнтервалМесяц();
	
	Элементы.ОтобразитьИнтервалПланирования.Пометка = Ложь;
	Элементы.ОтобразитьДень.Пометка = Ложь;
	Элементы.ОтобразитьМесяц.Пометка = Истина;
	Элементы.ГруппаНастройкаИнтервалов.Доступность = Ложь;
	Элементы.ГруппаПанельМасштаб.РастягиватьПоГоризонтали = Истина;
	
	ВывестиТабличныйДокумент();
	
	ЗаполнитьСписокПериодаПозиционирования();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	МассивДат = Элементы.Календарь.ВыделенныеДаты;
	
	ВывестиТабличныйДокумент(МассивДат);
	
	ЗаполнитьСписокПериодаПозиционирования();
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьВЗаказНаПроизводство(Команда)
	ДобавлениеИзКорзины = Истина;
	ДобавитьВЗаказНаПроизводство();
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьВЗаказНаряд(Команда)
	ДобавлениеИзКорзины = Истина;
	ДобавитьВЗаказНаряд();
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьВСобытие(Команда)
	ДобавлениеИзКорзины = Истина;
	ДобавитьВСобытие();
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьСобытие(Команда)
	ДобавлениеИзКорзины = Истина;
	СоздатьСобытие();
	
	ВыбранныеРесурсы.Очистить();
	НастроитьОтображениеКорзины();
КонецПроцедуры

&НаКлиенте
Процедура КомандаПеренестиВДокумент(Команда)
	ПеренестиВДокумент()
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодобратьВКорзину(Команда)
	
	СписокДатПериода.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	ВыделенныеОбласти = Элементы.ЗагрузкаРесурсов.ПолучитьВыделенныеОбласти();
	
	ЗавершатьПодбор = Ложь;
	
	Если РасписаниеРаботПереключатель = ИнтервалПланирования() Тогда
		ЗавершатьПодбор = ЗавершатьПриНаличииНеРабочихПериодов(ВыделенныеОбласти);
	КонецЕсли;
	
	Если Не ЗавершатьПодбор Тогда
		ПодобратьВКорзинуИзКонтекстногоМенюЗавершение(ВыделенныеОбласти);
	Иначе
		
		ПараметрыОповещения = Новый Структура("ВыделенныеОбласти", ВыделенныеОбласти);
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПодборИзКонтекстногоМеню", ЭтаФорма, ПараметрыОповещения);
		
		Режим = РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Выделенные области содержат интервалы за границами графика рабочего времени. Продолжить?'"), Режим, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МенюСоздатьСобытие(Команда)
	ЗаполнитьБуфер();
	ДобавлениеИзКорзины = Ложь;
	СоздатьСобытие();
	БуферДобавленияВДокумент.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура МенюСоздатьЗаказПокупателя(Команда)
	ЗаполнитьБуфер();
	ДобавлениеИзКорзины = Ложь;
	СоздатьЗаказНаряд();
	БуферДобавленияВДокумент.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура МенюСоздатьЗаказНаПроизводство(Команда)
	ЗаполнитьБуфер();
	ДобавлениеИзКорзины = Ложь;
	СоздатьЗаказНаПроизводство();
	БуферДобавленияВДокумент.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура МенюДобавитьВЗаказНаряд(Команда)
	ЗаполнитьБуфер();
	ДобавлениеИзКорзины = Ложь;
	ДобавитьВЗаказНаряд();
КонецПроцедуры

&НаКлиенте
Процедура МенюДобавитьВЗаказНаПроизводство(Команда)
	ЗаполнитьБуфер();
	ДобавлениеИзКорзины = Ложь;
	ДобавитьВЗаказНаПроизводство();
КонецПроцедуры

&НаКлиенте
Процедура МенюДобавитьВСобытие(Команда)
	ЗаполнитьБуфер();
	ДобавлениеИзКорзины = Ложь;
	ДобавитьВСобытие();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиФормированияТабличногоДокумента

&НаКлиенте
Процедура ВывестиТабличныйДокументКлиент()
	
	МассивДат = Элементы.Календарь.ВыделенныеДаты;
	
	Если МассивДат.Количество()>14 И РасписаниеРаботПереключатель = ИнтервалПланирования() Тогда
		Элементы.ОтобразитьИнтервалПланирования.Пометка = Ложь;
		Элементы.ОтобразитьДень.Пометка = Истина;
		РасписаниеРаботПереключатель = ИнтервалДень()
	КонецЕсли;
	
	ВывестиТабличныйДокумент(МассивДат, Истина);
	
	ОчиститьПериодОтбора();
	ЗаполнитьСписокПериодаПозиционирования();
	
	Если Не РасписаниеРаботПереключатель = ИнтервалМесяц() И Не ЗначениеЗаполнено(ПериодПозиционирования) Тогда
		Элементы.ЗагрузкаРесурсов.ТекущаяОбласть = ЗагрузкаРесурсов.Область("R7C5");
		СпозиционироватьНаОбласти(ПредставлениеПериода);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиТабличныйДокумент(МассивДат = Неопределено, ОткрытиеФормы = Ложь, ВыводСКалендаря = Ложь)
	
	КоординатыДней.Очистить();
	КоординатыДокументов.Очистить();
	РесурсыПоСтрокам.Очистить();

	Элементы.ПериодПозиционирования.СписокВыбора.Очистить();
	Элементы.ПредставлениеПериода.СписокВыбора.Очистить();
	Элементы.ОкончаниеИнтервалаОтображения.СписокВыбора.Очистить();
	Элементы.НачалоИнтервалаОтображения.СписокВыбора.Очистить();
	
	Если Не МассивДат = Неопределено Тогда
		СписокДатПериода.Очистить();
		СписокДатПериода.ЗагрузитьЗначения(МассивДат);
		СписокДатПериода.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	КонецЕсли;
	
	Если Не СписокДатПериода.Количество() Тогда 
		
		ДатаКалендаря = НачалоДня(ТекущаяДатаСеанса());
		
		СписокДатПериода.Добавить(ДатаКалендаря);
		Элементы.Календарь.ВыделенныеДаты.Добавить(ДатаКалендаря);
		Период.ДатаНачала = ДатаКалендаря;
		Период.ДатаОкончания = ДатаКалендаря;
		ПериодНадпись = ОбновитьПредставлениеПериода(Период);
	КонецЕсли;
	
	Если РасписаниеРаботПереключатель = ИнтервалМесяц() И Не ВыводСКалендаря Тогда
		ЗаполнитьСписокДнямиПоМесяцам();
		Если СписокДатПериода.Количество() Тогда
			Период.ДатаНачала = СписокДатПериода[0].Значение;
			Период.ДатаОкончания = СписокДатПериода[СписокДатПериода.Количество()-1].Значение;
			ПериодНадпись = ОбновитьПредставлениеПериода(Период);
		КонецЕсли
	КонецЕсли;
	
	ЗагрузкаРесурсов.Очистить();
	
	СтруктураЦветов = Новый Структура;
	
	СтруктураЦветов.Вставить("ЦветЯчейкиРесурсСвободен", ?(Не ЦветРабочееВремя = Неопределено, ЦветРабочееВремя,ЦветаСтиля.РабочееВремяЗанятоПолностью));
	СтруктураЦветов.Вставить("ЦветЯчейкиРесурсНеРедактируется",?(Не ЦветНеРабочееВремя = Неопределено, ЦветНеРабочееВремя,ЦветаСтиля.РабочееВремяСвободноДоступно));
	
	Обработка = РеквизитФормыВЗначение("Объект");
	МакетПланированиеРесурсов = Обработка.ПолучитьМакет("КалендарьЗагрузки");
	
	ОбластьМакета = МакетПланированиеРесурсов.ПолучитьОбласть("ПредставлениеПериода|Заголовок");
	
	СтруктураШагаПланирования = СтруктураИнтервалаПланирования();
	
	Если СтруктураШагаПланирования.Количество() Тогда
		МинимальныйШагПланирования = СтруктураШагаПланирования.МинимальныйИнтервал;
		РесурсМинимальногоИнтервала = СтруктураШагаПланирования.Ресурс;
	Иначе
		РесурсМинимальногоИнтервала = Неопределено;
		МинимальныйШагПланирования = 1200
	КонецЕсли;
	
	МинимальныйИнтервал = 5;
	
	Элементы.ГруппаИнтервалОтображения.Видимость = ?(РасписаниеРаботПереключатель = ИнтервалПланирования(), Истина, Ложь);
	Элементы.ГруппаОтборКонтакт.Видимость = ?(РасписаниеРаботПереключатель = ИнтервалПланирования(), Истина, Ложь);
	
	РесурсыИДокументы = СтруктураРесурсовИДокументов();
	
	ТаблицаРесурсовПредприятия = РесурсыИДокументы.ТаблицаРесурсов;
	
	Если Не ТаблицаРесурсовПредприятия.Количество() Тогда
		
		ОбластьМакета = МакетПланированиеРесурсов.ПолучитьОбласть("ЗаставкаБезРесурсов|Текст");
		
		СтруктураРасшифровки = Новый Структура("ВидРасшифровки", "СоздатьНовыйРесурс");
		ОбластьМакета.Параметры.Расшифровка = СтруктураРасшифровки;

		Если Не ДанныеМеток.Количество() Тогда
			ТекстПустогоТабличногоДокумента = НСтр("ru = 'Ресурсы предприятия отсутствуют. Создайте элементы в справочнике ""Ресурсы предприятия"" и установите график работы.
			|После добавления ресурса нажмите кнопку ""Обновить""'");
		
			ОбластьМакета.Параметры.ТекстСообщения = ТекстПустогоТабличногоДокумента;
			ЗагрузкаРесурсов.Вывести(ОбластьМакета);
			
		Иначе
			ТекстПустогоТабличногоДокумента = НСтр("ru = 'Ресурсы предприятия удовлетворяющие параметрам отбора отсутствуют. Измените параметры отбора.'");
			
			ОбластьМакета.Параметры.ТекстСообщения = ТекстПустогоТабличногоДокумента;
			ЗагрузкаРесурсов.Вывести(ОбластьМакета);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ЗагрузкаРесурсов.ФиксацияСлева = 4;
	ЗагрузкаРесурсов.ФиксацияСверху = 4;
	
	ПакетДанныхРесурсов = ПолучитьРасписаниеЗагрузкиРесурсов(ТаблицаРесурсовПредприятия.ВыгрузитьКолонку("Ресурс"),
		РесурсыИДокументы.СписокДокументов);
	
	РабочиеПериоды = ПакетДанныхРесурсов.РабочиеПериоды;
	
	Если ОткрытиеФормы И ЭтоПодбор И ЕстьРабочиеПериоды(РабочиеПериоды) И СписокДатПериода.Количество() <= 14 Тогда
		ТолькоРабочееВремя = Истина;
		Элементы.ГруппаИнтервалОтображения.Доступность = Ложь;
	КонецЕсли;
	
	РасписаниеЗагрузки = ПакетДанныхРесурсов.РасписаниеЗагрузки;

	Если РасписаниеРаботПереключатель = ИнтервалПланирования() И СписокДатПериода.Количество() <= 14 Тогда
		
		Элементы.ОтобразитьИнтервалПланирования.Пометка = Истина;
		
		ВывестиРасписаниеКратноИнтервалам(МакетПланированиеРесурсов, ОбластьМакета, СтруктураЦветов,
			ТаблицаРесурсовПредприятия, РабочиеПериоды, РасписаниеЗагрузки, РесурсМинимальногоИнтервала);
		
	Иначе
		
		Если РасписаниеРаботПереключатель = ИнтервалПланирования() Тогда
			
			РасписаниеРаботПереключатель = ИнтервалДень();
			
			Элементы.ОтобразитьИнтервалПланирования.Пометка = Ложь;
			Элементы.ОтобразитьДень.Пометка = Истина;
			Элементы.ОтобразитьМесяц.Пометка = Ложь;
			Элементы.ГруппаНастройкаИнтервалов.Доступность = Истина;
			
			ВывестиРасписаниеПоДням(МакетПланированиеРесурсов, ОбластьМакета, СтруктураЦветов,
				ТаблицаРесурсовПредприятия, РабочиеПериоды, РасписаниеЗагрузки);
			
		ИначеЕсли РасписаниеРаботПереключатель = ИнтервалДень() Тогда
			ВывестиРасписаниеПоДням(МакетПланированиеРесурсов, ОбластьМакета, СтруктураЦветов,
				ТаблицаРесурсовПредприятия, РабочиеПериоды, РасписаниеЗагрузки);
		ИначеЕсли РасписаниеРаботПереключатель = ИнтервалМесяц() Тогда
			ВывестиРасписаниеПоМесяцам(МакетПланированиеРесурсов, ОбластьМакета, СтруктураЦветов,
				ТаблицаРесурсовПредприятия, РабочиеПериоды, РасписаниеЗагрузки);
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ПредставлениеПериода.Доступность = СписокДатПериода.Количество()<> 1;
	Элементы.ПредставлениеПериода.Видимость = Не РасписаниеРаботПереключатель = ИнтервалМесяц();
	
	Если ОткрытиеФормы Тогда
		Элементы.ЗагрузкаРесурсов.ТекущаяОбласть = ЗагрузкаРесурсов.Область("R7C5");
	КонецЕсли;
	
	ПредставлениеПериода = ?(СписокДатПериода.Количество()=1, СписокДатПериода[0].Значение,ПредставлениеПериода);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРасписаниеПоМесяцам(МакетПланированиеРесурсов, ОбластьМакетаЗаголовка, СтруктураЦветов,
	ТаблицаРесурсовПредприятия, РабочиеПериоды, РасписаниеЗагрузки)
	
	ЗагрузкаРесурсов.ФиксацияСлева = 0;
	ЗагрузкаРесурсов.ФиксацияСверху = 0;
	
	Если Не СписокДатПериода.Количество() Тогда СписокДатПериода.Добавить(ДатаКалендаря) КонецЕсли;
	
	МатрицаИнтервалов = ПланированиеРесурсовУНФ.СформироватьКолонкиИнтервалов();
	
	Элементы.ПериодПозиционирования.Видимость = Ложь;
	
	СплошнаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	
	РасписаниеЗагрузкиГод = РасписаниеЗагрузки.Скопировать();
	РасписаниеЗагрузкиГод.Свернуть("РесурсПредприятия, Месяц, Год", "Загрузка");
	
	КоличествоСтрокВОбласти = МаксимальноеКоличествоЗадействованныхРесурсовВЕдиницуПериода(
		ТаблицаРесурсовПредприятия.ВыгрузитьКолонку("Ресурс"));
	
	ТЗГодыПериода = ТаблицаПериодаГодМесяц();
	ТЗМесяцыПериода = ТаблицаПериодаГодМесяц(Истина);
	
	СтруктураРасшифровкиПериода = Новый Структура;
	
	СтруктураРасшифровкиПериода.Вставить("ОстатокПоЗагрузке", 0);
	СтруктураРасшифровкиПериода.Вставить("ЭтоРабочийПериод", Ложь);
	
	Для Каждого СтрокаГод Из ТЗГодыПериода Цикл
		
		ОбластьМакета = МакетПланированиеРесурсов.ПолучитьОбласть("ГодВывода|ЗаголовокМесяц");
		ОбластьМакета.Параметры.Год = Формат(СтрокаГод.Год,"ЧГ=");
		ОбластьМакета.Параметры.РасшифровкаГод = СтрокаГод.Год;
		ЗагрузкаРесурсов.Вывести(ОбластьМакета);
		
		ПараметрыОтбора = Новый Структура("Год", СтрокаГод.Год);
		
		НайденныеСтрокиМесяцы = ТЗМесяцыПериода.НайтиСтроки(ПараметрыОтбора);
		
		НомерМесяца = 1;
		
		ОбластьМакета = МакетПланированиеРесурсов.ПолучитьОбласть("ГодВывода|ЗаголовокМесяц");
		
		Для Каждого СтрокаПериод Из НайденныеСтрокиМесяцы Цикл
			
			ОбластьМакетаМесяц = МакетПланированиеРесурсов.ПолучитьОбласть("Месяц|ЗаголовокМесяц");
			ОбластьМакетаМесяц.Параметры.Месяц = МесяцПоНомеру(СтрокаПериод.Месяц);
			ОбластьМакетаМесяц.Параметры.МесяцГод = Дата(СтрокаГод.Год,СтрокаПериод.Месяц,1,0,0,0);
			
			ИндексСтрокиВОбласти = 0;
			ИндексСтроки = 3;
			
			Для Каждого РесурсПредприятия Из ТаблицаРесурсовПредприятия Цикл
				
				Ресурс = РесурсПредприятия.Ресурс;
				
				ПараметрыОтбора = Новый Структура("РесурсПредприятия, Год, Месяц", Ресурс, СтрокаГод.Год, СтрокаПериод.Месяц);
				
				СводнаяЗагрузкаЗаМесяц = ЗагрузкаРесурсаЗаМесяц(РабочиеПериоды, Ресурс, СтрокаПериод.Год, СтрокаПериод.Месяц);
				
				ОбластьМакетаРесурс = ОбластьМакетаМесяц.Область(ИндексСтроки,1,ИндексСтроки,1);
				
				ОбластьМакетаРесурс.Текст = Строка(Ресурс)+"
				|"+"Шаг план.: " + РасшифровкаКратности(РесурсПредприятия)+". "+"Мощность:"+Строка(РесурсПредприятия.Мощность);
				ОбластьМакетаРесурс.Расшифровка = Ресурс;
				
				ОбластьМакетаРесурс.ГраницаСправа = СплошнаяЛиния;
				ОбластьМакетаРесурс.ГраницаСлева = СплошнаяЛиния;
				ОбластьМакетаРесурс.ГраницаСнизу = СплошнаяЛиния;
				ОбластьМакетаРесурс.ГраницаСверху = СплошнаяЛиния;
				ОбластьМакетаРесурс.ЦветРамки = WebЦвета.Белый;
				ОбластьМакетаРесурс.ЦветФона = WebЦвета.БледноЛиловый;
				ОбластьМакетаРесурс.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				
				СтруктураРасшифровки = Новый Структура("Ресурс, Год, Месяц, ВидРасшифровки",Ресурс, СтрокаПериод.Год, СтрокаПериод.Месяц, "ПоДням");
				
				ЗагрузкаРесурса = 0;
				
				КратностьПланирования = РесурсПредприятия.КратностьПланирования;
				
				Для ДеньПериода = 1 По СтрокаПериод.КоличествоДней Цикл
					
					ДатаПериода = Дата(СтрокаГод.Год, СтрокаПериод.Месяц, ДеньПериода, 0, 0, 0);
					
					ПараметрыОтбора = Новый Структура("РесурсПредприятия, Период",Ресурс,ДатаПериода);
					НайденныеСтроки = РасписаниеЗагрузки.НайтиСтроки(ПараметрыОтбора);
					
					ДокументыРасшифровки = ПланированиеРесурсовУНФ.ТаблицаДокументовЗаПериод(НайденныеСтроки, ДатаПериода, ДатаПериода, КратностьПланирования, Истина);
					
					СтруктураИтоговЗаДень = ПланированиеРесурсовУНФ.ИтогиПоДню(ДатаПериода, КратностьПланирования, РабочиеПериоды
					,Ресурс, РасписаниеЗагрузки, ДокументыРасшифровки, МатрицаИнтервалов, НайденныеСтроки);
					
					ЗагрузкаРесурса = ЗагрузкаРесурса + СтруктураИтоговЗаДень.Загрузка;
					
				КонецЦикла;
				
				ОбластьМакетаРесурсПараметрыЗагрузка = ОбластьМакетаМесяц.Область(ИндексСтроки,2,ИндексСтроки,2);
				
				ОбластьМакетаРесурсПараметрыЗагрузка.ГраницаСправа = СплошнаяЛиния;
				ОбластьМакетаРесурсПараметрыЗагрузка.ГраницаСлева = СплошнаяЛиния;
				ОбластьМакетаРесурсПараметрыЗагрузка.ГраницаСнизу = СплошнаяЛиния;
				ОбластьМакетаРесурсПараметрыЗагрузка.ГраницаСверху = СплошнаяЛиния;
				ОбластьМакетаРесурсПараметрыЗагрузка.ЦветРамки = ЦветаСтиля.РабочееВремяСвободноДоступно;
				ОбластьМакетаРесурсПараметрыЗагрузка.Расшифровка = СтруктураРасшифровки;
				
				ОбновитьОтображениеОбластиСогласноЗагрузке(ОбластьМакетаРесурсПараметрыЗагрузка, ЗагрузкаРесурса, СводнаяЗагрузкаЗаМесяц,,Истина);
				
				ОбластьМакетаРесурсПараметрыЗагрузка.Текст = Строка(ЗагрузкаРесурса);
				
				ОбластьМакетаРесурсПараметрыМощность = ОбластьМакетаМесяц.Область(ИндексСтроки,3,ИндексСтроки,3);
				
				ОбластьМакетаРесурсПараметрыМощность.ГраницаСправа = СплошнаяЛиния;
				ОбластьМакетаРесурсПараметрыМощность.ГраницаСлева = СплошнаяЛиния;
				ОбластьМакетаРесурсПараметрыМощность.ГраницаСнизу = СплошнаяЛиния;
				ОбластьМакетаРесурсПараметрыМощность.ГраницаСверху = СплошнаяЛиния;
				ОбластьМакетаРесурсПараметрыМощность.ЦветРамки = ЦветаСтиля.РабочееВремяСвободноДоступно;
				ОбластьМакетаРесурсПараметрыМощность.Расшифровка = СтруктураРасшифровки;
				
				ОбновитьОтображениеОбластиСогласноЗагрузке(ОбластьМакетаРесурсПараметрыМощность, ЗагрузкаРесурса, СводнаяЗагрузкаЗаМесяц,,Истина);
				
				ОбластьМакетаРесурсПараметрыМощность.Текст =  Строка(СводнаяЗагрузкаЗаМесяц);
				
				ИндексСтрокиВОбласти = ИндексСтрокиВОбласти + 1;
				ИндексСтроки = ИндексСтроки +1;
				
			КонецЦикла;
			
			Пока ИндексСтрокиВОбласти < КоличествоСтрокВОбласти Цикл
				
				ОбластьМакетаРесурс = ОбластьМакетаМесяц.Область(ИндексСтроки,1,ИндексСтроки,1);
				
				ОбластьМакетаРесурс.ГраницаСправа = СплошнаяЛиния;
				ОбластьМакетаРесурс.ГраницаСлева = СплошнаяЛиния;
				ОбластьМакетаРесурс.ГраницаСнизу = СплошнаяЛиния;
				ОбластьМакетаРесурс.ГраницаСверху = СплошнаяЛиния;
				ОбластьМакетаРесурс.ЦветРамки = WebЦвета.Белый;
				
				ОбластьМакетаРесурсПараметры = ОбластьМакетаМесяц.Область(ИндексСтроки,2,ИндексСтроки,2);
				
				ОбластьМакетаРесурсПараметры.ГраницаСправа = СплошнаяЛиния;
				ОбластьМакетаРесурсПараметры.ГраницаСлева = СплошнаяЛиния;
				ОбластьМакетаРесурсПараметры.ГраницаСнизу = СплошнаяЛиния;
				ОбластьМакетаРесурсПараметры.ГраницаСверху = СплошнаяЛиния;
				ОбластьМакетаРесурсПараметры.ЦветРамки = WebЦвета.Белый;
				ОбластьМакетаРесурсПараметры.ЦветФона = ЦветаСтиля.РабочееВремяСвободноДоступно;
				
				ОбластьМакетаРесурс.ЦветФона = WebЦвета.БледноЛиловый;
				
				ИндексСтрокиВОбласти = ИндексСтрокиВОбласти + 1;
				ИндексСтроки = ИндексСтроки +1;
				
			КонецЦикла;
			
			Если НомерМесяца = 1 ИЛИ НомерМесяца%3 = 1 Тогда
				ЗагрузкаРесурсов.Вывести(ОбластьМакетаМесяц);
			Иначе
				ЗагрузкаРесурсов.Присоединить(ОбластьМакетаМесяц);
			КонецЕсли;
			
			НомерМесяца = НомерМесяца + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Элементы.ЗагрузкаРесурсов.ТекущаяОбласть = ЗагрузкаРесурсов.Область("R1C1");
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРасписаниеПоДням(МакетПланированиеРесурсов, ОбластьМакетаЗаголовка, СтруктураЦветов,
	ТаблицаРесурсовПредприятия, РабочиеПериоды, РасписаниеЗагрузки)
	
	Элементы.ПериодПозиционирования.Видимость = Ложь;
	СписокДатПериодаДляФормированияГрафикаПоДням.Очистить();
	
	СплошнаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	БелыйЦвет = WebЦвета.Белый;
	
	МатрицаИнтервалов = ПланированиеРесурсовУНФ.СформироватьКолонкиИнтервалов();
	
	Если Не СписокДатПериода.Количество() Тогда СписокДатПериода.Добавить(ДатаКалендаря) КонецЕсли;
	
	СписокДатПериодаДляФормированияГрафикаПоДням.ЗагрузитьЗначения(СписокДатПериода.ВыгрузитьЗначения());
	
	Если ТолькоРабочееВремя Тогда
		
		Для Каждого ЭлементСписка Из СписокДатПериода Цикл
			
			Если Не ЭтоРабочийИнтервал(ЭлементСписка.Значение, РабочиеПериоды,,, Истина) Тогда
				
				НайденныйЭлементСписка = СписокДатПериодаДляФормированияГрафикаПоДням.НайтиПоЗначению(ЭлементСписка.Значение);
				СписокДатПериодаДляФормированияГрафикаПоДням.Удалить(НайденныйЭлементСписка);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не СписокДатПериодаДляФормированияГрафикаПоДням.Количество() Тогда
			
			ОбластьМакета = МакетПланированиеРесурсов.ПолучитьОбласть("ЗаставкаБезРесурсов|Текст");
			
			СтруктураРасшифровки = Новый Структура("ВидРасшифровки", "СоздатьНовыйРесурс");
			ОбластьМакета.Параметры.Расшифровка = СтруктураРасшифровки;
			
			ТекстПустогоТабличногоДокумента = НСтр(
				"ru = 'Ресурсы предприятия с графиком работы в выбранный период отсутствуют.'");
			ОбластьМакета.Параметры.ТекстСообщения = ТекстПустогоТабличногоДокумента;
			ЗагрузкаРесурсов.Вывести(ОбластьМакета);
			
			Возврат 
		КонецЕсли;
		
	КонецЕсли;
	
	КоличествоПериодов = СписокДатПериодаДляФормированияГрафикаПоДням.Количество();
	
	Для Каждого ЭлементСписка Из СписокДатПериода Цикл
		Элементы.ПредставлениеПериода.СписокВыбора.Добавить(ЭлементСписка.Значение, Формат(ЭлементСписка.Значение,"ДФ=dd.MM.yyyy"));
	КонецЦикла;
	
	ПредставлениеПериода = СписокДатПериодаДляФормированияГрафикаПоДням[0].Значение;
	
	Если КоличествоПериодов = 0 Тогда Возврат КонецЕсли;
	
	КоличествоОбъединенныхЯчеек = 0;
	
	ТЗГодыПериода = ТаблицаПериодаГодМесяц(, СписокДатПериодаДляФормированияГрафикаПоДням);
	
	Для Каждого СтрокаГод Из ТЗГодыПериода Цикл
		
		КоличествоДней = СтрокаГод.КоличествоДней;
		
		ОбластьОбъединения = ОбластьМакетаЗаголовка.Область(1,5+?(КоличествоОбъединенныхЯчеек=0,0, КоличествоОбъединенныхЯчеек),1,КоличествоОбъединенныхЯчеек+КоличествоДней+4);
		
		ОбластьОбъединения.Текст = Строка(СтрокаГод.Год);
		ОбластьОбъединения.ГраницаСправа = СплошнаяЛиния;
		ОбластьОбъединения.ГраницаСнизу = СплошнаяЛиния;
		
		ОбластьОбъединения.Объединить();
		
		КоличествоОбъединенныхЯчеек = КоличествоОбъединенныхЯчеек + КоличествоДней;
		
	КонецЦикла;
	
	ЗагрузкаРесурсов.Вывести(ОбластьМакетаЗаголовка);
	
	ОбластьМакета = МакетПланированиеРесурсов.ПолучитьОбласть("ПредставлениеВремени|Заголовок");
	ЗагрузкаРесурсов.Вывести(ОбластьМакета);
	
	ИндексКоординаты = 5;
	
	НаименованияДняНеделиПоНомеру = СоответствиеДнейНедели();
	ШагЦветТекста = WebЦвета.ЛососьСветлый;
	СерыйЦветТекста = WebЦвета.Серый;
	
	Для Каждого ДеньСписка Из СписокДатПериодаДляФормированияГрафикаПоДням Цикл
		
		НомерДняНедели = ДеньНедели(ДеньСписка.Значение);
		
		ОбластьМакета = МакетПланированиеРесурсов.ПолучитьОбласть("ПредставлениеВремени|ЕдиницаПериодаДень");
		ОбластьМакета.Параметры.Интервал = Формат(ДеньСписка.Значение,"ДФ=dd.MM")+ " " + НаименованияДняНеделиПоНомеру.Получить(НомерДняНедели);
		ОбластьМакета.Параметры.Дата = ДеньСписка.Значение;
		
		ОбластьМакета.Область(3,1,3,1).ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		
		Если ДеньСписка.Значение = СписокДатПериодаДляФормированияГрафикаПоДням[СписокДатПериодаДляФормированияГрафикаПоДням.Количество()-1].Значение Тогда
			ОбластьМакета.Область(3,1,3,1).ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		КонецЕсли;
		
		Если День(ДеньСписка.Значение) = 1 Тогда
			ОбластьМакета.Область(3,1,2,1).ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			ОбластьМакета.Область(3,1,1,1).ЦветРамки = ШагЦветТекста;
		Иначе
			ОбластьМакета.Область(3,1,1,1).ЦветРамки = СерыйЦветТекста;
		КонецЕсли;
		
		Если НомерДняНедели = 6 Или НомерДняНедели = 7 Тогда
			ОбластьМакета.Область(3,1,1,1).ЦветТекста = ШагЦветТекста;
		КонецЕсли;
		
		ЗагрузкаРесурсов.Присоединить(ОбластьМакета);
		
		НоваяСтрока = КоординатыДней.Добавить();
		НоваяСтрока.КоординатаНачала = ИндексКоординаты;
		НоваяСтрока.КоординатаОкончания = ИндексКоординаты;
		НоваяСтрока.Дата = ДеньСписка.Значение;
		
		ИндексКоординаты = ИндексКоординаты + 1;
		
	КонецЦикла;
	
	ОбластьМакета = МакетПланированиеРесурсов.ПолучитьОбласть("Разделитель|Заголовок");
	ЗагрузкаРесурсов.Вывести(ОбластьМакета);
	
	НомерСтроки = 7;
	НомерГруппы = 1;
	
	Для Каждого РесурсПредприятия Из ТаблицаРесурсовПредприятия Цикл
		
		КратностьПланирования = ?(РесурсПредприятия.КратностьПланирования = 0, 5, РесурсПредприятия.КратностьПланирования);
		
		ОбластьРесурс = МакетПланированиеРесурсов.ПолучитьОбласть("Ресурсы|Заголовок");
		
		ОбластьРасшифровкаРесурса = ОбластьРесурс.Область(2,1,2,1);
		ОбластьРасшифровкаРесурса.Параметр = РесурсПредприятия.Ресурс;
		
		СтруктураРасшифровкиРесурса = Новый Структура;
		
		СтруктураРасшифровкиРесурса.Вставить("Ресурс", РесурсПредприятия.Ресурс);
		СтруктураРасшифровкиРесурса.Вставить("КонтролироватьЗагрузкуТолькоВРабочееВремя", РесурсПредприятия.Ресурс.КонтролироватьЗагрузкуТолькоВРабочееВремя);
		
		ОбластьРасшифровкаРесурса.Расшифровка = СтруктураРасшифровкиРесурса;
		
		ОбластьРасшифровкаРесурсаШагПланирования = ОбластьРесурс.Область(3,1,3,1);
		ОбластьРасшифровкаРесурсаШагПланирования.Параметр = "Шаг план.: " +РасшифровкаКратности(РесурсПредприятия)+". "+"Мощность:"+Строка(РесурсПредприятия.Мощность);
		
		ОбластьРасшифровкаПоДокументам = МакетПланированиеРесурсов.ПолучитьОбласть("РасшифровкаПоДокументам|Заголовок");
		
		ЕстьРасшифровка = Ложь;
		
		КратностьИнтервала = КоличествоПериодов;
		
		Интервал = 1;
		ЗагрузкаЗаПериод = 0;
		ДоступноеЗначениеЗагрузки = 0;
		
		Для Каждого ДеньСписка Из СписокДатПериодаДляФормированияГрафикаПоДням Цикл
			
			ПараметрыОтбора = Новый Структура("РесурсПредприятия, Период",РесурсПредприятия.Ресурс, НачалоДня(ДеньСписка.Значение));
			НайденныеСтроки = РасписаниеЗагрузки.НайтиСтроки(ПараметрыОтбора);
			
			ВозможнаяЗагрузкаРесурсаВДень = 0;
			
			ИнтервалВыводаОбласти = Интервал;
			
			Ресурс = РесурсПредприятия.Ресурс;
			
			ОбластьОбъединения = ОбластьРесурс.Область(2,4+ИнтервалВыводаОбласти,3,4+ИнтервалВыводаОбласти);
			ОбластьОбъединения.ЦветФона = СтруктураЦветов.ЦветЯчейкиРесурсСвободен;
			
			ВывестиРазделителиПериода(ОбластьОбъединения,СплошнаяЛиния,БелыйЦвет);
			
			ДокументыРасшифровки = ПланированиеРесурсовУНФ.ТаблицаДокументовЗаПериод(НайденныеСтроки,
				ДеньСписка.Значение, ДеньСписка.Значение, КратностьИнтервала, Истина);
			
			СтруктураИтоговЗаДень = ПланированиеРесурсовУНФ.ИтогиПоДню(ДеньСписка.Значение, КратностьПланирования,
				РабочиеПериоды, Ресурс, РасписаниеЗагрузки, ДокументыРасшифровки, МатрицаИнтервалов, НайденныеСтроки);
			
			ЗагрузкаРесурса = СтруктураИтоговЗаДень.Загрузка;
			
			ВозможнаяЗагрузкаРесурсаВДень = ЗагрузкаРесурсаНаДату(РабочиеПериоды, Ресурс, ДеньСписка.Значение);
			Интервал = Интервал + 1;
			
			ЭтоРабочийПериод = ?(ВозможнаяЗагрузкаРесурсаВДень = 0, Ложь, Истина);
			
			ЗагрузкаЗаПериод = ЗагрузкаЗаПериод + ЗагрузкаРесурса;
			
			ОстатокПоЗагрузке = ВозможнаяЗагрузкаРесурсаВДень - ЗагрузкаЗаПериод;
			
			СтруктураРасшифровки = Новый Структура;
			СтруктураРасшифровки.Вставить("Ресурс", Ресурс);
			СтруктураРасшифровки.Вставить("День", ДеньСписка.Значение);
			СтруктураРасшифровки.Вставить("ВидРасшифровки", "КратноИнтервалам");
			СтруктураРасшифровки.Вставить("ОстатокПоЗагрузке", ОстатокПоЗагрузке);
			ОбластьОбъединения.Расшифровка = СтруктураРасшифровки;
			
			ОбластьОбъединения.Объединить();
			
			ОбновитьОтображениеОбластиСогласноЗагрузке(ОбластьОбъединения, ЗагрузкаРесурса,
				ВозможнаяЗагрузкаРесурсаВДень, , , СтруктураИтоговЗаДень.ЕстьПревышение, , СтруктураИтоговЗаДень,
				ЭтоРабочийПериод);
			
			ДоступноеЗначениеЗагрузки = ДоступноеЗначениеЗагрузки + ВозможнаяЗагрузкаРесурсаВДень;
			
		КонецЦикла;
		
		ШрифтИтогов6 = Новый Шрифт(,6,,,,);
		
		ШрифтИтогов8 = Новый Шрифт(,8,,,,);
		
		ОбластьИтоги1 = ОбластьРесурс.Область(2,2,2,2);
		ОбластьИтоги1.Обвести(СплошнаяЛиния);
		ОбластьИтоги1.ЦветРамки = WebЦвета.Белый;
		ОбластьИтоги1.ЦветФона = ?(ЗагрузкаЗаПериод = 0 И Не ДоступноеЗначениеЗагрузки = 0,СтруктураЦветов.ЦветЯчейкиРесурсСвободен, ОбластьИтоги1.ЦветФона);
		
		ОбновитьОтображениеОбластиСогласноЗагрузке(ОбластьИтоги1, ЗагрузкаЗаПериод, ДоступноеЗначениеЗагрузки,,Истина);
		
		ОбластьИтоги1.Текст = Строка(ЗагрузкаЗаПериод);
		
		ОбластьИтоги1.Шрифт = ?(ЗагрузкаЗаПериод>=1000, ШрифтИтогов6, ШрифтИтогов8);
		
		
		ОбластьИтоги2 = ОбластьРесурс.Область(2,3,2,3);
		ОбластьИтоги2.Обвести(СплошнаяЛиния);
		ОбластьИтоги2.ЦветРамки = WebЦвета.Белый;
		ОбластьИтоги2.ЦветФона = ?(ЗагрузкаЗаПериод = 0 И Не ДоступноеЗначениеЗагрузки = 0,СтруктураЦветов.ЦветЯчейкиРесурсСвободен, ОбластьИтоги2.ЦветФона);
		
		ОбновитьОтображениеОбластиСогласноЗагрузке(ОбластьИтоги2, ЗагрузкаЗаПериод, ДоступноеЗначениеЗагрузки,,Истина);
		
		ОбластьИтоги2.Текст = Строка(ДоступноеЗначениеЗагрузки);
		
		ОбластьИтоги2.Шрифт = ?(ДоступноеЗначениеЗагрузки>=1000, ШрифтИтогов6, ШрифтИтогов8);
		
		
		Если ЕстьРасшифровка Тогда
			ЗагрузкаРесурсов.НачатьАвтогруппировкуСтрок();
			
			ЗагрузкаРесурсов.Вывести(ОбластьРесурс,НомерГруппы,"Расшифровка по документам"+Строка(Ресурс), Ложь);
			ЗагрузкаРесурсов.Вывести(ОбластьРасшифровкаПоДокументам,НомерГруппы+1,"Расшифровка"+Строка(Ресурс), Ложь);
			
			ЗагрузкаРесурсов.ЗакончитьАвтогруппировкуСтрок();
		Иначе
			ЗагрузкаРесурсов.Вывести(ОбластьРесурс,НомерГруппы,"Расшифровка по документам"+Строка(Ресурс), Ложь);
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 2;
		НомерГруппы = НомерГруппы + 1;
		
	КонецЦикла;
	
	ОбластьДобавитьРесурс = МакетПланированиеРесурсов.ПолучитьОбласть("ДобавитьРесурс|Заголовок"); 
	СтруктураРасшифровки = Новый Структура("ВидРасшифровки", "СоздатьНовыйРесурс");
	ОбластьДобавитьРесурс.Параметры.Расшифровка = СтруктураРасшифровки;
	ЗагрузкаРесурсов.Вывести(ОбластьДобавитьРесурс)
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРасписаниеКратноИнтервалам(МакетПланированиеРесурсов, ОбластьМакетаЗаголовка, СтруктураЦветов
	, ТаблицаРесурсовПредприятия, РабочиеПериоды, РасписаниеЗагрузки, РесурсМинимальногоИнтервала)
	
	ТаблицаПозиционированияПоДням.Очистить();
	ПериодыПоДням.Очистить();
	
	Элементы.ПериодПозиционирования.Видимость = Истина;
	
	СформироватьСписокВыбораВремениПериодов();
	
	КоличествоОбъединенныхЯчеек = 0;
	ДлительностьИнтервалаСек = МинимальныйИнтервал*60;
	
	ДопСмещениеКолонкиДляВыводаДопИнформации = 2;
	
	НеРабочиеДни = Новый СписокЗначений;
	
	НаименованияДняНеделиПоНомеру = СоответствиеДнейНедели();
	
	ШагЦветТекста = WebЦвета.ЛососьСветлый;
	СерыйЦветТекста = WebЦвета.ТемноГрифельноСерый;
	БелыйЦвет = WebЦвета.Белый;
	
	СплошнаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	НетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	
	МатрицаИнтервалов = ПланированиеРесурсовУНФ.СформироватьКолонкиИнтервалов();
	
	Для Каждого ДеньСписка Из СписокДатПериода Цикл
		
		Если ТолькоРабочееВремя Тогда
			СтруктураИнтервала = ГраницыРабочегоПериода(ДеньСписка.Значение, РабочиеПериоды, РасписаниеЗагрузки);
			
			Если Не ЗначениеЗаполнено(СтруктураИнтервала.ВремяНачала) Тогда
				НеРабочиеДни.Добавить(ДеньСписка.Значение);
				Продолжить;
			КонецЕсли;
			
			НачалоИнтервала = СтруктураИнтервала.ВремяНачала;
			ОкончаниеИнтервала = ?(СтруктураИнтервала.ВремяОкончания = КонецДня(СтруктураИнтервала.ВремяОкончания),СтруктураИнтервала.ВремяОкончания+1, СтруктураИнтервала.ВремяОкончания);
			
			Если Не ЗначениеЗаполнено(НачалоИнтервала) Тогда Продолжить КонецЕсли;
			
			КоличествоПериодов = (ОкончаниеИнтервала - НачалоИнтервала)/ДлительностьИнтервалаСек;
			КоличествоЯчеекДляОбъединения = КоличествоПериодов;
			
		Иначе
			Если ЗначениеЗаполнено(НачалоИнтервалаОтображения) ИЛИ ЗначениеЗаполнено(ОкончаниеИнтервалаОтображения) Тогда
				ОкончаниеИнтервалаПериод = ?(ЗначениеЗаполнено(ОкончаниеИнтервалаОтображения), ОкончаниеИнтервалаОтображения+300, КонецДня(НачалоИнтервалаОтображения));
				ОкончаниеИнтервалаПериод = ?(ОкончаниеИнтервалаПериод = КонецДня(ОкончаниеИнтервалаПериод),ОкончаниеИнтервалаПериод+1, ОкончаниеИнтервалаПериод);
				КоличествоПериодов = (ОкончаниеИнтервалаПериод - НачалоИнтервалаОтображения)/(ДлительностьИнтервалаСек);
			Иначе
				КоличествоПериодов = 1440/МинимальныйИнтервал;
			КонецЕсли;
			
			НачалоИнтервала = НачалоДня(ДеньСписка.Значение)+(НачалоИнтервалаОтображения-Дата(1,1,1));
			ОкончаниеИнтервала = НачалоДня(ДеньСписка.Значение)+(ОкончаниеИнтервалаОтображения-Дата(1,1,1));
			
		КонецЕсли;
		
		Элементы.ПредставлениеПериода.СписокВыбора.Добавить(ДеньСписка.Значение,Формат(ДеньСписка.Значение,"ДФ=dd.MM.yyyy"));
		
		НоваяСтрокаПериодыПоДням = ПериодыПоДням.Добавить();
		НоваяСтрокаПериодыПоДням.Дата = ДеньСписка.Значение;
		НоваяСтрокаПериодыПоДням.КоличествоПериодов = КоличествоПериодов;
		НоваяСтрокаПериодыПоДням.ВремяНачала = НачалоИнтервала;
		НоваяСтрокаПериодыПоДням.ВремяОкончания = ОкончаниеИнтервала;
		
		Если СписокДатПериода.Количество() = 1 Тогда
			НачалоИнтервалаОтображения = НачалоИнтервала;
			ОкончаниеИнтервалаОтображения = ОкончаниеИнтервала;
		КонецЕсли;
		
		СформироватьСписокВыбораВремениПереходаПоКоординатам(КоличествоПериодов, НоваяСтрокаПериодыПоДням, НачалоИнтервала);
		
		КоличествоЯчеекДляОбъединения =КоличествоПериодов;
		
		КолонкаНачала = 3+?(КоличествоОбъединенныхЯчеек=0,0, КоличествоОбъединенныхЯчеек)+ДопСмещениеКолонкиДляВыводаДопИнформации;
		КолонкаОкончания = КоличествоОбъединенныхЯчеек+КоличествоЯчеекДляОбъединения+2+ДопСмещениеКолонкиДляВыводаДопИнформации;
		
		ОбластьОбъединения = ОбластьМакетаЗаголовка.Область(1,КолонкаНачала,1,КолонкаОкончания);
		
		НомерДняНедели = ДеньНедели(ДеньСписка.Значение);
		
		ОбластьОбъединения.Текст = Формат(ДеньСписка.Значение,"ДФ=dd.MM.yyyy")+" "+ НаименованияДняНеделиПоНомеру.Получить(НомерДняНедели);
		ОбластьОбъединения.ГраницаСправа = СплошнаяЛиния;
		ОбластьОбъединения.ГраницаСлева = СплошнаяЛиния;
		ОбластьОбъединения.ГраницаСнизу = СплошнаяЛиния;
		ОбластьОбъединения.Расшифровка = ДеньСписка.Значение;
		
		Если НомерДняНедели = 6 ИЛИ НомерДняНедели = 7 Тогда
			ОбластьОбъединения.ЦветТекста = ШагЦветТекста;
		Иначе
			ОбластьОбъединения.ЦветТекста = СерыйЦветТекста;
		КонецЕсли;
		
		ОбластьОбъединения.Объединить();
		
		НоваяСтрока = КоординатыДней.Добавить();
		НоваяСтрока.КоординатаНачала = ОбластьОбъединения.Лево;
		НоваяСтрока.КоординатаОкончания = ОбластьОбъединения.Право;
		НоваяСтрока.Дата = ДеньСписка.Значение;
		
		КоличествоОбъединенныхЯчеек = КоличествоОбъединенныхЯчеек + КоличествоЯчеекДляОбъединения;
		
	КонецЦикла;
	
	Если ТолькоРабочееВремя Тогда
		ОбрабатываемыйСписокДат = УдалитьНеРабочиеДниИзСписка(НеРабочиеДни);
		
		Если Не ОбрабатываемыйСписокДат.Количество() Тогда
			
			ОбластьМакета = МакетПланированиеРесурсов.ПолучитьОбласть("ЗаставкаБезРесурсов|Текст");
			
			СтруктураРасшифровки = Новый Структура("ВидРасшифровки", "СоздатьНовыйРесурс");
			ОбластьМакета.Параметры.Расшифровка = СтруктураРасшифровки;
			
			ТекстПустогоТабличногоДокумента = НСтр("ru = 'Ресурсы предприятия с графиком работы в выбранный период отсутствуют.'");
			ОбластьМакета.Параметры.ТекстСообщения = ТекстПустогоТабличногоДокумента;
			ЗагрузкаРесурсов.Вывести(ОбластьМакета);
			Возврат
		КонецЕсли;
		
	Иначе
		ОбрабатываемыйСписокДат = СписокДатПериода;
	КонецЕсли;
	
	ПредставлениеПериода = ОбрабатываемыйСписокДат[0].Значение;
	
	ЗагрузкаРесурсов.Вывести(ОбластьМакетаЗаголовка);
	
	ОбластьМакета = МакетПланированиеРесурсов.ПолучитьОбласть("ПредставлениеВремени|Заголовок");
	ЗагрузкаРесурсов.Вывести(ОбластьМакета);
	
	КоличествоПериодовОбщий = 0;
	
	Для Каждого ДеньСписка Из ОбрабатываемыйСписокДат Цикл
		
		ПараметрыОтбора = Новый Структура("Дата",ДеньСписка.Значение);
		НайденныеСтроки = ПериодыПоДням.НайтиСтроки(ПараметрыОтбора);
		
		НачалоИнтервала = НайденныеСтроки[0].ВремяНачала;
		ОкончаниеИнтервала = НайденныеСтроки[0].ВремяОкончания;
		КоличествоПериодов = НайденныеСтроки[0].КоличествоПериодов;
		
		ИнтервалВывода = НачалоИнтервала;
		
		ПараметрыОтбора = Новый Структура("РесурсПредприятия, Период", РесурсМинимальногоИнтервала,НачалоДня(НачалоИнтервала));
		СтрокиГрафика = РабочиеПериоды.НайтиСтроки(ПараметрыОтбора);
		
		Если СтрокиГрафика.Количество() И Не ЗначениеЗаполнено(ШагИнтервалаМин) Тогда
			
			ВремяНачалаВыводаШагаВШкалеГрафика = СтрокиГрафика[0].НачалоРабочегоПериодаЗаДень;
			
			Если Не ЗначениеЗаполнено(ВремяНачалаВыводаШагаВШкалеГрафика) Тогда
				СмещениеШкалыВыводаВремени = 0;
				МинимальныйШагПланирования = ?(Не ЗначениеЗаполнено(ШагИнтервалаМин), МинимальныйШагПланирования, ШагИнтервалаМин*60);
			Иначе
				
				МинимальныйШагПланированияМин = МинимальныйШагПланирования/60;
				
				ВремяНачалаВыводаШагаВШкалеГрафикВСекундах = ВремяНачалаВыводаШагаВШкалеГрафика-НачалоДня(ВремяНачалаВыводаШагаВШкалеГрафика);
				ПозицияНачалаШагаВыводаШкалы = ВремяНачалаВыводаШагаВШкалеГрафикВСекундах/300;
				
				ОстатокОтДеления = ПозицияНачалаШагаВыводаШкалы%(МинимальныйШагПланированияМин);
				
				СмещениеШкалыВыводаВремени = ?(ОстатокОтДеления = 0, 0,(МинимальныйШагПланированияМин - ОстатокОтДеления)*300);
				
			КонецЕсли;
			
		Иначе
			
			СмещениеШкалыВыводаВремени = 0;
			МинимальныйШагПланирования = ?(Не ЗначениеЗаполнено(ШагИнтервалаМин), МинимальныйШагПланирования, ШагИнтервалаМин*60);
			
		КонецЕсли;
		
		МинимальныйШагПланирования = ?(МинимальныйШагПланирования <900, 900,МинимальныйШагПланирования);
		
		ОбластьМакетаИнтервал = МакетПланированиеРесурсов.ПолучитьОбласть("ПредставлениеВремени|ЕдиницаПериода");
		ОбластьМакетаИнтервал.Область(3,1,2,1).ГраницаСлева = СплошнаяЛиния;
		ОбластьМакетаИнтервал.Область(3,1,1,1).ЦветРамки = ШагЦветТекста;
		ОбластьМакетаИнтервал.Область(3,1,3,1).ГраницаСнизу = СплошнаяЛиния;
		
		ОбластьМакетаРазделительШкалы = МакетПланированиеРесурсов.ПолучитьОбласть("ПредставлениеВремени|РазделительШкалы");
		ОбластьМакетаРазделительШкалы.Область(3,1,3,1).ГраницаСлева = СплошнаяЛиния;
		ОбластьМакетаРазделительШкалы.Область(3,1,1,1).ЦветРамки = WebЦвета.Серый;
		ОбластьМакетаРазделительШкалы.Область(3,1,3,1).ГраницаСнизу = СплошнаяЛиния;
		
		Для Интервал = 1 По КоличествоПериодов Цикл
			
			Если (ИнтервалВывода - НачалоДня(ИнтервалВывода)+СмещениеШкалыВыводаВремени)% МинимальныйШагПланирования = 0 Тогда
				
				Если Интервал = КоличествоПериодов Тогда
					ОбластьМакетаИнтервал.Область(3,1,3,1).ГраницаСнизу = НетЛинии;
				КонецЕсли;
				
				ОбластьМакетаИнтервал.Параметры.Интервал = Формат(ИнтервалВывода,"ДФ=HH:mm");
				
				ВремяВывода = ?(Интервал = 1, ИнтервалВывода, ИнтервалВывода-300);
				
				ОбластьМакетаИнтервал.Параметры.Время = ВремяВывода;
			
				ЗагрузкаРесурсов.Присоединить(ОбластьМакетаИнтервал);
			Иначе
				
				ОбластьМакетаРазделительШкалы.Параметры.Время = ИнтервалВывода-300;
				
				ЗагрузкаРесурсов.Присоединить(ОбластьМакетаРазделительШкалы);
			КонецЕсли;
			
			ИнтервалВывода = ИнтервалВывода + ДлительностьИнтервалаСек
		КонецЦикла;
		
		КоличествоПериодовОбщий = КоличествоПериодовОбщий + КоличествоПериодов;
		
	КонецЦикла;
	
	ОбластьМакетаРазделительШкалы.Параметры.Время = ИнтервалВывода-300;
	ОбластьМакетаРазделительШкалы.Область(3,1,3,1).ГраницаСнизу = НетЛинии;
	ЗагрузкаРесурсов.Присоединить(ОбластьМакетаРазделительШкалы);
	
	ОбластьМакета = МакетПланированиеРесурсов.ПолучитьОбласть("Разделитель|Заголовок");
	ЗагрузкаРесурсов.Вывести(ОбластьМакета);
	
	ОбластьМакета = МакетПланированиеРесурсов.ПолучитьОбласть("Разделитель|ЕдиницаПериода");
	Для Интервал = 1 По КоличествоПериодовОбщий Цикл
		ЗагрузкаРесурсов.Присоединить(ОбластьМакета);
	КонецЦикла;
	
	НомерСтроки = 7;
	НомерГруппы = 1;
	
	Для Каждого РесурсПредприятия Из ТаблицаРесурсовПредприятия Цикл
		
		Ресурс = РесурсПредприятия.Ресурс;
		
		НоваяСтрока = РесурсыПоСтрокам.Добавить();
		НоваяСтрока.Ресурс = Ресурс;
		НоваяСтрока.НомерСтроки = НомерСтроки;
		
		ДопСмещениеКолонки = ДопСмещениеКолонкиДляВыводаДопИнформации;
		
		ОбластьРесурс = МакетПланированиеРесурсов.ПолучитьОбласть("Ресурсы|Заголовок");
		
		ОбластьРасшифровкаРесурса = ОбластьРесурс.Область(2,1,2,1);
		ОбластьРасшифровкаРесурса.Параметр = Ресурс;
		
		СтруктураРасшифровкиРесурса = Новый Структура;
		
		СтруктураРасшифровкиРесурса.Вставить("Ресурс", Ресурс);
		СтруктураРасшифровкиРесурса.Вставить("КонтролироватьЗагрузкуТолькоВРабочееВремя", Ресурс.КонтролироватьЗагрузкуТолькоВРабочееВремя);
		
		ОбластьРасшифровкаРесурса.Расшифровка = СтруктураРасшифровкиРесурса;
		
		ОбластьРасшифровкаРесурса.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		
		ОбластьРасшифровкаРесурсаШагПланирования = ОбластьРесурс.Область(3,1,3,1);
		ОбластьРасшифровкаРесурсаШагПланирования.Параметр = "Шаг план.: " + РасшифровкаКратности(РесурсПредприятия) + ". "+"Мощность:"+Строка(РесурсПредприятия.Мощность);
		
		ПараметрыОтбора = Новый Структура("РесурсПредприятия",Ресурс);
		НайденныеСтроки = РасписаниеЗагрузки.НайтиСтроки(ПараметрыОтбора);
		
		ОбластьРасшифровкаПоДокументам = МакетПланированиеРесурсов.ПолучитьОбласть("РасшифровкаПоДокументам|Заголовок");
		
		НомерСтрокиРасшифровкиДокумента = 1;
		ЕстьРасшифровка = Ложь;
		ЗагрузкаЗаПериод = 0;
		
		СоответствиеДокументовРасшифровкиСтрокам = Новый ТаблицаЗначений;
		
		СоответствиеДокументовРасшифровкиСтрокам.Колонки.Добавить("Ссылка");
		СоответствиеДокументовРасшифровкиСтрокам.Колонки.Добавить("НомерСтрокиДокумента");
		СоответствиеДокументовРасшифровкиСтрокам.Колонки.Добавить("НомерСтрокиДляВывода");
		
		ИнтервалыВыводаПоДокументам = Новый ТаблицаЗначений;
		ИнтервалыВыводаПоДокументам.Колонки.Добавить("Документ");
		ИнтервалыВыводаПоДокументам.Колонки.Добавить("НачалоИнтервала");
		ИнтервалыВыводаПоДокументам.Колонки.Добавить("ОкончаниеИнтервала");
		ИнтервалыВыводаПоДокументам.Колонки.Добавить("КоличествоЯчеек");
		ИнтервалыВыводаПоДокументам.Колонки.Добавить("КоличествоОбъединенныхЯчеек");
		ИнтервалыВыводаПоДокументам.Колонки.Добавить("ПредыдущаяЗагрузка");
		ИнтервалыВыводаПоДокументам.Колонки.Добавить("НомерСтрокиРасшифровки");
		ИнтервалыВыводаПоДокументам.Колонки.Добавить("ОкончаниеПредыдущегоИнтервалаЗагрузки");
		
		МассивДокументовСПересечениями = МассивДокументовСПересечениямиЗаВесьПериод(НайденныеСтроки, РасписаниеЗагрузки);
		
		ПараметрыОтбора = Новый Структура;
		
		ПараметрыОтбораСтроки = Новый Структура("НомерСтрокиДокумента, Ссылка");

		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			Если Не ЗначениеЗаполнено(НайденнаяСтрока.Ссылка) Тогда Продолжить КонецЕсли;
			
			ЕстьПересечения = ?(МассивДокументовСПересечениями.Найти(НайденнаяСтрока.Ссылка) = Неопределено, Ложь, Истина);
			
			Если Не ЕстьПересечения Тогда
				
				ПараметрыОтбора.Вставить("Ссылка", НайденнаяСтрока.Ссылка);
				
				НайденноеЗначениеСоответствия = СоответствиеДокументовРасшифровкиСтрокам.НайтиСтроки(ПараметрыОтбора);
				
				Если НайденноеЗначениеСоответствия.Количество() Тогда
					Продолжить
				КонецЕсли;
			КонецЕсли;
			
			ПараметрыОтбораСтроки.НомерСтрокиДокумента = НайденнаяСтрока.НомерСтроки;
			ПараметрыОтбораСтроки.Ссылка = НайденнаяСтрока.Ссылка;
			
			ДобавленныеСтроки = СоответствиеДокументовРасшифровкиСтрокам.НайтиСтроки(ПараметрыОтбораСтроки);
			
			Если ДобавленныеСтроки.Количество() Тогда Продолжить КонецЕсли;
			
			НоваяСтрока = СоответствиеДокументовРасшифровкиСтрокам.Добавить();
			НоваяСтрока.Ссылка = НайденнаяСтрока.Ссылка;
			НоваяСтрока.НомерСтрокиДляВывода = НомерСтрокиРасшифровкиДокумента;
			НоваяСтрока.НомерСтрокиДокумента = НайденнаяСтрока.НомерСтроки;
			
			ОбластьРасшифровки = ОбластьРасшифровкаПоДокументам.Область(НомерСтрокиРасшифровкиДокумента,1,НомерСтрокиРасшифровкиДокумента,3);
			ОбластьРасшифровки.Объединить();
			ОбластьРасшифровки.Параметр = НайденнаяСтрока.Ссылка;
			ОбластьРасшифровки.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			НомерСтрокиРасшифровкиДокумента = НомерСтрокиРасшифровкиДокумента +1;
			
			ОбластьРасшифровки.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.РедкийПунктир);
			ОбластьРасшифровки.ЦветРамки = WebЦвета.СеребристоСерый;
			
			СтруктураРасшифровки = Новый Структура("Ресурс, СсылкаНаДокумент, ВидРасшифровки, НомерСтрокиДокумента"
			,Ресурс, НайденнаяСтрока.Ссылка, "ПозиционированиеНаДокументе", НайденнаяСтрока.НомерСтроки);
			ОбластьРасшифровки.Расшифровка = СтруктураРасшифровки;
			
			НомерСтроки = НомерСтроки + 1;
			
			ДополнениеКонтрагент = "";
			
			Если Найти(Строка(НайденнаяСтрока.Ссылка), "<Объект не найден>" ) = 0 Тогда
				
				Если ТипЗнч(НайденнаяСтрока.Ссылка) = Тип("ДокументСсылка.Событие")
					И НайденнаяСтрока.Ссылка.Участники.Количество() Тогда
					
					Для Каждого СтрокаУчастники Из НайденнаяСтрока.Ссылка.Участники Цикл
						Если ЗначениеЗаполнено(СтрокаУчастники.Контакт) Тогда
							
							КакСвязаться = СокрЛП(СтрокаУчастники.КакСвязаться);
							ДополнениеКонтрагент = Строка(СтрокаУчастники.Контакт) +?(ЗначениеЗаполнено(КакСвязаться)," (" + КакСвязаться+")","");
							Прервать;
							
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ТипЗнч(НайденнаяСтрока.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
					
					ДополнениеКонтрагент = Строка(НайденнаяСтрока.Контрагент);
					
					Если ЗначениеЗаполнено(НайденнаяСтрока.Контрагент.НомерТелефонаДляПоиска) Тогда
						ДополнениеКонтрагент = ДополнениеКонтрагент +" (" + НайденнаяСтрока.Контрагент.НомерТелефонаДляПоиска+")";
					Иначе
						ПараметрыОтбораКонтакты = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
						НайденныеСтрокиКонтакты = НайденнаяСтрока.Контрагент.КонтактнаяИнформация.НайтиСтроки(ПараметрыОтбораКонтакты);
						
						Для Каждого НайденнаяСтрокаКонтакты Из НайденныеСтрокиКонтакты Цикл
							Если ЗначениеЗаполнено(НайденнаяСтрокаКонтакты.Представление) Тогда
								ДополнениеКонтрагент = ДополнениеКонтрагент +" (" + НайденнаяСтрокаКонтакты.Представление+")";
								Прервать
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
					
				Иначе
					ДополнениеКонтрагент = Строка(НайденнаяСтрока.Контрагент);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДополнениеКонтрагент) Тогда
					ОбластьРасшифровки.Текст = СокрЛП(ДополнениеКонтрагент)+":
					|"+ ОбластьРасшифровки.Текст;
				КонецЕсли;
				
			Иначе
				
				ОбластьРасшифровки.Текст = "<Документ с ограниченным доступом>"
				
			КонецЕсли;
			
			ЕстьРасшифровка = Истина;
			
		КонецЦикла;
		
		КратностьПланирования = ?(Не ЗначениеЗаполнено(РесурсПредприятия.КратностьПланирования), 5, РесурсПредприятия.КратностьПланирования);
		КратностьИнтервала = КратностьПланирования;
		
		Интервал = 1;
		
		НомерСтрокиРасшифровки = 1;
		ИнтервалДляИсключения = 0;
		ДоступноеЗначениеЗагрузки = 0;
		ЕстьПревышениеЗагрузкиВРазрезеКратности = Ложь;
		ИндексКоличестваПериодов = 0;
		
		Для Каждого ДеньСписка Из ОбрабатываемыйСписокДат Цикл
			
			ПараметрыОтбора = Новый Структура("Дата",ДеньСписка.Значение);
			НайденныеСтрокиПоДню = ПериодыПоДням.НайтиСтроки(ПараметрыОтбора);
			
			НачалоИнтервала = НайденныеСтрокиПоДню[0].ВремяНачала;
			ОкончаниеИнтервала = НайденныеСтрокиПоДню[0].ВремяОкончания;
			КоличествоПериодов = НайденныеСтрокиПоДню[0].КоличествоПериодов;
			
			ИнтервалВывода = НачалоИнтервала;
			
			КоличествоЯчеекДляОбъединения = 0;
			
			КоличествоПериодовЗаДеньСписка = КоличествоПериодов+ИндексКоличестваПериодов;
			ИндексКоличестваПериодов = КоличествоПериодовЗаДеньСписка;
			
			ИнтервалыВыводаПоДокументам.Очистить();
			
			КоличествоНеРабочихЯчеекДляОбъединения = 0;
			
			БылНеРабочийПериод = Ложь;
			
			ВидТекущегоПериода = "ПоГрафику";
			ВидПредыдущегоПериода = ВидТекущегоПериода;
			
			Пока Интервал <= КоличествоПериодовЗаДеньСписка Цикл
				
				ИнтервалВыводаОбласти = Интервал - ИнтервалДляИсключения;
				
				РабочийПериод = ЭтоРабочийПериод(РабочиеПериоды, ИнтервалВывода, Ресурс,, РасписаниеЗагрузки, ДлительностьИнтервалаСек, ВидТекущегоПериода);
				
				ВыводНеКратногоИнтервала = Ложь;
				
				Если Не КоличествоЯчеекДляОбъединения = 0
					И Не ВидПредыдущегоПериода = "НеРабочий" И Не ВидТекущегоПериода = "НеРабочий"
					И Не ВидПредыдущегоПериода = ВидТекущегоПериода Тогда
					ВыводНеКратногоИнтервала = Истина;
				КонецЕсли;
				
				Если РабочийПериод И ВыводНеКратногоИнтервала = Ложь Тогда
					Если БылНеРабочийПериод Тогда
						ОбластьМакета = ОбластьРесурс.Область(2,2+Интервал+ДопСмещениеКолонки-КоличествоНеРабочихЯчеекДляОбъединения,3,2+Интервал-1+ДопСмещениеКолонки);
						ОбластьМакета.ЦветФона = СтруктураЦветов.ЦветЯчейкиРесурсНеРедактируется;
						ОбластьМакета.Объединить();
						ВывестиРазделителиПериода(ОбластьМакета,СплошнаяЛиния,БелыйЦвет);
					КонецЕсли;
					
					БылНеРабочийПериод = Ложь;
					ВидПредыдущегоПериода = ВидТекущегоПериода;
					
					КоличествоНеРабочихЯчеекДляОбъединения = 0;
					
					КратностьИнтервала = КратностьИнтервала - МинимальныйИнтервал;
					КоличествоЯчеекДляОбъединения = КоличествоЯчеекДляОбъединения + 1;
					
					ЗагрузкаРесурса = 0;
					
					НачалоИнтервала = ИнтервалВывода + ДлительностьИнтервалаСек - КоличествоЯчеекДляОбъединения*ДлительностьИнтервалаСек;
					
					Если КоличествоЯчеекДляОбъединения > 1 
						И (КратностьИнтервала = 0 ИЛИ Интервал = КоличествоПериодовЗаДеньСписка) Тогда
						
						ОбластьОбъединения = ОбластьРесурс.Область(2,3+ИнтервалВыводаОбласти- КоличествоЯчеекДляОбъединения+ДопСмещениеКолонки,3,2+ИнтервалВыводаОбласти+ДопСмещениеКолонки);
						ОбластьОбъединения.ЦветФона = СтруктураЦветов.ЦветЯчейкиРесурсСвободен;
						ОбластьОбъединения.Объединить();
						
						Если ВидТекущегоПериода = "ПоГрафику" Тогда
							ДоступноеЗначениеЗагрузки = ДоступноеЗначениеЗагрузки + РесурсПредприятия.Мощность;
						КонецЕсли;
						
						КратностьИнтервала = КратностьПланирования;
						
						ВывестиРазделителиПериода(ОбластьОбъединения,СплошнаяЛиния,БелыйЦвет);
						
						ОкончанияИнтервала = ИнтервалВывода+ДлительностьИнтервалаСек;
						
						ДокументыРасшифровки = ПланированиеРесурсовУНФ.ТаблицаДокументовЗаПериод(НайденныеСтроки, НачалоИнтервала, ОкончанияИнтервала, КратностьПланирования);
						
						ВывестиДокументыРасшифровки(ДокументыРасшифровки,ИнтервалыВыводаПоДокументам, СоответствиеДокументовРасшифровкиСтрокам
						,НачалоИнтервала, ОкончанияИнтервала, МассивДокументовСПересечениями, НомерСтрокиРасшифровки, КоличествоЯчеекДляОбъединения
						,ИнтервалВыводаОбласти, Ресурс, ОбластьРасшифровкаПоДокументам, ЗагрузкаРесурса, МатрицаИнтервалов);
						
						ОбновитьОтображениеОбластиСогласноЗагрузке(ОбластьОбъединения, ЗагрузкаРесурса, РесурсПредприятия.Мощность, НачалоИнтервала,,
						,КоличествоЯчеекДляОбъединения,,Истина);
						
						ЕстьПревышениеЗагрузкиВРазрезеКратности =?(ЗагрузкаРесурса>РесурсПредприятия.Мощность, Истина, ЕстьПревышениеЗагрузкиВРазрезеКратности);
						
						ЗагрузкаЗаПериод = ЗагрузкаЗаПериод + ЗагрузкаРесурса;
						
						КоличествоЯчеекДляОбъединения = 0;
						
					ИначеЕсли КоличествоЯчеекДляОбъединения = 1 И (КратностьИнтервала = 0 ИЛИ Интервал = КоличествоПериодовЗаДеньСписка) Тогда
						
						ОбластьОбъединения = ОбластьРесурс.Область(2,2+ИнтервалВыводаОбласти+ДопСмещениеКолонки,3,2+ИнтервалВыводаОбласти+ДопСмещениеКолонки);
						ОбластьОбъединения.ЦветФона = СтруктураЦветов.ЦветЯчейкиРесурсСвободен;
						ОбластьОбъединения.Объединить();
						
						Если КратностьПланирования = МинимальныйИнтервал Тогда
							ОбластьОбъединения.ШиринаКолонки = 15;
						КонецЕсли;
						
						Если ВидТекущегоПериода = "ПоГрафику" Тогда
							ДоступноеЗначениеЗагрузки = ДоступноеЗначениеЗагрузки + РесурсПредприятия.Мощность;
						КонецЕсли;
						
						ВывестиРазделителиПериода(ОбластьОбъединения,СплошнаяЛиния,БелыйЦвет);
						
						ДокументыРасшифровки = ПланированиеРесурсовУНФ.ТаблицаДокументовЗаПериод(НайденныеСтроки, ИнтервалВывода, ИнтервалВывода, КратностьПланирования);
						
						ОкончанияИнтервала = ИнтервалВывода+ДлительностьИнтервалаСек;
						
						ВывестиДокументыРасшифровки(ДокументыРасшифровки,ИнтервалыВыводаПоДокументам,СоответствиеДокументовРасшифровкиСтрокам
						,НачалоИнтервала, ОкончанияИнтервала, МассивДокументовСПересечениями, НомерСтрокиРасшифровки
						,КоличествоЯчеекДляОбъединения, ИнтервалВыводаОбласти, Ресурс, ОбластьРасшифровкаПоДокументам, ЗагрузкаРесурса, МатрицаИнтервалов);
						
						КоличествоЯчеекДляОбъединения = 0;
						КратностьИнтервала = КратностьПланирования;
						
						ОбновитьОтображениеОбластиСогласноЗагрузке(ОбластьОбъединения, ЗагрузкаРесурса, РесурсПредприятия.Мощность
						, ИнтервалВывода, КоличествоЯчеекДляОбъединения,,,,Истина);
						
						ЕстьПревышениеЗагрузкиВРазрезеКратности =?(ЗагрузкаРесурса>РесурсПредприятия.Мощность, Истина, ЕстьПревышениеЗагрузкиВРазрезеКратности);
						
						ЗагрузкаЗаПериод = ЗагрузкаЗаПериод + ЗагрузкаРесурса;
						
					КонецЕсли;
					
					ИнтервалВывода = ИнтервалВывода + ДлительностьИнтервалаСек;
					Интервал = Интервал + 1;
					Продолжить;
					
				КонецЕсли;
				
				Если КоличествоЯчеекДляОбъединения >=1 Тогда
					
					ОбластьОбъединения = ОбластьРесурс.Область(2,2+ИнтервалВыводаОбласти- КоличествоЯчеекДляОбъединения+ДопСмещениеКолонки,3,1+ИнтервалВыводаОбласти+ДопСмещениеКолонки);
					ОбластьОбъединения.ЦветФона = СтруктураЦветов.ЦветЯчейкиРесурсСвободен;
					ОбластьОбъединения.Объединить();
					
					ОкончанияИнтервала = ИнтервалВывода;
					
					Если ВидПредыдущегоПериода = "ПоГрафику"
						Тогда
						ДоступноеЗначениеЗагрузки = ДоступноеЗначениеЗагрузки + РесурсПредприятия.Мощность;
					КонецЕсли;
					
					ЕстьПревышениеЗагрузкиВРазрезеКратности =?(ЗагрузкаРесурса>РесурсПредприятия.Мощность, Истина, ЕстьПревышениеЗагрузкиВРазрезеКратности);
					
					ВывестиРазделителиПериода(ОбластьОбъединения,СплошнаяЛиния,БелыйЦвет);
					
					НачалоИнтервала = ИнтервалВывода - КоличествоЯчеекДляОбъединения*ДлительностьИнтервалаСек;
					
					ДокументыРасшифровки = ПланированиеРесурсовУНФ.ТаблицаДокументовЗаПериод(НайденныеСтроки, НачалоИнтервала, ОкончанияИнтервала, КратностьПланирования);
					
					ВывестиДокументыРасшифровки(ДокументыРасшифровки,ИнтервалыВыводаПоДокументам,СоответствиеДокументовРасшифровкиСтрокам
					,НачалоИнтервала, ОкончанияИнтервала, МассивДокументовСПересечениями, НомерСтрокиРасшифровки
					,КоличествоЯчеекДляОбъединения, ИнтервалВыводаОбласти-1, Ресурс, ОбластьРасшифровкаПоДокументам, ЗагрузкаРесурса, МатрицаИнтервалов);
					
					ВидПредыдущегоПериода = ВидТекущегоПериода;
					
					ОбновитьОтображениеОбластиСогласноЗагрузке(ОбластьОбъединения, ЗагрузкаРесурса, РесурсПредприятия.Мощность, НачалоИнтервала,,
					,КоличествоЯчеекДляОбъединения,,Не ВыводНеКратногоИнтервала);
					
					
					ЕстьПревышениеЗагрузкиВРазрезеКратности =?(ЗагрузкаРесурса>РесурсПредприятия.Мощность, Истина, ЕстьПревышениеЗагрузкиВРазрезеКратности);
					
					ИнтервалВывода = ИнтервалВывода + ДлительностьИнтервалаСек;
					
					ЗагрузкаЗаПериод = ЗагрузкаЗаПериод + ЗагрузкаРесурса;
					
					Если Не ВыводНеКратногоИнтервала Тогда
						
						ОбластьМакета = ОбластьРесурс.Область(2,2+ИнтервалВыводаОбласти+ДопСмещениеКолонки-КоличествоНеРабочихЯчеекДляОбъединения,3,2+ИнтервалВыводаОбласти+ДопСмещениеКолонки);
						ОбластьМакета.ЦветФона = СтруктураЦветов.ЦветЯчейкиРесурсНеРедактируется;
						
						КоличествоНеРабочихЯчеекДляОбъединения = КоличествоНеРабочихЯчеекДляОбъединения + 1;
						ОбластьМакета.Объединить();
						
						КоличествоЯчеекДляОбъединения = 0;
						КратностьИнтервала = КратностьПланирования;
						
						ВывестиРазделителиПериода(ОбластьМакета,СплошнаяЛиния,БелыйЦвет);
						
					Иначе
						КоличествоЯчеекДляОбъединения = 1;
						КратностьИнтервала = КратностьПланирования- МинимальныйИнтервал;
					КонецЕсли;
					
					Интервал = Интервал + 1;
					
					ВидПредыдущегоПериода = ВидТекущегоПериода;
					
					Продолжить;
				КонецЕсли;
				
				ВидПредыдущегоПериода = ВидТекущегоПериода;
				
				Если Интервал = КоличествоПериодовЗаДеньСписка Тогда
					ОбластьМакета = ОбластьРесурс.Область(2,2+Интервал+ДопСмещениеКолонки-КоличествоНеРабочихЯчеекДляОбъединения,3,2+Интервал+ДопСмещениеКолонки);
					ОбластьМакета.ЦветФона = СтруктураЦветов.ЦветЯчейкиРесурсНеРедактируется;
					
					ОбластьМакета.Объединить();
					ВывестиРазделителиПериода(ОбластьМакета,СплошнаяЛиния,БелыйЦвет);
				КонецЕсли;
				
				БылНеРабочийПериод = Истина;
				
				КоличествоНеРабочихЯчеекДляОбъединения = КоличествоНеРабочихЯчеекДляОбъединения + 1;
				
				ИнтервалВывода = ИнтервалВывода + ДлительностьИнтервалаСек;
				Интервал = Интервал + 1;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ОбластьИтоги1 = ОбластьРесурс.Область(2,2,2,2);
		ОбластьИтоги1.Обвести(СплошнаяЛиния);
		ОбластьИтоги1.ЦветРамки = WebЦвета.Белый;
		ОбластьИтоги1.ЦветФона = ?(ЗагрузкаЗаПериод = 0 И Не ДоступноеЗначениеЗагрузки = 0,СтруктураЦветов.ЦветЯчейкиРесурсСвободен, ОбластьИтоги1.ЦветФона);
		
		ОбновитьОтображениеОбластиСогласноЗагрузке(ОбластьИтоги1, ЗагрузкаЗаПериод, ДоступноеЗначениеЗагрузки,,Истина,ЕстьПревышениеЗагрузкиВРазрезеКратности);
		
		ОбластьИтоги1.Текст = Строка(ЗагрузкаЗаПериод);
		
		ОбластьИтоги2 = ОбластьРесурс.Область(2,3,2,3);
		ОбластьИтоги2.Обвести(СплошнаяЛиния);
		ОбластьИтоги2.ЦветРамки = WebЦвета.Белый;
		ОбластьИтоги2.ЦветФона = ?(ЗагрузкаЗаПериод = 0 И Не ДоступноеЗначениеЗагрузки = 0,СтруктураЦветов.ЦветЯчейкиРесурсСвободен, ОбластьИтоги2.ЦветФона);
		
		ОбновитьОтображениеОбластиСогласноЗагрузке(ОбластьИтоги2, ЗагрузкаЗаПериод, ДоступноеЗначениеЗагрузки,,Истина, ЕстьПревышениеЗагрузкиВРазрезеКратности);
		
		ОбластьИтоги2.Текст = Строка(ДоступноеЗначениеЗагрузки);
		
		Если ЕстьРасшифровка Тогда
			
			ЗагрузкаРесурсов.НачатьАвтогруппировкуСтрок();
			
			ЗагрузкаРесурсов.Вывести(ОбластьРесурс,НомерГруппы,"Расшифровка по документам"+Строка(РесурсПредприятия.Ресурс), Ложь);
			ЗагрузкаРесурсов.Вывести(ОбластьРасшифровкаПоДокументам,НомерГруппы+1,"Расшифровка"+Строка(РесурсПредприятия.Ресурс), Ложь);
			
			ЗагрузкаРесурсов.ЗакончитьАвтогруппировкуСтрок();
		Иначе
			ЗагрузкаРесурсов.Вывести(ОбластьРесурс,НомерГруппы,"Расшифровка по документам"+Строка(РесурсПредприятия.Ресурс), Ложь);
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 3;
		НомерГруппы = НомерГруппы + 1;
		
	КонецЦикла;
	
	ОбластьДобавитьРесурс = МакетПланированиеРесурсов.ПолучитьОбласть("ДобавитьРесурс|Заголовок"); 
	СтруктураРасшифровки = Новый Структура("ВидРасшифровки", "СоздатьНовыйРесурс");
	ОбластьДобавитьРесурс.Параметры.Расшифровка = СтруктураРасшифровки;
	ЗагрузкаРесурсов.Вывести(ОбластьДобавитьРесурс);
	
	ОбновитьПодобранныеПериоды(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументыРасшифровки(ДокументыРасшифровки,ИнтервалыВыводаПоДокументам,СоответствиеДокументовРасшифровкиСтрокам
	, НачалоИнтервала, ОкончанияИнтервала, МассивДокументовСПересечениями, НомерСтрокиРасшифровки
	, КоличествоЯчеекДляОбъединения, ИнтервалВыводаОбласти, Ресурс, ОбластьРасшифровкаПоДокументам, ЗагрузкаРесурса, МатрицаИнтервалов)
	
	СплошнаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	НетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	
	МатрицаИнтервалов.Очистить();
	
	СтрокаРасшифровки = НомерСтрокиРасшифровки;
	
	КоличествоДокументов = ДокументыРасшифровки.Количество();
	ДополненияПереходящегоПериода = 0;
	
	ЗагрузкаРесурса = ?(КоличествоДокументов, ДокументыРасшифровки[0].Загрузка, ЗагрузкаРесурса); 
	
	ПараметрыОтбораПоСтрокам = Новый Структура;
	
	Для Каждого ДокументРасшифровки Из ДокументыРасшифровки Цикл
		
		КаждыйИнтервалНоваяСтрока = ?(НЕ МассивДокументовСПересечениями.Найти(ДокументРасшифровки.Ссылка) = Неопределено, Истина, Ложь);
		
		Если КаждыйИнтервалНоваяСтрока Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Документ", ДокументРасшифровки.Ссылка);
			ПараметрыОтбора.Вставить("НачалоИнтервала", ДокументРасшифровки.ВремяНачала);
			ПараметрыОтбора.Вставить("ОкончаниеПредыдущегоИнтервалаЗагрузки", ДокументРасшифровки.ВремяОкончания);
			ПараметрыОтбора.Вставить("НомерСтрокиРасшифровки", ДокументРасшифровки.НомерСтроки);
			
			ПараметрыОтбораПоСтрокам.Вставить("Ссылка", ДокументРасшифровки.Ссылка);
			ПараметрыОтбораПоСтрокам.Вставить("НомерСтрокиДокумента", ДокументРасшифровки.НомерСтроки);
			
		Иначе
			ПараметрыОтбораПоСтрокам.Вставить("Ссылка", ДокументРасшифровки.Ссылка);
			ПараметрыОтбора = Новый Структура("Документ", ДокументРасшифровки.Ссылка);
		КонецЕсли;
		
		СтрокиПоДокументу = ИнтервалыВыводаПоДокументам.НайтиСтроки(ПараметрыОтбора);
		
		НайденноеЗначениеСоответствия = СоответствиеДокументовРасшифровкиСтрокам.НайтиСтроки(ПараметрыОтбораПоСтрокам);
		
		ПараметрыОтбораПоСтрокам.Очистить();
		
		Если НайденноеЗначениеСоответствия.Количество() Тогда
			СтрокаРасшифровки = НайденноеЗначениеСоответствия[0].НомерСтрокиДляВывода;
			
			НомерСтрокиРасшифровки = ?(НомерСтрокиРасшифровки = СтрокаРасшифровки, НомерСтрокиРасшифровки-1, НомерСтрокиРасшифровки);
		КонецЕсли;
		
		СмещениеОкончанияИнтервалаПоДокументу = 0;
		
		ВремяОкончанияВДокументе = ?(ДокументРасшифровки.ВремяОкончания+59 = КонецДня(ДокументРасшифровки.ВремяОкончания),
			ДокументРасшифровки.ВремяОкончания+60, ДокументРасшифровки.ВремяОкончания);
		
		ВремяОкончанияДокументаВИнтервале = ?(ВремяОкончанияВДокументе>ОкончанияИнтервала, ОкончанияИнтервала, ВремяОкончанияВДокументе);
		ВремяНачалаДокументаВИнтервале = ?(ДокументРасшифровки.ВремяНачала<НачалоИнтервала, НачалоИнтервала, ДокументРасшифровки.ВремяНачала);
		
		ЯчеекПоДокументуВИнтервале = (ВремяОкончанияДокументаВИнтервале - ВремяНачалаДокументаВИнтервале)/60/5;
		СмещениеОкончанияИнтервалаПоДокументу = КоличествоЯчеекДляОбъединения - ЯчеекПоДокументуВИнтервале;
		
		Если СтрокиПоДокументу.Количество() Тогда
			СтрокаПоДокументу = СтрокиПоДокументу[СтрокиПоДокументу.Количество()-1];
			
			СтрокаРасшифровки = ?(КаждыйИнтервалНоваяСтрока, СтрокаРасшифровки, СтрокаПоДокументу.НомерСтрокиРасшифровки);
			
			Если СтрокаПоДокументу.КоличествоЯчеек = 0 Тогда
				
				ВыходитЗаГраницуИнтервала = Истина;
				
				Если ДокументРасшифровки.ВремяОкончания>ОкончанияИнтервала Тогда
					ВремяОкончанияДокументаВИнтервале = ОкончанияИнтервала;
				Иначе
					ВремяОкончанияДокументаВИнтервале = ВремяОкончанияВДокументе;
					ВыходитЗаГраницуИнтервала = Ложь;
				КонецЕсли;
				
				ВремяНачалаДокументаВИнтервале = ?(ДокументРасшифровки.ВремяНачала<НачалоИнтервала, НачалоИнтервала, ДокументРасшифровки.ВремяНачала);
				
				НомерЯчейкиНачалаДокументаВИнтервале = (ВремяНачалаДокументаВИнтервале - НачалоИнтервала)/60/5;
				НомерЯчейкиОкончанияДокументаВИнтервале = (ВремяОкончанияДокументаВИнтервале - НачалоИнтервала)/60/5;
				
				ЗагрузкаПериодовПоДокументу = ДокументРасшифровки.Загрузка;
				КолонкаНачалаИнтервала = 3+ИнтервалВыводаОбласти - КоличествоЯчеекДляОбъединения+НомерЯчейкиНачалаДокументаВИнтервале+ДопСмещениеКолонки;
				
				КолонкаОкончанияИнтервала = 2+ ИнтервалВыводаОбласти - КоличествоЯчеекДляОбъединения + НомерЯчейкиОкончанияДокументаВИнтервале+ДопСмещениеКолонки;
				
				ОбластьРасшифровки = ОбластьРасшифровкаПоДокументам.Область(СтрокаРасшифровки, КолонкаНачалаИнтервала,
					СтрокаРасшифровки, КолонкаОкончанияИнтервала);
				ОбластьРасшифровки.Объединить();
				
				СтрокаПоДокументу = ИнтервалыВыводаПоДокументам.Добавить();
				СтрокаПоДокументу.Документ = ДокументРасшифровки.Ссылка;
				
				СтрокаПоДокументу.КоличествоЯчеек = ?(Не ВыходитЗаГраницуИнтервала, 0, ЯчеекПоДокументуВИнтервале);
				СтрокаПоДокументу.КоличествоОбъединенныхЯчеек = КолонкаОкончанияИнтервала - КолонкаНачалаИнтервала;
				СтрокаПоДокументу.ПредыдущаяЗагрузка = ЗагрузкаПериодовПоДокументу;
				СтрокаПоДокументу.ОкончаниеПредыдущегоИнтервалаЗагрузки = ВремяОкончанияВДокументе;
				СтрокаПоДокументу.НачалоИнтервала = ДокументРасшифровки.ВремяНачала;
				СтрокаПоДокументу.НомерСтрокиРасшифровки = СтрокаРасшифровки;
				
			Иначе
				
				ДополненияПереходящегоПериода = ДополненияПереходящегоПериода + 1;
				
				КоличествоЯчеекДляОбъединенияРасшифровки = ЯчеекПоДокументуВИнтервале+СтрокаПоДокументу.КоличествоЯчеек;
				
				Если СтрокаПоДокументу.ОкончаниеПредыдущегоИнтервалаЗагрузки >= ДокументРасшифровки.ВремяНачала Тогда
					КоличествоЯчеекДляОбъединенияРасшифровки = СтрокаПоДокументу.КоличествоОбъединенныхЯчеек+ЯчеекПоДокументуВИнтервале+1;
					ЗагрузкаПериодовПоДокументу = СтрокаПоДокументу.ПредыдущаяЗагрузка;
				Иначе
					ЗагрузкаПериодовПоДокументу = ДокументРасшифровки.Загрузка;
				КонецЕсли;
				
				КолонкаНачалаИнтервала = 3+ИнтервалВыводаОбласти-(КоличествоЯчеекДляОбъединенияРасшифровки+СмещениеОкончанияИнтервалаПоДокументу)+ДопСмещениеКолонки;
				КолонкаОкончанияИнтервала = 2+ИнтервалВыводаОбласти+ДопСмещениеКолонки - СмещениеОкончанияИнтервалаПоДокументу;
				
				ОбластьРасшифровки = ОбластьРасшифровкаПоДокументам.Область(СтрокаРасшифровки, КолонкаНачалаИнтервала,СтрокаРасшифровки,КолонкаОкончанияИнтервала);
				
				ОбластьРасшифровки.Объединить();
				
				ЯчеекПоДокументу = (ДокументРасшифровки.ВремяОкончания - ДокументРасшифровки.ВремяНачала)/300;
				
				СтрокаПоДокументу.КоличествоЯчеек =?(ЯчеекПоДокументу=КоличествоЯчеекДляОбъединенияРасшифровки,0, КоличествоЯчеекДляОбъединенияРасшифровки);
				
				СтрокаПоДокументу.КоличествоОбъединенныхЯчеек = КолонкаОкончанияИнтервала - КолонкаНачалаИнтервала;
				СтрокаПоДокументу.ПредыдущаяЗагрузка = ЗагрузкаПериодовПоДокументу;
				СтрокаПоДокументу.ОкончаниеПредыдущегоИнтервалаЗагрузки = СтрокаПоДокументу.ОкончаниеПредыдущегоИнтервалаЗагрузки;
				СтрокаПоДокументу.НачалоИнтервала = ДокументРасшифровки.ВремяНачала;
				СтрокаПоДокументу.НомерСтрокиРасшифровки = СтрокаРасшифровки;
				
				ВыходитЗаГраницуИнтервала = ?(СтрокаПоДокументу.КоличествоЯчеек = 0, Ложь, Истина);
				
			КонецЕсли;
			
		Иначе
			
			СтрокаПоДокументу = ИнтервалыВыводаПоДокументам.Добавить();
			СтрокаПоДокументу.Документ = ДокументРасшифровки.Ссылка;
			
			ВыходитЗаГраницуИнтервала = Истина;
			
			Если ДокументРасшифровки.ВремяОкончания>ОкончанияИнтервала Тогда
				ВремяОкончанияДокументаВИнтервале = ОкончанияИнтервала;
			Иначе
				ВремяОкончанияДокументаВИнтервале = ВремяОкончанияВДокументе;
				ВыходитЗаГраницуИнтервала = Ложь;
			КонецЕсли;
			
			НомерЯчейкиНачалаДокументаВИнтервале = (ВремяНачалаДокументаВИнтервале - НачалоИнтервала)/60/5;
			НомерЯчейкиОкончанияДокументаВИнтервале = (ВремяОкончанияДокументаВИнтервале - НачалоИнтервала)/60/5;
			
			ЗагрузкаПериодовПоДокументу = ДокументРасшифровки.Загрузка;
			КолонкаНачалаИнтервала = 3+ИнтервалВыводаОбласти - КоличествоЯчеекДляОбъединения+НомерЯчейкиНачалаДокументаВИнтервале+ДопСмещениеКолонки;
			
			КолонкаОкончанияИнтервала = 2+ ИнтервалВыводаОбласти - КоличествоЯчеекДляОбъединения + НомерЯчейкиОкончанияДокументаВИнтервале+ДопСмещениеКолонки;
			
			ОбластьРасшифровки = ОбластьРасшифровкаПоДокументам.Область(СтрокаРасшифровки,КолонкаНачалаИнтервала,СтрокаРасшифровки,КолонкаОкончанияИнтервала);
			ОбластьРасшифровки.Объединить();
			
			СтрокаПоДокументу.КоличествоЯчеек = ?(Не ВыходитЗаГраницуИнтервала, 0, ЯчеекПоДокументуВИнтервале);
			СтрокаПоДокументу.КоличествоОбъединенныхЯчеек = КолонкаОкончанияИнтервала - КолонкаНачалаИнтервала;
			СтрокаПоДокументу.ПредыдущаяЗагрузка = ЗагрузкаПериодовПоДокументу;
			СтрокаПоДокументу.ОкончаниеПредыдущегоИнтервалаЗагрузки = ВремяОкончанияВДокументе;
			СтрокаПоДокументу.НачалоИнтервала = ДокументРасшифровки.ВремяНачала;
			СтрокаПоДокументу.НомерСтрокиРасшифровки = СтрокаРасшифровки;
			
		КонецЕсли;
		
		СтрокаПоДокументу.ОкончаниеИнтервала = ОкончанияИнтервала;
		
		ОбластьРасшифровки.ЦветФона = WebЦвета.Бирюзовый;
		ОбластьРасшифровки.Обвести(СплошнаяЛиния, СплошнаяЛиния, НетЛинии, СплошнаяЛиния);
		ОбластьРасшифровки.ЦветРамки = WebЦвета.Бежевый;
		ОбластьРасшифровки.Текст = Строка(ЗагрузкаПериодовПоДокументу);
		ОбластьРасшифровки.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		ОбластьРасшифровки.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
		ОбластьРасшифровки.ЦветТекста = WebЦвета.Белый;
		ОбластьРасшифровки.Расшифровка = ДокументРасшифровки.Ссылка;
		
		НоваяСтрока = КоординатыДокументов.Добавить();
		НоваяСтрока.КоординатаНачала = ОбластьРасшифровки.Лево;
		НоваяСтрока.КоординатаОкончания = ОбластьРасшифровки.Право;
		НоваяСтрока.Ссылка = ДокументРасшифровки.Ссылка;
		НоваяСтрока.Ресурс = Ресурс;
		НоваяСтрока.НомерСтрокиДокумента = ДокументРасшифровки.НомерСтроки;
		
		ОбластьУточненияПунктиром = ОбластьРасшифровкаПоДокументам.Область(СтрокаРасшифровки,3+ДопСмещениеКолонки,СтрокаРасшифровки
		,КолонкаОкончанияИнтервала);
		ОбластьУточненияПунктиром.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.РедкийПунктир);
		ОбластьУточненияПунктиром.ЦветРамки = WebЦвета.СеребристоСерый;
		
		СтрокаРасшифровки = ?(КаждыйИнтервалНоваяСтрока, СтрокаРасшифровки+1, СтрокаРасшифровки);
		
	КонецЦикла;
	
	ЗагрузкаРесурса = МаксимумПоЗагрузке(ДокументыРасшифровки,НачалоИнтервала, ОкончанияИнтервала, КоличествоЯчеекДляОбъединения, МатрицаИнтервалов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиКратноИнтервалам(День)
	
	СписокДатПериода.Очистить();
	
	РасписаниеРаботПереключатель = ИнтервалПланирования();
	
	СписокДатПериода.Добавить(День);
	
	Элементы.Календарь.ВыделенныеДаты.Очистить();
	Элементы.Календарь.ВыделенныеДаты.Добавить(День);
	
	Элементы.ОтобразитьДень.Пометка = Ложь;
	Элементы.ОтобразитьИнтервалПланирования.Пометка = Истина;
	
	Элементы.ГруппаНастройкаИнтервалов.Доступность = Истина;
	
	ВывестиТабличныйДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПоЗначениюПериодаОтбор()
	
	Если Не ЗначениеЗаполнено(Период.ДатаНачала) И Не ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
		
		СписокДатПериода.Очистить();
		Элементы.Календарь.ВыделенныеДаты.Очистить();
		
		ВывестиТабличныйДокумент();
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Период.ДатаНачала) И ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
		Период.ДатаНачала = НачалоДня(Период.ДатаОкончания - 31536000)
	ИначеЕсли Не ЗначениеЗаполнено(Период.ДатаОкончания) И ЗначениеЗаполнено(Период.ДатаНачала) Тогда
		Период.ДатаОкончания = КонецДня(Период.ДатаОкончания + 31536000)
	КонецЕсли;
	
	ЗаполнитьСписокДатПериода(НачалоДня(Период.ДатаНачала), НачалоДня(Период.ДатаОкончания));
	
	Элементы.Календарь.ВыделенныеДаты.Очистить();
	
	Для Каждого ЭлементСписка Из СписокДатПериода Цикл
		Элементы.Календарь.ВыделенныеДаты.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	
	Если СписокДатПериода.Количество()>14 И РасписаниеРаботПереключатель = ИнтервалПланирования() Тогда
		РасписаниеРаботПереключатель = ИнтервалДень();
		Элементы.ОтобразитьДень.Пометка = Истина;
		Элементы.ОтобразитьИнтервалПланирования.Пометка = Ложь;
	КонецЕсли;
	
	ВывестиТабличныйДокумент();
	
КонецПроцедуры

&НаСервере
Функция УдалитьНеРабочиеДниИзСписка(НеРабочиеДни)
	
	СписокВозврата = Новый СписокЗначений;
	СписокВозврата.ЗагрузитьЗначения(СписокДатПериода.ВыгрузитьЗначения());
	
	Для Каждого ДеньСписка Из НеРабочиеДни Цикл
		ЭлементСписка = СписокВозврата.НайтиПоЗначению(ДеньСписка.Значение);
		СписокВозврата.Удалить(ЭлементСписка);
	КонецЦикла;
	
	Возврат СписокВозврата;
	
КонецФункции

&НаСервере
Функция МассивДокументовСПересечениямиЗаВесьПериод(ДокументыПоРесурсу, ТаблицаРасписания)
	
	МассивВозврата = Новый Массив;
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("Ссылка");
	ТаблицаДокументов.Колонки.Добавить("Загрузка");
	ТаблицаДокументов.Колонки.Добавить("ВремяНачала");
	ТаблицаДокументов.Колонки.Добавить("ВремяОкончания");
	ТаблицаДокументов.Колонки.Добавить("ЕстьПересечение");
	
	МассивСсылок = Новый Массив;
	
	Для Каждого Документ Из ДокументыПоРесурсу Цикл
		
		Если МассивСсылок.Найти(Документ.Ссылка) = Неопределено И ЗначениеЗаполнено(Документ.Ссылка) Тогда
			МассивСсылок.Добавить(Документ.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаДокументов Из МассивСсылок Цикл
		
		ПараметрыОтбора = Новый Структура("Ссылка", СтрокаДокументов);
		НайденныеСтроки = ТаблицаРасписания.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого ПериодТаблицы Из НайденныеСтроки Цикл
			
			Если Не ЗначениеЗаполнено(ПериодТаблицы.Ссылка) Тогда Продолжить КонецЕсли;
			
			ЕстьПересечение = Ложь;
			
			Для Каждого СтрокаТаблицыДокументов Из ТаблицаДокументов Цикл
				
				Если СтрокаТаблицыДокументов.ВремяНачала<=ПериодТаблицы.ВремяНачала И СтрокаТаблицыДокументов.ВремяОкончания>=ПериодТаблицы.ВремяОкончания Тогда
					ЕстьПересечение = Истина;
				КонецЕсли;
				
				Если СтрокаТаблицыДокументов.ВремяНачала>ПериодТаблицы.ВремяНачала И СтрокаТаблицыДокументов.ВремяНачала<=ПериодТаблицы.ВремяОкончания Тогда
					СтрокаТаблицыДокументов.ВремяНачала=ПериодТаблицы.ВремяНачала;
					ЕстьПересечение = Истина;
				КонецЕсли;
				
				Если СтрокаТаблицыДокументов.ВремяОкончания>ПериодТаблицы.ВремяНачала И СтрокаТаблицыДокументов.ВремяОкончания<ПериодТаблицы.ВремяОкончания Тогда
					СтрокаТаблицыДокументов.ВремяОкончания=ПериодТаблицы.ВремяОкончания;
					ЕстьПересечение = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьПересечение И Не ЗначениеЗаполнено(МассивВозврата.Найти(ПериодТаблицы.Ссылка)) Тогда
				МассивВозврата.Добавить(ПериодТаблицы.Ссылка)
			КонецЕсли;
			
			НоваяСтрока = ТаблицаДокументов.Добавить();
			НоваяСтрока.Ссылка = ПериодТаблицы.Ссылка;
			НоваяСтрока.Загрузка = ПериодТаблицы.Загрузка;
			НоваяСтрока.ВремяНачала = ПериодТаблицы.ВремяНачала;
			НоваяСтрока.ВремяОкончания = ПериодТаблицы.ВремяОкончания;
			НоваяСтрока.ЕстьПересечение = ЕстьПересечение;
			
		КонецЦикла;
		
		ТаблицаДокументов.Очистить();
		
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаСервере
Функция ЗагрузкаРесурсаЗаМесяц(ТаблицаПериодов, РесурсПредприятия, ПериодГод, ПериодМесяц)
	
	ПараметрыОтбора = Новый Структура("РесурсПредприятия, Год, Месяц",РесурсПредприятия, ПериодГод,ПериодМесяц);
	СтрокиПоРесурсу = ТаблицаПериодов.НайтиСтроки(ПараметрыОтбора);
	
	Если Не СтрокиПоРесурсу.Количество() Тогда Возврат 0 КонецЕсли;
	
	КратностьПланирования = РесурсПредприятия.КратностьПланирования;
	
	Если КратностьПланирования = 0 Тогда Возврат 0 КонецЕсли;
	
	ДоступнаяЗагрузкаЗаДень = 0;
	
	Для Каждого СтрокаРесурса Из СтрокиПоРесурсу Цикл
		
		РабочееВремя = СтрокаРесурса.ОкончаниеРабочегоПериодаЗаДень - СтрокаРесурса.НачалоРабочегоПериодаЗаДень;
		
		РабочееВремя = (РабочееВремя/60)/КратностьПланирования;
		РабочееВремя = ?(РабочееВремя - Цел(РабочееВремя)>0, Цел(РабочееВремя)+1, РабочееВремя);
		
		
		ЗагрузкаЗаИнтервал = РабочееВремя * РесурсПредприятия.Мощность;
		
		ДоступнаяЗагрузкаЗаДень = ДоступнаяЗагрузкаЗаДень + ЗагрузкаЗаИнтервал;
		
	КонецЦикла;
	
	Возврат ДоступнаяЗагрузкаЗаДень;
	
КонецФункции

&НаСервере
Функция МаксимумПоЗагрузке(ДокументыРасшифровки, НачалоИнтервала, ОкончанияИнтервала, КоличествоЯчеекВИнтервале, ТаблицаИнтервалаПо5Мин)
	
	Если Не ДокументыРасшифровки.Количество() Тогда Возврат 0 КонецЕсли;
	
	МаксимальнаяЗагрузка = 0;
	ТаблицаИнтервалаПо5Мин.Очистить();
	
	СоответствиеЯчеекВремени = Новый Соответствие;
	
	ИндексЯчейки = 1;
	ВремяИнтервала = НачалоИнтервала;
	
	Если ОкончанияИнтервала = КонецДня(ОкончанияИнтервала) Тогда
		ОкончанияИнтервала = ОкончанияИнтервала + 1;
	КонецЕсли;
	
	Пока ВремяИнтервала <= ОкончанияИнтервала Цикл
		СоответствиеЯчеекВремени.Вставить(ВремяИнтервала, ИндексЯчейки);
		
		ВремяИнтервала = ВремяИнтервала + 300;
		ИндексЯчейки = ИндексЯчейки + 1;
	КонецЦикла;
	
	Для Каждого СтрокаДокументаРасшифровки Из ДокументыРасшифровки Цикл
		
		Если СтрокаДокументаРасшифровки.ВремяНачала>=НачалоИнтервала Тогда
			ВремяЯчейкиИнтервала = СтрокаДокументаРасшифровки.ВремяНачала;
			КоличествоЯчеек = СтрокаДокументаРасшифровки.КоличествоЯчеек;
		Иначе
			ВремяЯчейкиИнтервала = НачалоИнтервала;
			КоличествоЯчеек = (СтрокаДокументаРасшифровки.ВремяОкончания - НачалоИнтервала)/300;
		КонецЕсли;
		
		НомерЯчейкиНачалаИнтервала = СоответствиеЯчеекВремени.Получить(ВремяЯчейкиИнтервала);
		
		НомерЯчейкиОкончанияИнтервала = НомерЯчейкиНачалаИнтервала + (КоличествоЯчеек-1);
		НомерЯчейкиОкончанияИнтервала = ?(НомерЯчейкиОкончанияИнтервала > КоличествоЯчеекВИнтервале, КоличествоЯчеекВИнтервале, НомерЯчейкиОкончанияИнтервала);
		
		НоваяСтрока = ТаблицаИнтервалаПо5Мин.Добавить();
		
		Пока НомерЯчейкиНачалаИнтервала <= НомерЯчейкиОкончанияИнтервала Цикл
			
			ИмяКолонки = "Колонка"+Строка(НомерЯчейкиНачалаИнтервала);
			
			НоваяСтрока[ИмяКолонки] = СтрокаДокументаРасшифровки.Загрузка;
			
			НомерЯчейкиНачалаИнтервала = НомерЯчейкиНачалаИнтервала + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого КолонкаТаблицы Из ТаблицаИнтервалаПо5Мин.Колонки Цикл
		ИтогПоКолонке = ТаблицаИнтервалаПо5Мин.Итог(КолонкаТаблицы);
		МаксимальнаяЗагрузка = ?(МаксимальнаяЗагрузка<ИтогПоКолонке, ИтогПоКолонке, МаксимальнаяЗагрузка);
	КонецЦикла;
	
	Возврат МаксимальнаяЗагрузка;
	
КонецФункции

&НаСервере
Функция ЗагрузкаРесурсаНаДату(ТаблицаПериодовНаДату, РесурсПредприятия, ПериодПоиска)
	
	ТаблицаПериодов = ТаблицаПериодовНаДату.Скопировать();
	
	ТаблицаПериодов.Свернуть("РесурсПредприятия,Период, НачалоРабочегоПериодаЗаДень, ОкончаниеРабочегоПериодаЗаДень");
	
	ПараметрыОтбора = Новый Структура("РесурсПредприятия, Период",РесурсПредприятия, НачалоДня(ПериодПоиска));
	СтрокиПоРесурсу = ТаблицаПериодов.НайтиСтроки(ПараметрыОтбора);
	
	Если Не СтрокиПоРесурсу.Количество() Тогда Возврат 0 КонецЕсли;
	
	КратностьПланирования = ?(РесурсПредприятия.КратностьПланирования = 0, 5, РесурсПредприятия.КратностьПланирования);
	
	ДоступнаяЗагрузкаЗаДень = 0;
	
	Для Каждого СтрокаРесурса Из СтрокиПоРесурсу Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаРесурса.ОкончаниеРабочегоПериодаЗаДень) 
			ИЛИ Не ЗначениеЗаполнено(СтрокаРесурса.НачалоРабочегоПериодаЗаДень) Тогда
			Продолжить
		КонецЕсли;
		
		РабочееВремя = СтрокаРесурса.ОкончаниеРабочегоПериодаЗаДень - СтрокаРесурса.НачалоРабочегоПериодаЗаДень;
		
		РабочееВремя = (РабочееВремя/60)/КратностьПланирования;
		РабочееВремя = ?(РабочееВремя - Цел(РабочееВремя)>0, Цел(РабочееВремя)+1, РабочееВремя);
		
		
		ЗагрузкаЗаИнтервал = РабочееВремя * РесурсПредприятия.Мощность;
		
		ДоступнаяЗагрузкаЗаДень = ДоступнаяЗагрузкаЗаДень + ЗагрузкаЗаИнтервал;
		
	КонецЦикла;
	
	Если КратностьПланирования = 0 Тогда Возврат 0 КонецЕсли;
	
	Возврат ДоступнаяЗагрузкаЗаДень;
	
КонецФункции

&НаСервере
Процедура ОбновитьОтображениеОбластиСогласноЗагрузке(Область, ЗагрузкаРесурса, Мощность, ВремяНачалаИнтервала = Неопределено
	,ЭтоИтоги = Ложь, ЕстьПревышениеЗагрузкиВРазрезеКратности = Ложь, КоличествоЯчеекДляОбъединения = 0
	, СтруктураИтоговЗаДень = Неопределено, ЭтоРабочийПериод = Ложь)
	
	Если Не ЭтоИтоги Тогда
		ОстатокПоЗагрузке = ?(ЭтоРабочийПериод И Мощность - ЗагрузкаРесурса > 0, Мощность - ЗагрузкаРесурса, 0);
		СтруктураРасшифровкиПериода = Новый Структура("ОстатокПоЗагрузке, ЭтоРабочийПериод",ОстатокПоЗагрузке,ЭтоРабочийПериод);
		Область.Расшифровка = СтруктураРасшифровкиПериода;
	КонецЕсли;
	
	Если РасписаниеРаботПереключатель = ИнтервалПланирования() Тогда
		Если КоличествоЯчеекДляОбъединения>2 Тогда
			
			Если ВремяНачалаИнтервала = Неопределено Тогда
				Область.Текст = Строка(ЗагрузкаРесурса)+"|"+Строка(Мощность);
			Иначе
				Область.Текст = Строка(ЗагрузкаРесурса)+"|"+Строка(Мощность)+"
				|
				|"+Формат(ВремяНачалаИнтервала,"ДФ=ЧЧ:мм");
			КонецЕсли;
		Иначе
			Область.Текст = ?(Не ЗагрузкаРесурса = 0,Строка(ЗагрузкаРесурса),"");
		КонецЕсли;
	Иначе
		
		Если ВремяНачалаИнтервала = Неопределено Тогда
			
			Если РасписаниеРаботПереключатель = ИнтервалДень() И Не СтруктураИтоговЗаДень = Неопределено И ЗначениеЗаполнено(Мощность) Тогда
				Область.Текст = Строка(ЗагрузкаРесурса)+"|"+Строка(Мощность)+"
				|
				|"+Строка(СтруктураИтоговЗаДень.ИнтервалыСЗагрузкой)+"|"+Строка(СтруктураИтоговЗаДень.ИнтервалыБезЗагрузки);
				
			ИначеЕсли ЗначениеЗаполнено(ЗагрузкаРесурса) Тогда
				Область.Текст = Строка(ЗагрузкаРесурса)+"|"+Строка(Мощность);
			КонецЕсли;
			
		Иначе
			Область.Текст = Формат(ВремяНачалаИнтервала,"ДФ=ЧЧ:мм")+"
			|
			|"+?(Не ЗагрузкаРесурса = 0,Строка(ЗагрузкаРесурса),"");
		КонецЕсли;
		
	КонецЕсли;
	
	Область.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	Область.ГоризонтальноеПоложение = ?(ЭтоИтоги, ГоризонтальноеПоложение.Право, ГоризонтальноеПоложение.Лево);
	
	Область.ЦветТекста = WebЦвета.Белый;
	Область.ЦветРамки = WebЦвета.Белый;
	
	Если ЕстьПревышениеЗагрузкиВРазрезеКратности Тогда 
		Область.ЦветФона = ?(Не ЦветПревышенияЗагрузки = Неопределено, ЦветПревышенияЗагрузки,WebЦвета.Лосось);
		Возврат;
	КонецЕсли;
	
	Если ЗагрузкаРесурса > Мощность Тогда
		Область.ЦветФона = ЦветПревышенияЗагрузки;
	ИначеЕсли ЗагрузкаРесурса = Мощность И Не (ЗагрузкаРесурса = 0 И Мощность = 0) Тогда
		Область.ЦветФона = ЦветПолнойЗагрузки;
	ИначеЕсли ЗагрузкаРесурса >=1 И ЗагрузкаРесурса< Мощность Тогда
		
		Если ПроцентЗагрузки = 0 Тогда
			Область.ЦветФона = ЦветЧастичнойЗагрузкиДо;
		Иначе
			ЗагрузкаПоПроценту = Мощность/100*ПроцентЗагрузки;
			
			Если ЗагрузкаРесурса <= ЗагрузкаПоПроценту Тогда
				Область.ЦветФона = ЦветЧастичнойЗагрузкиДо;
			Иначе
				Область.ЦветФона = ЦветЧастичнойЗагрузкиПосле;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЗагрузкаРесурса = 0 И Не Мощность = 0 Тогда
		Область.ЦветФона = ЦветРабочееВремя;
	Иначе
		Область.ЦветФона = ЦветаСтиля.РабочееВремяСвободноДоступно;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДнямиПоМесяцам()
	
	ТаблицаПериода = ТаблицаПериодаГодМесяц(Истина);
	
	СписокДатПериода.Очистить();
	Элементы.Календарь.ВыделенныеДаты.Очистить();
	
	Для Каждого ПериодТаблицы Из ТаблицаПериода Цикл
		ДнейВМесяце = День(КонецМесяца(Дата(ПериодТаблицы.Год, ПериодТаблицы.Месяц, 1)));
		
		ИндексДняМесяца = 1;
		
		Пока ИндексДняМесяца <= ДнейВМесяце Цикл
			
			ДатаПериода = Дата(ПериодТаблицы.Год, ПериодТаблицы.Месяц, ИндексДняМесяца);
			
			СписокДатПериода.Добавить(ДатаПериода);
			Элементы.Календарь.ВыделенныеДаты.Добавить(ДатаПериода);
			
			ИндексДняМесяца = ИндексДняМесяца + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДатаКалендаря = ?(Не ЗначениеЗаполнено(ДатаПериода), ТекущаяДата(), ДатаПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьДатыДоКонцаМесяца()
	
	КоличествоДат = Элементы.Календарь.ВыделенныеДаты.Количество();
	
	ПоследняяДата = Элементы.Календарь.ВыделенныеДаты[КоличествоДат-1];
	ПерваяДата = Элементы.Календарь.ВыделенныеДаты[0];
	
	КонецМесяца = НачалоДня(КонецМесяца(ПоследняяДата));
	
	Элементы.Календарь.ВыделенныеДаты.Очистить();
	
	ПерваяДата = НачалоМесяца(ПерваяДата);
	
	Пока ПерваяДата <= КонецМесяца Цикл
		Элементы.Календарь.ВыделенныеДаты.Добавить(ПерваяДата);
		ПерваяДата = НачалоДня(ПерваяДата+86400);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция МаксимальноеКоличествоЗадействованныхРесурсовВЕдиницуПериода(СписокРесурсов)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(СписокДатПериода[0].Значение));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(СписокДатПериода[СписокДатПериода.Количество()-1].Значение));
	Запрос.УстановитьПараметр("ОтборСписокКлючевыхРесурсов", СписокРесурсов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасписаниеЗагрузкиРесурсов.Регистратор КАК Ссылка,
	|	РасписаниеЗагрузкиРесурсов.РесурсПредприятия КАК РесурсПредприятия,
	|	РасписаниеЗагрузкиРесурсов.Мощность КАК Мощность,
	|	РасписаниеЗагрузкиРесурсов.Старт КАК Старт,
	|	РасписаниеЗагрузкиРесурсов.Финиш КАК Финиш,
	|	РасписаниеЗагрузкиРесурсов.Контрагент КАК Контрагент,
	|	РасписаниеЗагрузкиРесурсов.Ответственный КАК Ответственный
	|ПОМЕСТИТЬ ВТПоЗагрузкеРесурсов
	|ИЗ
	|	РегистрСведений.РасписаниеЗагрузкиРесурсов КАК РасписаниеЗагрузкиРесурсов
	|ГДЕ
	|	РасписаниеЗагрузкиРесурсов.Старт МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И РасписаниеЗагрузкиРесурсов.Финиш МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И РасписаниеЗагрузкиРесурсов.РесурсПредприятия В(&ОтборСписокКлючевыхРесурсов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТПоЗагрузкеРесурсов.РесурсПредприятия) КАК КоличествоРесурсов,
	|	НАЧАЛОПЕРИОДА(ВТПоЗагрузкеРесурсов.Старт, ДЕНЬ) КАК День
	|ПОМЕСТИТЬ Итог
	|ИЗ
	|	ВТПоЗагрузкеРесурсов КАК ВТПоЗагрузкеРесурсов
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВТПоЗагрузкеРесурсов.Старт, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Итог.КоличествоРесурсов КАК КоличествоРесурсов
	|ИЗ
	|	Итог КАК Итог
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоРесурсов УБЫВ";
	
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Результат.Следующий(), Результат.КоличествоРесурсов, 0);
	
КонецФункции

&НаСервере
Функция ТаблицаПериодаГодМесяц(ПоМесяцам = Ложь, СписокДатПериодаДляФормированияГрафикаПоДням = Неопределено)
	
	ТаблицаПериодаГоды = Новый ТаблицаЗначений;
	ТаблицаПериодаГоды.Колонки.Добавить("Год");
	ТаблицаПериодаГоды.Колонки.Добавить("КоличествоДней");
	
	Если ПоМесяцам Тогда
		ТаблицаПериодаГоды.Колонки.Добавить("Месяц");
		
		Для Каждого ДатаСписка Из СписокДатПериода Цикл
			
			НоваяСтрока = ТаблицаПериодаГоды.Добавить();
			НоваяСтрока.Год = Год(ДатаСписка.Значение);
			НоваяСтрока.Месяц = Месяц(ДатаСписка.Значение);
			НоваяСтрока.КоличествоДней = 1;
			
		КонецЦикла;
		
		ТаблицаПериодаГоды.Свернуть("Год, Месяц","КоличествоДней");
		ТаблицаПериодаГоды.Сортировать("Год Возр, Месяц Возр");
		
		Возврат ТаблицаПериодаГоды;
		
	КонецЕсли;
	
	СписокДатПериодаСчетчика = ?(Не СписокДатПериодаДляФормированияГрафикаПоДням = Неопределено
	,СписокДатПериодаДляФормированияГрафикаПоДням
	,СписокДатПериода);
	
	Для Каждого ДатаСписка Из СписокДатПериодаСчетчика Цикл
		
		НоваяСтрока = ТаблицаПериодаГоды.Добавить();
		НоваяСтрока.Год = Год(ДатаСписка.Значение);
		НоваяСтрока.КоличествоДней = 1;
		
	КонецЦикла;
	
	ТаблицаПериодаГоды.Свернуть("Год","КоличествоДней");
	ТаблицаПериодаГоды.Сортировать("Год Возр");
	
	Возврат ТаблицаПериодаГоды;
	
КонецФункции

&НаСервере
Процедура ВывестиРазделителиПериода(ОбластьМакета, Линия, Цвет)
	
	ОбластьМакета.Обвести(Линия);
	ОбластьМакета.ЦветРамки = Цвет;
	
КонецПроцедуры

&НаСервере
Функция ГраницыРабочегоПериода(ПериодПоиска, Знач РабочиеПериоды, Знач РасписаниеЗагрузки, Ресурс = Неопределено)
	
	НачалоПериода = НачалоДня(ПериодПоиска);
	ОкончаниеПериода = КонецДня(ПериодПоиска);
	
	ПараметрыОтбора = Новый Структура("Период, Год", НачалоПериода, Год(НачалоПериода));
	
	НайденныеСтрокиПоГрафику = РабочиеПериоды.НайтиСтроки(ПараметрыОтбора);
	
	КоличествоПоНайденнымСтрокамРабПер = НайденныеСтрокиПоГрафику.Количество();
	
	Если КоличествоПоНайденнымСтрокамРабПер Тогда
		
		ПерваяИтерация = Истина;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтрокиПоГрафику Цикл
			Если ЗначениеЗаполнено(НайденнаяСтрока.НачалоРабочегоПериодаЗаДень)
				И ЗначениеЗаполнено(НайденнаяСтрока.ОкончаниеРабочегоПериодаЗаДень) Тогда
				
				Если ПерваяИтерация Тогда
					НачалоПериода = НайденнаяСтрока.НачалоРабочегоПериодаЗаДень;
					ОкончаниеПериода = НайденнаяСтрока.ОкончаниеРабочегоПериодаЗаДень;
					ПерваяИтерация = Ложь;
					Продолжить;
				КонецЕсли;
				
				НачалоПериода = ?(НайденнаяСтрока.НачалоРабочегоПериодаЗаДень<НачалоПериода, НайденнаяСтрока.НачалоРабочегоПериодаЗаДень, НачалоПериода);
				ОкончаниеПериода = ?(НайденнаяСтрока.ОкончаниеРабочегоПериодаЗаДень>ОкончаниеПериода, НайденнаяСтрока.ОкончаниеРабочегоПериодаЗаДень, ОкончаниеПериода);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	НайденныеСтрокиПоРасписанию = РасписаниеЗагрузки.НайтиСтроки(ПараметрыОтбора);
	
	КоличествоПоНайденнымСтрокам = НайденныеСтрокиПоРасписанию.Количество();
	
	Если КоличествоПоНайденнымСтрокам Тогда
		НачалоПериода = ?(НайденныеСтрокиПоРасписанию[0].ВремяНачала<НачалоПериода, НайденныеСтрокиПоРасписанию[0].ВремяНачала, НачалоПериода);
		ВремяОкончания = ?(НайденныеСтрокиПоРасписанию[КоличествоПоНайденнымСтрокам-1].ВремяОкончания>ОкончаниеПериода, НайденныеСтрокиПоРасписанию[КоличествоПоНайденнымСтрокам-1].ВремяОкончания,ОкончаниеПериода);
		ОкончаниеПериода = ?(ВремяОкончания+59 = КонецДня(ВремяОкончания),ВремяОкончания+60, ВремяОкончания);
	КонецЕсли;
	
	Если Не КоличествоПоНайденнымСтрокамРабПер Тогда
		СтруктураВозврата = Новый Структура("ВремяНачала, ВремяОкончания", Дата(1,1,1), ОкончаниеПериода);
	Иначе
		СтруктураВозврата = Новый Структура("ВремяНачала, ВремяОкончания", НачалоПериода, ОкончаниеПериода);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Функция ЭтоРабочийИнтервал(ПериодПоиска, РабочиеПериоды, РасписаниеЗагрузки = Неопределено
	, ДлительностьПериода = Неопределено, ПериодДеньСводно = Ложь)
	
	Если ПериодДеньСводно Тогда 
		
		ПараметрыОтбора = Новый Структура("Период", НачалоДня(ПериодПоиска));
		СтрокиПоПериоду = РабочиеПериоды.НайтиСтроки(ПараметрыОтбора);
		
		Если Не СтрокиПоПериоду.Количество() Тогда Возврат Ложь КонецЕсли;
		
		Для Каждого СтрокаПоПериоду Из СтрокиПоПериоду Цикл
			
			Если Не СтрокаПоПериоду.НачалоРабочегоПериодаЗаДень = СтрокаПоПериоду.ОкончаниеРабочегоПериодаЗаДень Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если РасписаниеЗагрузки = Неопределено ИЛИ ДлительностьПериода = Неопределено Тогда Возврат Ложь КонецЕсли;
	
	НачалоПериода = ПериодПоиска;
	ОкончанияПериода = ПериодПоиска + ДлительностьПериода;
	
	Для Каждого ПериодТаблицы Из РасписаниеЗагрузки Цикл
		
		Если ЗначениеЗаполнено(ПериодТаблицы.Ссылка) Тогда
			
			Если Не ЗначениеЗаполнено(ПериодТаблицы.ВремяНачала) Тогда Продолжить КонецЕсли;
			
			Если ПериодТаблицы.ВремяНачала > ОкончанияПериода Тогда Продолжить КонецЕсли;
			
			Если ПериодТаблицы.ВремяНачала >= НачалоПериода И ПериодТаблицы.ВремяНачала< ОкончанияПериода
				Или ПериодТаблицы.ВремяОкончания > НачалоПериода И ПериодТаблицы.ВремяОкончания <= ОкончанияПериода 
				Или ПериодТаблицы.ВремяНачала< ОкончанияПериода И ОкончанияПериода<= ПериодТаблицы.ВремяОкончания Тогда
				Возврат Истина 
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЭтоРабочийПериод(ТаблицаПериодов, ПериодПоиска, РесурсПредприятия, ПериодДеньСводно = Ложь
	, РасписаниеЗагрузки = Неопределено, ДлительностьПериода = Неопределено, ВидРабочегоПериода = Неопределено)
	
	ВидРабочегоПериода = "ПоГрафику";
	
	ПараметрыОтбора = Новый Структура("РесурсПредприятия, Период",РесурсПредприятия, НачалоДня(ПериодПоиска));
	СтрокиПоРесурсу = ТаблицаПериодов.НайтиСтроки(ПараметрыОтбора);
	
	Если ПериодДеньСводно Тогда 
		Если СтрокиПоРесурсу.Количество() Тогда
			
			Если (ЗначениеЗаполнено(СтрокиПоРесурсу[0].НачалоРабочегоПериодаЗаДень) ИЛИ ЗначениеЗаполнено(СтрокиПоРесурсу[0].ОкончаниеРабочегоПериодаЗаДень)) Тогда
				Возврат Истина
			КонецЕсли;
			
		Иначе
			Возврат Ложь
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ПериодТаблицы Из СтрокиПоРесурсу Цикл
		
		Если ЗначениеЗаполнено(ПериодТаблицы.ГрафикРаботы) Тогда
			
			Если Не ЗначениеЗаполнено(ПериодТаблицы.НачалоРабочегоПериодаЗаДень) Тогда Продолжить КонецЕсли;
			Если ПериодТаблицы.НачалоРабочегоПериодаЗаДень > ПериодПоиска Тогда Продолжить КонецЕсли;
			
			Если ПериодПоиска < ПериодТаблицы.ОкончаниеРабочегоПериодаЗаДень Тогда Возврат Истина КонецЕсли;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если РасписаниеЗагрузки = Неопределено ИЛИ ДлительностьПериода = Неопределено Тогда Возврат Ложь КонецЕсли;
	
	НачалоПериода = ПериодПоиска;
	ОкончанияПериода = ПериодПоиска + ДлительностьПериода;
	
	СтрокиПоРесурсу = РасписаниеЗагрузки.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого ПериодТаблицы Из СтрокиПоРесурсу Цикл
		
		Если ЗначениеЗаполнено(ПериодТаблицы.Ссылка) Тогда
			
			Если Не ЗначениеЗаполнено(ПериодТаблицы.ВремяНачала) Тогда Продолжить КонецЕсли;
			
			Если ПериодТаблицы.ВремяНачала > ОкончанияПериода Тогда Продолжить КонецЕсли;
			
			Если ПериодТаблицы.ВремяНачала >= НачалоПериода И ПериодТаблицы.ВремяНачала< ОкончанияПериода
				Или ПериодТаблицы.ВремяОкончания > НачалоПериода И ПериодТаблицы.ВремяОкончания <= ОкончанияПериода 
				Или ПериодТаблицы.ВремяНачала< ОкончанияПериода И ОкончанияПериода<= ПериодТаблицы.ВремяОкончания Тогда
				ВидРабочегоПериода = "ПоДокументу";
				Возврат Истина 
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВидРабочегоПериода = "НеРабочий";
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция СтруктураИнтервалаПланирования()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	КлючевыеРесурсы.КратностьПланирования * 60 КАК КратностьПланирования,
	|	КлючевыеРесурсы.Ссылка КАК Ресурс
	|ИЗ
	|	Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|ГДЕ
	|	НЕ КлючевыеРесурсы.ПометкаУдаления
	|	И НЕ КлючевыеРесурсы.КратностьПланирования = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	КратностьПланирования";
	
	ВыборкаКратностейРесурсов = Запрос.Выполнить().Выбрать();
	
	СтруктураВозврата = Новый Структура("Ресурс, МинимальныйИнтервал");
	
	Пока ВыборкаКратностейРесурсов.Следующий() Цикл
		СтруктураВозврата.Ресурс = ВыборкаКратностейРесурсов.Ресурс;
		СтруктураВозврата.МинимальныйИнтервал = ?(ВыборкаКратностейРесурсов.КратностьПланирования<900, 900,ВыборкаКратностейРесурсов.КратностьПланирования);
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Функция ПолучитьРасписаниеЗагрузкиРесурсов(СписокРесурсов, СписокДокументов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", СписокДатПериода[СписокДатПериода.Количество()-1].Значение);
	Запрос.УстановитьПараметр("СписокРесурсов", СписокРесурсов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГрафикиРаботыРесурсов.Период КАК Период,
	|	ГрафикиРаботыРесурсов.ГрафикРаботы КАК ГрафикРаботы,
	|	ГрафикиРаботыРесурсов.РесурсПредприятия КАК РесурсПредприятия
	|ПОМЕСТИТЬ Итог
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыРесурсов КАК ГрафикиРаботыРесурсов
	|ГДЕ
	|	НЕ ГрафикиРаботыРесурсов.РесурсПредприятия.ИспользоватьГрафикСотрудника
	|	И НЕ ГрафикиРаботыРесурсов.РесурсПредприятия.Недействителен
	|	И ГрафикиРаботыРесурсов.РесурсПредприятия В (&СписокРесурсов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Сотрудники.Период,
	|	Сотрудники.ГрафикРаботы,
	|	КлючевыеРесурсы.Ссылка
	|ИЗ
	|	Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Сотрудники КАК Сотрудники
	|		ПО КлючевыеРесурсы.ЗначениеРесурса = Сотрудники.Сотрудник
	|ГДЕ
	|	НЕ КлючевыеРесурсы.Недействителен
	|	И КлючевыеРесурсы.ИспользоватьГрафикСотрудника
	|	И КлючевыеРесурсы.Ссылка В (&СписокРесурсов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Сотрудники.Период,
	|	Сотрудники.ГрафикРаботы,
	|	КлючевыеРесурсы.Ссылка
	|ИЗ
	|	Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Сотрудники КАК Сотрудники
	|		ПО КлючевыеРесурсы.ЗначениеРесурса = Сотрудники.Сотрудник
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(КлючевыеРесурсы.ЗначениеРесурса) = ТИП(Справочник.Сотрудники)
	|	И НЕ КлючевыеРесурсы.Недействителен
	|	И НЕ КлючевыеРесурсы.ИспользоватьГрафикСотрудника
	|	И НЕ КлючевыеРесурсы.Ссылка В
	|				(ВЫБРАТЬ
	|					ГрафикиРаботыРесурсов.РесурсПредприятия КАК Ссылка
	|				ИЗ
	|					РегистрСведений.ГрафикиРаботыРесурсов КАК ГрафикиРаботыРесурсов
	|				ГДЕ
	|					НЕ ГрафикиРаботыРесурсов.РесурсПредприятия.Недействителен
	|					И НЕ ГрафикиРаботыРесурсов.РесурсПредприятия.ИспользоватьГрафикСотрудника)
	|	И КлючевыеРесурсы.Ссылка В (&СписокРесурсов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Итог.Период КАК Период,
	|	Итог.ГрафикРаботы КАК ГрафикРаботы,
	|	Итог.РесурсПредприятия КАК РесурсПредприятия
	|ИЗ
	|	Итог КАК Итог
	|
	|УПОРЯДОЧИТЬ ПО
	|	РесурсПредприятия,
	|	Период УБЫВ
	|ИТОГИ ПО
	|	РесурсПредприятия";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаРесурс = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "РесурсПредприятия");
	
	ТаблицаГрафиков = Новый ТаблицаЗначений;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаГрафиков.Колонки.Добавить("Период", ОписаниеТипов);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.КлючевыеРесурсы"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаГрафиков.Колонки.Добавить("РесурсПредприятия", ОписаниеТипов);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.ГрафикиРаботы"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаГрафиков.Колонки.Добавить("ГрафикРаботы", ОписаниеТипов);
	
	Пока ВыборкаРесурс.Следующий() Цикл
		
		МассивДнейГрафиков = Новый Массив();
		Для каждого ЭлСписка Из СписокДатПериода Цикл
			МассивДнейГрафиков.Добавить(ЭлСписка.Значение);
		КонецЦикла;
		
		Выборка = ВыборкаРесурс.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(Выборка.Период) Тогда Продолжить КонецЕсли;
			
			Инд = 0;
			Пока Инд <= МассивДнейГрафиков.Количество() - 1 Цикл
				
				Если Выборка.Период <= МассивДнейГрафиков[Инд] Тогда
					
					НоваяСтрока = ТаблицаГрафиков.Добавить();
					НоваяСтрока.РесурсПредприятия = Выборка.РесурсПредприятия;
					НоваяСтрока.Период = МассивДнейГрафиков[Инд];
					НоваяСтрока.ГрафикРаботы = Выборка.ГрафикРаботы;
					МассивДнейГрафиков.Удалить(Инд);
					
				Иначе
					Инд = Инд + 1;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	РесурсыБезГрафика = Новый Массив;
	ОбщийСписокРесурсов = Новый Массив;
	
	Для Каждого ЭлементМассива Из СписокРесурсов Цикл
		ОбщийСписокРесурсов.Добавить(ЭлементМассива);
	КонецЦикла;
	
	Для Каждого РесурсСписка Из ОбщийСписокРесурсов Цикл
		
		НайденноеЗначение = ТаблицаГрафиков.Найти(РесурсСписка);
		
		Если НайденноеЗначение = Неопределено Тогда
			РесурсыБезГрафика.Добавить(РесурсСписка);
			УдаляемыйЭлемент = СписокРесурсов.Найти(РесурсСписка);
			СписокРесурсов.Удалить(УдаляемыйЭлемент);
		КонецЕсли;
		
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлючевыеРесурсы.Ссылка КАК РесурсПредприятия,
	|	КлючевыеРесурсы.Мощность КАК Мощность,
	|	КлючевыеРесурсы.Наименование КАК РесурсНаименование
	|ПОМЕСТИТЬ ВременнаяТаблицаРесурсовПредприятия
	|ИЗ
	|	Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|ГДЕ
	|	КлючевыеРесурсы.Ссылка В(&ОтборСписокКлючевыхРесурсов)
	|	И НЕ КлючевыеРесурсы.ПометкаУдаления
	|	И НЕ КлючевыеРесурсы.Недействителен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлючевыеРесурсы.Ссылка КАК РесурсПредприятия,
	|	КлючевыеРесурсы.Мощность КАК Мощность,
	|	КлючевыеРесурсы.Наименование КАК РесурсНаименование
	|ПОМЕСТИТЬ РесурсыБезГрафика
	|ИЗ
	|	Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|ГДЕ
	|	КлючевыеРесурсы.Ссылка В(&РесурсыБезГрафика)
	|	И НЕ КлючевыеРесурсы.Недействителен
	|	И НЕ КлючевыеРесурсы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаГрафиков.Период КАК Период,
	|	ТаблицаГрафиков.РесурсПредприятия КАК РесурсПредприятия,
	|	ТаблицаГрафиков.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ ВременнаяТаблицаГрафиков
	|ИЗ
	|	&ТаблицаГрафиков КАК ТаблицаГрафиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия КАК РесурсПредприятия,
	|	ВременнаяТаблицаРесурсовПредприятия.Мощность КАК Мощность,
	|	ВременнаяТаблицаГрафиков.Период КАК Период,
	|	ВременнаяТаблицаГрафиков.ГрафикРаботы КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА НЕ ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ГОД(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала)
	|		ИНАЧЕ ГОД(ГрафикиРаботы.ВремяНачала)
	|	КОНЕЦ КАК Год,
	|	ВЫБОР
	|		КОГДА НЕ ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА МЕСЯЦ(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала)
	|		ИНАЧЕ МЕСЯЦ(ГрафикиРаботы.ВремяНачала)
	|	КОНЕЦ КАК Месяц,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, 0) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяОкончания, МИНУТА), ГрафикиРаботы.ВремяОкончания, СЕКУНДА) = 0
	|						ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяОкончания, МИНУТА), СЕКУНДА, 60)
	|					ИНАЧЕ ГрафикиРаботы.ВремяОкончания
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, МИНУТА), ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, СЕКУНДА) = 0
	|					ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, МИНУТА), СЕКУНДА, 60)
	|				ИНАЧЕ ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания
	|			КОНЕЦ
	|	КОНЕЦ КАК ОкончаниеРабочегоПериодаЗаДень,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, 0) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, МИНУТА), ГрафикиРаботы.ВремяНачала, СЕКУНДА) = 0
	|						ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, МИНУТА), СЕКУНДА, 60)
	|					ИНАЧЕ ГрафикиРаботы.ВремяНачала
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, МИНУТА), ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, СЕКУНДА) = 0
	|					ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, МИНУТА), СЕКУНДА, 60)
	|				ИНАЧЕ ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала
	|			КОНЕЦ
	|	КОНЕЦ КАК НачалоРабочегоПериодаЗаДень
	|ИЗ
	|	ВременнаяТаблицаРесурсовПредприятия КАК ВременнаяТаблицаРесурсовПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаГрафиков КАК ВременнаяТаблицаГрафиков
	|		ПО ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия = ВременнаяТаблицаГрафиков.РесурсПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|		ПО (ВременнаяТаблицаГрафиков.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботы)
	|			И (ГрафикиРаботы.ВремяНачала МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			И (ГрафикиРаботы.ВремяОкончания МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			И (ВременнаяТаблицаГрафиков.Период = НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ))
	|			И (ВременнаяТаблицаГрафиков.Период = НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяОкончания, ДЕНЬ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтклоненияОтГрафиковРаботыРесурсов КАК ОтклоненияОтГрафиковРаботыРесурсов
	|		ПО ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия = ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия
	|			И (ВременнаяТаблицаГрафиков.Период = НАЧАЛОПЕРИОДА(ОтклоненияОтГрафиковРаботыРесурсов.День, ДЕНЬ))
	|			И (ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			И (ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РесурсыБезГрафика.РесурсПредприятия,
	|	РесурсыБезГрафика.Мощность,
	|	ОтклоненияОтГрафиковРаботыРесурсов.День,
	|	""ГрафикНеЗадан"",
	|	ГОД(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала),
	|	МЕСЯЦ(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала),
	|	ВЫБОР
	|		КОГДА НЕ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, МИНУТА), ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, СЕКУНДА) = 0
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, МИНУТА), СЕКУНДА, 60)
	|		ИНАЧЕ ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, МИНУТА), ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, СЕКУНДА) = 0
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, МИНУТА), СЕКУНДА, 60)
	|		ИНАЧЕ ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала
	|	КОНЕЦ
	|ИЗ
	|	РесурсыБезГрафика КАК РесурсыБезГрафика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтклоненияОтГрафиковРаботыРесурсов КАК ОтклоненияОтГрафиковРаботыРесурсов
	|		ПО РесурсыБезГрафика.РесурсПредприятия = ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия
	|			И (ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			И (ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоРабочегоПериодаЗаДень
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия КАК РесурсПредприятия,
	|	ВременнаяТаблицаРесурсовПредприятия.Мощность КАК Мощность,
	|	ВременнаяТаблицаРесурсовПредприятия.РесурсНаименование КАК РесурсНаименование
	|ПОМЕСТИТЬ ОбщаяТаблицаРесурсов
	|ИЗ
	|	ВременнаяТаблицаРесурсовПредприятия КАК ВременнаяТаблицаРесурсовПредприятия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РесурсыБезГрафика.РесурсПредприятия,
	|	РесурсыБезГрафика.Мощность,
	|	РесурсыБезГрафика.РесурсНаименование
	|ИЗ
	|	РесурсыБезГрафика КАК РесурсыБезГрафика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.Контрагент КАК Контрагент,
	|	ВложенныйЗапрос.Подразделение КАК Подразделение,
	|	ВложенныйЗапрос.Ответственный КАК Ответственный,
	|	ВложенныйЗапрос.Старт КАК ВремяНачала,
	|	ВложенныйЗапрос.Финиш КАК ВремяОкончания,
	|	ВложенныйЗапрос.Мощность КАК Загрузка,
	|	МЕСЯЦ(ВложенныйЗапрос.Старт) КАК Месяц,
	|	ГОД(ВложенныйЗапрос.Старт) КАК Год,
	|	НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Старт, ДЕНЬ) КАК Период,
	|	РАЗНОСТЬДАТ(ВложенныйЗапрос.Старт, ВложенныйЗапрос.Финиш, СЕКУНДА) / 300 КАК КоличествоЯчеек,
	|	ВложенныйЗапрос.НомерСтрокиТаблицыРесурсов КАК НомерСтроки,
	|	ОбщаяТаблицаРесурсов.РесурсПредприятия КАК РесурсПредприятия,
	|	ОбщаяТаблицаРесурсов.Мощность КАК Мощность
	|ИЗ
	|	ОбщаяТаблицаРесурсов КАК ОбщаяТаблицаРесурсов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РасписаниеЗагрузкиРесурсов.Регистратор КАК Ссылка,
	|			РасписаниеЗагрузкиРесурсов.РесурсПредприятия КАК РесурсПредприятия,
	|			РасписаниеЗагрузкиРесурсов.Мощность КАК Мощность,
	|			ВЫБОР
	|				КОГДА НЕ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(РасписаниеЗагрузкиРесурсов.Старт, МИНУТА), РасписаниеЗагрузкиРесурсов.Старт, СЕКУНДА) = 0
	|					ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(РасписаниеЗагрузкиРесурсов.Старт, МИНУТА), СЕКУНДА, 60)
	|				ИНАЧЕ РасписаниеЗагрузкиРесурсов.Старт
	|			КОНЕЦ КАК Старт,
	|			ВЫБОР
	|				КОГДА НЕ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(РасписаниеЗагрузкиРесурсов.Финиш, МИНУТА), РасписаниеЗагрузкиРесурсов.Финиш, СЕКУНДА) = 0
	|					ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(РасписаниеЗагрузкиРесурсов.Финиш, МИНУТА), СЕКУНДА, 60)
	|				ИНАЧЕ РасписаниеЗагрузкиРесурсов.Финиш
	|			КОНЕЦ КАК Финиш,
	|			РасписаниеЗагрузкиРесурсов.Контрагент КАК Контрагент,
	|			РасписаниеЗагрузкиРесурсов.Ответственный КАК Ответственный,
	|			РасписаниеЗагрузкиРесурсов.Подразделение КАК Подразделение,
	|			РасписаниеЗагрузкиРесурсов.НомерСтрокиТаблицыРесурсов КАК НомерСтрокиТаблицыРесурсов
	|		ИЗ
	|			РегистрСведений.РасписаниеЗагрузкиРесурсов КАК РасписаниеЗагрузкиРесурсов
	|		ГДЕ
	|			НАЧАЛОПЕРИОДА(РасписаниеЗагрузкиРесурсов.Старт, ДЕНЬ) В (&СписокДат)
	|			И РасписаниеЗагрузкиРесурсов.Контрагент В(&ОтборКонтрагент)
	|			И РасписаниеЗагрузкиРесурсов.РесурсПредприятия В(&ОбщийСписокРесурсов)
	|			И РасписаниеЗагрузкиРесурсов.Регистратор В(&СписокДокументов)) КАК ВложенныйЗапрос
	|		ПО ОбщаяТаблицаРесурсов.РесурсПредприятия = ВложенныйЗапрос.РесурсПредприятия
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВремяНачала";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(СписокДатПериода[0].Значение));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(СписокДатПериода[СписокДатПериода.Количество()-1].Значение));
	Запрос.УстановитьПараметр("СписокДат", СписокДатПериода);
	Запрос.УстановитьПараметр("ОтборСписокКлючевыхРесурсов", СписокРесурсов);
	Запрос.УстановитьПараметр("ТаблицаГрафиков", ТаблицаГрафиков);
	Запрос.УстановитьПараметр("РесурсыБезГрафика", РесурсыБезГрафика);
	Запрос.УстановитьПараметр("ОбщийСписокРесурсов", ОбщийСписокРесурсов);
	
	Если СписокДокументов.Количество() Тогда
		Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РасписаниеЗагрузкиРесурсов.Регистратор В(&СписокДокументов)", "");
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИмяПоляОтбора", "Контрагент");
	НайденныеКонтрагенты = ДанныеМеток.НайтиСтроки(ПараметрыОтбора);
	
	СписокКонтрагентов = Новый СписокЗначений;
	
	Для Каждого НайденнаяСтрока Из НайденныеКонтрагенты Цикл
		СписокКонтрагентов.Добавить(НайденнаяСтрока.Метка);
	КонецЦикла;
	
	Если Не СписокКонтрагентов.Количество() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РасписаниеЗагрузкиРесурсов.Контрагент В(&ОтборКонтрагент)", "");
	Иначе
		Запрос.УстановитьПараметр("ОтборКонтрагент", СписокКонтрагентов);
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	
	ПакетДанныхРесурсов = Запрос.ВыполнитьПакет();
	
	РабочиеПериоды = ПакетДанныхРесурсов[3].Выгрузить();
	ПланированиеРесурсовУНФ.ПроверитьГраницыИнтервалов(РабочиеПериоды, Истина);
	
	РасписаниеЗагрузки = ПакетДанныхРесурсов[5].Выгрузить();
	ПланированиеРесурсовУНФ.ПроверитьГраницыИнтервалов(РасписаниеЗагрузки);
	
	СтруктураВозврата.Вставить("РабочиеПериоды", РабочиеПериоды);
	СтруктураВозврата.Вставить("РасписаниеЗагрузки", РасписаниеЗагрузки);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Функция СтруктураДанныхСобытийПоКонтактам(СписокРесурсов, СписокДокументов)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПредставлениеПоискаПоКонтактам","%"+ОтборКонтакт+"%");
	Запрос.УстановитьПараметр("СписокДат", СписокДатПериода);
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СобытиеУчастники.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.РасписаниеЗагрузкиРесурсов КАК РасписаниеЗагрузкиРесурсов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Событие.Участники КАК СобытиеУчастники
	|		ПО РасписаниеЗагрузкиРесурсов.Регистратор = СобытиеУчастники.Ссылка
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(РасписаниеЗагрузкиРесурсов.Старт, ДЕНЬ) В (&СписокДат)
	|	И ТИПЗНАЧЕНИЯ(РасписаниеЗагрузкиРесурсов.Регистратор) = ТИП(Документ.Событие)
	|	И (ВЫРАЗИТЬ(СобытиеУчастники.Контакт КАК СТРОКА(100)) ПОДОБНО &ПредставлениеПоискаПоКонтактам
	|			ИЛИ СобытиеУчастники.КакСвязаться ПОДОБНО &ПредставлениеПоискаПоКонтактам)
	|	И РасписаниеЗагрузкиРесурсов.Регистратор В(&СписокДокументов)";
	
	Если СписокДокументов.Количество() Тогда
		Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РасписаниеЗагрузкиРесурсов.Регистратор В(&СписокДокументов)", "");
	КонецЕсли;
	
	МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("СписокРесурсов", СписокРесурсов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасписаниеЗагрузкиРесурсов.РесурсПредприятия КАК РесурсПредприятия
	|ИЗ
	|	РегистрСведений.РасписаниеЗагрузкиРесурсов КАК РасписаниеЗагрузкиРесурсов
	|ГДЕ
	|	РасписаниеЗагрузкиРесурсов.Документ В(&МассивДокументов)
	|	И РасписаниеЗагрузкиРесурсов.РесурсПредприятия В (&СписокРесурсов)";
	
	Если СписокРесурсов.Количество() Тогда
		Запрос.УстановитьПараметр("СписокРесурсов", СписокРесурсов);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РасписаниеЗагрузкиРесурсов.РесурсПредприятия В (&СписокРесурсов)", "");
	КонецЕсли;
	
	МассивРесурсов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РесурсПредприятия");
	
	СтруктураВозврата = Новый Структура("СписокРесурсов, СписокДокументов",МассивРесурсов, МассивДокументов);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Функция ПолучитьГрафикРаботыРесурса(СписокРесурсов, ДатаГрафика)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", ДатаГрафика);
	Запрос.УстановитьПараметр("СписокРесурсов", СписокРесурсов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГрафикиРаботыРесурсов.Период КАК Период,
	|	ГрафикиРаботыРесурсов.ГрафикРаботы КАК ГрафикРаботы,
	|	ГрафикиРаботыРесурсов.РесурсПредприятия КАК РесурсПредприятия,
	|	""ГрафикРесурса"" КАК ВидГрафика
	|ПОМЕСТИТЬ Итог
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыРесурсов КАК ГрафикиРаботыРесурсов
	|ГДЕ
	|	НЕ ГрафикиРаботыРесурсов.РесурсПредприятия.ИспользоватьГрафикСотрудника
	|	И НЕ ГрафикиРаботыРесурсов.РесурсПредприятия.Недействителен
	|	И ГрафикиРаботыРесурсов.РесурсПредприятия В(&СписокРесурсов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Сотрудники.Период,
	|	Сотрудники.ГрафикРаботы,
	|	КлючевыеРесурсы.Ссылка,
	|	""ГрафикСотрудника""
	|ИЗ
	|	Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Сотрудники КАК Сотрудники
	|		ПО КлючевыеРесурсы.ЗначениеРесурса = Сотрудники.Сотрудник
	|ГДЕ
	|	НЕ КлючевыеРесурсы.Недействителен
	|	И КлючевыеРесурсы.ИспользоватьГрафикСотрудника
	|	И КлючевыеРесурсы.Ссылка В(&СписокРесурсов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Сотрудники.Период,
	|	Сотрудники.ГрафикРаботы,
	|	КлючевыеРесурсы.Ссылка,
	|	""ГрафикСотрудникаУКоторогоНетГрафикаРесурса""
	|ИЗ
	|	Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Сотрудники КАК Сотрудники
	|		ПО КлючевыеРесурсы.ЗначениеРесурса = Сотрудники.Сотрудник
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(КлючевыеРесурсы.ЗначениеРесурса) = ТИП(Справочник.Сотрудники)
	|	И НЕ КлючевыеРесурсы.Недействителен
	|	И НЕ КлючевыеРесурсы.ИспользоватьГрафикСотрудника
	|	И НЕ КлючевыеРесурсы.Ссылка В
	|				(ВЫБРАТЬ
	|					ГрафикиРаботыРесурсов.РесурсПредприятия КАК Ссылка
	|				ИЗ
	|					РегистрСведений.ГрафикиРаботыРесурсов КАК ГрафикиРаботыРесурсов
	|				ГДЕ
	|					НЕ ГрафикиРаботыРесурсов.РесурсПредприятия.Недействителен
	|					И НЕ ГрафикиРаботыРесурсов.РесурсПредприятия.ИспользоватьГрафикСотрудника)
	|	И КлючевыеРесурсы.Ссылка В(&СписокРесурсов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Итог.Период КАК Период,
	|	Итог.ГрафикРаботы КАК ГрафикРаботы,
	|	Итог.РесурсПредприятия КАК РесурсПредприятия,
	|	Итог.ВидГрафика КАК ВидГрафика
	|ИЗ
	|	Итог КАК Итог
	|ГДЕ
	|	Итог.Период <= &НачалоПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	РесурсПредприятия,
	|	Период УБЫВ
	|ИТОГИ ПО
	|	РесурсПредприятия";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаРесурс = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "РесурсПредприятия");
	
	ТаблицаГрафиков = Новый ТаблицаЗначений;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаГрафиков.Колонки.Добавить("Период", ОписаниеТипов);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.КлючевыеРесурсы"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаГрафиков.Колонки.Добавить("РесурсПредприятия", ОписаниеТипов);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.ГрафикиРаботы"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаГрафиков.Колонки.Добавить("ГрафикРаботы", ОписаниеТипов);
	
	Пока ВыборкаРесурс.Следующий() Цикл
		
		Выборка = ВыборкаРесурс.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Период <= ДатаГрафика Тогда
				
				НоваяСтрока = ТаблицаГрафиков.Добавить();
				НоваяСтрока.РесурсПредприятия = Выборка.РесурсПредприятия;
				НоваяСтрока.Период = ДатаГрафика;
				НоваяСтрока.ГрафикРаботы = Выборка.ГрафикРаботы;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлючевыеРесурсы.Ссылка КАК РесурсПредприятия,
	|	КлючевыеРесурсы.Мощность КАК Мощность,
	|	КлючевыеРесурсы.Наименование КАК РесурсНаименование,
	|	КлючевыеРесурсы.КонтролироватьШагИнтервалаВДокументах КАК КонтролироватьШаг,
	|	КлючевыеРесурсы.КратностьПланирования КАК КратностьПланирования
	|ПОМЕСТИТЬ ВременнаяТаблицаРесурсовПредприятия
	|ИЗ
	|	Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|ГДЕ
	|	(&ОтборПоКлючевомуРесурсу
	|			ИЛИ КлючевыеРесурсы.Ссылка В (&ОтборСписокКлючевыхРесурсов))
	|	И НЕ КлючевыеРесурсы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаГрафиков.Период КАК Период,
	|	ТаблицаГрафиков.РесурсПредприятия КАК РесурсПредприятия,
	|	ТаблицаГрафиков.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ ВременнаяТаблицаГрафиков
	|ИЗ
	|	&ТаблицаГрафиков КАК ТаблицаГрафиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия КАК РесурсПредприятия,
	|	ВременнаяТаблицаРесурсовПредприятия.Мощность КАК Мощность,
	|	ВременнаяТаблицаГрафиков.Период КАК Период,
	|	ВременнаяТаблицаГрафиков.ГрафикРаботы КАК ГрафикРаботы,
	|	ГрафикиРаботы.ВремяНачала КАК ВремяНачала,
	|	ГрафикиРаботы.ВремяОкончания КАК ВремяОкончания,
	|	ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала КАК ОтклоненияВремяНачала,
	|	ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания КАК ОтклоненияВремяОкончания,
	|	ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.НеРабочийДень, ЛОЖЬ) КАК ОтклоненияНеРабочийДень,
	|	ВЫБОР
	|		КОГДА НЕ ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ГОД(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала)
	|		ИНАЧЕ ГОД(ГрафикиРаботы.ВремяНачала)
	|	КОНЕЦ КАК Год,
	|	ВЫБОР
	|		КОГДА НЕ ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА МЕСЯЦ(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала)
	|		ИНАЧЕ МЕСЯЦ(ГрафикиРаботы.ВремяНачала)
	|	КОНЕЦ КАК Месяц,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, 0) = 0
	|			ТОГДА ГрафикиРаботы.ВремяОкончания
	|		ИНАЧЕ ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания
	|	КОНЕЦ КАК ОкончаниеРабочегоПериодаЗаДень,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, 0) = 0
	|			ТОГДА ГрафикиРаботы.ВремяНачала
	|		ИНАЧЕ ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала
	|	КОНЕЦ КАК НачалоРабочегоПериодаЗаДень,
	|	ВременнаяТаблицаРесурсовПредприятия.КонтролироватьШаг КАК КонтролироватьШаг,
	|	ВременнаяТаблицаРесурсовПредприятия.КратностьПланирования КАК КратностьПланирования
	|ПОМЕСТИТЬ Итог
	|ИЗ
	|	ВременнаяТаблицаРесурсовПредприятия КАК ВременнаяТаблицаРесурсовПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаГрафиков КАК ВременнаяТаблицаГрафиков
	|		ПО ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия = ВременнаяТаблицаГрафиков.РесурсПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|		ПО (ВременнаяТаблицаГрафиков.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботы)
	|			И (ГрафикиРаботы.ВремяНачала МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			И (ГрафикиРаботы.ВремяОкончания МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			И (ВременнаяТаблицаГрафиков.Период = НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ))
	|			И (ВременнаяТаблицаГрафиков.Период = НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяОкончания, ДЕНЬ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтклоненияОтГрафиковРаботыРесурсов КАК ОтклоненияОтГрафиковРаботыРесурсов
	|		ПО ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия = ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия
	|			И (ВременнаяТаблицаГрафиков.Период = НАЧАЛОПЕРИОДА(ОтклоненияОтГрафиковРаботыРесурсов.День, ДЕНЬ))
	|			И (ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			И (ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Итог.РесурсПредприятия КАК РесурсПредприятия,
	|	Итог.Мощность КАК Мощность,
	|	Итог.Период КАК Период,
	|	Итог.ГрафикРаботы КАК ГрафикРаботы,
	|	Итог.ВремяНачала КАК ВремяНачала,
	|	Итог.ВремяОкончания КАК ВремяОкончания,
	|	Итог.ОтклоненияВремяНачала КАК ОтклоненияВремяНачала,
	|	Итог.ОтклоненияВремяОкончания КАК ОтклоненияВремяОкончания,
	|	Итог.ОтклоненияНеРабочийДень КАК ОтклоненияНеРабочийДень,
	|	Итог.Год КАК Год,
	|	Итог.Месяц КАК Месяц,
	|	Итог.ОкончаниеРабочегоПериодаЗаДень КАК ОкончаниеРабочегоПериодаЗаДень,
	|	Итог.НачалоРабочегоПериодаЗаДень КАК НачалоРабочегоПериодаЗаДень,
	|	Итог.КонтролироватьШаг КАК КонтролироватьШаг,
	|	Итог.КратностьПланирования КАК КратностьПланирования,
	|	РАЗНОСТЬДАТ(Итог.НачалоРабочегоПериодаЗаДень, Итог.ОкончаниеРабочегоПериодаЗаДень, СЕКУНДА) / (60 * Итог.КратностьПланирования) * Итог.Мощность КАК ДоступнаяЗагрузка
	|ИЗ
	|	Итог КАК Итог";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаГрафика));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаГрафика));
	Запрос.УстановитьПараметр("ОтборПоКлючевомуРесурсу", СписокРесурсов = Неопределено);
	Запрос.УстановитьПараметр("ОтборСписокКлючевыхРесурсов", СписокРесурсов);
	Запрос.УстановитьПараметр("ТаблицаГрафиков", ТаблицаГрафиков);
	
	ПараметрыОтбора = Новый Структура("ИмяПоляОтбора", "Контрагент");
	НайденныеКонтрагенты = ДанныеМеток.НайтиСтроки(ПараметрыОтбора);
	
	СписокКонтрагентов = Новый СписокЗначений;
	
	Для Каждого НайденнаяСтрока Из НайденныеКонтрагенты Цикл
		СписокКонтрагентов.Добавить(НайденнаяСтрока.Метка);
	КонецЦикла;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Результат.Свернуть("НачалоРабочегоПериодаЗаДень, ОкончаниеРабочегоПериодаЗаДень, КратностьПланирования, КонтролироватьШаг, ДоступнаяЗагрузка");
	
	МассивСтруктурПериода = Новый Массив;
	
	Для Каждого СтрокаРезультат Из Результат Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаРезультат.НачалоРабочегоПериодаЗаДень) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураЭлементаПериода = Новый Структура;
		СтруктураЭлементаПериода.Вставить("НачалоПериода", СтрокаРезультат.НачалоРабочегоПериодаЗаДень);
		СтруктураЭлементаПериода.Вставить("ОкончаниеПериода", СтрокаРезультат.ОкончаниеРабочегоПериодаЗаДень);
		СтруктураЭлементаПериода.Вставить("ДоступнаяЗагрузка", СтрокаРезультат.ДоступнаяЗагрузка);
		СтруктураЭлементаПериода.Вставить("КратностьПланирования", СтрокаРезультат.КратностьПланирования);
		СтруктураЭлементаПериода.Вставить("КонтролироватьШаг", СтрокаРезультат.КонтролироватьШаг);
		
		МассивСтруктурПериода.Добавить(СтруктураЭлементаПериода);
		
	КонецЦикла;
	
	Возврат МассивСтруктурПериода;
	
КонецФункции 

&НаСервере
Функция СтруктураРесурсовИДокументов()
	
	БылФильтрПоОтбору = Ложь;
	
	Запрос = Новый Запрос;
	
	ПараметрыОтбора = Новый Структура("ИмяПоляОтбора", "Ресурс");
	НайденныеРесурсы = ДанныеМеток.НайтиСтроки(ПараметрыОтбора);
	
	СписокРесурсов = Новый СписокЗначений;
	
	Для Каждого НайденнаяСтрока Из НайденныеРесурсы Цикл
		СписокРесурсов.Добавить(НайденнаяСтрока.Метка);
	КонецЦикла;
	
	БылФильтрПоОтбору = ?(СписокРесурсов.Количество(), Истина, Ложь);
	
	ПараметрыОтбора = Новый Структура();
	
	ПараметрыОтбора.Вставить("ИмяПоляОтбора", "ВидРесурса");
	НайденныеРесурсы = ДанныеМеток.НайтиСтроки(ПараметрыОтбора);
	
	ВидыРесурсов = Новый СписокЗначений;
	
	Для Каждого НайденнаяСтрока Из НайденныеРесурсы Цикл
		ВидыРесурсов.Добавить(НайденнаяСтрока.Метка);
	КонецЦикла;
	
	Если ВидыРесурсов.Количество() Тогда
		СписокРесурсов = ПолучитьСписокРесурсовПоВидамРесурсов(СписокРесурсов, ВидыРесурсов);
		БылФильтрПоОтбору = Истина;
	КонецЕсли;
	
	ПараметрыОтбора.Очистить();
	
	ПараметрыОтбора.Вставить("ИмяПоляОтбора", "Контрагент");
	НайденныеСтроки = ДанныеМеток.НайтиСтроки(ПараметрыОтбора);
	
	СписокКонтрагентов = Новый СписокЗначений;
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СписокКонтрагентов.Добавить(НайденнаяСтрока.Метка);
	КонецЦикла;
	
	ПараметрыОтбора.Очистить();
	
	ПараметрыОтбора.Вставить("ИмяПоляОтбора", "Документ");
	НайденныеСтроки = ДанныеМеток.НайтиСтроки(ПараметрыОтбора);
	
	СписокДокументов = Новый СписокЗначений;
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СписокДокументов.Добавить(НайденнаяСтрока.Метка);
	КонецЦикла;
	
	Если СписокДокументов.Количество() ИЛИ СписокКонтрагентов.Количество() Тогда
		СписокРесурсов = ПолучитьСписокРесурсовПоКонтрагентамИДокументам(СписокРесурсов, СписокКонтрагентов, СписокДокументов);
		БылФильтрПоОтбору = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СокрЛП(ОтборКонтакт)) Тогда
		
		СтруктураПоКонтактам = СтруктураДанныхСобытийПоКонтактам(СписокРесурсов, СписокДокументов);
		
		СписокДокументов = СтруктураПоКонтактам.СписокДокументов;
		СписокРесурсов = СтруктураПоКонтактам.СписокРесурсов;
		
		БылФильтрПоОтбору = Истина;
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлючевыеРесурсы.Ссылка КАК Ресурс,
	|	КлючевыеРесурсы.Мощность КАК Мощность,
	|	КлючевыеРесурсы.КратностьПланирования КАК КратностьПланирования
	|ИЗ
	|	Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|ГДЕ
	|	НЕ КлючевыеРесурсы.ПометкаУдаления
	|	И КлючевыеРесурсы.Ссылка В(&СписокРесурсов)
	|	И НЕ КлючевыеРесурсы.Недействителен
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючевыеРесурсы.Наименование";
	
	Если БылФильтрПоОтбору Тогда
		Запрос.УстановитьПараметр("СписокРесурсов", СписокРесурсов);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КлючевыеРесурсы.Ссылка В(&СписокРесурсов)", "");
	КонецЕсли;
	
	ТаблицаРесурсов = Запрос.Выполнить().Выгрузить();
	
	СтруктураВозврата = Новый Структура("ТаблицаРесурсов, СписокДокументов", ТаблицаРесурсов, СписокДокументов);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокРесурсовПоВидамРесурсов(СписокРесурсов, ВидыРесурсов)
	
	СписокВидовРесурсов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыРесурсовПредприятия.РесурсПредприятия КАК РесурсПредприятия
	|ИЗ
	|	РегистрСведений.ВидыРесурсовПредприятия КАК ВидыРесурсовПредприятия
	|ГДЕ
	|	ВидыРесурсовПредприятия.ВидРесурсаПредприятия В(&ВидРесурсаПредприятия)
	|	И ВидыРесурсовПредприятия.РесурсПредприятия В(&СписокРесурсов)";
	
	Запрос.УстановитьПараметр("ВидРесурсаПредприятия", ВидыРесурсов);
	
	Если СписокРесурсов.Количество() Тогда
		Запрос.УстановитьПараметр("СписокРесурсов", СписокРесурсов);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВидыРесурсовПредприятия.РесурсПредприятия В(&СписокРесурсов)", "");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СписокВидовРесурсов;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВидовРесурсов.Добавить(Выборка.РесурсПредприятия);
	КонецЦикла;
	
	Возврат СписокВидовРесурсов;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокРесурсовПоКонтрагентамИДокументам(СписокРесурсов, СписокКонтрагентов, СписокДокументов)
	
	СписокВозврата = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасписаниеЗагрузкиРесурсов.РесурсПредприятия КАК РесурсПредприятия
	|ИЗ
	|	РегистрСведений.РасписаниеЗагрузкиРесурсов КАК РасписаниеЗагрузкиРесурсов
	|ГДЕ
	|	РасписаниеЗагрузкиРесурсов.Контрагент В(&СписокКонтрагентов)
	|	И РасписаниеЗагрузкиРесурсов.Регистратор В(&СписокДокументов)
	|	И РасписаниеЗагрузкиРесурсов.РесурсПредприятия В(&СписокРесурсов)
	|	И РасписаниеЗагрузкиРесурсов.Старт МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И РасписаниеЗагрузкиРесурсов.Финиш МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(СписокДатПериода[0].Значение));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(СписокДатПериода[СписокДатПериода.Количество()-1].Значение));
	
	Если СписокРесурсов.Количество() Тогда
		Запрос.УстановитьПараметр("СписокРесурсов", СписокРесурсов);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РасписаниеЗагрузкиРесурсов.РесурсПредприятия В(&СписокРесурсов)", "");
	КонецЕсли;
	
	Если СписокКонтрагентов.Количество() Тогда
		Запрос.УстановитьПараметр("СписокКонтрагентов", СписокКонтрагентов);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасписаниеЗагрузкиРесурсов.Контрагент В(&СписокКонтрагентов)
		|	И", "");
	КонецЕсли;
	
	Если СписокДокументов.Количество() Тогда
		Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РасписаниеЗагрузкиРесурсов.Регистратор В(&СписокДокументов)", "");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СписокВозврата;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВозврата.Добавить(Выборка.РесурсПредприятия);
	КонецЦикла;
	
	Возврат СписокВозврата;
	
КонецФункции

&НаКлиенте
Процедура СоздатьНовыйРесурс()
	
	ПараметрыОткрытия = Новый Структура;
	
	Оповещение = Новый ОписаниеОповещения("ОбновитьТабличныйДокументЗавершение", ЭтотОбъект, ПараметрыОткрытия);
	
	ОткрытьФорму("Справочник.КлючевыеРесурсы.ФормаОбъекта", ПараметрыОткрытия,,,,,Оповещение);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТабличныйДокументЗавершение(ЗначениеОповещения, Параметры) Экспорт
	
	МассивДат = Элементы.Календарь.ВыделенныеДаты;
	ВывестиТабличныйДокумент(МассивДат);
	
	ЗаполнитьСписокПериодаПозиционирования();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиФормированияОтбора

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
			ПредставлениеЗначения=СтрЗаменить(Строка(ВыбранноеЗначение), "Заказ на производство", "Заказ");
		Иначе
			ПредставлениеЗначения = СтрЗаменить(Строка(ВыбранноеЗначение), "Заказ-наряд", "Заказ");
		КонецЕсли;
		
	КонецЕсли;
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	
	Элементы.ГруппаСтраницаОтбор.Заголовок = ?(ЗначениеЗаполнено(ВыбранноеЗначение), "Отбор*", "Отбор");
	
	ВывестиТабличныйДокумент();
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	СтрокаМеток = ДанныеМеток[Число(МеткаИД)];
	
	СписокГруппФормыДляУдаленияДобавленныхЭлементов = ПолучитьСписокИмяГруппыРодителя();
	
	ДанныеМеток.Удалить(СтрокаМеток);
	
	Если Не ДанныеМеток.Количество() Тогда
		Элементы.ГруппаСтраницаОтбор.Заголовок = НСтр("ru = 'Отбор'");
	КонецЕсли;
	
	РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект, СписокГруппФормыДляУдаленияДобавленныхЭлементов, "ДанныеМеток");
	
	ВывестиТабличныйДокумент();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДанныеМетокОтбораПоИмениПоля(ИмяПоля)
	СписокГруппФормыДляУдаленияДобавленныхЭлементов = ПолучитьСписокИмяГруппыРодителя();
	ОчиститьТаблицуОтборовПоИмениПоля(ИмяПоля);
	РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект, СписокГруппФормыДляУдаленияДобавленныхЭлементов, "ДанныеМеток");
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицуОтборовПоИмениПоля(ИмяПоля)
	
	ПараметрыОтбора = Новый Структура("ИмяПоляОтбора", ИмяПоля);
	НайденныеСтроки = ДанныеМеток.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаДляУдаления Из НайденныеСтроки Цикл
		ДанныеМеток.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРаботыСДокументами

&НаКлиенте
Процедура СоздатьЗаказНаПроизводство()
	
	Если Не ДобавлениеИзКорзины Тогда 
		КоллекцияРесурсов = БуферДобавленияВДокумент;
	Иначе
		КоллекцияРесурсов = ВыбранныеРесурсы;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("ВыбранныеРесурсы, ОткрытИзПланировщика",КоллекцияРесурсов, Истина);
	
	ОткрытьФорму("Документ.ЗаказНаПроизводство.ФормаОбъекта", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказНаряд()
	
	Если Не ДобавлениеИзКорзины Тогда 
		КоллекцияРесурсов = БуферДобавленияВДокумент;
	Иначе
		КоллекцияРесурсов = ВыбранныеРесурсы;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИмяПоляОтбора", "Контрагент");
	НайденныеСтроки = ДанныеМеток.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() Тогда 
		НайденнаяМетка = НайденныеСтроки[0].Метка;
		Контрагент = НайденнаяМетка[0].Значение;
	Иначе
		Контрагент = Неопределено;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура("ВидОперации, Контрагент", ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд"), Контрагент);
	
	ПараметрыОткрытия = Новый Структура("ВыбранныеРесурсы, ЗначенияЗаполнения",КоллекцияРесурсов, ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаЗаказНаряда", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВЗаказНаПроизводство()
	ПараметрыОткрытия = Новый Структура();
	ОткрытьФорму("Документ.ЗаказНаПроизводство.Форма.ФормаВыбора", ПараметрыОткрытия,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВЗаказНаряд()
	ПараметрыОткрытия = Новый Структура("РежимВыбора", Истина);
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаСпискаЗаказНаряда", ПараметрыОткрытия, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСобытие()
	
	Если Не ДобавлениеИзКорзины Тогда 
		КоллекцияРесурсов = БуферДобавленияВДокумент;
	Иначе
		КоллекцияРесурсов = ВыбранныеРесурсы;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИмяПоляОтбора", "Контрагент");
	НайденныеСтроки = ДанныеМеток.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() Тогда 
		НайденнаяМетка = НайденныеСтроки[0].Метка;
		Контрагент = НайденнаяМетка[0].Значение;
	Иначе
		Контрагент = Неопределено;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("ВыбранныеРесурсы, ОткрытИзПланировщика, Контрагент",КоллекцияРесурсов, Истина, Контрагент);
	ОткрытьФорму("Документ.Событие.Форма.ФормаСобытияЗаписьКонтрагента", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСобытие()
	ПараметрыОткрытия = Новый Структура("РежимВыбора, ТипСобытия", Истина, ПредопределенноеЗначение("Перечисление.ТипыСобытий.Запись"));
	ОткрытьФорму("Документ.Событие.ФормаСписка", ПараметрыОткрытия, ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСохраненияИВосстановленияНастроек

&НаСервере
Процедура СохранитьНастройкиФормы()
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ДанныеМетокКэш", ДанныеМетокКэш.Выгрузить());
	СтруктураНастроек.Вставить("ДанныеРеквизитовФормыКэш", ДанныеРеквизитовФормыКэш.Выгрузить());
	ХранилищеНастроекДанныхФорм.Сохранить("ПланировщикРесурсов", "СтруктураНастроек", СтруктураНастроек);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиФормы()
	
	СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить("ПланировщикРесурсов", "СтруктураНастроек");
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		Если СтруктураНастроек.Свойство("ДанныеМетокКэш") И СтруктураНастроек.Свойство("ДанныеРеквизитовФормыКэш") Тогда
			ДанныеМетокКэш.Загрузить(СтруктураНастроек.ДанныеМетокКэш);
			ДанныеРеквизитовФормыКэш.Загрузить(СтруктураНастроек.ДанныеРеквизитовФормыКэш);
		КонецЕсли;
	КонецЕсли;
	
	
	Для Каждого СтрокаВариантов Из ДанныеРеквизитовФормыКэш Цикл
		
		НаименованиеВарианта = СтрокаВариантов.НаименованиеВарианта;
		
		ОсновнойВариант = СтрокаВариантов.ОсновнойВариант;
		
		Если ОсновнойВариант Тогда
			НаименованиеВарианта = СтрокаВариантов.НаименованиеВарианта+"(основной)";
			ВариантОтображения = СтрокаВариантов.ВариантОтображения;
		КонецЕсли;
		
		Если Не СтрокаВариантов.ВариантОтображения = 1 Тогда
			Элементы.ВариантОтображения.СписокВыбора.Добавить(СтрокаВариантов.ВариантОтображения, НаименованиеВарианта, ОсновнойВариант);
		Иначе
			ПервыйЭлементСписка = Элементы.ВариантОтображения.СписокВыбора.НайтиПоЗначению(СтрокаВариантов.ВариантОтображения);
			ПервыйЭлементСписка.Представление = НаименованиеВарианта;
			ПервыйЭлементСписка.Пометка = ОсновнойВариант;
		КонецЕсли;
		
		НастройкиЗагружены = Истина;
		
	КонецЦикла;
	
	ВосстановитьДанныеВариантовОтображения(ВариантОтображения, Истина);
	
	Элементы.ВариантОтображения.СписокВыбора.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	Элементы.ГруппаВариантОтображения.Видимость = ИспользоватьВарианты;
	Элементы.КомандаПеренестиВДокумент.Видимость = Ложь;
	Элементы.ДекорацияПодобрано.Заголовок = СтрШаблон(НСтр("ru = 'Подобрано: %1'"), ВыбранныеРесурсы.Количество());
	
	Если РасписаниеРаботПереключатель = ИнтервалДень() Тогда
		Элементы.ГруппаШагИнтервалаМин.Видимость = Ложь
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПозиционированияНаОбласти

&НаКлиенте
Процедура СпозиционироватьНаОбласти(ПредставлениеПериодаПоиска, СсылкаНаДокумент = Неопределено, Ресурс = Неопределено, НомерСтрокиДокумента = 0)
	
	Если Не ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		
		Если Не ЗначениеЗаполнено(ПредставлениеПериодаПоиска) Тогда
			
			ПериодПозиционирования = Неопределено;
			
			Возврат 
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("Дата", ПредставлениеПериодаПоиска);
		СтрокиТаблицаИнтервалов = КоординатыДней.НайтиСтроки(ПараметрыОтбора);
		
		ТекущаяПозиция = Элементы.ЗагрузкаРесурсов.ТекущаяОбласть;
		
		ТекКоординатаСтроки = Строка(?(ТекущаяПозиция.Низ=1, 3, Формат(ТекущаяПозиция.Низ,"ЧГ=")));
		
		Если Не СтрокиТаблицаИнтервалов.Количество() Тогда Возврат КонецЕсли;
		
		ТекИнтервалДаты = СтрокиТаблицаИнтервалов[0];
		
		Если РасписаниеРаботПереключатель = ИнтервалДень() Тогда
			КоординатаКолонкиПозиционирования = ТекИнтервалДаты.КоординатаНачала;
		Иначе
			
			ВремяПозиционирования = 0;
			
			ПараметрыОтбора = Новый Структура("Дата", ПредставлениеПериодаПоиска);
			
			НайденныеСтрокиПоПериоду = ПериодыПоДням.НайтиСтроки(ПараметрыОтбора);
			
			ВремяНачалаПериода = Дата(1,1,1);
			
			Если НайденныеСтрокиПоПериоду.Количество() Тогда
				СписокПозиционированияПоПериоду = НайденныеСтрокиПоПериоду[0].СписокВыбораВремениПереходаПоКоординатам;
				Если СписокПозиционированияПоПериоду.Количество() Тогда
					ВремяНачалаПериода = СписокПозиционированияПоПериоду[0].Значение;
				КонецЕсли
			КонецЕсли;
			
			ВремяПозиционирования = (Час(ПериодПозиционирования)*60+Минута(ПериодПозиционирования)) - (Час(ВремяНачалаПериода)*60+Минута(ВремяНачалаПериода));
			
			КоординатаКолонкиПозиционирования = Формат(ТекИнтервалДаты.КоординатаНачала + ВремяПозиционирования/МинимальныйИнтервал,"ЧГ=");
			
		КонецЕсли;
		
		ЭтаФорма.ТекущийЭлемент = Элементы.ЗагрузкаРесурсов;
		
		Элементы.ЗагрузкаРесурсов.ТекущаяОбласть = ЗагрузкаРесурсов.Область("R"+ТекКоординатаСтроки+"C"+Строка(КоординатаКолонкиПозиционирования));
		
	Иначе
		
		ПараметрыОтбора = Новый Структура("Ссылка, Ресурс, НомерСтрокиДокумента", СсылкаНаДокумент, Ресурс, НомерСтрокиДокумента);
		
		СтрокиТаблицаИнтервалов = КоординатыДокументов.НайтиСтроки(ПараметрыОтбора);
		
		ТекущаяПозиция = Элементы.ЗагрузкаРесурсов.ТекущаяОбласть;
		
		ТекКоординатаСтроки = Строка(?(ТекущаяПозиция.Низ=1, 3, Формат(ТекущаяПозиция.Низ,"ЧГ=")));
		
		Если Не СтрокиТаблицаИнтервалов.Количество() Тогда Возврат КонецЕсли;
		
		ТекИнтервалДаты = СтрокиТаблицаИнтервалов[0];
		
		КоординатаКолонкиПозиционирования = Формат(ТекИнтервалДаты.КоординатаНачала,"ЧГ=");
		
		ЭтаФорма.ТекущийЭлемент = Элементы.ЗагрузкаРесурсов;
		
		Элементы.ЗагрузкаРесурсов.ТекущаяОбласть = ЗагрузкаРесурсов.Область("R"+ТекКоординатаСтроки+"C"+Строка(КоординатаКолонкиПозиционирования));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТекущаяДатаПозиционирования(ТекущаяКоордината)
	
	Для Каждого СтрокаКоординат Из КоординатыДней Цикл
		
		Если ТекущаяКоордината>СтрокаКоординат.КоординатаОкончания Тогда Продолжить КонецЕсли;
		
		Если ТекущаяКоордината>=СтрокаКоординат.КоординатаНачала Тогда
			ТекущееПоложениеДата = СтрокаКоординат.Дата;
			Возврат СтрокаКоординат.Дата;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущееПоложениеДата = Дата(1,1,1);
	Возврат "";
	
КонецФункции

&НаСервере
Процедура СформироватьСписокВыбораВремениПереходаПоКоординатам(КоличествоПериодов, СтрокаТЧ, НачалоИнтервала)
	
	СчетчикДата = Дата(1, 1, 1) + (НачалоИнтервала - НачалоДня(НачалоИнтервала));
	
	СтрокаТЧ.СписокВыбораВремениПереходаПоКоординатам.Добавить(СчетчикДата);
	
	Для  ИндексИнтервала = 1 По КоличествоПериодов - 1 Цикл
		
		СчетчикДата = СчетчикДата + МинимальныйИнтервал * 60;
		СтрокаТЧ.СписокВыбораВремениПереходаПоКоординатам.Добавить(СчетчикДата);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокВыбораВремениПериодов()
	
	СчетчикДата = Дата(1, 1, 1);
	
	Для ИндексИнтервала = 1 По 288 Цикл
		
		СчетчикДата = СчетчикДата + МинимальныйИнтервал * 60;
		
		Элементы.НачалоИнтервалаОтображения.СписокВыбора.Добавить(СчетчикДата, Формат(СчетчикДата, "ДФ=ЧЧ:мм"));
		Элементы.ОкончаниеИнтервалаОтображения.СписокВыбора.Добавить(СчетчикДата, Формат(СчетчикДата, "ДФ=ЧЧ:мм"));
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокДатПериода(НачалоПериода, ОкончанияПериода)
	
	СписокДатПериода.Очистить();
	
	Пока НачалоПериода <= ОкончанияПериода Цикл
		
		СписокДатПериода.Добавить(НачалоПериода);
		НачалоПериода = НачалоДня(НачалоПериода + 86450);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРаботыСВариантами

&НаКлиенте
Процедура УстановитьНаименованиеВарианта(НовоеНаименование, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(НовоеНаименование) Тогда
		
		ПараметрыОтбора = Новый Структура("ВариантОтображения", ВариантОтображения);
		НайденныеСтроки = ДанныеРеквизитовФормыКэш.НайтиСтроки(ПараметрыОтбора);
		
		ЭтоОсновнойВариант = НайденныеСтроки.количество() И НайденныеСтроки[0].ОсновнойВариант;
		
		Элементы.ВариантОтображения.СписокВыбора[ВариантОтображения-1].Представление = ?(ЭтоОсновнойВариант, НовоеНаименование+"(основной)", НовоеНаименование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВариант(Копирование = Ложь)
	
	НомерНовогоВарианта = Элементы.ВариантОтображения.СписокВыбора.Количество();
	
	Если НомерНовогоВарианта = 7 Тогда 
		ВариантОтображения = 6;
		Возврат 
	КонецЕсли;
	
	Элементы.ВариантОтображения.СписокВыбора.Вставить(НомерНовогоВарианта-1, НомерНовогоВарианта, "Вариант " + Строка(НомерНовогоВарианта));
	
	ПараметрыОтбора = Новый Структура("ВариантОтображения", ПоследнийВариантОтображения);
	НайденныеСтроки = ДанныеРеквизитовФормыКэш.НайтиСтроки(ПараметрыОтбора);
	
	ЭтоОсновнойВариант = (НайденныеСтроки.количество() И НайденныеСтроки[0].ОсновнойВариант) ИЛИ Не ДанныеРеквизитовФормыКэш.Количество();
	
	СохранитьДанныеВариантовОтображенияКлиент(ПоследнийВариантОтображения, ЭтоОсновнойВариант);
	
	Если Не Копирование Тогда
		УстановитьЗначенияРеквизитовФормыПоУмолчанию();
	КонецЕсли;
	
	ВариантОтображения = НомерНовогоВарианта;
	
	СохранитьДанныеВариантовОтображенияКлиент(ВариантОтображения);
	
	ПоследнийВариантОтображения = ВариантОтображения;
	
	ВывестиТабличныйДокумент();
	
	СписокВариантов = Новый СписокЗначений;
	Для Каждого ЗначениеВарианта Из Элементы.ВариантОтображения.СписокВыбора Цикл
		СписокВариантов.Добавить(ЗначениеВарианта.Значение, ЗначениеВарианта.Представление);
	КонецЦикла;
	ОбновитьСписокВариантов(СписокВариантов);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанныеВариантовОтображенияКлиент(НомерВарианта, ОсновнойВариант = Ложь)
	
	УдалитьСтрокиПоВариантуОтображения(НомерВарианта);
	
	НоваяСтрока = ДанныеРеквизитовФормыКэш.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭтаФорма);
	НоваяСтрока.ВариантОтображения = НомерВарианта;
	
	ПредставлениеВарианта = Элементы.ВариантОтображения.СписокВыбора.НайтиПоЗначению(НомерВарианта).Представление;
	ПредставлениеВарианта= СтрЗаменить(ПредставлениеВарианта, "(основной)", "");
	
	НоваяСтрока.НаименованиеВарианта = ПредставлениеВарианта;
	НоваяСтрока.ОсновнойВариант = ОсновнойВариант;
	
	Для Каждого СтрокаМетокОтбора Из ДанныеМеток Цикл
		НоваяСтрока = ДанныеМетокКэш.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМетокОтбора);
		НоваяСтрока.ВариантОтображения = НомерВарианта;
	КонецЦикла;
	
	ДанныеРеквизитовФормыКэш.Сортировать("ВариантОтображения Возр");
	
КонецПроцедуры


&НаСервере
Процедура ВосстановитьДанныеВариантовОтображения(НомерВарианта, ОткрытиеФормы = Ложь)
	
	СписокГруппФормыДляУдаленияДобавленныхЭлементов = ПолучитьСписокИмяГруппыРодителя();
	
	ДанныеМеток.Очистить();
	Элементы.Календарь.ВыделенныеДаты.Очистить();
	
	ПараметрыОтбора = Новый Структура("ВариантОтображения", НомерВарианта);
	НайденныеСтроки = ДанныеРеквизитовФормыКэш.НайтиСтроки(ПараметрыОтбора);
	
	Если Не ЭтоПодбор Тогда
		
		Для Каждого СтрокаКэш Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(ЭтаФорма, СтрокаКэш);
		КонецЦикла;
		
		НайденныеСтроки = ДанныеМетокКэш.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаКэш Из НайденныеСтроки Цикл
			НоваяСтрока = ДанныеМеток.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКэш);
		КонецЦикла;
		
		Если НайденныеСтроки.Количество() Тогда
			Элементы.ГруппаСтраницаОтбор.Заголовок = НСтр("ru = 'Отбор*'");
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаОтбор; 
		Иначе
			Элементы.ГруппаСтраницаОтбор.Заголовок = НСтр("ru = 'Отбор'");
		КонецЕсли;
		
		РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект, СписокГруппФормыДляУдаленияДобавленныхЭлементов, "ДанныеМеток");
		
	Иначе
		Для Каждого СтрокаКэш Из НайденныеСтроки Цикл
			ЦветНеРабочееВремя = СтрокаКэш.ЦветНеРабочееВремя;
			ЦветПолнойЗагрузки = СтрокаКэш.ЦветПолнойЗагрузки;
			ЦветПревышенияЗагрузки = СтрокаКэш.ЦветПревышенияЗагрузки;
			ЦветРабочееВремя = СтрокаКэш.ЦветРабочееВремя;
			ЦветЧастичнойЗагрузкиДо = СтрокаКэш.ЦветЧастичнойЗагрузкиДо;
			ЦветЧастичнойЗагрузкиПосле = СтрокаКэш.ЦветЧастичнойЗагрузкиПосле;
		КонецЦикла;
	КонецЕсли;

	Элементы.ГруппаНастройкаИнтервалов.Доступность = РасписаниеРаботПереключатель <> ИнтервалМесяц();
	
	Элементы.ОтобразитьДень.Пометка = РасписаниеРаботПереключатель = ИнтервалДень();
	Элементы.ОтобразитьМесяц.Пометка = РасписаниеРаботПереключатель = ИнтервалМесяц();
	Элементы.ОтобразитьИнтервалПланирования.Пометка = РасписаниеРаботПереключатель = ИнтервалПланирования();
	
	Элементы.ГруппаИнтервалОтображения.Доступность = Не ТолькоРабочееВремя;
	
	ПериодНадпись = ОбновитьПредставлениеПериода(Период);
	
	Если ОткрытиеФормы Тогда
		СписокДатПериода.Очистить();
	Иначе
		МассивДат = СписокДатПериода.ВыгрузитьЗначения();
		
		Для Каждого ДатаМассива Из МассивДат Цикл
			Элементы.Календарь.ВыделенныеДаты.Добавить(ДатаМассива);
		КонецЦикла;
		
		ВывестиТабличныйДокумент(МассивДат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиПоВариантуОтображения(НомерВарианта)
	
	ПараметрыОтбора = Новый Структура("ВариантОтображения", НомерВарианта);
	
	НайденныеСтроки = ДанныеРеквизитовФормыКэш.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаКэш Из НайденныеСтроки Цикл
		ДанныеРеквизитовФормыКэш.Удалить(СтрокаКэш);
	КонецЦикла;
	
	НайденныеСтроки = ДанныеМетокКэш.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаКэш Из НайденныеСтроки Цикл
		ДанныеМетокКэш.Удалить(СтрокаКэш);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРаботыСКорзиной

&НаКлиенте
Процедура ПодобратьВКорзину(Ресурс, Область, КонтрольГрафика)
	
	ВремяНачала = ПериодПозиционирования;
	ВремяОкончания = ПериодПозиционирования + (Область.Право - Область.Лево)*300 + 300;
	ДеньПериода = ПредставлениеПериода;
	
	ВремяОкончания = ?(Не ЗначениеЗаполнено(ВремяОкончания), ВремяНачала, ВремяОкончания);
	
	Если РасписаниеРаботПереключатель = ИнтервалПланирования() И (ЗначениеЗаполнено(ВремяОкончания) И ЗначениеЗаполнено(ДеньПериода)) 
		ИЛИ (РасписаниеРаботПереключатель = ИнтервалДень() И ЗначениеЗаполнено(ДеньПериода))Тогда 
		
		ВремяОкончанияСек = ВремяОкончания - Дата(1,1,1);
		ДатаИВремяОкончания = ДеньПериода + ВремяОкончанияСек;
		ДатаИВремяОкончания = ?(ДатаИВремяОкончания>КонецДня(ДеньПериода), КонецДня(ДеньПериода), ДатаИВремяОкончания);
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Ресурс", Ресурс);
		СтруктураДанные = ПолучитьДанныеРесурса(СтруктураДанные);
		
		Если РасписаниеРаботПереключатель = ИнтервалДень() Тогда
			НачалоПериода = НачалоДня(ДеньПериода);
			ОкончаниеПериода = КонецДня(ДеньПериода);
		Иначе
			НачалоПериода = ДеньПериода+(ВремяНачала - Дата(1,1,1));
			ОкончаниеПериода = ДатаИВремяОкончания;
			
			Если ОкончаниеПериода >= НачалоДня(НачалоПериода+86400) Тогда
				ОкончаниеПериода = ?(НачалоДня(ОкончаниеПериода) = ОкончаниеПериода, ОкончаниеПериода - 1, ОкончаниеПериода - 300);
			КонецЕсли;

		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("Ресурс, НачалоПериода, ОкончаниеПериода", Ресурс, НачалоПериода, ОкончаниеПериода);
		НайденныеСтроки = ВыбранныеРесурсы.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() Тогда
			ВыбраннаяСтрока = НайденныеСтроки[0];
			ВыбраннаяСтрока.Загрузка = ВыбраннаяСтрока.Загрузка+1;
		Иначе
			
			Если РасписаниеРаботПереключатель = ИнтервалПланирования() Тогда
				ВыбраннаяСтрока = ВыбранныеРесурсы.Добавить();
				ВыбраннаяСтрока.Ресурс = Ресурс;
				ВыбраннаяСтрока.НачалоПериода = НачалоПериода;
				ВыбраннаяСтрока.ОкончаниеПериода = ОкончаниеПериода;
				ВыбраннаяСтрока.Загрузка =1;
				ВыбраннаяСтрока.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.НеПовторять");
				
				ВыбраннаяСтрока.КонтролироватьШаг = СтруктураДанные.КонтролироватьШаг;
				ВыбраннаяСтрока.КратностьПланирования = СтруктураДанные.КратностьПланирования;
				
			Иначе
				
				СписокРесурсов = Новый СписокЗначений;
				СписокРесурсов.Добавить(Ресурс);
				
				РабочиеПериоды = ПолучитьГрафикРаботыРесурса(СписокРесурсов, НачалоДня(НачалоПериода));
				
				Если РабочиеПериоды.Количество() Тогда
					
					Для Каждого РабочийПериод Из РабочиеПериоды Цикл
						
						ВыбраннаяСтрока = ВыбранныеРесурсы.Добавить();
						ВыбраннаяСтрока.Ресурс = Ресурс;
						ВыбраннаяСтрока.НачалоПериода = РабочийПериод.НачалоПериода;
						ВыбраннаяСтрока.ОкончаниеПериода = РабочийПериод.ОкончаниеПериода;
						ВыбраннаяСтрока.Загрузка = 1;
						ВыбраннаяСтрока.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.НеПовторять");
						
						ВыбраннаяСтрока.КонтролироватьШаг = РабочийПериод.КонтролироватьШаг;
						ВыбраннаяСтрока.КратностьПланирования = РабочийПериод.КратностьПланирования;
						
					КонецЦикла;
					
				Иначе
					
					ВыбраннаяСтрока = ВыбранныеРесурсы.Добавить();
					ВыбраннаяСтрока.Ресурс = Ресурс;
					ВыбраннаяСтрока.НачалоПериода = НачалоПериода;
					ВыбраннаяСтрока.ОкончаниеПериода = ОкончаниеПериода;
					ВыбраннаяСтрока.Загрузка =1;
					ВыбраннаяСтрока.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.НеПовторять");
					
					ВыбраннаяСтрока.КонтролироватьШаг = СтруктураДанные.КонтролироватьШаг;
					ВыбраннаяСтрока.КратностьПланирования = СтруктураДанные.КратностьПланирования;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьОтображениеКорзины();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьВКорзинуКонтекстноеМеню(Ресурс, Область, ВремяНачала, ВремяОкончания, СтруктураДанные)
	
	ВремяОкончания = ?(Не ЗначениеЗаполнено(ВремяОкончания), КонецДня(ВремяНачала), ВремяОкончания);
	
	НачалоПериода = ?(РасписаниеРаботПереключатель = ИнтервалДень(), НачалоДня(ВремяНачала), ВремяНачала); 
	
	ОкончаниеПериода = ВремяОкончания;
	
	СписокВыбранныхДат =  Новый СписокЗначений;
	
	Если НачалоДня(НачалоПериода) = НачалоДня(ОкончаниеПериода) Тогда
		СписокВыбранныхДат.Добавить(НачалоДня(НачалоПериода));
	Иначе
		
		ДатаПериода = НачалоДня(НачалоПериода);
		ЗавершениеПериода = НачалоДня(ОкончаниеПериода);
		
		Пока ДатаПериода <= ЗавершениеПериода Цикл
			
			НайденноеЗначение = СписокДатПериода.НайтиПоЗначению(ДатаПериода);
			
			Если Не НайденноеЗначение = Неопределено Тогда
				СписокВыбранныхДат.Добавить(ДатаПериода)
			КонецЕсли;
			
			ДатаПериода = НачалоДня(ДатаПериода + 86400);
			
		КонецЦикла;
	КонецЕсли;
	
	Если РасписаниеРаботПереключатель = ИнтервалПланирования() Тогда
		
		Для Каждого ПериодСписка Из СписокВыбранныхДат Цикл
			
			ЕстьРазрыв = ЕстьРазрывПоДнюСлева(ПериодСписка.Значение, СписокВыбранныхДат);
			
			Если ПериодСписка.Значение<=НачалоДня(ОкончаниеПериода) И Не ЕстьРазрыв Тогда Продолжить КонецЕсли;
			
			ОкончаниеПериода = ОкончаниеСмежногоИнтервала(ПериодСписка.Значение, СписокВыбранныхДат);
			ОкончаниеПериода = ?(НачалоДня(ОкончаниеПериода) = НачалоДня(ВремяОкончания), ВремяОкончания, ОкончаниеПериода);
			
			НачалоПериода = ?(НачалоДня(ПериодСписка.Значение) = НачалоДня(ВремяНачала), ВремяНачала, НачалоДня(ПериодСписка.Значение));
			
			ПараметрыОтбора = Новый Структура("Ресурс, НачалоПериода, ОкончаниеПериода", Ресурс, НачалоПериода, ОкончаниеПериода);
			НайденныеСтроки = ВыбранныеРесурсы.НайтиСтроки(ПараметрыОтбора);
			
			Если НайденныеСтроки.Количество() Тогда
				ВыбраннаяСтрока = НайденныеСтроки[0];
				ВыбраннаяСтрока.Загрузка = ВыбраннаяСтрока.Загрузка+1;
				Продолжить
			КонецЕсли;
			
			ВыбраннаяСтрока = ВыбранныеРесурсы.Добавить();
			ВыбраннаяСтрока.Ресурс = Ресурс;
			ВыбраннаяСтрока.НачалоПериода = НачалоПериода;
			ВыбраннаяСтрока.ОкончаниеПериода = ОкончаниеПериода;
			ВыбраннаяСтрока.Загрузка =1;
			ВыбраннаяСтрока.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.НеПовторять");
			
			ВыбраннаяСтрока.КонтролироватьШаг = СтруктураДанные.КонтролироватьШаг;
			ВыбраннаяСтрока.КратностьПланирования = СтруктураДанные.КратностьПланирования;
			
		КонецЦикла;
	Иначе
		
		СписокРесурсов = Новый СписокЗначений;
		СписокРесурсов.Добавить(Ресурс);
			
		СоответствиеРабочихПериодовПоДням = Новый Соответствие;
		
		Для Каждого ПериодСписка Из СписокВыбранныхДат Цикл
			РабочиеПериоды = ПолучитьГрафикРаботыРесурса(СписокРесурсов, НачалоДня(ПериодСписка.Значение));
			
			Если РабочиеПериоды.Количество() Тогда
				СоответствиеРабочихПериодовПоДням.Вставить(ПериодСписка.Значение, РабочиеПериоды);
			КонецЕсли;
			
		КонецЦикла;
		
		БылВыводПоГрафику = Ложь;
		
		Для Каждого ПериодСписка Из СписокВыбранныхДат Цикл
			
			ЗначениеСоответствия = СоответствиеРабочихПериодовПоДням.Получить(ПериодСписка.Значение);
			
			ВыводПоРасписанию = Ложь;
			Если Не ЗначениеСоответствия = Неопределено Тогда
				Если Не ЗначениеСоответствия[0].ОкончаниеПериода = КонецДня(ЗначениеСоответствия[0].ОкончаниеПериода) Тогда
					ВыводПоРасписанию = Истина
				КонецЕсли;
			КонецЕсли;
			
			Если ВыводПоРасписанию Тогда
				
				РабочиеПериоды = ЗначениеСоответствия;
				
				Для Каждого РабочийПериод Из РабочиеПериоды Цикл
					
					ПараметрыОтбора = Новый Структура("Ресурс, НачалоПериода, ОкончаниеПериода", Ресурс, РабочийПериод.НачалоПериода, РабочийПериод.ОкончаниеПериода);
					НайденныеСтроки = ВыбранныеРесурсы.НайтиСтроки(ПараметрыОтбора);
					
					Если НайденныеСтроки.Количество() Тогда
						ВыбраннаяСтрока = НайденныеСтроки[0];
						ВыбраннаяСтрока.Загрузка = ВыбраннаяСтрока.Загрузка+1;
						Продолжить
					КонецЕсли;
					
					ВыбраннаяСтрока = ВыбранныеРесурсы.Добавить();
					ВыбраннаяСтрока.Ресурс = Ресурс;
					ВыбраннаяСтрока.НачалоПериода = РабочийПериод.НачалоПериода;
					ВыбраннаяСтрока.ОкончаниеПериода = РабочийПериод.ОкончаниеПериода;
					ВыбраннаяСтрока.Загрузка = 1;
					ВыбраннаяСтрока.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.НеПовторять");
					
					ВыбраннаяСтрока.КонтролироватьШаг = РабочийПериод.КонтролироватьШаг;
					ВыбраннаяСтрока.КратностьПланирования = РабочийПериод.КратностьПланирования;
					
					БылВыводПоГрафику = Истина;
					
				КонецЦикла;
				
				
			Иначе
				
				ЕстьРазрыв = ЕстьРазрывПоДнюСлева(ПериодСписка.Значение, СписокВыбранныхДат) ИЛИ БылВыводПоГрафику;
				
				Если ПериодСписка.Значение<=НачалоДня(ОкончаниеПериода) И Не ЕстьРазрыв Тогда Продолжить КонецЕсли;
				
				БылВыводПоГрафику = Ложь;
				
				ОкончаниеПериода = ОкончаниеСмежногоИнтервала(ПериодСписка.Значение, СписокВыбранныхДат, СоответствиеРабочихПериодовПоДням);
				
				ПараметрыОтбора = Новый Структура("Ресурс, НачалоПериода, ОкончаниеПериода", Ресурс, НачалоДня(ПериодСписка.Значение), ОкончаниеПериода);
				НайденныеСтроки = ВыбранныеРесурсы.НайтиСтроки(ПараметрыОтбора);
				
				Если НайденныеСтроки.Количество() Тогда
					ВыбраннаяСтрока = НайденныеСтроки[0];
					ВыбраннаяСтрока.Загрузка = ВыбраннаяСтрока.Загрузка+1;
					Продолжить
				КонецЕсли;
				
				ВыбраннаяСтрока = ВыбранныеРесурсы.Добавить();
				ВыбраннаяСтрока.Ресурс = Ресурс;
				ВыбраннаяСтрока.НачалоПериода = НачалоДня(ПериодСписка.Значение);
				ВыбраннаяСтрока.ОкончаниеПериода = ОкончаниеПериода;
				ВыбраннаяСтрока.Загрузка =1;
				ВыбраннаяСтрока.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.НеПовторять");
				
				ВыбраннаяСтрока.КонтролироватьШаг = СтруктураДанные.КонтролироватьШаг;
				ВыбраннаяСтрока.КратностьПланирования = СтруктураДанные.КратностьПланирования;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НастроитьОтображениеКорзины(,Ложь);
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьРазрывПоДнюСлева(ДеньПериода, СписокВыбранныхДат)

	КоличествоДат = СписокВыбранныхДат.Количество();
	
	Если КоличествоДат <= 1 Тогда Возврат Истина КонецЕсли;
	
	НайденноеЗначениеСлева = СписокВыбранныхДат.НайтиПоЗначению(НачалоДня(ДеньПериода - 86400));
	
	Возврат ?(НайденноеЗначениеСлева = Неопределено, Истина, Ложь);
	
КонецФункции

&НаКлиенте
Функция ОкончаниеСмежногоИнтервала(ДеньПериода, СписокВыбранныхДат, СоответствиеРабочихПериодовПоДням = Неопределено)

	КоличествоДат = СписокВыбранныхДат.Количество();
	ПоследнееСмежноеЗначение = ДеньПериода;
	
	Если КоличествоДат <= 1 Тогда Возврат КонецДня(ПоследнееСмежноеЗначение) КонецЕсли;
	
	Если Не СоответствиеРабочихПериодовПоДням = Неопределено Тогда
		
		Пока Истина Цикл
			
			НайденноеЗначениеСправа = СписокВыбранныхДат.НайтиПоЗначению(НачалоДня(ПоследнееСмежноеЗначение + 86400));
			
			Если НайденноеЗначениеСправа = Неопределено Тогда Возврат КонецДня(ПоследнееСмежноеЗначение) КонецЕсли;
			
			ЗначениеСоответствия = СоответствиеРабочихПериодовПоДням.Получить(НачалоДня(ПоследнееСмежноеЗначение+86400));
			
			Если Не ЗначениеСоответствия = Неопределено
				И Не ЗначениеСоответствия[0].ОкончаниеПериода = КонецДня(ЗначениеСоответствия[0].ОкончаниеПериода) Тогда
				Возврат КонецДня(ПоследнееСмежноеЗначение);
			КонецЕсли;
			
			ПоследнееСмежноеЗначение = НайденноеЗначениеСправа.Значение;
			
		КонецЦикла;
		
	Иначе
		
		Пока Истина Цикл
			
			НайденноеЗначениеСправа = СписокВыбранныхДат.НайтиПоЗначению(НачалоДня(ПоследнееСмежноеЗначение + 86400));
			
			Если НайденноеЗначениеСправа = Неопределено Тогда Возврат КонецДня(ПоследнееСмежноеЗначение) КонецЕсли;
			
			ПоследнееСмежноеЗначение = НайденноеЗначениеСправа.Значение;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеДействие = Параметры.ВыбранноеДействие;
	
	Область = Параметры.Область;
	КонтрольГрафика = Параметры.КонтрольГрафика;
	
	Если ВыбранноеДействие = "Подобрать" Тогда
		ПодобратьВКорзину(Параметры.Ресурс, Параметры.Область, КонтрольГрафика);
		Возврат
	КонецЕсли;
	
	Если ВыбранноеДействие = "Создать Заказ на производство" Тогда
		ПодобратьВБуфер(Параметры.Ресурс, Область, КонтрольГрафика);
		СоздатьЗаказНаПроизводство();
		БуферДобавленияВДокумент.Очистить();
		Возврат
	КонецЕсли;
	
	Если ВыбранноеДействие = "Создать Заказ-Наряд" Тогда
		ПодобратьВБуфер(Параметры.Ресурс, Область, КонтрольГрафика);
		СоздатьЗаказНаряд();
		БуферДобавленияВДокумент.Очистить();
		Возврат
	КонецЕсли;
	
	Если ВыбранноеДействие = "Добавить в Заказ-Наряд" Тогда
		ПодобратьВБуфер(Параметры.Ресурс, Область, КонтрольГрафика);
		ДобавитьВЗаказНаряд();
		БуферДобавленияВДокумент.Очистить();
		Возврат
	КонецЕсли;
	
	
	Если ВыбранноеДействие = "Добавить в Заказ на производство" Тогда
		ПодобратьВБуфер(Параметры.Ресурс, Область, КонтрольГрафика);
		ДобавитьВЗаказНаПроизводство();
		БуферДобавленияВДокумент.Очистить();
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеДействие = "Создать событие ""Запись""" Тогда
		ПодобратьВБуфер(Параметры.Ресурс, Область, КонтрольГрафика);
		СоздатьСобытие();
		БуферДобавленияВДокумент.Очистить();
		Возврат
	КонецЕсли;
	
	Если ВыбранноеДействие = "Добавить в событие ""Запись""" Тогда
		ПодобратьВБуфер(Параметры.Ресурс, Область, КонтрольГрафика);
		ДобавитьВСобытие();
		БуферДобавленияВДокумент.Очистить();
		Возврат
	КонецЕсли;

	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеРесурса(СтруктураДанные)
	
	СтруктураДанные.Вставить("КонтролироватьШаг", СтруктураДанные.Ресурс.КонтролироватьШагИнтервалаВДокументах);
	СтруктураДанные.Вставить("Мощность", СтруктураДанные.Ресурс.Мощность);
	СтруктураДанные.Вставить("КратностьПланирования", СтруктураДанные.Ресурс.КратностьПланирования);
	
	Возврат СтруктураДанные;
КонецФункции

&НаКлиенте
Процедура ПодобратьВБуфер(Ресурс,Область, КонтрольГрафика)
	
	ВремяНачала = ПериодПозиционирования;
	ВремяОкончания = ПериодПозиционирования + (Область.Право - Область.Лево)*300 + 300;
	ДеньПериода = ПредставлениеПериода;
	
	ВремяОкончания = ?(Не ЗначениеЗаполнено(ВремяОкончания), ВремяНачала, ВремяОкончания);
	
	Если РасписаниеРаботПереключатель = ИнтервалПланирования() И (ЗначениеЗаполнено(ВремяОкончания) И ЗначениеЗаполнено(ДеньПериода)) 
		ИЛИ (РасписаниеРаботПереключатель = ИнтервалДень() И ЗначениеЗаполнено(ДеньПериода))Тогда 
		
		ВремяОкончанияСек = ВремяОкончания - Дата(1,1,1);
		ДатаИВремяОкончания = ДеньПериода + ВремяОкончанияСек;
		ДатаИВремяОкончания = ?(ДатаИВремяОкончания>КонецДня(ДеньПериода), КонецДня(ДеньПериода), ДатаИВремяОкончания);
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Ресурс", Ресурс);
		СтруктураДанные = ПолучитьДанныеРесурса(СтруктураДанные);
		
		Если РасписаниеРаботПереключатель = ИнтервалДень() Тогда
			НачалоПериода = НачалоДня(ДеньПериода);
			ОкончаниеПериода = КонецДня(ДеньПериода);
		Иначе
			НачалоПериода = ДеньПериода+(ВремяНачала - Дата(1,1,1));
			ОкончаниеПериода = НачалоПериода + СтруктураДанные.КратностьПланирования * 60;
			
			ОкончаниеПериода = ?(ОкончаниеПериода>ДатаИВремяОкончания, ДатаИВремяОкончания, ОкончаниеПериода);
			
			Если ОкончаниеПериода >= НачалоДня(НачалоПериода+86400) Тогда
				ОкончаниеПериода = ?(НачалоДня(ОкончаниеПериода) = ОкончаниеПериода, ОкончаниеПериода - 1, ОкончаниеПериода - 300);
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("Ресурс, НачалоПериода, ОкончаниеПериода", Ресурс, НачалоПериода, ОкончаниеПериода);
		
		НайденныеСтроки = БуферДобавленияВДокумент.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() Тогда
			ВыбраннаяСтрока = НайденныеСтроки[0];
			ВыбраннаяСтрока.Загрузка = ВыбраннаяСтрока.Загрузка+1;
		Иначе
			
			Если РасписаниеРаботПереключатель = ИнтервалПланирования() Тогда
				ВыбраннаяСтрока = БуферДобавленияВДокумент.Добавить();
				ВыбраннаяСтрока.Ресурс = Ресурс;
				ВыбраннаяСтрока.НачалоПериода = НачалоПериода;
				ВыбраннаяСтрока.ОкончаниеПериода = ОкончаниеПериода;
				ВыбраннаяСтрока.Загрузка =1;
				ВыбраннаяСтрока.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.НеПовторять");
				
				ВыбраннаяСтрока.КонтролироватьШаг = СтруктураДанные.КонтролироватьШаг;
				ВыбраннаяСтрока.КратностьПланирования = СтруктураДанные.КратностьПланирования;
			Иначе
				
				СписокРесурсов = Новый СписокЗначений;
				СписокРесурсов.Добавить(Ресурс);
				
				РабочиеПериоды = ПолучитьГрафикРаботыРесурса(СписокРесурсов, НачалоДня(НачалоПериода));
				
				Если РабочиеПериоды.Количество() Тогда
					
					Для Каждого РабочийПериод Из РабочиеПериоды Цикл
						
						ВыбраннаяСтрока = БуферДобавленияВДокумент.Добавить();
						ВыбраннаяСтрока.Ресурс = Ресурс;
						ВыбраннаяСтрока.НачалоПериода = РабочийПериод.НачалоПериода;
						ВыбраннаяСтрока.ОкончаниеПериода = РабочийПериод.ОкончаниеПериода;
						ВыбраннаяСтрока.Загрузка = 1;
						ВыбраннаяСтрока.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.НеПовторять");
						
						ВыбраннаяСтрока.КонтролироватьШаг = РабочийПериод.КонтролироватьШаг;
						ВыбраннаяСтрока.КратностьПланирования = РабочийПериод.КратностьПланирования;
						
					КонецЦикла;
					
				Иначе
					
					ВыбраннаяСтрока = БуферДобавленияВДокумент.Добавить();
					ВыбраннаяСтрока.Ресурс = Ресурс;
					ВыбраннаяСтрока.НачалоПериода = НачалоПериода;
					ВыбраннаяСтрока.ОкончаниеПериода = ОкончаниеПериода;
					ВыбраннаяСтрока.Загрузка =1;
					ВыбраннаяСтрока.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.НеПовторять");
					
					ВыбраннаяСтрока.КонтролироватьШаг = СтруктураДанные.КонтролироватьШаг;
					ВыбраннаяСтрока.КратностьПланирования = СтруктураДанные.КратностьПланирования;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьВБуферКонтекстноеМеню(Ресурс, Область, КонтрольГрафика, ВремяНачала, ВремяОкончания)
	
	ВремяОкончания = ?(Не ЗначениеЗаполнено(ВремяОкончания), КонецДня(ВремяНачала), ВремяОкончания);
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Ресурс", Ресурс);
	СтруктураДанные = ПолучитьДанныеРесурса(СтруктураДанные);
	
	НачалоПериода = ?(РасписаниеРаботПереключатель = ИнтервалДень(), НачалоДня(ВремяНачала), ВремяНачала); 
	
	ОкончаниеПериода = ВремяОкончания;
	
	СписокВыбранныхДат =  Новый СписокЗначений;
	
	Если НачалоДня(НачалоПериода) = НачалоДня(ОкончаниеПериода) Тогда
		СписокВыбранныхДат.Добавить(НачалоДня(НачалоПериода));
	Иначе
		
		ДатаПериода = НачалоДня(НачалоПериода);
		ЗавершениеПериода = НачалоДня(ОкончаниеПериода);
		
		Пока ДатаПериода <= ЗавершениеПериода Цикл
			
			НайденноеЗначение = СписокДатПериода.НайтиПоЗначению(ДатаПериода);
			
			Если Не НайденноеЗначение = Неопределено Тогда
				СписокВыбранныхДат.Добавить(ДатаПериода)
			КонецЕсли;
			
			ДатаПериода = НачалоДня(ДатаПериода + 86400);
			
		КонецЦикла;
	КонецЕсли;
	
	Если РасписаниеРаботПереключатель = ИнтервалПланирования() Тогда
		
		Для Каждого ПериодСписка Из СписокВыбранныхДат Цикл
			
			ЕстьРазрыв = ЕстьРазрывПоДнюСлева(ПериодСписка.Значение, СписокВыбранныхДат);
			
			Если ПериодСписка.Значение<=НачалоДня(ОкончаниеПериода) И Не ЕстьРазрыв Тогда Продолжить КонецЕсли;
			
			ОкончаниеПериода = ОкончаниеСмежногоИнтервала(ПериодСписка.Значение, СписокВыбранныхДат);
			ОкончаниеПериода = ?(НачалоДня(ОкончаниеПериода) = НачалоДня(ВремяОкончания), ВремяОкончания, ОкончаниеПериода);
			
			НачалоПериода = ?(НачалоДня(ПериодСписка.Значение) = НачалоДня(ВремяНачала), ВремяНачала, НачалоДня(ПериодСписка.Значение));
			
			ПараметрыОтбора = Новый Структура("Ресурс, НачалоПериода, ОкончаниеПериода", Ресурс, НачалоПериода, ОкончаниеПериода);
			НайденныеСтроки = БуферДобавленияВДокумент.НайтиСтроки(ПараметрыОтбора);
			
			Если НайденныеСтроки.Количество() Тогда
				ВыбраннаяСтрока = НайденныеСтроки[0];
				ВыбраннаяСтрока.Загрузка = ВыбраннаяСтрока.Загрузка+1;
				Продолжить
			КонецЕсли;
			
			ВыбраннаяСтрока = БуферДобавленияВДокумент.Добавить();
			ВыбраннаяСтрока.Ресурс = Ресурс;
			ВыбраннаяСтрока.НачалоПериода = НачалоПериода;
			ВыбраннаяСтрока.ОкончаниеПериода = ОкончаниеПериода;
			ВыбраннаяСтрока.Загрузка =1;
			ВыбраннаяСтрока.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.НеПовторять");
			
			ВыбраннаяСтрока.КонтролироватьШаг = СтруктураДанные.КонтролироватьШаг;
			ВыбраннаяСтрока.КратностьПланирования = СтруктураДанные.КратностьПланирования;
			
		КонецЦикла;
	Иначе
		
		СписокРесурсов = Новый СписокЗначений;
		СписокРесурсов.Добавить(Ресурс);
			
		СоответствиеРабочихПериодовПоДням = Новый Соответствие;
		
		Для Каждого ПериодСписка Из СписокВыбранныхДат Цикл
			РабочиеПериоды = ПолучитьГрафикРаботыРесурса(СписокРесурсов, НачалоДня(ПериодСписка.Значение));
			
			Если РабочиеПериоды.Количество() Тогда
				СоответствиеРабочихПериодовПоДням.Вставить(ПериодСписка.Значение, РабочиеПериоды);
			КонецЕсли;
			
		КонецЦикла;
		
		БылВыводПоГрафику = Ложь;
		
		Для Каждого ПериодСписка Из СписокВыбранныхДат Цикл
			
			ЗначениеСоответствия = СоответствиеРабочихПериодовПоДням.Получить(ПериодСписка.Значение);
			
			Если Не ЗначениеСоответствия = Неопределено Тогда
				
				РабочиеПериоды = ЗначениеСоответствия;
				
				Для Каждого РабочийПериод Из РабочиеПериоды Цикл
					
					ПараметрыОтбора = Новый Структура("Ресурс, НачалоПериода, ОкончаниеПериода", Ресурс, РабочийПериод.НачалоПериода, РабочийПериод.ОкончаниеПериода);
					НайденныеСтроки = БуферДобавленияВДокумент.НайтиСтроки(ПараметрыОтбора);
					
					Если НайденныеСтроки.Количество() Тогда
						ВыбраннаяСтрока = НайденныеСтроки[0];
						ВыбраннаяСтрока.Загрузка = ВыбраннаяСтрока.Загрузка+1;
						Продолжить
					КонецЕсли;
					
					ВыбраннаяСтрока = БуферДобавленияВДокумент.Добавить();
					ВыбраннаяСтрока.Ресурс = Ресурс;
					ВыбраннаяСтрока.НачалоПериода = РабочийПериод.НачалоПериода;
					ВыбраннаяСтрока.ОкончаниеПериода =  РабочийПериод.ОкончаниеПериода;
					ВыбраннаяСтрока.Загрузка = 1;
					ВыбраннаяСтрока.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.НеПовторять");
					
					ВыбраннаяСтрока.КонтролироватьШаг = РабочийПериод.КонтролироватьШаг;
					ВыбраннаяСтрока.КратностьПланирования = РабочийПериод.КратностьПланирования;
					
					БылВыводПоГрафику = Истина;
					
				КонецЦикла;
				
			Иначе
				
				ЕстьРазрыв = ЕстьРазрывПоДнюСлева(ПериодСписка.Значение, СписокВыбранныхДат) ИЛИ БылВыводПоГрафику;
				
				Если ПериодСписка.Значение<=НачалоДня(ОкончаниеПериода) И Не ЕстьРазрыв Тогда Продолжить КонецЕсли;
				
				БылВыводПоГрафику = Ложь;
				
				ОкончаниеПериода = ОкончаниеСмежногоИнтервала(ПериодСписка.Значение, СписокВыбранныхДат, СоответствиеРабочихПериодовПоДням);
				
				ПараметрыОтбора = Новый Структура("Ресурс, НачалоПериода, ОкончаниеПериода", Ресурс, НачалоДня(ПериодСписка.Значение), ОкончаниеПериода);
				НайденныеСтроки = БуферДобавленияВДокумент.НайтиСтроки(ПараметрыОтбора);
				
				Если НайденныеСтроки.Количество() Тогда
					ВыбраннаяСтрока = НайденныеСтроки[0];
					ВыбраннаяСтрока.Загрузка = ВыбраннаяСтрока.Загрузка+1;
					Продолжить
				КонецЕсли;
				
				ВыбраннаяСтрока = БуферДобавленияВДокумент.Добавить();
				ВыбраннаяСтрока.Ресурс = Ресурс;
				ВыбраннаяСтрока.НачалоПериода = НачалоДня(ПериодСписка.Значение);
				ВыбраннаяСтрока.ОкончаниеПериода = ОкончаниеПериода;
				ВыбраннаяСтрока.Загрузка =1;
				ВыбраннаяСтрока.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.НеПовторять");
				
				ВыбраннаяСтрока.КонтролироватьШаг = СтруктураДанные.КонтролироватьШаг;
				ВыбраннаяСтрока.КратностьПланирования = СтруктураДанные.КратностьПланирования;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзМеню(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда Возврат КонецЕсли;
	
	ДобавлениеИзКорзины = Ложь;
	
	Область = Параметры.Область;
	
	Если Не ВыбранныйЭлемент.Значение = "Перейти" И Не РасписаниеРаботПереключатель = ИнтервалМесяц() Тогда
		
		Если Параметры.КонтрольГрафика И Не ТипЗнч(Область.Расшифровка) = Тип("Структура") 
			ИЛИ (ТипЗнч(Область.Расшифровка) = Тип("Структура") И Область.Расшифровка.Свойство("ЭтоРабочийПериод") И Не Область.Расшифровка.ЭтоРабочийПериод) Тогда
			
			ПараметрыОповещения = Новый Структура("Ресурс, Область, ВыбранноеДействие, КонтрольГрафика", Параметры.Ресурс, Область, ВыбранныйЭлемент.Значение, Параметры.КонтрольГрафика);
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма, ПараметрыОповещения);
			
			Режим = РежимДиалогаВопрос.ДаНет;
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Интервал выходит за границы графика рабочего времени. Продолжить?'"), Режим, 0);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "Подобрать" Тогда
		
		ПодобратьВКорзину(Параметры.Ресурс, Область, Параметры.КонтрольГрафика);
		
	ИначеЕсли ВыбранныйЭлемент.Значение = "Перейти" И Не РасписаниеРаботПереключатель = ИнтервалМесяц() Тогда
		ВывестиКратноИнтервалам(Параметры.День);
	ИначеЕсли ВыбранныйЭлемент.Значение = "Перейти" И РасписаниеРаботПереключатель = ИнтервалМесяц() Тогда
		
		Расшифровка = Область.Расшифровка;
		
		ОчиститьПериодВОтборе();
		
		ОчиститьТаблицуОтборовПоИмениПоля("Ресурс");
		
		НачалоПериодаРасшифровки = НачалоМесяца(Дата(Расшифровка.Год, Расшифровка.Месяц,1));
		ОкончаниеПериодаРасшифровки = КонецМесяца(НачалоПериодаРасшифровки);
		
		Элементы.Календарь.ВыделенныеДаты.Очистить();
		НачалоРасшифровки = НачалоПериодаРасшифровки;
		Пока НачалоРасшифровки <= ОкончаниеПериодаРасшифровки Цикл
			Элементы.Календарь.ВыделенныеДаты.Добавить(НачалоРасшифровки);
			НачалоРасшифровки = НачалоРасшифровки+86400;
		КонецЦикла;
		
		РасписаниеРаботПереключатель = ИнтервалДень();
		
		ЗаполнитьСписокДатПериода(НачалоПериодаРасшифровки, ОкончаниеПериодаРасшифровки);
		
		УстановитьМеткуИОтборСписка("Ресурс", "ГруппаОтборРесурс", Расшифровка.Ресурс);
		
		Элементы.ОтобразитьИнтервалПланирования.Пометка = Ложь;
		Элементы.ОтобразитьДень.Пометка = Истина;
		Элементы.ОтобразитьМесяц.Пометка = Ложь;
		Элементы.ГруппаШагИнтервалаМин.Видимость = Ложь;
		Элементы.ГруппаНастройкаИнтервалов.Доступность = Истина;
		
	ИначеЕсли ВыбранныйЭлемент.Значение = "Создать Заказ на производство" Тогда
		ПодобратьВБуфер(Параметры.Ресурс, Область, Параметры.КонтрольГрафика);
		СоздатьЗаказНаПроизводство();
		БуферДобавленияВДокумент.Очистить();
	ИначеЕсли ВыбранныйЭлемент.Значение = "Создать Заказ-Наряд" Тогда
		ПодобратьВБуфер(Параметры.Ресурс, Область, Параметры.КонтрольГрафика);
		СоздатьЗаказНаряд();
		БуферДобавленияВДокумент.Очистить();
	ИначеЕсли ВыбранныйЭлемент.Значение = "Создать событие ""Запись""" Тогда
		ПодобратьВБуфер(Параметры.Ресурс, Область, Параметры.КонтрольГрафика);
		СоздатьСобытие();
		БуферДобавленияВДокумент.Очистить();
	ИначеЕсли ВыбранныйЭлемент.Значение = "Добавить в Заказ-Наряд" Тогда
		ПодобратьВБуфер(Параметры.Ресурс, Область, Параметры.КонтрольГрафика);
		ДобавитьВЗаказНаряд();
	ИначеЕсли ВыбранныйЭлемент.Значение = "Добавить в Заказ на производство" Тогда
		ПодобратьВБуфер(Параметры.Ресурс, Область, Параметры.КонтрольГрафика);
		ДобавитьВЗаказНаПроизводство();
	ИначеЕсли ВыбранныйЭлемент.Значение = "Добавить в событие ""Запись""" Тогда
		ПодобратьВБуфер(Параметры.Ресурс, Область, Параметры.КонтрольГрафика);
		ДобавитьВСобытие();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтображениеКорзины(ОткрытиеФормы = Ложь, ОчищатьВыделениеПриОбновленииПериодов = Истина)
	
	КоличествоПодобранных = ВыбранныеРесурсы.Количество();
	
	Элементы.ДекорацияПодобрано.Заголовок = СтрШаблон(НСтр("ru = 'Подобрано: %1'"), КоличествоПодобранных);
	Элементы.ГруппаКорзина.Доступность = КоличествоПодобранных;
	
	Если Не ОткрытиеФормы Тогда
		ОбновитьПодобранныеПериоды(ОчищатьВыделениеПриОбновленииПериодов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКорзину()
	
	ПараметрыОтбора = Новый Структура("ИмяПоляОтбора", "Контрагент");
	НайденныеСтроки = ДанныеМеток.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() Тогда 
		Контрагент = НайденныеСтроки[0].Метка
	Иначе
		Контрагент = Неопределено;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("ВыбранныеРесурсы, ЭтоПодбор, ТолькоПоПодсистеме1, ТолькоПоПодсистеме2, ТолькоПоПодсистеме3, Контрагент"
	, ВыбранныеРесурсы, ЭтоПодбор, ТолькоПоПодсистеме1, ТолькоПоПодсистеме2, ТолькоПоПодсистеме3, Контрагент);
	
	ПараметрыОповещения = Новый Структура();
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьДанныеКорзины", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьФорму("Обработка.ПланировщикРесурсов.Форма.ФормаВыбранныеРесурсы",ПараметрыОткрытия,ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеКорзины(РезультатОповещения, Параметры) Экспорт
	
	ВыбранныеРесурсы.Очистить();
	
	ОбработатьДанныеКорзиныСервер(РезультатОповещения.ВыбранныеРесурсы);
	
	Если РезультатОповещения.Свойство("ЗакрытьФорму") Тогда
		ПеренестиВДокумент();
		Возврат;
	КонецЕсли;
	
	НастроитьОтображениеКорзины();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДанныеКорзиныСервер(ВыбранныеРесурсыКорзина);
	
	ВыбранныеРесурсы.Загрузить(ВыбранныеРесурсыКорзина.Выгрузить());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ТолькоПросмотрФормы()
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПокупателя) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаПроизводство) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ПравоДоступа("Добавление", Метаданные.Документы.Событие) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Функция ЕстьРабочиеПериоды(РабочиеПериоды)
	
	Для Каждого СтрокаТаблицы Из РабочиеПериоды Цикл 
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.НачалоРабочегоПериодаЗаДень) ИЛИ ЗначениеЗаполнено(СтрокаТаблицы.ОкончаниеРабочегоПериодаЗаДень) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура УстановитьНастройкиПоНомеруПодсистемы()
	
	Элементы.КомандаСоздатьЗаказНаПроизводство.Видимость = ТолькоПоПодсистеме2;
	Элементы.КомандаДобавитьВЗаказНаПроизводство.Видимость = ТолькоПоПодсистеме2;
	Элементы.ЗагрузкаРесурсовКонтекстноеМенюКомандаСоздатьЗаказНаПроизводство.Видимость = ТолькоПоПодсистеме2 И Не ЭтоПодбор;
	Элементы.ЗагрузкаРесурсовКонтекстноеМенюКомандаДобавитьВЗаказНаПроизводство.Видимость = ТолькоПоПодсистеме2 И Не ЭтоПодбор;
	
	Элементы.КомандаСоздатьСобытие.Видимость = ТолькоПоПодсистеме3;
	Элементы.КомандаДобавитьВСобытие.Видимость = ТолькоПоПодсистеме3;
	Элементы.ЗагрузкаРесурсовКонтекстноеМенюКомандаСоздатьСобытие.Видимость = ТолькоПоПодсистеме3 И Не ЭтоПодбор;
	Элементы.ЗагрузкаРесурсовКонтекстноеМенюКомандаДобавитьВСобытие.Видимость = ТолькоПоПодсистеме3 И Не ЭтоПодбор;
	
	Элементы.ГруппаОтборКонтакт.Видимость = ТолькоПоПодсистеме3;
	
	Если ТолькоПоПодсистеме3 Тогда
		Элементы.ОтборКонтакт.ОграничениеТипа = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	КонецЕсли;
	
	Элементы.КомандаСоздатьЗаказПокупателя.Видимость = ТолькоПоПодсистеме1;
	Элементы.КомандаДобавитьВЗаказНаряд.Видимость = ТолькоПоПодсистеме1;
	Элементы.ЗагрузкаРесурсовКонтекстноеМенюКомандаСоздатьЗаказПокупателя.Видимость = ТолькоПоПодсистеме1 И Не ЭтоПодбор;
	Элементы.ЗагрузкаРесурсовКонтекстноеМенюКомандаДобавитьВЗаказНаряд.Видимость = ТолькоПоПодсистеме1 И Не ЭтоПодбор;
	
	Если НомерПодсистемы = 3 Тогда
		
		ПараметрыОтбора = Новый Структура("ИмяПоляОтбора", "Контрагент");
		НайденныеСтроки = ДанныеМеток.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() Тогда
			УдалитьДанныеМетокОтбораПоИмениПоля("Контрагент");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ТолькоПоПодсистеме2 И Не ТолькоПоПодсистеме3 И Не ТолькоПоПодсистеме1
		Тогда
		Элементы.ЗагрузкаРесурсовКонтекстноеМенюКомандаПодобратьВКорзину.Видимость = Ложь;
	Иначе
		Элементы.ЗагрузкаРесурсовКонтекстноеМенюКомандаПодобратьВКорзину.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСобытиеПодбора(РесурсыПредприятия, МассивДат, ГраницыПланирования)
	
	Для Каждого СтрокаТаблицы Из РесурсыПредприятия Цикл
		
		НоваяСтрока = ВыбранныеРесурсы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		НоваяСтрока.Ресурс = СтрокаТаблицы.РесурсПредприятия;
		НоваяСтрока.НачалоПериода = СтрокаТаблицы.Старт;
		НоваяСтрока.ОкончаниеПериода = СтрокаТаблицы.Финиш;
		НоваяСтрока.Загрузка = СтрокаТаблицы.Мощность;
		НоваяСтрока.КонтролироватьШаг = СтрокаТаблицы.КонтролироватьШаг;
		НоваяСтрока.КратностьПланирования = СтрокаТаблицы.КратностьПланирования;
		
	КонецЦикла;
	
	ГраницыПланирования = ПланированиеРесурсовУНФ.МаксимальныеГраницыИнтервала(РесурсыПредприятия, "Старт", "Финиш");
	
	НачалоПланирования = НачалоДня(ГраницыПланирования.НачалоИнтервала);
	ОкончаниеПланирования = НачалоДня(ГраницыПланирования.ОкончаниеИнтервала);
	
	Элементы.Календарь.ВыделенныеДаты.Очистить();
	
	Если НачалоПланирования = ОкончаниеПланирования
		Тогда
		МассивДат.Добавить(НачалоПланирования);
		Элементы.Календарь.ВыделенныеДаты.Добавить(НачалоПланирования);
		РасписаниеРаботПереключатель = ИнтервалПланирования();
	Иначе
		
		Пока НачалоПланирования <= ОкончаниеПланирования Цикл
			
			МассивДат.Добавить(НачалоПланирования);
			Элементы.Календарь.ВыделенныеДаты.Добавить(НачалоПланирования);
			НачалоПланирования = НачалоПланирования+86400;
			
		КонецЦикла;
		
		Элементы.ОтобразитьИнтервалПланирования.Пометка = Ложь;
		Элементы.ОтобразитьДень.Пометка = Истина;
		
		РасписаниеРаботПереключатель = ИнтервалДень();
		
	КонецЕсли;
	
	КоличествоПодобранных = ВыбранныеРесурсы.Количество();
	
	Элементы.ДекорацияПодобрано.Заголовок = СтрШаблон(НСтр("ru = 'Подобрано: %1'"), КоличествоПодобранных);
	Элементы.ГруппаКорзина.Доступность = КоличествоПодобранных;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиЭлементовФормыПриСоздании()
	
	Элементы.ГруппаИнтервалОтображения.Доступность = Не ТолькоРабочееВремя;
	Элементы.ГруппаВариантОтображения.Видимость = ИспользоватьВарианты;
	
	Элементы.ГруппаПодменюДокументы.Доступность = Не ЭтоПодбор;
	Элементы.КомандаПеренестиВДокумент.Видимость = ЭтоПодбор; 
	Элементы.ГруппаВарианты.Видимость = Не ЭтоПодбор;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиСтандартныхЦветов()
	
	ЦветРабочееВремя = WebЦвета.ЦветМорскойВолныНейтральный;
	ЦветНеРабочееВремя = WebЦвета.Серебряный;
	ЦветПолнойЗагрузки = WebЦвета.Золотой;
	ЦветПревышенияЗагрузки = WebЦвета.Лосось;
	ЦветЧастичнойЗагрузкиДо = WebЦвета.ЦветМорскойВолныНейтральный;
	ЦветЧастичнойЗагрузкиПосле = WebЦвета.ЦветМорскойВолныНейтральный;
	ЦветПодобранныхВКорзину = WebЦвета.КоролевскиГолубой;
	
	ПроцентЗагрузки = 50;
	
КонецПроцедуры

&НаСервере
Функция СоответствиеДнейНедели()
	
	СоответствиеВозврата = Новый Соответствие;
	
	СоответствиеВозврата.Вставить(1, "пн.");
	СоответствиеВозврата.Вставить(2, "вт.");
	СоответствиеВозврата.Вставить(3, "ср.");
	СоответствиеВозврата.Вставить(4, "чт.");
	СоответствиеВозврата.Вставить(5, "пт.");
	СоответствиеВозврата.Вставить(6, "сб.");
	СоответствиеВозврата.Вставить(7, "вс.");
	
	Возврат СоответствиеВозврата;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьПериодОтбора()
	
	Период.ДатаНачала = Дата(1,1,1);
	Период.ДатаОкончания = Дата(1,1,1);
	
	ПериодНадпись = НСтр("ru = 'Период: определяется календарем'");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПериодВОтборе()
	Период.ДатаНачала = Дата(1,1,1);
	Период.ДатаОкончания = Дата(1,1,1);
КонецПроцедуры

&НаСервере
Функция МесяцПоНомеру(НомерМесяца)
	
	СоответствиеМесяцев = Новый Соответствие;
	
	СоответствиеМесяцев.Вставить(1,"Январь");
	СоответствиеМесяцев.Вставить(2,"Февраль");
	СоответствиеМесяцев.Вставить(3,"Март");
	СоответствиеМесяцев.Вставить(4,"Апрель");
	СоответствиеМесяцев.Вставить(5,"Май");
	СоответствиеМесяцев.Вставить(6,"Июнь");
	СоответствиеМесяцев.Вставить(7,"Июль");
	СоответствиеМесяцев.Вставить(8,"Август");
	СоответствиеМесяцев.Вставить(9,"Сентябрь");
	СоответствиеМесяцев.Вставить(10,"Октябрь");
	СоответствиеМесяцев.Вставить(11,"Ноябрь");
	СоответствиеМесяцев.Вставить(12,"Декабрь");
	
	Возврат СоответствиеМесяцев.Получить(НомерМесяца);
	
КонецФункции

&НаСервере
Функция ПолучитьСписокИмяГруппыРодителя()
	
	СписокГруппФормыДляУдаленияДобавленныхЭлементов = ДанныеМеток.Выгрузить();
	СписокГруппФормыДляУдаленияДобавленныхЭлементов.Свернуть("ИмяГруппыРодителя","");
	
	Возврат СписокГруппФормыДляУдаленияДобавленныхЭлементов.ВыгрузитьКолонку("ИмяГруппыРодителя");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПредставлениеПериода(Период)
	
	Если НЕ ЗначениеЗаполнено(Период) ИЛИ (НЕ ЗначениеЗаполнено(Период.ДатаНачала) И НЕ ЗначениеЗаполнено(Период.ДатаОкончания)) Тогда
		ПредставлениеПериодаОтбор = НСтр("ru = 'Период: определяется календарем'");
	Иначе
		ДатаОкончанияПериода = ?(ЗначениеЗаполнено(Период.ДатаОкончания), КонецДня(Период.ДатаОкончания), Период.ДатаОкончания);
		Если ДатаОкончанияПериода < Период.ДатаНачала Тогда
			#Если Клиент Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru = 'Выбрана дата окончания периода, которая меньше даты начала.'"));
			#КонецЕсли
			ПредставлениеПериодаОтбор = НСтр("ru = 'с '")+Формат(Период.ДатаНачала,"ДФ=dd.MM.yyyy");
		Иначе
			ПредставлениеПериодаОтбор = НСтр("ru = 'за '")+НРег(ПредставлениеПериода(Период.ДатаНачала, ДатаОкончанияПериода));
		КонецЕсли; 
	КонецЕсли;
	
	Возврат ПредставлениеПериодаОтбор;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьОтборПоКонтрагентуКонтактами(Отбор, Контрагент)
	СвязанныеКонтакты = Справочники.Контрагенты.СвязанныеКонтакты(Контрагент);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Отбор, СвязанныеКонтакты);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокПериодаПозиционирования()
	
	Элементы.ПериодПозиционирования.СписокВыбора.Очистить();
	
	Если НЕ РасписаниеРаботПереключатель = ИнтервалПланирования() ИЛИ Не СписокДатПериода.Количество() Тогда
		Возврат
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеПериода) Тогда
		
		ПараметрыОтбора = Новый Структура("Дата", ПредставлениеПериода);
		НайденныеСтрокиПозиций = ПериодыПоДням.НайтиСтроки(ПараметрыОтбора);
		
		Если Не НайденныеСтрокиПозиций.Количество() Тогда Возврат КонецЕсли;
		
		Для Каждого ЭлементСписка Из НайденныеСтрокиПозиций[0].СписокВыбораВремениПереходаПоКоординатам Цикл
			
			ПредставлениеДаты = ?(ЭлементСписка.Значение = Дата(1,1,1), "00:00", Формат(ЭлементСписка.Значение,"ДФ=ЧЧ:мм"));
			
			Элементы.ПериодПозиционирования.СписокВыбора.Добавить(ЭлементСписка.Значение, ПредставлениеДаты);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСобытиеВыбораИнтервала(Ресурс, Область, День, КонтрольГрафика)
	
	Если ТолькоПросмотрФормы Тогда Возврат КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("Ресурс, Область, День, КонтрольГрафика", Ресурс, Область, День, КонтрольГрафика);
	
	Список = Новый СписокЗначений;
	
	Если Не РасписаниеРаботПереключатель = ИнтервалМесяц() 
		И (ТолькоПоПодсистеме1 ИЛИ ТолькоПоПодсистеме2 ИЛИ ТолькоПоПодсистеме3) Тогда
		Список.Добавить("Подобрать");
	КонецЕсли;
	
	Если Не РасписаниеРаботПереключатель = ИнтервалПланирования() Тогда
		Список.Добавить("Перейти",,Ложь, БиблиотекаКартинок.ПерейтиВперед);
	КонецЕсли;
	
	Если Не ЭтоПодбор И Не РасписаниеРаботПереключатель = ИнтервалМесяц() Тогда
		
			Если ТолькоПоПодсистеме1 Тогда
				Список.Добавить("Создать Заказ-Наряд",,Ложь,БиблиотекаКартинок.СоздатьЭлементСписка);
				Список.Добавить("Добавить в Заказ-Наряд");
			КонецЕсли;
			
			Если ТолькоПоПодсистеме2 Тогда
				Список.Добавить("Создать Заказ на производство",,Ложь, БиблиотекаКартинок.СоздатьЭлементСписка);
				Список.Добавить("Добавить в Заказ на производство");
			КонецЕсли;
			
			Если ТолькоПоПодсистеме3 Тогда
				Список.Добавить("Создать событие ""Запись""",,Ложь, БиблиотекаКартинок.СоздатьЭлементСписка);
				Список.Добавить("Добавить в событие ""Запись""");
			КонецЕсли;
			
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМеню",ЭтаФорма, ПараметрыОповещения);
	ПоказатьВыборИзМеню(Оповещение, Список, Элементы.ЗагрузкаРесурсов);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияРеквизитовФормыПоУмолчанию()
	
	ЗагрузкаРесурсов.Очистить();
	СписокДатПериода.Очистить();
	Элементы.Календарь.ВыделенныеДаты.Очистить();
	СписокДатПериода.Добавить(НачалоДня(ТекущаяДатаСеанса()));
	Элементы.Календарь.ВыделенныеДаты.Добавить(НачалоДня(ТекущаяДатаСеанса()));
	ПредставлениеПериода = Неопределено;
	Элементы.ПериодПозиционирования.СписокВыбора.Очистить();
	
	СписокГруппФормыДляУдаленияДобавленныхЭлементов = ПолучитьСписокИмяГруппыРодителя();
	ДанныеМеток.Очистить();
	РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект, СписокГруппФормыДляУдаленияДобавленныхЭлементов, "ДанныеМеток");
	
	НачалоИнтервалаОтображения = Неопределено;
	ОкончаниеИнтервалаОтображения = Неопределено;
	ТолькоРабочееВремя = Ложь;
	ШагИнтервалаМин = 0;
	
	УстановитьНастройкиСтандартныхЦветов();
	
	РасписаниеРаботПереключатель = ИнтервалПланирования();
	
	Элементы.ОтобразитьИнтервалПланирования.Пометка = Истина;
	Элементы.ОтобразитьДень.Пометка = Ложь;
	Элементы.ОтобразитьМесяц.Пометка = Ложь;
	Элементы.ГруппаНастройкаИнтервалов.Доступность = Истина;
	
	Элементы.ГруппаИнтервалОтображения.Доступность = Истина;
	Элементы.ПериодПозиционирования.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстноеМенюДоступно(Доступность = Истина)
	Элементы.ЗагрузкаРесурсов.КонтекстноеМеню.Доступность = Доступность;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьБуфер()
	
	ВыделенныеОбласти = Элементы.ЗагрузкаРесурсов.ПолучитьВыделенныеОбласти();
	
	СписокДатПериода.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	Для Каждого ВыделеннаяОбласть Из ВыделенныеОбласти Цикл
		
		ТекОбласть = ВыделеннаяОбласть;
		
		НижняяГраницаОбласти = ВыделеннаяОбласть.Низ;
		ВерхняяГраницаОбласти = ВыделеннаяОбласть.Верх;
		
		Для ИндексГраницы = ВерхняяГраницаОбласти По НижняяГраницаОбласти Цикл
			
			ЛеваяГраница = ?(ВыделеннаяОбласть.Лево < 5, 5, ВыделеннаяОбласть.Лево);
			
			ТекОбласть = ЗагрузкаРесурсов.Область("R"+Формат(ИндексГраницы,"ЧГ=")+"C"+Формат(ЛеваяГраница,"ЧГ=")+":"+"R"+Формат(ИндексГраницы+1,"ЧГ=")+"C"+Формат(ВыделеннаяОбласть.Право,"ЧГ="));
			
			Если ТекОбласть.Лево < 5 Тогда
				ТекОбласть = ЗагрузкаРесурсов.Область("R"+Формат(ТекОбласть.Верх,"ЧГ=")+"C"+"5"+":"+"R"+Формат(ТекОбласть.Низ,"ЧГ=")+"C"+Формат(ТекОбласть.Право,"ЧГ="));
			КонецЕсли;
			
			Если ТипЗнч(ТекОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
				Возврат;
			КонецЕсли;
			
			КоординатаКолонки = ?(РасписаниеРаботПереключатель = ИнтервалМесяц(),Формат(ТекОбласть.Лево,"ЧГ="),1);
			
			РасшифровкаЯчейки = ЗагрузкаРесурсов.Область("R"+Строка(ТекОбласть.Верх)+"C"+Строка(КоординатаКолонки)).Расшифровка;
			
			Если РасписаниеРаботПереключатель = ИнтервалПланирования() Тогда
				РасшифровкаЯчейкиВремяНачала = ЗагрузкаРесурсов.Область("R"+3+"C"+Формат(ЛеваяГраница+1,"ЧГ=")+":"+"R"+3+"C"+Формат(ЛеваяГраница+1,"ЧГ=")).Расшифровка;
				РасшифровкаЯчейкиВремяОкончания = ЗагрузкаРесурсов.Область("R"+3+"C"+Формат(ВыделеннаяОбласть.Право+2,"ЧГ=")+":"+"R"+3+"C"+Формат(ВыделеннаяОбласть.Право+2,"ЧГ=")).Расшифровка;
				
				ВремяНачала = РасшифровкаЯчейкиВремяНачала;
				ВремяОкончания = РасшифровкаЯчейкиВремяОкончания;
				
			ИначеЕсли РасписаниеРаботПереключатель = ИнтервалДень() Тогда
				РасшифровкаЯчейкиВремяНачала = ЗагрузкаРесурсов.Область("R"+3+"C"+Формат(ЛеваяГраница,"ЧГ=")+":"+"R"+3+"C"+Формат(ЛеваяГраница+1,"ЧГ=")).Расшифровка;
				РасшифровкаЯчейкиВремяОкончания = ЗагрузкаРесурсов.Область("R"+3+"C"+Формат(ВыделеннаяОбласть.Право,"ЧГ=")+":"+"R"+3+"C"+Формат(ВыделеннаяОбласть.Право,"ЧГ=")).Расшифровка;
				
				Если Не ЗначениеЗаполнено(РасшифровкаЯчейкиВремяНачала) Тогда Возврат КонецЕсли;
				
				ВремяНачала = НачалоДня(РасшифровкаЯчейкиВремяНачала);
				ВремяОкончания = ?(ТипЗнч(РасшифровкаЯчейкиВремяОкончания) = Тип("Дата"), КонецДня(РасшифровкаЯчейкиВремяОкончания), Неопределено);
				
			КонецЕсли;
			
			ВремяОкончания = ?(Не ЗначениеЗаполнено(ВремяОкончания), КонецДня(ВремяНачала), ВремяОкончания);
			ВремяОкончания = ?(ВремяОкончания = НачалоДня(ВремяОкончания), КонецДня(ВремяНачала), ВремяОкончания);
			
			Ресурс = Неопределено;
			КонтрольГрафика = Ложь;
			
			Если ТипЗнч(РасшифровкаЯчейки) = Тип("Структура") И РасшифровкаЯчейки.Свойство("Ресурс") И Не РасшифровкаЯчейки.Свойство("СсылкаНаДокумент") Тогда
				Ресурс = РасшифровкаЯчейки.Ресурс;
				
				Если ТекОбласть.Лево = 1 Тогда
					Возврат
				КонецЕсли;
				
				КонтрольГрафика = ?(РасшифровкаЯчейки.Свойство("КонтролироватьЗагрузкуТолькоВРабочееВремя"), РасшифровкаЯчейки.КонтролироватьЗагрузкуТолькоВРабочееВремя, Ложь);
				
				ПодобратьВБуферКонтекстноеМеню(Ресурс, ТекОбласть, КонтрольГрафика, ВремяНачала, ВремяОкончания);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокумент()
	СписокДатПериода.Очистить();
	Элементы.Календарь.ВыделенныеДаты.Очистить();
	ЭтаФорма.Закрыть(ВыбранныеРесурсы);
КонецПроцедуры

&НаСервере
Функция РасшифровкаКратности(Ресурс)
	
	Если Ресурс.КратностьПланирования >= 60 И Ресурс.КратностьПланирования < 1440 Тогда
		
		КоличествоЧасов = Цел(Ресурс.КратностьПланирования/60);
		КоличествоМинут = Ресурс.КратностьПланирования - КоличествоЧасов*60;
		
		СтрокаВозврата = Строка(КоличествоЧасов)+ " ч. "+ Строка(КоличествоМинут)+ " мин";
		
		Возврат СтрокаВозврата;
		
	ИначеЕсли Ресурс.КратностьПланирования >= 1440 Тогда
		
		КоличествоДней = Цел(Ресурс.КратностьПланирования/1440);
		КоличествоЧасов = Цел((Ресурс.КратностьПланирования - (КоличествоДней*1440))/60);
		КоличествоМинут = Ресурс.КратностьПланирования - (КоличествоДней*1440+КоличествоЧасов*60);
		
		СтрокаВозврата = "24 часа";//Строка(КоличествоДней)+" д. "+ Строка(КоличествоЧасов)+ " ч. "+ Строка(КоличествоМинут)+ " мин";
		
		Возврат СтрокаВозврата;
	Иначе
		СтрокаВозврата = Строка(Ресурс.КратностьПланирования)+ " мин";
		Возврат СтрокаВозврата;
	КонецЕсли
	
КонецФункции

&НаСервере
Процедура ОбновитьПодобранныеПериоды(ПредварительнаяОчистка = Ложь)
	
	ТаблицаРасписания = ВыбранныеРесурсы.Выгрузить();
	
	ТаблицаРасписания.Колонки.Добавить("НомерСтроки");
	
	КолонкаТЗ = ТаблицаРасписания.Колонки.Найти("Ресурс");
	КолонкаТЗ.Имя = "РесурсПредприятия";
	
	КолонкаТЗ = ТаблицаРасписания.Колонки.Найти("Загрузка");
	КолонкаТЗ.Имя = "Мощность";
	
	КолонкаТЗ = ТаблицаРасписания.Колонки.Найти("НачалоПериода");
	КолонкаТЗ.Имя = "Старт";
	
	КолонкаТЗ = ТаблицаРасписания.Колонки.Найти("ОкончаниеПериода");
	КолонкаТЗ.Имя = "Финиш";
	
	РазложеннаяТаблицаИзКорзиныПоРасписанию = ПланированиеРесурсовУНФ.РазложитьСтрокиПоРасписаниюДляДвижений(Неопределено,ТаблицаРасписания);
	
	ПараметрыОтбора = Новый Структура("Период, РесурсПредприятия");
	ПараметрыОтбораИнтервалов = Новый Структура("Дата");
	
	СплошнаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 3);
	НетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	
	ПараметрыОтбораПоДням = Новый Структура("Дата");
	
	Для Каждого ДатаПериода Из СписокДатПериода Цикл
		
		ПараметрыОтбораИнтервалов.Дата = ДатаПериода.Значение;
		СтрокиТаблицаИнтервалов = КоординатыДней.НайтиСтроки(ПараметрыОтбораИнтервалов);
		
		Если Не СтрокиТаблицаИнтервалов.Количество() Тогда Продолжить КонецЕсли;
		
		ТекИнтервалДаты = СтрокиТаблицаИнтервалов[0];
		
		Для Каждого СтрокаРесурс Из РесурсыПоСтрокам Цикл 
			
			ПараметрыОтбора.Период = ДатаПериода.Значение;
			ПараметрыОтбора.РесурсПредприятия = СтрокаРесурс.Ресурс;
			
			НайденныеСтроки = РазложеннаяТаблицаИзКорзиныПоРасписанию.НайтиСтроки(ПараметрыОтбора);
			
			НомерСтрокиРесурса = СтрокаРесурс.НомерСтроки;
			
			Если ПредварительнаяОчистка Тогда 
				
				Область = ЗагрузкаРесурсов.Область(НомерСтрокиРесурса - 1, ТекИнтервалДаты.КоординатаНачала,
					НомерСтрокиРесурса - 1, ТекИнтервалДаты.КоординатаОкончания);
				
				Область.ГраницаСнизу = НетЛинии;
				
			КонецЕсли;
			
			ПараметрыОтбораПоДням.Дата = ДатаПериода.Значение;
			
			НайденныеСтрокиПоПериоду = ПериодыПоДням.НайтиСтроки(ПараметрыОтбораПоДням);
			
			ВремяНачалаПериода = Дата(1,1,1);
			
			Если НайденныеСтрокиПоПериоду.Количество() Тогда
				СписокПозиционированияПоПериоду = НайденныеСтрокиПоПериоду[0].СписокВыбораВремениПереходаПоКоординатам;
				Если СписокПозиционированияПоПериоду.Количество() Тогда
					ВремяНачалаПериода = СписокПозиционированияПоПериоду[0].Значение;
				КонецЕсли
			КонецЕсли;
			
			ОтклонениеНачалаДня = Час(ВремяНачалаПериода) * 60 + Минута(ВремяНачалаПериода);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				НачалоВыделяемогоИнтервала = Час(НайденнаяСтрока.Старт) * 60 + Минута(НайденнаяСтрока.Старт)
					- ОтклонениеНачалаДня;
				КоординатаКолонкиНачалаПозиционированияЧислом = ТекИнтервалДаты.КоординатаНачала
					+ НачалоВыделяемогоИнтервала / МинимальныйИнтервал;
				
				Финиш = НайденнаяСтрока.Финиш;
				
				Если Финиш = КонецДня(Финиш) Тогда
					ОкончаниеВыделяемогоИнтервала = 24*60 - ОтклонениеНачалаДня;
				Иначе
					ОкончаниеВыделяемогоИнтервала = Час(Финиш)*60+Минута(Финиш) - ОтклонениеНачалаДня;
				КонецЕсли;
				
				КоординатаКолонкиОкончанияПозиционированияЧислом = ТекИнтервалДаты.КоординатаНачала
					+ ОкончаниеВыделяемогоИнтервала / МинимальныйИнтервал;
				
				Если КоординатаКолонкиОкончанияПозиционированияЧислом > ТекИнтервалДаты.КоординатаОкончания Тогда
					КоординатаКолонкиОкончанияПозиционированияЧислом = ТекИнтервалДаты.КоординатаОкончания
				КонецЕсли;
				
				Область = ЗагрузкаРесурсов.Область(НомерСтрокиРесурса - 1,
					КоординатаКолонкиНачалаПозиционированияЧислом, НомерСтрокиРесурса - 1,
					КоординатаКолонкиОкончанияПозиционированияЧислом - 1);
				
				Область.ГраницаСнизу = СплошнаяЛиния;
				Область.ЦветРамки = ЦветПодобранныхВКорзину;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЦветаИнтервала()
	
	Если ЦветРабочееВремя = Новый Цвет(0,0,0) Тогда
		ЦветРабочееВремя = WebЦвета.ЦветМорскойВолныНейтральный;
	КонецЕсли;
	Если ЦветНеРабочееВремя = Новый Цвет(0,0,0) Тогда
		ЦветНеРабочееВремя = WebЦвета.Серебряный;
	КонецЕсли;
	Если ЦветПолнойЗагрузки = Новый Цвет(0,0,0) Тогда
		ЦветПолнойЗагрузки = WebЦвета.Золотой;
	КонецЕсли;
	Если ЦветПревышенияЗагрузки = Новый Цвет(0,0,0) Тогда
		ЦветПревышенияЗагрузки = WebЦвета.Лосось;
	КонецЕсли;
	Если ЦветЧастичнойЗагрузкиДо = Новый Цвет(0,0,0) Тогда
		ЦветЧастичнойЗагрузкиДо = WebЦвета.ЦветМорскойВолныНейтральный;
	КонецЕсли;
	Если ЦветЧастичнойЗагрузкиПосле = Новый Цвет(0,0,0) Тогда
		ЦветЧастичнойЗагрузкиПосле = WebЦвета.ЦветМорскойВолныНейтральный;
	КонецЕсли;
	Если ЦветПодобранныхВКорзину = Новый Цвет(0,0,0) Тогда
		ЦветПодобранныхВКорзину = WebЦвета.КоролевскиГолубой;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивизацииТабличногоДокумента()
	
	ТекущаяПозиция = Элементы.ЗагрузкаРесурсов.ТекущаяОбласть;
	
	РасшифровкаЯчейки = ЗагрузкаРесурсов.Область("R"+ТекущаяПозиция.Верх+"C"+1).Расшифровка;
	
	КонтекстноеМенюДоступно(Ложь);
	
	Если ТипЗнч(РасшифровкаЯчейки) = Тип("Структура") И РасшифровкаЯчейки.Свойство("Ресурс") И Не РасшифровкаЯчейки.Свойство("СсылкаНаДокумент") Тогда
		
		ЛеваяГраница =ТекущаяПозиция.Лево;
		
		Если РасписаниеРаботПереключатель = ИнтервалПланирования() Тогда
			РасшифровкаЯчейкиВремяНачала = ЗагрузкаРесурсов.Область("R"+3+"C"+Формат(ЛеваяГраница+1,"ЧГ=")+":"+"R"+3+"C"+Формат(ЛеваяГраница+1,"ЧГ=")).Расшифровка;
		ИначеЕсли РасписаниеРаботПереключатель = ИнтервалДень() Тогда
			РасшифровкаЯчейкиВремяНачала = ЗагрузкаРесурсов.Область("R"+3+"C"+Формат(ЛеваяГраница,"ЧГ=")+":"+"R"+3+"C"+Формат(ЛеваяГраница+1,"ЧГ=")).Расшифровка;
		КонецЕсли;
		
		Если ТипЗнч(РасшифровкаЯчейкиВремяНачала) = Тип("Дата") Тогда
			КонтекстноеМенюДоступно();
		КонецЕсли;
	КонецЕсли;
		
	Если Не СписокДатПериода.Количество() Тогда
		Возврат
	КонецЕсли;
	
	Если РасписаниеРаботПереключатель = ИнтервалМесяц() Тогда
		Возврат
	КонецЕсли;
	
	ТекущаяПозиция = Элементы.ЗагрузкаРесурсов.ТекущаяОбласть;
	
	ПредставлениеКоординат = "R4C"+Строка(Формат(ТекущаяПозиция.Лево+1,"ЧГ="));
	ПредставлениеКоординатВремя = "R3C"+Строка(Формат(ТекущаяПозиция.Лево+1,"ЧГ="));
	
	ПредставлениеКоординат = СтрЗаменить(ПредставлениеКоординат,Символы.НПП,"");
	
	ТекущееПоложениеДата = Дата(1,1,1);
	
	ДанныеДата = ТекущаяДатаПозиционирования(ТекущаяПозиция.Лево);
	
	Если Не ЗначениеЗаполнено(ДанныеДата) Тогда
		Элементы.ПериодПозиционирования.СписокВыбора.Очистить();
		ПредставлениеПериода = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если Не Элементы.ПериодПозиционирования.СписокВыбора.Количество() ИЛИ Не ПредставлениеПериода = ДанныеДата Тогда
		ПредставлениеПериода = ДанныеДата;
		ЗаполнитьСписокПериодаПозиционирования();
	КонецЕсли;
	
	ВыборПериода = Ложь;
	
	Если РасписаниеРаботПереключатель = ИнтервалПланирования() И Не ВыборПериода Тогда
		
		Если ЗначениеЗаполнено(ЗагрузкаРесурсов.Область(ПредставлениеКоординатВремя).Расшифровка) Тогда
			
			ДанныеВремя = ЗагрузкаРесурсов.Область(ПредставлениеКоординатВремя).Расшифровка;
			
			ЭлементСписка = Элементы.ПериодПозиционирования.СписокВыбора.НайтиПоЗначению(Дата(1,1,1)+(ДанныеВремя-НачалоДня(ДанныеВремя)));
			
			Если ЭлементСписка = Неопределено Тогда 
				Возврат 
			КонецЕсли;
			
			ПериодПозиционирования = ЭлементСписка.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьВКорзинуИзКонтекстногоМенюЗавершение(ВыделенныеОбласти)
	
	Для Каждого ВыделеннаяОбласть Из ВыделенныеОбласти Цикл
		
			ТекОбласть = ВыделеннаяОбласть;
			
			НижняяГраницаОбласти = ВыделеннаяОбласть.Низ;
			ВерхняяГраницаОбласти = ВыделеннаяОбласть.Верх;
			
			Для ИндексГраницы = ВерхняяГраницаОбласти По НижняяГраницаОбласти Цикл
				
				ЛеваяГраница = ?(ВыделеннаяОбласть.Лево < 5, 5, ВыделеннаяОбласть.Лево);
				
				ТекОбласть = ЗагрузкаРесурсов.Область("R"+Формат(ИндексГраницы,"ЧГ=")+"C"+Формат(ЛеваяГраница,"ЧГ=")+":"+"R"+Формат(ИндексГраницы+1,"ЧГ=")+"C"+Формат(ВыделеннаяОбласть.Право,"ЧГ="));
				
				Если ТекОбласть.Лево < 5 Тогда
					ТекОбласть = ЗагрузкаРесурсов.Область("R"+Формат(ТекОбласть.Верх,"ЧГ=")+"C"+"5"+":"+"R"+Формат(ТекОбласть.Низ,"ЧГ=")+"C"+Формат(ТекОбласть.Право,"ЧГ="));
				КонецЕсли;
				
				Если ТипЗнч(ТекОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
					Возврат;
				КонецЕсли;
				
				КоординатаКолонки = ?(РасписаниеРаботПереключатель = ИнтервалМесяц(),Формат(ТекОбласть.Лево,"ЧГ="),1);
				
				РасшифровкаЯчейки = ЗагрузкаРесурсов.Область("R"+Строка(ТекОбласть.Верх)+"C"+Строка(КоординатаКолонки)).Расшифровка;
				
				Если РасписаниеРаботПереключатель = ИнтервалПланирования() Тогда
					РасшифровкаЯчейкиВремяНачала = ЗагрузкаРесурсов.Область("R"+3+"C"+Формат(ЛеваяГраница+1,"ЧГ=")+":"+"R"+3+"C"+Формат(ЛеваяГраница+1,"ЧГ=")).Расшифровка;
					РасшифровкаЯчейкиВремяОкончания = ЗагрузкаРесурсов.Область("R"+3+"C"+Формат(ВыделеннаяОбласть.Право+2,"ЧГ=")+":"+"R"+3+"C"+Формат(ВыделеннаяОбласть.Право+2,"ЧГ=")).Расшифровка;
					
					ВремяНачала = РасшифровкаЯчейкиВремяНачала;
					ВремяОкончания = РасшифровкаЯчейкиВремяОкончания;
			
				ИначеЕсли РасписаниеРаботПереключатель = ИнтервалДень() Тогда
					РасшифровкаЯчейкиВремяНачала = ЗагрузкаРесурсов.Область("R"+3+"C"+Формат(ЛеваяГраница,"ЧГ=")+":"+"R"+3+"C"+Формат(ЛеваяГраница+1,"ЧГ=")).Расшифровка;
					РасшифровкаЯчейкиВремяОкончания = ЗагрузкаРесурсов.Область("R"+3+"C"+Формат(ВыделеннаяОбласть.Право,"ЧГ=")+":"+"R"+3+"C"+Формат(ВыделеннаяОбласть.Право,"ЧГ=")).Расшифровка;
					
					Если Не ЗначениеЗаполнено(РасшифровкаЯчейкиВремяНачала) Тогда Возврат КонецЕсли;
					
					ВремяНачала = НачалоДня(РасшифровкаЯчейкиВремяНачала);
					ВремяОкончания = ?(ТипЗнч(РасшифровкаЯчейкиВремяОкончания) = Тип("Дата"), КонецДня(РасшифровкаЯчейкиВремяОкончания), Неопределено);
					
				КонецЕсли;
				
				ВремяОкончания = ?(Не ЗначениеЗаполнено(ВремяОкончания), КонецДня(ВремяНачала), ВремяОкончания);
				ВремяОкончания = ?(ВремяОкончания = НачалоДня(ВремяОкончания), КонецДня(ВремяНачала), ВремяОкончания);
				
				Ресурс = Неопределено;
				
				Если ТипЗнч(РасшифровкаЯчейки) = Тип("Структура") И РасшифровкаЯчейки.Свойство("Ресурс") И Не РасшифровкаЯчейки.Свойство("СсылкаНаДокумент") Тогда
					Ресурс = РасшифровкаЯчейки.Ресурс;
					
					Если ТекОбласть.Лево = 1 Тогда
						Возврат
					КонецЕсли;
					
					СтруктураДанные = Новый Структура();
					СтруктураДанные.Вставить("Ресурс", Ресурс);
					СтруктураДанные = ПолучитьДанныеРесурса(СтруктураДанные);
					
					ПодобратьВКорзинуКонтекстноеМеню(Ресурс, ТекОбласть, ВремяНачала, ВремяОкончания, СтруктураДанные);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ЗавершатьПриНаличииНеРабочихПериодов(ВыделенныеОбласти)
	
	Для Каждого ВыделеннаяОбласть Из ВыделенныеОбласти Цикл
		
			ТекОбласть = ВыделеннаяОбласть;
			
			НижняяГраницаОбласти = ВыделеннаяОбласть.Низ;
			ВерхняяГраницаОбласти = ВыделеннаяОбласть.Верх;
			
			Для ИндексГраницы = ВерхняяГраницаОбласти По НижняяГраницаОбласти Цикл
				
				ЛеваяГраница = ?(ВыделеннаяОбласть.Лево < 5, 5, ВыделеннаяОбласть.Лево);
				
				ТекОбласть = ЗагрузкаРесурсов.Область("R"+Формат(ИндексГраницы,"ЧГ=")+"C"+Формат(ЛеваяГраница,"ЧГ=")+":"+"R"+Формат(ИндексГраницы+1,"ЧГ=")+"C"+Формат(ВыделеннаяОбласть.Право,"ЧГ="));
				
				Если ТекОбласть.Лево < 5 Тогда
					ТекОбласть = ЗагрузкаРесурсов.Область("R"+Формат(ТекОбласть.Верх,"ЧГ=")+"C"+"5"+":"+"R"+Формат(ТекОбласть.Низ,"ЧГ=")+"C"+Формат(ТекОбласть.Право,"ЧГ="));
				КонецЕсли;
				
				Если ТипЗнч(ТекОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
					Продолжить;
				КонецЕсли;
				
				КоординатаКолонки = ?(РасписаниеРаботПереключатель = ИнтервалМесяц(), Формат(ТекОбласть.Лево,"ЧГ="),1);
				
				РасшифровкаЯчейки = ЗагрузкаРесурсов.Область("R"+Строка(ТекОбласть.Верх)+"C"+Строка(КоординатаКолонки)).Расшифровка;
				
				РасшифровкаЯчейкиВремяНачала = ЗагрузкаРесурсов.Область("R"+3+"C"+Формат(ЛеваяГраница+1,"ЧГ=")+":"+"R"+3+"C"+Формат(ЛеваяГраница+1,"ЧГ=")).Расшифровка;
				РасшифровкаЯчейкиВремяОкончания = ЗагрузкаРесурсов.Область("R"+3+"C"+Формат(ВыделеннаяОбласть.Право+2,"ЧГ=")+":"+"R"+3+"C"+Формат(ВыделеннаяОбласть.Право+2,"ЧГ=")).Расшифровка;
				
				ВремяНачала = РасшифровкаЯчейкиВремяНачала;
				ВремяОкончания = РасшифровкаЯчейкиВремяОкончания;
				
				ВремяОкончания = ?(Не ЗначениеЗаполнено(ВремяОкончания), КонецДня(ВремяНачала), ВремяОкончания);
				ВремяОкончания = ?(ВремяОкончания = НачалоДня(ВремяОкончания), КонецДня(ВремяНачала), ВремяОкончания);
				
				Ресурс = Неопределено;
				КонтрольГрафика = Ложь;
				ЗавершитьПодбор = Ложь;
				
				Если ТипЗнч(РасшифровкаЯчейки) = Тип("Структура") И РасшифровкаЯчейки.Свойство("Ресурс") И Не РасшифровкаЯчейки.Свойство("СсылкаНаДокумент") Тогда
					Ресурс = РасшифровкаЯчейки.Ресурс;
					
					Если ТекОбласть.Лево = 1 Тогда
						Продолжить
					КонецЕсли;
					
					СтруктураДанные = Новый Структура();
					СтруктураДанные.Вставить("Ресурс", Ресурс);
					СтруктураДанные = ПолучитьДанныеРесурса(СтруктураДанные);
					
					КонтрольГрафика = ?(РасшифровкаЯчейки.Свойство("КонтролироватьЗагрузкуТолькоВРабочееВремя"), РасшифровкаЯчейки.КонтролироватьЗагрузкуТолькоВРабочееВремя, Ложь);
					
					Если КонтрольГрафика Тогда
						ЗавершитьПодбор = ЗавершитьПодбор(Ресурс, ЛеваяГраница, ВыделеннаяОбласть.Право, Формат(ИндексГраницы,"ЧГ=")
																				, СтруктураДанные.КратностьПланирования, ВремяНачала, ВремяОкончания, СтруктураДанные);
					КонецЕсли;
					
					Если ЗавершитьПодбор Тогда
						Возврат Истина
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ЗавершитьПодбор(Ресурс, ЛеваяГраница, ПраваяГраница, НомерСтрокиОбласти, КратностьПланирования, ВремяНачала, ВремяОкончания, СтруктураДанные)
		ЯчеекВПериоде = КратностьПланирования/5;
	
	Пока ЛеваяГраница < ПраваяГраница Цикл
		
		ПраваяГраницаИнтервала = ЛеваяГраница + ЯчеекВПериоде;
		Область = ЗагрузкаРесурсов.Область("R"+НомерСтрокиОбласти+"C"+Формат(ЛеваяГраница,"ЧГ=")+":"+"R"+НомерСтрокиОбласти+"C"+Формат(ЛеваяГраница+1,"ЧГ="));
		ЛеваяГраница = ПраваяГраницаИнтервала;
		
		Если Не ТипЗнч(Область.Расшифровка) = Тип("Структура") 
			ИЛИ (ТипЗнч(Область.Расшифровка) = Тип("Структура") И Область.Расшифровка.Свойство("ЭтоРабочийПериод") И Не Область.Расшифровка.ЭтоРабочийПериод) Тогда
			
			Возврат Истина;
			
		КонецЕсли;

	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаПодборИзКонтекстногоМеню(Результат, ПараметрыОповещения) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеОбласти = ПараметрыОповещения.ВыделенныеОбласти;
	ПодобратьВКорзинуИзКонтекстногоМенюЗавершение(ВыделенныеОбласти);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНадписьНажатиеЗавершение(НовыйПериод, Параметры) Экспорт
	
	Если НовыйПериод = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Период = НовыйПериод;
	ПериодНадпись = ОбновитьПредставлениеПериода(Период);
	
	СформироватьПоЗначениюПериодаОтбор();
	
	Если Не РасписаниеРаботПереключатель = ИнтервалМесяц() И Не ЗначениеЗаполнено(ПериодПозиционирования) Тогда
		Элементы.ЗагрузкаРесурсов.ТекущаяОбласть = ЗагрузкаРесурсов.Область("R7C2");
		СпозиционироватьНаОбласти(ПредставлениеПериода);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораДокументаИзМеню(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда Возврат КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "Заказ на производство" Тогда
		ПараметрыОткрытия = Новый Структура();
		ОткрытьФорму("Документ.ЗаказНаПроизводство.Форма.ФормаВыбора", ПараметрыОткрытия,Параметры.Элемент);
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "Заказ-Наряд" Тогда
		ПараметрыОткрытия = Новый Структура("РежимВыбора", Истина);
		ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаСпискаЗаказНаряда", ПараметрыОткрытия, Параметры.Элемент);
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "Событие ""Запись""" Тогда
		ПараметрыОткрытия = Новый Структура("РежимВыбора, ТипСобытия", Истина, ПредопределенноеЗначение("Перечисление.ТипыСобытий.Запись"));
		ОткрытьФорму("Документ.Событие.ФормаСписка", ПараметрыОткрытия, Параметры.Элемент);
		Возврат;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриЗакрытии(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ВыбранныеРесурсы.Очистить();
		
		Если Не ПараметрыОповещения.ЗавершениеРаботы Тогда
			ПередЗакрытиемНаСервере();
		КонецЕсли;
		
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИнтервалПланирования()
	
	Возврат НСтр("ru = 'Интервал планирования'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИнтервалДень()
	
	Возврат НСтр("ru = 'День'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИнтервалМесяц()
	
	Возврат НСтр("ru = 'Месяц'");
	
КонецФункции

#КонецОбласти

#Область ПодсказкаАссистента

&НаСервере
Процедура УстановитьВидимостьПодсказкиАссистента()
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Элементы.ГруппаСтраницыПодсказкаАссистента.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Элементы.ГруппаСтраницыПодсказкаАссистента.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	РежимРаботы = Новый ФиксированнаяСтруктура(УправлениеНебольшойФирмойПовтИсп.РежимРаботыПрограммы());
	
	Если Не РежимРаботы.ЭтоАдминистраторПрограммы Тогда
		Элементы.ГруппаСтраницыПодсказкаАссистента.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Константы.НеПоказыватьПодсказкуАссистентаМЛК.Получить() Тогда
		Элементы.ГруппаСтраницыПодсказкаАссистента.Видимость = Ложь;
	Иначе
		Элементы.ГруппаСтраницыПодсказкаАссистента.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗакрытьПодсказкуНажатие(Элемент)
	Элементы.ГруппаСтраницыПодсказкаАссистента.Видимость = Ложь;
	ВыключитьПодсказкуАссистента();
КонецПроцедуры

&НаСервере
Процедура ВыключитьПодсказкуАссистента()
	Константы.НеПоказыватьПодсказкуАссистентаМЛК.Установить(Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьМобильноеПриложение(Команда)
	
	ВключитьКонструкторМобильногоПриложения();
	
	СсылкаНаКонструктор = ПолучитьСсылкуНаКонструктор();
	ПараметрыФормы = Новый Структура("Ключ", СсылкаНаКонструктор);
	ОткрытьФорму("Справочник.НастройкиПубликацииМЛК.Форма.КонструкторМобильногоПриложения", ПараметрыФормы);
	
	Элементы.ГруппаСтраницыПодсказкаАссистента.Видимость = Ложь;
	ВыключитьПодсказкуАссистента();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСсылкуНаКонструктор()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиПубликацииМЛК.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиПубликацииМЛК КАК НастройкиПубликацииМЛК";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат Справочники.НастройкиПубликацииМЛК.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ВключитьКонструкторМобильногоПриложения()
	
	Константы.ИспользоватьМобильныйЛичныйКабинет.Установить(Истина);
	КонструкторМобильногоПриложения.СоздатьИзменитьСлужебногоПользователяМобильногоЛичногоКабинета(Истина);
	
КонецПроцедуры

#КонецОбласти
