
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОрганизацияБизнесСети", ОрганизацияБизнесСетиСсылка);
	
	Если Не СервисДоставки.ПравоРаботыССервисомДоставки(Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ТипГрузоперевозки", ТипГрузоперевозки);
	
	Если НЕ ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбран тип грузоперевозки'"));
		Отказ = Истина;
		Возврат;
	ИначеЕсли НЕ СервисДоставки.ТипГрузоперевозкиДоступен(ТипГрузоперевозки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выбранный тип грузоперевозки не доступен'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НастроитьФормуПоТипуГрузоперевозки();
	
	ДоступнаОтправкаЗаказовНаДоставку = СервисДоставки.ПравоОтправкиЗаказовНаДоставкуПеревозчику();
	
	Если Не ДоступнаОтправкаЗаказовНаДоставку Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Недостаточно прав для работы с настройками.
			|Должна быть доступна роль ""Отправка заказов на доставку перевозчику сервиса 1С:Доставка""'"));
		Возврат
	КонецЕсли;
	
	ЗаполнитьДанныеСервиса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ФоновоеЗаданиеПолучитьГрузоперевозчиков) Тогда
		
		ПараметрыОперации = Новый Структура("ВыводитьОкноОжидания");
		ПараметрыОперации.Вставить("ИмяПроцедуры", СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрузоперевозчиков());
		ПараметрыОперации.Вставить("НаименованиеОперации", НСтр("ru = 'Получение списка грузоперевозчиков.'"));
		
		ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикиПриАктивизацииСтроки(Элемент)
	
	ДанныеПеревозчика = Элементы.Перевозчики.ТекущиеДанные;
	Если НЕ ДанныеПеревозчика = Неопределено Тогда
		Если НЕ ДанныеПеревозчика.ДанныеАвторизацииВведены 
			И ДанныеПеревозчика.ТребуетсяАвторизация Тогда
			Элементы.ВвестиДанныеАвторизации.Заголовок = НСтр("ru = 'Ввести данные авторизации'");
			Элементы.ВвестиДанныеАвторизации.Доступность = Истина;
		ИначеЕсли ДанныеПеревозчика.ДанныеАвторизацииВведены 
			И ДанныеПеревозчика.ТребуетсяАвторизация Тогда
			Элементы.ВвестиДанныеАвторизации.Заголовок = НСтр("ru = 'Изменить данные авторизации'");
			Элементы.ВвестиДанныеАвторизации.Доступность = Истина;
		Иначе
			Элементы.ВвестиДанныеАвторизации.Доступность = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ВвестиДанныеАвторизации.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиДанныеАвторизации(Команда)
	
	ДанныеПеревозчика = Элементы.Перевозчики.ТекущиеДанные;
	ОписаниеОЗакрытии = Новый ОписаниеОповещения("ПриЗакрытииОкнаАвторизации", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Организация", ОрганизацияБизнесСетиСсылка);
	ПараметрыФормы.Вставить("Перевозчик", ДанныеПеревозчика.Перевозчик);
	ПараметрыФормы.Вставить("ТипАвторизации", ДанныеПеревозчика.ТипАвторизации);
	ПараметрыФормы.Вставить("Авторизован", ДанныеПеревозчика.ДанныеАвторизацииВведены);
	ПараметрыФормы.Вставить("ИдентификаторСервиса", ДанныеПеревозчика.ИдентификаторСервиса);
	ПараметрыФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.АвторизацияВЛичномКабинетеГрузоперевозчика", ПараметрыФормы,
		ЭтотОбъект,,,,ОписаниеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииОкнаАвторизации(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьДанныеСервиса();
	ПриОткрытии(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикиОписаниеПодключенияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если ДанныеСобытия.Свойство("href") И ЗначениеЗаполнено(ДанныеСобытия.href) Тогда
		ИмяОткрываемойСтраницы = СокрЛП(ДанныеСобытия.href);
		Протокол = ВРег(СтрЛевДоСимвола(ИмяОткрываемойСтраницы, ":"));
		Если Протокол <> "HTTP" И Протокол <> "HTTPS" И Протокол <> "E1C" Тогда
			Возврат;
		КонецЕсли;
		
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ИмяОткрываемойСтраницы);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыполнитьЗапрос

&НаКлиенте
Процедура ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации)
	
	Постфикс = "";
	ПараметрыОперации.Свойство("Постфикс", Постфикс);
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры + Постфикс;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	ПараметрыОперации.Вставить("ФоновоеЗадание", ФоновоеЗадание);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = ПараметрыОперации.НаименованиеОперации;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.Вставить("ИдентификаторЗадания", ФоновоеЗадание.ИдентификаторЗадания);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ВыполнитьЗапросЗавершение",
		ЭтотОбъект, ПараметрыОперации);
		
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОбработкаЗавершения, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	ТекстСообщения = "";
	ДанныеОбновлены = Ложь;
	Постфикс = "";
	ДополнительныеПараметры.Свойство("Постфикс", Постфикс);
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ДополнительныеПараметры.ИмяПроцедуры + Постфикс;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	
	СервисДоставкиКлиент.ОбработатьРезультатФоновогоЗадания(Результат, ДополнительныеПараметры, Отказ);
	Если Результат = Неопределено ИЛИ ФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ И Результат.Статус = "Выполнено" Тогда
		Если ЗначениеЗаполнено(Результат.АдресРезультата)
			И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) 
			И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания =
				ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
			
			Если ДополнительныеПараметры.ИмяПроцедуры =
					СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрузоперевозчиков() Тогда
				
				ЗагрузитьРезультатПолученияСпискаПеревозчиков(Результат.АдресРезультата);
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				ДанныеОбновлены = Истина;
				
				Если Перевозчики.Количество() Тогда
					Элементы.Перевозчики.ТекущаяСтрока = Перевозчики[0].ПолучитьИдентификатор();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнитьЗапросВФоне

&НаСервере
Функция ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации)
	
	// Проверка подключения Интернет-поддержки пользователей.
	ИнтернетПоддержкаПодключена = ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	Если Не ИнтернетПоддержкаПодключена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отказ = Ложь;
	ПараметрыЗапроса = ПараметрыЗапроса(ПараметрыОперации, Отказ);
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Постфикс = "";
	ПараметрыОперации.Свойство("Постфикс", Постфикс);
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры + Постфикс;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	Если ФоновоеЗадание <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ФоновоеЗадание.ИдентификаторЗадания);
	КонецЕсли;
	
	Задание = Новый Структура("ИмяПроцедуры, Наименование, ПараметрыПроцедуры");
	Задание.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '1С:Доставка. %1.'"),
		ПараметрыОперации.НаименованиеОперации);
	Задание.ИмяПроцедуры = "СервисДоставки." + ПараметрыОперации.ИмяПроцедуры;
	Задание.ПараметрыПроцедуры = ПараметрыЗапроса;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры,
		Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьГрузоперевозчиковВФоне()
	
	ПараметрыОперации = Новый Структура("ВыводитьОкноОжидания");
	ПараметрыОперации.Вставить("ИмяПроцедуры", СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрузоперевозчиков());
	ПараметрыОперации.Вставить("НаименованиеОперации", НСтр("ru = 'Получение списка грузоперевозчиков.'"));
	
	Возврат ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	
КонецФункции

#КонецОбласти

#Область ПараметрыЗапроса

&НаСервере
Функция ПараметрыЗапроса(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = Новый Структура();
	
	ИмяПроцедуры = ПараметрыОперации.ИмяПроцедуры;
	
	Если ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьГрузоперевозчиков() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьГрузоперевозчиков(ПараметрыОперации, Отказ);
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьГрузоперевозчиков(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьГрузоперевозчиков();
	ПараметрыЗапроса.ТипГрузоперевозки = ТипГрузоперевозки;
	
	Возврат ПараметрыЗапроса;
КонецФункции

#КонецОбласти

#Область РезультатыЗапросаEDI

&НаСервере
Процедура ЗагрузитьРезультатПолученияСпискаПеревозчиков(АдресРезультата)
	
	ОперацияВыполнена = Ложь;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("Список") Тогда
				
				ЭлементыСписка = Результат.Список;
				
				Для Каждого ТекущийЭлементСписка Из ЭлементыСписка Цикл
					
					ПараметрыПоиска = Новый Структура();
					ПараметрыПоиска.Вставить("Перевозчик", ТекущийЭлементСписка.Наименование);
					ПараметрыПоиска.Вставить("Идентификатор", ТекущийЭлементСписка.Идентификатор);
					
					НайденныеСтроки = Перевозчики.НайтиСтроки(ПараметрыПоиска);
					
					Если НайденныеСтроки.Количество()>0 Тогда
						СтрокаТаблицы = НайденныеСтроки[0];
					Иначе
						СтрокаТаблицы = Перевозчики.Добавить();
						СтрокаТаблицы.Перевозчик = ТекущийЭлементСписка.Наименование;
						СтрокаТаблицы.Идентификатор = ТекущийЭлементСписка.Идентификатор;
					КонецЕсли;
					
					
					СтрокаТаблицы.ТребуетсяАвторизация = ТекущийЭлементСписка.ТребуетсяАвторизация;
					СтрокаТаблицы.ИдентификаторСервиса = ТекущийЭлементСписка.ИдентификаторСервиса;
					СтрокаТаблицы.ВозможнаРаботаБезАвторизации = ТекущийЭлементСписка.ВозможнаРаботаБезАвторизации;
					СтрокаТаблицы.ДанныеАвторизацииВведены = ТекущийЭлементСписка.ДанныеАвторизацииВведены;
					СтрокаТаблицы.ТипАвторизации = ТекущийЭлементСписка.ТипАвторизации;
					СтрокаТаблицы.ОписаниеПодключения = ТекущийЭлементСписка.ОписаниеПодключения;
					ЗаполнитьИнформациюПоАвторизации(СтрокаТаблицы);
					
				КонецЦикла;
				
				ОперацияВыполнена = Истина;
			
			КонецЕсли;
			
			СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюПоАвторизации(СтрокаТаблицы)
	
	Если СтрокаТаблицы.ТребуетсяАвторизация И СтрокаТаблицы.ДанныеАвторизацииВведены Тогда
		СтрокаТаблицы.Использовать = Истина;
		СтрокаТаблицы.Описание = НСтр("ru = 'Введены данные авторизации'");
	ИначеЕсли СтрокаТаблицы.ВозможнаРаботаБезАвторизации
		И СтрокаТаблицы.ТребуетсяАвторизация Тогда
		СтрокаТаблицы.Использовать = Истина;
		СтрокаТаблицы.Описание = НСтр("ru = 'Возможна работа без авторизации. Для получения персональных скидок нужна авторизация'");
	ИначеЕсли СтрокаТаблицы.ВозможнаРаботаБезАвторизации Тогда
		СтрокаТаблицы.Описание = НСтр("ru = 'Для работы с данным сервисом авторизация не нужна'");
		СтрокаТаблицы.Использовать = Истина;
	Иначе
		СтрокаТаблицы.Описание = НСтр("ru = 'Для работы с данным сервисом обязательна авторизация'");
		СтрокаТаблицы.Использовать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеПеревозчика = Элементы.Перевозчики.ТекущиеДанные;
	
	Если Поле.Имя = "Перевозчик" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура();
		ПараметрыОткрытияФормы.Вставить("Идентификатор", ДанныеПеревозчика.Идентификатор);
		ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
		ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
		
		ОткрытьФорму("Обработка.СервисДоставки.Форма.КарточкаГрузоперевозчика", 
			ПараметрыОткрытияФормы,
			,
			ДанныеПеревозчика.Идентификатор,,,,
			РежимОткрытияОкнаФормы.Независимый);
		
	Иначе
		
		ОписаниеОЗакрытии = Новый ОписаниеОповещения("ПриЗакрытииОкнаАвторизации", ЭтотОбъект);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Организация", ОрганизацияБизнесСетиСсылка);
		ПараметрыФормы.Вставить("Перевозчик", ДанныеПеревозчика.Перевозчик);
		ПараметрыФормы.Вставить("ТипАвторизации", ДанныеПеревозчика.ТипАвторизации);
		ПараметрыФормы.Вставить("Авторизован", ДанныеПеревозчика.ДанныеАвторизацииВведены);
		ПараметрыФормы.Вставить("ИдентификаторСервиса", ДанныеПеревозчика.ИдентификаторСервиса);
		ПараметрыФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
		
		ОткрытьФорму("Обработка.СервисДоставки.Форма.АвторизацияВЛичномКабинетеГрузоперевозчика", ПараметрыФормы,
			ЭтотОбъект,,,,ОписаниеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Перевозчики

&НаСервере
Процедура ЗаполнитьДанныеСервиса()
	
	СписокПеревозчиков();
	
КонецПроцедуры

&НаСервере
Процедура СписокПеревозчиков()
	
	Перевозчики.Очистить();
	
	ФоновоеЗаданиеПолучитьГрузоперевозчиков = ПолучитьГрузоперевозчиковВФоне();
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция СтрЛевДоСимвола(Строка, Разделитель, Остаток = Неопределено)
	Позиция = СтрНайти(Строка, Разделитель);
	Если Позиция = 0 Тогда
		СтрокаДоТочки = Строка;
		Остаток = "";
	Иначе
		СтрокаДоТочки = Лев(Строка, Позиция - 1);
		Остаток = Сред(Строка, Позиция + СтрДлина(Разделитель));
	КонецЕсли;
	Возврат СтрокаДоТочки;
КонецФункции

&НаСервере
Процедура НастроитьФормуПоТипуГрузоперевозки()
	
	Если ТипГрузоперевозки = 1 Тогда
		Заголовок = НСтр("ru = '1C:Доставка: Подключение к перевозчикам'");
	Иначе
		Заголовок = НСтр("ru = '1C:Курьер: Подключение к перевозчикам'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
