
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущаяДоска = Параметры.ТекущаяДоска;
	ВидКонтактЦентра = Параметры.ВидКонтактЦентра;
	КолонкиТекущейДоски.Параметры.УстановитьЗначениеПараметра("Владелец", ТекущаяДоска);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры.НастройкиОтображенияКалендаря);
	НачалоРабочегоДня		= Дата(1, 1, 1, Параметры.НастройкиОтображенияКалендаря.НачалоРабочегоДня, 0, 0);
	ОкончаниеРабочегоДня	= Дата(1, 1, 1, Параметры.НастройкиОтображенияКалендаря.ОкончаниеРабочегоДня, 0, 0);
	
	СобытияУНФКлиентСервер.ЗаполнитьСписокВыбораВремени(Элементы.НачалоРабочегоДня,
		3600, 
		'00010101000000',
		'00010101230000');
	СобытияУНФКлиентСервер.ЗаполнитьСписокВыбораВремени(Элементы.ОкончаниеРабочегоДня,
		3600,
		'00010101000000',
		'00010101230000');
	
	// Нулевое время обозначает конец дня, поэтому поставим его последним элементом
	Элементы.ОкончаниеРабочегоДня.СписокВыбора.Сдвинуть(0, 
		Элементы.ОкончаниеРабочегоДня.СписокВыбора.Количество() - 1);
		
	УстановитьУсловноеОформлениеСписка();
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Телефония(Команда)
	ПараметрыНастроек = Новый Структура("СтрокаПоиска", НСтр("ru = 'Телефония'"));
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастройкаКаналовЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.НастройкаПрограммы.Форма.НастройкаПрограммы", ПараметрыНастроек, , , , , ОповещениеОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура Почта(Команда)
	ПараметрыНастроек = Новый Структура("СтрокаПоиска", НСтр("ru = 'Настроить учетные записи'"));
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастройкаКаналовЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.НастройкаПрограммы.Форма.НастройкаПрограммы", ПараметрыНастроек, , , , , ОповещениеОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура Телеграм(Команда)
	ПараметрыНастроек = Новый Структура("СтрокаПоиска", НСтр("ru = 'Интеграция с мессенджерами'"));
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастройкаКаналовЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.НастройкаПрограммы.Форма.НастройкаПрограммы", ПараметрыНастроек, , , , , ОповещениеОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура ВКонтакте(Команда)
	ПараметрыНастроек = Новый Структура("СтрокаПоиска", НСтр("ru = 'Интеграция с мессенджерами'"));
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастройкаКаналовЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.НастройкаПрограммы.Форма.НастройкаПрограммы", ПараметрыНастроек, , , , , ОповещениеОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура ОбменССайтом(Команда)
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастройкаКаналовЗавершение", ЭтотОбъект);
	ОткрытьФорму("ПланОбмена.ОбменУправлениеНебольшойФирмойСайт.Форма.ФормаСписка", , , , , ОповещениеОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура КабинетКлиента(Команда)
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастройкаКаналовЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.НастройкиПубликацииМЛК.Форма.КонструкторМобильногоПриложения", , , , , ОповещениеОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	Если Элементы.КолонкиТекущейДоски.ТекущиеДанные = Неопределено
		ИЛИ Элементы.КолонкиТекущейДоски.ТекущаяСтрока = Неопределено
		ИЛИ Элементы.КолонкиТекущейДоски.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Порядок = Элементы.КолонкиТекущейДоски.ТекущиеДанные.Порядок;
	Если Порядок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДоСмещения = Элементы.КолонкиТекущейДоски.ТекущаяСтрока;
	
	ПорядокЭлементовИзменен = ИзменитьПорядокЗаписей(Элементы.КолонкиТекущейДоски.ТекущиеДанные.Ссылка, Порядок, -1);
	
	Если НЕ ПорядокЭлементовИзменен Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.КолонкиТекущейДоски.Обновить();
	Элементы.КолонкиТекущейДоски.ТекущаяСтрока = СтрокаДоСмещения;
	Оповестить("ИзменениеПорядка_КолонкиКалендаряСотрудника");
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	Если Элементы.КолонкиТекущейДоски.ТекущиеДанные = Неопределено
		ИЛИ Элементы.КолонкиТекущейДоски.ТекущаяСтрока = Неопределено
		ИЛИ Элементы.КолонкиТекущейДоски.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Порядок = Элементы.КолонкиТекущейДоски.ТекущиеДанные.Порядок;
	СтрокаДоСмещения = Элементы.КолонкиТекущейДоски.ТекущаяСтрока;
	
	ПорядокЭлементовИзменен = ИзменитьПорядокЗаписей(Элементы.КолонкиТекущейДоски.ТекущиеДанные.Ссылка, Порядок, 1);
	
	Если НЕ ПорядокЭлементовИзменен Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.КолонкиТекущейДоски.Обновить();
	Элементы.КолонкиТекущейДоски.ТекущаяСтрока = СтрокаДоСмещения;
	Оповестить("ИзменениеПорядка_КолонкиКалендаряСотрудника");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ИзменитьПорядокЗаписей(Запись, Порядок, НаправлениеИзменения)
	
	ТекущаяКолонка = Запись;
	ПредыдущаяКолонка = ПредыдущаяКолонка(Порядок + НаправлениеИзменения);
	
	Если НЕ ЗначениеЗаполнено(ПредыдущаяКолонка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПредыдущаяКолонка.Порядок = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		
		ТекущаяКолонкаОбъект    = ТекущаяКолонка.ПолучитьОбъект();
		ТекущаяКолонкаОбъект.Заблокировать();
		ПредыдущаяКолонкаОбъект = ПредыдущаяКолонка.ПолучитьОбъект();
		ПредыдущаяКолонкаОбъект.Заблокировать();
		ПредыдущаяКолонкаОбъект.Порядок = ТекущаяКолонкаОбъект.Порядок;
		ТекущаяКолонкаОбъект.Порядок = ТекущаяКолонкаОбъект.Порядок + НаправлениеИзменения;
		
		ТекущаяКолонкаОбъект.Записать();
		ТекущаяКолонкаОбъект.Разблокировать();
		ПредыдущаяКолонкаОбъект.Записать();
		ПредыдущаяКолонкаОбъект.Разблокировать();
		
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ПредыдущаяКолонка(Порядок)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КолонкиКалендарейСотрудников.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КолонкиКалендарейСотрудников КАК КолонкиКалендарейСотрудников
	|ГДЕ
	|	КолонкиКалендарейСотрудников.Порядок = &Порядок И КолонкиКалендарейСотрудников.Владелец = &ТекущаяДоска";
	
	Запрос.УстановитьПараметр("Порядок", Порядок);
	Запрос.УстановитьПараметр("ТекущаяДоска", ТекущаяДоска);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.КолонкиКалендарейСотрудников.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура НастройкаКаналовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	УправлениеФормой();
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	ВидСписок    = 0;
	ВидКанбан    = 1;
	ВидКалендарь = 2;
	
	Если ВидКонтактЦентра = ВидСписок ИЛИ ВидКонтактЦентра = ВидКанбан Тогда
		Элементы.ГруппаСтраницыНастроек.ТекущаяСтраница = Элементы.ГруппаВходящее;
	ИначеЕсли ВидКонтактЦентра = ВидКалендарь Тогда
		Элементы.ГруппаСтраницыНастроек.ТекущаяСтраница = Элементы.ГруппаКалендарь;
	Иначе
		Элементы.ГруппаСтраницыНастроек.ТекущаяСтраница = Элементы.ГруппаДоски;
	КонецЕсли;
	
	РазрешеноПодключатьКаналы = Пользователи.ЭтоПолноправныйПользователь();
	
	УстановитьПривилегированныйРежим(Истина);
	Подключено_Телефония = КонтактЦентр.ПодключенаТелефония();
	Подключено_Почта     = КонтактЦентр.ПодключенаПочта();
	Подключено_КабинетКлиента = КонтактЦентр.ПодключенКабинетКлиента();
	Подключено_Сайт = КонтактЦентр.ПодключенСайт();
	Подключено_Телеграм = КонтактЦентр.ПодключенТелеграм();
	Подключено_ВКонтакте = КонтактЦентр.ПодключенВКонтакте();
	УстановитьПривилегированныйРежим(Ложь);

	УстановитьПризнакиПодключенияКаналов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакиПодключенияКаналов()
	
	Реквизиты = ПолучитьРеквизиты();
	Для Каждого Реквизит Из Реквизиты Цикл
		Если СтрНайти(Реквизит.Имя, "Подключено") = 0 Тогда
			Продолжить;
		КонецЕсли;
		Канал = Прав(Реквизит.Имя, СтрДлина(Реквизит.Имя) - СтрНайти(Реквизит.Имя, "_"));
		Элементы["ВРаботе_" + Канал].Видимость = ЭтотОбъект[Реквизит.Имя];
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКолонкуДоски(Команда)
	ПараметрыКолонки = Новый Структура;
	ПараметрыКолонки.Вставить("Владелец", ТекущаяДоска);
	ОткрытьФорму("Справочник.КолонкиКалендарейСотрудников.Форма.ФормаЭлемента", ПараметрыКолонки);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("НачалоРабочегоДня",		Час(НачалоРабочегоДня));
	Результат.Вставить("ОкончаниеРабочегоДня",	Час(ОкончаниеРабочегоДня));
	Результат.Вставить("ОтображатьТекущуюДату",	ОтображатьТекущуюДату);
	
	ОповеститьОВыборе(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура КолонкиТекущейДоскиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
 
	ВыделеннаяКолонка = ВыбраннаяСтрока;
	ПерваяКолонкаКалендаря = ПерваяКолонка();
	
	Если ПерваяКолонкаКалендаря = ВыделеннаяКолонка Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КолонкиТекущейДоскиПриАктивизацииЯчейки(Элемент)
	
	ВыделеннаяКолонка = Элемент.ТекущиеДанные.Ссылка;
	ПерваяКолонкаКалендаря = ПерваяКолонка();
	
	Элементы.КолонкиТекущейДоскиПереместитьВверх.Доступность =  ПерваяКолонкаКалендаря <> ВыделеннаяКолонка;
	Элементы.КолонкиТекущейДоскиПереместитьВниз.Доступность =  ПерваяКолонкаКалендаря <> ВыделеннаяКолонка;
	Элементы.КолонкиТекущейДоскиКонтекстноеМенюИзменить.Доступность =  ПерваяКолонкаКалендаря <> ВыделеннаяКолонка;
	Элементы.КолонкиТекущейДоскиКонтекстноеМенюУстановитьПометкуУдаления.Доступность 
		=  ПерваяКолонкаКалендаря <> ВыделеннаяКолонка;
	
КонецПроцедуры

&НаСервере
Функция ПерваяКолонка()
	Возврат Справочники.КолонкиКалендарейСотрудников.КолонкаНеобработанное(ТекущаяДоска);
КонецФункции

&НаКлиенте
Процедура КолонкиТекущейДоскиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСписка()
	
	ПерваяКолонкаКалендаря = ПерваяКолонка();
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"КолонкиТекущейДоски.Ссылка", 
		ПерваяКолонкаКалендаря, 
		ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы["КолонкиТекущейДоскиНаименование"].Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Шрифт", ШрифтыСтиля.ЖирныйШрифтБЭД);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"КолонкиТекущейДоски.Ссылка", 
		ПерваяКолонкаКалендаря, 
		ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы["КолонкиТекущейДоскиНаименование"].Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветРамки);
	
КонецПроцедуры

#КонецОбласти
