#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокМаркируемойПродукции();
	
	РедактированиеАвтоматическойОтправкиДанных = ПравоДоступа(
		"Редактирование", Метаданные.Константы.ИспользоватьАвтоматическуюОтправкуПолучениеДанныхИСМП);
	
	РедактированиеСрокаХранения = ПравоДоступа(
		"Редактирование", Метаданные.Константы.СрокХраненияИспользованныхКодовМаркировки);
	
	УдалятьКодыМаркировкиИзПула = НаборКонстант.СрокХраненияИспользованныхКодовМаркировки > 0;
	
	// Обновление состояния элементов
	УстановитьДоступность();
	
	СобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьИнтерфейсПрограммы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СписокМаркируемаяПродукцияДатаОбязательнойМаркировкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокМаркируемаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ВестиУчетПродукции
		И ТекущиеДанные.ДатаОбязательнойМаркировки <> '00010101' Тогда
		ТекущиеДанные.ВестиУчетПродукции = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокМаркируемаяПродукцияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат = СписокМаркируемаяПродукцияПередОкончаниемРедактированияНаСервере(ТекущиеДанные.ПолучитьИдентификатор(), Отказ);	
	Если Отказ И Элемент.ТекущийЭлемент = Элементы.СписокМаркируемаяПродукцияВидПродукции Тогда
		ТекущиеДанные.ВестиУчетПродукции = Ложь;
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	ОбновитьИнтерфейс = Истина;
	
	Если Результат <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СписокМаркируемаяПродукцияПередОкончаниемРедактированияНаСервере(ИдентификаторСтроки, Отказ)
	
	ТекущиеДанные = СписокМаркируемаяПродукция.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ТекущиеДанные <> Неопределено Тогда
		РегистрыСведений.НастройкиУчетаМаркируемойПродукцииИСМП.ЗаписатьНастройкуУчетаВидаПродукции(ТекущиеДанные, Отказ);
		
		Если НЕ Отказ Тогда
			Возврат ПриИзмененииРеквизитаСервер(Элементы.СписокМаркируемаяПродукция.Имя);
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура НастройкиСканированияКодовМаркировкиНажатие(Элемент)
	
	ОткрытьФорму("Обработка.ПанельАдминистрированияИСМП.Форма.НастройкиСканированияКодовМаркировки",,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическуюОтправкуПолучениеДанныхИСМППриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалятьКодыМаркировкиИзПулаПриИзменении(Элемент)
	
	Если НЕ УдалятьКодыМаркировкиИзПула Тогда
		НаборКонстант.СрокХраненияИспользованныхКодовМаркировки = 0;
	КонецЕсли;
	
	Подключаемый_ПриИзмененииРеквизита(Элементы.СрокХраненияИспользованныхКодовМаркировки, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокХраненияИспользованныхКодовМаркировкиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРаботыСТестовымКонтуромИСМППриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастройкаОбменаИСМП(Команда)
	
	ОткрытьФорму("ОбщаяФорма.НастройкаСертификатовДляАвтоматическогоОбменаИС",,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтветственныхЗаАктуализациюТокеновАвторизации(Команда)
	
	ОткрытьФорму("Справочник.ОтветственныеЗаАктуализациюТокеновАвторизацииИСМП.Форма.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтправкуПолучениеИСМП(Команда)
	
	Если Не РедактированиеАвтоматическойОтправкиДанных Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеОтправкиПолученияИСМП", ЭтотОбъект);
	
	ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеОтправкиПолученияИСМП);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОчисткуПулаКодовМаркировкиИСМП(Команда)
	
	Если Не РедактированиеСрокаХранения Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеОчисткиПулаКодовМаркировкиИСМП", ЭтотОбъект);
	
	ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеОтправкиПолученияИСМП);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПодключенияКСУЗ(Команда)
	
	ОткрытьФорму("РегистрСведений.НастройкиОбменаСУЗ.ФормаСписка", , ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокМаркируемаяПродукцияДатаОбязательнойМаркировки.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокМаркируемаяПродукцияВидПродукции.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокМаркируемаяПродукция.ВестиУчетПродукции");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",     ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокМаркируемойПродукции()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НастройкиУчетаМаркируемойПродукции.ВестиУчетПродукции ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ НастройкиУчетаМаркируемойПродукции.ВестиУчетПродукции
	|	КОНЕЦ КАК ВестиУчетПродукции,
	|	ВидыПродукции.Ссылка КАК ВидПродукции,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВидыПродукции.Ссылка) КАК ВидПродукцииПредставление,
	|	ЕСТЬNULL(НастройкиУчетаМаркируемойПродукции.ДатаОбязательнойМаркировки, ДАТАВРЕМЯ(0001, 01, 01)) КАК
	|		ДатаОбязательнойМаркировки
	|ИЗ
	|	Перечисление.ВидыПродукцииИС КАК ВидыПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаМаркируемойПродукцииИСМП КАК НастройкиУчетаМаркируемойПродукции
	|		ПО ВидыПродукции.Ссылка = НастройкиУчетаМаркируемойПродукции.ВидПродукции,
	|	Константы КАК Константы
	|ГДЕ
	|	ВидыПродукции.Ссылка В (&ВидыПродукцииИСМП)
	|");
	
	Запрос.УстановитьПараметр("ВидыПродукцииИСМП", ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Истина));
	
	ДоступныеВидыПродукции = Запрос.Выполнить().Выгрузить();
	ДоступныеВидыПродукции.Сортировать("ВидПродукцииПредставление Возр");
	
	СписокМаркируемаяПродукция.Загрузить(ДоступныеВидыПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеОтправкиПолученияИСМП(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеОтправкиПолученияИСМП = РасписаниеЗадания;
	
	ИзменитьРасписаниеЗадания("ОтправкаПолучениеДанныхИСМП", РасписаниеОтправкиПолученияИСМП);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеОчисткиПулаКодовМаркировкиИСМП(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеОчисткиПулаКодовИСМП = РасписаниеЗадания;
	
	ИзменитьРасписаниеЗадания("ОчисткаПулаКодовМаркировкиИСМП", РасписаниеОчисткиПулаКодовИСМП);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьИспользованиеЗадания(ИмяЗадания, Использование)
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	РегЗадание = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Истина И Использование);
	РегламентныеЗаданияСервер.ИзменитьЗадание(РегЗадание.УникальныйИдентификатор, ПараметрыЗадания);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	РегЗадание = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
	
	Элемент = Элементы[ИмяЗадания];
	УстановитьТекстНадписиРегламентнойНастройки(РегЗадание, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРасписаниеЗадания(ИмяЗадания, РасписаниеРегламентногоЗадания)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	РегЗадание = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания);
	РегламентныеЗаданияСервер.ИзменитьЗадание(РегЗадание.УникальныйИдентификатор, ПараметрыЗадания);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	РегЗадание = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
	
	Элемент = Элементы[ИмяЗадания];
	УстановитьТекстНадписиРегламентнойНастройки(РегЗадание, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеРегламентногоЗадания)
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиЗаданий()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", "ОтправкаПолучениеДанныхИСМП");
	ЗаданиеОтправкаПолучениеДанныхИСМП = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
	
	РасписаниеОтправкиПолученияИСМП = ЗаданиеОтправкаПолучениеДанныхИСМП.Расписание;
	
	Элементы.ОтправкаПолучениеДанныхИСМП.Доступность = ЗаданиеОтправкаПолучениеДанныхИСМП.Использование;
	УстановитьТекстНадписиРегламентнойНастройки(ЗаданиеОтправкаПолучениеДанныхИСМП, Элементы.ОтправкаПолучениеДанныхИСМП);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", "ОчисткаПулаКодовМаркировкиИСМП");
	ЗаданиеОчисткаПулаКодовМаркировкиИСМП = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
	
	РасписаниеОчисткиПулаКодовИСМП = ЗаданиеОтправкаПолучениеДанныхИСМП.Расписание;
	
	Элементы.ОчисткаПулаКодовМаркировкиИСМП.Доступность = ЗаданиеОчисткаПулаКодовМаркировкиИСМП.Использование;
	УстановитьТекстНадписиРегламентнойНастройки(ЗаданиеОчисткаПулаКодовМаркировкиИСМП, Элементы.ОчисткаПулаКодовМаркировкиИСМП);
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьТекстНадписиРегламентнойНастройки(Задание, Элемент)
	
	Перем ТекстРасписания, РасписаниеАктивно;
	
	ИнтеграцияИС.ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройки(Задание, ТекстРасписания, РасписаниеАктивно);
	Элемент.Заголовок = ТекстРасписания;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если ОбновлятьИнтерфейс Тогда
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
		ОбновитьИнтерфейс = Истина;
	КонецЕсли;
	
	Если Результат <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	Результат = Новый Структура;
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат;
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		СобытияФормИСПереопределяемый.ОбновитьФормуНастройкиПриЗаписиПодчиненныхКонстант(ЭтотОбъект, КонстантаИмя, КонстантаЗначение);
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = Элементы.СписокМаркируемаяПродукция.Имя Тогда
		ЗначениеВестиУчетМаркируемойПродукцииИСМП = Ложь;
		Для Каждого СтрокаВидПродукции Из СписокМаркируемаяПродукция Цикл
			Если СтрокаВидПродукции.ВестиУчетПродукции Тогда
				ЗначениеВестиУчетМаркируемойПродукцииИСМП = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеВестиУчетМаркируемойПродукцииИСМП <> Константы.ВестиУчетМаркируемойПродукцииИСМП.Получить() Тогда
			Константы.ВестиУчетМаркируемойПродукцииИСМП.Установить(ЗначениеВестиУчетМаркируемойПродукцииИСМП);
		КонецЕсли;
		Если Не ЗначениеВестиУчетМаркируемойПродукцииИСМП Тогда
			ИзменитьИспользованиеЗадания("ОтправкаПолучениеДанныхИСМП", Ложь);
			НаборКонстант.ИспользоватьАвтоматическуюОтправкуПолучениеДанныхИСМП = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если КонстантаИмя = "ИспользоватьАвтоматическуюОтправкуПолучениеДанныхИСМП" Тогда
		ИзменитьИспользованиеЗадания("ОтправкаПолучениеДанныхИСМП", НаборКонстант.ИспользоватьАвтоматическуюОтправкуПолучениеДанныхИСМП);
	КонецЕсли;
	
	Если КонстантаИмя = "СрокХраненияИспользованныхКодовМаркировки" Тогда
		ИзменитьИспользованиеЗадания("ОчисткаПулаКодовМаркировкиИСМП", НаборКонстант.СрокХраненияИспользованныхКодовМаркировки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	ВестиУчетМаркируемойПродукцииИСМП = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП");
	Элементы.ГруппаКонтрольСтатусовКодовМаркировки.Доступность = ВестиУчетМаркируемойПродукцииИСМП;
	
	Элементы.ГруппаНастройкиСУЗ.Доступность                 = ВестиУчетМаркируемойПродукцииИСМП;
	Элементы.ГруппаНастройкиОбмена.Доступность              = ВестиУчетМаркируемойПродукцииИСМП;
	Элементы.ГруппаНастройкиРегламентныхЗаданий.Доступность = ВестиУчетМаркируемойПродукцииИСМП;
	
	Элементы.СрокХраненияИспользованныхКодовМаркировки.Доступность = УдалятьКодыМаркировкиИзПула И ВестиУчетМаркируемойПродукцииИСМП;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Элементы.ГруппаНастройкиРегламентныхЗаданий.Видимость = Ложь;
	Иначе
		
		Элементы.ГруппаНастройкиРегламентногоЗаданияОбмена.ТолькоПросмотр = (Не РедактированиеАвтоматическойОтправкиДанных);
		Элементы.ГруппаНастройкиРегламентногоЗаданияОчисткиПула.ТолькоПросмотр = (Не РедактированиеСрокаХранения);
		
		УстановитьНастройкиЗаданий();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти