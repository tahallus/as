#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НачалоДня(Дата) <> НачалоДня(ТекущаяДатаСеанса()) Тогда
		ТекстОшибки = НСтр("ru = 'Не допускается коррекция датой, отличной от текущей'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "Дата",, Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КассаККМ)  Тогда
		
		СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
		
		ОтчетОРозничныхПродажах = СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах;
		
		ТекстОшибки = НСтр("ru = 'Кассовая смена не открыта'");
		Если НЕ РозничныеПродажиСервер.СменаОткрыта(ОтчетОРозничныхПродажах, Дата, ТекстОшибки) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "КассаККМ",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Оплата.Итог("Сумма") <> ПозицииЧека.Итог("СуммаСоСкидками") Тогда
		ТекстОшибки = НСтр("ru = 'Сумма оплат не равна сумме позиций чека'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "Оплата",, Отказ);
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти

#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьНаОсновании(Основание, Отказ) Экспорт
	
	ФискальнаяОперация = ДанныеФискальнойОперации(Основание);
	
	Если ФискальнаяОперация = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Нет сохраненной фискальной операции для документа %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОснование);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
		Отказ = Истина;
		Возврат;
		
	ИначеЕсли ФискальнаяОперация.ЕстьКорректирующийДокумент Тогда
		
		ТекстСообщения = НСтр("ru = 'По данному документу ранее была создана корректировка документом %1. 
									|Создание повторной корректировки не возможно.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
																				ФискальнаяОперация.ПредставлениеКорректирующегоДокумента);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
		Отказ = Истина;
		Возврат;
		
	Иначе
		
		Если Основание <> ФискальнаяОперация.ДокументОснование Тогда
			
			ТекстСообщения = НСтр("ru = 'Данные заполнены из документа %1, т.к. он является последним корректирующим документом для документа расчетов %2.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
																						ФискальнаяОперация.ДокументОснование, 
																						ФискальнаяОперация.ДокументРасчетов);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ФискальнаяОперация);
	
	Дата							= ТекущаяДатаСеанса();
	Ответственный 					= Пользователи.ТекущийПользователь();
	ДатаКоррекции 					= ФискальнаяОперация.ДатаРасчета;
	ДополнительныйРеквизит 			= ФискальнаяОперация.ФискальныйПризнак;
	ДанныеXMLКорректируемогоЧека	= ФискальнаяОперация.ДанныеXML.Получить();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		//КассаККМ = Справочники.КассыККМ.КассаПоУмолчанию(Организация, СтруктурнаяЕдиница);
		КассаККМ = Справочники.КассыККМ.ПолучитьКассуККМПоУмолчанию(Перечисления.ТипыКассККМ.ФискальныйРегистратор);
	КонецЕсли;
	
	ОбщиеПараметры = МенеджерОборудованияВызовСервера.ЗагрузитьДанныеФискализацииИзXML(ДанныеXMLКорректируемогоЧека);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОбщиеПараметры, "СистемаНалогообложения,
															|ТипРасчета,
															|Кассир,
															|КассирИНН");
	
	СНОКорректируемогоДокумента = ОбщиеПараметры.СистемаНалогообложения;
	Контрагент 					= ОбщиеПараметры.Получатель;
	КонтрагентИНН 				= ОбщиеПараметры.ПолучательИНН;
	ПризнакАгента 				= ОбщиеПараметры.ПризнакАгента;
	
	// Позиции чека
	
	// При создании Чека коррекции на основании Чека коррекции НеприменениеККТ, ТЧ ПозицииЧека
	// заполнятся из документа основания, т.к. XML в формате 1.05 не содержит достаточной информации 
	// для формирования Чека коррекции.
	Если ТипЗнч(ФискальнаяОперация.ДокументОснование) = Тип("ДокументСсылка.ЧекККМКоррекции") Тогда
		
		НеприменениеККТ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФискальнаяОперация.ДокументОснование, 
																	"НеприменениеККТ");
		
		Если НеприменениеККТ Тогда
			ЗаполнитьПозицииЧекаПоОснованию(ФискальнаяОперация.ДокументОснование)
		Иначе
			ЗаполнитьПозицииЧекаИзXML(ОбщиеПараметры.ПозицииЧека);
		КонецЕсли;
		
	Иначе
		
		ЗаполнитьПозицииЧекаИзXML(ОбщиеПараметры.ПозицииЧека);
		
	КонецЕсли;
	
	
	// Оплаты
	Для Каждого СтрокаОплаты Из ОбщиеПараметры.ТаблицаОплат Цикл
		
		НоваяСтрока = Оплата.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплаты);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеФискальнойОперации(Основание)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЧекККМКоррекции") Тогда
		
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "НеприменениеККТ, ДокументРасчетов");
		
		Если РеквизитыОснования.НеприменениеККТ Тогда
			ДокументРасчетов = Основание;
		Иначе
			ДокументРасчетов = РеквизитыОснования.ДокументРасчетов;
		КонецЕсли;
		
	Иначе
		
		ДокументРасчетов = Основание;
		
	КонецЕсли;
	
	// Последняя фискальная операция по документу расчетов и дата расчетов
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФискальныеОперации.Дата КАК Дата,
	|	ФискальныеОперации.ДокументОснование КАК ДокументОснование,
	|	ФискальныеОперации.ФискальныйПризнак КАК ФискальныйПризнак,
	|	ФискальныеОперации.ТипРасчета КАК ТипРасчета,
	|	ФискальныеОперации.ДанныеXML КАК ДанныеXML
	|ПОМЕСТИТЬ ВТ_ФискальныеДанныеПоДокументуРасчетов
	|ИЗ
	|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|ГДЕ
	|	ФискальныеОперации.ДокументОснование = &ДокументРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ФискальныеДанныеПодокументуРасчетов.Дата КАК Дата,
	|	ВТ_ФискальныеДанныеПодокументуРасчетов.ДокументОснование КАК ДокументОснование,
	|	NULL КАК КорректируемыйДокумент,
	|	ВТ_ФискальныеДанныеПодокументуРасчетов.ФискальныйПризнак КАК ФискальныйПризнак,
	|	NULL КАК ДополнительныйРеквизит,
	|	ВТ_ФискальныеДанныеПодокументуРасчетов.ТипРасчета КАК ТипРасчета,
	|	ВТ_ФискальныеДанныеПодокументуРасчетов.ДанныеXML КАК ДанныеXML
	|ПОМЕСТИТЬ ВТ_ФискальныеОперацииПоДокументуРасчетов
	|ИЗ
	|	ВТ_ФискальныеДанныеПоДокументуРасчетов КАК ВТ_ФискальныеДанныеПодокументуРасчетов
	|ГДЕ
	|	ВТ_ФискальныеДанныеПодокументуРасчетов.ДокументОснование = &ДокументРасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФискальныеОперации.Дата,
	|	ФискальныеОперации.ДокументОснование,
	|	ФискальныеОперации.КорректируемыйДокумент,
	|	ФискальныеОперации.ФискальныйПризнак,
	|	ФискальныеОперации.ДополнительныйРеквизит,
	|	ФискальныеОперации.ТипРасчета,
	|	ФискальныеОперации.ДанныеXML
	|ИЗ
	|	ВТ_ФискальныеДанныеПоДокументуРасчетов КАК ВТ_ФискальныеДанныеПоДокументуРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМКоррекции КАК ЧекКоррекции
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|			ПО ЧекКоррекции.Ссылка = ФискальныеОперации.ДокументОснование
	|		ПО (ЧекКоррекции.ТипРасчета = ВТ_ФискальныеДанныеПоДокументуРасчетов.ТипРасчета)
	|ГДЕ
	|	ЧекКоррекции.Проведен
	|	И ЧекКоррекции.ПробитЧек
	|	И ЧекКоррекции.ДокументРасчетов = &ДокументРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_ФискальныеОперацииПоДокументуРасчетов.ДокументОснование КАК ДокументОснование,
	|	ВТ_ФискальныеОперацииПоДокументуРасчетов.ФискальныйПризнак КАК ФискальныйПризнак,
	|	ВТ_ФискальныеОперацииПоДокументуРасчетов.ТипРасчета КАК ТипРасчета,
	|	ВТ_ФискальныеОперацииПоДокументуРасчетов.ДанныеXML КАК ДанныеXML,
	|	НЕ СкорректированныеФискальныеОперации.СкорректированныеДокумент ЕСТЬ NULL КАК ЕстьКорректирующийДокумент,
	|	СкорректированныеФискальныеОперации.ПредставлениеКорректирующегоДокумента КАК ПредставлениеКорректирующегоДокумента
	|ИЗ
	|	ВТ_ФискальныеОперацииПоДокументуРасчетов КАК ВТ_ФискальныеОперацииПоДокументуРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкорректированныеФискальныеОперации КАК СкорректированныеФискальныеОперации
	|		ПО ВТ_ФискальныеОперацииПоДокументуРасчетов.ДокументОснование = СкорректированныеФискальныеОперации.СкорректированныеДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ФискальныеОперацииПоДокументуРасчетов.Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ФискальныеДанныеПоДокументуРасчетов.Дата КАК ДатаРасчетов
	|ИЗ
	|	ВТ_ФискальныеДанныеПоДокументуРасчетов КАК ВТ_ФискальныеДанныеПоДокументуРасчетов";
	
	Запрос.УстановитьПараметр("ДокументРасчетов", ДокументРасчетов);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПоследняяФискальнаяОперация 	= РезультатЗапроса[2].Выбрать();
	ВыборкаДатаРасчетов 				= РезультатЗапроса[3].Выбрать();
	
	Если ВыборкаПоследняяФискальнаяОперация.Следующий() Тогда
		
		ФискальнаяОперация = Новый Структура;
		ФискальнаяОперация.Вставить("ФискальныйПризнак");
		ФискальнаяОперация.Вставить("ДокументОснование");
		ФискальнаяОперация.Вставить("Организация");
		ФискальнаяОперация.Вставить("СтруктурнаяЕдиница");
		ФискальнаяОперация.Вставить("ТипРасчета");
		ФискальнаяОперация.Вставить("ДанныеXML");
		ФискальнаяОперация.Вставить("ЕстьКорректирующийДокумент");
		ФискальнаяОперация.Вставить("ПредставлениеКорректирующегоДокумента");
		
		ЗаполнитьЗначенияСвойств(ФискальнаяОперация, ВыборкаПоследняяФискальнаяОперация);
		
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("Организация");
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СтруктурнаяЕдиница", ФискальнаяОперация.ДокументОснование.Метаданные()) Тогда
			СтруктураРеквизитов.Вставить("СтруктурнаяЕдиница");
		КонецЕсли;
		
		РеквизитыДокументаОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФискальнаяОперация.ДокументОснование,
																				СтруктураРеквизитов);
		
		ЗаполнитьЗначенияСвойств(ФискальнаяОперация, РеквизитыДокументаОснования);
		
		ВыборкаДатаРасчетов.Следующий();
		ФискальнаяОперация.Вставить("ДатаРасчета", 		ВыборкаДатаРасчетов.ДатаРасчетов);
		ФискальнаяОперация.Вставить("ДокументРасчетов", ДокументРасчетов);
		
		Возврат ФискальнаяОперация
		
	Иначе
		
		Возврат Неопределено
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьПозицииЧекаИзXML(ПозицииЧекаXML)

	Для Каждого ПозицияЧека Из ПозицииЧекаXML Цикл
		
		НоваяСтрока = ПозицииЧека.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПозицияЧека);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПозицияЧека.ДанныеКодаТоварнойНоменклатуры);
		
		НоваяСтрока.ОператорПереводаАдрес 			= ПозицияЧека.ДанныеАгента.ОператорПеревода.Адрес;
		НоваяСтрока.ОператорПереводаИНН 			= ПозицияЧека.ДанныеАгента.ОператорПеревода.ИНН;
		НоваяСтрока.ОператорПереводаНаименование 	= ПозицияЧека.ДанныеАгента.ОператорПеревода.Наименование;
		НоваяСтрока.ОператорПереводаТелефон 		= ПозицияЧека.ДанныеАгента.ОператорПеревода.Телефон;
		
		НоваяСтрока.ОператорПоПриемуПлатежейТелефон	= ПозицияЧека.ДанныеАгента.ОператорПоПриемуПлатежей.Телефон;
		
		НоваяСтрока.ПлатежныйАгентОперация 			= ПозицияЧека.ДанныеАгента.ПлатежныйАгент.Операция;
		НоваяСтрока.ПлатежныйАгентТелефон 			= ПозицияЧека.ДанныеАгента.ПлатежныйАгент.Телефон;
		
		НоваяСтрока.ДанныеПоставщикаИНН 			= ПозицияЧека.ДанныеПоставщика.ИНН;
		НоваяСтрока.ДанныеПоставщикаНаименование 	= ПозицияЧека.ДанныеПоставщика.Наименование;
		НоваяСтрока.ДанныеПоставщикаТелефон 		= ПозицияЧека.ДанныеПоставщика.Телефон;
		
		НоваяСтрока.НаименованиеПредметаРасчета 	= ПозицияЧека.Наименование;
		НоваяСтрока.СуммаСоСкидками 				= ПозицияЧека.Сумма;
		
		Если ПозицияЧека.СтавкаНДС = 0 Тогда
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.Нулевая);
		ИначеЕсли ПозицияЧека.СтавкаНДС = 10 ИЛИ ПозицияЧека.СтавкаНДС = 110 Тогда
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.Пониженная);
		ИначеЕсли ПозицияЧека.СтавкаНДС = 18 ИЛИ ПозицияЧека.СтавкаНДС = 118 Тогда
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.Общая);
		ИначеЕсли ПозицияЧека.СтавкаНДС = 20 ИЛИ ПозицияЧека.СтавкаНДС = 120 Тогда
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.Общая);
		Иначе
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.БезНДС);
		КонецЕсли;
		
		Если НоваяСтрока.СуммаНДС = 0 И ЗначениеЗаполнено(ПозицияЧека.СтавкаНДС) Тогда
			ТекПроцентНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС) / 100;
			НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаСоСкидками * ТекПроцентНДС / (ТекПроцентНДС + 1);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПозицииЧекаПоОснованию(Основание)

	Для Каждого ПозицияЧека Из Основание.ПозицииЧека Цикл
		
		НоваяСтрока = ПозицииЧека.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПозицияЧека);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
	
#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли