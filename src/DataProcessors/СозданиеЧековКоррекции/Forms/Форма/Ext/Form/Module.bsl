#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ВыборСтраныПроихождения (РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения <> Неопределено Тогда
		
		ТекущаяСтрока = Объект.ПозицииЧека.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		
		Если ТекущаяСтрока <> Неопределено Тогда
			
			ТекущаяСтрока.КодСтраныПроисхожденияТовара = ЗначениеРеквизитаОбъекта(РезультатВыполнения, "Код");
			Элементы.ПозицииЧека.ЗакончитьРедактированиеСтроки(Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекВыполнитьЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ЗаписатьЧекКоррекцииПослеПробития(РезультатВыполнения.ВыходныеПараметры);
		
		// Если чек сторно пробился, то пробивается скорректированный чек
		ПробитыйДокумент = РезультатВыполнения.ВыходныеПараметры[8].ДокументОснование;
		
		Если ПробитыйДокумент = Объект.ЧекСторно  Тогда
			
			ЧекСторноСтатус = НСтр("ru = 'Проведён и пробит'");
			
			Если ДополнительныеПараметры.ПробиватьСледующийЧек Тогда
			
				ПробитьЧекВыполнить(Объект.ЧекСкорректированный, Ложь);
			
			КонецЕсли;
			
		ИначеЕсли ПробитыйДокумент = Объект.ЧекСкорректированный Тогда
			
			ЧекСкорректированныйСтатус = НСтр("ru = 'Проведён и пробит'");
			
			Если ДополнительныеПараметры.ПробиватьСледующийЧек Тогда
			
				ПробитьЧекВыполнить(Объект.ЧекСторно, Ложь);
			
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка:'");
		ТекстСообщения = ТекстСообщения + Символы.ПС + РезультатВыполнения.ОписаниеОшибки;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеККМЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	ПоддерживаемыеСНОКассойККМ.Очистить();
	
	Если РезультатВыполнения.Результат Тогда
		
		СтрокаСНО 		= РезультатВыполнения.ВыходныеПараметры.КодыСистемыНалогообложения;
		МассивКодовСНО 	= СтрРазделить(СтрокаСНО, ",");
		
		Для Каждого КодСНО Из МассивКодовСНО Цикл
			
			Попытка
				КодСНОЧисло = Число(КодСНО);
				ПоддерживаемыеСНОКассойККМ.Добавить(МенеджерОборудованияКлиентСервер.СистемаНалогообложенияККТПоКоду(КодСНОЧисло));
			Исключение
			КонецПопытки;
		
		КонецЦикла;
		
		Если ДополнительныеПараметры.ВыполнитьПроверку Тогда
		
			ПроверитьКассуККМ(ДополнительныеПараметры.ВыводитьПредупреждение);
		
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Не удалось получить список систем налогообложения поддерживаемых кассой ККМ:'");
		ТекстСообщения = ТекстСообщения + Символы.ПС + РезультатВыполнения.ОписаниеОшибки;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Объект.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ПустаяСсылка");
		ПриИзмененииКассыККМ();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НеСоответствиеСНОВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Объект.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Основание = Неопределено;
	
	Параметры.Свойство("ДокументОснование", Основание);
	Если Основание = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Возможен только ввод на основании. Самостоятельное открытие формы не предусмотрено'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.ЗаполнитьНаОсновании(Основание, Отказ);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ЗаполнитьВсеСНО();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеВидомостьюИДоступностью();
	ПриИзмененииКассыККМ(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписьЧекаКоррекции" И
		(Источник = Объект.ЧекСторно ИЛИ
		 Источник = Объект.ЧекСкорректированный) Тогда
		
		Статус = НСтр("ru = 'Записан, не пробит'");
		
		Если Параметр.ПробитЧек Тогда
			Статус = НСтр("ru = 'Проведён и пробит'");
		ИначеЕсли Параметр.Проведен Тогда
			Статус = НСтр("ru = 'Проведён, но не пробит'");
		КонецЕсли;
		
		Если Источник = Объект.ЧекСторно Тогда
			ЧекСторноСтатус = Статус;
		Иначе
			ЧекСкорректированныйСтатус = Статус;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	Объект.КассаККМ = КассаПоУмолчанию();
	ПриИзмененииКассыККМ(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	ПриИзмененииКассыККМ();
	
КонецПроцедуры

&НаКлиенте
Процедура СистемаНалогообложенияПриИзменении(Элемент)
	
	Если Объект.СНОКорректируемогоДокумента <> Объект.СистемаНалогообложения Тогда
		
		Оповещение = Новый ОписаниеОповещения("НеСоответствиеСНОВопрос", ЭтотОбъект);
		
		ТекстСообщения = НСтр("ru = 'Выбранная система налогообложения не соответствует системе налогообложения ""%1"" корректируемого документа. Продолжить?'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Объект.СНОКорректируемогоДокумента);
		
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипКоррекцииПриИзменении(Элемент)
	
	УправлениеВидомостьюИДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ТипЗнч(Объект.Контрагент) <> Тип("Строка") И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.КонтрагентИНН = ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ИНН");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПозицииЧека

&НаКлиенте
Процедура ПозицииЧекаНаименованиеПредметаРасчетаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПозицииЧека.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено 
		И ТипЗнч(ТекущаяСтрока.НаименованиеПредметаРасчета) = Тип("СправочникСсылка.Номенклатура")
		И ЗначениеЗаполнено(ТекущаяСтрока.НаименованиеПредметаРасчета) Тогда
		
		РеквизитыНоменклатуры = РеквизитыПредметаРасчета(ТекущаяСтрока.НаименованиеПредметаРасчета, Объект.Дата);
		
		ТекущаяСтрока.ЕдиницаИзмерения 	= Строка(РеквизитыНоменклатуры.ЕдиницаИзмерения);
		ТекущаяСтрока.СтавкаНДС 		= РеквизитыНоменклатуры.СтавкаНДС;
		
		ПересчитатьСуммуНДССтроки(ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыПредметаРасчета(НаименованиеПредметаРасчета, ДатаОбработки = Неопределено)
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитов.Вставить("ВидСтавкиНДС");
	
	РеквизитыредметаРасчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НаименованиеПредметаРасчета, СтруктураРеквизитов);
	
	Если ЗначениеЗаполнено(РеквизитыредметаРасчета.ВидСтавкиНДС) Тогда
		СтруктураРеквизитов.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(РеквизитыредметаРасчета.ВидСтавкиНДС, ?(ЗначениеЗаполнено(ДатаОбработки), ДатаОбработки, ТекущаяДатаСеанса())));
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

&НаКлиенте
Процедура ПозицииЧекаКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПозицииЧека.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ПересчитатьСуммуСтроки(ТекущаяСтрока);
		ПересчитатьСуммуНДССтроки(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицииЧекаЦенаСоСкидкамиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПозицииЧека.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ПересчитатьСуммуСтроки(ТекущаяСтрока);
		ПересчитатьСуммуНДССтроки(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицииЧекаСуммаСоСкидкамиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПозицииЧека.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущаяСтрока.ЦенаСоСкидками = ?(ТекущаяСтрока.Количество = 0, ТекущаяСтрока.СуммаСоСкидками, ТекущаяСтрока.СуммаСоСкидками / ТекущаяСтрока.Количество);
		ПересчитатьСуммуНДССтроки(ТекущаяСтрока);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПозицииЧекаСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПозицииЧека.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ПересчитатьСуммуНДССтроки(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицииЧекаСуммаСкидокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПозицииЧека.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущаяСтрока.ЦенаСоСкидками = ?(ТекущаяСтрока.Количество = 0, ТекущаяСтрока.СуммаСоСкидками, ТекущаяСтрока.СуммаСоСкидками / ТекущаяСтрока.Количество);
		ПересчитатьСуммуНДССтроки(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицииЧекаПризнакАгентаПоПредметуРасчетаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПозицииЧека.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено И НЕ ЗначениеЗаполнено(ТекущаяСтрока.ПризнакАгентаПоПредметуРасчета) Тогда
		ТекущаяСтрока.ПлатежныйАгентОперация 			= "";
		ТекущаяСтрока.ПлатежныйАгентТелефон 			= "";
		ТекущаяСтрока.ОператорПоПриемуПлатежейТелефон 	= "";
		ТекущаяСтрока.ОператорПереводаНаименование 		= "";
		ТекущаяСтрока.ОператорПереводаИНН 				= "";
		ТекущаяСтрока.ОператорПереводаАдрес 			= "";
		ТекущаяСтрока.ОператорПереводаТелефон 			= "";
		ТекущаяСтрока.ДанныеПоставщикаНаименование 		= "";
		ТекущаяСтрока.ДанныеПоставщикаИНН 				= "";
		ТекущаяСтрока.ДанныеПоставщикаТелефон 			= "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицииЧекаКодСтраныПроисхожденияТовараНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторСтроки = Элементы.ПозицииЧека.ТекущиеДанные.ПолучитьИдентификатор();
	
	ДополнительныеПараметры = Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки);
	ОбработчикОповещения 	= Новый ОписаниеОповещения("ВыборСтраныПроихождения", ЭтотОбъект, ДополнительныеПараметры);

	ПоказатьВводЗначения(ОбработчикОповещения,,"Выбор страны проихождения товара", Тип("СправочникСсылка.СтраныМира")); 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОплата

&НаКлиенте
Процедура ОплатаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СуммаПродажи = Объект.ПозицииЧека.Итог("СуммаСоСкидками");
	СуммаОплат   = Объект.Оплата.Итог("Сумма");
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущаяСумма  = ТекущаяСтрока.Сумма;
		ОплатаБезТекущейСтроки = СуммаОплат - ТекущаяСумма;
		ОстатокОплаты = СуммаПродажи - ОплатаБезТекущейСтроки;
	КонецЕсли;
	
	Элементы.ОплатаСумма.СписокВыбора.Очистить();
	
	Если ОстатокОплаты > 0 Тогда
		
		Элементы.ОплатаСумма.СписокВыбора.Добавить(ОстатокОплаты, Формат(ОстатокОплаты, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧН=; ЧГ=3,0"));
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьЧеки(Команда)
	
	Результат = СоздатьЧекиСервер();
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Элементы.СтраницаДанныеДляКоррекции.ТолькоПросмотр 	= Истина;
		Модифицированность 									= Ложь;
		
		Если ЗначениеЗаполнено(Результат.ЧекКоррекцииСторно) Тогда
			Объект.ЧекСторно 			= Результат.ЧекКоррекцииСторно;
			Объект.ЧекСторноПроведен 	= Результат.ЧекКоррекцииСторноПроведен;
			
			Если Объект.ЧекСторноПроведен Тогда
				ЧекСторноСтатус = НСтр("ru = 'Проведён, но не пробит'");
			Иначе
				ЧекСторноСтатус = НСтр("ru = 'Записан, не пробит'");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат.ЧекСкорректированный) Тогда
			Объект.ЧекСкорректированный			= Результат.ЧекСкорректированный;
			Объект.ЧекСкорректированныйПроведен = Результат.ЧекСкорректированныйПроведен;
			
			Если Объект.ЧекСторноПроведен Тогда
				ЧекСкорректированныйСтатус = НСтр("ru = 'Проведён, но не пробит'");
			Иначе
				ЧекСкорректированныйСтатус = НСтр("ru = 'Записан, не пробит'");
			КонецЕсли;

		КонецЕсли;
		
		// Пробиваем по принципу: сначала приход денег в кассу, потом расход
		Если Объект.ЧекСторноПроведен И Объект.ЧекСкорректированныйПроведен Тогда
			
			Если Объект.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств") ИЛИ
				Объект.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств") Тогда
				
				ПробитьЧекВыполнить(Объект.ЧекСкорректированный);
				
			Иначе
				
				ПробитьЧекВыполнить(Объект.ЧекСторно);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат.ЧекКоррекцииСторно) ИЛИ ЗначениеЗаполнено(Результат.ЧекСкорректированный) Тогда
			ОповеститьОбИзменении(Тип("ДокументСсылка.ЧекККМКоррекции"));
		КонецЕсли;
		
		ЭтотОбъект.ТекущийЭлемент = Элементы.СтраницаСозданныеДокументы;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПересчитатьСуммуСтроки(ТекущаяСтрока)
	
	ТекущаяСтрока.СуммаСоСкидками = ТекущаяСтрока.Количество * ТекущаяСтрока.ЦенаСоСкидками;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуНДССтроки(ТекущаяСтрока)
	
	ТекПроцентНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(ТекущаяСтрока.СтавкаНДС) / 100;
	ТекущаяСтрока.СуммаНДС = ТекущаяСтрока.СуммаСоСкидками * ТекПроцентНДС / (ТекПроцентНДС + 1);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидомостьюИДоступностью()
	
	Если Объект.ТипКоррекции = 1 Тогда
		Элементы.НомерПредписания.Видимость = Истина;
	Иначе 
		Элементы.НомерПредписания.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьЧекиСервер()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	Иначе
		Возврат Обработки.СозданиеЧековКоррекции.СоздатьЧекиКоррекции(Объект);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПробитьЧекВыполнить(ЧекКоррекции, ПробиватьСледующийЧек = Истина)
	
	ИдентификаторУстройства = Неопределено;
	ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ЧекКоррекции, ИдентификаторУстройства);
	
	Если ТипЗнч(ОбщиеПараметры) = Тип("Структура") Тогда
		
		ПараметрыОповещения = Новый Структура("ПробиватьСледующийЧек", ПробиватьСледующийЧек);
		Оповещение = Новый ОписаниеОповещения("ПробитьЧекВыполнитьЗавершение", ЭтотОбъект, ПараметрыОповещения);
		МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(Оповещение, ЭтотОбъект.УникальныйИдентификатор, ОбщиеПараметры, ИдентификаторУстройства);
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодготовитьДанныеДляПробитияЧека(ЧекКоррекции, ИдентификаторУстройства)
	
	Возврат Документы.ЧекККМКоррекции.ПодготовитьДанныеДляПробитияЧека(ЧекКоррекции, ИдентификаторУстройства);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьЧекКоррекцииПослеПробития(ВыходныеПараметры)
	
	ЧекКоррекцииОбъект = ВыходныеПараметры[8].ДокументОснование.ПолучитьОбъект();
	
	ЧекКоррекцииОбъект.НомерСмены = ВыходныеПараметры[0];
	
	Если ЗначениеЗаполнено(ВыходныеПараметры[1]) Тогда
		ЧекКоррекцииОбъект.НомерЧека = ВыходныеПараметры[1];
	КонецЕсли;
	
	ЧекКоррекцииОбъект.ПробитЧек = Истина;
	
	ЧекКоррекцииОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКассыККМ(ВыводитьПредупреждение = Истина)
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) Тогда
		
		ЗаполнитьПоддерживаемыеСНО(ВыводитьПредупреждение, Истина);
		
	Иначе
		
		ПоддерживаемыеСНОКассойККМ = ВсеСНО.Скопировать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоддерживаемыеСНО(ВыводитьПредупреждение, ВыполнитьПроверку)
	
	СтруктураРеквизитов = Новый Структура("ПодключаемоеОборудование");
	РеквизитыКассыККМ = ЗначенияРеквизитовОбъекта(Объект.КассаККМ, СтруктураРеквизитов);

	ИдентификаторУстройства 	= РеквизитыКассыККМ.ПодключаемоеОборудование;

		ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("ВыводитьПредупреждение", 	ВыводитьПредупреждение);
	ПараметрыОповещения.Вставить("ВыполнитьПроверку", 		ВыполнитьПроверку);
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьДанныеККМЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	МенеджерОборудованияКлиент.НачатьПолучениеПараметровФискальногоУстройства(
		Оповещение, 
		УникальныйИдентификатор, 
		ИдентификаторУстройства
	);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьКассуККМ(ВыводитьПредупреждение)
	
	Если ПоддерживаемыеСНОКассойККМ.Количество() > 0 И ПоддерживаемыеСНОКассойККМ.НайтиПоЗначению(Объект.СНОКорректируемогоДокумента) = Неопределено Тогда
		
		Если ВыводитьПредупреждение Тогда
			
			ТекстСообщения = НСтр("ru = 'Выбранная касса ККМ не поддерживает систему налогообложения ""%1"" корректируемого документа. Выберите другую кассу ККМ.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Объект.СНОКорректируемогоДокумента);
			
			ПоказатьПредупреждение(, ТекстСообщения);
			
		КонецЕсли;
		
		Объект.КассаККМ = ПредопределенноеЗначение("Справочник.КассыККМ.ПустаяСсылка");
		
		ПриИзмененииКассыККМ();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СистемаНалогообложения) И
		Объект.СистемаНалогообложения <> Объект.СНОКорректируемогоДокумента И
		ПоддерживаемыеСНОКассойККМ.НайтиПоЗначению(Объект.СистемаНалогообложения) = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Выбранная касса ККМ не поддерживает систему налогообложения ""%1"". Значение очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Объект.СистемаНалогообложения);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.СистемаНалогообложения");
		
		Объект.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ПустаяСсылка");
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВсеСНО()
	
	ВсеСНО.Очистить();
	
	Для каждого ЭлементМетаданных Из Метаданные.Перечисления.ТипыСистемНалогообложенияККТ.ЗначенияПеречисления Цикл
		ВсеСНО.Добавить(Перечисления.ТипыСистемНалогообложенияККТ[ЭлементМетаданных.Имя])
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция КассаПоУмолчанию()
	
	Возврат Справочники.КассыККМ.ПолучитьКассуККМПоУмолчанию(Перечисления.ТипыКассККМ.ФискальныйРегистратор);
	
КонецФункции

&НаКлиенте
Процедура СистемаНалогообложенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.СистемаНалогообложения.СписокВыбора.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПоддерживаемыеСНОКассойККМ;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции 

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
	
КонецФункции 

#КонецОбласти