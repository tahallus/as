
#Область ОписаниеПеременных

#Область ОбщиеПеременныеМодуля

&НаКлиенте
Перем мЗаписьФормыОсуществлена;

#КонецОбласти

#КонецОбласти 

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновитьПараметрыРаботыПрограммы();
	ЗаполнитьПараметрыРаботыФормы();
	
	Если НЕ УчетПоНесколькимОрганизациям Тогда
		Организация = Справочники.Организации.ОсновнаяОрганизация;
	ИначеЕсли ЗначениеЗаполнено(Компания) Тогда 
		Организация = Компания;
	Иначе
		Если Параметры.Свойство("ВводОстатков") Тогда
			Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ВводОстатков, "Организация");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		КонецЕсли; 
	КонецЕсли; 
	
	УстановитьВидимостьКурсов();
	ЗагрузитьВводыОстатков();
	
	Если НЕ ЗначениеЗаполнено(ДатаОстатков) Тогда
		ДатаОстатков = ТекущаяДата();
	КонецЕсли;
	
	УстановитьВидимостьИДоступность();
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	Настройки = Новый Структура("Запасы,ЗапасыПринятые,ЗапасыПереданные,ЗапасыВРазрезеГТД,РасчетыСПоставщиками,РасчетыСПокупателями,РасчетыСПерсоналом,ВнеоборотныеАктивы");
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.Запасы, Настройки.Запасы, ЭтотОбъект, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.ЗапасыПринятые, Настройки.ЗапасыПринятые, ЭтотОбъект, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.ЗапасыПереданные, Настройки.ЗапасыПереданные, ЭтотОбъект, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.ЗапасыВРазрезеГТД, Настройки.ЗапасыВРазрезеГТД, ЭтотОбъект, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.РасчетыСПоставщиками, Настройки.РасчетыСПоставщиками, ЭтотОбъект, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.РасчетыСПокупателями, Настройки.РасчетыСПокупателями, ЭтотОбъект, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.РасчетыСПерсоналом, Настройки.РасчетыСПерсоналом, ЭтотОбъект, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.ВнеоборотныеАктивы, Настройки.ВнеоборотныеАктивы, ЭтотОбъект, Ложь);
	НастройкиЗагрузкиДанных = Новый ФиксированнаяСтруктура(Настройки);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	ТекущийНомерСтраницы = 0;
	Если Параметры.Свойство("РазделУчета") Тогда
		Если Параметры.РазделУчета="Деньги" Тогда
			ТекущийНомерСтраницы = 1;
		ИначеЕсли Параметры.РазделУчета="Запасы" Тогда
			ТекущийНомерСтраницы = 2;
		ИначеЕсли Параметры.РазделУчета="Поставщики" Тогда
			ТекущийНомерСтраницы = 3;
			Элементы.СтраницыРасчеты.ТекущаяСтраница = Элементы.СтраницаРасчетыСПоставщиками;
		ИначеЕсли Параметры.РазделУчета="Покупатели" Тогда
			ТекущийНомерСтраницы = 3;
			Элементы.СтраницыРасчеты.ТекущаяСтраница = Элементы.СтраницаРасчетыСПокупателями;
		КонецЕсли; 
	КонецЕсли;
	
	// Серии номенклатуры
	ИспользоватьСерииНоменклатурыОстатки = СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки();
	
	// Характеристики
	ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик(ЭтаФорма);
	
	// МобильныйКлиент
	УстановитьВидимостьЭлементовДляМобильногоКлиента();
	// Конец МобильныйКлиент
	
	ПересчитатьИтогиСервер();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПерваяСтраница = 0;
	ПоследняяСтраница = 5;
	мЗаписьФормыОсуществлена = Ложь;
	
	УстановитьАктивнуюСтраницу();
	УстановитьДоступностьКнопок();
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Контрагент" Тогда
		Если ТекущийНомерСтраницы<>3 И КэшЗначений.СправочникКонтрагентовПустой Тогда
			КэшЗначений.СправочникКонтрагентовПустой = Ложь;
		КонецЕсли; 
		Если ЗначениеЗаполнено(Параметр) Тогда
			Для каждого ТекСтрока Из ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПокупателями Цикл
				Если Параметр = ТекСтрока.Контрагент Тогда
					УстановитьВидимостьРеквизитовТЧ("РасчетыСПокупателями");
					Возврат;
				КонецЕсли;
			КонецЦикла;
			Для каждого ТекСтрока Из ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПоставщиками Цикл
				Если Параметр = ТекСтрока.Контрагент Тогда
					УстановитьВидимостьРеквизитовТЧ("РасчетыСПоставщиками");
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ПослеЗаписиБанковскогоСчета" Тогда
		ЗаполнитьДаннымиПоУмолчанию("ДенежныеСредства");
		ОбновитьЭлементыФормы();
		Если НЕ ПустаяСтрока(ИмяТекущегоЭлемента) Тогда
			ТекущийЭлемент = Элементы[ИмяТекущегоЭлемента];
		КонецЕсли; 
	КонецЕсли; 
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Данные = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование	
	
	Если ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ПолучитьСерииНоменклатурыИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение)=Тип("Массив") Тогда
	    Для каждого СтруктураВалют Из ВыбранноеЗначение Цикл
			Валюта = СтруктураВалют.Валюта;
			СтрокаТабличнойЧасти = ВводНачальныхОстатковБанкИКасса.ДенежныеСредства[ТекущийИндексБанкКасса];
			НоваяСтрока = ВводНачальныхОстатковБанкИКасса.ДенежныеСредства.Добавить();
			НоваяСтрока.БанковскийСчетКасса = СтрокаТабличнойЧасти.БанковскийСчетКасса;
			НоваяСтрока.ВалютаДенежныхСредств = Валюта;
			Если НЕ УчетВалютныхОпераций Тогда
				ВключитьИспользованиеВалютныхОпераций();
			КонецЕсли; 
		КонецЦикла; 
		ОбновитьЭлементыФормы();
		Если НЕ ПустаяСтрока(ИмяТекущегоЭлемента) Тогда
			ТекущийЭлемент = Элементы[ИмяТекущегоЭлемента];
		КонецЕсли; 
	ИначеЕсли ТипЗнч(ВыбранноеЗначение)=Тип("Структура") Тогда
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.Кассы")
		ИЛИ ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.БанковскиеСчета")
		ИЛИ ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.Сотрудники") Тогда
		ПриДобавленииСчетаКассыПодотчетникаСервер(ВыбранноеЗначение);
		Если НЕ ПустаяСтрока(ИмяТекущегоЭлемента) Тогда
			ТекущийЭлемент = Элементы[ИмяТекущегоЭлемента];
		КонецЕсли; 
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстЗавершения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ мЗаписьФормыОсуществлена
		И Модифицированность Тогда
		
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		Текст = НСтр("ru='Сохранить внесенные изменения?'");
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Отказ = Ложь;
		ВыполнитьПроверкиПриПереходеНаСледующуюСтраницу(Отказ);
		Если НЕ Отказ Тогда
			ЗаписатьИзмененияФормы(, Отказ);
			Если Отказ Тогда
				Возврат;
			КонецЕсли; 
			Оповестить("ОповещениеОбИзмененииДолга");
			Модифицированность = Ложь;
			Закрыть();
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытиемЗавершение()

&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

#Область Запасы

&НаКлиенте
Процедура ВидЦенСебестоимостиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Оповещение = Новый ОписаниеОповещения("ВидЦенСебестоимостиОбработкаВыбораЗавершение", ЭтотОбъект, ВидЦенСебестоимости);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Обновить цены в таблице товаров?'"), РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Да);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенСебестоимостиОбработкаВыбораЗавершение(КодВозврата, СтароеЗначение) Экспорт
	
	Если КодВозврата=КодВозвратаДиалога.Да Тогда
		ЗаполнитьЦены(, Ложь, Ложь);
		Модифицированность = Истина;
	ИначеЕсли КодВозврата=КодВозвратаДиалога.Нет Тогда
		Модифицированность = Истина;
	Иначе
		ВидЦенСебестоимости = СтароеЗначение;
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ВидЦенСебестоимостиПриИзменении(Элемент)
	
	УстановитьВидимостьКурсов();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПродажиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Оповещение = Новый ОписаниеОповещения("ВидЦенПродажиОбработкаВыбораЗавершение", ЭтотОбъект, ВидЦенПродажи);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Обновить цены в таблице товаров?'"), РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Да);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПродажиОбработкаВыбораЗавершение(КодВозврата, СтароеЗначение) Экспорт
	
	Если КодВозврата=КодВозвратаДиалога.Да Тогда
		ЗаполнитьЦены(Ложь);
		Модифицированность = Истина;
	ИначеЕсли КодВозврата=КодВозвратаДиалога.Нет Тогда
		Модифицированность = Истина;
	Иначе
		ВидЦенПродажи = СтароеЗначение;
	КонецЕсли; 	
	
КонецПроцедуры
 
&НаКлиенте
Процедура ВидЦенПродажиПриИзменении(Элемент)
	
	УстановитьВидимостьКурсов();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	МассивТипов = Новый Массив;
		МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
	
	Если КэшЗначений.СправочникНоменклатурыПустой И НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("ТипНоменклатуры", МассивТипов);
		ЗначенияЗаполнения.Вставить("ЭтоНабор", Ложь);
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыОткрытия, Элементы.ВводНачальныхОстатковТоварыЗапасы);
	ИначеЕсли НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ОтборФормы = Новый Структура;
		ОтборФормы.Вставить("ТипНоменклатуры", МассивТипов);
		ОтборФормы.Вставить("ЭтоНабор", Ложь);
		ПараметрыОткрытия.Вставить("Отбор", ОтборФормы);
		ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыОткрытия, Элементы.ВводНачальныхОстатковТоварыЗапасы, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПередУдалением(Элемент, Отказ)
	
	// Серии номенклатуры
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасы.ТекущиеДанные;
	СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(ВводНачальныхОстатковТовары.СерииНоменклатуры, СтрокаТабличнойЧасти,
		ИспользоватьСерииНоменклатурыОстатки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	
	ИменаРеквизитовАвтозаполнения = "СтруктурнаяЕдиница, Ячейка, ЗаказПокупателя";
	
	Если ВводНачальныхОстатковТовары.Запасы.Количество()>0 Тогда 
		ДанныеДляЗаполнения = ВводНачальныхОстатковТовары.Запасы[ВводНачальныхОстатковТовары.Запасы.Количество()-1];
	Иначе
		ДанныеДляЗаполнения = Новый Структура(ИменаРеквизитовАвтозаполнения);
		ДанныеДляЗаполнения.СтруктурнаяЕдиница = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ОсновнойСклад");
	КонецЕсли;	
	
	Стр = ВводНачальныхОстатковТовары.Запасы.Добавить();
	ЗаполнитьЗначенияСвойств(Стр, ДанныеДляЗаполнения, ИменаРеквизитовАвтозаполнения);
	Стр.Номенклатура = ВыбранноеЗначение;
	ЗапасыПриИзмененииНоменклатуры(Стр);
	
	Элементы.ВводНачальныхОстатковТоварыЗапасы.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
	ОпределитьТекущийЭлементТаблицы(Стр, "ВводНачальныхОстатковТоварыЗапасы", "СтруктурнаяЕдиница", "Количество");
	ПодключитьОбработчикОжидания("Подключаемый_НачатьИзменениеТаблицы", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачатьИзменениеТаблицы()
	
	Если НЕ ТипЗнч(ТекущийЭлемент)=Тип("ТаблицаФормы") Тогда
		Возврат;
	КонецЕсли; 	
	ТекущийЭлемент.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыСтруктурнаяЕдиницаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасы.ТекущиеДанные;
	ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(СтрокаТабличнойЧасти.НомерСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(НомерСтроки)
	ДополнительныеСвойства = Новый Структура("НомерСтроки", НомерСтроки);
	СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧастиВводНачальныхОстатков(ВводНачальныхОстатковТовары,, ДополнительныеСвойства)
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасы.ТекущиеДанные;
	ЗапасыПриИзмененииНоменклатуры(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ВводНачальныхОстатковТоварыЗапасыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗапасыПриИзмененииНоменклатуры(СтрокаТабличнойЧасти)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("ДатаОстатков", ДатаОстатков);
	СтруктураДанные.Вставить("ВидЦенСебестоимости", ВидЦенСебестоимости);
	СтруктураДанные.Вставить("ВидЦенПродажи", ВидЦенПродажи);
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	
	СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
	
	СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатурыОбработкаВводаОстатков(ЭтаФорма, СтруктураДанные);
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.ЦенаСебестоимости = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена * КурсСебестоимости / КратностьСебестоимости;
	СтрокаТабличнойЧасти.ЦенаПродажи = СтруктураДанные.ЦенаПродажи;
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТабличнойЧасти);
	
	// Серии номенклатуры
	СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(ВводНачальныхОстатковТовары.СерииНоменклатуры, СтрокаТабличнойЧасти,
		ИспользоватьСерииНоменклатурыОстатки);
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии
		Тогда
		СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
	КонецЕсли;
	// Конец Партии
	
	СтрокаТабличнойЧасти.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.ЦенаСебестоимости = СтрокаТабличнойЧасти.ЦенаСебестоимости * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		СтрокаТабличнойЧасти.ЦенаПродажи = СтрокаТабличнойЧасти.ЦенаПродажи * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыЦенаСебестоимостиПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыСуммаСебестоимостиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасы.ТекущиеДанные;
	
	// Цена.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.СуммаСебестоимости * КурсСебестоимости / КратностьСебестоимости;
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.ЦенаСебестоимости = СтрокаТабличнойЧасти.СуммаСебестоимости / СтрокаТабличнойЧасти.Количество;
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасы.ТекущиеДанные;
	
	// Цена.
	СтрокаТабличнойЧасти.СуммаСебестоимости = СтрокаТабличнойЧасти.Сумма / КурсСебестоимости * КратностьСебестоимости;
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
		СтрокаТабличнойЧасти.ЦенаСебестоимости = СтрокаТабличнойЧасти.СуммаСебестоимости / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
КонецПроцедуры // ВводНачальныхОстатковТоварыЗапасыСуммаПриИзменении()

#Область РаботаССериямиНоменклатуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыСерииНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерииНоменклатуры();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерииНоменклатуры()
		
	ТекущиеДанныеИдентификатор = Элементы.ВводНачальныхОстатковТоварыЗапасы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийНоменклатуры = ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор);
	
	ОткрытьФорму("Обработка.ПодборСерийНоменклатуры.Форма", ПараметрыСерийНоменклатуры, ЭтотОбъект);

КонецПроцедуры

&НаСервере
Функция ПолучитьСерииНоменклатурыИзХранилища(АдресВоВременномХранилище, КлючСтроки)

	Модифицированность = Истина;
	Возврат СерииНоменклатурыУНФ.ПолучитьСерииНоменклатурыИзХранилища(ВводНачальныхОстатковТовары, АдресВоВременномХранилище, КлючСтроки);

КонецФункции

&НаСервере
Функция ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор)
	
	Возврат СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатуры(ВводНачальныхОстатковТовары, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗапасыПринятые

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеПриИзменении(Элемент)
	
	ПересчитатьИтогиКлиент("ЗапасыПринятые");
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеПриАктивизацииЯчейки(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	// Доступность типов заказов.
	Если Элемент.ТекущийЭлемент.Имя = "ВводНачальныхОстатковТоварыЗапасыПринятыеЗаказ" Тогда
		
		Если СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию") Тогда
			
			ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику");
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПоставщику.ЗаказНаЗакупку"));
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
		ИначеЕсли СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку") Тогда
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку"));
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
			ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя");
			
		Иначе
			
			МассивОтбора = Новый Массив;
			МассивОтбора.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
			МассивОтбора.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
			ДопустимыеТипы = Новый ОписаниеТипов(МассивОтбора);	
			
		КонецЕсли;
		
		Элемент.ТекущийЭлемент.ОграничениеТипа = ДопустимыеТипы;
		
	// Партии.
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ВводНачальныхОстатковТоварыЗапасыПринятыеПартия" Тогда	
		
		Если СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию") Тогда
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
		ИначеЕсли СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку") Тогда
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье"));
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
		ИначеЕсли СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаОтветХранение") Тогда
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение("Перечисление.СтатусыПартий.ОтветственноеХранение"));
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ВводНачальныхОстатковТоварыЗапасыПринятыеКонтрагент" Тогда 
		
		Если СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку") Тогда
			
			НовыйМассив = Новый Массив();
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Покупатель", Истина);
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
		Иначе
			
			НовыйМассив = Новый Массив();
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Поставщик", Истина);
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗапасыПринятыеПриАктивизацииЯчейки()

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ОтборФормы = Новый Структура;
		ОтборФормы.Вставить("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		ОтборФормы.Вставить("ЭтоНабор", Ложь);
		ПараметрыОткрытия.Вставить("Отбор", ОтборФормы);
		ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыОткрытия, Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	
	ИменаРеквизитовАвтозаполнения = "СтруктурнаяЕдиница, Ячейка, Контрагент, Договор, ВидОперации, Заказ";
	
	Если ВводНачальныхОстатковТовары.ЗапасыПринятые.Количество()>0 Тогда 
		ДанныеДляЗаполнения = ВводНачальныхОстатковТовары.ЗапасыПринятые[ВводНачальныхОстатковТовары.ЗапасыПринятые.Количество()-1];
	Иначе
		ДанныеДляЗаполнения = Новый Структура(ИменаРеквизитовАвтозаполнения);
		ДанныеДляЗаполнения.СтруктурнаяЕдиница = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ОсновнойСклад");
	КонецЕсли;	
	
	Стр = ВводНачальныхОстатковТовары.ЗапасыПринятые.Добавить();
	ЗаполнитьЗначенияСвойств(Стр, ДанныеДляЗаполнения, ИменаРеквизитовАвтозаполнения);
	Стр.Номенклатура = ВыбранноеЗначение;
	ЗапасыПринятыеПриИзмененииНоменклатуры(Стр);
	
	Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
	ОпределитьТекущийЭлементТаблицы(Стр, "ВводНачальныхОстатковТоварыЗапасыПринятые", "ВидОперации, СтруктурнаяЕдиница, Контрагент, Договор", "Количество");
	ПодключитьОбработчикОжидания("Подключаемый_НачатьИзменениеТаблицы", 0.1, Истина);
	 
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеПослеУдаления(Элемент)
	
	УстановитьВидимостьРеквизитовТЧ("ЗапасыПринятые");
	ПересчитатьИтогиКлиент("ЗапасыПринятые");
	
КонецПроцедуры 

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеВидОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые.ТекущиеДанные;
	
	Если (СтрокаТабличнойЧасти.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку")
		ИЛИ ВыбранноеЗначение=ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку"))
		И СтрокаТабличнойЧасти.ВидОперации<>ВыбранноеЗначение Тогда
		СтрокаТабличнойЧасти.Контрагент = Неопределено;
		СтрокаТабличнойЧасти.Договор = Неопределено;
		СтрокаТабличнойЧасти.Заказ = Неопределено;
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеВидОперацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Договор = ПолучитьДоговорПоУмолчанию(
		ВводНачальныхОстатковТовары.Ссылка, СтрокаТабличнойЧасти.Контрагент, Организация, "ЗапасыПринятые", СтрокаТабличнойЧасти.ВидОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеКонтрагентПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(СтрокаТабличнойЧасти.Контрагент, Организация, "ЗапасыПринятые", СтрокаТабличнойЧасти.ВидОперации);
	
	СтрокаТабличнойЧасти.ВестиРасчетыПоДоговорам = СтруктураДанные.ВестиРасчетыПоДоговорам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоДокументам = СтруктураДанные.ВестиРасчетыПоДокументам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоЗаказам = СтруктураДанные.ВестиРасчетыПоЗаказам;
	СтрокаТабличнойЧасти.ВестиУчетОплатыПоСчетам = СтруктураДанные.ВестиУчетОплатыПоСчетам;
	
	СтрокаТабличнойЧасти.Договор = СтруктураДанные.Договор;
	СтрокаТабличнойЧасти.СуммаРасчетов = СтрокаТабличнойЧасти.СуммаПродажи / КурсРасчетовКлиент(СтрокаТабличнойЧасти.Договор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = ПолучитьПараметрыФормыВыбора(ВводНачальныхОстатковТовары.Ссылка, 
		Организация, 
		СтрокаТабличнойЧасти.Контрагент,
		СтрокаТабличнойЧасти.Договор, 
		СтрокаТабличнойЧасти.ВидОперации,
		"ЗапасыПринятые"
	);
	
	Если ПараметрыОткрытия.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыОткрытия, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеДоговорПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаРасчетов = СтрокаТабличнойЧасти.СуммаПродажи / КурсРасчетовКлиент(СтрокаТабличнойЧасти.Договор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые.ТекущиеДанные;
	ЗапасыПринятыеПриИзмененииНоменклатуры(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ЗапасыПереданныеНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗапасыПринятыеПриИзмененииНоменклатуры(СтрокаТабличнойЧасти)
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("ДатаОстатков", ДатаОстатков);
	СтруктураДанные.Вставить("ВидЦенСебестоимости", ВидЦенСебестоимости);
	СтруктураДанные.Вставить("ВидЦенПродажи", ВидЦенПродажи);
	СтруктураДанные.Вставить("ВидОперации", СтрокаТабличнойЧасти.ВидОперации);
	
	Если СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию")
		Тогда
		СтатусПартии = Новый СписокЗначений;
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
		
		СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку")
		Тогда
		СтатусПартии = Новый СписокЗначений;
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье"));
		
		СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаОтветХранение")
		Тогда
		СтатусПартии = Новый СписокЗначений;
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ОтветственноеХранение"));
		
		СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.ЦенаПродажи = СтруктураДанные.ЦенаПродажи;
	РассчитатьСуммуВСтрокеТабличнойЧасти("ЗапасыПринятые", СтрокаТабличнойЧасти);
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = Истина;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = Истина;
	Если СтруктураДанные.Свойство("Партия")
		Тогда
		СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
	КонецЕсли;
	// Конец Партии
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.ЦенаПродажи = СтрокаТабличнойЧасти.ЦенаПродажи * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
	КонецЕсли;
	
КонецПроцедуры // ВводНачальныхОстатковТоварыЗапасыЕдиницаИзмеренияОбработкаВыбора()

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ВводНачальныхОстатковТоварыЗапасыКоличествоПриИзменении()

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ВводНачальныхОстатковТоварыЗапасыЦенаПриИзменении()

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеСуммаПродажиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые.ТекущиеДанные;
	
	// Цена.
	СтрокаТабличнойЧасти.СуммаРасчетов = СтрокаТабличнойЧасти.СуммаПродажи / КурсРасчетовКлиент(СтрокаТабличнойЧасти.Договор);
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.ЦенаПродажи = СтрокаТабличнойЧасти.СуммаПродажи / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые.ТекущиеДанные;
	
	// Цена.
	СтрокаТабличнойЧасти.СуммаПродажи = СтрокаТабличнойЧасти.СуммаРасчетов * КурсРасчетовКлиент(СтрокаТабличнойЧасти.Договор);
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.ЦенаПродажи = СтрокаТабличнойЧасти.СуммаПродажи / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
КонецПроцедуры // ВводНачальныхОстатковТоварыЗапасыСуммаПриИзменении()

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеСуммаРасчетовОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Курс = КурсыКонтрагентов.Получить(СтрокаТабличнойЧасти.Договор);
	Если ЗначениеЗаполнено(Курс) И Курс<>1 Тогда
		Состояние(СтрШаблон(НСтр("ru = 'Курс расчетов с поставщиком %1 (%2): %3'"), СтрокаТабличнойЧасти.Контрагент, СтрокаТабличнойЧасти.Договор, Курс));
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область ЗапасыПереданные

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеПриИзменении(Элемент)
	
	ПересчитатьИтогиКлиент("ЗапасыПереданные");	
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеПриАктивизацииЯчейки(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Доступность типов заказов.
	Если Элемент.ТекущийЭлемент.Имя = "ВводНачальныхОстатковТоварыЗапасыПереданныеЗаказ" Тогда
		
		Если СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку") Тогда
			
			ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику");
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПоставщику.ЗаказНаПереработку"));
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
		ИначеЕсли СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию") Тогда
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу"));
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
			ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя");
			
		Иначе
			
			МассивОтбора = Новый Массив;
			МассивОтбора.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
			МассивОтбора.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
			ДопустимыеТипы = Новый ОписаниеТипов(МассивОтбора);	
			
		КонецЕсли;
		
		Элемент.ТекущийЭлемент.ОграничениеТипа = ДопустимыеТипы;
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ВводНачальныхОстатковТоварыЗапасыПереданныеКонтрагент" Тогда 
		
		Если СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку") Тогда
			
			НовыйМассив = Новый Массив();
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Поставщик", Истина);
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
		Иначе
			
			НовыйМассив = Новый Массив();
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Покупатель", Истина);
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗапасыПереданныеПриАктивизацииЯчейки()

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ОтборФормы = Новый Структура;
		ОтборФормы.Вставить("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		ОтборФормы.Вставить("ЭтоНабор", Ложь);
		ПараметрыОткрытия.Вставить("Отбор", ОтборФормы);
		ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыОткрытия, Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	
	ИменаРеквизитовАвтозаполнения = "Контрагент, Договор, ВидОперации, Заказ";
	
	Если ВводНачальныхОстатковТовары.ЗапасыПереданные.Количество()>0 Тогда 
		ДанныеДляЗаполнения = ВводНачальныхОстатковТовары.ЗапасыПереданные[ВводНачальныхОстатковТовары.ЗапасыПереданные.Количество()-1];
	Иначе
		ДанныеДляЗаполнения = Новый Структура(ИменаРеквизитовАвтозаполнения);
	КонецЕсли;	
	
	Стр = ВводНачальныхОстатковТовары.ЗапасыПереданные.Добавить();
	ЗаполнитьЗначенияСвойств(Стр, ДанныеДляЗаполнения, ИменаРеквизитовАвтозаполнения);
	Стр.Номенклатура = ВыбранноеЗначение;
	ЗапасыПереданныеПриИзмененииНоменклатуры(Стр);
	
	Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
	ОпределитьТекущийЭлементТаблицы(Стр, "ВводНачальныхОстатковТоварыЗапасыПереданные", "ВидОперации, Контрагент, Договор", "Количество");
	ПодключитьОбработчикОжидания("Подключаемый_НачатьИзменениеТаблицы", 0.1, Истина);
	 
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеПослеУдаления(Элемент)
	
	УстановитьВидимостьРеквизитовТЧ("ЗапасыПереданные");
	ПересчитатьИтогиКлиент("ЗапасыПереданные");
	
КонецПроцедуры // ЗапасыПереданныеПослеУдаления()

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеВидОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.ТекущиеДанные;
	
	Если (СтрокаТабличнойЧасти.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку")
		ИЛИ ВыбранноеЗначение=ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку"))
		И СтрокаТабличнойЧасти.ВидОперации<>ВыбранноеЗначение Тогда
		СтрокаТабличнойЧасти.Контрагент = Неопределено;
		СтрокаТабличнойЧасти.Договор = Неопределено;
		СтрокаТабличнойЧасти.Заказ = Неопределено;
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеВидОперацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Договор = ПолучитьДоговорПоУмолчанию(
		ВводНачальныхОстатковТовары.Ссылка, СтрокаТабличнойЧасти.Контрагент, Организация, "ЗапасыПереданные", СтрокаТабличнойЧасти.ВидОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеКонтрагентПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(
		СтрокаТабличнойЧасти.Контрагент, Организация, "ЗапасыПереданные", СтрокаТабличнойЧасти.ВидОперации);
	
	СтрокаТабличнойЧасти.ВестиРасчетыПоДоговорам = СтруктураДанные.ВестиРасчетыПоДоговорам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоДокументам = СтруктураДанные.ВестиРасчетыПоДокументам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоЗаказам = СтруктураДанные.ВестиРасчетыПоЗаказам;
	СтрокаТабличнойЧасти.ВестиУчетОплатыПоСчетам = СтруктураДанные.ВестиУчетОплатыПоСчетам;
	
	СтрокаТабличнойЧасти.Договор = СтруктураДанные.Договор;
	СтрокаТабличнойЧасти.СуммаРасчетов = СтрокаТабличнойЧасти.СуммаПродажи / КурсРасчетовКлиент(СтрокаТабличнойЧасти.Договор);
	
КонецПроцедуры // ЗапасыПереданныеКонтрагентПриИзменении()

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = ПолучитьПараметрыФормыВыбора(ВводНачальныхОстатковТовары.Ссылка, 
		Организация, 
		СтрокаТабличнойЧасти.Контрагент, 
		СтрокаТабличнойЧасти.Договор, 
		СтрокаТабличнойЧасти.ВидОперации, 
		"ЗапасыПереданные"
	);
	
	Если ПараметрыОткрытия.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыОткрытия, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеДоговорПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаРасчетов = СтрокаТабличнойЧасти.СуммаПродажи / КурсРасчетовКлиент(СтрокаТабличнойЧасти.Договор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.ТекущиеДанные;
	ЗапасыПереданныеПриИзмененииНоменклатуры(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереданныеПриИзмененииНоменклатуры(СтрокаТабличнойЧасти)
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("ДатаОстатков", ДатаОстатков);
	СтруктураДанные.Вставить("ВидЦенСебестоимости", ВидЦенСебестоимости);
	СтруктураДанные.Вставить("ВидЦенПродажи", ВидЦенПродажи);
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	
	СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.ЦенаПродажи = СтруктураДанные.ЦенаПродажи;
	РассчитатьСуммуВСтрокеТабличнойЧасти("ЗапасыПереданные", СтрокаТабличнойЧасти);
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	Если СтруктураДанные.Свойство("Партия")
		Тогда
		СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
	КонецЕсли;
	// Конец Партии
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		СтрокаТабличнойЧасти.ЦенаПродажи = СтрокаТабличнойЧасти.ЦенаПродажи * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
	КонецЕсли;
	
КонецПроцедуры // ВводНачальныхОстатковТоварыЗапасыЕдиницаИзмеренияОбработкаВыбора()

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ВводНачальныхОстатковТоварыЗапасыКоличествоПриИзменении()

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ВводНачальныхОстатковТоварыЗапасыЦенаПриИзменении()

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеСуммаСебестоимостиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.ТекущиеДанные;
	
	// Цена.
	СтрокаТабличнойЧасти.Себестоимость = СтрокаТабличнойЧасти.СуммаСебестоимости * КурсСебестоимости / КратностьСебестоимости;
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.СуммаСебестоимости / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеСебестоимостьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.ТекущиеДанные;
	
	// Цена.
	СтрокаТабличнойЧасти.СуммаСебестоимости = СтрокаТабличнойЧасти.Себестоимость / КурсСебестоимости * КратностьСебестоимости;
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.СуммаСебестоимости / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеЦенаПродажиПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ВводНачальныхОстатковТоварыЗапасыЦенаПриИзменении()

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеСуммаПродажиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.ТекущиеДанные;
	
	// Цена.
	СтрокаТабличнойЧасти.СуммаРасчетов = СтрокаТабличнойЧасти.СуммаПродажи / КурсРасчетовКлиент(СтрокаТабличнойЧасти.Договор);
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.ЦенаПродажи = СтрокаТабличнойЧасти.СуммаПродажи / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.ТекущиеДанные;
	
	// Цена.
	СтрокаТабличнойЧасти.СуммаПродажи = СтрокаТабличнойЧасти.СуммаРасчетов * КурсРасчетовКлиент(СтрокаТабличнойЧасти.Договор);
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.ЦенаПродажи = СтрокаТабличнойЧасти.СуммаПродажи / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеСуммаРасчетовОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Курс = КурсыКонтрагентов.Получить(СтрокаТабличнойЧасти.Договор);
	Если ЗначениеЗаполнено(Курс) И Курс<>1 Тогда
		Состояние(СтрШаблон(НСтр("ru = 'Курс расчетов с покупателем %1 (%2): %3'"), СтрокаТабличнойЧасти.Контрагент, СтрокаТабличнойЧасти.Договор, Курс));
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область ЗапасыВРазрезеГТД

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыВРазрезеГТДПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ОтборФормы = Новый Структура;
		ОтборФормы.Вставить("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		ОтборФормы.Вставить("ЭтоНабор", Ложь);
		ПараметрыОткрытия.Вставить("Отбор", ОтборФормы);
		ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыОткрытия, Элементы.ВводНачальныхОстатковТоварыЗапасыВРазрезеГТД, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыВРазрезеГТДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	
	ИменаРеквизитовАвтозаполнения = "СтранаПроисхождения";
	
	Если ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД.Количество()>0 Тогда 
		ДанныеДляЗаполнения = ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД[ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД.Количество() - 1];
	Иначе
		ДанныеДляЗаполнения = Новый Структура(ИменаРеквизитовАвтозаполнения);
		ДанныеДляЗаполнения.СтранаПроисхождения = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
	КонецЕсли;	
	
	Стр = ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД.Добавить();
	Стр.Номенклатура = ВыбранноеЗначение;
	ЗапасыВРазрезеГТДПриИзмененииНоменклатуры(Стр);
	Если ЗначениеЗаполнено(Стр.СтранаПроисхождения) Тогда
		УдаляемыйРеквизит = "СтранаПроисхождения";
		ИменаРеквизитовАвтозаполнения = СтрЗаменить(ИменаРеквизитовАвтозаполнения, "," + УдаляемыйРеквизит, "");
		ИменаРеквизитовАвтозаполнения = СтрЗаменить(ИменаРеквизитовАвтозаполнения, УдаляемыйРеквизит, "");
	КонецЕсли;
	Если НЕ ПустаяСтрока(ИменаРеквизитовАвтозаполнения) Тогда
		ЗаполнитьЗначенияСвойств(Стр, ДанныеДляЗаполнения, ИменаРеквизитовАвтозаполнения);
	КонецЕсли; 
	
	Элементы.ВводНачальныхОстатковТоварыЗапасыВРазрезеГТД.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
	Элементы.ВводНачальныхОстатковТоварыЗапасыВРазрезеГТД.ТекущийЭлемент = Элементы.ВводНачальныхОстатковТоварыЗапасыВРазрезеГТДКоличество;
	ПодключитьОбработчикОжидания("Подключаемый_НачатьИзменениеТаблицы", 0.1, Истина);
	 
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыВРазрезеГТДНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыВРазрезеГТД.ТекущиеДанные;
	ЗапасыВРазрезеГТДПриИзмененииНоменклатуры(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВРазрезеГТДПриИзмененииНоменклатуры(СтрокаТабличнойЧасти)
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
	
	СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);

	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии
		Тогда
		СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
	КонецЕсли;
	// Конец Партии
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыВРазрезеГТДНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеТекущейСтроки = Элементы.ВводНачальныхОстатковТоварыЗапасыВРазрезеГТД.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		ТекстСообщения = "";
		
		Если НЕ ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнена страна происхождения!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения)
		   И ДанныеТекущейСтроки.СтранаПроисхождения = ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
			
			ТекстСообщения = НСтр("ru = 'Учет ГТД для отечественных товаров не ведется.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
		Если (ЗначениеЗаполнено(ДанныеТекущейСтроки.Номенклатура)
			И НЕ ТипНоменклатурыЗапас(ДанныеТекущейСтроки.Номенклатура)) Тогда
			
			ТекстСообщения = НСтр("ru = 'Учет ГТД в программе ведется только для номенклатуры с типом ""Запас"".'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыВРазрезеГТДСтранаПроисхожденияПриИзменении(Элемент)
	
	ОчиститьНомерГТДПриИзмененииСтраны("ВводНачальныхОстатковТоварыЗапасыВРазрезеГТД");

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНомерГТДПриИзмененииСтраны(ИмяТаблицы)
	
	ДанныеТекущейСтроки = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения)
			ИЛИ ДанныеТекущейСтроки.СтранаПроисхождения = ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
			ДанныеТекущейСтроки.НомерГТД = Неопределено;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗапасыПереданныеВРазрезеГТД

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеВРазрезеГТДПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Копирование Тогда
		
		Отказ = Истина;
		
		ОтборФормы = Новый Структура;
		ОтборФормы.Вставить("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		ОтборФормы.Вставить("ЭтоНабор", Ложь);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ПараметрыОткрытия.Вставить("Отбор", ОтборФормы);
		
		ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыОткрытия, Элементы.ВводНачальныхОстатковТоварыЗапасыПереданныеВРазрезеГТД, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеВРазрезеГТДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	
	ИменаРеквизитовАвтозаполнения = "СтранаПроисхождения";
	
	Если ВводНачальныхОстатковТовары.ЗапасыПереданныеВРазрезеГТД.Количество()>0 Тогда 
		ДанныеДляЗаполнения = ВводНачальныхОстатковТовары.ЗапасыПереданныеВРазрезеГТД[ВводНачальныхОстатковТовары.ЗапасыПереданныеВРазрезеГТД.Количество()-1];
	Иначе
		ДанныеДляЗаполнения = Новый Структура(ИменаРеквизитовАвтозаполнения);
		ДанныеДляЗаполнения.СтранаПроисхождения = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
	КонецЕсли;
	
	Стр = ВводНачальныхОстатковТовары.ЗапасыПереданныеВРазрезеГТД.Добавить();
	Стр.Номенклатура = ВыбранноеЗначение;
	ЗапасыПереданныеВРазрезеГТДПриИзмененииНоменклатуры(Стр);
	Если ЗначениеЗаполнено(Стр.СтранаПроисхождения) Тогда
		УдаляемыйРеквизит = "СтранаПроисхождения";
		ИменаРеквизитовАвтозаполнения = СтрЗаменить(ИменаРеквизитовАвтозаполнения, "," + УдаляемыйРеквизит, "");
		ИменаРеквизитовАвтозаполнения = СтрЗаменить(ИменаРеквизитовАвтозаполнения, УдаляемыйРеквизит, "");
	КонецЕсли;
	Если НЕ ПустаяСтрока(ИменаРеквизитовАвтозаполнения) Тогда
		ЗаполнитьЗначенияСвойств(Стр, ДанныеДляЗаполнения, ИменаРеквизитовАвтозаполнения);
	КонецЕсли; 
	
	Элементы.ВводНачальныхОстатковТоварыЗапасыПереданныеВРазрезеГТД.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
	Элементы.ВводНачальныхОстатковТоварыЗапасыПереданныеВРазрезеГТД.ТекущийЭлемент = Элементы.ВводНачальныхОстатковТоварыЗапасыПереданныеВРазрезеГТДКоличество;
	ПодключитьОбработчикОжидания("Подключаемый_НачатьИзменениеТаблицы", 0.1, Истина);
	 
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеВРазрезеГТДНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПереданныеВРазрезеГТД.ТекущиеДанные;
	ЗапасыПереданныеВРазрезеГТДПриИзмененииНоменклатуры(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереданныеВРазрезеГТДПриИзмененииНоменклатуры(СтрокаТабличнойЧасти)
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
	
	СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);

	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии
		Тогда
		СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
	КонецЕсли;
	// Конец Партии
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеВРазрезеГТДНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеТекущейСтроки = Элементы.ВводНачальныхОстатковТоварыЗапасыПереданныеВРазрезеГТД.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		ТекстСообщения = "";
		
		Если НЕ ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнена страна происхождения!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения)
		   И ДанныеТекущейСтроки.СтранаПроисхождения = ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
			
			ТекстСообщения = НСтр("ru = 'Учет ГТД для отечественных товаров не ведется!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
		Если (ЗначениеЗаполнено(ДанныеТекущейСтроки.Номенклатура)
			И НЕ ТипНоменклатурыЗапас(ДанныеТекущейСтроки.Номенклатура)) Тогда
			
			ТекстСообщения = НСтр("ru = 'Учет ГТД в программе ведется только для номенклатуры с типом ""Запас"".'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеВРазрезеГТДСтранаПроисхожденияПриИзменении(Элемент)
	
	ОчиститьНомерГТДПриИзмененииСтраны("ВводНачальныхОстатковТоварыЗапасыПереданныеВРазрезеГТД");
	
КонецПроцедуры

#КонецОбласти 

#Область ЗапасыПринятыеВРазрезеГТД

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеВРазрезеГТДПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Копирование Тогда
		
		Отказ = Истина;
		
		ОтборФормы = Новый Структура;
		ОтборФормы.Вставить("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		ОтборФормы.Вставить("ЭтоНабор", Ложь);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ПараметрыОткрытия.Вставить("Отбор", ОтборФормы);
		
		ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыОткрытия, Элементы.ВводНачальныхОстатковТоварыЗапасыПринятыеВРазрезеГТД, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеВРазрезеГТДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	
	ИменаРеквизитовАвтозаполнения = "СтранаПроисхождения";
	
	Если ВводНачальныхОстатковТовары.ЗапасыПринятыеВРазрезеГТД.Количество()>0 Тогда 
		ДанныеДляЗаполнения = ВводНачальныхОстатковТовары.ЗапасыПринятыеВРазрезеГТД[ВводНачальныхОстатковТовары.ЗапасыПринятыеВРазрезеГТД.Количество()-1];
	Иначе
		ДанныеДляЗаполнения = Новый Структура(ИменаРеквизитовАвтозаполнения);
		ДанныеДляЗаполнения.СтранаПроисхождения = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
	КонецЕсли;
	
	Стр = ВводНачальныхОстатковТовары.ЗапасыПринятыеВРазрезеГТД.Добавить();
	Стр.Номенклатура = ВыбранноеЗначение;
	ЗапасыПринятыеВРазрезеГТДПриИзмененииНоменклатуры(Стр);
	Если ЗначениеЗаполнено(Стр.СтранаПроисхождения) Тогда
		УдаляемыйРеквизит = "СтранаПроисхождения";
		ИменаРеквизитовАвтозаполнения = СтрЗаменить(ИменаРеквизитовАвтозаполнения, "," + УдаляемыйРеквизит, "");
		ИменаРеквизитовАвтозаполнения = СтрЗаменить(ИменаРеквизитовАвтозаполнения, УдаляемыйРеквизит, "");
	КонецЕсли;
	Если НЕ ПустаяСтрока(ИменаРеквизитовАвтозаполнения) Тогда
		ЗаполнитьЗначенияСвойств(Стр, ДанныеДляЗаполнения, ИменаРеквизитовАвтозаполнения);
	КонецЕсли; 
	
	Элементы.ВводНачальныхОстатковТоварыЗапасыПринятыеВРазрезеГТД.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
	Элементы.ВводНачальныхОстатковТоварыЗапасыПринятыеВРазрезеГТД.ТекущийЭлемент = Элементы.ВводНачальныхОстатковТоварыЗапасыПринятыеВРазрезеГТДКоличество;
	ПодключитьОбработчикОжидания("Подключаемый_НачатьИзменениеТаблицы", 0.1, Истина);
	 
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеВРазрезеГТДНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПринятыеВРазрезеГТД.ТекущиеДанные;
	ЗапасыПринятыеВРазрезеГТДПриИзмененииНоменклатуры(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПринятыеВРазрезеГТДПриИзмененииНоменклатуры(СтрокаТабличнойЧасти)
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
	
	СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);

	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии
		Тогда
		СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
	КонецЕсли;
	// Конец Партии
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеВРазрезеГТДНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеТекущейСтроки = Элементы.ВводНачальныхОстатковТоварыЗапасыПринятыеВРазрезеГТД.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		ТекстСообщения = "";
		
		Если НЕ ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнена страна происхождения!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения)
		   И ДанныеТекущейСтроки.СтранаПроисхождения = ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
			
			ТекстСообщения = НСтр("ru = 'Учет ГТД для отечественных товаров не ведется!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
		Если (ЗначениеЗаполнено(ДанныеТекущейСтроки.Номенклатура)
			И НЕ ТипНоменклатурыЗапас(ДанныеТекущейСтроки.Номенклатура)) Тогда
			
			ТекстСообщения = НСтр("ru = 'Учет ГТД в программе ведется только для номенклатуры с типом ""Запас"".'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеВРазрезеГТДСтранаПроисхожденияПриИзменении(Элемент)
	
	ОчиститьНомерГТДПриИзмененииСтраны("ВводНачальныхОстатковТоварыЗапасыПринятыеВРазрезеГТД");
	
КонецПроцедуры

#КонецОбласти

#Область РасчетыСПоставщиками

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если КэшЗначений.СправочникКонтрагентовПустой И НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Поставщик", Истина);
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыОткрытия, Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщиками);
	ИначеЕсли НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ОтборФормы = Новый Структура;
		ОтборФормы.Вставить("Поставщик", Истина);
		ПараметрыОткрытия.Вставить("Отбор", ОтборФормы);
		ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыОткрытия, Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщиками, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат;
	КонецЕсли; 
	
	Стр = ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПоставщиками.Добавить();
	Стр.Контрагент = ВыбранноеЗначение;
	РасчетыСПоставщикамиПриИзмененииКонтрагента(Стр);
	
	Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщиками.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
	Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщиками.ТекущийЭлемент = Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиСуммаВал;
	ПодключитьОбработчикОжидания("Подключаемый_НачатьИзменениеТаблицы", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиКонтрагентПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщиками.ТекущиеДанные;
	РасчетыСПоставщикамиПриИзмененииКонтрагента(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПоставщикамиПриИзмененииКонтрагента(СтрокаТабличнойЧасти)
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(СтрокаТабличнойЧасти.Контрагент, Организация, "РасчетыСПоставщиками");
	СтрокаТабличнойЧасти.Договор = СтруктураДанные.Договор;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(
		СтрокаТабличнойЧасти.СуммаВал,
		СтруктураДанные.ВалютаРасчетов,
		ДатаОстатков
	);
	
	СтрокаТабличнойЧасти.ВестиРасчетыПоДоговорам = СтруктураДанные.ВестиРасчетыПоДоговорам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоДокументам = СтруктураДанные.ВестиРасчетыПоДокументам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоЗаказам = СтруктураДанные.ВестиРасчетыПоЗаказам;
	СтрокаТабличнойЧасти.ВестиУчетОплатыПоСчетам = СтруктураДанные.ВестиУчетОплатыПоСчетам;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиСуммаВалПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщиками.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(
		СтрокаТабличнойЧасти.СуммаВал,
		СтрокаТабличнойЧасти.Договор,
		ДатаОстатков
	);
	
	Если НЕ ВалютаУчетаИНацСовпадают Тогда
		СтрокаТабличнойЧасти.СуммаРег = ПересчитатьИзВалютыВНациональнуюВалюту(
			СтрокаТабличнойЧасти.СуммаВал,
			СтрокаТабличнойЧасти.Договор,
			ДатаОстатков
		);
	КонецЕсли

КонецПроцедуры // ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиСуммаВалПриИзменении()

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиДоговорПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщиками.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(
		СтрокаТабличнойЧасти.СуммаВал,
		СтрокаТабличнойЧасти.Договор,
		ДатаОстатков
	);
	
КонецПроцедуры // ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиДоговорПриИзменении()

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиПослеУдаления(Элемент)
	
	УстановитьВидимостьРеквизитовТЧ("РасчетыСПоставщиками");
	
КонецПроцедуры // ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиПослеУдаления()

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиПризнакАвансаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщиками.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.Взаимозачет") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ПризнакАванса Тогда
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.РасходИзКассы")
			И ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.РасходСоСчета")
			И ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.РасходИзКассы")
		 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.РасходСоСчета")
		 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиДокументПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщиками.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.РасходИзКассы")
	 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.РасходСоСчета")
	 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		СтрокаТабличнойЧасти.ПризнакАванса = Истина;
	ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.Взаимозачет") Тогда
		СтрокаТабличнойЧасти.ПризнакАванса = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетыСПокупателями

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если КэшЗначений.СправочникКонтрагентовПустой И НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Покупатель", Истина);
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыОткрытия, Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателями);
	ИначеЕсли НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ОтборФормы = Новый Структура;
		ОтборФормы.Вставить("Покупатель", Истина);
		ПараметрыОткрытия.Вставить("Отбор", ОтборФормы);
		ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыОткрытия, Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателями, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат;
	КонецЕсли;
	
	Стр = ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПокупателями.Добавить();
	Стр.Контрагент = ВыбранноеЗначение;
	РасчетыСПокупателямиПриИзмененииКонтрагента(Стр);
	
	Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателями.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
	Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателями.ТекущийЭлемент = Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиСуммаВал;
	ПодключитьОбработчикОжидания("Подключаемый_НачатьИзменениеТаблицы", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиКонтрагентПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателями.ТекущиеДанные;
	РасчетыСПокупателямиПриИзмененииКонтрагента(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиКонтрагентПриИзменении()

&НаКлиенте
Процедура РасчетыСПокупателямиПриИзмененииКонтрагента(СтрокаТабличнойЧасти)
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(СтрокаТабличнойЧасти.Контрагент, Организация, "РасчетыСПокупателями");
	СтрокаТабличнойЧасти.Договор = СтруктураДанные.Договор;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(
		СтрокаТабличнойЧасти.СуммаВал,
		СтруктураДанные.ВалютаРасчетов,
		ДатаОстатков
	);
	
	СтрокаТабличнойЧасти.ВестиРасчетыПоДоговорам = СтруктураДанные.ВестиРасчетыПоДоговорам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоДокументам = СтруктураДанные.ВестиРасчетыПоДокументам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоЗаказам = СтруктураДанные.ВестиРасчетыПоЗаказам;
	СтрокаТабличнойЧасти.ВестиУчетОплатыПоСчетам = СтруктураДанные.ВестиУчетОплатыПоСчетам;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиСуммаВалПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателями.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(
		СтрокаТабличнойЧасти.СуммаВал,
		СтрокаТабличнойЧасти.Договор,
		ДатаОстатков
	);
	
	Если НЕ ВалютаУчетаИНацСовпадают Тогда
		СтрокаТабличнойЧасти.СуммаРег = ПересчитатьИзВалютыВНациональнуюВалюту(
			СтрокаТабличнойЧасти.СуммаВал,
			СтрокаТабличнойЧасти.Договор,
			ДатаОстатков
		);
	КонецЕсли
	
КонецПроцедуры // ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиСуммаВалПриИзменении()

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиДоговорПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателями.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(
		СтрокаТабличнойЧасти.СуммаВал,
		СтрокаТабличнойЧасти.Договор,
		ДатаОстатков
	);
	
КонецПроцедуры // ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиДоговорПриИзменении()

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиПослеУдаления(Элемент)
	
	УстановитьВидимостьРеквизитовТЧ("РасчетыСПокупателями");
	
КонецПроцедуры // ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиПослеУдаления()

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиПризнакАвансаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателями.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.Взаимозачет") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ПризнакАванса Тогда
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.ПоступлениеВКассу")
			И ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеВКассу")
		 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиДокументПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателями.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеВКассу")
	 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
		СтрокаТабличнойЧасти.ПризнакАванса = Истина;
	ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.Взаимозачет") Тогда
		СтрокаТабличнойЧасти.ПризнакАванса = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область РасчетыСПерсоналом

&НаКлиенте
Процедура ВводНачальныхОстатковЗарплатаРасчетыСПерсоналомПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если КэшЗначений.СправочникСотрудниковПустой И НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ОткрытьФорму("Справочник.Сотрудники.ФормаОбъекта", ПараметрыОткрытия, Элементы.ВводНачальныхОстатковЗарплатаРасчетыСПерсоналом);
	ИначеЕсли НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора", ПараметрыОткрытия, Элементы.ВводНачальныхОстатковЗарплатаРасчетыСПерсоналом, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковЗарплатаРасчетыСПерсоналомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.Сотрудники") Тогда
		Возврат;
	КонецЕсли; 
	
	ИменаРеквизитовАвтозаполнения = "СтруктурнаяЕдиница, ПериодРегистрации, Валюта";
	
	Если ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом.Количество()>0 Тогда
		ДанныеДляЗаполнения = ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом[ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом.Количество()-1];
	Иначе
		ДанныеДляЗаполнения = Новый Структура(ИменаРеквизитовАвтозаполнения);
		ДанныеДляЗаполнения.СтруктурнаяЕдиница = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ОсновноеПодразделение");
		ДанныеДляЗаполнения.ПериодРегистрации = ДобавитьМесяц(НачалоМесяца(ДатаОстатков), -1);
		ДанныеДляЗаполнения.Валюта = ВалютаУчета;
	КонецЕсли; 
	
	Стр = ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом.Добавить();
	ЗаполнитьЗначенияСвойств(Стр, ДанныеДляЗаполнения, ИменаРеквизитовАвтозаполнения);
	Стр.Сотрудник = ВыбранноеЗначение;
	
	Элементы.ВводНачальныхОстатковЗарплатаРасчетыСПерсоналом.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
	ОпределитьТекущийЭлементТаблицы(Стр, "ВводНачальныхОстатковЗарплатаРасчетыСПерсоналом", "СтруктурнаяЕдиница, ПериодРегистрации", "СуммаВал");
	ПодключитьОбработчикОжидания("Подключаемый_НачатьИзменениеТаблицы", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковЗарплатаРасчетыСПерсоналомВалютаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковЗарплатаРасчетыСПерсоналом.ТекущиеДанные;
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
																 СтрокаТабличнойЧасти.Валюта,
																 ДатаОстатков);

КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковЗарплатаРасчетыСПерсоналомСуммаВалПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковЗарплатаРасчетыСПерсоналом.ТекущиеДанные;
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
																 СтрокаТабличнойЧасти.Валюта,
																 ДатаОстатков);

КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковЗарплатаРасчетыСПерсоналомПериодРегистрацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковЗарплатаРасчетыСПерсоналом.ТекущиеДанные;
	СтрокаТабличнойЧасти.ПериодРегистрации = НачалоМесяца(СтрокаТабличнойЧасти.ПериодРегистрации);
	
КонецПроцедуры

#КонецОбласти 

#Область Эквайринг

&НаКлиенте
Процедура ВводНачальныхОстатковЭквайрингРасчетыПоЭквайрингуЭквайринговыйТерминалПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковЭквайрингРасчетыПоЭквайрингу.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеЭквайринговогоТерминалаПриИзменении(СтрокаТабличнойЧасти.ЭквайринговыйТерминал);

	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
																 СтруктураДанные.ВалютаДенежныхСредств,
																 ДатаОстатков);

	СтрокаТабличнойЧасти.Комиссия = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.КомиссияВал,
																 СтруктураДанные.ВалютаДенежныхСредств,
																 ДатаОстатков);

КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковЭквайрингРасчетыПоЭквайрингуСуммаВалПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковЭквайрингРасчетыПоЭквайрингу.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеЭквайринговогоТерминалаПриИзменении(СтрокаТабличнойЧасти.ЭквайринговыйТерминал);

	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
																 СтруктураДанные.ВалютаДенежныхСредств,
																 ДатаОстатков);

КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковЭквайрингРасчетыПоЭквайрингуКомиссияВалПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковЭквайрингРасчетыПоЭквайрингу.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеЭквайринговогоТерминалаПриИзменении(СтрокаТабличнойЧасти.ЭквайринговыйТерминал);

	СтрокаТабличнойЧасти.Комиссия = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.КомиссияВал,
																 СтруктураДанные.ВалютаДенежныхСредств,
																 ДатаОстатков);

КонецПроцедуры

#КонецОбласти

#Область Имущество

&НаКлиенте
Процедура ВводНачальныхОстатковИмуществоВнеоборотныеАктивыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если КэшЗначений.СправочникИмуществаПустой И НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ОткрытьФорму("Справочник.ВнеоборотныеАктивы.ФормаОбъекта", ПараметрыОткрытия, Элементы.ВводНачальныхОстатковИмуществоВнеоборотныеАктивы);
	ИначеЕсли НЕ Копирование Тогда 
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ОткрытьФорму("Справочник.ВнеоборотныеАктивы.ФормаВыбора", ПараметрыОткрытия, Элементы.ВводНачальныхОстатковИмуществоВнеоборотныеАктивы, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковИмуществоВнеоборотныеАктивыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.ВнеоборотныеАктивы") Тогда
		Возврат;
	КонецЕсли; 
	
	ИменаРеквизитовАвтозаполнения = "СтруктурнаяЕдиница, НаправлениеДеятельности, СчетЗатрат";
	
	Если ВводНачальныхОстатковИмущество.ВнеоборотныеАктивы.Количество()>0 Тогда
		ДанныеДляЗаполнения = ВводНачальныхОстатковИмущество.ВнеоборотныеАктивы[ВводНачальныхОстатковИмущество.ВнеоборотныеАктивы.Количество()-1];
	Иначе
		ДанныеДляЗаполнения = Новый Структура(ИменаРеквизитовАвтозаполнения);
		ДанныеДляЗаполнения.СтруктурнаяЕдиница = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ОсновноеПодразделение");
		ДанныеДляЗаполнения.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.ОсновноеНаправление");
		ДанныеДляЗаполнения.СчетЗатрат = ПредопределенноеЗначение("ПланСчетов.Управленческий.АмортизацияВнеоборотныхАктивов");
	КонецЕсли; 
	
	Стр = ВводНачальныхОстатковИмущество.ВнеоборотныеАктивы.Добавить();
	ЗаполнитьЗначенияСвойств(Стр, ДанныеДляЗаполнения, ИменаРеквизитовАвтозаполнения);
	Стр.ВнеоборотныйАктив = ВыбранноеЗначение;
	Стр.НачислятьАмортизацию = Истина;
	ИмуществоПриИзмененииВнеоборотногоАктива(Стр);
	
	Элементы.ВводНачальныхОстатковИмуществоВнеоборотныеАктивы.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
	ОпределитьТекущийЭлементТаблицы(Стр, "ВводНачальныхОстатковИмуществоВнеоборотныеАктивы", "СтруктурнаяЕдиница, СчетЗатрат", "ОбъемПродукцииРаботДляВычисленияАмортизации");
	ПодключитьОбработчикОжидания("Подключаемый_НачатьИзменениеТаблицы", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковИмуществоВнеоборотныеАктивыОбъемПродукцииРаботДляВычисленияАмортизацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковИмуществоВнеоборотныеАктивы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеВнеоборотныйАктив(СтрокаТабличнойЧасти.ВнеоборотныйАктив);
	
	Если НЕ СтруктураДанные.СпособАмортизацииПропорциональноОбъемуПродукции Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = '""Объем продукции (работ) для исчисления амортизации"" не может быть заполнен для указанного способа начисления амортизации!'"));
		СтрокаТабличнойЧасти.ОбъемПродукцииРаботДляВычисленияАмортизации = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковИмуществоВнеоборотныеАктивыСрокИспользованияДляВычисленияАмортизацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковИмуществоВнеоборотныеАктивы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеВнеоборотныйАктив(СтрокаТабличнойЧасти.ВнеоборотныйАктив);
	
	Если СтруктураДанные.СпособАмортизацииПропорциональноОбъемуПродукции Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = '""Срок использования для вычисления амортизации"" не может быть заполнен для указанного способа начисления амортизации!'"));
		СтрокаТабличнойЧасти.СрокИспользованияДляВычисленияАмортизации = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковИмуществоВнеоборотныеАктивыВнеоборотныйАктивПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковИмуществоВнеоборотныеАктивы.ТекущиеДанные;
	ИмуществоПриИзмененииВнеоборотногоАктива(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмуществоПриИзмененииВнеоборотногоАктива(СтрокаТабличнойЧасти)
	
	СтруктураДанные = ПолучитьДанныеВнеоборотныйАктив(СтрокаТабличнойЧасти.ВнеоборотныйАктив);
	Если СтруктураДанные.СпособАмортизацииПропорциональноОбъемуПродукции Тогда
		СтрокаТабличнойЧасти.СрокИспользованияДляВычисленияАмортизации = 0;
	Иначе
		СтрокаТабличнойЧасти.ОбъемПродукцииРаботДляВычисленияАмортизации = 0;
		СтрокаТабличнойЧасти.ТекущаяВыработкаКоличество = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковИмуществоВнеоборотныеАктивыТекущаяВыработкаКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковИмуществоВнеоборотныеАктивы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеВнеоборотныйАктив(СтрокаТабличнойЧасти.ВнеоборотныйАктив);
	
	Если НЕ СтруктураДанные.СпособАмортизацииПропорциональноОбъемуПродукции Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = '""Объем продукции (работ) для исчисления амортизации"" не может быть заполнен для указанного способа начисления амортизации!'"));
		СтрокаТабличнойЧасти.ТекущаяВыработкаКоличество = 0;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

#Область Прочие

&НаКлиенте
Процедура ВводНачальныхОстатковПрочееПрочиеРазделыПослеУдаления(Элемент)
	
	УстановитьВидимостьРеквизитовТЧ("ПрочиеРазделы");
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковПрочееПрочиеРазделыСчетПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковПрочееПрочиеРазделы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеСчетПриИзменении(СтрокаТабличнойЧасти.Счет);
	СтрокаТабличнойЧасти.Валютный = СтруктураДанные.Валютный;
	
	Если СтруктураДанные.Валютный Тогда
		СтрокаТабличнойЧасти.Валюта = СтруктураДанные.Валюта;
		СтрокаТабличнойЧасти.СуммаВал = ПересчитатьИзВалютыУчетаВВалюту(СтрокаТабличнойЧасти.Сумма,
																	 СтрокаТабличнойЧасти.Валюта,
																	 ДатаОстатков);
	Иначе
		СтрокаТабличнойЧасти.Валюта = Неопределено;
		СтрокаТабличнойЧасти.СуммаВал = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковПрочееПрочиеРазделыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковПрочееПрочиеРазделы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеСчетПриИзменении(СтрокаТабличнойЧасти.Счет);
	
	Если СтруктураДанные.Валютный И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Валюта) Тогда
		СтрокаТабличнойЧасти.СуммаВал = ПересчитатьИзВалютыУчетаВВалюту(СтрокаТабличнойЧасти.Сумма,
																	 СтрокаТабличнойЧасти.Валюта,
																	 ДатаОстатков);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковПрочееПрочиеРазделыВалютаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковПрочееПрочиеРазделы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеСчетПриИзменении(СтрокаТабличнойЧасти.Счет);
	
	Если НЕ СтруктураДанные.Валютный Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Счет) Тогда
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'У выбранного счета не установлен признак валютный!'"));
		Иначе
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите в начале счет!'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковПрочееПрочиеРазделыВалютаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковПрочееПрочиеРазделы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеСчетПриИзменении(СтрокаТабличнойЧасти.Счет);
	
	Если НЕ СтруктураДанные.Валютный Тогда
		СтрокаТабличнойЧасти.Валюта = Неопределено;
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Счет) Тогда
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'У выбранного счета не установлен признак валютный!'"));
		Иначе
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите в начале счет!'"));
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.СуммаВал = ПересчитатьИзВалютыУчетаВВалюту(СтрокаТабличнойЧасти.Сумма,
																	 СтрокаТабличнойЧасти.Валюта,
																	 ДатаОстатков);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковПрочееПрочиеРазделыСуммаВалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковПрочееПрочиеРазделы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеСчетПриИзменении(СтрокаТабличнойЧасти.Счет);
	
	Если НЕ СтруктураДанные.Валютный Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Счет) Тогда
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'У выбранного счета не установлен признак валютный!'"));
		Иначе
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите в начале счет!'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковПрочееПрочиеРазделыСуммаВалПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковПрочееПрочиеРазделы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеСчетПриИзменении(СтрокаТабличнойЧасти.Счет);
	
	Если НЕ СтруктураДанные.Валютный Тогда
		СтрокаТабличнойЧасти.СуммаВал = Неопределено;
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Счет) Тогда
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'У выбранного счета не установлен признак валютный!'"));
		Иначе
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите в начале счет!'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыПрямыеЗатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыПрямыеЗатраты.ТекущиеДанные;
		Если ВводНачальныхОстатковТовары.ПрямыеЗатраты.Количество()>1 Тогда 
			ПоследняяСтрока = ВводНачальныхОстатковТовары.ПрямыеЗатраты[ВводНачальныхОстатковТовары.ПрямыеЗатраты.Количество()-2];
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПоследняяСтрока, "СтруктурнаяЕдиница");
		Иначе
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ОсновноеПодразделение");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Шапка

&НаКлиенте
Процедура ДатаОстатковПриИзменении(Элемент)
	
	ДатаОстатковПриИзмененииНаСервере();
	
КонецПроцедуры // ДатаОстатковПриИзменении()

&НаСервере
Процедура ДатаОстатковПриИзмененииНаСервере()
	
	Для каждого ТекСтрока Из ВводНачальныхОстатковБанкИКасса.ДенежныеСредства Цикл
		
		ТекСтрока.Сумма = ПересчитатьИзВалютыВВалютуУчета(
			ТекСтрока.СуммаВал,
			ТекСтрока.ВалютаДенежныхСредств,
			ДатаОстатков
		);
		
	КонецЦикла;
	
	Для каждого ТекСтрока Из ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПоставщиками Цикл
		
		ТекСтрока.Сумма = ПересчитатьИзВалютыВВалютуУчета(
			ТекСтрока.СуммаВал,
			ТекСтрока.Договор,
			ДатаОстатков
		);
		
	КонецЦикла;
	
	Для каждого ТекСтрока Из ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПокупателями Цикл
		
		ТекСтрока.Сумма = ПересчитатьИзВалютыВВалютуУчета(
			ТекСтрока.СуммаВал,
			ТекСтрока.Договор,
			ДатаОстатков
		);
		
	КонецЦикла;
	
КонецПроцедуры // ДатаОстатковПриИзмененииНаСервере()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗагрузитьВводыОстатков();
	Если НЕ ЗначениеЗаполнено(ДатаОстатков) Тогда
		ДатаОстатков = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗагрузкаУТОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОжь;
	ОткрытьФорму("Обработка.ЗагрузкаДанныхИзУТ103.Форма");
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗагрузкаБПОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОжь;
	ОткрытьФорму("Обработка.ЗагрузкаДанныхИзБП3.Форма");
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗагрузкаССайтаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОжь;
	ОткрытьФорму("Обработка.ЗагрузитьДанныеСайта.Форма");
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеОбработчики

&НаКлиенте
Процедура Подключаемый_БанкКассаСуммаВалПриИзменении(Элемент)
	
	Индекс = Число(СтрЗаменить(Элемент.Имя, "СуммаВалОстатокБанкКасса", ""));
	СтрокаТабличнойЧасти = ВводНачальныхОстатковБанкИКасса.ДенежныеСредства[Индекс];
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(
		СтрокаТабличнойЧасти.СуммаВал,
		СтрокаТабличнойЧасти.ВалютаДенежныхСредств,
		ДатаОстатков
	);
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_БанкКассаВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Индекс = Число(СтрЗаменить(Элемент.Имя, "ВалютаОстатокБанкКасса", ""));
	СтрокаТабличнойЧасти = ВводНачальныхОстатковБанкИКасса.ДенежныеСредства[Индекс];
	
	Валюты = Новый Массив;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("БанковскийСчетКасса", СтрокаТабличнойЧасти.БанковскийСчетКасса);
	Строки = ВводНачальныхОстатковБанкИКасса.ДенежныеСредства.НайтиСтроки(СтруктураОтбора);
	Для каждого Стр Из Строки Цикл
		Валюты.Добавить(Стр.ВалютаДенежныхСредств);
	КонецЦикла; 
	
	Меню = СписокВыбораВалют(Валюты);
	Обработчик = Новый ОписаниеОповещения("БанкКассаВалютаВыбор", ЭтотОбъект, Индекс);
	ПоказатьВыборИзМеню(Обработчик, Меню, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкКассаВалютаВыбор(Элемент, Индекс) Экспорт
	
	Если Элемент=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		ТекущийИндексБанкКасса = Индекс;
		ОткрытьФорму("Обработка.ЗагрузкаКурсовВалют.Форма.ПодборВалютИзКлассификатора",, ЭтотОбъект);
	ИначеЕсли ЗначениеЗаполнено(Элемент.Значение) Тогда
		Валюта = Элемент.Значение;
		СтрокаТабличнойЧасти = ВводНачальныхОстатковБанкИКасса.ДенежныеСредства[Индекс];
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("БанковскийСчетКасса", СтрокаТабличнойЧасти.БанковскийСчетКасса);
		СтруктураОтбора.Вставить("ВалютаДенежныхСредств", Валюта);
		Если ВводНачальныхОстатковБанкИКасса.ДенежныеСредства.НайтиСтроки(СтруктураОтбора).Количество()>0 Тогда
			Возврат;
		КонецЕсли; 
		НоваяСтрока = ВводНачальныхОстатковБанкИКасса.ДенежныеСредства.Добавить();
		НоваяСтрока.БанковскийСчетКасса = СтрокаТабличнойЧасти.БанковскийСчетКасса;
		НоваяСтрока.ВалютаДенежныхСредств = Валюта;
		Если НЕ УчетВалютныхОпераций Тогда
			ВключитьИспользованиеВалютныхОпераций();
		КонецЕсли; 
		ОбновитьЭлементыФормы();
		Если НЕ ПустаяСтрока(ИмяТекущегоЭлемента) Тогда
			ТекущийЭлемент = Элементы[ИмяТекущегоЭлемента];
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодотчетСуммаВалПриИзменении(Элемент)
	
	Индекс = Число(СтрЗаменить(Элемент.Имя, "СуммаВалОстатокПодотчет", ""));
	СтрокаТабличнойЧасти = ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками[Индекс];
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(
		СтрокаТабличнойЧасти.СуммаВал,
		СтрокаТабличнойЧасти.Валюта,
		ДатаОстатков
	);
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ПодотчетВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Индекс = Число(СтрЗаменить(Элемент.Имя, "ВалютаОстатокПодотчет", ""));
	СтрокаТабличнойЧасти = ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками[Индекс];
	
	Валюты = Новый Массив;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Сотрудник", СтрокаТабличнойЧасти.Сотрудник);
	Строки = ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками.НайтиСтроки(СтруктураОтбора);
	Для каждого Стр Из Строки Цикл
		Валюты.Добавить(Стр.Валюта);
	КонецЦикла; 
	
	Меню = СписокВыбораВалют(Валюты);
	Обработчик = Новый ОписаниеОповещения("ПодотчетВалютаВыбор", ЭтотОбъект, Индекс);
	ПоказатьВыборИзМеню(Обработчик, Меню, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодотчетВалютаВыбор(Элемент, Индекс) Экспорт
	
	Если Элемент=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		ТекущийИндексБанкКасса = Индекс;
		ОткрытьФорму("Обработка.ЗагрузкаКурсовВалют.Форма.ПодборВалютИзКлассификатора",, ЭтотОбъект);
	ИначеЕсли ЗначениеЗаполнено(Элемент.Значение) Тогда
		Валюта = Элемент.Значение;
		СтрокаТабличнойЧасти = ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками[Индекс];
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Сотрудник", СтрокаТабличнойЧасти.Сотрудник);
		СтруктураОтбора.Вставить("Валюта", Валюта);
		Если ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками.НайтиСтроки(СтруктураОтбора).Количество()>0 Тогда
			Возврат;
		КонецЕсли; 
		НоваяСтрока = ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками.Добавить();
		НоваяСтрока.Сотрудник = СтрокаТабличнойЧасти.Сотрудник;
		НоваяСтрока.Валюта = Валюта;
		Если НЕ УчетВалютныхОпераций Тогда
			ВключитьИспользованиеВалютныхОпераций();
		КонецЕсли; 
		ОбновитьЭлементыФормы();
		Если НЕ ПустаяСтрока(ИмяТекущегоЭлемента) Тогда
			ТекущийЭлемент = Элементы[ИмяТекущегоЭлемента];
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область Навигация

&НаКлиенте
Процедура Далее(Команда)
	
	Отказ = Ложь;
	ВыполнитьПроверкиПриПереходеНаСледующуюСтраницу(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущийНомерСтраницы >= ПоследняяСтраница-1 Тогда
		СохранитьИзменения();
		Возврат;
	КонецЕсли;
	
	ТекущийНомерСтраницы = ?(ТекущийНомерСтраницы + 1 > ПоследняяСтраница, ПоследняяСтраница, ТекущийНомерСтраницы + 1);
	ШагМобильныйКлиент = ТекущийНомерСтраницы;
	УстановитьАктивнуюСтраницу();
	УстановитьДоступностьКнопок();
	
КонецПроцедуры // Далее()

&НаКлиенте
Процедура Назад(Команда)
	
	Отказ = Ложь;
	ВыполнитьПроверкиПриПереходеНаСледующуюСтраницу(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийНомерСтраницы = ?(ТекущийНомерСтраницы - 1 < ПерваяСтраница, ПерваяСтраница, ТекущийНомерСтраницы - 1);
	ШагМобильныйКлиент = ТекущийНомерСтраницы;
	УстановитьАктивнуюСтраницу();
	УстановитьДоступностьКнопок();
	
КонецПроцедуры // Назад()

&НаКлиенте
Процедура ЗаголовокШаг0Нажатие(Элемент)
	
	УстановитьШаг(0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокШаг1Нажатие(Элемент)
	
	УстановитьШаг(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокШаг2Нажатие(Элемент)
	
	УстановитьШаг(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокШаг3Нажатие(Элемент)
	
	УстановитьШаг(3);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокШаг4Нажатие(Элемент)
	
	УстановитьШаг(4);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокШаг5Нажатие(Элемент)
	
	УстановитьШаг(5);
	
КонецПроцедуры

&НаКлиенте
Процедура ШагиМобильныйКлиентПриИзменении(Элемент)
	
	УстановитьШаг(ШагМобильныйКлиент);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьШаг(НомерШага)
	
	Если НомерШага<0 И НомерШага>5 Тогда
		ШагМобильныйКлиент = ТекущийНомерСтраницы;
		Возврат;
	КонецЕсли; 	
	
	Если НомерШага>0 Тогда
		Отказ = Ложь;
		ВыполнитьПроверкиПриПереходеНаСледующуюСтраницу(Отказ);
		Если Отказ Тогда
			ШагМобильныйКлиент = ТекущийНомерСтраницы;
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	Если НомерШага<5 Тогда
		ТекущийНомерСтраницы = НомерШага;
		УстановитьАктивнуюСтраницу();
		УстановитьДоступностьКнопок();
	Иначе
		СохранитьИзменения();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 
 
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьЦенуПродажиПоФормуле(Команда)
	
	ПараметрыФормулы = Новый Структура;
	ПараметрыФормулы.Вставить("Формула",			ФормулаРасчетаЦеныПродажи);
	ПараметрыФормулы.Вставить("ЭтоФормированиеЦен",	Ложь);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КонструкторФормулЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ВидыЦен.Форма.КонструкторФормул", ПараметрыФормулы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторФормулЗавершение(Результат, ДополнительныеДанные) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ТипЗнч(Результат) = Тип("Структура")
		ИЛИ НЕ Результат.Свойство("Результат")
		ИЛИ НЕ Результат.Результат = КодВозвратаДиалога.Да Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ФормулаРасчетаЦеныПродажи = Результат.Формула;
	ЗаполнитьПоФормуле();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоФормуле()
	Перем ТаблицаОперандов;
	
	НачатьТранзакцию();
	
	Если Элементы.СтраницыОстаткиТоваров.ТекущаяСтраница <> Элементы.СтраницаСобственныеТовары Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПериодРасчета = ?(ЗначениеЗаполнено(ДатаОстатков), ДатаОстатков, ТекущаяДатаСеанса());
	
	ЗаписатьИзмененияЦен(Истина, Ложь, Ложь);
	
	ИмяТаблицы		= "Запасы";
	ВидЦен			= ВидЦенПродажи;
	ТаблицаФормы	= ВводНачальныхОстатковТовары[ИмяТаблицы].Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаФормы", ТаблицаФормы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаФормы.Номенклатура КАК Номенклатура,
	|	ТаблицаФормы.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ врТаблицаФормы
	|ИЗ
	|	&ТаблицаФормы КАК ТаблицаФормы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаФормы.Номенклатура КАК Номенклатура,
	|	ТаблицаФормы.Характеристика КАК Характеристика
	|ИЗ
	|	врТаблицаФормы КАК ТаблицаФормы
	|ГДЕ
	|	ТаблицаФормы.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаФормы.Номенклатура КАК Номенклатура,
	|	ТаблицаФормы.Характеристика КАК Характеристика
	|ИЗ
	|	врТаблицаФормы КАК ТаблицаФормы
	|ГДЕ
	|	ТаблицаФормы.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	КоллекцииДанныхФормы = Новый Структура("ТаблицаФормыНоменклатуры, ТаблицаФормыХарактеристик", РезультатЗапроса[1].Выгрузить(), РезультатЗапроса[2].Выгрузить());
	
	СоответствиеЦен = Новый Соответствие;
	СоответствиеЦен.Вставить(ВидЦен, Новый Массив);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ПериодРасчета", ПериодРасчета);
	ПараметрыРасчета.Вставить("Формула", ФормулаРасчетаЦеныПродажи);
	ПараметрыРасчета.Вставить("ВидыЦенКПересчету", СоответствиеЦен);
	ПараметрыРасчета.Вставить("ПоказыватьХарактеристики", ИспользоватьХарактеристики);
	ПараметрыРасчета.Вставить("УстанавливатьХарактеристикамБезЦен", Ложь);
	ПараметрыРасчета.Вставить("КоллекцииДанныхФормы", КоллекцииДанныхФормы);
	
	Документы.УстановкаЦенНоменклатуры.ПодготовитьОперандыИДанные(ПараметрыРасчета, ТаблицаОперандов);
	
	КоллекцияНоменклатуры = Новый ТаблицаЗначений;
	КоллекцияНоменклатуры.Колонки.Добавить("КлючСвязиНоменклатура",		Новый ОписаниеТипов("Число"));
	КоллекцияНоменклатуры.Колонки.Добавить("КлючСвязиХарактеристика",	Новый ОписаниеТипов("Число"));
	КоллекцияНоменклатуры.Колонки.Добавить("Период", 					Новый ОписаниеТипов("Дата"));
	КоллекцияНоменклатуры.Колонки.Добавить("ВидЦен", 					Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	КоллекцияНоменклатуры.Колонки.Добавить("Номенклатура",				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	КоллекцияНоменклатуры.Колонки.Добавить("Характеристика",			Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КоллекцияНоменклатуры.Колонки.Добавить("Цена",						Новый ОписаниеТипов("Число"));
	КоллекцияНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения",			Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения, СправочникСсылка.КлассификаторЕдиницИзмерения"));
	КоллекцияНоменклатуры.Колонки.Добавить("ТекущееЗначение",			Новый ОписаниеТипов("Число"));
	КоллекцияНоменклатуры.Колонки.Добавить("Актуальность",				Новый ОписаниеТипов("Булево"));
	КоллекцияНоменклатуры.Колонки.Добавить("ВключаяХарактеристики",		Новый ОписаниеТипов("Булево"));
	КоллекцияНоменклатуры.Колонки.Добавить("Автор",						Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	КоллекцияНоменклатуры.Колонки.Добавить("Формула",					Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1024)));
	КоллекцияНоменклатуры.Колонки.Добавить("ПересчетВыполнен",			Новый ОписаниеТипов("Булево"));
	
	Для каждого СтрокаТаблицы Из ВводНачальныхОстатковТовары[ИмяТаблицы] Цикл
		
		СтрКоллекции = КоллекцияНоменклатуры.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрКоллекции, СтрокаТаблицы, "Номенклатура,Характеристика,ЕдиницаИзмерения");
		
		СтрКоллекции.Формула				= ФормулаРасчетаЦеныПродажи;
		СтрКоллекции.Период					= ДатаОстатков;
		СтрКоллекции.ВидЦен					= ВидЦен;
		СтрКоллекции.ТекущееЗначение		= СтрокаТаблицы.ЦенаПродажи;
		СтрКоллекции.КлючСвязиНоменклатура	= СтрокаТаблицы.ПолучитьИдентификатор();
		
	КонецЦикла; 
	
	ПараметрыРасчетаКоллекции = Новый Структура;
	ПараметрыРасчетаКоллекции.Вставить("ВидЦен",	ВидЦенПродажи);
	
	КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВидЦенПродажи.ВалютаЦены, ПериодРасчета);
	ПараметрыРасчетаКоллекции.Вставить("Курс",		?(ЗначениеЗаполнено(КурсВалюты.Курс), КурсВалюты.Курс, 1));
	ПараметрыРасчетаКоллекции.Вставить("Кратность",	?(ЗначениеЗаполнено(КурсВалюты.Кратность), КурсВалюты.Кратность, 1));
	
	ЦенообразованиеФормулыСервер.РассчитатьДанныеКоллекции(КоллекцияНоменклатуры, ТаблицаОперандов, ПараметрыРасчетаКоллекции, Ложь, Истина);
	
	ОтменитьТранзакцию();
	
	Для каждого СтрокаКоллекции Из КоллекцияНоменклатуры Цикл
		
		ТекущаяСтрокаТабличнойЧасти = ВводНачальныхОстатковТовары[ИмяТаблицы].НайтиПоИдентификатору(СтрокаКоллекции.КлючСвязиНоменклатура);
		Если ТекущаяСтрокаТабличнойЧасти = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекущаяСтрокаТабличнойЧасти.ЦенаПродажи = СтрокаКоллекции.Цена;
		Если ИмяТаблицы = "ЗапасыПереданные" Тогда
			
			ТекущаяСтрокаТабличнойЧасти.СуммаПродажи = ТекущаяСтрокаТабличнойЧасти.ЦенаПродажи * ТекущаяСтрокаТабличнойЧасти.Количество;
			ТекущаяСтрокаТабличнойЧасти.СуммаРасчетов = ТекущаяСтрокаТабличнойЧасти.СуммаПродажи / КурсРасчетовСервер(ТекущаяСтрокаТабличнойЧасти.Договор);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ТорговоеОборудование

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения(
		"ПоискПоШтрихкодуЗавершение",
		ЭтотОбъект, 
		Новый Структура("ТекШтрихкод", ТекШтрихкод)
	);
	
	#Если МобильныйКлиент Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду",,,,,,ОбработкаЗавершения);
	#Иначе
		ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкоду()

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтаФорма);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	Отказ = Ложь;
	ЗаписатьИзмененияФормы(,Отказ);
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	Модифицированность = Ложь;
	ВыгружатьЦены = Ложь;
	Если Элементы.СтраницыОстаткиТоваров.ТекущаяСтраница = Элементы.СтраницаСобственныеТовары Тогда
		ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "Запасы");
		ВыгружатьЦены = Истина;
	ИначеЕсли Элементы.СтраницыОстаткиТоваров.ТекущаяСтраница = Элементы.СтраницаПринятыеТовары Тогда
		ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "ЗапасыПринятые");
	ИначеЕсли Элементы.СтраницыОстаткиТоваров.ТекущаяСтраница = Элементы.СтраницаПереданныеТовары Тогда
		ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "ЗапасыПереданные");
	ИначеЕсли Элементы.СтраницыОстаткиТоваров.ТекущаяСтраница = Элементы.СтраницаТоварыВРазрезеГТД Тогда
		ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "ЗапасыВРазрезеГТД");
	КонецЕсли;
	ДополнительныеПараметры.Вставить("ИмяРеквизитаОбъекта", "ВводНачальныхОстатковТовары");
	
	ПодключаемоеОборудованиеУНФКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, ВыгружатьЦены, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ИмяТекущейСтраницы = Элементы.СтраницыОстаткиТоваров.ТекущаяСтраница.Имя;
	Если ИмяТекущейСтраницы = "СтраницаСобственныеТовары" Тогда
		ИмяТабличнойЧасти = "ВводНачальныхОстатковТоварыЗапасы";
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаПринятыеТовары" Тогда
		ИмяТабличнойЧасти = "ВводНачальныхОстатковТоварыЗапасыПринятые";
	Иначе
		Возврат;
	КонецЕсли;
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры // ПолучитьВес()

&НаКлиенте
Процедура ПолучитьВесЗавершение(Параметры) Экспорт
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	ИмяТекущейСтраницы = Элементы.СтраницыОстаткиТоваров.ТекущаяСтраница.Имя;
	Если ИмяТекущейСтраницы = "СтраницаПринятыеТовары" Тогда
		ПересчитатьИтогиКлиент("ЗапасыПринятые");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ДенежныеСредства

&НаКлиенте
Процедура ДобавитьКассу(Команда)
	
	СтруктураОткрытия = Новый Структура("РежимВыбора", Истина);
	ОткрытьФорму("Справочник.Кассы.ФормаОбъекта", СтруктураОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьБанковскийСчет(Команда)
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Владелец", Организация);
	СтруктураОткрытия = Новый Структура("РежимВыбора", Истина);
	СтруктураОткрытия.Вставить("ЗначенияЗаполнения", СтруктураРеквизитов);
	ОткрытьФорму("Справочник.БанковскиеСчета.ФормаОбъекта", СтруктураОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПодотчетника(Команда)
	
	СтруктураОткрытия = Новый Структура("РежимВыбора", Истина);
	Если КэшЗначений.СправочникСотрудниковПустой Тогда
		ОткрытьФорму("Справочник.Сотрудники.ФормаОбъекта", СтруктураОткрытия, ЭтотОбъект);
	Иначе
		ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора", СтруктураОткрытия, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамТовара(Команда)
	Если ВводНачальныхОстатковЗакупкиТоваровДляУСН.ЗакупкиДляКУДИР.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоОстаткамТовараЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоОстаткамТовараНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамТовараЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Если КодВозврата=КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоОстаткамТовараНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область Общие

&НаСервере
Процедура ЗаполнитьПоОстаткамТовараНаСервере()
	
	ВводНачальныхОстатковЗакупкиТоваровДляУСН.ЗакупкиДляКУДИР.Загрузить(ВводНачальныхОстатковТовары.Запасы.Выгрузить(,"Номенклатура,Количество,Сумма"));
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанныеЗакупкиТоваровДляУСН(РезультатЗагрузки)
	
	НачатьТранзакцию();
	
	Попытка
		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = ВводНачальныхОстатковЗакупкиТоваровДляУСН.ЗакупкиДляКУДИР.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ОписаниеОшибки());
		                     		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВводыОстатков()
	
	// Очистка объектов на форме при изменении организации
	Если ЗначениеЗаполнено(ВводНачальныхОстатковБанкИКасса.Ссылка) Тогда
		ЗначениеВРеквизитФормы(Документы.ВводНачальныхОстатков.СоздатьДокумент(), "ВводНачальныхОстатковБанкИКасса");
	Иначе
		ВводНачальныхОстатковБанкИКасса.ДенежныеСредства.Очистить();
	КонецЕсли; 
	Если ЗначениеЗаполнено(ВводНачальныхОстатковПодотчет.Ссылка) Тогда
		ЗначениеВРеквизитФормы(Документы.ВводНачальныхОстатков.СоздатьДокумент(), "ВводНачальныхОстатковПодотчет");
	КонецЕсли; 
	Если ЗначениеЗаполнено(ВводНачальныхОстатковТовары.Ссылка) Тогда
		ЗначениеВРеквизитФормы(Документы.ВводНачальныхОстатков.СоздатьДокумент(), "ВводНачальныхОстатковТовары");
	КонецЕсли; 
	Если ЗначениеЗаполнено(ВводНачальныхОстатковРасчетыСКонтрагентами.Ссылка) Тогда
		ЗначениеВРеквизитФормы(Документы.ВводНачальныхОстатков.СоздатьДокумент(), "ВводНачальныхОстатковРасчетыСКонтрагентами");
	КонецЕсли; 
	Если ЗначениеЗаполнено(ВводНачальныхОстатковЗарплата.Ссылка) Тогда
		ЗначениеВРеквизитФормы(Документы.ВводНачальныхОстатков.СоздатьДокумент(), "ВводНачальныхОстатковЗарплата");
	КонецЕсли; 
	Если ЗначениеЗаполнено(ВводНачальныхОстатковНалоги.Ссылка) Тогда
		ЗначениеВРеквизитФормы(Документы.ВводНачальныхОстатков.СоздатьДокумент(), "ВводНачальныхОстатковНалоги");
	КонецЕсли; 
	Если ЗначениеЗаполнено(ВводНачальныхОстатковЭквайринг.Ссылка) Тогда
		ЗначениеВРеквизитФормы(Документы.ВводНачальныхОстатков.СоздатьДокумент(), "ВводНачальныхОстатковЭквайринг");
	КонецЕсли; 
	Если ЗначениеЗаполнено(ВводНачальныхОстатковИмущество.Ссылка) Тогда
		ЗначениеВРеквизитФормы(Документы.ВводНачальныхОстатков.СоздатьДокумент(), "ВводНачальныхОстатковИмущество");
	КонецЕсли; 
	Если ЗначениеЗаполнено(ВводНачальныхОстатковПрочее.Ссылка) Тогда
		ЗначениеВРеквизитФормы(Документы.ВводНачальныхОстатков.СоздатьДокумент(), "ВводНачальныхОстатковПрочее");
	КонецЕсли; 
	Если ЗначениеЗаполнено(ВводНачальныхОстатковЗакупкиТоваровДляУСН.Ссылка) Тогда
		ЗначениеВРеквизитФормы(Документы.ВводНачальныхОстатков.СоздатьДокумент(), "ВводНачальныхОстатковЗакупкиТоваровДляУСН");
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВводНачальныхОстатков.Ссылка,
	|	ВводНачальныхОстатков.Комментарий,
	|	ВводНачальныхОстатков.РазделУчета,
	|	ВводНачальныхОстатков.Автоформирование,
	|	ВводНачальныхОстатков.Дата
	|ИЗ
	|	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
	|ГДЕ
	|	ВводНачальныхОстатков.Комментарий ПОДОБНО &Комментарий
	|	И (ВводНачальныхОстатков.Организация = &Организация
	|			ИЛИ &УчетПоНесколькимОрганизациям = ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("Комментарий", "# Документ введен помощником ввода остатков.");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("УчетПоНесколькимОрганизациям", УчетПоНесколькимОрганизациям);
	
	ВыборкаРезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Элементы.ДатаОстатков.ПредупреждениеПриРедактировании = "";
	Элементы.ДатаОстатков.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	Пока ВыборкаРезультатЗапроса.Следующий() Цикл
		Если ВыборкаРезультатЗапроса.РазделУчета = "Денежные средства" Тогда
			ЗначениеВРеквизитФормы(ВыборкаРезультатЗапроса.Ссылка.ПолучитьОбъект(), "ВводНачальныхОстатковБанкИКасса");
		ИначеЕсли ВыборкаРезультатЗапроса.РазделУчета = "Расчеты с подотчетниками" Тогда
			ЗначениеВРеквизитФормы(ВыборкаРезультатЗапроса.Ссылка.ПолучитьОбъект(), "ВводНачальныхОстатковПодотчет");
		ИначеЕсли ВыборкаРезультатЗапроса.РазделУчета = "Запасы" Тогда
			ЗначениеВРеквизитФормы(ВыборкаРезультатЗапроса.Ссылка.ПолучитьОбъект(), "ВводНачальныхОстатковТовары");
			ЗаполнитьЦены(Ложь,, Ложь);
		ИначеЕсли ВыборкаРезультатЗапроса.РазделУчета = "Расчеты с поставщиками и покупателями" Тогда
			ЗначениеВРеквизитФормы(ВыборкаРезультатЗапроса.Ссылка.ПолучитьОбъект(), "ВводНачальныхОстатковРасчетыСКонтрагентами");
		ИначеЕсли ВыборкаРезультатЗапроса.РазделУчета = "Расчеты с персоналом" Тогда
			ЗначениеВРеквизитФормы(ВыборкаРезультатЗапроса.Ссылка.ПолучитьОбъект(), "ВводНачальныхОстатковЗарплата");
		ИначеЕсли ВыборкаРезультатЗапроса.РазделУчета = "Расчеты по налогам" Тогда
			ЗначениеВРеквизитФормы(ВыборкаРезультатЗапроса.Ссылка.ПолучитьОбъект(), "ВводНачальныхОстатковНалоги");
		ИначеЕсли ВыборкаРезультатЗапроса.РазделУчета = "Эквайринг" Тогда
			ЗначениеВРеквизитФормы(ВыборкаРезультатЗапроса.Ссылка.ПолучитьОбъект(), "ВводНачальныхОстатковЭквайринг");
		ИначеЕсли ВыборкаРезультатЗапроса.РазделУчета = "Имущество" Тогда
			ЗначениеВРеквизитФормы(ВыборкаРезультатЗапроса.Ссылка.ПолучитьОбъект(), "ВводНачальныхОстатковИмущество");
		ИначеЕсли ВыборкаРезультатЗапроса.РазделУчета = "Прочие разделы" Тогда
			ЗначениеВРеквизитФормы(ВыборкаРезультатЗапроса.Ссылка.ПолучитьОбъект(), "ВводНачальныхОстатковПрочее");
		ИначеЕсли ВыборкаРезультатЗапроса.РазделУчета = "Закупки товаров для УСН" Тогда
			ЗначениеВРеквизитФормы(ВыборкаРезультатЗапроса.Ссылка.ПолучитьОбъект(), "ВводНачальныхОстатковЗакупкиТоваровДляУСН");
		ИначеЕсли ВыборкаРезультатЗапроса.РазделУчета = "Расчеты с фондами по страховым взносам" Тогда
			ЗначениеВРеквизитФормы(ВыборкаРезультатЗапроса.Ссылка.ПолучитьОбъект(), "ВводНачальныхОстатковРасчетыСФондамиПоСтраховымВзносам");
		КонецЕсли;
		ДатаОстатков = ВыборкаРезультатЗапроса.Дата;
		Элементы.ДатаОстатков.ПредупреждениеПриРедактировании = НСтр(
			"ru = 'Дата изменится также для всех остатков, введенных ранее'");
		Элементы.ДатаОстатков.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
	КонецЦикла;
	
	// Заполнение дополнительных реквизитов табличной части.
	УстановитьВидимостьРеквизитовТЧ("РасчетыСПоставщиками");
	УстановитьВидимостьРеквизитовТЧ("РасчетыСПокупателями");
	УстановитьВидимостьРеквизитовТЧ("ЗапасыПереданные");
	УстановитьВидимостьРеквизитовТЧ("ЗапасыПринятые");
	УстановитьВидимостьРеквизитовТЧ("ПрочиеРазделы");
	
	ЗаполнитьДаннымиПоУмолчанию();
	ОбновитьЭлементыФормы(Истина);
	ЗаполнитьПризнакиИспользованияХарактеристик();
	ОбновитьКурсыКонтрагентов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыРаботыПрограммы()
	
	УчетПоНесколькимСкладам = ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам");
	УчетВРазличныхЕдиницахИзмерения = ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения");
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	ИспользоватьПартии = ПолучитьФункциональнуюОпцию("ИспользоватьПартии");
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	Компания = ?(Константы.УчетПоКомпании.Получить(), Константы.Компания.Получить(), Справочники.Организации.ПустаяСсылка());
	УчетПоНесколькимОрганизациям = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	ВестиУчетРасчетовСБанкомЭквайрером = ПолучитьФункциональнуюОпцию("ВестиУчетРасчетовСБанкомЭквайрером");
	
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ЭлектронныеВесы", , МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	ИспользоватьЭлектронныеВесы = ИспользоватьПодключаемоеОборудование И СписокЭлектронныхВесов.Количество()>0;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступность(ИмяСобытия = "")
	
	ПолучитьСтруктуруВидовОпераций();
	
	Если ИмяСобытия = "ОбновитьИнтерфейс" Тогда
		Элементы.ВводНачальныхОстатковТоварыЗапасы.Видимость = Ложь;
		Элементы.ВводНачальныхОстатковТоварыЗапасы.Видимость = Истина;
		Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые.Видимость = Ложь;
		Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые.Видимость = Истина;
		Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.Видимость = Ложь;
		Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.Видимость = Истина;
		Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщиками.Видимость = Ложь;
		Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщиками.Видимость = Истина;
		Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателями.Видимость = Ложь;
		Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателями.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиСуммаРег.Видимость = НЕ ВалютаУчетаИНацСовпадают;
	Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиСуммаРег.Видимость = НЕ ВалютаУчетаИНацСовпадают;
	
	// ПодключаемоеОборудование
	Элементы.ВводНачальныхОстатковТоварыЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	Элементы.ВводНачальныхОстатковТоварыЗапасыПринятыеЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	Элементы.ВводНачальныхОстатковТоварыЗапасыПереданныеЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	Элементы.ВводНачальныхОстатковТоварыЗапасыВРазрезеГТДЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	Элементы.ВводНачальныхОстатковТоварыЗапасыПолучитьВес.Видимость = ИспользоватьЭлектронныеВесы;
	Элементы.ВводНачальныхОстатковТоварыЗапасыПринятыеПолучитьВес.Видимость = ИспользоватьЭлектронныеВесы;
	// Конец ПодключаемоеОборудование
	
	Элементы.Организация.Видимость = УчетПоНесколькимОрганизациям;
	Элементы.СтраницаРасчетыПоЭквайрингу.Видимость = ВестиУчетРасчетовСБанкомЭквайрером;
	
	УстановитьОтборыПоЭквайрингу();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКурсов()
	
	ВалютаСебестоимости = ВидЦенСебестоимости.ВалютаЦены;
	Если НЕ ЗначениеЗаполнено(ВалютаСебестоимости) Тогда
		КурсСебестоимости = 1;
		КратностьСебестоимости = 1;
	Иначе
		КурсыСебестоимости = ЦенообразованиеСервер.ПолучитьКурсыВалют(ВалютаСебестоимости, ВалютаУчета, ДатаОстатков); 
		КурсСебестоимости = КурсыСебестоимости.КурсНач / КурсыСебестоимости.Курс;
		КратностьСебестоимости = КурсыСебестоимости.КратностьНач / КурсыСебестоимости.Кратность;
	КонецЕсли;
	
	ИзмененаВалютаПродажи = (ВалютаПродажи<>ВидЦенПродажи.ВалютаЦены);
	ВалютаПродажи = ВидЦенПродажи.ВалютаЦены;
	Если НЕ ЗначениеЗаполнено(ВалютаПродажи) Тогда
		КурсПродажи = 1;
		КратностьПродажи = 1;
	Иначе
		КурсыПродажи = ЦенообразованиеСервер.ПолучитьКурсыВалют(ВалютаПродажи, ВалютаУчета, ДатаОстатков); 
		КурсПродажи = КурсыПродажи.КурсНач / КурсыПродажи.Курс;
		КратностьПродажи = КурсыПродажи.КратностьНач / КурсыПродажи.Кратность;
	КонецЕсли;
	
	Если ИзмененаВалютаПродажи Тогда
		КурсыКонтрагентов = Новый ФиксированноеСоответствие(Новый Соответствие);
		ОбновитьКурсыКонтрагентов();
	КонецЕсли; 
	
	ВалютаУчетаПредставление = ВалютаУчета.СимвольноеПредставление;
	
	// Себестоимость
	
	ОтображатьКурсСебестоимости = (ВалютаСебестоимости<>ВалютаУчета);
	ВалютаСебестоимостиПредставление = ВалютаСебестоимости.СимвольноеПредставление;
	Если ПустаяСтрока(ВалютаСебестоимостиПредставление) Тогда
		ВалютаСебестоимостиПредставление = Строка(ВалютаСебестоимости);
	КонецЕсли; 
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КурсСебестоимостиПредставление", "Видимость", ОтображатьКурсСебестоимости);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВводНачальныхОстатковТоварыЗапасыЦенаСебестоимости", "Видимость", ОтображатьКурсСебестоимости);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВводНачальныхОстатковТоварыЗапасыЦенаСебестоимости", "Заголовок", СтрШаблон(НСтр("ru = 'Цена, %1'"), ВалютаСебестоимостиПредставление));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВводНачальныхОстатковТоварыЗапасыСуммаСебестоимости", "Видимость", ОтображатьКурсСебестоимости);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВводНачальныхОстатковТоварыЗапасыСуммаСебестоимости", "Заголовок", СтрШаблон(НСтр("ru = 'Сумма, %1'"), ВалютаСебестоимостиПредставление));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВводНачальныхОстатковТоварыЗапасыЦена", "Видимость", НЕ ОтображатьКурсСебестоимости);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВводНачальныхОстатковТоварыЗапасыСумма", "Заголовок", 
		?(ОтображатьКурсСебестоимости, 
		СтрШаблон(НСтр("ru = 'Сумма учета, %1'"), ВалютаУчетаПредставление), 
		НСтр("ru = 'Сумма учета'")));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВводНачальныхОстатковТоварыЗапасыПереданныеЦена", "Заголовок", 
		?(ОтображатьКурсСебестоимости, 
		СтрШаблон(НСтр("ru = 'Цена, %1'"), ВалютаСебестоимостиПредставление), 
		НСтр("ru = 'Цена'")));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВводНачальныхОстатковТоварыЗапасыПереданныеСуммаСебестоимости", "Видимость", ОтображатьКурсСебестоимости);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВводНачальныхОстатковТоварыЗапасыПереданныеСуммаСебестоимости", "Заголовок", СтрШаблон(НСтр("ru = 'Сумма, %1'"), ВалютаСебестоимостиПредставление));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВводНачальныхОстатковТоварыЗапасыПереданныеСебестоимость", "Заголовок", 
		?(ОтображатьКурсСебестоимости, 
		СтрШаблон(НСтр("ru = 'Себестоимость, %1'"), ВалютаУчетаПредставление), 
		НСтр("ru = 'Себестоимость'")));
	
	// Продажи	
	
	ОтображатьКурсПродажи = (ВалютаПродажи<>ВалютаУчета);
	ВалютаПродажиПредставление = ВалютаПродажи.СимвольноеПредставление;
	Если ПустаяСтрока(ВалютаПродажиПредставление) Тогда
		ВалютаПродажиПредставление = Строка(ВалютаПродажи);
	КонецЕсли; 
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КурсПродажиПредставление", "Видимость", ОтображатьКурсПродажи);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВводНачальныхОстатковТоварыЗапасыЦенаПродажи", "Заголовок", 
		?(ОтображатьКурсПродажи, 
		СтрШаблон(НСтр("ru = 'Цена продажи, %1'"), ВалютаПродажиПредставление), 
		НСтр("ru = 'Цена продажи'")));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВводНачальныхОстатковТоварыЗапасыПринятыеЦена", "Заголовок", 
		?(ОтображатьКурсПродажи, 
		СтрШаблон(НСтр("ru = 'Цена, %1'"), ВалютаПродажиПредставление), 
		НСтр("ru = 'Цена'")));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВводНачальныхОстатковТоварыЗапасыПринятыеСуммаПродажи", "Видимость", ОтображатьКурсПродажи);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВводНачальныхОстатковТоварыЗапасыПринятыеСуммаПродажи", "Заголовок", СтрШаблон(НСтр("ru = 'Сумма, %1'"), ВалютаПродажиПредставление));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВводНачальныхОстатковТоварыЗапасыПереданныеЦенаПродажи", "Заголовок", 
		?(ОтображатьКурсПродажи, 
		СтрШаблон(НСтр("ru = 'Цена продажи, %1'"), ВалютаПродажиПредставление), 
		НСтр("ru = 'Цена продажи'")));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВводНачальныхОстатковТоварыЗапасыПереданныеСуммаПродажи", "Видимость", ОтображатьКурсПродажи);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВводНачальныхОстатковТоварыЗапасыПереданныеСуммаПродажи", "Заголовок", СтрШаблон(НСтр("ru = 'Сумма продажи, %1'"), ВалютаПродажиПредставление));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВводНачальныхОстатковТоварыЗапасыПереданныеСуммаРасчетов", "Заголовок", 
		?(ОтображатьКурсПродажи, 
		СтрШаблон(НСтр("ru = 'Сумма расчетов, %1'"), ВалютаУчетаПредставление), 
		НСтр("ru = 'Сумма расчетов'")));
		
	КурсСебестоимостиПредставление = СтрШаблон(НСтр("ru = '%1 %2 за %3 %4'"), КурсСебестоимости, ВалютаУчетаПредставление, КратностьСебестоимости, ВалютаСебестоимостиПредставление);
	КурсПродажиПредставление = СтрШаблон(НСтр("ru = '%1 %2 за %3 %4'"), КурсПродажи, ВалютаУчетаПредставление, КратностьПродажи, ВалютаПродажиПредставление);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовДляМобильногоКлиента()
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	ШагМобильныйКлиент = ТекущийНомерСтраницы;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Шаги", "Видимость", Ложь);	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ШагиМобильныйКлиент", "Видимость", Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СобственныеТоварыНиз", "ГоризонтальноеПоложениеПодчиненных", ГоризонтальноеПоложениеЭлемента.Авто);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПринятыеТоварыНиз", "ГоризонтальноеПоложениеПодчиненных", ГоризонтальноеПоложениеЭлемента.Авто);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПереданныеТоварыНиз", "ГоризонтальноеПоложениеПодчиненных", ГоризонтальноеПоложениеЭлемента.Авто);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыРаботыФормы()
	
	КэшЗначений = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ПометкаУдаления
	|	И НЕ Номенклатура.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ПометкаУдаления
	|	И НЕ Контрагенты.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Сотрудники.Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	НЕ Сотрудники.ПометкаУдаления
	|	И НЕ Сотрудники.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВнеоборотныеАктивы.Ссылка
	|ИЗ
	|	Справочник.ВнеоборотныеАктивы КАК ВнеоборотныеАктивы
	|ГДЕ
	|	НЕ ВнеоборотныеАктивы.ПометкаУдаления
	|	И НЕ ВнеоборотныеАктивы.ЭтоГруппа";
	Результат = Запрос.ВыполнитьПакет();
	
	КэшЗначений.Вставить("СправочникНоменклатурыПустой", Результат[0].Пустой());
	КэшЗначений.Вставить("СправочникКонтрагентовПустой", Результат[1].Пустой());
	КэшЗначений.Вставить("СправочникСотрудниковПустой", Результат[2].Пустой());
	КэшЗначений.Вставить("СправочникИмуществаПустой", Результат[3].Пустой());
	
	ВидЦенПродажи = ХранилищеСистемныхНастроек.Загрузить("ПомощникВводаНачальныхОстатков", "ВидЦенПродажи",, "");
	Если НЕ ЗначениеЗаполнено(ВидЦенПродажи) Тогда
		ВидЦенПродажи = Справочники.ВидыЦен.Оптовая;
	КонецЕсли; 
	ВидЦенСебестоимости = ХранилищеСистемныхНастроек.Загрузить("ПомощникВводаНачальныхОстатков", "ВидЦенСебестоимости",, "");
	Если НЕ ЗначениеЗаполнено(ВидЦенСебестоимости) Тогда
		ВидЦенСебестоимости = Справочники.ВидыЦен.Учетная;
	КонецЕсли;
	
	ВалютаУчетаИНацСовпадают = (УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета() = УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиПоУмолчанию(Раздел = "")
	
	Если ПустаяСтрока(Раздел) ИЛИ Раздел="ДенежныеСредства" Тогда
		Если ПустаяСтрока(Раздел) Тогда
			УдалитьПустыеСтроки("ДенежныеСредства");
		КонецЕсли; 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДобавленныеКассыИСчета", ВводНачальныхОстатковБанкИКасса.ДенежныеСредства.Выгрузить(, "БанковскийСчетКасса").ВыгрузитьКолонку("БанковскийСчетКасса"));
		Запрос.УстановитьПараметр("УчетПоНесколькимОрганизациям", УчетПоНесколькимОрганизациям);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Кассы.Ссылка КАК БанковскийСчетКасса,
		|	ВЫБОР
		|		КОГДА Кассы.ВалютаПоУмолчанию = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|			ТОГДА ВалютаУчета.Значение
		|		ИНАЧЕ Кассы.ВалютаПоУмолчанию
		|	КОНЕЦ КАК ВалютаДенежныхСредств
		|ИЗ
		|	Справочник.Кассы КАК Кассы,
		|	Константа.ВалютаУчета КАК ВалютаУчета
		|ГДЕ
		|	НЕ Кассы.ПометкаУдаления
		|	И НЕ Кассы.Ссылка В (&ДобавленныеКассыИСчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	БанковскиеСчета.Ссылка,
		|	ВЫБОР
		|		КОГДА БанковскиеСчета.ВалютаДенежныхСредств = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|			ТОГДА ВалютаУчета.Значение
		|		ИНАЧЕ БанковскиеСчета.ВалютаДенежныхСредств
		|	КОНЕЦ
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета,
		|	Константа.ВалютаУчета КАК ВалютаУчета
		|ГДЕ
		|	НЕ БанковскиеСчета.ПометкаУдаления
		|	И НЕ БанковскиеСчета.Ссылка В (&ДобавленныеКассыИСчета)
		|	И БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации
		|	И (БанковскиеСчета.Владелец = &Организация
		|			ИЛИ НЕ &УчетПоНесколькимОрганизациям)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Стр = ВводНачальныхОстатковБанкИКасса.ДенежныеСредства.Добавить();
			ЗаполнитьЗначенияСвойств(Стр, Выборка);
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыФормы(ПолноеОбновление = Ложь)
	
	// Деньги
	Если ПолноеОбновление Тогда
		МассивЭлементов = Новый Массив;
		УдалитьЭлементыРекурсивно(Элементы.Шаг1Реквизиты, МассивЭлементов);
		Для каждого Элемент Из МассивЭлементов Цикл
			Элементы.Удалить(Элемент);
		КонецЦикла; 
	КонецЕсли;
	
	ИмяТекущегоЭлемента = "";
	ШиринаЗаголовка = 0;
	Для каждого Стр Из ВводНачальныхОстатковБанкИКасса.ДенежныеСредства Цикл
		ШиринаЗаголовка = Макс(ШиринаЗаголовка, СтрДлина(Строка(Стр.БанковскийСчетКасса)));
	КонецЦикла;
	Для каждого Стр Из ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками Цикл
		ШиринаЗаголовка = Макс(ШиринаЗаголовка, СтрДлина(Строка(Стр.Сотрудник)));
	КонецЦикла;
	ШиринаЗаголовка = ?(ШиринаЗаголовка=0, 25, Окр(ШиринаЗаголовка/1.3));
	
	ВыведенныеДанные = Новый Соответствие;
	УстановленТекущийЭлемент = Ложь;
	Для каждого Стр Из ВводНачальныхОстатковБанкИКасса.ДенежныеСредства Цикл
		Индекс = ВводНачальныхОстатковБанкИКасса.ДенежныеСредства.Индекс(Стр);
		ИмяЭлемента = "ОстатокБанкКасса" + Формат(Индекс, "ЧН=0; ЧГ=0");
		ИмяГруппы = "Группа"+ИмяЭлемента;
		Если ВыведенныеДанные.Получить(Стр.БанковскийСчетКасса)=Неопределено Тогда
			ВыведенныеДанные.Вставить(Стр.БанковскийСчетКасса, Индекс);
		КонецЕсли; 
		Если НЕ Элементы.Найти(ИмяГруппы) = Неопределено Тогда
			Элементы["Заголовок"+ИмяЭлемента].Ширина = ШиринаЗаголовка;
			Продолжить;
		КонецЕсли;
		ИндексВставки = ВыведенныеДанные.Получить(Стр.БанковскийСчетКасса);
		ГруппаВставки = Элементы.Найти("ГруппаОстатокБанкКасса"+(ИндексВставки+1));
		Если НЕ ИндексВставки=Индекс И НЕ ГруппаВставки=Неопределено Тогда
			Группа = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.Шаг1Реквизиты, ГруппаВставки);
		Иначе
			Группа = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.Шаг1Реквизиты);
		КонецЕсли; 
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		Если НЕ ИндексВставки = Индекс Тогда
			ЭлементЗаголовок = Элементы.Добавить("Заголовок"+ИмяЭлемента, Тип("ДекорацияФормы"), Группа);
			ЭлементЗаголовок.Вид = ВидДекорацииФормы.Надпись;
			ЭлементЗаголовок.Заголовок = " ";
			ЭлементЗаголовок.АвтоМаксимальнаяШирина = Ложь;
			ЭлементЗаголовок.МаксимальнаяШирина = 0;
		Иначе
			ЭлементЗаголовок = Элементы.Добавить("Заголовок"+ИмяЭлемента, Тип("ПолеФормы"), Группа);
			ЭлементЗаголовок.Вид = ВидПоляФормы.ПолеНадписи;
			ЭлементЗаголовок.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ЭлементЗаголовок.ПутьКДанным = "ВводНачальныхОстатковБанкИКасса.ДенежныеСредства["+Индекс+"].БанковскийСчетКасса";
		КонецЕсли; 
		ЭлементЗаголовок.Ширина = ШиринаЗаголовка;
		ЭлементЗаголовок.РастягиватьПоГоризонтали = Ложь;
		ЭлементСумма = Элементы.Добавить("СуммаВал"+ИмяЭлемента, Тип("ПолеФормы"), Группа);
		ЭлементСумма.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементСумма.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементСумма.АвтоОтметкаНезаполненного = Ложь;
		ЭлементСумма.ПутьКДанным = "ВводНачальныхОстатковБанкИКасса.ДенежныеСредства["+Индекс+"].СуммаВал";
		ЭлементСумма.Ширина = 12;
		ЭлементСумма.РастягиватьПоГоризонтали = Ложь;
		ЭлементСумма.УстановитьДействие("ПриИзменении", "Подключаемый_БанкКассаСуммаВалПриИзменении");
		ЭлементВалюта = Элементы.Добавить("Валюта"+ИмяЭлемента, Тип("ДекорацияФормы"), Группа);
		ЭлементВалюта.Вид = ВидДекорацииФормы.Надпись;
		Если ТипЗнч(Стр.БанковскийСчетКасса)=Тип("СправочникСсылка.Кассы") Тогда
			ЭлементВалюта.Гиперссылка = Истина;
			ЭлементВалюта.УстановитьДействие("Нажатие", "Подключаемый_БанкКассаВалютаНажатие");
		КонецЕсли; 
		ЭлементВалюта.Заголовок = Строка(Стр.ВалютаДенежныхСредств);
		ЭлементВалюта.Ширина = 10;
		ЭлементВалюта.РастягиватьПоГоризонтали = Ложь;
		Если НЕ УстановленТекущийЭлемент И Элементы.Страницы.ТекущаяСтраница=Элементы.Шаг1 Тогда
			ИмяТекущегоЭлемента = ЭлементСумма.Имя;
			УстановленТекущийЭлемент = Истина;
		КонецЕсли; 
	КонецЦикла;
	
	//Подотчет
	ВыведенныеДанные = Новый Соответствие;
	УстановленТекущийЭлемент = Ложь;
	Для каждого Стр Из ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками Цикл
		Индекс = ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками.Индекс(Стр);
		ИмяЭлемента = "ОстатокПодотчет"+Формат(Индекс, "ЧН=0; ЧГ=0");
		ИмяГруппы = "Группа"+ИмяЭлемента;
		Если ВыведенныеДанные.Получить(Стр.Сотрудник)=Неопределено Тогда
			ВыведенныеДанные.Вставить(Стр.Сотрудник, Индекс);
		КонецЕсли; 
		Если НЕ Элементы.Найти(ИмяГруппы)=Неопределено Тогда
			Элементы["Заголовок"+ИмяЭлемента].Ширина = ШиринаЗаголовка;
			Продолжить;
		КонецЕсли;
		ИндексВставки = ВыведенныеДанные.Получить(Стр.Сотрудник);
		ГруппаВставки = Элементы.Найти("ГруппаОстатокПодотчет"+(ИндексВставки+1));
		Если НЕ ИндексВставки=Индекс И НЕ ГруппаВставки=Неопределено Тогда
			Группа = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.Шаг1Реквизиты, ГруппаВставки);
		Иначе
			Группа = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.Шаг1Реквизиты);
		КонецЕсли; 
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		Если НЕ ИндексВставки=Индекс Тогда
			ЭлементЗаголовок = Элементы.Добавить("Заголовок"+ИмяЭлемента, Тип("ДекорацияФормы"), Группа);
			ЭлементЗаголовок.Вид = ВидДекорацииФормы.Надпись;
			ЭлементЗаголовок.Заголовок = " ";
		Иначе
			ЭлементЗаголовок = Элементы.Добавить("Заголовок"+ИмяЭлемента, Тип("ПолеФормы"), Группа);
			ЭлементЗаголовок.Вид = ВидПоляФормы.ПолеНадписи;
			ЭлементЗаголовок.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ЭлементЗаголовок.ПутьКДанным = "ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками["+Индекс+"].Сотрудник";
		КонецЕсли; 
		ЭлементЗаголовок.Ширина = ШиринаЗаголовка;
		ЭлементЗаголовок.РастягиватьПоГоризонтали = Ложь;
		ЭлементСумма = Элементы.Добавить("СуммаВал"+ИмяЭлемента, Тип("ПолеФормы"), Группа);
		ЭлементСумма.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементСумма.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементСумма.АвтоОтметкаНезаполненного = Ложь;
		ЭлементСумма.ПутьКДанным = "ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками["+Индекс+"].СуммаВал";
		ЭлементСумма.Ширина = 12;
		ЭлементСумма.РастягиватьПоГоризонтали = Ложь;
		ЭлементСумма.УстановитьДействие("ПриИзменении", "Подключаемый_ПодотчетСуммаВалПриИзменении");
		ЭлементВалюта = Элементы.Добавить("Валюта"+ИмяЭлемента, Тип("ДекорацияФормы"), Группа);
		ЭлементВалюта.Вид = ВидДекорацииФормы.Надпись;
		ЭлементВалюта.Гиперссылка = Истина;
		ЭлементВалюта.УстановитьДействие("Нажатие", "Подключаемый_ПодотчетВалютаНажатие");
		ЭлементВалюта.Заголовок = Строка(Стр.Валюта);
		ЭлементВалюта.Ширина = 10;
		ЭлементВалюта.РастягиватьПоГоризонтали = Ложь;
		Если НЕ УстановленТекущийЭлемент И Элементы.Страницы.ТекущаяСтраница=Элементы.Шаг1 Тогда
			ИмяТекущегоЭлемента = ЭлементСумма.Имя;
			УстановленТекущийЭлемент = Истина;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыРекурсивно(Группа, МассивЭлементов)
	
	Для каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент)=Тип("ГруппаФормы") Тогда
			УдалитьЭлементыРекурсивно(Элемент, МассивЭлементов);
		ИначеЕсли ТипЗнч(Элемент)=Тип("ПолеФормы")  Тогда
			УдалитьЭлементыРекурсивно(Элемент.КонтекстноеМеню, МассивЭлементов);
		КонецЕсли;
		МассивЭлементов.Добавить(Элемент);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения()
	
	Отказ = Ложь;
	ЗаписатьИзмененияФормы(Истина, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	Оповестить("ОповещениеОбИзмененииДолга");
	Оповестить("ВводОстатков");
	мЗаписьФормыОсуществлена = Истина;
	Закрыть(Истина);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПустыеСтроки(Раздел = "")
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Сумма", 0);
	СтруктураОтбора.Вставить("СуммаВал", 0);
	Если ПустаяСтрока(Раздел) ИЛИ Раздел="ДенежныеСредства" Тогда
		Строки = ВводНачальныхОстатковБанкИКасса.ДенежныеСредства.НайтиСтроки(СтруктураОтбора);
		Для каждого Стр Из Строки Цикл
			ВводНачальныхОстатковБанкИКасса.ДенежныеСредства.Удалить(Стр);
		КонецЦикла; 
	КонецЕсли;
	Если ПустаяСтрока(Раздел) ИЛИ Раздел="Расчеты" Тогда
		Строки = ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками.НайтиСтроки(СтруктураОтбора);
		Для каждого Стр Из Строки Цикл
			ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками.Удалить(Стр);
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает текст пояснения.
//
&НаКлиенте
Процедура УстановитьТекстПояснения()
	
	Если ТекущийНомерСтраницы = 0 Тогда
		Элементы.ДекорацияПояснениеСледующегоДействия.Заголовок = НСтр(
			"ru = 'Нажмите кнопку ""Далее"" для заполнения остатков денежных средств'");
	ИначеЕсли ТекущийНомерСтраницы = 1 Тогда
		Элементы.ДекорацияПояснениеСледующегоДействия.Заголовок = НСтр(
			"ru = 'Нажмите кнопку ""Далее"" для заполнения остатков товаров'");
	ИначеЕсли ТекущийНомерСтраницы = 2 Тогда
		Элементы.ДекорацияПояснениеСледующегоДействия.Заголовок = НСтр(
			"ru = 'Нажмите кнопку ""Далее"" для заполнения остатков по расчетам'");
	ИначеЕсли ТекущийНомерСтраницы = 3 Тогда
		Элементы.ДекорацияПояснениеСледующегоДействия.Заголовок = НСтр(
			"ru = 'Нажмите кнопку ""Далее"" для заполнения прочих остатков'");
	ИначеЕсли ТекущийНомерСтраницы = 4 Тогда
		Элементы.ДекорацияПояснениеСледующегоДействия.Заголовок = НСтр(
			"ru = 'Для завершения необходимо нажать кнопку ""Закончить""'");
	КонецЕсли;
	
КонецПроцедуры // УстановитьТекстПояснения()

// Процедура устанавливает активную страницу.
//
&НаКлиенте
Процедура УстановитьАктивнуюСтраницу()
	
	СтрокаПоиска = "Шаг" + Строка(ТекущийНомерСтраницы);
	Элементы.Страницы.ТекущаяСтраница = Элементы.Найти(СтрокаПоиска);
	
	ЭтаФорма.Заголовок = СтрШаблон(НСтр("ru = 'Помощник ввода начальных остатков (Шаг %1/%2)'"), ТекущийНомерСтраницы,
		ПоследняяСтраница);
	УстановитьТекстПояснения();
	
	УстановитьАктивнуюСтраницуСервер();
	
КонецПроцедуры // УстановитьАктивнуюСтраницу()

&НаСервере
Процедура УстановитьАктивнуюСтраницуСервер()
	
	Для ии = ПерваяСтраница По ПоследняяСтраница Цикл
		Если ии=ТекущийНомерСтраницы Тогда
			Элементы["ЗаголовокШаг"+Строка(ии)].Шрифт = Новый Шрифт(Новый Шрифт,,, Истина);
			Элементы["ОтметкаШаг"+Строка(ии)].ЦветФона = ЦветаСтиля.ЦветФонаВыбранногоЭлемента;
		Иначе
			Элементы["ЗаголовокШаг"+Строка(ии)].Шрифт = Новый Шрифт;
			Элементы["ОтметкаШаг"+Строка(ии)].ЦветФона = Новый Цвет;
		КонецЕсли; 
	КонецЦикла;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

// Процедура устанавливает доступность кнопок.
//
&НаКлиенте
Процедура УстановитьДоступностьКнопок()
	
	Элементы.Назад.Доступность = ТекущийНомерСтраницы <> ПерваяСтраница;
	
	Если ТекущийНомерСтраницы >= ПоследняяСтраница - 1 Тогда
		Элементы.Далее.Заголовок = НСтр("ru = 'Закончить'");
		Элементы.Далее.Картинка = БиблиотекаКартинок.Пометка;
	Иначе
		Элементы.Далее.Заголовок = НСтр("ru = 'Далее'");
		Элементы.Далее.Картинка = БиблиотекаКартинок.СтрелкаВправоСплошная;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьКнопок()

&НаКлиенте
Процедура ОпределитьТекущийЭлементТаблицы(СтрокаТаблицы, ИмяТаблицы, ИменаРеквизитов, РеквизитПоУмолчанию)
	
	РеквизитыПроверки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРеквизитов);
	Для каждого Реквизит Из РеквизитыПроверки Цикл
		ИмяРеквизита = СокрЛП(Реквизит);
		Если НЕ Элементы[ИмяТаблицы+ИмяРеквизита].Видимость Тогда
			Продолжить;
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[ИмяРеквизита]) Тогда
			Элементы[ИмяТаблицы].ТекущийЭлемент = Элементы[ИмяТаблицы+ИмяРеквизита];
			Возврат;
		КонецЕсли; 
	КонецЦикла;
	Элементы[ИмяТаблицы].ТекущийЭлемент = Элементы[ИмяТаблицы+РеквизитПоУмолчанию];
	
КонецПроцедуры

&НаСервере
Функция СохранятьБанкИКасса()
	
	Возврат ВводНачальныхОстатковБанкИКасса.ДенежныеСредства.Количество() > 0
	ИЛИ (ВводНачальныхОстатковБанкИКасса.ДенежныеСредства.Количество()=0 
	И НЕ ВводНачальныхОстатковБанкИКасса.Ссылка.Пустая() 
	И ВводНачальныхОстатковБанкИКасса.Проведен);	
	
КонецФункции
	
&НаСервере
Функция СохранятьПодотчет()
	
	Возврат ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками.Количество() > 0
	ИЛИ (ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками.Количество()=0 
	И НЕ ВводНачальныхОстатковПодотчет.Ссылка.Пустая() 
	И ВводНачальныхОстатковПодотчет.Проведен);	
	
КонецФункции
 	
&НаСервере
Функция СохранятьЗапасы()
	
	Возврат
		ВводНачальныхОстатковТовары.Запасы.Количество() > 0
		ИЛИ ВводНачальныхОстатковТовары.ЗапасыПринятые.Количество() > 0
		ИЛИ ВводНачальныхОстатковТовары.ЗапасыПереданные.Количество() > 0
		ИЛИ ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД.Количество() > 0
		ИЛИ ВводНачальныхОстатковТовары.ЗапасыПереданныеВРазрезеГТД.Количество() > 0
		ИЛИ ВводНачальныхОстатковТовары.ЗапасыПринятыеВРазрезеГТД.Количество() > 0
		ИЛИ ВводНачальныхОстатковТовары.ПрямыеЗатраты.Количество() > 0
		ИЛИ (
				ВводНачальныхОстатковТовары.Запасы.Количество() = 0
				И ВводНачальныхОстатковТовары.ЗапасыПринятые.Количество() = 0
				И ВводНачальныхОстатковТовары.ЗапасыПереданные.Количество() = 0
				И ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД.Количество() = 0
				И ВводНачальныхОстатковТовары.ЗапасыПереданныеВРазрезеГТД.Количество() = 0
				И ВводНачальныхОстатковТовары.ЗапасыПринятыеВРазрезеГТД.Количество() = 0
				И ВводНачальныхОстатковТовары.ПрямыеЗатраты.Количество() = 0
				И НЕ ВводНачальныхОстатковТовары.Ссылка.Пустая()
				И ВводНачальныхОстатковТовары.Проведен
			);
	
КонецФункции
 
&НаСервере
Функция СохранятьРасчетыСКонтрагентами()
	
	Возврат ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПоставщиками.Количество() > 0
	ИЛИ ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПокупателями.Количество() > 0
	ИЛИ (ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПоставщиками.Количество()=0
	И ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПокупателями.Количество()=0
	И НЕ ВводНачальныхОстатковРасчетыСКонтрагентами.Ссылка.Пустая() 
	И ВводНачальныхОстатковРасчетыСКонтрагентами.Проведен);	
	
КонецФункции

&НаСервере
Функция СохранятьРасчетыСПерсоналом()
	
	Возврат ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом.Количество() > 0
	ИЛИ (ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом.Количество()=0
	И НЕ ВводНачальныхОстатковЗарплата.Ссылка.Пустая() 
	И ВводНачальныхОстатковЗарплата.Проведен);	
	
КонецФункции

&НаСервере
Функция СохранятьНалоги()
	
	Возврат ВводНачальныхОстатковНалоги.РасчетыПоНалогам.Количество() > 0
	ИЛИ (ВводНачальныхОстатковНалоги.РасчетыПоНалогам.Количество()=0
	И НЕ ВводНачальныхОстатковНалоги.Ссылка.Пустая() 
	И ВводНачальныхОстатковНалоги.Проведен);	
	
КонецФункции

&НаСервере
Функция СохранятьЭквайринг()
	
	Возврат ВводНачальныхОстатковЭквайринг.РасчетыПоЭквайрингу.Количество() > 0
	ИЛИ (ВводНачальныхОстатковЭквайринг.РасчетыПоЭквайрингу.Количество()=0
	И НЕ ВводНачальныхОстатковЭквайринг.Ссылка.Пустая() 
	И ВводНачальныхОстатковЭквайринг.Проведен);	
	
КонецФункции

&НаСервере
Функция СохранятьВнеоборотныеАктивы()
	
	Возврат ВводНачальныхОстатковИмущество.ВнеоборотныеАктивы.Количество() > 0
	ИЛИ (ВводНачальныхОстатковИмущество.ВнеоборотныеАктивы.Количество()=0
	И НЕ ВводНачальныхОстатковИмущество.Ссылка.Пустая() 
	И ВводНачальныхОстатковИмущество.Проведен);	
	
КонецФункции

&НаСервере
Функция СохранятьПрочее()
	
	Возврат ВводНачальныхОстатковПрочее.ПрочиеРазделы.Количество() > 0
	ИЛИ (ВводНачальныхОстатковПрочее.ПрочиеРазделы.Количество()=0
	И НЕ ВводНачальныхОстатковПрочее.Ссылка.Пустая() 
	И ВводНачальныхОстатковПрочее.Проведен);	
	
КонецФункции

&НаСервере
Функция СохранятьЗакупкиТоваровДляУСН()
	
	Возврат ВводНачальныхОстатковЗакупкиТоваровДляУСН.ЗакупкиДляКУДИР.Количество() > 0
	ИЛИ (ВводНачальныхОстатковЗакупкиТоваровДляУСН.ЗакупкиДляКУДИР.Количество()=0
	И НЕ ВводНачальныхОстатковЗакупкиТоваровДляУСН.Ссылка.Пустая() 
	И ВводНачальныхОстатковЗакупкиТоваровДляУСН.Проведен);	
	
КонецФункции

&НаСервере
Функция СохранятьРасчетыСФондамиПоСтраховымВзносам()
	
	Возврат ВводНачальныхОстатковРасчетыСФондамиПоСтраховымВзносам.РасчетыСФондамиПоСтраховымВзносам.Количество() > 0
	ИЛИ (ВводНачальныхОстатковРасчетыСФондамиПоСтраховымВзносам.РасчетыСФондамиПоСтраховымВзносам.Количество()=0
	И НЕ ВводНачальныхОстатковРасчетыСФондамиПоСтраховымВзносам.Ссылка.Пустая() 
	И ВводНачальныхОстатковРасчетыСФондамиПоСтраховымВзносам.Проведен);	
	
КонецФункции

// Процедура записывает изменения формы.
//
&НаСервере
Процедура ЗаписатьИзмененияФормы(ЗакончитьВвод = Ложь, Отказ = Ложь)
	
	УдалитьПустыеСтроки();
	
	Если СохранятьБанкИКасса() Тогда
		ВводНачальныхОстатковБанкИКассаОбъект = РеквизитФормыВЗначение("ВводНачальныхОстатковБанкИКасса");
		ВводНачальныхОстатковБанкИКассаОбъект.Дата = ДатаОстатков;
		ВводНачальныхОстатковБанкИКассаОбъект.Организация = Организация;
		ВводНачальныхОстатковБанкИКассаОбъект.Комментарий = "# Документ введен помощником ввода остатков.";
		ВводНачальныхОстатковБанкИКассаОбъект.РазделУчета = "Денежные средства";
		Если НЕ ВводНачальныхОстатковБанкИКассаОбъект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	Если СохранятьПодотчет() Тогда
		ВводНачальныхОстатковПодотчетОбъект = РеквизитФормыВЗначение("ВводНачальныхОстатковПодотчет");
		ВводНачальныхОстатковПодотчетОбъект.Дата = ДатаОстатков;
		ВводНачальныхОстатковПодотчетОбъект.Организация = Организация;
		ВводНачальныхОстатковПодотчетОбъект.Комментарий = "# Документ введен помощником ввода остатков.";
		ВводНачальныхОстатковПодотчетОбъект.РазделУчета = "Расчеты с подотчетниками";
		ВводНачальныхОстатковПодотчетОбъект.Автоформирование = Истина;
		Если НЕ ВводНачальныхОстатковПодотчетОбъект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	Если СохранятьЗапасы() Тогда
		ВводНачальныхОстатковТоварыОбъект = РеквизитФормыВЗначение("ВводНачальныхОстатковТовары");
		ВводНачальныхОстатковТоварыОбъект.Дата = ДатаОстатков;
		ВводНачальныхОстатковТоварыОбъект.Организация = Организация;
		ВводНачальныхОстатковТоварыОбъект.Комментарий = "# Документ введен помощником ввода остатков.";
		ВводНачальныхОстатковТоварыОбъект.РазделУчета = "Запасы";
		Если НЕ ВводНачальныхОстатковТоварыОбъект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	Если СохранятьРасчетыСКонтрагентами() Тогда
		ВводНачальныхОстатковРасчетыСКонтрагентамиОбъект = РеквизитФормыВЗначение("ВводНачальныхОстатковРасчетыСКонтрагентами");
		ВводНачальныхОстатковРасчетыСКонтрагентамиОбъект.Дата = ДатаОстатков;
		ВводНачальныхОстатковРасчетыСКонтрагентамиОбъект.Организация = Организация;
		ВводНачальныхОстатковРасчетыСКонтрагентамиОбъект.Автоформирование = Истина;
		ВводНачальныхОстатковРасчетыСКонтрагентамиОбъект.Комментарий = "# Документ введен помощником ввода остатков.";
		ВводНачальныхОстатковРасчетыСКонтрагентамиОбъект.РазделУчета = "Расчеты с поставщиками и покупателями";
		Если НЕ ВводНачальныхОстатковРасчетыСКонтрагентамиОбъект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	Если СохранятьРасчетыСПерсоналом() Тогда
		ВводНачальныхОстатковЗарплатаОбъект = РеквизитФормыВЗначение("ВводНачальныхОстатковЗарплата");
		ВводНачальныхОстатковЗарплатаОбъект.Дата = ДатаОстатков;
		ВводНачальныхОстатковЗарплатаОбъект.Организация = Организация;
		ВводНачальныхОстатковЗарплатаОбъект.Автоформирование = Истина;
		ВводНачальныхОстатковЗарплатаОбъект.Комментарий = "# Документ введен помощником ввода остатков.";
		ВводНачальныхОстатковЗарплатаОбъект.РазделУчета = "Расчеты с персоналом";
		Если НЕ ВводНачальныхОстатковЗарплатаОбъект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	Если СохранятьНалоги() Тогда
		ВводНачальныхОстатковНалогиОбъект = РеквизитФормыВЗначение("ВводНачальныхОстатковНалоги");
		ВводНачальныхОстатковНалогиОбъект.Дата = ДатаОстатков;
		ВводНачальныхОстатковНалогиОбъект.Организация = Организация;
		ВводНачальныхОстатковНалогиОбъект.Комментарий = "# Документ введен помощником ввода остатков.";
		ВводНачальныхОстатковНалогиОбъект.РазделУчета = "Расчеты по налогам";
		Если НЕ ВводНачальныхОстатковНалогиОбъект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	Если СохранятьЭквайринг() Тогда
		ВводНачальныхОстатковЭквайрингОбъект = РеквизитФормыВЗначение("ВводНачальныхОстатковЭквайринг");
		ВводНачальныхОстатковЭквайрингОбъект.Дата = ДатаОстатков;
		ВводНачальныхОстатковЭквайрингОбъект.Организация = Организация;
		ВводНачальныхОстатковЭквайрингОбъект.Комментарий = "# Документ введен помощником ввода остатков.";
		ВводНачальныхОстатковЭквайрингОбъект.РазделУчета = "Эквайринг";
		Если НЕ ВводНачальныхОстатковЭквайрингОбъект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	Если СохранятьВнеоборотныеАктивы() Тогда
		ВводНачальныхОстатковИмуществоОбъект = РеквизитФормыВЗначение("ВводНачальныхОстатковИмущество");
		ВводНачальныхОстатковИмуществоОбъект.Дата = ДатаОстатков;
		ВводНачальныхОстатковИмуществоОбъект.Организация = Организация;
		ВводНачальныхОстатковИмуществоОбъект.Комментарий = "# Документ введен помощником ввода остатков.";
		ВводНачальныхОстатковИмуществоОбъект.РазделУчета = "Имущество";
		Если НЕ ВводНачальныхОстатковИмуществоОбъект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	Если СохранятьПрочее() Тогда
		ВводНачальныхОстатковПрочееОбъект = РеквизитФормыВЗначение("ВводНачальныхОстатковПрочее");
		ВводНачальныхОстатковПрочееОбъект.Дата = ДатаОстатков;
		ВводНачальныхОстатковПрочееОбъект.Организация = Организация;
		ВводНачальныхОстатковПрочееОбъект.Комментарий = "# Документ введен помощником ввода остатков.";
		ВводНачальныхОстатковПрочееОбъект.РазделУчета = "Прочие разделы";
		Если НЕ ВводНачальныхОстатковПрочееОбъект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	Если СохранятьЗакупкиТоваровДляУСН() Тогда
		ВводНачальныхОстатковЗакупкиТоваровДляУСНОбъект = РеквизитФормыВЗначение("ВводНачальныхОстатковЗакупкиТоваровДляУСН");
		ВводНачальныхОстатковЗакупкиТоваровДляУСНОбъект.Дата = ДатаОстатков;
		ВводНачальныхОстатковЗакупкиТоваровДляУСНОбъект.Организация = Организация;
		ВводНачальныхОстатковЗакупкиТоваровДляУСНОбъект.Автоформирование = Истина;
		ВводНачальныхОстатковЗакупкиТоваровДляУСНОбъект.Комментарий = "# Документ введен помощником ввода остатков.";
		ВводНачальныхОстатковЗакупкиТоваровДляУСНОбъект.РазделУчета = "Закупки товаров для УСН";
		Если НЕ ВводНачальныхОстатковЗакупкиТоваровДляУСНОбъект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	
	Если СохранятьРасчетыСФондамиПоСтраховымВзносам() Тогда
		ВводНачальныхОстатковРасчетыСФондамиПоСтраховымВзносамОбъект = РеквизитФормыВЗначение("ВводНачальныхОстатковРасчетыСФондамиПоСтраховымВзносам");
		ВводНачальныхОстатковРасчетыСФондамиПоСтраховымВзносамОбъект.Дата = ДатаОстатков;
		ВводНачальныхОстатковРасчетыСФондамиПоСтраховымВзносамОбъект.Организация = Организация;
		ВводНачальныхОстатковРасчетыСФондамиПоСтраховымВзносамОбъект.Автоформирование = Истина;
		ВводНачальныхОстатковРасчетыСФондамиПоСтраховымВзносамОбъект.Комментарий = "# Документ введен помощником ввода остатков.";
		ВводНачальныхОстатковРасчетыСФондамиПоСтраховымВзносамОбъект.РазделУчета = "Расчеты с фондами по страховым взносам";
		Если НЕ ВводНачальныхОстатковРасчетыСФондамиПоСтраховымВзносамОбъект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	// Проверки не пройдены
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если СохранятьБанкИКасса() Тогда
		Если ВводНачальныхОстатковБанкИКасса.ДенежныеСредства.Количество() > 0 Тогда
			ВводНачальныхОстатковБанкИКассаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ВводНачальныхОстатковБанкИКассаОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли; 
		ЗначениеВРеквизитФормы(ВводНачальныхОстатковБанкИКассаОбъект, "ВводНачальныхОстатковБанкИКасса");
	КонецЕсли;
	
	Если СохранятьПодотчет() Тогда
		Если ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками.Количество() > 0 Тогда
			ВводНачальныхОстатковПодотчетОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ВводНачальныхОстатковПодотчетОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли; 
		ЗначениеВРеквизитФормы(ВводНачальныхОстатковПодотчетОбъект, "ВводНачальныхОстатковБанкИКасса");
	КонецЕсли;
	
	Если СохранятьЗапасы() Тогда
		Если ВводНачальныхОстатковТовары.Запасы.Количество() > 0
			ИЛИ ВводНачальныхОстатковТовары.ЗапасыПринятые.Количество() > 0
			ИЛИ ВводНачальныхОстатковТовары.ЗапасыПереданные.Количество() > 0
			ИЛИ ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД.Количество() > 0
			ИЛИ ВводНачальныхОстатковТовары.ЗапасыПереданныеВРазрезеГТД.Количество() > 0
			ИЛИ ВводНачальныхОстатковТовары.ЗапасыПринятыеВРазрезеГТД.Количество() > 0
			ИЛИ ВводНачальныхОстатковТовары.ПрямыеЗатраты.Количество() > 0 Тогда
			ЗаписатьИзмененияЦен();
			ВводНачальныхОстатковТоварыОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ВводНачальныхОстатковТоварыОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли; 
		ЗначениеВРеквизитФормы(ВводНачальныхОстатковТоварыОбъект, "ВводНачальныхОстатковТовары");
	КонецЕсли;
	
	Если СохранятьРасчетыСКонтрагентами() Тогда
		Если ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПоставщиками.Количество() > 0
		 ИЛИ ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПокупателями.Количество() > 0 Тогда
			ВводНачальныхОстатковРасчетыСКонтрагентамиОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ВводНачальныхОстатковРасчетыСКонтрагентамиОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли; 
		ЗначениеВРеквизитФормы(ВводНачальныхОстатковРасчетыСКонтрагентамиОбъект, "ВводНачальныхОстатковРасчетыСКонтрагентами");
	КонецЕсли;
	
	Если СохранятьРасчетыСПерсоналом() Тогда
		Если ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом.Количество() > 0 Тогда
			ВводНачальныхОстатковЗарплатаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ВводНачальныхОстатковЗарплатаОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли; 
		ЗначениеВРеквизитФормы(ВводНачальныхОстатковЗарплатаОбъект, "ВводНачальныхОстатковЗарплата");
	КонецЕсли;
	
	Если СохранятьНалоги() Тогда
		Если ВводНачальныхОстатковНалоги.РасчетыПоНалогам.Количество() > 0 Тогда
			ВводНачальныхОстатковНалогиОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ВводНачальныхОстатковНалогиОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли; 
		ЗначениеВРеквизитФормы(ВводНачальныхОстатковНалогиОбъект, "ВводНачальныхОстатковНалоги");
	КонецЕсли;
	
	Если СохранятьЭквайринг() Тогда
		Если ВводНачальныхОстатковЭквайринг.РасчетыПоЭквайрингу.Количество() > 0 Тогда
			ВводНачальныхОстатковЭквайрингОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ВводНачальныхОстатковЭквайрингОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли; 
		ЗначениеВРеквизитФормы(ВводНачальныхОстатковЭквайрингОбъект, "ВводНачальныхОстатковЭквайринг");
	КонецЕсли;
	
	Если СохранятьВнеоборотныеАктивы() Тогда
		Если ВводНачальныхОстатковИмущество.ВнеоборотныеАктивы.Количество() > 0 Тогда
			ВводНачальныхОстатковИмуществоОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ВводНачальныхОстатковИмуществоОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли; 
		ЗначениеВРеквизитФормы(ВводНачальныхОстатковИмуществоОбъект, "ВводНачальныхОстатковИмущество");
	КонецЕсли;
	
	Если СохранятьПрочее() Тогда
		Если ВводНачальныхОстатковПрочее.ПрочиеРазделы.Количество() > 0 Тогда
			ВводНачальныхОстатковПрочееОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ВводНачальныхОстатковПрочееОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли; 
		ЗначениеВРеквизитФормы(ВводНачальныхОстатковПрочееОбъект, "ВводНачальныхОстатковПрочее");
	КонецЕсли;
	
	Если СохранятьЗакупкиТоваровДляУСН() Тогда
		Если ВводНачальныхОстатковЗакупкиТоваровДляУСН.ЗакупкиДляКУДИР.Количество() > 0 Тогда
			ВводНачальныхОстатковЗакупкиТоваровДляУСНОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ВводНачальныхОстатковЗакупкиТоваровДляУСНОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли; 
		ЗначениеВРеквизитФормы(ВводНачальныхОстатковЗакупкиТоваровДляУСНОбъект, "ВводНачальныхОстатковЗакупкиТоваровДляУСН");
	КонецЕсли;
	
	Если СохранятьРасчетыСФондамиПоСтраховымВзносам() Тогда
		Если ВводНачальныхОстатковРасчетыСФондамиПоСтраховымВзносам.РасчетыСФондамиПоСтраховымВзносам.Количество() > 0 Тогда
			ВводНачальныхОстатковРасчетыСФондамиПоСтраховымВзносамОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ВводНачальныхОстатковРасчетыСФондамиПоСтраховымВзносамОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли; 
		ЗначениеВРеквизитФормы(ВводНачальныхОстатковРасчетыСФондамиПоСтраховымВзносамОбъект, "ВводНачальныхОстатковРасчетыСФондамиПоСтраховымВзносам");
	КонецЕсли;
	
	Если ЗакончитьВвод Тогда
		Константы.ПервоначальнаяНастройкаЗаполненыНачальныеОстатки.Установить(Истина);
	КонецЕсли;
	
	УстановитьВидимостьРеквизитовТЧ("РасчетыСПоставщиками");
	УстановитьВидимостьРеквизитовТЧ("РасчетыСПокупателями");
	УстановитьВидимостьРеквизитовТЧ("ЗапасыПереданные");
	УстановитьВидимостьРеквизитовТЧ("ЗапасыПринятые");
	УстановитьВидимостьРеквизитовТЧ("ПрочиеРазделы");
	ЗаполнитьПризнакВалютныйСчета();
	
	ХранилищеСистемныхНастроек.Сохранить("ПомощникВводаНачальныхОстатков", "ВидЦенПродажи", ВидЦенПродажи,, "");
	ХранилищеСистемныхНастроек.Сохранить("ПомощникВводаНачальныхОстатков", "ВидЦенСебестоимости", ВидЦенСебестоимости,, "");
	
КонецПроцедуры // ЗаписатьИзмененияФормы()

// Процедура выполняет проверку заполненности обязательных реквизитов при переходе на следующую страницу.
//
&НаКлиенте
Процедура ВыполнитьПроверкиПриПереходеНаСледующуюСтраницу(Отказ)
	
	ОчиститьСообщения();
	
	Если ТекущийНомерСтраницы = 1 Тогда
		
		Если НЕ ЗначениеЗаполнено(ВалютаУчета) Тогда
			ТекстСообщения = НСтр("ru = 'Укажите валюту учета.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ТекстСообщения, , , ,
				Отказ
			);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НациональнаяВалюта) Тогда
			ТекстСообщения = НСтр("ru = 'Укажите национальную валюту.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ТекстСообщения, , , ,
				Отказ
			);
		КонецЕсли;
		
		Для каждого ТекСтрока Из ВводНачальныхОстатковБанкИКасса.ДенежныеСредства Цикл
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковБанкИКасса.ДенежныеСредства",
			ТекСтрока,
			"БанковскийСчетКасса",
			НСтр("ru = 'Укажите банковский счет или кассу в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковБанкИКасса.ДенежныеСредства",
			ТекСтрока,
			"ВалютаДенежныхСредств",
			НСтр("ru = 'Укажите валюту в строке %1.'"),
			Отказ);
		
		КонецЦикла;
		
	ИначеЕсли ТекущийНомерСтраницы = 2 Тогда
		
		Для каждого ТекСтрока Из ВводНачальныхОстатковТовары.Запасы Цикл
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.Запасы",
			ТекСтрока,
			"СтруктурнаяЕдиница",
			НСтр("ru = 'Укажите структурную единицу в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.Запасы",
			ТекСтрока,
			"Номенклатура",
			НСтр("ru = 'Укажите номенклатуру в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.Запасы",
			ТекСтрока,
			"ЕдиницаИзмерения",
			НСтр("ru = 'Укажите единицу измерения в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.Запасы",
			ТекСтрока,
			"Количество",
			НСтр("ru = 'Укажите количество в строке %1.'"),
			Отказ);
			
			Если ТекСтрока.ПроверятьЗаполнениеПартий
				Тогда
				ПроверитьКолонкуТаблицы(
				"ВводНачальныхОстатковТовары.Запасы",
				ТекСтрока,
				"Партия",
				НСтр("ru = 'Заполните партию в строке %1.'"),
				Отказ);
			КонецЕсли;
			
			Если ТекСтрока.ПроверятьЗаполнениеХарактеристики
				Тогда
				ПроверитьКолонкуТаблицы(
				"ВводНачальныхОстатковТовары.Запасы",
				ТекСтрока,
				"Характеристика",
				НСтр("ru = 'Заполните характеристику в строке %1.'"),
				Отказ);
			КонецЕсли;
		
		КонецЦикла;
		
		Для каждого ТекСтрока Из ВводНачальныхОстатковТовары.ЗапасыПринятые Цикл
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыПринятые",
			ТекСтрока,
			"ВидОперации",
			НСтр("ru = 'Укажите вид операции в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыПринятые",
			ТекСтрока,
			"Контрагент",
			НСтр("ru = 'Укажите поставщика в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыПринятые",
			ТекСтрока,
			"Договор",
			НСтр("ru = 'Укажите договор в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыПринятые",
			ТекСтрока,
			"СтруктурнаяЕдиница",
			НСтр("ru = 'Укажите структурную единицу в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыПринятые",
			ТекСтрока,
			"Номенклатура",
			НСтр("ru = 'Укажите номенклатуру в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыПринятые",
			ТекСтрока,
			"ЕдиницаИзмерения",
			НСтр("ru = 'Укажите единицу измерения в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыПринятые",
			ТекСтрока,
			"Партия",
			НСтр("ru = 'Укажите партию в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыПринятые",
			ТекСтрока,
			"Количество",
			НСтр("ru = 'Укажите количество в строке %1.'"),
			Отказ);
			
			Если ТекСтрока.ПроверятьЗаполнениеХарактеристики
				Тогда
				ПроверитьКолонкуТаблицы(
				"ВводНачальныхОстатковТовары.ЗапасыПринятые",
				ТекСтрока,
				"Характеристика",
				НСтр("ru = 'Заполните характеристику в строке %1.'"),
				Отказ);
			КонецЕсли;
		
		КонецЦикла;
		
		Для каждого ТекСтрока Из ВводНачальныхОстатковТовары.ЗапасыПереданные Цикл
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыПереданные",
			ТекСтрока,
			"ВидОперации",
			НСтр("ru = 'Укажите вид операции в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыПереданные",
			ТекСтрока,
			"Контрагент",
			НСтр("ru = 'Укажите покупателя в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыПереданные",
			ТекСтрока,
			"Договор",
			НСтр("ru = 'Укажите договор в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыПереданные",
			ТекСтрока,
			"Номенклатура",
			НСтр("ru = 'Укажите номенклатуру в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыПереданные",
			ТекСтрока,
			"ЕдиницаИзмерения",
			НСтр("ru = 'Укажите единицу измерения в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыПереданные",
			ТекСтрока,
			"Количество",
			НСтр("ru = 'Укажите количество в строке %1.'"),
			Отказ);
			
			Если ТекСтрока.ПроверятьЗаполнениеПартий
				Тогда
				ПроверитьКолонкуТаблицы(
				"ВводНачальныхОстатковТовары.ЗапасыПереданные",
				ТекСтрока,
				"Партия",
				НСтр("ru = 'Заполните партию в строке %1.'"),
				Отказ);
			КонецЕсли;
			
			Если ТекСтрока.ПроверятьЗаполнениеХарактеристики
				Тогда
				ПроверитьКолонкуТаблицы(
				"ВводНачальныхОстатковТовары.ЗапасыПереданные",
				ТекСтрока,
				"Характеристика",
				НСтр("ru = 'Заполните характеристику в строке %1.'"),
				Отказ);
			КонецЕсли;
		
		КонецЦикла;
		
		Для каждого ТекСтрока Из ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД Цикл
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД",
			ТекСтрока,
			"Номенклатура",
			НСтр("ru = 'Укажите номенклатуру в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД",
			ТекСтрока,
			"ЕдиницаИзмерения",
			НСтр("ru = 'Укажите единицу измерения в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД",
			ТекСтрока,
			"Количество",
			НСтр("ru = 'Укажите количество в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД",
			ТекСтрока,
			"СтранаПроисхождения",
			НСтр("ru = 'Укажите страну происхождения в строке %1.'"),
			Отказ);
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД",
			ТекСтрока,
			"НомерГТД",
			НСтр("ru = 'Укажите номер ГТД в строке %1.'"),
			Отказ);
			
			Если ТекСтрока.ПроверятьЗаполнениеПартий
				Тогда
				ПроверитьКолонкуТаблицы(
				"ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД",
				ТекСтрока,
				"Партия",
				НСтр("ru = 'Заполните партию в строке %1.'"),
				Отказ);
			КонецЕсли;
			
			Если ТекСтрока.ПроверятьЗаполнениеХарактеристики
				Тогда
				ПроверитьКолонкуТаблицы(
				"ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД",
				ТекСтрока,
				"Характеристика",
				НСтр("ru = 'Заполните характеристику в строке %1.'"),
				Отказ);
			КонецЕсли;
		
		КонецЦикла;
		
		СоответствиеРеквизитовИСообщений = Новый Соответствие;
		СоответствиеРеквизитовИСообщений["Номенклатура"]		= НСтр("ru = 'Укажите номенклатуру в строке %1.'");
		СоответствиеРеквизитовИСообщений["ЕдиницаИзмерения"]	= НСтр("ru = 'Укажите единицу измерения в строке %1.'");
		СоответствиеРеквизитовИСообщений["Количество"]			= НСтр("ru = 'Укажите количество в строке %1.'");
		СоответствиеРеквизитовИСообщений["СтранаПроисхождения"]	= НСтр("ru = 'Укажите страну происхождения в строке %1.'");
		СоответствиеРеквизитовИСообщений["НомерГТД"]			= НСтр("ru = 'Укажите номер ГТД в строке %1.'");
		
		ИменаТЧ = Новый Массив(2);
		ИменаТЧ[0] = "ЗапасыПереданныеВРазрезеГТД";
		ИменаТЧ[1] = "ЗапасыПринятыеВРазрезеГТД";
		
		Для каждого ЭлементМассива Из ИменаТЧ Цикл
			
			ИмяТЧ = "ВводНачальныхОстатковТовары." + ЭлементМассива;
			Для каждого ТекСтрока Из ВводНачальныхОстатковТовары[ЭлементМассива] Цикл
				
				Для каждого ЭлементаСоответствия Из СоответствиеРеквизитовИСообщений Цикл
					
					ПроверитьКолонкуТаблицы(ИмяТЧ, ТекСтрока, ЭлементаСоответствия.Ключ, ЭлементаСоответствия.Значение, Отказ);
					
				КонецЦикла;
				
				Если ТекСтрока.ПроверятьЗаполнениеПартий Тогда
					
					ПроверитьКолонкуТаблицы(ИмяТЧ, ТекСтрока, "Партия", НСтр("ru = 'Заполните партию в строке %1.'"), Отказ);
					
				КонецЕсли;
				
				Если ТекСтрока.ПроверятьЗаполнениеХарактеристики Тогда
					
					ПроверитьКолонкуТаблицы(ИмяТЧ, ТекСтрока, "Характеристика", НСтр("ru = 'Заполните характеристику в строке %1.'"), Отказ);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ТекущийНомерСтраницы = 3 Тогда
		
		Для каждого ТекСтрока Из ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПоставщиками Цикл
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПоставщиками",
			ТекСтрока,
			"Контрагент",
			НСтр("ru = 'Укажите поставщика в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПоставщиками",
			ТекСтрока,
			"Договор",
			НСтр("ru = 'Укажите договор в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПоставщиками",
			ТекСтрока,
			"СуммаВал",
			НСтр("ru = 'Укажите сумму в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПоставщиками",
			ТекСтрока,
			"Сумма",
			НСтр("ru = 'Укажите сумму в валюте учета в строке %1.'"),
			Отказ);
		
		КонецЦикла;
		
		Для каждого ТекСтрока Из ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПокупателями Цикл
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПокупателями",
			ТекСтрока,
			"Контрагент",
			НСтр("ru = 'Укажите покупателя в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПокупателями",
			ТекСтрока,
			"Договор",
			НСтр("ru = 'Укажите договор в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПокупателями",
			ТекСтрока,
			"СуммаВал",
			НСтр("ru = 'Укажите сумму в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПокупателями",
			ТекСтрока,
			"Сумма",
			НСтр("ru = 'Укажите сумму в валюте учета в строке %1.'"),
			Отказ);
		
		КонецЦикла;
		
		Для каждого ТекСтрока Из ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом Цикл
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом",
			ТекСтрока,
			"СтруктурнаяЕдиница",
			НСтр("ru = 'Укажите подразделение в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом",
			ТекСтрока,
			"Сотрудник",
			НСтр("ru = 'Укажите сотрудника в строке %1.'"),
			Отказ);
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом",
			ТекСтрока,
			"Валюта",
			НСтр("ru = 'Укажите валюту в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом",
			ТекСтрока,
			"СуммаВал",
			НСтр("ru = 'Укажите сумму в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом",
			ТекСтрока,
			"Сумма",
			НСтр("ru = 'Укажите сумму в валюте учета в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом",
			ТекСтрока,
			"ПериодРегистрации",
			НСтр("ru = 'Укажите период в строке %1.'"),
			Отказ);
		
		КонецЦикла;
		
		Для каждого ТекСтрока Из ВводНачальныхОстатковНалоги.РасчетыПоНалогам Цикл
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковНалоги.РасчетыПоНалогам",
			ТекСтрока,
			"ВидНалога",
			НСтр("ru = 'Укажите вид налога в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковНалоги.РасчетыПоНалогам",
			ТекСтрока,
			"Сумма",
			НСтр("ru = 'Укажите сумму в строке %1.'"),
			Отказ);
		
		КонецЦикла;
		
		Для каждого ТекСтрока Из ВводНачальныхОстатковЭквайринг.РасчетыПоЭквайрингу Цикл
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковЭквайринг.РасчетыПоЭквайрингу",
			ТекСтрока,
			"ЭквайринговыйТерминал",
			НСтр("ru = 'Укажите эквайринговый терминал в строке %1.'"),
			Отказ);
		
		КонецЦикла;
		
	ИначеЕсли ТекущийНомерСтраницы = 4 Тогда
		
		Для каждого ТекСтрока Из ВводНачальныхОстатковИмущество.ВнеоборотныеАктивы Цикл
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковИмущество.ВнеоборотныеАктивы",
			ТекСтрока,
			"ВнеоборотныйАктив",
			НСтр("ru = 'Укажите карточку имущества в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковИмущество.ВнеоборотныеАктивы",
			ТекСтрока,
			"ТекущееСостояниеВнеоборотногоАктива",
			НСтр("ru = 'Укажите текущее состояние в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковИмущество.ВнеоборотныеАктивы",
			ТекСтрока,
			"СтруктурнаяЕдиница",
			НСтр("ru = 'Укажите подразделение в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковИмущество.ВнеоборотныеАктивы",
			ТекСтрока,
			"СчетЗатрат",
			НСтр("ru = 'Укажите счет затрат в строке %1.'"),
			Отказ);
		
		КонецЦикла;
		
		Для каждого ТекСтрока Из ВводНачальныхОстатковТовары.ПрямыеЗатраты Цикл
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ПрямыеЗатраты",
			ТекСтрока,
			"СтруктурнаяЕдиница",
			НСтр("ru = 'Укажите подразделение в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ПрямыеЗатраты",
			ТекСтрока,
			"СчетЗатрат",
			НСтр("ru = 'Укажите счет затрат в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ПрямыеЗатраты",
			ТекСтрока,
			"Сумма",
			НСтр("ru = 'Укажите сумму в строке %1.'"),
			Отказ);
		
		КонецЦикла;
		
		Для каждого ТекСтрока Из ВводНачальныхОстатковПрочее.ПрочиеРазделы Цикл
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковПрочее.ПрочиеРазделы",
			ТекСтрока,
			"ВидДвижения",
			НСтр("ru = 'Укажите вид движения в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковПрочее.ПрочиеРазделы",
			ТекСтрока,
			"Счет",
			НСтр("ru = 'Укажите счет в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковПрочее.ПрочиеРазделы",
			ТекСтрока,
			"Сумма",
			НСтр("ru = 'Укажите сумму в строке %1.'"),
			Отказ);
			
			Если УчетВалютныхОпераций И ТекСтрока.Валютный Тогда
				
				ПроверитьКолонкуТаблицы(
				"ВводНачальныхОстатковПрочее.ПрочиеРазделы",
				ТекСтрока,
				"Валюта",
				НСтр("ru = 'Укажите валюту в строке %1.'"),
				Отказ);
				
				ПроверитьКолонкуТаблицы(
				"ВводНачальныхОстатковПрочее.ПрочиеРазделы",
				ТекСтрока,
				"СуммаВал",
				НСтр("ru = 'Укажите валютную сумму в строке %1.'"),
				Отказ);
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПроверитьКолонкуТаблицы(ИмяТаблицы, СтрокаТаблицы, Реквизит, Текст, Отказ)
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[Реквизит]) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаТаблицы.НомерСтроки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,
			,
			ИмяТаблицы+"["+(СтрокаТаблицы.НомерСтроки-1)+"]."+Реквизит,
			,
			Отказ
		);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыПоЭквайрингу()
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетРасчетовСБанкомЭквайрером") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.ЭтоДоговорЭквайринга
		|	И НЕ ДоговорыКонтрагентов.КонтрольВзаиморасчетовЭквайринг";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивДоговоровЭквайрингаБезКонтроляПоОперациям = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	// Устанавливаем массив договоров как условие для отбора
	МассивПараметров = Новый Массив();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Договор", МассивДоговоровЭквайрингаБезКонтроляПоОперациям));
	НовыеПараметрыВыбора =  Новый ФиксированныйМассив(МассивПараметров);
	
	Элементы.ВводНачальныхОстатковЭквайрингРасчетыПоЭквайрингуЭквайринговыйТерминал.ПараметрыВыбора = НовыеПараметрыВыбора;
	
КонецПроцедуры

#КонецОбласти 

#Область ДенежныеСредстваИПодотчет

&НаСервереБезКонтекста
Функция СписокВыбораВалют(Валюты)
	
	Результат = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Валюты", Валюты);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Валюты.Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	НЕ Валюты.ПометкаУдаления
	|	И НЕ Валюты.Ссылка В (&Валюты)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Ссылка);	
	КонецЦикла; 
	Результат.Добавить(Неопределено, НСтр("ru = 'Еще валюты...'"));
	Возврат Результат;
	
КонецФункции

// Функция пересчитывает сумму из указанной валюты в валюту упр. учета.
//
// Параметры:      
//	СуммаВал  - Число                    - сумма в валюте, которую следует пересчитать.
//	Валюта    - Справочник.Ссылка.Валюты - валюта, из которой следует пересчитать.
//	ДатаКурса - Дата                     - дата курса.
//
// Возвращаемое значение: 
//  Число - сумма в валюте упр. учета.
//
&НаСервереБезКонтекста
Функция ПересчитатьИзВалютыВВалютуУчета(СуммаВал, ВалютаДоговор, ДатаКурса) Экспорт
	
	Сумма = 0;
	
	Если ЗначениеЗаполнено(ВалютаДоговор) Тогда
		
		Валюта = ?(ТипЗнч(ВалютаДоговор) = Тип("СправочникСсылка.ДоговорыКонтрагентов"), ВалютаДоговор.ВалютаРасчетов, ВалютаДоговор);
		
		ВалютаУчета = Константы.ВалютаУчета.Получить();
		
		СтруктураКурсовВалют = ЦенообразованиеСервер.ПолучитьКурсыВалют(Валюта, ВалютаУчета, ДатаКурса);
		
		Сумма = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
			СуммаВал,
			СтруктураКурсовВалют.КурсНач,
			СтруктураКурсовВалют.Курс,
			СтруктураКурсовВалют.КратностьНач,
			СтруктураКурсовВалют.Кратность
		);
		
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции // ПересчитатьИзВалютыВВалютуУчета()

// Функция пересчитывает сумму из указанной валюты в национальную валюту
//
// Параметры:      
//	СуммаВал  - Число                    - сумма в валюте, которую следует пересчитать.
//	Валюта    - Справочник.Ссылка.Валюты - валюта, из которой следует пересчитать.
//	ДатаКурса - Дата                     - дата курса.
//
// Возвращаемое значение: 
//  Число - сумма в национальной валюте.
//
&НаСервереБезКонтекста
Функция ПересчитатьИзВалютыВНациональнуюВалюту(СуммаВал, ВалютаДоговор, ДатаКурса) Экспорт
	
	Сумма = 0;
	
	Если ЗначениеЗаполнено(ВалютаДоговор) Тогда
		
		Валюта = ?(ТипЗнч(ВалютаДоговор) = Тип("СправочникСсылка.ДоговорыКонтрагентов"), ВалютаДоговор.ВалютаРасчетов, ВалютаДоговор);
		
		СтруктураКурсовВалют = ЦенообразованиеСервер.ПолучитьКурсыВалют(Валюта, Валюта, ДатаКурса);
		
		Сумма = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
			СуммаВал,
			СтруктураКурсовВалют.КурсНач,
			1,
			СтруктураКурсовВалют.КратностьНач,
			1
		);
		
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции // ПересчитатьИзВалютыВВалютуУчета()

// Функция пересчитывает сумму из валюты упр. учета в указанную валюту
//
// Параметры:      
//	Сумма     - Число                    - сумма в валюте упр. учета.
//	Валюта    - Справочник.Ссылка.Валюты - валюта, в которую следует пересчитать.
//	ДатаКурса - Дата                     - дата курса.
//
// Возвращаемое значение: 
//  Число - сумма в указанной валюте.
//
&НаСервереБезКонтекста
Функция ПересчитатьИзВалютыУчетаВВалюту(Сумма, ВалютаДоговор, ДатаКурса) Экспорт
	
	СуммаВал = 0;
	
	Если ЗначениеЗаполнено(ВалютаДоговор) Тогда
		
		Валюта = ?(ТипЗнч(ВалютаДоговор) = Тип("СправочникСсылка.ДоговорыКонтрагентов"), ВалютаДоговор.ВалютаРасчетов, ВалютаДоговор);
		
		ВалютаУчета = Константы.ВалютаУчета.Получить();
		
		СтруктураКурсовВалют = ЦенообразованиеСервер.ПолучитьКурсыВалют(ВалютаУчета, Валюта, ДатаКурса);
		
		Сумма = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
			Сумма,
			СтруктураКурсовВалют.КурсНач,
			СтруктураКурсовВалют.Курс,
			СтруктураКурсовВалют.КратностьНач,
			СтруктураКурсовВалют.Кратность
		);
		
	КонецЕсли;
	
	Возврат СуммаВал;
	
КонецФункции

&НаСервере
Процедура ВключитьИспользованиеВалютныхОпераций()
	
	УчетВалютныхОпераций = Истина;
	Константы.ФункциональнаяУчетВалютныхОпераций.Установить(Истина);
	УстановитьВидимостьИДоступность("ОбновитьИнтерфейс");
	
КонецПроцедуры

&НаСервере
Процедура ПриДобавленииСчетаКассыПодотчетникаСервер(ЭлементСправочника)

	Если ТипЗнч(ЭлементСправочника)=Тип("СправочникСсылка.Сотрудники") Тогда
		Стр = ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками.Добавить();
		Стр.Сотрудник = ЭлементСправочника;
		Стр.Валюта = ВалютаУчета;
	Иначе
		Стр = ВводНачальныхОстатковБанкИКасса.ДенежныеСредства.Добавить();
		Стр.БанковскийСчетКасса = ЭлементСправочника;
		Если ТипЗнч(ЭлементСправочника)=Тип("СправочникСсылка.Кассы") Тогда
			Стр.ВалютаДенежныхСредств = ЭлементСправочника.ВалютаПоУмолчанию;
		ИначеЕсли ТипЗнч(ЭлементСправочника)=Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Стр.ВалютаДенежныхСредств = ЭлементСправочника.ВалютаДенежныхСредств;
		КонецЕсли;
	КонецЕсли; 
	ОбновитьЭлементыФормы();
	
КонецПроцедуры

#КонецОбласти 

#Область Запасы

&НаСервере
Процедура ПолучитьСтруктуруВидовОпераций()
	
	Элементы.ВводНачальныхОстатковТоварыЗапасыПринятыеВидОперации.СписокВыбора.Очистить();	
	Элементы.ВводНачальныхОстатковТоварыЗапасыПереданныеВидОперации.СписокВыбора.Очистить();	
	
	Если ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию") Тогда
		Элементы.ВводНачальныхОстатковТоварыЗапасыПринятыеВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ПереработкаДавальческогоСырья") Тогда
		Элементы.ВводНачальныхОстатковТоварыЗапасыПринятыеВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ПриемВПереработку);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ПриемЗапасовНаОтветХранение") Тогда
		Элементы.ВводНачальныхОстатковТоварыЗапасыПринятыеВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаОтветХранение);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ПередачаТоваровНаКомиссию") Тогда
		Элементы.ВводНачальныхОстатковТоварыЗапасыПереданныеВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ПередачаСырьяВПереработку") Тогда
		Элементы.ВводНачальныхОстатковТоварыЗапасыПереданныеВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ПередачаЗапасовНаОтветХранение") Тогда
		Элементы.ВводНачальныхОстатковТоварыЗапасыПереданныеВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение);
	КонецЕсли;
	
	Элементы.СтраницаПринятыеТовары.Видимость = (Элементы.ВводНачальныхОстатковТоварыЗапасыПринятыеВидОперации.СписокВыбора.Количество()>0); 
	Элементы.СтраницаПереданныеТовары.Видимость = (Элементы.ВводНачальныхОстатковТоварыЗапасыПереданныеВидОперации.СписокВыбора.Количество()>0);
	Элементы.СтраницаТоварыВРазрезеГТД.Видимость = ПолучитьФункциональнуюОпцию("УчетГТД");
	
	Если НЕ Элементы.СтраницаПринятыеТовары.Видимость И НЕ Элементы.СтраницаПереданныеТовары.Видимость И НЕ Элементы.СтраницаТоварыВРазрезеГТД.Видимость Тогда
		Элементы.СтраницыОстаткиТоваров.ОтображениеСтраниц=ОтображениеСтраницФормы.Нет;
	Иначе
		Элементы.СтраницыОстаткиТоваров.ОтображениеСтраниц=ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли; 
	
КонецПроцедуры // ПолучитьСтруктуруВидовОпераций()

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧ = "", СтрокаТабличнойЧасти = Неопределено)
	
	Если ПустаяСтрока(ИмяТЧ) И ТекущийЭлемент=Элементы.ВводНачальныхОстатковТоварыЗапасы Тогда
		ИмяТЧ = "Запасы";
	ИначеЕсли ПустаяСтрока(ИмяТЧ) И ТекущийЭлемент=Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые Тогда
		ИмяТЧ = "ЗапасыПринятые";
	ИначеЕсли ПустаяСтрока(ИмяТЧ) И ТекущийЭлемент=Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные Тогда
		ИмяТЧ = "ЗапасыПереданные";
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТЧ) Тогда
		Возврат;
	КонецЕсли; 
	
	Если СтрокаТабличнойЧасти=Неопределено И ИмяТЧ="Запасы" Тогда
		СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасы.ТекущиеДанные;
	ИначеЕсли СтрокаТабличнойЧасти=Неопределено И ИмяТЧ="ЗапасыПринятые" Тогда
		СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые.ТекущиеДанные;
	ИначеЕсли СтрокаТабличнойЧасти=Неопределено И ИмяТЧ="ЗапасыПереданные" Тогда
		СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.ТекущиеДанные;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ИмяТЧ="Запасы" Тогда
		Если ВалютаСебестоимости<>ВалютаУчета Тогда
			СтрокаТабличнойЧасти.СуммаСебестоимости = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаСебестоимости;
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.СуммаСебестоимости * КурсСебестоимости / КратностьСебестоимости;
			Если СтрокаТабличнойЧасти.Количество<>0 Тогда
				СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
			Иначе
				СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.ЦенаСебестоимости * КурсСебестоимости / КратностьСебестоимости;
			КонецЕсли; 
		Иначе
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
			СтрокаТабличнойЧасти.СуммаСебестоимости = СтрокаТабличнойЧасти.Сумма / КурсСебестоимости * КратностьСебестоимости;
			Если СтрокаТабличнойЧасти.Количество<>0 Тогда
				СтрокаТабличнойЧасти.ЦенаСебестоимости = СтрокаТабличнойЧасти.СуммаСебестоимости / СтрокаТабличнойЧасти.Количество;
			Иначе
				СтрокаТабличнойЧасти.ЦенаСебестоимости = СтрокаТабличнойЧасти.Цена / КурсСебестоимости * КратностьСебестоимости;
			КонецЕсли; 
		КонецЕсли; 
	ИначеЕсли ИмяТЧ="ЗапасыПринятые" Тогда
		СтрокаТабличнойЧасти.СуммаПродажи = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаПродажи;
		СтрокаТабличнойЧасти.СуммаРасчетов = СтрокаТабличнойЧасти.СуммаПродажи / КурсРасчетовКлиент(СтрокаТабличнойЧасти.Договор);
	ИначеЕсли ИмяТЧ="ЗапасыПереданные" Тогда
		СтрокаТабличнойЧасти.СуммаПродажи = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаПродажи;
		СтрокаТабличнойЧасти.СуммаРасчетов = СтрокаТабличнойЧасти.СуммаПродажи / КурсРасчетовКлиент(СтрокаТабличнойЧасти.Договор);
		СтрокаТабличнойЧасти.СуммаСебестоимости = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
		СтрокаТабличнойЧасти.Себестоимость = СтрокаТабличнойЧасти.СуммаСебестоимости * КурсСебестоимости / КратностьСебестоимости;
	КонецЕсли; 
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

&НаСервере
Процедура ЗаписатьИзмененияЦен(ЗаписыватьСобственные = Истина, ЗаписыватьПринятые = Истина, ЗаписыватьПереданные = Истина)
	
	НаборЗакупочныеЦены = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
	НаборЗакупочныеЦены.Отбор.Период.Установить(ДатаОстатков);
	НаборЗакупочныеЦены.Отбор.ВидЦен.Установить(ВидЦенСебестоимости);
	НаборЗакупочныеЦены.Прочитать();
	ТаблицаЗакупочныеЦены = НаборЗакупочныеЦены.Выгрузить();
	ИзмененыЦеныЗакупки = Ложь;
	
	НаборПродажныеЦены = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
	НаборПродажныеЦены.Отбор.Период.Установить(ДатаОстатков);
	НаборПродажныеЦены.Отбор.ВидЦен.Установить(ВидЦенПродажи);
	НаборПродажныеЦены.Прочитать();
	ТаблицаПродажныеЦены = НаборПродажныеЦены.Выгрузить();
	ИзмененыЦеныПродажи = Ложь;
	
	Если ЗаписыватьПринятые Тогда
		Для каждого Стр Из ВводНачальныхОстатковТовары.ЗапасыПринятые Цикл
			ДобавитьИзменитьЦену(ТаблицаПродажныеЦены, Стр, "ЦенаПродажи", ВидЦенПродажи, ИзмененыЦеныПродажи);
		КонецЦикла; 
	КонецЕсли; 
	
	Если ЗаписыватьПереданные Тогда
		Для каждого Стр Из ВводНачальныхОстатковТовары.ЗапасыПереданные Цикл
			ДобавитьИзменитьЦену(ТаблицаЗакупочныеЦены, Стр, "Цена", ВидЦенСебестоимости, ИзмененыЦеныЗакупки);
			ДобавитьИзменитьЦену(ТаблицаПродажныеЦены, Стр, "ЦенаПродажи", ВидЦенПродажи, ИзмененыЦеныПродажи);
		КонецЦикла; 
	КонецЕсли; 

	Если ЗаписыватьСобственные Тогда
		Для каждого Стр Из ВводНачальныхОстатковТовары.Запасы Цикл
			Если ВалютаСебестоимости<>ВалютаУчета Тогда
				ДобавитьИзменитьЦену(ТаблицаЗакупочныеЦены, Стр, "ЦенаСебестоимости", ВидЦенСебестоимости, ИзмененыЦеныЗакупки);
			Иначе
				ДобавитьИзменитьЦену(ТаблицаЗакупочныеЦены, Стр, "Цена", ВидЦенСебестоимости, ИзмененыЦеныЗакупки);
			КонецЕсли; 
			ДобавитьИзменитьЦену(ТаблицаПродажныеЦены, Стр, "ЦенаПродажи", ВидЦенПродажи, ИзмененыЦеныПродажи);
		КонецЦикла;
	КонецЕсли;
	
	Если ИзмененыЦеныЗакупки Тогда
		НаборЗакупочныеЦены.Загрузить(ТаблицаЗакупочныеЦены);
		НаборЗакупочныеЦены.Записать(Истина);
	КонецЕсли;
	
	Если ИзмененыЦеныПродажи Тогда
		НаборПродажныеЦены.Загрузить(ТаблицаПродажныеЦены);
		НаборПродажныеЦены.Записать(Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИзменитьЦену(Таблица, Стр, ИмяПоля, ВидЦен, ОтметкаИзменения)
	
	Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
		Возврат;
	КонецЕсли; 
	Запись = СуществующаяЗапись(Таблица, Стр);
	Если Стр[ИмяПоля]=0 И Запись=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Запись<>Неопределено И Стр[ИмяПоля]=0 Тогда
		ОтметкаИзменения = Истина;
		Таблица.Удалить(Запись);
		Возврат;
	КонецЕсли;
	Если Запись<>Неопределено И Запись.Цена=Стр[ИмяПоля] И Запись.ЕдиницаИзмерения=Стр.ЕдиницаИзмерения Тогда
		Возврат;
	КонецЕсли; 
	ОтметкаИзменения = Истина;
	Если Запись=Неопределено Тогда
		Запись = Таблица.Добавить();
	КонецЕсли; 
	Запись.Период = ДатаОстатков;
	ЗаполнитьЗначенияСвойств(Запись, Стр, "Номенклатура, Характеристика, ЕдиницаИзмерения");
	Запись.Актуальность = Истина;
	Запись.ВидЦен = ВидЦен;
	Запись.Цена = Стр[ИмяПоля];
	
КонецПроцедуры

&НаСервере
Функция СуществующаяЗапись(Таблица, СтрокаТабличнойЧасти)
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТабличнойЧасти);
	Строки =  Таблица.НайтиСтроки(СтруктураПоиска);
	Если Строки.Количество()=0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Строки[0];
	КонецЕсли; 
	
КонецФункции
 
&НаСервере
Процедура ЗаполнитьЦены(ЗаполнятьЦеныУчета = Истина, ЗаполнятьЦеныПродажи = Истина, ЗаполнятьЦеныРасчетов = Истина)
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаНоменклатуры.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаНоменклатуры.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаНоменклатуры.Колонки.Добавить("ИмяТаблицы", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(25, ДопустимаяДлина.Переменная)));
	Для каждого Стр Из ВводНачальныхОстатковТовары.Запасы Цикл
		СтрТаблицы = ТаблицаНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТаблицы, Стр);
		СтрТаблицы.Идентификатор = Стр.ПолучитьИдентификатор();
		СтрТаблицы.ИмяТаблицы = "Запасы";
	КонецЦикла;
	Для каждого Стр Из ВводНачальныхОстатковТовары.ЗапасыПринятые Цикл
		СтрТаблицы = ТаблицаНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТаблицы, Стр);
		СтрТаблицы.Идентификатор = Стр.ПолучитьИдентификатор();
		СтрТаблицы.ИмяТаблицы = "ЗапасыПринятые";
	КонецЦикла;
	Для каждого Стр Из ВводНачальныхОстатковТовары.ЗапасыПереданные Цикл
		СтрТаблицы = ТаблицаНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТаблицы, Стр);
		СтрТаблицы.Идентификатор = Стр.ПолучитьИдентификатор();
		СтрТаблицы.ИмяТаблицы = "ЗапасыПереданные";
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	Запрос.УстановитьПараметр("ВидЦенПродажи", ВидЦенПродажи);
	Запрос.УстановитьПараметр("ВидЦенСебестоимости", ВидЦенСебестоимости);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика,
	|	ТаблицаНоменклатуры.Идентификатор,
	|	ТаблицаНоменклатуры.ИмяТаблицы
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Идентификатор,
	|	ТаблицаНоменклатуры.ИмяТаблицы,
	|	ЕСТЬNULL(ЕСТЬNULL(ЦеныПродажиПоХарактеристикам.Цена, ЦеныПродажиБезХарактеристик.Цена), 0) КАК ЦенаПродажи,
	|	ЕСТЬNULL(ЕСТЬNULL(ЦеныСебестоимостиПоХарактеристикам.Цена, ЦеныСебестоимостиБезХарактеристик.Цена), 0) КАК Цена
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаОстатков,
	|				ВидЦен = &ВидЦенПродажи
	|					И НЕ Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныПродажиПоХарактеристикам
	|		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныПродажиПоХарактеристикам.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = ЦеныПродажиПоХарактеристикам.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаОстатков,
	|				ВидЦен = &ВидЦенПродажи
	|					И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныПродажиБезХарактеристик
	|		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныПродажиБезХарактеристик.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаОстатков,
	|				ВидЦен = &ВидЦенСебестоимости
	|					И НЕ Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныСебестоимостиПоХарактеристикам
	|		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныСебестоимостиПоХарактеристикам.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = ЦеныСебестоимостиПоХарактеристикам.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаОстатков,
	|				ВидЦен = &ВидЦенСебестоимости
	|					И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныСебестоимостиБезХарактеристик
	|		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныСебестоимостиБезХарактеристик.Номенклатура";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ИмяТаблицы="Запасы" Тогда
			Стр = ВводНачальныхОстатковТовары.Запасы.НайтиПоИдентификатору(Выборка.Идентификатор);
			Если ЗаполнятьЦеныПродажи Тогда
				Стр.ЦенаПродажи = Выборка.ЦенаПродажи;
			КонецЕсли;
			Если ЗаполнятьЦеныУчета Тогда
				Стр.ЦенаСебестоимости = Выборка.Цена;
				Стр.Цена = Стр.ЦенаСебестоимости * КурсСебестоимости / КратностьСебестоимости;
				Стр.Сумма = Стр.Цена * Стр.Количество;
			Иначе
				Стр.ЦенаСебестоимости = Стр.Цена / КурсСебестоимости * КратностьСебестоимости;
			КонецЕсли; 
			Стр.СуммаСебестоимости = Стр.ЦенаСебестоимости * Стр.Количество;
		ИначеЕсли Выборка.ИмяТаблицы="ЗапасыПринятые" Тогда
			Стр = ВводНачальныхОстатковТовары.ЗапасыПринятые.НайтиПоИдентификатору(Выборка.Идентификатор);
			Если ЗаполнятьЦеныРасчетов Тогда
				Стр.ЦенаПродажи = Выборка.ЦенаПродажи;
				Стр.СуммаРасчетов = Стр.ЦенаПродажи * Стр.Количество / КурсРасчетовСервер(Стр.Договор);
			Иначе
				Стр.ЦенаПродажи = ?(Стр.Количество=0, 0, Стр.СуммаРасчетов / Стр.Количество) * КурсРасчетовСервер(Стр.Договор);
			КонецЕсли;
			Стр.СуммаПродажи = Стр.ЦенаПродажи * Стр.Количество;
		ИначеЕсли Выборка.ИмяТаблицы="ЗапасыПереданные" Тогда
			Стр = ВводНачальныхОстатковТовары.ЗапасыПереданные.НайтиПоИдентификатору(Выборка.Идентификатор);
			Если ЗаполнятьЦеныРасчетов Тогда
				Стр.ЦенаПродажи = Выборка.ЦенаПродажи;
				Стр.СуммаРасчетов = Стр.ЦенаПродажи * Стр.Количество / КурсРасчетовСервер(Стр.Договор);
			Иначе
				Стр.ЦенаПродажи = ?(Стр.Количество=0, 0, Стр.СуммаРасчетов / Стр.Количество) * КурсРасчетовСервер(Стр.Договор);
			КонецЕсли;
			Стр.СуммаПродажи = Стр.ЦенаПродажи * Стр.Количество;
			Если ЗаполнятьЦеныУчета Тогда
				Стр.Цена = Выборка.Цена;
				Стр.Себестоимость = Стр.Цена * Стр.Количество * КурсСебестоимости / КратностьСебестоимости;
			Иначе
				Стр.Цена = ?(Стр.Количество=0, 0, Стр.Себестоимость / Стр.Количество) / КурсСебестоимости * КратностьСебестоимости;
			КонецЕсли; 
			Стр.СуммаСебестоимости = Стр.Цена * Стр.Количество;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("ТипНоменклатуры", СтруктураДанные.Номенклатура.ТипНоменклатуры);
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	// Наборы
	СтруктураДанные.Вставить("ЭтоНабор", СтруктураДанные.Номенклатура.ЭтоНабор);
	
	// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",Ложь);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьХарактеристики
		Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура);
		
		Если Не ЗначенияПоУмолчанию = Неопределено
			Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика",ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика), СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
		
		СтруктураДанные.Вставить("ИспользоватьХарактеристики",Истина);
		СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",СтруктураДанные.Номенклатура.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли; 
	// Конец Характеристики
	
	//Партии
	СтруктураДанные.Вставить("ИспользоватьПартии",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеПартий",Ложь);
	
	Если НЕ СтруктураДанные.Свойство("Партия") Тогда
		СтруктураДанные.Вставить("Партия", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьПартии
		Тогда
		
		Если СтруктураДанные.Свойство("СтатусПартии")
			Тогда
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтруктураДанные.СтатусПартии);
		Иначе
			Если Не СтруктураДанные.Свойство("ВидОперации")
				Тогда
				ВидОперации = Неопределено
			Иначе
				ВидОперации = СтруктураДанные.ВидОперации
			КонецЕсли;
			
			СтатусПартии = НоменклатураВДокументахСервер.СоответствиеВидаОперацииИлиХозОперацииСтатусуПартии(, ВидОперации);
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтатусПартии);
		КонецЕсли;
		
		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		
		Если Не ЗначенияПартииПоУмолчанию = Неопределено
			Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;
		
		СтруктураДанные.Партия = ?(ЗначениеЗаполнено(СтруктураДанные.Партия), СтруктураДанные.Партия, ПартияПоУмолчанию);
		
		СтруктураДанные.ПроверятьЗаполнениеПартий = СтруктураДанные.Номенклатура.ПроверятьЗаполнениеПартий;
		СтруктураДанные.ИспользоватьПартии = Истина;
		
	КонецЕсли;
	// Конец Партии
	
	Если НЕ СтруктураДанные.Свойство("ВидЦенСебестоимости") ИЛИ НЕ СтруктураДанные.Свойство("ВидЦенПродажи") Тогда
		Возврат СтруктураДанные;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстатков", СтруктураДанные.ДатаОстатков);
	Запрос.УстановитьПараметр("Номенклатура", СтруктураДанные.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", СтруктураДанные.Характеристика);
	Запрос.УстановитьПараметр("ВидЦенСебестоимости", СтруктураДанные.ВидЦенСебестоимости);
	Запрос.УстановитьПараметр("ВидЦенПродажи", СтруктураДанные.ВидЦенПродажи);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|				КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦен = &ВидЦенСебестоимости
	|					ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК Цена,
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|				КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦен = &ВидЦенПродажи
	|					ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ЦенаПродажи
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ДатаОстатков,
	|			ВидЦен В (&ВидЦенСебестоимости, &ВидЦенПродажи)
	|				И Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика) КАК ЦеныНоменклатурыСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураДанные.Вставить("Цена", Выборка.Цена);
		СтруктураДанные.Вставить("ЦенаПродажи", Выборка.ЦенаПродажи);
	Иначе
		СтруктураДанные.Вставить("Цена", 0);
		СтруктураДанные.Вставить("ЦенаПродажи", 0);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьСерииНоменклатуры Тогда
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(СтруктураДанные));
	Иначе
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", 0);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияПриИзменении.
//
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

&НаСервереБезКонтекста
Функция ТипНоменклатурыЗапас(НоменклатураСсылка)
	
	Возврат НоменклатураСсылка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас;
	
КонецФункции

&НаСервере
// Обновляет условное оформление колонки "Характеристика" для формы документа
// Форма - Форма объекта для условного оформления
// СоответствиеИменТабличныхЧастей - Соответствие Имя Табличной части -> Имя колонки табличной части
Процедура ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик(Форма)
		МетаданныеОбъекта = ВводНачальныхОстатковТовары.Ссылка.Метаданные();
		
		Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
			Если НЕ ТабличнаяЧасть.Реквизиты.Найти("Характеристика") = Неопределено
				Тогда
				НаименованиеПоля = "ВводНачальныхОстатковТовары" + ТабличнаяЧасть.Имя + "Характеристика";
				ЗначениеПоиска = Форма.Элементы.Найти(НаименованиеПоля);
				
				Если НЕ ЗначениеПоиска = Неопределено 
					Тогда
					ИмяПоляПроверятьЗаполнениеХарактеристики = ЗначениеПоиска.Родитель.ПутьКДанным + ".ПроверятьЗаполнениеХарактеристики";
					ИмяПоляИспользоватьХарактеристики = ЗначениеПоиска.Родитель.ПутьКДанным+".ИспользоватьХарактеристики";
					ИмяПоляХарактеристики = НаименованиеПоля; 
					
					НовоеУсловноеОформление = Форма.УсловноеОформление.Элементы.Добавить();
					РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяПоляИспользоватьХарактеристики, Ложь, ВидСравненияКомпоновкиДанных.Равно);
					
					РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляХарактеристики);
					РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Не используется>'"));
					РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
					РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
					
					НовоеУсловноеОформление = Форма.УсловноеОформление.Элементы.Добавить();
					РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяПоляПроверятьЗаполнениеХарактеристики, Истина, ВидСравненияКомпоновкиДанных.Равно);
					
					РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляХарактеристики);
					РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
					
					НовоеУсловноеОформление = Форма.УсловноеОформление.Элементы.Добавить();
					РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ЗначениеПоиска.Родитель.ПутьКДанным+".Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
					РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляХарактеристики);
					РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ТабличнаяЧасть.Реквизиты.Найти("Партия") = Неопределено
				Тогда
				НаименованиеПоля = "ВводНачальныхОстатковТовары" + ТабличнаяЧасть.Имя + "Партия";
				ЗначениеПоиска = Форма.Элементы.Найти(НаименованиеПоля);
				
				Если НЕ ЗначениеПоиска = Неопределено
					Тогда
					ИмяПоляИспользоватьПартии = ЗначениеПоиска.Родитель.ПутьКДанным+".ИспользоватьПартии";
					ИмяПоляХарактеристики = НаименованиеПоля; 
					ИмяПоляПроверятьЗаполнениеПартии = ЗначениеПоиска.Родитель.ПутьКДанным + ".ПроверятьЗаполнениеПартий";
					
					НовоеУсловноеОформление = Форма.УсловноеОформление.Элементы.Добавить();
					РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяПоляИспользоватьПартии, Ложь, ВидСравненияКомпоновкиДанных.Равно);
					
					РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляХарактеристики);
					РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Не используется>'"));
					РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
					РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
					
					НовоеУсловноеОформление = Форма.УсловноеОформление.Элементы.Добавить();
					РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяПоляПроверятьЗаполнениеПартии, Истина, ВидСравненияКомпоновкиДанных.Равно);
					
					РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляХарактеристики);
					РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
					
					НовоеУсловноеОформление = Форма.УсловноеОформление.Элементы.Добавить();
					РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ЗначениеПоиска.Родитель.ПутьКДанным+".Партия", Справочники.ПартииНоменклатуры.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
					РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляХарактеристики);
					РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияХарактеристик()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаНоменклатурыДокумента.Номенклатура КАК Справочник.Номенклатура) КАК Ссылка,
	|	ТаблицаНоменклатурыДокумента.НомерСтроки КАК НомерСтрокиНоменклатуры,
	|	ТаблицаНоменклатурыДокумента.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВыборкаИзТабличнойЧастиЗапасы
	|ИЗ
	|	&ТаблицаНоменклатурыДокумента КАК ТаблицаНоменклатурыДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыборкаИзТабличнойЧастиЗапасы.НомерСтрокиНоменклатуры КАК НомерСтрокиНоменклатуры,
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка.ПроверятьЗаполнениеХарактеристики КАК ПроверятьЗаполнениеХарактеристики,
	|	ИСТИНА КАК ЗаполнениеХарактеристикиПроверено,
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка.ИспользоватьПартии КАК ИспользоватьПартии,
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка.ПроверятьЗаполнениеПартий КАК ПроверятьЗаполнениеПартий
	|ИЗ
	|	ВыборкаИзТабличнойЧастиЗапасы КАК ВыборкаИзТабличнойЧастиЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияНоменклатурыПоУмолчанию КАК ЗначенияНоменклатурыПоУмолчанию
	|		ПО ВыборкаИзТабличнойЧастиЗапасы.Ссылка = ЗначенияНоменклатурыПоУмолчанию.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиНоменклатуры";
	
	//::: ЗАПАСЫ
	
	ОтборНеПроверенныхСтрок = Новый Структура("ЗаполнениеХарактеристикиПроверено", Ложь);
	МассивНеПроверенныхСтрок = ВводНачальныхОстатковТовары.Запасы.НайтиСтроки(ОтборНеПроверенныхСтрок);
	
	ТаблицаНоменклатурыДокумента = ВводНачальныхОстатковТовары.Запасы.Выгрузить(МассивНеПроверенныхСтрок,"Номенклатура, НомерСтроки, Характеристика");
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыДокумента",ТаблицаНоменклатурыДокумента);
	ВыборкаПоХарактеристикам = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПоХарактеристикам.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ВводНачальныхОстатковТовары.Запасы[ВыборкаПоХарактеристикам.НомерСтрокиНоменклатуры-1],ВыборкаПоХарактеристикам);
	КонецЦикла;
	
	//::: ЗАПАСЫ (ГТД)
	
	ОтборНеПроверенныхСтрок = Новый Структура("ЗаполнениеХарактеристикиПроверено", Ложь);
	МассивНеПроверенныхСтрок = ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД.НайтиСтроки(ОтборНеПроверенныхСтрок);
	
	ТаблицаНоменклатурыДокумента = ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД.Выгрузить(МассивНеПроверенныхСтрок,"Номенклатура, НомерСтроки, Характеристика");
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыДокумента",ТаблицаНоменклатурыДокумента);
	ВыборкаПоХарактеристикам = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПоХарактеристикам.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД[ВыборкаПоХарактеристикам.НомерСтрокиНоменклатуры-1],ВыборкаПоХарактеристикам);
	КонецЦикла;
	
	//::: ЗАПАСЫ ПЕРЕДАННЫЕ
	
	ОтборНеПроверенныхСтрок = Новый Структура("ЗаполнениеХарактеристикиПроверено", Ложь);
	МассивНеПроверенныхСтрок = ВводНачальныхОстатковТовары.ЗапасыПереданные.НайтиСтроки(ОтборНеПроверенныхСтрок);
	
	ТаблицаНоменклатурыДокумента = ВводНачальныхОстатковТовары.ЗапасыПереданные.Выгрузить(МассивНеПроверенныхСтрок,"Номенклатура, НомерСтроки, Характеристика");
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыДокумента",ТаблицаНоменклатурыДокумента);
	ВыборкаПоХарактеристикам = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПоХарактеристикам.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ВводНачальныхОстатковТовары.ЗапасыПереданные[ВыборкаПоХарактеристикам.НомерСтрокиНоменклатуры-1],ВыборкаПоХарактеристикам);
	КонецЦикла;
	
	//::: ЗАПАСЫ ПЕРЕДАННЫЕ (ГТД)
	ОтборНеПроверенныхСтрок = Новый Структура("ЗаполнениеХарактеристикиПроверено", Ложь);
	МассивНеПроверенныхСтрок = ВводНачальныхОстатковТовары.ЗапасыПереданныеВРазрезеГТД.НайтиСтроки(ОтборНеПроверенныхСтрок);
	
	ТаблицаНоменклатурыДокумента = ВводНачальныхОстатковТовары.ЗапасыПереданныеВРазрезеГТД.Выгрузить(МассивНеПроверенныхСтрок,"Номенклатура, НомерСтроки, Характеристика");
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыДокумента",ТаблицаНоменклатурыДокумента);
	ВыборкаПоХарактеристикам = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПоХарактеристикам.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ВводНачальныхОстатковТовары.ЗапасыПереданныеВРазрезеГТД[ВыборкаПоХарактеристикам.НомерСтрокиНоменклатуры-1], ВыборкаПоХарактеристикам);
		
	КонецЦикла;
	
	//::: ЗАПАСЫ ПРИНЯТЫЕ
	ОтборНеПроверенныхСтрок = Новый Структура("ЗаполнениеХарактеристикиПроверено", Ложь);
	МассивНеПроверенныхСтрок = ВводНачальныхОстатковТовары.ЗапасыПринятые.НайтиСтроки(ОтборНеПроверенныхСтрок);
	
	ТаблицаНоменклатурыДокумента = ВводНачальныхОстатковТовары.ЗапасыПринятые.Выгрузить(МассивНеПроверенныхСтрок,"Номенклатура, НомерСтроки, Характеристика");
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыДокумента",ТаблицаНоменклатурыДокумента);
	ВыборкаПоХарактеристикам = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПоХарактеристикам.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ВводНачальныхОстатковТовары.ЗапасыПринятые[ВыборкаПоХарактеристикам.НомерСтрокиНоменклатуры-1],ВыборкаПоХарактеристикам);
	КонецЦикла;
	
	//::: ЗАПАСЫ ПРИНЯТЫЕ (ГТД)
	ОтборНеПроверенныхСтрок = Новый Структура("ЗаполнениеХарактеристикиПроверено", Ложь);
	МассивНеПроверенныхСтрок = ВводНачальныхОстатковТовары.ЗапасыПринятыеВРазрезеГТД.НайтиСтроки(ОтборНеПроверенныхСтрок);
	
	ТаблицаНоменклатурыДокумента = ВводНачальныхОстатковТовары.ЗапасыПринятыеВРазрезеГТД.Выгрузить(МассивНеПроверенныхСтрок,"Номенклатура, НомерСтроки, Характеристика");
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыДокумента",ТаблицаНоменклатурыДокумента);
	ВыборкаПоХарактеристикам = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПоХарактеристикам.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ВводНачальныхОстатковТовары.ЗапасыПринятыеВРазрезеГТД[ВыборкаПоХарактеристикам.НомерСтрокиНоменклатуры-1], ВыборкаПоХарактеристикам);
		
	КонецЦикла;
	
	СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧастиВводНачальныхОстатков(ВводНачальныхОстатковТовары);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКурсыКонтрагентов()
	
	Если ТипЗнч(КурсыКонтрагентов)<>Тип("ФиксированноеСоответствие") Тогда
		КурсыКонтрагентов = Новый ФиксированноеСоответствие(Новый Соответствие);
	КонецЕсли; 	
	
	МассивДоговоров = Новый Массив;
	Для каждого СтрокаТабличнойЧасти Из ВводНачальныхОстатковТовары.ЗапасыПринятые Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
			Продолжить;
		КонецЕсли; 
		Если КурсыКонтрагентов.Получить(СтрокаТабличнойЧасти.Договор)<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если МассивДоговоров.Найти(СтрокаТабличнойЧасти.Договор)<>Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		МассивДоговоров.Добавить(СтрокаТабличнойЧасти.Договор);	
	КонецЦикла;
	
	ДополнитьКурсы(МассивДоговоров, ДатаОстатков, ВалютаПродажи, КурсыКонтрагентов);
	
КонецПроцедуры

&НаКлиенте
Функция КурсРасчетовКлиент(Договор)
	
	Возврат КурсРасчетов(Договор, ДатаОстатков, ВалютаПродажи, КурсыКонтрагентов);	
	
КонецФункции
 
&НаСервере
Функция КурсРасчетовСервер(Договор)
	
	Возврат КурсРасчетов(Договор, ДатаОстатков, ВалютаПродажи, КурсыКонтрагентов);	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КурсРасчетов(Договор, ДатаРасчета, ВалютаПродажи, КурсыКонтрагентов)
	
	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		Возврат 1;
	КонецЕсли; 	
	
	Если КурсыКонтрагентов.Получить(Договор)=Неопределено Тогда
		ДополнитьКурсы(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Договор), ДатаРасчета, ВалютаПродажи, КурсыКонтрагентов);
	КонецЕсли;
	
	Возврат КурсыКонтрагентов.Получить(Договор);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьКурсы(МассивДоговоров, ДатаРасчета, ВалютаПродажи, КурсыКонтрагентов)

	Результат = Новый Соответствие(КурсыКонтрагентов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Договоры", МассивДоговоров);
	Запрос.УстановитьПараметр("ДатаРасчета", ДатаРасчета);
	Запрос.УстановитьПараметр("ВалютаПродажи", ВалютаПродажи);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА КурсыВалютСрезПоследних.Курс = 0
	|				ТОГДА 1
	|			ИНАЧЕ КурсыВалютСрезПоследних.Курс
	|		КОНЕЦ, 1) / ЕСТЬNULL(ВЫБОР
	|			КОГДА КурсыВалютСрезПоследних.Кратность = 0
	|				ТОГДА 1
	|			ИНАЧЕ КурсыВалютСрезПоследних.Кратность
	|		КОНЕЦ, 1) / ЕСТЬNULL(ВЫБОР
	|			КОГДА КурсПродажи.Курс = 0
	|				ТОГДА 1
	|			ИНАЧЕ КурсПродажи.Курс
	|		КОНЕЦ, 1) * ЕСТЬNULL(ВЫБОР
	|			КОГДА КурсПродажи.Кратность = 0
	|				ТОГДА 1
	|			ИНАЧЕ КурсПродажи.Кратность
	|		КОНЕЦ, 1) КАК Курс
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаРасчета, ) КАК КурсыВалютСрезПоследних
	|		ПО ДоговорыКонтрагентов.ВалютаРасчетов = КурсыВалютСрезПоследних.Валюта,
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаРасчета, Валюта = &ВалютаПродажи) КАК КурсПродажи
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В(&Договоры)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Договор, Выборка.Курс);	
	КонецЦикла; 
	
	КурсыКонтрагентов = Новый ФиксированноеСоответствие(Результат);
	
КонецПроцедуры 


&НаКлиенте
Процедура ПересчитатьИтогиКлиент(ИмяТабличнойЧасти);
	
	Если ВводНачальныхОстатковТовары.ЗапасыПринятые.Количество()=0
		И ВводНачальныхОстатковТовары.ЗапасыПереданные.Количество()=0 Тогда
		ИтогЗапасыПринятыеСуммаРасчетовВВалютеУчета = 0;
		ИтогЗапасыПереданныеСуммаРасчетовВВалютеУчета = 0;
		Возврат;
	КонецЕсли; 
	
	Если ИмяТабличнойЧасти="ЗапасыПринятые" Тогда
		ИмяПроцедуры = "ОбновитьИтогиЗапасыПринятыеОтложено";
	ИначеЕсли ИмяТабличнойЧасти="ЗапасыПереданные" Тогда
		ИмяПроцедуры = "ОбновитьИтогиЗапасыПереданныеОтложено";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяПроцедуры) Тогда
		ПодключитьОбработчикОжидания(ИмяПроцедуры, 0.3, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтогиЗапасыПринятыеОтложено() Экспорт
	
	ИтогЗапасыПринятыеСуммаРасчетовВВалютеУчета = ИтогиПоТЧВалютаУчета(ВводНачальныхОстатковТовары.ЗапасыПринятые, ДатаОстатков, ВалютаПродажи, КурсыКонтрагентов);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОбновитьИтогиЗапасыПереданныеОтложено() Экспорт
	
	ИтогЗапасыПереданныеСуммаРасчетовВВалютеУчета = ИтогиПоТЧВалютаУчета(ВводНачальныхОстатковТовары.ЗапасыПереданные, ДатаОстатков, ВалютаПродажи, КурсыКонтрагентов);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьИтогиСервер()
	
	ИтогЗапасыПринятыеСуммаРасчетовВВалютеУчета = ИтогиПоТЧВалютаУчета(ВводНачальныхОстатковТовары.ЗапасыПринятые, ДатаОстатков, ВалютаПродажи, КурсыКонтрагентов);
	ИтогЗапасыПереданныеСуммаРасчетовВВалютеУчета = ИтогиПоТЧВалютаУчета(ВводНачальныхОстатковТовары.ЗапасыПереданные, ДатаОстатков, ВалютаПродажи, КурсыКонтрагентов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИтогиПоТЧВалютаУчета(ТабличнаяЧасть, ДатаРасчета, ВалютаПродажи, КурсыКонтрагентов)
	
	Итог = 0;
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Итог = Итог + СтрокаТабличнойЧасти.СуммаРасчетов * КурсРасчетов(СтрокаТабличнойЧасти.Договор, ДатаРасчета, ВалютаПродажи, КурсыКонтрагентов);
	КонецЦикла;
	Возврат Итог;
	
КонецФункции
 
#КонецОбласти 

#Область Расчеты

&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация, ИмяТабличнойЧасти, ВидОперации = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(ВводНачальныхОстатковТовары.Ссылка, Контрагент, Организация, ИмяТабличнойЧасти, ВидОперации);
	
	СтруктураДанные.Вставить(
		"Договор",
		ДоговорПоУмолчанию
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорПоУмолчанию.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить("ВестиРасчетыПоДоговорам", Контрагент.ВестиРасчетыПоДоговорам);
	СтруктураДанные.Вставить("ВестиРасчетыПоДокументам", Контрагент.ВестиРасчетыПоДокументам);
	СтруктураДанные.Вставить("ВестиРасчетыПоЗаказам", Контрагент.ВестиРасчетыПоЗаказам);
	СтруктураДанные.Вставить("ВестиУчетОплатыПоСчетам", Контрагент.ВестиУчетОплатыПоСчетам);
	
	УстановитьВидимостьРеквизитовТЧ(
		ИмяТабличнойЧасти,
		Контрагент.ВестиРасчетыПоДоговорам,
		Контрагент.ВестиРасчетыПоДокументам,
		Контрагент.ВестиРасчетыПоЗаказам,
		Контрагент.ВестиУчетОплатыПоСчетам
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает договор по умолчанию в зависимости от способа ведения расчетов.
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ИмяТабличнойЧасти, ВидОперации = Неопределено)
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	Если (ИмяТабличнойЧасти = "ЗапасыПереданные"
		ИЛИ ИмяТабличнойЧасти = "ЗапасыПринятые")
		И Не ЗначениеЗаполнено(ВидОперации) Тогда
		
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации, ИмяТабличнойЧасти);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьРеквизитовТЧ(ИмяТабличнойЧасти, Знач ВестиРасчетыПоДоговорам = Ложь, Знач ВестиРасчетыПоДокументам = Ложь, Знач ВестиРасчетыПоЗаказам = Ложь, Знач ВестиУчетОплатыПоСчетам = Ложь, Знач ВалютныйСчет = Ложь )
	
	Если ИмяТабличнойЧасти = "РасчетыСПоставщиками" 
		ИЛИ ИмяТабличнойЧасти = "РасчетыСПокупателями" Тогда
		ЗаполнитьСлужебныеРеквизитыПоКонтрагентуВКоллекции(ВводНачальныхОстатковРасчетыСКонтрагентами[ИмяТабличнойЧасти]);
	ИначеЕсли ИмяТабличнойЧасти = "ЗапасыПереданные" 
		ИЛИ ИмяТабличнойЧасти = "ЗапасыПринятые" Тогда
		ЗаполнитьСлужебныеРеквизитыПоКонтрагентуВКоллекции(ВводНачальныхОстатковТовары[ИмяТабличнойЧасти]);
	ИначеЕсли ИмяТабличнойЧасти = "ПрочиеРазделы" Тогда 
		ЗаполнитьПризнакВалютныйСчета();
	КонецЕсли; 
	
	Если ИмяТабличнойЧасти = "РасчетыСПоставщиками" 
		ИЛИ ИмяТабличнойЧасти = "РасчетыСПокупателями" Тогда
		Для каждого ТекСтрока Из ВводНачальныхОстатковРасчетыСКонтрагентами[ИмяТабличнойЧасти] Цикл
			Если ТекСтрока.ВестиРасчетыПоДоговорам Тогда
				ВестиРасчетыПоДоговорам = Истина;
			КонецЕсли;
			Если ТекСтрока.ВестиРасчетыПоДокументам Тогда
				ВестиРасчетыПоДокументам = Истина;
			КонецЕсли;
			Если ТекСтрока.ВестиРасчетыПоЗаказам Тогда
				ВестиРасчетыПоЗаказам = Истина;
			КонецЕсли;
			Если ТекСтрока.ВестиУчетОплатыПоСчетам Тогда
				ВестиУчетОплатыПоСчетам = Истина;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ИмяТабличнойЧасти = "ЗапасыПереданные" 
		ИЛИ ИмяТабличнойЧасти = "ЗапасыПринятые" Тогда
		Для каждого ТекСтрока Из ВводНачальныхОстатковТовары[ИмяТабличнойЧасти] Цикл
			Если ТекСтрока.ВестиРасчетыПоДоговорам Тогда
				ВестиРасчетыПоДоговорам = Истина;
			КонецЕсли;
			Если ТекСтрока.ВестиРасчетыПоЗаказам Тогда
				ВестиРасчетыПоЗаказам = Истина;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ИмяТабличнойЧасти = "ПрочиеРазделы" Тогда
		Для каждого ТекСтрока Из ВводНачальныхОстатковПрочее[ИмяТабличнойЧасти] Цикл
			Если ТекСтрока.Валютный Тогда
				ВалютныйСчет = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	
	Если ИмяТабличнойЧасти = "РасчетыСПоставщиками" Тогда
		Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиДоговор.Видимость = ВестиРасчетыПоДоговорам;
		Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиДокумент.Видимость = ВестиРасчетыПоДокументам;
		Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиЗаказПоставщику.Видимость = ВестиРасчетыПоЗаказам;
		Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиСчетНаОплату.Видимость = ВестиУчетОплатыПоСчетам;
	ИначеЕсли ИмяТабличнойЧасти = "РасчетыСПокупателями" Тогда
		Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиДоговор.Видимость = ВестиРасчетыПоДоговорам;
		Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиДокумент.Видимость = ВестиРасчетыПоДокументам;
		Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиЗаказПокупателя.Видимость = ВестиРасчетыПоЗаказам;
		Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиСчетНаОплату.Видимость = ВестиУчетОплатыПоСчетам;
	ИначеЕсли ИмяТабличнойЧасти = "ЗапасыПереданные" Тогда
		Элементы.ВводНачальныхОстатковТоварыЗапасыПереданныеДоговор.Видимость = ВестиРасчетыПоДоговорам;
		Элементы.ВводНачальныхОстатковТоварыЗапасыПереданныеЗаказ.Видимость = ВестиРасчетыПоЗаказам;
	ИначеЕсли ИмяТабличнойЧасти = "ЗапасыПринятые" Тогда
		Элементы.ВводНачальныхОстатковТоварыЗапасыПринятыеДоговор.Видимость = ВестиРасчетыПоДоговорам;
		Элементы.ВводНачальныхОстатковТоварыЗапасыПринятыеЗаказ.Видимость = ВестиРасчетыПоЗаказам;
	ИначеЕсли ИмяТабличнойЧасти = "ПрочиеРазделы" Тогда 
		Элементы.ВводНачальныхОстатковПрочееПрочиеРазделыВалюта.Видимость = ВалютныйСчет;
		Элементы.ВводНачальныхОстатковПрочееПрочиеРазделыСуммаВал.Видимость = ВалютныйСчет;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "ПрочиеРазделы" Тогда
		Если ЗначениеЗаполнено(Организация) Тогда
			РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИспользуетсяОтчетность, ИПИспользуетТрудНаемныхРаботников");
			СистемаНалогообложения = РегистрыСведений.СистемыНалогообложенияОрганизаций.ПолучитьПоследнее(ДатаОстатков, Новый Структура("Организация", Организация));
			УСНДоходыРасходы = СистемаНалогообложения.ПлательщикУСН И СистемаНалогообложения.ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.ДоходыМинусРасходы;
			Элементы.ВводНачальныхОстатковЗакупкиТоваровДляУСНЗакупкиДляКУДИР.Видимость = РеквизитыОрганизации.ИспользуетсяОтчетность И УСНДоходыРасходы;
			
			Элементы.ВводНачальныхОстатковРасчетыСФондамиПоСтраховымВзносамРасчетыСФондамиПоСтраховымВзносам.Видимость = РеквизитыОрганизации.ИспользуетсяОтчетность И РеквизитыОрганизации.ИПИспользуетТрудНаемныхРаботников;
		Иначе
			Элементы.ВводНачальныхОстатковЗакупкиТоваровДляУСНЗакупкиДляКУДИР.Видимость = Ложь;
			Элементы.ВводНачальныхОстатковРасчетыСФондамиПоСтраховымВзносамРасчетыСФондамиПоСтраховымВзносам.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьРеквизитовРасчетов()

&НаСервере
Процедура ЗаполнитьПризнакВалютныйСчета()
	
	КоллекцияДанных = ВводНачальныхОстатковПрочее.ПрочиеРазделы;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Таблица.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Таблица.Счет КАК ПланСчетов.Управленческий) КАК Счет
	|ПОМЕСТИТЬ ТаблицаСчетов
	|ИЗ
	|	&КоллекцияДанных КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСчетов.Счет.Валютный КАК Валютный
	|ИЗ
	|	ТаблицаСчетов КАК ТаблицаСчетов";
	
	Запрос.УстановитьПараметр("КоллекцияДанных", КоллекцияДанных.Выгрузить( ,"НомерСтроки, Счет"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Для Сч = 0 По КоллекцияДанных.Количество() - 1 Цикл
		Выборка.Следующий(); // Количество строк в выборке по запросу всегда равно количеству строк в коллекции
		ЗаполнитьЗначенияСвойств(КоллекцияДанных[Сч], Выборка, "Валютный");
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСлужебныеРеквизитыПоКонтрагентуВКоллекции(КоллекцияДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Таблица.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	Таблица.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ТаблицаКонтрагента
	|ИЗ
	|	&КоллекцияДанных КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКонтрагента.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ТаблицаКонтрагента.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ТаблицаКонтрагента.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ТаблицаКонтрагента.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам
	|ИЗ
	|	ТаблицаКонтрагента КАК ТаблицаКонтрагента";
	
	Запрос.УстановитьПараметр("КоллекцияДанных", КоллекцияДанных.Выгрузить( ,"НомерСтроки, Контрагент"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Для Сч = 0 По КоллекцияДанных.Количество() - 1 Цикл
		Выборка.Следующий(); // Количество строк в выборке по запросу всегда равно количеству строк в коллекции
		ЗаполнитьЗначенияСвойств(КоллекцияДанных[Сч], Выборка, "ВестиРасчетыПоДоговорам, ВестиРасчетыПоДокументам, ВестиРасчетыПоЗаказам, ВестиУчетОплатыПоСчетам");
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСлужебныеРеквизитыПоКонтрагентуВКоллекции()

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор, ВидОперации, ИмяТабличнойЧасти)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации, ИмяТабличнойЧасти);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеЭквайринговогоТерминалаПриИзменении(ЭквайринговыйТерминал)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"ВалютаДенежныхСредств",
		ЭквайринговыйТерминал.БанковскийСчетЭквайринг.ВалютаДенежныхСредств
	);
	
	Возврат СтруктураДанные;
	
КонецФункции

#КонецОбласти 

#Область Прочее

&НаСервереБезКонтекста
Функция ПолучитьДанныеВнеоборотныйАктив(ВнеоборотныйАктив)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("СпособАмортизацииПропорциональноОбъемуПродукции", ВнеоборотныйАктив.СпособАмортизации = Перечисления.СпособыНачисленияАмортизацииВнеоборотныхАктивов.ПропорциональноОбъемуПродукции);
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеСчетПриИзменении(Счет) Экспорт
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("Валютный", Счет.Валютный);
	СтруктураДанные.Вставить("Валюта", Константы.ВалютаУчета.Получить());
	
	УстановитьВидимостьРеквизитовТЧ("ПрочиеРазделы", , , , , Счет.Валютный);
	
	Возврат СтруктураДанные;
	
КонецФункции

#КонецОбласти 

#Область ПодключаемоеОборудование	

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов)
	
	ИмяТекущейСтраницы = Элементы.СтраницыОстаткиТоваров.ТекущаяСтраница.Имя;
	Если ИмяТекущейСтраницы = "СтраницаСобственныеТовары" Тогда
		ИмяТабличнойЧасти = "Запасы";
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаПереданныеТовары" Тогда
		ИмяТабличнойЧасти = "ЗапасыПереданные";
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаПринятыеТовары" Тогда
		ИмяТабличнойЧасти = "ЗапасыПринятые";
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаТоварыВРазрезеГТД" Тогда
		ИмяТабличнойЧасти = "ЗапасыВРазрезеГТД";
	Иначе
		Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа", Новый Массив, Новый Массив);
	КонецЕсли;
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("ДатаОстатков", ДатаОстатков);
	СтруктураДанные.Вставить("ВидЦенСебестоимости", ВидЦенСебестоимости);
	СтруктураДанные.Вставить("ВидЦенПродажи", ВидЦенПродажи);
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение"
			, ЭтотОбъект, Новый Структура("СтруктураДанные, ИмяТекущейСтраницы, ИмяТабличнойЧасти", СтруктураДанные, ИмяТекущейСтраницы, ИмяТабличнойЧасти));
			
			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам", ПараметрыОткрытия, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено 
			ИЛИ ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры,ЭтоНабор"
			, ТекШтрихкод.Штрихкод, ДанныеШтрихкода[0].Номенклатура, ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры, ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ЭтоНабор));
		Иначе
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			МассивСтрокТЧ = ВводНачальныхОстатковТовары[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("Номенклатура,Характеристика,Партия,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.Партия,ДанныеШтрихкода.ЕдиницаИзмерения));
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				НоваяСтрока = ВводНачальныхОстатковТовары[ИмяТабличнойЧасти].Добавить();
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				Если ИмяТабличнойЧасти="Запасы" Тогда
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтруктурнаяЕдиница) Тогда
						НоваяСтрока.СтруктурнаяЕдиница = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ОсновнойСклад");
					КонецЕсли;
					НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
					НоваяСтрока.ЦенаСебестоимости = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
					НоваяСтрока.ЦенаПродажи = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЦенаПродажи;
				ИначеЕсли ИмяТабличнойЧасти="ЗапасыПринятые" Тогда 
					НоваяСтрока.ЦенаПродажи = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЦенаПродажи;
				ИначеЕсли ИмяТабличнойЧасти="ЗапасыПереданные" Тогда 
					НоваяСтрока.ЦенаПродажи = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЦенаПродажи;
					НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				КонецЕсли; 
				Элементы["ВводНачальныхОстатковТовары" + ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Иначе
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				Элементы["ВводНачальныхОстатковТовары" + ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти, НоваяСтрока);
			
			Если ИмяТекущейСтраницы = "СтраницаСобственныеТовары" И ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, ВводНачальныхОстатковТовары);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ПересчитатьИтогиКлиент(ИмяТабличнойЧасти);
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);

КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры) Экспорт
	
	Если СтруктураНоменклатуры = Неопределено Тогда Возврат КонецЕсли;
	
	ДанныеШтрихкода = СтруктураНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = СтруктураНоменклатуры.ТекШтрихкод;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	СтруктураДанные = Параметры.СтруктураДанные;
	ИмяТекущейСтраницы = Параметры.ИмяТекущейСтраницы;
	ИмяТабличнойЧасти = Параметры.ИмяТабличнойЧасти;
	
	Если СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено ИЛИ ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
		ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры,ЭтоНабор", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор));
	Иначе
		МассивСтрокТЧ = ВводНачальныхОстатковТовары[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("Номенклатура,Характеристика,Партия,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.Партия,ДанныеШтрихкода.ЕдиницаИзмерения));
		Если МассивСтрокТЧ.Количество() = 0 Тогда
			НоваяСтрока = ВводНачальныхОстатковТовары[ИмяТабличнойЧасти].Добавить();
			НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
			НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
			НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
			НоваяСтрока.Количество = ТекШтрихкод.Количество;
			НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
			Если ИмяТабличнойЧасти="Запасы" Тогда
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтруктурнаяЕдиница) Тогда
					НоваяСтрока.СтруктурнаяЕдиница = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ОсновнойСклад");
				КонецЕсли;
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				НоваяСтрока.ЦенаСебестоимости = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				НоваяСтрока.ЦенаПродажи = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЦенаПродажи;
			ИначеЕсли ИмяТабличнойЧасти="ЗапасыПринятые" Тогда 
				НоваяСтрока.ЦенаПродажи = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЦенаПродажи;
			ИначеЕсли ИмяТабличнойЧасти="ЗапасыПереданные" Тогда 
				НоваяСтрока.ЦенаПродажи = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЦенаПродажи;
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
			КонецЕсли; 
			Элементы["ВводНачальныхОстатковТовары" + ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Иначе
			НоваяСтрока = МассивСтрокТЧ[0];
			НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
			Элементы["ВводНачальныхОстатковТовары" + ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти, НоваяСтрока);
		
		Если ИмяТекущейСтраницы = "СтраницаСобственныеТовары" И ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
			СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, ВводНачальныхОстатковТовары);
		КонецЕсли;
		
	КонецЕсли;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодамВМассиве(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		МассивДанныхШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если МассивДанныхШтрихкода <> Неопределено
			И МассивДанныхШтрихкода.Количество() <> 0 Тогда
			
			Для Каждого ДанныеШтрихкода Из МассивДанныхШтрихкода Цикл
				
				СтруктураДанныеНоменклатуры = Новый Структура();
				СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
				СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
				СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
				СтруктураДанныеНоменклатуры.Вставить("ДатаОстатков", СтруктураДанные.ДатаОстатков);
				СтруктураДанныеНоменклатуры.Вставить("ВидЦенСебестоимости", СтруктураДанные.ВидЦенСебестоимости);
				СтруктураДанныеНоменклатуры.Вставить("ВидЦенПродажи", СтруктураДанные.ВидЦенПродажи);
				ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
				
				Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
					ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.Запасы.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов) Экспорт
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов);
	НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтаФорма, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтаФорма,,,,Оповещение
		);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		Если ТекНекорректныйШтрихкод.Свойство("ЭтоНабор") И ТекНекорректныйШтрихкод.ЭтоНабор Тогда
			// Наборы
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", НСтр("ru = 'Набор'"));
		Иначе
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		КонецЕсли; 
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыПодключенияОтключенияОборудования

// Начать подключение необходимых типов оборудования при открытии формы.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения
//	ПоддерживаемыеТипыПодключаемогоОборудования - Строка
//		Содержит перечень типов подключаемого оборудования, разделенных запятыми.
//
&НаКлиенте
Процедура НачатьПодключениеОборудованиеПриОткрытииФормы(Форма, ПоддерживаемыеТипыПодключаемогоОборудования) Экспорт
	
	ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", МенеджерОборудованияКлиентПереопределяемый);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ОповещениеПриПодключении, Форма, ПоддерживаемыеТипыПодключаемогоОборудования);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Начать отключать оборудование по типу при закрытии формы.
//
&НаКлиенте
Процедура НачатьОтключениеОборудованиеПриЗакрытииФормы(Форма) Экспорт
	
	ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", МенеджерОборудованияКлиентПереопределяемый); 
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

#Область ЗагрузкаДанныхИзВнешнегоИсточника

&НаКлиенте
Процедура ПослеВыполненияФоновогоЗадания(Прогресс, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("ПолноеИмяОбъектаЗаполнения") Тогда
		
		Если ДополнительныеПараметры.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.Запасы" Тогда		
			
			ОбработатьПодготовленныеДанныеЗапасы(Прогресс.АдресРезультата);
			ПересчитатьИтогиКлиент("Запасы");
			
		ИначеЕсли ДополнительныеПараметры.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ЗапасыПереданные" Тогда		
			
			ОбработатьПодготовленныеДанныеЗапасыПереданные(Прогресс.АдресРезультата);
			ПересчитатьИтогиКлиент("ЗапасыПереданные");
			
		ИначеЕсли ДополнительныеПараметры.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ЗапасыПринятые" Тогда		
			
			ОбработатьПодготовленныеДанныеЗапасыПринятые(Прогресс.АдресРезультата);
			ПересчитатьИтогиКлиент("ЗапасыПринятые");
			
		ИначеЕсли ДополнительныеПараметры.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ЗапасыВРазрезеГТД" Тогда		
			
			ОбработатьПодготовленныеДанныеЗапасыВРазрезеГТД(Прогресс.АдресРезультата);
			
		КонецЕсли;		
			
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, СтруктураПараметров = Неопределено)
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПослеВыполненияФоновогоЗадания(ДлительнаяОперация, СтруктураПараметров);
		
	Иначе
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВыполненияФоновогоЗадания", ЭтотОбъект, СтруктураПараметров);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Идет загрузка данных.'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаЗапасы(Команда)
	
	ТекущаяНастройкаЗагрузкиДанных = НастройкиЗагрузкиДанных.Запасы;
	ТекущаяНастройкаЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.Запасы";
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, ТекущаяНастройкаЗагрузкиДанных);
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(ТекущаяНастройкаЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаЗапасыПереданные(Команда)
	
	ТекущаяНастройкаЗагрузкиДанных = НастройкиЗагрузкиДанных.ЗапасыПереданные;
	ТекущаяНастройкаЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ЗапасыПереданные";
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, ТекущаяНастройкаЗагрузкиДанных);
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(ТекущаяНастройкаЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаЗапасыПринятые(Команда)
	
	ТекущаяНастройкаЗагрузкиДанных = НастройкиЗагрузкиДанных.ЗапасыПринятые;
	ТекущаяНастройкаЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ЗапасыПринятые";
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, ТекущаяНастройкаЗагрузкиДанных);
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(ТекущаяНастройкаЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаЗапасыВРазрезеГТД(Команда)
	
	ТекущаяНастройкаЗагрузкиДанных = НастройкиЗагрузкиДанных.ЗапасыВРазрезеГТД;
	ТекущаяНастройкаЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ЗапасыВРазрезеГТД";
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, ТекущаяНастройкаЗагрузкиДанных);
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(ТекущаяНастройкаЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаРасчетыСПоставщиками(Команда)
	
	ТекущаяНастройкаЗагрузкиДанных = НастройкиЗагрузкиДанных.РасчетыСПоставщиками;
	ТекущаяНастройкаЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПоставщиками";
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, ТекущаяНастройкаЗагрузкиДанных);
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(ТекущаяНастройкаЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаРасчетыСПокупателями(Команда)
	
	ТекущаяНастройкаЗагрузкиДанных = НастройкиЗагрузкиДанных.РасчетыСПокупателями;
	ТекущаяНастройкаЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПокупателями";
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, ТекущаяНастройкаЗагрузкиДанных);
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(ТекущаяНастройкаЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаРасчетыСПерсоналом(Команда)
	
	ТекущаяНастройкаЗагрузкиДанных = НастройкиЗагрузкиДанных.РасчетыСПерсоналом;
	ТекущаяНастройкаЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПерсоналом";
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, ТекущаяНастройкаЗагрузкиДанных);
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(ТекущаяНастройкаЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаИмущество(Команда)
	
	ТекущаяНастройкаЗагрузкиДанных = НастройкиЗагрузкиДанных.ВнеоборотныеАктивы;
	ТекущаяНастройкаЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ВнеоборотныеАктивы";
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, ТекущаяНастройкаЗагрузкиДанных);
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(ТекущаяНастройкаЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаЗакупкиТоваровДляУСН(Команда)
	
	ТекущаяНастройкаЗагрузкиДанных = НастройкиЗагрузкиДанных.РасчетыСПоставщиками;
	ТекущаяНастройкаЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ЗакупкиДляКУДИР";
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, ТекущаяНастройкаЗагрузкиДанных);
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(ТекущаяНастройкаЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(ТекущаяНастройкаЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, ТекущаяНастройкаЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(ТекущаяНастройкаЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			ПолноеИмяОбъектаЗаполнения = ДополнительныеПараметры.ПолноеИмяОбъектаЗаполнения;
			Если ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.Запасы"
				ИЛИ ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ЗапасыПереданные"
				ИЛИ ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ЗапасыПринятые"
				ИЛИ ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ЗапасыВРазрезеГТД"
				Тогда
				
				ДлительнаяОперация = ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки); 				
				СтруктураПараметров = Новый Структура;				
				Если РезультатЗагрузки.НастройкиЗагрузкиДанных.Свойство("ТекстОшибки") Тогда
					ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатЗагрузки.НастройкиЗагрузкиДанных.ТекстОшибки);
				КонецЕсли;
				СтруктураПараметров.Вставить("ПолноеИмяОбъектаЗаполнения", ПолноеИмяОбъектаЗаполнения);				
				ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, СтруктураПараметров);  				
							
			ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПоставщиками" Тогда
				
				ОбработатьПодготовленныеДанныеРасчетыСПоставщиками(РезультатЗагрузки);
				ПоказатьПредупреждение( , НСтр("ru ='Загрузка данных завершена.'"));
				
			ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПокупателями" Тогда
				
				ОбработатьПодготовленныеДанныеРасчетыСПокупателями(РезультатЗагрузки);
				ПоказатьПредупреждение( , НСтр("ru ='Загрузка данных завершена.'"));
				
			ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПерсоналом" Тогда
				
				ОбработатьПодготовленныеДанныеРасчетыСПерсоналом(РезультатЗагрузки);
				ПоказатьПредупреждение( , НСтр("ru ='Загрузка данных завершена.'"));
				
			ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ВнеоборотныеАктивы" Тогда
				
				ОбработатьПодготовленныеДанныеВнеоборотныеАктивы(РезультатЗагрузки);
				ПоказатьПредупреждение( , НСтр("ru ='Загрузка данных завершена.'"));
				
			ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ЗакупкиДляКУДИР" Тогда
				
				ОбработатьПодготовленныеДанныеЗакупкиТоваровДляУСН(РезультатЗагрузки);
				ПоказатьПредупреждение( , НСтр("ru ='Загрузка данных завершена.'"));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки)
	
	ПараметрыВызоваСервера = Новый Структура;
	ПараметрыВызоваСервера.Вставить("НастройкиЗагрузкиДанных", РезультатЗагрузки.НастройкиЗагрузкиДанных);
	ПараметрыВызоваСервера.Вставить("ТаблицаСопоставленияДанных", ДанныеФормыВЗначение(РезультатЗагрузки.ТаблицаСопоставленияДанных, Тип("ТаблицаЗначений")));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подсистема ЗагрузкаДанныхИзВнешнегоИсточника: Выполнение серверного метода загрузки результата'");
	ПараметрыВыполнения.ЗапуститьНеВФоне    = Ложь;
	ПараметрыВыполнения.ЗапуститьВФоне      = Истина;	
	
	ИмяМетода = "Справочники.Номенклатура.ОбработатьПодготовленныеДанные";
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыВызоваСервера, ПараметрыВыполнения);
	
КонецФункции

&НаСервере
Процедура ОбработатьПодготовленныеДанныеЗапасы(АдресРезультатаЗагрузки)
	
	НачатьТранзакцию();
	
	Попытка
		
		РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресРезультатаЗагрузки);
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = ВводНачальныхОстатковТовары.Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
				НоваяСтрока.ЦенаСебестоимости = НоваяСтрока.Цена;
				НоваяСтрока.СуммаСебестоимости = НоваяСтрока.ЦенаСебестоимости * СтрокаТаблицы.Количество;
				НоваяСтрока.Сумма = НоваяСтрока.СуммаСебестоимости * КурсСебестоимости / КратностьСебестоимости;
				НоваяСтрока.Цена = ?(СтрокаТаблицы.Количество=0, 0, НоваяСтрока.Сумма / СтрокаТаблицы.Количество);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанныеЗапасыПереданные(АдресРезультатаЗагрузки)
	
	Попытка
		
		НачатьТранзакцию();
		
		РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресРезультатаЗагрузки);
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = ВводНачальныхОстатковТовары.ЗапасыПереданные.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Договор) Тогда
					СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(НоваяСтрока.Контрагент, Организация, "ЗапасыПереданные", НоваяСтрока.ВидОперации);
					НоваяСтрока.Договор = СтруктураДанные.Договор;
				КонецЕсли; 
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.ЦенаПродажи) Тогда
					НоваяСтрока.СуммаПродажи = СтрокаТаблицы.ЦенаПродажи * СтрокаТаблицы.Количество;
					НоваяСтрока.СуммаРасчетов = НоваяСтрока.СуммаПродажи / КурсРасчетовСервер(НоваяСтрока.Договор);
				ИначеЕсли СтрокаТаблицы.Количество<>0 Тогда
					НоваяСтрока.СуммаПродажи = НоваяСтрока.СуммаРасчетов;
					НоваяСтрока.СуммаРасчетов = НоваяСтрока.СуммаПродажи / КурсРасчетовСервер(НоваяСтрока.Договор);
					НоваяСтрока.ЦенаПродажи = НоваяСтрока.СуммаПродажи / СтрокаТаблицы.Количество;
				Иначе
					НоваяСтрока.СуммаРасчетов = 0;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.Цена) Тогда
					НоваяСтрока.СуммаСебестоимости = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
					НоваяСтрока.Себестоимость = НоваяСтрока.СуммаСебестоимости * КурсСебестоимости / КратностьСебестоимости;
				ИначеЕсли СтрокаТаблицы.Количество<>0 Тогда 
					НоваяСтрока.СуммаСебестоимости = НоваяСтрока.Себестоимость;
					НоваяСтрока.Себестоимость = НоваяСтрока.СуммаСебестоимости * КурсСебестоимости / КратностьСебестоимости;
					НоваяСтрока.Цена = НоваяСтрока.СуммаСебестоимости / СтрокаТаблицы.Количество;
				Иначе
					НоваяСтрока.Себестоимость = 0;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		УстановитьВидимостьРеквизитовТЧ("ЗапасыПереданные");
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанныеЗапасыПринятые(АдресРезультатаЗагрузки)
	
	Попытка
		
		НачатьТранзакцию();
		
		РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресРезультатаЗагрузки);
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = ВводНачальныхОстатковТовары.ЗапасыПринятые.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Договор) Тогда
					СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(НоваяСтрока.Контрагент, Организация, "ЗапасыПринятые", НоваяСтрока.ВидОперации);
					НоваяСтрока.Договор = СтруктураДанные.Договор;
				КонецЕсли; 
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.ЦенаПродажи) Тогда
					НоваяСтрока.СуммаПродажи = СтрокаТаблицы.ЦенаПродажи * СтрокаТаблицы.Количество;
					НоваяСтрока.СуммаРасчетов = НоваяСтрока.СуммаПродажи / КурсРасчетовСервер(НоваяСтрока.Договор);
				ИначеЕсли СтрокаТаблицы.Количество<>0 Тогда 
					НоваяСтрока.СуммаПродажи = НоваяСтрока.СуммаРасчетов;
					НоваяСтрока.СуммаРасчетов = НоваяСтрока.СуммаПродажи / КурсРасчетовСервер(НоваяСтрока.Договор);
					НоваяСтрока.ЦенаПродажи = НоваяСтрока.СуммаПродажи / СтрокаТаблицы.Количество;
				Иначе
					НоваяСтрока.СуммаРасчетов = 0;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		УстановитьВидимостьРеквизитовТЧ("ЗапасыПринятые");
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанныеЗапасыВРазрезеГТД(АдресРезультатаЗагрузки)
	
	Попытка
		
		НачатьТранзакцию();
		
		РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресРезультатаЗагрузки);
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.СтранаПроисхождения)
					И СтрокаТаблицы.СтранаПроисхождения <> Справочники.СтраныМира.Россия
					И НЕ ЗначениеЗаполнено(СтрокаТаблицы.НомерГТД)
					И НЕ ПустаяСтрока(СтрокаТаблицы.НомерГТД_ВходящиеДанные)
					Тогда
					
					СправочникОбъект = Справочники.НомераГТД.СоздатьЭлемент();
					СправочникОбъект.Код = СтрокаТаблицы.НомерГТД_ВходящиеДанные;
					СправочникОбъект.ДопускаетсяЗаписьСОшибкой = Ложь;
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект, Истина, Истина);
					
					НоваяСтрока.НомерГТД = СправочникОбъект.Ссылка;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура,, ПредставлениеОшибки);
		
		ВызватьИсключение ПредставлениеОшибки;
		
	КонецПопытки;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанныеРасчетыСПоставщиками(РезультатЗагрузки)
	
	Попытка
		
		НачатьТранзакцию();
		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПоставщиками.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, "Контрагент, Договор, ПризнакАванса, СуммаВал, Сумма", );
				
				СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(НоваяСтрока.Контрагент, Организация, "РасчетыСПоставщиками");
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Договор) Тогда
					
					НоваяСтрока.Договор = СтруктураДанные.Договор;
					
				КонецЕсли;
				
				НоваяСтрока.ВестиРасчетыПоДоговорам = СтруктураДанные.ВестиРасчетыПоДоговорам;
				НоваяСтрока.ВестиРасчетыПоДокументам = СтруктураДанные.ВестиРасчетыПоДокументам;
				НоваяСтрока.ВестиРасчетыПоЗаказам = СтруктураДанные.ВестиРасчетыПоЗаказам;
				НоваяСтрока.ВестиУчетОплатыПоСчетам = СтруктураДанные.ВестиУчетОплатыПоСчетам;
				
				НоваяСтрока.Сумма = ПересчитатьИзВалютыВВалютуУчета(НоваяСтрока.СуммаВал, СтруктураДанные.ВалютаРасчетов, ДатаОстатков);
				
				Если НоваяСтрока.ВестиРасчетыПоЗаказам Тогда
					
					НоваяСтрока.ЗаказПоставщику = СтрокаТаблицы.Заказ;
					
				КонецЕсли;
				
				Если НоваяСтрока.ВестиРасчетыПоДокументам Тогда
					
					НоваяСтрока.Документ = СтрокаТаблицы.Документ;
					
				КонецЕсли;
				
				Если НоваяСтрока.ВестиУчетОплатыПоСчетам Тогда
					
					НоваяСтрока.СчетНаОплату = СтрокаТаблицы.Счет;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		УстановитьВидимостьРеквизитовТЧ("РасчетыСПоставщиками");
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанныеРасчетыСПокупателями(РезультатЗагрузки)
	
	Попытка
		
		НачатьТранзакцию();
		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПокупателями.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, "Контрагент, Договор, ПризнакАванса, СуммаВал, Сумма", );
				
				СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(НоваяСтрока.Контрагент, Организация, "РасчетыСПокупателями");
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Договор) Тогда
					
					НоваяСтрока.Договор = СтруктураДанные.Договор;
					
				КонецЕсли;
				
				НоваяСтрока.ВестиРасчетыПоДоговорам = СтруктураДанные.ВестиРасчетыПоДоговорам;
				НоваяСтрока.ВестиРасчетыПоДокументам = СтруктураДанные.ВестиРасчетыПоДокументам;
				НоваяСтрока.ВестиРасчетыПоЗаказам = СтруктураДанные.ВестиРасчетыПоЗаказам;
				НоваяСтрока.ВестиУчетОплатыПоСчетам = СтруктураДанные.ВестиУчетОплатыПоСчетам;
				
				НоваяСтрока.Сумма = ПересчитатьИзВалютыВВалютуУчета(НоваяСтрока.СуммаВал, СтруктураДанные.ВалютаРасчетов, ДатаОстатков);
				
				Если НоваяСтрока.ВестиРасчетыПоЗаказам Тогда
					
					НоваяСтрока.ЗаказПокупателя = СтрокаТаблицы.Заказ;
					
				КонецЕсли;
				
				Если НоваяСтрока.ВестиРасчетыПоДокументам Тогда
					
					НоваяСтрока.Документ = СтрокаТаблицы.Документ;
					
				КонецЕсли;
				
				Если НоваяСтрока.ВестиУчетОплатыПоСчетам Тогда
					
					НоваяСтрока.СчетНаОплату = СтрокаТаблицы.Счет;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		УстановитьВидимостьРеквизитовТЧ("РасчетыСПокупателями");
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанныеРасчетыСПерсоналом(РезультатЗагрузки)
	
	Попытка
		
		НачатьТранзакцию();
		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтруктурнаяЕдиница) Тогда
					НоваяСтрока.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
				КонецЕсли; 
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Валюта) Тогда
					НоваяСтрока.Валюта = ВалютаУчета;
				КонецЕсли;
				НоваяСтрока.Сумма = ПересчитатьИзВалютыВВалютуУчета(НоваяСтрока.СуммаВал, НоваяСтрока.Валюта, ДатаОстатков);
				НоваяСтрока.ПериодРегистрации = НачалоМесяца(НоваяСтрока.ПериодРегистрации);
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.ПериодРегистрации) Тогда
					НоваяСтрока.ПериодРегистрации = НачалоМесяца(ДатаОстатков);
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанныеВнеоборотныеАктивы(РезультатЗагрузки)
	
	Попытка
		
		НачатьТранзакцию();
		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = ВводНачальныхОстатковИмущество.ВнеоборотныеАктивы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетЗатрат) Тогда
					НоваяСтрока.СчетЗатрат = ПланыСчетов.Управленческий.АмортизацияВнеоборотныхАктивов;
				КонецЕсли; 
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтруктурнаяЕдиница) Тогда
					НоваяСтрока.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
				КонецЕсли; 
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.НаправлениеДеятельности) Тогда
					НоваяСтрока.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#КонецОбласти
