
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Процедура СообщитьПрогресс(ПрогрессУдаления, КоличествоУдаляемых)
	
	ПрогрессУдаления	= ПрогрессУдаления + 1;
	ТекстПрогресса		= СтрШаблон(НСтр("ru ='Удалено %1 из %2 строк...'"), ПрогрессУдаления, КоличествоУдаляемых);
	ДлительныеОперации.СообщитьПрогресс(ОКР(ПрогрессУдаления * 100 / КоличествоУдаляемых, 1), ТекстПрогресса);
	
КонецПроцедуры

Процедура ЗаполнитьШапкуДокументаЛогирования(РезультатУдаления, КоличествоУдаляемыхЗаписей)
	
	РезультатУдаления	= Новый ТабличныйДокумент;
	
	Макет				= ПолучитьМакет("ПФ_MXL_РезультатУдаления");
	ОбластьШапка		= Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	
	ДатаИВремяУдаления	= Формат(ТекущаяДатаСеанса(), "dd.MM.yyyy.hh.mm");
	ТекстЗаголовка 		= СтрШаблон(НСтр("ru ='Удаление цен от %1 в количестве: %2.'"), ДатаИВремяУдаления, КоличествоУдаляемыхЗаписей);
	
	ДанныеПечати		= Новый Структура;
	ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
	ДанныеПечати.Вставить("Ответственный", Пользователи.АвторизованныйПользователь());
	
	ОбластьШапка.Параметры.Заполнить(ДанныеПечати);
	РезультатУдаления.Вывести(ОбластьШапка);
	
	РезультатУдаления.Вывести(ОбластьШапкаТаблицы);
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуДокументаЛогирования(РезультатУдаления, ОбластьСтрока, ЗаписьОЦене)
	
	ДанныеПечати = Новый Структура("Период, ВидЦен, ПредставлениеНоменклатуры, ПредставлениеХарактеристики, ЦенаУдаленная");
	
	ДанныеПечати.Период						= ЗаписьОЦене.Период;
	ДанныеПечати.ВидЦен						= ЗаписьОЦене.ВидЦен;
	ДанныеПечати.ПредставлениеНоменклатуры	= ЗаписьОЦене.Номенклатура;
	ДанныеПечати.ПредставлениеХарактеристики= ЗаписьОЦене.Характеристика;
	ДанныеПечати.ЦенаУдаленная				= ЗаписьОЦене.Цена;
	
	ОбластьСтрока.Параметры.Заполнить(ДанныеПечати);
	РезультатУдаления.Вывести(ОбластьСтрока);
	
КонецПроцедуры

Процедура ЗаписатьРезультат(РезультатУдаления)
	
	Если РезультатУдаления = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	РезультатУдаления.Записать(ИмяВременногоФайла);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	Попытка
		
		УдалитьФайлы(ИмяВременногоФайла);
		
	Исключение
		
		ЗаписьЖурналаРегистрации("УдалениеСтарыхЦен", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	ДатаИВремяУдаления = Формат(ТекущаяДатаСеанса(), "ДФ=dd_MM_yy_hh_mm");
	
	ВладелецФайлов = Справочники.ПапкиФайлов.ПолучитьСсылку(Справочники.ВидыЦен.СсылкаНовогоКаталогаЛогированияУдаленияУстаревшихЦен().УИД);
	Если ВладелецФайлов.ПолучитьОбъект() = Неопределено Тогда
		
		Справочники.ВидыЦен.ДобавитьКаталогЛогированияУдаленияСтарыхЦен();
		
	КонецЕсли;
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("Автор",				Пользователи.АвторизованныйПользователь());
	ПараметрыФайла.Вставить("ВладелецФайлов",		ВладелецФайлов);
	ПараметрыФайла.Вставить("ИмяБезРасширения",		СтрШаблон(НСтр("ru ='УдалениеЦен_%1'"), СтрЗаменить(ДатаИВремяУдаления, ".", "_")));
	ПараметрыФайла.Вставить("РасширениеБезТочки",	"mxl");
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
	
	РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресХранилища);
	
КонецПроцедуры

// Стартовая процедура длительной операции
Процедура УдалитьНеактуальныеЦены(ПараметрыУдаления, АдресХранилища = Неопределено) Экспорт
	
	РезультатУдаления = Неопределено;
	
	Если ПараметрыУдаления.СпособОчисткиЦен = 0 Тогда
		
		УдалитьЦеныСВыключеннымПризнакомАктуальность(ПараметрыУдаления, РезультатУдаления);
		
	ИначеЕсли ПараметрыУдаления.СпособОчисткиЦен = 1 Тогда
		
		УдалитьЦеныКромеПоследних(ПараметрыУдаления, РезультатУдаления);
		
	ИначеЕсли ПараметрыУдаления.СпособОчисткиЦен = 2 Тогда
		
		УдалитьЦеныПоПериодуАктуальности(ПараметрыУдаления, РезультатУдаления);
		
	КонецЕсли;
	
	ЗаписатьРезультат(РезультатУдаления);
	
КонецПроцедуры

#Область МетодыУдаления

Процедура УдалитьЦеныСВыключеннымПризнакомАктуальность(ПараметрыУдаления, РезультатУдаления)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЦеныНоменклатуры.Период КАК Период,
	|	ЦеныНоменклатуры.ВидЦен КАК ВидЦен,
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
	|	ЦеныНоменклатуры.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|ГДЕ
	|	ЦеныНоменклатуры.Актуальность = ЛОЖЬ
	|	И ЦеныНоменклатуры.ДокументУстановки = ЗНАЧЕНИЕ(Документ.УстановкаЦенНоменклатуры.ПустаяСсылка)");

	
	Если ПараметрыУдаления.Свойство("ВидыЦен") Тогда
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("ЦеныНоменклатуры.ВидЦен В(&ВидыЦен)");
		
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		Запрос.УстановитьПараметр("ВидыЦен", ПараметрыУдаления.ВидыЦен);
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбластьСтрока			= ПолучитьМакет("ПФ_MXL_РезультатУдаления").ПолучитьОбласть("Строка");
	Выборка					= РезультатЗапроса.Выбрать();
	КоличествоУдаляемых		= Выборка.Количество();
	ПрогрессУдаления		= 0;
	
	ЗаполнитьШапкуДокументаЛогирования(РезультатУдаления, КоличествоУдаляемых);
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(Выборка.Период, Истина);
			НаборЗаписей.Отбор.ВидЦен.Установить(Выборка.ВидЦен, Истина);
			НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура, Истина);
			НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика, Истина);
			
			СообщитьПрогресс(ПрогрессУдаления, КоличествоУдаляемых);
			
			ЗаполнитьСтрокуДокументаЛогирования(РезультатУдаления, ОбластьСтрока, Выборка);
			
			НаборЗаписей.Очистить();
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина, Ложь, Ложь);
			
		Исключение
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьЦеныКромеПоследних(ПараметрыУдаления, РезультатУдаления)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МинимальноеКоличествоЦенНоменклатуры", ПараметрыУдаления.МинимальноеКоличествоЦенНоменклатуры);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатуры.ВидЦен КАК ВидЦен,
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
	|	СУММА(1) КАК КоличествоЗаписей
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|ГДЕ
	|	ЦеныНоменклатуры.ДокументУстановки = ЗНАЧЕНИЕ(Документ.УстановкаЦенНоменклатуры.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЦеныНоменклатуры.ВидЦен,
	|	ЦеныНоменклатуры.Номенклатура,
	|	ЦеныНоменклатуры.Характеристика
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(1) > &МинимальноеКоличествоЦенНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЦеныНоменклатуры.ВидЦен,
	|	ЦеныНоменклатуры.Номенклатура,
	|	ЦеныНоменклатуры.Характеристика";
	
	Если ПараметрыУдаления.Свойство("ВидыЦен") Тогда
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("ЦеныНоменклатуры.ВидЦен В(&ВидыЦен)");
		
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		Запрос.УстановитьПараметр("ВидыЦен", ПараметрыУдаления.ВидыЦен);
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбластьСтрока			= ПолучитьМакет("ПФ_MXL_РезультатУдаления").ПолучитьОбласть("Строка");
	Выборка					= РезультатЗапроса.Выбрать();
	КоличествоУдаляемых		= Выборка.Количество();
	ПрогрессУдаления		= 0;
	
	ЗаполнитьШапкуДокументаЛогирования(РезультатУдаления, Выборка.Количество());
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ВидЦен.Установить(Выборка.ВидЦен, Истина);
			НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура, Истина);
			НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика, Истина);
			НаборЗаписей.Прочитать();
			
			СообщитьПрогресс(ПрогрессУдаления, КоличествоУдаляемых);
			
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.Сортировать("Период Возр");
			
			КоличествоУдаляемыхВСессии = ТаблицаЗаписей.Количество() - ПараметрыУдаления.МинимальноеКоличествоЦенНоменклатуры;
			Пока КоличествоУдаляемыхВСессии > 0 Цикл
				
				ЗаполнитьСтрокуДокументаЛогирования(РезультатУдаления, ОбластьСтрока, ТаблицаЗаписей[0]);
				
				ТаблицаЗаписей.Удалить(ТаблицаЗаписей[0]);
				КоличествоУдаляемыхВСессии = КоличествоУдаляемыхВСессии - 1;
				
			КонецЦикла;
			
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина, Ложь, Ложь);
			
		Исключение
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьЦеныПоПериодуАктуальности(ПараметрыУдаления, РезультатУдаления)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодДействующихЦен", ПараметрыУдаления.ПериодДействующихЦен);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЦеныНоменклатуры.ВидЦен КАК ВидЦен,
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|ГДЕ
	|	ЦеныНоменклатуры.Период < &ПериодДействующихЦен
	|	И ЦеныНоменклатуры.ДокументУстановки = ЗНАЧЕНИЕ(Документ.УстановкаЦенНоменклатуры.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЦеныНоменклатуры.ВидЦен,
	|	ЦеныНоменклатуры.Номенклатура,
	|	ЦеныНоменклатуры.Характеристика";
	
	Если ПараметрыУдаления.Свойство("ВидыЦен") Тогда
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("ЦеныНоменклатуры.ВидЦен В(&ВидыЦен)");
		
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		Запрос.УстановитьПараметр("ВидыЦен", ПараметрыУдаления.ВидыЦен);
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбластьСтрока			= ПолучитьМакет("ПФ_MXL_РезультатУдаления").ПолучитьОбласть("Строка");
	Выборка					= РезультатЗапроса.Выбрать();
	КоличествоУдаляемых		= Выборка.Количество();
	ПрогрессУдаления		= 0;
	
	ЗаполнитьШапкуДокументаЛогирования(РезультатУдаления, Выборка.Количество());
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ВидЦен.Установить(Выборка.ВидЦен, Истина);
			НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура, Истина);
			НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика, Истина);
			НаборЗаписей.Прочитать();
			
			СообщитьПрогресс(ПрогрессУдаления, КоличествоУдаляемых);
			
			ИндексЗаписей = 0;
			Пока ИндексЗаписей <= НаборЗаписей.Количество() - 1 Цикл
				
				ЗаписьНабора = НаборЗаписей[ИндексЗаписей];
				
				Если ЗаписьНабора.Период >= ПараметрыУдаления.ПериодДействующихЦен Тогда
					
					ИндексЗаписей = ИндексЗаписей + 1;
					Продолжить;
					
				КонецЕсли;
				
				ЗаполнитьСтрокуДокументаЛогирования(РезультатУдаления, ОбластьСтрока, ЗаписьНабора);
				
				НаборЗаписей.Удалить(ИндексЗаписей);
				
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина, Ложь, Ложь);
			
		Исключение
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
