
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Владелец") Тогда
		Ресурс =  Параметры.Отбор.Владелец;
	Иначе
		Отказ = Истина;
		ВызватьИсключение НСтр("ru = 'Обработка не предназначена для независимого открытия.'");
	КонецЕсли;
	
	НомерИзменяемогоМесяца = 0;
	НомерТекущегоГода = Год(ТекущаяДатаСеанса());
	
	ЗаполнитьДанныеРеквизитовПоГрафикам(НомерТекущегоГода);
	
	Если ТипЗнч(Ресурс) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		Элементы.УстановитьГрафик.Видимость = Ложь;
		Элементы.ФормаИстория.Видимость = Ложь;
		
	КонецЕсли;
	
	Если Не РедактированиеДоступно() Тогда
		ОграничитьДоступностьЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ГрафикДляУстановки = ВыбранноеЗначение;
	
	УстановитьГрафикНаСервере();
	
	СформироватьПредставлениеПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЭтаФорма.ТекущийЭлемент = Элементы.РасписаниеПоГрафику;
	Элементы.РасписаниеПоГрафику.ТекущаяОбласть = РасписаниеПоГрафику.Область("R2C3");
	СформироватьПредставлениеПериода();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НомерТекущегоГодаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗаполнитьДанныеРеквизитовПоГрафикам(НомерТекущегоГода + Направление);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТекущегоГодаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(НомерТекущегоГода) Тогда НомерТекущегоГода = Год(ТекущаяДата()) КонецЕсли;
	
	ЗаполнитьДанныеРеквизитовПоГрафикам(НомерТекущегоГода);
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПоГрафикуПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ВыделенныеОбласти = Элементы.РасписаниеПоГрафику.ПолучитьВыделенныеОбласти();
	
	ЕстьОбработанныеОбласти = Ложь;
	
	ЗначениеПоля = Область.Текст;
	
	СписокДней = Новый СписокЗначений;
	
	Для каждого ТекОбласть Из ВыделенныеОбласти Цикл
		
		Если ТипЗнч(ТекОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		
		Для ТекСтрока = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			Для ТекКолонка = ТекОбласть.Лево По ТекОбласть.Право Цикл
				Если ТекКолонка >= 3 И ТекКолонка <= 33 И ТекСтрока >= 2 И ТекСтрока <= 13 Тогда
					Попытка
						ДатаДня = Дата(НомерТекущегоГода, ТекСтрока - 1, ТекКолонка - 2, 0, 0, 0);
					Исключение
						Продолжить;
					КонецПопытки;
					
					НомерДня = День(ДатаДня);
					НомерМесяца = Месяц(ДатаДня);
					
					ПараметрыОтбора = Новый Структура("НомерМесяца",НомерМесяца);
					СтрокиДанных = ДанныеГрафика.НайтиСтроки(ПараметрыОтбора);
					
					Если Не СтрокиДанных.Количество() Тогда Продолжить КонецЕсли;
					СтрокаДанных = СтрокиДанных[0];
					
					Изменен = СтрокаДанных["Изменен"+НомерДня];
					НомерДняЦикла = СтрокаДанных["НомерДняЦикла"+НомерДня];
					
					СписокДней.Добавить(ДатаДня,Строка(НомерДняЦикла),Изменен);
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не УДнейЕстьПерерывы(СписокДней) Тогда
		ИзменитьДниБезПерерывов(СписокДней, ЗначениеПоля, ЕстьОбработанныеОбласти);
	Иначе
		ИзменитьДниСУчетомПерерывов(СписокДней, ЗначениеПоля, ЕстьОбработанныеОбласти);
	КонецЕсли;
	
	Если ЕстьОбработанныеОбласти Тогда
		ЗаписатьДанныеВРегистр(НомерТекущегоГода);
		ВывестиРасписаниеПоГрафику();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция УДнейЕстьПерерывы(СписокДней)
	
	Для Каждого ЭлементСписка Из СписокДней Цикл
		
		ДатаДня = ЭлементСписка.Значение;
		
		ПараметрыОтбора = Новый Структура("ДатаДня", ДатаДня);
		
		НайденныеСтрокиГрафика = ДатыПоГрафикам.НайтиСтроки(ПараметрыОтбора);
		ГрафикДня = ?(НайденныеСтрокиГрафика.Количество(), НайденныеСтрокиГрафика[0].ГрафикРаботы, Неопределено);
		
		Если ЭлементСписка.Пометка Тогда
			ПараметрыОтбора = Новый Структура("ДатаДня", ДатаДня);
			СтрокиИзмененныхДней = ИзмененныеДни.НайтиСтроки(ПараметрыОтбора);
			
			Если СтрокиИзмененныхДней.Количество() > 1 Тогда
				Возврат Истина
			КонецЕсли;
			
			Продолжить
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("НомерДняЦикла, ГрафикРаботы", Число(ЭлементСписка.Представление), ГрафикДня);
		СтрокиДнейЦикла = Объект.ПериодыГрафика.НайтиСтроки(ПараметрыОтбора);
		
		Если СтрокиДнейЦикла.Количество() > 1 И Не ЭлементСписка.Представление = "0" Тогда
			Возврат Истина
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьДниБезПерерывов(СписокДней, ЗначениеПоля, ЕстьОбработанныеОбласти = Ложь)
	
	ИзмененныеДни.Сортировать("ДатаДня Возр, ВремяНачала Возр");
	
	Для Каждого ЭлементСписка Из СписокДней Цикл
		
		ДатаДня = ЭлементСписка.Значение;
		
		НомерДня = День(ДатаДня);
		НомерМесяца = Месяц(ДатаДня);
		
		ТекущаяОбластьЦикла = РасписаниеПоГрафику.Область("R" + Строка(НомерМесяца+1) + "C" + Строка(НомерДня+2));
		
		ПараметрыОтбора = Новый Структура("НомерМесяца",НомерМесяца);
		
		СтрокиДанных = ДанныеГрафика.НайтиСтроки(ПараметрыОтбора);
		
		Если Не СтрокиДанных.Количество() Тогда Возврат КонецЕсли;
		
		СтрокаДанных = СтрокиДанных[0];
		
		ПрошлоеЗначениеПоля = СтрокаДанных["День"+НомерДня];
		
		Если (Не ЗначениеЗаполнено(ЗначениеПоля) ИЛИ ЗначениеПоля = "0") И Не ЗначениеЗаполнено(ПрошлоеЗначениеПоля) Тогда
			ТекущаяОбластьЦикла.Текст = "";
			Продолжить
		КонецЕсли;
		
		Если (Не ЗначениеЗаполнено(ЗначениеПоля) ИЛИ ЗначениеПоля = "0") Тогда
			Если ЗначениеЗаполнено(ПрошлоеЗначениеПоля) Тогда
				Если ЭлементСписка.Пометка Тогда
					ОчиститьСтрокиИзмененныхДней(ДатаДня);
				КонецЕсли;
				ОчиститьРасписаниеКлиент(Истина, Истина);
				ЕстьОбработанныеОбласти = Истина;
				СтрокаДанных["День"+НомерДня] = 0;
				РассчитатьРабочиеЧасы(СтрокаДанных.НомерМесяца);
			КонецЕсли;
			ТекущаяОбластьЦикла.Текст = "";
			Продолжить
		КонецЕсли;
		
		Попытка
			НовоеЗначениеПоля = Число(ЗначениеПоля);
			
			Если НовоеЗначениеПоля = ПрошлоеЗначениеПоля Тогда Продолжить КонецЕсли;
			
			Если НовоеЗначениеПоля > 24 Тогда
				
				ТекущаяОбластьЦикла.Текст = Строка(?(ПрошлоеЗначениеПоля = 0,"",ПрошлоеЗначениеПоля));
				ВосстановитьПредыдущиеЗначенияПолей(СписокДней);
				Прервать;
				
			КонецЕсли;
			
			СтрокаДанных["День"+НомерДня] = НовоеЗначениеПоля;
			ТекущаяОбластьЦикла.Текст = НовоеЗначениеПоля;
			РассчитатьРабочиеЧасы(СтрокаДанных.НомерМесяца);
			
			Если ЭлементСписка.Пометка Тогда
				
				ПараметрыОтбора = Новый Структура("ДатаДня", ДатаДня);
				СтрокиИзмененныхДней = ИзмененныеДни.НайтиСтроки(ПараметрыОтбора);
				
				Если Не СтрокиИзмененныхДней.Количество() Тогда Продолжить КонецЕсли;
				
				ЧасовПерерывов = СтрокиИзмененныхДней[0].ЧасовПерерывов;
				ЧасовПерерывов= ?(НовоеЗначениеПоля = 24, 0, СтрокиИзмененныхДней[0].ЧасовПерерывов);
				
				Если НовоеЗначениеПоля + ЧасовПерерывов>24
					Тогда
					ЧасовПерерывов = 24 - НовоеЗначениеПоля;
				КонецЕсли;
				
				СтрокиИзмененныхДней[0].ЧасовПерерывов = ЧасовПерерывов;
				
				ВремяНачала = ?(ЗначениеЗаполнено(СтрокиИзмененныхДней[0].ВремяНачала),СтрокиИзмененныхДней[0].ВремяНачала,Дата(1,1,1,8,0,0));
				
				РазностьВремениДата = (ВремяНачала + (НовоеЗначениеПоля+ЧасовПерерывов)*60*60);
				РазностьВремени = (Дата(1,1,1)-РазностьВремениДата)*-1;
				ВремяОкончания = ?(РазностьВремени<0, РазностьВремени* -1, РазностьВремени);
				
				Если ВремяОкончания>=86400 Тогда
					ВремяНачала = Дата(1,1,1) + (86400 - (НовоеЗначениеПоля+ЧасовПерерывов)*60*60);
					ВремяОкончания = Дата(1,1,1);
				Иначе
					ВремяНачала = СтрокиИзмененныхДней[СтрокиИзмененныхДней.Количество()-1].ВремяНачала;
					ВремяОкончания = Дата(1,1,1)+ ВремяОкончания;
				КонецЕсли;
				
				СтрокиИзмененныхДней[СтрокиИзмененныхДней.Количество()-1].ВремяНачала = ВремяНачала;
				СтрокиИзмененныхДней[СтрокиИзмененныхДней.Количество()-1].ВремяОкончания = ВремяОкончания;
				СтрокиИзмененныхДней[СтрокиИзмененныхДней.Количество()-1].ЭтоОтклонение = Истина;
				СтрокиИзмененныхДней[СтрокиИзмененныхДней.Количество()-1].Длительность = НовоеЗначениеПоля;
				
				ЕстьОбработанныеОбласти = Истина;
				
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НовоеЗначениеПоля) Тогда
				
				ЧасовПерерывов = 0;
				
				НоваяСтрока = ИзмененныеДни.Добавить();
				
				ВремяНачала = 28800;
				ВремяОкончания = ВремяНачала + (НовоеЗначениеПоля+ЧасовПерерывов)*60*60;
				
				Если ВремяОкончания>=86400 Тогда
					ВремяНачала = Дата(1,1,1) + (86400 - (НовоеЗначениеПоля+ЧасовПерерывов)*60*60);
					ВремяОкончания = Дата(1,1,1);
				Иначе
					ВремяНачала = Дата(1,1,1) + 28800;
					ВремяОкончания = ВремяНачала + (НовоеЗначениеПоля+ЧасовПерерывов)*60*60;
				КонецЕсли;
				
				НоваяСтрока.ВремяНачала = ВремяНачала;
				НоваяСтрока.ВремяОкончания = ВремяОкончания;
				
				НоваяСтрока.Длительность = (НовоеЗначениеПоля+ЧасовПерерывов);
				НоваяСтрока.ДатаДня = ДатаДня;
				НоваяСтрока.ЭтоОтклонение = Истина;
				
				СтрокаДанных["Изменен"+НомерДня] = Истина;
				
			КонецЕсли;
			
			ЕстьОбработанныеОбласти = Истина;
			
			РассчитатьРабочиеЧасы(НомерМесяца);
			
		Исключение
			ТекущаяОбластьЦикла.Текст = Строка(?(ПрошлоеЗначениеПоля = 0,"",ПрошлоеЗначениеПоля));
			Возврат;
		КонецПопытки;
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ИнтервалыПерерывовКорректны(СписокДней, НовоеЗначениеПоля)
	
	ИзмененныеДни.Сортировать("ДатаДня Возр, ВремяНачала Возр");
	
	Если НовоеЗначениеПоля = 24 Тогда Возврат Ложь КонецЕсли;
	Если НовоеЗначениеПоля = 0 Тогда Возврат Истина КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокДней Цикл
		
		ДатаДня = ЭлементСписка.Значение;
		НомерДня = День(ДатаДня);
		НомерМесяца = Месяц(ДатаДня);
		
		ПараметрыОтбора = Новый Структура("ДатаДня", ДатаДня);
		
		НайденныеСтрокиГрафика = ДатыПоГрафикам.НайтиСтроки(ПараметрыОтбора);
		ГрафикДня = ?(НайденныеСтрокиГрафика.Количество(), НайденныеСтрокиГрафика[0].ГрафикРаботы, Неопределено);
		
		ПараметрыОтбора = Новый Структура("НомерМесяца",НомерМесяца);
		СтрокиДанных = ДанныеГрафика.НайтиСтроки(ПараметрыОтбора);
		
		Если Не СтрокиДанных.Количество() Тогда Продолжить КонецЕсли;
		
		СтрокаДанных = СтрокиДанных[0];
		ПрошлоеЗначениеРабочегоВремени = СтрокаДанных["День"+НомерДня];
		
		Если ЭлементСписка.Пометка Тогда
			
			ПараметрыОтбора = Новый Структура("ДатаДня", ДатаДня);
			СтрокиИзмененныхДней = ИзмененныеДни.НайтиСтроки(ПараметрыОтбора);
			
			Если Не СтрокиИзмененныхДней.Количество() Тогда Продолжить КонецЕсли;
			
			ВремяНачалаРабочегоДня = СтрокиИзмененныхДней[0].ВремяНачала;
			ВремяОкончанияРабочегоДня = СтрокиИзмененныхДней[СтрокиИзмененныхДней.Количество()-1].ВремяОкончания;
			
			РазностьИнтервалаРабочегоДня = (ВремяОкончанияРабочегоДня-ВремяНачалаРабочегоДня)/3600;
			ДлительностьПериода = ?(РазностьИнтервалаРабочегоДня < 0,24 + РазностьИнтервалаРабочегоДня, РазностьИнтервалаРабочегоДня);
			ЧасовПерерывов = ДлительностьПериода - ПрошлоеЗначениеРабочегоВремени;
			
			РазностьВремениДата = (ВремяНачалаРабочегоДня + (НовоеЗначениеПоля+ЧасовПерерывов)*60*60);
			РазностьВремени = (Дата(1,1,1)-РазностьВремениДата)*-1;
			ВремяОкончания = ?(РазностьВремени<0, РазностьВремени* -1, РазностьВремени);
			
			Если ВремяОкончания>=86400 Тогда Возврат Ложь КонецЕсли;
			
			ВремяОкончания = Дата(1,1,1)+ ВремяОкончания;
			
			ИндексСтроки = 1;
			
			Для Каждого СтрокаДня Из СтрокиИзмененныхДней Цикл
				
				Если СтрокаДня.ВремяНачала>=ВремяОкончания Тогда
					Возврат Ложь
				КонецЕсли;
				
				ИндексСтроки = ИндексСтроки+1;
				
			КонецЦикла;
			
			Продолжить
			
		КонецЕсли;
		
		НомерДняЦикла = Число(ЭлементСписка.Представление);
		ПараметрыОтбора = Новый Структура("НомерДняЦикла, ГрафикРаботы", НомерДняЦикла, ГрафикДня);
		СтрокиДнейЦикла = Объект.ПериодыГрафика.НайтиСтроки(ПараметрыОтбора);
		
		Если Не СтрокиДнейЦикла.Количество() Тогда Продолжить КонецЕсли;
		
		ВремяНачалаРабочегоДня = СтрокиДнейЦикла[0].ВремяНачала;
		ВремяОкончанияРабочегоДня = СтрокиДнейЦикла[СтрокиДнейЦикла.Количество()-1].ВремяОкончания;
		
		РазностьИнтервалаРабочегоДня = (ВремяОкончанияРабочегоДня-ВремяНачалаРабочегоДня)/3600;
		ДлительностьПериода = ?(РазностьИнтервалаРабочегоДня < 0,24 + РазностьИнтервалаРабочегоДня, РазностьИнтервалаРабочегоДня);
		ЧасовПерерывов = ДлительностьПериода - ПрошлоеЗначениеРабочегоВремени;
		
		РазностьВремениДата = (ВремяНачалаРабочегоДня + (НовоеЗначениеПоля+ЧасовПерерывов)*60*60);
		РазностьВремени = (Дата(1,1,1)-РазностьВремениДата)*-1;
		ВремяОкончания = ?(РазностьВремени<0, РазностьВремени* -1, РазностьВремени);
		
		Если ВремяОкончания>=86400 Тогда Возврат Ложь КонецЕсли;
		
		ВремяОкончания = Дата(1,1,1)+ВремяОкончания;
		
		ИндексСтроки = 1;
		
		Для Каждого СтрокаДня Из СтрокиДнейЦикла Цикл
			
			Если СтрокаДня.ВремяНачала>=ВремяОкончания Тогда
				Возврат Ложь
			КонецЕсли;
			
			ИндексСтроки = ИндексСтроки+1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВосстановитьПредыдущиеЗначенияПолей(СписокДней)
	
	Для Каждого ЭлементСписка Из СписокДней Цикл
		
		ДатаДня = ЭлементСписка.Значение;
		
		НомерДня = День(ДатаДня);
		НомерМесяца = Месяц(ДатаДня);
		
		ТекущаяОбластьЦикла = РасписаниеПоГрафику.Область("R" + Строка(НомерМесяца+1) + "C" + Строка(НомерДня+2));
		
		ПараметрыОтбора = Новый Структура("НомерМесяца",НомерМесяца);
		
		СтрокиДанных = ДанныеГрафика.НайтиСтроки(ПараметрыОтбора);
		
		Если Не СтрокиДанных.Количество() Тогда Возврат КонецЕсли;
		
		СтрокаДанных = СтрокиДанных[0];
		
		ПрошлоеЗначениеПоля = СтрокаДанных["День"+НомерДня];
		
		ТекущаяОбластьЦикла.Текст = Строка(?(ПрошлоеЗначениеПоля = 0,"",ПрошлоеЗначениеПоля));
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДниСУчетомПерерывов(СписокДней, НовоеЗначениеПоля, ЕстьОбработанныеОбласти = Ложь)
	
	НовоеЗначениеПоляКорректно = Истина;
	
	Попытка
		НовоеЗначениеПоля = Число(НовоеЗначениеПоля);
		
		Если НовоеЗначениеПоля>24 Тогда
			НовоеЗначениеПоляКорректно = Ложь
		КонецЕсли;
		
	Исключение 
		ВосстановитьПредыдущиеЗначенияПолей(СписокДней);
		Возврат;
	КонецПопытки;
	
	Если НовоеЗначениеПоляКорректно И Не ИнтервалыПерерывовКорректны(СписокДней, НовоеЗначениеПоля) Тогда
		
		Если Не СписокДней.Количество() Тогда Возврат КонецЕсли;
		
		ДопПараметрыОповещения = Новый Структура("СписокДней", СписокДней);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗафиксироватьИзмененныйПериодВыделенныеДни",
		ЭтотОбъект,
		ДопПараметрыОповещения);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ДатаДня", Дата(1,1,1));
		ПараметрыОткрытия.Вставить("Объект", Объект);
		ПараметрыОткрытия.Вставить("НомерДняЦикла", 0);
		ПараметрыОткрытия.Вставить("Изменен", Ложь);
		ПараметрыОткрытия.Вставить("ИзмененныеДни", ИзмененныеДни);
		ПараметрыОткрытия.Вставить("ЧасовРаботы", 0);
		ПараметрыОткрытия.Вставить("ВыбранИнтервал", Истина);
		ПараметрыОткрытия.Вставить("СписокДней", СписокДней);
		ПараметрыОткрытия.Вставить("ТекстОшибки", "Границы периодов выходят за границы рабочего дня. При редактировании расписание будет обновлено текущим.");
		
		ОткрытьФорму("Справочник.ГрафикиРаботы.Форма.ФормаИзменитьРасписание", ПараметрыОткрытия,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		Возврат
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокДней Цикл
		
		ДатаДня = ЭлементСписка.Значение;
		
		ПараметрыОтбора = Новый Структура("ДатаДня", ДатаДня);
		
		НайденныеСтрокиГрафика = ДатыПоГрафикам.НайтиСтроки(ПараметрыОтбора);
		ГрафикДня = ?(НайденныеСтрокиГрафика.Количество(), НайденныеСтрокиГрафика[0].ГрафикРаботы, Неопределено);
		
		НомерДня = День(ДатаДня);
		НомерМесяца = Месяц(ДатаДня);
		
		ТекущаяОбластьЦикла = РасписаниеПоГрафику.Область("R" + Строка(НомерМесяца+1) + "C" + Строка(НомерДня+2));
		
		ПараметрыОтбора = Новый Структура("НомерМесяца",НомерМесяца);
		
		СтрокиДанных = ДанныеГрафика.НайтиСтроки(ПараметрыОтбора);
		
		Если Не СтрокиДанных.Количество() Тогда Возврат КонецЕсли;
		
		СтрокаДанных = СтрокиДанных[0];
		
		ПрошлоеЗначениеПоля = СтрокаДанных["День"+НомерДня];
		
		Если (Не ЗначениеЗаполнено(НовоеЗначениеПоля) ИЛИ НовоеЗначениеПоля = "0") И Не ЗначениеЗаполнено(ПрошлоеЗначениеПоля) Тогда
			ТекущаяОбластьЦикла.Текст = "";
			Продолжить
		КонецЕсли;
		
		Если (Не ЗначениеЗаполнено(НовоеЗначениеПоля) ИЛИ НовоеЗначениеПоля = "0") Тогда
			Если ЗначениеЗаполнено(ПрошлоеЗначениеПоля) Тогда
				Если ЭлементСписка.Пометка Тогда
					ОчиститьСтрокиИзмененныхДней(ДатаДня);
				КонецЕсли;
				ОчиститьРасписаниеКлиент(Истина, Истина);
				ЕстьОбработанныеОбласти = Истина;
				СтрокаДанных["День"+НомерДня] = 0;
			КонецЕсли;
			ТекущаяОбластьЦикла.Текст = "";
			Продолжить
		КонецЕсли;
		
		Если НовоеЗначениеПоля = ПрошлоеЗначениеПоля Тогда Продолжить КонецЕсли;
		
		Если НовоеЗначениеПоля > 24 Тогда 
			
			ТекущаяОбластьЦикла.Текст = Строка(?(ПрошлоеЗначениеПоля = 0,"",ПрошлоеЗначениеПоля));
			ВосстановитьПредыдущиеЗначенияПолей(СписокДней);
			Прервать;
			
		КонецЕсли;
		
		СтрокаДанных["День"+НомерДня] = НовоеЗначениеПоля;
		ТекущаяОбластьЦикла.Текст = НовоеЗначениеПоля;
		
		Если ЭлементСписка.Пометка Тогда
			
			ПараметрыОтбора = Новый Структура("ДатаДня", ДатаДня);
			СтрокиИзмененныхДней = ИзмененныеДни.НайтиСтроки(ПараметрыОтбора);
			
			Если Не СтрокиИзмененныхДней.Количество() Тогда Продолжить КонецЕсли;
			
			ВремяНачалаРабочегоДня = СтрокиИзмененныхДней[0].ВремяНачала;
			ВремяОкончанияРабочегоДня = СтрокиИзмененныхДней[СтрокиИзмененныхДней.Количество()-1].ВремяОкончания;
			
			РазностьИнтервалаРабочегоДня = (ВремяОкончанияРабочегоДня-ВремяНачалаРабочегоДня)/3600;
			ДлительностьПериода = ?(РазностьИнтервалаРабочегоДня < 0,24 + РазностьИнтервалаРабочегоДня, РазностьИнтервалаРабочегоДня);
			ЧасовПерерывов = ДлительностьПериода - ПрошлоеЗначениеПоля;
			
			РазностьВремениДата = (ВремяНачалаРабочегоДня + (НовоеЗначениеПоля+ЧасовПерерывов)*60*60);
			РазностьВремени = (Дата(1,1,1)-РазностьВремениДата)*-1;
			ВремяОкончания = ?(РазностьВремени<0, РазностьВремени* -1, РазностьВремени);
			
			Если ВремяОкончания=86400 Тогда
				ВремяОкончания = Дата(1,1,1);
			Иначе
				ВремяОкончания = Дата(1,1,1) + ВремяОкончания;
			КонецЕсли;
			
			СтрокиИзмененныхДней[СтрокиИзмененныхДней.Количество()-1].ВремяОкончания = ВремяОкончания;
			СтрокиИзмененныхДней[СтрокиИзмененныхДней.Количество()-1].Длительность = НовоеЗначениеПоля;
			
			Для Каждого СтрокаДня Из СтрокиИзмененныхДней Цикл
				СтрокаДня.ЭтоОтклонение = Истина;
			КонецЦикла;
			
			ЕстьОбработанныеОбласти = Истина;
			
			Продолжить
		КонецЕсли;
		
		НомерДняЦикла = Число(ЭлементСписка.Представление);
		ПараметрыОтбора = Новый Структура("НомерДняЦикла, ГрафикРаботы", НомерДняЦикла, ГрафикДня);
		СтрокиДнейЦикла = Объект.ПериодыГрафика.НайтиСтроки(ПараметрыОтбора);
		
		Если Не СтрокиДнейЦикла.Количество() Тогда Продолжить КонецЕсли;
		
		ВремяНачалаРабочегоДня = СтрокиДнейЦикла[0].ВремяНачала;
		ВремяОкончанияРабочегоДня = СтрокиДнейЦикла[СтрокиДнейЦикла.Количество()-1].ВремяОкончания;
		
		РазностьИнтервалаРабочегоДня = (ВремяОкончанияРабочегоДня-ВремяНачалаРабочегоДня)/3600;
		ДлительностьПериода = ?(РазностьИнтервалаРабочегоДня < 0,24 + РазностьИнтервалаРабочегоДня, РазностьИнтервалаРабочегоДня);
		ЧасовПерерывов = ДлительностьПериода - ПрошлоеЗначениеПоля;
		
		РазностьВремениДата = (ВремяНачалаРабочегоДня + (НовоеЗначениеПоля+ЧасовПерерывов)*60*60);
		РазностьВремени = (Дата(1,1,1)-РазностьВремениДата)*-1;
		ВремяОкончания = ?(РазностьВремени<0, РазностьВремени* -1, РазностьВремени);
		
		ВремяОкончания = Дата(1,1,1)+ ВремяОкончания;
		
		КоличествоПериодов = СтрокиДнейЦикла.Количество();
		ИндексПериода = 1;
		
		Для Каждого СтрокаДняЦикла Из СтрокиДнейЦикла Цикл
			
			НоваяСтрока = ИзмененныеДни.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДняЦикла);
			
			НоваяСтрока.ДатаДня = ДатаДня;
			СтрокаДанных["Изменен"+НомерДня] = Истина;
			
			Если ИндексПериода = КоличествоПериодов Тогда
				НоваяСтрока.ВремяОкончания = ВремяОкончания;
				НоваяСтрока.Длительность = (НоваяСтрока.ВремяОкончания - НоваяСтрока.ВремяНачала)/3600;
			КонецЕсли;
			
			НоваяСтрока.ЭтоОтклонение = Истина;
			
			ИндексПериода = ИндексПериода + 1;
		КонецЦикла;
		
		СтрокаДанных["Изменен"+НомерДня] = Истина;
		
		ЕстьОбработанныеОбласти = Истина;
		
		РассчитатьРабочиеЧасы(НомерМесяца);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРасписаниеКлиент(ЕстьОбработанныеОбласти = Ложь, ЭтоОтклонение = Ложь)
	ВыделенныеОбласти = Элементы.РасписаниеПоГрафику.ПолучитьВыделенныеОбласти();
	
	Для каждого ТекОбласть Из ВыделенныеОбласти Цикл
		
		Если ТипЗнч(ТекОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		
		Для ТекСтрока = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			Для ТекКолонка = ТекОбласть.Лево По ТекОбласть.Право Цикл
				Если ТекКолонка >= 3 И ТекКолонка <= 33 И ТекСтрока >= 2 И ТекСтрока <= 13 Тогда
					Попытка
						ДатаДня = Дата(НомерТекущегоГода, ТекСтрока - 1, ТекКолонка - 2, 0, 0, 0);
					Исключение
						Продолжить;
					КонецПопытки;
					
					НомерДня = День(ДатаДня);
					НомерМесяца = Месяц(ДатаДня);
					
					СтрокаДанных = ДанныеГрафика[Месяц(ДатаДня)-1];
					
					Если СтрокаДанных["День"+Строка(НомерДня)] = 0 Тогда Продолжить КонецЕсли;
					
					ОчиститьСтрокиИзмененныхДней(ДатаДня);
					
					СтрокаДанных["День"+Строка(НомерДня)] = 0;
					СтрокаДанных["Изменен"+Строка(НомерДня)] = Истина;
					
					НоваяСтрока = ИзмененныеДни.Добавить();
					НоваяСтрока.Длительность = 0;
					НоваяСтрока.ДатаДня = ДатаДня;
					НоваяСтрока.ЭтоОтклонение = ЭтоОтклонение;
					
					ЕстьОбработанныеОбласти = Истина;
					
					РассчитатьРабочиеЧасы(НомерМесяца);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЕстьОбработанныеОбласти Тогда
		ЭтаФорма.Модифицированность = Истина;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Выделите день или период календаря в таблице.'");
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПредставлениеГрафикаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СписокГрафиковГиперСсылка.Количество() = 1 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", СписокГрафиковГиперСсылка[0].Значение);
		
		ОткрытьФорму("Справочник.ГрафикиРаботы.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, , , , ,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли СписокГрафиковГиперСсылка.Количество() > 1
		Тогда
		
		ПараметрыОповещения = Новый Структура();
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораГрафика", ЭтотОбъект, ПараметрыОповещения);
		
		СписокГрафиковГиперСсылка.ПоказатьВыборЭлемента(Оповещение, НСтр("ru = 'Графики за период'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПоГрафикуПриАктивизации(Элемент)
	
	СформироватьПредставлениеПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПоГрафикуВыбор(Элемент, Область, СтандартнаяОбработка)
	
	#Если НЕ МобильныйКлиент Тогда
		Возврат;
	#КонецЕсли
	
	ПараметрыОповещения = Новый Структура;
	
	Список = Новый СписокЗначений;
	Список.Добавить("Редактировать",,Ложь, БиблиотекаКартинок.Изменить);
	Список.Добавить("Очистить",,Ложь,БиблиотекаКартинок.Очистить);
	Список.Добавить("Удалить отклонения",,Ложь);
	Список.Добавить("Удалить все отклонения",,Ложь);
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМеню",ЭтаФорма,ПараметрыОповещения);
	ПоказатьВыборИзМеню(Оповещение, Список, Элементы.РасписаниеПоГрафику);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОчиститьОтклонения(Команда)
	ОчиститьОтклоненияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтклоненияЗаПериод(Команда)
	ОчиститьОтклоненияЗаПериодКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписание(Команда)
	
	ИзменитьРасписаниеКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРасписание(Команда)
	
	ОчиститьРасписаниеКлиентИнтерактивно();
	
КонецПроцедуры

&НаКлиенте
Процедура История(Команда)
	ОткрытьФорму("РегистрСведений.ГрафикиРаботыРесурсов.ФормаСписка",  Новый Структура("РесурсПредприятия", Ресурс), Ресурс);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьГрафик(Команда)
	
	ВыделенныеОбласти = Элементы.РасписаниеПоГрафику.ПолучитьВыделенныеОбласти();
	
	Если Не ВыделенныеОбласти.Количество() Тогда 
		Возврат
	КонецЕсли;
	
	Если ВыделенныеОбласти.Количество()> 1 Тогда 
		Возврат
	КонецЕсли;
	
	ТекОбласть = ВыделенныеОбласти[0];
	
	Если ТипЗнч(ТекОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекОбласть.Верх = ТекОбласть.Низ И Не ТекОбласть.Лево = ТекОбласть.Право Тогда
		Возврат
	КонецЕсли;
	
	ТекСтрока = ТекОбласть.Верх;
	ТекКолонка = ТекОбласть.Лево;
	
	Если ТекКолонка >= 3 И ТекКолонка <= 33 И ТекСтрока >= 2 И ТекСтрока <= 13 Тогда
		Попытка
			ДатаДня = Дата(НомерТекущегоГода, ТекСтрока - 1, ТекКолонка - 2, 0, 0, 0);
			
			ПараметрыОтбора = Новый Структура("ДатаДня", ДатаДня);
			
			НайденныеСтроки = ДатыПоГрафикам.НайтиСтроки(ПараметрыОтбора);
			
			ГрафикДатаУстановки = ДатаДня;
			ГрафикДляУстановки = ?(НайденныеСтроки.Количество(),НайденныеСтроки[0].ГрафикРаботы, Неопределено);
			
		Исключение
			ГрафикДляУстановки = Неопределено;
			ГрафикДатаУстановки = Неопределено;
			ВызватьИсключение
		КонецПопытки;
	КонецЕсли;
	
	ПослеДатыНетГрафиковДоКонцаГода = Истина;
	
	Для Каждого СтрокаГрафикЗаГод Из ГрафикиРаботыЗаГод Цикл
		
		Если ДатаДня < СтрокаГрафикЗаГод.Период Тогда
			ПослеДатыНетГрафиковДоКонцаГода = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПослеДатыНетГрафиковДоКонцаГода Тогда
		
		Оповещение = Новый ОписаниеОповещения("УстановитьГрафикЗавершение",ЭтаФорма);
		Режим = РежимДиалогаВопрос.ДаНетОтмена;
		Текст = НСтр("ru='Установить график до окончания текущего года?'");
		ПоказатьВопрос(Оповещение,Текст, Режим, 0);
	Иначе
		ОбновитьДоКонцаГода = Истина;
		ОткрытьФорму("Справочник.ГрафикиРаботы.ФормаВыбора", Новый Структура("ТекущаяСтрока", ГрафикДляУстановки), ЭтаФорма);
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьГрафик(Команда)
	ЗаполнитьДанныеРеквизитовПоГрафикам(НомерТекущегоГода);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция РедактированиеДоступно()
	
	Результат = ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.ГрафикиРаботы)
		И ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.ГрафикиРаботыРесурсов)
		И ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.ГрафикиРаботыСтруктурныхЕдиниц)
		И ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.ОтклоненияОтГрафиковРаботыРесурсов)
		И ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.РасписаниеЗагрузкиРесурсов);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОграничитьДоступностьЭлементовФормы()
	
	 Элементы.ГруппаПодменю.Видимость = Ложь;
	 Элементы.УстановитьГрафик.Видимость = Ложь;
	 Элементы.ФормаИстория.Видимость = Ложь;
	 Элементы.РасписаниеПоГрафикуКонтекстноеМенюГруппаИзменить.Видимость = Ложь;
	 Элементы.ГруппаДействия.Видимость = Ложь;
	 
	 Элементы.РасписаниеПоГрафику.ТолькоПросмотр = Истина;
	 
	 Элементы.ПолеПредставлениеГрафика.Доступность = Ложь;
	 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеРеквизитовПоГрафикам(НомерГода)
	
	Объект.ШаблоныПоГоду.Очистить();
	Объект.Перерывы.Очистить();
	Объект.ПериодыГрафика.Очистить();
	Объект.ПериодыДополнительныхНастроекЗаполнения.Очистить();
	Объект.РасписаниеРаботы.Очистить();
	Объект.ДополнительныеНастройкиЗаполнения.Очистить();
	
	ГрафикиРаботыЗаГод.Очистить();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НомерГода", НомерГода);
	Запрос.УстановитьПараметр("Ресурс", Ресурс);
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(Дата(НомерГода,1,1)));
	
	Если ТипЗнч(Ресурс) = Тип("СправочникСсылка.Сотрудники") Тогда 
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ГрафикРаботы КАК ГрафикРаботы,
		|	Сотрудники.Период КАК Период,
		|	Сотрудники.ГрафикРаботы.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
		|	Сотрудники.ГрафикРаботы.УчитыватьПраздничныеДни КАК УчитыватьПраздничныеДни
		|ИЗ
		|	РегистрСведений.Сотрудники КАК Сотрудники
		|ГДЕ
		|	ГОД(Сотрудники.Период) = &НомерГода
		|	И Сотрудники.Сотрудник = &Ресурс
		|	И НЕ Сотрудники.ГрафикРаботы = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СотрудникиСрезПоследних.ГрафикРаботы,
		|	СотрудникиСрезПоследних.Период,
		|	СотрудникиСрезПоследних.ГрафикРаботы.ПроизводственныйКалендарь,
		|	СотрудникиСрезПоследних.ГрафикРаботы.УчитыватьПраздничныеДни
		|ИЗ
		|	РегистрСведений.Сотрудники.СрезПоследних(
		|			&НачалоГода,
		|			Сотрудник = &Ресурс
		|				И НЕ ГрафикРаботы = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)) КАК СотрудникиСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
		
		
	ИначеЕсли ТипЗнч(Ресурс) = Тип("СправочникСсылка.КлючевыеРесурсы") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГрафикиРаботыРесурсов.ГрафикРаботы КАК ГрафикРаботы,
		|	ГрафикиРаботыРесурсов.Период КАК Период,
		|	ГрафикиРаботыРесурсов.ГрафикРаботы.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
		|	ГрафикиРаботыРесурсов.ГрафикРаботы.УчитыватьПраздничныеДни КАК УчитыватьПраздничныеДни
		|ИЗ
		|	РегистрСведений.ГрафикиРаботыРесурсов КАК ГрафикиРаботыРесурсов
		|ГДЕ
		|	ГрафикиРаботыРесурсов.РесурсПредприятия = &Ресурс
		|	И НЕ ГрафикиРаботыРесурсов.ГрафикРаботы = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
		|	И ГОД(ГрафикиРаботыРесурсов.Период) = &НомерГода
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ГрафикиРаботыРесурсовСрезПоследних.ГрафикРаботы,
		|	ГрафикиРаботыРесурсовСрезПоследних.Период,
		|	ГрафикиРаботыРесурсовСрезПоследних.ГрафикРаботы.ПроизводственныйКалендарь,
		|	ГрафикиРаботыРесурсовСрезПоследних.ГрафикРаботы.УчитыватьПраздничныеДни
		|ИЗ
		|	РегистрСведений.ГрафикиРаботыРесурсов.СрезПоследних(
		|			&НачалоГода,
		|			РесурсПредприятия = &Ресурс
		|				И НЕ ГрафикРаботы = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)) КАК ГрафикиРаботыРесурсовСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
		
	Иначе
		
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГрафикиРаботыСтруктурныхЕдиниц.ГрафикРаботы КАК ГрафикРаботы,
		|	ГрафикиРаботыСтруктурныхЕдиниц.Период КАК Период,
		|	ГрафикиРаботыСтруктурныхЕдиниц.ГрафикРаботы.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
		|	ГрафикиРаботыСтруктурныхЕдиниц.ГрафикРаботы.УчитыватьПраздничныеДни КАК УчитыватьПраздничныеДни
		|ПОМЕСТИТЬ Итог
		|ИЗ
		|	РегистрСведений.ГрафикиРаботыСтруктурныхЕдиниц КАК ГрафикиРаботыСтруктурныхЕдиниц
		|ГДЕ
		|	ГрафикиРаботыСтруктурныхЕдиниц.СтруктурнаяЕдиница = &Ресурс
		|	И НЕ ГрафикиРаботыСтруктурныхЕдиниц.ГрафикРаботы = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
		|	И ГОД(ГрафикиРаботыСтруктурныхЕдиниц.Период) = &НомерГода
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГрафикиРаботыРесурсовСрезПоследних.ГрафикРаботы,
		|	ГрафикиРаботыРесурсовСрезПоследних.Период,
		|	ГрафикиРаботыРесурсовСрезПоследних.ГрафикРаботы.ПроизводственныйКалендарь,
		|	ГрафикиРаботыРесурсовСрезПоследних.ГрафикРаботы.УчитыватьПраздничныеДни
		|ИЗ
		|	РегистрСведений.ГрафикиРаботыРесурсов.СрезПоследних(
		|			&НачалоГода,
		|			РесурсПредприятия = &Ресурс
		|				И НЕ ГрафикРаботы = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)) КАК ГрафикиРаботыРесурсовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Итог.ГрафикРаботы КАК ГрафикРаботы,
		|	Итог.Период КАК Период,
		|	Итог.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
		|	Итог.УчитыватьПраздничныеДни КАК УчитыватьПраздничныеДни
		|ИЗ
		|	Итог КАК Итог";
		
	КонецЕсли;
	
	ВыборкаГрафики = Запрос.Выполнить().Выбрать();
	
	СписокГрафиковРаботы = Новый ТаблицаЗначений;
	СписокГрафиков.Очистить();
	
	МассивОбработанныхГрафиков = Новый Массив;
	
	Пока ВыборкаГрафики.Следующий() Цикл
		
		НоваяСтрока = ГрафикиРаботыЗаГод.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаГрафики);
		
		ОбновитьДанныеГрафика(ВыборкаГрафики.ГрафикРаботы, МассивОбработанныхГрафиков);
		
		МассивОбработанныхГрафиков.Добавить(ВыборкаГрафики.ГрафикРаботы);
		
	КонецЦикла;
	
	СписокГрафиковРаботы = ГрафикиРаботыЗаГод.Выгрузить(,"ГрафикРаботы");
	СписокГрафиковРаботы.Свернуть("ГрафикРаботы");
	
	СписокГрафиков.ЗагрузитьЗначения(СписокГрафиковРаботы.ВыгрузитьКолонку("ГрафикРаботы"));
	СписокГрафиков.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	ОбработатьДанныеГрафика(НомерГода);
	
	ВывестиРасписаниеПоГрафику(НомерГода);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРасписаниеПоГрафику(НомерГода = Неопределено)
	
	НомерГода = ?(ЗначениеЗаполнено(НомерГода), НомерГода, НомерТекущегоГода);
	
	РасписаниеПоГрафику.Очистить();
	
	Если Не ДанныеГрафика.Количество() Тогда Возврат КонецЕсли;
	
	РасписаниеПоГрафику.ФиксацияСлева = 2;
	РасписаниеПоГрафику.ФиксацияСверху = 1;
	
	МакетРасписаниеПоГрафику = Обработки.ГрафикиРаботы.ПолучитьМакет("ГрафикРаботы");
	
	ОбластьМакета = МакетРасписаниеПоГрафику.ПолучитьОбласть("Шапка");
	РасписаниеПоГрафику.Вывести(ОбластьМакета);
	
	ОбластьМакета = МакетРасписаниеПоГрафику.ПолучитьОбласть("Календарь");
	РасписаниеПоГрафику.Вывести(ОбластьМакета);
	
	Для Каждого СтрокаДанных Из ДанныеГрафика Цикл
		
		НомерМесяца = СтрокаДанных.НомерМесяца;
		
		КоличествоДней = СтрокаДанных.КоличествоДнейВМесяце;
		
		Для НомерДня = 1 По 31 Цикл
			
			Если НомерДня = 1 Тогда
				Область = РасписаниеПоГрафику.Область("R" + Строка(НомерМесяца + 1) + "C" + Строка(НомерДня + 1));
				Область.Текст = СтрокаДанных.ДнейЧасовПредставление;
			КонецЕсли;
			
			Область = РасписаниеПоГрафику.Область("R" + Строка(НомерМесяца + 1) + "C" + Строка(НомерДня + 2));
			Область.Текст = "";
			Если НомерДня > КоличествоДней Тогда
				
				Область.Шрифт = Новый Шрифт(, 10, Истина, , , );
				Область.ЦветФона = ЦветаСтиля.НедоступныеДанныеЦвет;
				Область.Текст = "X";
				
			Иначе
				
				ДатаДня = Дата(НомерГода, НомерМесяца, НомерДня, 0, 0, 0);
				НомерДняСтрокой = Строка(НомерДня);
				
				КолонкаВидДня = "ВидДня"+НомерДняСтрокой;
				КолонкаДень = "День"+ НомерДняСтрокой;
				Изменен = "Изменен" + НомерДняСтрокой;
				
				ПараметрыОтбора = Новый Структура("ЭтоОтклонение, ДатаДня", Истина, ДатаДня);
				ЕстьОтклоненияПоДню = ИзмененныеДни.НайтиСтроки(ПараметрыОтбора);
				
				Если Не ЕстьОтклоненияПоДню.Количество() Тогда
					
					ПараметрыПоиска = Новый Структура("ДатаДня", ДатаДня);
					
					НайденныеСтроки = ДатыПоГрафикам.НайтиСтроки(ПараметрыПоиска);
					
					Если НайденныеСтроки.Количество() Тогда
						
						Если ЗначениеЗаполнено(НайденныеСтроки[0].ГрафикРаботы) 
							И Не НайденныеСтроки[0].ГрафикРаботы.Цвет.Получить() = Новый Цвет(0, 0, 0) 
							И Не НайденныеСтроки[0].ГрафикРаботы.Цвет.Получить() = Неопределено Тогда
							
							Область.Узор = ТипУзораТабличногоДокумента.Узор15;
							Область.ЦветУзора = НайденныеСтроки[0].ГрафикРаботы.Цвет.Получить();
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				// Раскраска выходных дней.
				Если СтрокаДанных[КолонкаВидДня] = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье
					ИЛИ СтрокаДанных[КолонкаВидДня] = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота
					ИЛИ СтрокаДанных[КолонкаВидДня] = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник
					ИЛИ СтрокаДанных[КолонкаВидДня] = Перечисления.ВидыДнейПроизводственногоКалендаря.Нерабочий Тогда
					
					Область.ЦветФона = ЦветаСтиля.НерабочееВремяВыходной;
					
				КонецЕсли;
				
				Если СтрокаДанных[Изменен] = Истина Тогда
					
					ПараметрыОтбора = Новый Структура("ЭтоОтклонение, ДатаДня", Истина, ДатаДня);
					
					ЕстьОтклоненияПоДню = ИзмененныеДни.НайтиСтроки(ПараметрыОтбора);
					
					Если ЕстьОтклоненияПоДню.Количество() Тогда
						Область.ЦветФона = ЦветаСтиля.РабочееВремяЗанятоПолностью;
					КонецЕсли
				КонецЕсли;
				
				Если ДатаДня = НачалоДня(ТекущаяДатаСеанса()) Тогда
					Область.Примечание.Текст = "Текущая дата"
				КонецЕсли;
				
				Область.Текст = СтрокаДанных[КолонкаДень];
				Область.Защита = Ложь;
				//КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДанныеГрафика(НомерГода = Неопределено, ЗаполнениеСледГода = Ложь)
	
	ДанныеГрафика.Очистить();
	
	НомерГода = ?(Не НомерГода = Неопределено, НомерГода, НомерТекущегоГода);
	
	ПараметрыОтбора = Новый Структура("Год", НомерГода);
	СтрокаШаблоныПоГоду = Объект.ШаблоныПоГоду.НайтиСтроки(ПараметрыОтбора);
	
	Если СтрокаШаблоныПоГоду.Количество() Тогда
		ШаблонЗаполненияГрафика = СтрокаШаблоныПоГоду[0].ШаблонЗаполненияГрафика;
		ДатаОтсчета = СтрокаШаблоныПоГоду[0].ДатаОтсчета;
		ТипГрафика = СтрокаШаблоныПоГоду[0].ТипГрафика;
	КонецЕсли;
	
	ОбновитьПроизводственныйКалендарьГрафика(Истина, НомерГода);
	
	Если Не ДанныеГрафика.Количество() Тогда Возврат КонецЕсли;
	
	ЗаполнитьДанныеГрафика(НомерГода);
	
	СопоставитьДниГрафикам(НомерГода);
	
	ВывестиРасписаниеПоГрафику(НомерГода);
	
КонецПроцедуры

&НаСервере
Процедура СопоставитьДниГрафикам(НомерГода)
	
	ДатыПоГрафикам.Очистить();
	
	Для Каждого СтрокаДанных Из ДанныеГрафика Цикл
		
		КоличествоДнейВМесяце = СтрокаДанных.КоличествоДнейВМесяце;
		
		Для НомерДня = 1 По КоличествоДнейВМесяце Цикл
			
			ДатаДня = Дата(НомерГода, СтрокаДанных.НомерМесяца, НомерДня);
			
			ГрафикДаты = Неопределено;
			
			Для Каждого СтрокаГрафикиЗаГод Из ГрафикиРаботыЗаГод Цикл
				
				Если ДатаДня>=СтрокаГрафикиЗаГод.Период Тогда
					ГрафикДаты = СтрокаГрафикиЗаГод.ГрафикРаботы;
				КонецЕсли;
				
			КонецЦикла;
			
			НоваяСтрока = ДатыПоГрафикам.Добавить();
			НоваяСтрока.ДатаДня = ДатаДня;
			НоваяСтрока.ГрафикРаботы = ГрафикДаты;
			
			ПараметрыОтбора = Новый Структура("ДатаДня, ЭтоОтклонение", ДатаДня, Истина);
			
			НайденныеСтроки = ИзмененныеДни.НайтиСтроки(ПараметрыОтбора);
			
			Если НайденныеСтроки.Количество() Тогда
				НоваяСтрока.ЭтоОтклонение = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДатыПоГрафикам.Сортировать("ГрафикРаботы Возр, ДатаДня Возр");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеГрафика(НомерГода = Неопределено)
	
	ИзмененныеДни.Очистить();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Год", НомерГода);
	Запрос.УстановитьПараметр("Ресурс", Ресурс);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала КАК ВремяНачала,
	|	ОтклоненияОтГрафиковРаботыРесурсов.ЧасыРаботы КАК Длительность,
	|	МЕСЯЦ(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала) КАК НомерМесяца,
	|	ОтклоненияОтГрафиковРаботыРесурсов.Год КАК Год,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, ДЕНЬ) = ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания
	|			ТОГДА НАЧАЛОПЕРИОДА(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, ДЕНЬ)
	|		ИНАЧЕ ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания
	|	КОНЕЦ КАК ВремяОкончания,
	|	ИСТИНА КАК Изменен,
	|	ИСТИНА КАК ЭтоОтклонение,
	|	ДЕНЬ(ОтклоненияОтГрафиковРаботыРесурсов.День) КАК ДеньМесяца,
	|	ОтклоненияОтГрафиковРаботыРесурсов.День КАК Дата,
	|	ОтклоненияОтГрафиковРаботыРесурсов.ЧасовПерерывов КАК ЧасовПерерывов
	|ИЗ
	|	РегистрСведений.ОтклоненияОтГрафиковРаботыРесурсов КАК ОтклоненияОтГрафиковРаботыРесурсов
	|ГДЕ
	|	ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия = &Ресурс
	|	И ОтклоненияОтГрафиковРаботыРесурсов.Год = &Год";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		
		НоваяСтрока = ИзмененныеДни.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатЗапроса);
		НоваяСтрока.ДатаДня = НачалоДня(РезультатЗапроса.ВремяНачала);
		
	КонецЦикла;
	
	ТаблицаОтклонений = ИзмененныеДни.Выгрузить(,"ДатаДня, Длительность");
	ТаблицаОтклонений.Свернуть("ДатаДня","Длительность");
	
	Для Каждого СтрокаОтклонений Из ТаблицаОтклонений Цикл
		
		НомерДняСтрокой = Строка(День(СтрокаОтклонений.ДатаДня));
		
		ИмяПоляДень = "День" + НомерДняСтрокой;
		ИмяПоляИзменен = "Изменен" + НомерДняСтрокой;
		
		СтрокаДанныхГрафика = ДанныеГрафика[Месяц(СтрокаОтклонений.ДатаДня) - 1];
		
		СтрокаДанныхГрафика[ИмяПоляДень] = СтрокаОтклонений.Длительность;
		СтрокаДанныхГрафика.ИтогЧасы = СтрокаДанныхГрафика.ИтогЧасы + СтрокаОтклонений.Длительность;
		СтрокаДанныхГрафика[ИмяПоляИзменен] = Истина;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	РазделительПакета = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстПакета = 
	"ВЫБРАТЬ
	|	ГрафикиРаботы.ВремяНачала КАК ВремяНачала,
	|	ГрафикиРаботы.ЧасыРаботы КАК Длительность,
	|	МЕСЯЦ(ГрафикиРаботы.ВремяНачала) КАК НомерМесяца,
	|	ГрафикиРаботы.Год КАК Год,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(ГрафикиРаботы.ВремяОкончания, ДЕНЬ) = ГрафикиРаботы.ВремяОкончания
	|			ТОГДА НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяОкончания, ДЕНЬ)
	|		ИНАЧЕ ГрафикиРаботы.ВремяОкончания
	|	КОНЕЦ КАК ВремяОкончания,
	|	ИСТИНА КАК Изменен,
	|	ЛОЖЬ КАК ЭтоОтклонение,
	|	ДЕНЬ(ГрафикиРаботы.ВремяНачала) КАК ДеньМесяца,
	|	НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ) КАК Дата,
	|	ГрафикиРаботы.ЧасовПерерывов КАК ЧасовПерерывов
	|ИЗ
	|	РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|ГДЕ
	|	ГрафикиРаботы.Год = &Год
	|	И ГрафикиРаботы.ШаблонЗаполнения = ЗНАЧЕНИЕ(Справочник.ШаблоныЗаполненияГрафиковРабочегоВремени.ПустаяСсылка)
	|	И ГрафикиРаботы.ГрафикРаботы = &ГрафикРаботы
	|	И ГрафикиРаботы.ВремяНачала >= &ДатаНачала
	|	И НЕ НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ) В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ОтклоненияОтГрафиковРаботыРесурсов.День КАК День
	|				ИЗ
	|					РегистрСведений.ОтклоненияОтГрафиковРаботыРесурсов КАК ОтклоненияОтГрафиковРаботыРесурсов
	|				ГДЕ
	|					ОтклоненияОтГрафиковРаботыРесурсов.Год = &Год
	|					И ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия = &Ресурс)
	|	И ГрафикиРаботы.ВремяНачала < &ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерМесяца,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ГрафикиРаботы.ЧасыРаботы) КАК Длительность,
	|	МЕСЯЦ(ГрафикиРаботы.ВремяНачала) КАК НомерМесяца,
	|	ГрафикиРаботы.Год КАК Год,
	|	ГрафикиРаботы.ШаблонЗаполнения = ЗНАЧЕНИЕ(Справочник.ШаблоныЗаполненияГрафиковРабочегоВремени.ПустаяСсылка) КАК Изменен,
	|	ДЕНЬ(ГрафикиРаботы.ВремяНачала) КАК ДеньМесяца,
	|	ГрафикиРаботы.НомерДняЦикла КАК НомерДняЦикла,
	|	НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ) КАК Дата
	|ИЗ
	|	РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|ГДЕ
	|	ГрафикиРаботы.Год = &Год
	|	И ГрафикиРаботы.ГрафикРаботы = &ГрафикРаботы
	|	И ГрафикиРаботы.ВремяНачала >= &ДатаНачала
	|	И НЕ НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ) В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ОтклоненияОтГрафиковРаботыРесурсов.День КАК День
	|				ИЗ
	|					РегистрСведений.ОтклоненияОтГрафиковРаботыРесурсов КАК ОтклоненияОтГрафиковРаботыРесурсов
	|				ГДЕ
	|					ОтклоненияОтГрафиковРаботыРесурсов.Год = &Год
	|					И ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия = &Ресурс)
	|	И ГрафикиРаботы.ВремяНачала < &ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикиРаботы.Год,
	|	ГрафикиРаботы.НомерДняЦикла,
	|	ГрафикиРаботы.ШаблонЗаполнения = ЗНАЧЕНИЕ(Справочник.ШаблоныЗаполненияГрафиковРабочегоВремени.ПустаяСсылка),
	|	НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ),
	|	МЕСЯЦ(ГрафикиРаботы.ВремяНачала),
	|	ДЕНЬ(ГрафикиРаботы.ВремяНачала)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерМесяца,
	|	Дата";
	
	ТекстЗапроса = "";
	
	КоличествоГрафиков = 1;
	
	Если ГрафикиРаботыЗаГод.Количество() = 1 Тогда
		
		Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикиРаботыЗаГод[0].ГрафикРаботы);
		
		Если ЗначениеЗаполнено(НомерГода) И Не Год(ГрафикиРаботыЗаГод[0].Период) = НомерГода Тогда
			Запрос.УстановитьПараметр("ДатаНачала", НачалоГода(Дата(НомерГода,1,1)));
			Запрос.УстановитьПараметр("ДатаОкончания", КонецГода(Дата(НомерГода,1,1)));
		Иначе
			Запрос.УстановитьПараметр("ДатаНачала", ГрафикиРаботыЗаГод[0].Период);
			Запрос.УстановитьПараметр("ДатаОкончания", КонецГода(ГрафикиРаботыЗаГод[0].Период));
		КонецЕсли;
		
		Запрос.Текст = ТекстПакета;
		
		КоличествоГрафиков = КоличествоГрафиков + 1;
		
	Иначе
		
		Для Каждого ГрафикЗаГод Из ГрафикиРаботыЗаГод Цикл
			
			РедакцияПакета = "";
			
			ИмяПараметраГрафик = "ГрафикРаботы"+Строка(КоличествоГрафиков);
			ИмяПараметраНачалоПериода = "ДатаНачала"+Строка(КоличествоГрафиков);
			ИмяПараметраОкончаниеПериода = "ДатаОкончания"+Строка(КоличествоГрафиков);
			
			РедакцияПакета = СтрЗаменить(ТекстПакета, "&ГрафикРаботы", "&"+ИмяПараметраГрафик);
			РедакцияПакета = СтрЗаменить(РедакцияПакета, "&ДатаНачала", "&"+ИмяПараметраНачалоПериода);
			РедакцияПакета = СтрЗаменить(РедакцияПакета, "&ДатаОкончания", "&"+ИмяПараметраОкончаниеПериода);
			
			ТекстЗапроса = ТекстЗапроса + РедакцияПакета + РазделительПакета;
			
			Запрос.УстановитьПараметр(ИмяПараметраГрафик, ГрафикЗаГод.ГрафикРаботы);
			
			Если ЗначениеЗаполнено(НомерГода) И Не Год(ГрафикЗаГод.Период) = НомерГода Тогда
				Запрос.УстановитьПараметр(ИмяПараметраНачалоПериода, НачалоГода(Дата(НомерГода,1,1)));
				
				ОкончаниеПериода = ?(КоличествоГрафиков < ГрафикиРаботыЗаГод.Количество(), ГрафикиРаботыЗаГод[КоличествоГрафиков].Период
				, КонецГода(ГрафикЗаГод.Период));
				
				Запрос.УстановитьПараметр(ИмяПараметраОкончаниеПериода, ОкончаниеПериода);
			Иначе
				
				Запрос.УстановитьПараметр(ИмяПараметраНачалоПериода, ГрафикЗаГод.Период);
				
				ОкончаниеПериода = ?(КоличествоГрафиков < ГрафикиРаботыЗаГод.Количество(), ГрафикиРаботыЗаГод[КоличествоГрафиков].Период
				, КонецГода(ГрафикЗаГод.Период));
				
				Запрос.УстановитьПараметр(ИмяПараметраОкончаниеПериода, ОкончаниеПериода);
				
			КонецЕсли;
			
			КоличествоГрафиков = КоличествоГрафиков + 1;
			
		КонецЦикла;
		
		Запрос.Текст = ТекстЗапроса;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Запрос.Текст) Тогда Возврат КонецЕсли;
	
	Запрос.УстановитьПараметр("Год", НомерГода);
	Запрос.УстановитьПараметр("Ресурс", Ресурс);
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	КоличествоПакетов = (КоличествоГрафиков-1)*2;
	
	Для ИндексГрафика = 1 По КоличествоПакетов Цикл
		
		НомерПакета = ИндексГрафика-1;
		
		РезультатЗапроса = ПакетЗапросов[НомерПакета].Выбрать();
		
		Если Не ИндексГрафика%2 = 0 Тогда
			
			Пока РезультатЗапроса.Следующий() Цикл
				
				НоваяСтрока = ИзмененныеДни.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатЗапроса);
				НоваяСтрока.ДатаДня = НачалоДня(РезультатЗапроса.ВремяНачала);
				
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		Пока РезультатЗапроса.Следующий() Цикл
			
			НомерДняСтрокой = Строка(РезультатЗапроса.ДеньМесяца);
			
			ИмяПоляДень = "День" + НомерДняСтрокой;
			ИмяПоляДеньЦикла = "НомерДняЦикла"+НомерДняСтрокой;
			ИмяПоляИзменен = "Изменен"+НомерДняСтрокой;
			
			СтрокаДанныхГрафика = ДанныеГрафика[РезультатЗапроса.НомерМесяца - 1];
			
			СтрокаДанныхГрафика[ИмяПоляДень] = РезультатЗапроса.Длительность;
			СтрокаДанныхГрафика[ИмяПоляДеньЦикла] = РезультатЗапроса.НомерДняЦикла;
			СтрокаДанныхГрафика.ИтогЧасы = СтрокаДанныхГрафика.ИтогЧасы + РезультатЗапроса.Длительность;
			СтрокаДанныхГрафика[ИмяПоляИзменен] = РезультатЗапроса.Изменен;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаДанных Из ДанныеГрафика Цикл
		
		СтрокаДанных.ДнейЧасовПредставление = Строка(СтрокаДанных.ИтогДни) + " / " + Строка(СтрокаДанных.ИтогЧасы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПроизводственныйКалендарьГрафика(ПриОткрытииФормы = Ложь, НомерГода = Неопределено)
	
	НомерГода = ?(Не НомерГода = Неопределено, НомерГода, НомерТекущегоГода);
	
	ГрафикМенеджер = Справочники.ГрафикиРаботы;
	ГрафикМенеджер.ЗаполнитьДаннымиПроизводственногоКалендаря(ДанныеГрафика, НомерГода, Истина, Истина, ПриОткрытииФормы, ДатаОтсчета, ТипГрафика,, Объект);
	
	КоличествоГрафиков = 1;
	
	Для Каждого ГрафикЗаГод Из ГрафикиРаботыЗаГод Цикл
		
		Если НЕ ЗначениеЗаполнено(ГрафикЗаГод.ПроизводственныйКалендарь) Тогда 
			КоличествоГрафиков = КоличествоГрафиков+1;
			Продолжить 
		КонецЕсли;
		
		ДанныеКалендаря = ГрафикМенеджер.ДанныеПроизводственногоКалендаря(ГрафикЗаГод.ПроизводственныйКалендарь, НомерГода);
		
		Если Не ДанныеКалендаря.Количество() Тогда 
			КоличествоГрафиков = КоличествоГрафиков+1;
			Продолжить 
		КонецЕсли;
		
		ОкончаниеПериода = ?(КоличествоГрафиков < ГрафикиРаботыЗаГод.Количество(), ГрафикиРаботыЗаГод[КоличествоГрафиков].Период
		, КонецГода(ГрафикЗаГод.Период));
		
		
		Если Не Год(ГрафикЗаГод.Период) = НомерГода Тогда 
			МесяцНачала = 1;
			МесяцОкончания = 12;
			НомерДняНачалаПериода = 1;
			НомерДняОкончанияПериода = 31;
		Иначе
			МесяцНачала = Месяц(ГрафикЗаГод.Период);
			МесяцОкончания = Месяц(ОкончаниеПериода);
			НомерДняНачалаПериода = День(ГрафикЗаГод.Период);
			НомерДняОкончанияПериода = День(ОкончаниеПериода);
		КонецЕсли;
		
		Для СчетчикМесяц = МесяцНачала По МесяцОкончания Цикл
			
			СтрокаКалендаря = ДанныеГрафика[СчетчикМесяц-1];
			
			КоличествоДнейВМесяце = День(КонецМесяца(Дата(НомерГода,СчетчикМесяц, 1)));
			
			Если СчетчикМесяц = МесяцОкончания Тогда
				КоличествоДнейВМесяце = НомерДняОкончанияПериода
			Иначе
				КоличествоДнейВМесяце = День(КонецМесяца(Дата(НомерГода,СчетчикМесяц, 1)));
			КонецЕсли;
			
			Для НомерДня = НомерДняНачалаПериода По КоличествоДнейВМесяце Цикл
				
				НомерДняСтрокой = Строка(НомерДня);
				ИмяПоляВидДня = "ВидДня"+НомерДняСтрокой;
				
				ДатаДня = Дата(НомерГода, СчетчикМесяц, НомерДня);
				
				ПараметрыОтбора = Новый Структура("Дата", ДатаДня);
				СтрокиПрКалендаря = ДанныеКалендаря.НайтиСтроки(ПараметрыОтбора);
				СтрокаПрКалендаря = СтрокиПрКалендаря[0];
				
				СтрокаКалендаря[ИмяПоляВидДня] = СтрокаПрКалендаря.ВидДня;
				
			КонецЦикла;
			
			НомерДняНачалаПериода = 1;
			
		КонецЦикла;
		
		КоличествоГрафиков = КоличествоГрафиков+1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаписатьГрафик(Результат, ПараметрыОповещения) Экспорт
	
	Если Не ПараметрыОповещения = Неопределено Тогда
		НомерГодаДляЗаписи = ?(ПараметрыОповещения.Направление<0, НомерТекущегоГода-ПараметрыОповещения.Направление
		, НомерТекущегоГода-ПараметрыОповещения.Направление);
	Иначе
		НомерТекущегоГода = НомерТекущегоГода
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ОбновитьПроизводственныйКалендарьГрафика(Истина, НомерТекущегоГода);
		ОбработатьДанныеГрафика(НомерТекущегоГода);
		ДатаОтсчета = Дата(НомерТекущегоГода,1,1);
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ЗаписатьДанныеВРегистр(НомерГодаДляЗаписи, Отказ);
	
	Если Отказ Тогда Возврат КонецЕсли;
	
	ДатаОтсчета = Дата(НомерТекущегоГода,1,1);
	ОбновитьПроизводственныйКалендарьГрафика(Истина, НомерТекущегоГода);
	ОбработатьДанныеГрафика(НомерТекущегоГода);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьИзмененныйПериодОдинДень(Результат, ДопПараметрыОповещения) Экспорт
	
	Если Не Результат = Неопределено И Результат.Свойство("Периоды") Тогда
		
		ОчиститьСтрокиИзмененныхДней(Результат.ДатаДня);
		
		Для Каждого СтрокаПериод Из Результат.Периоды Цикл
			
			НоваяСтрока = ИзмененныеДни.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПериод);
			НоваяСтрока.ДатаДня = Результат.ДатаДня;
			НоваяСтрока.Длительность = СтрокаПериод.Длительность;
			НоваяСтрока.ЭтоОтклонение = Истина;
			
			ПараметрыОтбора = Новый Структура("ДатаДня", НоваяСтрока.ДатаДня);
			НайденныеСтроки = ДатыПоГрафикам.НайтиСтроки(ПараметрыОтбора);
			
			Если НайденныеСтроки.Количество() Тогда
				НайденныеСтроки[0].ЭтоОтклонение = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не Результат.Периоды.Количество() Тогда
			Если (ЗначениеЗаполнено(Результат.ВремяНачала) ИЛИ ЗначениеЗаполнено(Результат.ВремяОкончания)) Тогда
				
				НоваяСтрока = ИзмененныеДни.Добавить();
				НоваяСтрока.ДатаДня = Результат.ДатаДня;
				НоваяСтрока.ВремяНачала = Результат.ВремяНачала;
				НоваяСтрока.ВремяОкончания = Результат.ВремяОкончания;
				
				Длительность = Окр((Результат.ВремяОкончания - Результат.ВремяНачала)/3600, 2, РежимОкругления.Окр15как20);
				ЧасовПоДню = ?(Длительность < 0, 24 + Длительность, Длительность)-Результат.ВремяПерерывов;
				
				НоваяСтрока.ЧасовПерерывов = Результат.ВремяПерерывов;
				НоваяСтрока.Длительность = ЧасовПоДню;
				
				НоваяСтрока.ЭтоОтклонение = Истина;
				
				ПараметрыОтбора = Новый Структура("ДатаДня", НоваяСтрока.ДатаДня);
				НайденныеСтроки = ДатыПоГрафикам.НайтиСтроки(ПараметрыОтбора);
				
				Если НайденныеСтроки.Количество() Тогда
					НайденныеСтроки[0].ЭтоОтклонение = Истина;
				КонецЕсли;
				
			Иначе
				
				НоваяСтрока = ИзмененныеДни.Добавить();
				НоваяСтрока.ДатаДня = Результат.ДатаДня;
				НоваяСтрока.ЧасовПерерывов = Результат.ВремяПерерывов;
				НоваяСтрока.Длительность = Результат.ЧасовРаботы;
				
				НоваяСтрока.ЭтоОтклонение = Истина;
				
				ПараметрыОтбора = Новый Структура("ДатаДня", НоваяСтрока.ДатаДня);
				НайденныеСтроки = ДатыПоГрафикам.НайтиСтроки(ПараметрыОтбора);
				
				Если НайденныеСтроки.Количество() Тогда
					НайденныеСтроки[0].ЭтоОтклонение = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		ЧасовПоДню = Результат.ЧасовРаботы;
		
		СтрокаДанных = ДанныеГрафика[Месяц(Результат.ДатаДня)-1];
		
		СтрокаДанных["День"+Строка(ДопПараметрыОповещения.НомерДня)] = ЧасовПоДню;
		СтрокаДанных["Изменен"+Строка(ДопПараметрыОповещения.НомерДня)] = Истина;
		
		//ГрафикИзменен = Истина;
		
		РассчитатьРабочиеЧасы(СтрокаДанных.НомерМесяца);
		
		ЗаписатьДанныеВРегистр(НомерТекущегоГода);
		
		ВывестиРасписаниеПоГрафику(); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьИзмененныйПериодВыделенныеДни(Результат, ДопПараметрыОповещения) Экспорт
	
	Если Не Результат = Неопределено И Результат.Свойство("Периоды") Тогда
		
		Для Каждого ВыделенныйДеньСписка Из ДопПараметрыОповещения.СписокДней Цикл
			
			ВыделенныйДень = ВыделенныйДеньСписка.Значение;
			
			ОчиститьСтрокиИзмененныхДней(ВыделенныйДень);
			
			Для Каждого СтрокаПериод Из Результат.Периоды Цикл
				
				НоваяСтрока = ИзмененныеДни.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПериод);
				НоваяСтрока.ДатаДня = ВыделенныйДень;
				НоваяСтрока.Длительность = СтрокаПериод.Длительность;
				НоваяСтрока.ЭтоОтклонение = Истина;
				
				ПараметрыОтбора = Новый Структура("ДатаДня", НоваяСтрока.ДатаДня);
				НайденныеСтроки = ДатыПоГрафикам.НайтиСтроки(ПараметрыОтбора);
				
				Если НайденныеСтроки.Количество() Тогда
					НайденныеСтроки[0].ЭтоОтклонение = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не Результат.Периоды.Количество() Тогда
				Если (ЗначениеЗаполнено(Результат.ВремяНачала) ИЛИ ЗначениеЗаполнено(Результат.ВремяОкончания)) Тогда
					
					НоваяСтрока = ИзмененныеДни.Добавить();
					НоваяСтрока.ДатаДня = ВыделенныйДень;
					НоваяСтрока.ВремяНачала = Результат.ВремяНачала;
					НоваяСтрока.ВремяОкончания = Результат.ВремяОкончания;
					
					Длительность = Окр((Результат.ВремяОкончания - Результат.ВремяНачала)/3600, 2, РежимОкругления.Окр15как20);
					ЧасовПоДню = ?(Длительность < 0, 24 + Длительность, Длительность)-Результат.ВремяПерерывов;
					
					НоваяСтрока.ЧасовПерерывов = Результат.ВремяПерерывов;
					НоваяСтрока.Длительность = ЧасовПоДню;
					НоваяСтрока.ЭтоОтклонение = Истина;
					
					ПараметрыОтбора = Новый Структура("ДатаДня", НоваяСтрока.ДатаДня);
					НайденныеСтроки = ДатыПоГрафикам.НайтиСтроки(ПараметрыОтбора);
					
					Если НайденныеСтроки.Количество() Тогда
						НайденныеСтроки[0].ЭтоОтклонение = Истина;
					КонецЕсли;
					
				Иначе
					
					НоваяСтрока = ИзмененныеДни.Добавить();
					НоваяСтрока.ДатаДня = ВыделенныйДень;
					НоваяСтрока.ЧасовПерерывов = Результат.ВремяПерерывов;
					НоваяСтрока.Длительность = Результат.ЧасовРаботы;
					НоваяСтрока.ЭтоОтклонение = Истина;
					
					ОбщаяДлительностьРабочегоДня = Результат.ВремяПерерывов + Результат.ЧасовРаботы;
					
					Если Не ОбщаяДлительностьРабочегоДня = 24 Тогда
						
						ВремяНачала = 28800;
						ВремяОкончания = ВремяНачала + (ОбщаяДлительностьРабочегоДня)*60*60;
						
						Если ВремяОкончания>=86400 Тогда
							ВремяНачала = Дата(1,1,1) + (86400 - (ОбщаяДлительностьРабочегоДня)*60*60);
							ВремяОкончания = Дата(1,1,1);
						Иначе
							ВремяНачала = Дата(1,1,1) + 28800;
							ВремяОкончания = ВремяНачала + (ОбщаяДлительностьРабочегоДня)*60*60;
						КонецЕсли;
						
						НоваяСтрока.ВремяНачала = ВремяНачала;
						НоваяСтрока.ВремяОкончания = ВремяОкончания;
						
					КонецЕсли;
					
					ПараметрыОтбора = Новый Структура("ДатаДня", НоваяСтрока.ДатаДня);
					НайденныеСтроки = ДатыПоГрафикам.НайтиСтроки(ПараметрыОтбора);
					
					Если НайденныеСтроки.Количество() Тогда
						НайденныеСтроки[0].ЭтоОтклонение = Истина;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			ЧасовПоДню = Результат.ЧасовРаботы;
			
			Если Не ЧасовПоДню = 0 Тогда
				СтрокаДанных = ДанныеГрафика[Месяц(ВыделенныйДень)-1];
				
				НомерДня = День(ВыделенныйДень);
				
				СтрокаДанных["День"+Строка(НомерДня)] = ЧасовПоДню;
				СтрокаДанных["Изменен"+Строка(НомерДня)] = Истина;
			КонецЕсли;
			
			//ГрафикИзменен = Истина;
			
			РассчитатьРабочиеЧасы(СтрокаДанных.НомерМесяца);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаписатьДанныеВРегистр(НомерТекущегоГода);
	
	ВывестиРасписаниеПоГрафику();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРабочиеЧасы(НомерМесяца)
	
	Если НомерМесяца = 0 Тогда Возврат КонецЕсли;
	
	КоличествоДнейВМесяце = День(КонецМесяца(Дата(НомерТекущегоГода,НомерМесяца, 1)));
	
	РабочиеЧасыЗаМесяц = 0;
	
	Для НомерДня = 1 По КоличествоДнейВМесяце Цикл
		ИмяПоляДень = "День" + Строка(НомерДня);
		
		РабочиеЧасыЗаМесяц = РабочиеЧасыЗаМесяц + ДанныеГрафика[НомерМесяца-1][ИмяПоляДень];
	КонецЦикла;
	
	ДанныеГрафика[НомерМесяца-1].ИтогЧасы = РабочиеЧасыЗаМесяц;
	ДанныеГрафика[НомерМесяца-1].ДнейЧасовПредставление = Строка(КоличествоДнейВМесяце) + " / " + Строка(РабочиеЧасыЗаМесяц);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСтрокиИзмененныхДней(ДатаДня)
	
	ПараметрыОтбора = Новый Структура("ДатаДня", ДатаДня);
	СтрокиИзмененныхДней = ИзмененныеДни.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаИзмененныхДней Из СтрокиИзмененныхДней Цикл
		ИзмененныеДни.Удалить(СтрокаИзмененныхДней);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеВРегистр(ГодЗаписи, Отказ = Ложь)
	
	НачатьТранзакцию();
	
	НаборЗаписей = РегистрыСведений.ОтклоненияОтГрафиковРаботыРесурсов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.РесурсПредприятия.Установить(Ресурс);
	НаборЗаписей.Отбор.Год.Установить(ГодЗаписи);
	НаборЗаписей.Записать();
	
	Если Не ДанныеГрафика.Количество() Тогда
		ЗафиксироватьТранзакцию();
		Возврат
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ЭтоОтклонение", Истина);
	
	НайденныеСтроки = ИзмененныеДни.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		ВремяНачалаСек = НайденнаяСтрока.ВремяНачала-Дата(1,1,1);
		ВремяОкончанияСек = НайденнаяСтрока.ВремяОкончания-Дата(1,1,1);
		
		Если ВремяНачалаСек = 0 И ВремяОкончанияСек = 0
			И НайденнаяСтрока.Длительность+НайденнаяСтрока.ЧасовПерерывов < 24 Тогда
			
			ВремяНачалаСек = 28800;
			ВремяОкончанияСек = ВремяНачалаСек+НайденнаяСтрока.Длительность*3600+НайденнаяСтрока.ЧасовПерерывов*3600;
			
			Если ВремяОкончанияСек > 86400 Тогда
				ВремяНачалаСек = ВремяНачалаСек-(ВремяОкончанияСек-86400);
				ВремяОкончанияСек = 0;
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.РесурсПредприятия = Ресурс;
		НоваяЗапись.Год = ГодЗаписи;
		НоваяЗапись.День = НайденнаяСтрока.ДатаДня;
		НоваяЗапись.ВремяНачала = НайденнаяСтрока.ДатаДня+ВремяНачалаСек;
		НоваяЗапись.ВремяОкончания = НайденнаяСтрока.ДатаДня+ВремяОкончанияСек;
		
		Если НачалоДня(НоваяЗапись.ВремяНачала) = НоваяЗапись.ВремяОкончания Тогда
			НоваяЗапись.ВремяОкончания = НоваяЗапись.ВремяОкончания + 86399;
		КонецЕсли;
		
		НоваяЗапись.ЧасыРаботы = НайденнаяСтрока.Длительность;
		НоваяЗапись.ЧасовПерерывов = НайденнаяСтрока.ЧасовПерерывов;
		
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ТекстСообщения = НСтр("ru = 'При записи графика произошла ошибка.
		|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки());
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		ОтменитьТранзакцию();
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТабличнуюЧасть(ИмяТЧПриемник, ТЧИсточник, ГрафикРаботы)
	
	Для Каждого СтрокаТЧ Из ТЧИсточник Цикл
		
		НоваяСтрока = Объект[ИмяТЧПриемник].Добавить();
		НоваяСтрока.ГрафикРаботы = ГрафикРаботы;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеГрафика(ГрафикРаботы, МассивОбработанныхГрафиков)
	
	Если Не МассивОбработанныхГрафиков.Найти(ГрафикРаботы) = Неопределено Тогда Возврат КонецЕсли;
	
	ДополнитьТабличнуюЧасть("ШаблоныПоГоду", ГрафикРаботы.ШаблоныПоГоду, ГрафикРаботы);
	ДополнитьТабличнуюЧасть("РасписаниеРаботы", ГрафикРаботы.РасписаниеРаботы, ГрафикРаботы);
	ДополнитьТабличнуюЧасть("Перерывы", ГрафикРаботы.Перерывы, ГрафикРаботы);
	ДополнитьТабличнуюЧасть("ДополнительныеНастройкиЗаполнения", ГрафикРаботы.ДополнительныеНастройкиЗаполнения, ГрафикРаботы);
	ДополнитьТабличнуюЧасть("ПериодыДополнительныхНастроекЗаполнения", ГрафикРаботы.ПериодыДополнительныхНастроекЗаполнения, ГрафикРаботы);
	ДополнитьТабличнуюЧасть("ПериодыГрафика", ГрафикРаботы.ПериодыГрафика, ГрафикРаботы)
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьГрафикЗавершение(Ответ,Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОбновитьДоКонцаГода = Истина
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		ОбновитьДоКонцаГода = Ложь;
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ГрафикиРаботы.ФормаВыбора", Новый Структура("ТекущаяСтрока", ГрафикДляУстановки), ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьГрафикНаСервере()
	
	Если Не ЗначениеЗаполнено(ГрафикДатаУстановки) ИЛИ Не ЗначениеЗаполнено(ГрафикДляУстановки) Тогда
		Возврат
	КонецЕсли;
	
	НачатьТранзакцию();
	
	ОкончаниеПериодаУдаления = ?(ОбновитьДоКонцаГода, КонецГода(ГрафикДатаУстановки), ГрафикДатаУстановки);
	
	Если ТипЗнч(Ресурс) = Тип("СправочникСсылка.КлючевыеРесурсы") Тогда
		
		ПараметрыОтбора = Новый Структура("РесурсПредприятия", Ресурс);
		Выборка = РегистрыСведений.ГрафикиРаботыРесурсов.Выбрать(ГрафикДатаУстановки, ОкончаниеПериодаУдаления, ПараметрыОтбора);
		
		Пока Выборка.Следующий() Цикл
			Выборка.ПолучитьМенеджерЗаписи().Удалить();
		КонецЦикла;
		
		МенеджерЗаписи = РегистрыСведений.ГрафикиРаботыРесурсов.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.РесурсПредприятия = Ресурс;
		МенеджерЗаписи.Период = ГрафикДатаУстановки;
		МенеджерЗаписи.ГрафикРаботы = ГрафикДляУстановки;
		
	Иначе
		
		ПараметрыОтбора = Новый Структура("СтруктурнаяЕдиница", Ресурс);
		Выборка = РегистрыСведений.ГрафикиРаботыСтруктурныхЕдиниц.Выбрать(ГрафикДатаУстановки, ОкончаниеПериодаУдаления, ПараметрыОтбора);
		
		Пока Выборка.Следующий() Цикл
			Выборка.ПолучитьМенеджерЗаписи().Удалить();
		КонецЦикла;
		
		МенеджерЗаписи = РегистрыСведений.ГрафикиРаботыСтруктурныхЕдиниц.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.СтруктурнаяЕдиница = Ресурс;
		МенеджерЗаписи.Период = ГрафикДатаУстановки;
		МенеджерЗаписи.ГрафикРаботы = ГрафикДляУстановки;
		
	КонецЕсли;
	
	Попытка
		МенеджерЗаписи.Записать();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	ЗаполнитьДанныеРеквизитовПоГрафикам(НомерТекущегоГода);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставлениеПериода()
	
	ВыделенныеОбласти = Элементы.РасписаниеПоГрафику.ПолучитьВыделенныеОбласти();
	МассивДат = Новый Массив;
	СписокГрафиковГиперСсылка.Очистить();
	
	Для каждого ТекОбласть Из ВыделенныеОбласти Цикл
		
		Если ТипЗнч(ТекОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		Для ТекСтрока = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			Для ТекКолонка = ТекОбласть.Лево По ТекОбласть.Право Цикл
				Если ТекКолонка >= 3 И ТекКолонка <= 33 И ТекСтрока >= 2 И ТекСтрока <= 13 Тогда
					Попытка
						ДатаДня = Дата(НомерТекущегоГода, ТекСтрока - 1, ТекКолонка - 2, 0, 0, 0);
						МассивДат.Добавить(ДатаДня);
					Исключение
						Продолжить;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла
		КонецЦикла
	КонецЦикла;
	
	ПредставлениеГрафика = ПредставлениеГрафика(МассивДат);
	
	Элементы.УстановитьГрафик.Доступность = ?(МассивДат.Количество() = 1, Истина, Ложь);
	
	ДоступностьКнопок = ?(МассивДат.Количество(), Истина, Ложь);
	
	Элементы.ПолеПредставлениеГрафика.Гиперссылка = ДоступностьКнопок;
	
	Элементы.ГруппаПодменю.Доступность = ДоступностьКнопок;
	Элементы.ГруппаДействия.Доступность = ДоступностьКнопок;
	Элементы.РасписаниеПоГрафикуКонтекстноеМенюГруппаИзменить.Доступность = ДоступностьКнопок;
	
КонецПроцедуры

&НаКлиенте
Функция ПредставлениеГрафика(МассивДат)
	
	Если Не МассивДат.Количество() Тогда
		Возврат "<выберите ячейку календаря>"
	КонецЕсли;
	
	СтрокаПредставления = "";
	
	Для Каждого ЭлементСписка Из СписокГрафиков Цикл
		
		ПараметрыОтбора = Новый Структура("ГрафикРаботы", ЭлементСписка.Значение);
		СтрокиПоГрафику = ДатыПоГрафикам.НайтиСтроки(ПараметрыОтбора);
		
		НачалоИнтервала = "";
		ОкончаниеИнтервала = "";
		ПредставлениеИнтервала = "";
		
		ЕстьИнтервалПоГрафику = Ложь;
		
		Для Каждого СтрокаПоГрафику Из СтрокиПоГрафику Цикл
			
			Если Не МассивДат.Найти(СтрокаПоГрафику.ДатаДня) = Неопределено Тогда
				
				Если Не ЗначениеЗаполнено(НачалоИнтервала) Тогда
					НачалоИнтервала = СтрокаПоГрафику.ДатаДня;
				КонецЕсли;
				
				ОкончаниеИнтервала = СтрокаПоГрафику.ДатаДня;
				
				ЕстьИнтервалПоГрафику = Истина;
				
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьИнтервалПоГрафику Тогда Продолжить КонецЕсли;
		
		СписокГрафиковГиперСсылка.Добавить(ЭлементСписка.Значение);
		
		Если НачалоИнтервала = ОкончаниеИнтервала Тогда
			ПредставлениеИнтервала = " ("+Формат(НачалоИнтервала,"ДФ=dd.MM.yyyy")+").";
		Иначе
			ПредставлениеИнтервала = " ("+Формат(НачалоИнтервала,"ДФ=dd.MM.yyyy")+":"+Формат(ОкончаниеИнтервала,"ДФ=dd.MM.yyyy")+");";
		КонецЕсли;
		
		
		СтрокаПредставления = СтрокаПредставления + Строка(ЭлементСписка.Значение)+ПредставлениеИнтервала;
		
	КонецЦикла;
	
	Возврат ?(Не ЗначениеЗаполнено(СтрокаПредставления), "<на выбранную дату график отсутствует>", СтрокаПредставления);
	
КонецФункции

&НаКлиенте
Процедура ПослеВыбораГрафика(ВыбранныйЭлемент, СписокПараметров) Экспорт
	Если Не ВыбранныйЭлемент = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ВыбранныйЭлемент.Значение);
		
		ОткрытьФорму("Справочник.ГрафикиРаботы.ФормаОбъекта", ПараметрыФормы,ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОчиститьОтклоненияНаСервере()
	
	НаборЗаписей = РегистрыСведений.ОтклоненияОтГрафиковРаботыРесурсов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Год.Установить(НомерТекущегоГода);
	НаборЗаписей.Отбор.РесурсПредприятия.Установить(Ресурс);
	НаборЗаписей.Записать();
	
	ЗаполнитьДанныеРеквизитовПоГрафикам(НомерТекущегоГода);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьОтклоненияЗаПериодНаСервере(МассивДат)
	
	НачатьТранзакцию();
	
	Для Каждого ДатаДня Из МассивДат Цикл
		
		НаборЗаписей = РегистрыСведений.ОтклоненияОтГрафиковРаботыРесурсов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Год.Установить(НомерТекущегоГода);
		НаборЗаписей.Отбор.РесурсПредприятия.Установить(Ресурс);
		НаборЗаписей.Отбор.День.Установить(ДатаДня);
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	ЗаполнитьДанныеРеквизитовПоГрафикам(НомерТекущегоГода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзМеню(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда Возврат КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "Редактировать" Тогда
		ИзменитьРасписаниеКлиент();
	ИначеЕсли ВыбранныйЭлемент.Значение = "Очистить" Тогда
		ОчиститьРасписаниеКлиентИнтерактивно();
	ИначеЕсли ВыбранныйЭлемент.Значение = "Удалить отклонения" Тогда
		ОчиститьОтклоненияЗаПериодКлиент();
	ИначеЕсли ВыбранныйЭлемент.Значение = "Удалить все отклонения" Тогда
		ОчиститьОтклоненияНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтклоненияЗаПериодКлиент()
	
	ВыделенныеОбласти = Элементы.РасписаниеПоГрафику.ПолучитьВыделенныеОбласти();
	
	Для каждого ТекОбласть Из ВыделенныеОбласти Цикл
		
		Если ТипЗнч(ТекОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		
		МассивДат = Новый Массив;
		
		Для ТекСтрока = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			Для ТекКолонка = ТекОбласть.Лево По ТекОбласть.Право Цикл
				Если ТекКолонка >= 3 И ТекКолонка <= 33 И ТекСтрока >= 2 И ТекСтрока <= 13 Тогда
					Попытка
						ДатаДня = Дата(НомерТекущегоГода, ТекСтрока - 1, ТекКолонка - 2, 0, 0, 0);
						
						НомерДня = День(ДатаДня);
						НомерМесяца = Месяц(ДатаДня);
						
						ПараметрыОтбора = Новый Структура("НомерМесяца",НомерМесяца);
						СтрокиДанных = ДанныеГрафика.НайтиСтроки(ПараметрыОтбора);
						
						Если Не СтрокиДанных.Количество() Тогда Возврат КонецЕсли;
						
						СтрокаДанных = СтрокиДанных[0];
						Изменен = СтрокаДанных["Изменен"+НомерДня];
						
						Если Не Изменен Тогда Продолжить КонецЕсли;
						
					Исключение
						Продолжить;
					КонецПопытки;
					
					МассивДат.Добавить(ДатаДня);
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Если МассивДат.Количество() Тогда
		ОчиститьОтклоненияЗаПериодНаСервере(МассивДат);
	КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРасписаниеКлиентИнтерактивно()
	ВыделенныеОбласти = Элементы.РасписаниеПоГрафику.ПолучитьВыделенныеОбласти();
	
	ЕстьОбработанныеОбласти = Ложь;
	
	Для каждого ТекОбласть Из ВыделенныеОбласти Цикл
		
		Если ТипЗнч(ТекОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		
		Для ТекСтрока = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			Для ТекКолонка = ТекОбласть.Лево По ТекОбласть.Право Цикл
				Если ТекКолонка >= 3 И ТекКолонка <= 33 И ТекСтрока >= 2 И ТекСтрока <= 13 Тогда
					Попытка
						ДатаДня = Дата(НомерТекущегоГода, ТекСтрока - 1, ТекКолонка - 2, 0, 0, 0);
					Исключение
						Продолжить;
					КонецПопытки;
					
					НомерДня = День(ДатаДня);
					НомерМесяца = Месяц(ДатаДня);
					
					СтрокаДанных = ДанныеГрафика[Месяц(ДатаДня)-1];
					
					Если СтрокаДанных["День"+Строка(НомерДня)] = 0 Тогда Продолжить КонецЕсли;
					
					ОчиститьСтрокиИзмененныхДней(ДатаДня);
					
					СтрокаДанных["День"+Строка(НомерДня)] = 0;
					СтрокаДанных["Изменен"+Строка(НомерДня)] = Истина;
					
					НоваяСтрока = ИзмененныеДни.Добавить();
					НоваяСтрока.Длительность = 0;
					НоваяСтрока.ДатаДня = ДатаДня;
					НоваяСтрока.ЭтоОтклонение = Истина;
					
					ПараметрыОтбора = Новый Структура("ДатаДня", НоваяСтрока.ДатаДня);
					НайденныеСтроки = ДатыПоГрафикам.НайтиСтроки(ПараметрыОтбора);
					
					Если НайденныеСтроки.Количество() Тогда
						НайденныеСтроки[0].ЭтоОтклонение = Истина;
					КонецЕсли;
					
					ЕстьОбработанныеОбласти = Истина;
					
					РассчитатьРабочиеЧасы(НомерМесяца);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЕстьОбработанныеОбласти Тогда
		ЗаписатьДанныеВРегистр(НомерТекущегоГода);
		ВывестиРасписаниеПоГрафику();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеКлиент()
	
	ВыделенныеОбласти = Элементы.РасписаниеПоГрафику.ПолучитьВыделенныеОбласти();
	
	Если ВыделенныеОбласти.Количество() = 1 
		И ВыделенныеОбласти[0].Верх = ВыделенныеОбласти[0].Низ И ВыделенныеОбласти[0].Лево = ВыделенныеОбласти[0].Право Тогда
		
		ТекОбласть = ВыделенныеОбласти[0];
		
		Если ТипЗнч(ТекОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			ДатаДня = Дата(НомерТекущегоГода, ТекОбласть.Низ-1, ТекОбласть.Право-2, 0, 0, 0);
		Исключение
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Выделите день или период календаря в таблице.'");
			Сообщение.Сообщить();
			
			Возврат;
		КонецПопытки;
		
		НомерДня = День(ДатаДня);
		НомерМесяца = Месяц(ДатаДня);
		
		ПараметрыОтбора = Новый Структура("НомерМесяца",НомерМесяца);
		
		СтрокиДанных = ДанныеГрафика.НайтиСтроки(ПараметрыОтбора);
		
		Если Не СтрокиДанных.Количество() Тогда Возврат КонецЕсли;
		
		СтрокаДанных = СтрокиДанных[0];
		
		НомерДняЦикла = СтрокаДанных["НомерДняЦикла"+НомерДня];
		Изменен = СтрокаДанных["Изменен"+НомерДня];
		ЧасовРаботы = СтрокаДанных["День"+НомерДня];
		
		ДопПараметрыОповещения = Новый Структура("НомерДня", НомерДня);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗафиксироватьИзмененныйПериодОдинДень",
		ЭтотОбъект,
		ДопПараметрыОповещения);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ДатаДня", ДатаДня);
		ПараметрыОткрытия.Вставить("НомерДняЦикла", НомерДняЦикла);
		
		ГрафикРаботы = ПустаяСсылкаНаГрафик;
		
		Для Каждого СтрокаГрафикЗаГод Из ГрафикиРаботыЗаГод Цикл
			
			Если ДатаДня>=СтрокаГрафикЗаГод.Период Тогда
				ГрафикРаботы = СтрокаГрафикЗаГод.ГрафикРаботы;
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыОткрытия.Вставить("Ссылка", ГрафикРаботы);
		ПараметрыОткрытия.Вставить("Изменен", Изменен);
		ПараметрыОткрытия.Вставить("ИзмененныеДни", ИзмененныеДни);
		ПараметрыОткрытия.Вставить("ЧасовРаботы", ЧасовРаботы);
		ПараметрыОткрытия.Вставить("ВыбранИнтервал", Ложь);
		
		ОткрытьФорму("Справочник.ГрафикиРаботы.Форма.ФормаИзменитьРасписание", ПараметрыОткрытия,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		Возврат
	КонецЕсли;
	
	СписокДней = Новый СписокЗначений;
	СоответствиеПереданныхДатГрафикам = Новый Соответствие();
	ЧасовРаботы = 0;
	
	Для каждого ТекОбласть Из ВыделенныеОбласти Цикл
		
		Для ТекСтрока = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			Для ТекКолонка = ТекОбласть.Лево По ТекОбласть.Право Цикл
				Если ТекКолонка >= 3 И ТекКолонка <= 33 И ТекСтрока >= 2 И ТекСтрока <= 13 Тогда
					Попытка
						ДатаДня = Дата(НомерТекущегоГода, ТекСтрока - 1, ТекКолонка - 2, 0, 0, 0);
					Исключение
						Продолжить;
					КонецПопытки;
					
					НомерДня = День(ДатаДня);
					НомерМесяца = Месяц(ДатаДня);
					
					ПараметрыОтбора = Новый Структура("НомерМесяца",НомерМесяца);
					
					СтрокиДанных = ДанныеГрафика.НайтиСтроки(ПараметрыОтбора);
					СтрокаДанных = СтрокиДанных[0];
					
					Изменен = СтрокаДанных["Изменен"+НомерДня];
					НомерДняЦикла = СтрокаДанных["НомерДняЦикла"+НомерДня];
					
					СписокДней.Добавить(ДатаДня, Строка(НомерДняЦикла), Изменен);
					ЧасовРаботы = СтрокаДанных["День"+НомерДня];
					
					ПараметрыОтбораДатГрафиков = Новый Структура("ДатаДня",ДатаДня);
					
					СтрокиСоответствияДатГрафикам = ДатыПоГрафикам.НайтиСтроки(ПараметрыОтбораДатГрафиков);
					
					Если СтрокиСоответствияДатГрафикам.Количество() Тогда
						
						СоответствиеПереданныхДатГрафикам.Вставить(ДатаДня, СтрокиСоответствияДатГрафикам[0].ГрафикРаботы);
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не СписокДней.Количество() Тогда Возврат КонецЕсли;
	
	ДопПараметрыОповещения = Новый Структура("СписокДней", СписокДней);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
	"ЗафиксироватьИзмененныйПериодВыделенныеДни",
	ЭтотОбъект,
	ДопПараметрыОповещения);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДатаДня", Дата(1,1,1));
	ПараметрыОткрытия.Вставить("Объект", Объект);
	ПараметрыОткрытия.Вставить("НомерДняЦикла", 0);
	ПараметрыОткрытия.Вставить("Изменен", Ложь);
	ПараметрыОткрытия.Вставить("ИзмененныеДни", ИзмененныеДни);
	ПараметрыОткрытия.Вставить("ЧасовРаботы", ЧасовРаботы);
	ПараметрыОткрытия.Вставить("ВыбранИнтервал", Истина);
	ПараметрыОткрытия.Вставить("СписокДней", СписокДней);
	ПараметрыОткрытия.Вставить("СоответствиеПереданныхДатГрафикам", СоответствиеПереданныхДатГрафикам);
	
	ОткрытьФорму("Справочник.ГрафикиРаботы.Форма.ФормаИзменитьРасписание", ПараметрыОткрытия,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти










