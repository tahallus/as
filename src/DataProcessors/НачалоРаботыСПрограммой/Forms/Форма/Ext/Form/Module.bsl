
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДобавитьОрганизацию(Ложь, Справочники.Организации.ОсновнаяОрганизация);
	
	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("Пользователь", Пользователи.АвторизованныйПользователь());
	КэшЗначений.Вставить("РазрешитьЗакрытие", Ложь);
	КэшЗначений.Вставить("ДополнительныйПараметр", НачалоРаботыСПрограммойСервер.ЗначениеДополнительногоПараметра());
	КэшЗначений.Вставить("Доходы", Перечисления.ВидыОбъектовНалогообложения.Доходы);
	КэшЗначений.Вставить("ДоходыМинусРасходы", Перечисления.ВидыОбъектовНалогообложения.ДоходыМинусРасходы);
	КэшЗначений.Вставить("ЮрЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	КэшЗначений.Вставить("ФизЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	КэшЗначений.Вставить("ТекущийИндексОрганизации", Неопределено);
	
	КэшЗначений.Вставить("ПараметрыНачалаРаботы", Новый Структура);
	КэшЗначений.ПараметрыНачалаРаботы.Вставить("РазделениеВключено", ОбщегоНазначения.РазделениеВключено());
	КэшЗначений.ПараметрыНачалаРаботы.Вставить("ВерсияДанныхОсновнойКонфигурации", Метаданные.Версия);
	
	ЗаполнитьДанныеПользователя();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПользовательЛокально", "Видимость", НЕ ОбщегоНазначения.РазделениеВключено());
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПользовательСервис", "Видимость", ОбщегоНазначения.РазделениеВключено());
	
	ЭтоФизическоеЛицо = (Справочники.Организации.ОсновнаяОрганизация.ЮридическоеФизическоеЛицо = КэшЗначений.ФизЛицо);
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтступСотрудники1", "Видимость", Ложь);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтступСотрудники1", "Видимость", ЭтоФизическоеЛицо);
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИПИспользуетТрудНаемныхРаботников1", "Видимость", ЭтоФизическоеЛицо);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЕстьПатент1", "Доступность", ЭтоФизическоеЛицо);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНавигация", "Видимость", НЕ СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации());
	
	Элементы.ПодключениеИПП.Видимость = ИнтернетПоддержкаПользователей.ДоступноПодключениеИнтернетПоддержки();
	
	НастроитьФормуМобильныйКлиент();
	НастроитьФормуМобильноеПриложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		
		СтрокаОрганизации = СтрокаОрганизацииПоИндексуНаКлиенте(КэшЗначений.ТекущийИндексОрганизации);
		СтрокаОрганизации.ФайлЛоготип = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
		
		ОбновитьИзображениеЛоготипа(СтрокаОрганизации);
		
		КэшЗначений.ТекущийИндексОрганизации = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы <> Истина Тогда
		
		Если НЕ КэшЗначений.РазрешитьЗакрытие Тогда
			
			ТекстПредупреждения = НСтр("ru ='Заполните, пожалуйста, обязательные поля.
				|Работа программы без указанных сведений затруднительна.'");
				
			ПоказатьПредупреждение(, ТекстПредупреждения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ЕстьУСНПриИзменении(Элемент)
	
	Индекс = ИндексПоИмениЭлемента(Элемент.Имя, "ЕстьУСН");
	ЗначениеЕстьУСН = ЭтотОбъект["ЕстьУСН" + Индекс];
	ЗначениеСтавкаНалога = 6;
	ЗначениеНалогообложение = КэшЗначений.Доходы;
	
	ЗаписатьЗначениеОрганизации("ЕстьУСН", ЗначениеЕстьУСН, Индекс);
	ЗаписатьЗначениеОрганизации("СтавкаНалога", ЗначениеСтавкаНалога, Индекс, Истина);
	ЗаписатьЗначениеОрганизации("ВидыОбъектовНалогообложения", ЗначениеНалогообложение, Индекс);
	
	ЭтотОбъект["СтавкаНалога" + Индекс] = ЗначениеСтавкаНалога;
	ЭтотОбъект["ВидыОбъектовНалогообложения" + Индекс] = ЗначениеНалогообложение;
	
	ЭтоПредприниматель = (ЭтотОбъект["ЮридическоеФизическоеЛицо" + Индекс] = КэшЗначений.ФизЛицо);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНалогообложение" + Индекс, "Видимость", ЗначениеЕстьУСН И ЭтоПредприниматель);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСотрудники" + Индекс, "Видимость", ЗначениеЕстьУСН);
	
КонецПроцедуры 

&НаКлиенте
Процедура ЕстьПатентПриИзменении(Элемент)
	
	Индекс = ИндексПоИмениЭлемента(Элемент.Имя, "ЕстьПатент");
	ЗначениеЕстьПатент = ЭтотОбъект["ЕстьПатент" + Индекс];
	ЗаписатьЗначениеОрганизации("ЕстьПатент", ЗначениеЕстьПатент, Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрФизЛицоПриИзменении(Элемент)
	
	// Внимание! 
	// При изм УСН или ЕНВД редактируется видимость группы элементов,
	// а при изменении ЮР/ФИЗ лица элементов управления.
	
	Индекс = ИндексПоИмениЭлемента(Элемент.Имя, "ЮридическоеФизическоеЛицо");
	ЗначениеЮридическоеФизическоеЛицо = ЭтотОбъект["ЮридическоеФизическоеЛицо" + Индекс];
	ЗначениеЕстьУСН = ЭтотОбъект["ЕстьУСН" + Индекс];
	
	ЗаписатьЗначениеОрганизацииЮрФизЛицо(ЗначениеЮридическоеФизическоеЛицо, ЗначениеЕстьУСН, Индекс);
	
	ЭтотОбъект["ИНН" + Индекс] = "";
	ЗаписатьЗначениеОрганизации("ИНН", "", Индекс);
	
	ЗаписатьНаименованиеПлательщикаПриПеречисленииНалогов(Индекс);
	Элементы["СистемаНалогообложения" + Индекс].СписокВыбора.Очистить();
	Элементы["СистемаНалогообложения" + Индекс].СписокВыбора.Добавить(0,НСтр("ru = 'Общая'"));
	Элементы["СистемаНалогообложения" + Индекс].СписокВыбора.Добавить(1,НСтр("ru = 'Упрощенная'"));
	Если  Не ЗначениеЮридическоеФизическоеЛицо = КэшЗначений.ЮрЛицо Тогда
		Элементы["СистемаНалогообложения" + Индекс].СписокВыбора.Добавить(3,НСтр("ru = 'Только патент'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Индекс = ИндексПоИмениЭлемента(Элемент.Имя, "Наименование");
	ЗначениеНаименование = ЭтотОбъект["Наименование" + Индекс];
	
	ЗаписатьЗначениеОрганизации("Наименование", ЗначениеНаименование, Индекс);
	ЗаписатьЗначениеОрганизации("НаименованиеПолное", ЗначениеНаименование, Индекс);
	
	ЗаписатьНаименованиеПлательщикаПриПеречисленииНалогов(Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ИПФамилияПриИзменении(Элемент)
	
	Индекс = ИндексПоИмениЭлемента(Элемент.Имя, "ИП_Фамилия");
	
	СтруктураНазваний = СформироватьНаименованиеИП(Индекс);
	
	ЗаписатьЗначениеОрганизации("Фамилия", ЭтотОбъект["ИП_Фамилия" + Индекс], Индекс);
	ЗаписатьЗначениеОрганизации("Наименование", СтруктураНазваний.Наименование, Индекс);
	ЗаписатьЗначениеОрганизации("НаименованиеПолное", СтруктураНазваний.НаименованиеПолное, Индекс);
	
	ЭтотОбъект["Наименование" + Индекс] = СтруктураНазваний.Наименование;
	
	ЗаписатьНаименованиеПлательщикаПриПеречисленииНалогов(Индекс)
	
КонецПроцедуры

&НаКлиенте
Процедура ИПИмяПриИзменении(Элемент)
	
	Индекс = ИндексПоИмениЭлемента(Элемент.Имя, "ИП_Имя");
	
	СтруктураНазваний = СформироватьНаименованиеИП(Индекс);
	
	ЗаписатьЗначениеОрганизации("Имя", ЭтотОбъект["ИП_Имя" + Индекс], Индекс);
	ЗаписатьЗначениеОрганизации("Наименование", СтруктураНазваний.Наименование, Индекс);
	ЗаписатьЗначениеОрганизации("НаименованиеПолное", СтруктураНазваний.НаименованиеПолное, Индекс);
	
	ЭтотОбъект["Наименование" + Индекс] = СтруктураНазваний.Наименование;
	
	ЗаписатьНаименованиеПлательщикаПриПеречисленииНалогов(Индекс)
	
КонецПроцедуры

&НаКлиенте
Процедура ИПОтчествоПриИзменении(Элемент)
	
	Индекс = ИндексПоИмениЭлемента(Элемент.Имя, "ИП_Отчество");
	
	СтруктураНазваний = СформироватьНаименованиеИП(Индекс);
	
	ЗаписатьЗначениеОрганизации("Отчество", ЭтотОбъект["ИП_Отчество" + Индекс], Индекс);
	ЗаписатьЗначениеОрганизации("Наименование", СтруктураНазваний.Наименование, Индекс);
	ЗаписатьЗначениеОрганизации("НаименованиеПолное", СтруктураНазваний.НаименованиеПолное, Индекс);
	
	ЭтотОбъект["Наименование" + Индекс] = СтруктураНазваний.Наименование;
	
	ЗаписатьНаименованиеПлательщикаПриПеречисленииНалогов(Индекс)
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеПриИзменении(Элемент)
	
	Индекс = ИндексПоИмениЭлемента(Элемент.Имя, "ВидыОбъектовНалогообложения");
	ЗначениеНалогообложение = ЭтотОбъект["ВидыОбъектовНалогообложения" + Индекс];
	
	ЗаписатьЗначениеОрганизации("ВидыОбъектовНалогообложения", ЗначениеНалогообложение, Индекс);
	
	ЗначениеСтавкаНалога = ?(ЗначениеНалогообложение = КэшЗначений.Доходы, 6, 15);
	ЭтотОбъект["СтавкаНалога" + Индекс] = ЗначениеСтавкаНалога;
	ЗаписатьЗначениеОрганизации("СтавкаНалога", ЗначениеСтавкаНалога, Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаПриИзменении(Элемент)
	
	Индекс = ИндексПоИмениЭлемента(Элемент.Имя, "СтавкаНалога");
	ЗначениеСтавкаНалога = ЭтотОбъект["СтавкаНалога" + Индекс];
	
	ЗаписатьЗначениеОрганизации("СтавкаНалога", ЗначениеСтавкаНалога, Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьСотрудникиПриИзменении(Элемент)
	
	Индекс = ИндексПоИмениЭлемента(Элемент.Имя, "ИПИспользуетТрудНаемныхРаботников");
	ЗначениеЕстьСотрудники = ЭтотОбъект["ИПИспользуетТрудНаемныхРаботников" + Индекс];
	
	ЗаписатьЗначениеОрганизации("ИПИспользуетТрудНаемныхРаботников", ЗначениеЕстьСотрудники, Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЛоготипаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИндексОрганизации = ИндексПоИмениЭлемента(Элемент.Имя, "АдресЛоготипа");
	СтрокаОрганизации = СтрокаОрганизацииПоИндексуНаКлиенте(ИндексОрганизации);
	ЗначениеФайлЛоготипа = СтрокаОрганизации.ФайлЛоготип;
	
	Если ЗначениеЗаполнено(ЗначениеФайлЛоготипа) Тогда
		
		ПросмотретьПрисоединенныйФайл(ЗначениеФайлЛоготипа);
		
	Иначе
		
		ДобавитьИзображениеНаКлиенте(ИндексОрганизации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	Перем Ошибки;
	
	ИндексОрганизации = ИндексПоИмениЭлемента(Элемент.Имя, "ИНН");
	
	ЗначениеИНН = ЭтотОбъект["ИНН" + ИндексОрганизации];
	ЗаписатьЗначениеОрганизации("ИНН", ЗначениеИНН, ИндексОрганизации);
	ЗначениеЕстьУСН = ЭтотОбъект["ЕстьУСН" + ИндексОрганизации];
	
	ЗначениеЮрФизЛицо = ?(СтрДлина(ЗначениеИНН) = 12, КэшЗначений.ФизЛицо, КэшЗначений.ЮрЛицо);
	ЭтотОбъект["ЮридическоеФизическоеЛицо" + ИндексОрганизации] = ЗначениеЮрФизЛицо;
	
	ЗаписатьЗначениеОрганизацииЮрФизЛицо(ЗначениеЮрФизЛицо, ЗначениеЕстьУСН, ИндексОрганизации);
	Элементы["СистемаНалогообложения" + ИндексОрганизации].СписокВыбора.Очистить();
	Элементы["СистемаНалогообложения" + ИндексОрганизации].СписокВыбора.Добавить(0,НСтр("ru = 'Общая'"));
	Элементы["СистемаНалогообложения" + ИндексОрганизации].СписокВыбора.Добавить(1,НСтр("ru = 'Упрощенная'"));
	Если  Не ЗначениеЮрФизЛицо = КэшЗначений.ЮрЛицо Тогда
		Элементы["СистемаНалогообложения" + ИндексОрганизации].СписокВыбора.Добавить(3,НСтр("ru = 'Только патент'"));
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////
	// Необходимо заполнить след реквизиты:
	//
	// Наименование +
	// НаименованиеПолное -
	// ЮридическоеФизическоеЛицо +
	// ИНН +
	// КПП -						// Юр
	// ОГРН -
	// КодОКВЭД -
	// АдресЮридический -
	// АдресФактический -
	// Телефон -
	//
	// СвидетельствоСерияНомер -	// ФЗ
	// СвидетельствоДатаВыдачи- 	// ФЗ
	// Фамилия -					// ФЗ
	// Имя -						// ФЗ
	// Отчество -					// ФЗ
	// Пол -						// ФЗ
	//
	// КодНалоговогоОргана -
	// КодНалоговогоОрганаПолучателя -
	// РегистрационныйНомерПФР -	// Юр
	// РегистрационныйНомерПФР_ИП -	// ФЗ
	// КодОрганаПФР -
	// КодОрганаФСС -
	// НаименованиеТерриториальногоОрганаФСС -
	// РегистрационныйНомерФСС -
	// НаименованиеПлательщикаПриПеречисленииНалогов -
	//
	// ЕстьУСН +
	// ИПИспользуетТрудНаемныхРаботников +
	// Логотип +
	// СтавкаНДСПоУмолчанию +
	
	ДанныеГосРеестра = Новый Структура;
	ЗаполнитьРеквизитыПоИНННаСервере(ЗначениеИНН, ДанныеГосРеестра, ИндексОрганизации, Ошибки);
	
	// Стартовое окно не должно сообщать о существующих ошибках в учетных данных. Цель быстро собрать сведения, 
	// если они ошибочные - продолжить работу.
	//
	// ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки); 
	
	Если ДанныеГосРеестра.Количество() > 0 Тогда
		
		ДанныеСтрокиОрганизации = СтрокаОрганизацииПоИндексуНаКлиенте(ИндексОрганизации);
		
		Если ДанныеГосРеестра.Свойство("Наименование") 
			И НЕ ПустаяСтрока(ДанныеГосРеестра.Наименование) Тогда
			
			ЭтотОбъект["Наименование" + ИндексОрганизации] = ДанныеГосРеестра.Наименование;
			ДанныеСтрокиОрганизации.Наименование = ДанныеГосРеестра.Наименование;
			
		КонецЕсли;
		
		Если ДанныеГосРеестра.Свойство("КПП") Тогда
			
			ДанныеСтрокиОрганизации.КПП = ДанныеГосРеестра.КПП;
			
		КонецЕсли;
		
		ДанныеСтрокиОрганизации.НаименованиеПолное = ДанныеГосРеестра.НаименованиеПолное;
		ДанныеСтрокиОрганизации.ОГРН = ДанныеГосРеестра.ОГРН;
		ДанныеСтрокиОрганизации.КодОКВЭД = ДанныеГосРеестра.КодОКВЭД;
		ДанныеСтрокиОрганизации.АдресЮридический = ДанныеГосРеестра.ЮридическийАдрес;
		ДанныеСтрокиОрганизации.АдресФактический = ДанныеГосРеестра.ЮридическийАдрес;
		ДанныеСтрокиОрганизации.Телефон = ДанныеГосРеестра.Телефон;
		
		Если НЕ ДанныеГосРеестра.ЭтоЮрЛицо Тогда
			
			ДанныеСтрокиОрганизации.СвидетельствоСерияНомер = ДанныеГосРеестра.СвидетельствоСерияНомер;
			ДанныеСтрокиОрганизации.СвидетельствоДатаВыдачи = ДанныеГосРеестра.СвидетельствоДатаВыдачи;
			
			ДанныеСтрокиОрганизации.Фамилия = ДанныеГосРеестра.Фамилия;
			ЭтотОбъект["ИП_Фамилия" + ИндексОрганизации] = ДанныеГосРеестра.Фамилия;
			
			ДанныеСтрокиОрганизации.Имя = ДанныеГосРеестра.Имя;
			ЭтотОбъект["ИП_Имя" + ИндексОрганизации] = ДанныеГосРеестра.Имя;
			
			ДанныеСтрокиОрганизации.Отчество = ДанныеГосРеестра.Отчество;
			ЭтотОбъект["ИП_Отчество" + ИндексОрганизации] = ДанныеГосРеестра.Отчество;
			
			ДанныеСтрокиОрганизации.Пол = ДанныеГосРеестра.Пол;
			
		КонецЕсли;
		
		ДанныеСтрокиОрганизации.КодНалоговогоОргана = ДанныеГосРеестра.КодНалоговогоОрганаПолучателя;
		ДанныеСтрокиОрганизации.КодНалоговогоОрганаПолучателя = ДанныеГосРеестра.КодНалоговогоОрганаПолучателя;
		
		Если ДанныеГосРеестра.Свойство("РегистрацияВПенсионномФонде")
			И ЗначениеЗаполнено(ДанныеГосРеестра.РегистрацияВПенсионномФонде) Тогда
			
			ДанныеСтрокиОрганизации.КодОрганаПФР = ДанныеГосРеестра.РегистрацияВПенсионномФонде.КодОрганаПФР;
			
			Если ДанныеГосРеестра.ЭтоЮрЛицо Тогда
				
				ДанныеСтрокиОрганизации.РегистрационныйНомерПФР = ДанныеГосРеестра.РегистрационныйНомерПФР;
				
			Иначе
				
				ДанныеСтрокиОрганизации.РегистрационныйНомерПФР_ИП = ДанныеГосРеестра.РегистрационныйНомерПФР_ИП;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеСтрокиОрганизации.КодОрганаФСС = ДанныеГосРеестра.КодОрганаФСС;
		ДанныеСтрокиОрганизации.НаименованиеТерриториальногоОрганаФСС = ДанныеГосРеестра.НаименованиеТерриториальногоОрганаФСС;
		ДанныеСтрокиОрганизации.РегистрационныйНомерФСС = ДанныеГосРеестра.РегистрационныйНомерФСС;
		ДанныеСтрокиОрганизации.НаименованиеПлательщикаПриПеречисленииНалогов = ДанныеГосРеестра.НаименованиеПлательщикаПриПеречисленииНалогов;
		
	КонецЕсли;
	
	ЗаписатьНаименованиеПлательщикаПриПеречисленииНалогов(ИндексОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПодтверждениеПриИзменении(Элемент)
	
	Если ПользовательПароль <> ПользовательПарольПодтверждение Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru ='Не совпадают пароли'"), , "ПользовательПарольПодтверждение");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаВосстановлениеПароляНажатие(Элемент)
	
	ИнтернетПоддержкаПользователейКлиент.ОткрытьСтраницуВосстановленияПароля();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаРегистрацияНажатие(Элемент)
	
	ИнтернетПоддержкаПользователейКлиент.ОткрытьСтраницуРегистрацииНовогоПользователя();
	
КонецПроцедуры


&НаКлиенте
Процедура СистемаНалогообложенияПриИзменении(Элемент)
	
	Индекс = ИндексПоИмениЭлемента(Элемент.Имя, "СистемаНалогообложения");
	ЗначениеСистемаНалогообложения = ЭтотОбъект["СистемаНалогообложения" + Индекс];
	ЗаписатьЗначениеОрганизации("СистемаНалогообложения", ЗначениеСистемаНалогообложения, Индекс);
	
	
	Если ЗначениеСистемаНалогообложения = 0 Тогда
		ЗаписатьЗначениеОрганизации("ЕстьУСН", Ложь, Индекс);
		ЭтотОбъект["ЕстьУСН" + Индекс] = Ложь;
		ЭтотОбъект["ЕстьПатент" + Индекс] = Ложь;
		ЗаписатьЗначениеОрганизации("ЕстьПатент", Ложь, Индекс);
	ИначеЕсли ЗначениеСистемаНалогообложения = 1 Тогда
		ЭтотОбъект["ЕстьУСН" + Индекс] = Истина;
		ЗаписатьЗначениеОрганизации("ЕстьУСН", Истина, Индекс);
		ЗначениеСтавкаНалога = 6;
		ЗначениеНалогообложение = КэшЗначений.Доходы;
		ЗаписатьЗначениеОрганизации("СтавкаНалога", ЗначениеСтавкаНалога, Индекс, Истина);
		ЗаписатьЗначениеОрганизации("ВидыОбъектовНалогообложения", ЗначениеНалогообложение, Индекс);
		
		ЭтотОбъект["СтавкаНалога" + Индекс] = ЗначениеСтавкаНалога;
		ЭтотОбъект["ВидыОбъектовНалогообложения" + Индекс] = ЗначениеНалогообложение;
		
		ЭтотОбъект["ЕстьПатент" + Индекс] = Ложь;
		ЗаписатьЗначениеОрганизации("ЕстьПатент", Ложь, Индекс);
	ИначеЕсли ЗначениеСистемаНалогообложения = 2 Тогда
		ЭтотОбъект["ЕстьПатент" + Индекс] = Ложь;
		ЗаписатьЗначениеОрганизации("ЕстьПатент", Ложь, Индекс);
		ЗаписатьЗначениеОрганизации("ЕстьУСН", Ложь, Индекс);
		ЭтотОбъект["ЕстьУСН" + Индекс] = Ложь;
	ИначеЕсли ЗначениеСистемаНалогообложения = 3 Тогда
		ЭтотОбъект["ЕстьПатент" + Индекс] = Истина;
		ЗаписатьЗначениеОрганизации("ЕстьПатент", Истина, Индекс);
		ЗаписатьЗначениеОрганизации("ЕстьУСН", Ложь, Индекс);
		ЭтотОбъект["ЕстьУСН" + Индекс] = Ложь;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЕстьПатент" + Индекс, "Видимость", ЗначениеСистемаНалогообложения < 2);
	ЭтоПредприниматель = (ЭтотОбъект["ЮридическоеФизическоеЛицо" + Индекс] = КэшЗначений.ФизЛицо);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНалогообложение" + Индекс, "Видимость", ЭтотОбъект["ЕстьУСН" + Индекс] И ЭтоПредприниматель);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСотрудники" + Индекс, "Видимость", ЭтотОбъект["ЕстьУСН" + Индекс]);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура НачатьРаботуСПрограммой(Команда)
	Перем Ошибки;
	
	ДополнительныйПараметр = "";
	Если ВРЕГ(ПользовательИмя) = КэшЗначений.ДополнительныйПараметр Тогда
		
		ДополнительныйПараметр = КэшЗначений.ДополнительныйПараметр;
		
	Иначе
	
		РеквизитыЗаполненыКорректно(Ошибки);
		КэшЗначений.РазрешитьЗакрытие = (Ошибки = Неопределено);
		
		Если НЕ КэшЗначений.РазрешитьЗакрытие Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("НачатьРаботу", 					Истина);
	ПараметрыЗакрытия.Вставить("Пользователь",					КэшЗначений.Пользователь);
	ПараметрыЗакрытия.Вставить("РазрешитьИнтерактивноеОткрытие",РазрешитьИнтерактивноеОткрытие);
	ПараметрыЗакрытия.Вставить("ПользовательИмя",				?(КэшЗначений.Свойство("ИмяПользователяВСервисе") = Истина, КэшЗначений.ИмяПользователяВСервисе, ПользовательИмя));
	ПараметрыЗакрытия.Вставить("ПользовательПароль",			ПользовательПароль);
	ПараметрыЗакрытия.Вставить("ПользовательEmail",				СокрЛП(ПользовательEmail));
	ПараметрыЗакрытия.Вставить("ПользовательТелефон",			СокрЛП(ПользовательТелефон));
	ПараметрыЗакрытия.Вставить("ПользовательСайт",				СокрЛП(ПользовательСайт));
	ПараметрыЗакрытия.Вставить("ВидБизнесаОрганизации",			ВидыБизнеса);
	ПараметрыЗакрытия.Вставить("Организации",					Объект.Организации);
	ПараметрыЗакрытия.Вставить("ДополнительныйПараметр",		ДополнительныйПараметр);
	
	НачалоРаботыСПрограммойКлиент.ОбработкаЗакрытияФормыНачалаРаботы(ПараметрыЗакрытия, КэшЗначений.ПараметрыНачалаРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикКомандыДобавитьОрганизацию(Команда)
	
	ДобавитьОрганизацию(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЛоготипа(Команда)
	
	ИндексОрганизации = ИндексПоИмениЭлемента(ЭтаФорма.ТекущийЭлемент.Имя, "АдресЛоготипа");
	
	ДобавитьИзображениеНаКлиенте(ИндексОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображениеЛоготипа(Команда)
	
	ИндексОрганизации = ИндексПоИмениЭлемента(ЭтаФорма.ТекущийЭлемент.Имя, "АдресЛоготипа");
	
	ЗаписатьЗначениеОрганизации("ФайлЛоготип", Неопределено, ИндексОрганизации);
	ЭтотОбъект["АдресЛоготипа" + ИндексОрганизации] = "";
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОрганизацию(Команда)
	
	#Если МобильныйКлиент Тогда
		
		ИндексОрганизации = Объект.Организации.Количество();
		
	#Иначе
		
		ИндексОрганизации = ИндексПоИмениЭлемента(ЭтаФорма.ТекущийЭлемент.Имя, "УдалитьОрганизацию");
		
	#КонецЕсли
	
	УдалитьОрганизациюНаСервере(ИндексОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидБизнесаИнтернетМагазин(Команда)
	
	ПриВыбореВидаБизнеса("ИнтернетМагазин");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидБизнесаОптоваяТорговля(Команда)
	
	ПриВыбореВидаБизнеса("ОптоваяТорговля");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидБизнесаПроизводство(Команда)
	
	ПриВыбореВидаБизнеса("Производство");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидБизнесаРаботыУслуги(Команда)
	
	ПриВыбореВидаБизнеса("РаботыУслуги");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидБизнесаРозничнаяТорговля(Команда)
	
	ПриВыбореВидаБизнеса("РозничнаяТорговля");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидБизнесаНеУказан(Команда)
	
	ПриВыбореВидаБизнеса("");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИПП(Команда)
	
	Если Не ЗаполнениеЛогинаИПароляКорректно() Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	РезультатАутентификации = АутентифицироватьПользователя(ЛогинИнтернетПоддержки, ПарольИнтернетПоддержки);
	ПодключенаИПП = РезультатАутентификации.Результат;
	
	Элементы.ПарольИнтернетПоддержки.ТолькоПросмотр = ПодключенаИПП;
	Элементы.ЛогинИнтернетПоддержки.ТолькоПросмотр  = ПодключенаИПП;
	Элементы.ПодключениеИППУспех.Видимость          = ПодключенаИПП;
	
	Элементы.ПодключениеИППОшибка.Видимость     = НЕ ПодключенаИПП;
	Элементы.ПодключитьИПП.Видимость            = НЕ ПодключенаИПП;
	Элементы.ПропуститьПодключениеИПП.Видимость = НЕ ПодключенаИПП;
	Элементы.ГруппаСсылкиПодЛогином.Видимость   = НЕ ПодключенаИПП;
	
	Если НЕ ПустаяСтрока(РезультатАутентификации.КодОшибки) Тогда
		Если РезультатАутентификации.КодОшибки = "НеверныйЛогинИлиПароль" Тогда
			ТекстОшибки = НСтр("ru='Неверный логин или пароль.'")
		Иначе
			ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось подключиться:%1%2'"), Символы.ПС, РезультатАутентификации.СообщениеОбОшибке);
		КонецЕсли;
		Элементы.ПодключениеИППТекстОшибки.Заголовок = ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПропуститьПодключениеИПП(Команда)
	
	Элементы.ПодключениеИПП.Скрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПолучитьНаименованиеДляБюджета(Индекс)
	
	ДанныеСтрокиОрганизации = Объект.Организации[Индекс - 1];
	
	// Для организации заполняем из полного наименования
	Если ДанныеСтрокиОрганизации.ЮридическоеФизическоеЛицо = КэшЗначений.ЮрЛицо Тогда
		
		Возврат ДанныеСтрокиОрганизации.НаименованиеПолное;
		
	КонецЕсли;
	
	// Для ИП:
	// п.4 Приложения 1 к Приказу Минфина 107н:
	// Фамилия имя отчество "(ИП)" "//"Адрес регистрации"//"
	Шаблон = "%1 (ИП) //%2//";
	
	ФИО = ДанныеСтрокиОрганизации.Фамилия 
		+ ?(ПустаяСтрока(ДанныеСтрокиОрганизации.Имя), "", " " + ДанныеСтрокиОрганизации.Имя) 
		+ ?(ПустаяСтрока(ДанныеСтрокиОрганизации.Отчество), "", " " + ДанныеСтрокиОрганизации.Отчество);
	
	АдресРегистрации = ДанныеСтрокиОрганизации.АдресЮридический;
	
	Возврат СтрШаблон(Шаблон, ФИО, АдресРегистрации);
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьНаименованиеПлательщикаПриПеречисленииНалогов(Индекс)
	
	ЗначениеНаименованиеПлательщикаПриПеречисленииНалогов = ПолучитьНаименованиеДляБюджета(Индекс);
	ЗаписатьЗначениеОрганизации("НаименованиеПлательщикаПриПеречисленииНалогов", ЗначениеНаименованиеПлательщикаПриПеречисленииНалогов, Индекс);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПользователя()
	
	ПользовательСсылка	= КэшЗначений.Пользователь;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		ПользовательИмя = ПользовательСсылка.Наименование;
		
		УстановитьПривилегированныйРежим(Истина);
		ПрочитанныеСвойства = Пользователи.СвойстваПользователяИБ(ПользовательСсылка.ИдентификаторПользователяИБ);
		УстановитьПривилегированныйРежим(Ложь);
		
		КэшЗначений.Вставить("ИмяПользователяВСервисе", ПрочитанныеСвойства.Имя);
		
	КонецЕсли;
	
	ПользовательEmail	= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ПользовательСсылка, Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	ПользовательТелефон = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ПользовательСсылка, Справочники.ВидыКонтактнойИнформации.ТелефонПользователя);
	ПользовательСайт	= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ПользовательСсылка, Справочники.ВидыКонтактнойИнформации.СайтПользователя);
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаОрганизацииПоИндексуНаКлиенте(ИндексОрганизации)
	
	НайденныеСтроки = Объект.Организации.НайтиСтроки(Новый Структура("ИндексОрганизации", ИндексОрганизации));
	Возврат НайденныеСтроки[0];
	
КонецФункции

&НаСервере
Функция СтрокаОрганизацииПоИндексуНаСервере(ИндексОрганизации)
	
	НайденныеСтроки = Объект.Организации.НайтиСтроки(Новый Структура("ИндексОрганизации", ИндексОрганизации));
	Возврат НайденныеСтроки[0];
	
КонецФункции

&НаСервере
Функция СформироватьУникальныйИндексОрганизации(СтрокаОрганизации)
	
	ИндексОрганизации = Объект.Организации.Количество();
	
	Пока Истина Цикл
		
		НайденныеСтроки = Объект.Организации.НайтиСтроки(Новый Структура("ИндексОрганизации", ИндексОрганизации));
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			Прервать;
			
		Иначе
			
			ИндексОрганизации = ИндексОрганизации + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИндексОрганизации;
	
КонецФункции

&НаКлиенте
Функция ИндексПоИмениЭлемента(ИмяЭлемента, ОбщаяЧастьИмени)
	
	Возврат Число(СтрЗаменить(ИмяЭлемента, ОбщаяЧастьИмени, ""));
	
КонецФункции

&НаСервере
Процедура ДобавитьРеквизитыИЭлементыФормы(ИндексОрганизации)
	
	ПостФикс = ИндексОрганизации;
	
	// :::Реквизиты
	МассивРеквизитов = Новый Массив;
	
	НовыйРеквизитИНН = Новый РеквизитФормы("ИНН" + ПостФикс, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(12)), , "");
	МассивРеквизитов.Добавить(НовыйРеквизитИНН);
	
	НовыйЮридическоеФизическоеЛицо = Новый РеквизитФормы("ЮридическоеФизическоеЛицо" + ПостФикс, Новый ОписаниеТипов("ПеречислениеСсылка.ЮридическоеФизическоеЛицо"), , "");
	МассивРеквизитов.Добавить(НовыйЮридическоеФизическоеЛицо);
	
	НовыйНаименование = Новый РеквизитФормы("Наименование" + ПостФикс, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50)), , "");
	МассивРеквизитов.Добавить(НовыйНаименование);
	
	НовыйИПФамилия = Новый РеквизитФормы("ИП_Фамилия" + ПостФикс, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50)), , "");
	МассивРеквизитов.Добавить(НовыйИПФамилия);
	
	НовыйИПИмя = Новый РеквизитФормы("ИП_Имя" + ПостФикс, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50)), , "");
	МассивРеквизитов.Добавить(НовыйИПИмя);
	
	НовыйИПОтчество = Новый РеквизитФормы("ИП_Отчество" + ПостФикс, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50)), , "");
	МассивРеквизитов.Добавить(НовыйИПОтчество);
	
	НовыйЕстьУСН = Новый РеквизитФормы("ЕстьУСН" + ПостФикс, Новый ОписаниеТипов("Булево"), , "");
	МассивРеквизитов.Добавить(НовыйЕстьУСН);
	
	НовыйЕстьПатент = Новый РеквизитФормы("ЕстьПатент" + ПостФикс, Новый ОписаниеТипов("Булево"), , "");
	МассивРеквизитов.Добавить(НовыйЕстьПатент);
	
	НовыйВидыОбъектовНалогообложения = Новый РеквизитФормы("ВидыОбъектовНалогообложения" + ПостФикс, Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОбъектовНалогообложения"), , "");
	МассивРеквизитов.Добавить(НовыйВидыОбъектовНалогообложения);
	
	НовыйСтавкаНалога = Новый РеквизитФормы("СтавкаНалога" + ПостФикс, Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный)), , "Ставка налога");
	МассивРеквизитов.Добавить(НовыйСтавкаНалога);
	
	НовыйСистемаНалогообложения = Новый РеквизитФормы("СистемаНалогообложения" + ПостФикс, Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)), , "");
	МассивРеквизитов.Добавить(НовыйСистемаНалогообложения);
	
	НовыйИПИспользуетТрудНаемныхРаботников = Новый РеквизитФормы("ИПИспользуетТрудНаемныхРаботников" + ПостФикс, Новый ОписаниеТипов("Булево"), , "");
	МассивРеквизитов.Добавить(НовыйИПИспользуетТрудНаемныхРаботников);
	
	НовыйАдресЛоготипа = Новый РеквизитФормы("АдресЛоготипа" + ПостФикс, Новый ОписаниеТипов("Строка"), , "");
	МассивРеквизитов.Добавить(НовыйАдресЛоготипа);
	
	ЭтотОбъект.ИзменитьРеквизиты(МассивРеквизитов);
	
	// :::Структура групп
	//
	//ГруппаОрганизация
	//	ГруппаОсновныеСведения
	//		ГруппаИНН_ВидСобственности
	//			ГруппаИНН
	//			ГруппаЮридическоеФизическоеЛицо
	//		ГруппаНаименованиеОрганизации
	//			ГруппаНаименованиеОрганизацииФИО
	//		ГруппаУСН_ЕНВД
	//		ГруппаНалогообложение
	//		ГруппаСотрудники
	//
	//	ГруппаЛоготип
	
	ГруппаОрганизация = Элементы.Добавить("ГруппаОрганизация" + ПостФикс, Тип("ГруппаФормы"), Элементы.ГруппаОрганизации);
	ГруппаОрганизация.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОрганизация.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаОрганизация.ОтображатьЗаголовок = Ложь;
	ГруппаОрганизация.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	ГруппаОсновныеСведения = Элементы.Добавить("ГруппаОсновныеСведения" + ПостФикс, Тип("ГруппаФормы"), ГруппаОрганизация);
	ГруппаОсновныеСведения.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОсновныеСведения.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаОсновныеСведения.ОтображатьЗаголовок = Ложь;
	
	ГруппаИНН_ВидСобственности = Элементы.Добавить("ГруппаИНН_ВидСобственности" + ПостФикс, Тип("ГруппаФормы"), ГруппаОсновныеСведения);
	ГруппаИНН_ВидСобственности.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаИНН_ВидСобственности.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаИНН_ВидСобственности.ОтображатьЗаголовок = Ложь;
	ГруппаИНН_ВидСобственности.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаИНН_ВидСобственности.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Двойной;
	
	ГруппаИНН = Элементы.Добавить("ГруппаИНН" + ПостФикс, Тип("ГруппаФормы"), ГруппаИНН_ВидСобственности);
	ГруппаИНН.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаИНН.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаИНН.ОтображатьЗаголовок = Ложь;
	ГруппаИНН.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	ГруппаЮридическоеФизическоеЛицо = Элементы.Добавить("ГруппаЮридическоеФизическоеЛицо" + ПостФикс, Тип("ГруппаФормы"), ГруппаИНН_ВидСобственности);
	ГруппаЮридическоеФизическоеЛицо.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЮридическоеФизическоеЛицо.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаЮридическоеФизическоеЛицо.ОтображатьЗаголовок = Ложь;
	ГруппаЮридическоеФизическоеЛицо.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	ГруппаНаименованиеОрганизации = Элементы.Добавить("ГруппаНаименованиеОрганизации" + ПостФикс, Тип("ГруппаФормы"), ГруппаОсновныеСведения);
	ГруппаНаименованиеОрганизации.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаНаименованиеОрганизации.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаНаименованиеОрганизации.ОтображатьЗаголовок = Ложь;
	ГруппаНаименованиеОрганизации.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	ГруппаВидНалогообложения = Элементы.Добавить("ГруппаВидНалогообложения" + ПостФикс, Тип("ГруппаФормы"), ГруппаОсновныеСведения);
	ГруппаВидНалогообложения.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаВидНалогообложения.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаВидНалогообложения.ОтображатьЗаголовок = Ложь;
	ГруппаВидНалогообложения.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	ГруппаСистемаНалогообложения = Элементы.Добавить("ГруппаСистемаНалогообложения" + ПостФикс, Тип("ГруппаФормы"), ГруппаВидНалогообложения);
	ГруппаСистемаНалогообложения.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСистемаНалогообложения.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаСистемаНалогообложения.ОтображатьЗаголовок = Ложь;
	ГруппаСистемаНалогообложения.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	ГруппаУСН_ЕНВД = Элементы.Добавить("ГруппаУСН_ЕНВД" + ПостФикс, Тип("ГруппаФормы"), ГруппаВидНалогообложения);
	ГруппаУСН_ЕНВД.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаУСН_ЕНВД.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаУСН_ЕНВД.ОтображатьЗаголовок = Ложь;
	ГруппаУСН_ЕНВД.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	ГруппаНалогообложение = Элементы.Добавить("ГруппаНалогообложение" + ПостФикс, Тип("ГруппаФормы"), ГруппаОсновныеСведения);
	ГруппаНалогообложение.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаНалогообложение.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаНалогообложение.ОтображатьЗаголовок = Ложь;
	ГруппаНалогообложение.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаНалогообложение.Видимость = Ложь;
	
	ГруппаСотрудники = Элементы.Добавить("ГруппаСотрудники" + ПостФикс, Тип("ГруппаФормы"), ГруппаОсновныеСведения);
	ГруппаСотрудники.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСотрудники.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаСотрудники.ОтображатьЗаголовок = Ложь;
	ГруппаСотрудники.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаСотрудники.Видимость = Ложь;
	
	ГруппаЛоготип = Элементы.Добавить("ГруппаЛоготип" + ПостФикс, Тип("ГруппаФормы"), ГруппаОрганизация);
	ГруппаЛоготип.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЛоготип.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаЛоготип.ОтображатьЗаголовок = Ложь;
	ГруппаЛоготип.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	// :::ГруппаИНН
	ЭлементИНН = Элементы.Добавить("ИНН" + ПостФикс, Тип("ПолеФормы"), ГруппаИНН);
	ЭлементИНН.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементИНН.ПутьКДанным = "ИНН" + ПостФикс;
	ЭлементИНН.РежимРедактирования = РежимРедактированияКолонки.Вход;
	ЭлементИНН.КнопкаСоздания = Ложь;
	ЭлементИНН.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	ЭлементИНН.Заголовок = НСтр("ru = 'ИНН'");
	ЭлементИНН.ШрифтЗаголовка = Элементы.ИНН1.ШрифтЗаголовка;
	ЭлементИНН.Ширина = 14;
	ЭлементИНН.РастягиватьПоГоризонтали = Ложь;
	ЭлементИНН.УстановитьДействие("ПриИзменении", "ИННПриИзменении");
	
	// :::ГруппаЮридическоеФизическоеЛицо
	ЭлементЮридическоеФизическоеЛицо = Элементы.Добавить("ЮридическоеФизическоеЛицо" + ПостФикс, Тип("ПолеФормы"), ГруппаЮридическоеФизическоеЛицо);
	ЭлементЮридическоеФизическоеЛицо.ПутьКДанным = "ЮридическоеФизическоеЛицо" + ПостФикс;
	ЭлементЮридическоеФизическоеЛицо.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементЮридическоеФизическоеЛицо.Вид = ВидПоляФормы.ПолеПереключателя;
	ЭлементЮридическоеФизическоеЛицо.ВидПереключателя = ВидПереключателя.Тумблер;
	ЭлементЮридическоеФизическоеЛицо.СписокВыбора.Добавить(Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, НСтр("ru = 'Юр. лицо'"));
	ЭлементЮридическоеФизическоеЛицо.СписокВыбора.Добавить(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, НСтр("ru = 'Предприниматель'"));
	ЭлементЮридическоеФизическоеЛицо.ОдинаковаяШиринаКолонок = Ложь;
	ЭлементЮридическоеФизическоеЛицо.Шрифт = Элементы.ЮридическоеФизическоеЛицо1.Шрифт;
	ЭлементЮридическоеФизическоеЛицо.УстановитьДействие("ПриИзменении", "ЮрФизЛицоПриИзменении");
	
	// :::ГруппаНаименованиеОрганизации
	ЭлементНаименование = Элементы.Добавить("Наименование" + ПостФикс, Тип("ПолеФормы"), ГруппаНаименованиеОрганизации);
	ЭлементНаименование.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементНаименование.ПутьКДанным = "Наименование" + ПостФикс;
	ЭлементНаименование.РежимРедактирования = РежимРедактированияКолонки.Вход;
	ЭлементНаименование.КнопкаСоздания = Ложь;
	ЭлементНаименование.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	ЭлементНаименование.Заголовок = НСтр("ru = 'Название'");
	ЭлементНаименование.ЦветТекстаЗаголовка = Элементы.Наименование1.ЦветТекстаЗаголовка;
	ЭлементНаименование.Ширина = 41;
	ЭлементНаименование.РастягиватьПоГоризонтали = Ложь;
	ЭлементНаименование.АвтоОтметкаНезаполненного = Истина;
	ЭлементНаименование.ПодсказкаВвода = НСтр("ru ='Наименование организации'");
	ЭлементНаименование.УстановитьДействие("ПриИзменении", "НаименованиеПриИзменении");
	
	// :::ГруппаНаименованиеОрганизацииФИО (создаем строго после декорации-заголовка)
	ГруппаНаименованиеОрганизацииФИО = Элементы.Добавить("ГруппаНаименованиеОрганизацииФИО" + ПостФикс, Тип("ГруппаФормы"), ГруппаНаименованиеОрганизации);
	ГруппаНаименованиеОрганизацииФИО.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаНаименованиеОрганизацииФИО.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаНаименованиеОрганизацииФИО.ОтображатьЗаголовок = Ложь;
	ГруппаНаименованиеОрганизацииФИО.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	//ГруппаНаименованиеОрганизацииФИО.РастягиватьПоГоризонтали = ;
	ГруппаНаименованиеОрганизацииФИО.Видимость = Ложь;
	
	ЭлементИП_Фамилия = Элементы.Добавить("ИП_Фамилия" + ПостФикс, Тип("ПолеФормы"), ГруппаНаименованиеОрганизацииФИО);
	ЭлементИП_Фамилия.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементИП_Фамилия.ПутьКДанным = "ИП_Фамилия" + ПостФикс;
	ЭлементИП_Фамилия.РежимРедактирования = РежимРедактированияКолонки.Вход;
	ЭлементИП_Фамилия.КнопкаСоздания = Ложь;
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ЭлементИП_Фамилия.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Иначе
		ЭлементИП_Фамилия.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	КонецЕсли;
	ЭлементИП_Фамилия.ЦветТекстаЗаголовка = Элементы.ИП_Фамилия1.ЦветТекстаЗаголовка;	
	ЭлементИП_Фамилия.АвтоОтметкаНезаполненного = Истина;
	ЭлементИП_Фамилия.ПодсказкаВвода = НСтр("ru ='Фамилия'");
	ЭлементИП_Фамилия.АвтоМаксимальнаяШирина = Ложь;
	ЭлементИП_Фамилия.МаксимальнаяШирина = 12;
	ЭлементИП_Фамилия.УстановитьДействие("ПриИзменении", "ИПФамилияПриИзменении");
	
	ЭлементИП_Имя = Элементы.Добавить("ИП_Имя" + ПостФикс, Тип("ПолеФормы"), ГруппаНаименованиеОрганизацииФИО);
	ЭлементИП_Имя.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементИП_Имя.ПутьКДанным = "ИП_Имя" + ПостФикс;
	ЭлементИП_Имя.РежимРедактирования = РежимРедактированияКолонки.Вход;
	ЭлементИП_Имя.КнопкаСоздания = Ложь;
	ЭлементИП_Имя.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементИП_Имя.АвтоОтметкаНезаполненного = Истина;
	ЭлементИП_Имя.ПодсказкаВвода = НСтр("ru ='Имя'");
	ЭлементИП_Имя.АвтоМаксимальнаяШирина = Ложь;
	ЭлементИП_Имя.МаксимальнаяШирина = 12;
	ЭлементИП_Имя.УстановитьДействие("ПриИзменении", "ИПИмяПриИзменении");
	
	ЭлементИП_Отчество = Элементы.Добавить("ИП_Отчество" + ПостФикс, Тип("ПолеФормы"), ГруппаНаименованиеОрганизацииФИО);
	ЭлементИП_Отчество.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементИП_Отчество.ПутьКДанным = "ИП_Отчество" + ПостФикс;
	ЭлементИП_Отчество.РежимРедактирования = РежимРедактированияКолонки.Вход;
	ЭлементИП_Отчество.КнопкаСоздания = Ложь;
	ЭлементИП_Отчество.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементИП_Отчество.АвтоОтметкаНезаполненного = Ложь;
	ЭлементИП_Отчество.ПодсказкаВвода = НСтр("ru ='Отчество'");
	ЭлементИП_Отчество.АвтоМаксимальнаяШирина = Ложь;
	ЭлементИП_Отчество.МаксимальнаяШирина = 12;
	ЭлементИП_Отчество.УстановитьДействие("ПриИзменении", "ИПОтчествоПриИзменении");
	
	// :::ГруппаУСН_ЕНВД
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ДекорацияОтступСистемаНалогообложение = Элементы.Добавить("ДекорацияОтступСистемаНалогообложение" + ПостФикс, Тип("ДекорацияФормы"), ГруппаСистемаНалогообложения);
		ДекорацияОтступСистемаНалогообложение.Вид = ВидДекорацииФормы.Надпись;
		ДекорацияОтступСистемаНалогообложение.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
		ДекорацияОтступСистемаНалогообложение.Ширина = 12;
		ДекорацияОтступСистемаНалогообложение.Шрифт = Элементы.ДекорацияОтступСистемаНалогообложение1.Шрифт;
		
		ДекорацияОтступЗаголовокНалогообложение = Элементы.Добавить("ДекорацияОтступЗаголовокНалогообложение" + ПостФикс, Тип("ДекорацияФормы"), ГруппаУСН_ЕНВД);
		ДекорацияОтступЗаголовокНалогообложение.Вид = ВидДекорацииФормы.Надпись;
		ДекорацияОтступЗаголовокНалогообложение.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
		ДекорацияОтступЗаголовокНалогообложение.Ширина = 17;
		ДекорацияОтступЗаголовокНалогообложение.Шрифт = Элементы.ДекорацияОтступЗаголовокНалогообложение1.Шрифт;
	КонецЕсли;
	
	ЭлементСистемаНалогообложения = Элементы.Добавить("СистемаНалогообложения" + ПостФикс, Тип("ПолеФормы"), ГруппаСистемаНалогообложения);
	ЭлементСистемаНалогообложения.ПутьКДанным = "СистемаНалогообложения" + ПостФикс;
	ЭлементСистемаНалогообложения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементСистемаНалогообложения.Вид = ВидПоляФормы.ПолеПереключателя;
	ЭлементСистемаНалогообложения.ВидПереключателя = ВидПереключателя.Тумблер;
	ЭлементСистемаНалогообложения.ШрифтЗаголовка = Элементы.СистемаНалогообложения1.ШрифтЗаголовка;
	ЭлементСистемаНалогообложения.ОдинаковаяШиринаКолонок = Истина;
	ЭлементСистемаНалогообложения.УстановитьДействие("ПриИзменении", "СистемаНалогообложенияПриИзменении");
	ЭлементСистемаНалогообложения.СписокВыбора.Добавить(0,НСтр("ru = 'Общая'"));
	ЭлементСистемаНалогообложения.СписокВыбора.Добавить(1,НСтр("ru = 'Упрощенная'"));
	
	ЭлементЕстьУСН = Элементы.Добавить("ЕстьУСН" + ПостФикс, Тип("ПолеФормы"), ГруппаУСН_ЕНВД);
	ЭлементЕстьУСН.ПутьКДанным = "ЕстьУСН" + ПостФикс;
	ЭлементЕстьУСН.Заголовок = НСтр("ru ='УСН'");
	ЭлементЕстьУСН.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	ЭлементЕстьУСН.Видимость = Ложь;
	ЭлементЕстьУСН.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементЕстьУСН.ШрифтЗаголовка = Элементы.ЕстьУСН1.ШрифтЗаголовка;
	ЭлементЕстьУСН.УстановитьДействие("ПриИзменении", "ЕстьУСНПриИзменении");
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ДекорацияОтступПатент = Элементы.Добавить("ДекорацияОтступПатент" + ПостФикс, Тип("ДекорацияФормы"), ГруппаУСН_ЕНВД);
		ДекорацияОтступПатент.Вид = ВидДекорацииФормы.Надпись;
		ДекорацияОтступПатент.Ширина = 3;
	КонецЕсли;
	
	ЭлементЕстьПатент = Элементы.Добавить("ЕстьПатент" + ПостФикс, Тип("ПолеФормы"), ГруппаУСН_ЕНВД);
	ЭлементЕстьПатент.ПутьКДанным = "ЕстьПатент" + ПостФикс;
	ЭлементЕстьПатент.Заголовок = НСтр("ru ='Патент'");
	ЭлементЕстьПатент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	ЭлементЕстьПатент.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементЕстьПатент.ШрифтЗаголовка = Элементы.ЕстьПатент1.ШрифтЗаголовка;
	ЭлементЕстьПатент.УстановитьДействие("ПриИзменении", "ЕстьПатентПриИзменении");
	
	// :::ГруппаНалогообложение
	ДекорацияОтступНалогообложение = Элементы.Добавить("ДекорацияОтступНалогообложение" + ПостФикс, Тип("ДекорацияФормы"), ГруппаНалогообложение);
	ДекорацияОтступНалогообложение.Вид = ВидДекорацииФормы.Надпись;
	ДекорацияОтступНалогообложение.Ширина = 11;
	
	ЭлементВидыОбъектовНалогообложения = Элементы.Добавить("ВидыОбъектовНалогообложения" + ПостФикс, Тип("ПолеФормы"), ГруппаНалогообложение);
	ЭлементВидыОбъектовНалогообложения.ПутьКДанным = "ВидыОбъектовНалогообложения" + ПостФикс;
	ЭлементВидыОбъектовНалогообложения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементВидыОбъектовНалогообложения.Вид = ВидПоляФормы.ПолеПереключателя;
	ЭлементВидыОбъектовНалогообложения.КоличествоКолонок = 2;
	ЭлементВидыОбъектовНалогообложения.СписокВыбора.Добавить(Перечисления.ВидыОбъектовНалогообложения.Доходы, НСтр("ru ='Доходы'"));
	ЭлементВидыОбъектовНалогообложения.СписокВыбора.Добавить(Перечисления.ВидыОбъектовНалогообложения.ДоходыМинусРасходы, НСтр("ru ='Доходы - расходы по налоговой ставке'"));
	ЭлементВидыОбъектовНалогообложения.Шрифт = Элементы.ВидыОбъектовНалогообложения1.Шрифт;
	ЭлементВидыОбъектовНалогообложения.УстановитьДействие("ПриИзменении", "НалогообложениеПриИзменении");
	ЭлементВидыОбъектовНалогообложения.ВидПереключателя = ВидПереключателя.Переключатель;
	
	ЭлементСтавкаНалога = Элементы.Добавить("СтавкаНалога" + ПостФикс, Тип("ПолеФормы"), ГруппаНалогообложение);
	ЭлементСтавкаНалога.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементСтавкаНалога.ПутьКДанным = "СтавкаНалога" + ПостФикс;
	ЭлементСтавкаНалога.РежимРедактирования = РежимРедактированияКолонки.Вход;
	ЭлементСтавкаНалога.КнопкаСоздания = Ложь;
	ЭлементСтавкаНалога.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
	ЭлементСтавкаНалога.Ширина = 4;
	ЭлементСтавкаНалога.РастягиватьПоГоризонтали = Ложь;
	ЭлементСтавкаНалога.Заголовок = НСтр("ru ='%'");
	ЭлементСтавкаНалога.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	ЭлементСтавкаНалога.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	ЭлементСтавкаНалога.УстановитьДействие("ПриИзменении", "СтавкаНалогаПриИзменении");
	
	// :::ГруппаСотрудники
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ДекорацияОтступСотрудники = Элементы.Добавить("ДекорацияОтступСотрудники" + ПостФикс, Тип("ДекорацияФормы"), ГруппаСотрудники);
		ДекорацияОтступСотрудники.Вид = ВидДекорацииФормы.Надпись;
		ДекорацияОтступСотрудники.Ширина = 11;
		ДекорацияОтступСотрудники.Видимость = Ложь;
	КонецЕсли;
	
	ЭлементИПИспользуетТрудНаемныхРаботников = Элементы.Добавить("ИПИспользуетТрудНаемныхРаботников" + ПостФикс, Тип("ПолеФормы"), ГруппаСотрудники);
	ЭлементИПИспользуетТрудНаемныхРаботников.ПутьКДанным = "ИПИспользуетТрудНаемныхРаботников" + ПостФикс;
	ЭлементИПИспользуетТрудНаемныхРаботников.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	ЭлементИПИспользуетТрудНаемныхРаботников.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементИПИспользуетТрудНаемныхРаботников.Шрифт = Элементы.ИПИспользуетТрудНаемныхРаботников1.Шрифт;
	ЭлементИПИспользуетТрудНаемныхРаботников.Заголовок = НСтр("ru ='Есть официально трудоустроенные сотрудники'");
	ЭлементИПИспользуетТрудНаемныхРаботников.УстановитьДействие("ПриИзменении", "ЕстьСотрудникиПриИзменении");
	ЭлементИПИспользуетТрудНаемныхРаботников.Видимость = Ложь;
	
	// :::АдресЛоготипа
	ЭлементАдресЛоготипа = Элементы.Добавить("АдресЛоготипа" + ПостФикс, Тип("ПолеФормы"), ГруппаЛоготип);
	ЭлементАдресЛоготипа.ПутьКДанным = "АдресЛоготипа" + ПостФикс;
	ЭлементАдресЛоготипа.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементАдресЛоготипа.Вид = ВидПоляФормы.ПолеКартинки;
	ЭлементАдресЛоготипа.Гиперссылка = Истина;
	ЭлементАдресЛоготипа.Шрифт = Элементы.АдресЛоготипа1.Шрифт;
	ЭлементАдресЛоготипа.РазмерКартинки = РазмерКартинки.Пропорционально;
	ЭлементАдресЛоготипа.ЦветТекста = Элементы.АдресЛоготипа1.ЦветТекста;
	ЭлементАдресЛоготипа.Ширина = 12;
	ЭлементАдресЛоготипа.Высота = 4;
	ЭлементАдресЛоготипа.ТекстНевыбраннойКартинки = НСтр("ru ='Добавить логотип'");
	ЭлементАдресЛоготипа.РастягиватьПоВертикали = Ложь;
	ЭлементАдресЛоготипа.РастягиватьПоГоризонтали = Ложь;
	ЭлементАдресЛоготипа.УстановитьДействие("Нажатие", "АдресЛоготипаНажатие");
	
	ЭлементКомандаДобавитьИзображениеЛоготипа = Элементы.Добавить("ДобавитьИзображениеЛоготипа" + ПостФикс, Тип("КнопкаФормы"), ЭлементАдресЛоготипа.КонтекстноеМеню);
	ЭлементКомандаДобавитьИзображениеЛоготипа.ИмяКоманды = "ДобавитьИзображениеЛоготипа";
	
	ЭлементКомандаОчиститьИзображение = Элементы.Добавить("ОчиститьИзображение" + ПостФикс, Тип("КнопкаФормы"), ЭлементАдресЛоготипа.КонтекстноеМеню);
	ЭлементКомандаОчиститьИзображение.ИмяКоманды = "ОчиститьИзображениеЛоготипа";
	
	ЭлементУдалитьОрганизацию = Элементы.Добавить("УдалитьОрганизацию" + ПостФикс, Тип("КнопкаФормы"), ГруппаЛоготип);
	ЭлементУдалитьОрганизацию.Вид = ВидКнопкиФормы.Гиперссылка;
	ЭлементУдалитьОрганизацию.ИмяКоманды = "УдалитьОрганизацию";
	ЭлементУдалитьОрганизацию.Ширина = 2;
	
	Если ПостФикс > 2 Тогда
		 Элементы["УдалитьОрганизацию" + (ПостФикс-1)].Видимость = Ложь;
	КонецЕсли;
	
	ДекорацияМалыйОтступ = Элементы.Добавить("ДекорацияМалыйОтступ1" + ПостФикс, Тип("ДекорацияФормы"), Элементы.ГруппаОрганизации);
	ДекорацияМалыйОтступ.Вид = ВидДекорацииФормы.Надпись;
	ДекорацияМалыйОтступ.Шрифт = Элементы.ДекорацияМалыйОтступ1.Шрифт;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзображениеЛоготипа(СтрокаОрганизации)
	
	ЭтотОбъект["АдресЛоготипа" + СтрокаОрганизации.ИндексОрганизации] = 
		?(ЗначениеЗаполнено(СтрокаОрганизации.ФайлЛоготип), НавигационнаяСсылкаКартинки(СтрокаОрганизации.ФайлЛоготип, УникальныйИдентификатор), "");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ДополнительныеПараметры.ИдентификаторФормы = ИдентификаторФормы;
	
	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, ДополнительныеПараметры).СсылкаНаДвоичныеДанныеФайла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(ЛоготипРеквизит, УникальныйИдентификатор)
	
	ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ДополнительныеПараметры.ИдентификаторФормы = УникальныйИдентификатор;
	
	Возврат РаботаСФайлами.ДанныеФайла(ЛоготипРеквизит, ДополнительныеПараметры);
	
КонецФункции

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл(ФайлЛоготип)
	
	ДанныеФайла = ПолучитьДанныеФайла(ФайлЛоготип, УникальныйИдентификатор);
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте(ИндексОрганизации)
	Перем ИдентификаторФайла, Фильтр;
	
	КэшЗначений.ТекущийИндексОрганизации = ИндексОрганизации;
	
	СтрокаОрганизации = СтрокаОрганизацииПоИндексуНаКлиенте(ИндексОрганизации);
	
	ЭтотОбъект["АдресЛоготипа" + СтрокаОрганизации.ИндексОрганизации] = "";
	
	ИдентификаторФайла = Новый УникальныйИдентификатор;
	Фильтр = РаботаСФайламиУНФКлиентСервер.ФильтрФайловИзображений();
	
	РаботаСФайламиКлиент.ДобавитьФайлы(СтрокаОрганизации.Ссылка, ИдентификаторФайла, Фильтр);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗначениеОрганизации(ИмяРеквизита, ЗначениеРеквизита, Индекс, НеЗатиратьТекущее = Ложь)
	
	ДанныеСтрокиОрганизации = Объект.Организации[Индекс - 1];
	
	Если НеЗатиратьТекущее Тогда
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтрокиОрганизации[ИмяРеквизита]) Тогда
			
			ДанныеСтрокиОрганизации[ИмяРеквизита] = ЗначениеРеквизита;
			
		КонецЕсли;
		
	Иначе
		
		ДанныеСтрокиОрганизации[ИмяРеквизита] = ЗначениеРеквизита;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗначениеОрганизацииЮрФизЛицо(ЗначениеЮрФизЛицо, ЗначениеЕстьУСН, Индекс)
	
	ЗаписатьЗначениеОрганизации("ЮридическоеФизическоеЛицо", ЗначениеЮрФизЛицо, Индекс);
	
	ПослеЗаписиЗначенияЮрФизЛицо(ЗначениеЮрФизЛицо, ЗначениеЕстьУСН, Индекс);
	
КонецПроцедуры

&НаКлиенте 
Процедура ПослеЗаписиЗначенияЮрФизЛицо(ЗначениеЮрФизЛицо, ЗначениеЕстьУСН, Индекс)
	
	Если ЗначениеЮрФизЛицо = КэшЗначений.ЮрЛицо Тогда
		
		ЭтотОбъект["ИПИспользуетТрудНаемныхРаботников" + Индекс] = Ложь;
		ЗаписатьЗначениеОрганизации("ИПИспользуетТрудНаемныхРаботников", Ложь, Индекс);
		
		ЭтотОбъект["ИП_Фамилия" + Индекс] = "";
		ЗаписатьЗначениеОрганизации("Фамилия", "", Индекс);
		
		ЭтотОбъект["ИП_Имя" + Индекс] = "";
		ЗаписатьЗначениеОрганизации("Имя", "", Индекс);
		
		ЭтотОбъект["ИП_Отчество" + Индекс] = "";
		ЗаписатьЗначениеОрганизации("Отчество", "", Индекс);
		
		ЭтотОбъект["ЕстьПатент" + Индекс] = Ложь;
		ЗаписатьЗначениеОрганизации("ЕстьПатент", Ложь, Индекс);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНалогообложение" + Индекс, "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтступСотрудники" + Индекс, "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИПИспользуетТрудНаемныхРаботников" + Индекс, "Видимость", Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияЗаголовокНаименование" + Индекс, "Заголовок", НСтр("ru ='Название:'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Наименование" + Индекс, "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНаименованиеОрганизацииФИО" + Индекс, "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЕстьПатент" + Индекс, "Доступность", Ложь);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНалогообложение" + Индекс, "Видимость", ЗначениеЕстьУСН);
		
		#Если НЕ МобильныйКлиент Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтступСотрудники" + Индекс, "Видимость", Истина);
			
		#КонецЕсли
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИПИспользуетТрудНаемныхРаботников" + Индекс, "Видимость", Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияЗаголовокНаименование" + Индекс, "Заголовок", НСтр("ru ='ФИО:'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Наименование" + Индекс, "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНаименованиеОрганизацииФИО" + Индекс, "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЕстьПатент" + Индекс, "Доступность", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыЗаполненыКорректно(Ошибки)
	
	Если ПустаяСтрока(ПользовательИмя) Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "ПользовательИмя", НСтр("ru ='Заполните имя пользователя'"), "");
		
	КонецЕсли;
	
	Если ПустаяСтрока(ПользовательEmail) Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "ПользовательEmail", НСтр("ru ='Укажите e-mail'"), "")
		
	КонецЕсли;
	
	Если ПользовательПароль <> ПользовательПарольПодтверждение Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "ПользовательПароль", НСтр("ru ='Не совпадают пароли'"), "")
		
	КонецЕсли;
	
	Для каждого СтрокаОрганизации Из Объект.Организации Цикл
		
		Если ПустаяСтрока(СтрокаОрганизации.Наименование) Тогда
			
			ТекстОшибки = НСтр("ru ='Заполните название (организация %1)'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаОрганизации.НомерСтроки);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Наименование" + СтрокаОрганизации.НомерСтроки, ТекстОшибки, "")
			
		КонецЕсли;
		
		Если СтрокаОрганизации.ЮридическоеФизическоеЛицо = КэшЗначений.ФизЛицо Тогда
			
			Если ПустаяСтрока(СтрокаОрганизации.Фамилия) Тогда
				
				ТекстОшибки = НСтр("ru ='Заполните фамилию (организация %1)'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаОрганизации.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "ИП_Фамилия" + СтрокаОрганизации.НомерСтроки, ТекстОшибки, "")
				
			КонецЕсли;
			
			Если ПустаяСтрока(СтрокаОрганизации.Имя) Тогда
				
				ТекстОшибки = НСтр("ru ='Заполните имя (организация %1)'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаОрганизации.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "ИП_Имя" + СтрокаОрганизации.НомерСтроки, ТекстОшибки, "")
				
			КонецЕсли;
			
			// Отчество - не является обязательным
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОрганизацию(СоздатьРеквизитыЭлементы, ОрганизацияСсылка = Неопределено)
	
	ДобавленнаяСтрока = Объект.Организации.Добавить();
	
	ИндексОрганизации = СформироватьУникальныйИндексОрганизации(ДобавленнаяСтрока);
	
	Если СоздатьРеквизитыЭлементы Тогда
		
		ДобавитьРеквизитыИЭлементыФормы(ИндексОрганизации);
		
	КонецЕсли;
	
	Если ОрганизацияСсылка = Неопределено Тогда
		
		ОрганизацияСсылка = Справочники.Организации.ПолучитьСсылку();
		
	КонецЕсли;
	
	СтрокаТаблицы = Объект.Организации.НайтиПоИдентификатору(ДобавленнаяСтрока.ПолучитьИдентификатор());
	
	СтрокаТаблицы.Ссылка = ОрганизацияСсылка;
	СтрокаТаблицы.ИндексОрганизации = ИндексОрганизации;
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОрганизацияСсылка,
		"Наименование, НаименованиеПолное, ЮридическоеФизическоеЛицо");
	СтрокаТаблицы.Наименование = РеквизитыОрганизации.Наименование;
	СтрокаТаблицы.НаименованиеПолное = РеквизитыОрганизации.НаименованиеПолное;
	ЭтотОбъект["Наименование" + ИндексОрганизации] = СтрокаТаблицы.Наименование;
	
	СтрокаТаблицы.ЮридическоеФизическоеЛицо = РеквизитыОрганизации.ЮридическоеФизическоеЛицо;
	ЭтотОбъект["ЮридическоеФизическоеЛицо" + ИндексОрганизации] = СтрокаТаблицы.ЮридическоеФизическоеЛицо;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЕстьПатент" + ИндексОрганизации,
		"Доступность", СтрокаТаблицы.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	
	СтрокаТаблицы.ВидыОбъектовНалогообложения = Перечисления.ВидыОбъектовНалогообложения.Доходы;
	ЭтотОбъект["ВидыОбъектовНалогообложения" + ИндексОрганизации] = СтрокаТаблицы.ВидыОбъектовНалогообложения;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОрганизациюНаСервере(ИндексОрганизации)
	
	СтрокаОрганизации = СтрокаОрганизацииПоИндексуНаСервере(ИндексОрганизации);
	Объект.Организации.Удалить(СтрокаОрганизации);
	
	УдаляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты.Добавить("ИНН" + ИндексОрганизации);
	УдаляемыеРеквизиты.Добавить("ЮридическоеФизическоеЛицо" + ИндексОрганизации);
	УдаляемыеРеквизиты.Добавить("Наименование" + ИндексОрганизации);
	УдаляемыеРеквизиты.Добавить("ИП_Фамилия" + ИндексОрганизации);
	УдаляемыеРеквизиты.Добавить("ИП_Имя" + ИндексОрганизации);
	УдаляемыеРеквизиты.Добавить("ИП_Отчество" + ИндексОрганизации);
	УдаляемыеРеквизиты.Добавить("ЕстьУСН" + ИндексОрганизации);
	УдаляемыеРеквизиты.Добавить("ЕстьПатент" + ИндексОрганизации);
	УдаляемыеРеквизиты.Добавить("ВидыОбъектовНалогообложения" + ИндексОрганизации);
	УдаляемыеРеквизиты.Добавить("СтавкаНалога" + ИндексОрганизации);
	УдаляемыеРеквизиты.Добавить("ИПИспользуетТрудНаемныхРаботников" + ИндексОрганизации);
	УдаляемыеРеквизиты.Добавить("АдресЛоготипа" + ИндексОрганизации);
	УдаляемыеРеквизиты.Добавить("СистемаНалогообложения" + ИндексОрганизации);
	
	ЭтотОбъект.ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	
	Элементы.Удалить(Элементы["ГруппаОрганизация" + ИндексОрганизации]);
	Элементы.Удалить(Элементы["ДекорацияМалыйОтступ1" + ИндексОрганизации]);
	Если ИндексОрганизации > 2 Тогда
		 Элементы["УдалитьОрганизацию" + (ИндексОрганизации-1)].Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтделенииПФР(ДанныеГосРеестра, ОписаниеОшибки = "")
	
	Если НЕ ЗначениеЗаполнено(ДанныеГосРеестра.КодОрганаПФР) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РеквизитыОтделенияПФР = ДанныеГосударственныхОрганов.РеквизитыОтделенияПФРПоКоду(Лев(ДанныеГосРеестра.КодОрганаПФР, 3));
	
	Если ЗначениеЗаполнено(РеквизитыОтделенияПФР.ОписаниеОшибки) Тогда
		
		ОписаниеОшибки = РеквизитыОтделенияПФР.ОписаниеОшибки;
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РеквизитыОтделенияПФР.Ссылка) Тогда
		
		ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыОтделенияПФР);
		
	КонецЕсли;
	
	ПлатежныеРеквизитыПФРПредставление = ДанныеГосударственныхОрганов.ПредставлениеПлатежныхРеквизитовГосударственногоОргана(РеквизитыОтделенияПФР);
	ДанныеГосРеестра.Вставить("ПлатежныеРеквизитыПФРПредставление", ПлатежныеРеквизитыПФРПредставление);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтделенииФСС(ДанныеГосРеестра, ОписаниеОшибки = "")
	
	Если НЕ ЗначениеЗаполнено(ДанныеГосРеестра.КодОрганаФСС) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КодПодчиненностиФСС = ДанныеГосРеестра.КодОрганаФСС + ?(ДанныеГосРеестра.ЭтоЮрЛицо, 1, 3);
	РеквизитыОтделенияФСС = ДанныеГосударственныхОрганов.РеквизитыОтделенияФССПоКоду(КодПодчиненностиФСС);
	
	Если ЗначениеЗаполнено(РеквизитыОтделенияФСС.ОписаниеОшибки) Тогда
		
		ОписаниеОшибки = РеквизитыОтделенияФСС.ОписаниеОшибки;
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РеквизитыОтделенияФСС.Ссылка) Тогда
		
		ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыОтделенияФСС);
		
	КонецЕсли;
	
	ПлатежныеРеквизитыФССПредставление = ДанныеГосударственныхОрганов.ПредставлениеПлатежныхРеквизитовГосударственногоОргана(РеквизитыОтделенияФСС);
	ДанныеГосРеестра.Вставить("ПлатежныеРеквизитыФССПредставление", ПлатежныеРеквизитыФССПредставление);
	ДанныеГосРеестра.Вставить("НаименованиеТерриториальногоОрганаФСС", РеквизитыОтделенияФСС.Наименование);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(ДанныеГосРеестра, ОписаниеОшибки = "")
	
	Если НЕ ЗначениеЗаполнено(ДанныеГосРеестра.КодНалоговогоОрганаПолучателя) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РеквизитыНалоговогоОргана = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(ДанныеГосРеестра.КодНалоговогоОрганаПолучателя);
	
	Если ЗначениеЗаполнено(РеквизитыНалоговогоОргана.ОписаниеОшибки) Тогда
		
		ОписаниеОшибки = РеквизитыНалоговогоОргана.ОписаниеОшибки;
		Возврат;
	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РеквизитыНалоговогоОргана.Ссылка) Тогда
		
		ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыНалоговогоОргана);
		
	КонецЕсли;
	
	РегистрацияВНалоговомОргане = Новый Структура;
	РегистрацияВНалоговомОргане.Вставить("Наименование", РеквизитыНалоговогоОргана.Наименование);
	РегистрацияВНалоговомОргане.Вставить("НаименованиеИФНС", РеквизитыНалоговогоОргана.ПолноеНаименование);
	
	ДанныеГосРеестра.Вставить("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОНалоговойИнспекцииПоАдресу(ЮридическийАдресПоИНН, ДанныеГосРеестра, ОписаниеОшибки = "")
	
	ЭтоФизЛицо = НЕ ДанныеГосРеестра.ЭтоЮрЛицо;
	ЗначенияПолейАдреса = ЮридическийАдресПоИНН.КонтактнаяИнформация;
	
	Если НЕ ЗначениеЗаполнено(ЗначенияПолейАдреса) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СведенияОНалоговомОрганеПоАдресу = ДанныеАдресногоКлассификатора.НалоговыйОрганПоАдресу(ЗначенияПолейАдреса);
	
	Если СведенияОНалоговомОрганеПоАдресу = Неопределено Тогда
		КодНалоговогоОрганаПолучателя = "";
	Иначе
		КодНалоговогоОрганаПолучателя = ?(ЭтоФизЛицо, 
			СведенияОНалоговомОрганеПоАдресу.КодНалоговойДляФизическихЛиц,
			СведенияОНалоговомОрганеПоАдресу.КодНалоговойДляЮридическихЛиц);
	КонецЕсли;
	
	ДанныеГосРеестра.Вставить("КодНалоговогоОрганаПолучателя", КодНалоговогоОрганаПолучателя);
	
	ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(ДанныеГосРеестра);
	
	Если СведенияОНалоговомОрганеПоАдресу <> Неопределено Тогда
		ДанныеГосРеестра.РегистрацияВНалоговомОргане.Вставить("КодПоОКАТО", СведенияОНалоговомОрганеПоАдресу.КодПоОКАТО);
		ДанныеГосРеестра.РегистрацияВНалоговомОргане.Вставить("КодПоОКТМО", СведенияОНалоговомОрганеПоАдресу.КодПоОКТМО);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоИНННаСервере(ИНН, ДанныеГосРеестра, ИндексОрганизации, Ошибки)
	
	ЭтоЮрЛицо = ?(СтрДлина(ИНН) = 12, Ложь, Истина);
	
	ЗначениеРеквизитов = ?(ЭтоЮрЛицо,
		РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИНН(ИНН),
		РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(ИНН));
	
	Если ЗначениеЗаполнено(ЗначениеРеквизитов.ОписаниеОшибки) Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ЗначениеРеквизитов.ОписаниеОшибки, "");
		Возврат;
		
	КонецЕсли;
	
	ДанныеГосРеестра.Вставить("ЭтоЮрЛицо", ЭтоЮрЛицо);
	ДанныеГосРеестра.Вставить("ИНН", ЗначениеРеквизитов.ИНН);
	Если ЭтоЮрЛицо Тогда
		
		ДанныеГосРеестра.Вставить("Наименование", ЗначениеРеквизитов.ЕГРЮЛ.Наименование);
		ДанныеГосРеестра.Вставить("НаименованиеПолное", ЗначениеРеквизитов.ЕГРЮЛ.НаименованиеСокращенное);
		ДанныеГосРеестра.Вставить("ОГРН", ЗначениеРеквизитов.ЕГРЮЛ.РегистрационныйНомер);
		ДанныеГосРеестра.Вставить("КПП", ЗначениеРеквизитов.ЕГРЮЛ.КПП);
		ДанныеГосРеестра.Вставить("КодОКВЭД", ЗначениеРеквизитов.ЕГРЮЛ.ВидДеятельности.Код);
		ДанныеГосРеестра.Вставить("ЮридическийАдрес", ЗначениеРеквизитов.ЕГРЮЛ.ЮридическийАдрес);
		ДанныеГосРеестра.Вставить("Телефон", ЗначениеРеквизитов.ЕГРЮЛ.Телефон);
		
		ЮридическийАдресПоИНН = ЗначениеРеквизитов.ЕГРЮЛ.ЮридическийАдрес;
		ДанныеПоИННРегистрацияВНалоговомОргане = ЗначениеРеквизитов.ЕГРЮЛ.РегистрацияВНалоговомОргане;
		ДанныеПоИННРегистрацияВПенсионномФонде = ЗначениеРеквизитов.ЕГРЮЛ.РегистрацияВПенсионномФонде;
		ДанныеПоИННРегистрацияВФСС = ЗначениеРеквизитов.ЕГРЮЛ.РегистрацияВФСС;
		
	Иначе
		
		ДанныеГосРеестра.Вставить("Наименование", ЗначениеРеквизитов.Наименование);
		ДанныеГосРеестра.Вставить("НаименованиеПолное", ЗначениеРеквизитов.НаименованиеСокращенное);
		ДанныеГосРеестра.Вставить("ОГРН", ЗначениеРеквизитов.РегистрационныйНомер);
		ДанныеГосРеестра.Вставить("КодОКВЭД", Неопределено);
		ДанныеГосРеестра.Вставить("ЮридическийАдрес", Неопределено);
		ДанныеГосРеестра.Вставить("Телефон", Неопределено);
		
		ДанныеГосРеестра.Вставить("СвидетельствоСерияНомер", Неопределено);
		ДанныеГосРеестра.Вставить("СвидетельствоДатаВыдачи", Неопределено);
		Если ЗначениеРеквизитов.СвидетельствоОРегистрации <> Неопределено Тогда
			
			СвидетельствоСерияНомер = "" + ЗначениеРеквизитов.СвидетельствоОРегистрации.Серия + " " + ЗначениеРеквизитов.СвидетельствоОРегистрации.Номер;
			СвидетельствоДатаВыдачи = ЗначениеРеквизитов.СвидетельствоОРегистрации.Дата;
			
			ДанныеГосРеестра.Вставить("СвидетельствоСерияНомер", СвидетельствоСерияНомер);
			ДанныеГосРеестра.Вставить("СвидетельствоДатаВыдачи", СвидетельствоДатаВыдачи);
			
		КонецЕсли;
		
		ДанныеГосРеестра.Вставить("Фамилия", ЗначениеРеквизитов.Фамилия);
		ДанныеГосРеестра.Вставить("Имя", ЗначениеРеквизитов.Имя);
		ДанныеГосРеестра.Вставить("Отчество", ЗначениеРеквизитов.Отчество);
		ДанныеГосРеестра.Вставить("Пол", ?(ЗначениеРеквизитов.Пол = "1", Перечисления.ПолФизическогоЛица.Мужской, Перечисления.ПолФизическогоЛица.Женский));
		
		ДанныеПоИННРегистрацияВНалоговомОргане = ЗначениеРеквизитов.РегистрацияВНалоговомОргане;
		ДанныеПоИННРегистрацияВПенсионномФонде = ЗначениеРеквизитов.РегистрацияВПенсионномФонде;
		ДанныеПоИННРегистрацияВФСС = ЗначениеРеквизитов.РегистрацияВФСС;
		
	КонецЕсли;
	
	ДанныеГосРеестра.Вставить("ЮридическоеФизическоеЛицо", ?(ЭтоЮрЛицо, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо));
	
	ДанныеГосРеестра.Вставить("КодНалоговогоОргана", Неопределено);
	ДанныеГосРеестра.Вставить("КодНалоговогоОрганаПолучателя", Неопределено);
	ДанныеГосРеестра.Вставить("КодОрганаПФР", Неопределено);
	ДанныеГосРеестра.Вставить("РегистрационныйНомерПФР", Неопределено);
	ДанныеГосРеестра.Вставить("РегистрационныйНомерПФР_ИП", Неопределено);
	
	// Устанавливаем сведения о налоговой инспекции
	// В том случае, если указан юридический адрес, получаем код налоговой инспекции по адресу
	// и заполняем реквизиты инспекции по коду
	// В том случае, если юридического адреса нет - заполняем данные о налоговой инспекции
	// из кода в ЕГРЮЛ/ЕГРИП
	Если ЗначениеЗаполнено(ЮридическийАдресПоИНН) Тогда
		
		ОписаниеОшибкиАдрес = "";
		ЗаполнитьСведенияОНалоговойИнспекцииПоАдресу(ЮридическийАдресПоИНН, ДанныеГосРеестра, ОписаниеОшибкиАдрес);
		
		Если ЗначениеЗаполнено(ОписаниеОшибкиАдрес)
			И ЗначениеЗаполнено(ДанныеПоИННРегистрацияВНалоговомОргане)
			И ЗначениеЗаполнено(ДанныеПоИННРегистрацияВНалоговомОргане.Код) Тогда
			
			ДанныеГосРеестра.Вставить("КодНалоговогоОргана", ДанныеПоИННРегистрацияВНалоговомОргане.Код);
			ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(ДанныеГосРеестра);
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеПоИННРегистрацияВНалоговомОргане) Тогда
		
		ДанныеГосРеестра.Вставить("КодНалоговогоОрганаПолучателя", ДанныеПоИННРегистрацияВНалоговомОргане.Код);
		ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(ДанныеГосРеестра);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПоИННРегистрацияВПенсионномФонде) Тогда
		
		Ключ = "РегистрационныйНомерПФР" + ?(ЭтоЮрЛицо, "", "_ИП");
		
		ДанныеГосРеестра.Вставить("КодОрганаПФР", ДанныеПоИННРегистрацияВПенсионномФонде.КодОрганаПФР);
		ДанныеГосРеестра.Вставить(Ключ, ДанныеПоИННРегистрацияВПенсионномФонде.РегистрационныйНомерПФР);
		
		ЗаполнитьСведенияОбОтделенииПФР(ДанныеГосРеестра);
		
	КонецЕсли;
	
	ДанныеГосРеестра.Вставить("КодОрганаФСС", Неопределено);
	ДанныеГосРеестра.Вставить("НаименованиеТерриториальногоОрганаФСС", Неопределено);
	ДанныеГосРеестра.Вставить("РегистрационныйНомерФСС", Неопределено);
	ДанныеГосРеестра.Вставить("ПлатежныеРеквизитыФССПредставление", Неопределено);
	ДанныеГосРеестра.Вставить("НаименованиеТерриториальногоОрганаФСС", Неопределено);
	
	Если ЗначениеЗаполнено(ДанныеПоИННРегистрацияВФСС) Тогда
		
		ДанныеГосРеестра.Вставить("КодОрганаФСС", ДанныеПоИННРегистрацияВФСС.КодОрганаФСС);
		ДанныеГосРеестра.Вставить("НаименованиеТерриториальногоОрганаФСС", ДанныеПоИННРегистрацияВФСС.НаименованиеОрганаФСС);
		ДанныеГосРеестра.Вставить("РегистрационныйНомерФСС", ДанныеПоИННРегистрацияВФСС.РегистрационныйНомерФСС);
		
		ЗаполнитьСведенияОбОтделенииФСС(ДанныеГосРеестра);
		
	КонецЕсли;
	
	ЗаполнитьСписокВыбораНаименования(ДанныеГосРеестра, ИндексОрганизации);
	ДанныеГосРеестра.Вставить("НаименованиеПлательщикаПриПеречисленииНалогов", НаименованиеПлательщикаПоУмолчанию(ДанныеГосРеестра));
	
КонецПроцедуры

&НаСервере
Функция НаименованиеПлательщикаПоУмолчанию(ДанныеГосРеестра)
	
	// Для организации заполняем из полного наименования
	Если ДанныеГосРеестра.ЭтоЮрЛицо Тогда
		
		Возврат ДанныеГосРеестра.НаименованиеПолное;
		
	КонецЕсли;
	
	// Для ИП:
	// п.4 Приложения 1 к Приказу Минфина 107н:
	// Фамилия имя отчество "(ИП)" "//"Адрес регистрации"//"
	Шаблон = "%1 (ИП) //%2//";
	
	ФИО = ДанныеГосРеестра.Фамилия + ?(ПустаяСтрока(ДанныеГосРеестра.Имя), "", " " + ДанныеГосРеестра.Имя) + ?(ПустаяСтрока(ДанныеГосРеестра.Отчество), "", " " + ДанныеГосРеестра.Отчество);
	АдресРегистрации = ДанныеГосРеестра.ЮридическийАдрес;
	
	Возврат СтрШаблон(Шаблон, ФИО, АдресРегистрации);
	
КонецФункции

&НаСервере
Функция ВыделитьИзНаименованияОПФ(КлассификаторОПФ, знач НаименованиеОрганизации)
	
	Результат = Новый Структура("НаименованиеБезОПФ, КраткаяФорма, ПолнаяФорма", НаименованиеОрганизации, "", "");
	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(НаименованиеОрганизации);
	
	Для Каждого Слово Из МассивСлов Цикл
		Для Каждого ДанныеОПФ Из КлассификаторОПФ Цикл
			Если ВРег(СокрЛП(Слово)) = ВРег(ДанныеОПФ.ПолнаяФорма) Тогда
				Результат.КраткаяФорма = ДанныеОПФ.КраткаяФорма;
				Результат.ПолнаяФорма = ДанныеОПФ.ПолнаяФорма;
				Результат.НаименованиеБезОПФ = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(СокрЛП(СтрЗаменить(НаименованиеОрганизации, Слово, "")));
				Возврат Результат;
			ИначеЕсли Не ПустаяСтрока(ДанныеОПФ.КраткаяФорма) И ВРег(СокрЛП(Слово)) = ВРег(ДанныеОПФ.КраткаяФорма) Тогда
				Результат.КраткаяФорма = ДанныеОПФ.КраткаяФорма;
				Результат.ПолнаяФорма = ДанныеОПФ.ПолнаяФорма;
				Результат.НаименованиеБезОПФ = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(СокрЛП(СтрЗаменить(НаименованиеОрганизации, Слово, "")));
				Возврат Результат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораНаименования(ДанныеГосРеестра, ИндексОрганизации)
	
	КлассификаторОПФ = РегламентированныеДанныеПовтИсп.КлассификаторОрганизационноПравовыхФорм();
	
	СписокВыбора = Элементы["Наименование" + ИндексОрганизации].СписокВыбора;
	СписокВыбора.Очистить();
	
	Если Не ПустаяСтрока(ДанныеГосРеестра.НаименованиеПолное) Тогда
		
		ОрганизационноПравоваяФорма = ВыделитьИзНаименованияОПФ(КлассификаторОПФ, ДанныеГосРеестра.НаименованиеПолное);
		
		СписокВыбора.Добавить(ОрганизационноПравоваяФорма.НаименованиеБезОПФ);
		
		Если НЕ ПустаяСтрока(ОрганизационноПравоваяФорма.КраткаяФорма) Тогда
			
			СписокВыбора.Вставить(0, ОрганизационноПравоваяФорма.НаименованиеБезОПФ + " " + ОрганизационноПравоваяФорма.КраткаяФорма);
			СписокВыбора.Добавить(ОрганизационноПравоваяФорма.КраткаяФорма + " " + ОрганизационноПравоваяФорма.НаименованиеБезОПФ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СписокВыбора.Количество() > 0 Тогда
		
		ДанныеГосРеестра.Наименование = СписокВыбора[0].Значение;
		Элементы["Наименование" + ИндексОрганизации].КнопкаВыпадающегоСписка = Истина;
		
	Иначе
		
		ДанныеГосРеестра.Наименование = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьНаименованиеИП(Индекс)
	
	// ::: Краткое наименование
	Наименование = СокрЛП(ЭтотОбъект["ИП_Фамилия" + Индекс]);
	Если НЕ ПустаяСтрока(ЭтотОбъект["ИП_Имя" + Индекс]) Тогда
		
		Наименование = Наименование + " " + Лев(СокрЛ(ЭтотОбъект["ИП_Имя" + Индекс]), 1) + ".";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭтотОбъект["ИП_Отчество" + Индекс]) Тогда
		
		Наименование = Наименование + " " + Лев(СокрЛ(ЭтотОбъект["ИП_Отчество" + Индекс]), 1) + ".";
		
	КонецЕсли;
	
	Наименование = Наименование + НСтр("ru = ' ИП'");
	
	// ::: Полное наименование
	НаименованиеПолное = "ИП " + СокрЛП(ЭтотОбъект["ИП_Фамилия" + Индекс]);
	Если НЕ ПустаяСтрока(ЭтотОбъект["ИП_Имя" + Индекс]) Тогда
		
		НаименованиеПолное = НаименованиеПолное + " " + Лев(СокрЛ(ЭтотОбъект["ИП_Имя" + Индекс]), 1) + ".";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭтотОбъект["ИП_Отчество" + Индекс]) Тогда
		
		НаименованиеПолное = НаименованиеПолное + " " + Лев(СокрЛ(ЭтотОбъект["ИП_Отчество" + Индекс]), 1) + ".";
		
	КонецЕсли;
	
	Возврат Новый Структура("Наименование, НаименованиеПолное", Наименование, НаименованиеПолное);
	
КонецФункции

&НаКлиенте
Процедура ПриВыбореВидаБизнеса(ВыбранныйВидБизнеса)
	
	Если ЗначениеЗаполнено(ВыбранныйВидБизнеса) Тогда
		ИмяКнопки = "ВидБизнеса" + ВыбранныйВидБизнеса;
	Иначе
		ИмяКнопки = "ВидБизнесаНеУказан";
	КонецЕсли;
	
	ВидБизнесаУжеВыбран = Элементы[ИмяКнопки].ЦветФона = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ФонУправляющегоПоля");
	
	Если ВидБизнесаУжеВыбран Тогда
		НайденныйЭлемент = ВидыБизнеса.НайтиПоЗначению(ВыбранныйВидБизнеса);
		Если НайденныйЭлемент <> Неопределено Тогда
			ВидыБизнеса.Удалить(НайденныйЭлемент);
		КонецЕсли;
		Элементы[ИмяКнопки].ЦветФона = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ЦветФонаКнопки");
	Иначе
		ВидыБизнеса.Добавить(ВыбранныйВидБизнеса);
		Элементы[ИмяКнопки].ЦветФона = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ФонУправляющегоПоля");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АутентифицироватьПользователя(Знач Логин, Знач Пароль)
	
	РезультатАутентификации = ИнтернетПоддержкаПользователей.ПроверитьЛогинИПароль(Логин, Пароль);
	
	Если РезультатАутентификации.КодОшибки <> "НеверныйЛогинИлиПароль" Тогда
		ДанныеАутентификации = Новый Структура("Логин, Пароль", Логин, Пароль);
		СохранитьДанныеАутентификации(ДанныеАутентификации);
	КонецЕсли;
	
	Возврат РезультатАутентификации;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьДанныеАутентификации(Знач ДанныеАутентификации)
	
	УстановитьПривилегированныйРежим(Истина);
	ИнтернетПоддержкаПользователей.СохранитьДанныеАутентификации(ДанныеАутентификации);
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнениеЛогинаИПароляКорректно()
	
	Если ПустаяСтрока(ЛогинИнтернетПоддержки) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Поле ""Логин"" не заполнено.'"),, "ЛогинИнтернетПоддержки");
		Возврат Ложь;
		
	ИначеЕсли ПустаяСтрока(ПарольИнтернетПоддержки) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Поле ""Пароль"" не заполнено.'"),, "ПарольИнтернетПоддержки");
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура НастроитьФормуМобильныйКлиент()
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Лево.Видимость = Ложь;
	Элементы.Право.Видимость = Ложь;
	Элементы.ВидБизнесаОптоваяТорговля.Высота = 1;
	Элементы.ВидБизнесаРозничнаяТорговля.Высота = 1;
	Элементы.ВидБизнесаИнтернетМагазин.Высота = 1;
	Элементы.ВидБизнесаРаботыУслуги.Высота = 1;
	Элементы.ВидБизнесаПроизводство.Высота = 1;
	Элементы.ВидБизнесаНеУказан.Высота = 1;
	Элементы.Центр.ВыравниваниеЭлементовИЗаголовков = ВариантВыравниванияЭлементовИЗаголовков.Авто;
	Элементы.ДекорацияОтступПатент1.Видимость = Ложь;
	Элементы.ДекорацияОтступСистемаНалогообложение1.Видимость = Ложь;
	Элементы.ДекорацияОтступЗаголовокНалогообложение1.Видимость = Ложь;
	Элементы.ДекорацияОтступСотрудники1.Видимость = Ложь;
	Элементы.ИП_Фамилия1.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элементы.ДекорацияМалыйОтступ1.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуМобильноеПриложение()
	
	Если МобильноеПриложениеВызовСервера.ЕстьОграничениеМобильногоУНФ() 
		ИЛИ МобильноеПриложениеВызовСервера.ЕстьОграничениеМобильногоУНФ20() Тогда
		Элементы.ГруппаЗаголовок2.Видимость = Ложь;
		Элементы.ГруппаВидДеятельности.Видимость = Ложь;
		Элементы.ГруппаЗаголовок3.Видимость = Ложь;
		Элементы.ГруппаОрганизации.Видимость = Ложь;
		Элементы.ГруппаНавигация.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
