
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Инициализация(Отказ);
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Отказ = Истина;
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	ЗагрузитьНастройки();
	СоздатьЭлементыБыстрыеДействия();
	
	АдресНастроекБыстрыхДействий = ПоместитьВоВременноеХранилище(НастройкиБыстрыхДействий.Выгрузить(), УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВыбранноеЗначение.Событие="НастройкаБыстрыхДействий" Тогда
		
		ДобавленныеБыстрыеДействия.Очистить();
		Для каждого Идентификатор Из ВыбранноеЗначение.БыстрыеДействия Цикл
			ДобавленныеБыстрыеДействия.Добавить().Идентификатор = Идентификатор;
		КонецЦикла;
		СохранитьНастройкуБыстрыхДействийСервер();

	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура Подключаемый_БыстроеДействиеНажатие(Элемент)
	
	Идентификатор = СтрЗаменить(Элемент.Имя, "БыстроеДействие", "");
	ВыполнитьБыстроеДействие(Идентификатор);
	
	#Если ВебКлиент Тогда
		
	Если Элементы.Найти("БыстроеДействиеНастройка")<>Неопределено Тогда
		ТекущийЭлемент = Элементы.БыстроеДействиеНастройка;
	КонецЕсли; 
	
	#КонецЕсли 
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура Инициализация(Отказ)
	
	ДоступныЗакупки = УправлениеДоступомУНФ.ДоступноСозданиеДокументовРазделаЗакупки();
	ДоступнаКасса = ДоступнаКасса();
	ДоступноДобавлениеТоваров = ПравоДоступа("Добавление", Метаданные.Справочники.Номенклатура);
	
	Если ПолучитьФункциональнуюОпцию("УчетРозничныхПродаж") И ПравоДоступа("Добавление", Метаданные.Документы.ЧекККМ) Тогда
		ДобавитьБыстроеДействие("РабочееМестоКассира", НСтр("ru = 'РМК'"), "БыстроеДействиеОткрытьРМК");
	КонецЕсли;
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПокупателя) Тогда
		ДобавитьБыстроеДействие("ДобавитьЗаказПокупателя", НСтр("ru = 'Оформить заказ'"),
			"БыстроеДействиеСоздатьЗаказПокупателя");
	КонецЕсли;
	Если ПравоДоступа("Добавление", Метаданные.Документы.СчетНаОплату) Тогда
		ДобавитьБыстроеДействие("ДобавитьСчетНаОплату", НСтр("ru = 'Выписать счет'"),
			"БыстроеДействиеСоздатьСчетНаОплату");
	КонецЕсли;
	Если ПравоДоступа("Добавление", Метаданные.Документы.РасходнаяНакладная) Тогда
		ДобавитьБыстроеДействие("ДобавитьРасходнуюНакладную", НСтр("ru = 'Продать'"),
			"БыстроеДействиеСоздатьРасходнуюНакладную");
	КонецЕсли;
	Если ДоступныЗакупки Тогда
		ДобавитьБыстроеДействие("ДобавитьПриходнуюНакладную", НСтр("ru = 'Купить'"),
			"БыстроеДействиеСоздатьПриходнуюНакладную");
	КонецЕсли;
	Если ДоступнаКасса Тогда
		ДобавитьБыстроеДействие("ДобавитьПоступлениеВКассу", НСтр("ru = 'Принять оплату'"),
			"БыстроеДействиеСоздатьПоступлениеВКассу");
		ДобавитьБыстроеДействие("ДобавитьРасходИзКассы", НСтр("ru = 'Оплатить'"), "БыстроеДействиеСоздатьРасходИзКассы");
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказПокупателя) Тогда
		ДобавитьБыстроеДействие("СписокЗаказовПокупателя", НСтр("ru = 'Заказы'"),
			"БыстроеДействиеСписокЗаказовПокупателей");
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Документы.РасходнаяНакладная) Тогда
		ДобавитьБыстроеДействие("СписокРасходныхНакладных", НСтр("ru = 'Продажи'"),
			"БыстроеДействиеСписокРасходныхНакладных");
	КонецЕсли;
	Если ДоступнаКасса Тогда
		ДобавитьБыстроеДействие("СписокКассовыхДокументов", НСтр("ru = 'Оплаты'"),
			"БыстроеДействиеЖурналКассовыхДокументов");
	КонецЕсли;
	Если ДоступныЗакупки Тогда
		ДобавитьБыстроеДействие("СписокПриходныхНакладных", НСтр("ru = 'Закупки'"),
			"БыстроеДействиеСписокПриходныхНакладных");
	КонецЕсли;
	Если ДоступноДобавлениеТоваров Тогда
		ДобавитьБыстроеДействие("СписокНоменклатуры", НСтр("ru = 'Товары и услуги'"),
			"БыстроеДействиеСписокНоменклатуры");
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Справочники.Контрагенты) Тогда
		ДобавитьБыстроеДействие("СписокПокупателей", НСтр("ru = 'Покупатели'"), "БыстроеДействиеСписокПокупателей");
	КонецЕсли;
	Если ДоступныЗакупки Тогда
		ДобавитьБыстроеДействие("СписокПоставщиков", НСтр("ru = 'Поставщики'"), "БыстроеДействиеСписокПоставщиков");
	КонецЕсли; 
	
	Если НастройкиБыстрыхДействий.Количество()=0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры


&НаСервере
Процедура ЗагрузитьНастройки()
	
	ТаблицаБыстрыхДействий = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПульсБизнеса", "БыстрыеДействия");
	
	Если ТаблицаБыстрыхДействий=Неопределено Тогда
		БыстрыеДействияПоУмолчанию();
	Иначе
		ДобавленныеБыстрыеДействия.Очистить();
		Для каждого Стр Из ТаблицаБыстрыхДействий Цикл
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Идентификатор", Стр.Идентификатор);
			Строки = НастройкиБыстрыхДействий.НайтиСтроки(СтруктураОтбора);
			Если Строки.Количество()=0 Тогда
				// Недостаточно прав или устаревшее быстрое действие
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ДобавленныеБыстрыеДействия.Добавить();
			НоваяСтрока.Идентификатор = Стр.Идентификатор;
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки(ВидНастроек)
	
	Если ПустаяСтрока(ВидНастроек) ИЛИ ВидНастроек="БыстрыеДействия" Тогда
		Таб = ДобавленныеБыстрыеДействия.Выгрузить(, "Идентификатор");
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПульсБизнеса", "БыстрыеДействия", Таб);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура БыстрыеДействияПоУмолчанию()
	
	Если ПолучитьФункциональнуюОпцию("УчетРозничныхПродаж") Тогда
		
		ОтобразитьБыстроеДействие("РабочееМестоКассира");
		ОтобразитьБыстроеДействие("ДобавитьЗаказПокупателя");
		ОтобразитьБыстроеДействие("ДобавитьПоступлениеВКассу");
		ОтобразитьБыстроеДействие("ДобавитьРасходИзКассы");
		ОтобразитьБыстроеДействие("СписокНоменклатуры");
		ОтобразитьБыстроеДействие("СписокПокупателей");
		
	Иначе
		
		ОтобразитьБыстроеДействие("ДобавитьЗаказПокупателя");
		ОтобразитьБыстроеДействие("ДобавитьСчетНаОплату");
		ОтобразитьБыстроеДействие("ДобавитьРасходнуюНакладную");
		Если ДоступнаКасса() Тогда
			ОтобразитьБыстроеДействие("ДобавитьПоступлениеВКассу");
			ОтобразитьБыстроеДействие("ДобавитьРасходИзКассы");
		КонецЕсли; 
		ОтобразитьБыстроеДействие("СписокНоменклатуры");
		ОтобразитьБыстроеДействие("СписокПокупателей");
		
	КонецЕсли; 
	
	СохранитьНастройки("БыстрыеДействия");
	
КонецПроцедуры

&НаСервере
Функция ДоступнаКасса()
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПоступлениеВКассу) Тогда
		Возврат Истина;
	КонецЕсли; 
	Если ПравоДоступа("Добавление", Метаданные.Документы.РасходИзКассы) Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаСервере
Процедура ДобавитьБыстроеДействие(Идентификатор, Представление, ИмяКартинки)
	
	СтрокаТабличнойЧасти = НастройкиБыстрыхДействий.Добавить();
	СтрокаТабличнойЧасти.Идентификатор = Идентификатор;
	СтрокаТабличнойЧасти.Представление = Представление;
	СтрокаТабличнойЧасти.ИмяКартинки = ИмяКартинки;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьБыстроеДействие(Идентификатор)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Идентификатор", Идентификатор);
	ДобавленныеСтроки = ДобавленныеБыстрыеДействия.НайтиСтроки(СтруктураОтбора);
	Если ДобавленныеСтроки.Количество()>0 Тогда
		Возврат;
	КонецЕсли; 
	Строки = НастройкиБыстрыхДействий.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()=0 Тогда
		// Недостаточно прав или устаревшее быстрое действие
		Возврат;
	КонецЕсли; 
	НоваяСтрока = ДобавленныеБыстрыеДействия.Добавить();
	НоваяСтрока.Идентификатор = Идентификатор;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкуБыстрыхДействийСервер()
	
	СохранитьНастройки("БыстрыеДействия");
	СоздатьЭлементыБыстрыеДействия();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыБыстрыеДействия()
	
	УдалитьЭлементыРекурсивно(Элементы.ГруппаБыстрыеДействия); 
	
	Для каждого Стр Из ДобавленныеБыстрыеДействия Цикл
		ИмяЭлемента = "БыстроеДействие"+Стр.Идентификатор;
		ИмяГруппы = "ГруппаБыстроеДействие"+Стр.Идентификатор;
		Если Элементы.Найти(ИмяЭлемента)<>Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Идентификатор", Стр.Идентификатор);
		СтрокиНастроек = НастройкиБыстрыхДействий.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрНастроек Из СтрокиНастроек Цикл
			Группа = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ГруппаБыстрыеДействия);
			Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			Группа.ОтображатьЗаголовок = Ложь;
			Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			Элемент = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), Группа);
			Элемент.Вид = ВидДекорацииФормы.Картинка;
			Элемент.Гиперссылка = Истина;
			Элемент.Ширина = 7;
			Элемент.Высота = 3;
			Элемент.РазмерКартинки = РазмерКартинки.Пропорционально;
			Элемент.Подсказка = СтрНастроек.Представление;
			Если НЕ ПустаяСтрока(СтрНастроек.ИмяКартинки) Тогда
				Элемент.Картинка = БиблиотекаКартинок[СтрНастроек.ИмяКартинки];
			КонецЕсли; 
			Элемент.УстановитьДействие("Нажатие", "Подключаемый_БыстроеДействиеНажатие");
		КонецЦикла;
	КонецЦикла; 
	Элемент = Элементы.Добавить("БыстроеДействиеНастройка", Тип("ДекорацияФормы"), Элементы.ГруппаБыстрыеДействия);
	Элемент.Вид = ВидДекорацииФормы.Картинка;
	Элемент.Гиперссылка = Истина;
	Элемент.Ширина = 2;
	Элемент.Высота = 3;
	Элемент.РазмерКартинки = РазмерКартинки.Растянуть;
	Элемент.Подсказка = НСтр("ru = 'Настройка'");
	Элемент.Картинка = БиблиотекаКартинок.ПульсБизнесаНастроитьБыстрыеДействия;
	Элемент.УстановитьДействие("Нажатие", "Подключаемый_БыстроеДействиеНажатие");
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыРекурсивно(Группа)
	
	Пока Группа.ПодчиненныеЭлементы.Количество()>0 Цикл
		Элемент = Группа.ПодчиненныеЭлементы[0];
		Если ТипЗнч(Элемент) = Тип("КнопкаФормы") Тогда
			Команды.Удалить(Элемент.ИмяКоманды);
		ИначеЕсли ТипЗнч(Элемент)=Тип("ГруппаФормы") Тогда
			УдалитьЭлементыРекурсивно(Элемент);
		КонецЕсли; 
		Элементы.Удалить(Элемент);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьБыстроеДействие(Идентификатор)
	
	Если Идентификатор="ДобавитьЗаказПокупателя" Тогда
		ОткрытьФорму("Документ.ЗаказПокупателя.ФормаОбъекта");
	ИначеЕсли Идентификатор="ДобавитьСчетНаОплату" Тогда
		ОткрытьФорму("Документ.СчетНаОплату.ФормаОбъекта");
	ИначеЕсли Идентификатор="ДобавитьРасходнуюНакладную" Тогда
		ОткрытьФорму("Документ.РасходнаяНакладная.ФормаОбъекта");
	ИначеЕсли Идентификатор="ДобавитьПриходнуюНакладную" Тогда
		ОткрытьФорму("Документ.ПриходнаяНакладная.ФормаОбъекта");
	ИначеЕсли Идентификатор="ДобавитьПоступлениеВКассу" Тогда
		ОткрытьФорму("Документ.ПоступлениеВКассу.ФормаОбъекта");
	ИначеЕсли Идентификатор="ДобавитьРасходИзКассы" Тогда
		ОткрытьФорму("Документ.РасходИзКассы.ФормаОбъекта");
	ИначеЕсли Идентификатор="СписокЗаказовПокупателя" Тогда
		ОткрытьФорму("Документ.ЗаказПокупателя.ФормаСписка");
	ИначеЕсли Идентификатор="СписокКассовыхДокументов" Тогда
		ОткрытьФорму("ЖурналДокументов.ДокументыПоКассе.ФормаСписка");
	ИначеЕсли Идентификатор="СписокРасходныхНакладных" Тогда
		ОткрытьФорму("Документ.РасходнаяНакладная.ФормаСписка");
	ИначеЕсли Идентификатор="СписокПриходныхНакладных" Тогда
		ОткрытьФорму("Документ.ПриходнаяНакладная.ФормаСписка");
	ИначеЕсли Идентификатор="СписокНоменклатуры" Тогда
		ОткрытьФорму("Справочник.Номенклатура.ФормаСписка");
	ИначеЕсли Идентификатор="СписокПокупателей" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Покупатель", Истина));
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", "СписокПокупателей");
		ОткрытьФорму("Справочник.Контрагенты.ФормаСписка", ПараметрыФормы);
	ИначеЕсли Идентификатор="СписокПоставщиков" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Поставщик", Истина));
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", "СписокПоставщиков");
		ОткрытьФорму("Справочник.Контрагенты.ФормаСписка", ПараметрыФормы);
	ИначеЕсли Идентификатор="РабочееМестоКассира" Тогда
		ЗначенияЗаполнения = ПолучитьКассуККМИТерминалПоУмолчанию();
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
		Если ТребуетсяОткрытьОкноВыбораКассы(ЗначенияЗаполнения) Тогда
			ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаДокумента_РМК_ОкноВыбораКассы", 
			Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения));
		Иначе
			ОткрытьФорму(
			"Документ.ЧекККМ.Форма.ФормаДокумента_РМК",
			Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения));
		КонецЕсли;
	ИначеЕсли Идентификатор="Настройка" Тогда
		СтруктураОткрытия = Новый Структура;
		Идентификаторы = Новый Массив;
		Для каждого Стр Из ДобавленныеБыстрыеДействия Цикл
			Идентификаторы.Добавить(Стр.Идентификатор);
		КонецЦикла; 
		СтруктураОткрытия.Вставить("ДобавленныеБыстрыеДействия", Идентификаторы);
		СтруктураОткрытия.Вставить("АдресНастроекБыстрыхДействий", АдресНастроекБыстрыхДействий);
		ОткрытьФорму("Обработка.БыстрыеДействия.Форма.ФормаНастройкиБыстрыхДействий", СтруктураОткрытия, ЭтотОбъект);
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяОткрытьОкноВыбораКассы(ЗначенияЗаполнения)
	
	Если Не ЗначениеЗаполнено(ЗначенияЗаполнения.КассаККМ) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияЗаполнения.КоличествоЭквайринговыхТерминалов)
		И Не ЗначениеЗаполнено(ЗначенияЗаполнения.ЭквайринговыйТерминал) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПолучитьКассуККМИТерминалПоУмолчанию() Экспорт
	
	СтруктураПараметров = Новый Структура("КассаККМ, ЭквайринговыйТерминал, КоличествоЭквайринговыхТерминалов, Организация, СтруктурнаяЕдиница", 
		Справочники.КассыККМ.ПустаяСсылка(), Справочники.ЭквайринговыеТерминалы.ПустаяСсылка(), 0);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассыККМ.СтруктурнаяЕдиница,
	|	КассыККМ.Владелец КАК Организация
	|ПОМЕСТИТЬ КассыККМ
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	НЕ КассыККМ.ПометкаУдаления
	|	И КассыККМ.ТипКассы = &ТипКассы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.Ссылка КАК ЭквайринговыйТерминал,
	|	ЭквайринговыеТерминалы.Касса
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КассыККМ КАК КассыККМ
	|		ПО ЭквайринговыеТерминалы.Касса = КассыККМ.КассаККМ
	|ГДЕ
	|	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
	|	И ЭквайринговыеТерминалы.Касса.ТипКассы = &ТипКассы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КассыККМ.КассаККМ,
	|	КассыККМ.СтруктурнаяЕдиница,
	|	КассыККМ.Организация
	|ИЗ
	|	КассыККМ КАК КассыККМ");
	
	Запрос.УстановитьПараметр("ТипКассы", Перечисления.ТипыКассККМ.ФискальныйРегистратор);
	
	МРезультатов = Запрос.ВыполнитьПакет();
	Выборка = МРезультатов[2].Выбрать();
	КоличествоКассККМ = Выборка.Количество();
	Если КоличествоКассККМ = 1 
	   И Выборка.Следующий() Тогда
	
		СтруктураПараметров.КассаККМ = Выборка.КассаККМ;
		СтруктураПараметров.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
		СтруктураПараметров.Организация = Выборка.Организация;
		
	Иначе
		
		СтруктураПараметров.КассаККМ = Неопределено;
		
	КонецЕсли;
	
	Если КоличествоКассККМ = 1 Тогда
		ТЗ_ЭТ = МРезультатов[1].Выгрузить();
		
		ЭТКассыПоУмолчанию = ТЗ_ЭТ.НайтиСтроки(Новый Структура("Касса", СтруктураПараметров.КассаККМ));
		
		СтруктураПараметров.КоличествоЭквайринговыхТерминалов = ЭТКассыПоУмолчанию.Количество();
		Если ЭТКассыПоУмолчанию.Количество() = 1 Тогда
			
			СтруктураПараметров.ЭквайринговыйТерминал = ЭТКассыПоУмолчанию[0].ЭквайринговыйТерминал;
			
		Иначе
			
			СтруктураПараметров.ЭквайринговыйТерминал = Неопределено;
			
		КонецЕсли;
	Иначе
		СтруктураПараметров.ЭквайринговыйТерминал = Неопределено;
	КонецЕсли;
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьКассуПоУмолчанию()

#КонецОбласти
 