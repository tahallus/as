
#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОбработчикУстановкиШаблонаЦенников(ВыбранноеЗначение, Параметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		Количество = 0;
		
		МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
			СтрокаТЧ.ШаблонЦенника  = ВыбранноеЗначение;
			СтрокаТЧ.Выбран         = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Объект.Режим);
			
			Если СтрокаТЧ.Выбран Тогда
				Количество = Количество + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		КоличествоВсего = МассивСтрок.Количество();
		
		Текст = НСтр("ru = 'Установлен шаблон ""%Шаблон%"".'");
		Текст = СтрЗаменить(Текст, "%Шаблон%", ВыбранноеЗначение);
		
		ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего);
		
		ОбновитьТипыПринтеров(МассивСтрок, "Ценник");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикУстановкиШаблонаЭтикеток(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		Количество = 0;
		
		Если ДополнительныеПараметры.ТекущаяСтраница = "СтраницаТовары" Тогда
			МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
			Для Каждого НомерСтроки Из МассивСтрок Цикл
				СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
				СтрокаТЧ.ШаблонЭтикетки = ВыбранноеЗначение;
				СтрокаТЧ.Выбран = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Объект.Режим);
				
				Если СтрокаТЧ.Выбран Тогда
					Количество = Количество + 1;
				КонецЕсли;
				
			КонецЦикла;
			
			ОбновитьТипыПринтеров(МассивСтрок, "Этикетка");
			
		КонецЕсли;
		
		КоличествоВсего = МассивСтрок.Количество();
		
		Текст = НСтр("ru = 'Установлен шаблон ""%Шаблон%"".'");
		Текст = СтрЗаменить(Текст, "%Шаблон%", ВыбранноеЗначение);
		
		ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗаполнитьТаблицуТоваров(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТаблицуТоваровНаСервере(Истина);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ЗаполнитьТаблицуТоваровНаСервере(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеУстановитьКоличествоЦенников(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		
		Количество = 0;
		
		МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
			СтрокаТЧ.КоличествоЦенников  = ВыбранноеЗначение;
			СтрокаТЧ.Выбран              = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Объект.Режим);
			
			Если СтрокаТЧ.Выбран Тогда
				Количество = Количество + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		КоличествоВсего = МассивСтрок.Количество();
		
		Текст = НСтр("ru = 'Установлено количество ценников %Количество%.'");
		Текст = СтрЗаменить(Текст, "%Количество%", ВыбранноеЗначение);
		
		ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеУстановитьКоличествоЭтикеток(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		
		Количество = 0;
		Если ДополнительныеПараметры.ТекущаяСтраница = "СтраницаТовары" Тогда
			
			МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
			Для Каждого НомерСтроки Из МассивСтрок Цикл
				СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
				СтрокаТЧ.КоличествоЭтикеток  = ВыбранноеЗначение;
				СтрокаТЧ.Выбран              = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Объект.Режим);
				
				Если СтрокаТЧ.Выбран Тогда
					Количество = Количество + 1;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПодборПроизведен(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		АдресЗапасовВХранилище	= РезультатЗакрытия.АдресКорзиныВХранилище;
		ИДВладельца				= РезультатЗакрытия.УникальныйИдентификаторФормыВладельца;
		
		Если НЕ ПустаяСтрока(АдресЗапасовВХранилище) 

			И ИДВладельца <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
			И ИДВладельца = УникальныйИдентификатор
			Тогда

			ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, "Товары", Истина, Истина);
			
			СтруктураПолей = Новый Структура;
			СтруктураПолей.Вставить("Штрихкод");
			СтруктураПолей.Вставить("Шаблоны");
			ЗаполнитьПоляТаблицы(СтруктураПолей);
	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЦеныПоВидуЦены = 1;
	
	ДополнительныеКолонкиНоменклатуры = Константы.ПредставлениеКодовВПечатныхФормах.Получить();
	
	ИспользоватьОбменСПодключаемымОборудованием = ПолучитьФункциональнуюОпцию("ИспользоватьОбменСПодключаемымОборудованиемOffline");
	
	ЗагрузитьНастройкиОтбораПоУмолчанию(КомпоновщикНастроек, "ПоляШаблонаПоУмолчанию");
	
	СтруктураДанных = Новый Структура;
	
	Если ЗначениеЗаполнено(Параметры.АдресВХранилище) Тогда
		
		СтруктураДанных = ПолучитьИзВременногоХранилища(Параметры.АдресВХранилище);
		
		Если СтруктураДанных.Свойство("Запасы") Тогда
			Объект.ИсходныеДанные.Загрузить(СтруктураДанных.Запасы);
			СтраницаПриОткрытии = "СтраницаТовары";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураДанных.СтруктураДействий) Тогда
			
			ПараметрДействия = Неопределено;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("УстановитьРежим", ПараметрДействия) Тогда
				УстановитьРежим(ПараметрДействия);
			Иначе
				УстановитьРежим("ПечатьЭтикеток");
			КонецЕсли;
			
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьСклад", ПараметрДействия) Тогда
				УстановитьЭлементОтбораСКД("Склад", ПараметрДействия, Истина);
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьОрганизацию", ПараметрДействия) Тогда
				УстановитьЭлементОтбораСКД("Организация", ПараметрДействия, Истина);
			КонецЕсли;
			
			СтруктураДанных.СтруктураДействий.Свойство("РежимПечатиИзОбработки", ПараметрДействия);
			Объект.ПечатьИзОбработки = ПараметрДействия;
			
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьВидЦен", ПараметрДействия) Тогда
				Объект.ВидЦен = ПараметрДействия;
			КонецЕсли;

			Если СтруктураДанных.СтруктураДействий.Свойство("УстановитьСпособПолученияЦен", ПараметрДействия) Тогда
				Объект.ЦеныПоВидуЦены = ПараметрДействия;
				ЦеныПоВидуЦены = Число(Объект.ЦеныПоВидуЦены);
			Иначе
				ЦеныПоВидуЦены = 0;
			КонецЕсли;

			Если СтруктураДанных.СтруктураДействий.Свойство("УстановитьДатуПолученияЦен", ПараметрДействия) Тогда
				
				Объект.ЦеныНаДату = ПараметрДействия;
				Объект.ЦеныНаДатуАкционные = ПараметрДействия;
				
			Иначе
				
				Объект.ЦеныНаДату = ТекущаяДатаСеанса();
				Объект.ЦеныНаДатуАкционные = ТекущаяДатаСеанса();
				
			КонецЕсли;

			Если СтруктураДанных.СтруктураДействий.Свойство("ПоказыватьКолонкуКоличествоВДокументе", ПараметрДействия) Тогда
				Элементы.ТоварыКоличествоВДокументе.Видимость = ПараметрДействия;
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("УстановитьРежимПечатиИзДокумента", ПараметрДействия) Тогда
				Объект.ПечатьИзДокумента = ПараметрДействия;
			КонецЕсли;
			
			ЗаполнитьКоличествоЭтикетокПоДокументу        = СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьКоличествоЭтикетокПоДокументу", ПараметрДействия);
			
			Если СтруктураДанных.СтруктураДействий.Свойство("СкрыватьКомандуЗаполненияПоДокументу", ПараметрДействия) Тогда
				Элементы.ЗаполнитьКоличествоЭтикетокПоДокументу.Видимость = Ложь;
				СкрыватьКомандуЗаполненияПоДокументу = Истина;
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьТаблицуТоваров", ПараметрДействия) Тогда
				ЗаполнитьТаблицуТоваровНаСервере();
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.ПечатьИзДокумента Тогда
			МассивДокументов = Новый Массив;
			СтруктураДанных.Свойство("МассивДокументов", МассивДокументов);
			СписокДокументов.ЗагрузитьЗначения(МассивДокументов);
		КонецЕсли;
		
	Иначе
		// Вызов обработки из интерфейса.
		
		ВосстановитьНастройкиНаСервере();
		Объект.ЦеныНаДату = ТекущаяДатаСеанса();
		Объект.ЦеныНаДатуАкционные = ТекущаяДатаСеанса();
		ЗаполнитьКоличествоЭтикетокПоДокументу = Ложь;
		Если НЕ ЗначениеЗаполнено(Объект.Режим) Тогда
			УстановитьРежимПечатьЦенниковИЭтикетокНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементов();
	ОбновитьВидимостьЭлементов();
	
	ИмяТаблицыВыборки = ИмяТаблицыВыборки(Элементы.СтраницыТиповПечати.ТекущаяСтраница.Имя);
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	// Конец ПодключаемоеОборудование

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(СтраницаПриОткрытии) Тогда
		Элементы.СтраницыТиповПечати.ТекущаяСтраница = Элементы[СтраницаПриОткрытии];
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
	УстановитьКнопкуПоУмолчанию();
	УстановитьОбъектОрганизация();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		ПересчитатьЦены(Неопределено);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		
		Окно.Активизировать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если (НЕ Объект.ПечатьИзДокумента)
		И (НЕ Объект.ПечатьИзОбработки) Тогда
		СохранитьНастройкиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Данные = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			Если Не ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Объект.ВидЦен = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
					ПользователиКлиент.ТекущийПользователь(), "ОсновнойВидЦенПродажи");
			КонецЕсли;

			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Гиперссылка1Нажатие(Элемент)
	ПоказатьЗначение(,СписокДокументов.Получить(0).Значение);
КонецПроцедуры

&НаКлиенте
Процедура Гиперссылка2Нажатие(Элемент)
	ПоказатьЗначение(,СписокДокументов.Получить(1).Значение);
КонецПроцедуры

&НаКлиенте
Процедура Гиперссылка3Нажатие(Элемент)
	ПоказатьЗначение(,СписокДокументов.Получить(2).Значение);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеДокументыНажатие(Элемент)
	ПоказатьЗначение(,СписокДокументов);
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныПриИзменении(Элемент)
	
	ПересчитатьЦены(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныНаДатуПриИзменении(Элемент)
	
	ПересчитатьЦены(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныНаДатуАкционныеПриИзменении(Элемент)
	ПересчитатьЦены(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенАкционныеПриИзменении(Элемент)
	ПересчитатьЦены(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоличествоЭтикетокПоДокументуПриИзменении(Элемент)
	
	ЗаполнитьКоличествоЦенниковИЭтикетокПоДокументуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыТиповПечатиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьКнопкуПоУмолчанию();
	ИмяТаблицыВыборки = ИмяТаблицыВыборки(Элементы.СтраницыТиповПечати.ТекущаяСтраница.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоЦенниковПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.Выбран = ПроверитьВозможностьВыбораТовара(ТекущиеДанные, Объект.Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоЭтикетокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.Выбран = ПроверитьВозможностьВыбораТовара(ТекущиеДанные, Объект.Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыШаблонЦенникаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.Выбран = ПроверитьВозможностьВыбораТовара(ТекущиеДанные, Объект.Режим);
	
	ОбновитьТипШаблона(ТекущиеДанные.ПолучитьИдентификатор(), "Ценник");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыШаблонЭтикеткиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.Выбран = ПроверитьВозможностьВыбораТовара(ТекущиеДанные, Объект.Режим);
	
	ОбновитьТипШаблона(ТекущиеДанные.ПолучитьИдентификатор(), "Этикетка");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбранПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока = ТекущиеДанные.НомерСтроки - 1;
	
	Если НЕ ТекущиеДанные.Выбран Тогда
		
	Иначе
		
		ОчиститьСообщения();
		
		ТекущиеДанные.Выбран = Истина;
		
		Если Объект.Режим = "ПечатьЦенниковИЭтикеток" Тогда
			
			Если (       ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
					И НЕ ЗначениеЗаполнено(ТекущиеДанные.КоличествоЦенников)
					И ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
					И ЗначениеЗаполнено(ТекущиеДанные.КоличествоЭтикеток)) Тогда
					
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнено количество ценников'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].КоличествоЦенников";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			ИначеЕсли (НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
					 И    ЗначениеЗаполнено(ТекущиеДанные.КоличествоЦенников)
					 И ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
					 И ЗначениеЗаполнено(ТекущиеДанные.КоличествоЭтикеток)) Тогда
					
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не выбран шаблон ценника'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].ШаблонЦенника";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			ИначеЕсли (ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
					 И ЗначениеЗаполнено(ТекущиеДанные.КоличествоЦенников)
					 И ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.КоличествоЭтикеток)) Тогда
					
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнено количество этикеток'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].КоличествоЭтикеток";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			ИначеЕсли (ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
					 И ЗначениеЗаполнено(ТекущиеДанные.КоличествоЦенников)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
					 И ЗначениеЗаполнено(ТекущиеДанные.КоличествоЭтикеток)) Тогда
					
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не выбран шаблон этикетки'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].ШаблонЭтикетки";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			ИначеЕсли (   ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.КоличествоЦенников)
					 И    ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.КоличествоЭтикеток)) Тогда
					
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнено количество ценников и(или) этикеток'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].КоличествоЦенников";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			ИначеЕсли (НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
					 И    ЗначениеЗаполнено(ТекущиеДанные.КоличествоЦенников)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
					 И    ЗначениеЗаполнено(ТекущиеДанные.КоличествоЭтикеток)) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не выбраны шаблоны ценников и(или) этикеток'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].ШаблонЦенника";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			ИначеЕсли (НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.КоличествоЦенников)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.КоличествоЭтикеток)) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнено количество ценников и(или) этикеток'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].КоличествоЦенников";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли Объект.Режим = "ПечатьЭтикеток" Тогда
			
			Если ТекущиеДанные.КоличествоЭтикеток = 0 Тогда
			
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнено количество этикеток'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].КоличествоЭтикеток";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не выбран шаблон этикетки'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].ШаблонЭтикетки";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли Объект.Режим = "ПечатьЦенников" Тогда
			
			Если ТекущиеДанные.КоличествоЦенников = 0 Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнено количество ценников'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].КоличествоЦенников";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не выбран шаблон ценника'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].ШаблонЦенника";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыШаблонЦенникаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ТоварыШаблонЦенникаНачалоВыбораЗавершение", ЭтаФорма);
	
	ПараметрыОткрытия = Новый Структура();
	
	ТипыШаблонов = Новый Массив;
	ТипыШаблонов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыШаблонов.ЭтикеткаЦенник"));
	ТипыШаблонов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток"));
	
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("ТипШаблона", ТипыШаблонов));
	
	ОткрытьФорму("Справочник.ХранилищеШаблонов.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма,,,, ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыШаблонЭтикеткиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ТоварыШаблонЭтикеткиНачалоВыбораЗавершение", ЭтаФорма);
	
	ПараметрыОткрытия = Новый Структура();
	
	ТипыШаблонов = Новый Массив;
	ТипыШаблонов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыШаблонов.ЭтикеткаЦенник"));
	ТипыШаблонов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток"));
	
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("ТипШаблона", ТипыШаблонов));
	
	ОткрытьФорму("Справочник.ХранилищеШаблонов.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма,,,, ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыШаблонЦенникаОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.ТипШаблонаЦенника = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыШаблонЭтикеткиОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.ТипШаблонаЭтикетки = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПриИзменении(Элемент)
	
	УстановитьОбъектОрганизация();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ВидЦен) Тогда 
		Объект.ВидЦен = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиент.ТекущийПользователь(), "ОсновнойВидЦенПродажи");
	КонецЕсли;
	
		
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения(
		"ПоискПоШтрихкодуЗавершение",
		ЭтотОбъект, 
		Новый Структура("ТекШтрихкод", ТекШтрихкод)
	);
	
	#Если МобильныйКлиент Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду",,,,,,ОбработкаЗавершения);
	#Иначе
		ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкоду()

#КонецОбласти

// Процедура вызывается при нажатии на кнопку "Выбрать выделенные платежи".
//
&НаКлиенте
Процедура ВыбратьВыделенныеСтроки(Команда)
	
	Количество = 0;
	ТекущаяСтраница = Элементы.СтраницыТиповПечати.ТекущаяСтраница.Имя;
	Если ТекущаяСтраница = "СтраницаТовары" Тогда
		
		МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
			СтрокаТЧ.Выбран = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Объект.Режим);
			
			Если СтрокаТЧ.Выбран Тогда
				Количество = Количество + 1;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	КоличествоВсего = МассивСтрок.Количество();
	ПоказатьОповещениеПользователюОВозможнойОшибке("", Количество, КоличествоВсего);
	
КонецПроцедуры

// Процедура вызывается при нажатии на кнопку "Исключить выделенные платежи".
//
&НаКлиенте
Процедура ИсключитьВыделенныеСтроки(Команда)
	
	ТекущаяСтраница = Элементы.СтраницыТиповПечати.ТекущаяСтраница.Имя;
	Если ТекущаяСтраница = "СтраницаТовары" Тогда
		
		МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
			СтрокаТЧ.Выбран = Ложь;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличествоПоУмолчанию(Команда)
	
	Количество = 0;
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
		
		Если Объект.Режим = "ПечатьЭтикеток" ИЛИ Объект.Режим = "ПечатьЦенниковИЭтикеток" Тогда
			
			Если ЗаполнитьКоличествоЭтикетокПоДокументу Тогда
				СтрокаТЧ.КоличествоЭтикеток = СтрокаТЧ.КоличествоВДокументе;
			Иначе
				СтрокаТЧ.КоличествоЭтикеток = ?(СтрокаТЧ.ОстатокНаСкладе > 0, СтрокаТЧ.ОстатокНаСкладе, 0);
			КонецЕсли;
			
		КонецЕсли;
		
		// Расчет количества Ценников.
		Если Объект.Режим = "ПечатьЦенников" ИЛИ Объект.Режим = "ПечатьЦенниковИЭтикеток" Тогда
			
			СтрокаТЧ.КоличествоЦенников = 1;
			
		КонецЕсли;
		
		СтрокаТЧ.Выбран              = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Объект.Режим);
		
		Количество = Количество + 1;
		
	КонецЦикла;
	
	КоличествоВсего = МассивСтрок.Количество();
	
	Текст = НСтр("ru = 'Установлено количество по умолчанию для  %Количество% строк.'");
	Текст = СтрЗаменить(Текст, "%Количество%", КоличествоВсего);
	
	ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовыйШтрихкодEAN13(Команда)
	
	Если Не ЗначениеЗаполнено(Элементы.Товары.ВыделенныеСтроки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'В списке отсутствуют выделенные строки'"));
		Возврат;
	КонецЕсли;
	
	УстановитьНовыеШтрихкодыНаСервере(13);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовыйШтрихкодEAN8(Команда)
	
	Если Не ЗначениеЗаполнено(Элементы.Товары.ВыделенныеСтроки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'В списке отсутствуют выделенные строки'"));
		Возврат;
	КонецЕсли;
	
	УстановитьНовыеШтрихкодыНаСервере(8);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	УстановитьОбъектОрганизация();
	
	ОчиститьСообщения();
	Объект.НажатаПечать = Истина;
	
	РежимПечати = "Ценники,Этикетки";
	Если Элементы.СтраницыТиповПечати.ТекущаяСтраница = Элементы.СтраницаТовары Тогда
		Если Объект.Товары.НайтиСтроки(Новый Структура("Выбран", Истина)).Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано ни одного товара'"));
			Возврат;
		КонецЕсли;
		Если Объект.Режим = "ПечатьЦенников" Тогда
			РежимПечати = "Ценники";
		ИначеЕсли Объект.Режим = "ПечатьЭтикеток" Тогда
			РежимПечати = "Этикетки";
		КонецЕсли;
		Объект.СтраницаПечати = "СтраницаТовары";
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		ОчиститьРаспечатанныеЦенники();
		Возврат;
	КонецЕсли;
	
	ДанныеПечати = Новый Массив;   // Добавим объект обработки печати этикеток и ценников в массив параметров печати.
	ДанныеПечати.Добавить(Объект); // В дальнейшем будем обращаться к объекту через ПараметрКоманды[0]		
	
	ПараметрКоманды = Новый Массив;   // Добавим объект обработки печати ценников и этикеток в массив параметров печати.
	ПараметрКоманды.Добавить(ПредопределенноеЗначение("Справочник.ХранилищеШаблонов.ПустаяСсылка")); // В дальнейшем будем обращаться к объекту через ПараметрКоманды[0].
	
	Если Элементы.СтраницыТиповПечати.ТекущаяСтраница <> Элементы.СтраницаТовары Тогда

		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Обработка.ПечатьЭтикетокИЦенников", // Для вызова метода менеджера обработки "Печать".
			РежимПечати, ПараметрКоманды, ЭтаФорма, // Форма владелец
			Новый Структура("Режим, РежимПечати", Объект.Режим, РежимПечати));

		ОчиститьРаспечатанныеЦенники();
		Возврат;
		
	КонецЕсли;

	Если ПроверитьТипШаблоновЭтикеток() Тогда
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Обработка.ПечатьЭтикетокИЦенников", // Для вызова метода менеджера обработки "Печать".
		РежимПечати, ПараметрКоманды, ЭтаФорма, // Форма владелец
		Новый Структура("Режим, РежимПечати, ДанныеПечати", Объект.Режим, РежимПечати, ДанныеПечати));
	КонецЕсли;

	ПараметрыОткрытия = Новый Структура();

	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("РежимПечати", РежимПечати);

	ПараметрКоманды = Новый Массив;
	ПараметрКоманды.Добавить(Объект);

	ПараметрыПечати.Вставить("ПараметрКоманды", ПараметрКоманды);
	ПараметрыПечати.Вставить("Форма", Объект);
	ПараметрыПечати.Вставить("ПараметрыПечати", Новый Структура("Режим, РежимПечати", Объект.Режим, РежимПечати));
	ПараметрыОткрытия.Вставить("ПараметрыПечати", ПараметрыПечати);

	ПараметрыПечатиДляПринтераЭтикеток = Новый Структура;

	ОбъектыПечати = Новый Массив;
	ОбъектыПечати.Добавить(Объект);

	ПараметрыПечатиДляПринтераЭтикеток.Вставить("ОбъектыПечати", ОбъектыПечати);
	ПараметрыПечатиДляПринтераЭтикеток.Вставить("МенеджерПечати", "Обработка.ПечатьЭтикетокИЦенников");
	ПараметрыПечатиДляПринтераЭтикеток.Вставить("ИдентификаторФормы", УникальныйИдентификатор);
	ПараметрыОткрытия.Вставить("ПараметрыПечатиДляПринтераЭтикеток", ПараметрыПечатиДляПринтераЭтикеток);

	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Обработка.ПечатьЭтикетокИЦенников.Форма.ФормаПечать", ПараметрыОткрытия, ЭтаФорма, , , , , Режим);

	ОчиститьРаспечатанныеЦенники();
	
КонецПроцедуры

&НаСервере
Функция НайтиОтборВГруппе(КоллекцияЭлементов, ИмяПоля)
	
	Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	НайденныйЭлемент = Неопределено;
	
	Для Каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора)=Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если ЭлементОтбора.ЛевоеЗначение = Поле Тогда
				НайденныйЭлемент =  ЭлементОтбора;
				Прервать;
			КонецЕсли;
			
		Иначе
			
			НайденныйЭлемент = НайтиОтборВГруппе(ЭлементОтбора.Элементы, ИмяПоля);
			Если Не НайденныйЭлемент = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденныйЭлемент
	
КонецФункции

&НаСервере
Функция НайтиОтборВКомпоновщике(ИмяПоля)
	
	Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	НайденныйЭлемент = Неопределено;
	
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		Если ТипЗнч(ЭлементОтбора)=Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если ЭлементОтбора.ЛевоеЗначение = Поле Тогда
				НайденныйЭлемент =  ЭлементОтбора;
				Прервать;
			КонецЕсли;
			
		Иначе
			
			НайденныйЭлемент = НайтиОтборВГруппе(ЭлементОтбора.Элементы, ИмяПоля);
			Если Не НайденныйЭлемент = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденныйЭлемент;
	
КонецФункции

&НаКлиенте
Процедура УстановитьОбъектОрганизация()
	
	// установка объект.организация исходя из отборов
	Объект.Организация = Неопределено;
	ПолеОрганизация = НайтиОтборВКомпоновщике("Организация");
	Если Не ПолеОрганизация = Неопределено Тогда
		
		Если ПолеОрганизация.Использование Тогда
			Объект.Организация = ПолеОрганизация.ПравоеЗначение;
		КонецЕсли;
		
	КонецЕсли;
	
	// Если отбор по организации не был установлен,
	// надо установить его равным организации по умолчанию
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Объект.Организация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиент.ТекущийПользователь(), "ОсновнаяОрганизация");
			
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = ПолучитьПредопределеннуюОрганизацию();
		КонецЕсли;
			
		УстановитьЭлементОтбораСКД("Организация", Объект.Организация, Истина);
		
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Товары Цикл
		Строка.Организация = Объект.Организация;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОтбор(Команда)
	
	Если Элементы.СтраницыТиповПечати.ТекущаяСтраница.Имя <> "СтраницаТовары" Тогда
		Возврат;
	КонецЕсли;
	
	ВидимостьОтбора = НЕ ВидимостьОтбора;
	
	УстановитьВидимостьОтбора(Элементы, ВидимостьОтбора);
	
КонецПроцедуры

// Процедура - обработчик события Действие команды Подбор
//
&НаКлиенте
Процедура Подбор(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ВидЦен) Тогда 
		Объект.ВидЦен = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиент.ТекущийПользователь(), "ОсновнойВидЦенПродажи");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		Объект.ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.Учетная");
	КонецЕсли;
	
	ОписаниеОповещенияПриЗакрытииПодбора = Новый ОписаниеОповещения("ОповещениеПодборПроизведен", ЭтотОбъект);
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект,, ЗаполнитьПараметрыПодбора(), ОписаниеОповещенияПриЗакрытииПодбора);
	
КонецПроцедуры

// Функция получает список товаров из временного хранилища
//
&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		НоваяСтрока.КоличествоЦенников = 1;
		НоваяСтрока.КоличествоЭтикеток = СтрокаЗагрузки.Количество;
		НоваяСтрока.ОстатокНаСкладе = СтрокаЗагрузки.Остаток;
		
		// Характеристики
		
		Если НоваяСтрока.Номенклатура.ИспользоватьХарактеристики
			Тогда
			ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(НоваяСтрока.Номенклатура);
			
			Если Не ЗначенияПоУмолчанию = Неопределено
				Тогда
				ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
			КонецЕсли;
			
			НоваяСтрока.Характеристика = ?(ЗначениеЗаполнено(НоваяСтрока.Характеристика), НоваяСтрока.Характеристика, ХарактеристикаПоУмолчанию);
			
		КонецЕсли; 
		// Конец Характеристики
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

&НаКлиенте
Процедура УстановитьКоличествоЦенников(Команда)
	
	ВыбранноеЗначение = Неопределено;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеУстановитьКоличествоЦенников", ЭтотОбъект);
	ПоказатьВводЧисла(ОписаниеОповещения,ВыбранноеЗначение, НСтр("ru = 'Введите количество ценников'"), 10, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличествоЭтикеток(Команда)
	
	ВыбранноеЗначение = Неопределено;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтраница", Элементы.СтраницыТиповПечати.ТекущаяСтраница.Имя);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеУстановитьКоличествоЭтикеток", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВводЧисла(ОписаниеОповещения, ВыбранноеЗначение, НСтр("ru = 'Введите количество этикеток'"), 10, 0);
	
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьШаблонЦенников(Команда)
	
	ПараметрыОткрытия = Новый Структура();
	
	МассивТиповШаблонов = Новый Массив;
	МассивТиповШаблонов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыШаблонов.ЭтикеткаЦенник"));
	МассивТиповШаблонов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток"));
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("ТипШаблона", МассивТиповШаблонов));
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбработчикУстановкиШаблонаЦенников", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.ХранилищеШаблонов.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьШаблонЭтикеток(Команда)
	
	ПараметрыОткрытия = Новый Структура();
	ТекущаяСтраница = Элементы.СтраницыТиповПечати.ТекущаяСтраница.Имя;
	Если Ложь Тогда
	Иначе
		ТипыШаблонов = Новый Массив;
		ТипыШаблонов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыШаблонов.ЭтикеткаЦенник"));
		ТипыШаблонов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток"));
	КонецЕсли;
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("ТипШаблона", ТипыШаблонов));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтраница", ТекущаяСтраница);
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбработчикУстановкиШаблонаЭтикеток", ЭтотОбъект, ДополнительныеПараметры);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.ХранилищеШаблонов.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимПечатьЦенников(Команда)
	
	УстановитьРежимПечатьЦенниковНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимПечатьЦенниковИЭтикеток(Команда)
	
	УстановитьРежимПечатьЦенниковИЭтикетокНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимПечатьЭтикеток(Команда)
	
	УстановитьРежимПечатьЭтикетокНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОтбору(Команда)
	
	ОчиститьСообщения();
	Объект.НажатаПечать = Ложь;
	
	ТекущаяСтраница = Элементы.СтраницыТиповПечати.ТекущаяСтраница.Имя;
	Если ТекущаяСтраница = "СтраницаТовары" Тогда
		
		Если Объект.Товары.Количество() = 0 Тогда
			ЗаполнитьТаблицуТоваровНаСервере(Ложь);
		Иначе
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеЗаполнитьТаблицуТоваров", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Сохранить данные о количестве, шаблонах в табличной части при перезаполнении?'"), РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Да);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтандартныеНастройки(Команда)
	
	ЗагрузитьНастройкиОтбораПоУмолчанию(КомпоновщикНастроек, "ПоляШаблонаПоУмолчанию");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСохраненияИВосстановленияНастроек

&НаСервере
Процедура СохранитьНастройкиНаСервере()
	
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("ВидимостьОтбора", ВидимостьОтбора);
	ПараметрыЗакрытия.Вставить("ВидимостьРежимаЗаполнения", ВидимостьРежимаЗаполнения);
	ПараметрыЗакрытия.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу", ЗаполнитьКоличествоЭтикетокПоДокументу);
	ПараметрыЗакрытия.Вставить("СкрыватьКомандуЗаполненияПоДокументу", СкрыватьКомандуЗаполненияПоДокументу);
	ПараметрыЗакрытия.Вставить("ЦеныПоВидуЦены", ЦеныПоВидуЦены);
	ПараметрыЗакрытия.Вставить("ВидЦен", Объект.ВидЦен);
	ПараметрыЗакрытия.Вставить("ВидЦенАкционные", Объект.ВидЦенАкционные);
	ПараметрыЗакрытия.Вставить("Режим", Объект.Режим);
	ПараметрыЗакрытия.Вставить("НастройкиОтбора", Новый ХранилищеЗначения(КомпоновщикНастроек.Настройки));
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПечатьЭтикетокИЦенниковНастройкиФормы", "", ПараметрыЗакрытия);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиНаСервере()
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПечатьЭтикетокИЦенниковНастройкиФормы", "");
	Если Настройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСохраненнойНастройки = Неопределено;
	Если Настройки.Свойство("ВидимостьОтбора", ЗначениеСохраненнойНастройки) Тогда
		ВидимостьОтбора = ЗначениеСохраненнойНастройки;
	КонецЕсли;
	Если Настройки.Свойство("ВидимостьРежимаЗаполнения", ЗначениеСохраненнойНастройки) Тогда
		ВидимостьРежимаЗаполнения = ЗначениеСохраненнойНастройки;
	КонецЕсли;
	Если Настройки.Свойство("ЗаполнитьКоличествоЭтикетокПоДокументу", ЗначениеСохраненнойНастройки) Тогда
		ЗаполнитьКоличествоЭтикетокПоДокументу = ЗначениеСохраненнойНастройки;
	КонецЕсли;
	Если Настройки.Свойство("СкрыватьКомандуЗаполненияПоДокументу", ЗначениеСохраненнойНастройки) Тогда
		СкрыватьКомандуЗаполненияПоДокументу = ЗначениеСохраненнойНастройки;
	КонецЕсли;
	Если Настройки.Свойство("ЦеныПоВидуЦены", ЗначениеСохраненнойНастройки) Тогда
		ЦеныПоВидуЦены = ЗначениеСохраненнойНастройки;
	КонецЕсли;
	Если Настройки.Свойство("ВидЦен", ЗначениеСохраненнойНастройки) Тогда
		Объект.ВидЦен = ЗначениеСохраненнойНастройки;
	КонецЕсли;
	
	Если Настройки.Свойство("ВидЦенАкционные", ЗначениеСохраненнойНастройки) Тогда
		Объект.ВидЦенАкционные = ЗначениеСохраненнойНастройки;
	КонецЕсли;
	
	Если Настройки.Свойство("Режим", ЗначениеСохраненнойНастройки) Тогда
		Если ЗначениеЗаполнено(ЗначениеСохраненнойНастройки) Тогда
			Объект.Режим = ЗначениеСохраненнойНастройки;
			УстановитьРежим(Объект.Режим);
		КонецЕсли;
	КонецЕсли;
	Если Настройки.Свойство("НастройкиОтбора", ЗначениеСохраненнойНастройки) Тогда
		Если ЗначениеСохраненнойНастройки <> Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(ЗначениеСохраненнойНастройки.Получить());
			УдалитьНепроверяемыеОтборыКомпоновщика(КомпоновщикНастроек);
		Иначе
			ЗагрузитьНастройкиОтбораПоУмолчанию(КомпоновщикНастроек, "ПоляШаблонаПоУмолчанию");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УдалитьНепроверяемыеОтборыВГруппе(КоллекцияЭлементов, Компоновщик)
	
	Количество = КоллекцияЭлементов.Количество();
	
	Для Индекс = 1 По Количество Цикл
		
		ЭлементОтбора = КоллекцияЭлементов[Количество - Индекс];
		
		Если ТипЗнч(ЭлементОтбора)=Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
			
			Если Компоновщик.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
				КоллекцияЭлементов.Удалить(ЭлементОтбора);
			КонецЕсли;
			
		Иначе
			УдалитьНепроверяемыеОтборыВГруппе(ЭлементОтбора.Элементы, Компоновщик);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНепроверяемыеОтборыКомпоновщика(Компоновщик)

	Количество = Компоновщик.Настройки.Отбор.Элементы.Количество();
	
	Для Индекс = 1 По Количество Цикл
		
		ЭлементОтбора = Компоновщик.Настройки.Отбор.Элементы[Количество - Индекс];
		
		Если ТипЗнч(ЭлементОтбора)=Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
			
			Если Компоновщик.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
				Компоновщик.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
			КонецЕсли;
			
		Иначе
			УдалитьНепроверяемыеОтборыВГруппе(ЭлементОтбора.Элементы, Компоновщик);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Процедура выполняет загрузку настроек отбора из настроек по умолчанию.
//
&НаСервере
Процедура ЗагрузитьНастройкиОтбораПоУмолчанию(Компоновщик, ИмяМакета)
	
	// Отбор для товаров
	СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет(ИмяМакета);
	АдресСКД = ПоместитьВоВременноеХранилище(
					СхемаКомпоновкиДанных,
					ЭтаФорма.УникальныйИдентификатор);
	Источник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);
	Компоновщик.Инициализировать(Источник);
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Компоновщик.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	УдалитьНепроверяемыеОтборыКомпоновщика(Компоновщик);
	
КонецПроцедуры

&НаСервере
Функция УстановитьЭлементОтбораСКД(ИмяПараметра, ЗначениеПараметра, Использование = Истина)
	
	Поле = Новый ПолеКомпоновкиДанных(ИмяПараметра);
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	
	НайденныйЭлемент = Неопределено;
	
	НайденныйЭлемент = НайтиОтборВКомпоновщике(ИмяПараметра);
	
	Если НайденныйЭлемент = Неопределено Тогда
		НайденныйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
		НайденныйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.ЗагрузитьЗначения(ЗначениеПараметра);
		ПравоеЗначение = СписокЗначений;
	Иначе
		НайденныйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ПравоеЗначение = ЗначениеПараметра;
	КонецЕсли;
	
	НайденныйЭлемент.Использование  = Использование;
	НайденныйЭлемент.ЛевоеЗначение  = Поле;
	НайденныйЭлемент.ПравоеЗначение = ПравоеЗначение;
	
	Возврат НайденныйЭлемент;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего)
	
	Если Количество < КоличествоВсего Тогда
		
		Текст = Текст
		        + ?(Текст <> "", Символы.ПС, "")
		        + НСтр("ru = 'Отметка выбора установлена для %КоличествоВыбранных% строк из %КоличествоВсего%.'");
	
		Текст = Текст
		        + Символы.ПС
		        + НСтр("ru = 'Проверьте, заполнены ли все обязательные реквизиты.'");
	
		Текст = СтрЗаменить(Текст, "%КоличествоВыбранных%", Количество);
		Текст = СтрЗаменить(Текст, "%КоличествоВсего%", КоличествоВсего);
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Операция выполнена'"), , Текст);
	
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура УстановитьКоличествоПоУмолчаниюВСтрокеТЧНаСервере(СтрокаТЧ)
	
	// Расчет количества Этикеток.
	Если Объект.Режим = "ПечатьЭтикеток" ИЛИ Объект.Режим = "ПечатьЦенниковИЭтикеток" Тогда
		
		Если ЗаполнитьКоличествоЭтикетокПоДокументу Тогда
			СтрокаТЧ.КоличествоЭтикеток = СтрокаТЧ.КоличествоВДокументе;
		Иначе
			СтрокаТЧ.КоличествоЭтикеток = ?(СтрокаТЧ.ОстатокНаСкладе > 0, СтрокаТЧ.ОстатокНаСкладе, 0);
		КонецЕсли;
		
	КонецЕсли;
	
	// Расчет количества Ценников.
	Если Объект.Режим = "ПечатьЦенников" ИЛИ Объект.Режим = "ПечатьЦенниковИЭтикеток" Тогда
		
		СтрокаТЧ.КоличествоЦенников = 1;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуТоваровНаСервере(Сохранять = Истина)
	
	// Сохранение выбранных позиций для их последующего восстановления.
	Если Сохранять Тогда
		ТаблицаВыбранныеПозиции = Объект.Товары.Выгрузить();
	КонецЕсли;
	
	// Поля необходимые для вывода в таблицу товаров на форме.
	НастройкиПечати = Обработки.ПечатьЭтикетокИЦенников.НовыеНастройкиПечати();
	
	НастройкиПечати.ОбязательныеПоля.Добавить("Цена");
	НастройкиПечати.ОбязательныеПоля.Добавить("Весовой");
	НастройкиПечати.ОбязательныеПоля.Добавить("Штрихкод");
	НастройкиПечати.ОбязательныеПоля.Добавить("Количество");
	НастройкиПечати.ОбязательныеПоля.Добавить("Номенклатура");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		НастройкиПечати.ОбязательныеПоля.Добавить("Характеристика");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
		НастройкиПечати.ОбязательныеПоля.Добавить("Партия");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения") Тогда
		НастройкиПечати.ОбязательныеПоля.Добавить("ЕдиницаИзмерения");
	КонецЕсли;
	Если ИспользоватьОбменСПодключаемымОборудованием Тогда
		НастройкиПечати.ОбязательныеПоля.Добавить("SKU");
	КонецЕсли;
	НастройкиПечати.ОбязательныеПоля.Добавить("ОстатокНаСкладе");
	НастройкиПечати.ОбязательныеПоля.Добавить("Организация");
	
	НастройкиПечати.ОбязательныеПоля.Добавить("НоменклатураНаименованиеПолное");
	
	// Шаблоны этикеток и ценников.
	НастройкиПечати.ОбязательныеПоля.Добавить("Номенклатура.КатегорияНоменклатуры.ШаблонЭтикетки");
	НастройкиПечати.ОбязательныеПоля.Добавить("Номенклатура.КатегорияНоменклатуры.ШаблонЦенника");
	
	НастройкиПечати.ПараметрыДанных.Вставить("ВидЦен"    , Объект.ВидЦен);
	НастройкиПечати.ПараметрыДанных.Вставить("ВидЦенАкционный"    , Объект.ВидЦенАкционные);
	НастройкиПечати.ПараметрыДанных.Вставить("ЦеныПоВидуЦены" , Объект.ЦеныПоВидуЦены);
	НастройкиПечати.ПараметрыДанных.Вставить("ЦеныНаДату" , Объект.ЦеныНаДату);
	НастройкиПечати.ПараметрыДанных.Вставить("ЦеныНаДатуАкционные" , Объект.ЦеныНаДатуАкционные);
	
	НастройкиПечати.ПараметрыДанных.Вставить("ИспользоватьАссортимент", Ложь);
	
	НастройкиПечати.КомпоновщикНастроек = КомпоновщикНастроек;
	Если Объект.ИсходныеДанные.Количество() > 0 ИЛИ Объект.ПечатьИзДокумента Тогда
		НастройкиПечати.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаПоУмолчанию";
		НастройкиПечати.ИсходныеДанные = Объект.ИсходныеДанные.Выгрузить();
	Иначе
		НастройкиПечати.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаБД";
	КонецЕсли;
	
	Объект.Товары.Очистить();
	
	// Загрузка сформированного списка товаров.
	ДанныеДляПечати = Обработки.ПечатьЭтикетокИЦенников.ПодготовитьДанныеДляПечати(НастройкиПечати);
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	ИспользоватьПартииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьПартии");
	
	ИспользоватьЕдиницыИзмерения = ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", Новый Структура("РабочееМесто", 
				 МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента()));
	
	Для Каждого СтрокаТЧ Из ДанныеДляПечати.ТаблицаТоваров Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура         = СтрокаТЧ.Номенклатура;
		
		
		Если ИспользоватьХарактеристикиНоменклатуры Тогда
			НоваяСтрока.Характеристика       = СтрокаТЧ.Характеристика;
			
			Если ЗначениеЗаполнено(НоваяСтрока.Характеристика) Тогда
				НоваяСтрока.ХарактеристикиИспользуются = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользоватьПартииНоменклатуры Тогда
			НоваяСтрока.Партия       = СтрокаТЧ.Партия;
		КонецЕсли;

		
		НоваяСтрока.НаименованиеПолное = СтрокаТЧ.НоменклатураНаименованиеПолное;
		
		Если ИспользоватьЕдиницыИзмерения Тогда
			НоваяСтрока.ЕдиницаИзмерения             = СтрокаТЧ.ЕдиницаИзмерения;
		КонецЕсли;
		
		НоваяСтрока.Цена                 = СтрокаТЧ.Цена;
		НоваяСтрока.Штрихкод             = СтрокаТЧ.Штрихкод;
		
		ШаблонЦенника = СтрокаТЧ[ДанныеДляПечати.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить("Номенклатура.КатегорияНоменклатуры.ШаблонЦенника")];
		// отбрасываем значения недопустимых типов
		ШаблонЦенника = ?(
			ТипЗнч(ШаблонЦенника) = Тип("СправочникСсылка.ХранилищеШаблонов"), 
			ШаблонЦенника, 
			Справочники.ХранилищеШаблонов.ПустаяСсылка());
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ШаблонЦенника, "ТипШаблона")
			И Не ШаблонЦенника.ТипШаблона = Перечисления.ТипыШаблонов.ЭтикеткаКодМаркировкиИСМП Тогда
			НоваяСтрока.ШаблонЦенника        = ШаблонЦенника;
		КонецЕсли;
				
		Если ЗначениеЗаполнено(НоваяСтрока.ШаблонЦенника) Тогда
			Если НоваяСтрока.ШаблонЦенника.ТипШаблона = Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
				НоваяСтрока.ТипШаблонаЦенника = 1;
			Иначе
				НоваяСтрока.ТипШаблонаЦенника = 2;
			КонецЕсли;
		Иначе
			НоваяСтрока.ТипШаблонаЦенника = 0;
		КонецЕсли;
		
		ШаблонЭтикетки = СтрокаТЧ[ДанныеДляПечати.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить("Номенклатура.КатегорияНоменклатуры.ШаблонЭтикетки")];
		// отбрасываем значения недопустимых типов
		ШаблонЭтикетки = ?(
			ТипЗнч(ШаблонЭтикетки) = Тип("СправочникСсылка.ХранилищеШаблонов"), 
			ШаблонЭтикетки, 
			Справочники.ХранилищеШаблонов.ПустаяСсылка());
		Если Не ШаблонЭтикетки.ТипШаблона = Перечисления.ТипыШаблонов.ЭтикеткаКодМаркировкиИСМП Тогда
			НоваяСтрока.ШаблонЭтикетки       = СтрокаТЧ[ДанныеДляПечати.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить("Номенклатура.КатегорияНоменклатуры.ШаблонЭтикетки")];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяСтрока.ШаблонЭтикетки) Тогда
			Если НоваяСтрока.ШаблонЭтикетки.ТипШаблона = Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
				НоваяСтрока.ТипШаблонаЭтикетки = 1;
			Иначе
				НоваяСтрока.ТипШаблонаЭтикетки = 2;
			КонецЕсли;
		Иначе
			НоваяСтрока.ТипШаблонаЭтикетки = 0;
		КонецЕсли;
		
		НоваяСтрока.ОстатокНаСкладе      = СтрокаТЧ.ОстатокНаСкладе;
		НоваяСтрока.КоличествоВДокументе = СтрокаТЧ.Количество;
		
		Если ИспользоватьОбменСПодключаемымОборудованием Тогда
			НоваяСтрока.SKU              = СтрокаТЧ.SKU;
		КонецЕсли;
		
		УстановитьКоличествоПоУмолчаниюВСтрокеТЧНаСервере(НоваяСтрока);
		
		// Восстановление позиций, сохраненных перед заполнением ТЧ. 
		Если Сохранять Тогда
			ПараметрыОтбора = Новый Структура();
			ПараметрыОтбора.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
			Если ИспользоватьХарактеристикиНоменклатуры Тогда
				ПараметрыОтбора.Вставить("Характеристика", НоваяСтрока.Характеристика);
			КонецЕсли;
			Если ИспользоватьЕдиницыИзмерения Тогда
				ПараметрыОтбора.Вставить("ЕдиницаИзмерения", НоваяСтрока.ЕдиницаИзмерения);
			КонецЕсли;
			НайденныеСтроки = ТаблицаВыбранныеПозиции.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденныеСтроки[0],"ШаблонЦенника, ШаблонЭтикетки, КоличествоЦенников, КоличествоЭтикеток");
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока.Выбран = ПроверитьВозможностьВыбораТовара(НоваяСтрока, Объект.Режим);
		
	КонецЦикла;
	
	Элементы.Товары.Обновить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьВозможностьВыбораТовара(ТекущиеДанные, Режим)
	
	Если Режим = "ПечатьЦенниковИЭтикеток" Тогда
	
		Если (ТекущиеДанные.КоличествоЦенников = 0)
			И ТекущиеДанные.КоличествоЭтикеток = 0 Тогда
			
			Возврат Ложь;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
			И НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки) Тогда
			
			Возврат Ложь;
			
		ИначеЕсли (ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
			      И НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)) Тогда

			Возврат Ложь;
			
		ИначеЕсли (НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
			      И ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)) Тогда
			
			Возврат Ложь;
			
		Иначе
			
			Возврат Истина;
			
		КонецЕсли;
	
	ИначеЕсли Режим = "ПечатьЭтикеток" Тогда
		
		Если ТекущиеДанные.КоличествоЭтикеток = 0 ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки) Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	ИначеЕсли Режим = "ПечатьЦенников" Тогда
		
		Если ТекущиеДанные.КоличествоЦенников = 0 ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника) Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Процедура устанавливает видимость элементов в зависимости от настройки параметров формы.
//
&НаСервере
Процедура ОбновитьВидимостьЭлементов()
	
	ВидимостьЭтикетки = Ложь;
	ВидимостьЦенники  = Ложь;
	
	Если Объект.Режим = "ПечатьЦенниковИЭтикеток" Тогда
		ВидимостьЭтикетки = Истина;
		ВидимостьЦенники  = Истина;
	ИначеЕсли Объект.Режим = "ПечатьЦенников" Тогда
		ВидимостьЭтикетки = Ложь;
		ВидимостьЦенники  = Истина;
	ИначеЕсли Объект.Режим = "ПечатьЭтикеток" Тогда
		ВидимостьЭтикетки = Истина;
		ВидимостьЦенники  = Ложь;
	КонецЕсли;
	
	Элементы.ТоварыКоличествоЭтикеток.Видимость               = ВидимостьЭтикетки;
	Элементы.ТоварыШаблонЭтикетки.Видимость                   = ВидимостьЭтикетки;
	Элементы.ТоварыТипШаблонаЭтикетки.Видимость               = ВидимостьЭтикетки;
	Элементы.ТоварыУстановитьШаблонЭтикеток.Видимость         = ВидимостьЭтикетки;
	Элементы.ТоварыУстановитьКоличествоЭтикеток.Видимость     = ВидимостьЭтикетки;
	Элементы.ЗаполнитьКоличествоЭтикетокПоДокументу.Видимость = ВидимостьЭтикетки И Объект.ПечатьИзДокумента И НЕ СкрыватьКомандуЗаполненияПоДокументу;
	
	Элементы.ТоварыКоличествоЦенников.Видимость               = ВидимостьЦенники;
	Элементы.ТоварыШаблонЦенника.Видимость                    = ВидимостьЦенники;
	Элементы.ТоварыТипШаблонаЦенника.Видимость                = ВидимостьЦенники;
	Элементы.ТоварыУстановитьШаблонЦенников.Видимость         = ВидимостьЦенники;
	Элементы.ТоварыУстановитьКоличествоЦенников.Видимость     = ВидимостьЦенники;
	
	Если Объект.ПечатьИзДокумента
		ИЛИ Объект.ПечатьИзОбработки Тогда
	Иначе
		Если ЗначениеЗаполнено(СтраницаПриОткрытии) Тогда
			Элементы.СтраницаТовары.Видимость = Элементы.СтраницаТовары.Имя = СтраницаПриОткрытии;
		Иначе
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимПечатьЦенниковНаСервере()
	
	ПереключениеРежима = ?(Объект.Режим <> "ПечатьЦенников", Истина, Ложь);
	Объект.Режим = "ПечатьЦенников";
	
	Элементы.УстановитьРежимПечатьЦенниковИЭтикеток.Пометка = Ложь;
	Элементы.УстановитьРежимПечатьЦенников.Пометка = Истина;
	Элементы.УстановитьРежимПечатьЭтикеток.Пометка = Ложь;
	
	ОбновитьВидимостьЭлементов();
	Если ПереключениеРежима Тогда
		ПроверитьВыборСтрокПриПереключенииРежимаПечати();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимПечатьЦенниковИЭтикетокНаСервере()
	
	ПереключениеРежима = ?(Объект.Режим <> "ПечатьЦенников", Истина, Ложь);
	Объект.Режим = "ПечатьЦенников";
	
	Элементы.УстановитьРежимПечатьЦенниковИЭтикеток.Пометка = Истина;
	Элементы.УстановитьРежимПечатьЦенников.Пометка = Ложь;
	Элементы.УстановитьРежимПечатьЭтикеток.Пометка = Ложь;
	
	ОбновитьВидимостьЭлементов();
	Если ПереключениеРежима Тогда
		ПроверитьВыборСтрокПриПереключенииРежимаПечати();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимПечатьЭтикетокНаСервере()
	
	ПереключениеРежима = ?(Объект.Режим <> "ПечатьЭтикеток", Истина, Ложь);
	Объект.Режим = "ПечатьЭтикеток";
	
	Элементы.УстановитьРежимПечатьЦенниковИЭтикеток.Пометка = Ложь;
	Элементы.УстановитьРежимПечатьЦенников.Пометка = Ложь;
	Элементы.УстановитьРежимПечатьЭтикеток.Пометка = Истина;
	
	ОбновитьВидимостьЭлементов();
	Если ПереключениеРежима Тогда
		ПроверитьВыборСтрокПриПереключенииРежимаПечати();
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет установку выбранного режима печати.
//
&НаСервере
Процедура УстановитьРежим(ПараметрРежим)
	
	Если ПараметрРежим = "ПечатьЦенниковИЭтикеток" Тогда
		УстановитьРежимПечатьЦенниковИЭтикетокНаСервере();
	ИначеЕсли ПараметрРежим = "ПечатьЦенников" Тогда
		УстановитьРежимПечатьЦенниковНаСервере();
	ИначеЕсли ПараметрРежим = "ПечатьЭтикеток" Тогда
		УстановитьРежимПечатьЭтикетокНаСервере();
	Иначе
		ВызватьИсключение НСтр("ru = 'Установленный режим печати не поддерживается'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНовыеШтрихкодыНаСервере(EAN)
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	
	Штрихкоды = Новый Соответствие;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ШтрихкодыНоменклатуры");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		ПрефиксШтучногоТовара = РегистрыСведений.ШтрихкодыНоменклатуры.ПрефиксШтучногоТовара();
		ПрефиксУзлаШтрихкода = РегистрыСведений.ШтрихкодыНоменклатуры.ПрефиксУзлаШтрихкода();
		
		КодШтучногоТовара = РегистрыСведений.ШтрихкодыНоменклатуры.ПоследнийКодШтучногоТовара(ПрефиксШтучногоТовара, ПрефиксУзлаШтрихкода, EAN);
		
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Штрихкод) Тогда
				Продолжить;
			КонецЕсли;
			
			Если КодШтучногоТовара >= РегистрыСведений.ШтрихкодыНоменклатуры.МаксимальныйКодШтучногоТовара(EAN) Тогда
				ВызватьИсключение РегистрыСведений.ШтрихкодыНоменклатуры.ТекстСообщенияНетСвободныхКодовШтучныхШтрихкодов();
			КонецЕсли;

			КодШтучногоТовара = КодШтучногоТовара + 1;

			Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьШтрихкодПоКоду(КодШтучногоТовара, ПрефиксШтучногоТовара, ПрефиксУзлаШтрихкода, EAN);

			НовыйШтрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
			НовыйШтрихкод.Номенклатура = СтрокаТЧ.Номенклатура;
			Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
				НовыйШтрихкод.Характеристика = СтрокаТЧ.Характеристика;
			КонецЕсли;
			Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
				НовыйШтрихкод.Партия = СтрокаТЧ.Партия;
			КонецЕсли;
			Если ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения") Тогда
				НовыйШтрихкод.ЕдиницаИзмерения = СтрокаТЧ.ЕдиницаИзмерения;
			КонецЕсли;
			НовыйШтрихкод.Штрихкод = Штрихкод;
			НовыйШтрихкод.Записать();
			
			Штрихкоды.Вставить(СтрокаТЧ, НовыйШтрихкод.Штрихкод);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщенияПользователю = СтрШаблон(
		НСтр(
		"ru = 'При записи штрихкодов произошла ошибка.
		|Запись штрихкодов не выполнена.
		|Дополнительное описание:
		|%1'"),
		ИнформацияОбОшибке().Описание);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияПользователю);
		
		Возврат;
		
	КонецПопытки;
	
	// Заполняем табличную часть штрихкодами, только если не было ошибок.
	Для Каждого ТекКлючИЗначение Из Штрихкоды Цикл
		ТекКлючИЗначение.Ключ.Штрихкод = ТекКлючИЗначение.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	УстановитьВидимостьПечатьИзДокумента();
	УстановитьВидимостьОтбора(Элементы, ВидимостьОтбора);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПечатьИзДокумента()
	
	Элементы.ГруппаПечатьИзДокумента.Видимость = Объект.ПечатьИзДокумента;
		
	Если Не Объект.ПечатьИзДокумента Тогда
		Возврат;
	КонецЕсли;
 
	Элементы.Гиперссылка1.Видимость = Ложь;
	Элементы.Гиперссылка2.Видимость = Ложь;
	Элементы.Гиперссылка3.Видимость = Ложь;

	КоличествоДокументов = СписокДокументов.Количество();
	МаксимальныйИндекс = Мин(2, КоличествоДокументов - 1);
	Индекс = 0;

	Пока Индекс <= МаксимальныйИндекс Цикл

		Гиперссылка = "Гиперссылка" + Строка(Индекс + 1);
		Элементы[Гиперссылка].Заголовок = СписокДокументов.Получить(Индекс);
		Элементы[Гиперссылка].Видимость = Истина;

		Индекс = Индекс + 1;
	КонецЦикла;

	Если КоличествоДокументов > 1 Тогда
		Элементы.ГруппаПечатьИзДокумента.Заголовок = НСтр("ru = 'Печать из документов'");
	КонецЕсли;

	Если КоличествоДокументов > 3 Тогда
		Элементы.ГиперссылкиНиз.Видимость = Истина;

		ЗаголовокДекорацияЕщеДокументов = НСтр("ru = '(еще %КолДок% док.)'");
		ЗаголовокДекорацияЕщеДокументов = СтрЗаменить(ЗаголовокДекорацияЕщеДокументов, "%КолДок%", КоличествоДокументов
			- (МаксимальныйИндекс + 1));
		Элементы.ДекорацияЕщеДокументов.Заголовок = ЗаголовокДекорацияЕщеДокументов;

	Иначе
		Элементы.ГиперссылкиНиз.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьОтбора(Знач Элементы, Знач ВидимостьОтбора)
	
	Если ВидимостьОтбора Тогда
		Элементы.ГруппаОтбор.Видимость = Истина;
		Элементы.Отбор.Заголовок = НСтр("ru = 'Скрыть отбор'");
	Иначе
		Элементы.ГруппаОтбор.Видимость = Ложь;
		Элементы.Отбор.Заголовок = НСтр("ru = 'Показать отбор'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКнопкуПоУмолчанию()
	
	Если Элементы.СтраницыТиповПечати.ТекущаяСтраница = Элементы.СтраницаТовары Тогда
		
		Элементы.Печать.КнопкаПоУмолчанию = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	ДобавитьТовары(ТаблицаТоваров);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТовары(Таблица, ИдентификаторСтроки = Неопределено)
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	ИспользоватьУпаковкиНоменклатуры = Ложь;
	
	НастройкиПечати = Обработки.ПечатьЭтикетокИЦенников.НовыеНастройкиПечати();
	
	НастройкиПечати.ОбязательныеПоля.Добавить("Цена");
	НастройкиПечати.ОбязательныеПоля.Добавить("Штрихкод");
	НастройкиПечати.ОбязательныеПоля.Добавить("Количество");
	НастройкиПечати.ОбязательныеПоля.Добавить("Номенклатура");
	
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
		НастройкиПечати.ОбязательныеПоля.Добавить("Характеристика");
	КонецЕсли;
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		НастройкиПечати.ОбязательныеПоля.Добавить("Упаковка");
	КонецЕсли;
	Если ИспользоватьОбменСПодключаемымОборудованием Тогда
		НастройкиПечати.ОбязательныеПоля.Добавить("SKU");
	КонецЕсли;
	НастройкиПечати.ОбязательныеПоля.Добавить("ОстатокНаСкладе");
	НастройкиПечати.ОбязательныеПоля.Добавить("Организация");
	
	НастройкиПечати.ОбязательныеПоля.Добавить("НоменклатураНаименованиеПолное");
	
	ОкончаниеИмениМакетаСхемыКомпоновкиДанных="";
	
	НастройкиПечати.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблона" + ОкончаниеИмениМакетаСхемыКомпоновкиДанных;
	НастройкиПечати.ИсходныеДанные = Таблица;
	
	СтруктураРезультата = Обработки.ПечатьЭтикетокИЦенников.ПодготовитьДанныеДляПечати(НастройкиПечати);
	Для Каждого СтрокаТЧ Из СтруктураРезультата.ТаблицаТоваров Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура         = СтрокаТЧ.Номенклатура;
		НоваяСтрока.НаименованиеПолное   = СтрокаТЧ.НоменклатураНаименованиеПолное;
		НоваяСтрока.Цена                 = СтрокаТЧ.Цена;
		НоваяСтрока.Штрихкод             = СтрокаТЧ.Штрихкод;
		НоваяСтрока.ОстатокНаСкладе      = СтрокаТЧ.ОстатокНаСкладе;
		
		Если ИспользоватьХарактеристикиНоменклатуры Тогда
			НоваяСтрока.Характеристика   = СтрокаТЧ.Характеристика;
		КонецЕсли;
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			НоваяСтрока.Упаковка         = СтрокаТЧ.Упаковка;
		КонецЕсли;
		
		Если ИспользоватьОбменСПодключаемымОборудованием Тогда
			НоваяСтрока.SKU              = СтрокаТЧ.SKU;
		КонецЕсли;
		
		УстановитьКоличествоПоУмолчаниюВСтрокеТЧНаСервере(НоваяСтрока);
		ИдентификаторСтроки = НоваяСтрока.ПолучитьИдентификатор();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВыборСтрокПриПереключенииРежимаПечати()
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		Если СтрокаТЧ.Выбран Тогда
			
			СтрокаТЧ.Выбран = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Объект.Режим);
			
		КонецЕсли
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоличествоЦенниковИЭтикетокПоДокументуНаСервере()
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		УстановитьКоличествоПоУмолчаниюВСтрокеТЧНаСервере(СтрокаТЧ)
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыШаблонЦенникаНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Результат<>Неопределено Тогда
		ТекущиеДанные.ШаблонЦенника = Результат;
	КонецЕсли;
	
	ОбновитьТипШаблона(ТекущиеДанные.ПолучитьИдентификатор(), "Ценник");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыШаблонЭтикеткиНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Результат<>Неопределено Тогда
		ТекущиеДанные.ШаблонЭтикетки = Результат;
	КонецЕсли;
	
	ОбновитьТипШаблона(ТекущиеДанные.ПолучитьИдентификатор(), "Этикетка");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТипыПринтеров(СтрокиТовары, Назначение)
	
	Для Каждого ТекСтрока Из СтрокиТовары Цикл
		
		ОбновитьТипШаблона(ТекСтрока, Назначение)
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТипШаблона(ТоварыИдентификатор, Назначение)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТоварыИдентификатор);
	
	Если Назначение = "Ценник" Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ШаблонЦенника) Тогда
			
			Если ТекущаяСтрока.ШаблонЦенника.ТипШаблона = Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
				ТекущаяСтрока.ТипШаблонаЦенника = 1;
			Иначе
				ТекущаяСтрока.ТипШаблонаЦенника = 2;
			КонецЕсли;
			
		Иначе
			ТекущаяСтрока.ТипШаблонаЦенника = 0;
		КонецЕсли;
		
	ИначеЕсли Назначение = "Этикетка" Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ШаблонЭтикетки) Тогда
			
			Если ТекущаяСтрока.ШаблонЭтикетки.ТипШаблона = Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
				ТекущаяСтрока.ТипШаблонаЭтикетки = 1;
			Иначе
				ТекущаяСтрока.ТипШаблонаЭтикетки = 2;
			КонецЕсли;
			
		Иначе
			ТекущаяСтрока.ТипШаблонаЭтикетки = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяТаблицыВыборки(ИмяСтраницы)
	
	ИмяТаблицыВыборки = "";
	МассивСтраниц = Новый Массив;
	МассивСтраниц.Добавить("СтраницаТовары");
	Если МассивСтраниц.Найти(ИмяСтраницы) <> Неопределено Тогда
		ИмяТаблицыВыборки = СтрЗаменить(ИмяСтраницы, "Страница", "");
	КонецЕсли;

	Возврат ИмяТаблицыВыборки;
	
КонецФункции

&НаСервере
Функция ПроверитьТипШаблоновЭтикеток()
	
	// Если в таблице товаров только шаблоны с типом "Этикетка (ценник) принтера этикеток",
	// то отправлять на печать не надо.
	
	Для Каждого СтрокаТоваров Из Объект.Товары Цикл
		
		Если Объект.Режим = "ПечатьЦенниковИЭтикеток" ИЛИ Объект.Режим = "ПечатьЦенников" Тогда
			
			Если СтрокаТоваров.Выбран
				И ЗначениеЗаполнено(СтрокаТоваров.ШаблонЦенника)
				И НЕ СтрокаТоваров.ШаблонЦенника.ТипШаблона = Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.Режим = "ПечатьЦенниковИЭтикеток" ИЛИ Объект.Режим = "ПечатьЭтикеток" Тогда
			
			Если СтрокаТоваров.Выбран
				И ЗначениеЗаполнено(СтрокаТоваров.ШаблонЭтикетки)
				И НЕ СтрокаТоваров.ШаблонЭтикетки.ТипШаблона = Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоПакетамЦенников(СтруктураТоваров, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(СтруктураТоваров) Тогда
		
		ЗаполнитьОбработкуПоПакетамЦенников(СтруктураТоваров);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбработкуПоПакетамЦенников(ТаблицаТоваров)
	
	СтруктураТоваров = Новый ТаблицаЗначений;
	СтруктураТоваров.Колонки.Добавить("Номенклатура",         Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	СтруктураТоваров.Колонки.Добавить("Характеристика",       Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	СтруктураТоваров.Колонки.Добавить("Упаковка",             Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	СтруктураТоваров.Колонки.Добавить("КоличествоЦенников",   Новый ОписаниеТипов("Число"));
	
	Для Каждого Строка Из ТаблицаТоваров Цикл
		
		Товар = СтруктураТоваров.Добавить();
		Товар.Номенклатура       = Строка.Номенклатура;
		Товар.Характеристика     = Строка.Характеристика;
		Товар.Упаковка           = Строка.УпаковкиНоменклатуры;
		Товар.КоличествоЦенников = Строка.Количество;
		
	КонецЦикла;
	
	УстановитьРежимПечатьЦенниковНаСервере();
	Объект.Товары.Загрузить(СтруктураТоваров);
	Объект.ИсходныеДанные.Загрузить(СтруктураТоваров);
	
	ЗаполнитьТаблицуТоваровНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРаспечатанныеЦенники()
	
	ЗаписиРегистра = РегистрыСведений.ЦенникиКПечати.СоздатьНаборЗаписей();
	Для Каждого Запись Из ЗаписиРегистра Цикл
		
		Если Запись.КУдалению = Истина Тогда
			
			ЗаписиРегистра.Удалить(Запись);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписиРегистра.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦены(Параметр)
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Цена");
	ЗаполнитьПоляТаблицы(СтруктураПолей);
	
КонецПроцедуры

// Заполняет недостающие данные в ТЧ "Товары" 
// Параметры:
//	ЗаполняемыеПоля - Структура - ключи структуры соответствуют заполняемым колонкам табличной части "Товары"
&НаСервере
Процедура ЗаполнитьПоляТаблицы(ЗаполняемыеПоля)
	
	Запрос = Обработки.ПечатьЭтикетокИЦенников.НовыйЗапросЗаполнитьПоляТаблицы();
	
	Запрос.УстановитьПараметр("Товары",			Объект.Товары.Выгрузить(, "Номенклатура, Характеристика, Партия, ЕдиницаИзмерения"));
	Запрос.УстановитьПараметр("НуженШтрихкод",	ЗаполняемыеПоля.Свойство("Штрихкод"));
	Запрос.УстановитьПараметр("НуженОстаток",	ЗаполняемыеПоля.Свойство("ОстатокНаСкладе"));
	Запрос.УстановитьПараметр("НужнаЦена",		ЗаполняемыеПоля.Свойство("Цена"));
	Запрос.УстановитьПараметр("НужныШаблоны",	ЗаполняемыеПоля.Свойство("Шаблоны"));
	Запрос.УстановитьПараметр("Период",			Объект.ЦеныНаДату);
	Запрос.УстановитьПараметр("ВидЦен",			Объект.ВидЦен);
	Запрос.УстановитьПараметр("ИспользоватьНаборы", ПолучитьФункциональнуюОпцию("ИспользоватьНаборы"));
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если ЗаполняемыеПоля.Свойство("Штрихкод") Тогда
		
		ТоварыСоШтрихкодом = Результат[2].Выгрузить();
		
		Для каждого СтрокаТЧ Из Объект.Товары Цикл
			РезультатПоиска = ТоварыСоШтрихкодом.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Партия", СтрокаТЧ.Номенклатура,
				СтрокаТЧ.Характеристика, СтрокаТЧ.Партия));
			Если РезультатПоиска.Количество() > 0 Тогда
				СтрокаТЧ.Штрихкод = РезультатПоиска[0].Штрихкод;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗаполняемыеПоля.Свойство("ОстатокНаСкладе") Тогда
		
		ТоварыСОстатком = Результат[3].Выгрузить();
		
		Для каждого СтрокаТЧ Из Объект.Товары Цикл
			РезультатПоиска = ТоварыСОстатком.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика));
			Если РезультатПоиска.Количество() > 0 Тогда
				СтрокаТЧ.ОстатокНаСкладе = РезультатПоиска[0].КоличествоОстаток;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗаполняемыеПоля.Свойство("Цена") Тогда
		
		ТоварыСЦеной = Результат[4].Выгрузить();
		
		Для каждого СтрокаТЧ Из Объект.Товары Цикл
			РезультатПоиска = ТоварыСЦеной.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика));
			Если РезультатПоиска.Количество() > 0 Тогда
				СтрокаТЧ.Цена = РезультатПоиска[0].Цена;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗаполняемыеПоля.Свойство("Шаблоны") Тогда
		
		ТоварыСШаблонами = Результат[5].Выгрузить();
		
		Для каждого СтрокаТЧ Из Объект.Товары Цикл
			РезультатПоиска = ТоварыСШаблонами.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТЧ.Номенклатура));
			Если РезультатПоиска.Количество() > 0 Тогда
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РезультатПоиска[0], "ШаблонЦенника")
					И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РезультатПоиска[0].ШаблонЦенника, "ТипШаблона")
					И НЕ РезультатПоиска[0].ШаблонЦенника.ТипШаблона = Перечисления.ТипыШаблонов.ЭтикеткаКодМаркировкиИСМП Тогда
					
					СтрокаТЧ.ШаблонЦенника = РезультатПоиска[0].ШаблонЦенника;
					
				КонецЕсли;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РезультатПоиска[0], "ШаблонЭтикетки")
					И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РезультатПоиска[0].ШаблонЭтикетки, "ТипШаблона")
					И НЕ РезультатПоиска[0].ШаблонЭтикетки.ТипШаблона = Перечисления.ТипыШаблонов.ЭтикеткаКодМаркировкиИСМП Тогда
					
					СтрокаТЧ.ШаблонЭтикетки = РезультатПоиска[0].ШаблонЭтикетки;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры



// Возвращает структуру параметров для открытия обработки подбора
&НаКлиенте
Функция ЗаполнитьПараметрыПодбора()
	
	ТекущийПользователь = ПользователиКлиент.ТекущийПользователь();
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Организация", ?(ЗначениеЗаполнено(Объект.Организация), Объект.Организация,
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользователь, "ОсновнаяОрганизация")));
	ПараметрыПодбора.Вставить("Дата", ТекущаяДата());
	ПараметрыПодбора.Вставить("ВидЦен", Объект.ВидЦен);
	ПараметрыПодбора.Вставить("ПериодЦен", Объект.ЦеныНаДату);
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	ПараметрыПодбора.Вставить("ПоказыватьНаборыКомплекты", Истина);
	ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипыНоменклатуры());
	ПараметрыПодбора.Вставить("ПечатьЭтикетокИЦенников", Истина);
	ПараметрыПодбора.Вставить("НеПоказыватьИнформациюПоСкладуИРезервам", Истина);
	
	Возврат ПараметрыПодбора;
	
КонецФункции

&НаСервере
Функция ТипыНоменклатуры()
	
	ТипНоменклатуры = Новый СписокЗначений;
	
	Для каждого ЭлементМассива Из Элементы.ТоварыНоменклатура.ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					ТипНоменклатуры.Добавить(ЭлементФиксМассива);
				КонецЦикла; 
			Иначе
				ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТипНоменклатуры;
	
КонецФункции

// ПодключаемоеОборудование
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодамВМассиве(СтруктураДанные.МассивШтрихкодов);
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из Метаданные.Обработки.ПечатьЭтикетокИЦенников.ТабличныеЧасти.Товары.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	ДобавленныеСтроки = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Дата", ТекущаяДата());
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение", ЭтотОбъект, Новый Структура("СтруктураДанные", СтруктураДанные));
			
			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам", ПараметрыОткрытия, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		Иначе
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			МассивСтрокТЧ = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура,Характеристика",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика));
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				НоваяСтрока = Объект.Товары.Добавить();
				НоваяСтрока.Штрихкод = ТекШтрихкод.Штрихкод;
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.КоличествоЭтикеток = ?(ТекШтрихкод.Свойство("ПрефиксВесовогоТовара"), 1, ТекШтрихкод.Количество);
				НоваяСтрока.КоличествоЦенников = 1;
			Иначе
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.КоличествоЭтикеток = НоваяСтрока.КоличествоЭтикеток + ТекШтрихкод.Количество;
			КонецЕсли;
			
			Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа, ДобавленныеСтроки",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа, ДобавленныеСтроки);

КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов) Экспорт
	
	НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов);
	НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект,,,,Оповещение
		);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Цена");
	СтруктураПолей.Вставить("ОстатокНаСкладе");
	СтруктураПолей.Вставить("Шаблоны");
	ЗаполнитьПоляТаблицы(СтруктураПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

&НаСервере
Функция ПолучитьПредопределеннуюОрганизацию()
	
	ОрганизацияПоУмолчанию = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных";
	
	Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", "ОсновнаяОрганизация");
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОрганизацияПоУмолчанию = Выборка.Ссылка;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат ОрганизацияПоУмолчанию;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры) Экспорт
	
	Если СтруктураНоменклатуры = Неопределено Тогда Возврат КонецЕсли;
	
	ДанныеШтрихкода = СтруктураНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = СтруктураНоменклатуры.ТекШтрихкод;
	СтруктураДанные = Параметры.СтруктураДанные;
	
	МассивСтрокТЧ = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура,Характеристика",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика));
	Если МассивСтрокТЧ.Количество() = 0 Тогда
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Штрихкод = ТекШтрихкод.Штрихкод;
		НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
		НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
		НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
		НоваяСтрока.КоличествоЭтикеток = ?(ТекШтрихкод.Свойство("ПрефиксВесовогоТовара"), 1, ТекШтрихкод.Количество);
		НоваяСтрока.КоличествоЦенников = 1;
	Иначе
		НоваяСтрока = МассивСтрокТЧ[0];
		НоваяСтрока.КоличествоЭтикеток = НоваяСтрока.КоличествоЭтикеток + ТекШтрихкод.Количество;
	КонецЕсли;
	
	Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
		СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
