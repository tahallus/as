#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция СтандартныеПериодыПоПоказателям(МассивПоказателей) Экспорт
	
	Результат = Новый Массив;
	ДатаСеанса = ТекущаяДатаСеанса();
	Границы = ГраницыРасчетаПоказателей(МассивПоказателей);
	Для каждого Элемент Из Границы Цикл
		МинДата = Элемент.Значение.ДатаНачала;
		Если МинДата<НачалоМесяца(ДатаСеанса) Тогда
			СтруктураПериода = Новый Структура;
			Период = Новый СтандартныйПериод;
			Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоГода;
			СтруктураПериода.Вставить("Показатель", Элемент.Ключ);
			СтруктураПериода.Вставить("Период", Период);
			Результат.Добавить(СтруктураПериода);
		КонецЕсли;
		Если МинДата<НачалоНедели(ДатаСеанса) Тогда
			СтруктураПериода = Новый Структура;
			Период = Новый СтандартныйПериод;
			Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоМесяца;
			СтруктураПериода.Вставить("Показатель", Элемент.Ключ);
			СтруктураПериода.Вставить("Период", Период);
			Результат.Добавить(СтруктураПериода);
		КонецЕсли; 
		Если МинДата<НачалоДня(ДатаСеанса) Тогда
			СтруктураПериода = Новый Структура;
			Период = Новый СтандартныйПериод;
			Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтойНедели;
			СтруктураПериода.Вставить("Показатель", Элемент.Ключ);
			СтруктураПериода.Вставить("Период", Период);
			Результат.Добавить(СтруктураПериода);
		КонецЕсли; 
		СтруктураПериода = Новый Структура;
		Период = Новый СтандартныйПериод;
		Период.Вариант = ВариантСтандартногоПериода.Сегодня;
		СтруктураПериода.Вставить("Показатель", Элемент.Ключ);
		СтруктураПериода.Вставить("Период", Период);
		Результат.Добавить(СтруктураПериода);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Процедура ОбъединитьФильтры(Фильтры, Поле, ВидСравнения, Значение, Представление) Экспорт
	
	ТочноеСовпадение = Неопределено;
	МассивНайденныхФильтров = Новый Массив;
	Для каждого ОписаниеФильтра Из Фильтры Цикл
		Если НЕ ОписаниеФильтра.Поле=Поле Тогда
			Продолжить;
		КонецЕсли;
		Если ОписаниеФильтра.ВидСравнения=ВидСравнения И ТочноеСовпадение=Неопределено Тогда
			ТочноеСовпадение = ОписаниеФильтра;
		КонецЕсли; 
		МассивНайденныхФильтров.Добавить(ОписаниеФильтра);
	КонецЦикла; 
	
	// Слияние фильтров с одинаковыми видами сравнения
	Если НЕ ТочноеСовпадение=Неопределено Тогда
		Если ТипЗнч(Значение)=Тип("СписокЗначений") И ТипЗнч(ТочноеСовпадение.Значение)=Тип("СписокЗначений") Тогда
			// Объединение значений-списков
			Для каждого ЭлементЗначение Из Значение Цикл
				Если ТочноеСовпадение.Значение.НайтиПоЗначению(ЭлементЗначение.Значение)=Неопределено Тогда
					ТочноеСовпадение.Значение.Добавить(ЭлементЗначение.Значение);
				КонецЕсли; 
			КонецЦикла;
			Возврат;
		ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.Равно ИЛИ
			ВидСравнения=ВидСравненияКомпоновкиДанных.НеРавно Тогда
			// Для вида сравнения равно/не равно преобразовываем в фильтр по списку значений
			Если ВидСравнения=ВидСравненияКомпоновкиДанных.Равно Тогда
				ТочноеСовпадение.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.НеРавно Тогда
				ТочноеСовпадение.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
			КонецЕсли; 
			СтароеЗначение = ТочноеСовпадение.Значение;
			ТочноеСовпадение.Значение = Новый СписокЗначений;
			ТочноеСовпадение.Значение.Добавить(СтароеЗначение);
			ТочноеСовпадение.Значение.Добавить(Значение);
			Возврат;
		ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.Содержит ИЛИ
			ВидСравнения=ВидСравненияКомпоновкиДанных.НеСодержит ИЛИ
			ВидСравнения=ВидСравненияКомпоновкиДанных.НачинаетсяС ИЛИ
			ВидСравнения=ВидСравненияКомпоновкиДанных.НеНачинаетсяС ИЛИ
			ВидСравнения=ВидСравненияКомпоновкиДанных.Подобно ИЛИ
			ВидСравнения=ВидСравненияКомпоновкиДанных.НеПодобно Тогда
			// Для фильтров по строкам объединение не выполняем
			СтруктураФильтра = Новый Структура;
			СтруктураФильтра.Вставить("Поле", Поле);
			СтруктураФильтра.Вставить("Значение", Значение);
			СтруктураФильтра.Вставить("ВидСравнения", ВидСравнения);
			СтруктураФильтра.Вставить("Представление", Представление);
			Фильтры.Добавить(СтруктураФильтра);
			Возврат;
		Иначе
			ТочноеСовпадение.Значение = Значение;
		КонецЕсли;
	КонецЕсли;
	
	// Добавление нового фильтра
	Если МассивНайденныхФильтров.Количество()=0 Тогда
		СтруктураФильтра = Новый Структура;
		СтруктураФильтра.Вставить("Поле", Поле);
		СтруктураФильтра.Вставить("Значение", Значение);
		СтруктураФильтра.Вставить("ВидСравнения", ВидСравнения);
		СтруктураФильтра.Вставить("Представление", Представление);
		Фильтры.Добавить(СтруктураФильтра);
		Возврат;
	КонецЕсли; 
	
	// Основная часть механизма слияния фильтров с разными видами сравнения
	ФильтрОбработан = Ложь;
	Для каждого ОписаниеФильтра Из МассивНайденныхФильтров Цикл
		Если (ВидСравнения=ВидСравненияКомпоновкиДанных.Равно И ОписаниеФильтра.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке) ИЛИ
			 (ВидСравнения=ВидСравненияКомпоновкиДанных.НеРавно И ОписаниеФильтра.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСписке) Тогда
			ОписаниеФильтра.Значение.Добавить(Значение);
			ФильтрОбработан = Истина;
		ИначеЕсли (ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке И ОписаниеФильтра.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно) ИЛИ
			      (ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСписке И ОписаниеФильтра.ВидСравнения=ВидСравненияКомпоновкиДанных.НеРавно) Тогда
			ОписаниеФильтра.ВидСравнения = ВидСравнения;
			СтароеЗначение = ОписаниеФильтра.Значение;
			ОписаниеФильтра.Значение = Значение;
			ОписаниеФильтра.Значение.Добавить(СтароеЗначение);
			ФильтрОбработан = Истина;
		ИначеЕсли (ВидСравнения=ВидСравненияКомпоновкиДанных.Больше И ОписаниеФильтра.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно) ИЛИ
			      (ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно И ОписаниеФильтра.ВидСравнения=ВидСравненияКомпоновкиДанных.Больше) ИЛИ
			      (ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше И ОписаниеФильтра.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно) ИЛИ
			      (ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно И ОписаниеФильтра.ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше) Тогда
			ОписаниеФильтра.ВидСравнения = ВидСравнения;
			ОписаниеФильтра.Значение = Значение;
			ФильтрОбработан = Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	// В остальных случаях добавляем еще один фильтр
	Если НЕ ФильтрОбработан Тогда
		СтруктураФильтра = Новый Структура;
		СтруктураФильтра.Вставить("Поле", Поле);
		СтруктураФильтра.Вставить("Значение", Значение);
		СтруктураФильтра.Вставить("ВидСравнения", ВидСравнения);
		СтруктураФильтра.Вставить("Представление", Представление);
		Фильтры.Добавить(СтруктураФильтра);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область ФормированиеДанных

// Процедура производит расчет данных для рабочего стола "Пульс бизнеса"
// Вызывается в фоновом задании из формы ПульсБизнеса.
//
// Параметры:
//  Параметры					 - Структура - Параметры используемые для расчета, обязательные ключи:
//										* Показатели - таблица параметров расчета показателей,
//										* Диаграммы - таблица параметров расчета диаграмм,
//  ВременноеХранилищеРезультата - Строка	 - Возвращаемый в родительский сеанс параметр. Содержит соответствие виджетов и структур подготовленных данных.
//
Процедура ПолучитьДанные(Параметры, ВременноеХранилищеРезультата) Экспорт
	
	Результат = Новый Структура;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат.Вставить("Показатели", РассчитатьПоказатели(Параметры));
	Результат.Вставить("Диаграммы", РассчитатьДиаграммы(Параметры));
	Если Параметры.Свойство("Секция") Тогда
		Результат.Вставить("Секция", Параметры.Секция);
	Иначе
		Если НЕ Параметры.НеАнализироватьСебестоимость Тогда
			Результат.Вставить("Актуальность", ОпределитьАктуальность(Параметры));
		КонецЕсли; 
		Результат.Вставить("Секция", "");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ПоместитьВоВременноеХранилище(Результат, ВременноеХранилищеРезультата);
	
КонецПроцедуры

Функция РассчитатьПоказатели(Параметры)
	
	Результат = Новый Соответствие;
	Запрос = Новый Запрос;
	Для каждого ОписаниеПоказателя Из Параметры.Показатели Цикл
		Если Параметры.Свойство("Секция") И
			((Параметры.Секция="Остатки" И НЕ ОписаниеПоказателя.Остаток) ИЛИ
			(Параметры.Секция="Обороты" И ОписаниеПоказателя.Остаток)) Тогда
			Продолжить;
		КонецЕсли; 
		Индекс = Параметры.Показатели.Индекс(ОписаниеПоказателя);
		Если ПустаяСтрока(ОписаниеПоказателя.Ресурс) Тогда
			Продолжить;
		КонецЕсли; 
		// Вызов процедуры формирования запроса для расчета показателя
		ПараметрыВызова = Новый Структура;
		ПараметрыВызова.Вставить("Запрос", Запрос);
		ПараметрыВызова.Вставить("ОписаниеПоказателя", ОписаниеПоказателя);
		ПараметрыВызова.Вставить("Индекс", Индекс);
		ПараметрыВызова.Вставить("Параметры", Параметры);
		СтрокаВызова = СтрШаблон("Обработки.ПульсБизнеса.Подключаемый_%1Расчет(Параметры.Запрос, Параметры.ОписаниеПоказателя, Параметры.Индекс, Параметры.Параметры)",
		ОписаниеПоказателя.Показатель);
		ОбщегоНазначения.ВыполнитьВБезопасномРежиме(СтрокаВызова, ПараметрыВызова);
		Если Индекс%50=0 И НЕ ПустаяСтрока(Запрос.Текст) Тогда
			ВыполнитьЗапросПоказатели(Запрос, Параметры, Результат);
		КонецЕсли; 
	КонецЦикла; 
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		ВыполнитьЗапросПоказатели(Запрос, Параметры, Результат); 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
 
Процедура ВыполнитьЗапросПоказатели(Запрос, Параметры, Результат)
	
	Запрос.УстановитьПараметр("Период", Параметры.Дата.Дата);
	Если ЗначениеЗаполнено(Параметры.ДатаСравнения) Тогда
		Запрос.УстановитьПараметр("ПериодСравнения", Параметры.ДатаСравнения.Дата);
	КонецЕсли; 
	Если ТипЗнч(Параметры.Период)=Тип("СтандартныйПериод") ИЛИ ТипЗнч(Параметры.Период) = Тип("Структура") Тогда
		Запрос.УстановитьПараметр("ДатаНачала", Параметры.Период.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", Параметры.Период.ДатаОкончания);
	Иначе
		Запрос.УстановитьПараметр("ДатаНачала", '0001-01-01');
		Запрос.УстановитьПараметр("ДатаОкончания", '0001-01-01');
	КонецЕсли; 
	Если ТипЗнч(Параметры.ПериодСравнения)=Тип("СтандартныйПериод") ИЛИ ТипЗнч(Параметры.ПериодСравнения) = Тип("Структура") Тогда
		Запрос.УстановитьПараметр("ДатаНачалаСравнения", Параметры.ПериодСравнения.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончанияСравнения", Параметры.ПериодСравнения.ДатаОкончания);
	КонецЕсли; 
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Пульс бизнеса: ошибка расчета показателя'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Пока Выборка.Следующий() Цикл
		Стр = Параметры.Показатели[Выборка.Индекс];
		Если Результат.Получить(Выборка.Индекс)=Неопределено Тогда
			Результат.Вставить(Выборка.Индекс, Новый Структура("Значение, ЗначениеСравнения", 0, 0));
		КонецЕсли; 
		СтруктураРезультата = Результат[Выборка.Индекс];
		
		Если Выборка.ДляСравнения Тогда
			Если НЕ Выборка.Разделитель=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтруктураРезультата.Вставить("ЗначениеСравнения", ?(Выборка.Значение=Null, 0, Выборка.Значение));
		ИначеЕсли Выборка.Разделитель=Неопределено Тогда
			СтруктураРезультата.Вставить("Значение", ?(Выборка.Значение=Null, 0, Выборка.Значение));
		Иначе
			Если НЕ ТипЗнч(СтруктураРезультата.Значение)=Тип("Соответствие") Тогда
				СтруктураРезультата.Вставить("Значение", Новый Соответствие);
			КонецЕсли; 
			СтруктураРезультата.Значение.Вставить(Выборка.Разделитель, Выборка.Значение);
		КонецЕсли; 
	КонецЦикла; 
	Запрос = Новый Запрос;
	
КонецПроцедуры

Функция РассчитатьДиаграммы(Параметры)
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	ПараметрыЗапросов = Новый Массив; 
	Для каждого ОписаниеДиаграммы Из Параметры.Диаграммы Цикл
		Если Параметры.Свойство("Секция") Тогда
			Продолжить;
		КонецЕсли; 
		Если ПустаяСтрока(ОписаниеДиаграммы.Серия) ИЛИ ПустаяСтрока(ОписаниеДиаграммы.Точка) Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ОписаниеДиаграммы.Период) = Тип("Структура") Тогда
			ОбновитьДатыНачалаИКонцаПериода(ОписаниеДиаграммы.Период);
		КонецЕсли;
		Если ТипЗнч(ОписаниеДиаграммы.ПериодСравнения) = Тип("Структура") Тогда
			ОбновитьДатыНачалаИКонцаПериода(ОписаниеДиаграммы.ПериодСравнения, ОписаниеДиаграммы.Период);
		КонецЕсли; 
		Индекс = Параметры.Диаграммы.Индекс(ОписаниеДиаграммы);
		// Нестандартные обработчики
		Если ОписаниеДиаграммы.Диаграмма="ДинамикаАктивов" Тогда
			Подключаемый_ДинамикаАктивовПассивовДиаграмма(Результат, ОписаниеДиаграммы, Индекс);
		ИначеЕсли ОписаниеДиаграммы.Диаграмма="ДинамикаПассивов" Тогда
			Подключаемый_ДинамикаАктивовПассивовДиаграмма(Результат, ОписаниеДиаграммы, Индекс, Ложь);
		Иначе
			ПараметрыВызова = Новый Структура;
			ПараметрыВызова.Вставить("Запрос", Запрос);
			ПараметрыВызова.Вставить("ПараметрыЗапросов", ПараметрыЗапросов);
			ПараметрыВызова.Вставить("ОписаниеДиаграммы", ОписаниеДиаграммы);
			ПараметрыВызова.Вставить("Индекс", Индекс);
			// Вызов процедуры формирования запроса для получения данных диаграммы
			ОбщегоНазначения.ВыполнитьВБезопасномРежиме("Обработки.ПульсБизнеса.Подключаемый_"+ОписаниеДиаграммы.Диаграмма+"Диаграмма(Параметры.Запрос, Параметры.ПараметрыЗапросов, Параметры.ОписаниеДиаграммы, Параметры.Индекс)", ПараметрыВызова);
		КонецЕсли; 
		Если Индекс%50=0 И НЕ ПустаяСтрока(Запрос.Текст) Тогда
			ВыполнитьЗапросДиаграммы(Запрос, ПараметрыЗапросов, Результат);
		КонецЕсли; 
	КонецЦикла;
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		ВыполнитьЗапросДиаграммы(Запрос, ПараметрыЗапросов, Результат); 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ВыполнитьЗапросДиаграммы(Запрос, ПараметрыЗапросов, Результат)
	
	Попытка
		Результаты = Запрос.ВыполнитьПакет();
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Пульс бизнеса: ошибка получения данных диаграммы'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
		Возврат;
	КонецПопытки; 
	
	Для каждого РезультатЗапроса Из Результаты Цикл
		Индекс = Результаты.Найти(РезультатЗапроса);
		СтруктураПараметров = ПараметрыЗапросов[Индекс];
		Если Результат.Получить(СтруктураПараметров.Индекс)=Неопределено Тогда
			Результат.Вставить(СтруктураПараметров.Индекс, Новый Массив);
		КонецЕсли; 
		Если СтруктураПараметров.ЗапросСИтогами Тогда
			Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Точка", "Все");
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
		КонецЕсли; 
		Порядок = 0;
		Пока Выборка.Следующий() Цикл
			СтруктураЗначения = Новый Структура;
			ИндексКолонки = 1;
			Пока НЕ РезультатЗапроса.Колонки.Найти("Серия"+ИндексКолонки)=Неопределено Цикл
				Значение = Выборка["Серия"+ИндексКолонки];
				СтруктураЗначения.Вставить("Серия"+ИндексКолонки, Значение);
				ИндексКолонки = ИндексКолонки+1;
			КонецЦикла; 
			СтруктураЗначения.Вставить("КоличествоСерий", ИндексКолонки-1);
			СтруктураЗначения.Вставить("Точка", Выборка.Точка);
			СтруктураЗначения.Вставить("ДляСравнения", СтруктураПараметров.ДляСравнения);
			СтруктураЗначения.Вставить("Порядок", Порядок);
			Порядок = Порядок+1;
			Результат[СтруктураПараметров.Индекс].Добавить(СтруктураЗначения);
		КонецЦикла; 
	КонецЦикла; 
	Запрос = Новый Запрос;
	ПараметрыЗапросов = Новый Массив;
	
КонецПроцедуры

#КонецОбласти

#Область Расчет

#Область РасчетПоказателей

Процедура Подключаемый_ПродажиРасчет(Запрос, Стр, Индекс, Параметры) Экспорт
	
	Если Стр.Ресурс="Выручка" Тогда
		ТекстРесурса = "СУММА(Рег.СуммаОборот)";
	ИначеЕсли Стр.Ресурс="Количество" Тогда
		ТекстРесурса = "СУММА(Рег.КоличествоОборот)";
	ИначеЕсли Стр.Ресурс="КоличествоДокументов" Тогда
		ТекстРесурса = "КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР КОГДА Рег.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца ТОГДА NULL ИНАЧЕ Рег.Регистратор КОНЕЦ)";
	ИначеЕсли Стр.Ресурс="Себестоимость" Тогда
		ТекстРесурса = "СУММА(Рег.СебестоимостьОборот)";
	ИначеЕсли Стр.Ресурс="Прибыль" Тогда
		ТекстРесурса = "СУММА(Рег.СуммаОборот - Рег.СебестоимостьОборот)";
	ИначеЕсли Стр.Ресурс="Наценка" Тогда
		ТекстРесурса = "ВЫРАЗИТЬ(ВЫБОР КОГДА СУММА(Рег.СебестоимостьОборот)=0 ТОГДА 0 ИНАЧЕ 100*СУММА(Рег.СуммаОборот - Рег.СебестоимостьОборот)/СУММА(Рег.СебестоимостьОборот) КОНЕЦ КАК Число(10, 2))";
	ИначеЕсли Стр.Ресурс="Рентабельность" Тогда
		ТекстРесурса = "ВЫРАЗИТЬ(ВЫБОР КОГДА СУММА(Рег.СуммаОборот)=0 ТОГДА 0 ИНАЧЕ 100*СУММА(Рег.СуммаОборот - Рег.СебестоимостьОборот)/СУММА(Рег.СуммаОборот) КОНЕЦ КАК Число(10, 2))";
	ИначеЕсли Стр.Ресурс="ВозвратыСумма" Тогда
		ТекстРесурса = "СУММА(ВЫБОР КОГДА Рег.Регистратор ССЫЛКА Документ.ПриходнаяНакладная ИЛИ Рег.Регистратор ССЫЛКА Документ.ЧекККМВозврат ТОГДА -Рег.СуммаОборот ИНАЧЕ 0 КОНЕЦ)";
	ИначеЕсли Стр.Ресурс="ВозвратыКоличество" Тогда
		ТекстРесурса = "СУММА(ВЫБОР КОГДА Рег.Регистратор ССЫЛКА Документ.ПриходнаяНакладная ИЛИ Рег.Регистратор ССЫЛКА Документ.ЧекККМВозврат ТОГДА -Рег.КоличествоОборот ИНАЧЕ 0 КОНЕЦ)";
	Иначе
		Возврат;
	КонецЕсли; 
	
	ТекстЭлемента = СтрЗаменить(
	"ВЫБРАТЬ
	|   &ДляСравнения КАК ДляСравнения, 
	|   &Индекс КАК Индекс, 
	|   &Разделитель КАК Разделитель, 
	|	&Ресурс КАК Значение
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, Авто, ) КАК Рег
	|ГДЕ &Отборы
	|СГРУППИРОВАТЬ ПО &Группировки",
	"&Ресурс",
	ТекстРесурса);
	ДобавитьЭлементВЗапросПоказатели(Запрос, ТекстЭлемента, Стр, Индекс, Параметры);
	
КонецПроцедуры

Процедура Подключаемый_ДеньгиРасчет(Запрос, Стр, Индекс, Параметры) Экспорт
	
	Если Стр.Ресурс="СуммаОстаток" Тогда
		ТекстРесурса = "СУММА(Рег.СуммаОстаток)";
	ИначеЕсли Стр.Ресурс="ДенежныйПоток" Тогда
		ТекстРесурса = 
		"СУММА(ВЫБОР 
		|	КОГДА Рег.Регистратор ССЫЛКА Документ.ПеремещениеДС Тогда 0 
		|	КОГДА Рег.ВидДвижения=ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА Рег.Сумма 
		|	КОГДА Рег.ВидДвижения=ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА -Рег.Сумма Иначе 0 КОНЕЦ)";
	ИначеЕсли Стр.Ресурс="Поступления" Тогда
		ТекстРесурса = "СУММА(ВЫБОР КОГДА Рег.ВидДвижения=ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И НЕ Рег.Регистратор ССЫЛКА Документ.ПеремещениеДС Тогда Рег.Сумма Иначе 0 КОНЕЦ)";
	ИначеЕсли Стр.Ресурс="Платежи" Тогда
		ТекстРесурса = "СУММА(ВЫБОР КОГДА Рег.ВидДвижения=ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И НЕ Рег.Регистратор ССЫЛКА Документ.ПеремещениеДС Тогда Рег.Сумма Иначе 0 КОНЕЦ)";
	ИначеЕсли Стр.Ресурс="ПоступленияПлан" Тогда
		ТекстРесурса = "СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА Рег.СуммаОборот>0 ТОГДА Рег.СуммаОборот ИНАЧЕ 0 КОНЕЦ
		|	*КурсыВалютДокумент.Курс/КурсыВалютДокумент.Кратность/КурсыВалютУчет.Курс*КурсыВалютУчет.Кратность КАК Число(15,2)))"
	ИначеЕсли Стр.Ресурс="ПлатежиПлан" Тогда
		ТекстРесурса = "СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА Рег.СуммаОборот<0 ТОГДА -Рег.СуммаОборот ИНАЧЕ 0 КОНЕЦ
		|	*КурсыВалютДокумент.Курс/КурсыВалютДокумент.Кратность/КурсыВалютУчет.Курс*КурсыВалютУчет.Кратность КАК Число(15,2)))"
	Иначе
		Возврат;
	КонецЕсли; 
	
	Если Стр.Ресурс="СуммаОстаток" Тогда
		ТекстЭлемента =  
		"ВЫБРАТЬ
		|   &ДляСравнения КАК ДляСравнения, 
		|   &Индекс КАК Индекс, 
		|   &Разделитель КАК Разделитель, 
		|	&Ресурс КАК Значение
		|ИЗ
		|	РегистрНакопления.ДенежныеСредства.Остатки(&Период, ) КАК Рег
		|ГДЕ &Отборы
		|СГРУППИРОВАТЬ ПО &Группировки";
	ИначеЕсли Стр.Ресурс="ПоступленияПлан" ИЛИ Стр.Ресурс="ПлатежиПлан" Тогда
		ТекстЭлемента =  
		"ВЫБРАТЬ
		|   &ДляСравнения КАК ДляСравнения, 
		|   &Индекс КАК Индекс, 
		|   &Разделитель КАК Разделитель, 
		|	&Ресурс КАК Значение
		|ИЗ
		|	РегистрНакопления.ПлатежныйКалендарь.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, СтатусУтвержденияПлатежа=ЗНАЧЕНИЕ(Перечисление.СтатусыУтвержденияПлатежей.Утвержден)) КАК Рег
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ПлатежныйКалендарь.Регистратор КАК Регистратор,
		|			ПлатежныйКалендарь.Валюта КАК Валюта,
		|			МАКСИМУМ(ЕСТЬNULL(КурсыВалютУчет.Период, ДАТАВРЕМЯ(1, 1, 1))) КАК ПериодКурсаУчет,
		|			МАКСИМУМ(ЕСТЬNULL(КурсыВалютДокумент.Период, ДАТАВРЕМЯ(1, 1, 1))) КАК ПериодКурсаДокумент
		|		ИЗ
		|			РегистрНакопления.ПлатежныйКалендарь.Обороты(&ДатаНачала, &ДатаОкончания, Авто, СтатусУтвержденияПлатежа=ЗНАЧЕНИЕ(Перечисление.СтатусыУтвержденияПлатежей.Утвержден)) КАК ПлатежныйКалендарь
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалютУчет
		|				ПО ПлатежныйКалендарь.ПериодСекунда >= КурсыВалютУчет.Период
		|					И (КурсыВалютУчет.Валюта В
		|						(ВЫБРАТЬ
		|							Константа.ВалютаУчета.Значение
		|						ИЗ
		|							Константа.ВалютаУчета))
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалютДокумент
		|				ПО ПлатежныйКалендарь.ПериодСекунда >= КурсыВалютДокумент.Период
		|					И КурсыВалютДокумент.Валюта = ПлатежныйКалендарь.Валюта
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ПлатежныйКалендарь.Регистратор, 
		|			ПлатежныйКалендарь.Валюта) КАК ВложенныйЗапрос
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалютУчет
		|			ПО ВложенныйЗапрос.ПериодКурсаУчет = КурсыВалютУчет.Период
		|				И (КурсыВалютУчет.Валюта В
		|					(ВЫБРАТЬ
		|						Константа.ВалютаУчета.Значение
		|					ИЗ
		|						Константа.ВалютаУчета))
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалютДокумент
		|			ПО ВложенныйЗапрос.ПериодКурсаДокумент = КурсыВалютДокумент.Период
		|				И КурсыВалютДокумент.Валюта = ВложенныйЗапрос.Валюта
		|		ПО Рег.Регистратор = ВложенныйЗапрос.Регистратор
		|ГДЕ &Отборы
		|СГРУППИРОВАТЬ ПО &Группировки";
	Иначе
		ТекстЭлемента =  
		"ВЫБРАТЬ
		|	&ДляСравнения КАК ДляСравнения,
		|	&Индекс КАК Индекс,
		|	&Разделитель КАК Разделитель,
		|	&Ресурс КАК Значение
		|ИЗ
		|	(ВЫБРАТЬ
		|		Рег.Организация КАК Организация,
		|		Рег.ТипДенежныхСредств КАК ТипДенежныхСредств,
		|		Рег.БанковскийСчетКасса КАК БанковскийСчетКасса,
		|		Рег.Валюта КАК Валюта,
		|		Рег.Статья КАК Статья,
		|		Рег.ВидДвижения КАК ВидДвижения,
		|		Рег.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|		Рег.Аналитика КАК Аналитика,
		|		Рег.Регистратор КАК Регистратор,
		|		Рег.Сумма КАК Сумма
		|	ИЗ
		|		РегистрНакопления.ДенежныеСредства КАК Рег
		|	ГДЕ
		|		(Рег.Период >= &ДатаНачала
		|				ИЛИ &ДатаНачала = ДАТАВРЕМЯ(1, 1, 1))
		|		И (Рег.Период <= &ДатаОкончания
		|				ИЛИ &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
		|		И НЕ Рег.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Справочник.ХозяйственныеОперации.ВзносНаличнымиВБанк), ЗНАЧЕНИЕ(Справочник.ХозяйственныеОперации.ПолучениеНаличныхВБанке), ЗНАЧЕНИЕ(Справочник.ХозяйственныеОперации.ПеремещениеВКассуККМ), ЗНАЧЕНИЕ(Справочник.ХозяйственныеОперации.ПереводНаДругойСчет), ЗНАЧЕНИЕ(Справочник.ХозяйственныеОперации.ПеремещениеДС))
		|		И &Отборы) КАК Рег
		|СГРУППИРОВАТЬ ПО &Группировки";
	КонецЕсли; 
	
	ТекстЭлемента = СтрЗаменить(
	ТекстЭлемента,
	"&Ресурс",
	ТекстРесурса);
	ДобавитьЭлементВЗапросПоказатели(Запрос, ТекстЭлемента, Стр, Индекс, Параметры);
	
КонецПроцедуры

Процедура Подключаемый_ТоварыРасчет(Запрос, Стр, Индекс, Параметры) Экспорт
	
	Если Стр.Ресурс="СуммаОстаток" Тогда
		ТекстРесурса = "СУММА(Рег.СуммаОстаток)";
	ИначеЕсли Стр.Ресурс="КоличествоОстаток" Тогда
		ТекстРесурса = "СУММА(Рег.КоличествоОстаток)";
	ИначеЕсли Стр.Ресурс="СуммаПриход" Тогда
		ТекстРесурса = "СУММА(Рег.СуммаПриход)";
	ИначеЕсли Стр.Ресурс="СуммаРасход" Тогда
		ТекстРесурса = "СУММА(Рег.СуммаРасход)";
	ИначеЕсли Стр.Ресурс="КоличествоПриход" Тогда
		ТекстРесурса = "СУММА(Рег.КоличествоПриход)";
	ИначеЕсли Стр.Ресурс="КоличествоРасход" Тогда
		ТекстРесурса = "СУММА(Рег.КоличествоРасход)";
	Иначе
		Возврат;
	КонецЕсли; 
	
	Если Стр.Ресурс="СуммаОстаток" ИЛИ Стр.Ресурс="КоличествоОстаток" Тогда
		ТекстЭлемента =  
		"ВЫБРАТЬ
		|   &ДляСравнения КАК ДляСравнения, 
		|   &Индекс КАК Индекс, 
		|   &Разделитель КАК Разделитель, 
		|	&Ресурс КАК Значение
		|ИЗ
		|	РегистрНакопления.Запасы.Остатки(&Период, СчетУчета.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.Запасы)) КАК Рег
		|ГДЕ &Отборы
		|СГРУППИРОВАТЬ ПО &Группировки";
	Иначе
		ТекстЭлемента =  
		"ВЫБРАТЬ
		|   &ДляСравнения КАК ДляСравнения, 
		|   &Индекс КАК Индекс, 
		|   &Разделитель КАК Разделитель, 
		|	&Ресурс КАК Значение
		|ИЗ
		|	РегистрНакопления.Запасы.Обороты(&ДатаНачала, &ДатаОкончания, Период, СчетУчета.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.Запасы)) КАК Рег
		|ГДЕ &Отборы
		|СГРУППИРОВАТЬ ПО &Группировки";
	КонецЕсли; 
	
	ТекстЭлемента = СтрЗаменить(
	ТекстЭлемента,
	"&Ресурс",
	ТекстРесурса);
	ДобавитьЭлементВЗапросПоказатели(Запрос, ТекстЭлемента, Стр, Индекс, Параметры);
	
КонецПроцедуры

Процедура Подключаемый_СчетаЗаказыРасчет(Запрос, Стр, Индекс, Параметры) Экспорт
	
	Если Стр.Ресурс="СуммаСчетов" ИЛИ Стр.Ресурс="СуммаЗаказов" ИЛИ Стр.Ресурс="СуммаЗаказовПоставщику" Тогда
		ТекстРесурса = "СУММА(ВЫРАЗИТЬ(Рег.СуммаОборот*Рег.СчетНаОплату.Курс/Рег.СчетНаОплату.Кратность/КурсыВалют.Курс*КурсыВалют.Кратность КАК Число(15,2)))";
	ИначеЕсли Стр.Ресурс="ОплаченоСчетов" ИЛИ Стр.Ресурс="ОплаченоЗаказов" ИЛИ Стр.Ресурс="ОплаченоЗаказовПоставщику" Тогда
		ТекстРесурса = "СУММА(ВЫРАЗИТЬ((Рег.СуммаОплатыОборот+Рег.СуммаАвансаОборот)*Рег.СчетНаОплату.Курс/Рег.СчетНаОплату.Кратность/КурсыВалют.Курс*КурсыВалют.Кратность КАК Число(15,2)))";
	ИначеЕсли Стр.Ресурс="КоличествоСчетов" ИЛИ Стр.Ресурс="КоличествоЗаказов" ИЛИ Стр.Ресурс="КоличествоЗаказовПоставщику" Тогда
		ТекстРесурса = "КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР КОГДА Рег.СуммаОборот>0 ТОГДА Рег.СчетНаОплату ИНАЧЕ NULL КОНЕЦ)";
	ИначеЕсли Стр.Ресурс="ОплаченоСчетовКоличество" ИЛИ Стр.Ресурс="ОплаченоЗаказовКоличество" ИЛИ Стр.Ресурс="ОплаченоЗаказовПоставщикуКоличество" Тогда
		ТекстРесурса = "КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР КОГДА Рег.СуммаОплатыОборот>0 ИЛИ Рег.СуммаАвансаОборот>0 ТОГДА Рег.СчетНаОплату ИНАЧЕ NULL КОНЕЦ)";
	Иначе
		Возврат;
	КонецЕсли; 
	
	Если Стр.Ресурс="КоличествоСчетов" ИЛИ Стр.Ресурс="СуммаСчетов" ИЛИ Стр.Ресурс="ОплаченоСчетов" ИЛИ Стр.Ресурс="ОплаченоСчетовКоличество" Тогда
		ИмяДокумента = "СчетНаОплату";
	ИначеЕсли Стр.Ресурс="КоличествоЗаказов" ИЛИ Стр.Ресурс="СуммаЗаказов" ИЛИ Стр.Ресурс="ОплаченоЗаказов" ИЛИ Стр.Ресурс="ОплаченоЗаказовКоличество" Тогда
		ИмяДокумента = "ЗаказПокупателя";
	ИначеЕсли Стр.Ресурс="КоличествоЗаказовПоставщику" ИЛИ Стр.Ресурс="СуммаЗаказовПоставщику" ИЛИ Стр.Ресурс="ОплаченоЗаказовПоставщику" ИЛИ Стр.Ресурс="ОплаченоЗаказовПоставщикуКоличество" Тогда
		ИмяДокумента = "ЗаказПоставщику";
	КонецЕсли; 
	
	Если Стр.Ресурс="КоличествоСчетов" ИЛИ Стр.Ресурс="КоличествоЗаказов" ИЛИ Стр.Ресурс="КоличествоЗаказовПоставщику"
		ИЛИ Стр.Ресурс="ОплаченоСчетовКоличество" ИЛИ Стр.Ресурс="ОплаченоЗаказовКоличество" ИЛИ Стр.Ресурс="ОплаченоЗаказовПоставщикуКоличество" Тогда
		ТекстЭлемента =  
		"ВЫБРАТЬ
		|	&ДляСравнения КАК ДляСравнения,
		|	&Индекс КАК Индекс,
		|	&Разделитель КАК Разделитель,
		|	&Ресурс КАК Значение
		|ИЗ
		|	РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(&ДатаНачала, &ДатаОкончания, Авто, СчетНаОплату ССЫЛКА Документ.СчетНаОплату) КАК Рег
		|ГДЕ &Отборы
		|СГРУППИРОВАТЬ ПО &Группировки";
	ИначеЕсли Стр.Ресурс="СуммаСчетов" ИЛИ Стр.Ресурс="СуммаЗаказов" ИЛИ Стр.Ресурс="СуммаЗаказовПоставщику" Тогда
		ТекстЭлемента =  
		"ВЫБРАТЬ
		|	&ДляСравнения КАК ДляСравнения,
		|	&Индекс КАК Индекс,
		|	&Разделитель КАК Разделитель,
		|	&Ресурс КАК Значение
		|ИЗ
		|	РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(&ДатаНачала, &ДатаОкончания, Авто, СчетНаОплату ССЫЛКА Документ.СчетНаОплату) КАК Рег
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ОплатаСчетовИЗаказовОбороты.Регистратор КАК СчетЗаказ,
		|			МАКСИМУМ(ЕСТЬNULL(КурсыВалют.Период, ДАТАВРЕМЯ(1, 1, 1))) КАК ПериодКурса
		|		ИЗ
		|			РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, СчетНаОплату ССЫЛКА Документ.СчетНаОплату) КАК ОплатаСчетовИЗаказовОбороты
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
		|				ПО ОплатаСчетовИЗаказовОбороты.Период >= КурсыВалют.Период
		|					И (КурсыВалют.Валюта В
		|						(ВЫБРАТЬ
		|							Константа.ВалютаУчета.Значение
		|						ИЗ
		|							Константа.ВалютаУчета))
		|		ГДЕ
		|			ОплатаСчетовИЗаказовОбороты.СуммаОборот > 0
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ОплатаСчетовИЗаказовОбороты.Регистратор) КАК ВложенныйЗапрос
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
		|			ПО ВложенныйЗапрос.ПериодКурса = КурсыВалют.Период
		|				И (КурсыВалют.Валюта В
		|					(ВЫБРАТЬ
		|						Константа.ВалютаУчета.Значение
		|					ИЗ
		|						Константа.ВалютаУчета))
		|		ПО Рег.СчетНаОплату = ВложенныйЗапрос.СчетЗаказ
		|ГДЕ
		|	Рег.СуммаОборот > 0
		|	И &Отборы
		|СГРУППИРОВАТЬ ПО &Группировки";
	ИначеЕсли Стр.Ресурс="ОплаченоСчетов" ИЛИ Стр.Ресурс="ОплаченоЗаказов" ИЛИ Стр.Ресурс="ОплаченоЗаказовПоставщику" Тогда
		ТекстЭлемента =  
		"ВЫБРАТЬ
		|	&ДляСравнения КАК ДляСравнения,
		|	&Индекс КАК Индекс,
		|	&Разделитель КАК Разделитель,
		|	&Ресурс КАК Значение
		|ИЗ
		|	РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, СчетНаОплату ССЫЛКА Документ.СчетНаОплату) КАК Рег
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ОплатаСчетовИЗаказовОбороты.Регистратор КАК Регистратор,
		|			МАКСИМУМ(ЕСТЬNULL(КурсыВалют.Период, ДАТАВРЕМЯ(1, 1, 1))) КАК ПериодКурса
		|		ИЗ
		|			РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, СчетНаОплату ССЫЛКА Документ.СчетНаОплату) КАК ОплатаСчетовИЗаказовОбороты
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
		|				ПО ОплатаСчетовИЗаказовОбороты.Период >= КурсыВалют.Период
		|					И (КурсыВалют.Валюта В
		|						(ВЫБРАТЬ
		|							Константа.ВалютаУчета.Значение
		|						ИЗ
		|							Константа.ВалютаУчета))
		|		ГДЕ
		|			ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот > 0 ИЛИ ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот > 0
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ОплатаСчетовИЗаказовОбороты.Регистратор) КАК ВложенныйЗапрос
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
		|			ПО ВложенныйЗапрос.ПериодКурса = КурсыВалют.Период
		|				И (КурсыВалют.Валюта В
		|					(ВЫБРАТЬ
		|						Константа.ВалютаУчета.Значение
		|					ИЗ
		|						Константа.ВалютаУчета))
		|		ПО Рег.Регистратор = ВложенныйЗапрос.Регистратор
		|ГДЕ
		|	Рег.СуммаАвансаОборот > 0 ИЛИ Рег.СуммаОплатыОборот > 0
		|	И &Отборы
		|СГРУППИРОВАТЬ ПО &Группировки";
	КонецЕсли; 
	
	ТекстЭлемента = СтрЗаменить(
	ТекстЭлемента, 
	"Документ.СчетНаОплату", 
	"Документ."+ИмяДокумента);  
	
	ТекстЭлемента = СтрЗаменить(
	ТекстЭлемента,
	"&Ресурс",
	ТекстРесурса);
	
	ДобавитьЭлементВЗапросПоказатели(Запрос, ТекстЭлемента, Стр, Индекс, Параметры);
	
КонецПроцедуры

Процедура Подключаемый_ЗакупкиРасчет(Запрос, Стр, Индекс, Параметры) Экспорт
	
	Если Стр.Ресурс="Закупки" Тогда
		ТекстРесурса = "СУММА(Рег.СуммаОборот)";
	Иначе
		Возврат;
	КонецЕсли; 
	
	ТекстЭлемента = СтрЗаменить(
	"ВЫБРАТЬ
	|   &ДляСравнения КАК ДляСравнения, 
	|   &Индекс КАК Индекс, 
	|   &Разделитель КАК Разделитель, 
	|	&Ресурс КАК Значение
	|ИЗ
	|	РегистрНакопления.Закупки.Обороты(&ДатаНачала, &ДатаОкончания, Период, ) КАК Рег
	|ГДЕ &Отборы
	|СГРУППИРОВАТЬ ПО &Группировки",
	"&Ресурс",
	ТекстРесурса);
	ДобавитьЭлементВЗапросПоказатели(Запрос, ТекстЭлемента, Стр, Индекс, Параметры);
	
КонецПроцедуры

Процедура Подключаемый_ДолгиРасчет(Запрос, Стр, Индекс, Параметры) Экспорт
	
	Если Стр.Ресурс="ДолгиНаши" Тогда
		ТекстРесурса = "СУММА(ВЫБОР КОГДА Рег.СуммаОстаток<0 ТОГДА -Рег.СуммаОстаток ИНАЧЕ 0 КОНЕЦ)";
	ИначеЕсли Стр.Ресурс="ДолгиНам" Тогда 
		ТекстРесурса = "СУММА(ВЫБОР КОГДА Рег.СуммаОстаток>0 ТОГДА Рег.СуммаОстаток ИНАЧЕ 0 КОНЕЦ)";
	ИначеЕсли Стр.Ресурс="ДолгиОбщие" Тогда
		ТекстРесурса = "СУММА(Рег.СуммаОстаток)";
	Иначе
		Возврат;
	КонецЕсли; 
	
	ТекстЭлемента =  
	"ВЫБРАТЬ
	|	&ДляСравнения КАК ДляСравнения,
	|	&Индекс КАК Индекс,
	|	Рег.Разделитель КАК Разделитель,
	|	&Ресурс КАК Значение
	|ИЗ
	|	(ВЫБРАТЬ
	|		Рег.Контрагент КАК Контрагент,
	|		Рег.ТипРасчетов КАК ТипРасчетов,
	|		&Разделитель КАК Разделитель,
	|		СУММА(Рег.СуммаОстаток) КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями.Остатки(&Период, ) КАК Рег
	|	ГДЕ
	|		&Отборы
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Рег.Контрагент,
	|		Рег.ТипРасчетов,
	|		&Разделитель
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Рег.Контрагент,
	|		Рег.ТипРасчетов,
	|		&Разделитель,
	|		СУММА(-Рег.СуммаОстаток)
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками.Остатки(&Период, ) КАК Рег
	|	ГДЕ
	|		&Отборы
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Рег.Контрагент,
	|		Рег.ТипРасчетов,
	|		&Разделитель) КАК Рег
	|
	|СГРУППИРОВАТЬ ПО
	|	Рег.Разделитель";
	
	ТекстЭлемента = СтрЗаменить(
	ТекстЭлемента,
	"&Ресурс",
	ТекстРесурса);
	ДобавитьЭлементВЗапросПоказатели(Запрос, ТекстЭлемента, Стр, Индекс, Параметры);
	
КонецПроцедуры

Процедура Подключаемый_ФинАнализРасчет(Запрос, Стр, Индекс, Параметры) Экспорт
	
	Если Стр.Ресурс="ЧистыеАктивы" Тогда
		ТекстРесурса = "СУММА(Рег.СуммаОстаток)";
	Иначе
		Возврат;
	КонецЕсли; 
	
	ТекстЭлемента =  
	"ВЫБРАТЬ
	|	&ДляСравнения КАК ДляСравнения,
	|	&Индекс КАК Индекс,
	|	&Разделитель КАК Разделитель,
	|	&Ресурс КАК Значение
	|ИЗ
	|	РегистрБухгалтерии.Управленческий.Остатки(
	|			&Период,
	|			Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ДенежныеСредства)
	|				ИЛИ Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ВнеоборотныеАктивы)
	|				ИЛИ Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.АмортизацияВнеоборотныхАктивов)
	|				ИЛИ Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.Дебиторы)
	|				ИЛИ Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.Запасы)
	|				ИЛИ Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.Кредиторы)
	|				ИЛИ Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КредитыИЗаймы)
	|				ИЛИ Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ПрочиеВнеоборотныеАктивы)
	|				ИЛИ Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ПрочиеОборотныеАктивы),
	|			СценарийПланирования = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический)) КАК Рег
	|ГДЕ
	|	&Отборы";
		                 
	ТекстЭлемента = СтрЗаменить(
	ТекстЭлемента,
	"&Ресурс",
	ТекстРесурса);
	ДобавитьЭлементВЗапросПоказатели(Запрос, ТекстЭлемента, Стр, Индекс, Параметры);
	
КонецПроцедуры

Процедура Подключаемый_РозницаРасчет(Запрос, Стр, Индекс, Параметры) Экспорт
	
	Если Стр.Ресурс="РозничныеПродажи" Тогда
		ТекстРесурса = "СУММА(Рег.СуммаОборот)";
	ИначеЕсли Стр.Ресурс="КоличествоЧеков" Тогда
		ТекстРесурса = "СУММА(Рег.КоличествоЧеков)";
	ИначеЕсли Стр.Ресурс="СреднийЧек" Тогда
		ТекстРесурса = "ВЫБОР КОГДА СУММА(Рег.КоличествоЧеков)=0 ТОГДА 0 ИНАЧЕ СУММА(Рег.СуммаПродаж)/СУММА(Рег.КоличествоЧеков) КОНЕЦ";
	ИначеЕсли Стр.Ресурс="ПолученоНаличными" Тогда
		ТекстРесурса = "СУММА(Рег.ПолученоНаличными)";
	ИначеЕсли Стр.Ресурс="ПолученоКартами" Тогда
		ТекстРесурса = "СУММА(Рег.ПолученоКартами)";
	ИначеЕсли Стр.Ресурс="СуммаОстаток" Тогда
		ТекстРесурса = "СУММА(Рег.СуммаОстаток)";
	Иначе
		Возврат;
	КонецЕсли; 
	
	Если Стр.Ресурс="РозничныеПродажи" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|   &ДляСравнения КАК ДляСравнения, 
		|   &Индекс КАК Индекс, 
		|   &Разделитель КАК Разделитель, 
		|	&Ресурс КАК Значение
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, Авто, ) КАК Рег
		|ГДЕ
		|	(Рег.Документ ССЫЛКА Документ.ОтчетОРозничныхПродажах
		|		ИЛИ Рег.Документ ССЫЛКА Документ.ЧекККМ)
		|	И &Отборы
		|СГРУППИРОВАТЬ ПО &Группировки";
	ИначеЕсли Стр.Ресурс="КоличествоЧеков" ИЛИ Стр.Ресурс="СреднийЧек" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&ДляСравнения КАК ДляСравнения,
		|	&Индекс КАК Индекс,
		|	Рег.Разделитель КАК Разделитель,
		|	&Ресурс КАК Значение
		|ИЗ
		|	(ВЫБРАТЬ
		|		&Разделитель КАК Разделитель,
		|		ПродажиОбороты.Документ.КассаККМ КАК КассаККМ,
		|		ПродажиОбороты.Организация КАК Организация,
		|		ПродажиОбороты.Документ.Контрагент КАК Контрагент,
		|		ПродажиОбороты.Подразделение КАК Подразделение,
		|		ПродажиОбороты.Документ.СтруктурнаяЕдиница КАК Склад,
		|		ПродажиОбороты.Ответственный КАК Ответственный,
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|				КОГДА ПродажиОбороты.Регистратор ССЫЛКА Документ.ЧекККМ
		|						ИЛИ ПродажиОбороты.Регистратор ССЫЛКА Документ.ЧекККМВозврат
		|					ТОГДА ПродажиОбороты.Регистратор
		|				КОГДА ДокументЧекККМ.Ссылка ССЫЛКА Документ.ЧекККМ
		|					ТОГДА ДокументЧекККМ.Ссылка
		|				КОГДА ДокументЧекККМВозврат.Ссылка ССЫЛКА Документ.ЧекККМВозврат
		|					ТОГДА ДокументЧекККМВозврат.Ссылка
		|			КОНЕЦ) КАК КоличествоЧеков,
		|		0 КАК СуммаПродаж
		|	ИЗ
		|		РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, Авто, ) КАК ПродажиОбороты
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ДокументЧекККМ
		|			ПО ПродажиОбороты.Регистратор = ДокументЧекККМ.КассоваяСмена
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат КАК ДокументЧекККМВозврат
		|			ПО ПродажиОбороты.Регистратор = ДокументЧекККМВозврат.КассоваяСмена
		|	ГДЕ
		|		(ПродажиОбороты.Документ ССЫЛКА Документ.ОтчетОРозничныхПродажах
		|				ИЛИ ПродажиОбороты.Документ ССЫЛКА Документ.ЧекККМ) 
		|		И ПродажиОбороты.КоличествоОборот <> 0
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПродажиОбороты.Ответственный,
		|		ПродажиОбороты.Подразделение,
		|		ПродажиОбороты.Документ.КассаККМ,
		|		ПродажиОбороты.Организация,
		|		ПродажиОбороты.Документ.СтруктурнаяЕдиница,
		|		ПродажиОбороты.Документ.Контрагент
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		&Разделитель,
		|		ПродажиОбороты.Документ.КассаККМ,
		|		ПродажиОбороты.Организация,
		|		ПродажиОбороты.Документ.Контрагент,
		|		ПродажиОбороты.Документ.Подразделение,
		|		ПродажиОбороты.Документ.СтруктурнаяЕдиница,
		|		ПродажиОбороты.Ответственный,
		|		0,
		|		СУММА(ПродажиОбороты.СуммаОборот)
		|	ИЗ
		|		РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, Авто, ) КАК ПродажиОбороты
		|	
		|	ГДЕ
		|		(ПродажиОбороты.Документ ССЫЛКА Документ.ОтчетОРозничныхПродажах
		|				ИЛИ ПродажиОбороты.Документ ССЫЛКА Документ.ЧекККМ)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПродажиОбороты.Документ.Подразделение,
		|		ПродажиОбороты.Ответственный,
		|		ПродажиОбороты.Документ.КассаККМ,
		|		ПродажиОбороты.Документ.Контрагент,
		|		ПродажиОбороты.Организация,
		|		ПродажиОбороты.Документ.СтруктурнаяЕдиница) КАК Рег
		|ГДЕ
		|	&Отборы
		|
		|СГРУППИРОВАТЬ ПО
		|	Рег.Разделитель";
	ИначеЕсли Стр.Ресурс="ПолученоНаличными" ИЛИ Стр.Ресурс="ПолученоКартами" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&ДляСравнения КАК ДляСравнения,
		|	&Индекс КАК Индекс,
		|	Рег.Разделитель КАК Разделитель,
		|	&Ресурс КАК Значение
		|ИЗ
		|	(ВЫБРАТЬ
		|		&Разделитель КАК Разделитель,
		|		ПродажиОбороты.Организация КАК Организация,
		|		ПродажиОбороты.Документ.Контрагент КАК Контрагент,
		|		ПродажиОбороты.Подразделение КАК Подразделение,
		|		ПродажиОбороты.Документ.СтруктурнаяЕдиница КАК Склад,
		|		ПродажиОбороты.Ответственный КАК Ответственный,
		|		ПродажиОбороты.Документ.КассаККМ КАК КассаККМ,
		|		ПродажиОбороты.СуммаОборот КАК ПолученоНаличными,
		|		0 КАК ПолученоКартами
		|	ИЗ
		|		РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, Авто, ) КАК ПродажиОбороты
		|	ГДЕ
		|		(ПродажиОбороты.Документ ССЫЛКА Документ.ОтчетОРозничныхПродажах
		|				ИЛИ ПродажиОбороты.Документ ССЫЛКА Документ.ЧекККМ)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		&Разделитель,
		|		ОплатаПлатежнымиКартамиОбороты.Организация,
		|		ОплатаПлатежнымиКартамиОбороты.Контрагент,
		|		ОплатаПлатежнымиКартамиОбороты.Регистратор.Подразделение,
		|		ОплатаПлатежнымиКартамиОбороты.СтруктурнаяЕдиница,
		|		ОплатаПлатежнымиКартамиОбороты.Регистратор.Ответственный,
		|		ОплатаПлатежнымиКартамиОбороты.ЭквайринговыйТерминал.Касса,
		|		-ОплатаПлатежнымиКартамиОбороты.СуммаОборот,
		|		ОплатаПлатежнымиКартамиОбороты.СуммаОборот
		|	ИЗ
		|		РегистрНакопления.ОплатаПлатежнымиКартами.Обороты(&ДатаНачала, &ДатаОкончания, Авто, ) КАК ОплатаПлатежнымиКартамиОбороты
		|	ГДЕ
		|		(ОплатаПлатежнымиКартамиОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
		|				ИЛИ ОплатаПлатежнымиКартамиОбороты.Регистратор ССЫЛКА Документ.ЧекККМ
		|				ИЛИ ОплатаПлатежнымиКартамиОбороты.Регистратор ССЫЛКА Документ.ЧекККМВозврат)) КАК Рег
		|ГДЕ
		|	&Отборы
		|
		|СГРУППИРОВАТЬ ПО
		|	Рег.Разделитель";
	ИначеЕсли Стр.Ресурс="СуммаОстаток" Тогда
		ТекстЗапроса =  
		"ВЫБРАТЬ
		|   &ДляСравнения КАК ДляСравнения, 
		|   &Индекс КАК Индекс, 
		|   &Разделитель КАК Разделитель, 
		|	&Ресурс КАК Значение
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(&Период, ) КАК Рег
		|ГДЕ &Отборы
		|СГРУППИРОВАТЬ ПО &Группировки";
	КонецЕсли; 
	
	ТекстЭлемента = СтрЗаменить(ТекстЗапроса, "&Ресурс", ТекстРесурса);
	ДобавитьЭлементВЗапросПоказатели(Запрос, ТекстЭлемента, Стр, Индекс, Параметры);
	
КонецПроцедуры

Процедура Подключаемый_НалогиРасчет(Запрос, Стр, Индекс, Параметры) Экспорт
	
	Если Стр.Ресурс="ТекущиеПлатежи" Тогда
		ТекстРесурса = "СУММА(ЕСТЬNULL(ЗаписиКалендаряПодготовкиОтчетности.СуммаНалога, 0))";
	ИначеЕсли Стр.Ресурс="КоличествоТекущихПлатежей" Тогда
		ТекстРесурса = "СУММА(ВЫБОР
			|	КОГДА ЕСТЬNULL(КалендарьПодготовкиОтчетности.Задача, КалендарьПерсональныхЗадачОтчетности.Задача) В (&МассивРасчетныхЗадач)
			|		ТОГДА 1
			|	ИНАЧЕ 0
			|КОНЕЦ)";
	ИначеЕсли Стр.Ресурс="КоличествоТекущихДокументов" Тогда
		ТекстРесурса = "СУММА(ВЫБОР
			|	КОГДА ЕСТЬNULL(КалендарьПодготовкиОтчетности.Задача, КалендарьПерсональныхЗадачОтчетности.Задача) В (&МассивРасчетныхЗадач)
			|		ТОГДА 0
			|	ИНАЧЕ 1
			|КОНЕЦ)";
	Иначе
		Возврат;
	КонецЕсли; 
	
	ТекстЭлемента =  
	"ВЫБРАТЬ
	|	&ДляСравнения КАК ДляСравнения,
	|	&Индекс КАК Индекс,
	|	&Разделитель КАК Разделитель,
	|	&Ресурс КАК Значение
	|ИЗ
	|	Справочник.ЗаписиКалендаряПодготовкиОтчетности КАК ЗаписиКалендаряПодготовкиОтчетности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО (Организации.Ссылка = ЗаписиКалендаряПодготовкиОтчетности.Организация)
	|			И (НЕ Организации.ПометкаУдаления)
	|			И (Организации.ИспользуетсяОтчетность)
	|			И (НЕ ЗаписиКалендаряПодготовкиОтчетности.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
	|		ПО ЗаписиКалендаряПодготовкиОтчетности.СобытиеКалендаря = КалендарьПодготовкиОтчетности.Ссылка
	|			И (НЕ ЗаписиКалендаряПодготовкиОтчетности.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КалендарьПерсональныхЗадачОтчетности КАК КалендарьПерсональныхЗадачОтчетности
	|		ПО ЗаписиКалендаряПодготовкиОтчетности.СобытиеКалендаря = КалендарьПерсональныхЗадачОтчетности.Ссылка
	|			И (НЕ КалендарьПерсональныхЗадачОтчетности.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ДатаПервогоВходаВСистему КАК ДатаПервогоВходаВСистему
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НЕ(ЕСТЬNULL(КалендарьПодготовкиОтчетности.ДатаНачалаИнформирования, КалендарьПерсональныхЗадачОтчетности.ДатаНачалаИнформирования) > &ТекущаяДата
	|				И ЗаписиКалендаряПодготовкиОтчетности.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСобытийКалендаря.НеНачато))
	|	И НЕ(ЗаписиКалендаряПодготовкиОтчетности.Завершено
	|				ИЛИ ЕСТЬNULL(КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия, КалендарьПерсональныхЗадачОтчетности.ДатаОкончанияСобытия) < ДатаПервогоВходаВСистему.Значение
	|					И ЗаписиКалендаряПодготовкиОтчетности.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСобытийКалендаря.НеНачато))
	|	И &Отборы";
	
	
	ТекстЭлемента = СтрЗаменить(
		ТекстЭлемента,
		"&Ресурс",
		ТекстРесурса);
		
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("МассивРасчетныхЗадач", КалендарьОтчетностиПовтИсп.ПолучитьМассивРасчетныхЗадач());
	ДобавитьЭлементВЗапросПоказатели(Запрос, ТекстЭлемента, Стр, Индекс, Параметры);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетДиаграмм

Процедура Подключаемый_ДинамикаПродажДиаграмма(Запрос, ПараметрыЗапросов, Стр, Индекс) Экспорт
	
	// Серии
	ТекстСерии2 = "0";
	Если Стр.Серия="Сумма" Тогда
		ТекстСерии1 = "СУММА(Рег.СуммаОборот)";
	ИначеЕсли Стр.Серия="Количество" Тогда
		ТекстСерии1 = "СУММА(Рег.КоличествоОборот)";
	ИначеЕсли Стр.Серия="КоличествоДокументов" Тогда
		ТекстСерии1 = "КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Рег.Регистратор)";
	ИначеЕсли Стр.Серия="Прибыль" Тогда
		ТекстСерии1 = "СУММА(Рег.СуммаОборот - Рег.СебестоимостьОборот)";
	ИначеЕсли Стр.Серия="ПрибыльИСебестоимость" Тогда
		ТекстСерии1 = "СУММА(Рег.СебестоимостьОборот)";
		ТекстСерии2 = "СУММА(Рег.СуммаОборот - Рег.СебестоимостьОборот)";
	ИначеЕсли Стр.Серия="ВозвратыСумма" Тогда
		ТекстСерии1 = "СУММА(ВЫБОР КОГДА Рег.Регистратор ССЫЛКА Документ.ПриходнаяНакладная ИЛИ Рег.Регистратор ССЫЛКА Документ.ЧекККМВозврат ТОГДА -Рег.СуммаОборот ИНАЧЕ 0 КОНЕЦ)";
	ИначеЕсли Стр.Серия="ВозвратыКоличество" Тогда
		ТекстСерии1 = "СУММА(ВЫБОР КОГДА Рег.Регистратор ССЫЛКА Документ.ПриходнаяНакладная ИЛИ Рег.Регистратор ССЫЛКА Документ.ЧекККМВозврат ТОГДА -Рег.КоличествоОборот ИНАЧЕ 0 КОНЕЦ)";
	Иначе
		Возврат;
	КонецЕсли;
	
	// Точки
	Если Стр.Точка="День" Тогда
	    ТекстТочки = "Рег.ПериодДень";
	ИначеЕсли Стр.Точка="Неделя" Тогда
	    ТекстТочки = "Рег.ПериодНеделя";
	ИначеЕсли Стр.Точка="Месяц" Тогда
	    ТекстТочки = "Рег.ПериодМесяц";
	Иначе
		Возврат;
	КонецЕсли;
	
	ТекстЭлемента = 
	"ВЫБРАТЬ
	|	&Серия1 КАК Серия1,
	|	&Серия2 КАК Серия2,
	|	&Точка КАК Точка
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, Авто, ) КАК Рег
	|ГДЕ &Отборы
	|СГРУППИРОВАТЬ ПО &Точка
	|УПОРЯДОЧИТЬ ПО Точка
	|ИТОГИ СУММА(Серия1), СУММА(Серия2) ПО Точка ПЕРИОДАМИ("+Стр.Точка+", &ДатаНачала, &ДатаОкончания)";
	ТекстЭлемента = СтрЗаменить(ТекстЭлемента, "&Серия1", ТекстСерии1);
	ТекстЭлемента = СтрЗаменить(ТекстЭлемента, "&Серия2", ТекстСерии2);
	ТекстЭлемента = СтрЗаменить(ТекстЭлемента, "&Точка", ТекстТочки);
	ДобавитьЭлементВЗапросДиаграммы(Запрос, ПараметрыЗапросов, ТекстЭлемента, Стр, Индекс);
	Запрос.УстановитьПараметр("Индекс", Индекс);
	
КонецПроцедуры

Процедура Подключаемый_СтруктураПродажДиаграмма(Запрос, ПараметрыЗапросов, Стр, Индекс) Экспорт
	
	// Серии
	Если Стр.Серия="НоменклатураРодитель" Тогда
	    ТекстСерии = "Рег.Номенклатура.Родитель";
	ИначеЕсли Стр.Серия="КатегорияНоменклатуры" Тогда
	    ТекстСерии = "Рег.Номенклатура.КатегорияНоменклатуры";
	ИначеЕсли Стр.Серия="Склад" Тогда
	    ТекстСерии = "Рег.Документ.СтруктурнаяЕдиница";
	ИначеЕсли Стр.Серия="Номенклатура" Тогда
	    ТекстСерии = "Рег.Номенклатура";
	ИначеЕсли Стр.Серия="Контрагент" Тогда
	    ТекстСерии = "Рег.Документ.Контрагент";
	ИначеЕсли Стр.Серия="Организация" Тогда
	    ТекстСерии = "Рег.Организация";
	ИначеЕсли Стр.Серия="Подразделение" Тогда
	    ТекстСерии = "Рег.Подразделение";
	ИначеЕсли Стр.Серия="Валюта" Тогда
	    ТекстСерии = "Рег.Документ.ВалютаДокумента";
	ИначеЕсли Стр.Серия="Ответственный" Тогда
	    ТекстСерии = "Рег.Ответственный";
	ИначеЕсли Стр.Серия="СвойствоНоменклатуры" ИЛИ Стр.Серия="СвойствоПокупателя" Тогда
	    ТекстСерии = "ЕстьNull(ДополнительныеРеквизиты.Значение, НЕОПРЕДЕЛЕНО)";
	Иначе
		Возврат;
	КонецЕсли;
	
	// Точки
	Если Стр.Точка="Сумма" Тогда
		ТекстТочки = "СУММА(Рег.СуммаОборот)";
	ИначеЕсли Стр.Точка="Количество" Тогда
		ТекстТочки = "СУММА(Рег.КоличествоОборот)";
	ИначеЕсли Стр.Точка="КоличествоДокументов" Тогда
		ТекстТочки = "КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Рег.Регистратор)";
	ИначеЕсли Стр.Точка="Прибыль" Тогда
		ТекстТочки = "СУММА(Рег.СуммаОборот - Рег.СебестоимостьОборот)";
	ИначеЕсли Стр.Точка="ВозвратыСумма" Тогда
		ТекстТочки = "СУММА(ВЫБОР КОГДА Рег.Регистратор ССЫЛКА Документ.ПриходнаяНакладная ИЛИ Рег.Регистратор ССЫЛКА Документ.ЧекККМВозврат ТОГДА -Рег.СуммаОборот ИНАЧЕ 0 КОНЕЦ)";
	ИначеЕсли Стр.Точка="ВозвратыКоличество" Тогда
		ТекстТочки = "СУММА(ВЫБОР КОГДА Рег.Регистратор ССЫЛКА Документ.ПриходнаяНакладная ИЛИ Рег.Регистратор ССЫЛКА Документ.ЧекККМВозврат ТОГДА -Рег.КоличествоОборот ИНАЧЕ 0 КОНЕЦ)";
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Стр.Серия="СвойствоНоменклатуры" Тогда
		ТекстЭлемента = 
		"ВЫБРАТЬ
		|	Рег.Серия1 КАК Серия1,
		|	Рег.Серия2 КАК Серия2,
		|	Рег.Точка КАК Точка 
		|ИЗ (ВЫБРАТЬ
		|		ЕСТЬNULL(ДополнительныеРеквизиты.Свойство, НЕОПРЕДЕЛЕНО) КАК СвойствоНоменклатуры,
		|		&Серия КАК Серия1,
		|		0 КАК Серия2,
		|		&Точка КАК Точка
		|	ИЗ
		|		РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, Авто, ) КАК Рег
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
		|			ПО Рег.Номенклатура = ДополнительныеРеквизиты.Ссылка
		|	СГРУППИРОВАТЬ ПО ДополнительныеРеквизиты.Свойство, &Серия) КАК Рег 
		|ГДЕ &Отборы
		|УПОРЯДОЧИТЬ ПО Точка УБЫВ";
	ИначеЕсли Стр.Серия="СвойствоПокупателя" Тогда
		ТекстЭлемента = 
		"ВЫБРАТЬ
		|	Рег.Серия1 КАК Серия1,
		|	Рег.Серия2 КАК Серия2,
		|	Рег.Точка КАК Точка 
		|ИЗ (ВЫБРАТЬ
		|		ЕСТЬNULL(ДополнительныеРеквизиты.Свойство, НЕОПРЕДЕЛЕНО) КАК СвойствоПокупателя,
		|		&Серия КАК Серия1,
		|		0 КАК Серия2,
		|		&Точка КАК Точка
		|	ИЗ
		|		РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, Авто, ) КАК Рег
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
		|			ПО Рег.Контрагент = ДополнительныеРеквизиты.Ссылка
		|	СГРУППИРОВАТЬ ПО ДополнительныеРеквизиты.Свойство, &Серия) КАК Рег 
		|ГДЕ &Отборы
		|УПОРЯДОЧИТЬ ПО Точка УБЫВ";
	Иначе
		ТекстЭлемента = 
		"ВЫБРАТЬ
		|	&Серия КАК Серия1,
		|	0 КАК Серия2,
		|	&Точка КАК Точка
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, Авто, ) КАК Рег
		|ГДЕ &Отборы
		|СГРУППИРОВАТЬ ПО &Серия
		|УПОРЯДОЧИТЬ ПО Точка УБЫВ";
	КонецЕсли;
	
	ТекстЭлемента = СтрЗаменить(ТекстЭлемента, "&Серия", ТекстСерии);
	ТекстЭлемента = СтрЗаменить(ТекстЭлемента, "&Точка", ТекстТочки);
	ДобавитьЭлементВЗапросДиаграммы(Запрос, ПараметрыЗапросов, ТекстЭлемента, Стр, Индекс);
	
КонецПроцедуры

Процедура Подключаемый_СтруктураРозничныхПродажДиаграмма(Запрос, ПараметрыЗапросов, Стр, Индекс) Экспорт
	
	// Серии
	Если Стр.Серия="НоменклатураРодитель" Тогда
	    ТекстСерии = "Рег.Номенклатура.Родитель";
	ИначеЕсли Стр.Серия="КатегорияНоменклатуры" Тогда
	    ТекстСерии = "Рег.Номенклатура.КатегорияНоменклатуры";
	ИначеЕсли Стр.Серия="Склад" Тогда
	    ТекстСерии = "Рег.Документ.СтруктурнаяЕдиница";
	ИначеЕсли Стр.Серия="Номенклатура" Тогда
	    ТекстСерии = "Рег.Номенклатура";
	ИначеЕсли Стр.Серия="Контрагент" Тогда
	    ТекстСерии = "Рег.Документ.Контрагент";
	ИначеЕсли Стр.Серия="Организация" Тогда
	    ТекстСерии = "Рег.Организация";
	ИначеЕсли Стр.Серия="Подразделение" Тогда
	    ТекстСерии = "Рег.Подразделение";
	ИначеЕсли Стр.Серия="КассаККМ" Тогда
	    ТекстСерии = "Рег.Документ.КассаККМ";
	ИначеЕсли Стр.Серия="Валюта" Тогда
	    ТекстСерии = "Рег.Документ.ВалютаДокумента";
	ИначеЕсли Стр.Серия="Ответственный" Тогда
	    ТекстСерии = "Рег.Ответственный";
	ИначеЕсли Стр.Серия="СвойствоНоменклатуры" ИЛИ Стр.Серия="СвойствоПокупателя" Тогда
	    ТекстСерии = "ЕстьNull(ДополнительныеРеквизиты.Значение, НЕОПРЕДЕЛЕНО)";
	Иначе
		Возврат;
	КонецЕсли;
	
	// Точки
	Если Стр.Точка="Сумма" Тогда
		ТекстТочки = "СУММА(Рег.СуммаОборот)";
	ИначеЕсли Стр.Точка="Количество" Тогда
		ТекстТочки = "СУММА(Рег.КоличествоОборот)";
	ИначеЕсли Стр.Точка="КоличествоДокументов" Тогда
		ТекстТочки = "КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Рег.Регистратор)";
	ИначеЕсли Стр.Точка="Прибыль" Тогда
		ТекстТочки = "СУММА(Рег.СуммаОборот - Рег.СебестоимостьОборот)";
	ИначеЕсли Стр.Точка="ВозвратыСумма" Тогда
		ТекстТочки = "СУММА(ВЫБОР КОГДА Рег.Регистратор ССЫЛКА Документ.ПриходнаяНакладная ИЛИ Рег.Регистратор ССЫЛКА Документ.ЧекККМВозврат ТОГДА -Рег.СуммаОборот ИНАЧЕ 0 КОНЕЦ)";
	ИначеЕсли Стр.Точка="ВозвратыКоличество" Тогда
		ТекстТочки = "СУММА(ВЫБОР КОГДА Рег.Регистратор ССЫЛКА Документ.ПриходнаяНакладная ИЛИ Рег.Регистратор ССЫЛКА Документ.ЧекККМВозврат ТОГДА -Рег.КоличествоОборот ИНАЧЕ 0 КОНЕЦ)";
	ИначеЕсли Стр.Точка="КоличествоЧеков" Тогда
		ТекстТочки = "МАКСИМУМ(ВложенныйЗапросЧеки.КоличествоЧеков)";
	ИначеЕсли Стр.Точка="СреднийЧек" Тогда
		ТекстТочки = "ВЫБОР КОГДА МАКСИМУМ(ВложенныйЗапросЧеки.КоличествоЧеков)=0 ТОГДА 0 ИНАЧЕ СУММА(Рег.СуммаОборот)/МАКСИМУМ(ВложенныйЗапросЧеки.КоличествоЧеков) КОНЕЦ";
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Стр.Серия="СвойствоНоменклатуры" Тогда
		ТекстЭлемента = 
		"ВЫБРАТЬ
		|	Рег.Серия1 КАК Серия1,
		|	Рег.Серия2 КАК Серия2,
		|	Рег.Точка КАК Точка 
		|ИЗ (ВЫБРАТЬ
		|		ЕСТЬNULL(ДополнительныеРеквизиты.Свойство, НЕОПРЕДЕЛЕНО) КАК СвойствоНоменклатуры,
		|		&Серия КАК Серия1,
		|		0 КАК Серия2,
		|		&Точка КАК Точка
		|	ИЗ
		|		РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, Авто, ) КАК Рег
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
		|			ПО Рег.Номенклатура = ДополнительныеРеквизиты.Ссылка
		|	ГДЕ (Рег.Документ ССЫЛКА Документ.ОтчетОРозничныхПродажах ИЛИ Рег.Документ ССЫЛКА Документ.ЧекККМ)
		|	СГРУППИРОВАТЬ ПО ДополнительныеРеквизиты.Свойство, &Серия) КАК Рег 
		|ГДЕ &Отборы
		|УПОРЯДОЧИТЬ ПО Точка УБЫВ";
	ИначеЕсли Стр.Серия="СвойствоПокупателя" Тогда
		ТекстЭлемента = 
		"ВЫБРАТЬ
		|	Рег.Серия1 КАК Серия1,
		|	Рег.Серия2 КАК Серия2,
		|	Рег.Точка КАК Точка 
		|ИЗ (ВЫБРАТЬ
		|		ЕСТЬNULL(ДополнительныеРеквизиты.Свойство, НЕОПРЕДЕЛЕНО) КАК СвойствоПокупателя,
		|		&Серия КАК Серия1,
		|		0 КАК Серия2,
		|		&Точка КАК Точка
		|	ИЗ
		|		РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, Авто, ) КАК Рег
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
		|			ПО Рег.Контрагент = ДополнительныеРеквизиты.Ссылка
		|	ГДЕ (Рег.Документ ССЫЛКА Документ.ОтчетОРозничныхПродажах ИЛИ Рег.Документ ССЫЛКА Документ.ЧекККМ)
		|	СГРУППИРОВАТЬ ПО ДополнительныеРеквизиты.Свойство, &Серия) КАК Рег 
		|ГДЕ &Отборы
		|УПОРЯДОЧИТЬ ПО Точка УБЫВ";
	Иначе
		ТекстЭлемента = 
		"ВЫБРАТЬ
		|	&Серия КАК Серия1,
		|	0 КАК Серия2,
		|	&Точка КАК Точка
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, Авто, ) КАК Рег
		|ГДЕ &Отборы
		|	И (Рег.Документ ССЫЛКА Документ.ОтчетОРозничныхПродажах ИЛИ Рег.Документ ССЫЛКА Документ.ЧекККМ)
		|СГРУППИРОВАТЬ ПО &Серия
		|УПОРЯДОЧИТЬ ПО Точка УБЫВ";
	КонецЕсли;
	
	Если Стр.Точка="КоличествоЧеков" ИЛИ Стр.Точка="СреднийЧек" Тогда
		ТекстСоединение =
		"	ЛЕВОЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ
		|			&Серия КАК Серия1,
		|			0 КАК Серия2,
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|				КОГДА Рег.Регистратор ССЫЛКА Документ.ЧекККМ
		|						ИЛИ Рег.Регистратор ССЫЛКА Документ.ЧекККМВозврат
		|					ТОГДА Рег.Регистратор
		|				КОГДА ДокументЧекККМ.Ссылка ССЫЛКА Документ.ЧекККМ
		|					ТОГДА ДокументЧекККМ.Ссылка
		|				КОГДА ДокументЧекККМВозврат.Ссылка ССЫЛКА Документ.ЧекККМВозврат
		|					ТОГДА ДокументЧекККМВозврат.Ссылка
		|			КОНЕЦ) КАК КоличествоЧеков
		|		ИЗ
		|			РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, Авто, ) КАК Рег
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ДокументЧекККМ
		|				ПО Рег.Регистратор = ДокументЧекККМ.КассоваяСмена
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат КАК ДокументЧекККМВозврат
		|				ПО Рег.Регистратор = ДокументЧекККМВозврат.КассоваяСмена
		|		ГДЕ
		|			(Рег.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
		|					ИЛИ Рег.Регистратор ССЫЛКА Документ.ЧекККМ
		|					ИЛИ Рег.Регистратор ССЫЛКА Документ.ЧекККМВозврат)
		|		СГРУППИРОВАТЬ ПО &Серия) КАК ВложенныйЗапросЧеки
		|	ПО &Серия=ВложенныйЗапросЧеки.Серия1
		|ГДЕ &Отборы";
		ТекстЭлемента = СтрЗаменить(ТекстЭлемента, "ГДЕ &Отборы", ТекстСоединение);
	КонецЕсли; 
	
	ТекстЭлемента = СтрЗаменить(ТекстЭлемента, "&Серия", ТекстСерии);
	ТекстЭлемента = СтрЗаменить(ТекстЭлемента, "&Точка", ТекстТочки);
	ДобавитьЭлементВЗапросДиаграммы(Запрос, ПараметрыЗапросов, ТекстЭлемента, Стр, Индекс);
	
КонецПроцедуры

Процедура Подключаемый_ДинамикаДенегДиаграмма(Запрос, ПараметрыЗапросов, Стр, Индекс) Экспорт
	
	// Серии
	Если Стр.Серия="СуммаОстаток" Тогда
		ТекстСерии = "СУММА(Рег.СуммаКонечныйОстаток)";
	ИначеЕсли Стр.Серия="СуммаПриход" Тогда
		ТекстСерии = "СУММА(Рег.СуммаПриход)";
	ИначеЕсли Стр.Серия="СуммаРасход" Тогда
		ТекстСерии = "СУММА(Рег.СуммаРасход)";
	Иначе
		Возврат;
	КонецЕсли;
	
	// Точки
	Если Стр.Точка="День" Тогда
	    ТекстТочки = "Рег.ПериодДень";
	ИначеЕсли Стр.Точка="Неделя" Тогда
	    ТекстТочки = "Рег.ПериодНеделя";
	ИначеЕсли Стр.Точка="Месяц" Тогда
	    ТекстТочки = "Рег.ПериодМесяц";
	Иначе
		Возврат;
	КонецЕсли;
	
	
	ТекстЭлемента = 
	"ВЫБРАТЬ
	|	&Серия КАК Серия1,
	|	0 КАК Серия2,
	|	&Точка КАК Точка
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, Авто, ДвиженияИГраницыПериода, ) КАК Рег
	|ГДЕ &Отборы
	|СГРУППИРОВАТЬ ПО &Точка
	|УПОРЯДОЧИТЬ ПО Точка
	|ИТОГИ СУММА(Серия1), СУММА(Серия2) ПО Точка ПЕРИОДАМИ("+Стр.Точка+", &ДатаНачала, &ДатаОкончания)";
	ТекстЭлемента = СтрЗаменить(ТекстЭлемента, "&Серия", ТекстСерии);
	ТекстЭлемента = СтрЗаменить(ТекстЭлемента, "&Точка", ТекстТочки);
	ДобавитьЭлементВЗапросДиаграммы(Запрос, ПараметрыЗапросов, ТекстЭлемента, Стр, Индекс);
	Запрос.УстановитьПараметр("Индекс", Индекс);
	
КонецПроцедуры

Процедура Подключаемый_СтруктураДенегДиаграмма(Запрос, ПараметрыЗапросов, Стр, Индекс) Экспорт
	
	// Серии
	Если Стр.Серия="БанковскийСчетКасса" Тогда
	    ТекстСерии = "Рег.БанковскийСчетКасса";
	ИначеЕсли Стр.Серия="Валюта" Тогда
	    ТекстСерии = "Рег.Валюта";
	ИначеЕсли Стр.Серия="Организация" Тогда
	    ТекстСерии = "Рег.Организация";
	ИначеЕсли Стр.Серия="ТипДенежныхСредств" Тогда
	    ТекстСерии = "Рег.ТипДенежныхСредств";
	ИначеЕсли Стр.Серия="ХозяйственнаяОперация" Тогда
	    ТекстСерии = "Рег.ХозяйственнаяОперация";
	ИначеЕсли Стр.Серия="Аналитика" Тогда
	    ТекстСерии = "Рег.Аналитика";
	ИначеЕсли Стр.Серия="Статья" Тогда
	    ТекстСерии = "Рег.Статья";
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Стр.Серия="ХозяйственнаяОперация" ИЛИ Стр.Серия="Аналитика" ИЛИ Стр.Серия="Статья" Тогда
		// Точки
		Если Стр.Точка="СуммаПриход" Тогда
			ТекстТочки = "СУММА(ВЫБОР КОГДА Рег.ВидДвижения=ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА Рег.Сумма ИНАЧЕ 0 КОНЕЦ)";
		ИначеЕсли Стр.Точка="СуммаРасход" Тогда
			ТекстТочки = "СУММА(ВЫБОР КОГДА Рег.ВидДвижения=ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА Рег.Сумма ИНАЧЕ 0 КОНЕЦ)";
		Иначе
			Возврат;
		КонецЕсли;
		ТекстЭлемента = 
		"ВЫБРАТЬ
		|	&Серия КАК Серия1,
		|	0 КАК Серия2,
		|	&Точка КАК Точка
		|ИЗ
		|	РегистрНакопления.ДенежныеСредства КАК Рег
		|ГДЕ Рег.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И &Отборы
		|СГРУППИРОВАТЬ ПО &Серия
		|УПОРЯДОЧИТЬ ПО Точка УБЫВ";
	Иначе
		// Точки
		Если Стр.Точка="СуммаОстаток" Тогда
			ТекстТочки = "СУММА(Рег.СуммаКонечныйОстаток)";
		ИначеЕсли Стр.Точка="СуммаПриход" Тогда
			ТекстТочки = "СУММА(Рег.СуммаПриход)";
		ИначеЕсли Стр.Точка="СуммаРасход" Тогда
			ТекстТочки = "СУММА(Рег.СуммаРасход)";
		Иначе
			Возврат;
		КонецЕсли;
		ТекстЭлемента = 
		"ВЫБРАТЬ
		|	&Серия КАК Серия1,
		|	0 КАК Серия2,
		|	&Точка КАК Точка
		|ИЗ
		|	РегистрНакопления.ДенежныеСредства.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, Авто, ДвиженияИГраницыПериода, ) КАК Рег
		|ГДЕ &Отборы
		|СГРУППИРОВАТЬ ПО &Серия
		|УПОРЯДОЧИТЬ ПО Точка УБЫВ";
	КонецЕсли; 
	ТекстЭлемента = СтрЗаменить(ТекстЭлемента, "&Серия", ТекстСерии);
	ТекстЭлемента = СтрЗаменить(ТекстЭлемента, "&Точка", ТекстТочки);
	ДобавитьЭлементВЗапросДиаграммы(Запрос, ПараметрыЗапросов, ТекстЭлемента, Стр, Индекс);
	
КонецПроцедуры

Процедура Подключаемый_ДинамикаАктивовПассивовДиаграмма(Результат, Стр, Индекс, Актив = Истина) Экспорт
	
	// Серии
	Если НЕ Стр.Серия="Сумма" Тогда
		Возврат;
	КонецЕсли;
	
	// Точки
	Если НЕ Стр.Точка="Время" Тогда
		Возврат;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Обработки.ПульсБизнеса.ПолучитьМакет("СКД_АктивыПассивы");
	НастройкиОтчета = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	ВнешниеНаборыДанных = Новый Структура;
	Если НЕ СхемаКомпоновкиДанных.НаборыДанных.Найти("ТаблицаПериодов")=Неопределено Тогда
		ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("ПериодБаланса", Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.Дата)));
		КонецПериода = ?(ЗначениеЗаполнено(Стр.Период.ДатаОкончания),КонецМесяца(Стр.Период.ДатаОкончания), КонецМесяца(ТекущаяДатаСеанса()));
		НачалоПериода = ?(ЗначениеЗаполнено(Стр.Период.ДатаНачала), Стр.Период.ДатаНачала, НачалоГода(ТекущаяДатаСеанса()));
		КоличествоДней = Окр((КонецПериода-НачалоПериода)/(3600*24));
		ДнейНаПериод = Окр(КоличествоДней/10); 
		Если ДнейНаПериод=0 Тогда
			ДнейНаПериод = 1;
		КонецЕсли; 
		Позиция = НачалоПериода;
		Пока Позиция<КонецПериода Цикл
			ТаблицаДанных.Добавить().ПериодБаланса = Позиция;
			Позиция = Позиция+ДнейНаПериод*24*3600;
		КонецЦикла;
		ВнешниеНаборыДанных.Вставить("ТаблицаПериодов",ТаблицаДанных);
	КонецЕсли;
	
	Если ТипЗнч(Стр.Фильтры)=Тип("ФиксированныйМассив") И Стр.Фильтры.Количество()>0 Тогда
		Для каждого Фильтр Из Стр.Фильтры Цикл
			ЭлементОтбора = НастройкиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Фильтр.Поле);
			ЭлементОтбора.ВидСравнения = Фильтр.ВидСравнения;
			ЭлементОтбора.ПравоеЗначение = Фильтр.Значение;
			ЭлементОтбора.Использование = Истина;
		КонецЦикла;
	КонецЕсли;
	
	ТипыСчета = Новый Массив;
	Если Актив Тогда
		ТипыСчета.Добавить(Перечисления.ТипыСчетов.ДенежныеСредства);
		ТипыСчета.Добавить(Перечисления.ТипыСчетов.КредитыИЗаймы);
		ТипыСчета.Добавить(Перечисления.ТипыСчетов.АмортизацияВнеоборотныхАктивов);
		ТипыСчета.Добавить(Перечисления.ТипыСчетов.ВнеоборотныеАктивы);
		ТипыСчета.Добавить(Перечисления.ТипыСчетов.Дебиторы);
		ТипыСчета.Добавить(Перечисления.ТипыСчетов.Запасы);
		ТипыСчета.Добавить(Перечисления.ТипыСчетов.ПрочиеВнеоборотныеАктивы);
		ТипыСчета.Добавить(Перечисления.ТипыСчетов.ПрочиеОборотныеАктивы);
	Иначе
		ТипыСчета.Добавить(Перечисления.ТипыСчетов.Кредиторы);
		ТипыСчета.Добавить(Перечисления.ТипыСчетов.КредитыИЗаймы);
		ТипыСчета.Добавить(Перечисления.ТипыСчетов.ДолгосрочныеОбязательства);
		ТипыСчета.Добавить(Перечисления.ТипыСчетов.НалогНаПрибыль);
		ТипыСчета.Добавить(Перечисления.ТипыСчетов.ПроцентыПоКредитам);
	КонецЕсли; 
	Параметр = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("ТипыСчета");
	Параметр.Значение = ТипыСчета;
	Параметр.Использование = Истина;
	Параметр = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("АктивыПассивы");
	Параметр.Значение = Актив;
	Параметр.Использование = Истина;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	// Создадим и инициализируем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных,, Истина);

	// Создадим и инициализируем процессор вывода результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Дерево = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(Дерево);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	Если Результат.Получить(Индекс)=Неопределено Тогда
		Результат.Вставить(Индекс, Новый Массив);
	КонецЕсли;
	
	Порядок = 0;
	Для каждого СтрПериод Из Дерево.Строки Цикл
		Если СтрПериод.Строки.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		Если Актив Тогда
			СтруктураЗначения = Новый Структура("Серия1, Серия2, Серия3, Серия4", 0, 0, 0, 0);
			Для каждого СтрДетали Из СтрПериод.Строки Цикл
				Если СтрДетали.ТипСчета=Перечисления.ТипыСчетов.Дебиторы 
					ИЛИ СтрДетали.ТипСчета=Перечисления.ТипыСчетов.КредитыИЗаймы Тогда
					СтруктураЗначения.Серия1 = СтруктураЗначения.Серия1+СтрДетали.СуммаОстаток;
				ИначеЕсли СтрДетали.ТипСчета=Перечисления.ТипыСчетов.ДенежныеСредства Тогда
					СтруктураЗначения.Серия2 = СтруктураЗначения.Серия2+СтрДетали.СуммаОстаток;
				ИначеЕсли СтрДетали.ТипСчета=Перечисления.ТипыСчетов.Запасы Тогда
					СтруктураЗначения.Серия3 = СтруктураЗначения.Серия3+СтрДетали.СуммаОстаток;
				ИначеЕсли СтрДетали.ТипСчета=Перечисления.ТипыСчетов.ВнеоборотныеАктивы 
					ИЛИ СтрДетали.ТипСчета=Перечисления.ТипыСчетов.ПрочиеВнеоборотныеАктивы 
					ИЛИ СтрДетали.ТипСчета=Перечисления.ТипыСчетов.АмортизацияВнеоборотныхАктивов 
					ИЛИ СтрДетали.ТипСчета=Перечисления.ТипыСчетов.ПрочиеОборотныеАктивы Тогда
					СтруктураЗначения.Серия4 = СтруктураЗначения.Серия4+СтрДетали.СуммаОстаток;
				КонецЕсли; 
			КонецЦикла;
		Иначе
			СтруктураЗначения = Новый Структура("Серия1, Серия2, Серия3", 0, 0, 0, 0, 0);
			Для каждого СтрДетали Из СтрПериод.Строки Цикл
				Если СтрДетали.ТипСчета=Перечисления.ТипыСчетов.Кредиторы 
					ИЛИ СтрДетали.ТипСчета=Перечисления.ТипыСчетов.ПроцентыПоКредитам Тогда
					СтруктураЗначения.Серия1 = СтруктураЗначения.Серия1+СтрДетали.СуммаОстаток;
				ИначеЕсли СтрДетали.ТипСчета=Перечисления.ТипыСчетов.КредитыИЗаймы 
					ИЛИ СтрДетали.ТипСчета=Перечисления.ТипыСчетов.ДолгосрочныеОбязательства Тогда
					СтруктураЗначения.Серия2 = СтруктураЗначения.Серия2+СтрДетали.СуммаОстаток;
				ИначеЕсли СтрДетали.ТипСчета=Перечисления.ТипыСчетов.НалогНаПрибыль Тогда
					СтруктураЗначения.Серия3 = СтруктураЗначения.Серия3+СтрДетали.СуммаОстаток;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
		СтруктураЗначения.Вставить("КоличествоСерий", СтруктураЗначения.Количество());
		СтруктураЗначения.Вставить("Точка", СтрПериод.ПериодБаланса);
		СтруктураЗначения.Вставить("ДляСравнения", Ложь);
		СтруктураЗначения.Вставить("Порядок", Порядок);
		Порядок = Порядок+1;
		Результат[Индекс].Добавить(СтруктураЗначения);
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти 

#Область Актуальность

Функция ОпределитьАктуальность(Параметры)
	
	// Показатели остатков
	Для каждого ОписаниеПоказателя Из Параметры.Показатели Цикл
		Если НЕ ОписаниеПоказателя.Остаток Тогда
			Продолжить;
		КонецЕсли;
		Если ОписаниеПоказателя.Ресурс <> "ЧистыеАктивы" Тогда
			Продолжить;
		КонецЕсли; 
		ДатаАнализа = Параметры.Дата.Дата;
		Если ДатаАнализа >= НачалоМесяца(ТекущаяДатаСеанса()) Тогда
			ДатаАнализа = ДобавитьМесяц(ТекущаяДатаСеанса(), -1);
		КонецЕсли; 
		Организации = ОрганизацииИзФильтров(ОписаниеПоказателя.Фильтры);
		РезультатПроверки = ЗакрытиеМесяца.НеактуальныеДанныеСебестоимостиВПериоде(НачалоМесяца(ДатаАнализа), КонецМесяца(ДатаАнализа), Организации);
		Если РезультатПроверки <> Неопределено Тогда
			Возврат РезультатПроверки;
		КонецЕсли;
		Если ЗначениеЗаполнено(Параметры.ДатаСравнения) Тогда
			ДатаАнализа = Параметры.ДатаСравнения.Дата;
			Если ДатаАнализа >= НачалоМесяца(ТекущаяДатаСеанса()) Тогда
				ДатаАнализа = ДобавитьМесяц(ТекущаяДатаСеанса(), -1);
			КонецЕсли; 
			РезультатПроверки = ЗакрытиеМесяца.НеактуальныеДанныеСебестоимостиВПериоде(НачалоМесяца(ДатаАнализа), КонецМесяца(ДатаАнализа), Организации);
			Если РезультатПроверки <> Неопределено Тогда
				Возврат РезультатПроверки;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
	// Показатели оборотов
	Для каждого ОписаниеПоказателя Из Параметры.Показатели Цикл
		Если ОписаниеПоказателя.Остаток Тогда
			Продолжить;
		КонецЕсли; 
		Если ОписаниеПоказателя.Ресурс <> "Себестоимость" 
			И ОписаниеПоказателя.Ресурс <> "Прибыль"
			И ОписаниеПоказателя.Ресурс <> "Наценка"
			И ОписаниеПоказателя.Ресурс <> "Рентабельность" Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(Параметры.Период) = Тип("СтандартныйПериод") ИЛИ ТипЗнч(Параметры.Период) = Тип("Структура") Тогда
			ДатаНачала = Параметры.Период.ДатаНачала;
			ДатаОкончания = Параметры.Период.ДатаОкончания;
			Если ДатаОкончания >= НачалоМесяца(ТекущаяДатаСеанса()) Тогда
				ДатаОкончания = ДобавитьМесяц(ТекущаяДатаСеанса(), -1);
			КонецЕсли; 
		Иначе
			ДатаНачала = '0001-01-01';
			ДатаОкончания = '0001-01-01';
		КонецЕсли; 
		Организации = ОрганизацииИзФильтров(ОписаниеПоказателя.Фильтры);
		РезультатПроверки = ЗакрытиеМесяца.НеактуальныеДанныеСебестоимостиВПериоде(НачалоМесяца(ДатаНачала), КонецМесяца(ДатаОкончания), Организации);
		Если РезультатПроверки <> Неопределено Тогда
			Возврат РезультатПроверки;
		КонецЕсли;
		Если ТипЗнч(Параметры.ПериодСравнения) = Тип("СтандартныйПериод") ИЛИ ТипЗнч(Параметры.ПериодСравнения) = Тип("Структура") Тогда
			ДатаНачала = Параметры.ПериодСравнения.ДатаНачала;
			ДатаОкончания = Параметры.ПериодСравнения.ДатаОкончания;
			Если ДатаОкончания >= НачалоМесяца(ТекущаяДатаСеанса()) Тогда
				ДатаОкончания = ДобавитьМесяц(ТекущаяДатаСеанса(), -1);
			КонецЕсли; 
			РезультатПроверки = ЗакрытиеМесяца.НеактуальныеДанныеСебестоимостиВПериоде(НачалоМесяца(ДатаНачала), КонецМесяца(ДатаОкончания), Организации);
			Если РезультатПроверки <> Неопределено Тогда
				Возврат РезультатПроверки;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
	// Диаграммы
	Для каждого ОписаниеДиаграммы Из Параметры.Диаграммы Цикл
		Если ОписаниеДиаграммы.Серия <> "Прибыль"
			И ОписаниеДиаграммы.Серия <> "ПрибыльИСебестоимость"
			И ОписаниеДиаграммы.Точка <> "Прибыль"
			И ОписаниеДиаграммы.Диаграмма <> "ДинамикаАктивовПассивов" Тогда
			Продолжить;
		КонецЕсли; 
		Если ТипЗнч(ОписаниеДиаграммы.Период) = Тип("СтандартныйПериод") ИЛИ ТипЗнч(ОписаниеДиаграммы.Период) = Тип("Структура") Тогда
			ДатаНачала = ОписаниеДиаграммы.Период.ДатаНачала;
			ДатаОкончания = ОписаниеДиаграммы.Период.ДатаОкончания;
			Если ДатаОкончания >= НачалоМесяца(ТекущаяДатаСеанса()) Тогда
				ДатаОкончания = ДобавитьМесяц(ТекущаяДатаСеанса(), -1);
			КонецЕсли; 
		Иначе
			ДатаНачала = '0001-01-01';
			ДатаОкончания = '0001-01-01';
		КонецЕсли; 
		Организации = ОрганизацииИзФильтров(ОписаниеДиаграммы.Фильтры);
		РезультатПроверки = ЗакрытиеМесяца.НеактуальныеДанныеСебестоимостиВПериоде(НачалоМесяца(ДатаНачала), КонецМесяца(ДатаОкончания), Организации);
		Если РезультатПроверки <> Неопределено Тогда
			Возврат РезультатПроверки;
		КонецЕсли;
		Если ТипЗнч(ОписаниеДиаграммы.ПериодСравнения) = Тип("СтандартныйПериод") ИЛИ ТипЗнч(ОписаниеДиаграммы.ПериодСравнения) = Тип("Структура") Тогда
			ДатаНачала = ОписаниеДиаграммы.ПериодСравнения.ДатаНачала;
			ДатаОкончания = ОписаниеДиаграммы.ПериодСравнения.ДатаОкончания;
			Если ДатаОкончания >= НачалоМесяца(ТекущаяДатаСеанса()) Тогда
				ДатаОкончания = ДобавитьМесяц(ТекущаяДатаСеанса(), -1);
			КонецЕсли; 
			РезультатПроверки = ЗакрытиеМесяца.НеактуальныеДанныеСебестоимостиВПериоде(НачалоМесяца(ДатаНачала), КонецМесяца(ДатаОкончания), Организации);
			Если РезультатПроверки <> Неопределено Тогда
				Возврат РезультатПроверки;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОрганизацииИзФильтров(Фильтры)
	
	Если Фильтры <> Тип("ФиксированныйМассив") Тогда
		Возврат Новый Массив;
	КонецЕсли; 
	
	Организации = Новый Массив;
	ИсключенныеОрганизации = Новый Массив;
	
	Для каждого ОписаниеФильтра Из Фильтры Цикл
		Если ОписаниеФильтра.Поле <> "Организация" Тогда
			Продолжить;
		КонецЕсли;
		Если ОписаниеФильтра.ВидСравнения <> ВидСравненияКомпоновкиДанных.НеВСписке 
			И ОписаниеФильтра.ВидСравнения <> ВидСравненияКомпоновкиДанных.НеРавно 
			И ОписаниеФильтра.ВидСравнения <> ВидСравненияКомпоновкиДанных.ВСписке 
			И ОписаниеФильтра.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно Тогда
			Продолжить;
		КонецЕсли; 
		ПризнакИсключения = (ОписаниеФильтра.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке 
			ИЛИ ОписаниеФильтра.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно);
		Если ТипЗнч(ОписаниеФильтра.Значение) = Тип("СписокЗначений") Тогда
			Для каждого ЭлементФильтра Из ОписаниеФильтра.Значение Цикл
				Если НЕ ЗначениеЗаполнено(ЭлементФильтра.Значение) Тогда
					Продолжить;
				КонецЕсли;
				Если ПризнакИсключения Тогда
					ИсключенныеОрганизации.Добавить(ЭлементФильтра.Значение);
				Иначе
					Организации.Добавить(ЭлементФильтра.Значение);
				КонецЕсли; 
			КонецЦикла;
		ИначеЕсли ТипЗнч(ОписаниеФильтра.Значение) = Тип("СправочникСсылка.Организации") И ЗначениеЗаполнено(ОписаниеФильтра.Значение) Тогда
			Если ПризнакИсключения Тогда
				ИсключенныеОрганизации.Добавить(ОписаниеФильтра.Значение);
			Иначе
				Организации.Добавить(ОписаниеФильтра.Значение);
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	Если ИсключенныеОрганизации.Количество() > 0 Тогда
		ЗапросОрганизации = Новый Запрос;
		ЗапросОрганизации.УстановитьПараметр("Организации", Организации);
		ЗапросОрганизации.УстановитьПараметр("БезОтбораОрганизации", Организации.Количество() = 0);
		ЗапросОрганизации.УстановитьПараметр("ИсключенныеОрганизации", ИсключенныеОрганизации);
		ЗапросОрганизации.УстановитьПараметр("БезОтбораИсключенныеОрганизации", ИсключенныеОрганизации.Количество() = 0);
		ЗапросОрганизации.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	(&БезОтбораОрганизации
		|			ИЛИ Организации.Ссылка В (&Организации))
		|	И (&БезОтбораИсключенныеОрганизации
		|			ИЛИ НЕ Организации.Ссылка В (&ИсключенныеОрганизации))";
		Организации = ЗапросОрганизации.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли; 
	
	Возврат Организации;
	
КонецФункции

#КонецОбласти 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область Показатели

Процедура ДобавитьЭлементВЗапросПоказатели(Запрос, ТекстЭлемента, Стр, Индекс, Параметры)
	
	Элемент = ТекстЭлемента;
	Элемент = СтрЗаменить(Элемент, "&ДляСравнения", "ЛОЖЬ");
	ОбработатьЭлементЗапросаПоказатели(Стр, Запрос, Элемент, Индекс);
	
	// Режим сравнения
	Если (Параметры.ПериодСравнения<>Неопределено И НЕ Стр.Остаток) ИЛИ
		(Параметры.ДатаСравнения<>Неопределено И Стр.Остаток) Тогда
		Элемент = ТекстЭлемента;
		Элемент = СтрЗаменить(Элемент, "&ДляСравнения", "ИСТИНА");
		ОбработатьЭлементЗапросаПоказатели(Стр, Запрос, Элемент, Индекс, "Сравнения");
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработатьЭлементЗапросаПоказатели(Стр, Запрос, Элемент, Индекс, Суффикс = "")
	
	Если НЕ ПустаяСтрока(Суффикс) Тогда
		Элемент = СтрЗаменить(Элемент, "&ДатаНачала", "&ДатаНачала"+Суффикс);
		Элемент = СтрЗаменить(Элемент, "&ДатаОкончания", "&ДатаОкончания"+Суффикс);
		Элемент = СтрЗаменить(Элемент, "&Период", "&Период"+Суффикс);
	КонецЕсли; 
	Элемент = СтрЗаменить(Элемент, "&Индекс", Строка(Индекс));
	Если ТипЗнч(Стр.Настройки)=Тип("ФиксированныйМассив") И Стр.Настройки.Количество()>0 Тогда
		Для каждого Настройка Из Стр.Настройки Цикл
			Если НЕ Настройка.Значение Тогда
				Продолжить;
			КонецЕсли; 
			Если Настройка.Имя="ВРазрезеВалют" Тогда
				Разделитель = "Валюта";
				Элемент = СтрЗаменить(Элемент, "Рег.Сумма", "Рег.СуммаВал");
				Элемент = СтрЗаменить(Элемент, "КАК Сумма", "КАК СуммаВал");
			Иначе
				Продолжить;
			КонецЕсли;
			Элемент = СтрЗаменить(Элемент, "&Разделитель", "Рег."+Разделитель);
		КонецЦикла; 
	КонецЕсли;
	Элемент = СтрЗаменить(Элемент, "&Разделитель", "НЕОПРЕДЕЛЕНО");
	Если ТипЗнч(Стр.Фильтры)=Тип("ФиксированныйМассив") И Стр.Фильтры.Количество()>0 Тогда
		Отборы = "";
		Для каждого Фильтр Из Стр.Фильтры Цикл
			ИмяПараметра = "Значение"+СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
			ТекстФильтра = СтрокаОтбора(Фильтр, ИмяПараметра);
			Если ПустаяСтрока(ТекстФильтра) Тогда
				Продолжить;
			КонецЕсли; 
			Отборы = Отборы+Символы.ПС+?(ПустаяСтрока(Отборы), "", "И ");
			Отборы = Отборы+ТекстФильтра;
			Запрос.УстановитьПараметр(ИмяПараметра, ?(ТипЗнч(Фильтр.Значение)=Тип("СписокЗначений"), Фильтр.Значение.ВыгрузитьЗначения(), Фильтр.Значение));
		КонецЦикла;
	КонецЕсли;
	Если ПустаяСтрока(Отборы) Тогда
		Отборы = "ИСТИНА";
	КонецЕсли; 
	Элемент = СтрЗаменить(Элемент, "&Отборы", Отборы);
	Если ЗначениеЗаполнено(Разделитель) Тогда
		Группировки = "Рег."+Разделитель;
	Иначе
		Группировки = "НЕОПРЕДЕЛЕНО";
	КонецЕсли;
	Элемент = СтрЗаменить(Элемент, "&Группировки", Группировки);
	Запрос.Текст = Запрос.Текст+?(ПустаяСтрока(Запрос.Текст), "", Символы.ПС+"ОБЪЕДИНИТЬ ВСЕ"+Символы.ПС);
	Запрос.Текст = Запрос.Текст+Элемент;
	
КонецПроцедуры

#КонецОбласти 

#Область Диаграммы

Процедура ДобавитьЭлементВЗапросДиаграммы(Запрос, ПараметрыЗапросов, ТекстЭлемента, Стр, Индекс)
	
	Элемент = ТекстЭлемента;
	ОбработатьЭлементЗапросаДиаграммы(Стр, Запрос, ПараметрыЗапросов, Элемент, Индекс);
	
	// Режим сравнения
	Если ЗначениеЗаполнено(Стр.ПериодСравнения) Тогда
		Элемент = ТекстЭлемента;
		ОбработатьЭлементЗапросаДиаграммы(Стр, Запрос, ПараметрыЗапросов, Элемент, Индекс, Истина);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработатьЭлементЗапросаДиаграммы(Стр, Запрос, ПараметрыЗапросов, Элемент, Индекс, ДляСравнения = Ложь)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Индекс", Индекс);
	СтруктураПараметров.Вставить("ДляСравнения", ДляСравнения);
	СтруктураПараметров.Вставить("ЗапросСИтогами", Найти(Элемент, "ИТОГИ ") > 0);
	ПараметрыЗапросов.Добавить(СтруктураПараметров);
	
	Суффикс = ?(ДляСравнения, "Сравнения", "");
	
	Элемент = СтрЗаменить(Элемент, "&ДатаНачала", "&ДатаНачала" + Суффикс + Индекс);
	Элемент = СтрЗаменить(Элемент, "&ДатаОкончания", "&ДатаОкончания" + Суффикс + Индекс);
	Элемент = СтрЗаменить(Элемент, "&Период", "&Период" + Суффикс + Индекс);
	Элемент = СтрЗаменить(Элемент, "&Индекс", Строка(Индекс));
	ЗначениеПериода = Стр["Период" + Суффикс];
	Если ТипЗнч(ЗначениеПериода) = Тип("СтандартныйПериод") Тогда
		Запрос.УстановитьПараметр("ДатаНачала" + Суффикс + Индекс, ЗначениеПериода.ДатаНачала);
		ДатаОкончания = ?(ЗначениеЗаполнено(ЗначениеПериода.ДатаОкончания), КонецДня(ЗначениеПериода.ДатаОкончания), КонецДня(ТекущаяДатаСеанса()));
		Запрос.УстановитьПараметр("ДатаОкончания" + Суффикс + Индекс, ДатаОкончания);
	ИначеЕсли ТипЗнч(ЗначениеПериода) = Тип("СтандартнаяДатаНачала") Тогда
		Запрос.УстановитьПараметр("Период" + Суффикс + Индекс, Стр["Период" + Суффикс].Дата);
	ИначеЕсли ТипЗнч(ЗначениеПериода) = Тип("Структура") Тогда
		Если ЗначениеПериода.Вариант = "ТакойЖеДеньНаПрошлойНеделе" Тогда
			Период = ДатаРасчета(Стр.Период) - 7 * 86400;
			Запрос.УстановитьПараметр("Период" + Суффикс + Индекс, Период);
		ИначеЕсли ЗначениеПериода.Вариант = "ТакойЖеДеньВПрошломМесяце" Тогда
			Период = ДобавитьМесяц(ДатаРасчета(Стр.Период), -1);
			Запрос.УстановитьПараметр("Период" + Суффикс + Индекс, Период);
		ИначеЕсли ЗначениеПериода.Вариант = "ТакойЖеДеньВПрошломГоду" Тогда
			ДатаРасчета = ДатаРасчета(Стр.Период);
			МесяцРасчета = Месяц(ДатаРасчета);
			ДеньРасчета = День(ДатаРасчета);
			Если МесяцРасчета = 2 И ДеньРасчета = 29 Тогда
				Период = Дата(Год(ДатаРасчета) - 1, МесяцРасчета, ДеньРасчета - 1, Час(ДатаРасчета), Минута(ДатаРасчета), Секунда(ДатаРасчета));
			Иначе
				Период = Дата(Год(ДатаРасчета) - 1, МесяцРасчета, ДеньРасчета, Час(ДатаРасчета), Минута(ДатаРасчета), Секунда(ДатаРасчета));
			КонецЕсли; 
			Запрос.УстановитьПараметр("Период" + Суффикс + Индекс, Период);
		ИначеЕсли ЗначениеПериода.Вариант = "ПредыдущийПлавающийПериод" Тогда
			Период = УправлениеНебольшойФирмойКлиентСервер.ПредыдущийПлавающийПериод(Стр.Период);
			Если Период <> Неопределено Тогда
				Запрос.УстановитьПараметр("ДатаНачала" + Суффикс + Индекс, Период.ДатаНачала);
				ДатаОкончания = ?(ЗначениеЗаполнено(Период.ДатаОкончания), КонецДня(Период.ДатаОкончания), КонецДня(ТекущаяДатаСеанса()));
				Запрос.УстановитьПараметр("ДатаОкончания" + Суффикс + Индекс, ДатаОкончания);
			КонецЕсли; 
		ИначеЕсли ЗначениеПериода.Вариант = "ЗаПрошлыйГод" Тогда
			Период = УправлениеНебольшойФирмойКлиентСервер.АналогичныйПериодПрошлогоГода(Стр.Период);
			Если Период <> Неопределено Тогда
				Запрос.УстановитьПараметр("ДатаНачала" + Суффикс + Индекс, Период.ДатаНачала);
				ДатаОкончания = ?(ЗначениеЗаполнено(Период.ДатаОкончания), КонецДня(Период.ДатаОкончания), КонецДня(ТекущаяДатаСеанса()));
				Запрос.УстановитьПараметр("ДатаОкончания" + Суффикс + Индекс, ДатаОкончания);
			КонецЕсли;
		ИначеЕсли ЗначениеПериода.Вариант = "Последние7ДнейНеСчитаяТекущего" Тогда
			Период = УправлениеНебольшойФирмойКлиентСервер.Последние7ДнейНеСчитаяТекущего();
			Если Период <> Неопределено Тогда
				Запрос.УстановитьПараметр("ДатаНачала" + Суффикс + Индекс, Период.ДатаНачала);
				ДатаОкончания = ?(ЗначениеЗаполнено(Период.ДатаОкончания), КонецДня(Период.ДатаОкончания), КонецДня(ТекущаяДатаСеанса()));
				Запрос.УстановитьПараметр("ДатаОкончания" + Суффикс + Индекс, ДатаОкончания);
			КонецЕсли;  
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("Период" + Суффикс + Индекс, '0001-01-01');
		Запрос.УстановитьПараметр("ДатаНачала" + Суффикс + Индекс, '0001-01-01');
		Запрос.УстановитьПараметр("ДатаОкончания" + Суффикс + Индекс, '0001-01-01');
	КонецЕсли; 
	Если ТипЗнч(Стр.Фильтры) = Тип("ФиксированныйМассив") И Стр.Фильтры.Количество() > 0 Тогда
		Отборы = "";
		Для каждого Фильтр Из Стр.Фильтры Цикл
			ИмяПараметра = "Значение" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
			ТекстФильтра = СтрокаОтбора(Фильтр, ИмяПараметра);
			Если ПустаяСтрока(ТекстФильтра) Тогда
				Продолжить;
			КонецЕсли; 
			Отборы = Отборы + Символы.ПС + ?(ПустаяСтрока(Отборы), "", "И ");
			Отборы = Отборы + ТекстФильтра;
			Запрос.УстановитьПараметр(ИмяПараметра, ?(ТипЗнч(Фильтр.Значение) = Тип("СписокЗначений"), Фильтр.Значение.ВыгрузитьЗначения(), Фильтр.Значение));
		КонецЦикла;
	КонецЕсли;
	Если ПустаяСтрока(Отборы) Тогда
		Отборы = "ИСТИНА";
	КонецЕсли; 
	Элемент = СтрЗаменить(Элемент, "&Отборы", Отборы);
	Запрос.Текст = Запрос.Текст + ?(ПустаяСтрока(Запрос.Текст), "", ";" + Символы.ПС);
	Запрос.Текст = Запрос.Текст + Элемент;
	
КонецПроцедуры

Функция ДатаРасчета(Период)
	
	Возврат ?(Период.Вариант=ВариантСтандартнойДатыНачала.НачалоСледующегоДня, КонецДня(ТекущаяДатаСеанса()), НачалоДня(Период.Дата));
	
КонецФункции

#КонецОбласти 

Функция СтрокаОтбора(Фильтр, ИмяПараметра)
	
	Если Найти(Фильтр.Поле, "DataParameters.")>0 Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	Если Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВИерархии
		ИЛИ Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСписке
		ИЛИ Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии
		ИЛИ Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.НеНачинаетсяС
		ИЛИ Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.НеПодобно
		ИЛИ Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.НеРавно
		ИЛИ Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.НеЗаполнено
		ИЛИ Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		Результат = Результат+"НЕ ";
	КонецЕсли;
	
	Если Фильтр.Поле="РозничныеПродажи" Тогда
		
		Результат = Результат+"(Рег.Документ ССЫЛКА Документ.ОтчетОРозничныхПродажах ИЛИ Рег.Документ ССЫЛКА Документ.ЧекККМ)";
		
	ИначеЕсли Найти(Фильтр.Поле, "[")>0 Тогда 
		
		Позиция = Найти(Фильтр.Поле, "[");
		ПозицияКонца = Найти(Фильтр.Поле, "]");
		ИмяСвойства = СтрЗаменить(Сред(Фильтр.Поле, Позиция+1, ПозицияКонца-Позиция-1), """", """""");
		Путь = Лев(Фильтр.Поле, Позиция-1);
		Результат = Результат+"("+Путь+"ДополнительныеРеквизиты.Свойство В (ВЫБРАТЬ Свойство.Ссылка ИЗ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Свойство ГДЕ Свойство.Наименование="""+ИмяСвойства+""") И "+Путь+"ДополнительныеРеквизиты.Значение = &"+ИмяПараметра+")";
		
	Иначе
		
		// Стандартное измерение регистра
		
		ЭтоСвойство = Найти(Фильтр.Поле, "Свойство")>0;
		
		ИмяПоля = "Рег."+Фильтр.Поле;
		Результат = Результат+?(ЭтоСвойство, "(", "")+ИмяПоля;
		
		Если Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВИерархии
			ИЛИ Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.ВИерархии
			ИЛИ Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии
			ИЛИ Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
			Результат = Результат+" В ИЕРАРХИИ (&"+ИмяПараметра+")";
		ИначеЕсли Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСписке
			ИЛИ Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке Тогда
			Результат = Результат+" В (&"+ИмяПараметра+")";
		ИначеЕсли Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.НеНачинаетсяС
			ИЛИ Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.НачинаетсяС Тогда
			Результат = Результат+" ПОДОБНО &"+ИмяПараметра+"+""%""";
		ИначеЕсли Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.НеПодобно
			ИЛИ Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.Подобно Тогда
			Результат = Результат+" ПОДОБНО &"+ИмяПараметра;
		ИначеЕсли Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.НеСодержит
			ИЛИ Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.Содержит Тогда
			Результат = Результат+" ПОДОБНО ""%""+&"+ИмяПараметра+"+""%""";
		ИначеЕсли Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.НеРавно
			ИЛИ Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно Тогда
			Результат = Результат+" = &"+ИмяПараметра;
		ИначеЕсли Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.Больше Тогда 
			Результат = Результат+" > &"+ИмяПараметра;
		ИначеЕсли Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда 
			Результат = Результат+" >= &"+ИмяПараметра;
		ИначеЕсли Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше Тогда 
			Результат = Результат+" < &"+ИмяПараметра;
		ИначеЕсли Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда 
			Результат = Результат+" <= &"+ИмяПараметра;
		КонецЕсли;
		
		Если ЭтоСвойство Тогда
			Результат = Результат+" ИЛИ "+ИмяПоля+" = НЕОПРЕДЕЛЕНО)";
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

Функция ГраницыРасчетаПоказателей(МассивПоказателей)
	
	Результат = Новый Структура;
	Запрос = Новый Запрос;
	
	Если НЕ МассивПоказателей.Найти("Продажи")=Неопределено Тогда
		Запрос.Текст = Запрос.Текст+
		?(ПустаяСтрока(Запрос.Текст), "", Символы.ПС+"ОБЪЕДИНИТЬ ВСЕ"+Символы.ПС)+
		"ВЫБРАТЬ
		|	""Продажи"" КАК Показатель,
		|	МИНИМУМ(Продажи.Период) КАК ДатаНачала,
		|	МАКСИМУМ(Продажи.Период) КАК ДатаОкончания
		|ИЗ
		|	РегистрНакопления.Продажи КАК Продажи";
	КонецЕсли;
	
	Если НЕ МассивПоказателей.Найти("Товары")=Неопределено Тогда
		Запрос.Текст = Запрос.Текст+
		?(ПустаяСтрока(Запрос.Текст), "", Символы.ПС+"ОБЪЕДИНИТЬ ВСЕ"+Символы.ПС)+
		"ВЫБРАТЬ
		|	""Запасы"" КАК Показатель,
		|	МИНИМУМ(Запасы.Период) КАК ДатаНачала,
		|	МАКСИМУМ(Запасы.Период) КАК ДатаОкончания
		|ИЗ
		|	РегистрНакопления.Запасы КАК Запасы";
	КонецЕсли;
	
	Если НЕ МассивПоказателей.Найти("Деньги")=Неопределено Тогда
		Запрос.Текст = Запрос.Текст+
		?(ПустаяСтрока(Запрос.Текст), "", Символы.ПС+"ОБЪЕДИНИТЬ ВСЕ"+Символы.ПС)+
		"ВЫБРАТЬ
		|	""Деньги"" КАК Показатель,
		|	МИНИМУМ(ДенежныеСредства.Период) КАК ДатаНачала,
		|	МАКСИМУМ(ДенежныеСредства.Период) КАК ДатаОкончания
		|ИЗ
		|	РегистрНакопления.ДенежныеСредства КАК ДенежныеСредства";
	КонецЕсли;
	
	Если НЕ МассивПоказателей.Найти("СчетаЗаказы")=Неопределено Тогда
		Запрос.Текст = Запрос.Текст+
		?(ПустаяСтрока(Запрос.Текст), "", Символы.ПС+"ОБЪЕДИНИТЬ ВСЕ"+Символы.ПС)+
		"ВЫБРАТЬ
		|	""СчетаЗаказы"" КАК Показатель,
		|	МИНИМУМ(ОплатаСчетовИЗаказов.Период) КАК ДатаНачала,
		|	МАКСИМУМ(ОплатаСчетовИЗаказов.Период) КАК ДатаОкончания
		|ИЗ
		|	РегистрНакопления.ОплатаСчетовИЗаказов КАК ОплатаСчетовИЗаказов";
	КонецЕсли;
	
	Если НЕ МассивПоказателей.Найти("Закупки")=Неопределено Тогда
		Запрос.Текст = Запрос.Текст+
		?(ПустаяСтрока(Запрос.Текст), "", Символы.ПС+"ОБЪЕДИНИТЬ ВСЕ"+Символы.ПС)+
		"ВЫБРАТЬ
		|	""Закупки"" КАК Показатель,
		|	МИНИМУМ(Закупки.Период) КАК ДатаНачала,
		|	МАКСИМУМ(Закупки.Период) КАК ДатаОкончания
		|ИЗ
		|	РегистрНакопления.Закупки КАК Закупки";
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Период = Новый СтандартныйПериод;
		Период.ДатаНачала = ?(ЗначениеЗаполнено(Выборка.ДатаНачала), Выборка.ДатаНачала, '0001-01-01');
		Период.ДатаОкончания = ?(ЗначениеЗаполнено(Выборка.ДатаОкончания), Выборка.ДатаОкончания, '0001-01-01');
		Результат.Вставить(Выборка.Показатель, Период);
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьДатыНачалаИКонцаПериода(СтандартныйПериод, ПериодОснование = Неопределено)

	Если ТипЗнч(СтандартныйПериод) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли; 
	Если СтандартныйПериод.Вариант="Последние7ДнейНеСчитаяТекущего" Тогда
		Период = УправлениеНебольшойФирмойКлиентСервер.Последние7ДнейНеСчитаяТекущего();
	ИначеЕсли СтандартныйПериод.Вариант="ЗаПрошлыйГод" И ПериодОснование <> Неопределено Тогда
		Период = УправлениеНебольшойФирмойКлиентСервер.АналогичныйПериодПрошлогоГода(ПериодОснование);
	ИначеЕсли СтандартныйПериод.Вариант="ПредыдущийПлавающийПериод" И ПериодОснование <> Неопределено Тогда
		Период = УправлениеНебольшойФирмойКлиентСервер.ПредыдущийПлавающийПериод(ПериодОснование);
	Иначе
		Возврат;
	КонецЕсли; 	
	СтандартныйПериод.Вставить("ДатаНачала", Период.ДатаНачала);
	СтандартныйПериод.Вставить("ДатаОкончания", Период.ДатаОкончания);
	
КонецПроцедуры

#КонецОбласти 

#КонецЕсли