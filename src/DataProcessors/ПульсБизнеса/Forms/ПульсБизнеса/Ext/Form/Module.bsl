
#Область ОписаниеПеременных

#Область ПеременныеФормы

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;	// Параметры опроса завершения фонового задания. См. общий модуль ДлительныеОперацииКлиент

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Инициализация();
	ЗагрузитьНастройкиПериоды();
	ЗагрузитьНастройки();
	СоздатьЭлементыПоказатели();
	СоздатьЭлементыДиаграммы();
	ОбновитьПредставленияПериодов(ЭтаФорма);
	
	// Признак размещения формы. Если Ложь (значение по умолчанию) то форма открыта средствами платформы на начальной странице.
	Параметры.Свойство("ОткрытаНеНаНачальнойСтранице", ОткрытаНеНаНачальнойСтранице);
	
	Если ОткрытаНеНаНачальнойСтранице Тогда
		Заголовок = НСтр("ru = 'Пульс бизнеса'");
	КонецЕсли; 
	
	АдресНастроекПоказателей = ПоместитьВоВременноеХранилище(НастройкиПоказателей.Выгрузить(), УникальныйИдентификатор);
	АдресНастроекДиаграмм = ПоместитьВоВременноеХранилище(НастройкиДиаграмм.Выгрузить(), УникальныйИдентификатор);
	
	УстановитьВидимостьЭлементовДляМобильногоКлиента();
	
	РезультатФоновогоЗадания = ЗапуститьФоновоеЗаданиеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОбновитьИнтерфейс Тогда
		ПодключитьОбработчикОжидания("ОбновлениеИнтерфейсаСЗадержкой", 0.1, Истина);
		Возврат;
	КонецЕсли; 
	
	НачатьОжиданиеФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеИнтерфейсаСЗадержкой()

	ОбновитьИнтерфейс();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если НЕ ТипЗнч(ВыбранноеЗначение)=Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение.Событие="НастройкаПоказателя" Тогда
		
		Если ВыбранноеЗначение.Свойство("ИдентификаторСтроки") Тогда
			Стр = ДобавленныеПоказатели.НайтиПоИдентификатору(ВыбранноеЗначение.ИдентификаторСтроки);
		Иначе
			Стр = ДобавленныеПоказатели.Добавить();
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(Стр, ВыбранноеЗначение);
		
		// Связь по идентификатору с таблицей вариантов показателей
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Показатель", ВыбранноеЗначение.Показатель);
		СтруктураОтбора.Вставить("Ресурс", ВыбранноеЗначение.Ресурс);
		Строки = НастройкиПоказателей.НайтиСтроки(СтруктураОтбора);
		Если Строки.Количество()>0 Тогда
			Стр.ИдентификаторСтрокиНастроек = Строки[0].ПолучитьИдентификатор();
			Стр.Остаток = Строки[0].Остаток;
		КонецЕсли;
		Стр.Налоги = Стр.Показатель = "Налоги";
		
		Элементы.СтраницыДанныеОжидание.ТекущаяСтраница = Элементы.СтраницаОжидание;
		СохранитьНастройкуПоказателяСервер();
		ЗапуститьФоновоеЗадание();
		
	ИначеЕсли ВыбранноеЗначение.Событие="НастройкаДиаграммы" Тогда
		
		// Связь по идентификатору с таблицей вариантов показателей
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Диаграмма", ВыбранноеЗначение.Диаграмма);
		Строки = НастройкиДиаграмм.НайтиСтроки(СтруктураОтбора);
		Если Строки.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
		СтрНастроек = Строки[0];
		ОписаниеСерий = СтрНастроек.Серии[ВыбранноеЗначение.Серия];
		ОписаниеТочек = СтрНастроек.Точки[ВыбранноеЗначение.Точка];
		
		Если ВыбранноеЗначение.Свойство("ИдентификаторСтроки") Тогда
			Стр = ДобавленныеДиаграммы.НайтиПоИдентификатору(ВыбранноеЗначение.ИдентификаторСтроки);
		Иначе
			Стр = ДобавленныеДиаграммы.Добавить(); 
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(Стр, ВыбранноеЗначение);
		
		Стр.ИдентификаторСтрокиНастроек = СтрНастроек.ПолучитьИдентификатор();
		Стр.ПредставленияТочек = ОписаниеТочек.Представления;
		
		Если ЗначениеЗаполнено(ВыбранноеЗначение.ПериодСравнения) И НЕ ВыбранноеЗначение.РежимОстатка Тогда
			МассивПредставлений = Новый Массив;
			МассивПредставлений.Добавить(ПредставлениеСтандартногоПериода(ВыбранноеЗначение.Период));
			МассивПредставлений.Добавить(ПредставлениеСтандартногоПериода(ВыбранноеЗначение.ПериодСравнения, ВыбранноеЗначение.Период));
			Стр.ПредставленияСерий = Новый ФиксированныйМассив(МассивПредставлений);
		ИначеЕсли ЗначениеЗаполнено(ВыбранноеЗначение.ПериодСравнения) И ВыбранноеЗначение.РежимОстатка Тогда
			МассивПредставлений = Новый Массив;
			МассивПредставлений.Добавить(ПредставлениеСтандартнойДатыНачала(ВыбранноеЗначение.Период));
			МассивПредставлений.Добавить(ПредставлениеСтандартнойДатыНачала(ВыбранноеЗначение.ПериодСравнения, ВыбранноеЗначение.Период));
			Стр.ПредставленияСерий = Новый ФиксированныйМассив(МассивПредставлений);
		Иначе
			Стр.ПредставленияСерий = ОписаниеСерий.Представления;
		КонецЕсли; 
		
		Элементы.СтраницыДанныеОжидание.ТекущаяСтраница = Элементы.СтраницаОжидание;
		СохранитьНастройкуДиаграммыСервер();
		ЗапуститьФоновоеЗадание();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВводОстатков" Тогда
		ОбновитьФорму();
		ЗапуститьФоновоеЗадание();
	ИначеЕсли ИмяСобытия = "ЗакрытиеМесяца" Тогда 
		ОбновитьФорму();
		ЗапуститьФоновоеЗадание();
	КонецЕсли; 	
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура Подключаемый_ПоказательЗначениеНажатие(Элемент)
	
	КонтекстРасшифроватьПоказатель(Элемент);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбновитьНажатие(Элемент)
	
	ОбновитьФорму();
	ЗапуститьФоновоеЗадание();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДиаграммаВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
	
	ИмяГруппы = Лев(Элемент.Имя, Найти(Элемент.Имя, "_")-1);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяГруппы", ИмяГруппы);
	Строки = ДобавленныеДиаграммы.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	РасшифроватьДиаграмму(Строки[0].ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСебестоимостьНеактуальнаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Месяц", ПервыйНеактуальныйМесяц);
	СтруктураОткрытия.Вставить("Организация", ПерваяНеактуальнаяОрганизация);
	ОткрытьФорму("Обработка.ЗакрытиеМесяца.Форма", СтруктураОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАктуальностьСебестоимостиЗакрытьНажатие(Элемент)
	
	НеАнализироватьСебестоимость = Истина;
	Элементы.ГруппаАктуальностьСебестоимости.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьПоказательКоманда(Команда)
	
	ОткрытьФормуДобавленияПоказателя();
	
КонецПроцедуры

#Область Периоды

&НаКлиенте
Процедура ДатаВыбор(Команда)
	
	Меню = Новый СписокЗначений;
	Если ДатаСравнения<>Неопределено Тогда
		Меню.Добавить("ВСравнении", НСтр("ru = 'Отключить сравнение'"));
	Иначе
		Меню.Добавить("ВСравнении", НСтр("ru = 'В сравнении'"));
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("ДатаВыборЗавершение", ЭтотОбъект);
	
	ПоказатьВыборИзМеню(Оповещение, Меню, Элементы.ДекорацияОтступДатаЦентр);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВыборЗавершение(ВыбранноеЗначение, ДополнительныеДанные) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли; 	
	
	Если ВыбранноеЗначение.Значение = "ВСравнении" Тогда
		Если ДатаСравнения = Неопределено Тогда
			ДатаСравнения = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтойНедели);
		Иначе
			ДатаСравнения = Неопределено;
		КонецЕсли; 
		ОбновитьПредставленияПериодов(ЭтаФорма);
		ОбновитьЧастично(ИмяСекцииОстатки(), "ДатаСравнения");
	КонецЕсли; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура ДатаСравненияВыбор(Команда)
	
	МассивДат = Новый Массив;
	МассивДат.Добавить(Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоПрошлогоДня));
	МассивДат.Добавить(Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтойНедели));
	МассивДат.Добавить(Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоМесяца));
	МассивДат.Добавить(Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоКвартала));
	МассивДат.Добавить(Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоПолугодия));
	МассивДат.Добавить(Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоГода));
	
	Меню = Новый СписокЗначений;
	Для каждого ЭлементДата Из МассивДат Цикл
		Меню.Добавить(ЭлементДата, ПредставлениеСтандартнойДатыНачала(ЭлементДата, Дата));
	КонецЦикла;
	
	Меню.Добавить(Новый СтандартнаяДатаНачала, НСтр("ru = 'Произвольная дата'"));
	
	Оповещение = Новый ОписаниеОповещения("ДатаСравненияВыборЗавершение", ЭтотОбъект);
	
	ПоказатьВыборИзМеню(Оповещение, Меню, Элементы.ДекорацияОтступДатаСравненияЦентр);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаСравненияВыборЗавершение(ВыбранноеЗначение, ДополнительныеДанные) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли; 	
	
	Если ВыбранноеЗначение.Значение = Новый СтандартнаяДатаНачала Тогда
		Оповещение = Новый ОписаниеОповещения("ДатаСравненияВыборПроизвольнаяДата", ЭтотОбъект);
		ПоказатьВводДаты(Оповещение, ДатаСравнения, НСтр("ru = 'Укажите дату'"), ЧастиДаты.Дата);
	Иначе
		ДатаСравнения = ВыбранноеЗначение.Значение;
		ТипДатыСравнения = ТипДаты(ДатаСравнения);
		ОбновитьПредставленияПериодов(ЭтаФорма);
		ОбновитьЧастично(ИмяСекцииОстатки(), "ДатаСравнения");
	КонецЕсли; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура ДатаСравненияВыборПроизвольнаяДата(ВыбранноеЗначение, ДополнительныеДанные) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли; 	
	
	ДатаСравнения = Новый СтандартнаяДатаНачала(ВыбранноеЗначение);
	ТипДатыСравнения = ТипДаты(ДатаСравнения);
	ОбновитьПредставленияПериодов(ЭтаФорма);
	ОбновитьЧастично(ИмяСекцииОстатки(), "ДатаСравнения");
	
КонецПроцедуры
 
&НаКлиенте
Процедура ДатаСравненияНазад(Команда)
	
	ДатаСравнения = ПредыдущаяДата(ДатаСравнения, ТипДатыСравнения);
	ОбновитьПредставленияПериодов(ЭтаФорма);
	ОбновитьЧастично(ИмяСекцииОстатки());
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаСравненияВперед(Команда)
	
	ДатаСравнения = СледующаяДата(ДатаСравнения, ТипДатыСравнения);
	ОбновитьПредставленияПериодов(ЭтаФорма);
	ОбновитьЧастично(ИмяСекцииОстатки());
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодВыбор(Команда)
	
	МассивПериодов = Новый Массив;
	МассивПериодов.Добавить(Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня));
	МассивПериодов.Добавить(Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтаНеделя));
	МассивПериодов.Добавить(Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтотМесяц));
	МассивПериодов.Добавить(Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтотКвартал));
	МассивПериодов.Добавить(Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтоПолугодие));
	МассивПериодов.Добавить(Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтотГод));
	
	ПрошлыйГод = Новый Структура;
	ПрошлыйГод.Вставить("Вариант", "Последние7ДнейНеСчитаяТекущего");
	ПредыдущийПериод = УправлениеНебольшойФирмойКлиентСервер.Последние7ДнейНеСчитаяТекущего();
	ПрошлыйГод.Вставить("ДатаНачала", ПредыдущийПериод.ДатаНачала);
	ПрошлыйГод.Вставить("ДатаОкончания", ПредыдущийПериод.ДатаОкончания);
	МассивПериодов.Добавить(ПрошлыйГод);
	
	Меню = Новый СписокЗначений;
	Для каждого ЭлементПериод Из МассивПериодов Цикл
		Меню.Добавить(ЭлементПериод, ПредставлениеСтандартногоПериода(ЭлементПериод));
	КонецЦикла;
	
	Меню.Добавить(Новый СтандартныйПериод, НСтр("ru = 'Произвольный период'"));
	
	Если ПериодСравнения<>Неопределено Тогда
		Меню.Добавить("ВСравнении", НСтр("ru = 'Отключить сравнение'"));
	Иначе
		Меню.Добавить("ВСравнении", НСтр("ru = 'В сравнении'"));
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("ПериодВыборЗавершение", ЭтотОбъект);
	
	ПоказатьВыборИзМеню(Оповещение, Меню, Элементы.ДекорацияОтступПериодЦентр);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодВыборЗавершение(ВыбранноеЗначение, ДополнительныеДанные) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли; 	
	
	Если ВыбранноеЗначение.Значение = "ВСравнении" Тогда
		Если ПериодСравнения = Неопределено Тогда
			ПериодСравнения = ПериодСравненияПоПериоду(Период);
			ТипПериодаСравнения = ТипПериода(ПериодСравнения);
		Иначе
			ПериодСравнения = Неопределено;
			ТипПериодаСравнения = "";
		КонецЕсли; 
		ОбновитьПредставленияПериодов(ЭтаФорма);
		ОбновитьЧастично(ИмяСекцииОбороты(), "ПериодСравнения");
	ИначеЕсли ВыбранноеЗначение.Значение = Новый СтандартныйПериод Тогда
		Оповещение = Новый ОписаниеОповещения("ПериодВыборПроизвольныйПериод", ЭтотОбъект);
		Диалог = Новый ДиалогРедактированияСтандартногоПериода;
		Диалог.Период = ?(ТипЗнч(Период) = Тип("СтандартныйПериод"), Период, Новый СтандартныйПериод);
		Диалог.Показать(Оповещение);
	Иначе
		Период = ВыбранноеЗначение.Значение;
		ТипПериода = ТипПериода(Период);
		Если ПериодСравнения <> Неопределено Тогда
			ПериодСравнения = ПериодСравненияПоПериоду(Период);
			ТипПериодаСравнения = ТипПериода(ПериодСравнения);
		КонецЕсли; 
		ОбновитьПредставленияПериодов(ЭтаФорма);
		ОбновитьЧастично(ИмяСекцииОбороты(), "Период" + ?(ПериодСравнения<>Неопределено, ",ПериодСравнения", ""));
	КонецЕсли; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПериодВыборПроизвольныйПериод(ВыбранноеЗначение, ДополнительныеДанные) Экспорт
	
	Если ВыбранноеЗначение=Неопределено Тогда
		Возврат;
	КонецЕсли; 	
	
	Период = ВыбранноеЗначение;
	ТипПериода = ТипПериода(Период);
	Если ПериодСравнения <> Неопределено Тогда
		ПериодСравнения = ПериодСравненияПоПериоду(Период);
		ТипПериодаСравнения = ТипПериода(ПериодСравнения);
	КонецЕсли; 
	ОбновитьПредставленияПериодов(ЭтаФорма);
	ОбновитьЧастично(ИмяСекцииОбороты(), "Период" + ?(ПериодСравнения <> Неопределено, ",ПериодСравнения", ""));
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПериодНазад(Команда)
	
	Период = ПредыдущийПериод(Период, ТипПериода);
	Если ПериодСравнения <> Неопределено Тогда
		ПериодСравнения = ПериодСравненияПоПериоду(Период);
		ТипПериодаСравнения = ТипПериода(ПериодСравнения);
	КонецЕсли; 
	ОбновитьПредставленияПериодов(ЭтаФорма);
	ОбновитьЧастично(ИмяСекцииОбороты());
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодВперед(Команда)
	
	Период = СледующийПериод(Период, ТипПериода);
	Если ПериодСравнения <> Неопределено Тогда
		ПериодСравнения = ПериодСравненияПоПериоду(Период);
		ТипПериодаСравнения = ТипПериода(ПериодСравнения);
	КонецЕсли; 
	ОбновитьПредставленияПериодов(ЭтаФорма);
	ОбновитьЧастично(ИмяСекцииОбороты());
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодСравненияВыбор(Команда)
	
	МассивПериодов = Новый Массив;
	МассивПериодов.Добавить(Новый СтандартныйПериод(ВариантСтандартногоПериода.Вчера));
	МассивПериодов.Добавить(Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлаяНеделя));
	МассивПериодов.Добавить(Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлыйМесяц));
	МассивПериодов.Добавить(Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлыйКвартал));
	МассивПериодов.Добавить(Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлоеПолугодие));
	МассивПериодов.Добавить(Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлыйГод));
	СкользящийПериод = Новый Структура;
	СкользящийПериод.Вставить("Вариант", "ПредыдущийПлавающийПериод");
	ПредыдущийПериод = УправлениеНебольшойФирмойКлиентСервер.ПредыдущийПлавающийПериод(Период);
	СкользящийПериод.Вставить("ДатаНачала", ПредыдущийПериод.ДатаНачала);
	СкользящийПериод.Вставить("ДатаОкончания", ПредыдущийПериод.ДатаОкончания);
	МассивПериодов.Добавить(СкользящийПериод);
	ПрошлыйГод = Новый Структура;
	ПрошлыйГод.Вставить("Вариант", "ЗаПрошлыйГод");
	ПредыдущийПериод = УправлениеНебольшойФирмойКлиентСервер.АналогичныйПериодПрошлогоГода(Период);
	ПрошлыйГод.Вставить("ДатаНачала", ПредыдущийПериод.ДатаНачала);
	ПрошлыйГод.Вставить("ДатаОкончания", ПредыдущийПериод.ДатаОкончания);
	МассивПериодов.Добавить(ПрошлыйГод);
	
	Меню = Новый СписокЗначений;
	Для каждого ЭлементПериод Из МассивПериодов Цикл
		Меню.Добавить(ЭлементПериод, ПредставлениеСтандартногоПериода(ЭлементПериод, Период));
	КонецЦикла;
	
	
	Меню.Добавить(Новый СтандартныйПериод, НСтр("ru = 'Произвольный период'"));
	
	Оповещение = Новый ОписаниеОповещения("ПериодСравненияВыборЗавершение", ЭтотОбъект);
	
	ПоказатьВыборИзМеню(Оповещение, Меню, Элементы.ДекорацияОтступПериодСравненияЦентр);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодСравненияВыборЗавершение(ВыбранноеЗначение, ДополнительныеДанные) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли; 	
	
	Если ВыбранноеЗначение.Значение = Новый СтандартныйПериод Тогда
		Оповещение = Новый ОписаниеОповещения("ПериодСравненияВыборПроизвольныйПериод", ЭтотОбъект);
		Диалог = Новый ДиалогРедактированияСтандартногоПериода;
		Диалог.Период = ?(ТипЗнч(ПериодСравнения) = Тип("СтандартныйПериод"), ПериодСравнения, Новый СтандартныйПериод);
		Диалог.Показать(Оповещение);
	Иначе
		ПериодСравнения = ВыбранноеЗначение.Значение;
		ТипПериодаСравнения = ТипПериода(ПериодСравнения);
		ОбновитьПредставленияПериодов(ЭтаФорма);
		ОбновитьЧастично(ИмяСекцииОбороты(), "ПериодСравнения");
	КонецЕсли; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПериодСравненияВыборПроизвольныйПериод(ВыбранноеЗначение, ДополнительныеДанные) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли; 	
	
	ПериодСравнения = ВыбранноеЗначение;
	ТипПериодаСравнения = ТипПериода(ПериодСравнения);
	ОбновитьПредставленияПериодов(ЭтаФорма);
	ОбновитьЧастично(ИмяСекцииОбороты(), "ПериодСравнения");
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПериодСравненияНазад(Команда)
	
	ПериодСравнения = ПредыдущийПериод(ПериодСравнения, ТипПериодаСравнения);
	ОбновитьПредставленияПериодов(ЭтаФорма);
	ОбновитьЧастично(ИмяСекцииОбороты());
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодСравненияВперед(Команда)
	
	ПериодСравнения = СледующийПериод(ПериодСравнения, ТипПериодаСравнения);
	ОбновитьПредставленияПериодов(ЭтаФорма);
	ОбновитьЧастично(ИмяСекцииОбороты());
	
КонецПроцедуры

#КонецОбласти 

#Область Показатели

&НаКлиенте
Процедура КонтекстНастроитьПоказатель(Команда)
	
	ИмяГруппы = Лев(Команда.Имя, Найти(Команда.Имя, "_")-1);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяГруппы", ИмяГруппы);
	Строки = ДобавленныеПоказатели.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	ОткрытьФормуНастройкиПоказателя(Строки[0].ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстУдалитьПоказатель(Команда)
	
	ИмяГруппы = Лев(Команда.Имя, Найти(Команда.Имя, "_")-1);
	Оповещение = Новый ОписаниеОповещения("КонтекстУдалитьПоказательЗавершение", ЭтотОбъект, ИмяГруппы);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Удалить показатель?'"), РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстУдалитьПоказательЗавершение(Результат, ИмяГруппы) Экспорт
	
	Если Результат<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 	
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяГруппы", ИмяГруппы);
	Строки = ДобавленныеПоказатели.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	Индекс = ДобавленныеПоказатели.Индекс(Строки[0]);
	Индекс = ?(Индекс=0, 0, Индекс-1);
	КонтекстУдалитьПоказательСервер(Строки[0].ПолучитьИдентификатор());
	Если ДобавленныеПоказатели.Количество()>0 И НЕ ПустаяСтрока(ДобавленныеПоказатели[Индекс].ИмяГруппы) Тогда
		ТекущийЭлемент = Элементы[ДобавленныеПоказатели[Индекс].ИмяГруппы+"_Заголовок"];
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура КонтекстУдалитьПоказательСервер(Идентификатор)
	
	Стр = ДобавленныеПоказатели.НайтиПоИдентификатору(Идентификатор);
	УдалитьЭлементыРекурсивно(Элементы[Стр.ИмяГруппы]);
	Элементы.Удалить(Элементы[Стр.ИмяГруппы]);
	ДобавленныеПоказатели.Удалить(Стр);
	СохранитьНастройки("Показатели");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстСместитьВверхПоказатель(Команда)
	
	ИмяГруппы = Лев(Команда.Имя, Найти(Команда.Имя, "_")-1);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяГруппы", ИмяГруппы);
	Строки = ДобавленныеПоказатели.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	КонтекстСместитьВверхПоказательСервер(Строки[0].ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура КонтекстСместитьВверхПоказательСервер(Идентификатор)
	
	Стр = ДобавленныеПоказатели.НайтиПоИдентификатору(Идентификатор);
	Индекс = ДобавленныеПоказатели.Индекс(Стр);
	Группа = Элементы[Стр.ИмяГруппы];
	ПредыдущаяГруппа = ПредыдущийЭлемент(Группа);
	Если ПредыдущаяГруппа=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Элементы.Переместить(Группа, Группа.Родитель, ПредыдущаяГруппа);
	ДобавленныеПоказатели.Сдвинуть(Индекс, -1);
	СохранитьНастройки("Показатели");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстСместитьВнизПоказатель(Команда)
	
	ИмяГруппы = Лев(Команда.Имя, Найти(Команда.Имя, "_")-1);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяГруппы", ИмяГруппы);
	Строки = ДобавленныеПоказатели.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	КонтекстСместитьВнизПоказательСервер(Строки[0].ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура КонтекстСместитьВнизПоказательСервер(Идентификатор)
	
	Стр = ДобавленныеПоказатели.НайтиПоИдентификатору(Идентификатор);
	Индекс = ДобавленныеПоказатели.Индекс(Стр);
	Если Индекс=ДобавленныеПоказатели.Количество()-1 Тогда
		Возврат;
	КонецЕсли;
	Группа = Элементы[Стр.ИмяГруппы];
	СледующаяГруппа = СледующийЭлемент(Группа);
	Если СледующаяГруппа=Неопределено Тогда
		Элементы.Переместить(Группа, Группа.Родитель);
	Иначе
		Элементы.Переместить(Группа, Группа.Родитель, СледующаяГруппа);
	КонецЕсли; 
	ДобавленныеПоказатели.Сдвинуть(Индекс, 1);
	СохранитьНастройки("Показатели");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстРасшифроватьПоказатель(Команда)
	
	ИмяГруппы = Лев(Команда.Имя, Найти(Команда.Имя, "_")-1);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяГруппы", ИмяГруппы);
	Строки = ДобавленныеПоказатели.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	РасшифроватьПоказатель(Строки[0].ПолучитьИдентификатор());
	
КонецПроцедуры

#КонецОбласти

#Область Диаграммы

&НаКлиенте
Процедура ДобавитьДиаграммуКоманда(Команда)
	
	ОткрытьФормуДобавленияДиаграммы();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстНастроитьДиаграмму(Команда)
	
	ИмяГруппы = Лев(Команда.Имя, Найти(Команда.Имя, "_")-1);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяГруппы", ИмяГруппы);
	Строки = ДобавленныеДиаграммы.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	ОткрытьФормуНастройкиДиаграммы(Строки[0].ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстУдалитьДиаграмму(Команда)
	
	ИмяГруппы = Лев(Команда.Имя, Найти(Команда.Имя, "_")-1);
	Оповещение = Новый ОписаниеОповещения("КонтекстУдалитьДиаграммуЗавершение", ЭтотОбъект, ИмяГруппы);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Удалить диаграмму?'"), РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстУдалитьДиаграммуЗавершение(Результат, ИмяГруппы) Экспорт
	
	Если Результат<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 	
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяГруппы", ИмяГруппы);
	Строки = ДобавленныеДиаграммы.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	КонтекстУдалитьДиаграммуСервер(Строки[0].ПолучитьИдентификатор());
	#Если НЕ МобильныйКлиент Тогда
		ТекущийЭлемент = Элементы.ДекорацияОбновить;
	#КонецЕсли 
	
КонецПроцедуры
 
&НаСервере
Процедура КонтекстУдалитьДиаграммуСервер(Идентификатор)
	
	Стр = ДобавленныеДиаграммы.НайтиПоИдентификатору(Идентификатор);
	УдалитьЭлементыРекурсивно(Элементы[Стр.ИмяГруппы]);
	Элементы.Удалить(Элементы[Стр.ИмяГруппы]);
	ДобавленныеДиаграммы.Удалить(Стр);
	СохранитьНастройки("Диаграммы");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстСместитьВверхДиаграмму(Команда)
	
	ИмяГруппы = Лев(Команда.Имя, Найти(Команда.Имя, "_")-1);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяГруппы", ИмяГруппы);
	Строки = ДобавленныеДиаграммы.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	КонтекстСместитьВверхДиаграммуСервер(Строки[0].ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура КонтекстСместитьВверхДиаграммуСервер(Идентификатор)
	
	Стр = ДобавленныеДиаграммы.НайтиПоИдентификатору(Идентификатор);
	Индекс = ДобавленныеДиаграммы.Индекс(Стр);
	Если Индекс=0 Тогда
		Возврат;
	КонецЕсли;
	СтрПеред = ДобавленныеДиаграммы[Индекс-1];
	Элементы.Переместить(Элементы[Стр.ИмяГруппы], Элементы.ГруппаДобавленныеДиаграммы, Элементы[СтрПеред.ИмяГруппы]);
	ДобавленныеДиаграммы.Сдвинуть(Индекс, -1);
	СохранитьНастройки("Диаграммы");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстСместитьВнизДиаграмму(Команда)
	
	ИмяГруппы = Лев(Команда.Имя, Найти(Команда.Имя, "_")-1);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяГруппы", ИмяГруппы);
	Строки = ДобавленныеДиаграммы.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	КонтекстСместитьВнизДиаграммуСервер(Строки[0].ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура КонтекстСместитьВнизДиаграммуСервер(Идентификатор)
	
	Стр = ДобавленныеДиаграммы.НайтиПоИдентификатору(Идентификатор);
	Индекс = ДобавленныеДиаграммы.Индекс(Стр);
	Если Индекс=ДобавленныеДиаграммы.Количество()-1 Тогда
		Возврат;
	КонецЕсли;
	Если Индекс=ДобавленныеДиаграммы.Количество()-2 Тогда
		Элементы.Переместить(Элементы[Стр.ИмяГруппы], Элементы.ГруппаДобавленныеДиаграммы);
	Иначе
		СтрПосле = ДобавленныеДиаграммы[Индекс+2];
		Элементы.Переместить(Элементы[Стр.ИмяГруппы], Элементы.ГруппаДобавленныеДиаграммы, Элементы[СтрПосле.ИмяГруппы]);
	КонецЕсли; 
	ДобавленныеДиаграммы.Сдвинуть(Индекс, 1);
	СохранитьНастройки("Диаграммы");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстРасшифроватьДиаграмму(Команда)
	
	ИмяГруппы = Лев(Команда.Имя, Найти(Команда.Имя, "_")-1);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяГруппы", ИмяГруппы);
	Строки = ДобавленныеДиаграммы.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	РасшифроватьДиаграмму(Строки[0].ПолучитьИдентификатор());
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область ФоновоеЗаданиеПолучениеДанных

&НаКлиенте
Процедура ЗапуститьФоновоеЗадание(Секция="", СохраняемыеПериоды = "")
	
	РезультатФоновогоЗадания = ЗапуститьФоновоеЗаданиеНаСервере(Секция, СохраняемыеПериоды);
	
	НачатьОжиданиеФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОжиданиеФоновогоЗадания()
	
	Если РезультатФоновогоЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если РезультатФоновогоЗадания.Статус = "Выполняется" Тогда
		Обработчик = Новый ОписаниеОповещения("ФоновоеЗаданиеВыполнено", ЭтотОбъект, Истина);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатФоновогоЗадания, Обработчик, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьФоновоеЗаданиеНаСервере(Секция = "", СохраняемыеПериоды = "")
	
	Если МонопольныйРежим() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СохраняемыеПериоды) Тогда
		СохранитьНастройкиПериоды(СохраняемыеПериоды);
	КонецЕсли; 
	
	Если ФоновоеЗаданиеЗапущено Тогда
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор);
	КонецЕсли;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	// Параметры обернем в структуру для их передачи через механизм ДлительныеОперации.
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Дата", Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоДня));
	ПараметрыПроцедуры.Вставить("ДатаСравнения", ДатаСравнения);
	ПараметрыПроцедуры.Вставить("Период", Период);
	ПараметрыПроцедуры.Вставить("ПериодСравнения", ПериодСравнения);
	ПараметрыПроцедуры.Вставить("Показатели", ДобавленныеПоказатели.Выгрузить());
	ПараметрыПроцедуры.Вставить("Диаграммы", ДобавленныеДиаграммы.Выгрузить());
	Если НЕ ПустаяСтрока(Секция) Тогда
		ПараметрыПроцедуры.Вставить("Секция", Секция);
	КонецЕсли; 
	ПараметрыПроцедуры.Вставить("НеАнализироватьСебестоимость", НеАнализироватьСебестоимость);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ПульсБизнеса.ПолучитьДанные",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
		
	ФоновоеЗаданиеАдресРезультата = РезультатФоновогоЗадания.АдресРезультата;
	ФоновоеЗаданиеИдентификатор   = РезультатФоновогоЗадания.ИдентификаторЗадания;
	
	// Если фоновое задание завершилось за время вызова, то данные уже получены
	Если РезультатФоновогоЗадания.Статус <> "Выполняется" Тогда
		ОбновитьДанные();
		Элементы.СтраницыДанныеОжидание.ТекущаяСтраница = Элементы.СтраницаДанные;
		Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			ТекущийЭлемент = Элементы.ДекорацияОбновить;
		КонецЕсли; 
		Элементы.ГруппаПоказателиОстатки.Доступность = Истина;
		Элементы.ГруппаПоказателиОбороты.Доступность = Истина;
	Иначе
		// иначе начнем ожидания завершения фонового задания
		ФоновоеЗаданиеЗапущено = Истина;
		Если ПустаяСтрока(Секция) Тогда
			Элементы.СтраницыДанныеОжидание.ТекущаяСтраница = Элементы.СтраницаОжидание;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат РезультатФоновогоЗадания;
	
КонецФункции

&НаКлиенте
Процедура ФоновоеЗаданиеВыполнено(Результат, ЗагрузитьРезультат) Экспорт
	
	ФоновоеЗаданиеЗапущено = Ложь;
	Элементы.СтраницыДанныеОжидание.ТекущаяСтраница = Элементы.СтраницаДанные;
	#Если НЕ МобильныйКлиент Тогда
		ТекущийЭлемент = Элементы.ДекорацияОбновить;
	#КонецЕсли
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	Если Результат.Статус = "Выполнено" Тогда 
		ОбновитьДанные();
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьОшибкиВыполнения(Результат.КраткоеПредставлениеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор)
	
	Если ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор) Тогда
		Возврат;
	КонецЕсли; 
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиВыполнения(ИнформацияОбОшибке)
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеПредставлениеОшибки = НСтр("ru = 'Ошибка при выполнении:'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОписаниеОшибки = ПодробноеПредставлениеОшибки;
			ПодробноеПредставлениеОшибки = "";
		КонецЕсли;
	Иначе
		ОписаниеОшибки = ИнформацияОбОшибке;
		ПодробноеПредставлениеОшибки = "";
	КонецЕсли;
	ТекстСообщения = ОписаниеОшибки + ?(ПустаяСтрока(ПодробноеПредставлениеОшибки), "", ": " + ПодробноеПредставлениеОшибки);
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Показатели

&НаСервере
Процедура ДобавитьПоказатель(
	Показатель, 
	Ресурс = "", 
	Представление = "", 
	ПредставлениеРесурса = "", 
	Остаток = Ложь, 
	Валютный = Ложь, 
	Формат = "", 
	ИмяМакета = "", 
	ИмяОтчета = "", 
	КлючВарианта = "", 
	КолонкиОтчета = "", 
	РазделУчета = "",
	Порядок = 0)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Показатель", Показатель);
	СтруктураПоиска.Вставить("Ресурс", Ресурс);
	Если НастройкиПоказателей.НайтиСтроки(СтруктураПоиска).Количество()>0 Тогда
		Возврат;
	КонецЕсли; 
	
	Стр = НастройкиПоказателей.Добавить();
	Стр.Показатель = Показатель;
	Стр.Ресурс = Ресурс;
	Стр.Представление = ?(ПустаяСтрока(Представление), Показатель, Представление);
	Стр.ПредставлениеРесурса = ?(ПустаяСтрока(ПредставлениеРесурса), Ресурс, ПредставлениеРесурса);
	Стр.Остаток = Остаток;
	Стр.Валютный = Валютный;
	Стр.Формат = Формат;
	Стр.ИмяМакета = ИмяМакета;
	Стр.ИмяОтчета = ИмяОтчета;
	Стр.КлючВарианта = КлючВарианта;
	Если ЗначениеЗаполнено(ИмяОтчета) И ЗначениеЗаполнено(КлючВарианта) Тогда
		Стр.Вариант = ИмяОтчета + "." + КлючВарианта;
	КонецЕсли; 
	Стр.КолонкиОтчета = КолонкиОтчета;
	Стр.РазделУчета = РазделУчета;
	Стр.Порядок = Порядок;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Возвращает ссылку на вариант отчета.
//
// Параметры:
//  ПолноеИмя - полное имя отчета, включающее имя варианта, отделенное точкой. Пример: Отчеты.Продажи.Основной
//
// Возвращаемое значение:
//  СправочникСсылка.ВариантыОтчетов, Неопределено - вариант отчета, 
//          либо Неопределено, если отчет отсутствует или недоступен по правам.
//
Функция ВариантОтчетаПоПолномуИмени(ПолноеИмя)
	
	Если ПустаяСтрока(ПолноеИмя) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ЧастиИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмя, ".");
	Если ЧастиИмени.Количество()<>3 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Возврат ВариантыОтчетов.ВариантОтчета(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.НайтиПоПолномуИмени(ЧастиИмени[0] + "." + ЧастиИмени[1])), ЧастиИмени[2]);
	
КонецФункции

&НаСервере
Процедура ОтобразитьПоказатель(Показатель, Ресурс, Представление = "", Цвет = "")
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Показатель", Показатель);
	СтруктураОтбора.Вставить("Ресурс", Ресурс);
	Строки = НастройкиПоказателей.НайтиСтроки(СтруктураОтбора);
	Для каждого Стр Из Строки Цикл
		СтрДанных = ДобавленныеПоказатели.Добавить();
		ЗаполнитьЗначенияСвойств(СтрДанных, Стр, "Показатель, Ресурс");
		СтрДанных.Представление = ?(ПустаяСтрока(Представление), Стр.ПредставлениеРесурса, Представление);
		СтрДанных.ИдентификаторСтрокиНастроек = Стр.ПолучитьИдентификатор();
		СтрДанных.Остаток = Стр.Остаток;
		Если НЕ ПустаяСтрока(Стр.РазделУчета) Тогда
			СтрДанных.ВводОстатков = РежимыВводаОстатков[Стр.РазделУчета];
		КонецЕсли; 
		СтрДанных.Налоги = (Стр.Показатель = "Налоги");
		Если НЕ ПустаяСтрока(Цвет) Тогда
			СтрДанных.Цвет = Цвет;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДобавленияПоказателя()
	
	Если ФоновоеЗаданиеЗапущено Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Показатель", Неопределено);
	СтруктураОткрытия.Вставить("Ресурс", Неопределено);
	СтруктураОткрытия.Вставить("Представление", "");
	СтруктураОткрытия.Вставить("Фильтры", Новый ФиксированныйМассив(Новый Массив));
	СтруктураОткрытия.Вставить("Настройки", Новый ФиксированныйМассив(Новый Массив));
	
	СтруктураОткрытия.Вставить("АдресНастроекПоказателей", АдресНастроекПоказателей);
	
	ОткрытьФорму("Обработка.ПульсБизнеса.Форма.ФормаНастройкиПоказателя", СтруктураОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиПоказателя(Идентификатор)
	
	Если ФоновоеЗаданиеЗапущено Тогда
		Возврат;
	КонецЕсли;
	
	Стр = ДобавленныеПоказатели.НайтиПоИдентификатору(Идентификатор);
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Показатель", Стр.Показатель);
	СтруктураОткрытия.Вставить("Ресурс", Стр.Ресурс);
	СтруктураОткрытия.Вставить("Представление", Стр.Представление);
	СтруктураОткрытия.Вставить("Цвет", Стр.Цвет);
	СтруктураОткрытия.Вставить("Фильтры", Стр.Фильтры);
	СтруктураОткрытия.Вставить("Настройки", Стр.Настройки);
	СтруктураОткрытия.Вставить("ИдентификаторСтроки", Идентификатор);
	
	СтруктураОткрытия.Вставить("АдресНастроекПоказателей", АдресНастроекПоказателей);
	
	ОткрытьФорму("Обработка.ПульсБизнеса.Форма.ФормаНастройкиПоказателя", СтруктураОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначенияПоказателей(Данные)
	
	Для каждого Стр Из ДобавленныеПоказатели Цикл
		Если Данные.Свойство("Секция") И НЕ ПустаяСтрока(Данные.Секция)
			И ((Данные.Секция = ИмяСекцииОстатки() И НЕ Стр.Остаток) 
			ИЛИ (Данные.Секция = ИмяСекцииОбороты() И Стр.Остаток))Тогда
			Продолжить;
		КонецЕсли; 
		Стр.Значение = 0;
		Стр.Изменение = 0;
		Стр.Подсказка = "";
	КонецЦикла;
	
	Для каждого Стр Из ДобавленныеДиаграммы Цикл
		ОбъектДиаграмма = ЭтаФорма[Стр.ИмяРеквизита];
		ОбъектДиаграмма.Обновление = Ложь;
	КонецЦикла;
	
	Для каждого Элемент Из Данные.Показатели Цикл
		СтруктураЗначения = Элемент.Значение;
		Если НЕ ЗначениеЗаполнено(СтруктураЗначения.Значение) И НЕ ЗначениеЗаполнено(СтруктураЗначения.ЗначениеСравнения) Тогда
			Продолжить;
		КонецЕсли; 
		Стр = ДобавленныеПоказатели[Элемент.Ключ];
		СтрокаНастроек = НастройкиПоказателей.НайтиПоИдентификатору(Стр.ИдентификаторСтрокиНастроек);
		Если ЗначениеЗаполнено(СтруктураЗначения.Значение) Тогда
			Стр.Значение = ОтформатироватьЗначение(СтруктураЗначения.Значение, Стр);
		КонецЕсли; 
		Если (ПериодСравнения <> Неопределено И НЕ Стр.Остаток) 
			ИЛИ (ДатаСравнения <> Неопределено И Стр.Остаток) Тогда
			Если ТипЗнч(СтруктураЗначения.Значение) = Тип("Соответствие") Тогда
				Продолжить;
			КонецЕсли; 
			Если СтруктураЗначения.ЗначениеСравнения < СтруктураЗначения.Значение Тогда
				Стр.Изменение = 1;
			ИначеЕсли СтруктураЗначения.ЗначениеСравнения > СтруктураЗначения.Значение Тогда
				Стр.Изменение = 2;
			Иначе
				Стр.Изменение = 0;
			КонецЕсли;
			Если СтрокаНастроек.Остаток Тогда
				Стр.Подсказка = СтрШаблон(НСтр("ru = 'На %1: %2'"), 
					НРег(ПредставлениеСтандартнойДатыНачала(ДатаСравнения, Дата)), 
					ОтформатироватьЗначение(СтруктураЗначения.ЗначениеСравнения, Стр));
			Иначе
				Стр.Подсказка = СтрШаблон(НСтр("ru = 'За %1: %2'"), 
					НРег(ПредставлениеСтандартногоПериода(ПериодСравнения, Период)), 
					ОтформатироватьЗначение(СтруктураЗначения.ЗначениеСравнения, Стр));
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого Стр Из ДобавленныеПоказатели Цикл
		
		Если ПустаяСтрока(Стр.Ресурс) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементИконка = Элементы[СтрШаблон("%1_Иконка", Стр.ИмяГруппы)];
		ЭлементИконка.Картинка = ПолучитьИконкуПоказателя(Стр.Показатель, Стр.Цвет);
		
		Если НЕ ЗначениеЗаполнено(Стр.Значение) Тогда
			Стр.Значение = "0,00";
		КонецЕсли;
		
		ЭлементЗначение = Элементы[СтрШаблон("%1_Значение", Стр.ИмяГруппы)];
		ЭлементЗначение.Заголовок = Стр.Значение;
		
		ЭлементСравнение = Элементы[СтрШаблон("%1_Сравнение", Стр.ИмяГруппы)];
		Если Стр.Изменение = 0 Тогда
			ЭлементСравнение.Картинка = БиблиотекаКартинок.Пустая;
		ИначеЕсли Стр.Изменение = 1 Тогда
			ЭлементСравнение.Картинка = БиблиотекаКартинок.ЗначениеУвеличилось;
		ИначеЕсли Стр.Изменение = 2 Тогда
			ЭлементСравнение.Картинка = БиблиотекаКартинок.ЗначениеУменьшилось;
		КонецЕсли;
		ЭлементСравнение.Подсказка = Стр.Подсказка;
		
	КонецЦикла;
	
	Для каждого Стр Из ДобавленныеДиаграммы Цикл
		ОбъектДиаграмма = ЭтаФорма[Стр.ИмяРеквизита];
		ОбъектДиаграмма.Обновление = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыПоказатели()
	
	//Кэшируем картинки
	ПульсБизнесаПоказательЛевыйВерхнийУгол = БиблиотекаКартинок.ПульсБизнесаПоказательЛевыйВерхнийУгол;
	ПульсБизнесаПоказательВерх = БиблиотекаКартинок.ПульсБизнесаПоказательВерх;
	ПульсБизнесаПоказательПравыйВерхнийУгол = БиблиотекаКартинок.ПульсБизнесаПоказательПравыйВерхнийУгол;
	ПульсБизнесаПоказательЛево = БиблиотекаКартинок.ПульсБизнесаПоказательЛево;
	ПульсБизнесаПоказательПраво = БиблиотекаКартинок.ПульсБизнесаПоказательПраво;
	ПульсБизнесаПоказательЛевыйНижнийУгол = БиблиотекаКартинок.ПульсБизнесаПоказательЛевыйНижнийУгол;
	ПульсБизнесаПоказательНиз = БиблиотекаКартинок.ПульсБизнесаПоказательНиз;
	ПульсБизнесаПоказательПравыйНижнийУгол = БиблиотекаКартинок.ПульсБизнесаПоказательПравыйНижнийУгол;
	
	ЭтоМобильныйКлиент = ОбщегоНазначения.ЭтоМобильныйКлиент();
	
	Для каждого Стр Из ДобавленныеПоказатели Цикл
		
		Если ПустаяСтрока(Стр.Ресурс) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(Стр.ИмяГруппы) Тогда
			
			Стр.ИмяГруппы = "Показатель"+СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
			
			Если Стр.Остаток Тогда
				
				Если Элементы.ГруппаПоказателиОстаткиЛево.ПодчиненныеЭлементы.Количество() <= Элементы.ГруппаПоказателиОстаткиПраво.ПодчиненныеЭлементы.Количество() Тогда
					РодительскаяГруппа = Элементы.ГруппаПоказателиОстаткиЛево;
				Иначе
					РодительскаяГруппа = Элементы.ГруппаПоказателиОстаткиПраво;
				КонецЕсли;
				
				Если ЭтоМобильныйКлиент Тогда
					РодительскаяГруппа = Элементы.ГруппаПоказателиОстаткиЛево;
				КонецЕсли;
				
			Иначе
				
				Если Элементы.ГруппаПоказателиОборотыЛево.ПодчиненныеЭлементы.Количество() <= Элементы.ГруппаПоказателиОборотыПраво.ПодчиненныеЭлементы.Количество() Тогда
					РодительскаяГруппа = Элементы.ГруппаПоказателиОборотыЛево;
				Иначе
					РодительскаяГруппа = Элементы.ГруппаПоказателиОборотыПраво;
				КонецЕсли;
				
				Если ЭтоМобильныйКлиент Тогда
					РодительскаяГруппа = Элементы.ГруппаПоказателиОборотыЛево;
				КонецЕсли;
				
			КонецЕсли;
			
			Группа = Элементы.Добавить(Стр.ИмяГруппы, Тип("ГруппаФормы"), РодительскаяГруппа);
			
			// Верхняя группа
			Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			Группа.ОтображатьЗаголовок = Ложь;
			Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
			Группа.РастягиватьПоВертикали = Ложь;
			Группа.РастягиватьПоГоризонтали = Истина;
			Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			Группа.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
			Группа.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
			Группа.Высота = 3;
			
			// Декорация сверху
			ГруппаВерх = Элементы.Добавить(Стр.ИмяГруппы + "_Верх", Тип("ГруппаФормы"), Группа);
			ГруппаВерх.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаВерх.ОтображатьЗаголовок = Ложь;
			ГруппаВерх.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаВерх.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаВерх.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
			
			ЭлементДекорацияЛевыйВерхнийУгол = Элементы.Добавить(Стр.ИмяГруппы + "_ДекорацияЛевыйВерхнийУгол", Тип("ДекорацияФормы"), ГруппаВерх);
			ЭлементДекорацияЛевыйВерхнийУгол.Вид = ВидДекорацииФормы.Картинка;
			ЭлементДекорацияЛевыйВерхнийУгол.Картинка = ПульсБизнесаПоказательЛевыйВерхнийУгол;
			
			ЭлементДекорацияВерх = Элементы.Добавить(Стр.ИмяГруппы + "_ДекорацияВерх", Тип("ДекорацияФормы"), ГруппаВерх);
			ЭлементДекорацияВерх.Вид = ВидДекорацииФормы.Картинка;
			ЭлементДекорацияВерх.Картинка = ПульсБизнесаПоказательВерх;
			ЭлементДекорацияВерх.РастягиватьПоГоризонтали = Истина;
			ЭлементДекорацияВерх.РазмерКартинки = РазмерКартинки.Растянуть;
			
			ЭлементДекорацияПравыйВерхнийУгол = Элементы.Добавить(Стр.ИмяГруппы + "_ДекорацияПравыйВерхнийУгол", Тип("ДекорацияФормы"), ГруппаВерх);
			ЭлементДекорацияПравыйВерхнийУгол.Вид = ВидДекорацииФормы.Картинка;
			ЭлементДекорацияПравыйВерхнийУгол.Картинка = ПульсБизнесаПоказательПравыйВерхнийУгол;
			
			ГруппаЦентр = Элементы.Добавить(Стр.ИмяГруппы + "_Центр", Тип("ГруппаФормы"), Группа);
			ГруппаЦентр.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЦентр.ОтображатьЗаголовок = Ложь;
			ГруппаЦентр.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаЦентр.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаЦентр.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
			//ГруппаЦентр.Ширина = 26;
			
			// Декорация слева
			ЭлементДекорацияЛево = Элементы.Добавить(Стр.ИмяГруппы + "_ДекорацияЛево", Тип("ДекорацияФормы"), ГруппаЦентр);
			ЭлементДекорацияЛево.Вид = ВидДекорацииФормы.Картинка;
			ЭлементДекорацияЛево.Картинка = ПульсБизнесаПоказательЛево;
			ЭлементДекорацияЛево.РастягиватьПоВертикали = Истина;
			ЭлементДекорацияЛево.РазмерКартинки = РазмерКартинки.Растянуть;
			
			// Иконка
			ЭлементДекорацияИконка = Элементы.Добавить(Стр.ИмяГруппы + "_Иконка", Тип("ДекорацияФормы"), ГруппаЦентр);
			ЭлементДекорацияИконка.Вид = ВидДекорацииФормы.Картинка;
			ЭлементДекорацияИконка.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
			ЭлементДекорацияИконка.Картинка = ПолучитьИконкуПоказателя(Стр.Показатель, Стр.Цвет);
			ЭлементДекорацияИконка.Гиперссылка = Истина;
			ЭлементДекорацияИконка.УстановитьДействие("Нажатие", "Подключаемый_ПоказательЗначениеНажатие");
			
			// Содержимое показателя
			ГруппаСодержимое = Элементы.Добавить(Стр.ИмяГруппы + "_Содержимое", Тип("ГруппаФормы"), ГруппаЦентр);
			ГруппаСодержимое.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаСодержимое.ОтображатьЗаголовок = Ложь;
			ГруппаСодержимое.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаСодержимое.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаСодержимое.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
			ГруппаСодержимое.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
			ГруппаСодержимое.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Одинарный;
			
			ЭлементЗаголовок = Элементы.Добавить(Стр.ИмяГруппы+"_Заголовок", Тип("ДекорацияФормы"), ГруппаСодержимое);
			ЭлементЗаголовок.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
			ЭлементЗаголовок.РастягиватьПоГоризонтали = Истина;
			ЭлементЗаголовок.ПропускатьПриВводе = Ложь;
			ЭлементЗаголовок.Шрифт = Новый Шрифт("Arial", 10, Истина);
			
			ГруппаСумма = Элементы.Добавить(Стр.ИмяГруппы + "_ГруппаСумма", Тип("ГруппаФормы"), ГруппаСодержимое);
			ГруппаСумма.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаСумма.ОтображатьЗаголовок = Ложь;
			ГруппаСумма.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаСумма.РастягиватьПоГоризонтали = Истина;
			ГруппаСумма.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаСумма.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
			
			ИмяКоманды = Стр.ИмяГруппы + "_КонтекстРасшифроватьПоказатель";
			Команда = Команды.Найти(ИмяКоманды);
			Если Команда = Неопределено Тогда
				Команда = Команды.Добавить(ИмяКоманды);
				Команда.Действие = "КонтекстРасшифроватьПоказатель";
			КонецЕсли;
			
			ЭлементЗначение = Элементы.Добавить(Стр.ИмяГруппы+"_Значение", Тип("КнопкаФормы"), ГруппаСумма);
			ЭлементЗначение.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			ЭлементЗначение.ИмяКоманды = Команда.Имя;
			ЭлементЗначение.ПропускатьПриВводе = Ложь;
			
			Если НЕ ПустаяСтрока(Стр.Ресурс) Тогда
				ЭлементСравнение = Элементы.Добавить(Стр.ИмяГруппы+"_Сравнение", Тип("ДекорацияФормы"), ГруппаСумма);
				ЭлементСравнение.Вид = ВидДекорацииФормы.Картинка;
				ЭлементСравнение.РастягиватьПоГоризонтали = Ложь;
				ЭлементСравнение.РастягиватьПоВертикали = Ложь;
				ЭлементСравнение.Высота = 1;
				ЭлементСравнение.Ширина = 1;
				ЭлементСравнение.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
			Иначе
				ЭлементЗаголовок.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
				ЭлементЗаголовок.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Низ;
				ЭлементЗаголовок.Высота = ?(ДобавленныеПоказатели.Индекс(Стр)=0, 1, 2);
			КонецЕсли;
			
			// Декорация справа
			ЭлементДекорацияПраво = Элементы.Добавить(Стр.ИмяГруппы + "_ДекорацияПраво", Тип("ДекорацияФормы"), ГруппаЦентр);
			ЭлементДекорацияПраво.Вид = ВидДекорацииФормы.Картинка;
			ЭлементДекорацияПраво.Картинка = ПульсБизнесаПоказательПраво;
			ЭлементДекорацияПраво.РастягиватьПоВертикали = Истина;
			ЭлементДекорацияПраво.РазмерКартинки = РазмерКартинки.Растянуть;
			
			// Декорация снизу
			
			ГруппаНиз = Элементы.Добавить(Стр.ИмяГруппы + "_Низ", Тип("ГруппаФормы"), Группа);
			ГруппаНиз.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаНиз.ОтображатьЗаголовок = Ложь;
			ГруппаНиз.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаНиз.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаНиз.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
			
			ЭлементДекорацияЛевыйНижнийУгол = Элементы.Добавить(Стр.ИмяГруппы + "_ДекорацияЛевыйНижнийУгол", Тип("ДекорацияФормы"), ГруппаНиз);
			ЭлементДекорацияЛевыйНижнийУгол.Вид = ВидДекорацииФормы.Картинка;
			ЭлементДекорацияЛевыйНижнийУгол.Картинка = ПульсБизнесаПоказательЛевыйНижнийУгол;
			
			ЭлементДекорацияНиз = Элементы.Добавить(Стр.ИмяГруппы + "_ДекорацияНиз", Тип("ДекорацияФормы"), ГруппаНиз);
			ЭлементДекорацияНиз.Вид = ВидДекорацииФормы.Картинка;
			ЭлементДекорацияНиз.Картинка = ПульсБизнесаПоказательНиз;
			ЭлементДекорацияНиз.РастягиватьПоГоризонтали = Истина;
			ЭлементДекорацияНиз.РазмерКартинки = РазмерКартинки.Растянуть;
			
			ЭлементДекорацияПравыйНижнийУгол = Элементы.Добавить(Стр.ИмяГруппы + "_ДекорацияПравыйНижнийУгол", Тип("ДекорацияФормы"), ГруппаНиз);
			ЭлементДекорацияПравыйНижнийУгол.Вид = ВидДекорацииФормы.Картинка;
			ЭлементДекорацияПравыйНижнийУгол.Картинка = ПульсБизнесаПоказательПравыйНижнийУгол;
			
			// Контекстное меню
			ДобавитьКоманду(Стр.ИмяГруппы, "_Настроить", ЭлементЗаголовок, "КонтекстНастроитьПоказатель", НСтр("ru = 'Настроить показатель'"), БиблиотекаКартинок.ПрочиеПользовательскиеНастройки);
			Кнопка = ДобавитьКоманду(Стр.ИмяГруппы, "_Удалить", ЭлементЗаголовок, "КонтекстУдалитьПоказатель", НСтр("ru = 'Удалить показатель'"), БиблиотекаКартинок.СерыйКрест);
			Если ПустаяСтрока(Стр.Ресурс) Тогда
				Кнопка.Заголовок = НСтр("ru = 'Удалить заголовок'");
			КонецЕсли; 
			ДобавитьКоманду(Стр.ИмяГруппы, "_Вверх", ЭлементЗаголовок, "КонтекстСместитьВверхПоказатель", НСтр("ru = 'Сместить вверх'"), БиблиотекаКартинок.СдвинутьВверх);
			ДобавитьКоманду(Стр.ИмяГруппы, "_Вниз", ЭлементЗаголовок, "КонтекстСместитьВнизПоказатель", НСтр("ru = 'Сместить вниз'"), БиблиотекаКартинок.СдвинутьВниз);
			
			// Контекстное меню иконки
			ДобавитьКоманду(Стр.ИмяГруппы, "_Настроить", ЭлементДекорацияИконка, "КонтекстНастроитьПоказатель", НСтр("ru = 'Настроить показатель'"), БиблиотекаКартинок.ПрочиеПользовательскиеНастройки);
			Кнопка = ДобавитьКоманду(Стр.ИмяГруппы, "_Удалить", ЭлементДекорацияИконка, "КонтекстУдалитьПоказатель", НСтр("ru = 'Удалить показатель'"), БиблиотекаКартинок.СерыйКрест);
			Если ПустаяСтрока(Стр.Ресурс) Тогда
				Кнопка.Заголовок = НСтр("ru = 'Удалить заголовок'");
			КонецЕсли; 
			ДобавитьКоманду(Стр.ИмяГруппы, "_Вверх", ЭлементДекорацияИконка, "КонтекстСместитьВверхПоказатель", НСтр("ru = 'Сместить вверх'"), БиблиотекаКартинок.СдвинутьВверх);
			ДобавитьКоманду(Стр.ИмяГруппы, "_Вниз", ЭлементДекорацияИконка, "КонтекстСместитьВнизПоказатель", НСтр("ru = 'Сместить вниз'"), БиблиотекаКартинок.СдвинутьВниз);
			
		Иначе
			ЭлементЗаголовок = Элементы[Стр.ИмяГруппы+"_Заголовок"];
		КонецЕсли;
		Если ПустаяСтрока(Стр.Ресурс) Тогда
			ЭлементЗаголовок.Заголовок = Новый ФорматированнаяСтрока(ВРег(Стр.Представление), Новый Шрифт(Новый Шрифт(),,, Истина));
		Иначе
			ЭлементЗаголовок.Заголовок = ВРег(Стр.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПоказатель(Идентификатор)
	
	ТекСтр = ДобавленныеПоказатели.НайтиПоИдентификатору(Идентификатор);
	СтрНастроек = НастройкиПоказателей.НайтиПоИдентификатору(ТекСтр.ИдентификаторСтрокиНастроек);
	
	Если ТекСтр.Налоги Тогда
		// Вместо расшифровки открываем записи календаря подготовки отчетности
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Показатель", ТекСтр.Ресурс);
		ОткрытьФорму("Справочник.ЗаписиКалендаряПодготовкиОтчетности.Форма.КалендарьНалоговИОтчетности", ПараметрыОткрытия, ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрНастроек.Вариант) Тогда
		Возврат;
	КонецЕсли;
	ВариантОтчета = ВариантОтчетаПоПолномуИмени(СтрНастроек.Вариант);
	Если ВариантОтчета=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТекСтр.ВводОстатков Тогда
		// Вместо расшифровки открываем помощник ввода начальных остатков
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РазделУчета", СтрНастроек.РазделУчета);
		ОткрытьФорму("Обработка.ПомощникВводаНачальныхОстатков.Форма", ПараметрыОткрытия, ЭтотОбъект);
		Возврат;
	КонецЕсли; 
	
	ОтборРасшифровки = Новый Структура;
	Если НЕ СтрНастроек.Остаток Тогда
		Если ТипЗнч(Период) = Тип("СтандартныйПериод") Тогда
			ДатаНачалаРасшифровки = НачалоДня(Период.ДатаНачала);
			ДатаКонцаРасшифровки = ?(ЗначениеЗаполнено(Период.ДатаОкончания), 
				КонецДня(Период.ДатаОкончания), '0001-01-01');
		ИначеЕсли ТипЗнч(Период) = Тип("Структура") Тогда
			ОбновитьДатыНачалаИКонцаПериода(Период);
			ДатаНачалаРасшифровки = НачалоДня(Период.ДатаНачала);
			ДатаКонцаРасшифровки = ?(ЗначениеЗаполнено(Период.ДатаОкончания), 
				КонецДня(Период.ДатаОкончания), '0001-01-01');
		Иначе
			ДатаНачалаРасшифровки = '0001-01-01';
			ДатаКонцаРасшифровки = '0001-01-01';
		КонецЕсли; 
		ПериодОтчета = Новый СтандартныйПериод(ДатаНачалаРасшифровки, ДатаКонцаРасшифровки);
		ОтборРасшифровки.Вставить("ПериодРасшифровки", ПериодОтчета);
	КонецЕсли;
	Если ТипЗнч(ТекСтр.Фильтры) = Тип("ФиксированныйМассив") Тогда
		Для каждого Фильтр Из ТекСтр.Фильтры Цикл
			Если СтрНайти(Фильтр.Поле, ".") > 0 Тогда
				Продолжить;
			КонецЕсли;
			СтруктураЗначения = Новый Структура;
			СтруктураЗначения.Вставить("ВидСравнения", Фильтр.ВидСравнения);
			СтруктураЗначения.Вставить("ПравоеЗначение", Фильтр.Значение);
			ОтборРасшифровки.Вставить(Фильтр.Поле, СтруктураЗначения);
		КонецЦикла; 
	КонецЕсли; 
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	Если НЕ ПустаяСтрока(СтрНастроек.КолонкиОтчета) Тогда
		ПараметрыФормы.Вставить("Колонки", СтрНастроек.КолонкиОтчета);
	КонецЕсли; 
	ПараметрыФормы.Вставить("Отбор", ОтборРасшифровки);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", Новый ПользовательскиеНастройкиКомпоновкиДанных);
	ВариантыОтчетовКлиент.ОткрытьФормуОтчета(ЭтаФорма, ВариантОтчета, ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкуПоказателяСервер()
	
	СохранитьНастройки("Показатели");
	СоздатьЭлементыПоказатели();
	
КонецПроцедуры

#КонецОбласти 

#Область Диаграммы

&НаСервере
Процедура ДобавитьОписаниеСерииТочки(СтруктураСерийТочек, Имя, Представления, Заголовок = "", ТипДиаграммы = Неопределено, Валютная = Ложь, Формат = "", ДоступныеТочкиСерии = "", ОбязательныеФильтры = Неопределено)
	
	ОписаниеСерииТочки = Новый Структура;
	Если ТипЗнч(Представления)=Тип("Строка") Тогда
		МассивПредставлений = Новый Массив;
		МассивПредставлений.Добавить(Представления);
	Иначе
		МассивПредставлений = Представления;
	КонецЕсли; 
	ОписаниеСерииТочки.Вставить("Представления", Новый ФиксированныйМассив(МассивПредставлений));
	ОписаниеСерииТочки.Вставить("Заголовок", Заголовок);
	ОписаниеСерииТочки.Вставить("ТипДиаграммы", ТипДиаграммы);
	ОписаниеСерииТочки.Вставить("Валютная", Валютная);
	ОписаниеСерииТочки.Вставить("Формат", Формат);
	ОписаниеСерииТочки.Вставить("ДоступныеТочкиСерии", ДоступныеТочкиСерии);
	ОписаниеСерииТочки.Вставить("ОбязательныеФильтры", ОбязательныеФильтры);
	СтруктураСерийТочек.Вставить(Имя, ОписаниеСерииТочки);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДиаграмму(Диаграмма, Представление = "", Серии, Точки, Остаток, ИмяМакета = "", ИмяОтчета = "", КлючВарианта = "", ЗапретитьСравнение = Ложь)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Диаграмма", Диаграмма);
	Если НастройкиДиаграмм.НайтиСтроки(СтруктураПоиска).Количество()>0 Тогда
		Возврат;
	КонецЕсли; 
	
	Стр = НастройкиДиаграмм.Добавить();
	Стр.Диаграмма = Диаграмма;
	Стр.Представление = ?(ПустаяСтрока(Представление), Диаграмма, Представление);
	Стр.Серии = Серии;
	Стр.Точки = Точки;
	Стр.Остаток = Остаток;
	Стр.ИмяМакета = ИмяМакета;
	Стр.ИмяОтчета = ИмяОтчета;
	Стр.КлючВарианта = КлючВарианта;
	Стр.ЗапретитьСравнение = ЗапретитьСравнение;
	Если ЗначениеЗаполнено(ИмяОтчета) И ЗначениеЗаполнено(КлючВарианта) Тогда
		Стр.Вариант = ИмяОтчета + "." + КлючВарианта;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДиаграмму(Диаграмма, Серия, Точка, Период = Неопределено, ПериодСравнения = Неопределено, Представление = "", Фильтры = Неопределено)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Диаграмма", Диаграмма);
	Строки = НастройкиДиаграмм.НайтиСтроки(СтруктураОтбора);
	Для каждого Стр Из Строки Цикл
		НастройкиСерии = Стр.Серии[Серия];
		НастройкиТочки = Стр.Точки[Точка];
		СтрДанных = ДобавленныеДиаграммы.Добавить();
		СтрДанных.Диаграмма = Диаграмма;
		СтрДанных.Серия = Серия;
		СтрДанных.Точка = Точка;
		СтрДанных.Представление = ?(ПустаяСтрока(Представление), Стр.Представление, Представление);
		СтрДанных.ПредставленияСерий = НастройкиСерии.Представления;
		СтрДанных.ПредставленияТочек = НастройкиТочки.Представления;
		СтрДанных.ИдентификаторСтрокиНастроек = Стр.ПолучитьИдентификатор();
		Если ЗначениеЗаполнено(Период) Тогда
			СтрДанных.Период = Период;
		КонецЕсли; 
		Если ЗначениеЗаполнено(ПериодСравнения) Тогда
			СтрДанных.ПериодСравнения = ПериодСравнения;
		КонецЕсли; 
		Если ЗначениеЗаполнено(Фильтры) Тогда
			СтрДанных.Фильтры = Новый ФиксированныйМассив(Фильтры);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДобавленияДиаграммы()
	
	Если ФоновоеЗаданиеЗапущено Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Диаграмма", Неопределено);
	СтруктураОткрытия.Вставить("Серия", Неопределено);
	СтруктураОткрытия.Вставить("Точка", Неопределено);
	СтруктураОткрытия.Вставить("Представление", "");
	СтруктураОткрытия.Вставить("Период", Новый СтандартныйПериод);
	СтруктураОткрытия.Вставить("ПериодСравнения", Новый СтандартныйПериод);
	СтруктураОткрытия.Вставить("Фильтры", Новый ФиксированныйМассив(Новый Массив));
	СтруктураОткрытия.Вставить("Настройки", Новый ФиксированныйМассив(Новый Массив));
	
	СтруктураОткрытия.Вставить("АдресНастроекДиаграмм", АдресНастроекДиаграмм);
	
	ОткрытьФорму("Обработка.ПульсБизнеса.Форма.ФормаНастройкиДиаграммы", СтруктураОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиДиаграммы(Идентификатор)
	
	Если ФоновоеЗаданиеЗапущено Тогда
		Возврат;
	КонецЕсли; 
	
	Стр = ДобавленныеДиаграммы.НайтиПоИдентификатору(Идентификатор);
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Диаграмма", Стр.Диаграмма);
	СтруктураОткрытия.Вставить("Серия", Стр.Серия);
	СтруктураОткрытия.Вставить("Точка", Стр.Точка);
	СтруктураОткрытия.Вставить("Представление", Стр.Представление);
	СтруктураОткрытия.Вставить("Период", Стр.Период);
	СтруктураОткрытия.Вставить("ПериодСравнения", Стр.ПериодСравнения);
	Если ТипЗнч(Стр.Фильтры)=Тип("ФиксированныйМассив") Тогда
		СтруктураОткрытия.Вставить("Фильтры", Стр.Фильтры);
	Иначе
		СтруктураОткрытия.Вставить("Фильтры", Новый ФиксированныйМассив(Новый Массив));
	КонецЕсли;
	Если ТипЗнч(Стр.Настройки)=Тип("ФиксированныйМассив") Тогда
		СтруктураОткрытия.Вставить("Настройки", Стр.Настройки);
	Иначе
		СтруктураОткрытия.Вставить("Настройки", Новый ФиксированныйМассив(Новый Массив));
	КонецЕсли;
	СтруктураОткрытия.Вставить("ИдентификаторСтроки", Идентификатор);
	
	СтруктураОткрытия.Вставить("АдресНастроекДиаграмм", АдресНастроекДиаграмм);
	
	ОткрытьФорму("Обработка.ПульсБизнеса.Форма.ФормаНастройкиДиаграммы", СтруктураОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначенияДиаграмм(Данные)
	
	Если НЕ ПустаяСтрока(Данные.Секция) Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого Стр Из ДобавленныеДиаграммы Цикл
		
		ОбъектДиаграмма = ЭтаФорма[Стр.ИмяРеквизита];
		ОбъектДиаграмма.Обновление = Ложь;
		ОбъектДиаграмма.Очистить();
		
	КонецЦикла; 
	
	Для каждого Элемент Из Данные.Диаграммы Цикл
		
		МассивДанных = Элемент.Значение;
		Стр = ДобавленныеДиаграммы[Элемент.Ключ];
		СтрокаНастройки = НастройкиДиаграмм.НайтиПоИдентификатору(Стр.ИдентификаторСтрокиНастроек);
		ОписаниеТочки = СтрокаНастройки.Точки[Стр.Точка];
		ОписаниеСерии = СтрокаНастройки.Серии[Стр.Серия];
		ОбъектДиаграмма = ЭтаФорма[Стр.ИмяРеквизита];
		ПриведенныйФорматТочек = ОптимизироватьФормат(Стр, Стр.Точка);
		
		Попытка
			
			ТаблицаЗначений = Новый ТаблицаЗначений;
			ТаблицаЗначений.Колонки.Добавить("Точка");
			ТаблицаЗначений.Колонки.Добавить("ДляСравнения");
			ТаблицаЗначений.Колонки.Добавить("Порядок");
			ТаблицаЗначений.Колонки.Добавить("КоличествоСерий");
			ТаблицаЗначений.Колонки.Добавить("БазовоеЗначение");
			ТекущееКоличествоСерий = 0;
			Для каждого СтруктураЗначения Из МассивДанных Цикл
				Если СтруктураЗначения.КоличествоСерий>ТекущееКоличествоСерий Тогда
					Для ии = ТекущееКоличествоСерий По СтруктураЗначения.КоличествоСерий Цикл
						ТаблицаЗначений.Колонки.Добавить("Серия"+(ии+1));
					КонецЦикла;
					ТекущееКоличествоСерий = СтруктураЗначения.КоличествоСерий;
				КонецЕсли; 
				ЗаполнитьЗначенияСвойств(ТаблицаЗначений.Добавить(), СтруктураЗначения);
			КонецЦикла; 
			ТаблицаЗначений.Сортировать("Порядок, ДляСравнения");
			
			ЕстьДанныеДляОтображения = НЕ ПустаяДиаграмма(ТаблицаЗначений);
			Если НЕ ЕстьДанныеДляОтображения Тогда
				НаполнитьСлучайнымиДанными(ОбъектДиаграмма, МассивДанных, ОписаниеТочки, ОписаниеСерии);
			Иначе
				ОбъектДиаграмма.ОтображатьЗаголовок = Ложь;
				Для каждого СтруктураЗначения Из ТаблицаЗначений Цикл
					Если ЭтоКруговаяДиаграмма(ОписаниеСерии.ТипДиаграммы) Тогда
						Если НЕ ЗначениеЗаполнено(СтруктураЗначения.Точка) Тогда
							Продолжить;
						КонецЕсли; 
						Точка = ОбъектДиаграмма.УстановитьТочку(Стр.ПредставленияСерий[0]);
						Серия = ОбъектДиаграмма.УстановитьСерию(?(НЕ ЗначениеЗаполнено(СтруктураЗначения.Серия1), 
						НСтр("ru = '<не заполнено>'"), 
						СтруктураЗначения.Серия1));
						ОбъектДиаграмма.УстановитьЗначение(Точка, Серия, СтруктураЗначения.Точка);
					ИначеЕсли ОписаниеСерии.ТипДиаграммы=ТипДиаграммы.ГрафикСОбластямиИНакоплением Тогда
						Если Не ПустаяСтрока(ОписаниеТочки.Формат) Тогда
							Точка = ОбъектДиаграмма.УстановитьТочку(Формат(СтруктураЗначения.Точка, ОписаниеТочки.Формат));
						Иначе
							Точка = ОбъектДиаграмма.УстановитьТочку(
							?(НЕ ЗначениеЗаполнено(СтруктураЗначения.Точка), 
							НСтр("ru = '<не заполнено>'"), 
							Строка(СтруктураЗначения.Точка)));
						КонецЕсли;
						Для ии = 1 По СтруктураЗначения.КоличествоСерий Цикл
							Если НЕ ЗначениеЗаполнено(СтруктураЗначения["Серия"+ии]) Тогда
								Продолжить;
							КонецЕсли; 
							Серия = ОбъектДиаграмма.УстановитьСерию(Стр.ПредставленияСерий[ии-1]);
							ОбъектДиаграмма.УстановитьЗначение(Точка, Серия, СтруктураЗначения["Серия"+ии]);
						КонецЦикла;  
					Иначе
						Если НЕ ПустаяСтрока(ПриведенныйФорматТочек) Тогда
							Точка = ОбъектДиаграмма.УстановитьТочку(Формат(СтруктураЗначения.Точка, ПриведенныйФорматТочек));
						ИначеЕсли Не ПустаяСтрока(ОписаниеТочки.Формат) Тогда
							Точка = ОбъектДиаграмма.УстановитьТочку(Формат(СтруктураЗначения.Точка, ОписаниеТочки.Формат));
						Иначе
							Точка = ОбъектДиаграмма.УстановитьТочку(
							?(НЕ ЗначениеЗаполнено(СтруктураЗначения.Точка), 
							НСтр("ru = '<не заполнено>'"), 
							Строка(СтруктураЗначения.Точка)));
						КонецЕсли;
						Если ЗначениеЗаполнено(СтруктураЗначения.Серия1) И СтруктураЗначения.ДляСравнения Тогда
							Серия = ОбъектДиаграмма.УстановитьСерию(Стр.ПредставленияСерий[1]);
							ОбъектДиаграмма.УстановитьЗначение(Точка, Серия, СтруктураЗначения.Серия1);
						Иначе
							Для ии = 1 По СтруктураЗначения.КоличествоСерий Цикл
								Если НЕ ЗначениеЗаполнено(СтруктураЗначения["Серия"+ии]) Тогда
									Продолжить;
								КонецЕсли; 
								Серия = ОбъектДиаграмма.УстановитьСерию(Стр.ПредставленияСерий[ии-1]);
								ОбъектДиаграмма.УстановитьЗначение(Точка, Серия, СтруктураЗначения["Серия"+ии]);
							КонецЦикла;  
						КонецЕсли; 
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли; 
			
			Если НЕ ЭтоКруговаяДиаграмма(ОписаниеСерии.ТипДиаграммы)
				И ОбъектДиаграмма.Серии.Количество()<=1 Тогда
				ОбъектДиаграмма.ОтображатьЛегенду = Ложь;
				ОбъектДиаграмма.ОбластьПостроения.Право = 0.99;
			ИначеЕсли ЭтоКруговаяДиаграмма(ОписаниеСерии.ТипДиаграммы) Тогда
				ОбъектДиаграмма.ОтображатьЛегенду = Истина;
				ОбъектДиаграмма.ОбластьПостроения.Право = 0.55;
				ОбъектДиаграмма.ОбластьЛегенды.Лево = 0.58;
			Иначе
				ОбъектДиаграмма.ОтображатьЛегенду = Истина;
				ОбъектДиаграмма.ОбластьПостроения.Право = 0.75;
				ОбъектДиаграмма.ОбластьЛегенды.Лево = 0.78;
			КонецЕсли; 
			
			УстановитьОтображениеДиаграммы(ОбъектДиаграмма, ЕстьДанныеДляОтображения);
			ОбъектДиаграмма.Обновление = Истина;
			
		Исключение
			
			ОбъектДиаграмма.Очистить();
			ОбъектДиаграмма.Обновление = Истина;
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ВывестиОшибкуДиаграммы(ОбъектДиаграмма, ИнформацияОбОшибке);
		    
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОптимизироватьФормат(ДобавленнаяДиаграмма, ИмяТочки)
	
	Если ИмяТочки <> "Месяц" И ИмяТочки <> "День" Тогда
		Возврат "";
	КонецЕсли; 
	ПериодВПределахГода = ТипЗнч(ДобавленнаяДиаграмма.Период) <> Тип("СтандартныйПериод") 
		ИЛИ НачалоГода(ДобавленнаяДиаграмма.Период.ДатаНачала) = НачалоГода(ДобавленнаяДиаграмма.Период.ДатаОкончания);
	ПериодСравненияВПределахГода = ТипЗнч(ДобавленнаяДиаграмма.ПериодСравнения) <> Тип("СтандартныйПериод") 
		ИЛИ НачалоГода(ДобавленнаяДиаграмма.ПериодСравнения.ДатаНачала) = НачалоГода(ДобавленнаяДиаграмма.ПериодСравнения.ДатаОкончания);
	ПериодВПределахМесяца = ТипЗнч(ДобавленнаяДиаграмма.Период) <> Тип("СтандартныйПериод") 
		ИЛИ НачалоМесяца(ДобавленнаяДиаграмма.Период.ДатаНачала) = НачалоМесяца(ДобавленнаяДиаграмма.Период.ДатаОкончания);
	ПериодСравненияВПределахМесяца = ТипЗнч(ДобавленнаяДиаграмма.ПериодСравнения) <> Тип("СтандартныйПериод") 
		ИЛИ НачалоМесяца(ДобавленнаяДиаграмма.ПериодСравнения.ДатаНачала) = НачалоМесяца(ДобавленнаяДиаграмма.ПериодСравнения.ДатаОкончания);
	Если ИмяТочки = "Месяц" Тогда
		Если ПериодВПределахГода И ПериодСравненияВПределахГода Тогда
			Возврат "ДФ=МММ";
		КонецЕсли;
	ИначеЕсли ИмяТочки = "День" Тогда
		Если ПериодВПределахМесяца И ПериодСравненияВПределахМесяца Тогда
			Возврат "ДФ=д";
		ИначеЕсли ПериодВПределахГода И ПериодСравненияВПределахГода Тогда
			Возврат "ДФ='д МММ'";
		КонецЕсли;
	КонецЕсли; 
	Возврат "";
	
КонецФункции

&НаСервере
Процедура ВывестиОшибкуДиаграммы(ОбъектДиаграмма, ИнформацияОбОшибке)
	
	ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	ПодробноеПредставлениеОшибки = НСтр("ru = 'Ошибка при формировании:'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ОписаниеОшибки = ПодробноеПредставлениеОшибки;
	КонецЕсли;
	
	ОбъектДиаграмма.ОтображатьЗаголовок = Истина;
	ОбъектДиаграмма.ОбластьЗаголовка.Текст = ОписаниеОшибки;
	ОбъектДиаграмма.ОбластьЗаголовка.ЦветТекста = ЦветаСтиля.ЦветИнформацияОшибочна;
	
КонецПроцедуры
 
&НаСервере
Процедура СоздатьЭлементыДиаграммы()
	
	// Создание реквизитов формы
	МассивРеквизитов = Новый Массив;
	Для каждого Стр Из ДобавленныеДиаграммы Цикл
		Если НЕ ПустаяСтрока(Стр.ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		Стр.ИмяРеквизита = "Диаграмма"+СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
		МассивРеквизитов.Добавить(Новый РеквизитФормы(Стр.ИмяРеквизита, Новый ОписаниеТипов("Диаграмма")));
	КонецЦикла;
	ИзменитьРеквизиты(МассивРеквизитов);
	
	Для каждого Стр Из ДобавленныеДиаграммы Цикл
		СтрокаНастройки = НастройкиДиаграмм.НайтиПоИдентификатору(Стр.ИдентификаторСтрокиНастроек);
		ОписаниеТочки = СтрокаНастройки.Точки[Стр.Точка];
		ОписаниеСерии = СтрокаНастройки.Серии[Стр.Серия];
		Если ПустаяСтрока(Стр.ИмяГруппы) Тогда
			Стр.ИмяГруппы = "Диаграмма"+СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
			Группа = Элементы.Добавить(Стр.ИмяГруппы, Тип("ГруппаФормы"), Элементы.ГруппаДобавленныеДиаграммы);
			Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			Группа.ОтображатьЗаголовок = Ложь;
			Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
			Группа.РастягиватьПоВертикали = Ложь;
			Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ЭлементЗаголовок = Элементы.Добавить(Стр.ИмяГруппы+"_Заголовок", Тип("ДекорацияФормы"), Группа);
			ЭлементЗаголовок.Вид = ВидДекорацииФормы.Надпись;
			ЭлементЗаголовок.РастягиватьПоГоризонтали = Истина;
			ЭлементЗаголовок.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
			ЭлементЗаголовок.Шрифт = Новый Шрифт("Arial", 10, Истина);
			ЭлементЗаголовок.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Низ;
			ЭлементЗаголовок.Высота = ?(ДобавленныеДиаграммы.Индекс(Стр)=0, 1, 2);
			ЭлементДиаграмма = Элементы.Добавить(Стр.ИмяГруппы+"_Диаграмма", Тип("ПолеФормы"), Группа);
			ЭлементДиаграмма.Вид = ВидПоляФормы.ПолеДиаграммы;
			ЭлементДиаграмма.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ЭлементДиаграмма.ПутьКДанным = Стр.ИмяРеквизита;
			ЭлементДиаграмма.Ширина = 30;
			ЭлементДиаграмма.Высота = 7;
			ЭлементДиаграмма.УстановитьДействие("Выбор", "Подключаемый_ДиаграммаВыбор");
			// Контекстное меню
			ДобавитьКоманду(Стр.ИмяГруппы, "_Настроить", ЭлементДиаграмма, "КонтекстНастроитьДиаграмму", НСтр("ru = 'Настроить график'"), БиблиотекаКартинок.ПрочиеПользовательскиеНастройки);
			ДобавитьКоманду(Стр.ИмяГруппы, "_Удалить", ЭлементДиаграмма, "КонтекстУдалитьДиаграмму", НСтр("ru = 'Удалить график'"), БиблиотекаКартинок.СерыйКрест);
			ДобавитьКоманду(Стр.ИмяГруппы, "_Вверх", ЭлементДиаграмма, "КонтекстСместитьВверхДиаграмму", НСтр("ru = 'Сместить вверх'"), БиблиотекаКартинок.СдвинутьВверх);
			ДобавитьКоманду(Стр.ИмяГруппы, "_Вниз", ЭлементДиаграмма, "КонтекстСместитьВнизДиаграмму", НСтр("ru = 'Сместить вниз'"), БиблиотекаКартинок.СдвинутьВниз);
			ДобавитьКоманду(Стр.ИмяГруппы, "_Расшифровать", ЭлементДиаграмма, "КонтекстРасшифроватьДиаграмму", НСтр("ru = 'Расшифровать'"), БиблиотекаКартинок.Найти);
			// Контекстное меню заголовка
			ДобавитьКоманду(Стр.ИмяГруппы, "_Настроить", ЭлементЗаголовок, "КонтекстНастроитьДиаграмму", НСтр("ru = 'Настроить график'"), БиблиотекаКартинок.ПрочиеПользовательскиеНастройки);
			ДобавитьКоманду(Стр.ИмяГруппы, "_Удалить", ЭлементЗаголовок, "КонтекстУдалитьДиаграмму", НСтр("ru = 'Удалить график'"), БиблиотекаКартинок.СерыйКрест);
			ДобавитьКоманду(Стр.ИмяГруппы, "_Вверх", ЭлементЗаголовок, "КонтекстСместитьВверхДиаграмму", НСтр("ru = 'Сместить вверх'"), БиблиотекаКартинок.СдвинутьВверх);
			ДобавитьКоманду(Стр.ИмяГруппы, "_Вниз", ЭлементЗаголовок, "КонтекстСместитьВнизДиаграмму", НСтр("ru = 'Сместить вниз'"), БиблиотекаКартинок.СдвинутьВниз);
			ДобавитьКоманду(Стр.ИмяГруппы, "_Расшифровать", ЭлементЗаголовок, "КонтекстРасшифроватьДиаграмму", НСтр("ru = 'Расшифровать'"), БиблиотекаКартинок.Найти);
		Иначе
			Группа = Элементы[Стр.ИмяГруппы];
			ЭлементДиаграмма = Элементы[Стр.ИмяГруппы+"_Диаграмма"];
			ЭлементЗаголовок = Элементы[Стр.ИмяГруппы+"_Заголовок"];
		КонецЕсли;
		ЭлементЗаголовок.Заголовок = ВРег(Стр.Представление);
		ОбъектДиаграмма = ЭтаФорма[Стр.ИмяРеквизита];
		ОбъектДиаграмма.Обновление = Ложь;
		ОбъектДиаграмма.ТипДиаграммы = ОписаниеСерии.ТипДиаграммы;
		ОбъектДиаграмма.ОтображатьЗаголовок = Ложь;
		ОбъектДиаграмма.ОбластьЛегенды.Шрифт = Новый Шрифт(ОбъектДиаграмма.ОбластьЛегенды.Шрифт, "Arial", 7);
		ОбъектДиаграмма.ОбластьПостроения.Шрифт = Новый Шрифт(ОбъектДиаграмма.ОбластьПостроения.Шрифт, "Arial", 7);
		ОбъектДиаграмма.ОбластьПостроения.Низ = 0.99;
		
		Если ЭтоКруговаяДиаграмма(ОписаниеСерии.ТипДиаграммы) Тогда
			ОбъектДиаграмма.ОбластьПостроения.Право = 0.55;
			ОбъектДиаграмма.ОбластьЛегенды.Лево = 0.58;
			ОбъектДиаграмма.МаксимумСерий = МаксимумСерий.Ограничено;
			ОбъектДиаграмма.МаксимумСерийКоличество = 10;
		ИначеЕсли ОписаниеСерии.ТипДиаграммы=ТипДиаграммы.ГрафикСОбластямиИНакоплением Тогда
			ОбъектДиаграмма.ОбластьПостроения.Право = 0.75;
			ОбъектДиаграмма.ОбластьЛегенды.Лево = 0.78;
			ОбъектДиаграмма.АвтоУстановкаТекстаСерий = Ложь;
			ОбъектДиаграмма.ОбластьПостроения.ОтображатьПодписиШкалыТочек = Ложь;
			ОбъектДиаграмма.ОбластьПостроения.ОтображатьЛинииЗначенийШкалы = Ложь;
			ОбъектДиаграмма.РежимСглаживания = РежимСглаживанияДиаграммы.ГладкаяКривая;
		Иначе
			ОбъектДиаграмма.ОбластьПостроения.ОриентацияМеток = ОриентацияМетокДиаграммы.Вертикально;
			Если НЕ ЭтоГистограммаСНакоплением(ОписаниеСерии.ТипДиаграммы) Тогда
				ОбъектДиаграмма.РежимПробелов = РежимПробеловДиаграммы.Нет;
			КонецЕсли; 
			ОбъектДиаграмма.ОбластьПостроения.ОтображатьЛинииЗначенийШкалы = Ложь;
		КонецЕсли;
		
		ОбъектДиаграмма.Анимация = АнимацияДиаграммы.НеИспользовать;
		
		ОбъектДиаграмма.Обновление = Истина;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоКруговаяДиаграмма(Тип)
	
	Возврат (Тип=ТипДиаграммы.Круговая ИЛИ 
			Тип=ТипДиаграммы.КруговаяОбъемная);	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоГистограммаСНакоплением(Тип)
	
	Возврат (Тип=ТипДиаграммы.ГистограммаСНакоплением ИЛИ 
			Тип=ТипДиаграммы.ГистограммаСНакоплениемОбъемная);	
	
КонецФункции 

&НаСервере
Процедура НаполнитьСлучайнымиДанными(ОбъектДиаграмма, ТаблицаЗначений, ОписаниеТочки, ОписаниеСерии)
	
	Генератор = Новый ГенераторСлучайныхЧисел;
	СуммаБазовая = 100;
	Если ТаблицаЗначений.Количество()>0 Тогда
		Для каждого СтруктураЗначения Из ТаблицаЗначений Цикл
			СуффиксСравнения = ?(СтруктураЗначения.ДляСравнения, НСтр("ru = ' (сравнение)'"), "");
			Если Не ПустаяСтрока(ОписаниеТочки.Формат) Тогда
				Точка = ОбъектДиаграмма.УстановитьТочку(Формат(СтруктураЗначения.Точка, ОписаниеТочки.Формат)+СуффиксСравнения);
			Иначе
				Точка = ОбъектДиаграмма.УстановитьТочку(
				?(НЕ ЗначениеЗаполнено(СтруктураЗначения.Точка), 
				НСтр("ru = '<не заполнено>'")+СуффиксСравнения, 
				Строка(СтруктураЗначения.Точка)+СуффиксСравнения));
			КонецЕсли; 
			Серия = ОбъектДиаграмма.УстановитьСерию(НСтр("ru = 'Пример 1'"));
			ОбъектДиаграмма.УстановитьЗначение(Точка, Серия, Генератор.СлучайноеЧисло(0, 100));
			Если ЭтоГистограммаСНакоплением(ОписаниеСерии.ТипДиаграммы) Тогда
				Серия = ОбъектДиаграмма.УстановитьСерию(НСтр("ru = 'Пример 2'"));
				ОбъектДиаграмма.УстановитьЗначение(Точка, Серия, Генератор.СлучайноеЧисло(0, 30));
			КонецЕсли; 
		КонецЦикла; 
	Иначе
		Для ии = 1 По 8 Цикл
			Если ЭтоКруговаяДиаграмма(ОписаниеСерии.ТипДиаграммы) Тогда
				СуммаБазовая = Окр(СуммаБазовая*(100-Генератор.СлучайноеЧисло(0, 30))/100, 2);
				Точка = ОбъектДиаграмма.УстановитьТочку(НСтр("ru = 'Пример 1'"));
				Серия = ОбъектДиаграмма.УстановитьСерию(НСтр("ru = 'Пример '")+ии);
				ОбъектДиаграмма.УстановитьЗначение(Точка, Серия, СуммаБазовая);
			Иначе
				Точка = ОбъектДиаграмма.УстановитьТочку(НСтр("ru = 'Пример '")+ии);
				Серия = ОбъектДиаграмма.УстановитьСерию(НСтр("ru = 'Пример 1'"));
				ОбъектДиаграмма.УстановитьЗначение(Точка, Серия, Генератор.СлучайноеЧисло(0, 100));
				Если ЭтоГистограммаСНакоплением(ОписаниеСерии.ТипДиаграммы) Тогда
					Серия = ОбъектДиаграмма.УстановитьСерию(НСтр("ru = 'Пример 2'"));
					ОбъектДиаграмма.УстановитьЗначение(Точка, Серия, Генератор.СлучайноеЧисло(0, 30));
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	
	ОбъектДиаграмма.ОтображатьЗаголовок = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПустаяДиаграмма(Данные)
	
	Для каждого Стр Из Данные Цикл
		Если ТипЗнч(Стр.Точка)=Тип("Число") И ЗначениеЗаполнено(Стр.Точка) Тогда
			Возврат Ложь;
		КонецЕсли; 
		Для ии = 1 По Стр.КоличествоСерий Цикл
			Если ТипЗнч(Стр["Серия"+ии])=Тип("Число") И ЗначениеЗаполнено(Стр["Серия"+ии]) Тогда
				Возврат Ложь;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	Возврат Истина;
	
КонецФункции

// Процедура постобработки диаграмм. Устанавливает цвета серий и толщину линий
//
// Параметры:
//  Диаграмма				 - диаграмма - обрабатываемая диаграмма
//  ЕстьДанныеДляОтображения - булево	 - признак наличия/отсутствия данных
//  ЦветаСерий				 - массив	 - массив цветов в соответствии с которым назначаются цвета. Если не задан, то назначаются по умолчанию
&НаСервереБезКонтекста
Процедура УстановитьОтображениеДиаграммы(Диаграмма, ЕстьДанныеДляОтображения, ЦветаСерий = Неопределено)
	
	Диаграмма.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, 0);
	Диаграмма.ЦветРамки = ЦветаСтиля.ЦветФонаФормы;
	Диаграмма.ОбластьЗаголовка.ПрозрачныйФон = Истина;
	Диаграмма.ОбластьПостроения.ПрозрачныйФон = Истина;
	Диаграмма.ОбластьЛегенды.ПрозрачныйФон = Истина;
	
	Диаграмма.ОбластьПостроения.ЦветРамки = ЦветаСтиля.ЦветФонаФормы;
	Диаграмма.ОбластьЛегенды.ЦветРамки = ЦветаСтиля.ЦветФонаФормы;
	Диаграмма.ОбластьЗаголовка.ЦветРамки = ЦветаСтиля.ЦветФонаФормы;
		
	Если ЦветаСерий = Неопределено Тогда
		ЦветаСерий = РаботаСЦветомКлиентСервер.ЦветаСерийДиаграмм();
	КонецЕсли;
	Диаграмма.СводнаяСерия.Цвет = ЦветаСтиля.ЦветДиаграммыОтсутствующиеДанные;
	Диаграмма.СводнаяСерия.Текст = НСтр("ru = 'Прочее'");
	
	// Если точек на диаграмме меньше, то серии рисуем толстой линией, если больше - то тонкой
	МаксТочекДиаграммыСТолстойЛинией = 10;
	
	ТонкаяЛиния = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
	ТолстаяЛиния = Новый Линия(ТипЛинииДиаграммы.Сплошная, 2);
	
	Для ИндексСерии = 0 По Диаграмма.Серии.Количество() - 1 Цикл
		
		Серия = Диаграмма.Серии[ИндексСерии];
		
		Если Серия.Цвет=ЦветаСтиля.ЦветДиаграммыОтсутствующиеДанные Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ЕстьДанныеДляОтображения И ИндексСерии<ЦветаСерий.Количество() Тогда
			Серия.Цвет = ЦветаСерий[ИндексСерии];
		ИначеЕсли НЕ ЕстьДанныеДляОтображения И ИндексСерии<ЦветаСерий.Количество() Тогда
			ЦветБазовый = ЦветаСерий[ИндексСерии];
			ЦветСерии = Новый Цвет(
			ЦветБазовый.Красный+(255-ЦветБазовый.Красный)/2,
			ЦветБазовый.Зеленый+(255-ЦветБазовый.Зеленый)/2,
			ЦветБазовый.Синий+(255-ЦветБазовый.Синий)/2);
			Серия.Цвет = ЦветСерии;
		Иначе
			Серия.Цвет = ЦветаСтиля.ЦветДиаграммыОтсутствующиеДанные;
		КонецЕсли;
		
		Если Диаграмма.Точки.Количество() > МаксТочекДиаграммыСТолстойЛинией Тогда
			Серия.Линия = ТонкаяЛиния;
		Иначе
			Серия.Линия = ТолстаяЛиния;
		КонецЕсли;
		
	КонецЦикла;
	
	Диаграмма.ОбластьЗаголовка.Лево = 0;
	Диаграмма.ОбластьЗаголовка.Право = 1;
	Диаграмма.ОбластьЗаголовка.Верх = 0;
	Диаграмма.ОбластьЗаголовка.Низ = 1;
	Диаграмма.ОбластьПостроения.Верх = 0.01;
	Диаграмма.ОбластьЛегенды.Верх = 0.01;
	Диаграмма.ОбластьЛегенды.Прокрутка = (Диаграмма.Серии.Количество()>5);
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Диаграмма.ОбластьЛегенды.Расположение = РасположениеЛегендыДиаграммы.Низ;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьДиаграмму(Идентификатор)
	
	ТекСтр = ДобавленныеДиаграммы.НайтиПоИдентификатору(Идентификатор);
	СтрНастроек = НастройкиДиаграмм.НайтиПоИдентификатору(ТекСтр.ИдентификаторСтрокиНастроек);
	
	Если НЕ ЗначениеЗаполнено(СтрНастроек.Вариант) Тогда
		Возврат;
	КонецЕсли;
	ВариантОтчета = ВариантОтчетаПоПолномуИмени(СтрНастроек.Вариант);
	Если ВариантОтчета = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ОтборРасшифровки = Новый Структура;
	Если СтрНастроек.Остаток Тогда
		Если ТипЗнч(ТекСтр.Период) = Тип("СтандартнаяДатаНачала") Тогда
			ПериодРасшифровки = НачалоДня(ТекСтр.Период.Дата) - 1;
		ИначеЕсли ТипЗнч(ТекСтр.Период) = Тип("Структура") Тогда
			ОбновитьДату(ТекСтр.Период);
			ПериодРасшифровки = НачалоДня(ТекСтр.Период.Дата) - 1;
		Иначе
			ПериодРасшифровки = '0001-01-01';
		КонецЕсли; 
		ОтборРасшифровки.Вставить("ДатаРасшифровки", НачалоДня(ПериодРасшифровки));
	Иначе
		Если ТипЗнч(ТекСтр.Период)=Тип("СтандартныйПериод") Тогда
			ДатаНачалаРасшифровки = НачалоДня(ТекСтр.Период.ДатаНачала);
			ДатаКонцаРасшифровки = ?(ЗначениеЗаполнено(ТекСтр.Период.ДатаОкончания), 
				КонецДня(ТекСтр.Период.ДатаОкончания), '0001-01-01');
		ИначеЕсли ТипЗнч(ТекСтр.Период)=Тип("Структура") Тогда
			ОбновитьДатыНачалаИКонцаПериода(ТекСтр.Период);
			ДатаНачалаРасшифровки = НачалоДня(ТекСтр.Период.ДатаНачала);
			ДатаКонцаРасшифровки = ?(ЗначениеЗаполнено(ТекСтр.Период.ДатаОкончания), 
				КонецДня(ТекСтр.Период.ДатаОкончания), '0001-01-01');
		Иначе
			ДатаНачалаРасшифровки = '0001-01-01';
			ДатаКонцаРасшифровки = '0001-01-01';
		КонецЕсли; 
		ПериодОтчета = Новый СтандартныйПериод(ДатаНачалаРасшифровки, ДатаКонцаРасшифровки);
		ОтборРасшифровки.Вставить("ПериодРасшифровки", ПериодОтчета);
	КонецЕсли;
	Если ТипЗнч(ТекСтр.Фильтры) = Тип("ФиксированныйМассив") Тогда
		Для каждого Фильтр Из ТекСтр.Фильтры Цикл
			Если СтрНайти(Фильтр.Поле, ".") > 0 Тогда
				Продолжить;
			КонецЕсли;
			СтруктураЗначения = Новый Структура;
			СтруктураЗначения.Вставить("ВидСравнения", Фильтр.ВидСравнения);
			СтруктураЗначения.Вставить("ПравоеЗначение", Фильтр.Значение);
			ОтборРасшифровки.Вставить(Фильтр.Поле, СтруктураЗначения);
		КонецЦикла; 
	КонецЕсли; 
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("Отбор", ОтборРасшифровки);
	ВариантыОтчетовКлиент.ОткрытьФормуОтчета(ЭтаФорма, ВариантОтчета, ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкуДиаграммыСервер()
	
	СохранитьНастройки("Диаграммы");
	СоздатьЭлементыДиаграммы();
	
КонецПроцедуры

#КонецОбласти 

#Область Периоды

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСтандартногоПериода(Период, ПериодОснование = Неопределено)
	
	Если ТипЗнч(Период)=Тип("Структура") Тогда
		ОбновитьДатыНачалаИКонцаПериода(Период, ПериодОснование);
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Возврат НСтр("ru = 'Не выбран'");
	ИначеЕсли Период.Вариант=ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
		Если НЕ ЗначениеЗаполнено(Период.ДатаНачала) Тогда
			Возврат НСтр("ru = 'до '")+Формат(Период.ДатаОкончания, "ДЛФ=D");
		ИначеЕсли НЕ ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
			Возврат НСтр("ru = 'от '")+Формат(Период.ДатаНачала, "ДЛФ=D");
		Иначе
			Возврат ПредставлениеПериода(НачалоДня(Период.ДатаНачала), ?(ЗначениеЗаполнено(Период.ДатаОкончания), КонецДня(Период.ДатаОкончания), Период.ДатаОкончания));
		КонецЕсли; 
	ИначеЕсли Период.Вариант="ПредыдущийПлавающийПериод" Тогда
		Возврат НСтр("ru = 'Предыдущий период ('")+ПредставлениеПериода(НачалоДня(Период.ДатаНачала), КонецДня(Период.ДатаОкончания))+")";
	ИначеЕсли Период.Вариант="ЗаПрошлыйГод" Тогда
		Возврат НСтр("ru = 'За прошлый год ('")+ПредставлениеПериода(НачалоДня(Период.ДатаНачала), КонецДня(Период.ДатаОкончания))+")";
	ИначеЕсли Период.Вариант="Последние7ДнейНеСчитаяТекущего" Тогда
		Возврат НСтр("ru = 'Последние 7 дней, не считая текущего'");
	Иначе
		Возврат Строка(Период);
	КонецЕсли; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСтандартнойДатыНачала(Дата, ДатаСравнения = Неопределено)
	
	Если ТипЗнч(Дата)=Тип("Структура") Тогда
		ОбновитьДату(Дата, ДатаСравнения);
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Возврат НСтр("ru = 'Не выбрана'");
	ИначеЕсли Дата.Вариант=ВариантСтандартнойДатыНачала.ПроизвольнаяДата Тогда
		Возврат Формат(Дата.Дата, "ДФ=dd.MM.yyyy");
	ИначеЕсли Дата.Вариант=ВариантСтандартнойДатыНачала.НачалоЭтогоДня Тогда
		Возврат НСтр("ru = 'Сегодня, на начало дня'");
	ИначеЕсли Дата.Вариант=ВариантСтандартнойДатыНачала.НачалоСледующегоДня Тогда
		Возврат НСтр("ru = 'Всегда актуально'");
	ИначеЕсли Дата.Вариант="ТакойЖеДеньНаПрошлойНеделе" Тогда
		Возврат НСтр("ru = 'Такой же день на прошлой неделе ('")+Формат(Дата.Дата, "ДФ='dd.MM.yyyy, ддд'")+")";
	ИначеЕсли Дата.Вариант="ТакойЖеДеньВПрошломМесяце" Тогда
		Возврат НСтр("ru = 'Такой же день прошлого месяца ('")+Формат(Дата.Дата, "ДФ='dd.MM.yyyy, ддд'")+")";
	ИначеЕсли Дата.Вариант="ТакойЖеДеньВПрошломГоду" Тогда
		Возврат НСтр("ru = 'Такой же день в прошлом году ('")+Формат(Дата.Дата, "ДФ='dd.MM.yyyy'")+")";
	Иначе
		Возврат Строка(Дата);
	КонецЕсли; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредыдущаяДата(Знач СтандартнаяДата, ТипДаты)
	
	Если ПустаяСтрока(ТипДаты) ИЛИ ТипДаты="День" Тогда
		СтандартнаяДата.Дата = СтандартнаяДата.Дата-3600*24;
	ИначеЕсли ТипДаты="Неделя" Тогда
		СтандартнаяДата.Дата = СтандартнаяДата.Дата-3600*24*7;
	ИначеЕсли ТипДаты="Декада" Тогда
		СтандартнаяДата.Дата = СтандартнаяДата.Дата-3600*24*10;
	ИначеЕсли ТипДаты="Месяц" Тогда
		СтандартнаяДата.Дата = ДобавитьМесяц(СтандартнаяДата.Дата, -1);
	ИначеЕсли ТипДаты="Квартал" Тогда
		СтандартнаяДата.Дата = ДобавитьМесяц(СтандартнаяДата.Дата, -3);
	ИначеЕсли ТипДаты="Полугодие" Тогда
		СтандартнаяДата.Дата = ДобавитьМесяц(СтандартнаяДата.Дата, -6);
	ИначеЕсли ТипДаты="Год" Тогда
		СтандартнаяДата.Дата = ДобавитьМесяц(СтандартнаяДата.Дата, -12);
	КонецЕсли; 	
	
	Возврат СтандартнаяДата;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция СледующаяДата(Знач СтандартнаяДата, ТипДаты)
	
	Если ПустаяСтрока(ТипДаты) ИЛИ ТипДаты="День" Тогда
		СтандартнаяДата.Дата = СтандартнаяДата.Дата+3600*24;
	ИначеЕсли ТипДаты="Неделя" Тогда
		СтандартнаяДата.Дата = СтандартнаяДата.Дата+3600*24*7;
	ИначеЕсли ТипДаты="Декада" Тогда
		СтандартнаяДата.Дата = СтандартнаяДата.Дата+3600*24*10;
	ИначеЕсли ТипДаты="Месяц" Тогда
		СтандартнаяДата.Дата = ДобавитьМесяц(СтандартнаяДата.Дата, 1);
	ИначеЕсли ТипДаты="Квартал" Тогда
		СтандартнаяДата.Дата = ДобавитьМесяц(СтандартнаяДата.Дата, 3);
	ИначеЕсли ТипДаты="Полугодие" Тогда
		СтандартнаяДата.Дата = ДобавитьМесяц(СтандартнаяДата.Дата, 6);
	ИначеЕсли ТипДаты="Год" Тогда
		СтандартнаяДата.Дата = ДобавитьМесяц(СтандартнаяДата.Дата, 12);
	КонецЕсли; 	
	
	Возврат СтандартнаяДата;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ПредыдущийПериод(Знач СтандартныйПериод, ТипПериода)
	
	Если ТипЗнч(СтандартныйПериод)=Тип("Структура") Тогда
		ОбновитьДатыНачалаИКонцаПериода(СтандартныйПериод);
	КонецЕсли; 
	
	Если ПустаяСтрока(ТипПериода) Тогда
		КоличествоДней = (НачалоДня(СтандартныйПериод.ДатаОкончания)-НачалоДня(СтандартныйПериод.ДатаНачала))/86400+1;
		Результат = Новый СтандартныйПериод(
		НачалоДня(СтандартныйПериод.ДатаНачала)-КоличествоДней*86400,
		НачалоДня(СтандартныйПериод.ДатаНачала)-1);
	ИначеЕсли ТипПериода="День" Тогда 
		Результат = Новый СтандартныйПериод(
		НачалоДня(СтандартныйПериод.ДатаНачала)-86400,
		НачалоДня(СтандартныйПериод.ДатаНачала)-1);
	ИначеЕсли ТипПериода="Неделя" Тогда 
		Результат = Новый СтандартныйПериод(
		НачалоНедели(НачалоНедели(СтандартныйПериод.ДатаНачала)-1),
		НачалоНедели(СтандартныйПериод.ДатаНачала)-1);
	ИначеЕсли ТипПериода="Декада" Тогда 
		Результат = Новый СтандартныйПериод(
		НачалоДекады(СтандартныйПериод.ДатаНачала-10*86400),
		НачалоДекады(СтандартныйПериод.ДатаНачала)-1);
	ИначеЕсли ТипПериода="Месяц" Тогда 
		Результат = Новый СтандартныйПериод(
		НачалоМесяца(ДобавитьМесяц(СтандартныйПериод.ДатаНачала, -1)),
		КонецМесяца(ДобавитьМесяц(СтандартныйПериод.ДатаНачала, -1)));
	ИначеЕсли ТипПериода="Квартал" Тогда 
		Результат = Новый СтандартныйПериод(
		НачалоКвартала(ДобавитьМесяц(СтандартныйПериод.ДатаНачала, -3)),
		КонецКвартала(ДобавитьМесяц(СтандартныйПериод.ДатаНачала, -3)));
	ИначеЕсли ТипПериода="Полугодие" Тогда 
		Результат = Новый СтандартныйПериод(
		НачалоПолугодия(ДобавитьМесяц(СтандартныйПериод.ДатаНачала, -6)),
		КонецПолугодия(ДобавитьМесяц(СтандартныйПериод.ДатаНачала, -6)));
	ИначеЕсли ТипПериода="Год" Тогда 
		Результат = Новый СтандартныйПериод(
		НачалоГода(ДобавитьМесяц(СтандартныйПериод.ДатаНачала, -12)),
		КонецГода(ДобавитьМесяц(СтандартныйПериод.ДатаНачала, -12)));
	ИначеЕсли ТипПериода="ДоКонцаНедели" Тогда 
		Результат = Новый СтандартныйПериод(
		СтандартныйПериод.ДатаНачала-7*86400,
		НачалоНедели(СтандартныйПериод.ДатаНачала)-1);
	ИначеЕсли ТипПериода="СНачалаНедели" Тогда 
		Результат = Новый СтандартныйПериод(
		НачалоНедели(НачалоНедели(СтандартныйПериод.ДатаНачала)-1),
		СтандартныйПериод.ДатаОкончания-7*86400);
	ИначеЕсли ТипПериода="ДоКонцаДекады" Тогда
		ДеньДекады = ДеньДекады(СтандартныйПериод.ДатаНачала);
		НачалоДекады = НачалоДекады(НачалоДекады(СтандартныйПериод.ДатаНачала)-1);
		ДатаНачала = НачалоДекады+(ДеньДекады-1)*86400;
		Если НачалоДекады(ДатаНачала)<>НачалоДекады Тогда
			ДатаНачала = НачалоДня(КонецДекады(НачалоДекады));
		КонецЕсли; 
		Результат = Новый СтандартныйПериод(
		ДатаНачала,
		НачалоДекады(НачалоДекады));
	ИначеЕсли ТипПериода="СНачалаДекады" Тогда 
		ДеньДекады = ДеньДекады(СтандартныйПериод.ДатаОкончания);
		НачалоДекады = НачалоДекады(НачалоДекады(СтандартныйПериод.ДатаНачала)-1);
		ДатаОкончания = КонецДня(НачалоДекады+(ДеньДекады-1)*86400);
		Если НачалоДекады(ДатаОкончания)<>НачалоДекады Тогда
			ДатаОкончания = КонецДекады(НачалоДекады);
		КонецЕсли; 
		Результат = Новый СтандартныйПериод(
		НачалоДекады,
		ДатаОкончания);
	ИначеЕсли ТипПериода="ДоКонцаМесяца" Тогда 
		Результат = Новый СтандартныйПериод(
		ДобавитьМесяц(СтандартныйПериод.ДатаНачала, -1),
		НачалоМесяца(СтандартныйПериод.ДатаНачала)-1);
	ИначеЕсли ТипПериода="СНачалаМесяца" Тогда 
		Результат = Новый СтандартныйПериод(
		НачалоМесяца(НачалоМесяца(СтандартныйПериод.ДатаНачала)-1),
		ДобавитьМесяц(СтандартныйПериод.ДатаОкончания, -1));
	ИначеЕсли ТипПериода="ДоКонцаКвартала" Тогда 
		Результат = Новый СтандартныйПериод(
		ДобавитьМесяц(СтандартныйПериод.ДатаНачала, -3),
		НачалоКвартала(СтандартныйПериод.ДатаНачала)-1);
	ИначеЕсли ТипПериода="СНачалаКвартала" Тогда 
		Результат = Новый СтандартныйПериод(
		НачалоКвартала(НачалоКвартала(СтандартныйПериод.ДатаНачала)-1),
		ДобавитьМесяц(СтандартныйПериод.ДатаОкончания, -3));
	ИначеЕсли ТипПериода="ДоКонцаПолугодия" Тогда 
		Результат = Новый СтандартныйПериод(
		ДобавитьМесяц(СтандартныйПериод.ДатаНачала, -6),
		НачалоПолугодия(СтандартныйПериод.ДатаНачала)-1);
	ИначеЕсли ТипПериода="СНачалаПолугодия" Тогда 
		Результат = Новый СтандартныйПериод(
		НачалоПолугодия(НачалоПолугодия(СтандартныйПериод.ДатаНачала)-1),
		ДобавитьМесяц(СтандартныйПериод.ДатаОкончания, -6));
	ИначеЕсли ТипПериода="ДоКонцаГода" Тогда 
		Результат = Новый СтандартныйПериод(
		ДобавитьМесяц(СтандартныйПериод.ДатаНачала, -12),
		НачалоГода(СтандартныйПериод.ДатаНачала)-1);
	ИначеЕсли ТипПериода="СНачалаГода" Тогда 
		Результат = Новый СтандартныйПериод(
		НачалоГода(НачалоГода(СтандартныйПериод.ДатаНачала)-1),
		ДобавитьМесяц(СтандартныйПериод.ДатаОкончания, -12));
	ИначеЕсли ТипПериода="ЗаПрошлыйГод" Тогда 
		Результат = Новый СтандартныйПериод(
		ДобавитьМесяц(СтандартныйПериод.ДатаНачала, -12),
		ДобавитьМесяц(СтандартныйПериод.ДатаОкончания, -12));
	КонецЕсли; 	 	
	
	Возврат Результат;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция СледующийПериод(Знач СтандартныйПериод, ТипПериода)
	
	Если ТипЗнч(СтандартныйПериод)=Тип("Структура") Тогда
		ОбновитьДатыНачалаИКонцаПериода(СтандартныйПериод);
	КонецЕсли; 
	
	Если ПустаяСтрока(ТипПериода) Тогда
		КоличествоДней = (НачалоДня(СтандартныйПериод.ДатаОкончания)-НачалоДня(СтандартныйПериод.ДатаНачала))/86400+1;
		Результат = Новый СтандартныйПериод(
		КонецДня(СтандартныйПериод.ДатаОкончания)+1,
		КонецДня(СтандартныйПериод.ДатаОкончания)+КоличествоДней*86400);
	ИначеЕсли ТипПериода="День" Тогда 
		Результат = Новый СтандартныйПериод(
		КонецДня(СтандартныйПериод.ДатаОкончания)+1,
		КонецДня(СтандартныйПериод.ДатаОкончания)+86400);
	ИначеЕсли ТипПериода="Неделя" Тогда 
		Результат = Новый СтандартныйПериод(
		КонецНедели(СтандартныйПериод.ДатаОкончания)+1,
		КонецНедели(КонецНедели(СтандартныйПериод.ДатаОкончания)+1));
	ИначеЕсли ТипПериода="Декада" Тогда 
		Результат = Новый СтандартныйПериод(
		КонецДекады(СтандартныйПериод.ДатаОкончания)+1,
		КонецДекады(КонецДекады(СтандартныйПериод.ДатаОкончания)+1));
	ИначеЕсли ТипПериода="Месяц" Тогда 
		Результат = Новый СтандартныйПериод(
		НачалоМесяца(ДобавитьМесяц(СтандартныйПериод.ДатаОкончания, 1)),
		КонецМесяца(ДобавитьМесяц(СтандартныйПериод.ДатаОкончания, 1)));
	ИначеЕсли ТипПериода="Квартал" Тогда 
		Результат = Новый СтандартныйПериод(
		НачалоКвартала(ДобавитьМесяц(СтандартныйПериод.ДатаОкончания, 3)),
		КонецКвартала(ДобавитьМесяц(СтандартныйПериод.ДатаОкончания, 3)));
	ИначеЕсли ТипПериода="Полугодие" Тогда 
		Результат = Новый СтандартныйПериод(
		НачалоПолугодия(ДобавитьМесяц(СтандартныйПериод.ДатаОкончания, 6)),
		КонецПолугодия(ДобавитьМесяц(СтандартныйПериод.ДатаОкончания, 6)));
	ИначеЕсли ТипПериода="Год" Тогда 
		Результат = Новый СтандартныйПериод(
		НачалоГода(ДобавитьМесяц(СтандартныйПериод.ДатаОкончания, 12)),
		КонецГода(ДобавитьМесяц(СтандартныйПериод.ДатаОкончания, 12)));
	ИначеЕсли ТипПериода="ДоКонцаНедели" Тогда 
		Результат = Новый СтандартныйПериод(
		СтандартныйПериод.ДатаНачала+7*86400,
		КонецНедели(КонецНедели(СтандартныйПериод.ДатаОкончания)+1));
	ИначеЕсли ТипПериода="СНачалаНедели" Тогда 
		Результат = Новый СтандартныйПериод(
		КонецНедели(СтандартныйПериод.ДатаОкончания)+1,
		СтандартныйПериод.ДатаОкончания+7*86400);
	ИначеЕсли ТипПериода="ДоКонцаДекады" Тогда
		ДеньДекады = ДеньДекады(СтандартныйПериод.ДатаНачала);
		НачалоДекады = КонецДекады(СтандартныйПериод.ДатаОкончания)+1;
		ДатаНачала = НачалоДекады+(ДеньДекады-1)*86400;
		Если НачалоДекады(ДатаНачала)<>НачалоДекады(НачалоДекады) Тогда
			ДатаНачала = НачалоДня(КонецДекады(НачалоДекады));
		КонецЕсли; 
		Результат = Новый СтандартныйПериод(
		ДатаНачала,
		КонецДекады(НачалоДекады));
	ИначеЕсли ТипПериода="СНачалаДекады" Тогда 
		ДеньДекады = ДеньДекады(СтандартныйПериод.ДатаОкончания);
		НачалоДекады = КонецДекады(СтандартныйПериод.ДатаОкончания)+1;
		ДатаОкончания = КонецДня(НачалоДекады+(ДеньДекады-1)*86400);
		Если НачалоДекады(ДатаОкончания)<>НачалоДекады(НачалоДекады) Тогда
			ДатаОкончания = КонецДекады(НачалоДекады);
		КонецЕсли; 
		Результат = Новый СтандартныйПериод(
		НачалоДекады,
		ДатаОкончания);
	ИначеЕсли ТипПериода="ДоКонцаМесяца" Тогда 
		Результат = Новый СтандартныйПериод(
		ДобавитьМесяц(СтандартныйПериод.ДатаНачала, 1),
		КонецМесяца(КонецМесяца(СтандартныйПериод.ДатаОкончания)+1));
	ИначеЕсли ТипПериода="СНачалаМесяца" Тогда 
		Результат = Новый СтандартныйПериод(
		КонецМесяца(СтандартныйПериод.ДатаНачала)+1,
		ДобавитьМесяц(СтандартныйПериод.ДатаОкончания, 1));
	ИначеЕсли ТипПериода="ДоКонцаКвартала" Тогда 
		Результат = Новый СтандартныйПериод(
		ДобавитьМесяц(СтандартныйПериод.ДатаНачала, 3),
		КонецКвартала(КонецКвартала(СтандартныйПериод.ДатаОкончания)+1));
	ИначеЕсли ТипПериода="СНачалаКвартала" Тогда 
		Результат = Новый СтандартныйПериод(
		КонецКвартала(СтандартныйПериод.ДатаОкончания)+1,
		ДобавитьМесяц(СтандартныйПериод.ДатаОкончания, 3));
	ИначеЕсли ТипПериода="ДоКонцаПолугодия" Тогда 
		Результат = Новый СтандартныйПериод(
		ДобавитьМесяц(СтандартныйПериод.ДатаНачала, 6),
		КонецПолугодия(КонецПолугодия(СтандартныйПериод.ДатаОкончания)+1));
	ИначеЕсли ТипПериода="СНачалаПолугодия" Тогда 
		Результат = Новый СтандартныйПериод(
		КонецПолугодия(СтандартныйПериод.ДатаОкончания)+1,
		ДобавитьМесяц(СтандартныйПериод.ДатаОкончания, 6));
	ИначеЕсли ТипПериода="ДоКонцаГода" Тогда 
		Результат = Новый СтандартныйПериод(
		ДобавитьМесяц(СтандартныйПериод.ДатаНачала, 12),
		КонецГода(КонецГода(СтандартныйПериод.ДатаОкончания)+1));
	ИначеЕсли ТипПериода="СНачалаГода" Тогда 
		Результат = Новый СтандартныйПериод(
		КонецГода(СтандартныйПериод.ДатаОкончания)+1,
		ДобавитьМесяц(СтандартныйПериод.ДатаОкончания, 12));
	ИначеЕсли ТипПериода="ЗаПрошлыйГод" Тогда 
		Результат = Новый СтандартныйПериод(
		ДобавитьМесяц(СтандартныйПериод.ДатаНачала, 12),
		ДобавитьМесяц(СтандартныйПериод.ДатаОкончания, 12));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДатыНачалаИКонцаПериода(СтандартныйПериод, ПериодОснование = Неопределено)

	Если НЕ ТипЗнч(СтандартныйПериод)=Тип("Структура") Тогда
		Возврат;
	КонецЕсли; 
	Если СтандартныйПериод.Вариант="Последние7ДнейНеСчитаяТекущего" Тогда
		СтандартныйПериод.Вставить("ДатаНачала", НачалоДня(ТекущаяДата())-86400*7);
		СтандартныйПериод.Вставить("ДатаОкончания", НачалоДня(ТекущаяДата())-1);
	ИначеЕсли СтандартныйПериод.Вариант="ЗаПрошлыйГод" И ПериодОснование<>Неопределено Тогда
		Период = УправлениеНебольшойФирмойКлиентСервер.АналогичныйПериодПрошлогоГода(ПериодОснование);
		СтандартныйПериод.Вставить("ДатаНачала", Период.ДатаНачала);
		СтандартныйПериод.Вставить("ДатаОкончания", Период.ДатаОкончания);
	ИначеЕсли СтандартныйПериод.Вариант="ПредыдущийПлавающийПериод" И ПериодОснование<>Неопределено Тогда
		Период = УправлениеНебольшойФирмойКлиентСервер.ПредыдущийПлавающийПериод(ПериодОснование);
		СтандартныйПериод.Вставить("ДатаНачала", Период.ДатаНачала);
		СтандартныйПериод.Вставить("ДатаОкончания", Период.ДатаОкончания);
	КонецЕсли; 	
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДату(СтандартнаяДата, ДатаСравнения = Неопределено)

	Если НЕ ТипЗнч(СтандартнаяДата)=Тип("Структура") Тогда
		Возврат;
	КонецЕсли; 
	Если СтандартнаяДата.Вариант="ТакойЖеДеньНаПрошлойНеделе" Тогда
		СтандартнаяДата.Вставить("Дата", НачалоДня(ТекущаяДата())-86400*7);
	ИначеЕсли СтандартнаяДата.Вариант="ТакойЖеДеньВПрошломМесяце" Тогда
		СтандартнаяДата.Вставить("Дата", ДобавитьМесяц(НачалоДня(ТекущаяДата()), -1));
	ИначеЕсли СтандартнаяДата.Вариант="ТакойЖеДеньВПрошломГоду" Тогда
		СтандартнаяДата.Вставить("Дата", ДобавитьМесяц(НачалоДня(ТекущаяДата()), -12));
	КонецЕсли; 	
	
КонецПроцедуры 

// Возвращает начало декады для заданной даты
//
// Параметры:
//    ПараметрДата - Дата - Дата определения начала декады
//
// Возвращаемое значение: 
//    * Дата - Дата начала декады
//
&НаСервереБезКонтекста
Функция НачалоДекады(ПараметрДата)
	
	Если ТипЗнч(ПараметрДата)<>Тип("Дата") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если День(ПараметрДата) < 11 Тогда
		Возврат Дата(Год(ПараметрДата), Месяц(ПараметрДата), 1);
	КонецЕсли;
	
	Если День(ПараметрДата) < 21 Тогда
		Возврат Дата(Год(ПараметрДата), Месяц(ПараметрДата), 11);
	КонецЕсли;
	
	Возврат Дата(Год(ПараметрДата), Месяц(ПараметрДата), 21);
	
КонецФункции

// Возвращает конец декады для заданной даты
//
// Параметры:
//    ПараметрДата - Дата - Дата определения конца декады
//
// Возвращаемое значение: 
//    * Дата - Дата конца декады
//
&НаСервереБезКонтекста
Функция КонецДекады(ПараметрДата)
	
	Если ТипЗнч(ПараметрДата)<>Тип("Дата") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если День(ПараметрДата) >= 21 Тогда
		Возврат КонецМесяца(ПараметрДата);
	КонецЕсли;
	
	Если День(ПараметрДата) >= 11 Тогда
		Возврат КонецДня(Дата(Год(ПараметрДата), Месяц(ПараметрДата), 20));
	КонецЕсли;
	
	Возврат КонецДня(Дата(Год(ПараметрДата), Месяц(ПараметрДата), 10));
	
КонецФункции

// Возвращает номер дня декады для заданной даты
//
// Параметры:
//    ПараметрДата - Дата - Дата определения начала декады
//
// Возвращаемое значение: 
//    * Число - Номер дня декады
//
&НаСервереБезКонтекста
Функция ДеньДекады(ПараметрДата)
	
	Если ТипЗнч(ПараметрДата)<>Тип("Дата") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	День = День(ПараметрДата);
	Если День=31 Тогда
		Возврат 11;
	КонецЕсли; 
	ДеньДекады = День % 10;
	Если ДеньДекады=0 Тогда
		ДеньДекады = 10;
	КонецЕсли; 
	
	Возврат ДеньДекады;
	
КонецФункции

// Возвращает полугодия декады для заданной даты
//
// Параметры:
//    ПараметрДата - Дата - Дата определения начала полугодия
//
// Возвращаемое значение: 
//    * Дата - Дата начала полугодия
//
&НаСервереБезКонтекста
Функция НачалоПолугодия(ПараметрДата)
	
	Если ТипЗнч(ПараметрДата)<>Тип("Дата") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Месяц(ПараметрДата) < 7 Тогда
		Возврат НачалоГода(ПараметрДата);
	Иначе
		Возврат ДобавитьМесяц(НачалоГода(ПараметрДата), 7);
	КонецЕсли;
	
КонецФункции

// Возвращает конец полугодия для заданной даты
//
// Параметры:
//    ПараметрДата - Дата - Дата определения конца полугодия
//
// Возвращаемое значение: 
//    * Дата - Дата конца полугодия
//
&НаСервереБезКонтекста
Функция КонецПолугодия(ПараметрДата)
	
	Если ТипЗнч(ПараметрДата)<>Тип("Дата") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Месяц(ПараметрДата) < 7 Тогда
		Возврат КонецМесяца(ДобавитьМесяц(НачалоГода(ПараметрДата), 6));
	Иначе
		Возврат КонецГода(ПараметрДата);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипДаты(Знач СтандартнаяДата)
	
	Если СтандартнаяДата=Неопределено 
		ИЛИ СтандартнаяДата.Вариант=ВариантСтандартнойДатыНачала.ПроизвольнаяДата Тогда
		Возврат "";
	ИначеЕсли СтандартнаяДата.Вариант=ВариантСтандартнойДатыНачала.НачалоЭтогоДня
		ИЛИ СтандартнаяДата.Вариант=ВариантСтандартнойДатыНачала.НачалоПрошлогоДня
		ИЛИ СтандартнаяДата.Вариант=ВариантСтандартнойДатыНачала.НачалоСледующегоДня Тогда
		Возврат "День";
	ИначеЕсли СтандартнаяДата.Вариант=ВариантСтандартнойДатыНачала.НачалоЭтойНедели
		ИЛИ СтандартнаяДата.Вариант=ВариантСтандартнойДатыНачала.НачалоПрошлойНедели
		ИЛИ СтандартнаяДата.Вариант=ВариантСтандартнойДатыНачала.НачалоСледующегоДня
		ИЛИ СтандартнаяДата.Вариант="ТакойЖеДеньНаПрошлойНеделе" Тогда
		Возврат "Неделя";
	ИначеЕсли СтандартнаяДата.Вариант=ВариантСтандартнойДатыНачала.НачалоЭтойДекады
		ИЛИ СтандартнаяДата.Вариант=ВариантСтандартнойДатыНачала.НачалоПрошлойДекады
		ИЛИ СтандартнаяДата.Вариант=ВариантСтандартнойДатыНачала.НачалоСледующейДекады Тогда
		Возврат "Декада";
	ИначеЕсли СтандартнаяДата.Вариант=ВариантСтандартнойДатыНачала.НачалоЭтогоМесяца
		ИЛИ СтандартнаяДата.Вариант=ВариантСтандартнойДатыНачала.НачалоПрошлогоМесяца
		ИЛИ СтандартнаяДата.Вариант=ВариантСтандартнойДатыНачала.НачалоСледующегоМесяца
		ИЛИ СтандартнаяДата.Вариант="ТакойЖеДеньВПрошломМесяце" Тогда
		Возврат "Месяц";
	ИначеЕсли СтандартнаяДата.Вариант=ВариантСтандартнойДатыНачала.НачалоЭтогоКвартала
		ИЛИ СтандартнаяДата.Вариант=ВариантСтандартнойДатыНачала.НачалоПрошлогоКвартала
		ИЛИ СтандартнаяДата.Вариант=ВариантСтандартнойДатыНачала.НачалоСледующегоКвартала Тогда
		Возврат "Квартал";
	ИначеЕсли СтандартнаяДата.Вариант=ВариантСтандартнойДатыНачала.НачалоЭтогоПолугодия
		ИЛИ СтандартнаяДата.Вариант=ВариантСтандартнойДатыНачала.НачалоПрошлогоПолугодия
		ИЛИ СтандартнаяДата.Вариант=ВариантСтандартнойДатыНачала.НачалоСледующегоПолугодия Тогда
		Возврат "Полугодие";
	ИначеЕсли СтандартнаяДата.Вариант=ВариантСтандартнойДатыНачала.НачалоЭтогоГода
		ИЛИ СтандартнаяДата.Вариант=ВариантСтандартнойДатыНачала.НачалоПрошлогоГода
		ИЛИ СтандартнаяДата.Вариант=ВариантСтандартнойДатыНачала.НачалоСледующегоГода
		ИЛИ СтандартнаяДата.Вариант="ТакойЖеДеньВПрошломГоду" Тогда
		Возврат "Год";
	КонецЕсли; 	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипПериода(СтандартныйПериод)
	
	Если СтандартныйПериод=Неопределено
		ИЛИ СтандартныйПериод.Вариант=ВариантСтандартногоПериода.Последние7Дней
		ИЛИ СтандартныйПериод.Вариант=ВариантСтандартногоПериода.Следующие7Дней
		ИЛИ СтандартныйПериод.Вариант="Последние7ДнейНеСчитаяТекущего"
		ИЛИ СтандартныйПериод.Вариант="ПредыдущийПлавающийПериод" Тогда
		Возврат "";
	ИначеЕсли СтандартныйПериод.Вариант="ЗаПрошлыйГод" Тогда
		Возврат "ЗаПрошлыйГод";
	ИначеЕсли НачалоНедели(СтандартныйПериод.ДатаНачала)=НачалоНедели(СтандартныйПериод.ДатаОкончания) И
		НачалоНедели(СтандартныйПериод.ДатаНачала)=НачалоДня(СтандартныйПериод.ДатаНачала) И
		КонецНедели(СтандартныйПериод.ДатаОкончания)=КонецДня(СтандартныйПериод.ДатаОкончания) Тогда
		// Периодом выбрана произвольная неделя целиком
		Возврат "Неделя";
	ИначеЕсли НачалоМесяца(СтандартныйПериод.ДатаНачала)=НачалоМесяца(СтандартныйПериод.ДатаОкончания) И
		НачалоМесяца(СтандартныйПериод.ДатаНачала)=НачалоДня(СтандартныйПериод.ДатаНачала) И
		КонецМесяца(СтандартныйПериод.ДатаОкончания)=КонецДня(СтандартныйПериод.ДатаОкончания) Тогда
		// Периодом выбран произвольный месяц целиком
		Возврат "Месяц";
	ИначеЕсли НачалоКвартала(СтандартныйПериод.ДатаНачала)=НачалоКвартала(СтандартныйПериод.ДатаОкончания) И
		НачалоКвартала(СтандартныйПериод.ДатаНачала)=НачалоДня(СтандартныйПериод.ДатаНачала) И
		КонецКвартала(СтандартныйПериод.ДатаОкончания)=КонецДня(СтандартныйПериод.ДатаОкончания) Тогда
		// Периодом выбран произвольный квартал целиком
		Возврат "Квартал";
	ИначеЕсли НачалоПолугодия(СтандартныйПериод.ДатаНачала)=НачалоПолугодия(СтандартныйПериод.ДатаОкончания) И
		НачалоПолугодия(СтандартныйПериод.ДатаНачала)=НачалоДня(СтандартныйПериод.ДатаНачала) И
		КонецПолугодия(СтандартныйПериод.ДатаОкончания)=КонецДня(СтандартныйПериод.ДатаОкончания) Тогда
		// Периодом выбрано произвольное полугодие целиком
		Возврат "Полугодие";
	ИначеЕсли НачалоГода(СтандартныйПериод.ДатаНачала)=НачалоГода(СтандартныйПериод.ДатаОкончания) И
		НачалоГода(СтандартныйПериод.ДатаНачала)=НачалоДня(СтандартныйПериод.ДатаНачала) И
		КонецГода(СтандартныйПериод.ДатаОкончания)=КонецДня(СтандартныйПериод.ДатаОкончания) Тогда
		// Периодом выбран произвольный год целиком
		Возврат "Год";
	ИначеЕсли СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
		Возврат "";
	ИначеЕсли СтандартныйПериод.Вариант=ВариантСтандартногоПериода.Вчера
		ИЛИ СтандартныйПериод.Вариант=ВариантСтандартногоПериода.Сегодня
		ИЛИ СтандартныйПериод.Вариант=ВариантСтандартногоПериода.Завтра Тогда
		Возврат "День";
	ИначеЕсли СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ПрошлаяНеделя
		ИЛИ СтандартныйПериод.Вариант=ВариантСтандартногоПериода.СледующаяНеделя
		ИЛИ СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ЭтаНеделя Тогда
		Возврат "Неделя";
	ИначеЕсли СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ДоКонцаЭтойНедели Тогда
		Возврат "ДоКонцаНедели";
	ИначеЕсли СтандартныйПериод.Вариант=ВариантСтандартногоПериода.СНачалаЭтойНедели
		ИЛИ СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ПрошлаяНеделяДоТакогоЖеДняНедели
		ИЛИ СтандартныйПериод.Вариант=ВариантСтандартногоПериода.СледующаяНеделяДоТакогоЖеДняНедели Тогда
		Возврат "СНачалаНедели";
	ИначеЕсли СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ПрошлаяДекада
		ИЛИ СтандартныйПериод.Вариант=ВариантСтандартногоПериода.СледующаяДекада
		ИЛИ СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ЭтаДекада Тогда
		Возврат "Декада";
	ИначеЕсли СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ДоКонцаЭтойДекады Тогда
		Возврат "ДоКонцаДекады";
	ИначеЕсли СтандартныйПериод.Вариант=ВариантСтандартногоПериода.СНачалаЭтойДекады
		ИЛИ СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ПрошлаяДекадаДоТакогоЖеНомераДня
		ИЛИ СтандартныйПериод.Вариант=ВариантСтандартногоПериода.СледующаяДекадаДоТакогоЖеНомераДня Тогда
		Возврат "СНачалаДекады";
	ИначеЕсли СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ПрошлыйМесяц
		ИЛИ СтандартныйПериод.Вариант=ВариантСтандартногоПериода.СледующийМесяц
		ИЛИ СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ЭтотМесяц Тогда
		Возврат "Месяц";
	ИначеЕсли СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ДоКонцаЭтогоМесяца Тогда
		Возврат "ДоКонцаМесяца";
	ИначеЕсли СтандартныйПериод.Вариант=ВариантСтандартногоПериода.СНачалаЭтогоМесяца
		ИЛИ СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ПрошлыйМесяцДоТакойЖеДаты
		ИЛИ СтандартныйПериод.Вариант=ВариантСтандартногоПериода.СледующийМесяцДоТакойЖеДаты Тогда
		Возврат "СНачалаМесяца";
	ИначеЕсли СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ПрошлыйКвартал
		ИЛИ СтандартныйПериод.Вариант=ВариантСтандартногоПериода.СледующийКвартал
		ИЛИ СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ЭтотКвартал Тогда
		Возврат "Квартал";
	ИначеЕсли СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ДоКонцаЭтогоКвартала Тогда
		Возврат "ДоКонцаКвартала";
	ИначеЕсли СтандартныйПериод.Вариант=ВариантСтандартногоПериода.СНачалаЭтогоКвартала
		ИЛИ СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ПрошлыйКварталДоТакойЖеДаты
		ИЛИ СтандартныйПериод.Вариант=ВариантСтандартногоПериода.СледующийКварталДоТакойЖеДаты Тогда
		Возврат "СНачалаКвартала";
	ИначеЕсли СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ПрошлоеПолугодие
		ИЛИ СтандартныйПериод.Вариант=ВариантСтандартногоПериода.СледующееПолугодие
		ИЛИ СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ЭтоПолугодие Тогда
		Возврат "Полугодие";
	ИначеЕсли СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ДоКонцаЭтогоПолугодия Тогда
		Возврат "ДоКонцаПолугодия";
	ИначеЕсли СтандартныйПериод.Вариант=ВариантСтандартногоПериода.СНачалаЭтогоПолугодия
		ИЛИ СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ПрошлоеПолугодиеДоТакойЖеДаты
		ИЛИ СтандартныйПериод.Вариант=ВариантСтандартногоПериода.СледующееПолугодиеДоТакойЖеДаты Тогда
		Возврат "СНачалаПолугодия";
	ИначеЕсли СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ПрошлыйГод
		ИЛИ СтандартныйПериод.Вариант=ВариантСтандартногоПериода.СледующийГод
		ИЛИ СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ЭтотГод Тогда
		Возврат "Год";
	ИначеЕсли СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ДоКонцаЭтогоГода Тогда
		Возврат "ДоКонцаГода";
	ИначеЕсли СтандартныйПериод.Вариант=ВариантСтандартногоПериода.СНачалаЭтогоГода
		ИЛИ СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ПрошлыйГодДоТакойЖеДаты
		ИЛИ СтандартныйПериод.Вариант=ВариантСтандартногоПериода.СледующийГодДоТакойЖеДаты Тогда
		Возврат "СНачалаГода";
	КонецЕсли; 	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ПериодСравненияПоПериоду(СтандартныйПериод)
	
	Если ТипЗнч(СтандартныйПериод)=Тип("Структура") Тогда
		ОбновитьДатыНачалаИКонцаПериода(СтандартныйПериод);
	КонецЕсли; 
	
	Если ТипЗнч(СтандартныйПериод)=Тип("Структура") И СтандартныйПериод.Вариант="Последние7ДнейНеСчитаяТекущего" Тогда
		Результат = Новый Структура;
		Результат.Вставить("Вариант", "ПредыдущийПлавающийПериод");
		ПредыдущийПериод = УправлениеНебольшойФирмойКлиентСервер.ПредыдущийПлавающийПериод(СтандартныйПериод);
		Результат.Вставить("ДатаНачала", ПредыдущийПериод.ДатаНачала);
		Результат.Вставить("ДатаОкончания", ПредыдущийПериод.ДатаОкончания);
		Возврат Результат;
	ИначеЕсли НЕ ТипЗнч(СтандартныйПериод)=Тип("СтандартныйПериод") Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлыйМесяц);
	ИначеЕсли СтандартныйПериод.Вариант=ВариантСтандартногоПериода.Сегодня Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.Вчера);
	ИначеЕсли СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ЭтаНеделя Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлаяНеделяДоТакогоЖеДняНедели);
	ИначеЕсли СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ЭтаДекада Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлаяДекадаДоТакогоЖеНомераДня);
	ИначеЕсли СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ЭтотМесяц Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлыйМесяцДоТакойЖеДаты);
	ИначеЕсли СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ЭтотКвартал Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлыйКварталДоТакойЖеДаты);
	ИначеЕсли СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ЭтоПолугодие Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлоеПолугодиеДоТакойЖеДаты);
	ИначеЕсли СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ЭтотГод Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлыйГодДоТакойЖеДаты);
	ИначеЕсли НачалоНедели(СтандартныйПериод.ДатаНачала)=НачалоНедели(СтандартныйПериод.ДатаОкончания) И
		НачалоНедели(СтандартныйПериод.ДатаНачала)=НачалоДня(СтандартныйПериод.ДатаНачала) И
		КонецНедели(СтандартныйПериод.ДатаОкончания)=КонецДня(СтандартныйПериод.ДатаОкончания) Тогда
		// Периодом выбрана произвольная неделя целиком
		ДатаНачала = НачалоНедели(НачалоНедели(СтандартныйПериод.ДатаНачала)-1);
		ДатаОкончания = НачалоНедели(СтандартныйПериод.ДатаНачала)-1;
		Возврат Новый СтандартныйПериод(ДатаНачала, ДатаОкончания);
	ИначеЕсли НачалоМесяца(СтандартныйПериод.ДатаНачала)=НачалоМесяца(СтандартныйПериод.ДатаОкончания) И
		НачалоМесяца(СтандартныйПериод.ДатаНачала)=НачалоДня(СтандартныйПериод.ДатаНачала) И
		КонецМесяца(СтандартныйПериод.ДатаОкончания)=КонецДня(СтандартныйПериод.ДатаОкончания) Тогда
		// Периодом выбран произвольный месяц целиком
		ДатаНачала = НачалоМесяца(НачалоМесяца(СтандартныйПериод.ДатаНачала)-1);
		ДатаОкончания = НачалоМесяца(СтандартныйПериод.ДатаНачала)-1;
		Возврат Новый СтандартныйПериод(ДатаНачала, ДатаОкончания);
	ИначеЕсли НачалоКвартала(СтандартныйПериод.ДатаНачала)=НачалоКвартала(СтандартныйПериод.ДатаОкончания) И
		НачалоКвартала(СтандартныйПериод.ДатаНачала)=НачалоДня(СтандартныйПериод.ДатаНачала) И
		КонецКвартала(СтандартныйПериод.ДатаОкончания)=КонецДня(СтандартныйПериод.ДатаОкончания) Тогда
		// Периодом выбран произвольный квартал целиком
		ДатаНачала = НачалоКвартала(НачалоКвартала(СтандартныйПериод.ДатаНачала)-1);
		ДатаОкончания = НачалоКвартала(СтандартныйПериод.ДатаНачала)-1;
		Возврат Новый СтандартныйПериод(ДатаНачала, ДатаОкончания);
	ИначеЕсли НачалоПолугодия(СтандартныйПериод.ДатаНачала)=НачалоПолугодия(СтандартныйПериод.ДатаОкончания) И
		НачалоПолугодия(СтандартныйПериод.ДатаНачала)=НачалоДня(СтандартныйПериод.ДатаНачала) И
		КонецПолугодия(СтандартныйПериод.ДатаОкончания)=КонецДня(СтандартныйПериод.ДатаОкончания) Тогда
		// Периодом выбрано произвольное полугодие целиком
		ДатаНачала = НачалоКвартала(НачалоКвартала(СтандартныйПериод.ДатаНачала)-1);
		ДатаОкончания = НачалоКвартала(СтандартныйПериод.ДатаНачала)-1;
		Возврат Новый СтандартныйПериод(ДатаНачала, ДатаОкончания);
	ИначеЕсли НачалоГода(СтандартныйПериод.ДатаНачала)=НачалоГода(СтандартныйПериод.ДатаОкончания) И
		НачалоГода(СтандартныйПериод.ДатаНачала)=НачалоДня(СтандартныйПериод.ДатаНачала) И
		КонецГода(СтандартныйПериод.ДатаОкончания)=КонецДня(СтандартныйПериод.ДатаОкончания) Тогда
		// Периодом выбран произвольный год целиком
		ДатаНачала = НачалоГода(НачалоГода(СтандартныйПериод.ДатаНачала)-1);
		ДатаОкончания = НачалоГода(СтандартныйПериод.ДатаНачала)-1;
		Возврат Новый СтандартныйПериод(ДатаНачала, ДатаОкончания);
	ИначеЕсли ЗначениеЗаполнено(СтандартныйПериод.ДатаНачала) И НачалоГода(СтандартныйПериод.ДатаНачала)=НачалоГода(СтандартныйПериод.ДатаОкончания) Тогда
		Результат = Новый Структура;
		Результат.Вставить("Вариант", "ЗаПрошлыйГод");
		Период = УправлениеНебольшойФирмойКлиентСервер.АналогичныйПериодПрошлогоГода(СтандартныйПериод);
		Если Период<>Неопределено Тогда
			Результат.Вставить("ДатаНачала", Период.ДатаНачала);
			Результат.Вставить("ДатаОкончания", Период.ДатаОкончания);
			Возврат Результат;
		Иначе
			Возврат Неопределено;
		КонецЕсли; 
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("Вариант", "ПредыдущийПлавающийПериод");
		Период = УправлениеНебольшойФирмойКлиентСервер.ПредыдущийПлавающийПериод(СтандартныйПериод);
		Если Период<>Неопределено Тогда
			Результат.Вставить("ДатаНачала", Период.ДатаНачала);
			Результат.Вставить("ДатаОкончания", Период.ДатаОкончания);
			Возврат Результат;
		Иначе
			Возврат Неопределено;
		КонецЕсли; 
	КонецЕсли; 	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция МожноСместитьПериод(СтандартныйПериод)
	
	Если СтандартныйПериод=Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтандартныйПериод.Вариант="" Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ПроизвольныйПериод 
		И (НЕ ЗначениеЗаполнено(СтандартныйПериод.ДатаНачала)
		ИЛИ НЕ ЗначениеЗаполнено(СтандартныйПериод.ДатаОкончания)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставленияПериодов(Форма)
	
	// Видимость групп выбора параметров сравнения
	ВидимостьДатыСравнения = (Форма.ДатаСравнения<>Неопределено);
	Если Форма.Элементы.ГруппаПоказателиОстаткиДатаСравнения.Видимость<>ВидимостьДатыСравнения Тогда
		Форма.Элементы.ГруппаПоказателиОстаткиДатаСравнения.Видимость = ВидимостьДатыСравнения;
	КонецЕсли; 
	ВидимостьПериодаСравнения = (Форма.ПериодСравнения<>Неопределено);
	Если Форма.Элементы.ГруппаПоказателиОборотыПериодСравнения.Видимость<>ВидимостьПериодаСравнения Тогда
		Форма.Элементы.ГруппаПоказателиОборотыПериодСравнения.Видимость = ВидимостьПериодаСравнения;
	КонецЕсли;
	
	// Доступность кнопок смещения периода
	ДоступностьКнопокПериод = МожноСместитьПериод(Форма.Период);
	Если Форма.Элементы.ПериодНазад.Доступность<>ДоступностьКнопокПериод Тогда
		Форма.Элементы.ПериодНазад.Доступность = ДоступностьКнопокПериод;
		Форма.Элементы.ПериодВперед.Доступность = ДоступностьКнопокПериод;
	КонецЕсли; 
	ДоступностьКнопокПериодСравнения = МожноСместитьПериод(Форма.ПериодСравнения);
	Если Форма.Элементы.ПериодСравненияНазад.Доступность<>ДоступностьКнопокПериодСравнения Тогда
		Форма.Элементы.ПериодСравненияНазад.Доступность = ДоступностьКнопокПериодСравнения;
		Форма.Элементы.ПериодСравненияВперед.Доступность = ДоступностьКнопокПериодСравнения;
	КонецЕсли; 
	
	// Представления периодов
	Форма.Элементы.ДатаВыбор.Заголовок = ВРег(НСтр("ru = 'На сегодня'"));
	Форма.Элементы.ДатаВыбор.РасширеннаяПодсказка.Заголовок = Форма.Элементы.ДатаВыбор.Заголовок;
	
	Представление = ПредставлениеСтандартнойДатыНачала(Форма.ДатаСравнения, Форма.Дата);
	Форма.Элементы.ДатаСравненияВыбор.Заголовок = НСтр("ru = 'Сравнить с: '")+Представление;
	Форма.Элементы.ДатаСравненияВыбор.РасширеннаяПодсказка.Заголовок = Представление;
	
	Форма.Элементы.ПериодВыбор.Заголовок = ВРег(ПредставлениеСтандартногоПериода(Форма.Период));
	Форма.Элементы.ПериодВыбор.РасширеннаяПодсказка.Заголовок = Форма.Элементы.ПериодВыбор.Заголовок;
	
	Представление = ПредставлениеСтандартногоПериода(Форма.ПериодСравнения, Форма.Период);
	Форма.Элементы.ПериодСравненияВыбор.Заголовок = НСтр("ru = 'Сравнить с: '")+Представление;
	Форма.Элементы.ПериодСравненияВыбор.РасширеннаяПодсказка.Заголовок = Представление;	
	
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура ОбновитьЧастично(Секция, СохраняемыеПериоды = "")
	
	Если ПустаяСтрока(Секция) Тогда
		Возврат;
	КонецЕсли; 
	Если Секция = ИмяСекцииОстатки() Тогда
		Элементы.ГруппаПоказателиОстатки.Доступность = Ложь;
	ИначеЕсли Секция = ИмяСекцииОбороты() Тогда
		Элементы.ГруппаПоказателиОбороты.Доступность = Ложь;
	КонецЕсли; 
	ЗапуститьФоновоеЗадание(Секция, СохраняемыеПериоды);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФорму()
	
	УдалитьЭлементыРекурсивно(Элементы.ГруппаПоказателиОстаткиЛево);
	УдалитьЭлементыРекурсивно(Элементы.ГруппаПоказателиОстаткиПраво);
	УдалитьЭлементыРекурсивно(Элементы.ГруппаПоказателиОборотыЛево);
	УдалитьЭлементыРекурсивно(Элементы.ГруппаПоказателиОборотыПраво);
	ДобавленныеПоказатели.Очистить();
	УдалитьЭлементыРекурсивно(Элементы.ГруппаДобавленныеДиаграммы);
	ДобавленныеДиаграммы.Очистить();
	ЗагрузитьНастройки();
	СоздатьЭлементыПоказатели();
	СоздатьЭлементыДиаграммы();
	
КонецПроцедуры
 
&НаСервере
Процедура ОбновитьДанные()
	
	Если НЕ ЭтоАдресВременногоХранилища(ФоновоеЗаданиеАдресРезультата) Тогда
		Возврат;
	КонецЕсли; 
	
	Данные = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресРезультата);
	
	ОбновитьЗначенияПоказателей(Данные);
	ОбновитьЗначенияДиаграмм(Данные);
	Если Данные.Свойство("Актуальность") Тогда
		Если Данные.Актуальность = Неопределено Тогда
			ПервыйНеактуальныйМесяц = '0001-01-01';
			ПерваяНеактуальнаяОрганизация = Справочники.Организации.ПустаяСсылка();
			Элементы.ГруппаАктуальностьСебестоимости.Видимость = Ложь;
		Иначе
			ПервыйНеактуальныйМесяц = Данные.Актуальность.Месяц;
			ПерваяНеактуальнаяОрганизация = Данные.Актуальность.Организация;
			Элементы.ГруппаАктуальностьСебестоимости.Видимость = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
	УдалитьИзВременногоХранилища(ФоновоеЗаданиеАдресРезультата);
	ФоновоеЗаданиеАдресРезультата = Неопределено;
	ФоновоеЗаданиеИдентификатор = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура Инициализация()
	
	// Заполнение таблицы показателей

	// Продажи
	ДобавитьПоказатель("Продажи", "Выручка", НСтр("ru = 'Продажи'"), НСтр("ru = 'Выручка'"),, Истина, "ЧДЦ=2; ЧН=-", "СКД_РН_Продажи", "Отчет.Продажи", "Основной", "Сумма");
	ДобавитьПоказатель("Продажи", "Количество", НСтр("ru = 'Продажи'"), НСтр("ru = 'Кол-во проданных товаров'"),,, "ЧН=-", "СКД_РН_Продажи", "Отчет.Продажи", "Основной", "Количество");
	ДобавитьПоказатель("Продажи", "КоличествоДокументов", НСтр("ru = 'Продажи'"), НСтр("ru = 'Кол-во продаж (документов)'"),,, "ЧДЦ=; ЧН=-", "СКД_РН_Продажи", "Отчет.Продажи", "ВаловаяПрибыльПоМенеджерам", "КоличествоДокументов");
	ДобавитьПоказатель("Продажи", "Себестоимость", НСтр("ru = 'Продажи'"), НСтр("ru = 'Себестоимость'"),, Истина, "ЧДЦ=2; ЧН=-", "СКД_РН_Продажи", "Отчет.Продажи", "ВаловаяПрибыль", "Себестоимость");
	ДобавитьПоказатель("Продажи", "Прибыль", НСтр("ru = 'Продажи'"), НСтр("ru = 'Прибыль'"),, Истина, "ЧДЦ=2; ЧН=-", "СКД_РН_Продажи", "Отчет.Продажи", "ВаловаяПрибыль", "ВаловаяПрибыль");
	ДобавитьПоказатель("Продажи", "Наценка", НСтр("ru = 'Продажи'"), НСтр("ru = 'Прибыль/Себестоимость'"),,, "ЧН=-", "СКД_РН_Продажи", "Отчет.Продажи", "ВаловаяПрибыль", "Наценка");
	ДобавитьПоказатель("Продажи", "Рентабельность", НСтр("ru = 'Продажи'"), НСтр("ru = 'Прибыль/выручка'"),,, "ЧН=-", "СКД_РН_Продажи", "Отчет.Продажи", "ВаловаяПрибыль", "Рентабельность");
	ДобавитьПоказатель("Продажи", "ВозвратыСумма", НСтр("ru = 'Продажи'"), НСтр("ru = 'Сумма возвратов'"),, Истина, "ЧДЦ=2; ЧН=-", "СКД_РН_Продажи", "Отчет.Продажи", "Возвраты", "Сумма");
	ДобавитьПоказатель("Продажи", "ВозвратыКоличество", НСтр("ru = 'Продажи'"), НСтр("ru = 'Кол-во возвратов'"),,, "ЧН=-", "СКД_РН_Продажи", "Отчет.Продажи", "Возвраты", "Количество");
	
	// Розница
	ДобавитьПоказатель("Розница", "РозничныеПродажи", НСтр("ru = 'Розница'"), НСтр("ru = 'Розничные продажи'"),, Истина, "ЧДЦ=2; ЧН=-", "СКД_РН_Продажи", "Отчет.РозничныеПродажи", "РозничныеПродажиКонтекст", "Сумма");
	ДобавитьПоказатель("Розница", "КоличествоЧеков", НСтр("ru = 'Розница'"), НСтр("ru = 'Количество чеков'"),,, "ЧН=-", "СКД_Розница", "Отчет.РозничныеПродажи", "РозничныеПродажиПоТочкамКонтекст", "КоличествоЧеков");
	ДобавитьПоказатель("Розница", "СреднийЧек", НСтр("ru = 'Розница'"), НСтр("ru = 'Средний чек'"),, Истина, "ЧДЦ=2; ЧН=-", "СКД_Розница", "Отчет.РозничныеПродажи", "РозничныеПродажиПоТочкамКонтекст", "СреднийЧек");
	ДобавитьПоказатель("Розница", "ПолученоНаличными", НСтр("ru = 'Розница'"), НСтр("ru = 'Получено наличными'"),, Истина, "ЧДЦ=2; ЧН=-", "СКД_Розница", "Отчет.РозничныеПродажи", "РозничныеПродажиПоТочкамКонтекст", "ПолученоНаличными");
	ДобавитьПоказатель("Розница", "ПолученоКартами", НСтр("ru = 'Розница'"), НСтр("ru = 'Получено картами'"),, Истина, "ЧДЦ=2; ЧН=-", "СКД_Розница", "Отчет.РозничныеПродажи", "РозничныеПродажиПоТочкамКонтекст", "ПолученоКартами");
	ДобавитьПоказатель("Розница", "СуммаОстаток", НСтр("ru = 'Розница'"), НСтр("ru = 'Остаток в кассах ККМ'"), Истина, Истина, "ЧДЦ=2; ЧН=-", "СКД_РН_ДенежныеСредстваВКассахККМ", "Отчет.ДенежныеСредстваВКассахККМ", "Остатки", "СуммаКонечныйОстаток");

	// Товары
	ДобавитьПоказатель("Товары", "КоличествоОстаток", НСтр("ru = 'Товары'"), НСтр("ru = 'Остаток (кол-во)'"), Истина,, "ЧН=-", "СКД_РН_Запасы", "Отчет.Запасы", "Остатки",, "Запасы");
	ДобавитьПоказатель("Товары", "СуммаОстаток", НСтр("ru = 'Товары'"), НСтр("ru = 'Остаток (сумма)'"), Истина, Истина, "ЧДЦ=2; ЧН=-", "СКД_РН_Запасы", "Отчет.Запасы", "Остатки",, "Запасы");
	ДобавитьПоказатель("Товары", "КоличествоПриход", НСтр("ru = 'Товары'"), НСтр("ru = 'Приход (кол-во)'"),,, "ЧН=-", "СКД_РН_Запасы", "Отчет.Запасы", "Ведомость");
	ДобавитьПоказатель("Товары", "СуммаПриход", НСтр("ru = 'Товары'"), НСтр("ru = 'Приход (сумма)'"),, Истина, "ЧДЦ=2; ЧН=-", "СКД_РН_Запасы", "Отчет.Запасы", "Ведомость");
	ДобавитьПоказатель("Товары", "КоличествоРасход", НСтр("ru = 'Товары'"), НСтр("ru = 'Расход (кол-во)'"),,, "ЧН=-", "СКД_РН_Запасы", "Отчет.Запасы", "Ведомость");
	ДобавитьПоказатель("Товары", "СуммаРасход", НСтр("ru = 'Товары'"), НСтр("ru = 'Расход (сумма)'"),, Истина, "ЧДЦ=2; ЧН=-", "СКД_РН_Запасы", "Отчет.Запасы", "Ведомость");

	// Деньги
	ДобавитьПоказатель("Деньги", "СуммаОстаток", НСтр("ru = 'Деньги'"), НСтр("ru = 'Остаток денег'"), Истина, Истина, "ЧДЦ=2; ЧН=-", "СКД_РН_ДенежныеСредства", "Отчет.ДенежныеСредства", "Остатки",, "Деньги");
	ДобавитьПоказатель("Деньги", "ДенежныйПоток", НСтр("ru = 'Деньги'"), НСтр("ru = 'Чистый денежный поток'"),, Истина, "ЧДЦ=2; ЧН=-", "СКД_РН_ДенежныеСредства", "Отчет.ДенежныеСредства", "Ведомость");
	ДобавитьПоказатель("Деньги", "Поступления", НСтр("ru = 'Деньги'"), НСтр("ru = 'Поступления'"),, Истина, "ЧДЦ=2; ЧН=-", "СКД_РН_ДенежныеСредства", "Отчет.ДенежныеСредства", "Ведомость");
	ДобавитьПоказатель("Деньги", "Платежи", НСтр("ru = 'Деньги'"), НСтр("ru = 'Платежи'"),, Истина, "ЧДЦ=2; ЧН=-", "СКД_РН_ДенежныеСредства", "Отчет.ДенежныеСредства", "Ведомость");
	ДобавитьПоказатель("Деньги", "ПоступленияПлан", НСтр("ru = 'Деньги'"), НСтр("ru = 'Поступления (план)'"),, Истина, "ЧДЦ=2; ЧН=-", "СКД_РН_ПлатежныйКалендарь", "Отчет.ПлановыеДвиженияДенежныхСредств", "Ведомость", "Поступления");
	ДобавитьПоказатель("Деньги", "ПлатежиПлан", НСтр("ru = 'Деньги'"), НСтр("ru = 'Платежи (план)'"),, Истина, "ЧДЦ=2; ЧН=-", "СКД_РН_ПлатежныйКалендарь", "Отчет.ПлановыеДвиженияДенежныхСредств", "Ведомость", "Платежи");

	// Счета-заказы
	ДобавитьПоказатель("СчетаЗаказы", "КоличествоСчетов", НСтр("ru = 'Счета - заказы'"), НСтр("ru = 'Выставлено счетов (штук)'"),,, "ЧДЦ=; ЧН=-", "СКД_РН_ОплатаСчетовИЗаказов", "Отчет.АнализСчетовИЗаказовВВалютеУчета", "СчетаНаОплатуКонтекст", "КоличествоДокументов", , 1);
	ДобавитьПоказатель("СчетаЗаказы", "СуммаСчетов", НСтр("ru = 'Счета - заказы'"), НСтр("ru = 'Выставлено счетов на сумму'"),, Истина, "ЧДЦ=2; ЧН=-", "СКД_РН_ОплатаСчетовИЗаказов", "Отчет.АнализСчетовИЗаказовВВалютеУчета", "СчетаНаОплатуКонтекст", "Сумма", , 2);
	ДобавитьПоказатель("СчетаЗаказы", "ОплаченоСчетов", НСтр("ru = 'Счета - заказы'"), НСтр("ru = 'Получено оплат по счетам на сумму'"),, Истина, "ЧДЦ=2; ЧН=-", "СКД_РН_ОплатаСчетовИЗаказов", "Отчет.АнализСчетовИЗаказовВВалютеУчета", "СчетаНаОплатуКонтекст", "СуммаОплаты", , 3);
	ДобавитьПоказатель("СчетаЗаказы", "ОплаченоСчетовКоличество", НСтр("ru = 'Счета - заказы'"), НСтр("ru = 'Оплачено счетов (штук)'"),,, "ЧДЦ=; ЧН=-", "СКД_РН_ОплатаСчетовИЗаказов", "Отчет.АнализСчетовИЗаказовВВалютеУчета", "СчетаНаОплатуКонтекст", "КоличествоОплачено", , 4);
	ДобавитьПоказатель("СчетаЗаказы", "КоличествоЗаказов", НСтр("ru = 'Счета - заказы'"), НСтр("ru = 'Получено заказов (штук)'"),,, "ЧДЦ=; ЧН=-", "СКД_РН_ОплатаСчетовИЗаказов", "Отчет.АнализСчетовИЗаказовВВалютеУчета", "ЗаказыПокупателейКонтекст", "КоличествоДокументов", , 5);
	ДобавитьПоказатель("СчетаЗаказы", "СуммаЗаказов", НСтр("ru = 'Счета - заказы'"), НСтр("ru = 'Получено заказов на сумму'"),, Истина, "ЧДЦ=2; ЧН=-", "СКД_РН_ОплатаСчетовИЗаказов", "Отчет.АнализСчетовИЗаказовВВалютеУчета", "ЗаказыПокупателейКонтекст", "Сумма", , 6);
	ДобавитьПоказатель("СчетаЗаказы", "ОплаченоЗаказов", НСтр("ru = 'Счета - заказы'"), НСтр("ru = 'Получено оплат по заказам на сумму'"),, Истина, "ЧДЦ=2; ЧН=-", "СКД_РН_ОплатаСчетовИЗаказов", "Отчет.АнализСчетовИЗаказовВВалютеУчета", "ЗаказыПокупателейКонтекст", "СуммаОплаты", , 7);
	ДобавитьПоказатель("СчетаЗаказы", "ОплаченоЗаказовКоличество", НСтр("ru = 'Счета - заказы'"), НСтр("ru = 'Оплачено заказов (штук)'"),,, "ЧДЦ=; ЧН=-", "СКД_РН_ОплатаСчетовИЗаказов", "Отчет.АнализСчетовИЗаказовВВалютеУчета", "ЗаказыПокупателейКонтекст", "КоличествоОплачено", , 8);
	ДобавитьПоказатель("СчетаЗаказы", "КоличествоЗаказовПоставщику", НСтр("ru = 'Счета - заказы'"), НСтр("ru = 'Отправлено заказов (штук)'"),,, "ЧДЦ=; ЧН=-", "СКД_РН_ОплатаСчетовИЗаказов", "Отчет.АнализСчетовИЗаказовВВалютеУчета", "ЗаказыПоставщикамКонтекст", "КоличествоДокументов", , 9);
	ДобавитьПоказатель("СчетаЗаказы", "СуммаЗаказовПоставщику", НСтр("ru = 'Счета - заказы'"), НСтр("ru = 'Отправлено заказов на сумму'"),, Истина, "ЧДЦ=2; ЧН=-", "СКД_РН_ОплатаСчетовИЗаказов", "Отчет.АнализСчетовИЗаказовВВалютеУчета", "ЗаказыПоставщикамКонтекст", "Сумма", , 10);
	ДобавитьПоказатель("СчетаЗаказы", "ОплаченоЗаказовПоставщику", НСтр("ru = 'Счета - заказы'"), НСтр("ru = 'Выполнено оплат по заказам на сумму'"),, Истина, "ЧДЦ=2; ЧН=-", "СКД_РН_ОплатаСчетовИЗаказов", "Отчет.АнализСчетовИЗаказовВВалютеУчета", "ЗаказыПоставщикамКонтекст", "СуммаОплаты", , 11);
	ДобавитьПоказатель("СчетаЗаказы", "ОплаченоЗаказовПоставщикуКоличество", НСтр("ru = 'Счета - заказы'"), НСтр("ru = 'Оплачено заказов поставщику (штук)'"),,, "ЧДЦ=; ЧН=-", "СКД_РН_ОплатаСчетовИЗаказов", "Отчет.АнализСчетовИЗаказовВВалютеУчета", "ЗаказыПоставщикамКонтекст", "КоличествоОплачено", , 12);

	// Долги
	ДобавитьПоказатель("Долги", "ДолгиОбщие", НСтр("ru = 'Долги'"), НСтр("ru = 'Общий долг'"), Истина, Истина, "ЧДЦ=2; ЧН=-", "СКД_Расчеты", "Отчет.Взаиморасчеты", "Остатки",, "Покупатели");
	ДобавитьПоказатель("Долги", "ДолгиНам", НСтр("ru = 'Долги'"), НСтр("ru = 'Долги нам'"), Истина, Истина, "ЧДЦ=2; ЧН=-", "СКД_Расчеты", "Отчет.Взаиморасчеты", "Остатки",, "Покупатели");
	ДобавитьПоказатель("Долги", "ДолгиНаши", НСтр("ru = 'Долги'"), НСтр("ru = 'Долги наши'"), Истина, Истина, "ЧДЦ=2; ЧН=-", "СКД_Расчеты", "Отчет.Взаиморасчеты", "Остатки",, "Поставщики");

	// Фин. анализ
	ДобавитьПоказатель("ФинАнализ", "ЧистыеАктивы", НСтр("ru = 'Фин. анализ'"), НСтр("ru = 'Чистые активы'"), Истина, Истина, "ЧДЦ=2; ЧН=-", "СКД_РБ_Управленческий", "Отчет.ЧистыеАктивы", "ЧистыеАктивы");

	// Налоги
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтчетность") Тогда
		ДобавитьПоказатель("Налоги", "ТекущиеПлатежи", НСтр("ru = 'Налоги'"), НСтр("ru = 'Налоги к оплате'"), Истина, Ложь, "ЧДЦ=2; ЧН=-", "СКД_Налоги", "Справочник.ЗаписиКалендаряПодготовкиОтчетности", "ТекущиеПлатежи");
		ДобавитьПоказатель("Налоги", "КоличествоТекущихПлатежей", НСтр("ru = 'Налоги'"), НСтр("ru = 'Задач по оплате налогов'"), Истина, Ложь, "ЧДЦ=0; ЧН=-", "СКД_Налоги", "Справочник.ЗаписиКалендаряПодготовкиОтчетности", "КоличествоТекущихПлатежей");
		ДобавитьПоказатель("Налоги", "КоличествоТекущихДокументов", НСтр("ru = 'Налоги'"), НСтр("ru = 'Задач по сдаче отчетности'"), Истина, Ложь, "ЧДЦ=0; ЧН=-", "СКД_Налоги", "Справочник.ЗаписиКалендаряПодготовкиОтчетности", "КоличествоТекущихДокументов");
	КонецЕсли;
	
	НастройкиПоказателей.Сортировать("Представление, Порядок, ПредставлениеРесурса");

	// Заполнение таблицы диаграмм
	
	//ИспользуютсяОбщиеДопРеквизиты = ПолучитьФункциональнуюОпцию("ИспользоватьОбщиеДополнительныеРеквизитыИСведения");
	ИспользуютсяОбщиеДопРеквизиты = Истина;
	НаборыСвойствНоменклатура = НаборыРеквизитов(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура, ИспользуютсяОбщиеДопРеквизиты);
	
	// Диаграмма "Динамика продаж"
	СтруктураСерий = Новый Структура;
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "Сумма", НСтр("ru = 'Сумма продаж'"), НСтр("ru = 'Продажи'"), ТипДиаграммы.Гистограмма, Истина);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "Количество", НСтр("ru = 'Количество проданных товаров'"),, ТипДиаграммы.Гистограмма);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "КоличествоДокументов", НСтр("ru = 'Количество продаж (чеков)'"),, ТипДиаграммы.Гистограмма);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "Прибыль", НСтр("ru = 'Прибыль'"),, ТипДиаграммы.Гистограмма, Истина);
	МассивПредставлений = Новый Массив;
	МассивПредставлений.Добавить(НСтр("ru = 'Себестоимость'"));
	МассивПредставлений.Добавить(НСтр("ru = 'Прибыль'"));
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "ПрибыльИСебестоимость", МассивПредставлений, НСтр("ru = 'Себестоимость и прибыль'"), ТипДиаграммы.ГистограммаСНакоплением, Истина);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "ВозвратыСумма", НСтр("ru = 'Возвраты (сумма)'"),, ТипДиаграммы.Гистограмма, Истина);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "ВозвратыКоличество", НСтр("ru = 'Возвраты (количество)'"),, ТипДиаграммы.Гистограмма);
	СтруктураТочек = Новый Структура;
	ДобавитьОписаниеСерииТочки(СтруктураТочек, "День", НСтр("ru = 'Дни'"),,,, "ДЛФ=D");
	ДобавитьОписаниеСерииТочки(СтруктураТочек, "Неделя", НСтр("ru = 'Недели'"),,,, "ДЛФ=D");
	ДобавитьОписаниеСерииТочки(СтруктураТочек, "Месяц", НСтр("ru = 'Месяцы'"),,,, "ДФ='МММ гггг'");
	ДобавитьДиаграмму("ДинамикаПродаж", НСтр("ru = 'Динамика продаж'"), СтруктураСерий, СтруктураТочек, Ложь, "СКД_РН_Продажи", "Отчет.Продажи", "Основной");  
	
	// Диаграмма "Структура продаж"
	СтруктураСерий = Новый Структура;
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "НоменклатураРодитель", НСтр("ru = 'Группы товаров'"),, ТипДиаграммы.Круговая);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "КатегорияНоменклатуры", НСтр("ru = 'Категории номенклатуры'"),, ТипДиаграммы.Круговая);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "Склад", НСтр("ru = 'Склады'"),, ТипДиаграммы.Круговая);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "Номенклатура", НСтр("ru = 'Товары'"),, ТипДиаграммы.Круговая);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "Контрагент", НСтр("ru = 'Покупатели'"),, ТипДиаграммы.Круговая);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "Организация", НСтр("ru = 'Организации'"),, ТипДиаграммы.Круговая);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "Подразделение", НСтр("ru = 'Подразделения'"),, ТипДиаграммы.Круговая);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "Ответственный", НСтр("ru = 'Менеджеры'"),, ТипДиаграммы.Круговая);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "Валюта", НСтр("ru = 'Валюта'"),, ТипДиаграммы.Круговая);
	СтруктураОтбора = Новый Соответствие;
	СтруктураОтбора.Вставить("Отбор.НаборСвойств", НаборыСвойствНоменклатура);
	СтруктураОтбора.Вставить("НаборСвойств", Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие);
	СтруктураОтбора.Вставить("ТекущийНаборСвойств", Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие);
	СтруктураОтбора.Вставить("ЭтоДополнительноеСведение", Ложь);
	СтруктураОтбора.Вставить("ТолькоПросмотр", Истина);
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("СвойствоНоменклатуры", СтруктураОтбора);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "СвойствоНоменклатуры", НСтр("ru = 'Доп. реквизиты номенклатуры'"),, ТипДиаграммы.Круговая,,,, СтруктураНастроек);
	СтруктураОтбора = Новый Соответствие;
	СтруктураОтбора.Вставить("Отбор.НаборСвойств", Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты);
	СтруктураОтбора.Вставить("НаборСвойств", Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты);
	СтруктураОтбора.Вставить("ТекущийНаборСвойств", Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты);
	СтруктураОтбора.Вставить("ЭтоДополнительноеСведение", Ложь);
	СтруктураОтбора.Вставить("ТолькоПросмотр", Истина);
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("СвойствоПокупателя", СтруктураОтбора);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "СвойствоПокупателя", НСтр("ru = 'Доп. реквизиты покупателей'"),, ТипДиаграммы.Круговая,,,, СтруктураНастроек);
	СтруктураТочек = Новый Структура;
	ДобавитьОписаниеСерииТочки(СтруктураТочек, "Сумма", НСтр("ru = 'Сумма продаж'"), НСтр("ru = 'Продажи'"),, Истина);
	ДобавитьОписаниеСерииТочки(СтруктураТочек, "Количество", НСтр("ru = 'Количество проданных товаров'"));
	ДобавитьОписаниеСерииТочки(СтруктураТочек, "КоличествоДокументов", НСтр("ru = 'Количество продаж (чеков)'"));
	ДобавитьОписаниеСерииТочки(СтруктураТочек, "Прибыль", НСтр("ru = 'Прибыль'"),,, Истина);
	ДобавитьОписаниеСерииТочки(СтруктураТочек, "ВозвратыСумма", НСтр("ru = 'Возвраты (сумма)'"),,, Истина);
	ДобавитьОписаниеСерииТочки(СтруктураТочек, "ВозвратыКоличество", НСтр("ru = 'Возвраты (количество)'"));
	ДобавитьДиаграмму("СтруктураПродаж", НСтр("ru = 'Структура продаж'"), СтруктураСерий, СтруктураТочек, Ложь, "СКД_РН_Продажи", "Отчет.Продажи", "Основной");  
	
	// Диаграмма "Структура розничных продаж"
	СтруктураСерий = Новый Структура;
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "НоменклатураРодитель", НСтр("ru = 'Группы товаров'"),, ТипДиаграммы.Круговая);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "КатегорияНоменклатуры", НСтр("ru = 'Категории номенклатуры'"),, ТипДиаграммы.Круговая);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "Склад", НСтр("ru = 'Склады'"),, ТипДиаграммы.Круговая);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "Номенклатура", НСтр("ru = 'Товары'"),, ТипДиаграммы.Круговая);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "Организация", НСтр("ru = 'Организации'"),, ТипДиаграммы.Круговая);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "Подразделение", НСтр("ru = 'Подразделения'"),, ТипДиаграммы.Круговая);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "КассаККМ", НСтр("ru = 'Касса ККМ'"),, ТипДиаграммы.Круговая);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "Ответственный", НСтр("ru = 'Менеджеры'"),, ТипДиаграммы.Круговая);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "Валюта", НСтр("ru = 'Валюта'"),, ТипДиаграммы.Круговая);
	СтруктураОтбора = Новый Соответствие;
	СтруктураОтбора.Вставить("Отбор.НаборСвойств", НаборыСвойствНоменклатура);
	СтруктураОтбора.Вставить("НаборСвойств", Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие);
	СтруктураОтбора.Вставить("ТекущийНаборСвойств", Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие);
	СтруктураОтбора.Вставить("ЭтоДополнительноеСведение", Ложь);
	СтруктураОтбора.Вставить("ТолькоПросмотр", Истина);
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("СвойствоНоменклатуры", СтруктураОтбора);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "СвойствоНоменклатуры", НСтр("ru = 'Доп. реквизиты номенклатуры'"),, ТипДиаграммы.Круговая,,,, СтруктураНастроек);
	СтруктураТочек = Новый Структура;
	ДобавитьОписаниеСерииТочки(СтруктураТочек, "Сумма", НСтр("ru = 'Сумма продаж'"), НСтр("ru = 'Продажи'"),, Истина);
	ДобавитьОписаниеСерииТочки(СтруктураТочек, "Количество", НСтр("ru = 'Количество проданных товаров'"));
	ДобавитьОписаниеСерииТочки(СтруктураТочек, "КоличествоДокументов", НСтр("ru = 'Количество продаж (чеков)'"));
	ДобавитьОписаниеСерииТочки(СтруктураТочек, "Прибыль", НСтр("ru = 'Прибыль'"),,, Истина);
	ДобавитьОписаниеСерииТочки(СтруктураТочек, "ВозвратыСумма", НСтр("ru = 'Возвраты (сумма)'"),,, Истина);
	ДобавитьОписаниеСерииТочки(СтруктураТочек, "ВозвратыКоличество", НСтр("ru = 'Возвраты (количество)'"));
	ДобавитьОписаниеСерииТочки(СтруктураТочек, "КоличествоЧеков", НСтр("ru = 'Количество чеков'"));
	ДобавитьОписаниеСерииТочки(СтруктураТочек, "СреднийЧек", НСтр("ru = 'Средний чек'"));
	ДобавитьДиаграмму("СтруктураРозничныхПродаж", НСтр("ru = 'Структура розничных продаж'"), СтруктураСерий, СтруктураТочек, Ложь, "СКД_Розница", "Отчет.РозничныеПродажи", "РозничныеПродажиКонтекст");  
	
	// Диаграмма "Динамика денег"
	СтруктураСерий = Новый Структура;
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "СуммаОстаток", НСтр("ru = 'Остаток'"), НСтр("ru = 'Остаток денег'"), ТипДиаграммы.Гистограмма, Истина);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "СуммаПриход", НСтр("ru = 'Поступления'"), НСтр("ru = 'Поступления денег'"), ТипДиаграммы.Гистограмма, Истина);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "СуммаРасход", НСтр("ru = 'Списания'"), НСтр("ru = 'Списания денег'"), ТипДиаграммы.Гистограмма, Истина);
	СтруктураТочек = Новый Структура;
	ДобавитьОписаниеСерииТочки(СтруктураТочек, "День", НСтр("ru = 'Дни'"),,,, "ДЛФ=D");
	ДобавитьОписаниеСерииТочки(СтруктураТочек, "Неделя", НСтр("ru = 'Недели'"),,,, "ДЛФ=D");
	ДобавитьОписаниеСерииТочки(СтруктураТочек, "Месяц", НСтр("ru = 'Месяцы'"),,,, "ДФ='МММ гггг'");
	ДобавитьДиаграмму("ДинамикаДенег", НСтр("ru = 'Деньги (динамика)'"), СтруктураСерий, СтруктураТочек, Ложь, "СКД_РН_ДенежныеСредства", "Отчет.ДенежныеСредства", "Ведомость");  
	
	// Диаграмма "Структура денег"
	СтруктураСерий = Новый Структура;
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "БанковскийСчетКасса", НСтр("ru = 'Банковский счет / касса'"),, ТипДиаграммы.Круговая);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "Валюта", НСтр("ru = 'Валюта'"),, ТипДиаграммы.Круговая);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "Организация", НСтр("ru = 'Организация'"),, ТипДиаграммы.Круговая);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "ТипДенежныхСредств", НСтр("ru = 'Тип денежных средств'"),, ТипДиаграммы.Круговая);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "ХозяйственнаяОперация", НСтр("ru = 'Хоз. операция'"),, ТипДиаграммы.Круговая,,, "СуммаПриход,СуммаРасход");
	СтруктураОтбора = Новый Соответствие;
	МассивХозОпераций = ХозоперацииДС();
	СтруктураОтбора.Вставить("Отбор.Ссылка", МассивХозОпераций);
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ХозяйственнаяОперация", СтруктураОтбора);
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "Аналитика", НСтр("ru = 'Аналитика'"),, ТипДиаграммы.Круговая,,, "СуммаПриход,СуммаРасход", СтруктураНастроек);
	СтруктураТочек = Новый Структура;
	ДобавитьОписаниеСерииТочки(СтруктураТочек, "СуммаОстаток", НСтр("ru = 'Остаток'"), НСтр("ru = 'Остаток денег'"),, Истина);
	ДобавитьОписаниеСерииТочки(СтруктураТочек, "СуммаПриход", НСтр("ru = 'Поступления'"), НСтр("ru = 'Поступления денег'"),, Истина);
	ДобавитьОписаниеСерииТочки(СтруктураТочек, "СуммаРасход", НСтр("ru = 'Списания'"), НСтр("ru = 'Списания денег'"),, Истина);
	ДобавитьДиаграмму("СтруктураДенег", НСтр("ru = 'Структура денег'"), СтруктураСерий, СтруктураТочек, Ложь, "СКД_РН_ДенежныеСредстваДвижения", "Отчет.ДенежныеСредства", "Ведомость");  
	
	// Диаграмма "Динамика активов"
	СтруктураСерий = Новый Структура;
	МассивПредставлений = Новый Массив;
	МассивПредставлений.Добавить(НСтр("ru = 'Долги нам'"));
	МассивПредставлений.Добавить(НСтр("ru = 'Деньги'"));
	МассивПредставлений.Добавить(НСтр("ru = 'Товары'"));
	МассивПредставлений.Добавить(НСтр("ru = 'Имущество'"));
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "Сумма", МассивПредставлений, НСтр("ru = 'Активы'"), ТипДиаграммы.ГрафикСОбластямиИНакоплением, Истина);
	СтруктураТочек = Новый Структура;
	ДобавитьОписаниеСерииТочки(СтруктураТочек, "Время", НСтр("ru = 'Время'"),,,, "ДЛФ=D");
	ДобавитьДиаграмму("ДинамикаАктивов", НСтр("ru = 'Активы (динамика)'"), СтруктураСерий, СтруктураТочек, Ложь, "СКД_РБ_Управленческий", "Отчет.ЧистыеАктивы", "Активы", Истина);  

	// Диаграмма "Динамика пассивов"
	СтруктураСерий = Новый Структура;
	МассивПредставлений = Новый Массив;
	МассивПредставлений.Добавить(НСтр("ru = 'Наши долги'"));
	МассивПредставлений.Добавить(НСтр("ru = 'Кредиты и займы'"));
	МассивПредставлений.Добавить(НСтр("ru = 'Налоги'"));
	ДобавитьОписаниеСерииТочки(СтруктураСерий, "Сумма", МассивПредставлений, НСтр("ru = 'Пассивы'"), ТипДиаграммы.ГрафикСОбластямиИНакоплением, Истина);
	СтруктураТочек = Новый Структура;
	ДобавитьОписаниеСерииТочки(СтруктураТочек, "Время", НСтр("ru = 'Время'"),,,, "ДЛФ=D");
	ДобавитьДиаграмму("ДинамикаПассивов", НСтр("ru = 'Пассивы (динамика)'"), СтруктураСерий, СтруктураТочек, Ложь, "СКД_РБ_Управленческий", "Отчет.ЧистыеАктивы", "Пассивы", Истина);  

	НастройкиДиаграмм.Сортировать("Представление");

	// Прочие операции инициализации
	
	СимволРеглВалюты = УправлениеНебольшойФирмойПовтИсп.ПолучитьСимвольноеПредставлениеВалюты(
	УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета());
	
	ОпределитьРежимыВводаОстатков();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьРежимыВводаОстатков()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДенежныеСредства.Регистратор
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства КАК ДенежныеСредства
	|ГДЕ
	|	НЕ ДенежныеСредства.Регистратор ССЫЛКА Документ.ВводНачальныхОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗапасыНаСкладах.Регистратор
	|ИЗ
	|	РегистрНакопления.ЗапасыНаСкладах КАК ЗапасыНаСкладах
	|ГДЕ
	|	НЕ ЗапасыНаСкладах.Регистратор ССЫЛКА Документ.ВводНачальныхОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетыСПокупателями.Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
	|ГДЕ
	|	НЕ РасчетыСПокупателями.Регистратор ССЫЛКА Документ.ВводНачальныхОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетыСПоставщиками.Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|ГДЕ
	|	НЕ РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ВводНачальныхОстатков";
	Результат = Запрос.ВыполнитьПакет();
	Режимы = Новый Структура;
	Режимы.Вставить("Деньги", Результат.Получить(0).Пустой());
	Режимы.Вставить("Запасы", Результат.Получить(1).Пустой());
	Режимы.Вставить("Покупатели", Результат.Получить(2).Пустой());
	Режимы.Вставить("Поставщики", Результат.Получить(3).Пустой());
	РежимыВводаОстатков = Новый ФиксированнаяСтруктура(Режимы);
	
	ЕстьВводыОстатков = Ложь;
	Для каждого Режим Из РежимыВводаОстатков Цикл
		Если НЕ Режим.Значение Тогда
			ЕстьВводыОстатков = Истина;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиПериоды(СохраняемыеПериоды)
	
	Имена = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СохраняемыеПериоды);
	Для каждого Имя Из Имена Цикл
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПульсБизнеса", Имя, ЭтаФорма[Имя]);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки(ВидНастроек = "")

	Если ПустаяСтрока(ВидНастроек) ИЛИ ВидНастроек="Показатели" Тогда
		Таб = ДобавленныеПоказатели.Выгрузить(, "Показатель,Ресурс,Представление,Цвет,Фильтры,Настройки");
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПульсБизнеса", "Показатели", Таб);
	КонецЕсли;
	Если ПустаяСтрока(ВидНастроек) ИЛИ ВидНастроек="Диаграммы" Тогда
		Таб = ДобавленныеДиаграммы.Выгрузить(, "Диаграмма,Серия,Точка,Представление,Период,ПериодСравнения,Фильтры,Настройки");
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПульсБизнеса", "Диаграммы", Таб);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиПериоды()
	
	Дата = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоДня);
	
	ТекДатаСравнения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПульсБизнеса", "ДатаСравнения");
	Если ТипЗнч(ТекДатаСравнения)<>Тип("СтандартнаяДатаНачала") И ТипЗнч(ТекДатаСравнения)<>Тип("Структура") И ТекДатаСравнения<>Неопределено Тогда
		ТекДатаСравнения = Неопределено;
	КонецЕсли;
	ДатаСравнения = ТекДатаСравнения;
	
	ТекТипДатыСравнения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПульсБизнеса", "ТипДатыСравнения");
	Если ТипЗнч(ТекТипДатыСравнения)<>Тип("Строка") Тогда
		ТекТипДатыСравнения = ТипДаты(ДатаСравнения);
	КонецЕсли; 
	ТипДатыСравнения = ТекТипДатыСравнения;
	
	ТекПериод = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПульсБизнеса", "Период");
	Если ТипЗнч(ТекПериод)<>Тип("СтандартныйПериод") И ТипЗнч(ТекПериод)<>Тип("Структура") Тогда
		ТекПериод = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтотМесяц);
	КонецЕсли; 
	Период = ТекПериод;
	
	ТекТипПериода = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПульсБизнеса", "ТипПериода");
	Если ТипЗнч(ТекТипПериода)<>Тип("Строка") Тогда
		ТекТипПериода = ТипПериода(Период);
	КонецЕсли; 
	ТипПериода = ТекТипПериода;
	
	ТекПериодСравнения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПульсБизнеса", "ПериодСравнения");
	Если ТипЗнч(ТекПериодСравнения)<>Тип("СтандартныйПериод") И ТипЗнч(ТекПериодСравнения)<>Тип("Структура") И ТекПериодСравнения<>Неопределено Тогда
		ТекПериодСравнения = Неопределено;
	КонецЕсли; 
	ПериодСравнения = ТекПериодСравнения;
	
	ТекТипПериодаСравнения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПульсБизнеса", "ТипПериодаСравнения");
	Если ТипЗнч(ТекТипПериодаСравнения)<>Тип("Строка") Тогда
		ТекТипПериодаСравнения = ТипПериода(ПериодСравнения);
	КонецЕсли; 
	ТипПериодаСравнения = ТекТипПериодаСравнения;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройки()
	
	ТаблицаПоказателей = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПульсБизнеса", "Показатели");
	ТаблицаДиаграмм = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПульсБизнеса", "Диаграммы");
	
	Если ТаблицаПоказателей=Неопределено Тогда
		ПоказателиПоУмолчанию();
	Иначе
		ДобавленныеПоказатели.Очистить();
		Для каждого Стр Из ТаблицаПоказателей Цикл
			Если НЕ ПустаяСтрока(Стр.Ресурс) Тогда
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Показатель", Стр.Показатель);
				СтруктураОтбора.Вставить("Ресурс", Стр.Ресурс);
				Строки = НастройкиПоказателей.НайтиСтроки(СтруктураОтбора);
				Если Строки.Количество()=0 Тогда
					// Устаревший показатель
					Продолжить;
				КонецЕсли; 
			КонецЕсли; 
			НоваяСтрока = ДобавленныеПоказатели.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
			Если НЕ ПустаяСтрока(Стр.Ресурс) Тогда
				СтрНастроек = Строки[0];
				НоваяСтрока.ИдентификаторСтрокиНастроек = СтрНастроек.ПолучитьИдентификатор();
				НоваяСтрока.Остаток = СтрНастроек.Остаток;
				Если НЕ ПустаяСтрока(СтрНастроек.РазделУчета) Тогда
					НоваяСтрока.ВводОстатков = РежимыВводаОстатков[СтрНастроек.РазделУчета];
				КонецЕсли; 
				НоваяСтрока.Налоги = Стр.Показатель = "Налоги";
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	
	Если ТаблицаДиаграмм=Неопределено Тогда
		ДиаграммыПоУмолчанию();
	Иначе
		ДобавленныеДиаграммы.Очистить();
		Для каждого Стр Из ТаблицаДиаграмм Цикл
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Диаграмма", ?(ТаблицаДиаграмм.Колонки.Найти("Показатель")=Неопределено, Стр.Диаграмма, Стр.Показатель));
			Строки = НастройкиДиаграмм.НайтиСтроки(СтруктураОтбора);
			Если Строки.Количество()=0 Тогда
				// Устаревшая диаграмма
				Продолжить;
			КонецЕсли;
			СтрокаНастройки = Строки[0];
			Если НЕ СтрокаНастройки.Серии.Свойство(Стр.Серия) ИЛИ НЕ СтрокаНастройки.Точки.Свойство(Стр.Точка) Тогда
				// Устаревшая диаграмма
				Продолжить;
			КонецЕсли; 
			НоваяСтрока = ДобавленныеДиаграммы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
			Если НЕ ТаблицаДиаграмм.Колонки.Найти("Показатель")=Неопределено Тогда
				НоваяСтрока.Диаграмма = Стр.Показатель;
			КонецЕсли; 
			НоваяСтрока.ИдентификаторСтрокиНастроек = Строки[0].ПолучитьИдентификатор();
			Если ЗначениеЗаполнено(НоваяСтрока.ПериодСравнения) И ТипЗнч(НоваяСтрока.ПериодСравнения)=Тип("СтандартныйПериод") Тогда
				МассивПредставлений = Новый Массив;
				МассивПредставлений.Добавить(ПредставлениеСтандартногоПериода(НоваяСтрока.Период));
				МассивПредставлений.Добавить(ПредставлениеСтандартногоПериода(НоваяСтрока.ПериодСравнения, НоваяСтрока.Период));
				НоваяСтрока.ПредставленияСерий = Новый ФиксированныйМассив(МассивПредставлений);
			ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.ПериодСравнения) И ТипЗнч(НоваяСтрока.ПериодСравнения)=Тип("СтандартнаяДатаНачала") Тогда
				МассивПредставлений = Новый Массив;
				МассивПредставлений.Добавить(ПредставлениеСтандартнойДатыНачала(НоваяСтрока.Период));
				МассивПредставлений.Добавить(ПредставлениеСтандартнойДатыНачала(НоваяСтрока.ПериодСравнения, НоваяСтрока.Период));
				НоваяСтрока.ПредставленияСерий = Новый ФиксированныйМассив(МассивПредставлений);
			ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.ПериодСравнения) И ТипЗнч(НоваяСтрока.ПериодСравнения)=Тип("Структура") Тогда
				МассивПредставлений = Новый Массив;
				Если НоваяСтрока.ПериодСравнения.Вариант="ТакойЖеДеньНаПрошлойНеделе" 
					ИЛИ НоваяСтрока.ПериодСравнения.Вариант="ТакойЖеДеньВПрошломМесяце" 
					ИЛИ НоваяСтрока.ПериодСравнения.Вариант="ТакойЖеДеньВПрошломГоду" Тогда
					МассивПредставлений.Добавить(ПредставлениеСтандартнойДатыНачала(НоваяСтрока.Период));
					МассивПредставлений.Добавить(ПредставлениеСтандартнойДатыНачала(НоваяСтрока.ПериодСравнения, НоваяСтрока.Период));
				Иначе
					МассивПредставлений.Добавить(ПредставлениеСтандартногоПериода(НоваяСтрока.Период));
					МассивПредставлений.Добавить(ПредставлениеСтандартногоПериода(НоваяСтрока.ПериодСравнения, НоваяСтрока.Период));
				КонецЕсли; 
				НоваяСтрока.ПредставленияСерий = Новый ФиксированныйМассив(МассивПредставлений);
			Иначе
				НоваяСтрока.ПредставленияСерий = СтрокаНастройки.Серии[Стр.Серия].Представления;
			КонецЕсли; 
			НоваяСтрока.ПредставленияТочек = СтрокаНастройки.Точки[Стр.Точка].Представления;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказателиПоУмолчанию()
	
	Если ПолучитьФункциональнуюОпцию("УчетРозничныхПродаж") И ЕстьРозничныеПродажиЗаПоследнююНеделю() Тогда
		
		Период = Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня);
		ПериодСравнения = Новый СтандартныйПериод(ВариантСтандартногоПериода.Вчера);
		ДатаСравнения = Неопределено;
		ОбновитьПредставленияПериодов(ЭтаФорма);
		
		ДобавленныеПоказатели.Очистить();
		ОтобразитьПоказатель("Деньги", "СуммаОстаток",, "Цвет5");
		ОтобразитьПоказатель("Розница", "СуммаОстаток", НСтр("ru = 'В кассах ККМ'"));
		ОтобразитьПоказатель("Долги", "ДолгиНам",, "Цвет2");
		ОтобразитьПоказатель("Долги", "ДолгиНаши",, "Цвет6");
		ОтобразитьПоказатель("Розница", "РозничныеПродажи");
		ОтобразитьПоказатель("Розница", "КоличествоЧеков"); 
		ОтобразитьПоказатель("Розница", "СреднийЧек"); 
		ОтобразитьПоказатель("Розница", "ПолученоНаличными"); 
		ОтобразитьПоказатель("Розница", "ПолученоКартами"); 
		ОтобразитьПоказатель("Деньги", "Платежи", НСтр("ru = 'Потрачено денег'")); 
		
	Иначе
		
		Период = Новый СтандартныйПериод(ВариантСтандартногоПериода.СНачалаЭтогоГода);
		ПериодСравнения = Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлыйГодДоТакойЖеДаты);
		ДатаСравнения = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтойНедели);
		ОбновитьПредставленияПериодов(ЭтаФорма);
		
		ДобавленныеПоказатели.Очистить();
		ОтобразитьПоказатель("Деньги", "СуммаОстаток",, "Цвет5");
		ОтобразитьПоказатель("Товары", "СуммаОстаток", НСтр("ru = 'Товары'"));
		ОтобразитьПоказатель("Долги", "ДолгиНам",, "Цвет2");
		ОтобразитьПоказатель("Долги", "ДолгиНаши",, "Цвет6");
		ОтобразитьПоказатель("ФинАнализ", "ЧистыеАктивы", НСтр("ru = 'Чистые активы'"));
		ОтобразитьПоказатель("Продажи", "Выручка", НСтр("ru = 'Продажи'"));
		ОтобразитьПоказатель("Деньги", "Поступления", НСтр("ru = 'Поступления'"));
		ОтобразитьПоказатель("Деньги", "Платежи", НСтр("ru = 'Платежи'"));
		
	КонецЕсли; 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтчетность") Тогда
		ОтобразитьПоказатель("Налоги", "ТекущиеПлатежи",, "Цвет3"); 
		ОтобразитьПоказатель("Налоги", "КоличествоТекущихПлатежей",, "Цвет3"); 
		ОтобразитьПоказатель("Налоги", "КоличествоТекущихДокументов",, "Цвет3"); 
	КонецЕсли;
	
	СохранитьНастройки("Показатели");
	СохранитьНастройкиПериоды("ДатаСравнения,Период,ПериодСравнения");
	
КонецПроцедуры

&НаСервере
Процедура ДиаграммыПоУмолчанию()
	
	Если ПолучитьФункциональнуюОпцию("УчетРозничныхПродаж") И ЕстьРозничныеПродажиЗаПоследнююНеделю() Тогда
		
		ПериодДиаграмм = Новый Структура;
		ПериодДиаграмм.Вставить("Вариант", "Последние7ДнейНеСчитаяТекущего");
		
		Структура = СтруктураФильтра("РозничныеПродажи",, ИСТИНА);
		МассивФильтров = Новый Массив;
		МассивФильтров.Добавить(Структура);
		ОтобразитьДиаграмму(
		"ДинамикаПродаж", 
		"ПрибыльИСебестоимость", 
		"День", 
		ПериодДиаграмм,, 
		НСтр("ru = 'Динамика продаж'"),
		МассивФильтров);
		
		Структура = СтруктураФильтра("ХозяйственнаяОперация",, Справочники.ХозяйственныеОперации.НаРасходы);
		МассивФильтров = Новый Массив;
		МассивФильтров.Добавить(Структура);
		ОтобразитьДиаграмму(
		"СтруктураДенег", 
		"Аналитика", 
		"СуммаРасход", 
		ПериодДиаграмм,, 
		НСтр("ru = 'Структура списания денег'"), 
		МассивФильтров);
		
		ОтобразитьДиаграмму(
		"СтруктураРозничныхПродаж", 
		"КатегорияНоменклатуры", 
		"Сумма", 
		ПериодДиаграмм,, 
		НСтр("ru = 'Продажи по категориям'"));
		
		ОтобразитьДиаграмму(
		"СтруктураРозничныхПродаж", 
		"Склад", 
		"Сумма", 
		ПериодДиаграмм,, 
		НСтр("ru = 'Продажи по точкам'"));
		
		ОтобразитьДиаграмму(
		"СтруктураРозничныхПродаж", 
		"Склад", 
		"СреднийЧек", 
		ПериодДиаграмм,, 
		НСтр("ru = 'Средний чек по точкам'"));
		
	Иначе
		
		ПериодДиаграмм = Новый СтандартныйПериод(ВариантСтандартногоПериода.СНачалаЭтогоГода);
		
		ОтобразитьДиаграмму(
		"ДинамикаПродаж", 
		"ПрибыльИСебестоимость", 
		"Месяц", 
		ПериодДиаграмм,, 
		НСтр("ru = 'Динамика продаж'"));
		
		Структура = СтруктураФильтра("ХозяйственнаяОперация",, Справочники.ХозяйственныеОперации.НаРасходы);
		МассивФильтров = Новый Массив;
		МассивФильтров.Добавить(Структура);
		ОтобразитьДиаграмму(
		"СтруктураДенег", 
		"Аналитика", 
		"СуммаРасход", 
		ПериодДиаграмм,, 
		НСтр("ru = 'Структура списания денег'"), 
		МассивФильтров);
		
	КонецЕсли; 
	
	СохранитьНастройки("Диаграммы");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьРозничныеПродажиЗаПоследнююНеделю()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаПроверки", НачалоДня(ТекущаяДата())-7*24*3600);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Продажи.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	(Продажи.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|			ИЛИ Продажи.Регистратор ССЫЛКА Документ.ЧекККМ
	|			ИЛИ Продажи.Регистратор ССЫЛКА Документ.ЧекККМВозврат)
	|	И Продажи.Период >= &ДатаПроверки";
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

#Область ОбщиеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьИконкуПоказателя(Показатель, Цвет)
	
	ИмяИконки = "ПульсБизнеса%1%2";
	Если ЗначениеЗаполнено(Цвет) Тогда
		ЦветИконки = Цвет;
	Иначе
		ЦветИконки = "Цвет1" // Не локализуется
	КонецЕсли;
	
	ИмяИконки = СтрШаблон(ИмяИконки, Показатель, ЦветИконки);
	Возврат БиблиотекаКартинок[ИмяИконки];
	
КонецФункции

&НаСервереБезКонтекста
Функция СтруктураФильтра(Поле, ВидСравнения = Неопределено, Значение = Неопределено)
	
	СтруктураФильтра = Новый Структура;
	СтруктураФильтра.Вставить("Поле", Поле);
	СтруктураФильтра.Вставить("ВидСравнения", ?(ВидСравнения=Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения));
	СтруктураФильтра.Вставить("Значение", Значение);
	Возврат СтруктураФильтра;
	
КонецФункции 

&НаСервере
Функция ДобавитьКоманду(ИмяГруппы, Суффикс, Элемент, Действие, Заголовок, Картинка)
	
	ИмяКоманды = ИмяГруппы+Суффикс;
	Команда = Команды.Найти(ИмяКоманды);
	Если Команда=Неопределено Тогда
		Команда = Команды.Добавить(ИмяКоманды);
		Команда.Действие = Действие;
		Команда.Картинка = Картинка;
		Команда.Заголовок = Заголовок;
	КонецЕсли; 
	Кнопка = Элементы.Добавить(Команда.Имя+СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", ""), Тип("КнопкаФормы"), Элементы[Элемент.Имя+"КонтекстноеМеню"]);
	Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	Кнопка.ИмяКоманды = Команда.Имя;
	Кнопка.Картинка = Картинка;
	Кнопка.Заголовок = Заголовок;
	Возврат Кнопка;
	
КонецФункции

&НаСервере
Функция ОтформатироватьЗначение(Значение, Стр)
	
	Если ТипЗнч(Значение)=Тип("ФорматированнаяСтрока") Тогда
		Возврат Значение;
	КонецЕсли; 
	Если ТипЗнч(Значение)=Тип("Строка") Тогда
		Возврат ВФорматированнуюСтроку(Значение);
	КонецЕсли; 
	СтрНастроек = НастройкиПоказателей.НайтиПоИдентификатору(Стр.ИдентификаторСтрокиНастроек);
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Если ПустаяСтрока(СтрНастроек.Формат) Тогда
			Результат = Строка(Значение);
		Иначе
			Результат = Формат(Значение, СтрНастроек.Формат);
		КонецЕсли;
	Иначе
		Если ПустаяСтрока(СтрНастроек.Формат) Тогда
			Результат = ВФорматированнуюСтроку(Строка(Значение));
		Иначе
			Результат = ВФорматированнуюСтроку(Формат(Значение, СтрНастроек.Формат));
		КонецЕсли;
		Результат = Новый ФорматированнаяСтрока(
		Результат, 
		?(СтрНастроек.Валютный И ЗначениеЗаполнено(Значение), Новый ФорматированнаяСтрока(" "+СимволРеглВалюты, Новый Шрифт(Новый Шрифт,,8), ЦветаСтиля.ЦветТекстаФормы), ""));
	КонецЕсли; 
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВФорматированнуюСтроку(Строка, Ссылка = "")
	
	РазделительДробнойЧасти = Сред(Формат(0.1), 2,1);
	Если СтрЧислоВхождений(Строка, РазделительДробнойЧасти)>1 Тогда
		Возврат Новый ФорматированнаяСтрока(Строка,,,, Ссылка);
	КонецЕсли; 
	Позиция = Найти(Строка, РазделительДробнойЧасти);
	Если Позиция=0 Тогда
		Возврат Новый ФорматированнаяСтрока(Строка, Новый Шрифт(,,,,,Ложь), ЦветаСтиля.ЦветТекстаФормы,, Ссылка);
	Иначе
		ТекстДо = Лев(Строка, Позиция-1);
		ТекстПосле = Сред(Строка, Позиция);
		Возврат Новый ФорматированнаяСтрока(
		Новый ФорматированнаяСтрока(ТекстДо, Новый Шрифт(,,,,,Ложь), ЦветаСтиля.ЦветТекстаФормы,, Ссылка),
		Новый ФорматированнаяСтрока(ТекстПосле, Новый Шрифт(,,,,,Ложь), ЦветаСтиля.ЦветТекстаФормы,, Ссылка));
	КонецЕсли; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ХозоперацииДС()
	
	МассивХозОпераций = Новый Массив;
	МассивХозОпераций.Добавить(Справочники.ХозяйственныеОперации.Аванс);
	МассивХозОпераций.Добавить(Справочники.ХозяйственныеОперации.ВозвратЗаймаСотрудником);
	МассивХозОпераций.Добавить(Справочники.ХозяйственныеОперации.ВозвратОплатыНаПлатежныеКарты);
	МассивХозОпераций.Добавить(Справочники.ХозяйственныеОперации.ВозвратОплатыПокупателю);
	МассивХозОпераций.Добавить(Справочники.ХозяйственныеОперации.ВыдачаЗаймаСотруднику);
	МассивХозОпераций.Добавить(Справочники.ХозяйственныеОперации.Зарплата);
	МассивХозОпераций.Добавить(Справочники.ХозяйственныеОперации.КредитПолученный);
	МассивХозОпераций.Добавить(Справочники.ХозяйственныеОперации.НаРасходы);
	МассивХозОпераций.Добавить(Справочники.ХозяйственныеОперации.Оплата);
	МассивХозОпераций.Добавить(Справочники.ХозяйственныеОперации.ПеремещениеВКассуККМ);
	МассивХозОпераций.Добавить(Справочники.ХозяйственныеОперации.ПеремещениеДС);
	МассивХозОпераций.Добавить(Справочники.ХозяйственныеОперации.ПеречислениеНалога);
	МассивХозОпераций.Добавить(Справочники.ХозяйственныеОперации.Подотчетнику);
	МассивХозОпераций.Добавить(Справочники.ХозяйственныеОперации.Покупателю);
	МассивХозОпераций.Добавить(Справочники.ХозяйственныеОперации.ПокупкаВалюты);
	МассивХозОпераций.Добавить(Справочники.ХозяйственныеОперации.Поставщику);
	МассивХозОпераций.Добавить(Справочники.ХозяйственныеОперации.ПоступлениеОплатыОтПокупателя);
	МассивХозОпераций.Добавить(Справочники.ХозяйственныеОперации.ПоступлениеОплатыПоКартам);
	МассивХозОпераций.Добавить(Справочники.ХозяйственныеОперации.СписаниеНаРасходы);
	Возврат МассивХозОпераций;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредыдущийЭлемент(Элемент)
	
	Результат = Неопределено;
	Для каждого ТекЭлемент Из Элемент.Родитель.ПодчиненныеЭлементы Цикл
		Если Элемент=ТекЭлемент Тогда
			Прервать;
		КонецЕсли; 
		Результат = ТекЭлемент;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция СледующийЭлемент(Элемент)
	
	Результат = Неопределено;
	НайденТекущий = Ложь;
	НайденСледующий = Ложь;
	Для каждого ТекЭлемент Из Элемент.Родитель.ПодчиненныеЭлементы Цикл
		Если НайденСледующий Тогда
			Результат = ТекЭлемент;
			Прервать;
		КонецЕсли; 
		Если НайденТекущий И НЕ НайденСледующий Тогда
			НайденСледующий = Истина;
		КонецЕсли; 
		Если Элемент=ТекЭлемент Тогда
			НайденТекущий = Истина;
		КонецЕсли; 
	КонецЦикла;
	Возврат Результат;
	
КонецФункции 

&НаСервере
Функция НаборыРеквизитов(Группа, ИспользуютсяОбщиеДопРеквизиты)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Группа", Группа);
	Запрос.УстановитьПараметр("ИспользуютсяОбщиеДопРеквизиты", ИспользуютсяОбщиеДопРеквизиты);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведений.Ссылка
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведений.Ссылка В ИЕРАРХИИ(&Группа)
	|	И НЕ НаборыДополнительныхРеквизитовИСведений.ЭтоГруппа
	|	И (НаборыДополнительныхРеквизитовИСведений.Ссылка <> ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие)
	|			ИЛИ &ИспользуютсяОбщиеДопРеквизиты)";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Процедура УдалитьЭлементыРекурсивно(Группа)
	
	Пока Группа.ПодчиненныеЭлементы.Количество()>0 Цикл
		Элемент = Группа.ПодчиненныеЭлементы[0];
		Если ТипЗнч(Элемент)=Тип("КнопкаФормы") Тогда
			УдаляемаяКоманда = Команды.Найти(Элемент.ИмяКоманды);
			Если УдаляемаяКоманда <> Неопределено Тогда
				Команды.Удалить(УдаляемаяКоманда);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Элемент)=Тип("ГруппаФормы") Тогда
			УдалитьЭлементыРекурсивно(Элемент);
		КонецЕсли; 
		Элементы.Удалить(Элемент);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовДляМобильногоКлиента()
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент()
		И НЕ МобильныйКлиентУНФКлиентСервер.ЭтоБольшойЭкранИЛИПланшет() Тогда
		Элементы.ГруппаОбщиеКнопки.Видимость = Ложь;
		Элементы.ГруппаОбщиеКнопкиМобильное.Видимость = Истина;
		Элементы.ДекорацияРазделительПоказатели.Видимость = Ложь;
	ИначеЕсли ОбщегоНазначения.ЭтоМобильныйКлиент()
		И МобильныйКлиентУНФКлиентСервер.ЭтоБольшойЭкранИЛИПланшет() Тогда
		Элементы.ГруппаОбщиеКнопки.Видимость = Ложь;
		Элементы.ГруппаОбщиеКнопкиМобильное.Видимость = Истина;
		Элементы.ДекорацияРазделительПоказатели.Видимость = Ложь;
	Иначе
		Элементы.ГруппаОбщиеКнопки.Видимость = Истина;
		Элементы.ГруппаОбщиеКнопкиМобильное.Видимость = Ложь;
		Элементы.ДекорацияРазделительПоказатели.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	
	УстановитьВидимостьЭлементовДляМобильногоКлиента();
	
КонецПроцедуры

#КонецОбласти 

#Область ФиксированныеСтроки

&НаКлиентеНаСервереБезКонтекста
Функция ИмяСекцииОстатки()

	Возврат "Остатки";
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяСекцииОбороты()

	Возврат "Оборот";
	
КонецФункции 

#КонецОбласти 

#КонецОбласти
 
