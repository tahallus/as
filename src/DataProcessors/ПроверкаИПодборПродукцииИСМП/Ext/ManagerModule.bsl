#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает текст запроса для расчета статусов указания серий
// Параметры:
//	ПараметрыУказанияСерий - Структура - состав полей задается в функции ПроверкаИПодборПродукцииИСМП.ПараметрыУказанияСерий
// Возвращаемое значение:
//	Строка - текст запроса расчета статуса указания серий.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(
		Метаданные.Обработки.ПроверкаИПодборПродукцииИСМП, ПараметрыУказанияСерий);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Вызывается из длительной операции по подготовке данных для формы проверки и подбора маркируемой продукции.
// 
// Параметры:
//	Параметры - Структура - содержит следующие значения:
// 	* ПроверкаНеПоДокументу            - Булево - признак получения данных не по ссылке на документ
// 	* ПроверяемыйДокумент              - ДокументСсылка - ссылка на документ, из формы которого открыта форма проверки и подбора
// 	* НачальныйСтатусПроверки          - ПеречислениеСсылка.СтатусыПроверкиНаличияПродукцииИС - статус наличия продукции, используемый при подготовке данных
// 	* ДетализацияСтруктурыХранения     - ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС - значение детализации из формы проверки
// 	* РедактированиеФормыНедоступно    - Булево - признак запрета редактирования формы подбора
// 	* РежимПодбораСуществующихУпаковок - Булево - признак работы со штрихкодами упаковок, имеющимися в информационной базе
// 	* ПараметрыСканирования            - Структура - параметры обработки кодов маркировки, сформированные в форме проверки и подбора
// 	* ПараметрыПроверкиКодовМаркировки - Структура - параметры проверки кодов маркировки по статусу и владельцу, сформированные в форме проверки и подбора
// 	* КонтролироватьСканируемуюПродукциюПоДокументуОснованию - Булево - признак необходимости контроля наличия маркируемой продукции по основанию проверяемого документа
//	АдресРезультата - Строка - адрес временного хранилища, в которое будут помещены результаты выполнения
Процедура ЗагрузитьДанныеДокументаДлительнаяОперация(Параметры, АдресРезультата) Экспорт
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Обработка.ПроверкаИПодборПродукцииИСМП.МодульМенеджера.ЗагрузитьДанныеДокументаДлительнаяОперация");
	
	ДанныеДокумента = Новый Структура();
	ДанныеДокумента.Вставить("ДеревоМаркированнойПродукции",          ДеревоМаркированнойПродукции());
	ДанныеДокумента.Вставить("ПодобраннаяМаркируемаяПродукция",       ПодобраннаяМаркируемаяПродукция());
	ДанныеДокумента.Вставить("ДоступныеДляПроверкиУпаковки",          Новый СписокЗначений());
	ДанныеДокумента.Вставить("УпаковкиДокумента",                     Новый СписокЗначений());
	ДанныеДокумента.Вставить("НачальныйСтатусПроверки",               Параметры.НачальныйСтатусПроверки);
	ДанныеДокумента.Вставить("ДетализацияСтруктурыХранения",          Параметры.ДетализацияСтруктурыХранения);
	ДанныеДокумента.Вставить("РежимПодбораСуществующихУпаковок",      Параметры.РежимПодбораСуществующихУпаковок);
	ДанныеДокумента.Вставить("ПроверкаЭлектронногоДокумента",         Параметры.ПроверкаЭлектронногоДокумента);
	ДанныеДокумента.Вставить("ПараметрыПроверкиКодовМаркировки",      Параметры.ПараметрыПроверкиКодовМаркировки);
	ДанныеДокумента.Вставить("КоличествоНедопустимыхКодовМаркировки", 0);
	ДанныеДокумента.Вставить("КонтролироватьСканируемуюПродукциюПоДокументуОснованию", Параметры.КонтролироватьСканируемуюПродукциюПоДокументуОснованию);
	
	СохраненнаяДетализацияСтруктурыХранения = СохраненнаяДетализацияСтруктурыХранения(Параметры.РежимПодбораСуществующихУпаковок);
	
	ДанныеДокумента.Вставить("СохраненнаяДетализацияСтруктурыХранения", СохраненнаяДетализацияСтруктурыХранения);
	ДанныеДокумента.Вставить("СодержимоеУпаковокНедоступно", Ложь);
	ДанныеДокумента.Вставить("СтрокаПродукцияБезУпаковки",   Неопределено);
	ДанныеДокумента.Вставить("Организация",                  Параметры.ПараметрыСканирования.Организация);
	ДанныеДокумента.Вставить("ПроверяемыйДокумент",          Параметры.ПроверяемыйДокумент);
	ДанныеДокумента.Вставить("ВидМаркируемойПродукции",      Параметры.ВидМаркируемойПродукции);
	ДанныеДокумента.Вставить(
		"ОшибкиПроверкиСредствамиККТ",
		РегистрыСведений.РезультатыПроверкиСредствамиККТИСМП.ДанныеРезультатовПроверкиДляПроверкиИПодбора(
			Параметры.ПроверяемыйДокумент,
			Параметры.ВидМаркируемойПродукции));
			
	Если Параметры.ПроверкаНеПоДокументу Тогда
		
		ПроверяемыеДанные = Параметры.ПроверяемыеДанные;
		ЗаполнитьТаблицуПодобраннойМаркируемойПродукции(ПроверяемыеДанные.ТаблицаМаркируемойПродукции, ДанныеДокумента);
		ДополнитьТаблицуПодобраннойМаркируемойПродукции(
			ПроверяемыеДанные.МаркированныеТовары, ДанныеДокумента, Параметры.ВидМаркируемойПродукции, Параметры.ПараметрыСканирования);
		
		ЗаполнитьДеревоМаркированнойПродукции(
			ПроверяемыеДанные.ДеревоУпаковок, ДанныеДокумента);
		
	Иначе
		
		ТаблицаМаркируемойПродукции = ПроверкаИПодборПродукцииИСМП.ТаблицаМаркируемойПродукцииДокумента(
			Параметры.ПроверяемыйДокумент, Параметры.ВидМаркируемойПродукции);
		
		ЗаполнитьТаблицуПодобраннойМаркируемойПродукции(ТаблицаМаркируемойПродукции, ДанныеДокумента);
		
		Если Параметры.Свойство("ДанныеКлючаСессииИСМП") Тогда
			ПараметрыСеанса.ДанныеКлючаСессииИСМП = Параметры.ДанныеКлючаСессииИСМП;
		КонецЕсли;
		
		Если Параметры.Свойство("ПараметрыЛогированияЗапросовИСМП") Тогда
			ЛогированиеЗапросовИСМП.УстановитьПараметрыЛогированияЗапросов(Параметры.ПараметрыЛогированияЗапросовИСМП);
			ЛогированиеЗапросовИСМП.НастроитьПараметрыЛогированияВФоновомЗадании();
		КонецЕсли;
		
		ПараметрыСканирования = Параметры.ПараметрыСканирования;
		ПараметрыСканирования.СсылкаНаОбъект = Параметры.ПроверяемыйДокумент;
		Если Параметры.РежимПодбораСуществующихУпаковок Тогда
			
			ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева = Ложь;  // Для нормализации вложенных штрихкодов
			РезультатПолученияДанных = ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкодыУпаковокПоДокументу(
				Параметры.ПроверяемыйДокумент,
				ПараметрыСканирования.ДетализацияСтруктурыХранения,
				ПараметрыСканирования);
			
		Иначе
			
			ПараметрыСканирования.ДетализацияСтруктурыХранения = СохраненнаяДетализацияСтруктурыХранения;
			ДанныеДокумента.ДетализацияСтруктурыХранения       = СохраненнаяДетализацияСтруктурыХранения;
			ПараметрыСканирования.СопоставлятьНоменклатуру     = Ложь;
			
			ДанныеШтрихкодовСписок = Новый Массив;
			Если Параметры.ПроверкаЭлектронногоДокумента Тогда
				
				ДанныеНоменклатурыПоДаннымУПД = ПроверкаИПодборПродукцииИСМП.ДанныеНоменклатурыПоДаннымУПД(
					ДанныеДокумента.ПроверяемыйДокумент, ДанныеДокумента.ВидМаркируемойПродукции);
				
				Для Каждого Строка Из ДанныеНоменклатурыПоДаннымУПД.СтрокиТекущейТоварнойГруппы Цикл
					ДанныеШтрихкодовСписок.Добавить(
						Новый Структура("Штрихкод, Количество", Строка.Штрихкод, 1));
				КонецЦикла;
				
				ПроверкаИПодборПродукцииИСМП.ПроверитьДанныеУПДНаНаличиеОшибок(ДанныеДокумента, ДанныеНоменклатурыПоДаннымУПД);
				
				ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева = Ложь; // Для вызова ШтрихкодированиеИС.ДобавитьВДанныеШтрихкодовВложенныеШтрихкоды
				
				РезультатПолученияДанных = ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкодыПоДаннымИСМП(
					ДанныеШтрихкодовСписок, ПараметрыСканирования);
				
			Иначе
				
				ПараметрыСканирования.ОпределениеВидаПродукцииИСМП                  = Истина;
				ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева = Ложь; // Для нормализации вложенных штрихкодов
				РезультатПолученияДанных = ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкодыУпаковокПоДокументу(
					Параметры.ПроверяемыйДокумент,
					ПараметрыСканирования.ДетализацияСтруктурыХранения,
					ПараметрыСканирования);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если РезультатПолученияДанных.ЕстьОшибки Тогда
			ВызватьИсключение РезультатПолученияДанных.ТекстОшибки;
		КонецЕсли;
		
		ЗаполнитьТаблицуПродукцияПоДокументу(ДанныеДокумента, Параметры.ВидМаркируемойПродукции);
		
		ДанныеПроверяемогоДокумента = РезультатПолученияДанных.ВложенныеШтрихкоды;
		
		ЗаполнитьТаблицуКоличествоПоДокументуСУчетомВидаПродукции(ДанныеДокумента, Параметры.ВидМаркируемойПродукции);
		
		ДополнитьТаблицуПодобраннойМаркируемойПродукции(
			ДанныеПроверяемогоДокумента.МаркированныеТовары, ДанныеДокумента, Параметры.ВидМаркируемойПродукции, Параметры.ПараметрыСканирования);
		
		ЗаполнитьДеревоМаркированнойПродукции(ДанныеПроверяемогоДокумента.ДеревоУпаковок, ДанныеДокумента);
		
	КонецЕсли;
	
	КоличествоДанных = ИнтеграцияИС.КоличествоСтрокДереваЗначений(ДанныеДокумента.ДеревоМаркированнойПродукции)
		+ ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.Количество();
	
	ЛогированиеЗапросовИСМП.ЗаполнитьВозвращаемыеДанныеФоновогоЗадания(ДанныеДокумента);
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
	
	ПоместитьВоВременноеХранилище(ДанныеДокумента, АдресРезультата);
	
КонецПроцедуры

// Фоновая операция по фиксации результатов проверки и подбора в документе, 
// 
// Параметры:
// 	Параметры - Структура - содержит следующие значения:
// 	   * СоздаватьАктОРасхождениях    - Булево - признак необходимости создания акта о расхождениях.
// 	   * ПроверяемыйДокумент          - ДокументСсылка - документ, для которого выполнялась проверка и подбор.
// 	   * ДеревоМаркированнойПродукции - ДеревоЗначений - содержит результаты проверки и подбора с иерархией упаковок.
// 	   * ДанныеПроверкиИПодбора       - ХранилищеЗначения      - содержит слепок состояния проверки и подбора, если предусмотрено его хранение по окончании результатов проверки.
// 	   * ПроверкаНеПоДокументу        - Булево - признак того, что проверка и подбор была вызвана из произвольной формы.
// 	   * ПодобраннаяМаркируемаяПродукция - ТаблицаЗначений - содержит информацию о подобранной продукции сгруппированную до 
// 	       номенклатуры, характеристики, серии.
// 	АдресРезультата - Строка - адрес временного хранилища, в которое будут помещены результаты выполнения
Процедура ЗафиксироватьРезультатПроверкиИПодбора(Параметры, АдресРезультата) Экспорт
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Обработка.ПроверкаИПодборПродукцииИСМП.МодульМенеджера.ЗафиксироватьРезультатПроверкиИПодбора");
	
	ЗаполнитьСпецификуМолочнойПродукции = ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(Параметры.ВидМаркируемойПродукции)
		И ТипЗнч(Параметры.ПроверяемыйДокумент) = Тип("ДокументСсылка.МаркировкаТоваровИСМП");
	Если ЗаполнитьСпецификуМолочнойПродукции Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.ПроверяемыйДокумент, "Операция, ОперацияНанесения");
		ОперацииМаркировки = ИнтеграцияИСМПСлужебныйКлиентСервер.ОперацииМаркировки(Реквизиты.Операция);
		ЗаполнитьСпецификуМолочнойПродукции =
			ОперацииМаркировки.ЭтоОперацияНанесения
			Или ЗначениеЗаполнено(Реквизиты.ОперацияНанесения)
			Или ОперацииМаркировки.ТребуетсяЗаполнениеИдентификаторовПримененияВЕТИС;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		ПараметрыОкончанияПроверки = ПроверкаИПодборПродукцииИСМП.ПараметрыОкончанияПроверки();
		ПараметрыОкончанияПроверки.ВидПродукцииИС            = Параметры.ВидМаркируемойПродукции;
		ПараметрыОкончанияПроверки.СоздаватьАктОРасхождениях = Параметры.СоздаватьАктОРасхождениях;
		ПараметрыОкончанияПроверки.ПроверяемыйДокумент       = Параметры.ПроверяемыйДокумент;
		
		ДеревоМаркированнойПродукции = Параметры.ДеревоМаркированнойПродукции;
		ДеревоМаркированнойПродукции.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
		ПроверкаИПодборПродукцииИСМП.УдалитьПустыеУпаковкиДерева(ДеревоМаркированнойПродукции);
		
		ТаблицаШтрихкодовВерхнегоУровня        = ПроверкаИПодборПродукцииИСМП.ПустаяТаблицаШтрихкодовВерхнегоУровня();
		ТаблицаШтрихкодовОбщая                 = ПроверкаИПодборПродукцииИСМП.ПустаяТаблицаШтрихкодовВерхнегоУровня();
		ТаблицаПодобраннойПровереннойПродукции = ПроверкаИПодборПродукцииИСМП.ПустаяТаблицаПодобраннойПровереннойПродукции();
		
		Если ЗаполнитьСпецификуМолочнойПродукции Тогда
			ДополнитьКолонкамиМолочнойПродукции(ТаблицаШтрихкодовВерхнегоУровня);
			ДополнитьКолонкамиМолочнойПродукции(ТаблицаШтрихкодовОбщая);
			ДополнитьКолонкамиМолочнойПродукции(ТаблицаПодобраннойПровереннойПродукции);
		КонецЕсли;
		
		Справочники.ШтрихкодыУпаковокТоваров.РезультатСозданияШтрихкодовУпаковокПоДеревуМаркируемойПродукции(
			ДеревоМаркированнойПродукции, ТаблицаШтрихкодовВерхнегоУровня,
			Неопределено, Неопределено,
			Параметры.ВидМаркируемойПродукции);
		
		Если ЗаполнитьСпецификуМолочнойПродукции Тогда
			ТаблицаШтрихкодовВерхнегоУровня.Очистить();
			ЗаполнитьШтрихкодыВерхнегоУровняМолочнойПродукции(ДеревоМаркированнойПродукции.Строки, ТаблицаШтрихкодовВерхнегоУровня);
		КонецЕсли;
		
		ТаблицаШтрихкодовОбщаяПоДаннымДерева(ДеревоМаркированнойПродукции, ТаблицаШтрихкодовОбщая, ЗаполнитьСпецификуМолочнойПродукции);
		
		ОтразитьАгрегациюКодовМаркировкиВПуле(ДеревоМаркированнойПродукции);
		
		ПараметрыОкончанияПроверки.ТаблицаШтрихкодовВерхнегоУровня = ТаблицаШтрихкодовВерхнегоУровня;
		ПараметрыОкончанияПроверки.ТаблицаШтрихкодовОбщая          = ТаблицаШтрихкодовОбщая;
		
		ЕстьРасхождения = Ложь;
		
		Для Каждого СтрокаДерева Из Параметры.ПодобраннаяМаркируемаяПродукция Цикл
			
			НоваяСтрока = ТаблицаПодобраннойПровереннойПродукции.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			
			Если ЗаполнитьСпецификуМолочнойПродукции Тогда
				НоваяСтрока.СрокГодности = СтрокаДерева.ГоденДо;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.Характеристика) Тогда
				НоваяСтрока.Характеристика = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"); 
			КонецЕсли;
				
			Если Не ЗначениеЗаполнено(НоваяСтрока.Серия) Тогда
				НоваяСтрока.Серия = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"); 
			КонецЕсли;
			
			Если НоваяСтрока.Количество <> НоваяСтрока.КоличествоПодобрано Тогда
				ЕстьРасхождения = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыОкончанияПроверки.ТаблицаПодобраннойПровереннойПродукции = ТаблицаПодобраннойПровереннойПродукции;
		
		Если Не Параметры.ПроверкаНеПоДокументу Тогда
			
			Если Параметры.СоздаватьАктОРасхождениях Тогда
				
				ПараметрыОкончанияПроверки.ТаблицаРасхожденийШтриховыхКодов = ТаблицаРасхожденийУпаковокПоРезультатамПроверкиИПодбора(Параметры);
				
				Если Параметры.Свойство("ДанныеКлючаСессииИСМП") Тогда
					ПараметрыСеанса.ДанныеКлючаСессииИСМП = Параметры.ДанныеКлючаСессииИСМП;
				КонецЕсли;
				
				ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(Параметры.ПроверяемыйДокумент, Неопределено, Параметры.ВидМаркируемойПродукции);
				ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП = Ложь;
				ПараметрыСканирования.СопоставлятьНоменклатуру     = Ложь;
				ПараметрыСканирования.СсылкаНаОбъект               = Параметры.ПроверяемыйДокумент;
				
				РезультатПоискаПоДаннымДокумента = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
					ТаблицаШтрихкодовВерхнегоУровня.ВыгрузитьКолонку("ШтрихкодУпаковки"),
					ПараметрыСканирования);
				ДеревоУпаковокПоДаннымДокумента = РезультатПоискаПоДаннымДокумента.ДеревоУпаковок;
				
				// Заполнение по данным ИСМП
				ДанныеШтрихкодовСписок = Новый Массив;
				ДанныеНоменклатурыПоДаннымУПД = ШтрихкодированиеИСМПСлужебный.ДанныеМаркируемойНоменклатурыПоДаннымУПД(Параметры.ПроверяемыйДокумент);
				Для Каждого КлючИЗначение Из ДанныеНоменклатурыПоДаннымУПД Цикл
					Штрихкод = КлючИЗначение.Ключ;
					Если ЗначениеЗаполнено(Штрихкод) Тогда
						ДанныеШтрихкодовСписок.Добавить(Новый Структура("Штрихкод, Количество", Штрихкод, 1));
					КонецЕсли;
				КонецЦикла;
				
				ПараметрыСканирования.ДопустимыеВидыПродукции = ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
				РезультатПолученияДереваИСМП = ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкодыПоДаннымИСМП(
					ДанныеШтрихкодовСписок, ПараметрыСканирования, Истина);
				Если РезультатПолученияДереваИСМП.ЕстьОшибки Тогда
					ВызватьИсключение РезультатПолученияДереваИСМП.ТекстОшибки;
				КонецЕсли;
				ДеревоУпаковокПоДаннымИСМП = РезультатПолученияДереваИСМП.ВложенныеШтрихкоды.ДеревоУпаковок;
				
				ШтрихкодыБрак = ШтрихкодированиеИС.ЗначенияНедопустимыхШтрихкодовИзДереваМаркируемойПродукции(
					ДеревоМаркированнойПродукции);
				
				ПараметрыСверки = СверкаКодовМаркировкиИСМП.ИнициализироватьПараметрыСверки();
				
				ТаблицыТОРГ2 = СверкаКодовМаркировкиИСМП.ТаблицыРасхожденийПоДаннымЭДО(
					ДеревоУпаковокПоДаннымДокумента,
					ДеревоУпаковокПоДаннымИСМП,
					ШтрихкодыБрак,
					ПараметрыСверки);
				
				ДанныеПроверкиИПодбора = Параметры.ДанныеПроверкиИПодбора.Получить();
				ДанныеПроверкиИПодбора.Вставить("ТаблицыТОРГ2", ТаблицыТОРГ2);
				Параметры.ДанныеПроверкиИПодбора = Новый ХранилищеЗначения(ДанныеПроверкиИПодбора);
				
				ПараметрыОкончанияПроверки.ШтрихкодыУпаковокПланЭДО = ТаблицыТОРГ2.ШтрихкодыУпаковокПланЭДО;
				ПараметрыОкончанияПроверки.ШтрихкодыУпаковокФактЭДО = ТаблицыТОРГ2.ШтрихкодыУпаковокФактЭДО;
				
			КонецЕсли;
			
			ПараметрыОкончанияПроверки.ДеревоМаркированнойПродукции = ДеревоМаркированнойПродукции;
			ПроверкаИПодборПродукцииИСМП.ЗафиксироватьРезультатПроверкиИПодбора(ПараметрыОкончанияПроверки);
			
			Если Параметры.СоздаватьАктОРасхождениях
				И ЗначениеЗаполнено(ПараметрыОкончанияПроверки.СозданныйАктОРасхождениях) Тогда
				
				РегистрыСведений.СтатусыПроверкиИПодбораДокументовИСМП.ОтразитьЗавершениеПроверкиДокумента(
					ПараметрыОкончанияПроверки.СозданныйАктОРасхождениях,
					Параметры.ВидМаркируемойПродукции,
					Параметры.ДанныеПроверкиИПодбора);
				
				РегистрыСведений.СтатусыПроверкиИПодбораДокументовИСМП.ОтразитьЗавершениеПроверкиДокумента(
					Параметры.ПроверяемыйДокумент,
					Параметры.ВидМаркируемойПродукции,
					Неопределено,
					Перечисления.ТребуемоеДействиеДокументЭДО.Подтвердить);
				
			Иначе
				
				Если ЕстьРасхождения Тогда
					ТребуемоеДействие = Перечисления.ТребуемоеДействиеДокументЭДО.Отклонить;
				Иначе
					ТребуемоеДействие = Перечисления.ТребуемоеДействиеДокументЭДО.Подтвердить;
				КонецЕсли;
				
				РегистрыСведений.СтатусыПроверкиИПодбораДокументовИСМП.ОтразитьЗавершениеПроверкиДокумента(
					Параметры.ПроверяемыйДокумент,
					Параметры.ВидМаркируемойПродукции,
					Параметры.ДанныеПроверкиИПодбора,
					ТребуемоеДействие);
				
			КонецЕсли;
			
			Если ТипЗнч(Параметры.ПроверяемыйДокумент) = Тип("ДокументСсылка.ПриемкаТоваровИСМП") Тогда
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("Назначение",      Перечисления.НазначениеСообщенийИСМП.ИСМП);
				ДополнительныеПараметры.Вставить("СтатусОбработки", Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается);
				ДополнительныеПараметры.Вставить("ВидПродукции",    Параметры.ВидМаркируемойПродукции);
				ДополнительныеПараметры.Вставить("ОтражениеРезультатовПроверки", Истина);
				
				МетаданныеДокумента = Параметры.ПроверяемыйДокумент.Метаданные();
				
				МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеДокумента.ПолноеИмя());
				МенеджерДокумента.ОбновитьСтатусПослеПолученияДанных(
					Параметры.ПроверяемыйДокумент, Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента, ДополнительныеПараметры);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Информация = ИнформацияОбОшибке();
		
		ТекстСообщения = НСтр("ru = 'Произошла ошибка при сохранении результатов проверки.'");
		
		ИнтеграцияИСМПСлужебный.ЗаписатьОшибкуВЖурналРегистрации(
			ТекстСообщения + Символы.ПС + ПодробноеПредставлениеОшибки(Информация),
			Метаданные.Обработки.ПроверкаИПодборПродукцииИСМП);
			
		ТекстОшибки = ТекстСообщения + Символы.ПС
			+ КраткоеПредставлениеОшибки(Информация) + Символы.ПС
			+ НСтр("ru = 'Подробности см. в журнале регистрации.'");
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
	КоличествоДанных = ИнтеграцияИС.КоличествоСтрокДереваЗначений(ДеревоМаркированнойПродукции);
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
	
	РезультатПроверки = Новый Структура();
	
	Если Параметры.ПроверкаНеПоДокументу Тогда
		РезультатПроверки.Вставить("ТаблицаШтрихкодовВерхнегоУровня", ТаблицаШтрихкодовВерхнегоУровня);
		РезультатПроверки.Вставить("ТаблицаПодобраннойПровереннойПродукции", ТаблицаПодобраннойПровереннойПродукции);
	Иначе
		РезультатПроверки.Вставить("СозданныйАктОРасхождениях", ПараметрыОкончанияПроверки.СозданныйАктОРасхождениях);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатПроверки, АдресРезультата);
	
КонецПроцедуры

Процедура ЗаполнитьШтрихкодыВерхнегоУровняМолочнойПродукции(СтрокиДерева, ТаблицаШтрихкодов, ЭтоВерхнийУровень = Истина)
	
	Для Каждого Строка Из СтрокиДерева Цикл
		Если ТипЗнч(Строка.ТипУпаковки) = Тип("ПеречислениеСсылка.ПрочиеЗоныПересчетаПродукцииИСМП") Тогда
			ЗаполнитьШтрихкодыВерхнегоУровняМолочнойПродукции(Строка.Строки, ТаблицаШтрихкодов, Истина);
			Продолжить;
		КонецЕсли;
		Если ЭтоВерхнийУровень Или ЗначениеЗаполнено(Строка.ГоденДо) Или ЗначениеЗаполнено(Строка.ИдентификаторПроисхожденияВЕТИС) Тогда
			НоваяСтрокаШтрихкод = ТаблицаШтрихкодов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаШтрихкод, Строка);
			НоваяСтрокаШтрихкод.СрокГодности = Строка.ГоденДо;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Строка.ГоденДо)
			И Не ЗначениеЗаполнено(Строка.ИдентификаторПроисхожденияВЕТИС) Тогда
			ЗаполнитьШтрихкодыВерхнегоУровняМолочнойПродукции(Строка.Строки, ТаблицаШтрихкодов, Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает сохраненную в хранилище настроек данных форм детализацию отображения структуры упаковок в форме проверки и подбора табачной продукции.
// 
// Параметры:
//	РежимПодбораСуществующихУпаковок - Булево - признак работы со штрихкодами упаковок, имеющимися в информационной базе.
// Возвращаемое значение:
//	ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС - сохраненная детализация отображения структуры упаковок
//
Функция СохраненнаяДетализацияСтруктурыХранения(РежимПодбораСуществующихУпаковок) Экспорт
	
	СохраненнаяДетализация = Неопределено;
	СохраненныеНастройки   = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ПроверкаИПодбор", "");
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		Если РежимПодбораСуществующихУпаковок
			И СохраненныеНастройки.Свойство("ДетализацияСтруктурыХранения") Тогда
			СохраненнаяДетализация = СохраненныеНастройки.ДетализацияСтруктурыХранения;
		ИначеЕсли НЕ РежимПодбораСуществующихУпаковок
			И СохраненныеНастройки.Свойство("ДетализацияСтруктурыХраненияПриобретение") Тогда
			СохраненнаяДетализация = СохраненныеНастройки.ДетализацияСтруктурыХраненияПриобретение;
		ИначеЕсли СохраненныеНастройки.Свойство("ДетализацияСтруктурыХранения") Тогда
			СохраненнаяДетализация = СохраненныеНастройки.ДетализацияСтруктурыХранения;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДетализацияСтруктурыХраненияИС(СохраненнаяДетализация);
	
КонецФункции

// Выполняет конвертацию детализации структуры хранения
// 
// Параметры:
// 	ДетализацияСтруктурыХранения - ПеречислениеСсылка.ДетализацияСтруктурыХраненияПродукцииИСМП,
// 	                               ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС - Старая детализация
// Возвращаемое значение:
// 	ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС - Новая детализация
Функция ДетализацияСтруктурыХраненияИС(ДетализацияСтруктурыХранения) Экспорт
	
	Если ТипЗнч(ДетализацияСтруктурыХранения) = Тип("ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС") Тогда
		Возврат ДетализацияСтруктурыХранения;
	КонецЕсли;
	
	НоваяДетализация = Неопределено;
	
	Если ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.Полная Тогда
		НоваяДетализация = Перечисления.ДетализацияСтруктурыХраненияИС.Полная;
	ИначеЕсли ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.КоробаПотребительскиеУпаковки Тогда
		НоваяДетализация =  Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками;
	ИначеЕсли ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.ПотребительскиеУпаковки Тогда
		НоваяДетализация =  Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки;
	КонецЕсли;
	
	Возврат НоваяДетализация;
	
КонецФункции

// Возвращает детализацию переданной иерархической структуры упаковок маркируемой продукции.
// 
// Параметры:
//	ДеревоУпаковок - ДеревоЗначений, ДанныеФормыКоллекция - иерархическая структура упаковок маркируемой продукции.
// Возвращаемое значение:
//	ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС - расчитаная детализация структуры упаковок
//
Функция ДетализацияСтруктурыХраненияДерева(ДеревоУпаковок) Экспорт
	
	Если ТипЗнч(ДеревоУпаковок) = Тип("ДеревоЗначений") Тогда
		СтрокиДерева = ДеревоУпаковок.Строки;
	Иначе
		СтрокиДерева = Новый Массив;
		СтрокиДерева.Добавить(ДеревоУпаковок);
	КонецЕсли;
	
	ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
			
			ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками;
			
			Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
				Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
					ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияИС.Полная;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияИС.Полная Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДетализацияСтруктурыХраненияДерева;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТаблицаРасхожденийУпаковокПоРезультатамПроверкиИПодбора(Параметры)
	
	ТаблицаРасхождений = Новый ТаблицаЗначений;
	ТаблицаРасхождений.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаРасхождений.Колонки.Добавить("Штрихкод",         ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаРасхождений.Колонки.Добавить("Номенклатура",     Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаРасхождений.Колонки.Добавить("Характеристика",   Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаРасхождений.Колонки.Добавить("Серия",            Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаРасхождений.Колонки.Добавить("ЭтоИзлишек",       Новый ОписаниеТипов("Булево"));
	ТаблицаРасхождений.Колонки.Добавить("ЗначениеШтрихкода",ОбщегоНазначения.ОписаниеТипаСтрока(200));
	
	Для Каждого СтрокаДерева Из Параметры.ДеревоМаркированнойПродукции.Строки Цикл
		
		ЗаполнитьТаблицуРасхожденийПоСтрокеДерева(СтрокаДерева, ТаблицаРасхождений);
		
	КонецЦикла;
	
	Возврат ТаблицаРасхождений;
	
КонецФункции

Процедура ЗаполнитьТаблицуРасхожденийПоСтрокеДерева(СтрокаДерева, ТаблицаРасхождений)
	
	ЭтоИзлишек = (СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась
	             Или СтрокаДерева.СтатусПроверки = СтрокаДерева.НеСодержитсяВДанныхДокумента);
	
	ЭтоНедостача = СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует;
	
	ЭтоТипУпаковкиПоКоторомуФиксируютсяРасхождения = (СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка
	                                                  Или СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар);
	
	ВозможнаПроверкаПодчиненныхСтрок = (СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка
	                                   Или СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка
	                                   Или СтрокаДерева.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ПродукцияБезУпаковки); 
	
	Если ЭтоТипУпаковкиПоКоторомуФиксируютсяРасхождения
		И (ЭтоИзлишек Или ЭтоНедостача) Тогда
		
		НоваяСтрокаТаблицы = ТаблицаРасхождений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтрокаДерева); 	
		НоваяСтрокаТаблицы.ЭтоИзлишек        = ЭтоИзлишек;
		НоваяСтрокаТаблицы.ЗначениеШтрихкода = СтрокаДерева.Штрихкод;
		
		Возврат;
			
	КонецЕсли; 
	
	Если ВозможнаПроверкаПодчиненныхСтрок Тогда
		
		Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		
			ЗаполнитьТаблицуРасхожденийПоСтрокеДерева(ПодчиненнаяСтрока, ТаблицаРасхождений);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуПодобраннойМаркируемойПродукции(ТаблицаМаркируемойПродукции, ДанныеДокумента)
	
	Для Каждого СтрокаИсточника Из ТаблицаМаркируемойПродукции Цикл
		СтрокаПодобраннойПродукции = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПодобраннойПродукции, СтрокаИсточника);
		СтрокаПодобраннойПродукции.НоменклатураСопоставлена = ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Номенклатура);
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьТаблицуПодобраннойМаркируемойПродукции(ТаблицаМаркируемойПродукции, ДанныеДокумента, ВидПродукции, ПараметрыСканирования)
	
	ПроверкаИПодборПродукцииИСМП.ДополнитьТаблицуПодобраннойМаркируемойПродукцииИСМП(
		ТаблицаМаркируемойПродукции, ДанныеДокумента, ВидПродукции, ПараметрыСканирования);
	
КонецПроцедуры

Процедура ЗаполнитьДеревоМаркированнойПродукции(ДеревоУпаковокДокумента, ДанныеДокумента)
	
	ДетализацияСтруктурыХраненияДанныхДокумента = ДетализацияСтруктурыХраненияДерева(ДеревоУпаковокДокумента);
	
	Если ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения <> Неопределено Тогда
		Если ДеревоУпаковокДокумента.Строки.Количество() = 0 Тогда
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения;
		ИначеЕсли ДетализацияСтруктурыХраненияДанныхДокумента <> Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки Тогда
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДетализацияСтруктурыХраненияДанныхДокумента;
		Иначе
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения;
		КонецЕсли;
	Иначе
		ДанныеДокумента.ДетализацияСтруктурыХранения = ДетализацияСтруктурыХраненияДанныхДокумента;
	КонецЕсли;
	
	КоллекцияСтрокПриемника = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки;
	
	Для каждого СтрокаДереваУпаковок Из ДеревоУпаковокДокумента.Строки Цикл
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаДереваУпаковок, КоллекцияСтрокПриемника, ДанныеДокумента);
	КонецЦикла;
	
	Если ДанныеДокумента.СтрокаПродукцияБезУпаковки = Неопределено
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки Тогда
		ДобавленнаяСтрокаПродукцияБезУпаковки(ДанныеДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаИсточника, КоллекцияСтрокПриемника, ДанныеДокумента)
	
	Если СтрокаИсточника.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ПродукцияБезУпаковки Тогда
		
		Если ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки Тогда
			
			НоваяСтрока = ДанныеДокумента.СтрокаПродукцияБезУпаковки;
			
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ДобавленнаяСтрокаПродукцияБезУпаковки(ДанныеДокумента);
			КонецЕсли;
			
		Иначе
			
			Для Каждого СтрокаПродукции Из СтрокаИсточника.Строки Цикл
				ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаПродукции, КоллекцияСтрокПриемника, ДанныеДокумента);
			КонецЦикла;
			
			Возврат;
			
		КонецЕсли;
	
	ИначеЕсли СтрокаИсточника.Родитель = Неопределено
		И СтрокаИсточника.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки Тогда
		
		СтрокаПродукцияБезУпаковки = ДанныеДокумента.СтрокаПродукцияБезУпаковки;
		
		Если СтрокаПродукцияБезУпаковки = Неопределено Тогда
			СтрокаПродукцияБезУпаковки = ДобавленнаяСтрокаПродукцияБезУпаковки(ДанныеДокумента);
		КонецЕсли;
		
		НоваяСтрока = СтрокаПродукцияБезУпаковки.Строки.Добавить();
		НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		
	Иначе
		
		НоваяСтрока = КоллекцияСтрокПриемника.Добавить();
		НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
	
	НоваяСтрока.СтатусКодаМаркировки = СтрокаИсточника.Статус;
	
	ОшибкаПроверкиККТ = ДанныеДокумента.ОшибкиПроверкиСредствамиККТ.Получить(НоваяСтрока.Штрихкод);
	Если ОшибкаПроверкиККТ <> Неопределено Тогда
		НоваяСтрока.ТекстОшибкиПроверкиСредствамиККТ = ОшибкаПроверкиККТ.ОписаниеОшибок;
		Если ОшибкаПроверкиККТ.ТребуетсяПолныйКодМаркировки Тогда
			НоваяСтрока.СостояниеТребованияПолногоКодаККТ = 1;
		КонецЕсли;
	КонецЕсли;
	
	Если НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.ПустаяСсылка() Тогда
		НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	ИначеЕсли НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
		НоваяСтрока.ПредставлениеСодержимоеУпаковки         = СтрокаИсточника.ПредставлениеНоменклатуры;
		НоваяСтрока.ПредставлениеСодержимогоДоСопоставления = СтрокаИсточника.ПредставлениеНоменклатуры;
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(НоваяСтрока, ДанныеДокумента.ДоступныеДляПроверкиУпаковки);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПроверитьДопустимостьКодаМаркировки(НоваяСтрока, ДанныеДокумента.ПараметрыПроверкиКодовМаркировки);
	
	Если НоваяСтрока.НедопустимыйКодМаркировки Тогда
		ДанныеДокумента.КоличествоНедопустимыхКодовМаркировки = ДанныеДокумента.КоличествоНедопустимыхКодовМаркировки + 1;
	КонецЕсли;
	
	Если НоваяСтрока.СодержимоеНедоступно Тогда
		ДанныеДокумента.СодержимоеУпаковокНедоступно = Истина;
	КонецЕсли;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(НоваяСтрока.ТипУпаковки) Тогда
		ДанныеДокумента.УпаковкиДокумента.Добавить(НоваяСтрока.Штрихкод);
	КонецЕсли;

	КоллекцияСтрокНовойСтроки = НоваяСтрока.Строки;
	
	Для Каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(ПодчиненнаяСтрокаИсточника, КоллекцияСтрокНовойСтроки, ДанныеДокумента);
	КонецЦикла;

КонецПроцедуры

Функция ДобавленнаяСтрокаПродукцияБезУпаковки(ДанныеДокумента)
	
	НоваяСтрока = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки.Вставить(0);
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ЗаполнитьСтрокуПродукцияБезУпаковки(НоваяСтрока);
	
	ДанныеДокумента.СтрокаПродукцияБезУпаковки = НоваяСтрока;
	
	Возврат НоваяСтрока;

КонецФункции

Процедура ОтразитьАгрегациюКодовМаркировкиВПуле(ДеревоМаркированнойПродукции, ПроверятьУпаковкиПула = Ложь)
	
	ТаблицаКодовМаркировки = Новый ТаблицаЗначений();
	ТаблицаКодовМаркировки.Колонки.Добавить("КодМаркировки",          ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаКодовМаркировки.Колонки.Добавить("ШтрихкодУпаковки",       Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаКодовМаркировки.Колонки.Добавить("ХешСуммаКодаМаркировки", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаКодовМаркировки.Колонки.Добавить("ХешСуммаУпаковки",       ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаКодовМаркировки.Колонки.Добавить("GTIN",                   Метаданные.ОпределяемыеТипы.GTIN.Тип);
	
	ЗаполнитьТаблицуКодовМаркировки(ТаблицаКодовМаркировки, ДеревоМаркированнойПродукции.Строки);
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПулКодовМаркировкиСУЗ");
	ЭлементБлокировки.ИсточникДанных = ТаблицаКодовМаркировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("КодМаркировки", "КодМаркировки");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	КодыМаркировки.КодМаркировки          КАК КодМаркировки,
	|	КодыМаркировки.ШтрихкодУпаковки       КАК ШтрихкодУпаковки,
	|	КодыМаркировки.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки,
	|	КодыМаркировки.ХешСуммаУпаковки       КАК ХешСуммаУпаковки
	|ПОМЕСТИТЬ
	|	ВТКодыМаркировки
	|ИЗ
	|	&ТаблицаКодовМаркировки КАК КодыМаркировки
	|ИНДЕКСИРОВАТЬ ПО
	|	КодМаркировки,
	|	ХешСуммаКодаМаркировки
	|;
	|
	|ВЫБРАТЬ
	|	ПулКодовМаркировки.ДокументОснование КАК ДокументОснование,
	|	ПулКодовМаркировки.КодМаркировки     КАК КодМаркировки,
	|	КодыМаркировки.ШтрихкодУпаковки      КАК ШтрихкодУпаковки,
	|	КодыМаркировки.ХешСуммаУпаковки      КАК ХешСуммаУпаковки
	|ПОМЕСТИТЬ
	|	ВТКодыМаркировкиИОснования
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодыМаркировки КАК КодыМаркировки
	|		ПО ПулКодовМаркировки.КодМаркировки = КодыМаркировки.КодМаркировки
	|		 И ПулКодовМаркировки.ХешСуммаКодаМаркировки = КодыМаркировки.ХешСуммаКодаМаркировки
	|ГДЕ
	|	ПулКодовМаркировки.ШтрихкодУпаковки <> КодыМаркировки.ШтрихкодУпаковки
	|	ИЛИ ПулКодовМаркировки.ХешСуммаУпаковки <> КодыМаркировки.ХешСуммаУпаковки
	|
	|;
	|
	|ВЫБРАТЬ
	|	КодыМаркировкиИОснования.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	ВТКодыМаркировкиИОснования КАК КодыМаркировкиИОснования
	|СГРУППИРОВАТЬ ПО
	|	КодыМаркировкиИОснования.ДокументОснование
	|
	|;
	|
	|ВЫБРАТЬ
	|	КодыМаркировкиИОснования.ДокументОснование КАК ДокументОснование,
	|	КодыМаркировкиИОснования.КодМаркировки     КАК КодМаркировки,
	|	КодыМаркировкиИОснования.ШтрихкодУпаковки  КАК ШтрихкодУпаковки,
	|	КодыМаркировкиИОснования.ХешСуммаУпаковки  КАК ХешСуммаУпаковки
	|ИЗ
	|	ВТКодыМаркировкиИОснования КАК КодыМаркировкиИОснования
	|ИТОГИ ПО
	|	ДокументОснование
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаКодовМаркировки", ТаблицаКодовМаркировки);
	Результаты = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = Результаты.Количество();
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПулКодовМаркировкиСУЗ");
	ЭлементБлокировки.ИсточникДанных = Результаты[КоличествоРезультатов - 2];
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДокументОснование", "ДокументОснование");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	ВыборкаДокументОснование = Результаты[КоличествоРезультатов - 1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДокументОснование.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ПулКодовМаркировкиСУЗ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор["ДокументОснование"].Установить(ВыборкаДокументОснование.ДокументОснование);
		НаборЗаписей.Прочитать();
		
		Выборка = ВыборкаДокументОснование.Выбрать();
		
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			СтруктураПоиска = Новый Структура("КодМаркировки", ЗаписьНабора.КодМаркировки);
			Выборка.Сбросить();
			
			Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
				
				Если ПроверятьУпаковкиПула
					И ЗначениеЗаполнено(ЗаписьНабора.ШтрихкодУпаковки)
					И ЗаписьНабора.ШтрихкодУпаковки <> Выборка.ШтрихкодУпаковки Тогда
					ТекстОшибки = НСтр("ru = 'Код маркировки %1 уже вложен в упаковку со штрихкодом %2.'");
					ТекстОшибки = СтрШаблон(ТекстОшибки, Выборка.КодМаркировки, ЗаписьНабора.ШтрихкодУпаковки);
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				
				ЗаписьНабора.ШтрихкодУпаковки = Выборка.ШтрихкодУпаковки;
				ЗаписьНабора.ХешСуммаУпаковки = Выборка.ХешСуммаУпаковки;
				
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуКодовМаркировки(ТаблицаКодовМаркировки, СтрокиМаркированнойПродукции)
	
	РодительскаяСтрока = СтрокиМаркированнойПродукции.Родитель;
	
	ТаблицаСостава = Обработки.ВиртуальнаяАгрегацияУпаковокИСМП.НоваяСоставУпаковки();
	ТаблицаСостава.Колонки.Добавить("КодМаркировки",          ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаСостава.Колонки.Добавить("ХешСуммаКодаМаркировки", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	Для Каждого СтрокаМаркированнойПродукции Из СтрокиМаркированнойПродукции Цикл
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаМаркированнойПродукции.ТипУпаковки) Тогда
			ЗаполнитьТаблицуКодовМаркировки(ТаблицаКодовМаркировки, СтрокаМаркированнойПродукции.Строки);
		ИначеЕсли СтрокаМаркированнойПродукции.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
			И РодительскаяСтрока <> Неопределено
			И ИнтеграцияИСКлиентСервер.ЭтоУпаковка(РодительскаяСтрока.ТипУпаковки) Тогда
			
			НоваяСтрока = ТаблицаСостава.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМаркированнойПродукции);
			НоваяСтрока.КодМаркировки          = СтрокаМаркированнойПродукции.Штрихкод;
			НоваяСтрока.ХешСуммаКодаМаркировки = ИнтеграцияИС.ХешированиеДанныхSHA256(НоваяСтрока.КодМаркировки);
			НоваяСтрока.Количество = 1;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаСостава.Количество() > 0 Тогда
		
		КопияСостава = ТаблицаСостава.Скопировать();
		КопияСостава.Свернуть("Номенклатура,Характеристика,Серия, GTIN", "Количество");
		ХешСуммаУпаковки = Обработки.ВиртуальнаяАгрегацияУпаковокИСМП.ХешСуммаУпаковки(КопияСостава);
		
		Для Каждого СтрокаСостава Из ТаблицаСостава Цикл
			НоваяСтрока = ТаблицаКодовМаркировки.Добавить();
			НоваяСтрока.КодМаркировки          = СтрокаСостава.КодМаркировки;
			НоваяСтрока.ХешСуммаКодаМаркировки = ИнтеграцияИС.ХешированиеДанныхSHA256(НоваяСтрока.КодМаркировки);
			НоваяСтрока.ШтрихкодУпаковки       = РодительскаяСтрока.ШтрихкодУпаковки;
			НоваяСтрока.ХешСуммаУпаковки       = ХешСуммаУпаковки;
			НоваяСтрока.GTIN                   = СтрокаСостава.GTIN;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДеревоМаркированнойПродукции()
	
	ДеревоМаркированнойПродукции = Новый ДеревоЗначений();
	ДеревоМаркированнойПродукции.Колонки.Добавить("СтатусПроверки",                      Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПроверкиНаличияПродукцииИС"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеПроверкиПодчиненных",    Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТипУпаковки",                         Новый ОписаниеТипов("ПеречислениеСсылка.ПрочиеЗоныПересчетаПродукцииИСМП, ПеречислениеСсылка.ТипыУпаковок"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхУпаковок",       Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхВНаличии",       Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхОтсутствует",    Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("Штрихкод",                            Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВсяУпаковкаПроверена",                Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИндексКартинкиТипУпаковки",           Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИндексКартинкиСтатусПроверки",        Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТребуетсяПеремаркировка",             Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("Представление",                       Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеСодержимоеУпаковки");
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеСодержимогоДоСопоставления", Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхОтложено",       Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненнойПродукции",      Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("НомерСтикераОтложено",                Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеСодержитсяВДанныхДокумента",        Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеСоответствуетОтбору",               Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдетПроверкаДаннойУпаковки",          Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхНеЧислилось",    Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхНеПроверялось",  Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхВсего",          Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ХешСумма",                            Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("Номенклатура",                        Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Характеристика",                      Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Серия",                               Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдентификаторСтроки",                 Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеСерии",                Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазнаяНоменклатура",         Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеХарактеристики",       Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИННВладельца",                        Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИННАгента",                           Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("СтатусКодаМаркировки",                Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("GTIN",                                Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныйGTIN",                 Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеПроверкиКодаМаркировки", Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("НедопустимыйКодМаркировки",           Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("СодержимоеНедоступно",                Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдентификаторПроисхожденияВЕТИС",     Метаданные.ОпределяемыеТипы.ИдентификаторПроисхожденияВЕТИС.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ГоденДо",                             Новый ОписаниеТипов("Дата"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("Скоропортящаяся",                     Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТипШтрихкода",                        Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ХэшСуммаНормализации",                Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВидУпаковки",                         Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("СпособВводаВОборот",                  Новый ОписаниеТипов("ПеречислениеСсылка.СпособыВводаВОборотСУЗ"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТекстОшибкиПроверкиСредствамиККТ",    Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("СостояниеТребованияПолногоКодаККТ",   Новый ОписаниеТипов("Число"));
	
	Возврат ДеревоМаркированнойПродукции;
	
КонецФункции

Функция ПодобраннаяМаркируемаяПродукция()
	
	ПодобраннаяМаркируемаяПродукция = Новый ТаблицаЗначений();
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Номенклатура",                    Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Характеристика",                  Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Серия",                           Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Количество",                      Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоПодобрано",             Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ИндексКодаМаркировки",            Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("GTIN",                            Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ПредставлениеНоменклатуры",       Новый ОписаниеТипов("Строка"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("СтатусУказанияСерий",             Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ХарактеристикиИспользуются",      Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ТипНоменклатуры",                 Метаданные.ОпределяемыеТипы.ТипНоменклатуры.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("НомерСтроки",                     Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоИС",                    Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("НоменклатураСопоставлена",        Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ИдентификаторПроисхожденияВЕТИС", Метаданные.ОпределяемыеТипы.ИдентификаторПроисхожденияВЕТИС.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ГоденДо",                         Новый ОписаниеТипов("Дата"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Скоропортящаяся",                 Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КодыGTIN",                        Новый ОписаниеТипов("СписокЗначений"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ПредставлениеGTIN",               Новый ОписаниеТипов("Строка"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("НоменклатураСопоставленаПоУПД",   Новый ОписаниеТипов("Булево"));
	
	Возврат ПодобраннаяМаркируемаяПродукция;
	
КонецФункции

Процедура ЗаполнитьТаблицуПродукцияПоДокументу(ДанныеДокумента, ВидПродукции)
	
	ПодобраннаяМаркируемаяПродукция = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция;
	
	Если ПодобраннаяМаркируемаяПродукция.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПродукцияПоДокументу = ПодобраннаяМаркируемаяПродукция.СкопироватьКолонки();
	
	Для Каждого СтрокаПодобраннойПродукции Из ПодобраннаяМаркируемаяПродукция Цикл
		
		Если СтрокаПодобраннойПродукции.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПодобраннойПродукции.GTIN) Тогда
			
			// Только остаточные GTIN
			Если ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			Если Не ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(
			ПродукцияПоДокументу.Добавить(), СтрокаПодобраннойПродукции);
		
	КонецЦикла;
	
	Если ПродукцияПоДокументу.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДокумента.Вставить("ПродукцияПоДокументу", ПродукцияПоДокументу);
	
КонецПроцедуры

Процедура ДополнитьКолонкамиМолочнойПродукции(Таблица)
	
	Таблица.Колонки.Добавить("ИдентификаторПроисхожденияВЕТИС", Метаданные.ОпределяемыеТипы.ИдентификаторПроисхожденияВЕТИС.Тип);
	Таблица.Колонки.Добавить("СрокГодности", Новый ОписаниеТипов("Дата"));
	
КонецПроцедуры

Процедура ТаблицаШтрихкодовОбщаяПоДаннымДерева(ДеревоМаркированнойПродукции, ТаблицаШтрихкодовОбщая, ЭтоМолочнаяПродукция)
	
	Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки) Тогда
			НоваяСтрока = ТаблицаШтрихкодовОбщая.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			Если ЭтоМолочнаяПродукция Тогда
				НоваяСтрока.СрокГодности = СтрокаДерева.ГоденДо;
			КонецЕсли;
		КонецЕсли;
		ТаблицаШтрихкодовОбщаяПоДаннымДерева(СтрокаДерева, ТаблицаШтрихкодовОбщая, ЭтоМолочнаяПродукция);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуКоличествоПоДокументуСУчетомВидаПродукции(ДанныеДокумента, ВидПродукции)
	
	ПодобраннаяМаркируемаяПродукция = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция;
	
	Если ПодобраннаяМаркируемаяПродукция.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемыеСвойстваВидаПродукции = Новый Массив;
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		ПроверяемыеСвойстваВидаПродукции.Добавить("ИдентификаторПроисхожденияВЕТИС");
	КонецЕсли;
	
	ИменаКолонокТаблицы = Новый Массив;
	ИменаКолонокТаблицы.Добавить("GTIN");
	ИменаКолонокТаблицы.Добавить("Номенклатура");
	ИменаКолонокТаблицы.Добавить("Характеристика");
	ИменаКолонокТаблицы.Добавить("Серия");
	ИменаКолонокТаблицы.Добавить("Количество");
	ИменаКолонокТаблицы.Добавить("ИдентификаторПроисхожденияВЕТИС");
	ИменаКолонокТаблицы.Добавить("ГоденДо");
	ИменаКолонокТаблицы.Добавить("Скоропортящаяся");
	
	КоличествоПоДокументуСУчетомВидаПродукции =
		ПодобраннаяМаркируемаяПродукция.СкопироватьКолонки(СтрСоединить(ИменаКолонокТаблицы, ","));
	
	Для Каждого СтрокаПодобраннойПродукции Из ПодобраннаяМаркируемаяПродукция Цикл
		
		Если СтрокаПодобраннойПродукции.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПодобраннойПродукции.GTIN) Тогда
			
			// Только остаточные GTIN
			Если ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			Если Не ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПроверяемыеСвойстваВидаПродукции.Количество() = 0 Тогда
				Продолжить; // Сохраняем только специфические колонки
			КонецЕсли;
			
			Для Каждого ИмяСвойства Из ПроверяемыеСвойстваВидаПродукции Цикл
				Если Не ЗначениеЗаполнено(СтрокаПодобраннойПродукции[ИмяСвойства]) Тогда
					Продолжить;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(
			КоличествоПоДокументуСУчетомВидаПродукции.Добавить(), СтрокаПодобраннойПродукции);
		
	КонецЦикла;
	
	Если КоличествоПоДокументуСУчетомВидаПродукции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДокумента.Вставить("КоличествоПоДокументуСУчетомВидаПродукции", КоличествоПоДокументуСУчетомВидаПродукции);
	
КонецПроцедуры

#КонецОбласти
	
#КонецЕсли