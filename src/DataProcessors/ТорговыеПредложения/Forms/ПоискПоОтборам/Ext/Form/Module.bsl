
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Перем ПараметрКонтрагент, ФиксированныйОтборПоКонтрагенту;
	
	УстановитьУсловноеОформление();
	
	БизнесСеть.УсловноеОформлениеГиперссылкиПоказатьЕще(УсловноеОформление, Элементы.Список,
		Элементы.СписокГиперссылкаПоказатьЕще);
		
	Если НЕ ТорговыеПредложения.ПравоПоискаТорговыхПредложений(Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	АвтоНавигационнаяСсылка = Ложь;
	НавигационнаяСсылка = "e1cib/app/" + ЭтотОбъект.ИмяФормы;
	
	ПроверитьРегистрациюОрганизаций();

	// Установка полученных параметров и отборов.
	Параметры.Свойство("ИдентификаторКатегории",          ТекущаяКатегория);
	Параметры.Свойство("ИдентификаторЗаказа",             ИдентификаторЗаказа);
	Параметры.Свойство("ОтборНаименование",               ОтборНаименование);
	Параметры.Свойство("ОтборНоменклатураСервиса",        ОтборНоменклатураСервиса);
	Параметры.Свойство("ОтборХарактеристикаСервиса",      ОтборХарактеристикаСервиса);
	Параметры.Свойство("Валюта",                          Валюта);
	Параметры.Свойство("РежимВыбораТорговогоПредложения", РежимВыбораТорговогоПредложения);
	Параметры.Свойство("ФиксированныйОтборПоКонтрагенту", ФиксированныйОтборПоКонтрагенту);
	
	Если Параметры.Свойство("Контрагент", ПараметрКонтрагент) Тогда
		ЗаполнитьОтборПоКонтрагенту(Параметры.Контрагент, ЭтотОбъект);
	КонецЕсли;
	
	РазрешитьИзменениеКонтрагента         = Не ФиксированныйОтборПоКонтрагенту Или Не ЗначениеЗаполнено(ПараметрКонтрагент);
	Элементы.ОтборПоКонтрагенту.Видимость = РазрешитьИзменениеКонтрагента;
	
	Если Параметры.Свойство("ИНН") Тогда
		ИдентификаторКонтрагента = Параметры.ИНН
			+ ?(Параметры.Свойство("КПП") И Параметры.КПП <> "0" И НЕ ПустаяСтрока(Параметры.КПП),
				"/" + Параметры.КПП, "");
	КонецЕсли;

	Если ПустаяСтрока(НаименованиеКонтрагента) И ЗначениеЗаполнено(Контрагент) Тогда
		НаименованиеКонтрагента = Строка(Контрагент);
	КонецЕсли;
	
	Если Параметры.Свойство("АдресПараметровОтбора") Тогда
		ЗаполнитьПараметрыОтборов(Параметры.АдресПараметровОтбора);
	Иначе		
		Если Параметры.Свойство("ОтборШтрихКоды") И ЗначениеЗаполнено(Параметры.ОтборШтрихКоды) Тогда
			ОтборШтрихКоды.ЗагрузитьЗначения(Параметры.ОтборШтрихКоды);
		ИначеЕсли Параметры.Свойство("ОтборАртикулы") И ЗначениеЗаполнено(Параметры.ОтборАртикулы) Тогда
			ОтборАртикулы.ЗагрузитьЗначения(Параметры.ОтборАртикулы);
		КонецЕсли;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОтборНаименование) Тогда
		СтрокаПоиска = ОтборНаименование;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗаказа) Тогда
		ИдентификаторЗаказа = УникальныйИдентификатор;
	Иначе
		АдресТоваровВХранилище = "";
		Если Параметры.Свойство("АдресТоваровВХранилище", АдресТоваровВХранилище) Тогда
			ТоварыОбъект = БизнесСеть.ПолучитьУдалитьИзВременногоХранилища(АдресТоваровВХранилище);			
			Если ЗначениеЗаполнено(ТоварыОбъект)Тогда
				Товары.Загрузить(ТоварыОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Инициализация валюты по сохраненному значению.
	КлючНастроекФормы = "Обработка.ТорговыеПредложения.Форма.ПоискПоОтборам/ТекущиеДанные";
	Настройки = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекФормы);
	СохраненнаяВалюта = Неопределено;
	Если ТипЗнч(Настройки) = Тип("Соответствие") Тогда
		СохраненнаяВалюта     = Настройки.Получить("Валюта");
		РежимСортировки       = Настройки.Получить("РежимСортировки");
		ЗапрашиватьКоличество = Настройки.Получить("ЗапрашиватьКоличество");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Валюта = СохраненнаяВалюта;
	ИначеЕсли Валюта <> СохраненнаяВалюта И ТипЗнч(Настройки) = Тип("Соответствие") Тогда
		Настройки.Вставить("Валюта", Валюта);
		ХранилищеСистемныхНастроек.Сохранить(КлючНастроекФормы,, Настройки);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		ТорговыеПредложенияПереопределяемый.ПолучитьВалютуРегламентированногоУчета(Валюта);
	КонецЕсли;
	Элементы.ИзменитьВалютуПоиска.Заголовок = СтрШаблон(НСтр("ru = 'Валюта: %1'"), Валюта);
	
	ЕстьПодсистемаРаботаСНоменклатурой = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой");
	
	// Установка видимости доступности элементов.
	УстановитьВидимостьДоступность();
	
	Страницы = ТорговыеПредложенияСлужебный.НовыеПараметрыСтраницСервиса(100);
	
	Если ПустаяСтрока(РежимСортировки) Тогда
		РежимСортировки = "СортировкаРелевантность";
	КонецЕсли;
	
	УстановитьРежимСортировки(Элементы, РежимСортировки, Валюта, ОтображатьЦеныБезНДС);
	
	Элементы.ЗапрашиватьКоличество.Пометка = ЗапрашиватьКоличество;
	
	ЗаполнитьОрганизации();
	
	БизнесСеть.ЗаполнитьРегионыПоиска(
		"ТорговыеПредложения",
		ОтборОрганизация, 
		РегионПоиска, 
		РегионЗаголовок, 
		ИдентификаторыРегионов);
		
	ЦветаСтиляПоясняющийТекст = ЦветаСтиля.ПоясняющийТекст;
	ЦветаСтиляЦветТекстаФормы = ЦветаСтиля.ЦветТекстаФормы;
	
	АдресКорзины = ТорговыеПредложенияСлужебный.АдресКорзиныИзЛокальногоХранилища();
	
	ФоновоеЗаданиеПоиска = НайтиТорговыеПредложенияВФоне(
		Неопределено, 
		Ложь, 
		Истина, 
		ЗначениеЗаполнено(АдресКорзины));
	
	Если ФоновоеЗаданиеПоиска <> Неопределено Тогда
		УстановитьКартинкуКомандыНайти(Истина, Элементы.НайтиПредложения, Элементы.ДекорацияДлительнаяЗагрузкаКатегорий);
	КонецЕсли;
	
	ИнтернетПоддержкаПодключена = ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();

	ЗаполнитьФиксированныеОтборыДерева(ДеревоОтборов, НаименованиеКонтрагента, РазрешитьИзменениеКонтрагента, БыстрыеОтборы);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	УбратьВидимостьБыстрыхОтборов(0);
	ОбновитьНадписьИтогов();
	
	Элементы.ОтображатьЦеныБезНДС.Пометка = ОтображатьЦеныБезНДС;
	
	ИзменитьБыстрыеОтборыНаФорме();
	Если ЗначениеЗаполнено(ФоновоеЗаданиеПоиска) Тогда
		ОжидатьЗавершениеПоиска();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ТорговыеПредложения_ИзменитьКоличествоВЗаказе"
		И Параметр.ИдентификаторЗаказа = ИдентификаторЗаказа
		И Источник <> ЭтотОбъект Тогда
		
		ДобавитьПредложениеВКорзинуПослеОповещения(Параметр);
				
	ИначеЕсли ИмяСобытия = "ТорговыеПредложения_УдалитьИзЗаказа"
		И Параметр.ИдентификаторЗаказа = ИдентификаторЗаказа Тогда
		
		Для Каждого Идентификатор Из Параметр.ИдентификаторыПредложений Цикл
			
			СтрокаТовары = Товары.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор));
			Если СтрокаТовары.Количество() Тогда
				Товары.Удалить(Товары.Индекс(СтрокаТовары[0]));
			КонецЕсли;
			
			СтрокаСписка = Список.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор));
			Если СтрокаСписка.Количество() Тогда 
				УстановитьГиперссылкуИконкуКоличества(СтрокаСписка[0], 0);
			КонецЕсли;
			
		КонецЦикла;
		ОбновитьНадписьИтогов();
		
	ИначеЕсли ИмяСобытия = "ТорговыеПредложения_ПоискПоОтборам_Обновить" Тогда
		
		ПараметрыИзменены = Ложь;
		Если Параметр.Свойство("ИдентификаторКатегории") Тогда
			Если ТекущаяКатегория <> Параметр.ИдентификаторКатегории Тогда
				ПараметрыИзменены = Истина;
				ИдентификаторКатегории = Параметр.ИдентификаторКатегории;
				
				ИдентификаторСтроки = ИдентификаторСтрокиПоИдентификаторуКатегории(
					Категории.ПолучитьЭлементы(), ИдентификаторКатегории);
				
				Если ИдентификаторСтроки <> 0 Тогда
					Элементы.Категории.ТекущаяСтрока = ИдентификаторСтроки;
				Иначе
					ЗагрузитьКатегорииСервиса(ИдентификаторКатегории);
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			ИдентификаторКатегории = Неопределено;
			Если ЗначениеЗаполнено(ТекущаяКатегория) Тогда
				ПараметрыИзменены = Истина;
			КонецЕсли;
		КонецЕсли;
			
		Если Параметр.Свойство("ОтборНаименование")
			И Параметр.ОтборНаименование <> СтрокаПоиска Тогда
			ПараметрыИзменены = Истина;
			ОтборНаименование = Параметр.ОтборНаименование;
			СтрокаПоиска = ОтборНаименование;
		КонецЕсли;
		
		Если Параметр.Свойство("ОтборАртикул")
			И Параметр.ОтборАртикул <> СтрокаПоиска Тогда
			ОтборАртикулы.Добавить(Параметр.ОтборАртикул);
			Если ПустаяСтрока(СтрокаПоиска) Тогда
				СтрокаПоиска = Параметр.ОтборАртикул;
				ПараметрыИзменены = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Параметр.Свойство("ОтборШтрихКоды") И ТипЗнч(Параметр.ОтборШтрихКоды) = Тип("Массив")
			И Параметр.ОтборШтрихКоды.Количество() Тогда
			ПараметрыИзменены = Истина;
			ОтборШтрихКоды.ЗагрузитьЗначения(Параметр.ОтборШтрихКоды);
			Если ПустаяСтрока(СтрокаПоиска) Тогда
				СтрокаПоиска = Параметр.ОтборШтрихКоды[0];
			КонецЕсли;
		КонецЕсли;
		
		Если Параметр.Свойство("Контрагент") 
			И Параметр.Контрагент <> Контрагент Тогда
			ПараметрыИзменены = Истина;
			ЗаполнитьОтборПоКонтрагенту(Параметр.Контрагент, ЭтотОбъект);
			
			Если ЗначениеЗаполнено(НаименованиеКонтрагента)
				ИЛИ ЗначениеЗаполнено(Контрагент) Тогда
				Если НЕ ЗначениеЗаполнено(НаименованиеКонтрагента) Тогда
					НаименованиеКонтрагента = Строка(Контрагент);
				КонецЕсли;
				СтрокиДереваОтборов = ДеревоОтборов.ПолучитьЭлементы();
				НовыйОтбор = СтрокиДереваОтборов[0];
				НовыйОтбор.ЗначениеОтбора      = НаименованиеКонтрагента;
				НовыйОтбор.ПредставлениеОтбора = НаименованиеКонтрагента;
				НовыйОтбор.Отбор               = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыИзменены Тогда
			НайтиТорговыеПредложения();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ТорговыеПредложения_ОтправленыЗаказыТоваров"
		И Параметр.Свойство("ИдентификаторЗаказа")
		И Параметр.ИдентификаторЗаказа = ИдентификаторЗаказа Тогда
		
		// Очистка товаров.
		Для Каждого ПозицияТовары Из Товары Цикл
			СтрокаСписка = Список.НайтиСтроки(Новый Структура("Идентификатор", ПозицияТовары.Идентификатор));
			Если СтрокаСписка.Количество() Тогда
				УстановитьГиперссылкуИконкуКоличества(СтрокаСписка[0], 0);
			КонецЕсли;
		КонецЦикла;
		Товары.Очистить();
		ОбновитьНадписьИтогов();
		
	ИначеЕсли ИмяСобытия = "ТорговыеПредложения_ПеречитатьДанныеКорзины"
		И Источник <> ЭтотОбъект Тогда	
		
		ПрочитатьКорзинуОбновитьСписок(Параметр.АдресДанныхКорзины);
		
		ОбновитьНадписьИтогов();
		
	ИначеЕсли ИмяСобытия = "БизнесСеть_РегистрацияОрганизаций" Тогда
		
		ПроверитьРегистрациюОрганизаций();
		
	ИначеЕсли ИмяСобытия = "ИнтернетПоддержкаОтключена" Тогда
		
		ИнтернетПоддержкаПодключена = Ложь;
		
	ИначеЕсли ИмяСобытия = "ИнтернетПоддержкаПодключена" Тогда
		
		ИнтернетПоддержкаПодключена = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РегионЗаголовокНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьВыборРегионаПоиска();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОтборы(Команда)
	
	УстановитьВидимостьОтборов(Элементы.ПоказатьСкрытьОтборы.Пометка, Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьКатегории(Команда)
	
	ВидимостьКатегорий = Элементы.ПоказатьСкрытьКатегории.Пометка;
	
	Элементы.ПоказатьСкрытьКатегории.Пометка    = НЕ ВидимостьКатегорий;
	Элементы.ГруппаКатегорий.Видимость          = НЕ ВидимостьКатегорий;
	Элементы.ГруппаЗаголовкаСвойств.Видимость   = Элементы.ПоказатьСкрытьОтборы.Пометка И НЕ Элементы.ПоказатьСкрытьКатегории.Пометка;
		
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ОтборНаименование          = "";
	ОтборАртикул               = "";
	ОтборНоменклатураСервиса   = "";
	ОтборХарактеристикаСервиса = "";
	ОтборШтрихКоды.Очистить();
	ОтборАртикулы.Очистить();
	
	НайтиТорговыеПредложения();
		
КонецПроцедуры

&НаКлиенте
Процедура НайтиПредложения(Команда)
	
	НайтиТорговыеПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПоискДляОрганизацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораОрганизации", ЭтотОбъект);
	
	ПоказатьВыборИзМеню(Оповещение, Организации, Элементы.ПредставлениеОрганизации);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если ЗначениеЗаполнено(ИдентификаторОбрабатываемогоПредложения) Тогда
		ОтключитьОбработчикОжидания("ДобавитьТоварПослеОжидания");
		ДобавитьТоварПослеОжидания();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработатьВыборСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииПоля(Элемент)
	
	Если Элементы.Список.ТекущийЭлемент = Неопределено
		И Не Элементы.Список.ТекущиеДанные = Неопределено
		И ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.ГиперссылкаПоказатьЕще) Тогда
		Элементы.Список.ТекущийЭлемент = Элементы.СписокГиперссылкаПоказатьЕще;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДереваКатегории

&НаКлиенте
Процедура КатегорииПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Категории.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоЗаданий > 10
		ИЛИ (ТекущаяКатегория = ТекущиеДанные.Идентификатор И КоличествоЗаданийПоискаТП = 0)
		ИЛИ (ТекущаяКатегория <> ТекущиеДанные.Идентификатор И КоличествоЗаданийПоискаТП > 0) Тогда
		Возврат;
	КонецЕсли;
		
	ПредставлениеКатегории = ТекущиеДанные.Наименование;
	ТекущаяКатегория       = ТекущиеДанные.Идентификатор;
	
	// При смене категории очищаем отборы.
	ОчиститьБыстрыеОтборыИДерево();
	
	ПодключитьОбработчикОжидания("Подключаемый_ПриАктивизацииСтрокиПродолжение", 0.5, Истина);
	
КонецПроцедуры

#Область УправлениеБыстрымОтбором

&НаКлиенте
Процедура ОчиститьБыстрыеОтборыИДерево()
	
	СтрокиДереваОтборов = ДеревоОтборов.ПолучитьЭлементы();
	УдалитьНеФиксированныеБыстрыеОтборы(СтрокиДереваОтборов, БыстрыеОтборы);
	
	МодульРаботаСНоменклатуройСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиент");
	МодульРаботаСНоменклатуройСлужебныйКлиент.УдалитьНеФиксированныеОтборыДереваОтборов(ДеревоОтборов);
	
	УбратьВидимостьБыстрыхОтборов(0);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьБыстрыеОтборыНаФорме(ОбновитьОтборы = Ложь)

	ВыбраноОтборов = 0;
	
	Для Каждого ЭлементОтбора Из БыстрыеОтборы Цикл
		
		Если ЭлементОтбора.Пометка И НЕ ОбновитьОтборы Тогда
			Продолжить;
		КонецЕсли;
				
		Если ВыбраноОтборов < 10 Тогда
			
			ЭлементЗаголовокОтбора = Элементы["ЗаголовокОтбора_" + ВыбраноОтборов];
			
			Представление = ЭлементОтбора.Представление;
			ПредставлениеОтбора = Сред(Представление, СтрНайти(Представление, ":")+1);
			Если СтрДлина(ПредставлениеОтбора) > 85 Тогда
				ПредставлениеЗаголовка = Лев(ПредставлениеОтбора, 82) + "...";
			Иначе
				ПредставлениеЗаголовка = ПредставлениеОтбора;
			КонецЕсли;
			
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(Лев(Представление, СтрНайти(Представление, ":")));
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ПредставлениеЗаголовка,, ЦветаСтиляЦветТекстаФормы));
			ЭлементЗаголовокОтбора.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок, , ЦветаСтиляПоясняющийТекст, , ЭлементОтбора.Значение);
			ЭлементЗаголовокОтбора.Видимость = Истина;
			
			ЭлементОчиститьОтбор = Элементы["ОчиститьОтбор_" + ВыбраноОтборов];
			ЭлементОчиститьОтбор.Заголовок = ЭлементОтбора.Значение;
			ЭлементОчиститьОтбор.Видимость = Истина;

			ВыбраноОтборов = ВыбраноОтборов + 1;
			
		КонецЕсли;
		ЭлементОтбора.Пометка = Истина;
	КонецЦикла;
	
	Если ВыбраноОтборов < БыстрыеОтборы.Количество() Тогда
		ЭлементЗаголовокОтбора = Элементы["ЗаголовокОтбора_Еще"];
		ЭлементЗаголовокОтбора.Заголовок = СтрШаблон(НСтр("ru = 'И еще %1'"), БыстрыеОтборы.Количество() - ВыбраноОтборов);
		ЭлементЗаголовокОтбора.Видимость = Истина;
	Иначе
		УбратьВидимостьБыстрыхОтборов(ВыбраноОтборов, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьВидимостьБыстрыхОтборов(ВыбраноОтборов, ОбновитьОтборы = Ложь)
	
	Для Счетчик = ВыбраноОтборов По 9 Цикл
		
		ЭлементОчиститьОтбор = Элементы["ОчиститьОтбор_" + Счетчик];
		
		БыстрыйОтбор = БыстрыеОтборы.НайтиПоЗначению(ЭлементОчиститьОтбор.Заголовок);
		Если БыстрыйОтбор = Неопределено ИЛИ ОбновитьОтборы Тогда
			
			ЭлементЗаголовокОтбора = Элементы["ЗаголовокОтбора_" + Счетчик];
			ЭлементЗаголовокОтбора.Видимость = Ложь;
			ЭлементОчиститьОтбор.Видимость   = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
		
	ЭлементЗаголовокОтбора = Элементы["ЗаголовокОтбора_Еще"];
	ЭлементЗаголовокОтбора.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокОтбораОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Найти(Элемент.Имя, "ЗаголовокОтбора_") Тогда
		
		СтрокиДереваОтборов = ДеревоОтборов.ПолучитьЭлементы();
		Для Каждого СтрокаОтбора Из СтрокиДереваОтборов Цикл
			Если СтрокаОтбора.Идентификатор = НавигационнаяСсылкаФорматированнойСтроки Тогда
				Элементы.ДеревоОтборов.ТекущаяСтрока = СтрокаОтбора.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Элементы.ПоказатьСкрытьОтборы.Пометка Тогда
			УстановитьВидимостьОтборов(Ложь, Элементы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие(Элемент)
	
	// Отработка нажатия на маркеры текущего отбора.
	
	Если Найти(Элемент.Имя, "ОчиститьОтбор_") Тогда
		
		ИдентификаторОтбора = Элемент.Заголовок;
		СтрокиДереваОтборов = ДеревоОтборов.ПолучитьЭлементы();
		
		ОчиститьОтбор = Ложь;
		
		Если ИдентификаторОтбора = "Артикул" Тогда
			ОтборАртикулы.Очистить();
			ОчиститьОтбор = Истина;
		ИначеЕсли ИдентификаторОтбора = "Штрихкод" Тогда
			ОтборШтрихКоды.Очистить();
			ОчиститьОтбор = Истина;
		Иначе
			
			Для Каждого СтрокаОтбора Из СтрокиДереваОтборов Цикл
				
				Если СтрокаОтбора.Идентификатор = ИдентификаторОтбора Тогда
					
					Если СтрокаОтбора.ФиксированныйОтбор Тогда
						Если ИдентификаторОтбора = "Поставщик" Тогда
							Если НЕ РазрешитьИзменениеКонтрагента Тогда
								Возврат;
							Иначе
								ИзмененыОтборыКатегорий = Истина;
								Контрагент              = Неопределено;
								НаименованиеКонтрагента = Неопределено;
								ИННКонтрагента          = Неопределено;
								КППКонтрагента          = Неопределено;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;

					СтрокаОтбора.Отбор = Ложь;
					Если СтрокаОтбора.ЗначениеОтбора = "Список" Тогда
						СтрокиЗначенийОтбора = СтрокаОтбора.ПолучитьЭлементы();
						Для Каждого СтрокаЗначения Из СтрокиЗначенийОтбора Цикл
							СтрокаЗначения.Отбор = Ложь;
						КонецЦикла;
					КонецЕсли;
					
					ОчиститьОтбор = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ОчиститьОтбор Тогда
			НайденныйЭлемент = БыстрыеОтборы.НайтиПоЗначению(ИдентификаторОтбора);
			Если НайденныйЭлемент <> Неопределено Тогда
				БыстрыеОтборы.Удалить(НайденныйЭлемент);
			КонецЕсли;
		КонецЕсли;
		
		НайтиТорговыеПредложения();
		
	ИначеЕсли Найти(Элемент.Имя, "ЗаголовокОтбора_Еще") Тогда
		
		Если НЕ Элементы.ПоказатьСкрытьОтборы.Пометка Тогда
			УстановитьВидимостьОтборов(Ложь, Элементы);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьНеФиксированныеБыстрыеОтборы(СтрокиДереваОтборов, БыстрыеОтборы)
	
	Для Каждого СтрокаОтбора Из СтрокиДереваОтборов Цикл
		
		Если СтрокаОтбора.ФиксированныйОтбор Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныйЭлемент = БыстрыеОтборы.НайтиПоЗначению(СтрокаОтбора.Идентификатор);
		Если НайденныйЭлемент <> Неопределено Тогда
			БыстрыеОтборы.Удалить(НайденныйЭлемент);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДереваОтборов

&НаКлиенте
Процедура ДеревоОтборовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = ДеревоОтборов.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	
	Если ТекущаяСтрока.Идентификатор <> "Поставщик" Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрокаДерева", ТекущаяСтрока);

	ЭлементПредставлениеОтбора = Элементы.ДеревоОтборовПредставлениеОтбораГиперссылка;

	Если ТекущаяСтрока.ФиксированныйОтбор Тогда
		Идентификатор = ТекущаяСтрока.Идентификатор;
		Если Идентификатор = "Поставщик" Тогда

			Если Элемент.ТекущийЭлемент.Имя = "ДеревоОтборовПредставление" Тогда
				Возврат;
			Иначе
				Элемент.ТекущийЭлемент.ТолькоПросмотр = НЕ РазрешитьИзменениеКонтрагента;
			КонецЕсли;
			
			Если РазрешитьИзменениеКонтрагента Тогда
				ТекущаяСтрока.ПредставлениеОтбора         = ТекущаяСтрока.ЗначениеОтбора;
				Элементы.ДеревоОтборовПредставлениеОтбора.ПодсказкаВвода = НСтр("ru = 'ИНН, наименование - от 3 симв.'");
				Элементы.ДеревоОтборовПредставлениеОтбора.КнопкаВыбора   = Истина;
			КонецЕсли;
			
			Возврат;
			
		ИначеЕсли Идентификатор = "СпособДоставки"
			ИЛИ Идентификатор = "Доставка" ИЛИ Идентификатор = "Самовывоз" Тогда
			
			Если ПроверитьРегионПоискаПередОтборомДоставки(ТекущаяСтрока, Идентификатор) Тогда
				Возврат;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьПодсистемаРаботаСНоменклатурой Тогда
		
		ОбщийМодульРаботаСНоменклатуройСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиент");
		ОбщийМодульРаботаСНоменклатуройСлужебныйКлиент.ДеревоОтборовВыбор(Элементы.ДеревоОтборов, ЭлементПредставлениеОтбора,
			Элементы.ДеревоОтборовПредставление, Новый ОписаниеОповещения("ДеревоОтборовПриИзмененииЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		
	КонецЕсли;
	
 КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрокаДерева  = ДополнительныеПараметры.ТекущаяСтрокаДерева;
	ДанныеОтбораИзменены = Истина;
	
	Если ТекущаяСтрокаДерева.ФиксированныйОтбор Тогда
		ОбработатьРезультатИзмененияФиксированногоОтбора(ТекущаяСтрокаДерева, ДанныеОтбораИзменены, Результат);
	Иначе
		ДанныеОтбораИзменены = Результат;
	КонецЕсли;

	Если ДанныеОтбораИзменены Тогда
		ПодключитьОбработчикОжидания("Подключаемый_НайтиТорговыеПредложения", 0.5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НайтиТорговыеПредложения()
	
	НайтиТорговыеПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатИзмененияФиксированногоОтбора(ТекущаяСтрокаДерева, ДанныеОтбораИзменены, Знач Результат)
	
	Идентификатор = ТекущаяСтрокаДерева.Идентификатор;
	
	Если Идентификатор = "Поставщик" Тогда
		
		Если Результат = Неопределено ИЛИ Результат = Ложь Тогда
			
			НаименованиеКонтрагента              = "";
			Контрагент                           = Неопределено;
			ИдентификаторКонтрагента             = Неопределено;

			Если НЕ ЗначениеЗаполнено(ТекущаяСтрокаДерева.ПредставлениеОтбора) Тогда
				ПредставлениеОтбора = Элементы.ДеревоОтборовПредставлениеОтбора;
				ТекущаяСтрокаДерева.Отбор               = Ложь;
				ПредставлениеОтбора.ТолькоПросмотр      = Истина;
				ПредставлениеОтбора.ПодсказкаВвода      = НСтр("ru = 'ИНН, наименование - от 3 симв.'");
				Если ЗначениеЗаполнено(ТекущаяСтрокаДерева.ЗначениеОтбора) Тогда
					ТекущаяСтрокаДерева.ЗначениеОтбора      = НаименованиеКонтрагента;
				Иначе
					ДанныеОтбораИзменены = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если Результат = Неопределено Тогда
				Возврат;
			КонецЕсли;
		Иначе
			
			Если Результат = Истина Тогда
				Контрагент                           = Неопределено;
				ИдентификаторКонтрагента             = Неопределено;
				НаименованиеКонтрагента              = ТекущаяСтрокаДерева.ПредставлениеОтбора;
			Иначе
				НаименованиеКонтрагента                 = Строка(Результат);
				Контрагент                              = Результат;
				ТекущаяСтрокаДерева.ПредставлениеОтбора = НаименованиеКонтрагента;
			КонецЕсли;
			
			ДанныеОтбораИзменены = ТекущаяСтрокаДерева.ЗначениеОтбора <> ТекущаяСтрокаДерева.ПредставлениеОтбора
			ИЛИ ТекущаяСтрокаДерева.Отбор;
			
			ТекущаяСтрокаДерева.Отбор                = Истина;
			ТекущаяСтрокаДерева.ЗначениеОтбора       = НаименованиеКонтрагента;
			
		КонецЕсли;
	ИначеЕсли Идентификатор = "СпособДоставки" Тогда
		
		СтрокиСпособаДоставки = ТекущаяСтрокаДерева.ПолучитьЭлементы();
		Для Каждого СтрокаСпособаДоставки Из СтрокиСпособаДоставки Цикл
			Если СтрокаСпособаДоставки.Идентификатор = "Доставка" Тогда
				ВозможнаДоставка = ТекущаяСтрокаДерева.Отбор;
			ИначеЕсли СтрокаСпособаДоставки.Идентификатор = "Самовывоз" Тогда
				ВозможенСамовывоз = ТекущаяСтрокаДерева.Отбор;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Идентификатор = "Доставка" Тогда
		
		ВозможнаДоставка = ТекущаяСтрокаДерева.Отбор;
		
	ИначеЕсли Идентификатор = "Самовывоз" Тогда
		
		ВозможенСамовывоз = ТекущаяСтрокаДерева.Отбор;
		
	ИначеЕсли Идентификатор = "СИзображением" 
		ИЛИ Идентификатор = "ВНаличии" Тогда	
		
		ДанныеОтбораИзменены = Истина;
		
	Иначе
		ДанныеОтбораИзменены = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПриИзменении(Элемент)
	
	ТекущаяСтрока = ДеревоОтборов.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрокаДерева", ТекущаяСтрока);
	
	Результат = ТекущаяСтрока.Отбор;
	Если ТекущаяСтрока.ФиксированныйОтбор Тогда
		Идентификатор = ТекущаяСтрока.Идентификатор;
		Если Идентификатор = "Поставщик" Тогда
			
			Если НЕ РазрешитьИзменениеКонтрагента
				И (ЗначениеЗаполнено(Контрагент)
					ИЛИ ЗначениеЗаполнено(ИННКонтрагента)
					ИЛИ ЗначениеЗаполнено(НаименованиеКонтрагента)) Тогда
				ТекущаяСтрока.Отбор = Истина;
				Возврат;
			КонецЕсли;
			
			Если ТекущаяСтрока.Отбор
				И НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЗначениеОтбора) Тогда
				ТекущаяСтрока.Отбор = Ложь;
				ОчиститьСообщения();
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Не выбран поставщик'"));
				Возврат;
			КонецЕсли;
			
			ИзмененыОтборыКатегорий = Истина;
			
		ИначеЕсли Идентификатор = "СпособДоставки"
			ИЛИ Идентификатор = "Доставка" ИЛИ Идентификатор = "Самовывоз" Тогда
			
			Если ПроверитьРегионПоискаПередОтборомДоставки(ТекущаяСтрока, Идентификатор) Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ФиксированныеОтборы = Новый Массив;
	
	ФиксированныеОтборы.Добавить("Поставщик");
	ФиксированныеОтборы.Добавить("СИзображением");
	ФиксированныеОтборы.Добавить("ВНаличии");
	
	Если (ТекущаяСтрока.ФиксированныйОтбор И НЕ ТекущаяСтрока.ФиксированноеЗначение
		И НЕ ТекущаяСтрока.ЗначениеОтбора = "Список")
		ИЛИ ФиксированныеОтборы.Найти(ТекущаяСтрока.Идентификатор) <> Неопределено Тогда
		
		ДеревоОтборовПриИзмененииЗавершение(Результат, ДополнительныеПараметры);
	ИначеЕсли ЕстьПодсистемаРаботаСНоменклатурой Тогда
		ОбщийМодульРаботаСНоменклатуройСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиент");
		ОбщийМодульРаботаСНоменклатуройСлужебныйКлиент.ДеревоОтборовОтборПриИзменении(Элементы.ДеревоОтборов,
			Новый ОписаниеОповещения("ДеревоОтборовПриИзмененииЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПредставлениеОтбораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ДеревоОтборов.ТекущиеДанные;
	
	Если ТекущаяСтрока.Идентификатор = "Поставщик" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущаяСтрокаДерева", ТекущаяСтрока);

		ВыборКонтрагента(ДополнительныеПараметры);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПредставлениеОтбораОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ДеревоОтборов.ТекущиеДанные;
	
	Если ТекущаяСтрока.Идентификатор = "Поставщик" Тогда
		
		ТекущаяСтрока.ПредставлениеОтбора = Текст;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущаяСтрокаДерева", ТекущаяСтрока);
		
		ДеревоОтборовПриИзмененииЗавершение(ЗначениеЗаполнено(Текст), ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПредставлениеОтбораОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ДеревоОтборов.ТекущиеДанные;
	
	Если ТекущаяСтрока.Идентификатор = "Поставщик" Тогда
		ТекущаяСтрока.ПредставлениеОтбора = "";
		ТекущаяСтрока.Отбор               = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПриАктивизацииЯчейки(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоОтборов.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено
		И ТекущаяСтрока.Идентификатор = "Поставщик"
		И Элемент.ТекущийЭлемент.Имя = "ДеревоОтборовПредставлениеОтбора"
		И НЕ АктивизированаСтрокаДереваОтборов Тогда
		АктивизированаСтрокаДереваОтборов = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущаяСтрока = Элементы.ДеревоОтборов.ТекущиеДанные;
	
	Если ТекущаяСтрока.Идентификатор = "Поставщик"
		И Элемент.ТекущийЭлемент.Имя = "ДеревоОтборовПредставлениеОтбора"
		И АктивизированаСтрокаДереваОтборов Тогда
		АктивизированаСтрокаДереваОтборов = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПроверитьРегионПоискаПередОтборомДоставки(ТекущаяСтрока, Знач Идентификатор)
	
	Если РегионПоиска.РежимОтбора = 0 Тогда
		
		Если Идентификатор = "СпособДоставки" Тогда
			
			ВозможенСамовывоз = Истина;
			ВозможнаДоставка  = Истина;
			
			ДочерниеЭлементы = ТекущаяСтрока.ПолучитьЭлементы();
			Для Каждого СтрокаЭлемента Из ДочерниеЭлементы Цикл
				СтрокаЭлемента.Отбор = Истина;
				СтрокаЭлемента.Отбор = Истина;
			КонецЦикла;
			
		ИначеЕсли Идентификатор = "Доставка" Тогда
			
			ВозможнаДоставка  = Истина;
			РодительДоставки = ТекущаяСтрока.ПолучитьРодителя();
			РодительДоставки.Отбор = Истина;
			
		ИначеЕсли Идентификатор = "Самовывоз" Тогда
			
			ВозможенСамовывоз  = Истина;
			РодительДоставки = ТекущаяСтрока.ПолучитьРодителя();
			РодительДоставки.Отбор = Истина;
			
		КонецЕсли;
		
		ОткрытьВыборРегионаПоиска(Истина);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ДеревоОтборовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОчиститьТовары(Команда)
	
	Если Товары.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Отсутствуют товары для заказа'"));
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОчиститьТоварыПродолжение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Список товаров для заказа будет очищен. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЗаказыТоваров(Команда)
	
	Если Товары.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Отсутствуют товары для заказа.'"));
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторОбрабатываемогоПредложения) Тогда
		ОтключитьОбработчикОжидания("ДобавитьТоварПослеОжидания");
		ДобавитьТоварПослеОжидания();
	КонецЕсли;
	
	ТорговыеПредложенияКлиент.ОткрытьФормуКорзины(ОтборОрганизация);
	
	ОчиститьСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимСортировки(Команда)
	
	РежимСортировки = Команда.Имя;
	УстановитьРежимСортировки(Элементы, РежимСортировки, Валюта, ОтображатьЦеныБезНДС);
	НайтиТорговыеПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсходящиеДокументы(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимИсходящихДокументов", Истина);
	ОчиститьСообщения();
	ОткрытьФорму("Обработка.БизнесСеть.Форма.ДокументыОбмена", ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВалютуПоиска(Команда)
	
	Если Товары.Количество() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ИзменитьВалютуПоискаПродолжение", ЭтотОбъект),
			НСтр("ru = 'При изменении валюты, список товаров для заказа будет очищен.'"),
			РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ИзменитьВалютуПоискаПродолжение(КодВозвратаДиалога.ОК, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапрашиватьКоличество(Команда)
	
	ЗапрашиватьКоличество = НЕ ЗапрашиватьКоличество;
	Элементы.ЗапрашиватьКоличество.Пометка = ЗапрашиватьКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоПоставщику(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеКонтрагента  = ТекущиеДанные.НаименованиеКонтрагента;
	ИдентификаторКонтрагента = ТекущиеДанные.ИдентификаторКонтрагента;
	
	СтрокаОтбораПоставщик = ДеревоОтборов.ПолучитьЭлементы()[0];
	СтрокаОтбораПоставщик.Отбор               = Истина;
	СтрокаОтбораПоставщик.ЗначениеОтбора      = НаименованиеКонтрагента;
	СтрокаОтбораПоставщик.ПредставлениеОтбора = НаименованиеКонтрагента;
	
	НайтиТорговыеПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборы(Команда)
	
	ОчиститьОтборИОбновитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПригласитьПоставщиков(Команда)
	
	// Приглашение поставщиков в сервис.
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимПриглашения", "Поставщики");
	ОчиститьСообщения();
	ОткрытьФорму("Обработка.БизнесСеть.Форма.ОтправкаПриглашенийКонтрагентам", ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьЦенуБезНДС(Команда)
	
	Элементы.ОтображатьЦеныБезНДС.Пометка = Не Элементы.ОтображатьЦеныБезНДС.Пометка;
	
	ОтображатьЦеныБезНДС = Не ОтображатьЦеныБезНДС;
		
	УстановитьЗаголовокИзменитьПредставлениеЦеныВСписке();
	
	ОбновитьНадписьИтогов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокИзменитьПредставлениеЦеныВСписке()
			
	УстановитьЗаголовокКолонкиЦена(Элементы, Валюта, ОтображатьЦеныБезНДС);
	
	Для каждого ТекущаяСтрокаТоваров Из Список Цикл
		УстановитьЦенуСтрокиСписка(ТекущаяСтрокаТоваров, ОтображатьЦеныБезНДС);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСКорзиной

&НаКлиенте
Функция КомандыТорговогоПредложения(ИдентификаторПредложения)
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИзменитьКоличество", "");
	Результат.Вставить("Удалить",            "");
	
	СтрокаДанных = Товары.НайтиСтроки(
		Новый Структура("Идентификатор", ИдентификаторПредложения));
	
	Если Не ЗначениеЗаполнено(СтрокаДанных) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.ИзменитьКоличество = СтрокаДанных[0].АдресКомандыИзменитьКоличество;
	Результат.Удалить            = СтрокаДанных[0].АдресКомандыУдалить;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПрочитатьКорзинуОбновитьСписок(АдресДанныхКорзины)
	
	ЗаполнитьТоварыПоДаннымКорзины(Неопределено, АдресДанныхКорзины);
	
	ОчиститьКоличествоТорговыхПредложений();
	
	УстановитьКоличествоТорговыхПредложений();
	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьКорзину(ДанныеКорзины)
	
	Если АдресКорзины <> ДанныеКорзины.АдресКорзины Тогда
		АдресКорзины = ДанныеКорзины.АдресКорзины;
		ТорговыеПредложенияСлужебный.СохранитьАдресКорзиныВЛокальномХранилище(АдресКорзины);
	КонецЕсли;
	
	АдресКомандыДобавитьТовар = ДанныеКорзины.АдресаКоманд.ДобавитьТовар;
	
	ЗаполнитьТоварыПоДаннымКорзины(ДанныеКорзины);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоДаннымКорзины(ДанныеКорзины = Неопределено, АдресДанныхКорзины = "")
	
	Если Не ЗначениеЗаполнено(ДанныеКорзины)
		И Не ЗначениеЗаполнено(АдресДанныхКорзины) Тогда
		
		Возврат;
	КонецЕсли;
	
	Товары.Очистить();
	
	Если ЗначениеЗаполнено(АдресДанныхКорзины) Тогда
		
		ДанныеСервиса = ПолучитьИзВременногоХранилища(АдресДанныхКорзины);
		
		Если Не ЗначениеЗаполнено(ДанныеСервиса) Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеКорзины = ДанныеСервиса.ДанныеКорзины;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеКорзины)
		ИЛИ Не ЗначениеЗаполнено(ДанныеКорзины.Заказы) Тогда
		
		Возврат;
	КонецЕсли;
	
	Для каждого ТекущийЗаказ Из ДанныеКорзины.Заказы Цикл
					
		Для каждого ТекущийТовар Из ТекущийЗаказ.Товары Цикл
			
			НоваяСтрока = Товары.Добавить();
			
			НоваяСтрока.Количество               = ТекущийТовар.Количество;
			НоваяСтрока.Цена                     = ТекущийТовар.Цена;
			НоваяСтрока.СуммаНДС                 = ТекущийТовар.Итоги.СуммаНДС;
			НоваяСтрока.Сумма                    = ТекущийТовар.Итоги.СуммаСНДС;
			НоваяСтрока.Идентификатор            = ТекущийТовар.Идентификатор;
			НоваяСтрока.ЦенаВключаетНДС          = ТекущийТовар.ЦенаВключаетНДС;
			НоваяСтрока.СтавкаНДС                = ТекущийТовар.СтавкаНДС;
			НоваяСтрока.АдресКомандыУдалить      = ТекущийТовар.АдресаКоманд.УдалитьТовар;
			НоваяСтрока.АдресКомандыИзменитьКоличество = ТекущийТовар.АдресаКоманд.УстановитьКоличество;
			
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПредложениеИзКорзины(ПараметрыОткрытия, ТекущиеДанные)
	
	Если ТекущиеДанные.ОбрабатываетсяЗаданием Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторОбрабатываемогоПредложения)
		И ИдентификаторОбрабатываемогоПредложения = ТекущиеДанные.Идентификатор Тогда
		
		ОтключитьОбработчикОжидания("ДобавитьТоварПослеОжидания");
		ИдентификаторОбрабатываемогоПредложения = "";
	КонецЕсли;
	
	КомандаУдалить = КомандыТорговогоПредложения(ТекущиеДанные.Идентификатор).Удалить;
	
	Если ЗначениеЗаполнено(КомандаУдалить) Тогда
		УдалитьТоварИзКорзины(ТекущиеДанные.Идентификатор, КомандаУдалить);
	КонецЕсли;
	
	СтрокаЗаказа = ТоварПоИдентификаторуПредложения(Товары, ТекущиеДанные.Идентификатор);
	
	Если СтрокаЗаказа <> Неопределено Тогда
		ПараметрыОткрытия.Вставить("ИдентификаторыПредложений", 
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные.Идентификатор));
		Оповестить("ТорговыеПредложения_УдалитьИзЗаказа", ПараметрыОткрытия);		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТоварИзКорзины(ИдентификаторПредложения, АдресКоманды, ИдентификаторЗадания = Неопределено)
	
	ПараметрыОповещения = Новый Структура("Идентификатор", ИдентификаторПредложения);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействияНадТоваром", ЭтотОбъект, ПараметрыОповещения);
	
	ПараметрыРаботыСТоваром = ТорговыеПредложенияКлиент.ОписаниеПараметровРаботыСТоваромКорзины();
	
	ПараметрыРаботыСТоваром.Организация         = ОтборОрганизация;
	ПараметрыРаботыСТоваром.АдресКомандыУдалить = АдресКоманды;
	ПараметрыРаботыСТоваром.АдресКорзины        = АдресКорзины;
	ПараметрыРаботыСТоваром.ВидОперации         = "Удаление";
	ПараметрыРаботыСТоваром.ПрочитатьКорзину    = Истина;
		
	ТорговыеПредложенияКлиент.ВыполнитьДействиеСТоваромКорзины(ПараметрыРаботыСТоваром, ЭтотОбъект, Оповещение);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьПараметрыОтборов(АдресПараметровОтбора)

	Если Не ЭтоАдресВременногоХранилища(АдресПараметровОтбора) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеНоменклатуры = БизнесСетьВызовСервера.ПолучитьУдалитьИзВременногоХранилища(АдресПараметровОтбора);
	
	Если ТипЗнч(ДанныеНоменклатуры) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;	

	Артикулы = Новый Массив;
	Штрихкоды = Новый Массив;
	
	Для каждого ЭлементКоллекции Из ДанныеНоменклатуры Цикл
		
		Если ЗначениеЗаполнено(ЭлементКоллекции.Артикул) Тогда
			Артикулы.Добавить(ЭлементКоллекции.Артикул);
		КонецЕсли;
		
		Для каждого Штрихкод Из ЭлементКоллекции.Штрихкоды Цикл
			Штрихкоды.Добавить(Штрихкод);
		КонецЦикла;
		
	КонецЦикла;
	
	Артикулы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Артикулы);
	Штрихкоды = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Штрихкоды);
		
	Если ЗначениеЗаполнено(Штрихкоды) Тогда
		ОтборШтрихКоды.ЗагрузитьЗначения(Штрихкоды);
	ИначеЕсли ЗначениеЗаполнено(Артикулы) Тогда
		ОтборАртикулы.ЗагрузитьЗначения(Артикулы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредложениеВКорзинуПослеОповещения(Параметр)
	
	Количество = ?(Параметр.Свойство("Количество"), Параметр.Количество, Неопределено);
	
	Если ТипЗнч(Количество) = Тип("Число") И Количество < 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьТоварыДляЗаказа(Параметр, Количество);
	СтрокаТовары = Товары.НайтиСтроки(Новый Структура("Идентификатор", Параметр.Идентификатор));
	
	СтрокаСписка = Неопределено;
	Если Элементы.Список.ТекущиеДанные <> Неопределено
		И Элементы.Список.ТекущиеДанные.Идентификатор = Параметр.Идентификатор Тогда
		СтрокаСписка = Элементы.Список.ТекущиеДанные;
	Иначе
		СтрокаСписка = Список.НайтиСтроки(Новый Структура("Идентификатор", Параметр.Идентификатор));
		Если СтрокаСписка.Количество() Тогда
			СтрокаСписка = СтрокаСписка[0];
		Иначе
			СтрокаСписка = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаСписка <> Неопределено Тогда
		Если Количество = 0 Тогда
			УстановитьГиперссылкуИконкуКоличества(СтрокаСписка, 0);
		ИначеЕсли СтрокаТовары.Количество() Тогда
			УстановитьГиперссылкуИконкуКоличества(СтрокаСписка, СтрокаТовары[0].Количество);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьНадписьИтогов();
	
	Если Параметр.Свойство("Количество") Тогда
		Количество = Параметр.Количество;
	Иначе
		Количество = КоличествоТовараВЗаказе(Параметр.Идентификатор);
	КонецЕсли;
	
	Если Количество <> 0 Тогда
		
		ИдентификаторОбрабатываемогоПредложения = Параметр.Идентификатор;
		
		ПодключитьОбработчикОжидания("ДобавитьТоварПослеОжидания", 1, Истина);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварПослеОжидания()
	
	СтрокаСписка = ТорговоеПредложениеСпискаПоИдентификатору(ИдентификаторОбрабатываемогоПредложения);
	
	Если СтрокаСписка <> Неопределено Тогда
		СтрокаСписка.ОбрабатываетсяЗаданием = Истина;
	КонецЕсли;
	
	Количество = КоличествоТовараВЗаказе(ИдентификаторОбрабатываемогоПредложения);
	
	ДобавитьТоварИзменитьКоличество(ИдентификаторОбрабатываемогоПредложения, Количество);	
	
	ИдентификаторОбрабатываемогоПредложения = "";
	
КонецПроцедуры

&НаКлиенте
Функция ТорговоеПредложениеСпискаПоИдентификатору(ИдентификаторПредложения)
	
	СтрокиСписка = Список.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторПредложения));
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(СтрокиСписка) Тогда
		Результат = СтрокиСписка[0];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеКоличестваТоваровВКорзине(Количество)
	
	Если ЗначениеЗаполнено(Количество) Тогда
		Результат = СтрШаблон(НСтр("ru = 'В корзине: %1'"), Количество);
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОрганизации()
	
	Элементы.ПредставлениеОрганизации.Видимость = Ложь;
	
	ЗарегистрированныеОрганизации = БизнесСеть.ЗарегистрированныеОрганизации();
	
	Если Не ЗначениеЗаполнено(ЗарегистрированныеОрганизации) Тогда
		Возврат;
	КонецЕсли;
	
	Организации.ЗагрузитьЗначения(ЗарегистрированныеОрганизации);
	
	ОтборОрганизация = ЗарегистрированныеОрганизации[0];
	
	Если ЗарегистрированныеОрганизации.Количество() > 1 Тогда
		СформироватьПредставлениеОрганизации();
		Элементы.ПредставлениеОрганизации.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеОрганизации()
	
	ПредставлениеОрганизации = СтрШаблон("Поиск предложений для <a href = ""ВыборОрганизации"">%1</a>", ОтборОрганизация);
	
	Элементы.ПредставлениеОрганизации.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ПредставлениеОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборОрганизация = Результат.Значение;
	
	ПослеВыбораОрганизацииНаСервере();
		
	НайтиТорговыеПредложения();
	
КонецПроцедуры

&НаСервере
Процедура ПослеВыбораОрганизацииНаСервере()
	
	БизнесСеть.ЗаполнитьРегионыПоиска(
		"ТорговыеПредложения",
		ОтборОрганизация, 
		РегионПоиска, 
		РегионЗаголовок, 
		ИдентификаторыРегионов);
	
	СформироватьПредставлениеОрганизации();
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКартинкуКомандыНайти(
			ЭтоДлительнаяОперация, 
			НайтиПредложениеКартинка, 
			КартинкаЗагрузкиКатегорий = Неопределено)
	
	НайтиПредложениеКартинка.Доступность = Не ЭтоДлительнаяОперация;
	
	Если КартинкаЗагрузкиКатегорий <> Неопределено Тогда
		КартинкаЗагрузкиКатегорий.Видимость = ЭтоДлительнаяОперация;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеПоиска(ДополнительныеПараметры = Неопределено)
	
	// Инициализация обработчик ожидания завершения.
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения                  = НСтр("ru = 'Поиск торговых предложений.'");
	ПараметрыОжидания.ВыводитьПрогрессВыполнения      = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания            = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения               = Истина;
	ПараметрыОжидания.Вставить("ИдентификаторЗадания", ФоновоеЗаданиеПоиска.ИдентификаторЗадания);
	
	ОбработкаЗавершенияПоиска = Новый ОписаниеОповещения("НайтиТорговыеПредложенияЗавершение",
		ЭтотОбъект, ДополнительныеПараметры);
		
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗаданиеПоиска, ОбработкаЗавершенияПоиска, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводКоличестваЗавершение(Количество, ДополнительныеПараметры) Экспорт
	
	Если Количество = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	МинимальноеКоличество = ДополнительныеПараметры.ПараметрыОповещения.МинимальноеКоличество;
	КратностьУпаковки     = ДополнительныеПараметры.ПараметрыОповещения.КратностьУпаковки;
	
	Если Не ТорговыеПредложенияКлиент.КоличествоВведеноКорректно(Количество, МинимальноеКоличество, КратностьУпаковки) Тогда
		ДополнительныеПараметры.ПараметрыОповещения.КоличествоВЗаказе = Количество;
		ПоказатьВводКоличества(ДополнительныеПараметры.ПараметрыОповещения);
		Возврат;
	КонецЕсли;
	
	Если Количество <> 0 Тогда
		
		ДополнительныеПараметры.ПараметрыОповещения.Вставить("Количество", Количество);
		
		Оповестить("ТорговыеПредложения_ИзменитьКоличествоВЗаказе", ДополнительныеПараметры.ПараметрыОповещения);
		
	Иначе
		ДополнительныеПараметры.ПараметрыОповещения.Вставить("ИдентификаторыПредложений", 
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДополнительныеПараметры.ПараметрыОповещения.Идентификатор));
		Оповестить("ТорговыеПредложения_УдалитьИзЗаказа", ДополнительныеПараметры.ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТоварыПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОчиститьТовары();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьИтогов()
	
	КоличествоПозиций = Товары.Количество();
	
	Если Товары.Количество() = 0 Тогда
		НадписьПодобраноТоваров = НСтр("ru = 'Добавьте торговые предложения в корзину'");
	Иначе
		НадписьПодобраноТоваров = НСтр("ru = 'Торговых предложений в корзине: %1'");
		НадписьПодобраноТоваров = СтрШаблон(
			НадписьПодобраноТоваров, КоличествоПозиций);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиТорговыеПредложения(СледующаяСтраница = Ложь)
	
	КоличествоЗаданийПоискаТП = Макс(КоличествоЗаданийПоискаТП - 1, 0);
	
	ОчиститьСообщения();

	ЗаполнитьЗаголовокФормы();
	
	ЗаполненныеПараметрыЗапроса = ЗаполнитьПараметрыЗапроса(Истина);
	
	ФоновоеЗаданиеПоиска = НайтиТорговыеПредложенияВФоне(ЗаполненныеПараметрыЗапроса, СледующаяСтраница);
	
	Если ФоновоеЗаданиеПоиска <> Неопределено Тогда
		УстановитьКартинкуКомандыНайти(Истина, Элементы.НайтиПредложения);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СледующаяСтраница", СледующаяСтраница);
	ДополнительныеПараметры.Вставить("ИдентификаторЗаданияПоиска", ИдентификаторЗаданияПоиска);
	
	НайтиТорговыеПредложенияПродолжение(Истина, ДополнительныеПараметры);
	
КонецПроцедуры

// Поиск торговых предложений в фоновом задании.
//
// Параметры:
//  ИнтернетПоддержкаПодключена  - Булево - признак подключения Интернет-поддержки.
//  ДополнительныеПараметры      - Структура - состав:
//    * ОбновитьРегионы   - Булево - признак обновления региона отбора.
//    * СледующаяСтраница - Булево - признак загрузки следующей страницы.
// 
// Возвращаемое значение:
//  Структура - длительная операция, см. ДлительныеОперации.ВыполнитьВФоне.
//
&НаСервере
Функция НайтиТорговыеПредложенияВФоне(
			ЗаполненныеПараметрыЗапроса, 
			СледующаяСтраница = Ложь,
			ПолучитьДеревоКатегорий = Ложь,
			ПолучитьДанныеКорзины = Ложь)
	
	ПараметрыЗапроса = ТорговыеПредложенияСлужебный.НовыеПараметрыПоискаТорговыхПредложенийСОтборами(ОтборОрганизация);
	
	ПараметрыЗапроса.ПолучитьДеревоКатегорий = ПолучитьДеревоКатегорий;
	
	Если ИзмененыОтборыКатегорий Тогда
		ПараметрыЗапроса.ПолучитьДеревоКатегорий = Истина; 
	КонецЕсли;
	
	Если ПолучитьДанныеКорзины Тогда
		ПараметрыЗапроса.ПолучитьДанныеКорзины = ПолучитьДанныеКорзины;
		ПараметрыЗапроса.АдресКорзины = АдресКорзины;
	КонецЕсли;
	
	Если ЗаполненныеПараметрыЗапроса <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ЗаполненныеПараметрыЗапроса);
	КонецЕсли;
	
	ДозаполнитьПараметрыЗапроса(ПараметрыЗапроса, СледующаяСтраница);
	
	Элементы.СписокНаименованиеКонтрагента.Видимость = НЕ ЗначениеЗаполнено(Контрагент)
		И НЕ ЗначениеЗаполнено(ИдентификаторКонтрагента);
	
	Если ФоновоеЗаданиеПоиска <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ФоновоеЗаданиеПоиска.ИдентификаторЗадания);
	КонецЕсли;
	
	Задание = Новый Структура("ИмяПроцедуры, Наименование, ПараметрыПроцедуры");
	Задание.Наименование = НСтр("ru = '1С:Бизнес-сеть. Поиск торговых предложений по отборам.'");
	Задание.ИмяПроцедуры = "ТорговыеПредложенияСлужебный.ПоискТорговыхПредложенийПоОтборуВФоне";
	Задание.ПараметрыПроцедуры = ПараметрыЗапроса;
	
	ДозаполнитьПараметрыПроцедуры(Задание.ПараметрыПроцедуры);
	
	ИдентификаторЗаданияПоиска = Новый УникальныйИдентификатор;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры,
		Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура НайтиТорговыеПредложенияПродолжение(Результат, ДополнительныеПараметры)
	
	Если Результат = Неопределено Тогда
		Элементы.ДекорацияДлительнаяЗагрузкаКатегорий.Видимость = Ложь;
		Элементы.ДекорацияЗагрузкаКатегорийИзОтборов.Видимость  = Ложь;
		Элементы.ДекорацияКатегорииЗаголовок.Заголовок          = НСтр("ru = 'Категории не загружены'");
		УстановитьКартинкуКомандыНайти(Ложь, Элементы.НайтиПредложения);
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("Логин") Тогда
		// Повторный вызов метода после подключения к Интернет-поддержке.
		ИнтернетПоддержкаПодключена = Истина;
		ФоновоеЗаданиеПоиска = НайтиТорговыеПредложенияВФоне(Неопределено, Ложь, Истина);
		
	КонецЕсли;
	
	Если ФоновоеЗаданиеПоиска = Неопределено Тогда
		УстановитьКартинкуКомандыНайти(Ложь, Элементы.НайтиПредложения);
		Возврат;
	КонецЕсли;
	
	// Установка картинки длительной операции.
	Если ФоновоеЗаданиеПоиска.Статус = "Выполняется" Тогда
		
		ОжидатьЗавершениеПоиска(ДополнительныеПараметры);
	
	ИначеЕсли ФоновоеЗаданиеПоиска.Статус = "Выполнено" Тогда
		
		НайтиТорговыеПредложенияЗавершение(ФоновоеЗаданиеПоиска, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиТорговыеПредложенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// Инициализация.
	Отказ = Ложь;
	
	Если Не ДополнительныеПараметры = Неопределено
		И ДополнительныеПараметры.Свойство("ИдентификаторЗаданияПоиска")
		И Не ИдентификаторЗаданияПоиска = ДополнительныеПараметры.ИдентификаторЗаданияПоиска Тогда
		Возврат; // Данное задание отменено или не является последним
	КонецЕсли;
	
	// Вывод сообщений из фонового задания.
	ТорговыеПредложенияКлиент.ОбработатьОшибкиФоновогоЗадания(Результат, Отказ);
	Если Результат = Неопределено Или ФоновоеЗаданиеПоиска = Неопределено Тогда
		УстановитьКартинкуКомандыНайти(Ложь, Элементы.НайтиПредложения);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборОрганизация) 
		И БизнесСетьКлиент.ТребуетсяПовторноеПодключениеОрганизации(ОтборОрганизация) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеПодключенияОрганизации", ЭтотОбъект);
		БизнесСетьСлужебныйКлиент.ОткрытьФормуПодключенияОрганизации(ОтборОрганизация, ЭтотОбъект, Оповещение);
		Возврат;
	КонецЕсли;
	
	// Сохранение текущей строки для позиционирования после загрузки.
	ТекущиеДанныеСписка = Неопределено;
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.СледующаяСтраница Тогда
		ТекущиеДанныеСписка = Элементы.Список.ТекущиеДанные.ПолучитьИдентификатор() - 1;
	КонецЕсли;
	
	// Проверка результата поиска.
	Если НЕ Отказ И Результат.Статус = "Выполнено" Тогда
		Если ЗначениеЗаполнено(Результат.АдресРезультата)
			И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
			
				ЗаполнитьТаблицуТорговыхПредложений(Результат.АдресРезультата);
				
				ФоновоеЗаданиеПоиска = Неопределено;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		УстановитьКартинкуКомандыНайти(Ложь, Элементы.НайтиПредложения);
		Возврат;
	КонецЕсли;
	
	ОбновитьНадписьИтогов();
	
	РазвернутьДеревоКатегорий();
	
	// Подготовка данных для элементов постраничной выдачи данных.
	КоличествоСтрок = Список.Количество();
	Если КоличествоСтрок = 0 Тогда
		СостояниеПоиска = НСтр("ru = 'Торговые предложения не найдены'");
	Иначе
		СостояниеПоиска = СтрШаблон(НСтр("ru = 'Отображается торговых предложений: %1'"), 
			Мин((Страницы.Страница + 1) * Страницы.РазмерСтраницы, Страницы.КоличествоСтрок));
	КонецЕсли;
	
	// Позиционирование на текущей строке списка.
	Если ТекущиеДанныеСписка <> Неопределено Тогда
		Элементы.Список.ТекущаяСтрока = ТекущиеДанныеСписка;
	КонецЕсли;
	
	ЭтотОбъект.ТекущийЭлемент = Элементы.Список;
	УстановитьКартинкуКомандыНайти(Ложь, Элементы.НайтиПредложения, Элементы.ДекорацияДлительнаяЗагрузкаКатегорий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	НайтиТорговыеПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоКатегорий()
	
	Если Не Элементы.ПоказатьСкрытьКатегории.Пометка Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоКатегорий = Категории.ПолучитьЭлементы();
	
	Если ДеревоКатегорий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Элементы.Категории.Развернут(ДеревоКатегорий[0].ПолучитьИдентификатор()) Тогда
		Элементы.Категории.Развернуть(ДеревоКатегорий[0].ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьПараметрыЗапроса(ОбновлятьЭлементыОтбора = Истина)
	
	Если ЕстьПодсистемаРаботаСНоменклатурой Тогда
		МодульРаботаСНоменклатуройСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиент");
	КонецЕсли;
	
	ПараметрыЗапроса          = Новый Структура;
	МассивАтрибутов           = Новый Массив;
	
	БыстрыеОтборы.Очистить();
	
	ЭлементыОтборов = ДеревоОтборов.ПолучитьЭлементы();
	
	Для Каждого ЭлементОтбора Из ЭлементыОтборов Цикл
		
		Если НЕ ЭлементОтбора.Отбор Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторОтбора = ЭлементОтбора.Идентификатор;
				
		Если ЭлементОтбора.ФиксированныйОтбор Тогда
			
			ДобавитьБыстрыйОтбор        = Ложь;
	
			Если ИдентификаторОтбора = "Цена" Тогда
				
				Если НЕ ЗначениеЗаполнено(ЭлементОтбора.ИнтервалОт)
					И НЕ ЗначениеЗаполнено(ЭлементОтбора.ИнтервалДо) Тогда
					Продолжить;
				КонецЕсли;
				
				ПараметрыЗапроса.Вставить("ЦенаОт", ЭлементОтбора.ИнтервалОт);
				ПараметрыЗапроса.Вставить("ЦенаДо", ЭлементОтбора.ИнтервалДо);
				
				ДобавитьБыстрыйОтбор = Истина;
				
			ИначеЕсли ИдентификаторОтбора = "СпособДоставки" Тогда
				
				ЭлементыОтборСписок     = ЭлементОтбора.ПолучитьЭлементы();
				СтрокаЗначенийОтборов   = "";
				ВсеЗначенияВыбраны = Истина;
				
				Для Каждого ЭлементСписка Из ЭлементыОтборСписок Цикл
					Если ЭлементСписка.Отбор Тогда
						СтрокаЗначенийОтборов = СтрокаЗначенийОтборов + ?(ПустаяСтрока(СтрокаЗначенийОтборов), "", ", ") + ЭлементСписка.Представление;
					Иначе
						ВсеЗначенияВыбраны = Ложь;
					КонецЕсли;
				КонецЦикла;

				Если ВсеЗначенияВыбраны Тогда
					
					ПредставлениеОтбора = ЭлементОтбора.Представление + ": Все";
										
					БыстрыеОтборы.Добавить(ИдентификаторОтбора, ПредставлениеОтбора);
					
				ИначеЕсли НЕ ПустаяСтрока(СтрокаЗначенийОтборов) Тогда
					
					ПредставлениеОтбора = ЭлементОтбора.Представление + ": " + СтрокаЗначенийОтборов;
					
					БыстрыеОтборы.Добавить(ИдентификаторОтбора, ПредставлениеОтбора);
					
				КонецЕсли;
				
			ИначеЕсли ИдентификаторОтбора = "СИзображением" 
				ИЛИ ИдентификаторОтбора = "ВНаличии" 
				ИЛИ ИдентификаторОтбора = "СоСкидкой" Тогда	
				
				ПараметрыЗапроса.Вставить(ИдентификаторОтбора, Истина);
				ДобавитьБыстрыйОтбор = Истина;
				
			Иначе
				ДобавитьБыстрыйОтбор = Истина;
			КонецЕсли;
			
			Если ДобавитьБыстрыйОтбор Тогда
				
				Если ЗначениеЗаполнено(ЭлементОтбора.ПредставлениеОтбора) Тогда
					ПредставлениеОтбора = ЭлементОтбора.Представление + ": " + ЭлементОтбора.ПредставлениеОтбора;
				Иначе
					ПредставлениеОтбора = ЭлементОтбора.Представление;	
				КонецЕсли;
				
				БыстрыеОтборы.Добавить(ИдентификаторОтбора, ПредставлениеОтбора);
				
			КонецЕсли;

		Иначе
			Если ЕстьПодсистемаРаботаСНоменклатурой Тогда
				СтруктураАтрибутов        = Неопределено;
				МодульРаботаСНоменклатуройСлужебныйКлиент.ОбработатьЭлементыДереваОтборовПоДополнительнымРеквизитам(ЭлементОтбора, БыстрыеОтборы,
					СтруктураАтрибутов, Истина);
				
				ЗаполнитьМассивАтрибутов(МассивАтрибутов, СтруктураАтрибутов, ЭлементОтбора);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если МассивАтрибутов.Количество() Тогда
		ПараметрыЗапроса.Вставить("Свойства", МассивАтрибутов);
	КонецЕсли;
	
	ДобавитьКонтекстныеБыстрыеОтборы(ЭтотОбъект);
	
	Если ОбновлятьЭлементыОтбора Тогда
		ИзменитьБыстрыеОтборыНаФорме();
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьМассивАтрибутов(МассивАтрибутов, СтруктураАтрибутов, ЭлементОтбора)
	
	Если СтруктураАтрибутов <> Неопределено Тогда
		Если ЭлементОтбора.ЗначениеОтбора = "Список" Тогда
			
			МассивИдентификаторовЗначений = СтруктураАтрибутов.ИдентификаторыЗначений;
			Для Каждого ЭлементМассива Из МассивИдентификаторовЗначений Цикл
				
				ПараметрыАтрибутов = ПолучитьПараметрыАтрибутов(
								СтруктураАтрибутов.Идентификатор, ЭлементМассива);
				МассивАтрибутов.Добавить(ПараметрыАтрибутов);
				
			КонецЦикла;
			
		Иначе
			
			Если ТипЗнч(ЭлементОтбора.ЗначениеОтбора) = Тип("Булево") Тогда
				Значение = СтруктураАтрибутов.Значение;
			Иначе
				
				ШаблонЗначения = "%1~%2";
				
				Если ТипЗнч(ЭлементОтбора.ЗначениеОтбора) = Тип("Дата") Тогда
					СтруктураАтрибутов.МинимальноеЗначение = Формат(СтруктураАтрибутов.МинимальноеЗначение,
						"ДФ=yyyy-MM-dd;");
					СтруктураАтрибутов.МаксимальноеЗначение = Формат(
									СтруктураАтрибутов.МаксимальноеЗначение, "ДФ=yyyy-MM-dd;");
				КонецЕсли;
				
				Значение = СтрШаблон(ШаблонЗначения, СтруктураАтрибутов.МинимальноеЗначение,
					СтруктураАтрибутов.МаксимальноеЗначение);
				
			КонецЕсли;
			
			ПараметрыАтрибутов = ПолучитьПараметрыАтрибутов(СтруктураАтрибутов.Идентификатор, Значение);
			МассивАтрибутов.Добавить(ПараметрыАтрибутов);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыАтрибутов(Идентификатор, Значение)
	
	ПараметрыАтрибутов = Новый Структура;
	ПараметрыАтрибутов.Вставить("Идентификатор", Идентификатор);
	ПараметрыАтрибутов.Вставить("Значение", Значение);
	
	Возврат ПараметрыАтрибутов;
	
КонецФункции

&НаСервере
Процедура ДозаполнитьПараметрыЗапроса(ПараметрыЗапроса, Знач СледующаяСтраница = Ложь)
	
	// Постраничный вывод.
	Если СледующаяСтраница Тогда
		Если Страницы.Страница < Страницы.КоличествоСтраниц - 1 Тогда
			Страницы.Страница = Страницы.Страница + 1;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Страницы.Страница = 0;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("Страница",        Страницы.Страница);
	ПараметрыЗапроса.Вставить("РазмерСтраницы",  Страницы.РазмерСтраницы);
	ПараметрыЗапроса.Вставить("Валюта",          Валюта);
	ПараметрыЗапроса.Вставить("Сортировка",      РежимСортировки);
	
	Если ЗначениеЗаполнено(ТекущаяКатегория) Тогда
		ПараметрыЗапроса.Вставить("ИдентификаторКатегории", ТекущаяКатегория);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборНаименование) Тогда
		ПараметрыЗапроса.Вставить("Наименование", ОтборНаименование);
	ИначеЕсли ЗначениеЗаполнено(СтрокаПоиска) Тогда
		ПараметрыЗапроса.Вставить("Наименование", СтрокаПоиска);
	КонецЕсли;
	
	// Сброс наименования, если размер строки менее минимального значения.
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Наименование) 
		И СтрДлина(ПараметрыЗапроса.Наименование) < 3 Тогда
		ПараметрыЗапроса.Наименование = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборАртикулы) Тогда
		ПараметрыЗапроса.Артикулы = ОтборАртикулы.ВыгрузитьЗначения();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборШтрихкоды) Тогда
		ПараметрыЗапроса.Штрихкоды = ОтборШтрихкоды.ВыгрузитьЗначения();
	КонецЕсли;
	
	// Регионы поиска.
	Если (ЗначениеЗаполнено(РегионПоиска) И РегионПоиска.РежимОтбора <> 0)
		И ИдентификаторыРегионов.Количество() Тогда
		
		ЗначениеИдентификаторыРегионов = РеквизитФормыВЗначение("ИдентификаторыРегионов", Тип("ТаблицаЗначений"));
		Для Каждого ЭлементКоллекции Из ЗначениеИдентификаторыРегионов Цикл
			НастройкиРегионов = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ЭлементКоллекции);
			Если ВозможенСамовывоз = ВозможнаДоставка Тогда 
				// Если выбраны обе опции или не выбрана ни одна - это одно и тоже, надо установить отбор по всем способам доставки.
				ПараметрыЗапроса.РегионыПоиска.Добавить(НастройкиРегионов);
			ИначеЕсли (ВозможенСамовывоз И ЭлементКоллекции.ДляСамовывоза)
				ИЛИ (ВозможнаДоставка И ЭлементКоллекции.ДляДоставки) Тогда
				// Если выбрана одна из опций - это осознанное решение и отбор делается по одному способу доставки.
				ПараметрыЗапроса.РегионыПоиска.Добавить(НастройкиРегионов);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		СтрокаПараметрыКонтрагента = ПараметрыЗапроса.Контрагенты.Добавить();
		СтрокаПараметрыКонтрагента.Ссылка = Контрагент;
	КонецЕсли;

	Если ЗначениеЗаполнено(ОтборНоменклатураСервиса) Тогда
		НовыйОтбор = ПараметрыЗапроса.НоменклатураСервиса.Добавить();
		НовыйОтбор.ИдентификаторНоменклатуры = ОтборНоменклатураСервиса;
		НовыйОтбор.ИдентификаторХарактеристики = ОтборХарактеристикаСервиса;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИННКонтрагента) ИЛИ ЗначениеЗаполнено(КППКонтрагента) ИЛИ ЗначениеЗаполнено(НаименованиеКонтрагента) Тогда
		СтрокаПараметрыКонтрагента = ПараметрыЗапроса.Контрагенты.Добавить();
		Если ЗначениеЗаполнено(ИННКонтрагента) Тогда
			СтрокаПараметрыКонтрагента.ИНН = ИННКонтрагента;
		КонецЕсли;
		Если ЗначениеЗаполнено(ИННКонтрагента) Тогда
			СтрокаПараметрыКонтрагента.КПП = КППКонтрагента;
		КонецЕсли;
		ТипЧисло = Новый ОписаниеТипов("Число");
		Если ПустаяСтрока(ИННКонтрагента) И ТипЧисло.ПривестиЗначение(НаименованиеКонтрагента) <> 0 Тогда
			СтрокаПараметрыКонтрагента.ИНН = НаименованиеКонтрагента;
		Иначе
			СтрокаПараметрыКонтрагента.Наименование = НаименованиеКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьКонтекстныеБыстрыеОтборы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДозаполнитьПараметрыПроцедуры(ПараметрыПоиска)
	
	ПараметрыПоиска.Вставить("КодВалюты", ТорговыеПредложенияПовтИсп.КодВалюты(ПараметрыПоиска.Валюта));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбработатьРезультатПоиска(АдресРезультата, ОтборОрганизация)
		
	Результат = БизнесСеть.ПолучитьУдалитьИзВременногоХранилища(АдресРезультата);
	УдалитьИзВременногоХранилища(АдресРезультата);
	
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеСервиса = Новый Структура;
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("Список") Тогда
		
		МассивПредложений  = Новый Массив;
		ТаблицаПредложений = Результат.Список;
		Если ТаблицаПредложений <> Неопределено Тогда
			
			Для Каждого ЭлементКоллекции Из ТаблицаПредложений Цикл
				
				// Проверка единицы измерения, если есть упаковка.
				Если ЗначениеЗаполнено(ЭлементКоллекции.НаименованиеУпаковки)
					И ЭлементКоллекции.НаименованиеУпаковки <> ЭлементКоллекции.ЕдиницаИзмерения Тогда
					ЭлементКоллекции.ЕдиницаИзмерения = ЭлементКоллекции.НаименованиеУпаковки;
				КонецЕсли;
				
				// Проверка возврата описания.
				Если ЗначениеЗаполнено(ЭлементКоллекции.Заголовок) Тогда
					ЭлементКоллекции.НаименованиеНоменклатуры = ЭлементКоллекции.Заголовок;
				КонецЕсли;
				
				СтруктураПредложений = НоваяСтруктураСпискаПредложений();
				ЗаполнитьЗначенияСвойств(СтруктураПредложений, ЭлементКоллекции);
				
				РассчитатьСуммыСтрокиСписка(СтруктураПредложений);
				
				СтруктураПредложений.МинимальноеКоличество = 
					МинимальноеКоличествоДляЗаказа(ЭлементКоллекции.ЦеныВВалютеПредложения);
				
				Если Не ЗначениеЗаполнено(СтруктураПредложений.КратностьУпаковки) Тогда
					СтруктураПредложений.КратностьУпаковки = 1;
				КонецЕсли;
				
				ЗаполнитьЦенаДоСкидки(СтруктураПредложений, ЭлементКоллекции.ЦеныВВалютеПредложения);
				ЗаполнитьПерсональнуюЦену(СтруктураПредложений, ЭлементКоллекции, ОтборОрганизация);
				
				МассивПредложений.Добавить(СтруктураПредложений);
				
			КонецЦикла;
		КонецЕсли;
		
		Если МассивПредложений.Количество() Тогда
			ДанныеСервиса.Вставить("МассивПредложений", МассивПредложений);
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.Свойство("Страницы") Тогда
		ДанныеСервиса.Вставить("Страницы", Результат.Страницы);
	КонецЕсли;
	
	ДанныеСервиса.Вставить("ДеревоКатегорий", Результат.ДеревоКатегорий);
	ДанныеСервиса.Вставить("ДанныеКорзины",   Результат.ДанныеКорзины);
	
	Возврат ДанныеСервиса;
	
КонецФункции

&НаСервереБезКонтекста
Функция МинимальноеКоличествоДляЗаказа(Цены)
	
	Результат = 0;
	
	Если Не ЗначениеЗаполнено(Цены) Тогда
		Результат = 1;
		Возврат Результат;
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из Цены Цикл
		
		Если ЭлементКоллекции.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;	
			
		Если Результат = 0 Тогда
			Результат = ЭлементКоллекции.Количество;
			Продолжить;
		КонецЕсли;
			
		Результат = Мин(Результат, ЭлементКоллекции.Количество);
		
	КонецЦикла;
	
	Если Результат = 0 Тогда
		Результат = 1;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция НоваяСтруктураСпискаПредложений()
	
	СтруктураПредложений = Новый Структура;
	
	СтруктураПредложений.Вставить("Идентификатор",            "");
	СтруктураПредложений.Вставить("НаименованиеНоменклатуры", "");
	СтруктураПредложений.Вставить("ПредставлениеЦены",         "");
	СтруктураПредложений.Вставить("ИдентификаторКонтрагента", "");
	СтруктураПредложений.Вставить("НаименованиеКонтрагента",  "");
	СтруктураПредложений.Вставить("АртикулПоставщика",        "");
	СтруктураПредложений.Вставить("ЕдиницаИзмерения",         "");
	СтруктураПредложений.Вставить("СрокПоставки",             0);
	СтруктураПредложений.Вставить("ИННКонтрагента",           "");
	СтруктураПредложений.Вставить("КППКонтрагента",           "");
	СтруктураПредложений.Вставить("КодЕдиницыИзмерения",      "");
	СтруктураПредложений.Вставить("Наличие",                   0);
	СтруктураПредложений.Вставить("ПредставлениеОстатков",    "");
	СтруктураПредложений.Вставить("Количество",               0);
	СтруктураПредложений.Вставить("СтавкаНДС",                "");
	СтруктураПредложений.Вставить("ЦенаВключаетНДС",          Ложь);
	СтруктураПредложений.Вставить("СуммаНДС",                 0);
	СтруктураПредложений.Вставить("Цена",                     0);
	СтруктураПредложений.Вставить("КратностьУпаковки",        0);
	СтруктураПредложений.Вставить("МинимальноеКоличество",    0);
	СтруктураПредложений.Вставить("ЦенаПредложения",          0);
	СтруктураПредложений.Вставить("ВалютаПредложения",        Неопределено);
	СтруктураПредложений.Вставить("ЦенаДоСкидки",             0);
	СтруктураПредложений.Вставить("ПерсональнаяЦена",         Ложь);
	
	Возврат СтруктураПредложений;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьЦенаДоСкидки(СтруктураПредложений, ЦеныВВалютеПредложения)
	
	Если ЦеныВВалютеПредложения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЦены = ЦеныВВалютеПредложения.Найти(СтруктураПредложений.ЦенаПредложения);
	Если СтрокаЦены <> Неопределено И СтрокаЦены.ЦенаДоСкидки <> Неопределено Тогда
		СтруктураПредложений.ЦенаДоСкидки = СтрокаЦены.ЦенаДоСкидки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПерсональнуюЦену(СтруктураПредложений, ЭлементКоллекции, ОтборОрганизация)
	
	ЦелевыеКонтрагенты = ЭлементКоллекции.ЦелевыеКонтрагенты;
	Если ЦелевыеКонтрагенты = Неопределено Или ЦелевыеКонтрагенты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоисковыеДанные = "";
	Если ОтборОрганизация.ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ПоисковыеДанные = ОтборОрганизация.ИНН;
	ИначеЕсли ОтборОрганизация.ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ШаблонПоисковыеДанные = "%1:%2";
		ПоисковыеДанные = СтрШаблон(ШаблонПоисковыеДанные, ОтборОрганизация.ИНН, ОтборОрганизация.КПП);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ПоисковыеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаКонтрагента = ЦелевыеКонтрагенты.Найти(ПоисковыеДанные, "ИНН_КПП");
	Если СтрокаКонтрагента <> Неопределено Тогда
		СтруктураПредложений.ПерсональнаяЦена = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуТорговыхПредложений(АдресРезультата)
	
	ДанныеПоискаИзСервиса = ОбработатьРезультатПоиска(АдресРезультата, ОтборОрганизация);	
	
	Если ДанныеПоискаИзСервиса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПоискаИзСервиса.ДеревоКатегорий) Тогда
		ЗначениеВРеквизитФормы(ДанныеПоискаИзСервиса.ДеревоКатегорий, "Категории");
		ИзмененыОтборыКатегорий = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПоискаИзСервиса.ДанныеКорзины) Тогда
		ПеречитатьКорзину(ДанныеПоискаИзСервиса.ДанныеКорзины);
	КонецЕсли;	
	
	Если ДанныеПоискаИзСервиса.Свойство("Страницы") Тогда
		ЗаполнитьЗначенияСвойств(Страницы, ДанныеПоискаИзСервиса.Страницы);
	КонецЕсли;
	
	МассивТорговыхПредложений = Неопределено;
	ДанныеПоискаИзСервиса.Свойство("МассивПредложений", МассивТорговыхПредложений);
	
	Если МассивТорговыхПредложений = Неопределено Тогда
		Список.Очистить();
	Иначе
		// Если страница не равна 0 значит запрашивается следующая страница.
		Если Страницы.Страница = 0 Тогда
			Список.Очистить();
		Иначе
			// Удаление последней строки "Показать еще".
			Список.Удалить(Список.Количество() - 1);
		КонецЕсли;
		
		Для Каждого ЭлементКоллекции Из МассивТорговыхПредложений Цикл
			НоваяСтрока = Список.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
			УстановитьЦенуСтрокиСписка(НоваяСтрока, ОтображатьЦеныБезНДС);
			УстановитьГиперссылкуИконкуКоличества(НоваяСтрока, 0);
		КонецЦикла;
		
		КоличествоПредложений = МассивТорговыхПредложений.Количество();
		Если КоличествоПредложений = Страницы.РазмерСтраницы Тогда
			НоваяСтрока = Список.Добавить();
			НоваяСтрока.ГиперссылкаПоказатьЕще = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьКоличествоТорговыхПредложений();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьГиперссылкуИконкуКоличества(СтрокаДанных, Количество)
	
	СтрокаДанных.ГиперссылкаДобавить = ПредставлениеКоличестваТоваровВКорзине(Количество);
	СтрокаДанных.ГиперссылкаОчистить = ?(ЗначениеЗаполнено(СтрокаДанных.ГиперссылкаДобавить), 0, 1);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьКоличествоТорговыхПредложений()
	
	Для каждого ТекущееПредложение Из Список Цикл
		УстановитьГиперссылкуИконкуКоличества(ТекущееПредложение, 0);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКоличествоТорговыхПредложений()
	
	Для Каждого СтрокаТовары Из Товары Цикл
		СтрокиСписка = Список.НайтиСтроки(Новый Структура("Идентификатор", СтрокаТовары.Идентификатор));
		Если СтрокиСписка.Количество() Тогда
			УстановитьГиперссылкуИконкуКоличества(СтрокиСписка[0], СтрокаТовары.Количество);

		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РассчитатьСуммыСтрокиСписка(СтрокаДанных)
	
	Если СтрокаДанных.ЦенаПредложения = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	СуммыДаннымСтроки = СуммыПоЦенеКоличеству(
		СтрокаДанных.ЦенаПредложения, 
		1,
		СтрокаДанных.СтавкаНДС,
		СтрокаДанных.ЦенаВключаетНДС);
		
	СтрокаДанных.СуммаНДС = СуммыДаннымСтроки.СуммаНДС;	
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция СуммыПоЦенеКоличеству(Цена, Количество, СтавкаНДС, ЦенаВключаетНДС)
	
	Результат = Новый Структура;
	
	Результат.Вставить("Сумма",    0);
	Результат.Вставить("СуммаНДС", 0);
	
	РеквизитыСтроки = ОписаниеРеквизитовСтроки();
	
	РеквизитыСтроки.СтавкаНДС       = СтавкаНДС;
	РеквизитыСтроки.Цена            = Цена;
	РеквизитыСтроки.ЦенаВключаетНДС = ЦенаВключаетНДС;
	РеквизитыСтроки.Количество      = Количество;
	
	ТорговыеПредложенияПереопределяемый.ПересчитатьСуммуПоСтроке(РеквизитыСтроки);
	
	Результат.Сумма    = РеквизитыСтроки.СуммаСНДС;
	Результат.СуммаНДС = РеквизитыСтроки.СуммаНДС;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьЦенуСтрокиСписка(СтрокаДанных, ОтображатьЦеныБезНДС)
		
	ИтоговаяЦена = 0;
	
	Если ОтображатьЦеныБезНДС 
		И СтрокаДанных.ЦенаВключаетНДС	Тогда
		
		ИтоговаяЦена = СтрокаДанных.ЦенаПредложения - СтрокаДанных.СуммаНДС;
		
	ИначеЕсли Не ОтображатьЦеныБезНДС 
		И НЕ СтрокаДанных.ЦенаВключаетНДС Тогда	
		
		ИтоговаяЦена  = СтрокаДанных.ЦенаПредложения + СтрокаДанных.СуммаНДС;
		
	Иначе
			
		ИтоговаяЦена = СтрокаДанных.ЦенаПредложения;
		
	КонецЕсли;

	Если ЗначениеЗаполнено(ИтоговаяЦена) Тогда
		
		СтрокаДанных.ПредставлениеЦены = ТорговыеПредложенияСлужебный.ПредставлениеЦены(ИтоговаяЦена);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеРеквизитовСтроки()
	
	Результат = Новый Структура;	
	
	Результат.Вставить("СтавкаНДС",       Неопределено);
	Результат.Вставить("Цена",            0);
	Результат.Вставить("ЦенаВключаетНДС", Ложь);
	Результат.Вставить("Количество",      0);
	Результат.Вставить("Сумма",           0);
	Результат.Вставить("СуммаНДС",        0);
	Результат.Вставить("СуммаСНДС",       0);
	Результат.Вставить("ПроцентСкидки",   0);
	Результат.Вставить("СуммаСкидки",     0);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Если ТипЗнч(ИдентификаторЗадания) = Тип("Строка") Тогда
			ИдентификаторЗадания = Новый УникальныйИдентификатор(ИдентификаторЗадания);
		КонецЕсли;

		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТовары()
	
	Для Каждого ПозицияТовары Из Товары Цикл
		СтрокаСписка = Список.НайтиСтроки(Новый Структура("Идентификатор", ПозицияТовары.Идентификатор));
		Если СтрокаСписка.Количество() Тогда
			УстановитьГиперссылкуИконкуКоличества(СтрокаСписка[0], 0);
		КонецЕсли;
	КонецЦикла;
	Товары.Очистить();
	ОбновитьНадписьИтогов();
	
	УдалитьКорзину();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКорзину()
	
	ПараметрыМетода = Новый Структура("Организация, АдресКорзины", ОтборОрганизация, АдресКорзины);
	
	ТорговыеПредложенияКлиент.УдалитьКорзину(ПараметрыМетода, ЭтотОбъект);
	
	УдалитьАдресКорзиныИзЛокальногоХранилища();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьАдресКорзиныИзЛокальногоХранилища()
	
	ТорговыеПредложенияСлужебный.УдалитьАдресКорзиныИзЛокальногоХранилища();
	
	АдресКомандыДобавитьТовар = "";
	АдресКорзины = "";
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьРежимСортировки(Элементы, НовыйРежим, Валюта, ОтображатьЦеныБезНДС)

	// Установка пометки.
	Для Каждого Элемент Из Элементы.ПодменюСортировка.ПодчиненныеЭлементы Цикл
		Элемент.Пометка = (Элемент.Имя = НовыйРежим);
	КонецЦикла;
	
	УстановитьЗаголовокКолонкиЦена(Элементы, Валюта, ОтображатьЦеныБезНДС);
	
	Стрелка = ?(СтрНайти(НовыйРежим, "Возрастание"), "↑", "↓");
	
	Если СтрНайти(НовыйРежим, "Цена") Тогда
		Элементы.СписокПредставлениеЦены.Заголовок = Элементы.СписокПредставлениеЦены.Заголовок + " " + Стрелка;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокКолонкиЦена(Элементы, Валюта, ОтображатьЦеныБезНДС)
	
	Если ОтображатьЦеныБезНДС Тогда
		ПредставлениеСтатусаНДС = НСтр("ru = '(без НДС)'");
	Иначе
		ПредставлениеСтатусаНДС = НСтр("ru = '(с НДС)'");
	КонецЕсли;
	
	Элементы.СписокПредставлениеЦены.Заголовок = СтрШаблон(НСтр("ru = 'Цена %1'"), ПредставлениеСтатусаНДС);
	
	Элементы.СписокЦена.Заголовок = СтрШаблон(НСтр("ru = 'Цена, %1'"), Валюта);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыДляЗаказа(ПараметрыТовара, Количество)
	
	РежимДобавления = Ложь;
	
	СтрокиСписка = Список.НайтиСтроки(Новый Структура("Идентификатор", ПараметрыТовара.Идентификатор));
	
	СтрокаСписка = Неопределено;
	
	Если ЗначениеЗаполнено(СтрокиСписка) Тогда
		СтрокаСписка = СтрокиСписка[0];
	КонецЕсли;
	
	СтрокиТоваров = Товары.НайтиСтроки(Новый Структура("Идентификатор", ПараметрыТовара.Идентификатор));
	
	ТоварЕстьВКорзине = СтрокиТоваров.Количество();
	
	Если Количество = Неопределено Тогда
		
		РежимДобавления = Истина;
		
		Если СтрокаСписка <> Неопределено Тогда
			
			Если ТоварЕстьВКорзине Тогда
				Количество = СтрокаСписка.КратностьУпаковки;
			Иначе
				Количество = СтрокаСписка.МинимальноеКоличество;
			КонецЕсли;
			
		КонецЕсли;

		Если Не ЗначениеЗаполнено(Количество) Тогда
			Количество = 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТоварЕстьВКорзине Тогда
		
		// Корректировка существующей строки
		
		СтрокаТоваров = СтрокиТоваров[0];
		СтрокаТоваров.Количество = ?(РежимДобавления, СтрокаТоваров.Количество + Количество, Количество);
		
		Если СтрокаТоваров.Количество <= 0 Тогда
			Товары.Удалить(Товары.Индекс(СтрокаТоваров));
			Возврат;
		КонецЕсли;
		
	Иначе
		
		// Добавление новой строки
		
		СтрокаТоваров = Товары.Добавить();
		
		Если СтрокаСписка <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТоваров, СтрокаСписка);
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаТоваров, ПараметрыТовара);
		КонецЕсли;
		
		СтрокаТоваров.Количество = Количество;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Гиперссылка списка формы Добавить - предложение не обрабатывается.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокГиперссылкаДобавить.Имя);
	
	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;	
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ГиперссылкаДобавить");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ОбрабатываетсяЗаданием");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
		
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'В корзину'"));
	
	// Гиперссылка списка формы Добавить - предложение обрабатывается.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокГиперссылкаДобавить.Имя);
	
	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;	
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ГиперссылкаДобавить");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ОбрабатываетсяЗаданием");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
		
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'В корзину'"));
	
	// Гиперссылка списка формы Добавить - предложение добавлено в корзину.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокГиперссылкаДобавить.Имя);
	
	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;	
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ГиперссылкаДобавить");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ОбрабатываетсяЗаданием");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветАкцента);
	
	// Гиперссылка списка формы Добавить - предложение добавлено в корзину.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокГиперссылкаДобавить.Имя);
	
	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;	
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ГиперссылкаДобавить");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ОбрабатываетсяЗаданием");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветАкцента);
	
	// Гиперссылка списка формы Очистить - предложение не обрабатывается.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокГиперссылкаОчистить.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ОбрабатываетсяЗаданием");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Истина);
	
	// Гиперссылка списка формы Очистить - предложение обрабатывается.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокГиперссылкаОчистить.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ОбрабатываетсяЗаданием");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	// Срок поставки "в наличии".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСрокПоставки.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.СписокСрокПоставки.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 1;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'в наличии'"));
	
	// Срок поставки "по запросу".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСрокПоставки.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.СписокСрокПоставки.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Неопределено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'по запросу'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", 
		ГоризонтальноеПоложение.Право);
	
	// Цена в валюте публикации "по запросу".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПредставлениеЦены.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.СписокПредставлениеЦены.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'по запросу'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);

	// Цена в валюте поиска "по запросу".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЦена.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.СписокЦена.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'по запросу'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);

	
	// Наличие "по запросу".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокНаличиеТекстом.Имя);
	
	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;	
		
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.СписокНаличие.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Количество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
		
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Оформление дерева отборов.
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбораГиперссылка.Имя);
	
	ОтборГруппа = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ПредставлениеОтбора");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ФиксированноеЗначение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылкиБЭД);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Ложь, Ложь, Истина, Ложь, ));
	
	// Оформление видимости колонок для строки Поставщик.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбораГиперссылка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ИмяРеквизита");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Поставщик";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбора.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ИмяРеквизита");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = "Поставщик";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Скрытие пустой колонки для списочных отборов.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбораГиперссылка.Имя);
	
	ОтборГруппа = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ЗначениеОтбора");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Неопределено;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ФиксированноеЗначение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ФиксированныйОтбор");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Оформление шрифта строки Поставщик.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбора.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ИмяРеквизита");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Поставщик";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Ложь, Ложь, Ложь, Ложь, ));
	
	// Оформление цвета строки Поставщик, если представление отбора не заполнено.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбора.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ПредставлениеОтбора");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'ИНН, наименование - от 3 симв.'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
		
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбора.Имя);
	
	ОтборГруппа = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ПредставлениеОтбора");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "";
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("АктивизированаСтрокаДереваОтборов");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ДосьеРамкаСтрокиЦвет);

	// Выделение установленных отборов дерева жирным шрифтом.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставление.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОтборов.Отбор");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Элементы[Элементы.ДеревоОтборовПредставление.Имя].Шрифт, , ,
		Истина, Ложь, Ложь, Ложь, ));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Элементы.СоздатьОтправитьЗаказы.Доступность           = ТорговыеПредложения.ПравоСозданияЗаказовПоставщику();
	Элементы.ГруппаЗаголовкаСвойств.Видимость             = Ложь;
	Элементы.ДекорацияДлительнаяЗагрузкаСвойств.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРегистрациюОрганизаций()
	
	ОрганизацияЗарегистрирована = БизнесСеть.ОрганизацияПодключена();
	ТребуетсяРегистрацияОрганизации = НЕ ОрганизацияЗарегистрирована;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСписка()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ПараметрыОткрытия = ПараметрыВыбораСтроки(ТекущиеДанные);
		
	ТекущаяКолонка = Элементы.Список.ТекущийЭлемент;
	
	Если ТекущаяКолонка = Элементы.СписокГиперссылкаДобавить Тогда
		
		ДобавитьПредложениеВКорзину(ПараметрыОткрытия, ТекущиеДанные);
				
	ИначеЕсли ТекущаяКолонка = Элементы.СписокГиперссылкаОчистить Тогда
		
		УдалитьПредложениеИзКорзины(ПараметрыОткрытия, ТекущиеДанные);
		
	ИначеЕсли ТекущаяКолонка = Элементы.СписокГиперссылкаПоказатьЕще Тогда
		
		НайтиТорговыеПредложения(Истина);
		
	Иначе
		ТорговыеПредложенияКлиент.ОткрытьТорговоеПредложение(ПараметрыОткрытия, ЭтотОбъект, ТекущиеДанные.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыВыбораСтроки(ТекущиеДанные)
	
	Результат = Новый Структура;
	
	Результат.Вставить("Организация",              ОтборОрганизация);
	Результат.Вставить("Идентификатор",            ТекущиеДанные.Идентификатор);
	Результат.Вставить("ИдентификаторЗаказа",      ИдентификаторЗаказа);
	Результат.Вставить("ИдентификаторКонтрагента", ТекущиеДанные.ИдентификаторКонтрагента);
	Результат.Вставить("Валюта",                   Валюта);
	Результат.Вставить("Цена",                     ТекущиеДанные.Цена);
	Результат.Вставить("Наименование",             ТекущиеДанные.НаименованиеНоменклатуры);
	Результат.Вставить("СтавкаНДС",                ТекущиеДанные.СтавкаНДС);
	Результат.Вставить("ЦенаВключаетНДС",          ТекущиеДанные.ЦенаВключаетНДС);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьПредложениеВКорзину(ПараметрыОткрытия, ТекущиеДанные)
	
	Если ТекущиеДанные.ОбрабатываетсяЗаданием Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьКоличество Тогда
		
		КоличествоВЗаказе = КоличествоТовараВЗаказе(ТекущиеДанные.Идентификатор);
		
		ПараметрыОткрытия.Вставить("КоличествоВЗаказе",     КоличествоВЗаказе);
		ПараметрыОткрытия.Вставить("КратностьУпаковки",     ТекущиеДанные.КратностьУпаковки);
		ПараметрыОткрытия.Вставить("МинимальноеКоличество", ТекущиеДанные.МинимальноеКоличество);
		
		ПоказатьВводКоличества(ПараметрыОткрытия);

	Иначе
		
		Оповестить("ТорговыеПредложения_ИзменитьКоличествоВЗаказе", ПараметрыОткрытия);
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьКорзину(Знач Организация, АдресКорзины, АдресКомандыДобавитьТовар)
	
	Отказ = Ложь;
	
	ДанныеКорзины = ТорговыеПредложенияСлужебный.СоздатьПрочитатьКорзину(Организация, Отказ);
	
	Если Отказ ИЛИ Не ЗначениеЗаполнено(ДанныеКорзины) Тогда
		Возврат;
	КонецЕсли;

	АдресКорзины              = ДанныеКорзины.АдресКорзины;
	АдресКомандыДобавитьТовар = ДанныеКорзины.АдресаКоманд.ДобавитьТовар;
	
	ТорговыеПредложенияСлужебный.СохранитьАдресКорзиныВЛокальномХранилище(АдресКорзины);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВводКоличества(ПараметрыОповещения)
	
	ВводКоличестваЗавершение = Новый ОписаниеОповещения(
		"ВводКоличестваЗавершение",
		ЭтотОбъект,
		Новый Структура("ПараметрыОповещения", ПараметрыОповещения));
		
	ПоказатьВводЧисла(
		ВводКоличестваЗавершение, 
		ПараметрыОповещения.КоличествоВЗаказе, 
		НСтр("ru = 'Укажите количество'"), 15, 3);
	
КонецПроцедуры

&НаКлиенте
Функция КоличествоТовараВЗаказе(ИдентификаторПредложения)
	
	Результат = 0;
	
	СтрокаЗаказа = Товары.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторПредложения));
	Если СтрокаЗаказа.Количество() Тогда
		Результат = СтрокаЗаказа[0].Количество;
	Иначе
		Результат = 0;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьТоварИзменитьКоличество(ИдентификаторПредложения, Количество, ИдентификаторЗадания = Неопределено);
	
	Если Не ЗначениеЗаполнено(АдресКорзины) Тогда
		
		 СоздатьКорзину(ОтборОрганизация, АдресКорзины, АдресКомандыДобавитьТовар);
		
		Если Не ЗначениеЗаполнено(АдресКорзины) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("Идентификатор", ИдентификаторПредложения);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействияНадТоваром", ЭтотОбъект, ПараметрыОповещения);
	
	ПараметрыРаботыСТоваром = ТорговыеПредложенияКлиент.ОписаниеПараметровРаботыСТоваромКорзины();
	
	ПараметрыРаботыСТоваром.Организация                    = ОтборОрганизация;
	ПараметрыРаботыСТоваром.АдресКомандыИзменитьКоличество = КомандыТорговогоПредложения(ИдентификаторПредложения).ИзменитьКоличество;
	ПараметрыРаботыСТоваром.Количество                     = Количество;
	ПараметрыРаботыСТоваром.АдресКорзины                   = АдресКорзины;
	ПараметрыРаботыСТоваром.ПрочитатьКорзину               = Истина;
	
	Если Не ЗначениеЗаполнено(ПараметрыРаботыСТоваром.АдресКомандыИзменитьКоличество) Тогда
		ПараметрыРаботыСТоваром.АдресКомандыДобавить              = АдресКомандыДобавитьТовар;
		ПараметрыРаботыСТоваром.ИдентификаторТорговогоПредложения = ИдентификаторПредложения;
	КонецЕсли;
	
	ТорговыеПредложенияКлиент.ВыполнитьДействиеСТоваромКорзины(ПараметрыРаботыСТоваром, ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияДействияНадТоваром(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокиПредложений = Список.НайтиСтроки(ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(СтрокиПредложений) Тогда
		СтрокиПредложений[0].ИдентификаторЗадания = Неопределено;
		СтрокиПредложений[0].ОбрабатываетсяЗаданием = Ложь;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
			
	ПослеВыполненияДействияНадТоваромНаСервере(ДополнительныеПараметры.Идентификатор, Результат.АдресРезультата);
	
	ТорговыеПредложенияКлиент.ОповеститьОбИзмененииКорзины(Результат.АдресРезультата, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеВыполненияДействияНадТоваромНаСервере(ИдентификаторПредложения, АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ЗначениеЗаполнено(Результат.ДанныеКорзины) Тогда
		ЗаполнитьСсылкиКоманд(ИдентификаторПредложения, Результат.ДанныеКорзины);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСсылкиКоманд(ИдентификаторПредложения, ДанныеКорзины)
	
	Для каждого ТекущийЗаказ Из ДанныеКорзины.Заказы Цикл
		Для каждого ТекущийТовар Из ТекущийЗаказ.Товары Цикл
			
			Если ТекущийТовар.Идентификатор <> ИдентификаторПредложения Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТовара = ТоварПоИдентификаторуПредложения(Товары, ИдентификаторПредложения);
			
			Если СтрокаТовара = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			СтрокаТовара.АдресКомандыУдалить            = ТекущийТовар.АдресаКоманд.УдалитьТовар;
			СтрокаТовара.АдресКомандыИзменитьКоличество = ТекущийТовар.АдресаКоманд.УстановитьКоличество;
			
			Возврат;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТоварПоИдентификаторуПредложения(Товары, ИдентификаторПредложения)
	
	СтрокиТоваров = Товары.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторПредложения));
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(СтрокиТоваров) Тогда
		Результат = СтрокиТоваров[0];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СнятьПометкуОтбораСпособДоставки()
	
	СтрокиДереваОтборов = ДеревоОтборов.ПолучитьЭлементы();
	Для Каждого СтрокаОтбора Из СтрокиДереваОтборов Цикл
		Если СтрокаОтбора.Идентификатор = "СпособДоставки" Тогда
			ЭлементыСпискаСпособаДоставки = СтрокаОтбора.ПолучитьЭлементы();
			Для Каждого СтрокаСпособаДоставки Из ЭлементыСпискаСпособаДоставки Цикл
				Если СтрокаСпособаДоставки.Идентификатор = "Доставка" Тогда
					ВозможнаДоставка = Ложь;
				ИначеЕсли СтрокаСпособаДоставки.Идентификатор = "Самовывоз" Тогда
					ВозможенСамовывоз = Ложь;
				КонецЕсли;
				СтрокаСпособаДоставки.Отбор = Ложь;
			КонецЦикла;
			СтрокаОтбора.Отбор = Ложь;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СохранитьПрочитатьНастройкиРегионовПоиска()
	
	БизнесСеть.СохранитьНастройкиРегионовПоиска(
		РегионПоиска,
		"ТорговыеПредложения",
		ОтборОрганизация,
		РегионЗаголовок,
		ИдентификаторыРегионов);
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВалютуПоискаПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Товары.Очистить();
		ОбновитьНадписьИтогов();
		ПоказатьВводЗначения(Новый ОписаниеОповещения("ИзменитьВалютуПоискаЗавершение", ЭтотОбъект), Валюта,
			НСтр("ru = 'Валюта поиска'"), Тип("СправочникСсылка.Валюты"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВалютуПоискаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Валюта = Результат;
		Элементы.ИзменитьВалютуПоиска.Заголовок = СтрШаблон(НСтр("ru = 'Валюта: %1'"), Валюта);
		УстановитьРежимСортировки(Элементы, РежимСортировки, Валюта, ОтображатьЦеныБезНДС);
		НайтиТорговыеПредложения();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыборРегионаПоиска(ОтборСпособДоставки = Ложь)
	
	ОчиститьСообщения();
	
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("РегионРежимОтбора",   РегионПоиска.РежимОтбора);
	ПараметрыОткрытия.Вставить("РегионПредставление", РегионПоиска.Представление);
	ПараметрыОткрытия.Вставить("РегионЗначенияПолей", РегионПоиска.ЗначенияПолей);
	ПараметрыОткрытия.Вставить("Организация",         ОтборОрганизация);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборРегионаЗавершение", ЭтотОбъект, ОтборСпособДоставки);
	
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.ВыборРегионаПоиска", ПараметрыОткрытия,
		ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборРегионаЗавершение(Результат, ОтборСпособДоставки) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("РегионРежимОтбора") Тогда
		Результат.Свойство("РегионРежимОтбора"  , РегионПоиска.РежимОтбора);
		Результат.Свойство("РегионПредставление", РегионПоиска.Представление);
		Результат.Свойство("РегионЗначенияПолей", РегионПоиска.ЗначенияПолей);
	КонецЕсли;
	
	СохранитьПрочитатьНастройкиРегионовПоиска();

	Если РегионПоиска.РежимОтбора = 0
		И ВозможенСамовывоз + ВозможнаДоставка > 0 Тогда
		
		СнятьПометкуОтбораСпособДоставки();
	КонецЕсли;
	
	ИзмененыОтборыКатегорий = Истина;
	
	НайтиТорговыеПредложения();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьФиксированныеОтборыДерева(ДеревоОтборов, Знач НаименованиеКонтрагента, РазрешитьИзменениеКонтрагента, БыстрыеОтборы = Неопределено)
	
	ЭлементыОтбора = ДеревоОтборов.ПолучитьЭлементы();
	ЭлементыОтбора.Очистить();
	
	Если РазрешитьИзменениеКонтрагента Тогда
		
		// Поставщик.
		НовыйОтбор = ЭлементыОтбора.Добавить();
		НовыйОтбор.ФиксированныйОтбор            = Истина;
		НовыйОтбор.ФиксированноеЗначение         = Истина;
		НовыйОтбор.Идентификатор                 = "Поставщик";
		НовыйОтбор.ИмяРеквизита                  = "Поставщик";
		НовыйОтбор.Представление                 = НСтр("ru='Поставщик'");
		НовыйОтбор.ОтборДоступен                 = Истина;
		
		Если ЗначениеЗаполнено(НаименованиеКонтрагента) Тогда
			НовыйОтбор.ЗначениеОтбора            = НаименованиеКонтрагента;
			НовыйОтбор.ПредставлениеОтбора       = НаименованиеКонтрагента;
			НовыйОтбор.Отбор                     = Истина;
			
			Если БыстрыеОтборы <> Неопределено Тогда
				ПредставлениеОтбора = НСтр("ru = 'Поставщик:'") + " " + НаименованиеКонтрагента;
				БыстрыеОтборы.Добавить("Поставщик", ПредставлениеОтбора);
			КонецЕсли;
			
		Иначе
			НовыйОтбор.ЗначениеОтбора           = "";
		КонецЕсли;
		
	КонецЕсли;
	
	// Цена.
	НовыйОтбор = ЭлементыОтбора.Добавить();
	НовыйОтбор.ФиксированныйОтбор           = Истина;
	НовыйОтбор.Идентификатор                = "Цена";
	НовыйОтбор.ИмяРеквизита                 = "Цена";
	НовыйОтбор.Представление                = "Цена";
	НовыйОтбор.ЗначениеОтбора               = 0;
	НовыйОтбор.ФиксированноеЗначение        = Истина;
	НовыйОтбор.ПредставлениеОтбора          = НСтр("ru = '<не задано>'");
	НовыйОтбор.ОтборДоступен                = Истина;
	
	// Со скидкой.
	НовыйОтбор = ЭлементыОтбора.Добавить();
	НовыйОтбор.ФиксированныйОтбор           = Истина;
	НовыйОтбор.Идентификатор                = "СоСкидкой";
	НовыйОтбор.ИмяРеквизита                 = "СоСкидкой";
	НовыйОтбор.Представление                = НСтр("ru='Со скидкой'");
	НовыйОтбор.ЗначениеОтбора               = Истина;
	НовыйОтбор.ФиксированноеЗначение        = Истина;
	
	// С изображением.
	НовыйОтбор = ЭлементыОтбора.Добавить();
	НовыйОтбор.ФиксированныйОтбор           = Истина;
	НовыйОтбор.Идентификатор                = "СИзображением";
	НовыйОтбор.ИмяРеквизита                 = "СИзображением";
	НовыйОтбор.Представление                = НСтр("ru='С изображением'");
	НовыйОтбор.ЗначениеОтбора               = Истина;
	НовыйОтбор.ФиксированноеЗначение        = Истина;
	
	// В наличии.
	НовыйОтбор = ЭлементыОтбора.Добавить();
	НовыйОтбор.ФиксированныйОтбор           = Истина;
	НовыйОтбор.Идентификатор                = "ВНаличии";
	НовыйОтбор.ИмяРеквизита                 = "ВНаличии";
	НовыйОтбор.Представление                = НСтр("ru='В наличии'");
	НовыйОтбор.ЗначениеОтбора               = Истина;
	НовыйОтбор.ФиксированноеЗначение        = Истина;
		
	// Способ доставки.
	НовыйОтбор = ЭлементыОтбора.Добавить();
	НовыйОтбор.ФиксированныйОтбор           = Истина;
	НовыйОтбор.Идентификатор                = "СпособДоставки";
	НовыйОтбор.ИмяРеквизита                 = "СпособДоставки";
	НовыйОтбор.Представление                = НСтр("ru='Способ доставки'");
	НовыйОтбор.ЗначениеОтбора               = "Список";
		
	НоваяСтрока = НовыйОтбор.ПолучитьЭлементы().Добавить();
	НоваяСтрока.ФиксированныйОтбор           = Истина;
	НоваяСтрока.Идентификатор                = "Доставка";
	НоваяСтрока.ИмяРеквизита                 = "Доставка";
	НоваяСтрока.Представление                = НСтр("ru='доставка'");
	НоваяСтрока.ЗначениеОтбора               = "Список";
	
	НоваяСтрока = НовыйОтбор.ПолучитьЭлементы().Добавить();
	НоваяСтрока.ФиксированныйОтбор           = Истина;
	НоваяСтрока.Идентификатор                = "Самовывоз";
	НоваяСтрока.ИмяРеквизита                 = "Самовывоз";
	НоваяСтрока.Представление                = НСтр("ru='самовывоз'");
	НоваяСтрока.ЗначениеОтбора               = "Список";

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОтборПоКонтрагенту(ПараметрыКонтрагента, Форма)
	
	Форма.Контрагент = Неопределено;
	Форма.НаименованиеКонтрагента = "";
	Форма.ИдентификаторКонтрагента = "";
	Форма.ИННКонтрагента = "";
	Форма.КППКонтрагента = "";
	
	Если ТипЗнч(ПараметрыКонтрагента) = Тип("Структура") Тогда
		ПараметрыКонтрагента.Свойство("Ссылка",        Форма.Контрагент);
		ПараметрыКонтрагента.Свойство("Наименование",  Форма.НаименованиеКонтрагента);
		ПараметрыКонтрагента.Свойство("Идентификатор", Форма.ИдентификаторКонтрагента);
		ПараметрыКонтрагента.Свойство("ИНН",           Форма.ИННКонтрагента);
		ПараметрыКонтрагента.Свойство("КПП",           Форма.КППКонтрагента);
	Иначе
		Форма.Контрагент = ПараметрыКонтрагента;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборИОбновитьСписок()
	
	СтрокиДереваОтборов = ДеревоОтборов.ПолучитьЭлементы();
	Для Каждого СтрокаОтбора Из СтрокиДереваОтборов Цикл
		Идентификатор = СтрокаОтбора.Идентификатор;
		Если СтрокаОтбора.ФиксированныйОтбор Тогда
			Если Идентификатор = "Поставщик" Тогда
				Если РазрешитьИзменениеКонтрагента Тогда
					Контрагент               = Неопределено;
					НаименованиеКонтрагента  = "";
					ИННКонтрагента           = "";
					КППКонтрагента           = "";
					ИдентификаторКонтрагента = "";
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СтрокаОтбора.Отбор = Ложь;
		Если СтрокаОтбора.ЗначениеОтбора = "Список" Тогда
			ЭлементыСпискаОтборов = СтрокаОтбора.ПолучитьЭлементы();
			Для Каждого ЭлементОтбора Из ЭлементыСпискаОтборов Цикл
				ЭлементОтбора.Отбор = Ложь;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ВозможнаДоставка  = Ложь;
	ВозможенСамовывоз = Ложь;
	СтрокаПоиска      = "";
	
	НайтиТорговыеПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКонтрагента(ДополнительныеПараметры)
	
	ПараметрыОткрытия   = Новый Структура("ТекущаяСтрока, РежимВыбора", Контрагент, Истина);
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ДеревоОтборовПриИзмененииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ИмяФормыВыбора = БизнесСетьВызовСервера.ИмяФормыВыбораПоОпределяемомуТипу("КонтрагентБЭД");
	ОчиститьСообщения();
	ОткрытьФорму(ИмяФормыВыбора, ПараметрыОткрытия, ЭтотОбъект,,,, ОбработкаОповещения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьКонтекстныеБыстрыеОтборы(Форма)
	
	Если ЗначениеЗаполнено(Форма.ОтборАртикулы) Тогда
		ПредставлениеОтбора = НСтр("ru = 'Артикул:'") + " " + СтрСоединить(Форма.ОтборАртикулы.ВыгрузитьЗначения(), ", ");
		Форма.БыстрыеОтборы.Добавить("Артикул", ПредставлениеОтбора);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ОтборШтрихкоды) Тогда
		ПредставлениеОтбора = НСтр("ru = 'Штрихкод:'") + " " + СтрСоединить(Форма.ОтборШтрихкоды.ВыгрузитьЗначения(), ", ");
		Форма.БыстрыеОтборы.Добавить("Штрихкод", ПредставлениеОтбора);
	КонецЕсли;
	
КонецПроцедуры
 
#Область РаботаСКатегориями

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьОтборов(Знач ВидимостьОтборов, Элементы)
	
	Элементы.ПоказатьСкрытьОтборы.Пометка       = НЕ ВидимостьОтборов;
	Элементы.ГруппаОтборов.Видимость            = НЕ ВидимостьОтборов;
	Элементы.ГруппаЗаголовкаСвойств.Видимость   = Элементы.ПоказатьСкрытьОтборы.Пометка И НЕ Элементы.ПоказатьСкрытьКатегории.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриАктивизацииСтрокиПродолжение()
	
	НайтиТорговыеПредложения();
	
	ЗаполнитьОтборыДополнительнымиХарактеристиками();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтборыДополнительнымиХарактеристиками()
	
	Если Не (ИнтернетПоддержкаПодключена И ЕстьПодсистемаРаботаСНоменклатурой) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Категории.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено 
		Или ПустаяСтрока(ТекущиеДанные.Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияОбработкиФильтровРубрикатора) Тогда 
		ДлительнаяОперация = Новый Структура("ИдентификаторЗадания", ИдентификаторЗаданияОбработкиФильтровРубрикатора);
		ТорговыеПредложенияВызовСервера.ОтменитьФоновоеЗадание(ДлительнаяОперация);
	Иначе
		ИдентификаторЗаданияОбработкиФильтровРубрикатора = Строка(Новый УникальныйИдентификатор());
	КонецЕсли;
	
	ЗаполнитьДополнительныеРеквизитыКатегории(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДополнительныеРеквизитыКатегории(ТекущиеДанные)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаДереваКатегории", ТекущиеДанные);
	ДополнительныеПараметры.Вставить("ИдентификаторКатегории", ТекущаяКатегория);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучитьСвойстваЛистовойКатегорииЗавершение",
		ЭтотОбъект, ДополнительныеПараметры);
	
	ТорговыеПредложенияКлиент.ПолучитьХарактеристикиКатегорииВФоне(
		ТекущаяКатегория, 
		ЭтотОбъект, 
		ОповещениеОЗавершении, 
		ИдентификаторЗаданияОбработкиФильтровРубрикатора);
	
	УстановитьВидимостьДекорацииДлительнойЗагрузки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКатегорииСервиса(ИдентификаторКатегории = Неопределено)
	
	ПараметрыОповещения = Новый Структура;
	
	ПараметрыОповещения.Вставить("ИдентификаторКатегории", ИдентификаторКатегории);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьКатегорииСервисаЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	ТорговыеПредложенияКлиент.ПолучитьКатегорииТорговыхПредложенийВФоне(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКатегорииСервисаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	БизнесСетьСлужебныйКлиент.ВывестиСообщенияФоновогоЗадания(Результат, Отказ);
	
	Если Отказ Или Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьКатегорииСервисаНаСервере(Результат);
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ИдентификаторКатегории) Тогда
		Элементы.Категории.ТекущаяСтрока = 
			ИдентификаторСтрокиПоИдентификаторуКатегории(
				Категории.ПолучитьЭлементы(), ДополнительныеПараметры.ИдентификаторКатегории);
	КонецЕсли;
		
	РазвернутьДеревоКатегорий();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьКатегорииСервисаНаСервере(Результат)
	
	ДеревоКатегорий = БизнесСеть.ПолучитьУдалитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если ТипЗнч(ДеревоКатегорий) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоКатегорий, "Категории");
		
	Элементы.ДекорацияДлительнаяЗагрузкаКатегорий.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция ИдентификаторСтрокиПоИдентификаторуКатегории(КоллекцияСтрок, ИдентификаторКатегории)
	
	Результат = 0;
	
	Если КоллекцияСтрок.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из КоллекцияСтрок Цикл
		
		Если ЭлементКоллекции.Идентификатор = ИдентификаторКатегории Тогда
			Результат = ЭлементКоллекции.ПолучитьИдентификатор();
			Прервать;
		Иначе
			
			Результат = ИдентификаторСтрокиПоИдентификаторуКатегории(
				ЭлементКоллекции.ПолучитьЭлементы(), ИдентификаторКатегории);
				
			Если Результат <> 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область ХарактеристикиКатегорий

&НаКлиенте
Процедура ПолучитьСвойстваЛистовойКатегорииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	МодульРаботаСНоменклатуройСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйКлиент");
	МодульРаботаСНоменклатуройСлужебныйКлиент.УдалитьНеФиксированныеОтборыДереваОтборов(ДеревоОтборов);
	
	Отказ = Ложь;
	
	// Вывод сообщений из фонового задания.
	ТорговыеПредложенияКлиент.ОбработатьОшибкиФоновогоЗадания(Результат, Отказ);
	Если Отказ Или Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьСвойстваЛистовойКатегории(Результат, Отказ);
	
	УстановитьВидимостьДекорацииДлительнойЗагрузки(Ложь);
	
	ИдентификаторЗаданияОбработкиФильтровРубрикатора = "";
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСвойстваЛистовойКатегории(Результат, Отказ)
	
	Если Не ЗначениеЗаполнено(Результат.АдресРезультата)
		Или Не ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		Возврат;
	КонецЕсли;
	
	АдресРезультата = Результат.АдресРезультата;
	
	// Проверка результата поиска.
	Если Результат.Статус = "Выполнено" Тогда
		
		ДанныеСервиса = ПолучитьИзВременногоХранилища(АдресРезультата);
		УдалитьИзВременногоХранилища(АдресРезультата);
		
		Если ДанныеСервиса = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ХарактеристикиКатегорийИзДанныхСервиса(ДанныеСервиса);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ХарактеристикиКатегорийИзДанныхСервиса(ДополнительныеРеквизитыКатегорий)
	
	ЭлементыОтбора = ДеревоОтборов.ПолучитьЭлементы();
	Для Каждого РеквизитКатегорий Из ДополнительныеРеквизитыКатегорий Цикл
		
		Если РеквизитКатегорий.СписокВыбора = Неопределено Тогда
			
			ДобавитьЭлементОтбораИнтервал(ЭлементыОтбора, РеквизитКатегорий);
			
		ИначеЕсли РеквизитКатегорий.СписокВыбора.Количество() > 0 Тогда
			
			ТипЗначенияВыбора = ТипЗнч(РеквизитКатегорий.СписокВыбора[0]);
			Если ТипЗначенияВыбора = Тип("Булево") Тогда
				
				ДобавитьЭлементОтбораБулево(ЭлементыОтбора, РеквизитКатегорий);
				
			ИначеЕсли ТипЗначенияВыбора = Тип("Структура") Тогда
				
				Если РеквизитКатегорий.СписокВыбора.Количество() < 2 Тогда
					Продолжить;
				КонецЕсли;
				
				ДобавитьЭлементОтбораСписок(ЭлементыОтбора, РеквизитКатегорий);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементОтбораИнтервал(ЭлементыОтбора, РеквизитКатегорий)
	
	НовыйОтбор = ЭлементыОтбора.Добавить();
	НовыйОтбор.ФиксированныйОтбор           = Ложь;
	НовыйОтбор.Идентификатор                = РеквизитКатегорий.Идентификатор;
	НовыйОтбор.ИмяРеквизита                 = РеквизитКатегорий.Наименование;
	НовыйОтбор.Представление                = РеквизитКатегорий.Наименование;
	НовыйОтбор.ФиксированноеЗначение        = Истина;// Форма ввода будет содержать подсказки.
	НовыйОтбор.ИнтервалОт                   = РеквизитКатегорий.ИнтервалОт;
	НовыйОтбор.ИнтервалДо                   = РеквизитКатегорий.ИнтервалДо;
	НовыйОтбор.МинимальноеЗначение          = РеквизитКатегорий.МинимальноеЗначение;
	НовыйОтбор.МаксимальноеЗначение         = РеквизитКатегорий.МаксимальноеЗначение;
	
	Если ТипЗнч(РеквизитКатегорий.МинимальноеЗначение) = Тип("Число") Тогда
		НовыйОтбор.ЗначениеОтбора               = 0;
	Иначе
		НовыйОтбор.ЗначениеОтбора               = Дата(1, 1, 1);
	КонецЕсли;
	
	НовыйОтбор.ПредставлениеОтбора          = НСтр("ru = '<не задано>'");
	НовыйОтбор.ОтборДоступен                = Истина;
	НовыйОтбор.Отбор                        = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементОтбораБулево(ЭлементыОтбора, РеквизитКатегорий)
	
	НовыйОтбор = ЭлементыОтбора.Добавить();
	НовыйОтбор.ФиксированныйОтбор           = Ложь;
	НовыйОтбор.Идентификатор                = РеквизитКатегорий.Идентификатор;
	НовыйОтбор.ИмяРеквизита                 = РеквизитКатегорий.Наименование;
	НовыйОтбор.Представление                = РеквизитКатегорий.Наименование;
	НовыйОтбор.ЗначениеОтбора               = Истина;
	НовыйОтбор.ОтборДоступен                = Истина;
	НовыйОтбор.Отбор                        = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементОтбораСписок(ЭлементыОтбора, РеквизитКатегорий)
	
	НовыйОтбор = ЭлементыОтбора.Добавить();
	НовыйОтбор.ФиксированныйОтбор           = Ложь;
	НовыйОтбор.Идентификатор                = РеквизитКатегорий.Идентификатор;
	НовыйОтбор.ИмяРеквизита                 = РеквизитКатегорий.Наименование;
	НовыйОтбор.Представление                = РеквизитКатегорий.Наименование;
	НовыйОтбор.ЗначениеОтбора               = "Список";
	НовыйОтбор.ОтборДоступен                = Истина;
	НовыйОтбор.Отбор                        = Ложь;
	
	Для Каждого ЗначениеВыбора Из РеквизитКатегорий.СписокВыбора Цикл
		
		НоваяСтрока = НовыйОтбор.ПолучитьЭлементы().Добавить();
		НоваяСтрока.ФиксированныйОтбор           = Ложь;
		НоваяСтрока.ЗначениеОтбора               = "Список";
		
		Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
			
			НоваяСтрока.Идентификатор             = ЗначениеВыбора.Идентификатор;
			НоваяСтрока.ИмяРеквизита              = ЗначениеВыбора.Наименование;
			НоваяСтрока.Представление             = ЗначениеВыбора.Наименование;
			
		ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("Булево") И ЗначениеВыбора Тогда
			
			НоваяСтрока.ИмяРеквизита              = "Да";
			НоваяСтрока.Представление             = "Да";
			
		ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("Булево") И Не ЗначениеВыбора Тогда
			
			НоваяСтрока.ИмяРеквизита              = "Нет";
			НоваяСтрока.Представление             = "Нет";
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура УстановитьВидимостьДекорацииДлительнойЗагрузки(Значение)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ДекорацияДлительнаяЗагрузкаСвойств", "Видимость", Значение);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "СтрокаПоискаКатегорий", "Доступность", Не Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаголовокФормы()
	
	// Заголовок формы.
	Если ЗначениеЗаполнено(ТекущаяКатегория) Тогда
		Заголовок = СтрШаблон(НСтр("ru = 'Торговые предложения - %1'"), ПредставлениеКатегории);
	Иначе
		Заголовок = НСтр("ru = 'Торговые предложения 1С:Бизнес-сеть'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
