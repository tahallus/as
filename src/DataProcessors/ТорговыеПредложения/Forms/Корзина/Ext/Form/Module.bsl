
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Организация = Параметры.Организация;
	
	НастроитьФормуПриСоздании();
	
	УстановитьУсловноеОформление();
	
	ЗапуститьЧтениеКорзины();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОжидатьЗавершенияЧтенияКорзины();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьКонтактныеДанныеОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ТорговыеПредложения_ПеречитатьДанныеКорзины"
		И Источник <> ЭтотОбъект Тогда	
		
		ПеречитатьКорзинуНаСервере(Параметр.АдресДанныхКорзины);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> "ДобавитьАдрес" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуКонтактнойИнформации();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуКонтактнойИнформации();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИсходящиеДокументыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуИсходящихДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыКорзиныПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Элементы.КомандаСтраницаНоменклатура.Пометка = (ТекущаяСтраница = Элементы.СтраницаТовары);
	Элементы.КомандаСтраницаИнформацииОЗаказе.Пометка = (ТекущаяСтраница = Элементы.СтраницаИнформацияОЗаказе);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаказОтправленОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуИсходящихДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
	СпособДоставкиПриИзмененииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособДоставкиПриИзменении(Элемент)
	
	СпособДоставкиПриИзмененииНаКлиенте();
		
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(АдресДоставки) Тогда
		Если СпособДоставки = "Доставка" Тогда
			ПроверитьАдресПоказатьПодсказку();
		КонецЕсли;
	Иначе
		УстановитьЗаголовокПодсказкуАдреса(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУдалитьАдресНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриУдаленияАдресаЗавершение", ЭтаФорма);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Адрес будет удален из списка. Продолжить?'"), РежимДиалогаВопрос.ДаНет);	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаказы

&НаКлиенте
Процедура ЗаказыПриАктивизацииСтроки(Элемент)

	ТекущиеДанные = Элементы.Заказы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТекущиеДанные.ИдентификаторСвязи = ИдентификаторТекущегоЗаказа Тогда
		Возврат;
	КонецЕсли;

	ПриАктивацииЗаказаНаСервере();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура НоменклатураКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИдентификаторПредложения = ТекущиеДанные.ИдентификаторПредложения;
	
	ДобавитьТоварИзменитьКоличество(
		ИдентификаторПредложения, 
		ТекущиеДанные.Количество, 
		ТекущиеДанные.АдресКомандыИзменитьКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураКоличествоОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ОчиститьСообщения();
	
	КоличествоВведеноКорректно = ТорговыеПредложенияКлиент.КоличествоВведеноКорректно(
		СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Текст),
		ТекущиеДанные.МинимальноеКоличество,
		ТекущиеДанные.КратностьУпаковки);
	
	Если Не КоличествоВведеноКорректно Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьТовар(Команда)
	
	ТорговыеПредложенияКлиент.ОткрытьФормуПоискаПоОтборам();

КонецПроцедуры

&НаКлиенте
Процедура УдалитьТовар(Команда)
	
	ТекущиеДанные = Элементы.Заказы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИдентификаторЗаказаВСервисе = ТекущиеДанные.ИдентификаторЗаказаВСервисе;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	НастроитьЭлементыДлительнойОперации(Истина, Истина);
	
	УдалитьТоварИзКорзины(ТекущиеДанные.ИдентификаторПредложения, 
		ИдентификаторЗаказаВСервисе, ТекущиеДанные.АдресКомандыУдалить);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗаказ(Команда)
	
	ОтправитьЗаказНаКлиенте();
		
КонецПроцедуры

&НаКлиенте
Процедура СтраницаИнформацииОЗаказе(Команда)
	
	Элементы.КомандаСтраницаНоменклатура.Пометка = Ложь;
	Элементы.КомандаСтраницаИнформацииОЗаказе.Пометка = Истина;
	
	Элементы.СтраницыКорзины.ТекущаяСтраница = Элементы.СтраницаИнформацияОЗаказе;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаНоменклатура(Команда)
	
	Элементы.КомандаСтраницаНоменклатура.Пометка = Истина;
	Элементы.КомандаСтраницаИнформацииОЗаказе.Пометка = Ложь;
	
	Элементы.СтраницыКорзины.ТекущаяСтраница = Элементы.СтраницаТовары;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КонтактнаяИнформация

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформации()
	
	ПараметрыВида = ПараметрыВидаКонтактнойИнформации();
	
	ПараметрыВида.Наименование = НСтр("ru = 'Укажите адрес доставки'");
	ПараметрыВида.НастройкиПроверки.ПроверятьПоФИАС = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Истина;
	
	Адрес = "";
	ПредставлениеАдреса = "";
	Если СпособДоставки = "Доставка" И Не ПустаяСтрока(АдресДоставки) Тогда

			СтрокаАдреса = СтрокаАдресаОрганизации(АдресаОрганизации, Организация, АдресДоставки);

			Если СтрокаАдреса <> Неопределено Тогда
				Адрес = СтрокаАдреса.ЗначенияПолей;
				ПредставлениеАдреса = СтрокаАдреса.ПредставлениеАдреса;
			КонецЕсли;
		
	КонецЕсли;
		
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ПараметрыВида, Адрес, ПредставлениеАдреса);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуКонтактнойИнформацииЗавершение", ЭтотОбъект);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект, Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторАдреса = "";
	Отказ = Ложь;
	
	ОбработатьАдресПослеВыбора(Результат, ИдентификаторАдреса, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Заказы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
		
	ЗаполнитьАдресаЗаказа(ЭтотОбъект, ТекущиеДанные);
	
	АдресДоставки = ИдентификаторАдреса;
	
	ПроверитьАдресПоказатьПодсказку();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыВидаКонтактнойИнформации()
	
	Возврат УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
		ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
	
КонецФункции

&НаСервере
Процедура ОбработатьАдресПослеВыбора(ДанныеАдреса, ИдентификаторАдреса = "", Отказ = Ложь)
	
	СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ДанныеАдреса.Значение, Новый Структура("КодыАдреса", Истина));
	
	ИдентификаторАдреса = ?(
		ЗначениеЗаполнено(СведенияОбАдресе.ИдентификаторДома),
		Строка(СведенияОбАдресе.ИдентификаторДома),
		Строка(СведенияОбАдресе.ИдентификаторАдресногоОбъекта));
		
	Если АдресСуществует(Организация, ИдентификаторАдреса) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выбранный адрес уже добавлен'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	НоваяСтрока = АдресаОрганизации.Добавить();
	
	НоваяСтрока.КодСтраны            = СведенияОбАдресе.КодСтраны;
	НоваяСтрока.ИдентификаторФИАС    = ИдентификаторАдреса;
	НоваяСтрока.ПредставлениеАдреса  = ДанныеАдреса.Представление;
	НоваяСтрока.Организация          = Организация;
	НоваяСтрока.ЭтоПроизвольныйАдрес = Истина;
	НоваяСтрока.ЗначенияПолей        = ДанныеАдреса.Значение;
	
КонецПроцедуры

&НаСервере
Функция АдресСуществует(ТекущаяОрганизация, ИдентификаторАдреса)
	
	СтрокаАдреса = СтрокаАдресаОрганизации(АдресаОрганизации, ТекущаяОрганизация, ИдентификаторАдреса);
	
	Результат = СтрокаАдреса <> Неопределено;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПроверитьАдресПоказатьПодсказку()
	
	Если СпособДоставки = "Самовывоз" Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресДоставки) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Заказы.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Заказы.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ДанныеАдреса = РаботаСАдресами.АдресПоИдентификатору(АдресДоставки);
	
	СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ДанныеАдреса, Новый Структура("КодыАдреса", Истина));
	
	ИдентификаторыДляПроверки = Новый Массив;
	
	ДобавитьИдентификаторВМассив(ИдентификаторыДляПроверки, СведенияОбАдресе.Идентификаторы.Регион);
	ДобавитьИдентификаторВМассив(ИдентификаторыДляПроверки, СведенияОбАдресе.Идентификаторы.Район);
	ДобавитьИдентификаторВМассив(ИдентификаторыДляПроверки, СведенияОбАдресе.Идентификаторы.МуниципальныйРайон);
	ДобавитьИдентификаторВМассив(ИдентификаторыДляПроверки, СведенияОбАдресе.Идентификаторы.Город);
		
	ВозможнаДоставкаПоАдресу = Ложь;
	
	Для каждого ЭлементКоллекции Из ТекущиеДанные.РегионыДоставки Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементКоллекции.ИдентификаторФИАС)
			И СведенияОбАдресе.КодСтраны = ЭлементКоллекции.КодСтраны Тогда
			
			ВозможнаДоставкаПоАдресу = Истина;
			Прервать;
		КонецЕсли;
		
		Если ИдентификаторыДляПроверки.Найти(ЭлементКоллекции.ИдентификаторФИАС) <> Неопределено Тогда
			ВозможнаДоставкаПоАдресу = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВозможнаДоставкаПоАдресу Тогда
		УстановитьЗаголовокВидимостьПодсказкиАдреса(ЭтотОбъект, "ПодсказкаНеТребуется");
	Иначе
		УстановитьЗаголовокВидимостьПодсказкиАдреса(ЭтотОбъект, "НеПоддерживаетсяАдрес");	
	КонецЕсли;
	
	СтрокаАдреса = СтрокаАдресаОрганизации(АдресаОрганизации, Организация, АдресДоставки);
	
	Если СтрокаАдреса <> Неопределено И СтрокаАдреса.ЭтоПроизвольныйАдрес Тогда
		Элементы.ДекорацияУдалитьАдрес.Видимость = Истина;
	Иначе
		Элементы.ДекорацияУдалитьАдрес.Видимость = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаАдресаОрганизации(Знач АдресаОрганизации, Знач ТекущаяОрганизация, Знач ИдентификаторАдреса)
	
	СтрокиАдресов = АдресаОрганизации.
		НайтиСтроки(Новый Структура("Организация, ИдентификаторФИАС", ТекущаяОрганизация, ИдентификаторАдреса));
		
	Результат = Неопределено;	
		
	Если ЗначениеЗаполнено(СтрокиАдресов) Тогда
		Результат = СтрокиАдресов[0];
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьИдентификаторВМассив(МассивИдентификаторов, Идентификатор)
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИдентификаторов.Добавить(Строка(Идентификатор));
	
КонецПроцедуры

#КонецОбласти

#Область РаботаФормы

&НаСервере
Процедура УстановитьУсловноеОформление()

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НоменклатураСостояние.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.ЕстьНарушенияОграничений");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста", 
		ЦветаСтиля.НезаполненныйРеквизитЦветБЭД);	
		
КонецПроцедуры	

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьСписокАдресовОрганизации();
	
	ДанныеОрганизации = ДанныеОрганизацииИзНастроек(Организация);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеОрганизации);
	
	ЗаполнитьАдресаОрганизацииИзНастроек(Организация, ДанныеОрганизации);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеФормыВСтрокуЗаказа()
	
	Если Не ЗначениеЗаполнено(ИдентификаторТекущегоЗаказа) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиЗаказов = Заказы.НайтиСтроки(Новый Структура("ИдентификаторСвязи", ИдентификаторТекущегоЗаказа));
	
	Если Не ЗначениеЗаполнено(СтрокиЗаказов) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЗаказа = СтрокиЗаказов[0];
	
	ПоляЗаполнения = РедактируемыеПоляЗаказа();
	
	ЗаполнитьЗначенияСвойств(СтрокаЗаказа, ЭтотОбъект, ПоляЗаполнения);
	
	СтрокаЗаказа.Телефон = ТелефонЦифрами(СтрокаЗаказа.Телефон);
	
	УстановитьКонтактныеДанныеОрганизацииВсемЗаказам();
	
	СохранитьКонтактныеДанныеОрганизации();	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РедактируемыеПоляЗаказа()
	
	Результат = "Организация, НаименованиеПокупателя, ЭлектроннаяПочта, 
		|Телефон, КомментарийКЗаказу, СпособДоставки, АдресДоставки,
		|СуммаСНДС, СуммаНДС, Валюта";
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьКонтактныеДанныеОрганизацииВсемЗаказам()
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
		
	ПоляДанных = Новый Массив;
	
	ПоляДанных.Добавить("НаименованиеПокупателя");
	ПоляДанных.Добавить("Телефон");
	ПоляДанных.Добавить("ЭлектроннаяПочта");
	ПоляДанных.Добавить("Организация");
		
	Для каждого ЭлементКоллекции Из Заказы Цикл
		
		Если ЗначениеЗаполнено(ЭлементКоллекции.Организация)
			И Организация <> ЭлементКоллекции.Организация Тогда
			
			Продолжить;
		КонецЕсли;	
		
		Для каждого ТекущееПоле Из ПоляДанных Цикл
			
			Если ЗначениеЗаполнено(ЭлементКоллекции[ТекущееПоле]) Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементКоллекции[ТекущееПоле] = ЭтотОбъект[ТекущееПоле];
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособДоставкиПриИзмененииНаКлиенте()
	
	ТекущиеДанные = Элементы.Заказы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	АдресДоставки = "";
		
	ЗаполнитьАдресаЗаказа(ЭтотОбъект, ТекущиеДанные);
	
	УстановитьЗаголовокПодсказкуАдреса(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокПодсказкуАдреса(Форма)
	
	Элементы       = Форма.Элементы;
	СпособДоставки = Форма.СпособДоставки;
	
	Если СпособДоставки = "Самовывоз" Тогда
		Элементы.АдресДоставки.Заголовок = НСтр("ru = 'Адрес самовывоза'");
	Иначе
		Элементы.АдресДоставки.Заголовок = НСтр("ru = 'Адрес доставки'");
	КонецЕсли;
	
	Если Элементы.Заказы.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Форма.Заказы.НайтиПоИдентификатору(Элементы.Заказы.ТекущаяСтрока);
	
	УстановитьСвойстваАдресДоставки(Элементы, Ложь, Ложь, Ложь);
	
	Если СпособДоставки = "Самовывоз"
		И Не ЗначениеЗаполнено(ТекущиеДанные.АдресаСамовывоза) Тогда
		
		УстановитьЗаголовокВидимостьПодсказкиАдреса(Форма, "НевозможенСамовывоз");
		
	ИначеЕсли СпособДоставки = "Доставка"
		И Не ЗначениеЗаполнено(ТекущиеДанные.РегионыДоставки) Тогда
		
		УстановитьЗаголовокВидимостьПодсказкиАдреса(Форма, "НевозможнаДоставка");

	Иначе
		
		АдресДоставкиЗаполнен = Не ПустаяСтрока(Форма.АдресДоставки);
		ЭтоДоставка = СпособДоставки = "Доставка";
		КнопкаУдалитьАдрес = Не ЭтоДоставка И АдресДоставкиЗаполнен;
		УстановитьСвойстваАдресДоставки(Элементы, Истина, КнопкаУдалитьАдрес, ЭтоДоставка);
		УстановитьЗаголовокВидимостьПодсказкиАдреса(Форма, "ПодсказкаНеТребуется");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваАдресДоставки(Элементы, ЗначениеАдреса, ЗначениеДекорации, ЗначениеКнопкиОткрытие)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "АдресДоставки", "Доступность", ЗначениеАдреса);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ДекорацияУдалитьАдрес", "Видимость", ЗначениеДекорации);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "АдресДоставки", "КнопкаОткрытия", ЗначениеКнопкиОткрытие);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокВидимостьПодсказкиАдреса(Форма, ВидПодсказки)
	
	Элементы = Форма.Элементы;
	
	Если ВидПодсказки = "НевозможенСамовывоз" Тогда
		
		Элементы.ПояснениеКАдресу.Заголовок 
			= НСтр("ru = 'Поставщик не указал адреса самовывоза. Возможно, осуществить самовывоз нельзя.'");
			
	ИначеЕсли ВидПодсказки = "НевозможнаДоставка" Тогда	
		
		Элементы.ПояснениеКАдресу.Заголовок 
			= НСтр("ru = 'Поставщик не указал регионы доставки. Возможно, поставщик не осуществляет доставку.'");

	ИначеЕсли ВидПодсказки = "НеПоддерживаетсяАдрес" Тогда	
		
		Элементы.ПояснениеКАдресу.Заголовок 
			= НСтр("ru = 'Выбранный адрес не входит в состав регионов доставки, указанных поставщиком. Возможно, поставщик не осуществляет доставку по этому адресу.'");
			
	КонецЕсли;
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ПояснениеКАдресу", "Видимость", ВидПодсказки <> "ПодсказкаНеТребуется");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуИсходящихДокументов()
	
	ОчиститьСообщения();
	
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("РежимИсходящихДокументов", Истина);
	
	ОткрытьФорму("Обработка.БизнесСеть.Форма.ДокументыОбмена", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуУспешнойОтправки()
		
	Элементы.СтраницыЗаказыТовары.ТекущаяСтраница = Элементы.СтраницаЗавершение;
	ЭтотОбъект.ТекущийЭлемент = Элементы.Закрыть;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокАдресовОрганизации()
	
	АдресаОрганизации.НайтиСтроки(Новый Структура("Организация", Организация)).Очистить();
	
	Адреса = БизнесСеть.АдресаОрганизации(Организация);
	
	Для каждого ТекущийАдрес Из Адреса Цикл
		
		Если ЗначениеЗаполнено(АдресаОрганизации.НайтиСтроки(
			Новый Структура("ПредставлениеАдреса, Организация", ТекущийАдрес.Представление, Организация))) Тогда
			
			Продолжить;
		КонецЕсли;	
			
		СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(
			ТекущийАдрес.ЗначенияПолей, Новый Структура("КодыАдреса", Истина));
		
		ИдентификаторАдреса = ?(
			ЗначениеЗаполнено(СведенияОбАдресе.ИдентификаторДома),
			Строка(СведенияОбАдресе.ИдентификаторДома),
			Строка(СведенияОбАдресе.ИдентификаторАдресногоОбъекта));

		Если Не ЗначениеЗаполнено(ИдентификаторАдреса) Тогда
			Продолжить;
		КонецЕсли;	
			
		КодСтраны = Строка(СведенияОбАдресе.КодСтраны);
		
		НоваяСтрока = АдресаОрганизации.Добавить();
		
		НоваяСтрока.ПредставлениеАдреса = ТекущийАдрес.Представление;
		НоваяСтрока.КодСтраны           = КодСтраны;
		НоваяСтрока.ИдентификаторФИАС   = ИдентификаторАдреса;
		НоваяСтрока.Организация         = Организация;
		НоваяСтрока.ЗначенияПолей       = ТекущийАдрес.ЗначенияПолей;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПриСоздании()
		
	Элементы.ГруппаПодсказкаПослеОтправки.Видимость = Ложь;
	Элементы.ПредупреждениеПоЗаказу.Видимость       = Ложь;
	Элементы.ПояснениеКАдресу.Видимость             = Ложь;
	Элементы.ДекорацияУдалитьАдрес.Видимость        = Ложь;
	
	НастроитьЭлементыДлительнойОперации(Истина);
	
	АдресКорзины = ТорговыеПредложенияСлужебный.АдресКорзиныИзЛокальногоХранилища();
	
	ЗаполнитьСписокАдресовОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПодсказкуИсходящихДокументов(ПредставлениеЗаказа)
	
	ШаблонПодсказки = "%1 " + НСтр("ru = 'отправлен. Все отправленные заказы можно увидеть в'") 
		+ " <a href=""ИсходящиеДокументы"">" 
		+ НСтр("ru = 'Исходящих документах'")
		+ "</a>.";
		
	ЗаголовокПодсказки = СтрШаблон(ШаблонПодсказки, ПредставлениеЗаказа);
	
	Элементы.НадписьЗаказОтправлен.Заголовок
		= СтроковыеФункции.ФорматированнаяСтрока(ЗаголовокПодсказки);
		
	Элементы.ГруппаПодсказкаПослеОтправки.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСообщитьОНарушенииОграничений(Отказ)
	
	ТекущиеДанные = Элементы.Заказы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТекущиеДанные.ДоступноДляОтправки Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.НарушенияОграничений) Тогда
		
		Для Каждого ТекущееНарушение Из ТекущиеДанные.НарушенияОграничений Цикл
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекущееНарушение.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	ТоварыЗаказа = Товары.НайтиСтроки(
		Новый Структура("ИдентификаторСвязи", ТекущиеДанные.ИдентификаторСвязи));
	
	Для Каждого ТекущийТовар Из ТоварыЗаказа Цикл
		
		Если ЗначениеЗаполнено(ТекущийТовар.НарушенияОграничений) Тогда
			
			Для Каждого ТекущееНарушение Из ТекущийТовар.НарушенияОграничений Цикл
				
				ТекстСообщения = СтрШаблон("%1: %2", 
					ТекущийТовар.ПредставлениеНоменклатуры,
					ТекущееНарушение.Значение);
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				
			КонецЦикла;
			
		КонецЕсли
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеДанных(Отказ)
	
	Если Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ЭлектроннаяПочта) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Некорректно заполнен адрес электронной почты'"),,
			"ЭлектроннаяПочта");
			
		Отказ = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция ТелефонЦифрами(Знач Телефон)
	
	СтрокаТелефона = "";
	Числа = "0123456789";
	
	ДлинаПредставленияТелефона = СтрДлина(Телефон);
	Для Индекс = 1 По ДлинаПредставленияТелефона Цикл
		
		Символ = Сред(Телефон, Индекс, 1);
		Если СтрНайти(Числа, Символ) > 0 Тогда
			СтрокаТелефона = СтрокаТелефона + Символ;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрокаТелефона;
	
КонецФункции

#КонецОбласти

#Область ФоновыеЗадания

#Область ЧтениеКорзины

&НаСервере
Процедура ЗапуститьЧтениеКорзины()
	
	ПараметрыМетода = Новый Структура;
	
	ПараметрыМетода.Вставить("Организация", Организация);
	ПараметрыМетода.Вставить("АдресКорзины", АдресКорзины);
	
	ФоновоеЗаданиеЧтениеКорзины = ТорговыеПредложенияСлужебный.СоздатьПрочитатьКорзинуВФоне(ПараметрыМетода, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершенияЧтенияКорзины()
	
	Если Не ЗначениеЗаполнено(ФоновоеЗаданиеЧтениеКорзины) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьСообщения    = Истина;
	
	Оповещение = Новый ОписаниеОповещения("ЧтениеКорзиныЗавершение", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗаданиеЧтениеКорзины, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧтениеКорзиныЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
		
	ЧтениеКорзиныЗавершениеНаСервере(Результат.АдресРезультата);	
		
КонецПроцедуры

&НаСервере
Процедура ЧтениеКорзиныЗавершениеНаСервере(АдресРезультата)
	
	ПеречитатьКорзинуНаСервере(АдресРезультата);
	
	ЗаполнитьКонтактныеДанныеОрганизацийПриСозданииФормы();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСТоваром

&НаКлиенте
Процедура ДобавитьТоварИзменитьКоличество(ИдентификаторПредложения, Количество, АдресКоманды);
	
	ПараметрыОповещения = Новый Структура("ИдентификаторПредложения", ИдентификаторПредложения);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействияНадТоваром", ЭтотОбъект, ПараметрыОповещения);
	
	ПараметрыРаботыСТоваром = ТорговыеПредложенияКлиент.ОписаниеПараметровРаботыСТоваромКорзины();
	
	ПараметрыРаботыСТоваром.Организация                    = Организация;
	ПараметрыРаботыСТоваром.АдресКомандыИзменитьКоличество = АдресКоманды;
	ПараметрыРаботыСТоваром.Количество                     = Количество;
	ПараметрыРаботыСТоваром.ПрочитатьКорзину               = Истина;
	ПараметрыРаботыСТоваром.АдресКорзины                   = АдресКорзины;
		
	ТорговыеПредложенияКлиент.ВыполнитьДействиеСТоваромКорзины(ПараметрыРаботыСТоваром, ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТоварИзКорзины(ИдентификаторПредложения, ИдентификаторЗаказа, АдресКоманды)
	
	ПараметрыОповещения = Новый Структура("ИдентификаторПредложения, ИдентификаторЗаказа", 
		ИдентификаторПредложения, ИдентификаторЗаказа);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействияНадТоваром", ЭтотОбъект, ПараметрыОповещения);
	
	ПараметрыРаботыСТоваром = ТорговыеПредложенияКлиент.ОписаниеПараметровРаботыСТоваромКорзины();
	
	ПараметрыРаботыСТоваром.Организация         = Организация;
	ПараметрыРаботыСТоваром.АдресКомандыУдалить = АдресКоманды;
	ПараметрыРаботыСТоваром.ПрочитатьКорзину    = Истина;
	ПараметрыРаботыСТоваром.АдресКорзины        = АдресКорзины;
	ПараметрыРаботыСТоваром.ВидОперации         = "Удаление";
		
	ТорговыеПредложенияКлиент.ВыполнитьДействиеСТоваромКорзины(ПараметрыРаботыСТоваром, ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияДействияНадТоваром(Результат, ДополнительныеПараметры) Экспорт
			
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ПослеВыполненияДействияНадТоваромНаСервере(Результат.АдресРезультата, ДополнительныеПараметры);
	
	ТорговыеПредложенияКлиент.ОповеститьОбИзмененииКорзины(Результат.АдресРезультата, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеВыполненияДействияНадТоваромНаСервере(АдресРезультата, ДополнительныеПараметры)

	ПеречитатьКорзинуНаСервере(АдресРезультата);

	Если ДополнительныеПараметры.Свойство("ИдентификаторЗаказа") Тогда
		НастроитьЭлементыДлительнойОперации(Ложь, Истина);
		ПроверитьУстановитьТекущийЗаказ(ДополнительныеПараметры.ИдентификаторЗаказа);
	Иначе
		УстановитьТекущийТовар(ДополнительныеПараметры.ИдентификаторПредложения);	
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Корзина

&НаСервере
Процедура ЗаполнитьКонтактныеДанныеОрганизацийПриСозданииФормы()
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОрганизации = ДанныеОрганизацииИзНастроек(Организация);
	
	ЗаполнитьАдресаОрганизацииИзНастроек(Организация, ДанныеОрганизации);
	
	Для каждого ЭлементКоллекции Из Заказы Цикл
		ЗаполнитьЗначенияСвойств(ЭлементКоллекции, ДанныеОрганизации);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресаОрганизацииИзНастроек(Организация, ДанныеОрганизации)
	
	Для каждого ТекущийАдрес Из ДанныеОрганизации.Адреса Цикл
		
		Если Не ЗначениеЗаполнено(ТекущийАдрес.ПредставлениеАдреса) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиАдресов = АдресаОрганизации.НайтиСтроки(
			Новый Структура("ИдентификаторФИАС, Организация", ТекущийАдрес.ИдентификаторФИАС, Организация));
		
		Если ЗначениеЗаполнено(СтрокиАдресов) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = АдресаОрганизации.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущийАдрес);
		
		НоваяСтрока.ЭтоПроизвольныйАдрес = Истина;
		НоваяСтрока.Организация = Организация;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РедактируемыеКолонкиЗаказа()
	
	Результат = "Организация, НаименованиеПокупателя, ЭлектроннаяПочта, 
		|Телефон, КомментарийКЗаказу, СпособДоставки, АдресДоставки,
		|ИдентификаторЗаказаВСервисе";
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПеречитатьКорзинуНаСервере(АдресДанныхКорзины = Неопределено, Отказ = Ложь)
	
	НастроитьЭлементыДлительнойОперации(Ложь);
	
	ДанныеСервиса = ПолучитьИзВременногоХранилища(АдресДанныхКорзины);
	
	Если Не ЗначениеЗаполнено(ДанныеСервиса) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
		
	ЗаказыДоПерезаполнения = Новый ТаблицаЗначений;
	
	Если ЗначениеЗаполнено(Заказы) Тогда
		ЗаказыДоПерезаполнения = Заказы.Выгрузить(, РедактируемыеКолонкиЗаказа());
	КонецЕсли;
	
	Заказы.Очистить();
	Товары.Очистить();
	ИдентификаторТекущегоЗаказа = Неопределено;	
		
	ДанныеКорзины = ДанныеСервиса.ДанныеКорзины;
	
	Если Не ЗначениеЗаполнено(ДанныеКорзины) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗаказы(ДанныеКорзины.Заказы, ЗаказыДоПерезаполнения);
	
	ШаблонЗаголовка = НСтр("ru = 'Заказы к отправке. Осталось отправить %1.'");
	
	ПодстрокаСЧислом = СтрокаСЧислом(
		НСтр("ru=';%1 заказ;;%1 заказа;%1 заказов;'"),
		ДанныеКорзины.Заказы.Количество(),
		ВидЧисловогоЗначения.Количественное);
	
	Элементы.НадписьЗаказы.Заголовок = СтрШаблон(ШаблонЗаголовка,ПодстрокаСЧислом);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиФормы

&НаСервере
Процедура СохранитьКонтактныеДанныеОрганизации()
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаименованиеПокупателя)
		И Не ЗначениеЗаполнено(ЭлектроннаяПочта)
		И Не ЗначениеЗаполнено(Телефон) Тогда
		
		Возврат;
	КонецЕсли;
	
	Настройки = ОписаниеКонтактныхДанныхОрганизации();
	
	Настройки.НаименованиеПокупателя = НаименованиеПокупателя;
	Настройки.ЭлектроннаяПочта       = ЭлектроннаяПочта;
	Настройки.Телефон                = Телефон;
	
	СтрокиАдресов = АдресаОрганизации.НайтиСтроки(
		Новый Структура("ЭтоПроизвольныйАдрес, Организация", Истина, Организация));
	
	Адреса = Новый Массив;
	
	Для каждого ЭлементКоллекции Из СтрокиАдресов Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементКоллекции.ПредставлениеАдреса) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеАдреса = Новый Структура;
		ДанныеАдреса.Вставить("КодСтраны", );
		ДанныеАдреса.Вставить("ИдентификаторФИАС", );
		ДанныеАдреса.Вставить("ЗначенияПолей", );
		ДанныеАдреса.Вставить("ПредставлениеАдреса", );
		
		ЗаполнитьЗначенияСвойств(ДанныеАдреса, ЭлементКоллекции);
		
		Адреса.Добавить(ДанныеАдреса);
		
	КонецЦикла;
	
	Настройки.Адреса = Адреса;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючНастроек(), Организация.УникальныйИдентификатор(), Настройки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеОрганизацииИзНастроек(Организация)
	
	Результат = ОписаниеКонтактныхДанныхОрганизации();
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Результат;
	КонецЕсли;	
	
	ДанныеХранилища = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		КлючНастроек(), 
		Организация.УникальныйИдентификатор());
		
	Если Не ЗначениеЗаполнено(ДанныеХранилища) Тогда
		Возврат Результат;
	КонецЕсли;	
		
	ЗаполнитьЗначенияСвойств(Результат, ДанныеХранилища);	
		
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция КлючНастроек()
	
	Результат = "КонтактныеДанныхОрганизацийБизнесСеть";
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеКонтактныхДанныхОрганизации()
	
	Результат = Новый Структура;
	
	Результат.Вставить("НаименованиеПокупателя", "");
	Результат.Вставить("ЭлектроннаяПочта",       "");
	Результат.Вставить("Телефон",                "");
	Результат.Вставить("Адреса",                 Новый Массив);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Заказы

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьАдресаЗаказа(Форма, ТекущиеДанные)
			
	Элементы          = Форма.Элементы;
	АдресаОрганизации = Форма.АдресаОрганизации;
	СпособДоставки    = Форма.СпособДоставки;
	Организация       = Форма.Организация;
			
	Элементы.АдресДоставки.СписокВыбора.Очистить();
	
	Если СпособДоставки = "Самовывоз" Тогда
		Для каждого ТекущийАдрес Из ТекущиеДанные.АдресаСамовывоза Цикл
			Элементы.АдресДоставки.СписокВыбора.Добавить(ТекущийАдрес.ИдентификаторФИАС, ТекущийАдрес.ПредставлениеАдреса);
		КонецЦикла;	
	Иначе
		
		СтрокиАдресов = АдресаОрганизации.НайтиСтроки(Новый Структура("Организация", Организация));
		
		Для каждого ТекущийАдрес Из СтрокиАдресов Цикл
			Элементы.АдресДоставки.СписокВыбора.Добавить(ТекущийАдрес.ИдентификаторФИАС, ТекущийАдрес.ПредставлениеАдреса);
		КонецЦикла;		
		
		Элементы.АдресДоставки.СписокВыбора.Добавить(
			"ДобавитьАдрес", Новый ФорматированнаяСтрока(НСтр("ru = 'Добавить адрес'"), , , , "ДобавитьАдрес"));
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущийТовар(ИдентификаторПредложения)
	
	СтрокиТовара = Товары.НайтиСтроки(Новый Структура("ИдентификаторПредложения", ИдентификаторПредложения));
	
	Если Не ЗначениеЗаполнено(СтрокиТовара) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиЗаказа = Заказы.НайтиСтроки(Новый Структура("ИдентификаторСвязи", СтрокиТовара[0].ИдентификаторСвязи));
	
	Если Не ЗначениеЗаполнено(СтрокиЗаказа) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Заказы.ТекущаяСтрока = СтрокиЗаказа[0].ПолучитьИдентификатор();
	
	Элементы.Товары.ТекущаяСтрока = СтрокиТовара[0].ПолучитьИдентификатор();
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНоменклатуруПоЗаказу(ИдентификаторСвязи, ТоварыЗаказа, НарушенияОграничений)
	
	Для каждого ТекущийТовар Из ТоварыЗаказа Цикл
		
		НоваяСтрока = Товары.Добавить();
		
		НоваяСтрока.ПредставлениеНоменклатуры     = ТекущийТовар.НаименованиеТовара;
		НоваяСтрока.Артикул                       = ТекущийТовар.Артикул;
		НоваяСтрока.ПредставлениеЕдиницыИзмерения = ТекущийТовар.ЕдиницаИзмерения.КраткоеНаименование;
		НоваяСтрока.Количество                    = ТекущийТовар.Количество;
		НоваяСтрока.Цена                          = ТекущийТовар.Цена;
		НоваяСтрока.ЦенаДоСкидки                  = ТекущийТовар.ЦенаДоСкидки;
		НоваяСтрока.ПредставлениеЦены             = ТорговыеПредложенияСлужебный.ПредставлениеЦены(ТекущийТовар.Цена);
		НоваяСтрока.СуммаСНДС                     = ТекущийТовар.Итоги.СуммаСНДС;
		НоваяСтрока.СуммаНДС                      = ТекущийТовар.Итоги.СуммаНДС;
		НоваяСтрока.СтавкаНДС                     = ТекущийТовар.СтавкаНДС;
		НоваяСтрока.Состояние                     = ТекущийТовар.СтатусДоступностиТовара;
		НоваяСтрока.ИдентификаторСвязи            = ИдентификаторСвязи;
		НоваяСтрока.АдресКомандыУдалить           = ТекущийТовар.АдресаКоманд.УдалитьТовар;
		НоваяСтрока.АдресКомандыИзменитьКоличество = ТекущийТовар.АдресаКоманд.УстановитьКоличество;
		НоваяСтрока.ИдентификаторПредложения      = ТекущийТовар.Идентификатор;
		НоваяСтрока.НарушенияОграничений          = НарушениеПоЗаказу(НарушенияОграничений, ТекущийТовар.Идентификатор);
		НоваяСтрока.ЕстьНарушенияОграничений      = ЗначениеЗаполнено(НоваяСтрока.НарушенияОграничений);
		
		НоваяСтрока.МинимальноеКоличество = 
			?(ТекущийТовар.МинимальноеКоличество = 0, 
				1, 
				ТекущийТовар.МинимальноеКоличество);
		
		НоваяСтрока.КратностьУпаковки = 
			?(ТекущийТовар.КратностьУпаковки = 0, 
				1, 
				ТекущийТовар.КратностьУпаковки);
						
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриАктивацииЗаказаНаСервере()

	Если Элементы.Заказы.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Заказы.НайтиПоИдентификатору(Элементы.Заказы.ТекущаяСтрока);

	СохранитьДанныеФормыВСтрокуЗаказа();
	
	ИдентификаторТекущегоЗаказа = ТекущиеДанные.ИдентификаторСвязи;
	
	ОтборСтрок = Новый ФиксированнаяСтруктура(
		Новый Структура("ИдентификаторСвязи", ТекущиеДанные.ИдентификаторСвязи));
		
	Элементы.Товары.ОтборСтрок = ОтборСтрок;
	
	ПоляЗаполнения = РедактируемыеПоляЗаказа();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ТекущиеДанные, ПоляЗаполнения);
	
	ЗаполнитьАдресаЗаказа(ЭтотОбъект, ТекущиеДанные);
		
	ШаблонЗаголовка = НСтр("ru = 'Детали %1 для %2'");
	
	ПредставлениеДокумента = НСтр("ru = 'заказа'");
	
	ЭтоЗапросЦен = ЭтоЗапросЦен(ТекущиеДанные);
	
	Если ЭтоЗапросЦен Тогда
		ПредставлениеДокумента = НСтр("ru = 'запроса цен'");
	КонецЕсли;
	
	Элементы.НадписьДеталиЗаказа.Заголовок = СтрШаблон(
		ШаблонЗаголовка, ПредставлениеДокумента, ТекущиеДанные.ПредставлениеПоставщика);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.НарушенияОграничений) Тогда
		ПредупреждениеПоЗаказу = ТекущиеДанные.НарушенияОграничений[0].Значение;
		Элементы.ПредупреждениеПоЗаказу.Видимость = Истина;
	Иначе
		Элементы.ПредупреждениеПоЗаказу.Видимость = Ложь;
	КонецЕсли;

	УстановитьЗаголовокПодсказкуАдреса(ЭтотОбъект);
		
КонецПроцедуры

&НаСервере
Процедура ПроверитьУстановитьТекущийЗаказ(АдресЗаказа)
	
	СтрокиЗаказа = Заказы.НайтиСтроки(Новый Структура("ИдентификаторЗаказаВСервисе", АдресЗаказа));
	
	Если Не ЗначениеЗаполнено(СтрокиЗаказа) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Заказы.ТекущаяСтрока = СтрокиЗаказа[0].ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеЗаказа()
	
	ПоляЗаполнения = "НаименованиеПокупателя, ЭлектроннаяПочта, 
		|Телефон, КомментарийКЗаказу, АдресДоставки,
		|СуммаСНДС, СуммаНДС";
	
	ПоляДляОчистки = СтрРазделить(ПоляЗаполнения, ",", Ложь);
	
	Для каждого ЭлементКоллекции Из ПоляДляОчистки Цикл
		ЭтотОбъект[СокрЛП(ЭлементКоллекции)] = "";
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаказы(ЗаказыКорзины, ЗаказыДоПерезаполнения = Неопределено)
	
	ЕстьНарушения = Ложь;
	
	Для каждого ТекущийЗаказ Из ЗаказыКорзины Цикл
		
		НоваяСтрока = Заказы.Добавить();
		
		ЭтоЗапросЦен = ЗначениеЗаполнено(ТекущийЗаказ.АдресаКоманд.СоздатьЗапросЦен);
		
		Если ЭтоЗапросЦен Тогда
			НоваяСтрока.ПредставлениеЗаказа = СтрШаблон(НСтр("ru = 'Запрос цен для %1'"), ТекущийЗаказ.Поставщик.Наименование);
		Иначе
			НоваяСтрока.ПредставлениеЗаказа = СтрШаблон(НСтр("ru = 'Заказ для %1'"), ТекущийЗаказ.Поставщик.Наименование);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущийЗаказ.НарушенияОграничений) Тогда
			
			НоваяСтрока.НарушенияОграничений = НарушениеПоЗаказу(ТекущийЗаказ.НарушенияОграничений);
			
			Если ЗначениеЗаполнено(НоваяСтрока.НарушенияОграничений) Тогда
				ЕстьНарушения = Истина;
			КонецЕсли;
			
		КонецЕсли;

		НоваяСтрока.ПредставлениеПоставщика  = ТекущийЗаказ.Поставщик.Наименование;
		НоваяСтрока.КоличествоПозиций        = ТекущийЗаказ.Товары.Количество();
		НоваяСтрока.СуммаСНДС                = ТекущийЗаказ.Итоги.СуммаСНДС;
		НоваяСтрока.СуммаНДС                 = ТекущийЗаказ.Итоги.СуммаНДС;
		НоваяСтрока.Валюта                   = ТекущийЗаказ.Итоги.Валюта;
		НоваяСтрока.ИдентификаторСвязи       = Новый УникальныйИдентификатор;
		НоваяСтрока.Организация              = Организация;
		НоваяСтрока.Картинка                 = ?(ЗначениеЗаполнено(НоваяСтрока.НарушенияОграничений), 2, 0);
		НоваяСтрока.АдресКомандыСоздатьЗаказ = ТекущийЗаказ.АдресаКоманд.СоздатьЗаказ;
		НоваяСтрока.АдресКомандыСоздатьЗапросЦен = ТекущийЗаказ.АдресаКоманд.СоздатьЗапросЦен;
		НоваяСтрока.ИдентификаторЗаказаВСервисе  = ТекущийЗаказ.АдресаКоманд.АдресЗаказа;

		НоваяСтрока.ДоступноДляОтправки = 
			ЗначениеЗаполнено(ТекущийЗаказ.АдресаКоманд.СоздатьЗапросЦен) 
				ИЛИ ЗначениеЗаполнено(ТекущийЗаказ.АдресаКоманд.СоздатьЗаказ);
				
		НоваяСтрока.РегионыДоставки.Загрузить(ТекущийЗаказ.ДанныеДоставки.РегионыДоставки);
		НоваяСтрока.АдресаСамовывоза.Загрузить(ТекущийЗаказ.ДанныеДоставки.АдресаСамовывоза);
		
		Если ЗначениеЗаполнено(НоваяСтрока.РегионыДоставки) 
			И ЗначениеЗаполнено(НоваяСтрока.АдресаСамовывоза) Тогда
			
			НоваяСтрока.СпособДоставки = "Доставка";
			
		ИначеЕсли Не ЗначениеЗаполнено(НоваяСтрока.РегионыДоставки) Тогда
			НоваяСтрока.СпособДоставки = "Самовывоз";
		Иначе
			НоваяСтрока.СпособДоставки = "Доставка";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаказыДоПерезаполнения) Тогда
			ЗаполнитьРедактируемыеДанныеЗаказа(НоваяСтрока, ЗаказыДоПерезаполнения);
		КонецЕсли;
		
		ЗаполнитьНоменклатуруПоЗаказу(
			НоваяСтрока.ИдентификаторСвязи, 
			ТекущийЗаказ.Товары, 
			ТекущийЗаказ.НарушенияОграничений);
		
	КонецЦикла;
	
	Если ЕстьНарушения Тогда
		Элементы.Заказы.КартинкаСтрок = БиблиотекаКартинок.ПризнакПодключенияОрганизацииБизнесСеть;
	Иначе
		Элементы.Заказы.КартинкаСтрок = Новый Картинка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НарушениеПоЗаказу(СписокНарушений, ИдентификаторПредложения = "")
	
	СтрокиНарушений = СписокНарушений.НайтиСтроки(
		Новый Структура("ИдентификаторПредложения", ИдентификаторПредложения));
	
	Результат = Новый СписокЗначений;
	
	Для Каждого ТекущееНарушение Из СтрокиНарушений Цикл
		Результат.Добавить(ТекущееНарушение.ТекстСообщения);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРедактируемыеДанныеЗаказа(СтрокаДанных, ЗаказыДоПерезаполнения)
	
	Если Не ЗначениеЗаполнено(ЗаказыДоПерезаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиДанныхЗаказа = ЗаказыДоПерезаполнения.НайтиСтроки(
		Новый Структура("ИдентификаторЗаказаВСервисе", СтрокаДанных.ИдентификаторЗаказаВСервисе));
	
	Если Не ЗначениеЗаполнено(СтрокиДанныхЗаказа) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокиДанныхЗаказа[0]);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОрганизацияЗарегистрирована(Знач Организация)
	
	Возврат БизнесСеть.ОрганизацияПодключена(Организация);
	
КонецФункции

&НаКлиенте
Процедура ПодключениеОрганизацииПродолжение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СтатусПодключения = "Подключена" Тогда
		ОтправитьЗаказНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗаказНаКлиенте()
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	
	ПроверитьСообщитьОНарушенииОграничений(Отказ);
	
	ПроверитьЗаполнениеДанных(Отказ);
	
	Если Не ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) 
		И Не ОрганизацияЗарегистрирована(Организация) Тогда
		
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("ПодключениеОрганизацииПродолжение", ЭтотОбъект);
		БизнесСетьСлужебныйКлиент.ОткрытьФормуПодключенияОрганизации(Организация, ЭтотОбъект, Оповещение);
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОтправитьЗаказПеречитатьКорзинуВФоне();
	
КонецПроцедуры

&НаСервере
Функция ПараметрыСозданияЗаказа()
	
	ТекущиеДанные = Заказы.НайтиПоИдентификатору(Элементы.Заказы.ТекущаяСтрока);
	
	ПараметрыФормы = ТорговыеПредложенияСлужебный.ОписаниеПараметровСозданияЗаказаКорзины();
	
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.АдресКомандыСоздатьЗаказ) Тогда
		ПараметрыФормы.АдресКоманды = ТекущиеДанные.АдресКомандыСоздатьЗаказ;
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.АдресКомандыСоздатьЗапросЦен) Тогда
		ПараметрыФормы.АдресКоманды = ТекущиеДанные.АдресКомандыСоздатьЗапросЦен;
	КонецЕсли;
	
	СтрокиДанных = Неопределено;
	
	Если ТекущиеДанные.СпособДоставки = "Самовывоз" Тогда
		СтрокиДанных = ТекущиеДанные.АдресаСамовывоза.НайтиСтроки(
			Новый Структура("ИдентификаторФИАС", ТекущиеДанные.АдресДоставки));
	Иначе
		СтрокиДанных = АдресаОрганизации.НайтиСтроки(
			Новый Структура("ИдентификаторФИАС, Организация", ТекущиеДанные.АдресДоставки, ТекущиеДанные.Организация));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокиДанных) Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, СтрокиДанных[0]);
	КонецЕсли;
	
	ПараметрыФормы.АдресКорзины = АдресКорзины;
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьЗаказПеречитатьКорзинуВФоне()
	
	ПредставлениеЗаказа = Элементы.Заказы.ТекущиеДанные.ПредставлениеЗаказа;
	
	ПараметрыОповещения = Новый Структура("ПредставлениеЗаказа", ПредставлениеЗаказа);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ОтправитьЗаказПеречитатьКорзинуЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	ДлительнаяОперация = СоздатьЗаказПеречитатьКорзинуВФоне(УникальныйИдентификатор);

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;

	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция СоздатьЗаказПеречитатьКорзинуВФоне(УникальныйИдентификатор)
	
	СохранитьДанныеФормыВСтрокуЗаказа();
	
	НастроитьЭлементыДлительнойОперации(Истина);
	
	ПараметрыСозданияЗаказа = ПараметрыСозданияЗаказа();
	
	Результат = ТорговыеПредложенияСлужебный.СоздатьЗаказПеречитатьКорзинуВФоне(
		ПараметрыСозданияЗаказа, УникальныйИдентификатор);	
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура НастроитьЭлементыДлительнойОперации(ЭтоНачалоДлительнойОперации, ЭтоОперацияСТоваром = Ложь)
	
	Если ЭтоОперацияСТоваром Тогда
		Элементы.ТоварыУдалитьТовар.Доступность = Не ЭтоНачалоДлительнойОперации;
	Иначе
		Элементы.КартинкаДлительнаяОперация.Видимость = ЭтоНачалоДлительнойОперации;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗаказПеречитатьКорзинуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	БизнесСетьСлужебныйКлиент.ВывестиСообщенияФоновогоЗадания(Результат, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПеречитатьКорзинуНаСервере(Результат.АдресРезультата, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьПодсказкуИсходящихДокументов(ДополнительныеПараметры.ПредставлениеЗаказа);
	
	БизнесСетьСлужебныйКлиент.ПоказатьОповещениеБизнесСети(НСтр("ru = 'Заказ отправлен'"));
	
	ТорговыеПредложенияКлиент.ОповеститьОбИзмененииКорзины(Результат.АдресРезультата, ЭтотОбъект);
	
	Если Заказы.Количество() = 0 Тогда
		ОчиститьДанныеЗаказа();
		ПоказатьСтраницуУспешнойОтправки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоЗапросЦен(ДанныеЗаказа)
	
	Результат = ДанныеЗаказа.СуммаСНДС = 0;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВопросПриУдаленияАдресаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьАдресИзСписка();
	
	ТекущиеДанные = Элементы.Заказы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьАдресаЗаказа(ЭтотОбъект, ТекущиеДанные);
	
	УстановитьЗаголовокПодсказкуАдреса(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьАдресИзСписка()
	
	СтрокаАдреса = СтрокаАдресаОрганизации(АдресаОрганизации, Организация, АдресДоставки);
	
	Если СтрокаАдреса <> Неопределено Тогда
		АдресаОрганизации.Удалить(СтрокаАдреса);
	КонецЕсли;
	
	АдресДоставки = "";
	
	Элементы.ДекорацияУдалитьАдрес.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти