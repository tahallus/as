#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Оформление

Процедура ДобавитьЛинииОбласти(ВыделениеОбласти, ЛинияЯчейки)
	
	ВыделениеОбласти.ГраницаСверху = ЛинияЯчейки;
	ВыделениеОбласти.ГраницаСлева = ЛинияЯчейки;
	ВыделениеОбласти.ГраницаСправа = ЛинияЯчейки;
	ВыделениеОбласти.ГраницаСнизу = ЛинияЯчейки;
	
КонецПроцедуры

Процедура ОформлениеСтрокиТабличногоДокумента(ПараметрыФормирования, ТабличныйДокумент, МассивВыделяемыхОбластей)
	
	Если МассивВыделяемыхОбластей.Количество() < 1 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ПараметрыФормирования.МаксимальнаяЦена = Истина Тогда
		
		НовыйЦветФона = Новый Цвет(250, 200, 200);
		
	ИначеЕсли ПараметрыФормирования.МинимальнаяЦена = Истина Тогда
		
		НовыйЦветФона = Новый Цвет(200, 200, 250);
		
	КонецЕсли;
	
	Для каждого ИмяОбласти Из МассивВыделяемыхОбластей Цикл
		
		ТабличныйДокумент.Область(ИмяОбласти).ЦветФона = НовыйЦветФона;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыделитьЦенуПоУсловиюВПрайсЛистеДвеКолонки(ПараметрыФормирования, ОбластьЯчейкиДокумента)
	Перем ТекущаяЦена;
	
	Если ОбластьЯчейкиДокумента = Неопределено 
		ИЛИ НЕ ПараметрыФормирования.УсловнаяЦена Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураРасшифровки = ОбластьЯчейкиДокумента.Расшифровка;
	Если ТипЗнч(СтруктураРасшифровки) <> Тип("Структура") Тогда
		
		Возврат;
		
	КонецЕсли;
		
	СтруктураРасшифровки.Свойство("Цена", ТекущаяЦена);
	Если ТекущаяЦена = Неопределено 
		ИЛИ ТекущаяЦена = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НужноОформить = ПроверитьУсловиеФильтра(ТекущаяЦена, ПараметрыФормирования.УсловнаяЦенаУсловие, ПараметрыФормирования.УсловнаяЦенаЗначение, ПараметрыФормирования.УсловнаяЦенаЗначениеДо);
	Если НужноОформить = Истина Тогда
		
		ОбластьЯчейкиДокумента.ЦветФона = Новый Цвет(250, 250, 0);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОформлениеПрайсЛистаПолотно(ПараметрыФормирования, ТабличныйДокумент)
	
	// R3C2 - 3 строка, 2 колонка
	
	НомерПервойСтроки = ?(ЗначениеЗаполнено(ПараметрыФормирования.Организация), 15, 4);
	НомерПоследнейСтроки = ТабличныйДокумент.ВысотаТаблицы;
	
	Если НомерПоследнейСтроки <= НомерПервойСтроки Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МассивВыделяемыхОбластей = Новый Массив;
	Для НомерСтроки = НомерПервойСтроки По НомерПоследнейСтроки Цикл
		
		МассивВыделяемыхОбластей.Очистить();
		
		МаксимальнаяЦена = Неопределено;
		МинимальнаяЦена = Неопределено;
		
		НомерКолонки = ПараметрыФормирования.ПоследняяКолонкаЗаголовка;
		Для каждого ОписаниеКолонки Из ПараметрыФормирования.ИменаКолонок Цикл
			
			НомерКолонки = НомерКолонки + 2;
			ИмяОбласти = СтрШаблон("R%1C%2:R%1C%3", Формат(НомерСтроки, "ЧГ="), Формат(НомерКолонки - 1, "ЧГ="), Формат(НомерКолонки, "ЧГ="));
			ТекущаяЦена		= 0;
			
			ТекущаяОбласть = ТабличныйДокумент.Область(ИмяОбласти);
			Если ТипЗнч(ТекущаяОбласть.Расшифровка) = Тип("Структура") Тогда
				
				ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 255);
				ТекущаяОбласть.Расшифровка.Свойство("Цена", ТекущаяЦена);
				
				Если ТекущаяЦена = Неопределено Тогда
					
					ТекущаяЦена = 0;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекущаяЦена = 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ПараметрыФормирования.МаксимальнаяЦена = Истина Тогда
				
				Если МаксимальнаяЦена = Неопределено Тогда
					
					МаксимальнаяЦена = ТекущаяЦена;
					МассивВыделяемыхОбластей.Добавить(ИмяОбласти);
					
				ИначеЕсли ТекущаяЦена > МаксимальнаяЦена Тогда
					
					МаксимальнаяЦена = ТекущаяЦена;
					
					МассивВыделяемыхОбластей.Очистить();
					МассивВыделяемыхОбластей.Добавить(ИмяОбласти);
					
				ИначеЕсли ТекущаяЦена = МаксимальнаяЦена Тогда
					
					МассивВыделяемыхОбластей.Добавить(ИмяОбласти);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПараметрыФормирования.МинимальнаяЦена = Истина Тогда
				
				Если МинимальнаяЦена = Неопределено Тогда
					
					МинимальнаяЦена = ТекущаяЦена;
					МассивВыделяемыхОбластей.Добавить(ИмяОбласти);
					
				ИначеЕсли ТекущаяЦена < МинимальнаяЦена Тогда
					
					МинимальнаяЦена = ТекущаяЦена;
					
					МассивВыделяемыхОбластей.Очистить();
					МассивВыделяемыхОбластей.Добавить(ИмяОбласти);
					
				ИначеЕсли ТекущаяЦена = МинимальнаяЦена Тогда
					
					МассивВыделяемыхОбластей.Добавить(ИмяОбласти);
					
				КонецЕсли;
				
			КонецЕсли;
		
			Если ПараметрыФормирования.УсловнаяЦена = Истина Тогда
				
				РезультатПроверки = ПроверитьУсловиеФильтра(ТекущаяЦена, ПараметрыФормирования.УсловнаяЦенаУсловие, ПараметрыФормирования.УсловнаяЦенаЗначение, ПараметрыФормирования.УсловнаяЦенаЗначениеДо);
				Если РезультатПроверки = Истина Тогда
					
					ТекущаяОбласть.ЦветФона = Новый Цвет(250, 250, 0);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОформлениеСтрокиТабличногоДокумента(ПараметрыФормирования, ТабличныйДокумент, МассивВыделяемыхОбластей);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОформлениеПрайсЛистаДвеКолонки(ПараметрыФормирования, ТабличныйДокумент)
	
	// R3C2 - 3 строка, 2 колонка
	
	НомерПервойСтроки = ?(ЗначениеЗаполнено(ПараметрыФормирования.Организация), 15, 4);
	НомерПоследнейСтроки = ТабличныйДокумент.ВысотаТаблицы;
	
	Если НомерПоследнейСтроки <= НомерПервойСтроки Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЦенаПерваяКолонкаНомер = 0;
	ЦенаВтораяКолонкаНомер = 0;
	
	МассивВыделяемыхОбластей = Новый Массив;
	Для НомерСтроки = НомерПервойСтроки По НомерПоследнейСтроки Цикл
		
		МассивВыделяемыхОбластей.Очистить();
		
		ОбластьЦенаПерваяКолонка = Неопределено;
		ОбластьЦенаВтораяКолонка = Неопределено;
		
		Если ЦенаПерваяКолонкаНомер = 0
			ИЛИ ЦенаВтораяКолонкаНомер = 0 Тогда
			
			Для НомерКолонки = 2 По 20 Цикл
				
				ОбластьЦена = ТабличныйДокумент.Область(СтрШаблон("R%1C%2", Формат(НомерСтроки, "ЧГ="), НомерКолонки));
				Если ТипЗнч(ОбластьЦена.Расшифровка) <> Тип("Структура") Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если ЦенаПерваяКолонкаНомер = 0 Тогда
					
					ЦенаПерваяКолонкаНомер = НомерКолонки;
					ОбластьЦенаПерваяКолонка = ОбластьЦена;
					
				ИначеЕсли ЦенаВтораяКолонкаНомер = 0 Тогда
					
					ЦенаВтораяКолонкаНомер = НомерКолонки;
					ОбластьЦенаВтораяКолонка = ОбластьЦена;
					
				Иначе
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ОбластьЦенаПерваяКолонка = ТабличныйДокумент.Область(СтрШаблон("R%1C%2", Формат(НомерСтроки, "ЧГ="), ЦенаПерваяКолонкаНомер));
			ОбластьЦенаВтораяКолонка = ТабличныйДокумент.Область(СтрШаблон("R%1C%2", Формат(НомерСтроки, "ЧГ="), ЦенаВтораяКолонкаНомер));
			
		КонецЕсли;
		
		ВыделитьЦенуПоУсловиюВПрайсЛистеДвеКолонки(ПараметрыФормирования, ОбластьЦенаПерваяКолонка);
		ВыделитьЦенуПоУсловиюВПрайсЛистеДвеКолонки(ПараметрыФормирования, ОбластьЦенаВтораяКолонка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеОбластейМакета

Функция СоздатьОбластьЗаголовок(ПараметрыФормирования, ТабличныйДокумент, МакетПолотно)
	
	ИспользоватьЛоготип = (ПараметрыФормирования.ВыводитьКонтактнуюИнформацию И ЗначениеЗаполнено(ПараметрыФормирования.Логотип));
	ОбластьЗаголовок = МакетПолотно.ПолучитьОбласть(?(ИспользоватьЛоготип, "ЗаголовокСЛоготипом", "ЗаголовокБезЛоготипа"));
	
	НомерКолонки = 1;
	ОбластьЗаголовок.Область("C" + Строка(НомерКолонки)).ШиринаКолонки = 2; // Отступ
	
	Для каждого Строка Из ПараметрыФормирования.ПредставлениеНоменклатуры Цикл
		
		Если НЕ Строка.Использование Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НомерКолонки = НомерКолонки + 1;
		
		Если Строка.РеквизитНоменклатуры = "Картинка" Тогда
			
			ШиринаКолонки = ПараметрыФормирования.КартинкаШирина;
			
		Иначе
			
			ШиринаКолонки = ?((НомерКолонки = 2 И Строка.Ширина < 14), 14, Строка.Ширина);
			
		КонецЕсли;
		
		Если Строка.РеквизитНоменклатуры = "ПризнакНовинка" Тогда
			
			ПараметрыФормирования.Вставить("КолонкаСКартинкойНовинка", НомерКолонки);
			
		КонецЕсли;
		
		ОбластьЗаголовок.Область("C" + Строка(НомерКолонки)).ШиринаКолонки = ШиринаКолонки;
		
	КонецЦикла;
	
	КоличествоЦен = ПараметрыФормирования.ТаблицаВидовЦен.Количество();
	Для ИндексЦены = 1 По КоличествоЦен Цикл
		
		ОбластьЗаголовок.Область(1, НомерКолонки+1, 1, НомерКолонки+1).ШиринаКолонки = 3;	// ед. измерения
		ОбластьЗаголовок.Область(1, НомерКолонки+2, 1, НомерКолонки+2).ШиринаКолонки = 12;	// цена
		
		НомерКолонки = НомерКолонки + 2;
		
	КонецЦикла;
	
	Возврат ОбластьЗаголовок;
	
КонецФункции

Функция СоздатьОбластьШапка(ПараметрыФормирования, ТабличныйДокумент, МакетПолотно)
	
	ОбластьШапка	= МакетПолотно.ПолучитьОбласть("Шапка");
	ЛинияЯчейки		= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	НомерКолонки	= ПараметрыФормирования.ПоследняяКолонкаЗаголовка;
	
	Для каждого Строка Из ПараметрыФормирования.ПредставлениеНоменклатуры Цикл
		
		Если НЕ Строка.Использование Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НомерКолонки = НомерКолонки + 1;
		
		ВыделениеОбласти = ОбластьШапка.Область(СтрШаблон("R1C%1", НомерКолонки));
		Если Строка.РеквизитНоменклатуры = "ПризнакНовинка" Тогда
			
			ВыделениеОбласти.Текст			= НСтр("ru ='НОВ.'");
			
		Иначе
			
			ВыделениеОбласти.Текст			= Строка.РеквизитПредставление;
			
		КонецЕсли;
		
		ВыделениеОбласти.РазмещениеТекста	= ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ВыделениеОбласти.ЦветФона			= ЦветаСтиля.ЦветРамкиГруппыЦеныИВалюты;
		
		ДобавитьЛинииОбласти(ВыделениеОбласти, ЛинияЯчейки);
		
	КонецЦикла;
	
	ПараметрыФормирования.ПоследняяКолонкаЗаголовка = НомерКолонки;
	
	КоличествоЦен = ПараметрыФормирования.ТаблицаВидовЦен.Количество();
	Для ИндексЦены = 1 По КоличествоЦен Цикл
		
		ЗаголовокВидаЦен = ?(ПараметрыФормирования.НазваниеЦеныПредставлением, Строка(ПараметрыФормирования.ТаблицаВидовЦен[ИндексЦены - 1].ВидЦен), НСтр("ru ='Цена '") + ИндексЦены);
		
		ВыделениеОбласти = ОбластьШапка.Область(1, НомерКолонки+1, 1, НомерКолонки+2);
		ВыделениеОбласти.Объединить();
		ВыделениеОбласти.Текст						= ЗаголовокВидаЦен;
		ВыделениеОбласти.ЦветФона					= ЦветаСтиля.ЦветРамкиГруппыЦеныИВалюты;
		ВыделениеОбласти.ГоризонтальноеПоложение	= ГоризонтальноеПоложение.Центр;
		ВыделениеОбласти.РазмещениеТекста			= ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ВыделениеОбласти.ПараметрРасшифровки		= "ВидЦен_" + Строка(ИндексЦены - 1);
		
		Если ПараметрыФормирования.ТаблицаВидовЦен[ИндексЦены - 1].ЦеныАктуальны = Ложь Тогда
			
			ВыделениеОбласти.Картинка							= БиблиотекаКартинок.ВниманиеВВидеТреугольника;
			ВыделениеОбласти.РазмерКартинки						= РазмерКартинки.РеальныйРазмер;
			ВыделениеОбласти.ГоризонтальноеПоложениеКартинки	= ГоризонтальноеПоложение.Право;
			ВыделениеОбласти.ВертикальноеПоложениеКартинки		= ВертикальноеПоложение.Верх;
			ВыделениеОбласти.ПоложениеТекстаОтносительноКартинки= ПоложениеТекстаОтносительноКартинки.Поверх;
			
		КонецЕсли;
		
		ДобавитьЛинииОбласти(ВыделениеОбласти, ЛинияЯчейки);
		
		НомерКолонки = НомерКолонки + 2;
		
	КонецЦикла;
	
	ПараметрыФормирования.ПоследняяКолонкаПрайсЛиста = НомерКолонки;
	
	Возврат ОбластьШапка;
	
КонецФункции

Функция СоздатьОбластьСтрока(ПараметрыФормирования, МакетПолотно)
	
	ОбластьСтрока	= МакетПолотно.ПолучитьОбласть("Строка");
	ЛинияЯчейки		= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Точечная, 1);
	
	НомерКолонки = 1;
	Для каждого Строка Из ПараметрыФормирования.ПредставлениеНоменклатуры Цикл
		
		Если Строка.Использование Тогда
			
			НомерКолонки				= НомерКолонки + 1;
			ВыделениеОбласти			= ОбластьСтрока.Область(1, НомерКолонки, 1, НомерКолонки);
			ВыделениеОбласти.Заполнение	= ТипЗаполненияОбластиТабличногоДокумента.Параметр;
			ВыделениеОбласти.Параметр	= Строка.РеквизитНоменклатуры;
			ВыделениеОбласти.ПараметрРасшифровки = Строка.ПараметрРасшифровки;
			ВыделениеОбласти.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			
			ДобавитьЛинииОбласти(ВыделениеОбласти, ЛинияЯчейки);
			
			Если Строка.РеквизитНоменклатуры = "Картинка" Тогда
				
				ВыделениеОбласти.Имя = "Картинка";
				ВыделениеОбласти.ВысотаСтроки = ПараметрыФормирования.КартинкаВысота;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаТаблицыВидовЦен Из ПараметрыФормирования.ТаблицаВидовЦен Цикл
		
		НомерКолонки = НомерКолонки + 1;
		ВыделениеОбласти 			= ОбластьСтрока.Область(1, НомерКолонки, 1, НомерКолонки);
		ВыделениеОбласти.Заполнение	= ТипЗаполненияОбластиТабличногоДокумента.Параметр;
		ВыделениеОбласти.Параметр	= "ЕдиницаЦена_" + Строка(СтрокаТаблицыВидовЦен.НомерСтроки);
		ВыделениеОбласти.ПараметрРасшифровки = "СтруктураРасшифровки" + Строка(СтрокаТаблицыВидовЦен.НомерСтроки);
		
		ДобавитьЛинииОбласти(ВыделениеОбласти, ЛинияЯчейки);
		
		НомерКолонки = НомерКолонки + 1;
		ВыделениеОбласти 			= ОбластьСтрока.Область(1, НомерКолонки, 1, НомерКолонки);
		ВыделениеОбласти.Заполнение	= ТипЗаполненияОбластиТабличногоДокумента.Параметр;
		ВыделениеОбласти.Параметр	= "Цена_" + Строка(СтрокаТаблицыВидовЦен.НомерСтроки);
		ВыделениеОбласти.ПараметрРасшифровки = "СтруктураРасшифровки" + Строка(СтрокаТаблицыВидовЦен.НомерСтроки);
		ВыделениеОбласти.Формат		=  "ЧЦ=15; ЧДЦ=2";
		
		ДобавитьЛинииОбласти(ВыделениеОбласти, ЛинияЯчейки);
		
	КонецЦикла;
	
	Возврат ОбластьСтрока;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеТабличногоДокумента

Функция ЗаполнитьРасшифровкуЦены(НастройкиПрайсЛиста, ВидЦен = Неопределено, Номенклатура = Неопределено, Характеристика = Неопределено, ЕдиницаИзмерения = Неопределено, Цена = Неопределено, Актуальность = Истина, ВключаяХарактеристики = Ложь)
	
	СтруктураРасшифровки = Новый Структура;
	СтруктураРасшифровки.Вставить("ВидЦен",				ВидЦен);
	СтруктураРасшифровки.Вставить("Номенклатура",		Номенклатура);
	
	Если НастройкиПрайсЛиста.ИспользоватьХарактеристики Тогда
		
		СтруктураРасшифровки.Вставить("Характеристика", Характеристика);
		
	КонецЕсли;
	
	СтруктураРасшифровки.Вставить("ЕдиницаИзмерения",	ЕдиницаИзмерения);
	СтруктураРасшифровки.Вставить("Цена",				Цена);
	СтруктураРасшифровки.Вставить("Актуальность",		Актуальность);
	СтруктураРасшифровки.Вставить("ВключаяХарактеристики", ВключаяХарактеристики);
	
	Возврат СтруктураРасшифровки;
	
КонецФункции

Функция СтрокаДатаФормированияИВалюта(ПараметрыФормирования)
	
	ДатаФормированияИВалюта = "";
	
	Если ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций") Тогда
		
		Если ЗначениеЗаполнено(ПараметрыФормирования.Валюта) 
			И ПараметрыФормирования.Валюта <> Константы.НациональнаяВалюта.Получить() Тогда
			
			ДатаФормированияИВалюта = СтрШаблон(НСтр("ru ='Валюта: %1'"), ПараметрыФормирования.Валюта);
			ДатаРасчетаКурсаВалюты = ?(ЗначениеЗаполнено(ПараметрыФормирования.ДатаРасчетаКурсаВалюты), ПараметрыФормирования.ДатаРасчетаКурсаВалюты, ТекущаяДатаСеанса());
			КурсыВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПараметрыФормирования.Валюта, ДатаРасчетаКурсаВалюты);
			
			ДатаФормированияИВалюта = ДатаФормированияИВалюта + СтрШаблон(НСтр("ru =', курс %1'"), КурсыВалюты.Курс);
			Если КурсыВалюты.Кратность <> 1 Тогда
				
				ДатаФормированияИВалюта = ДатаФормированияИВалюта + СтрШаблон(НСтр("ru =', кратность %1'"), КурсыВалюты.Кратность);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыФормирования.ПериодЦен) Тогда
		
		ПериодЦенСтрокой = СтрШаблон(НСтр("ru ='Цены указаны на %1'"), Формат(ПараметрыФормирования.ПериодЦен, "ДФ=dd.MM.yy"));
		Если НЕ ПустаяСтрока(ДатаФормированияИВалюта) Тогда
			
			ПериодЦенСтрокой = ПериодЦенСтрокой + "; ";
			
		КонецЕсли;
		
		ДатаФормированияИВалюта = ПериодЦенСтрокой + ДатаФормированияИВалюта;
		
	КонецЕсли;
	
	Если ПараметрыФормирования.ВыводитьДатуФормирования Тогда
		
		ДатаФормирования = СтрШаблон(НСтр("ru ='Сформирован %1'"), Формат(ПараметрыФормирования.ДатаФормирования, "ДЛФ=DD"));
		Если НЕ ПустаяСтрока(ДатаФормированияИВалюта) Тогда
			
			ДатаФормирования = ДатаФормирования + "; ";
			
		КонецЕсли;
		
		ДатаФормированияИВалюта = ДатаФормирования + ДатаФормированияИВалюта;
		
	КонецЕсли;
	
	Возврат ДатаФормированияИВалюта;
	
КонецФункции

Функция ИмяРеквизитаПредставленияНоменклатуры(ПараметрыФормирования)
	
	ИмяРеквизита = "Наименование";
	
	ПредставлениеНоменклатуры = ПараметрыФормирования.ПредставлениеНоменклатуры;
	
	СтрокаПредставления = ПредставлениеНоменклатуры.Найти("НаименованиеПолное", "РеквизитНоменклатуры");
	Если СтрокаПредставления.Использование Тогда
		
		Возврат СтрокаПредставления["РеквизитНоменклатуры"];
		
	КонецЕсли;
	
	СтрокаПредставления = ПредставлениеНоменклатуры.Найти("Комментарий", "РеквизитНоменклатуры");
	Если СтрокаПредставления.Использование Тогда
		
		Возврат СтрокаПредставления["РеквизитНоменклатуры"];
		
	КонецЕсли;
	
	Возврат ИмяРеквизита;
	
КонецФункции

Функция ИмяРеквизитаКодаНоменклатуры(ПараметрыФормирования)
	
	ПредставлениеНоменклатуры = ПараметрыФормирования.ПредставлениеНоменклатуры;
	
	СтрокаПредставления = ПредставлениеНоменклатуры.Найти("Артикул", "РеквизитНоменклатуры");
	
	Если СтрокаПредставления.Использование Тогда
		Возврат "Артикул";
	КонецЕсли;
	
	СтрокаПредставления = ПредставлениеНоменклатуры.Найти("Код", "РеквизитНоменклатуры");
	
	Если СтрокаПредставления.Использование Тогда
		Возврат "Код";
	КонецЕсли;
	
	СтрокаПредставления = ПредставлениеНоменклатуры.Найти("Штрихкод", "РеквизитНоменклатуры");
	
	Если СтрокаПредставления.Использование Тогда
		Возврат "Штрихкод";
	КонецЕсли;
	
КонецФункции

#Область Строки

Функция ПроверитьУсловиеФильтра(Знач ПроверяемоеЗначение, Знач ВидСравненияЗначений, Знач Значение, Знач ЗначениеДо)
	
	Если ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.Равно Тогда
		
		Возврат ПроверяемоеЗначение = Значение;
		
	ИначеЕсли ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.НеРавно Тогда
		
		Возврат ПроверяемоеЗначение <> Значение;
		
	ИначеЕсли ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.Больше Тогда
		
		Возврат ПроверяемоеЗначение > Значение;
		
	ИначеЕсли ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.БольшеИлиРавно Тогда
		
		Возврат ПроверяемоеЗначение >= Значение;
		
	ИначеЕсли ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.Меньше Тогда
		
		Возврат ПроверяемоеЗначение < Значение;
		
	ИначеЕсли ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.МеньшеИлиРавно Тогда
		
		Возврат ПроверяемоеЗначение <= Значение;
		
	ИначеЕсли ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.ВИнтервале Тогда
		
		Возврат ПроверяемоеЗначение > Значение И ПроверяемоеЗначение < ЗначениеДо;
		
	ИначеЕсли ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.ВИнтервалеВключая Тогда
		
		Возврат ПроверяемоеЗначение >= Значение И ПроверяемоеЗначение <= ЗначениеДо;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ИсключитьНоменклатуруПоСравнениюЦенКонтрагентов(ПараметрыФормирования, СтрокаДерева)
	Перем ЛевоеЗначение, ПравоеЗначение;
	
	
	Если НЕ ЗначениеЗаполнено(ПараметрыФормирования.ВидЦенУсловие) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыФормирования.ВидЦен1) Тогда
		
		ЛевоеЗначение = СтрокаДерева[ПараметрыФормирования.ИменаКолонок[ПараметрыФормирования.ВидЦен1.УникальныйИдентификатор()]];
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЛевоеЗначение) Тогда
		
		ЛевоеЗначение = 0;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыФормирования.ВидЦен2)
		И ЗначениеЗаполнено(ПараметрыФормирования.ИменаКолонок[ПараметрыФормирования.ВидЦен2.УникальныйИдентификатор()])
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДерева, ПараметрыФормирования.ИменаКолонок[ПараметрыФормирования.ВидЦен2.УникальныйИдентификатор()]) Тогда
		
		ПравоеЗначение = СтрокаДерева[ПараметрыФормирования.ИменаКолонок[ПараметрыФормирования.ВидЦен2.УникальныйИдентификатор()]];
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПравоеЗначение) Тогда
		
		ПравоеЗначение = 0;
		
	КонецЕсли;
	
	СтрокаДерева.ОтобразитьСтроку = ПроверитьУсловиеФильтра(ЛевоеЗначение, ПараметрыФормирования.ВидЦенУсловие, ПравоеЗначение, 0);
	
КонецПроцедуры

Процедура ОтобратьСтрокиРекурсивно(ПараметрыФормирования, КоллекцияСтрок)
	
	Для каждого СтрокаДерева Из КоллекцияСтрок Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
			
			ОтобратьСтрокиРекурсивно(ПараметрыФормирования, СтрокаДерева.Строки);
			
		КонецЕсли;
		
		ИсключитьНоменклатуруПоСравнениюЦенКонтрагентов(ПараметрыФормирования, СтрокаДерева);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтработатьОсобенностиВыводаГруппВТабличныйДокумент(Строка, ПредставлениеГруппы, ПараметрыФормирования, ВывестиГруппуВДокумент)
	
	Если ПараметрыФормирования.ИерархияСодержимого = Перечисления.ИерархияПрайсЛистов.ИерархияКатегорийНоменклатуры Тогда
		
		Если ЗначениеЗаполнено(Строка.ИерархияПоКатегориямНоменклатуры)
			И НЕ ЗначениеЗаполнено(Строка.КатегорияНоменклатуры) Тогда
			
			ПредставлениеГруппы = Строка.ИерархияПоКатегориямНоменклатуры;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Родитель)
			И Строка.ИерархияПоКатегориямНоменклатуры = Строка.Родитель.ИерархияПоКатегориямНоменклатуры
			И Строка.КатегорияНоменклатуры = Строка.Родитель.КатегорияНоменклатуры
			Тогда
			
			ВывестиГруппуВДокумент = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(Строка.Родитель)
			И Строка[ПараметрыФормирования.ИмяПоляПредставленияГруппы] = Строка.Родитель[ПараметрыФормирования.ИмяПоляПредставленияГруппы]
			Тогда
			
			ВывестиГруппуВДокумент = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиГруппуВТабличныйДокументПолотно(КоллекцияСтрок, ПараметрыФормирования, ТабличныйДокумент)
	
	ОбластьГруппа		= ПараметрыФормирования.ОбластьГруппа;
	ОбластьСтрока		= ПараметрыФормирования.ОбластьСтрока;
	ВыводитьКартинки	= ПараметрыФормирования.ВыводитьКартинки;
	ОтмечатьНовинки		= ПараметрыФормирования.ИспользуетсяПризнакНовинка;
	СвободныйОстаток	= ПараметрыФормирования.СвободныйОстаток;
	ПредставлениеОстатков = ПараметрыФормирования.ПредставлениеОстатков;
	
	ЗначенияПараметров = Новый Структура;
	
	Для каждого Строка Из КоллекцияСтрок Цикл
		
		Если Строка.ЭтоГруппа = Неопределено Тогда
			
			ВывестиГруппуВДокумент = Истина;
			ПредставлениеГруппы = Строка[ПараметрыФормирования.ИмяПоляПредставленияГруппы]; // ПредставлениеГруппыВИерархии;
			
			ОтработатьОсобенностиВыводаГруппВТабличныйДокумент(Строка, ПредставлениеГруппы, ПараметрыФормирования, ВывестиГруппуВДокумент);
			
			ГруппировкаОткрыта = Ложь;
			Если ВывестиГруппуВДокумент Тогда
				
				ЗначенияПараметров.Вставить("ПредставлениеГруппы", ПредставлениеГруппы);
				ОбластьГруппа.Параметры.Заполнить(ЗначенияПараметров);
				ТабличныйДокумент.Вывести(ОбластьГруппа);
				
				ТабличныйДокумент.НачатьГруппуСтрок();
				ГруппировкаОткрыта = Истина;
				
			КонецЕсли;
			
			ВывестиГруппуВТабличныйДокументПолотно(Строка.Строки, ПараметрыФормирования, ТабличныйДокумент);
			
			Если ГруппировкаОткрыта Тогда
				
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если Строка.ОтобразитьСтроку = Ложь Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ОбластьСтрока.Параметры.Заполнить(Строка);
		
		// :::Картинка
		Если ВыводитьКартинки Тогда
			
			Если ЗначениеЗаполнено(Строка.Картинка) Тогда
				
				ПараметрыФормирования.РазмерКартинокБайт = ПараметрыФормирования.РазмерКартинокБайт + Число(Строка.Картинка.Размер);
				
				ДанныеКартинки = РаботаСФайлами.ДвоичныеДанныеФайла(Строка.Картинка, Ложь);
				Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
					
					ОбластьСтрока.Область("Картинка").Картинка = Новый Картинка(ДанныеКартинки);
					
				КонецЕсли;
				
			Иначе
				
				ОбластьСтрока.Область("Картинка").Картинка = Неопределено;
				
			КонецЕсли;
			
			ОбластьСтрока.Параметры.Картинка = ""; // Что-бы под картинкой не выглядывал текст...
			
		КонецЕсли;
		
		// :::Новинка
		Если ОтмечатьНовинки Тогда
			
			ОбластьНовинка = ОбластьСтрока.Область(1, ПараметрыФормирования.КолонкаСКартинкойНовинка, 1, ПараметрыФормирования.КолонкаСКартинкойНовинка);
			ОбластьНовинка.РазмерКартинки					= РазмерКартинки.РеальныйРазмер;
			ОбластьНовинка.ГоризонтальноеПоложениеКартинки	= ГоризонтальноеПоложение.Центр;
			ОбластьНовинка.ВертикальноеПоложениеКартинки	= ВертикальноеПоложение.Центр;
			ОбластьНовинка.Картинка							= ?(Строка.ЭтоНовинка, БиблиотекаКартинок.НовинкаСтикер, Неопределено);
			
		КонецЕсли;
		
		// :::Представление остатков
		Если ПараметрыФормирования.СвободныйОстаток Тогда
			
			Если ПараметрыФормирования.ПредставлениеОстатков = 2 Тогда
				
				Если Строка.НижняяГраницаОстатков = 0 
					ИЛИ Строка.ВерхняяГраницаОстатков = 0 
					ИЛИ Строка.НижняяГраницаОстатков >= Строка.ВерхняяГраницаОстатков 
					Тогда
					
					ОбластьСтрока.Параметры.СвободныйОстаток = НСтр("ru = 'Не указано'");
					
				ИначеЕсли Строка.СвободныйОстаток <= Строка.НижняяГраницаОстатков Тогда
					
					ОбластьСтрока.Параметры.СвободныйОстаток = ПараметрыФормирования.ТекстовоеПредставлениеОстатковМало;
					
				ИначеЕсли Строка.СвободныйОстаток >= Строка.ВерхняяГраницаОстатков Тогда
					
					ОбластьСтрока.Параметры.СвободныйОстаток = ПараметрыФормирования.ТекстовоеПредставлениеОстатковМного;
					
				Иначе
					
					ОбластьСтрока.Параметры.СвободныйОстаток = ПараметрыФормирования.ТекстовоеПредставлениеОстатковДостаточно;
					
				КонецЕсли;
				
			Иначе
				
				ОбластьСтрока.Параметры.СвободныйОстаток = Формат(Строка.СвободныйОстаток, "ЧЦ=15; ЧДЦ=1");
				
			КонецЕсли;
			
		КонецЕсли;
		
		// :::Расшифровки
		ЗначенияПараметров.Очистить();
		ЗначенияПараметров.Вставить("НоменклатураСсылка", Строка.Номенклатура);
		
		ХарактеристикаСсылка = ?(ПараметрыФормирования.ИспользоватьХарактеристики, Строка.Характеристика, Неопределено);
		Если ПараметрыФормирования.ИспользоватьХарактеристики Тогда
			
			РасшифровкаХарактеристика = Новый Структура("Номенклатура, Характеристика, ЭтоХарактеристика", Строка.Номенклатура, ХарактеристикаСсылка, Истина);
			ЗначенияПараметров.Вставить("РасшифровкаХарактеристика", РасшифровкаХарактеристика);
			
		КонецЕсли;
		
		Для каждого СтрокаВидЦены Из ПараметрыФормирования.ТаблицаВидовЦен Цикл
			
			Ключ = "СтруктураРасшифровки" + СтрокаВидЦены.НомерСтроки;
			
			СтруктураРасшифровки = ЗаполнитьРасшифровкуЦены(ПараметрыФормирования, СтрокаВидЦены.ВидЦен, Строка.Номенклатура, ХарактеристикаСсылка, 
				Строка["ЕдиницаЦена_" + СтрокаВидЦены.НомерСтроки], Строка["Цена_" + СтрокаВидЦены.НомерСтроки]);
			
			ЗначенияПараметров.Вставить(Ключ, СтруктураРасшифровки);
			
		КонецЦикла;
		
		ОбластьСтрока.Параметры.Заполнить(ЗначенияПараметров);
		ОбластьЯчеек = ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиГруппуВТабличныйДокументДвеКолонки(КоллекцияСтрок, ПараметрыФормирования, ТабличныйДокумент)
	
	ИмяРеквизитаКодаНоменклатуры			= ИмяРеквизитаКодаНоменклатуры(ПараметрыФормирования);
	ИмяРеквизитаПредставленияНоменклатуры	= ИмяРеквизитаПредставленияНоменклатуры(ПараметрыФормирования);
	
	ОбластьГруппа		= ПараметрыФормирования.ОбластьГруппа;
	ОбластьСтрока		= ПараметрыФормирования.ОбластьСтрока;
	ВыводитьКартинки	= ПараметрыФормирования.ВыводитьКартинки;
	ОтмечатьНовинки		= ПараметрыФормирования.ИспользуетсяПризнакНовинка;
	ВидЦен 				= ?(ПараметрыФормирования.ТаблицаВидовЦен.Количество() = 0, Неопределено, ПараметрыФормирования.ТаблицаВидовЦен[0].ВидЦен);
	
	ЗначенияПараметров = Новый Структура;
	
	ЗначенияПараметров.Очистить();
	ПерваяКолонка = Истина;
	Для каждого Строка Из КоллекцияСтрок Цикл
		
		Если Строка.ЭтоГруппа = Неопределено Тогда
			
			Если ЗначенияПараметров.Количество() > 0 Тогда
				
				ОбластьСтрока.Параметры.Заполнить(ЗначенияПараметров);
				ТабличныйДокумент.Вывести(ОбластьСтрока);
				ЗначенияПараметров.Очистить();
				
			КонецЕсли;
			
			ВывестиГруппуВДокумент = Истина;
			ПредставлениеГруппы = Строка[ПараметрыФормирования.ИмяПоляПредставленияГруппы]; // ПредставлениеГруппыВИерархии;
			
			ОтработатьОсобенностиВыводаГруппВТабличныйДокумент(Строка, ПредставлениеГруппы, ПараметрыФормирования, ВывестиГруппуВДокумент);
			
			ГруппировкаОткрыта = Ложь;
			Если ВывестиГруппуВДокумент Тогда
				
				ЗначенияПараметров.Вставить("ПредставлениеГруппы", ПредставлениеГруппы);
				ОбластьГруппа.Параметры.Заполнить(ЗначенияПараметров);
				ТабличныйДокумент.Вывести(ОбластьГруппа);
				
				ТабличныйДокумент.НачатьГруппуСтрок();
				ГруппировкаОткрыта = Истина;
				ЗначенияПараметров.Очистить();
				
			КонецЕсли;
			
			ВывестиГруппуВТабличныйДокументДвеКолонки(Строка.Строки, ПараметрыФормирования, ТабличныйДокумент);
			
			Если ГруппировкаОткрыта Тогда
				
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если Строка.ОтобразитьСтроку = Ложь Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ПерваяКолонка Тогда
			
			ЗначенияПараметров.Вставить("НоменклатураСсылка", 		Строка.Номенклатура);
			ЗначенияПараметров.Вставить("Артикул", 					Строка[ИмяРеквизитаКодаНоменклатуры]);
			ЗначенияПараметров.Вставить("ПредставлениеНоменклатуры",Строка[ИмяРеквизитаПредставленияНоменклатуры]);
			ЗначенияПараметров.Вставить("ЭтоНовинка", 				Строка.ЭтоНовинка);
			ЗначенияПараметров.Вставить("ЕдиницаИзмерения", 		?(ВидЦен = Неопределено, Неопределено, Строка.ЕдиницаЦена_1));
			ЗначенияПараметров.Вставить("Цена", 					?(ВидЦен = Неопределено, Неопределено, Строка.Цена_1));
			
			СтруктураРасшифровки = ЗаполнитьРасшифровкуЦены(ПараметрыФормирования, ВидЦен, Строка.Номенклатура, , ЗначенияПараметров.ЕдиницаИзмерения, ЗначенияПараметров.Цена);
			ЗначенияПараметров.Вставить("СтруктураРасшифровки", СтруктураРасшифровки);
			
			ЗначенияПараметров.Вставить("НоменклатураСсылка1", 		Неопределено);
			ЗначенияПараметров.Вставить("Артикул1", 				Неопределено);
			ЗначенияПараметров.Вставить("ПредставлениеНоменклатуры1",Неопределено);
			ЗначенияПараметров.Вставить("ЕдиницаИзмерения1", 		Неопределено);
			ЗначенияПараметров.Вставить("Цена1", 					Неопределено);
			ЗначенияПараметров.Вставить("ЭтоНовинка1", 				Ложь);
			ЗначенияПараметров.Вставить("СтруктураРасшифровки1", 	Неопределено);
			
		Иначе
			
			ЗначенияПараметров.НоменклатураСсылка1			= Строка.Номенклатура;
			ЗначенияПараметров.Артикул1						= Строка[ИмяРеквизитаКодаНоменклатуры];
			ЗначенияПараметров.ПредставлениеНоменклатуры1	= Строка[ИмяРеквизитаПредставленияНоменклатуры];
			ЗначенияПараметров.ЭтоНовинка1					= Строка.ЭтоНовинка;
			ЗначенияПараметров.ЕдиницаИзмерения1			= ?(ВидЦен = Неопределено, Неопределено, Строка.ЕдиницаЦена_1);
			ЗначенияПараметров.Цена1						= ?(ВидЦен = Неопределено, Неопределено, Строка.Цена_1);
			
			СтруктураРасшифровки = ЗаполнитьРасшифровкуЦены(ПараметрыФормирования, ВидЦен, Строка.Номенклатура, , ЗначенияПараметров.ЕдиницаИзмерения1, ЗначенияПараметров.Цена1);
			ЗначенияПараметров.Вставить("СтруктураРасшифровки1", СтруктураРасшифровки);
			
			Если ОтмечатьНовинки Тогда 
				
				ОбластьОбозначенияНовинки = ОбластьСтрока.Область("Новинка");
				ОбластьОбозначенияНовинки.Картинка = ?(ЗначенияПараметров.ЭтоНовинка, БиблиотекаКартинок.НовинкаСтикер, Неопределено);
				
				ОбластьОбозначенияНовинки1 = ОбластьСтрока.Область("Новинка1");
				ОбластьОбозначенияНовинки1.Картинка = ?(ЗначенияПараметров.ЭтоНовинка1, БиблиотекаКартинок.НовинкаСтикер, Неопределено);
				
			КонецЕсли;
			
			ОбластьСтрока.Параметры.Заполнить(ЗначенияПараметров);
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			ЗначенияПараметров.Очистить();
			
		КонецЕсли;
		
		ПерваяКолонка = НЕ ПерваяКолонка;
		
	КонецЦикла;
	
	Если ЗначенияПараметров.Количество() > 0 Тогда
		
		Если ОтмечатьНовинки Тогда 
			
			ОбластьОбозначенияНовинки = ОбластьСтрока.Область("Новинка");
			ОбластьОбозначенияНовинки.Картинка = ?(ЗначенияПараметров.ЭтоНовинка, БиблиотекаКартинок.НовинкаСтикер, Неопределено);
			
			ОбластьОбозначенияНовинки1 = ОбластьСтрока.Область("Новинка1");
			ОбластьОбозначенияНовинки1.Картинка = ?(ЗначенияПараметров.ЭтоНовинка1, БиблиотекаКартинок.НовинкаСтикер, Неопределено);
			
		КонецЕсли;
		
		ОбластьСтрока.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		ЗначенияПараметров.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиГруппуВТабличныйДокументДиафильм(КоллекцияСтрок, ПараметрыФормирования, ТабличныйДокумент)
	
	ИмяРеквизитаКодаНоменклатуры			= ИмяРеквизитаКодаНоменклатуры(ПараметрыФормирования);
	ИмяРеквизитаПредставленияНоменклатуры	= ИмяРеквизитаПредставленияНоменклатуры(ПараметрыФормирования);
	
	ОбластьГруппа				= ПараметрыФормирования.ОбластьГруппа;
	ОбластьСлайдДетали			= ПараметрыФормирования.ОбластьСлайдДетали;
	ОбластьОтступВертикальный	= ПараметрыФормирования.ОбластьОтступВертикальный;
	ОбластьОтступГоризонтальный	= ПараметрыФормирования.ОбластьОтступГоризонтальный;
	ВыводитьКартинки			= ПараметрыФормирования.ВыводитьКартинки;
	ОтмечатьНовинки				= ПараметрыФормирования.ИспользуетсяПризнакНовинка;
	КоличествоКолонок			= ПараметрыФормирования.КоличествоКолонок;
	ВидЦен 						= ?(ПараметрыФормирования.ТаблицаВидовЦен.Количество() = 0, Неопределено, ПараметрыФормирования.ТаблицаВидовЦен[0].ВидЦен);
	
	СХарактеристикой = ?(ПараметрыФормирования.ИспользоватьХарактеристики = Истина, "СХарактеристикой", "");
	
	ОбластьОтступВертикальный.Область("R2").ВысотаСтроки = ПараметрыФормирования.КартинкаВысота;
	
	ЗначенияПараметров = Новый Структура;
	
	ЗначенияПараметров.Очистить();
	Колонка = 0;
	Для каждого Строка Из КоллекцияСтрок Цикл
		
		Если Строка.ЭтоГруппа = Неопределено Тогда
			
			ВывестиГруппуВДокумент = Истина;
			ПредставлениеГруппы = Строка[ПараметрыФормирования.ИмяПоляПредставленияГруппы]; // ПредставлениеГруппыВИерархии;
			
			ОтработатьОсобенностиВыводаГруппВТабличныйДокумент(Строка, ПредставлениеГруппы, ПараметрыФормирования, ВывестиГруппуВДокумент);
			
			ГруппировкаОткрыта = Ложь;
			Если ВывестиГруппуВДокумент Тогда
				
				ЗначенияПараметров.Вставить("ПредставлениеГруппы", ПредставлениеГруппы);
				ОбластьГруппа.Параметры.Заполнить(ЗначенияПараметров);
				ТабличныйДокумент.Вывести(ОбластьГруппа);
				
				ТабличныйДокумент.НачатьГруппуСтрок();
				ГруппировкаОткрыта = Истина;
				
			КонецЕсли;
			
			ВывестиГруппуВТабличныйДокументДиафильм(Строка.Строки, ПараметрыФормирования, ТабличныйДокумент);
			
			Если ГруппировкаОткрыта Тогда
				
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если Строка.ОтобразитьСтроку = Ложь Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Колонка = Колонка + 1;
		
		ЗначенияПараметров.Очистить();
		ЗначенияПараметров.Вставить("НоменклатураСсылка",		Строка.Номенклатура);
		ЗначенияПараметров.Вставить("КодАртикул",				Строка[ИмяРеквизитаКодаНоменклатуры]);
		ЗначенияПараметров.Вставить("ПредставлениеНоменклатуры",Строка[ИмяРеквизитаПредставленияНоменклатуры]);
		
		Если НЕ ПустаяСтрока(СХарактеристикой) Тогда
			
			ЗначенияПараметров.Вставить("ПредставлениеХарактеристики", Строка.ПредставлениеХарактеристики);
			
		КонецЕсли;
		
		Если ВидЦен = Неопределено 
			ИЛИ НЕ ЗначениеЗаполнено(Строка.Цена_1) Тогда
			
			ЦенаЕдиницаИзмерения = "";
			
		Иначе
			
			ЦенаЕдиницаИзмерения = СтрШаблон("%1 %2 \ %3", Строка(Строка.Цена_1), Строка(ПараметрыФормирования.Валюта), Строка(Строка.ЕдиницаЦена_1));
			
		КонецЕсли;
		
		ЗначенияПараметров.Вставить("ЦенаЕдиницаИзмерения", ЦенаЕдиницаИзмерения);
		
		ОбластьСлайдДетали.Параметры.Заполнить(ЗначенияПараметров);
		
		Если ОтмечатьНовинки Тогда 
			
			ОбластьСлайдДетали.Область("КодАртикул" + СХарактеристикой).Картинка = ?(Строка.ЭтоНовинка, БиблиотекаКартинок.НовинкаСтикер, Неопределено);
			
		КонецЕсли;
		
		Если Колонка = 1 Тогда
			
			ТабличныйДокумент.Вывести(ОбластьОтступВертикальный);
			
			// :::Картинка
			Если ЗначениеЗаполнено(Строка.Картинка) Тогда
				
				ДанныеКартинки = РаботаСФайлами.ДвоичныеДанныеФайла(Строка.Картинка, Ложь);
				Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
					
					ОбластьСлайдДетали.Область("Картинка" + СХарактеристикой).Картинка = Новый Картинка(ДанныеКартинки);
					
				КонецЕсли;
				
			Иначе
				
				ОбластьСлайдДетали.Область("Картинка" + СХарактеристикой).Картинка = БиблиотекаКартинок.ЗапланированнаяИдея;
				
			КонецЕсли;
			
			ОбластьЯчеекСКартинкой = ТабличныйДокумент.Присоединить(ОбластьСлайдДетали);
			ОбластьЯчеекСКартинкой.ШиринаКолонки = ПараметрыФормирования.КартинкаШирина;
			
		Иначе
			
			// :::Картинка
			Если ЗначениеЗаполнено(Строка.Картинка) Тогда
				
				ДанныеКартинки = РаботаСФайлами.ДвоичныеДанныеФайла(Строка.Картинка, Ложь);
				Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
					
					ОбластьСлайдДетали.Область("Картинка" + СХарактеристикой).Картинка = Новый Картинка(ДанныеКартинки);
					
				КонецЕсли;
				
			Иначе
				
				ОбластьСлайдДетали.Область("Картинка" + СХарактеристикой).Картинка = БиблиотекаКартинок.ЗапланированнаяИдея;
				
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьОтступВертикальный);
			ОбластьЯчеекСКартинкой = ТабличныйДокумент.Присоединить(ОбластьСлайдДетали);
			ОбластьЯчеекСКартинкой.ШиринаКолонки = ПараметрыФормирования.КартинкаШирина;
			
			Если Колонка = КоличествоКолонок Тогда
				
				Колонка = 0;
				ТабличныйДокумент.Вывести(ОбластьОтступГоризонтальный);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Шапка

Процедура ПараметрыСекцииКонтактнаяИнформацияОрганизации(ЗначенияПараметров, ОрганизацияСсылка)
	
	Если НЕ ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗначенияПараметров.Очистить();
	
	ЗначенияПараметров.Вставить("Организация",	ОрганизацияСсылка);
	ЗначенияПараметров.Вставить("Адрес", 		УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ОрганизацияСсылка,
		Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, ТекущаяДатаСеанса()));
	ЗначенияПараметров.Вставить("Телефон", 		УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ОрганизацияСсылка,
	Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, ТекущаяДатаСеанса()));
	ЗначенияПараметров.Вставить("Сайт",			УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ОрганизацияСсылка,
		Справочники.ВидыКонтактнойИнформации.СайтОрганизации, ТекущаяДатаСеанса()));
	ЗначенияПараметров.Вставить("Email", 		УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ОрганизацияСсылка,
		Справочники.ВидыКонтактнойИнформации.EmailОрганизации, ТекущаяДатаСеанса()));
	
	ФаксОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ОрганизацияСсылка, 
		Справочники.ВидыКонтактнойИнформации.ФаксОрганизации, ТекущаяДатаСеанса());
	Если НЕ ПустаяСтрока(ФаксОрганизации) Тогда
		
		ЗначенияПараметров.Телефон = СтрШаблон(НСтр("ru ='%1; факс: %2'"), ЗначенияПараметров.Телефон, ФаксОрганизации);
		
	КонецЕсли;
	
	ЗначенияПараметров.Организация	= СтрШаблон(НСтр("ru ='Организация: %1'"), ЗначенияПараметров.Организация);
	ЗначенияПараметров.Адрес		= СтрШаблон(НСтр("ru ='Адрес: %1'"), ЗначенияПараметров.Адрес);
	ЗначенияПараметров.Телефон		= СтрШаблон(НСтр("ru ='Телефон: %1'"), ЗначенияПараметров.Телефон);
	ЗначенияПараметров.Сайт			= СтрШаблон(НСтр("ru ='Сайт: %1'"), ЗначенияПараметров.Сайт);
	ЗначенияПараметров.Email		= СтрШаблон(НСтр("ru ='E-mail: %1'"), ЗначенияПараметров.Email);
	
	
КонецПроцедуры

Процедура ПараметрыСекцииКонтактнаяИнформацияАвтора(ЗначенияПараметров, ПользовательСсылка)
	
	Если НЕ ЗначениеЗаполнено(ПользовательСсылка) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СотрудникиПользователя = РегистрыСведений.СотрудникиПользователя.ПолучитьСотрудниковПользователя(ПользовательСсылка);
	Если СотрудникиПользователя.Количество() > 0 Тогда
		
		ЗначенияПараметров.Вставить("Сотрудник", 		СотрудникиПользователя[0]);
		ЗначенияПараметров.Вставить("ТелефонСотрудника",УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СотрудникиПользователя[0].Физлицо, Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица));
		ЗначенияПараметров.Вставить("EmailСотрудника", 	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СотрудникиПользователя[0].Физлицо, Справочники.ВидыКонтактнойИнформации.EmailФизическиеЛица));
		
		ЗначенияПараметров.Сотрудник		= СтрШаблон(НСтр("ru ='Сотрудник: %1'"), ЗначенияПараметров.Сотрудник);
		ЗначенияПараметров.ТелефонСотрудника= СтрШаблон(НСтр("ru ='Телефон сотрудника: %1'"), ЗначенияПараметров.ТелефонСотрудника);
		ЗначенияПараметров.EmailСотрудника	= СтрШаблон(НСтр("ru ='E-mail сотрудника: %1'"), ЗначенияПараметров.EmailСотрудника);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВВидеПолотно(ПараметрыФормирования, ТабличныйДокумент, СтруктураТаблицДанных)
	
	ТабличныйДокумент	= Новый ТабличныйДокумент;
	ТабличныйДокумент.Область(1, 1, 1, 1).ШиринаКолонки = 2;
	
	МакетПФ				= УправлениеПечатью.МакетПечатнойФормы("Обработка.ПрайсЛистыОрганизации.ПФ_MXL_Полотно");
	
	ОбластьЗаголовок	= СоздатьОбластьЗаголовок(ПараметрыФормирования, ТабличныйДокумент, МакетПФ);
	ОбластьКИ			= МакетПФ.ПолучитьОбласть("КИ");
	ОбластьКИАвтор		= МакетПФ.ПолучитьОбласть("КИАвтор");
	ОбластьФормирование	= МакетПФ.ПолучитьОбласть("ДатаФормированияИВалюта");
	ОбластьШапка		= СоздатьОбластьШапка(ПараметрыФормирования, ТабличныйДокумент, МакетПФ);
	ОбластьГруппа		= МакетПФ.ПолучитьОбласть("Группа");
	ОбластьСтрока		= СоздатьОбластьСтрока(ПараметрыФормирования, МакетПФ);
	ОбластьОписание 	= МакетПФ.ПолучитьОбласть("Описание");
	
	ЗначенияПараметров	= Новый Структура;
	ЗначенияПараметров.Вставить("Заголовок", ПараметрыФормирования.НаименованиеПрайсЛиста);
	
	Если ПараметрыФормирования.ВыводитьКонтактнуюИнформацию
		И ЗначениеЗаполнено(ПараметрыФормирования.Логотип) Тогда
		
		ДанныеКартинки = РаботаСФайлами.ДвоичныеДанныеФайла(ПараметрыФормирования.Логотип, Ложь);
		Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
			
			ОбластьЗаголовок.Область("Логотип").Картинка = Новый Картинка(ДанныеКартинки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.Заполнить(ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	Если ПараметрыФормирования.ВыводитьКонтактнуюИнформацию Тогда
		
		ПараметрыСекцииКонтактнаяИнформацияОрганизации(ЗначенияПараметров, ПараметрыФормирования.Организация);
		
		ОбластьКИ.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьКИ);
		
	КонецЕсли;
	
	Если ПараметрыФормирования.УказатьКонтактыОтветственного Тогда
		
		ПараметрыСекцииКонтактнаяИнформацияАвтора(ЗначенияПараметров, ПараметрыФормирования.Автор);
		
		ОбластьКИАвтор.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьКИАвтор);
		
	КонецЕсли;
	
	ДатаФормированияИВалюта = СтрокаДатаФормированияИВалюта(ПараметрыФормирования);
	Если НЕ ПустаяСтрока(ДатаФормированияИВалюта) Тогда
		
		ЗначенияПараметров.Очистить();
		ЗначенияПараметров.Вставить("ДатаФормированияИВалюта", ДатаФормированияИВалюта);
		ОбластьФормирование.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьФормирование);
		
	КонецЕсли;
	
	КоличествоЦен = ПараметрыФормирования.ТаблицаВидовЦен.Количество();
	Для ИндексЦены = 1 По КоличествоЦен Цикл
		
		ЗначенияПараметров.Вставить("ВидЦен_" + Строка(ИндексЦены - 1), ПараметрыФормирования.ТаблицаВидовЦен[ИндексЦены - 1].ВидЦен);
		
	КонецЦикла;
	
	ОбластьШапка.Параметры.Заполнить(ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ПараметрыФормирования.Вставить("ОбластьГруппа", ОбластьГруппа);
	ПараметрыФормирования.Вставить("ОбластьСтрока", ОбластьСтрока);
	ВывестиГруппуВТабличныйДокументПолотно(СтруктураТаблицДанных.ДеревоНоменклатуры.Строки, ПараметрыФормирования, ТабличныйДокумент);
	
	Если НЕ ПустаяСтрока(ПараметрыФормирования.Описание) Тогда
		
		ЗначенияПараметров.Очистить();
		ЗначенияПараметров.Вставить("Описание", ПараметрыФормирования.Описание);
		ОбластьОписание.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьОписание);
		
	КонецЕсли;
	
	ТабличныйДокумент.ФиксацияСлева = ПараметрыФормирования.ПоследняяКолонкаЗаголовка;
	
КонецПроцедуры

Процедура ЗаполнитьВВидеДвеКолонки(ПараметрыФормирования, ТабличныйДокумент, СтруктураТаблицДанных)
	
	ТабличныйДокумент	= Новый ТабличныйДокумент;
	ТабличныйДокумент.Область(1, 1, 1, 1).ШиринаКолонки = 2;
	
	МакетПФ				= УправлениеПечатью.МакетПечатнойФормы("Обработка.ПрайсЛистыОрганизации.ПФ_MXL_ДвеКолонки");
	
	ОбластьЗаголовок	= МакетПФ.ПолучитьОбласть("Заголовок");
	ОбластьКИ			= МакетПФ.ПолучитьОбласть("КИ");
	ОбластьКИАвтор		= МакетПФ.ПолучитьОбласть("КИАвтор");
	ОбластьФормирование	= МакетПФ.ПолучитьОбласть("ДатаФормированияИВалюта");
	ОбластьШапка		= МакетПФ.ПолучитьОбласть("Шапка");
	ОбластьГруппа		= МакетПФ.ПолучитьОбласть("Группа");
	ОбластьСтрока		= МакетПФ.ПолучитьОбласть("Строка");
	ОбластьОписание		= МакетПФ.ПолучитьОбласть("Описание");
	
	ЗначенияПараметров	= Новый Структура;
	ЗначенияПараметров.Вставить("Заголовок", ПараметрыФормирования.НаименованиеПрайсЛиста);
	
	Если ПараметрыФормирования.ВыводитьКонтактнуюИнформацию
		И ЗначениеЗаполнено(ПараметрыФормирования.Логотип) Тогда
		
		ДанныеКартинки = РаботаСФайлами.ДвоичныеДанныеФайла(ПараметрыФормирования.Логотип, Ложь);
		Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
			
			ОбластьЗаголовок.Область("Логотип").Картинка = Новый Картинка(ДанныеКартинки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.Заполнить(ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	Если ПараметрыФормирования.ВыводитьКонтактнуюИнформацию Тогда
		
		ПараметрыСекцииКонтактнаяИнформацияОрганизации(ЗначенияПараметров, ПараметрыФормирования.Организация);
		
		ОбластьКИ.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьКИ);
		
	КонецЕсли;
	
	Если ПараметрыФормирования.УказатьКонтактыОтветственного Тогда
		
		ПараметрыСекцииКонтактнаяИнформацияАвтора(ЗначенияПараметров, ПараметрыФормирования.Автор);
		
		ОбластьКИАвтор.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьКИАвтор);
		
	КонецЕсли;
	
	ДатаФормированияИВалюта = СтрокаДатаФормированияИВалюта(ПараметрыФормирования);
	Если НЕ ПустаяСтрока(ДатаФормированияИВалюта) Тогда
		
		ЗначенияПараметров.Очистить();
		ЗначенияПараметров.Вставить("ДатаФормированияИВалюта", ДатаФормированияИВалюта);
		ОбластьФормирование.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьФормирование);
		
	КонецЕсли;
	
	ЗначенияПараметров.Очистить();
	ЗаголовокЦена = НСтр(" ru='Цена'");
	Если ПараметрыФормирования.НазваниеЦеныПредставлением 
		И ПараметрыФормирования.ТаблицаВидовЦен.Количество() > 0 Тогда
		
		ЗаголовокЦена = Строка(ПараметрыФормирования.ТаблицаВидовЦен[0].ВидЦен);
		
	КонецЕсли;
	ЗначенияПараметров.Вставить("ЗаголовокЦена", ЗаголовокЦена);
	
	ЗаголовокКод = НСтр(" ru='Артикул'");
	
	МассивСтрок = ПараметрыФормирования.ПредставлениеНоменклатуры.НайтиСтроки(Новый Структура("РеквизитНоменклатуры", "Код"));
	Если МассивСтрок.Количество() > 0
		И МассивСтрок[0].Использование Тогда
		
		ЗаголовокКод = НСтр("ru = 'Код'");
		
	КонецЕсли;
	
	МассивСтрок = ПараметрыФормирования.ПредставлениеНоменклатуры.НайтиСтроки(Новый Структура("РеквизитНоменклатуры", "Штрихкод"));
	Если МассивСтрок.Количество() > 0
		И МассивСтрок[0].Использование Тогда
		
		ЗаголовокКод = НСтр("ru = 'Штрихкод'");
		
	КонецЕсли;
	
	ЗначенияПараметров.Вставить("ЗаголовокКод", ЗаголовокКод);
	
	ОбластьШапка.Параметры.Заполнить(ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ПараметрыФормирования.Вставить("ОбластьГруппа", ОбластьГруппа);
	ПараметрыФормирования.Вставить("ОбластьСтрока", ОбластьСтрока);
	ВывестиГруппуВТабличныйДокументДвеКолонки(СтруктураТаблицДанных.ДеревоНоменклатуры.Строки, ПараметрыФормирования, ТабличныйДокумент);
	
	Если НЕ ПустаяСтрока(ПараметрыФормирования.Описание) Тогда
		
		ЗначенияПараметров.Очистить();
		ЗначенияПараметров.Вставить("Описание", ПараметрыФормирования.Описание);
		ОбластьОписание.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьОписание);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВВидеДиафильм(ПараметрыФормирования, ТабличныйДокумент, СтруктураТаблицДанных)
	
	ТабличныйДокумент	= Новый ТабличныйДокумент;
	ТабличныйДокумент.Область(1, 1, 1, 1).ШиринаКолонки = 2;
	
	МакетПФ					= УправлениеПечатью.МакетПечатнойФормы("Обработка.ПрайсЛистыОрганизации.ПФ_MXL_Диафильм");
	
	ОбластьЗаголовок		= МакетПФ.ПолучитьОбласть("Заголовок");
	ОбластьВалюта			= МакетПФ.ПолучитьОбласть("Валюта");
	ОбластьКИ				= МакетПФ.ПолучитьОбласть("КИ");
	ОбластьКИАвтор			= МакетПФ.ПолучитьОбласть("КИАвтор");
	ОбластьФормирование		= МакетПФ.ПолучитьОбласть("ДатаФормирования");
	ОбластьГруппа			= МакетПФ.ПолучитьОбласть("Группа");
	
	СХарактеристикой		= ?(ПараметрыФормирования.ИспользоватьХарактеристики = Истина, "СХарактеристикой", "");
	ОбластьСлайдДетали		= МакетПФ.ПолучитьОбласть("Слайд|Детали" + СХарактеристикой);
	ОбластьОтступВертикальный = МакетПФ.ПолучитьОбласть("ОтступВертикальный|Детали" + СХарактеристикой);
	ОбластьОтступГоризонтальный = МакетПФ.ПолучитьОбласть("Слайд|ОтступГоризонтальный");
	ОбластьОписание			= МакетПФ.ПолучитьОбласть("Описание");
	
	ЗначенияПараметров	= Новый Структура;
	ЗначенияПараметров.Вставить("Заголовок", ПараметрыФормирования.НаименованиеПрайсЛиста);
	
	Если ПараметрыФормирования.ВыводитьКонтактнуюИнформацию
		И ЗначениеЗаполнено(ПараметрыФормирования.Логотип) Тогда
		
		ДанныеКартинки = РаботаСФайлами.ДвоичныеДанныеФайла(ПараметрыФормирования.Логотип, Ложь);
		Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
			
			ОбластьЗаголовок.Область("Логотип").Картинка = Новый Картинка(ДанныеКартинки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.Заполнить(ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	Если ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций") Тогда
		
		ЗначенияПараметров.Очистить();
		ЗначенияПараметров.Вставить("ОписаниеВалюты", НСтр("ru ='Валюта: '") + ПараметрыФормирования.Валюта);
		Если ЗначениеЗаполнено(ПараметрыФормирования.Валюта) 
			И ПараметрыФормирования.Валюта <> Константы.НациональнаяВалюта.Получить() Тогда
			
			ДатаРасчетаКурсаВалюты = ?(ЗначениеЗаполнено(ПараметрыФормирования.ДатаРасчетаКурсаВалюты), ПараметрыФормирования.ДатаРасчетаКурсаВалюты, ТекущаяДатаСеанса());
			КурсыВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПараметрыФормирования.Валюта, ДатаРасчетаКурсаВалюты);
			
			ЗначенияПараметров.ОписаниеВалюты = ЗначенияПараметров.ОписаниеВалюты + НСтр("ru =', курс '") + КурсыВалюты.Курс;
			Если КурсыВалюты.Кратность <> 1 Тогда
				
				ЗначенияПараметров.ОписаниеВалюты = ЗначенияПараметров.ОписаниеВалюты + НСтр("ru =', кратность '") + КурсыВалюты.Кратность;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбластьВалюта.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьВалюта);
		
	КонецЕсли;
	
	Если ПараметрыФормирования.ВыводитьКонтактнуюИнформацию Тогда
		
		ПараметрыСекцииКонтактнаяИнформацияОрганизации(ЗначенияПараметров, ПараметрыФормирования.Организация);
		
		ОбластьКИ.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьКИ);
		
	КонецЕсли;
	
	Если ПараметрыФормирования.УказатьКонтактыОтветственного Тогда
		
		ПараметрыСекцииКонтактнаяИнформацияАвтора(ЗначенияПараметров, ПараметрыФормирования.Автор);
		
		ОбластьКИАвтор.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьКИАвтор);
		
	КонецЕсли;
	
	Если ПараметрыФормирования.ВыводитьДатуФормирования Тогда
		
		ЗначенияПараметров.Очистить();
		ДатаФормирования = НСтр("ru ='Сформирован '") + Формат(ПараметрыФормирования.ДатаФормирования, "ДЛФ=DD");
		ЗначенияПараметров.Вставить("ДатаФормирования", ДатаФормирования);
		ОбластьФормирование.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьФормирование);
		
	КонецЕсли;
	
	ЗначенияПараметров.Очистить();
	
	ПараметрыФормирования.Вставить("ОбластьГруппа", ОбластьГруппа);
	ПараметрыФормирования.Вставить("ОбластьСлайдДетали", ОбластьСлайдДетали);
	ПараметрыФормирования.Вставить("ОбластьОтступВертикальный", ОбластьОтступВертикальный);
	ПараметрыФормирования.Вставить("ОбластьОтступГоризонтальный", ОбластьОтступГоризонтальный);
	
	ВывестиГруппуВТабличныйДокументДиафильм(СтруктураТаблицДанных.ДеревоНоменклатуры.Строки, ПараметрыФормирования, ТабличныйДокумент);
	
	Если НЕ ПустаяСтрока(ПараметрыФормирования.Описание) Тогда
		
		ЗначенияПараметров.Очистить();
		ЗначенияПараметров.Вставить("Описание", ПараметрыФормирования.Описание);
		ОбластьОписание.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьОписание);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Инициализация формирования табличного документа
Процедура ЗаполнитьТабличныйДокумент(ПараметрыФормирования, ТабличныйДокумент, СтруктураТаблицДанных)
	
	Если ПараметрыФормирования.ВариантПрайсЛиста = Перечисления.ВариантыПечатиПрайсЛиста.Полотно Тогда
		
		ЗаполнитьВВидеПолотно(ПараметрыФормирования, ТабличныйДокумент, СтруктураТаблицДанных);
		
	ИначеЕсли ПараметрыФормирования.ВариантПрайсЛиста = Перечисления.ВариантыПечатиПрайсЛиста.ДвеКолонки Тогда
		
		ЗаполнитьВВидеДвеКолонки(ПараметрыФормирования, ТабличныйДокумент, СтруктураТаблицДанных);
		
	ИначеЕсли ПараметрыФормирования.ВариантПрайсЛиста = Перечисления.ВариантыПечатиПрайсЛиста.Диафильм Тогда
		
		ЗаполнитьВВидеДиафильм(ПараметрыФормирования, ТабличныйДокумент, СтруктураТаблицДанных);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПостроениеДанных

Процедура УстановитьЗначениеПараметраВНастройкахСКД(НастройкиКомпоновкиДанных, ИмяПараметра, ЗначениеПараметра)
	
	Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрКомпоновкиДанных = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	
	ЗначениеПараметраКД = НастройкиКомпоновкиДанных.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКомпоновкиДанных);
	Если ЗначениеПараметраКД = Неопределено Тогда
		
		ЗначениеПараметраКД = НастройкиКомпоновкиДанных.ПараметрыДанных.Элементы.Добавить();
		ЗначениеПараметраКД.Параметр = ПараметрКомпоновкиДанных;
		
	КонецЕсли;
	
	ЗначениеПараметраКД.Значение = ЗначениеПараметра;
	ЗначениеПараметраКД.Использование = Истина;
	
КонецПроцедуры

Процедура ЭлементыОтбораВНастройкиСКД(ЭлементыОтбораПриемник, ЭлементыОтбораИсточник)
	
	Для каждого ЭлементОтбораФормы Из ЭлементыОтбораИсточник Цикл
		
		Если НЕ ЭлементОтбораФормы.Использование Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЭлементОтбораКД = ЭлементыОтбораПриемник.Добавить(ТипЗнч(ЭлементОтбораФормы));
		ЗаполнитьЗначенияСвойств(ЭлементОтбораКД, ЭлементОтбораФормы);
		
		Если Тип(ЭлементОтбораФормы) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			ЭлементыОтбораВНастройкиСКД(ЭлементОтбораКД.Элементы, ЭлементОтбораФормы.Элементы);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЭлементыИИерархияНоменклатуры(ПараметрыФормирования, СтруктураТаблицДанных) Экспорт
	
	// 0. Предварительно
	Если ПараметрыФормирования.ИерархияСодержимого = Перечисления.ИерархияПрайсЛистов.ИерархияКатегорийНоменклатуры Тогда
		
		ИмяВариантаСКД = "ИерархияКатегорий";
		ПараметрыФормирования.ИмяПоляПредставленияГруппы = "КатегорияНоменклатуры";
		
	ИначеЕсли ПараметрыФормирования.ИерархияСодержимого = Перечисления.ИерархияПрайсЛистов.ИерархияЦеновыхГрупп Тогда
		
		ИмяВариантаСКД = "ИерархияЦеновыхГрупп";
		ПараметрыФормирования.ИмяПоляПредставленияГруппы = "ИерархияПоЦеновымГруппам";
		
	Иначе // ПараметрыФормирования.ИерархияСодержимого =Перечисления.ИерархияПрайсЛистов.ИерархияНоменклатуры
		
		ИмяВариантаСКД = "ИерархияНоменклатуры";
		ПараметрыФормирования.ИмяПоляПредставленияГруппы = "ИерархияПоНоменклатуре";
		
	КонецЕсли;
	
	// 1. Получим СКД
	ИмяСхемыКД = ?(ПараметрыФормирования.ИспользоватьХарактеристики = Истина, "СКД_НоменклатураИХарактеристики", "СКД_Номенклатура");
	СхемаКомпоновкиДанных = ПолучитьМакет(ИмяСхемыКД);
	
	// 2. Создаем настройки для схемы 
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.ВариантыНастроек[ИмяВариантаСКД].Настройки;
	
	// 2.1 Установим значения параметров
	УстановитьЗначениеПараметраВНастройкахСКД(НастройкиКомпоновкиДанных, "МассивВидовЦен",		ПараметрыФормирования.ВидыЦен);
	УстановитьЗначениеПараметраВНастройкахСКД(НастройкиКомпоновкиДанных, "ПериодЦен",			ПараметрыФормирования.ПериодЦен);
	УстановитьЗначениеПараметраВНастройкахСКД(НастройкиКомпоновкиДанных, "Организация",			ПараметрыФормирования.ОтборОрганизация);
	УстановитьЗначениеПараметраВНастройкахСКД(НастройкиКомпоновкиДанных, "СтруктурнаяЕдиница",	ПараметрыФормирования.ОтборСклад);
	
	// 2.2 установим значения отборов
	ЭлементыОтбораВНастройкиСКД(НастройкиКомпоновкиДанных.Отбор.Элементы, ПараметрыФормирования.НастройкиКомпоновкиДанных.Элементы);
	
	Если ПараметрыФормирования.НоменклатураБезЦен
		ИЛИ ПараметрыФормирования.ВидыЦен.Количество() = 0 Тогда
		
		ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос;
		СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос = СтрЗаменить(ТекстЗапроса, "НЕ ЕстьЗаписиСЦенами.ЕстьЗаписи ЕСТЬ NULL", "ИСТИНА");
		
	КонецЕсли;
	
	Если ПараметрыФормирования.ФормироватьПоНаличию Тогда
		
		НастройкиКомпоновкиДанных.Отбор.Элементы.Получить(0).Использование = Истина;
		
	КонецЕсли;
	
	// 2.3 установим сортировку
	Если ПараметрыФормирования.ВариантыСортировки = 1 Тогда
		
		Если ПараметрыФормирования.ИерархияСодержимого = Перечисления.ИерархияПрайсЛистов.ИерархияКатегорийНоменклатуры Тогда
			
			НастройкиКомпоновкиДанных.Структура[0].Порядок.Элементы[0].ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			НастройкиКомпоновкиДанных.Структура[0].Порядок.Элементы[1].ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			
			НастройкиКомпоновкиДанных.Структура[0].Структура[0].Порядок.Элементы[0].ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			НастройкиКомпоновкиДанных.Структура[0].Структура[0].Порядок.Элементы[1].ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			
			НастройкиКомпоновкиДанных.Структура[0].Структура[0].Структура[0].Порядок.Элементы[0].ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			НастройкиКомпоновкиДанных.Структура[0].Структура[0].Структура[0].Порядок.Элементы[1].ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			
			Если ПараметрыФормирования.ИспользоватьХарактеристики Тогда
				
				НастройкиКомпоновкиДанных.Структура[0].Структура[0].Структура[0].Порядок.Элементы[2].ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
				
			КонецЕсли;
			
		Иначе
			// Ветка для:
			// ПараметрыФормирования.ИерархияСодержимого = Перечисления.ИерархияПрайсЛистов.ИерархияЦеновыхГрупп
			// ПараметрыФормирования.ИерархияСодержимого = Перечисления.ИерархияПрайсЛистов.ИерархияНоменклатуры
			
			НастройкиКомпоновкиДанных.Структура[0].Порядок.Элементы[0].ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			НастройкиКомпоновкиДанных.Структура[0].Порядок.Элементы[1].ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			НастройкиКомпоновкиДанных.Структура[0].Порядок.Элементы[2].ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			
			НастройкиКомпоновкиДанных.Структура[0].Структура[0].Порядок.Элементы[0].ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			НастройкиКомпоновкиДанных.Структура[0].Структура[0].Порядок.Элементы[1].ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			
			Если ПараметрыФормирования.ИспользоватьХарактеристики Тогда
				
				НастройкиКомпоновкиДанных.Структура[0].Структура[0].Порядок.Элементы[2].ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// 3. готовим макет 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// 4. исполняем макет 
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет);
	ПроцессорКомпоновки.Сбросить();
	
	// 5. выводим результат 
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(СтруктураТаблицДанных.ДеревоНоменклатуры);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры

Процедура ТаблицаЦен(ПараметрыФормирования, СтруктураТаблицДанных)
	
	Валюта = ПараметрыФормирования.Валюта;
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		
		Валюта = Константы.НациональнаяВалюта.Получить();
		
	КонецЕсли;
	
	ДатаРасчетаКурсаВалюты = ПараметрыФормирования.ДатаРасчетаКурсаВалюты;
	Если НЕ ЗначениеЗаполнено(ДатаРасчетаКурсаВалюты) Тогда
		
		ДатаРасчетаКурсаВалюты = ТекущаяДата();
		
	КонецЕсли;
	
	ДанныеКурсаВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, ДатаРасчетаКурсаВалюты);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РСЦены.ВидЦен КАК ВидЦен
	|	,РСЦены.Номенклатура КАК Номенклатура
	|	,РСЦены.Характеристика КАК Характеристика
	|	,РСЦены.ВидЦен.ПорядокОкругления КАК ПорядокОкругления
	|	,РСЦены.ВидЦен.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону
	|	,Выбор КОГДА РСЦены.ВидЦен.ВалютаЦены = &Валюта ТОГДА РСЦены.Цена 
	|		ИНАЧЕ ЕСТЬNULL(РСЦены.Цена * КурсВалютыВидаЦен.Курс * &КратностьВалютыПЛ / (&КурсВалютыПЛ * КурсВалютыВидаЦен.Кратность), 0) КОНЕЦ КАК Цена
	|	,РСЦены.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ПериодЦен, Актуальность И ВидЦен В (&МассивВидовЦен)
	|		И Характеристика = Значение(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК РСЦены
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаРасчетаКурсаВалюты,) КАК КурсВалютыВидаЦен
	|		ПО (РСЦены.ВидЦен.ВалютаЦены = КурсВалютыВидаЦен.Валюта)
	|";
	
	Если ПараметрыФормирования.ИспользоватьХарактеристики Тогда 
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Характеристика = Значение(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)", "");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПериодЦен",			ПараметрыФормирования.ПериодЦен);
	Запрос.УстановитьПараметр("МассивВидовЦен",		ПараметрыФормирования.ВидыЦен);
	Запрос.УстановитьПараметр("ДатаРасчетаКурсаВалюты", ДатаРасчетаКурсаВалюты);
	Запрос.УстановитьПараметр("Валюта", 			Валюта);
	Запрос.УстановитьПараметр("КурсВалютыПЛ",		ДанныеКурсаВалюты.Курс);
	Запрос.УстановитьПараметр("КратностьВалютыПЛ",	ДанныеКурсаВалюты.Кратность);
	
	СтруктураТаблицДанных.ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ТранспонированиеТаблиц(ПараметрыФормирования, СтруктураТаблицДанных) 
	
	РазмерТаблицы 	= ПараметрыФормирования.ТаблицаВидовЦен.Количество();
	Для ИндексСтроки = 1 По РазмерТаблицы Цикл
		
		Строка = ПараметрыФормирования.ТаблицаВидовЦен[ИндексСтроки - 1];
		
		НоваяКолонка = СтруктураТаблицДанных.ДеревоНоменклатуры.Колонки.Добавить("Цена_" + Строка.НомерСтроки);
		НоваяКолонка.Заголовок = Строка.ВидЦен.Наименование;
		
		НоваяКолонка = СтруктураТаблицДанных.ДеревоНоменклатуры.Колонки.Добавить("ЕдиницаЦена_" + Строка.НомерСтроки);
		ПараметрыФормирования.ИменаКолонок.Вставить(Строка.ВидЦен.УникальныйИдентификатор(), "Цена_" + Строка.НомерСтроки);
		
	КонецЦикла;
	
	ОтборПоТаблице = Новый Структура;
	
	Для каждого Строка Из СтруктураТаблицДанных.ТаблицаЦен Цикл
		
		ОтборПоТаблице.Очистить();
		ОтборПоТаблице.Вставить("Номенклатура", Строка.Номенклатура);
		Если ПараметрыФормирования.ИспользоватьХарактеристики Тогда 
			
			ОтборПоТаблице.Вставить("Характеристика", Строка.Характеристика);
			
		КонецЕсли;
		
		РезультатПоиска = СтруктураТаблицДанных.ДеревоНоменклатуры.Строки.НайтиСтроки(ОтборПоТаблице, Истина);
		Если РезультатПоиска.Количество() < 1 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ИмяКолонкиЦена = ПараметрыФормирования.ИменаКолонок[Строка.ВидЦен.УникальныйИдентификатор()];
		
		РезультатПоиска[0][ИмяКолонкиЦена] = ЦенообразованиеСервер.ОкруглитьЦену(Строка.Цена, Строка.ПорядокОкругления, Строка.ОкруглятьВБольшуюСторону);
		РезультатПоиска[0][ИмяКолонкиЦена] = ЦенообразованиеКлиентСервер.ПрименитьПсихологическоеОкругление(РезультатПоиска[0][ИмяКолонкиЦена], Строка.ВидЦен.ПсихологическоеОкругление);
		РезультатПоиска[0]["Единица" + ИмяКолонкиЦена] = Строка.ЕдиницаИзмерения;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтборСтрокДереваНоменклатуры(ПараметрыФормирования, СтруктураТаблицДанных)
	
	Если ПараметрыФормирования.ВидЦенСравнить <> Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОтобратьСтрокиРекурсивно(ПараметрыФормирования, СтруктураТаблицДанных.ДеревоНоменклатуры.Строки);
	
КонецПроцедуры

Процедура ИсключитьПустыеВидыЦен(ПараметрыФормирования, СтруктураТаблицДанных)
	
	Если ПараметрыФормирования.ИсключитьПустыеВидыЦен = Ложь
		ИЛИ ПараметрыФормирования.ТаблицаВидовЦен.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекстЗапросаОсновной =
	"ВЫБРАТЬ
	|	ИСТИНА КАК ПустоеПоле
	|	,ТаблицаНоменклатуры.ОтобразитьСтроку КАК ОтобразитьСтроку
	|ПОМЕСТИТЬ ТаблицаСКолонкамиЦен
	|ИЗ &ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|ГДЕ ТаблицаНоменклатуры.ОтобразитьСтроку = ИСТИНА";
	
	ТекстЗапросаОтборЦен =
	"ВЫБРАТЬ ПЕРВЫЕ 1 ТаблицаСКолонкамиЦен.%1 
	|ИЗ ТаблицаСКолонкамиЦен КАК ТаблицаСКолонкамиЦен 
	|ГДЕ ТаблицаСКолонкамиЦен.%1 <> 0";
	
	СтрокаЗамены =
	"ИСТИНА КАК ПустоеПоле
	|	,ТаблицаНоменклатуры.%1 КАК %1";
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНоменклатуры.Колонки.Добавить("ОтобразитьСтроку", Новый ОписаниеТипов("Булево"));
	
	Для каждого ОписаниеКолонки Из ПараметрыФормирования.ТаблицаВидовЦен Цикл
		
		ИмяКолонки = "Цена_" + ОписаниеКолонки.НомерСтроки;
		
		ТаблицаНоменклатуры.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Число"));
		
		ТекстЗапросаОсновной = СтрЗаменить(ТекстЗапросаОсновной, "ИСТИНА КАК ПустоеПоле", СтрокаЗамены);
		ТекстЗапросаОсновной = ТекстЗапросаОсновной + ОбщегоНазначения.РазделительПакетаЗапросов() + ТекстЗапросаОтборЦен;
		ТекстЗапросаОсновной = СтрШаблон(ТекстЗапросаОсновной, ИмяКолонки);
		
	КонецЦикла;
	
	ЦенообразованиеСервер.ДеревоЗначенийВТаблицуЗначений(СтруктураТаблицДанных.ДеревоНоменклатуры, ТаблицаНоменклатуры);
	
	Запрос = Новый Запрос(ТекстЗапросаОсновной);
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	МассивУдаляемых = Новый Массив;
	Для каждого СтрокаВидаЦены Из ПараметрыФормирования.ТаблицаВидовЦен Цикл
		
		Если РезультатЗапроса[СтрокаВидаЦены.НомерСтроки].Пустой() Тогда
			
			МассивУдаляемых.Добавить(СтрокаВидаЦены);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаИзМассива Из МассивУдаляемых Цикл
		
		ИндексУдаляемогоЭлемента = ПараметрыФормирования.ВидыЦен.Найти(СтрокаИзМассива.ВидЦен);
		Если ИндексУдаляемогоЭлемента <> Неопределено Тогда
			
			ПараметрыФормирования.ВидыЦен.Удалить(ИндексУдаляемогоЭлемента);
			
		КонецЕсли;
		
		ПараметрыФормирования.ТаблицаВидовЦен.Удалить(СтрокаИзМассива);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрименитьОформлениеЯчеек(ПараметрыФормирования, ТабличныйДокумент)
	
	Если НЕ ПараметрыФормирования.МаксимальнаяЦена
		И НЕ ПараметрыФормирования.МинимальнаяЦена
		И НЕ ПараметрыФормирования.УсловнаяЦена
		Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ПараметрыФормирования.ПечатьПрайсЛиста = Перечисления.ВариантыПечатиПрайсЛиста.Полотно Тогда
		
		ОформлениеПрайсЛистаПолотно(ПараметрыФормирования, ТабличныйДокумент);
		
	ИначеЕсли ПараметрыФормирования.ПечатьПрайсЛиста = Перечисления.ВариантыПечатиПрайсЛиста.ДвеКолонки Тогда
		
		ОформлениеПрайсЛистаДвеКолонки(ПараметрыФормирования, ТабличныйДокумент);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПостроитьПрайсЛист(ПараметрыФормирования, ТабличныйДокумент)
	
	СтруктураТаблицДанных = Новый Структура;
	СтруктураТаблицДанных.Вставить("ДеревоНоменклатуры",	Новый ДеревоЗначений);
	СтруктураТаблицДанных.Вставить("ТаблицаЦен",			Новый ТаблицаЗначений);
	
	ЭлементыИИерархияНоменклатуры(ПараметрыФормирования, СтруктураТаблицДанных);
	ТаблицаЦен(ПараметрыФормирования, СтруктураТаблицДанных);
	ТранспонированиеТаблиц(ПараметрыФормирования, СтруктураТаблицДанных);
	ОтборСтрокДереваНоменклатуры(ПараметрыФормирования, СтруктураТаблицДанных);
	ИсключитьПустыеВидыЦен(ПараметрыФормирования, СтруктураТаблицДанных);
	
	ЗаполнитьТабличныйДокумент(ПараметрыФормирования, ТабличныйДокумент, СтруктураТаблицДанных);
	
	ПрименитьОформлениеЯчеек(ПараметрыФормирования, ТабличныйДокумент);
	
КонецПроцедуры

Процедура АдаптироватьПараметрыФормирования(ПараметрыФормирования)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// ::: ВИДЫ ЦЕН
	ПараметрыФормирования.Вставить("ИсключитьПустыеВидыЦен", ПараметрыФормирования.ИсключитьПустыеВидыЦен);
	ПараметрыФормирования.Вставить("ТаблицаВидовЦен", Справочники.ПрайсЛисты.СоздатьЭлемент().ВидыЦен.Выгрузить());
	ПараметрыФормирования.ТаблицаВидовЦен.Колонки.Добавить("ЦеныАктуальны", Новый ОписаниеТипов("Булево"));
	
	НомерСтроки = 0;
	Для каждого ЭлементМассива Из ПараметрыФормирования.ВидыЦен Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		НоваяСтрока = ПараметрыФормирования.ТаблицаВидовЦен.Добавить();
		НоваяСтрока.ВидЦен = ЭлементМассива;
		НоваяСтрока.НомерСтроки = НомерСтроки;
		
		Если ЗначениеЗаполнено(НоваяСтрока.ВидЦен) Тогда
			
			НоваяСтрока.ЦеныАктуальны = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.ВидЦен, "ЦеныАктуальны");
			
		Иначе
			
			НоваяСтрока.ЦеныАктуальны = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// ::: ОБЩИЕ
	ПараметрыФормирования.Вставить("ВариантПрайсЛиста", 		ПараметрыФормирования.ПечатьПрайсЛиста);
	ПараметрыФормирования.Вставить("НастройкиКомпоновкиДанных",	ПараметрыФормирования.ОтборНоменклатуры);
	
	// ::: НОМЕНКЛАТУРА
	ПредставлениеНоменклатурыМассивом = ПараметрыФормирования.ПредставлениеНоменклатуры;
	ПараметрыФормирования.ПредставлениеНоменклатуры = Справочники.ПрайсЛисты.СоздатьЭлемент().ПредставлениеНоменклатуры.Выгрузить();
	Для каждого ЭлементМассива Из ПредставлениеНоменклатурыМассивом Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыФормирования.ПредставлениеНоменклатуры.Добавить(), ЭлементМассива);
		
	КонецЦикла;
	
	ВыводитьКартинки = (ПараметрыФормирования.ПредставлениеНоменклатуры.НайтиСтроки(Новый Структура("Использование, РеквизитНоменклатуры", Истина, "Картинка")).Количество() > 0);
	ПараметрыФормирования.Вставить("ВыводитьКартинки",				ВыводитьКартинки);
	ПараметрыФормирования.Вставить("РазмерКартинокБайт",			0);
	
	ПараметрыФормирования.Вставить("ИспользоватьХарактеристики",Ложь);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		
		ИспользоватьХарактеристики = (ПараметрыФормирования.ПредставлениеНоменклатуры.НайтиСтроки(Новый Структура("Использование, РеквизитНоменклатуры", Истина, "Характеристика")).Количество() > 0);
		ПараметрыФормирования.Вставить("ИспользоватьХарактеристики", ИспользоватьХарактеристики);
		
	КонецЕсли;
	
	ПризнакНовинка = (ПараметрыФормирования.ПредставлениеНоменклатуры.НайтиСтроки(Новый Структура("Использование, РеквизитНоменклатуры", Истина, "ПризнакНовинка")).Количество() > 0);
	ПараметрыФормирования.Вставить("ИспользуетсяПризнакНовинка",	ПризнакНовинка);
	ПараметрыФормирования.Вставить("КолонкаСКартинкойНовинка",		0);
	
	// ::: ОСТАТКИ
	СвободныйОстаток = (ПараметрыФормирования.ПредставлениеНоменклатуры.НайтиСтроки(Новый Структура("Использование, РеквизитНоменклатуры", Истина, "СвободныйОстаток")).Количество() > 0);
	ПараметрыФормирования.Вставить("СвободныйОстаток", 				СвободныйОстаток);
	
	// ::: КИ
	ПараметрыФормирования.Вставить("ВыводитьКонтактнуюИнформацию",	ЗначениеЗаполнено(ПараметрыФормирования.Организация));
	ПараметрыФормирования.Вставить("Логотип",						ПараметрыФормирования.Организация.ФайлЛоготип);
	ПараметрыФормирования.Вставить("ДатаФормирования",				?(ЗначениеЗаполнено(ПараметрыФормирования.ДатаФормирования), ПараметрыФормирования.ДатаФормирования, ТекущаяДатаСеанса()));
	
	// ::: СЛУЖЕБНЫЕ
	ПараметрыФормирования.Вставить("ИменаКолонок",					Новый Соответствие);
	ПараметрыФормирования.Вставить("ПоследняяКолонкаЗаголовка", 	1);
	ПараметрыФормирования.Вставить("ПоследняяКолонкаПрайсЛиста",	1);
	ПараметрыФормирования.Вставить("ИмяПоляПредставленияГруппы",	Неопределено);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Стартовая процедура отложенного формирования прайс-листа организации
Процедура СформироватьПрайсЛистОрганизации(ПараметрыФормирования, ФоновоеЗаданиеАдресХранилища = "") Экспорт
	
	Если НЕ ПараметрыФормирования.Свойство("ОтборНоменклатуры") Тогда
		
		ВызватьИсключение НСтр("ru ='Ошибка в начальных параметрах прайс-листа организации'");
		
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	АдаптироватьПараметрыФормирования(ПараметрыФормирования);
	ПостроитьПрайсЛист(ПараметрыФормирования, ТабличныйДокумент);
	
	// Для работы с вкл. параметром РежимОтладки
	ПараметрыФормирования.ТаблицаВидовЦен = Неопределено;
	ПараметрыФормирования.ПредставлениеНоменклатуры = Неопределено;
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("ПоследняяКолонкаЗаголовка",	ПараметрыФормирования.ПоследняяКолонкаЗаголовка);
	РезультатВыполнения.Вставить("ПоследняяКолонкаПрайсЛиста",	ПараметрыФормирования.ПоследняяКолонкаПрайсЛиста);
	РезультатВыполнения.Вставить("ИменаКолонок",				ПараметрыФормирования.ИменаКолонок);
	РезультатВыполнения.Вставить("РазмерКартинокБайт",			ПараметрыФормирования.РазмерКартинокБайт);
	РезультатВыполнения.Вставить("ТабличныйДокумент",			ТабличныйДокумент);
	
	ПоместитьВоВременноеХранилище(РезультатВыполнения, ФоновоеЗаданиеАдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли