
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// ИнтернетПоддержкаПользователей.Новости
	ЗаголовокНовости = НСтр("ru='Новости: Прайс-лист'");
	НастройкиЗаполнения = Новый Структура("ПолучатьНовостиНаСервере, ХранитьМассивНовостейТолькоНаСервере", Истина, Истина);
	ОбработкаНовостей.КонтекстныеНовости_ПриСозданииНаСервере(ЭтотОбъект, "УНФ.Обработка.ПрайсЛистыОрганизации", "ФормаПрайсЛистОрганизации", Неопределено, ЗаголовокНовости, Ложь, НастройкиЗаполнения, "ПриОткрытии");
	// Конец ИнтернетПоддержкаПользователей.Новости
	
	ПараметрыДлительнойОперации = Новый Структура;
	ПараметрыДлительнойОперации.Вставить("ФоновоеЗаданиеРезультат", 	Неопределено);
	ПараметрыДлительнойОперации.Вставить("ФоновоеЗаданиеИдентификатор", Неопределено);
	ПараметрыДлительнойОперации.Вставить("СохранитьВФайл",				Ложь);
	
	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("АвторизованныйПользователь", 		Пользователи.АвторизованныйПользователь());
	КэшЗначений.Вставить("ВопросСозданияПервогоПрайсЛиста",	УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ВыводитьВопросСозданииПервогоПрайсЛистаОрганизации"));
	КэшЗначений.Вставить("ЕстьСохраненныеПрайсЛисты",		ЕстьСохраненныеПрайсЛисты());
	КэшЗначений.Вставить("НациональнаяВалюта",				Константы.НациональнаяВалюта.Получить());
	КэшЗначений.Вставить("ПараметрыДлительнойОперации",		ПараметрыДлительнойОперации);
	КэшЗначений.Вставить("ЕстьПравоДобавленияНового", 		ПравоДоступа("Добавление", Метаданные.Справочники.ПрайсЛисты));
	
	// Служебные поля
	КэшЗначений.Вставить("ПрайсЛистЗаполнен",							Ложь);
	КэшЗначений.Вставить("НеобходимоОбновитьДанные",					Истина);
	КэшЗначений.Вставить("НеобходимоОбновитьОформление",				Ложь);
	
	КэшЗначений.Вставить("ПоследняяКолонкаЗаголовка",					0);
	КэшЗначений.Вставить("ПоследняяКолонкаПрайсЛиста",					0);
	КэшЗначений.Вставить("ИменаКолонок",								Неопределено);
	КэшЗначений.Вставить("РазмерШапкиТабличногоДокумента",				4);				// в строках.
	КэшЗначений.Вставить("ОформлениеПредельноеЗначениеПорции",			5000);
	КэшЗначений.Вставить("ОформлениеГраницаПоследнейПорции",			0);
	КэшЗначений.Вставить("ПредельноДопустимыРазмерКартинокМб",			500);
	КэшЗначений.Вставить("УИДЗамера",									Неопределено);
	КэшЗначений.Вставить("ЭтоПрограммноеСохранениеБольшогоПрайсЛиста",	Ложь);
	КэшЗначений.Вставить("ЗапретитьОбновлениеПрайсЛистаПриЗакрытии", 	Ложь);
	
	ИнициализироватьНастройкиСКД();
	
	ОткрыватьПрайсЛистОрганизацииКакСписок = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОткрыватьПрайсЛистОрганизацииКакСписок");
	
	Если НЕ Параметры.Свойство("РабочийПрайсЛистОрганизации", РабочийПрайсЛистОрганизации) Тогда
		
		РабочийПрайсЛистОрганизации = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("РабочийПрайсЛистОрганизации");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РабочийПрайсЛистОрганизации) Тогда
		
		ИзменитьОбъектФормыПоСсылке();
		
		КэшЗначений.НеобходимоОбновитьОформление = Объект.МаксимальнаяЦена ИЛИ Объект.МинимальнаяЦена ИЛИ Объект.УсловнаяЦена;
		
	Иначе
		
		ЗагрузитьТиповыеНастройкиОтбораНоменклатуры();
		ЗагрузитьТиповоеПредставлениеНоменклатуры();
		
		Объект.Автор = Пользователи.АвторизованныйПользователь();
		Объект.Валюта = Константы.НациональнаяВалюта.Получить();
		Объект.УсловнаяЦенаУсловие = Перечисления.ВидСравненияЗначений.Меньше;
		Объект.Индивидуальный = Истина;
		
		КэшЗначений.РазмерШапкиТабличногоДокумента = ?(ЗначениеЗаполнено(Объект.Организация), 15, 4);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости
	
	УправлениеФормойНаКлиенте();
	ЗаполнитьСписокВыбораЭлементовСравненияЦен();
	
	Если НЕ КэшЗначений.ЕстьПравоДобавленияНового Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПраваяПанель",	"Доступность", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ПрайсЛисты") Тогда
		
		ПослеВыбораЭлементаНастроекДляЗаполнения(ВыбранноеЗначение, Неопределено);
		
	КонецЕсли;
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.СохранениеПечатнойФормы") Тогда
		
		ОбработатьПараметрыСохранениеПечатнойФормы(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаЦена" Тогда
		
		АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Объект.Индивидуальный Тогда
		
		НачатьСохранениеНастроекПрайсЛиста(Отказ, ЗавершениеРаботы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ВыполнитьПакетнуюКоманду(СтрокаПоиска) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИскатьСтрокуВТаблице(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочийПрайсЛистОрганизацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(РабочийПрайсЛистОрганизации) Тогда
		
		РабочийПрайсЛистОрганизации = Объект.Ссылка;
		Возврат;
		
	КонецЕсли;
	
	НовыеДанныеЭлементаСправочника = ОбъектВСтруктуру();
	ИзменитьОбъектФормыПоСсылке(НовыеДанныеЭлементаСправочника);
	
	УправлениеФормойНаКлиенте();
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантПечатиПрайсЛистаПриИзменении(Элемент)
	
	ПриИзмененииВариантаПечатиПрайсЛиста();
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияСодержимогоПриИзменении(Элемент)
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПредставлениеПериодаНажатиеЗавершение", ЭтотОбъект);
	
	ПоказатьВводДаты(Оповещение, Объект.ПериодЦен, НСтр("ru = 'На дату'"), ЧастиДаты.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатиеЗавершение(НовыйПериод, ДополнительныеДанные) Экспорт
	
	Если ТипЗнч(НовыйПериод) <> Тип("Дата") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Объект.ПериодЦен = НовыйПериод;
	
	ПредставлениеПериодаТекстом();
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРасчетаКурсаВалютыПриИзменении(Элемент)
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура МаксимальнаяЦенаПриИзменении(Элемент)
	
	Если Объект.МаксимальнаяЦена Тогда
		
		ВыключитьКонкурирующиеУсловия(Элемент.Имя);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЦенаПоУсловию", "Доступность", Объект.УсловнаяЦена);
	УстановитьСвойстваЭлементовГруппыУсловнойЦены();
	
	УстановитьСвойстваГруппыОформление();
	АктуальностьПрайсЛиста("OUTDATED", Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МинимальнаяЦенаПриИзменении(Элемент)
	
	Если Объект.МинимальнаяЦена Тогда
		
		ВыключитьКонкурирующиеУсловия(Элемент.Имя);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЦенаПоУсловию", "Доступность", Объект.УсловнаяЦена);
	УстановитьСвойстваЭлементовГруппыУсловнойЦены();
	
	УстановитьСвойстваГруппыОформление();
	АктуальностьПрайсЛиста("OUTDATED", Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловнаяЦенаПриИзменении(Элемент)
	
	Если Объект.УсловнаяЦена Тогда
		
		ВыключитьКонкурирующиеУсловия(Элемент.Имя);
		
	Иначе
		
		СравнениеВыключилиУсловнаяЦена();
		
		АктуальностьПрайсЛиста("OUTDATED", Ложь, Истина);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЦенаПоУсловию", "Доступность", Объект.УсловнаяЦена);
	
	УстановитьСвойстваЭлементовГруппыУсловнойЦены();
	
	УстановитьСвойстваГруппыОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура УсловнаяЦенаУсловиеПриИзменении(Элемент)
	
	УсловияСИнтервалами = Новый Массив(2);
	УсловияСИнтервалами[0] = ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.ВИнтервале");
	УсловияСИнтервалами[1] = ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.ВИнтервалеВключая");
	
	Если УсловияСИнтервалами.Найти(Объект.УсловнаяЦенаУсловие) = Неопределено Тогда
		
		Объект.УсловнаяЦенаЗначениеДо = 0;
		
	КонецЕсли;
	
	УстановитьСвойстваЭлементовГруппыУсловнойЦены();
	
	АктуальностьПрайсЛиста("OUTDATED", Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловнаяЦенаЗначениеПриИзменении(Элемент)
	
	АктуальностьПрайсЛиста("OUTDATED", Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловнаяЦенаЗначениеДоПриИзменении(Элемент)
	
	АктуальностьПрайсЛиста("OUTDATED", Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставРеквизитовНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ПредставлениеНоменклатуры",				Объект.ПредставлениеНоменклатуры);
	ПараметрыОткрытияФормы.Вставить("ПечатьПрайсЛиста",							Объект.ПечатьПрайсЛиста);
	
	ПараметрыОткрытияФормы.Вставить("КоличествоКолонок",						Объект.КоличествоКолонок);
	ПараметрыОткрытияФормы.Вставить("КартинкаШирина",							Объект.КартинкаШирина);
	ПараметрыОткрытияФормы.Вставить("КартинкаВысота",							Объект.КартинкаВысота);
	ПараметрыОткрытияФормы.Вставить("ИзменятьРазмерПропорционально",			Объект.ИзменятьРазмерПропорционально);
	
	ПараметрыОткрытияФормы.Вставить("ПредставлениеОстатков",					Объект.ПредставлениеОстатков);
	ПараметрыОткрытияФормы.Вставить("ТекстовоеПредставлениеОстатковМало",		Объект.ТекстовоеПредставлениеОстатковМало);
	ПараметрыОткрытияФормы.Вставить("ТекстовоеПредставлениеОстатковДостаточно",	Объект.ТекстовоеПредставлениеОстатковДостаточно);
	ПараметрыОткрытияФормы.Вставить("ТекстовоеПредставлениеОстатковМного",		Объект.ТекстовоеПредставлениеОстатковМного);
	
	ПараметрыОткрытияФормы.Вставить("ОтборОрганизация",							Объект.ОтборОрганизация);
	ПараметрыОткрытияФормы.Вставить("ОтборСклад",								Объект.ОтборСклад);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеРедактированияСоставаРеквизитов", ЭтотОбъект);
	
	ИмяФормыРедактированияПредставления = ?(Объект.ПечатьПрайсЛиста = ПредопределенноеЗначение("Перечисление.ВариантыПечатиПрайсЛиста.Полотно"), "ФормаСоставРеквизитов", "ФормаСоставРеквизитовДвеКолонки");
	ИмяФормыРедактированияПредставления = СтрШаблон("Справочник.ПрайсЛисты.Форма.%1", ИмяФормыРедактированияПредставления);
	
	ОткрытьФорму(ИмяФормыРедактированияПредставления, ПараметрыОткрытияФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРедактированияСоставаРеквизитов(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Объект.ПредставлениеНоменклатуры.Очистить();
	Для каждого Строка Из РезультатЗакрытия.ПредставлениеНоменклатуры Цикл
		
		ЗаполнитьЗначенияСвойств(Объект.ПредставлениеНоменклатуры.Добавить(), Строка);
		
	КонецЦикла;
	
	РезультатЗакрытия.Свойство("КоличествоКолонок",							Объект.КоличествоКолонок);
	РезультатЗакрытия.Свойство("КартинкаШирина",							Объект.КартинкаШирина);
	РезультатЗакрытия.Свойство("КартинкаВысота",							Объект.КартинкаВысота);
	РезультатЗакрытия.Свойство("ИзменятьРазмерПропорционально",				Объект.ИзменятьРазмерПропорционально);
	РезультатЗакрытия.Свойство("ПредставлениеОстатков",						Объект.ПредставлениеОстатков);
	РезультатЗакрытия.Свойство("ТекстовоеПредставлениеОстатковМало",		Объект.ТекстовоеПредставлениеОстатковМало);
	РезультатЗакрытия.Свойство("ТекстовоеПредставлениеОстатковДостаточно",	Объект.ТекстовоеПредставлениеОстатковДостаточно);
	РезультатЗакрытия.Свойство("ТекстовоеПредставлениеОстатковМного",		Объект.ТекстовоеПредставлениеОстатковМного);
	РезультатЗакрытия.Свойство("ОтборОрганизация",							Объект.ОтборОрганизация);
	РезультатЗакрытия.Свойство("ОтборСклад",								Объект.ОтборСклад);
	
	ЗаполнитьПредставлениеНоменклатуры();
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьПоНаличиюПриИзменении(Элемент)
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьПустыеВидыЦенПриИзменении(Элемент)
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураБезЦенПриИзменении(Элемент)
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенСравнитьПриИзменении(Элемент)
	
	УстановитьСвойстваЭлементовДополнительногоОтбора();
	
	Если Объект.ВидЦенСравнить = Ложь Тогда
		
		Объект.ВидЦен1			= Неопределено;
		Объект.ВидЦенУсловие	= ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.Равно");
		Объект.ВидЦен2			= Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦен1ПриИзменении(Элемент)
	
	ЗаполнитьСписокВыбораЭлементовСравненияЦен();
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенУсловиеПриИзменении(Элемент)
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦен2ПриИзменении(Элемент)
	
	ЗаполнитьСписокВыбораЭлементовСравненияЦен();
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Расшифровка.Свойство("ВидЦен")
			И Расшифровка.Свойство("Номенклатура") Тогда
			
			ОткрытьФормуЗаписиРегистра(Расшифровка);
			
		КонецЕсли;
		
		Если Расшифровка.Свойство("ЭтоХарактеристика")
			И ЗначениеЗаполнено(Расшифровка.Характеристика) Тогда
			
			ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаОбъекта", Новый Структура("Ключ", Расшифровка.Характеристика), ЭтаФорма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрыватьПрайсЛистОрганизацииКакОбработкуПриИзменении(Элемент)
	
	ПерсональныеНастройкиВызовСервера.Установить(ОткрыватьПрайсЛистОрганизацииКакСписок,
		"ОткрыватьПрайсЛистОрганизацииКакСписок");
	
КонецПроцедуры

&НаКлиенте
Процедура ИндивидуальныйПриИзменении(Элемент)
	
	КэшЗначений.ЗапретитьОбновлениеПрайсЛистаПриЗакрытии = НЕ Объект.Индивидуальный;
	
	Объект.Автор = ?(Объект.Индивидуальный, КэшЗначений.АвторизованныйПользователь, Неопределено);
	Если НЕ Объект.Индивидуальный Тогда
		
		Объект.УказатьКонтактыОтветственного = Ложь;
		
	КонецЕсли;
	
	УстановитьСвойстваЭлементовПоПризнакуИндивидуальный();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)
	
	Если КэшЗначений.ПрайсЛистЗаполнен = Истина
		И КэшЗначений.НеобходимоОбновитьДанные = Ложь
		И КэшЗначений.НеобходимоОбновитьОформление = Истина
		Тогда
		
		ОформлениеПрайсЛиста();
		АктуальностьПрайсЛиста("OK", Ложь, Ложь);
		
		Возврат;
		
	КонецЕсли;
	
	СформироватьПрайсЛистНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлОтправить(Команда)
	
	ОбработчикРезультата = Новый ОписаниеОповещения("ОтправитьПечатныеФормыПоПочтеПродолжение", ЭтотОбъект);
	РаботаСПочтовымиСообщениямиКлиент.ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОбработчикРезультата);
	
КонецПроцедуры

&НаКлиенте
Функция СтандартноеИмяСохраняемогоФайла()
	
	Возврат СтрШаблон("PRC_%1", Формат(ОбщегоНазначенияКлиент.ДатаСеанса(), "ДФ=yyyyMMddhhmm"));
	
КонецФункции

&НаКлиенте
Процедура ОтправитьПечатныеФормыПоПочтеПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИмяФайла = СтандартноеИмяСохраняемогоФайла();
	
	Вложение = Новый Структура;
	Вложение.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилище(ТабличныйДокумент, УникальныйИдентификатор));
	Вложение.Вставить("Представление", ИмяФайла);
	
	ПараметрыОтправки = РаботаСПочтовымиСообщениямиКлиент.ПараметрыОтправкиПисьма();
	ПараметрыОтправки.Тема		= ИмяФайла;
	ПараметрыОтправки.Вложения	= ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Вложение);
	
	РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлСохранить(Команда)
	
	СохранитьПечатныеФормы(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИскатьНазад(Команда)
	
	ИскатьСтрокуВТаблице(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИскатьВперед(Команда)
	
	ИскатьСтрокуВТаблице(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистВыбрать(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Ложь);
	ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораЭлементаНастроекДляЗаполнения", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ПрайсЛисты.ФормаВыбора", ПараметрыОткрытия, , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЭлементаНастроекДляЗаполнения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		
		РабочийПрайсЛистОрганизации = Результат[0];
		
	ИначеЕсли ТипЗнч(Результат) = Тип("СправочникСсылка.ПрайсЛисты") Тогда
		
		РабочийПрайсЛистОрганизации = Результат;
		
	КонецЕсли;
	
	ИзменитьОбъектФормыПоСсылке();
	УправлениеФормойНаКлиенте();
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистСоздать(Команда)
	
	ЗаписатьЭлементСправочникаПрайсЛисты("Новый");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистСкопировать(Команда)
	
	ЗаписатьЭлементСправочникаПрайсЛисты("Скопировать");
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация1Нажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("МассивВидыЦен",					Новый Массив);
	ПараметрыОткрытия.Вставить("НазваниеЦеныПредставлением",	Объект.НазваниеЦеныПредставлением);
	ПараметрыОткрытия.Вставить("ВариантПечатиПрайсЛиста",		Объект.ПечатьПрайсЛиста);
	
	Для каждого СтрокаТаблицы Из Объект.ВидыЦен Цикл
		
		ПараметрыОткрытия.МассивВидыЦен.Добавить(СтрокаТаблицы.ВидЦен);
		
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораВидовЦен", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ПрайсЛистыОрганизации.Форма.ФормаПодбораВидовЦен", ПараметрыОткрытия, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораВидовЦен(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Результат.Свойство("НазваниеЦеныПредставлением",	Объект.НазваниеЦеныПредставлением);
	
	Объект.ВидыЦен.Очистить();
	Элементы.ВидЦен1.СписокВыбора.Очистить();
	Элементы.ВидЦен2.СписокВыбора.Очистить();
	
	Для каждого ЭлементМассива Из Результат.МассивВидовЦен Цикл
		
		НоваяСтрока 		= Объект.ВидыЦен.Добавить();
		НоваяСтрока.ВидЦен	= ЭлементМассива;
		
		Элементы.ВидЦен1.СписокВыбора.Добавить(ЭлементМассива);
		Элементы.ВидЦен2.СписокВыбора.Добавить(ЭлементМассива);
		
	КонецЦикла;
	
	КоличествоСтрок = Объект.ВидыЦен.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Объект.МаксимальнаяЦена = Ложь;
		Объект.МинимальнаяЦена = Ложь;
		Объект.УсловнаяЦена = Ложь;
		
		СравнениеВыключилиУсловнаяЦена()
		
	КонецЕсли;
	
	УстановитьСвойстваЭлементовПоВидуЦен();
	УстановитьСвойстваЭлементовВыделенияПоУсловию();
	УстановитьСвойстваГруппыОформление();
	УстановитьСвойстваЭлементовГруппыУсловнойЦены();
	УстановитьСвойстваЭлементовДополнительногоОтбора();
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация2Нажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("НастройкиКомпоновкиДанных", НастройкиОтбораНоменклатуры.Настройки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораОтбораНоменклатуры", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ПрайсЛистыОрганизации.Форма.ФормаПодбораНоменклатурыКомпоновщик", ПараметрыОткрытия, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораОтбораНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Результат.Свойство("НастройкиСКД") Тогда
		
		НастройкиОтбораНоменклатуры.ЗагрузитьНастройки(Результат.НастройкиСКД);
		
	КонецЕсли;
	
	ПослеОбновленияНастроекСКД();
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация3Нажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Автор",							Объект.Автор);
	ПараметрыОткрытия.Вставить("ВариантыСортировки",			Объект.ВариантыСортировки);
	ПараметрыОткрытия.Вставить("ВыводитьДатуФормирования",		Объект.ВыводитьДатуФормирования);
	ПараметрыОткрытия.Вставить("ДатаФормирования",				Объект.ДатаФормирования);
	ПараметрыОткрытия.Вставить("Индивидуальный",				Объект.Индивидуальный);
	ПараметрыОткрытия.Вставить("НаименованиеПрайсЛиста",		Объект.Наименование);
	ПараметрыОткрытия.Вставить("Организация",					Объект.Организация);
	ПараметрыОткрытия.Вставить("Описание",						Объект.Описание);
	ПараметрыОткрытия.Вставить("УказатьКонтактыОтветственного",	Объект.УказатьКонтактыОтветственного);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеРедактированияСведенийОДокументе", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ПрайсЛисты.Форма.ФормаОДокументе", ПараметрыОткрытия, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРедактированияСведенийОДокументе(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Результат.Свойство("Автор",							Объект.Автор);
	Результат.Свойство("ВариантыСортировки",			Объект.ВариантыСортировки);
	Результат.Свойство("ВыводитьДатуФормирования",		Объект.ВыводитьДатуФормирования);
	Результат.Свойство("ДатаФормирования",				Объект.ДатаФормирования);
	Результат.Свойство("НаименованиеПрайсЛиста",		Объект.Наименование);
	Результат.Свойство("Организация",					Объект.Организация);
	Результат.Свойство("Описание",						Объект.Описание);
	Результат.Свойство("УказатьКонтактыОтветственного", Объект.УказатьКонтактыОтветственного);
	
	КэшЗначений.РазмерШапкиТабличногоДокумента = ?(ЗначениеЗаполнено(Объект.Организация), 15, 4);
	
	Заголовок = Объект.Наименование;
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетИсключенныеПозиции(Команда)
	
	ОткрытьФорму("Обработка.ПрайсЛистыОрганизации.Форма.ФормаНеИспользуемаяНоменклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьОтборыНажатие(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	
	СтруктураИменЭлементов = Новый Структура;
	СтруктураИменЭлементов.Вставить("ФильтрыНастройкиИДопИнфо",		"ФильтрыНастройкиИДопИнфо");
	СтруктураИменЭлементов.Вставить("ДекорацияРазвернутьОтборы",	"ДекорацияРазвернутьОтборы");
	СтруктураИменЭлементов.Вставить("ПраваяПанель",					"ПраваяПанель");
	
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость, СтруктураИменЭлементов, 34);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьНастройкиОбщегоПрайсЛиста(Команда)
	
	КэшЗначений.ЗапретитьОбновлениеПрайсЛистаПриЗакрытии = Ложь;
	
	НачатьСохранениеНастроекПрайсЛиста(Ложь, Ложь);
	
	КэшЗначений.ЗапретитьОбновлениеПрайсЛистаПриЗакрытии = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПредставлениеПериодаТекстом()
	
	Если ЗначениеЗаполнено(Объект.ПериодЦен) Тогда
		
		ПредставлениеПериода = Формат(Объект.ПериодЦен, "ДЛФ=DD");
		
	Иначе
		
		ПредставлениеПериода = НСтр("ru = 'актуальные данные'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИскатьСтрокуВТаблице(ИскатьВперед)
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не задана строка поиска'"));
		ТекущийЭлемент = Элементы.СтрокаПоиска;
		
		Возврат;
		
	КонецЕсли;
	
	НайденнаяОбласть = ТабличныйДокумент.НайтиТекст(СокрЛП(СтрокаПоиска), Элементы.ТабличныйДокумент.ТекущаяОбласть, , , , ИскатьВперед, Истина);
	Если НайденнаяОбласть = Неопределено Тогда
		
		НайденнаяОбласть = ТабличныйДокумент.НайтиТекст(СокрЛП(СтрокаПоиска), , , , , , Истина);
		Если НайденнаяОбласть = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru = 'В прайс-листе искомый текст не найден...'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "СтрокаПоиска");
			ТекущийЭлемент = Элементы.СтрокаПоиска;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущийЭлемент = Элементы.ТабличныйДокумент;
	
	МассивОбластей = Новый Массив;
	МассивОбластей.Добавить(НайденнаяОбласть);
	Элементы.ТабличныйДокумент.УстановитьВыделенныеОбласти(МассивОбластей);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВариантаПечатиПрайсЛиста()
	
	ДополнительныеПараметры = Новый Структура;
	
	ЦенообразованиеКлиент.ИзменитьВариантПечатиПрайсЛистаОрганизация(Объект, ДополнительныеПараметры);
	
	ЗаполнитьПредставлениеНоменклатуры();
	УстановитьСвойстваЭлементовПоВидуЦен();
	УстановитьСвойстваЭлементовВыделенияПоУсловию();
	УстановитьСвойстваГруппыОформление();
	УстановитьСвойстваЭлементовГруппыУсловнойЦены();
	УстановитьСвойстваЭлементовДополнительногоОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормойНаКлиенте()
	
	Заголовок = ?(ПустаяСтрока(Объект.Наименование), НСтр("ru ='Прайс-лист'"), Объект.Наименование);
	
	ЗаполнитьПредставлениеНоменклатуры();
	
	ПослеОбновленияНастроекСКД();
	
	ПредставлениеПериодаТекстом();
	УстановитьСвойстваЭлементовПоВидуЦен();
	УстановитьСвойстваЭлементовВыделенияПоУсловию();
	УстановитьСвойстваГруппыОформление();
	УстановитьСвойстваЭлементовГруппыУсловнойЦены();
	УстановитьСвойстваЭлементовДополнительногоОтбора();
	УстановитьСвойстваЭлементовПоПризнакуИндивидуальный();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойстваЭлементовПоВидуЦен()
	
	КоличествоСтрок = Объект.ВидыЦен.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		ТекстЗаголовка			= НСтр("ru ='Виды цен (не указаны)'");
		
	ИначеЕсли КоличествоСтрок = 1 Тогда
		
		ТекстЗаголовка			= СокрЛП(Объект.ВидыЦен[0].ВидЦен);
		
	ИначеЕсли КоличествоСтрок = 2 Тогда
		
		ТекстЗаголовка			= СокрЛП(Объект.ВидыЦен[0].ВидЦен) + ", " + СокрЛП(Объект.ВидыЦен[1].ВидЦен);
		
	Иначе
		
		ТекстЗаголовка	= СокрЛП(Объект.ВидыЦен[0].ВидЦен) + ", " + СокрЛП(Объект.ВидыЦен[1].ВидЦен) + Символы.НПП + СтрШаблон(НСтр("ru ='(еще %1)'"), КоличествоСтрок - 2);
		
	КонецЕсли;
	
	ТекстЗаголовкаГруппы = ?(КоличествоСтрок = 0, НСтр("ru ='Колонки'"), НСтр("ru ='Колонки (*)'"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация1", "Заголовок", ТекстЗаголовка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКолонки", "Заголовок", ТекстЗаголовкаГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойстваЭлементовВыделенияПоУсловию()
	
	БолееОдногоВидаЦен	= (Объект.ВидыЦен.Количество() > 1);
	ЕстьВидыЦен			= (Объект.ВидыЦен.Количество() > 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "МинимальнаяЦена",		"Доступность",	БолееОдногоВидаЦен);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "МаксимальнаяЦена",		"Доступность",	БолееОдногоВидаЦен);
	
	Если Объект.ПечатьПрайсЛиста = ПредопределенноеЗначение("Перечисление.ВариантыПечатиПрайсЛиста.Диафильм") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УсловнаяЦена",			"Доступность",	Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЦенаПоУсловию",	"Доступность",	Ложь);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УсловнаяЦена",			"Доступность",	ЕстьВидыЦен);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЦенаПоУсловию",	"Доступность",	Объект.УсловнаяЦена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойстваГруппыОформление()
	
	ТекстЗаголовка = ?(Объект.МаксимальнаяЦена ИЛИ Объект.МинимальнаяЦена ИЛИ Объект.УсловнаяЦена, НСтр("ru ='Оформление (*)'"), НСтр("ru ='Оформление'"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОперацииСравнения", "Заголовок", ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойстваЭлементовГруппыУсловнойЦены()
	
	УсловияСИнтервалами = Новый Массив(2);
	УсловияСИнтервалами[0] = ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.ВИнтервале");
	УсловияСИнтервалами[1] = ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.ВИнтервалеВключая");
	
	ЭтоУсловиеСИнтервалом = (УсловияСИнтервалами.Найти(Объект.УсловнаяЦенаУсловие) <> Неопределено);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УсловнаяЦенаЗначениеДо", "Видимость", ЭтоУсловиеСИнтервалом);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойстваЭлементовДополнительногоОтбора()
	
	СравнениеДоступно = (Объект.ВидыЦен.Количество() > 1);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВидЦенСравнить", "Доступность", СравнениеДоступно);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаУсловиеСравнения", "Доступность", СравнениеДоступно);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойстваЭлементовПоПризнакуИндивидуальный()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Автор", "Видимость", Объект.Индивидуальный);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапомнитьНастройкиОбщегоПрайсЛиста", "Видимость", НЕ Объект.Индивидуальный);
	
КонецПроцедуры

&НаКлиенте
Функция ОбъектВСтруктуру()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Автор", 						Объект.Автор);
	СтруктураДанных.Вставить("Валюта",						Объект.Валюта);
	СтруктураДанных.Вставить("ВариантыСортировки",			Объект.ВариантыСортировки);
	СтруктураДанных.Вставить("ВыводитьДатуФормирования",	Объект.ВыводитьДатуФормирования);
	СтруктураДанных.Вставить("ДатаРасчетаКурсаВалюты",		Объект.ДатаРасчетаКурсаВалюты);
	СтруктураДанных.Вставить("ДатаФормирования",			Объект.ДатаФормирования);
	СтруктураДанных.Вставить("ИерархияСодержимого",			Объект.ИерархияСодержимого);
	СтруктураДанных.Вставить("Индивидуальный", 				Объект.Индивидуальный);
	СтруктураДанных.Вставить("НазваниеЦеныПредставлением",	Объект.НазваниеЦеныПредставлением);
	СтруктураДанных.Вставить("НаименованиеПрайсЛиста",		Объект.Наименование);
	СтруктураДанных.Вставить("НоменклатураБезЦен", 			Объект.НоменклатураБезЦен);
	СтруктураДанных.Вставить("Описание",					Объект.Описание);
	СтруктураДанных.Вставить("Организация",					Объект.Организация);
	СтруктураДанных.Вставить("ПечатьПрайсЛиста",			Объект.ПечатьПрайсЛиста);
	СтруктураДанных.Вставить("ПериодЦен", 					Объект.ПериодЦен);
	СтруктураДанных.Вставить("УказатьКонтактыОтветственного", Объект.УказатьКонтактыОтветственного);
	СтруктураДанных.Вставить("ФормироватьПоНаличию",		Объект.ФормироватьПоНаличию);
	
	СтруктураДанных.Вставить("ПредставлениеОстатков",  		Объект.ПредставлениеОстатков);
	СтруктураДанных.Вставить("ТекстовоеПредставлениеОстатковМало", Объект.ТекстовоеПредставлениеОстатковМало);
	СтруктураДанных.Вставить("ТекстовоеПредставлениеОстатковДостаточно", Объект.ТекстовоеПредставлениеОстатковДостаточно);
	СтруктураДанных.Вставить("ТекстовоеПредставлениеОстатковМного", Объект.ТекстовоеПредставлениеОстатковМного);
	СтруктураДанных.Вставить("ОтборОрганизация",			Объект.ОтборОрганизация);
	СтруктураДанных.Вставить("ОтборСклад",					Объект.ОтборСклад);
	
	СтруктураДанных.Вставить("МаксимальнаяЦена", 			Объект.МаксимальнаяЦена);
	СтруктураДанных.Вставить("МинимальнаяЦена", 			Объект.МинимальнаяЦена);
	СтруктураДанных.Вставить("УсловнаяЦена", 				Объект.УсловнаяЦена);
	СтруктураДанных.Вставить("УсловнаяЦенаУсловие", 		Объект.УсловнаяЦенаУсловие);
	СтруктураДанных.Вставить("УсловнаяЦенаЗначение", 		Объект.УсловнаяЦенаЗначение);
	СтруктураДанных.Вставить("УсловнаяЦенаЗначениеДо", 		Объект.УсловнаяЦенаЗначениеДо);
	
	СтруктураДанных.Вставить("ВидЦенСравнить", 				Объект.ВидЦенСравнить);
	СтруктураДанных.Вставить("ВидЦен1",						Объект.ВидЦен1);
	СтруктураДанных.Вставить("ВидЦенУсловие",				Объект.ВидЦенУсловие);
	СтруктураДанных.Вставить("ВидЦен2", 					Объект.ВидЦен2);
	
	СтруктураДанных.Вставить("ПредставлениеНоменклатуры",	Новый Массив);
	СтруктураДанных.Вставить("ВидыЦен", 					Новый Массив);
	СтруктураДанных.Вставить("ИсключитьПустыеВидыЦен",		Объект.ИсключитьПустыеВидыЦен);
	СтруктураДанных.Вставить("ОтборНоменклатуры", 			НастройкиОтбораНоменклатуры.Настройки.Отбор);
	
	СтруктураДанных.Вставить("КоличествоКолонок",			Объект.КоличествоКолонок);
	СтруктураДанных.Вставить("КартинкаВысота", 				Объект.КартинкаВысота);
	СтруктураДанных.Вставить("КартинкаШирина", 				Объект.КартинкаШирина);
	СтруктураДанных.Вставить("ИзменятьРазмерПропорционально", Объект.ИзменятьРазмерПропорционально);
	
	Для каждого СтрокаПредставленияНоменклатуры Из Объект.ПредставлениеНоменклатуры Цикл
		
		ОписаниеСтроки = Новый Структура("Использование, РеквизитНоменклатуры, РеквизитПредставление, ПараметрРасшифровки, Ширина, СлужебныйУправлениеВидимостью");
		ЗаполнитьЗначенияСвойств(ОписаниеСтроки, СтрокаПредставленияНоменклатуры);
		
		СтруктураДанных.ПредставлениеНоменклатуры.Добавить(ОписаниеСтроки);
		
	КонецЦикла;
	
	Для каждого СтрокаВидовЦен Из Объект.ВидыЦен Цикл
		
		СтруктураДанных.ВидыЦен.Добавить(СтрокаВидовЦен.ВидЦен);
		
	КонецЦикла;
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПредставлениеНоменклатуры()
	Перем ПараметрыКартинки;
	
	Если Объект.ПечатьПрайсЛиста = ПредопределенноеЗначение("Перечисление.ВариантыПечатиПрайсЛиста.Диафильм") Тогда
		
		ПараметрыКартинки = Новый Структура;
		ПараметрыКартинки.Вставить("КоличествоКолонок", 	Объект.КоличествоКолонок);
		ПараметрыКартинки.Вставить("КартинкаШирина", 		Объект.КартинкаШирина);
		ПараметрыКартинки.Вставить("КартинкаВысота", 		Объект.КартинкаВысота);
		
	КонецЕсли;
	
	СоставРеквизитов = ЦенообразованиеКлиент.ПредставлениеНоменклатурыСтрокой(Объект.ПредставлениеНоменклатуры, ПараметрыКартинки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбновленияНастроекСКД()
	
	КоличествоОтборов = НастройкиОтбораНоменклатуры.Настройки.Отбор.Элементы.Количество();
	КоличествоСтрокой = ?(КоличествоОтборов = 0, "", "(" + Строка(КоличествоОтборов) + ")");
	
	ТекстЗаголовкаГруппы = СокрЛП(СтрШаблон(НСтр("ru ='Фильтры %1'"), ?(КоличествоОтборов = 0, "", "(*)")));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОтборы", "Заголовок", ТекстЗаголовкаГруппы);
	
	ТекстЗаголовка = СокрЛП(СтрШаблон(НСтр("ru ='Еще фильтры %1'"), КоличествоСтрокой));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация2", "Заголовок", ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСоветПользователю(ЗаголовокФормы, ТекстСообщения, ОписаниеОповещения, ВидимостьБольшеНеПоказывать)
	
	ПараметрыСовета = Новый Структура;
	ПараметрыСовета.Вставить("Заголовок", ЗаголовокФормы);
	ПараметрыСовета.Вставить("ТекстСообщения", ТекстСообщения);
	ПараметрыСовета.Вставить("ВидимостьБольшеНеПоказывать", ВидимостьБольшеНеПоказывать);
	ПараметрыСовета.Вставить("ИмяПользовательскойНастройки", ОписаниеОповещения.ДополнительныеПараметры.ИмяПользовательскойНастройки);
	ПараметрыСовета.Вставить("ТекстЗаголовкаКнопкиОК", ОписаниеОповещения.ДополнительныеПараметры.ТекстЗаголовкаКнопкиОК);
	ПараметрыСовета.Вставить("ТекстЗаголовкаКнопкиОтмена", ОписаниеОповещения.ДополнительныеПараметры.ТекстЗаголовкаКнопкиОтмена);
	
	ОткрытьФорму("Обработка.ПрайсЛистыОрганизации.Форма.ФормаСообщения", ПараметрыСовета, ЭтаФорма, Истина, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьКонкурирующиеУсловия(ИмяЭлемента)
	
	Если ИмяЭлемента <> Элементы.МинимальнаяЦена.Имя Тогда
		
		Объект.МинимальнаяЦена = Ложь;
		
	КонецЕсли;
	
	Если ИмяЭлемента <> Элементы.МаксимальнаяЦена.Имя Тогда
		
		Объект.МаксимальнаяЦена = Ложь;
		
	КонецЕсли;
	
	Если ИмяЭлемента <> Элементы.УсловнаяЦена.Имя Тогда
		
		Объект.УсловнаяЦена = Ложь;
		СравнениеВыключилиУсловнаяЦена();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнениеВыключилиУсловнаяЦена()
	
	Объект.УсловнаяЦенаУсловие = ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.Меньше");
	Объект.УсловнаяЦенаЗначение = 0;
	Объект.УсловнаяЦенаЗначениеДо = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораЭлементовСравненияЦен()
	
	Элементы.ВидЦен1.СписокВыбора.Очистить();
	Элементы.ВидЦен2.СписокВыбора.Очистить();
	
	Для каждого СтрокаТаблицы Из Объект.ВидыЦен Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВидЦен)
			И СтрокаТаблицы.ВидЦен <> Объект.ВидЦен2 Тогда
			
			Элементы.ВидЦен1.СписокВыбора.Добавить(СтрокаТаблицы.ВидЦен);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВидЦен)
			И СтрокаТаблицы.ВидЦен <> Объект.ВидЦен1 Тогда
			
			Элементы.ВидЦен2.СписокВыбора.Добавить(СтрокаТаблицы.ВидЦен);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗаписиРегистра(Расшифровка)
	
	КлючЗаписи = ЗаписьОЦенеСуществует(Расшифровка, Объект.ПериодЦен);
	
	Если КлючЗаписи.ЗаписьСуществует Тогда
		
		КлючЗаписи.Удалить("ЗаписьСуществует");
		
		ПараметрыМассив = Новый Массив;
		ПараметрыМассив.Добавить(КлючЗаписи);
		
		КлючЗаписиРегистра = Новый("РегистрСведенийКлючЗаписи.ЦеныНоменклатуры", ПараметрыМассив);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Ключ", КлючЗаписиРегистра);
		
	Иначе
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", КлючЗаписи);
		
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.ЦеныНоменклатуры.ФормаЗаписи", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АктуальностьПрайсЛиста(Состояние, НеобходимоОбновитьДанные, НеобходимоОбновитьОформление, КраткоеПредставлениеОшибки = "")
	
	Если Состояние = "OK" Тогда
		
		ОтображениеСостояния = Элементы.ТабличныйДокумент.ОтображениеСостояния;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
		ОтображениеСостояния.Видимость = Ложь;
		
	ИначеЕсли Состояние = "SAVE" Тогда
		
		ОтображениеСостояния = Элементы.ТабличныйДокумент.ОтображениеСостояния;
		ОтображениеСостояния.Видимость = Истина;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
		ОтображениеСостояния.Картинка = БиблиотекаКартинок.ВниманиеВВидеТреугольника_32;
		ОтображениеСостояния.Текст = НСтр("ru = 'Данные прайс-листа слишком велики (вероятно, из-за использования картинок).
			|Документ был сохранен локально или присоединен к карточке прайс-листа.'");
		
	ИначеЕсли Состояние = "ERROR" Тогда
		
		ОтображениеСостояния = Элементы.ТабличныйДокумент.ОтображениеСостояния;
		ОтображениеСостояния.Видимость = Истина;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
		ОтображениеСостояния.Картинка = БиблиотекаКартинок.ВниманиеВВидеТреугольника_32;
		ОтображениеСостояния.Текст = СтрШаблон(НСтр("ru ='Ошибка формирования:
			|%1
			|Подробности см. в журнале регистрации.'"), КраткоеПредставлениеОшибки);
		
	ИначеЕсли Состояние = "OUTDATED"
		И КэшЗначений.ПрайсЛистЗаполнен = Истина
		И
			(НеобходимоОбновитьДанные = Истина
				ИЛИ НеобходимоОбновитьОформление = Истина)
		Тогда
		
		ОтображениеСостояния = Элементы.ТабличныйДокумент.ОтображениеСостояния;
		ОтображениеСостояния.Видимость = Истина;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
		ОтображениеСостояния.Картинка = БиблиотекаКартинок.ВниманиеВВидеТреугольника_32;
		ОтображениеСостояния.Текст = НСтр("ru = 'Возможно, изменились параметры отчета.
			|Рекомендуется повторно сформировать прайс-лист.'");
		
	Иначе
		
		// Оставляем как есть, т.к. непонятно что это может быть...
		
	КонецЕсли;
	
	КэшЗначений.НеобходимоОбновитьДанные = НеобходимоОбновитьДанные;
	КэшЗначений.НеобходимоОбновитьОформление = НеобходимоОбновитьОформление;
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьПакетнуюКоманду(ТекстКоманды)
	
	ЭтоПакетнаяКоманда = Ложь;
	
	Если ВРег(СтрокаПоиска) = ВРег("##reread")
		ИЛИ ВРег(СтрокаПоиска) = ВРег("##перечитать") Тогда
		
		ЭтотОбъект.Прочитать();
		ЭтоПакетнаяКоманда = Истина;
		
	КонецЕсли;
	
	Если ВРег(СтрокаПоиска) = ВРег("##createnew")
		ИЛИ ВРег(СтрокаПоиска) = ВРег("##СоздатьНовый") Тогда
		
		ЗаписатьЭлементСправочникаПрайсЛисты("Новый");
		ЭтоПакетнаяКоманда = Истина;
		
	КонецЕсли;
	
	Если ВРег(СтрокаПоиска) = ВРег("##copythis")
		ИЛИ ВРег(СтрокаПоиска) = ВРег("##копировать") Тогда
		
		ЗаписатьЭлементСправочникаПрайсЛисты("Скопировать");
		ЭтоПакетнаяКоманда = Истина;
		
	КонецЕсли;
	
	Если ВРег(СтрокаПоиска) = ВРег("##savethis")
		ИЛИ ВРег(СтрокаПоиска) = ВРег("##сохранить") Тогда
		
		ЗаписатьЭлементСправочникаПрайсЛисты("Сохранить");
		ЭтоПакетнаяКоманда = Истина;
		
	КонецЕсли;
	
	Если ВРег(СтрокаПоиска) = ВРег("##closeform")
		ИЛИ ВРег(СтрокаПоиска) = ВРег("##ЗакрытьФорму") Тогда
		
		Закрыть();
		ЭтоПакетнаяКоманда = Истина;
		
	КонецЕсли;
	
	Возврат ЭтоПакетнаяКоманда;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаписьОЦенеСуществует(Знач Расшифровка, ПериодЦен)
	
	КлючЗаписи = Новый Структура("Период, ВидЦен, Номенклатура, Характеристика");
	
	Если ТипЗнч(Расшифровка) <> Тип("Структура") Тогда
		
		Расшифровка = Новый Структура;
		
	КонецЕсли;
	
	Если НЕ Расшифровка.Свойство("Период", КлючЗаписи.Период) Тогда
		
		КлючЗаписи.Период = ?(ЗначениеЗаполнено(ПериодЦен), ПериодЦен, НачалоДня(ТекущаяДатаСеанса()));
		
	КонецЕсли;
	
	Расшифровка.Свойство("ВидЦен",				КлючЗаписи.ВидЦен);
	Расшифровка.Свойство("Номенклатура",		КлючЗаписи.Номенклатура);
	Расшифровка.Свойство("Характеристика",		КлючЗаписи.Характеристика);
	
	Если КлючЗаписи.Характеристика = Неопределено Тогда
		
		КлючЗаписи.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат ЦенообразованиеСервер.ЗаписьОЦенеСуществует(КлючЗаписи);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьОшибкуЖурналаРегистрации(ПодробноеОписаниеОшибки)
	
	ИмяСобытия = НСтр("ru = 'Прайс-лист'");
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеОписаниеОшибки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьСохраненныеПрайсЛисты()
	
	Возврат Справочники.ПрайсЛисты.КоличествоПрайсЛистовПользователя() <> 0;
	
КонецФункции

&НаСервере
Процедура ИзменитьОбъектФормыПоСсылке(НовыеДанныеЭлементаСправочника = Неопределено)
	
	Если НовыеДанныеЭлементаСправочника <> Неопределено
		И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОбновитьСуществующийПрайсЛист(Объект.Ссылка, НовыеДанныеЭлементаСправочника)
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РабочийПрайсЛистОрганизации) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НовыйОбъект = РабочийПрайсЛистОрганизации.ПолучитьОбъект();
	Если НовыйОбъект = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(НовыйОбъект, "Объект");
	
	УстановитьЗначенияОтбораНоменклатуры();
	
	ЭтотОбъект.Прочитать();
	
	Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиПользователей) Тогда
		
		РегистрыСведений.НастройкиПользователей.Установить(Объект.Ссылка, "РабочийПрайсЛистОрганизации");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТиповоеПредставлениеНоменклатуры()
	Перем ТаблицаПредставлений;
	
	Справочники.ПрайсЛисты.ДоступныеПоляНоменклатуры(ТаблицаПредставлений);
	Объект.ПредставлениеНоменклатуры.Загрузить(ТаблицаПредставлений);
	
КонецПроцедуры

#Область СохранениеПрайсЛистов

&НаКлиенте
Процедура НачатьСохранениеНастроекПрайсЛиста(Отказ, ЗавершениеРаботы)
	
	Если ЗавершениеРаботы
		ИЛИ КэшЗначений.ЗапретитьОбновлениеПрайсЛистаПриЗакрытии = Истина
		ИЛИ НЕ КэшЗначений.ЕстьПравоДобавленияНового Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОбновитьСуществующийПрайсЛист(Объект.Ссылка, ОбъектВСтруктуру());
		
	ИначеЕсли КэшЗначений.ВопросСозданияПервогоПрайсЛиста <> Ложь
		И НЕ КэшЗначений.ЕстьСохраненныеПрайсЛисты Тогда
		
		ЗаголовокФормы = НСтр("ru = 'Уточнение'");
		
		МассивСтрок = Новый Массив(3);
		МассивСтрок[0] = НСтр("ru ='У текущего пользователя нет еще сохраненных прайс-листов.'");
		МассивСтрок[1] = НСтр("ru ='Создать первый прайс-лист и сохранить в него текущие параметры?'");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяПользовательскойНастройки", "ВыводитьВопросСозданииПервогоПрайсЛистаОрганизации");
		ДополнительныеПараметры.Вставить("ТекстЗаголовкаКнопкиОК", НСтр("ru ='Создать и закрыть'"));
		ДополнительныеПараметры.Вставить("ТекстЗаголовкаКнопкиОтмена", НСтр("ru ='Закрыть'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОСохраненииНастроекПервогоПрайсЛиста", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьСоветПользователю(ЗаголовокФормы, СтрСоединить(МассивСтрок, " "), ОписаниеОповещения, Истина);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОСохраненииНастроекПервогоПрайсЛиста(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		КэшЗначений.ВопросСозданияПервогоПрайсЛиста = Ложь;
		ПерсональныеНастройкиВызовСервера.Установить(НЕ РезультатЗакрытия.БольшеНеПоказывать,
			ДополнительныеПараметры.ИмяПользовательскойНастройки);
		
		Если РезультатЗакрытия.НажатаКнопкаОК Тогда
			
			ЗаписатьЭлементСправочникаПрайсЛисты("Сохранить");
			ПерсональныеНастройкиВызовСервера.Установить(Объект.Ссылка, "РабочийПрайсЛистОрганизации");
			
			КэшЗначений.ЗапретитьОбновлениеПрайсЛистаПриЗакрытии = Истина;
			
		КонецЕсли;
		
	ИначеЕсли РезультатЗакрытия = Неопределено Тогда // Esc
		
		КэшЗначений.ВопросСозданияПервогоПрайсЛиста = Ложь;
		
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЭлементСправочникаПрайсЛисты(Действие)
	
	Если Действие = "Сохранить" Тогда
		
		// Используется когда нет текущей ссылки.
		// Т.е. когда мы не можем использовать ОбновитьСуществующийПрайсЛист(СсылкаОбновляемого, НовыеДанныеЭлементаСправочника)
		// из-за проблемы заполнения 1 параметра
		//
		Записать();
		
	ИначеЕсли Действие = "Новый" Тогда
		
		ТекстВопроса = НСтр("ru ='Создать новый прайс-лист (без настроек) и продолжить работу?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОСозданииНовогоПрайсЛиста", ЭтотОбъект, );
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Действие = "Скопировать" Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Основание", ОбъектВСтруктуру());
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		
		ПараметрыОткрытия.Основание.Автор = КэшЗначений.АвторизованныйПользователь;
		
		ОткрытьФорму("Справочник.ПрайсЛисты.Форма.ФормаЭлемента", ПараметрыОткрытия, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОСозданииНовогоПрайсЛиста(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Записать();
		
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.ПрайсЛисты.Форма.ФормаЭлемента", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСуществующийПрайсЛист(СсылкаОбновляемого, НовыеДанныеЭлементаСправочника)
	
	Если НЕ ЗначениеЗаполнено(СсылкаОбновляемого)
		ИЛИ СсылкаОбновляемого.Недействителен Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		РегистрыСведений.НастройкиПользователей.Установить(СсылкаОбновляемого, "РабочийПрайсЛистОрганизации");
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ПрайсЛисты");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаОбновляемого);
		Блокировка.Заблокировать();
		
		ПрайсЛистОбъект = СсылкаОбновляемого.ПолучитьОбъект();
		Если НЕ ПрайсЛистОбъект = Неопределено Тогда // открыли обработку, а потом удалили ПЛ
			
			ЗаблокироватьДанныеДляРедактирования(СсылкаОбновляемого);
			
			ПрайсЛистОбъект.Заполнить(НовыеДанныеЭлементаСправочника);
			ПрайсЛистОбъект.Записать();
			
			Модифицированность = Ложь;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФайлами

&НаКлиенте
Процедура СохранитьПечатныеФормы(ЭтоПрограммноеСохранениеБольшогоПрайсЛиста)
	
	КэшЗначений.ЭтоПрограммноеСохранениеБольшогоПрайсЛиста = ЭтоПрограммноеСохранениеБольшогоПрайсЛиста;
	
	Оповещение = Новый ОписаниеОповещения("ПриПодключенииРасширения", ЭтотОбъект);
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриПодключенииРасширения(РасширениеПодключено, ДополнительныеПараметры) Экспорт
	
	РасширениеДляРаботыСФайламиПодключено = РасширениеПодключено;
	
	ПараметрыСохранения = Новый Структура;  	
	ПараметрыСохранения.Вставить("РасширениеДляРаботыСФайламиПодключено", РасширениеПодключено);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОбъектыПечати = Новый СписокЗначений;
		ОбъектыПечати.Добавить(Объект.Ссылка);
		
		ПараметрыСохранения.Вставить("ОбъектыПечати", ОбъектыПечати);
		
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.СохранениеПечатнойФормы", ПараметрыСохранения, ЭтотОбъект);
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьПараметрыСохранениеПечатнойФормы(ВыбранноеЗначение)
	
	Если ВыбранноеЗначение <> Неопределено 
		И ВыбранноеЗначение <> КодВозвратаДиалога.Отмена Тогда
		
		ИмяПрайсЛиста = СтандартноеИмяСохраняемогоФайла();
		
		ФайлыВоВременномХранилище = ПоместитьТабличныеДокументыВоВременноеХранилище(ВыбранноеЗначение, ИмяПрайсЛиста);
		Если ВыбранноеЗначение.ВариантСохранения = "СохранитьВПапку" Тогда
			
			СохранитьПечатныеФормыВПапку(ФайлыВоВременномХранилище, ВыбранноеЗначение.ПапкаДляСохранения);
			
		ИначеЕсли ВыбранноеЗначение.ВариантСохранения = "Присоединить" Тогда
			
			ЗаписанныеОбъекты = ПрисоединитьПечатныеФормыКОбъекту(ФайлыВоВременномХранилище, ВыбранноеЗначение.ОбъектДляПрикрепления);
			Если ЗаписанныеОбъекты.Количество() > 0 Тогда
				
				ОповеститьОбИзменении(ТипЗнч(ЗаписанныеОбъекты[0]));
				
			КонецЕсли;
			
			Для Каждого ЗаписанныйОбъект Из ЗаписанныеОбъекты Цикл
				
				Оповестить("Запись_Файл", Новый Структура, ЗаписанныйОбъект);
				
				ТекстСообщения = НСтр("ru='Присоединен файл %1'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, ОбсужденияУНФКлиент.HTMLСсылка(ЗаписанныйОбъект));
				ОбсужденияУНФКлиент.ДобавитьСистемноеСообщение(ТекстСообщения, ВыбранноеЗначение.ОбъектДляПрикрепления);
			КонецЦикла;
			
			ПоказатьОповещениеПользователя(, , НСтр("ru = 'Сохранение завершено'"), БиблиотекаКартинок.Информация32);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПечатныеФормыВПапку(СписокФайловВоВременномХранилище, Знач Папка = "")
	
	#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
		Для Каждого ФайлДляЗаписи Из СписокФайловВоВременномХранилище Цикл
			ПолучитьФайл(ФайлДляЗаписи.АдресВоВременномХранилище, ФайлДляЗаписи.ИмяБезРасширения + "." + ФайлДляЗаписи.РасширениеБезТочки);
		КонецЦикла;
		Возврат;
	#КонецЕсли
	
	Папка = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Папка);
	Для Каждого ФайлДляЗаписи Из СписокФайловВоВременномХранилище Цикл
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ФайлДляЗаписи.АдресВоВременномХранилище);
		ДвоичныеДанные.Записать(УникальноеИмяФайла(Папка + ФайлДляЗаписи.ИмяБезРасширения + "." + ФайлДляЗаписи.РасширениеБезТочки));
	КонецЦикла;
	
	Состояние(НСтр("ru = 'Сохранение успешно завершено'"), , НСтр("ru = 'в папку:'") + " " + Папка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УникальноеИмяФайла(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	ИмяБезРасширения = Файл.ИмяБезРасширения;
	Расширение = Файл.Расширение;
	Папка = Файл.Путь;
	
	Счетчик = 1;
	Пока Файл.Существует() Цикл
		Счетчик = Счетчик + 1;
		Файл = Новый Файл(Папка + ИмяБезРасширения + " (" + Счетчик + ")" + Расширение);
	КонецЦикла;
	
	Возврат Файл.ПолноеИмя;
	
КонецФункции

&НаСервере
Функция ПоместитьТабличныеДокументыВоВременноеХранилище(НастройкиСохранения, ИмяПрайсЛиста)
	Перем ЗаписьZipФайла, ИмяАрхива;
	
	Результат = Новый Массив;
	
	// подготовка архива
	Если НастройкиСохранения.УпаковатьВАрхив Тогда
		
		ИмяАрхива = ПолучитьИмяВременногоФайла();
		ЗаписьZipФайла = Новый ЗаписьZipФайла(ИмяАрхива);
		
	КонецЕсли;
	
	// подготовка временной папки
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	
	ВыбранныеФорматыСохранения = НастройкиСохранения.ФорматыСохранения;
	ПереводитьИменаФайловВТранслит = НастройкиСохранения.ПереводитьИменаФайловВТранслит;
	ТаблицаФорматов = УправлениеПечатью.НастройкиФорматовСохраненияТабличногоДокумента();
	
	// сохранение печатных форм
	Если КэшЗначений.ЭтоПрограммноеСохранениеБольшогоПрайсЛиста Тогда
		
		РезультатВыполнения = ПолучитьИзВременногоХранилища(КэшЗначений.ПараметрыДлительнойОперации.ФоновоеЗаданиеРезультат.АдресРезультата);
		ПечатнаяФорма = РезультатВыполнения.ТабличныйДокумент;
		ПечатнаяФорма.АвтоМасштаб = Истина;
		
		// Отображение большого прайс-листа на клиенте занимает много времени.
		// Пользователь естественно не дожидается и закрывает клиент (вкладку браузера).
		// При этом сеанс, а следовательно и его сеансовые данные не удалятся.
		// Из-за этого получаем огромный массив данных сеанса, которые мешают платформе провести "самоочистку".
		// Это приводит к тому, что в разделе с сеансовыми данным заканчивается свободное место и база падает.
		УдалитьИзВременногоХранилища(КэшЗначений.ПараметрыДлительнойОперации.ФоновоеЗаданиеРезультат.АдресРезультата);
		
		КэшЗначений.ПараметрыДлительнойОперации.ФоновоеЗаданиеРезультат = Неопределено;
		
	Иначе
		
		ПечатнаяФорма = ТабличныйДокумент;
		
	КонецЕсли;
	
	Если ПечатнаяФорма.Защита Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ПечатнаяФорма.ВысотаТаблицы = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ПереводитьИменаФайловВТранслит Тогда
		
		ИмяПрайсЛиста = СтроковыеФункции.СтрокаЛатиницей(ИмяПрайсЛиста);
		
	КонецЕсли;
	
	Для Каждого ТипФайла Из ВыбранныеФорматыСохранения Цикл
		
		Если ТипЗнч(ТипФайла) = Тип("Строка") Тогда
			
			ТипФайла = ТипФайлаТабличногоДокумента[ТипФайла];
			
		КонецЕсли;
		
		НастройкиФормата = ТаблицаФорматов.НайтиСтроки(Новый Структура("ТипФайлаТабличногоДокумента", ТипФайла))[0];
		
		ИмяФайла = ИмяПрайсЛиста + "." + НастройкиФормата.Расширение;
		ПолноеИмяФайла = УникальноеИмяФайла(ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ИмяФайла);
		ПечатнаяФорма.Записать(ПолноеИмяФайла, ТипФайла);
		
		Если ТипФайла = ТипФайлаТабличногоДокумента.HTML Тогда
			ВставитьКартинкиВHTML(ПолноеИмяФайла);
		КонецЕсли;
		
		Если ЗаписьZipФайла <> Неопределено Тогда
			
			ЗаписьZipФайла.Добавить(ПолноеИмяФайла);
			
		Иначе
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
			ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтотОбъект.УникальныйИдентификатор);
			
			ОписаниеФайла = Новый Структура;
			ОписаниеФайла.Вставить("Представление", 			ИмяПрайсЛиста);
			ОписаниеФайла.Вставить("ИмяБезРасширения",			ИмяПрайсЛиста);
			ОписаниеФайла.Вставить("РасширениеБезТочки",		НастройкиФормата.Расширение);
			ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);
			
			Если ТипФайла = ТипФайлаТабличногоДокумента.ANSITXT Тогда
				ОписаниеФайла.Вставить("Кодировка", "windows-1251");
			КонецЕсли;
			Результат.Добавить(ОписаниеФайла);
			
		КонецЕсли;
	КонецЦикла;
	
	// если архив подготовлен, записываем и помещаем его во временное хранилище
	Если ЗаписьZipФайла <> Неопределено Тогда
		
		ЗаписьZipФайла.Записать();
		
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяАрхива);
		ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтотОбъект.УникальныйИдентификатор);
		
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("Представление", 			ИмяПрайсЛиста);
		ОписаниеФайла.Вставить("ИмяБезРасширения",			ИмяПрайсЛиста);
		ОписаниеФайла.Вставить("РасширениеБезТочки",		"zip");
		ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);
		
		Результат.Добавить(ОписаниеФайла);
		
		УдалитьФайлы(ИмяАрхива);
		
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременнойПапки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПрисоединитьПечатныеФормыКОбъекту(ФайлыВоВременномХранилище, ОбъектДляПрисоединения)
	
	Результат = Новый Массив;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		
		Для Каждого Файл Из ФайлыВоВременномХранилище Цикл
			
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("Автор", 						Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", 				ОбъектДляПрисоединения);
			ПараметрыФайла.Вставить("ИмяБезРасширения", 			Файл.ИмяБезРасширения);
			ПараметрыФайла.Вставить("РасширениеБезТочки", 			Файл.РасширениеБезТочки);
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное",	ТекущаяДата());
			
			Результат.Добавить(РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, Файл.АдресВоВременномХранилище));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВставитьКартинкиВHTML(ИмяФайлаHTML)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Прочитать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	ТекстHTML = ТекстовыйДокумент.ПолучитьТекст();
	
	ФайлHTML = Новый Файл(ИмяФайлаHTML);
	
	ИмяПапкиКартинок = ФайлHTML.ИмяБезРасширения + "_files";
	ПутьКПапкеКартинок = СтрЗаменить(ФайлHTML.ПолноеИмя, ФайлHTML.Имя, ИмяПапкиКартинок);
	
	// ожидается, что в папке будут только картинки
	ФайлыКартинок = НайтиФайлы(ПутьКПапкеКартинок, "*");
	
	Для Каждого ФайлКартинки Из ФайлыКартинок Цикл
		КартинкаТекстом = Base64Строка(Новый ДвоичныеДанные(ФайлКартинки.ПолноеИмя));
		КартинкаТекстом = "data:image/" + Сред(ФайлКартинки.Расширение,2) + ";base64," + Символы.ПС + КартинкаТекстом;
		
		ТекстHTML = СтрЗаменить(ТекстHTML, ИмяПапкиКартинок + "\" + ФайлКартинки.Имя, КартинкаТекстом);
	КонецЦикла;
		
	ТекстовыйДокумент.УстановитьТекст(ТекстHTML);
	ТекстовыйДокумент.Записать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	
КонецПроцедуры

#КонецОбласти

#Область ДлительнаяОперация

&НаКлиенте
Процедура СформироватьПрайсЛистНаКлиенте()
	
	ПараметрыПроцедуры = ОбъектВСтруктуру();
	
	СформироватьПрайсЛистНаСервере(ПараметрыПроцедуры);
	ПослеНачалаФормированияПрайсЛиста();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеНачалаФормированияПрайсЛиста()
	
	Если КэшЗначений.ПараметрыДлительнойОперации.ФоновоеЗаданиеРезультат = Неопределено Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	Если КэшЗначений.ПараметрыДлительнойОперации.ФоновоеЗаданиеРезультат.Статус <> "Выполняется" Тогда 
		
		ОбработатьРезультатФормированияПрайсЛиста(КэшЗначений.ПараметрыДлительнойОперации.ФоновоеЗаданиеРезультат, Неопределено);
		Возврат;
		
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатФормированияПрайсЛиста", ЭтотОбъект, Неопределено);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания	= Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(КэшЗначений.ПараметрыДлительнойОперации.ФоновоеЗаданиеРезультат, Обработчик, ПараметрыОжидания);
	
	АктуальностьПрайсЛиста("OUTDATED", Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатФормированияПрайсЛиста(ФоновоеЗаданиеРезультат, ДополнительныеПараметры) Экспорт
	
	Если ФоновоеЗаданиеРезультат = Неопределено Тогда // Нажали Отмена в длительной операции
		
		Возврат;
		
	КонецЕсли;
	
	Если ФоновоеЗаданиеРезультат.Статус = "Ошибка" Тогда
		
		АктуальностьПрайсЛиста("ERROR", Ложь, Ложь, ФоновоеЗаданиеРезультат.КраткоеПредставлениеОшибки);
		
		ДобавитьОшибкуЖурналаРегистрации(ФоновоеЗаданиеРезультат.ПодробноеПредставлениеОшибки);
		ВызватьИсключение ФоновоеЗаданиеРезультат.КраткоеПредставлениеОшибки;
		
	КонецЕсли;
	
	РезультатДлительнойОперацииВТабличныйДокументФормы(ФоновоеЗаданиеРезультат);
	
	КэшЗначений.ПараметрыДлительнойОперации.ФоновоеЗаданиеИдентификатор = Неопределено;
	
	Если КэшЗначений.ПараметрыДлительнойОперации.СохранитьВФайл Тогда
		
		АктуальностьПрайсЛиста("SAVE", Ложь, Ложь);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияПредупрежденияОРазмереПрайсЛиста", ЭтотОбъект);
		ОткрытьФорму("Обработка.ПрайсЛистыОрганизации.Форма.ФормаПредупреждения", Неопределено, ЭтаФорма, , , , ОписаниеОповещения);
		
		// КэшЗначений.ПараметрыДлительнойОперации.ФоновоеЗаданиеРезультат - обнулим после сохранения...
		
	Иначе
		
		АктуальностьПрайсЛиста("OK", Ложь, Ложь);
		
		ТекстОповещения = НСтр("ru ='Прайс-лист сформирован.'");
		ПоказатьОповещениеПользователя(ТекстОповещения, , Заголовок);
		
		КэшЗначений.ПараметрыДлительнойОперации.ФоновоеЗаданиеРезультат = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияПредупрежденияОРазмереПрайсЛиста(Результат, ДополнительныеПараметры) Экспорт
	
	СохранитьПечатныеФормы(Истина);
	
КонецПроцедуры

&НаСервере
Процедура РезультатДлительнойОперацииВТабличныйДокументФормы(ФоновоеЗаданиеРезультат)
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеРезультат.АдресРезультата);
	
	РезультатВыполнения.Свойство("ПоследняяКолонкаЗаголовка",	КэшЗначений.ПоследняяКолонкаЗаголовка);
	РезультатВыполнения.Свойство("ПоследняяКолонкаПрайсЛиста",	КэшЗначений.ПоследняяКолонкаПрайсЛиста);
	РезультатВыполнения.Свойство("ИменаКолонок", 				КэшЗначений.ИменаКолонок);
	
	РазмерКартинокMb = Окр(РезультатВыполнения.РазмерКартинокБайт/1048576, 0);
	Если РазмерКартинокMb >= КэшЗначений.ПредельноДопустимыРазмерКартинокМб Тогда
		
		КэшЗначений.ПараметрыДлительнойОперации.СохранитьВФайл = Истина;
		
	Иначе
		
		ТабличныйДокумент = РезультатВыполнения.ТабличныйДокумент;
		КэшЗначений.ПрайсЛистЗаполнен = Истина;
		
		// Отображение большого прайс-листа на клиенте занимает много времени.
		// Пользователь естественно не дожидается и закрывает клиент (вкладку браузера).
		// При этом сеанс, а следовательно и его сеансовые данные не удалятся.
		// Из-за этого получаем огромный массив данных сеанса, которые мешают платформе провести "самоочистку".
		// Это приводит к тому, что в разделе с сеансовыми данным заканчивается свободное место и база падает.
		УдалитьИзВременногоХранилища(ФоновоеЗаданиеРезультат.АдресРезультата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПрайсЛистНаСервере(ПараметрыПроцедуры)
	
	Если ЗначениеЗаполнено(КэшЗначений.ПараметрыДлительнойОперации.ФоновоеЗаданиеИдентификатор) Тогда
		
		ДлительныеОперации.ОтменитьВыполнениеЗадания(КэшЗначений.ПараметрыДлительнойОперации.ФоновоеЗаданиеИдентификатор);
		КэшЗначений.ПараметрыДлительнойОперации.ФоновоеЗаданиеИдентификатор = Неопределено;
		
	КонецЕсли;
	
	ПараметрыПроцедуры.Вставить("Ошибки", Неопределено);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Прайс-лист организации, формирование'");
	ПараметрыВыполнения.ЗапуститьВФоне				= Истина;
	
	ИмяМетода = "Обработки.ПрайсЛистыОрганизации.СформироватьПрайсЛистОрганизации";
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыПроцедуры, ПараметрыВыполнения);
	
	КэшЗначений.ПараметрыДлительнойОперации.ФоновоеЗаданиеРезультат = РезультатФоновогоЗадания;
	КэшЗначений.ПараметрыДлительнойОперации.ФоновоеЗаданиеИдентификатор = РезультатФоновогоЗадания.ИдентификаторЗадания;
	
КонецПроцедуры

#КонецОбласти

#Область СКД

&НаСервере
Процедура ИнициализироватьНастройкиСКД()
	
	СсылкаВоВременномХранилище = ПрайсЛистыСлужебный.ИнициализироватьНастройкиОтбораНоменклатуры(УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СсылкаВоВременномХранилище);
	НастройкиОтбораНоменклатуры.Инициализировать(ИсточникНастроек);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияОтбораНоменклатуры()
	
	НастройкиОтбораНоменклатуры.Настройки.Отбор.Элементы.Очистить();
	
	ПрайсЛистыСлужебный.СКДОтборНоменклатурыИзТабличнойЧасти(НастройкиОтбораНоменклатуры, Объект.ОтборНоменклатуры);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТиповыеНастройкиОтбораНоменклатуры()
	
	ЭлементОтбора = НастройкиОтбораНоменклатуры.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Номенклатура.Недействителен");
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	
	ЭлементОтбора = НастройкиОтбораНоменклатуры.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Номенклатура.ИсключитьИзПрайсЛистов");
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеТабличногоДокумента

&НаКлиенте
Функция ПроверитьУсловиеФильтраНаКлиенте(Знач ПроверяемоеЗначение)
	
	Если Объект.УсловнаяЦенаУсловие = ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.Равно") Тогда
		
		Возврат ПроверяемоеЗначение = Объект.УсловнаяЦенаЗначение;
		
	ИначеЕсли Объект.УсловнаяЦенаУсловие = ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.НеРавно") Тогда
		
		Возврат ПроверяемоеЗначение <> Объект.УсловнаяЦенаЗначение;
		
	ИначеЕсли Объект.УсловнаяЦенаУсловие = ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.Больше") Тогда
		
		Возврат ПроверяемоеЗначение > Объект.УсловнаяЦенаЗначение;
		
	ИначеЕсли Объект.УсловнаяЦенаУсловие = ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.БольшеИлиРавно") Тогда
		
		Возврат ПроверяемоеЗначение >= Объект.УсловнаяЦенаЗначение;
		
	ИначеЕсли Объект.УсловнаяЦенаУсловие = ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.Меньше") Тогда
		
		Возврат ПроверяемоеЗначение < Объект.УсловнаяЦенаЗначение;
		
	ИначеЕсли Объект.УсловнаяЦенаУсловие = ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.МеньшеИлиРавно") Тогда
		
		Возврат ПроверяемоеЗначение <= Объект.УсловнаяЦенаЗначение;
		
	ИначеЕсли Объект.УсловнаяЦенаУсловие = ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.ВИнтервале") Тогда
		
		Возврат ПроверяемоеЗначение > Объект.УсловнаяЦенаЗначение И ПроверяемоеЗначение < Объект.УсловнаяЦенаЗначениеДо;
		
	ИначеЕсли Объект.УсловнаяЦенаУсловие = ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.ВИнтервалеВключая") Тогда
		
		Возврат ПроверяемоеЗначение >= Объект.УсловнаяЦенаЗначение И ПроверяемоеЗначение <= Объект.УсловнаяЦенаЗначениеДо;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОформлениеСтрокиТабличногоДокумента(МассивВыделяемыхОбластей)
	
	Если МассивВыделяемыхОбластей.Количество() < 1 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.МаксимальнаяЦена = Истина Тогда
		
		НовыйЦветФона = Новый Цвет(250, 200, 200);
		
	ИначеЕсли Объект.МинимальнаяЦена = Истина Тогда
		
		НовыйЦветФона = Новый Цвет(200, 200, 250);
		
	КонецЕсли;
	
	Для каждого ИмяОбласти Из МассивВыделяемыхОбластей Цикл
		
		ТабличныйДокумент.Область(ИмяОбласти).ЦветФона = НовыйЦветФона;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьЦенуПоУсловиюВПрайсЛистеДвеКолонки(ОбластьЯчейкиДокумента)
	Перем ТекущаяЦена;
	
	Если ОбластьЯчейкиДокумента = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураРасшифровки = ОбластьЯчейкиДокумента.Расшифровка;
	Если НЕ Объект.УсловнаяЦена 
		ИЛИ ТипЗнч(СтруктураРасшифровки) <> Тип("Структура") Тогда
		
		ОбластьЯчейкиДокумента.ЦветФона = Новый Цвет(255, 255, 255);
		
	Иначе
		
		СтруктураРасшифровки.Свойство("Цена", ТекущаяЦена);
		Если ТекущаяЦена = Неопределено Тогда
			
			ТекущаяЦена = 0;
			
		КонецЕсли;
		
		Если ТекущаяЦена = 0
			ИЛИ ПроверитьУсловиеФильтраНаКлиенте(ТекущаяЦена) <> Истина Тогда
			
			ОбластьЯчейкиДокумента.ЦветФона = Новый Цвет(255, 255, 255);
			
		Иначе
			
			ОбластьЯчейкиДокумента.ЦветФона = Новый Цвет(250, 250, 0);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеПрайсЛистаПолотно()
	
	МассивВыделяемыхОбластей = Новый Массив;
	
	// R3C2 - 3 строка, 2 колонка
	
	НомерПервойСтроки = ?(КэшЗначений.ОформлениеГраницаПоследнейПорции = 0, КэшЗначений.РазмерШапкиТабличногоДокумента, КэшЗначений.ОформлениеГраницаПоследнейПорции);
	
	Шаг = Мин(КэшЗначений.ОформлениеПредельноеЗначениеПорции, ТабличныйДокумент.ВысотаТаблицы - КэшЗначений.ОформлениеГраницаПоследнейПорции);
	КэшЗначений.ОформлениеГраницаПоследнейПорции = КэшЗначений.ОформлениеГраницаПоследнейПорции + Шаг;
	
	Для НомерСтроки = НомерПервойСтроки По КэшЗначений.ОформлениеГраницаПоследнейПорции Цикл
		
		МассивВыделяемыхОбластей.Очистить();
		
		МаксимальнаяЦена = Неопределено;
		МинимальнаяЦена = Неопределено;
		
		НомерКолонки = КэшЗначений.ПоследняяКолонкаЗаголовка;
		Для каждого ОписаниеКолонки Из КэшЗначений.ИменаКолонок Цикл
			
			НомерКолонки = НомерКолонки + 2;
			ИмяОбласти = СтрШаблон("R%1C%2:R%1C%3", Формат(НомерСтроки, "ЧГ="), Формат(НомерКолонки - 1, "ЧГ="), Формат(НомерКолонки, "ЧГ="));
			ТекущаяЦена		= 0;
			
			ТекущаяОбласть = ТабличныйДокумент.Область(ИмяОбласти);
			Если ТипЗнч(ТекущаяОбласть.Расшифровка) = Тип("Структура") Тогда
				
				ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 255);
				ТекущаяОбласть.Расшифровка.Свойство("Цена", ТекущаяЦена);
				
				Если ТекущаяЦена = Неопределено Тогда
					
					ТекущаяЦена = 0;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекущаяЦена = 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если Объект.МаксимальнаяЦена = Истина Тогда
				
				Если МаксимальнаяЦена = Неопределено Тогда
					
					МаксимальнаяЦена = ТекущаяЦена;
					МассивВыделяемыхОбластей.Добавить(ИмяОбласти);
					
				ИначеЕсли ТекущаяЦена > МаксимальнаяЦена Тогда
					
					МаксимальнаяЦена = ТекущаяЦена;
					
					МассивВыделяемыхОбластей.Очистить();
					МассивВыделяемыхОбластей.Добавить(ИмяОбласти);
					
				ИначеЕсли ТекущаяЦена = МаксимальнаяЦена Тогда
					
					МассивВыделяемыхОбластей.Добавить(ИмяОбласти);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Объект.МинимальнаяЦена = Истина Тогда
				
				Если МинимальнаяЦена = Неопределено Тогда
					
					МинимальнаяЦена = ТекущаяЦена;
					МассивВыделяемыхОбластей.Добавить(ИмяОбласти);
					
				ИначеЕсли ТекущаяЦена < МинимальнаяЦена Тогда
					
					МинимальнаяЦена = ТекущаяЦена;
					
					МассивВыделяемыхОбластей.Очистить();
					МассивВыделяемыхОбластей.Добавить(ИмяОбласти);
					
				ИначеЕсли ТекущаяЦена = МинимальнаяЦена Тогда
					
					МассивВыделяемыхОбластей.Добавить(ИмяОбласти);
					
				КонецЕсли;
				
			КонецЕсли;
		
			Если Объект.УсловнаяЦена = Истина Тогда
				
				РезультатПроверки = ПроверитьУсловиеФильтраНаКлиенте(ТекущаяЦена);
				Если РезультатПроверки = Истина Тогда
					
					ТекущаяОбласть.ЦветФона = Новый Цвет(250, 250, 0);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОформлениеСтрокиТабличногоДокумента(МассивВыделяемыхОбластей);
		
	КонецЦикла;
	
	Если КэшЗначений.ОформлениеГраницаПоследнейПорции >= ТабличныйДокумент.ВысотаТаблицы Тогда
		
		КэшЗначений.ОформлениеГраницаПоследнейПорции = 0;
		
	Иначе
		
		ПодключитьОбработчикОжидания("ОформлениеПрайсЛистаПолотно", 0.5, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеПрайсЛистаДвеКолонки()
	
	МассивВыделяемыхОбластей = Новый Массив;
	
	// R3C2 - 3 строка, 2 колонка
	
	НомерПервойСтроки = ?(КэшЗначений.ОформлениеГраницаПоследнейПорции = 0, КэшЗначений.РазмерШапкиТабличногоДокумента, КэшЗначений.ОформлениеГраницаПоследнейПорции);
	
	Шаг = Мин(КэшЗначений.ОформлениеПредельноеЗначениеПорции, ТабличныйДокумент.ВысотаТаблицы - КэшЗначений.ОформлениеГраницаПоследнейПорции);
	КэшЗначений.ОформлениеГраницаПоследнейПорции = КэшЗначений.ОформлениеГраницаПоследнейПорции + Шаг;
	
	ЦенаПерваяКолонкаНомер = 0;
	ЦенаВтораяКолонкаНомер = 0;
	
	Для НомерСтроки = НомерПервойСтроки По КэшЗначений.ОформлениеГраницаПоследнейПорции Цикл
		
		МассивВыделяемыхОбластей.Очистить();
		
		ОбластьЦенаПерваяКолонка = Неопределено;
		ОбластьЦенаВтораяКолонка = Неопределено;
		
		Если ЦенаПерваяКолонкаНомер = 0
			ИЛИ ЦенаВтораяКолонкаНомер = 0 Тогда
			
			Для НомерКолонки = 2 По 20 Цикл
				
				ОбластьЦена = ТабличныйДокумент.Область(СтрШаблон("R%1C%2", Формат(НомерСтроки, "ЧГ="), НомерКолонки));
				Если ТипЗнч(ОбластьЦена.Расшифровка) <> Тип("Структура") Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если ЦенаПерваяКолонкаНомер = 0 Тогда
					
					ЦенаПерваяКолонкаНомер = НомерКолонки;
					ОбластьЦенаПерваяКолонка = ОбластьЦена;
					
				ИначеЕсли ЦенаВтораяКолонкаНомер = 0 Тогда
					
					ЦенаВтораяКолонкаНомер = НомерКолонки;
					ОбластьЦенаВтораяКолонка = ОбластьЦена;
					
				Иначе
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ОбластьЦенаПерваяКолонка = ТабличныйДокумент.Область(СтрШаблон("R%1C%2", Формат(НомерСтроки, "ЧГ="), ЦенаПерваяКолонкаНомер));
			ОбластьЦенаВтораяКолонка = ТабличныйДокумент.Область(СтрШаблон("R%1C%2", Формат(НомерСтроки, "ЧГ="), ЦенаВтораяКолонкаНомер));
			
		КонецЕсли;
		
		ВыделитьЦенуПоУсловиюВПрайсЛистеДвеКолонки(ОбластьЦенаПерваяКолонка);
		ВыделитьЦенуПоУсловиюВПрайсЛистеДвеКолонки(ОбластьЦенаВтораяКолонка);
		
	КонецЦикла;
	
	Если КэшЗначений.ОформлениеГраницаПоследнейПорции >= ТабличныйДокумент.ВысотаТаблицы Тогда
		
		КэшЗначений.ОформлениеГраницаПоследнейПорции = 0;
		
	Иначе
		
		ПодключитьОбработчикОжидания("ОформлениеПрайсЛистаДвеКолонки", 0.5, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеПрайсЛиста()
	
	Если Объект.ПечатьПрайсЛиста = ПредопределенноеЗначение("Перечисление.ВариантыПечатиПрайсЛиста.Полотно") Тогда
		
		ПодключитьОбработчикОжидания("ОформлениеПрайсЛистаПолотно", 0.5, Истина);
		
	ИначеЕсли Объект.ПечатьПрайсЛиста = ПредопределенноеЗначение("Перечисление.ВариантыПечатиПрайсЛиста.ДвеКолонки") Тогда
		
		ПодключитьОбработчикОжидания("ОформлениеПрайсЛистаДвеКолонки", 0.5, Истина);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтернетПоддержкаПользователей_Новости

//ИнтернетПоддержкаПользователей.Новости
// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, "ПриОткрытии");
	
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.Новости

#КонецОбласти

#КонецОбласти

