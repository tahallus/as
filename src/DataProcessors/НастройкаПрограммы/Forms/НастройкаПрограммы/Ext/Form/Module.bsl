// Варианты создания настройки.
// См. методы в области "СлужебныеПроцедурыИФункции.ПереопределяемаяЧасть".
//
// Вариант 1. Универсальный. Для размещения настройки с простой логикой, когда настройка хранится в константе.
//   1. Создать реквизит на форме с именем константы.
//   2. Создать соответствующий элемент формы и вызвать обработчик изменения ПриИзмененииЭлементаУНФ().
//   2. Заполнить соответствие реквизита с константой в ПриОпределенииКонстантНаФорме().
//
// Вариант 2. Альтернативный. Для более сложных сценариев, когда значение настройки определяется алгоритмом.
//   1. Разместить реквизит на форме.
//   2. Создать соответствующий элемент формы и вызвать обработчик изменения ПриИзмененииЭлементаУНФ().
//   3. Прописать получение значения настройки в ПриПолученииЗначенийНастроек().
//   4. Прописать установку значения настройки в ПриСохраненииЗначенияНастройки().
//
// Универсальные процедуры выполняют общую для разных настроек логику:
//   - очищаются сообщения на клиенте,
//   - показываются сообщения об ошибке,
//   - отправляются глобальные оповещения,
//   - запускается перечитывание значений и установка доступности.
//
// Вариант 3. Сложный.
//   Без использования ПриИзмененииЭлементаУНФ().
//   Если предыдущие варианты не подходят, можно сделать отдельную реализацию, как серверную, так и клиентскую.

#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РежимРаботы = Новый ФиксированнаяСтруктура(УправлениеНебольшойФирмойПовтИсп.РежимРаботыПрограммы());
	
	Если ЗначениеЗаполнено(Параметры.СтрокаПоиска) Тогда
		ВведеннаяСтрокаПоиска = Параметры.СтрокаПоиска;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	ЗаполнитьСписокРазделов();
	
	ПрочитатьЗначенияВсехНастроек();
	ПриУстановкеДоступностиНастроек();
	ПриУстановкеВидимостиНастроекПриСозданииНаСервере();
	НастроитьДоступностьНастроекДляОграниченныхПрав();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		ЗаполнитьТаблицуПоиска();
	КонецЕсли;
	
	Если Не ПустаяСтрока(ВведеннаяСтрокаПоиска) Тогда
		ЗаполнитьТаблицуПоиска();
		ВыполнитьПоискСервер();
	Иначе
		УстановитьВидимостьРазделовРекурсивно();
	КонецЕсли;
	
	НастроитьВидимостьФормыМобильныйКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбсужденияПодключены" Тогда
		РегистрацияВзаимодействия = Параметр;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_НаборКонстант"
		Или ИмяСобытия = "ОбсужденияПодключены" Тогда
		ПрочитатьЗначенияВсехНастроек();
		ПриУстановкеДоступностиНастроек();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВведеннаяСтрокаПоискаПриИзменении(Элемент)
	
	ВосстановитьИсходнуюВидимостьНастроек();
	ВыполнитьПоискСервер();
	ВыбратьПервыйОтображаемыйРазделЕслиНеобходимо();
	
КонецПроцедуры

&НаКлиенте
Процедура ВведеннаяСтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	ВосстановитьИсходнуюВидимостьНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРазделовПриАктивизацииСтроки(Элемент)
	
	Если Элементы.СписокРазделов.ТекущаяСтрока = Неопределено
		Или Элементы.СписокРазделов.ТекущиеДанные.Видимость = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	СоответствующаяРазделуСтраница = Элементы.Найти(Элементы.СписокРазделов.ТекущиеДанные.Имя);
	
	Если СоответствующаяРазделуСтраница = Неопределено Тогда
		Элементы.СтраницыНастроек.ТекущаяСтраница = Элементы.СтраницаНеНайдено;
	Иначе
		Элементы.СтраницыНастроек.ТекущаяСтраница = СоответствующаяРазделуСтраница;
	КонецЕсли;
	
#Если МобильныйКлиент Тогда
	НастроитьВидимостьДереваНастроекМобильныйКлиент(Элементы, Ложь);
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоПодборНомеровГТДПриИзменении(Элемент)
	
	АвтоПодборНомеровГТДПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНумерацииДоговоровОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "Нумерация" Тогда
		ОткрытьФорму("Справочник.НастройкиНумерацииДоговоровКонтрагентов.ФормаСписка");
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ШаблоныНаименований" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("ВидНаименования", ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.ДоговорКонтрагента")));
		ОткрытьФорму("Справочник.ШаблоныНаименований.ФормаСписка", ПараметрыФормы, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВзаимодействияПриИзменении(Элемент)
	Если РегистрацияВзаимодействия Тогда
		ПоказатьПодключениеОбсуждений();
	Иначе
		ПоказатьОтключениеОбсуждений();
	КонецЕсли;
	РегистрацияВзаимодействия = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
КонецПроцедуры

&НаКлиенте
Процедура РассылкаЭлектронныхЧековРасписаниеНажатие(Элемент)
	НачатьИзменениеРасписанияРегламентногоЗадания("РассылкаЭлектронныхЧеков", Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОчередьЭлектронныхЧековНажатие(Элемент)
	ОткрытьФорму("Справочник.ОчередьЭлектронныхЧековКОтправке.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ПереводыВПутиНажатие(Элемент)
	ОткрытьФорму("РегистрСведений.ПрименениеПереводовВПути.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОбязательностиЗаполненияИсточникПривлеченияНажатие(Элемент)
	ОткрытьФорму("Справочник.ИсточникиПривлеченияПокупателей.Форма.ФормаВыбораОбязательногоЗаполнения");
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСквознойКонтрольДублейНоменклатурыНажатие(Элемент)
	ОткрытьФорму("Обработка.НастройкаПрограммы.Форма.НастройкаКонтроляДублейНоменклатуры");
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСквознойКонтрольДублейНажатие(Элемент)
	ОткрытьФорму("Обработка.НастройкаПрограммы.Форма.НастройкаСквозногоКонтроляДублей");
КонецПроцедуры

&НаКлиенте
Процедура ФункциональнаяОпцияПлатежныйКалендарьПриИзменении(Элемент)
	
	ПриИзмененииЭлементаУНФ(Элемент);
	
	Если НЕ ФункциональнаяОпцияПлатежныйКалендарь И ФункциональнаяОпцияИспользоватьРезервированиеДенежныхСредств Тогда
		ФункциональнаяОпцияИспользоватьРезервированиеДенежныхСредств = Ложь;
		ПриИзмененииЭлементаУНФ(Элементы.ФункциональнаяОпцияИспользоватьРезервированиеДенежныхСредств);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтеграцияСМессенджерамиНажатие(Элемент)
	
	ОткрытьФорму("Обработка.ПодключениеОбсуждений.Форма.НастройкиСообщенийИзДругихПрограмм",,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеРеквизитовВзаиморасчетовКонтрагентовПоУмолчаниюНажатие(Элемент)
	
	ОткрытьФорму("Обработка.НастройкаПрограммы.Форма.ЗаполнениеРеквизитовВзаиморасчетовКонтрагентов");
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяПроОтчетностьНажатие(Элемент)
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://v8.1c.ru/small.biz/otchetnost-i-nalogi/");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПередачиТоваровМеждуОрганизациямиНажатие(Элемент)
	ОткрытьФорму("РегистрСведений.НастройкаПередачиТоваровМеждуОрганизациями.Форма.ФормаСписка");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СнятьОтбор(Команда)
	
	НастроитьВидимостьДереваНастроекМобильныйКлиент(Элементы, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиРегламентныхЗаданий

&НаСервереБезКонтекста
Функция ПолучитьПредопределенноеРегламентноеЗадание(ИмяПредопределенного)
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Неопределено;
	
	МетаданныеПредопределенного = Метаданные.РегламентныеЗадания.Найти(ИмяПредопределенного);
	Если МетаданныеПредопределенного <> Неопределено Тогда
		Результат = РегламентныеЗадания.НайтиПредопределенное(МетаданныеПредопределенного);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРасписаниеПредопределенного(ИмяПредопределенного)
	
	Результат = Неопределено;
	
	РегламентноеЗадание = ПолучитьПредопределенноеРегламентноеЗадание(ИмяПредопределенного);
	Если РегламентноеЗадание <> Неопределено Тогда
		Результат = РегламентноеЗадание.Расписание;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьРасписаниеПредопределенного(ИмяПредопределенного, Расписание)
	
	РегламентноеЗадание = ПолучитьПредопределенноеРегламентноеЗадание(ИмяПредопределенного);
	Если РегламентноеЗадание <> Неопределено Тогда
		РегламентноеЗадание.Расписание = Расписание;
		РегламентноеЗадание.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьИзменениеРасписанияРегламентногоЗадания(ИмяПредопределенного, ИмяЭлемента = Неопределено)
	
	РасписаниеРегламентногоЗадания = ПолучитьРасписаниеПредопределенного(ИмяПредопределенного);
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ИмяПредопределенного", ИмяПредопределенного);
	ПараметрыВыполнения.Вставить("ИмяЭлемента", ИмяЭлемента);
	
	Обработчик = Новый ОписаниеОповещения("ПослеИзмененияРасписания", ЭтотОбъект, ПараметрыВыполнения);
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Диалог.Показать(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияРасписания(Расписание, ПараметрыВыполнения) Экспорт
	
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьРасписаниеПредопределенного(ПараметрыВыполнения.ИмяПредопределенного, Расписание);
	Если ПараметрыВыполнения.Свойство("ИмяЭлемента") И ЗначениеЗаполнено(ПараметрыВыполнения.ИмяЭлемента) Тогда
		Элементы[ПараметрыВыполнения.ИмяЭлемента].Подсказка = Строка(Расписание);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПостроениеФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "СписокРазделов.Видимость", Ложь);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.СписокРазделовПредставление.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.СписокРазделовПодсказка.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокРазделов()
	
	Раздел = СписокРазделов.Добавить();
	Раздел.Имя = "СтраницаГлавное";
	Раздел.Представление = НСтр("ru='Общее'");
	Раздел.Подсказка = НСтр("ru='Товары • Единицы измерения • Штрихкоды • Печать'");
	Раздел.НомерРаздела = 1;
	
	Раздел = СписокРазделов.Добавить();
	Раздел.Имя = "СтраницаCRM";
	Раздел.Представление = НСтр("ru='CRM'");
	Раздел.Подсказка = НСтр("ru='Чаты • Звонки • Почта • Варианты КП'");
	Раздел.НомерРаздела = 2;
	
	Раздел = СписокРазделов.Добавить();
	Раздел.Имя = "СтраницаПродажи";
	Раздел.Представление = НСтр("ru='Продажи'");
	Раздел.Подсказка = НСтр("ru='Заказы • Розница • Цены и скидки • Комиссия'");
	Раздел.НомерРаздела = 3;
	
	Раздел = СписокРазделов.Добавить();
	Раздел.Имя = "СтраницаЗакупки";
	Раздел.Представление = НСтр("ru='Закупки'");
	Раздел.Подсказка = НСтр("ru='Прайсы поставщиков • Переработка • Импорт'");
	Раздел.НомерРаздела = 4;
	
	Раздел = СписокРазделов.Добавить();
	Раздел.Имя = "СтраницаСклад";
	Раздел.Представление = НСтр("ru='Склад'");
	Раздел.Подсказка = НСтр("ru='Перемещения • Резервирование • Ордера • Ячейки'");
	Раздел.НомерРаздела = 5;
	
	Раздел = СписокРазделов.Добавить();
	Раздел.Имя = "СтраницаРаботы";
	Раздел.Представление = НСтр("ru='Работы'");
	Раздел.Подсказка = НСтр("ru='Заказ-наряды • Задания • Ремонт • Календарь'");
	Раздел.НомерРаздела = 6;
	
	Раздел = СписокРазделов.Добавить();
	Раздел.Имя = "СтраницаПроизводство";
	Раздел.Представление = НСтр("ru='Производство'");
	Раздел.Подсказка = НСтр("ru='Спецификации • Операции • Переработка'");
	Раздел.НомерРаздела = 7;
	
	Раздел = СписокРазделов.Добавить();
	Раздел.Имя = "СтраницаДеньги";
	Раздел.Представление = НСтр("ru='Деньги'");
	Раздел.Подсказка = НСтр("ru='Валюты • Оплаты • Банк и касса • Кредиты'");
	Раздел.НомерРаздела = 8;
	
	Раздел = СписокРазделов.Добавить();
	Раздел.Имя = "СтраницаПерсонал";
	Раздел.Представление = НСтр("ru='Персонал'");
	Раздел.Подсказка = НСтр("ru='Зарплата • Кадровый учет • Графики • НДФЛ'");
	Раздел.НомерРаздела = 9;
	
	Раздел = СписокРазделов.Добавить();
	Раздел.Имя = "СтраницаНалоги";
	Раздел.Представление = НСтр("ru='Налоги'");
	Раздел.Подсказка = НСтр("ru='Регламентированная отчетность'");
	Раздел.НомерРаздела = 10;
	
	Раздел = СписокРазделов.Добавить();
	Раздел.Имя = "СтраницаКомпания";
	Раздел.Представление = НСтр("ru='Компания'");
	Раздел.Подсказка = НСтр("ru='Интеркампани • Магазины • Проекты • Имущество'");
	Раздел.НомерРаздела = 11;
	
КонецПроцедуры

&НаСервере
Функция ВсеСтраницыНастроек()
	
	Результат = Новый Массив;
	Для каждого ЭлементФормы Из Элементы.СтраницыНастроек.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы")
			И ЭлементФормы.Вид = ВидГруппыФормы.Страница
			И ЭлементФормы <> Элементы.СтраницаНеНайдено Тогда
			Результат.Добавить(ЭлементФормы);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЭтоСворачиваемаяГруппа(ЭлементФормы)
	
	Возврат ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы")
		И ЭлементФормы.Вид = ВидГруппыФормы.ОбычнаяГруппа
		И ЭлементФормы.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	
КонецФункции

&НаСервере
Процедура СнятьДоступностьОтображаемогоЭлементаИлиГруппы(ЭлементФормы)
	
	Если Не ЭтоСворачиваемаяГруппа(ЭлементФормы) Тогда
		ЭлементФормы.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлементФормы Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		ЭлементФормы.Доступность = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СнятьВидимостьГруппСмТакжеДляОграниченныхПрав()
	
	СкрываемыеГруппыСмТакже = Новый Массив;
	СкрываемыеГруппыСмТакже.Добавить(Элементы.СтраницаГлавноеГруппаСмТакже);
	СкрываемыеГруппыСмТакже.Добавить(Элементы.СтраницаCRMГруппаСмТакжеИнтеграции);
	СкрываемыеГруппыСмТакже.Добавить(Элементы.СтраницаCRMГруппаСмТакжеАдминистрирование);
	СкрываемыеГруппыСмТакже.Добавить(Элементы.СтраницаПродажиГруппаСмТакжеАдминистрирование);
	СкрываемыеГруппыСмТакже.Добавить(Элементы.СтраницаДеньгиГруппаСмТакжеИнтеграции);
	СкрываемыеГруппыСмТакже.Добавить(Элементы.СтраницаЗарплатаГруппаСмТакжеАдминистрирование);
	
	Для каждого ЭлементФормы Из СкрываемыеГруппыСмТакже Цикл
		ЭлементФормы.Видимость = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДоступностьНастроекДляОграниченныхПрав()
	
	ЭтоПолноправныйПользователь = РежимРаботы.ЭтоАдминистраторПрограммы Или РежимРаботы.ЭтоАдминистраторСистемы;
	Если ЭтоПолноправныйПользователь Тогда
		Возврат;
	КонецЕсли;
	
	ВсеСтраницыНастроек = ВсеСтраницыНастроек();
	Для каждого СтраницаНастроек Из ВсеСтраницыНастроек Цикл
		Для каждого ЭлементФормы Из СтраницаНастроек.ПодчиненныеЭлементы Цикл
			СнятьДоступностьОтображаемогоЭлементаИлиГруппы(ЭлементФормы);
		КонецЦикла;
	КонецЦикла;
	
	СнятьВидимостьГруппСмТакжеДляОграниченныхПрав();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьДереваНастроекМобильныйКлиент(Элементы, ПоказатьВыборРаздела)
	
	Элементы.СнятьОтбор.Видимость = НЕ ПоказатьВыборРаздела;
	Элементы.СписокРазделов.Видимость = ПоказатьВыборРаздела;
	Элементы.СтраницыНастроек.Видимость = НЕ ПоказатьВыборРаздела;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьВсеГоризонтальныеОтступы()
	
	Для каждого ЭлементФормы Из Элементы Цикл
		Если ТипЗнч(ЭлементФормы) <> Тип("ДекорацияФормы") Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементФормы.Вид <> ВидДекорацииФормы.Надпись Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлементФормы.Заголовок) Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементФормы.Ширина = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ЭлементФормы.Родитель) <> Тип("ГруппаФормы") Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементФормы.Родитель.Вид <> ВидГруппыФормы.ОбычнаяГруппа Тогда
			Продолжить;
		КонецЕсли;
		Если СтрЗаканчиваетсяНа(ЭлементФормы.Имя, "ExtendedTooltip") Тогда
			Продолжить;
		КонецЕсли;
		ЭтоГоризонтальнаяГруппа = ЭлементФормы.Родитель.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда
			Или ЭлементФормы.Родитель.Группировка <> ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
		Если Не ЭтоГоризонтальнаяГруппа Тогда
			Продолжить;
		КонецЕсли;
		ЭлементФормы.Видимость = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьФормыМобильныйКлиент()
	
	Если Не ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьВидимостьДереваНастроекМобильныйКлиент(Элементы, Истина);
	СкрытьВсеГоризонтальныеОтступы();
	Элементы.СписокРазделов.Ширина = 0;
	Элементы.СписокРазделов.РастягиватьПоГоризонтали = Истина;
	Элементы.ГоризонтальныйОтступ.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область Поиск

&НаСервере
Функция ПолучитьЗаголовкиПодчиненныхЭлементовГруппыРекурсивно(Элемент)
	
	Результат = Новый Соответствие;
	
	Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Или ТипЗнч(Элемент) = Тип("СтраницаФормы") Тогда
		Для каждого ЭлементГруппы Из Элемент.ПодчиненныеЭлементы Цикл
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат, ПолучитьЗаголовкиПодчиненныхЭлементовГруппыРекурсивно(ЭлементГруппы));
		КонецЦикла;
	Иначе
		ЗаголовокЭлемента = ЗаголовокЭлемента(Элемент);
		Если ЗначениеЗаполнено(ЗаголовокЭлемента) Тогда
			Результат.Вставить(Элемент.Имя, ЗаголовокЭлемента);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаголовокЭлемента(Элемент)
	
	Если ЗначениеЗаполнено(Элемент.Заголовок) Тогда
		Возврат Элемент.Заголовок;
	КонецЕсли;
	
	Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
		ЗаголовокЭлемента = ЗаголовокРеквизитаФормы(Элемент.ПутьКДанным);
	ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
		И ЗначениеЗаполнено(Элемент.ИмяКоманды) Тогда
		ЗаголовокЭлемента = Команды[Элемент.ИмяКоманды].Заголовок;
	Иначе
		ЗаголовокЭлемента = "";
	КонецЕсли;
	
	Возврат ЗаголовокЭлемента;
	
КонецФункции

&НаСервере
Функция ЗаголовокРеквизитаФормы(ИмяРеквизита)
	
	ЗаполнитьЗаголовкиРеквизитовФормы();
	Результат = ЗаголовкиРеквизитовФормы.НайтиПоЗначению(ИмяРеквизита);
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат.Представление;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЗаголовкиРеквизитовФормы()
	
	Если ЗаголовкиРеквизитовФормы.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВсеРеквизитыФормы = ПолучитьРеквизиты();
	Для каждого РеквизитФормы Из ВсеРеквизитыФормы Цикл
		ЗаголовкиРеквизитовФормы.Добавить(РеквизитФормы.Имя, РеквизитФормы.Заголовок);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПоиска()
	
	Если СловарьПоиска.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтраницыНастроекИсключения = Новый Массив;
	СтраницыНастроекИсключения.Добавить("СтраницаНеНайдено");
	
	Для каждого СтраницаНастроек Из Элементы.СтраницыНастроек.ПодчиненныеЭлементы Цикл
		Если СтраницыНастроекИсключения.Найти(СтраницаНастроек.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого Элемент Из СтраницаНастроек.ПодчиненныеЭлементы Цикл
			ЗаголовкиЭлементов = ПолучитьЗаголовкиПодчиненныхЭлементовГруппыРекурсивно(Элемент);
			Для каждого КлючЗначение Из ЗаголовкиЭлементов Цикл
				ДобавитьСтрокиПоискаВСловарь(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ДополнитьТаблицуПоискаСтраницаCRM();
	ДополнитьТаблицуПоискаСтраницаПродажи();
	ДополнитьТаблицуПоискаСтраницаЗакупки();
	ДополнитьТаблицуПоискаСтраницаРаботы();
	ДополнитьТаблицуПоискаСтраницаПроизводство();
	ДополнитьТаблицуПоискаСтраницаДеньги();
	ДополнитьТаблицуПоискаСтраницаПерсонал();
	ДополнитьТаблицуПоискаСтраницаКомпания();
	ДополнитьТаблицуПоискаПанелиАдминистрирования();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиПоискаВСловарь(Элемент, СтрокаПоиска1,
		СтрокаПоиска2 = "", СтрокаПоиска3 = "", СтрокаПоиска4 = "", СтрокаПоиска5 = "", СтрокаПоиска6 = "")
	
	Если ТипЗнч(СтрокаПоиска1) = Тип("Массив") Тогда
		СтрокиПоиска = СтрокаПоиска1;
	Иначе
		СтрокиПоиска = Новый Массив;
		СтрокиПоиска.Добавить(СтрокаПоиска1);
		Если ЗначениеЗаполнено(СтрокаПоиска2) Тогда
			СтрокиПоиска.Добавить(СтрокаПоиска2);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаПоиска3) Тогда
			СтрокиПоиска.Добавить(СтрокаПоиска3);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаПоиска4) Тогда
			СтрокиПоиска.Добавить(СтрокаПоиска4);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаПоиска5) Тогда
			СтрокиПоиска.Добавить(СтрокаПоиска5);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаПоиска6) Тогда
			СтрокиПоиска.Добавить(СтрокаПоиска6);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Элемент) = Тип("Строка") Тогда
		ИмяЭлемента = Элемент;
	Иначе
		ИмяЭлемента = Элемент.Имя;
	КонецЕсли;
	
	Для каждого СтрокаПоиска Из СтрокиПоиска Цикл
		ПриведеннаяСтрокаПоиска = НРег(СтрокаПоиска);
		ОтборСтрокаПоиска = Новый Структура;
		ОтборСтрокаПоиска.Вставить("ИмяЭлемента", ИмяЭлемента);
		ОтборСтрокаПоиска.Вставить("СтрокаПоиска", ПриведеннаяСтрокаПоиска);
		
		Строки = СловарьПоиска.НайтиСтроки(ОтборСтрокаПоиска);
		Если Строки.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СловарьПоиска.Добавить(), ОтборСтрокаПоиска);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПервыйОтображаемыйРазделЕслиНеобходимо()
	
	ВыбранныйРазделСейчасОтображается = Элементы.СписокРазделов.ТекущиеДанные <> Неопределено
		И Элементы.СписокРазделов.ТекущиеДанные.Видимость;
	
	Если ВыбранныйРазделСейчасОтображается Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Строка Из СписокРазделов Цикл
		Если Строка.Видимость Тогда
			Элементы.СписокРазделов.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.СписокРазделов.Доступность = Ложь;
	Элементы.СписокРазделов.ТекущаяСтрока = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискСервер()
	
	Если Не ЗначениеЗаполнено(ВведеннаяСтрокаПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуПоиска();
	
	Результат = Новый Соответствие;
	
	Для каждого СтрокаСловаря Из СловарьПоиска Цикл
		ПроцентСхожести = ПроцентСхожестиСтрок(
			ПолучитьНГраммыСтроки(ВведеннаяСтрокаПоиска),
			ПолучитьНГраммыСтроки(СтрокаСловаря.СтрокаПоиска));
		
		СловоПохожее = ПроцентСхожести >= УдовлетворительныйПроцентСхожестиНГрамм();
		
		Если СловоПохожее Тогда
			Результат.Вставить(СтрокаСловаря.ИмяЭлемента);
		КонецЕсли;
	КонецЦикла;
	
	СкрытьВсеЭлементыСтраницНастроек();
	ПоказатьНайденныеПоискомЭлементы(Результат);
	УстановитьВидимостьРазделовРекурсивно();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРазделовРекурсивно()
	
	Для каждого ОписаниеРаздела Из СписокРазделов Цикл
		
		СтраницаФормы = Элементы.Найти(ОписаниеРаздела.Имя);
		Если СтраницаФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеРаздела.Видимость = ЕстьВидимыеЭлементыВнутриЭлемента(СтраницаФормы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЕстьВидимыеЭлементыВнутриЭлемента(ПроверяемыйЭлементФормы)
	
	ЭтоГруппа = ТипЗнч(ПроверяемыйЭлементФормы) = Тип("ГруппаФормы");
	
	Если ЭтоГруппа И НЕ ПроверяемыйЭлементФормы.Видимость Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
		Возврат ПроверяемыйЭлементФормы.Видимость;
	КонецЕсли;
	
	Для каждого ЭлементФормы Из ПроверяемыйЭлементФормы.ПодчиненныеЭлементы Цикл
		ЕстьВидимыеЭлементыВнутриЭлемента = ЕстьВидимыеЭлементыВнутриЭлемента(ЭлементФормы);
		Если ЕстьВидимыеЭлементыВнутриЭлемента Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура СкрытьВсеЭлементыСтраницНастроек()
	
	Для каждого СтраницаНастроек Из Элементы.СтраницыНастроек.ПодчиненныеЭлементы Цикл
		
		Если СтраницаНастроек = Элементы.СтраницаНеНайдено Тогда
			Продолжить;
		КонецЕсли;
		
		СкрытьВсеЭлементыСтраницыНастроек(СтраницаНастроек);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьВсеЭлементыСтраницыНастроек(СтраницаНастроек)
	
	Для каждого ЭлементФормы Из СтраницаНастроек.ПодчиненныеЭлементы Цикл
		
		Если ЭтоСворачиваемаяГруппа(ЭлементФормы) Тогда
			СкрытьВсеЭлементыСтраницыНастроек(ЭлементФормы);
		Иначе
			НоваяСтрока = КэшЭлементовНастроек.Добавить();
			НоваяСтрока.ИмяЭлемента = ЭлементФормы.Имя;
			НоваяСтрока.Видимость = ЭлементФормы.Видимость;
			
			ЭлементФормы.Видимость = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьИсходнуюВидимостьНастроек()
	
	Для каждого ДанныеЭлемента Из КэшЭлементовНастроек Цикл
		Элементы[ДанныеЭлемента.ИмяЭлемента].Видимость = ДанныеЭлемента.Видимость;
	КонецЦикла;
	Элементы.СписокРазделов.Доступность = Истина;
	
	УстановитьВидимостьРазделовРекурсивно();
	
	КэшЭлементовНастроек.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗапомнитьВидимостьЭлементовРекурсивно(ВыбранныеЭлементы)
	
	Для каждого Элемент Из ВыбранныеЭлементы Цикл
		
		Если Элемент.ПодчиненныеЭлементы.Количество() <> 0 Тогда
			ЗапомнитьВидимостьЭлементовРекурсивно(Элемент.ПодчиненныеЭлементы);
		КонецЕсли;
		
		НоваяСтрока = КэшЭлементовНастроек.Добавить();
		НоваяСтрока.ИмяЭлемента = Элемент.Имя;
		НоваяСтрока.Видимость = Элемент.Видимость;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПоказатьНайденныеПоискомЭлементы(Результат)
	
	СтраницыСНастройками = Новый Массив;
	
	Для каждого КлючЗначение Из Результат Цикл
		
		ИмяЭлемента = КлючЗначение.Ключ;
		Элемент = Элементы[ИмяЭлемента];
		
		РодительДляОтображения = ВерхнийЭлементРодительНастройки(Элемент);
		СледующийРодитель = РодительДляОтображения.Родитель;
		Если ЭтоСворачиваемаяГруппа(СледующийРодитель)
			И СледующийРодитель.Скрыта() Тогда
			СледующийРодитель.Показать();
		КонецЕсли;
		
		ДанныеЭлементов = КэшЭлементовНастроек.НайтиСтроки(Новый Структура("ИмяЭлемента", РодительДляОтображения.Имя));
		
		Если ДанныеЭлементов.Количество() <> 0
			И ДанныеЭлементов[0].Видимость Тогда
			
			РодительДляОтображения.Видимость = Истина;
			СтраницаРодитель = РодительДляОтображения.Родитель;
			
			Если СтраницыСНастройками.Найти(СтраницаРодитель.Имя) = Неопределено Тогда
				СтраницыСНастройками.Добавить(СтраницаРодитель.Имя);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтраницыСНастройками;
	
КонецФункции

&НаСервере
Функция ВерхнийЭлементРодительНастройки(Элемент)
	
	РодительТекущегоЭлемента = Элемент.Родитель;
	СледующийРодитель = РодительТекущегоЭлемента;
	
	Если СледующийРодитель = Элементы.СтраницыНастроек
		Или ЭтоСворачиваемаяГруппа(СледующийРодитель) Тогда
		Возврат Элемент;
	КонецЕсли;
	
	Возврат ВерхнийЭлементРодительНастройки(РодительТекущегоЭлемента);
	
КонецФункции

&НаСервере
Функция СтраницаРодительЭлементаНастройки(Элемент)
	
	РодительТекущегоЭлемента = Элемент.Родитель;
	
	Если РодительТекущегоЭлемента.Родитель = Элементы.СтраницыНастроек Тогда
		Возврат РодительТекущегоЭлемента;
	КонецЕсли;
	
	Возврат СтраницаРодительЭлементаНастройки(РодительТекущегоЭлемента);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УдовлетворительныйПроцентСхожестиНГрамм()
	
	Возврат 52;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДлинаНГраммы()
	
	Возврат 3;
	
КонецФункции

&НаСервере
Функция ПроцентСхожестиСтрок(МассивНГраммПоисковойСтроки, МассивНГраммСловаря)
	
	Если МассивНГраммПоисковойСтроки.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	КоличествоСовпавшихНГрамм = ЭлементыВходногоМассиваПрисутствующиеВИскомом(
		МассивНГраммПоисковойСтроки,
		МассивНГраммСловаря).Количество();
	
	Возврат ПроцентОт(КоличествоСовпавшихНГрамм, МассивНГраммПоисковойСтроки.Количество());
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроцентОт(Значение, ЗначениеОт)
	
	Возврат Значение * 100 / ЗначениеОт;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭлементыВходногоМассиваПрисутствующиеВИскомом(ВходнойМассив, ИсковыйМассив)
	
	Результат = Новый Массив;
	
	Для каждого Значение Из ВходнойМассив Цикл
		Если ИсковыйМассив.Найти(Значение) <> Неопределено Тогда
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьНГраммыСтроки(Знач ИсходнаяСтрока)
	
	НГраммыСтроки = Новый Массив;
	
	ИсходнаяСтрока = НРег(ИсходнаяСтрока);
	СловаИсходнойСтроки = СтрРазделить(ИсходнаяСтрока, " ", Ложь);
	
	Для каждого Слово Из СловаИсходнойСтроки Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НГраммыСтроки, НГраммыСлова(Слово));
	КонецЦикла;
	
	Возврат НГраммыСтроки;
	
КонецФункции

&НаСервере
Функция НГраммыСлова(Слово)
	
	НГраммыСлова = Новый Массив;
	
	Для Итератор = 0 По СтрДлина(Слово) - ДлинаНГраммы() Цикл
		НГрамма = "";
		Для ИтераторНГраммы = 0 По ДлинаНГраммы() - 1 Цикл
			НГрамма = НГрамма + Сред(Слово, ИтераторНГраммы + 1 + Итератор, 1);
		КонецЦикла;
		НГраммыСлова.Добавить(НГрамма);
	КонецЦикла;
	
	Возврат НГраммыСлова;
	
КонецФункции

&НаСервере
Функция ФормыДобавленныхПанелейАдминистрированияБиблиотек()
	
	Результат = Новый Соответствие;
	Результат.Вставить("ПанельАдминистрированияБСП_ПечатныеФормыОтчетыИОбработки", Элементы.ОбработкаПанельАдминистрированияБСППечатныеФормыОтчетыИОбработки);
	Результат.Вставить("ПанельАдминистрированияБСП_ОбщиеНастройки", Элементы.ОбработкаПанельАдминистрированияБСПОбщиеНастройки);
	Результат.Вставить("ПанельАдминистрированияБСП_НастройкиПользователейИПрав", Элементы.ОбработкаПанельАдминистрированияБСПНастройкиПользователейИПрав);
	Результат.Вставить("ПанельАдминистрированияБЭД_ОбменСБанками", Элементы.ОбработкаПанельАдминистрированияИнтеграцийУНФНастройкиОбменСБанками);
	Результат.Вставить("ПанельАдминистрированияБЭД_ЯндексКасса", Элементы.ОбработкаПанельАдминистрированияИнтеграцийУНФНастройкиЯндексКасса);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СинонимыНастроекПанелейАдминистрированияБиблиотек(ИменаФормБСП)
	
	ФайлСинонимыНастроекБиблиотек = ПолучитьИмяВременногоФайла("txt");
	МакетСинонимыНастроекБиблиотек = Обработки.НастройкаПрограммы.ПолучитьМакет("СинонимыНастроекБиблиотек");
	МакетСинонимыНастроекБиблиотек.Записать(ФайлСинонимыНастроекБиблиотек);
	
	Результат = ПрочитатьСинонимыНастроекПанелейАдминистрированияБиблиотек(ФайлСинонимыНастроекБиблиотек);
	
	Попытка
		УдалитьФайлы(ФайлСинонимыНастроекБиблиотек);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru='НастройкаПрограммы.СинонимыНастроекБиблиотек'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПрочитатьСинонимыНастроекПанелейАдминистрированияБиблиотек(ФайлСинонимыНастроекБиблиотек)
	
	ТекущееИмяФормы = "";
	СинонимыФормы = Новый Массив;
	Результат = Новый Соответствие;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлСинонимыНастроекБиблиотек);
	Пока ЧтениеXML.Прочитать() Цикл
		Если НРег(ЧтениеXML.Имя) = "form" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ТекущееИмяФормы <> "" И СинонимыФормы.Количество() <> 0 Тогда
				Результат.Вставить(ТекущееИмяФормы, СинонимыФормы);
			КонецЕсли;
			ТекущееИмяФормы = ЧтениеXML.ПолучитьАтрибут("name");
			СинонимыФормы = Новый Массив;
		КонецЕсли;
		Если НРег(ЧтениеXML.Имя) = "setting" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			СинонимыФормы.Добавить(ЧтениеXML.Значение);
		КонецЕсли;
	КонецЦикла;
	ЧтениеXML.Закрыть();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СловарьПоиска

&НаСервере
Процедура ДополнитьТаблицуПоискаСтраницаКомпания()
	
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ИспользоватьНесколькоОрганизаций,
		НСтр("ru='виды бизнеса'"),
		НСтр("ru='компания'"),
		НСтр("ru='обособленный учет'"),
		НСтр("ru='по разным компаниям'"),
		НСтр("ru='структура'"),
		НСтр("ru='структура компании'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.УчетПоКомпании,
		НСтр("ru='агрегировано'"),
		НСтр("ru='сводно'"),
		НСтр("ru='общие остатки'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.Компания,
		НСтр("ru='головная организация'"),
		НСтр("ru='централизованная'"),
		НСтр("ru='общая'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям,
		НСтр("ru='перемещения'"),
		НСтр("ru='склады'"),
		НСтр("ru='обособленные'"),
		НСтр("ru='магазин'"),
		НСтр("ru='структура'"),
		НСтр("ru='структура компании'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияУчетПоНесколькимНаправлениямДеятельности,
		НСтр("ru='различные'"),
		НСтр("ru='виды бизнеса'"),
		НСтр("ru='многофирменный'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьОтчетность,
		НСтр("ru='сдача отчетности'"),
		НСтр("ru='упрощенка'"),
		НСтр("ru='налогообложение'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов,
		НСтр("ru='оплата'"),
		НСтр("ru='списание'"),
		НСтр("ru='поступление'"),
		НСтр("ru='денежные средства'"),
		НСтр("ru='деньги'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьБюджетирование,
		НСтр("ru='финансовый план'"),
		НСтр("ru='контроль'"),
		НСтр("ru='компания'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияУчетВнеоборотныхАктивов,
		НСтр("ru='имущество'"),
		НСтр("ru='средства компании'"),
		НСтр("ru='активы'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ПередачаТоваровМеждуОрганизациями,
		НСтр("ru='интеркампани'"),
		НСтр("ru='элиминирование'"),
		НСтр("ru='взаимозависимы'"),
		НСтр("ru='передача'"));
		
КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуПоискаСтраницаCRM()
	
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ИспользоватьНесколькоВариантовКП,
		НСтр("ru='варианты КП'"),
		НСтр("ru='отправка'"),
		НСтр("ru='различные'"),
		НСтр("ru='разные'"),
		НСтр("ru='заказ'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияКонтрольДоговоров,
		НСтр("ru='Контроль договоров контрагентов'"),
		НСтр("ru='соответствие'"),
		НСтр("ru='предупреждать'"),
		НСтр("ru='при проведении'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.НастройкиНумерацииДоговоров,
		НСтр("ru='настройки нумерации договоров'"),
		НСтр("ru='организации'"),
		НСтр("ru='вид договора'"),
		НСтр("ru='группа договоров'"),
		НСтр("ru='номер'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.РегистрацияВзаимодействия,
		НСтр("ru='обсуждения'"),
		НСтр("ru='переписка'"),
		НСтр("ru='пользователи'"),
		НСтр("ru='уведомления'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.НастройкаОбязательностиЗаполненияИсточникПривлечения,
		НСтр("ru='причина'"),
		НСтр("ru='воронка'"),
		НСтр("ru='мероприятие'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятияЖурналЗаписи,
		НСтр("ru='планировщик'"),
		НСтр("ru='заказы'"),
		НСтр("ru='заказ наряд'"),
		НСтр("ru='клиенты'"),
		НСтр("ru='расписание сотрудников'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ИспользоватьЧатботов,
		НСтр("ru='telegram'"),
		НСтр("ru='телеграм'"),
		НСтр("ru='запись на услуги'"),
		НСтр("ru='чат'"),
		НСтр("ru='мессенджер'"),
		НСтр("ru='дистанционная запись'"));
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуПоискаСтраницаПродажи()
	
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи,
		НСтр("ru='процент'"),
		НСтр("ru='дисконт'"),
		НСтр("ru='прайс'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки,
		НСтр("ru='бонусы'"),
		НСтр("ru='процент'"),
		НСтр("ru='условия предоставления'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьДисконтныеКарты,
		НСтр("ru='бонусы'"),
		НСтр("ru='скидки'"),
		НСтр("ru='накопление'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьБонусныеПрограммы,
		НСтр("ru='бонусные карты'"),
		НСтр("ru='сканирование'"),
		НСтр("ru='скидки'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьПодарочныеСертификаты,
		НСтр("ru='серийные номера'"),
		НСтр("ru='серии'"),
		НСтр("ru='скидки'"),
		НСтр("ru='чек ККМ'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.КонтрагентДляПредоплаты,
		НСтр("ru='настройка'"),
		НСтр("ru='предоплата'"),
		НСтр("ru='бонусы'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьЧастичноеПогашениеСертификатов,
		НСтр("ru='контроль'"),
		НСтр("ru='серийные номера'"),
		НСтр("ru='серии'"),
		НСтр("ru='остатки'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияПередачаТоваровНаКомиссию,
		НСтр("ru='комиссионный'"),
		НСтр("ru='комиссионер'"),
		НСтр("ru='комитент'"),
		НСтр("ru='многофирменный'"),
		НСтр("ru='реализация'"),
		НСтр("ru='собственность'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияПриемТоваровНаКомиссию,
		НСтр("ru='баланс'"),
		НСтр("ru='счет-фактура'"),
		НСтр("ru='расчеты'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ИспользоватьКорректировкиРеализаций,
		НСтр("ru='корректировочный'"),
		НСтр("ru='счет фактура'"),
		НСтр("ru='первичные документы'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьПланПродаж,
		НСтр("ru='план-фактный анализ'"),
		НСтр("ru='достижение'"),
		НСтр("ru='сравнительный'"),
		НСтр("ru='доходы'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьСверкиВзаиморасчетов,
		НСтр("ru='расхождения'"),
		НСтр("ru='поступления'"),
		НСтр("ru='анализ'"),
		НСтр("ru='задолженность'"),
		НСтр("ru='деньги'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьКорректировкиДолга,
		НСтр("ru='переуступка'"),
		НСтр("ru='перенос'"),
		НСтр("ru='кредитор'"),
		НСтр("ru='дебитор'"),
		НСтр("ru='зачет аванса'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияУчетПоПроектам,
		НСтр("ru='затраты'"),
		НСтр("ru='доходы и расходы'"),
		НСтр("ru='анализ'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьПечатьЭтикетокИЦенников,
		НСтр("ru='касса'"),
		НСтр("ru='шаблоны'"),
		НСтр("ru='розница'"),
		НСтр("ru='макет'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьПечатьЭтикетокИЦенниковСклад,
		НСтр("ru='касса'"),
		НСтр("ru='шаблоны'"),
		НСтр("ru='розница'"),
		НСтр("ru='макет'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ИспользоватьРемонты,
		НСтр("ru='серийные номера'"),
		НСтр("ru='серии'"),
		НСтр("ru='сторонний сервис'"),
		НСтр("ru='возврат'"),
		НСтр("ru='сервисный центр'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьНаборы,
		НСтр("ru='комплект'"),
		НСтр("ru='совместные'"),
		НСтр("ru='составляющие'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.СрокОплатыПокупателя,
		НСтр("ru='отсрочка'"),
		НСтр("ru='срок'"),
		НСтр("ru='условия'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ИспользоватьВидыЗаказовПокупателей,
		НСтр("ru='воронка'"),
		НСтр("ru='состояния'"),
		НСтр("ru='различные'"),
		НСтр("ru='разные'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.БиллингВестиУчетРасходовПоДоговорамОбслуживания,
		НСтр("ru='расходы'"),
		НСтр("ru='траты'"),
		НСтр("ru='стоимость'"),
		НСтр("ru='подсчет'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ИспользоватьБиллинг,
		НСтр("ru='повторяющиеся'"),
		НСтр("ru='обслуживание'"),
		НСтр("ru='тарифные планы'"),
		НСтр("ru='тарификация'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьМинимальныеЦены,
		НСтр("ru='минимальные'"),
		НСтр("ru='ограничить'"),
		НСтр("ru='продажи'"),
		НСтр("ru='цены'"));
	
	ДополнитьТаблицуПоискаСтраницаПродажиРозничныеПродажи();

КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуПоискаСтраницаПродажиРозничныеПродажи()

	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ОбработкаМенеджерПодсказокТиповыеСхемыУчета_Розница,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ОткрытьОчередьЭлектронныхЧеков,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.РассылкаЭлектронныхЧековРасписание,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.АвтоматическаяОтправкаЭлектронныхЧековПоРасписанию,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ОтправкаЭлектронныхЧековПослеПробитияЧека,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ВариантВозвратаПоЗакрытойСмене,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьПредоплатуВЧекахККМ,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговлеДляНастроек,
		НСтр("ru='оформление под заказ'"),
		НСтр("ru='РМК'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.КонтролироватьОстаткиПриПробитииЧековККМ,
		НСтр("ru='контроль'"),
		НСтр("ru='отрицательные'"),
		НСтр("ru='склад'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.УдалятьНепробитыеЧекиПриЗакрытииКассовойСмены,
		НСтр("ru='фискальные'"),
		НСтр("ru='удаление'"),
		НСтр("ru='экономия'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.АрхивироватьЧекиККМПриЗакрытииКассовойСмены,
		НСтр("ru='кассовая схема'"),
		НСтр("ru='отчет о розничных продажах'"),
		НСтр("ru='свертка'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияУчетРозничныхПродаж,
		НСтр("ru='розница'"),
		НСтр("ru='кассы'"),
		НСтр("ru='наличные'"));

КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуПоискаСтраницаЗакупки()
	
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияУчетПоНесколькимСкладам,
		НСтр("ru='структура'"),
		НСтр("ru='магазин'"),
		НСтр("ru='структура компании'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияРазрешитьСкладыВТабличныхЧастях,
		НСтр("ru='несколько складов'"),
		НСтр("ru='различные'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияУчетВРазличныхЕдиницахИзмерения,
		НСтр("ru='различные единицы'"),
		НСтр("ru='штуки'"),
		НСтр("ru='упаковки'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьХарактеристики,
		НСтр("ru='размер'"),
		НСтр("ru='свойства'"),
		НСтр("ru='дополнительные'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьПартии,
		НСтр("ru='партионный учет'"),
		НСтр("ru='комиссия'"),
		НСтр("ru='сроки годности'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ИспользоватьНеуникальныеШтрихКоды,
		НСтр("ru='повторяющиеся'"),
		НСтр("ru='дубли'"),
		НСтр("ru='табак'"),
		НСтр("ru='егаис'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ИспользоватьСерииНоменклатуры,
		НСтр("ru='серийный'"),
		НСтр("ru='гарантийный срок'"),
		НСтр("ru='срок годности'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.КонтрольОстатковСерийНоменклатуры,
		НСтр("ru='по сериям'"),
		НСтр("ru='политика учета'"),
		НСтр("ru='свободные'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.НастройкаСквознойКонтрольДублейНоменклатуры,
		НСтр("ru='уникальные'"),
		НСтр("ru='проверка'"),
		НСтр("ru='запрет'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияУчетГТД,
		НСтр("ru='грузовые таможенные декларации'"),
		НСтр("ru='экспорт'"),
		НСтр("ru='импорт'"),
		НСтр("ru='таможня'"),
		НСтр("ru='ввоз'"),
		НСтр("ru='вывоз'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ТребоватьЗаполнениеГТДИмпортногоТовара,
		НСтр("ru='номер ГТД'"),
		НСтр("ru='пустой'"),
		НСтр("ru='обязательно'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ВестиУчетПрослеживаемыхТоваров,
		НСтр("ru='регистрационный номер партии товара'"),
		НСтр("ru='граница'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиЗакупки,
		НСтр("ru='скидочная'"),
		НСтр("ru='ручные'"),
		НСтр("ru='процент'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияУчетЦенКонтрагентов,
		НСтр("ru='цены поставщиков'"),
		НСтр("ru='электронный документооборот'"),
		НСтр("ru='конкуренты'"),
		НСтр("ru='прайс'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияУчетНоменклатурыПоставщиков,
		НСтр("ru='конкуренты'"),
		НСтр("ru='прайс'"),
		НСтр("ru='электронный документооборот'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияРезервированиеЗапасов,
		НСтр("ru='бронь'"),
		НСтр("ru='резерв'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияПриемЗапасовНаОтветХранение,
		НСтр("ru='сторонние'"),
		НСтр("ru='внешние'"),
		НСтр("ru='комиссия'"),
		НСтр("ru='комиссионер'"),
		НСтр("ru='комитент'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияПередачаСырьяВПереработку,
		НСтр("ru='сторонние'"),
		НСтр("ru='внешние'"),
		НСтр("ru='комиссия'"),
		НСтр("ru='комиссионер'"),
		НСтр("ru='комитент'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияПередачаЗапасовНаОтветХранение,
		НСтр("ru='сторонние'"),
		НСтр("ru='внешние'"),
		НСтр("ru='комиссия'"),
		НСтр("ru='комиссионер'"),
		НСтр("ru='комитент'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ИспользоватьКорректировкиПоступлений,
		НСтр("ru='запрет редактирования'"),
		НСтр("ru='закрытй период'"),
		НСтр("ru='счет-фактура'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьОрдерныйСклад,
		НСтр("ru='Складские ордера'"),
		НСтр("ru='контур'"),
		НСтр("ru='кладовщик'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияУчетПоЯчейкам,
		НСтр("ru='складская ячейка'"),
		НСтр("ru='адресный склад'"),
		НСтр("ru='штрихкод'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.УчетПотребностиПоСкладам,
		НСтр("ru='планирование'"),
		НСтр("ru='внутренние перемещения'"),
		НСтр("ru='производство'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.СрокОплатыПоставщику,
		НСтр("ru='отсрочка платежа'"),
		НСтр("ru='взаиморасчеты'"),
		НСтр("ru='договор'"));
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуПоискаСтраницаРаботы()
	
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьПодсистемуРаботы,
		НСтр("ru='подряд'"),
		НСтр("ru='акт'"),
		НСтр("ru='задание'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ИспользоватьВидыЗаказНарядов,
		НСтр("ru='воронка продаж'"),
		НСтр("ru='состояние заказа'"),
		НСтр("ru='направление деятельности'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ИспользоватьРемонты2,
		НСтр("ru='серийные номера'"),
		НСтр("ru='серии'"),
		НСтр("ru='сторонний сервис'"),
		НСтр("ru='сервисный центр'"));;
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятияРаботы,
		НСтр("ru='календарь'"),
		НСтр("ru='бригада'"),
		НСтр("ru='планирование'"),
		НСтр("ru='запись'"),
		НСтр("ru='время'"));

КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуПоискаСтраницаПроизводство()
	
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ИспользоватьРучноеРаспределениеМатериаловПоУмолчанию,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьЭтапыПроизводства,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияВыполнениеЭтаповРазнымиПодразделениями,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьПараметрическиеСпецификации,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьТехоперации,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.АвтоматическиПланироватьОперацийЗаказомНаПроизводство,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.РасчетСтоимостиОперацийПоНормеВремени,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияПереработкаДавальческогоСырья,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятия,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));

КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуПоискаСтраницаДеньги()
	
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяУчетВалютныхОпераций,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.НациональнаяВалюта,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ВалютаУчета,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияПлатежныйКалендарь,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьРезервированиеДенежныхСредств,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьСтатьиДвиженияДенежныхСредств,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьОплатуКартамиВОптовойТорговле,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияКредитыИЗаймы,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьОплатуКредитом,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ЧастотаРасчетаКурсовыхРазниц,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ЗачитыватьАвансыДолгиАвтоматически,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ПереводыВПути,
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
		
КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуПоискаСтраницаПерсонал()
	
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата,
		НСтр("ru='налоговая база'"),
		НСтр("ru='отчетность'"),
		НСтр("ru='взносы'"),
		НСтр("ru='платежи'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияВестиШтатноеРасписание,
		НСтр("ru='прием сотрудников на работу'"),
		НСтр("ru='вакантные ставки'"),
		НСтр("ru='труд'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияИспользоватьСовместительство,
		НСтр("ru='тип занятости'"),
		НСтр("ru='несколько должностей'"),
		НСтр("ru='квалификации'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияВестиУчетНалогаНаДоходыИВзносов,
		НСтр("ru='налог на доходы'"),
		НСтр("ru='начисляемые взносы'"),
		НСтр("ru='начисление зарплаты'"));
	ДобавитьСтрокиПоискаВСловарь(
		Элементы.ФункциональнаяОпцияВыполнятьРасчетНДФЛПоПрогрессивнойШкале,
		НСтр("ru='налог на доходы и взносы'"),
		НСтр("ru='регламентированная отчетность'"),
		НСтр("ru='контролирующие органы'"),
		НСтр("ru='резиденты'"),
		НСтр("ru='налоговая база'"));
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуПоискаПанелиАдминистрирования()
	
	ЭтоПолноправныйПользователь = РежимРаботы.ЭтоАдминистраторПрограммы Или РежимРаботы.ЭтоАдминистраторСистемы;
	Если Не ЭтоПолноправныйПользователь Тогда
		Возврат;
	КонецЕсли;
	
	ФормыБСП = ФормыДобавленныхПанелейАдминистрированияБиблиотек();
	ИменаФормБСП = Новый Массив;
	Для каждого СсылкаНаФормуБСП Из ФормыБСП Цикл
		ИменаФормБСП.Добавить(СсылкаНаФормуБСП.Ключ);
	КонецЦикла;
	ВсеСинонимыФормБСП = СинонимыНастроекПанелейАдминистрированияБиблиотек(ИменаФормБСП);
	Для каждого СинонимыФормы Из ВсеСинонимыФормБСП Цикл
		КнопкаБСП = ФормыБСП.Получить(СинонимыФормы.Ключ);
		Если КнопкаБСП <> Неопределено Тогда
			ДобавитьСтрокиПоискаВСловарь(КнопкаБСП, СинонимыФормы.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область УниверсальныеПроцедурыРаботыСНастройками

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура ПриИзмененииЭлементаУНФ(Элемент, ОбновлятьИнтерфейс = Истина)
	
	ОчиститьСообщения();
	
	ИмяКонстанты = ПриИзмененииНастройкиСервер(Элемент.Имя);
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммыУНФ", 2, Истина);
	КонецЕсли;
	
	Если ИмяКонстанты <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, ИмяКонстанты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрефиксВнутреннегоШтрихкодаШтучногоТовараПриИзменении(Элемент, ОбновлятьИнтерфейс = Истина)
	
	ОчиститьСообщения();
	
	ИмяКонстанты = ПриИзмененииНастройкиСервер(Элемент.Имя);
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммыУНФ", 2, Истина);
	КонецЕсли;
	
	Если ИмяКонстанты <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, ИмяКонстанты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммыУНФ()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Функция ПриИзмененииНастройкиСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	ИмяКонстанты = СохранитьЗначениеНастройки(РеквизитПутьКДанным);
	ПрочитатьЗначенияВсехНастроек();
	ПриУстановкеДоступностиНастроек(РеквизитПутьКДанным);
	ОбновитьПовторноИспользуемыеЗначения();
	Возврат ИмяКонстанты;
	
КонецФункции

&НаСервере
Процедура ПрочитатьЗначенияВсехНастроек()
	УстановитьПривилегированныйРежим(Истина);
	ПрочитатьЗначенияКонстант();
	ПриПолученииЗначенийНастроек();
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЗначенияКонстант()
	
	КонстантыНаФорме = Новый Соответствие;
	ПриОпределенииКонстантНаФорме(КонстантыНаФорме);
	
	ВыбираемыеКонстантыЧастьЗапроса = Новый Массив;
	Для каждого ИспользуемаяКонстанта Из КонстантыНаФорме Цикл
		ТекстВыбираемойКонстанты = СтрШаблон("Константы.%1", ИспользуемаяКонстанта.Значение);
		ВыбираемыеКонстантыЧастьЗапроса.Добавить(ТекстВыбираемойКонстанты);
	КонецЦикла;
	
	ТекстЗапросаЧтоВыбрать = СтрСоединить(ВыбираемыеКонстантыЧастьЗапроса, "," + Символы.ПС);
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	%1
	|ИЗ
	|	Константы КАК Константы";
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрШаблон(ШаблонЗапроса, ТекстЗапросаЧтоВыбрать);;
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Для каждого ИспользуемаяКонстанта Из КонстантыНаФорме Цикл
			ЭтотОбъект[ИспользуемаяКонстанта.Ключ] = Результат[ИспользуемаяКонстанта.Значение];
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СохранитьЗначениеНастройки(РеквизитПутьКДанным)
	
	НовоеЗначение = ЭтотОбъект[РеквизитПутьКДанным];
	
	Отказ = Ложь;
	ПроверитьКорректностьНастройкиПередИзменением(РеквизитПутьКДанным, НовоеЗначение, Отказ);
	Если Отказ Тогда
		Возврат "";
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	ПриСохраненииЗначенияНастройки(РеквизитПутьКДанным, НовоеЗначение, СтандартнаяОбработка);
	Если НЕ СтандартнаяОбработка Тогда
		Возврат "";
	КонецЕсли;
	
	КонстантыНаФорме = Новый Соответствие;
	ПриОпределенииКонстантНаФорме(КонстантыНаФорме);
	
	ИмяКонстанты = КонстантыНаФорме.Получить(РеквизитПутьКДанным);
	
	Если НЕ ЗначениеЗаполнено(ИмяКонстанты) Тогда
		Возврат "";
	КонецЕсли;
	
	КонстантаМенеджер = Константы[ИмяКонстанты];
	КонстантаМенеджер.Установить(НовоеЗначение);
	
	Возврат ИмяКонстанты;
	
КонецФункции

&НаСервере
Процедура ПроверитьКорректностьНастройкиПередИзменением(РеквизитПутьКДанным, НовоеЗначение, Отказ)
	
	ТекстОшибки = "";
	ПриПроверкеКорректностиНастройкиПередИзменением(РеквизитПутьКДанным, НовоеЗначение, ТекстОшибки);
	
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,, РеквизитПутьКДанным, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ПереопределяемаяЧасть

// Определяет состав размещенных на форме констант, для автоматического чтения/записи значений.
//
// Параметры:
//  КонстантыНаФорме - Соответствие
//    * Ключ - Строка - Имя реквизита формы.
//    * Значение - Строка - Имя константы.
//
&НаСервере
Процедура ПриОпределенииКонстантНаФорме(КонстантыНаФорме)
	
	ВсеКонстанты = Метаданные.Константы.АвтоматическиНастраиватьРазрешенияВПрофиляхБезопасности.Имя;
	
	КонстантыНаФорме.Вставить("АвтоматическиПланироватьОперацийЗаказомНаПроизводство",
		Метаданные.Константы.АвтоматическиПланироватьОперацийЗаказомНаПроизводство.Имя);
	КонстантыНаФорме.Вставить("АвтоПодборНомеровГТД",
		Метаданные.Константы.АвтоПодборНомеровГТД.Имя);
	КонстантыНаФорме.Вставить("АрхивироватьЧекиККМПриЗакрытииКассовойСмены",
		Метаданные.Константы.АрхивироватьЧекиККМПриЗакрытииКассовойСмены.Имя);
	КонстантыНаФорме.Вставить("БиллингВестиУчетРасходовПоДоговорамОбслуживания",
		Метаданные.Константы.БиллингВестиУчетРасходовПоДоговорамОбслуживания.Имя);
	КонстантыНаФорме.Вставить("БиллингГоловноеНаправлениеДеятельности",
		Метаданные.Константы.БиллингГоловноеНаправлениеДеятельности.Имя);
	КонстантыНаФорме.Вставить("ВалютаУчета",
		Метаданные.Константы.ВалютаУчета.Имя);
	КонстантыНаФорме.Вставить("ВариантВозвратаПоЗакрытойСмене",
		Метаданные.Константы.ВариантВозвратаПоЗакрытойСмене.Имя);
	КонстантыНаФорме.Вставить("ВариантПечатиДоставки",
		Метаданные.Константы.ВариантПечатиДоставки.Имя);
	КонстантыНаФорме.Вставить("ВестиУчетСредствИндивидуальнойЗащиты",
		Метаданные.Константы.ВестиУчетСредствИндивидуальнойЗащиты.Имя);
	КонстантыНаФорме.Вставить("ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати",
		Метаданные.Константы.ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати.Имя);
	КонстантыНаФорме.Вставить("ЗачитыватьАвансыДолгиАвтоматически",
		Метаданные.Константы.ЗачитыватьАвансыДолгиАвтоматически.Имя);
	КонстантыНаФорме.Вставить("ИспользоватьБиллинг",
		Метаданные.Константы.ИспользоватьБиллинг.Имя);
	КонстантыНаФорме.Вставить("ИспользоватьВидыЗаказНарядов",
		Метаданные.Константы.ИспользоватьВидыЗаказНарядов.Имя);
	КонстантыНаФорме.Вставить("ИспользоватьВидыЗаказовПокупателей",
		Метаданные.Константы.ИспользоватьВидыЗаказовПокупателей.Имя);
	КонстантыНаФорме.Вставить("ИспользоватьКорректировкиПоступлений",
		Метаданные.Константы.ИспользоватьКорректировкиПоступлений.Имя);
	КонстантыНаФорме.Вставить("ИспользоватьКорректировкиРеализаций",
		Метаданные.Константы.ИспользоватьКорректировкиРеализаций.Имя);
	КонстантыНаФорме.Вставить("ИспользоватьМобильныйЛичныйКабинет",
		Метаданные.Константы.ИспользоватьМобильныйЛичныйКабинет.Имя);
	КонстантыНаФорме.Вставить("ИспользоватьНесколькоВариантовКП",
		Метаданные.Константы.ИспользоватьНесколькоВариантовКП.Имя);
	КонстантыНаФорме.Вставить("ИспользоватьНесколькоОрганизаций",
		Метаданные.Константы.ИспользоватьНесколькоОрганизаций.Имя);
	КонстантыНаФорме.Вставить("ИспользоватьНеуникальныеШтрихКоды",
		Метаданные.Константы.ИспользоватьНеуникальныеШтрихКоды.Имя);
	КонстантыНаФорме.Вставить("ИспользоватьСегментыНоменклатуры",
		Метаданные.Константы.ИспользоватьСегментыНоменклатуры.Имя);
	КонстантыНаФорме.Вставить("ИспользоватьРемонты",
		Метаданные.Константы.ИспользоватьРемонты.Имя);
	КонстантыНаФорме.Вставить("ИспользоватьРучноеРаспределениеМатериаловПоУмолчанию",
		Метаданные.Константы.ИспользоватьРучноеРаспределениеМатериаловПоУмолчанию.Имя);
	КонстантыНаФорме.Вставить("ИспользоватьЧатботов",
		Метаданные.Константы.ИспользоватьЧатботов.Имя);
	КонстантыНаФорме.Вставить("ИспользоватьШтрихкодированиеПечатныхФормОбъектов",
		Метаданные.Константы.ИспользоватьШтрихкодированиеПечатныхФормОбъектов.Имя);
	КонстантыНаФорме.Вставить("Компания",
		Метаданные.Константы.Компания.Имя);
	КонстантыНаФорме.Вставить("КонтактнаяИнформацияТоварногоЧека",
		Метаданные.Константы.КонтактнаяИнформацияТоварногоЧека.Имя);
	КонстантыНаФорме.Вставить("КонтролироватьОстаткиПоНомерамГТД",
		Метаданные.Константы.КонтролироватьОстаткиПоНомерамГТД.Имя);
	КонстантыНаФорме.Вставить("КонтролироватьОстаткиПриПробитииЧековККМ",
		Метаданные.Константы.КонтролироватьОстаткиПриПробитииЧековККМ.Имя);
	КонстантыНаФорме.Вставить("НациональнаяВалюта",
		Метаданные.Константы.НациональнаяВалюта.Имя);
	КонстантыНаФорме.Вставить("ОтправкаЭлектронныхЧековПослеПробитияЧека",
		Метаданные.Константы.ОтправкаЭлектронныхЧековПослеПробитияЧека.Имя);
	КонстантыНаФорме.Вставить("ПередачаТоваровМеждуОрганизациями",
		Метаданные.Константы.ПередачаТоваровМеждуОрганизациями.Имя);
	КонстантыНаФорме.Вставить("ПечатьПользовательскихЕдиницИзмерения",
		Метаданные.Константы.ПечатьПользовательскихЕдиницИзмерения.Имя);
	КонстантыНаФорме.Вставить("ПредставлениеКодовВПечатныхФормах",
		Метаданные.Константы.ПредставлениеКодовВПечатныхФормах.Имя);
	КонстантыНаФорме.Вставить("ПредставлениеНомераДокументаБезПрефиксаИнформационнойБазы",
		Метаданные.Константы.ПредставлениеНомераДокументаБезПрефиксаИнформационнойБазы.Имя);
	КонстантыНаФорме.Вставить("ПредставлениеНомераДокументаБезПрефиксаОрганизации",
		Метаданные.Константы.ПредставлениеНомераДокументаБезПрефиксаОрганизации.Имя);
	КонстантыНаФорме.Вставить("ПредставлениеНомераДокументаБезПрефиксаПользователя",
		Метаданные.Константы.ПредставлениеНомераДокументаБезПрефиксаПользователя.Имя);
	КонстантыНаФорме.Вставить("ПредставлениеНомераДокументаСЛидирующимиНулями",
		Метаданные.Константы.ПредставлениеНомераДокументаСЛидирующимиНулями.Имя);
	КонстантыНаФорме.Вставить("ПредставлениеСкидкиВПечатнойФорме",
		Метаданные.Константы.ПредставлениеСкидкиВПечатнойФорме.Имя);
	КонстантыНаФорме.Вставить("РасчетСтоимостиОперацийПоНормеВремени",
		Метаданные.Константы.РасчетСтоимостиОперацийПоНормеВремени.Имя);
	КонстантыНаФорме.Вставить("СпособЗачетаПредоплатыПоУмолчанию",
		Метаданные.Константы.СпособЗачетаПредоплатыПоУмолчанию.Имя);
	КонстантыНаФорме.Вставить("СпособРазнесенияОплатыПоУмолчанию",
		Метаданные.Константы.СпособРазнесенияОплатыПоУмолчанию.Имя);
	КонстантыНаФорме.Вставить("СрокОплатыПокупателя",
		Метаданные.Константы.СрокОплатыПокупателя.Имя);
	КонстантыНаФорме.Вставить("СрокОплатыПоставщику",
		Метаданные.Константы.СрокОплатыПоставщику.Имя);
	КонстантыНаФорме.Вставить("ТребоватьЗаполнениеГТДИмпортногоТовара",
		Метаданные.Константы.ТребоватьЗаполнениеГТДИмпортногоТовара.Имя);
	КонстантыНаФорме.Вставить("УдалятьНепробитыеЧекиПриЗакрытииКассовойСмены",
		Метаданные.Константы.УдалятьНепробитыеЧекиПриЗакрытииКассовойСмены.Имя);
	КонстантыНаФорме.Вставить("УчетПоКомпании",
		Метаданные.Константы.УчетПоКомпании.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияВестиУчетНалогаНаДоходыИВзносов",
		Метаданные.Константы.ФункциональнаяОпцияВестиУчетНалогаНаДоходыИВзносов.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером",
		Метаданные.Константы.ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияВестиШтатноеРасписание",
		Метаданные.Константы.ФункциональнаяОпцияВестиШтатноеРасписание.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияВыполнениеЭтаповРазнымиПодразделениями",
		Метаданные.Константы.ФункциональнаяОпцияВыполнениеЭтаповРазнымиПодразделениями.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияВыполнятьРасчетНДФЛПоПрогрессивнойШкале",
		Метаданные.Константы.ФункциональнаяОпцияВыполнятьРасчетНДФЛПоПрогрессивнойШкале.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьАгентскиеУслуги",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьАгентскиеУслуги.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьБонусныеПрограммы",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьБонусныеПрограммы.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьБюджетирование",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьБюджетирование.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьДисконтныеКарты",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьДисконтныеКарты.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговлеДляНастроек",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговлеДляНастроек.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьКорректировкиДолга",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьКорректировкиДолга.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьНаборы",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьНаборы.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьОплатуКартамиВОптовойТорговле",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьОплатуКартамиВОптовойТорговле.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьОплатуКредитом",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьОплатуКредитом.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьОрдерныйСклад",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьОрдерныйСклад.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьОтчетность",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьОтчетность.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьПараметрическиеСпецификации",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьПараметрическиеСпецификации.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьПартии",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьПартии.Имя);
	КонстантыНаФорме.Вставить("ИспользоватьСерииНоменклатуры",
		Метаданные.Константы.ИспользоватьСерииНоменклатуры.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьПечатьЭтикетокИЦенников",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьПечатьЭтикетокИЦенников.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьПланПродаж",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьПланПродаж.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьПодарочныеСертификаты",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьПодарочныеСертификаты.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьПодсистемуЗарплата",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьПодсистемуПроизводство",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьПодсистемуРаботы",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьПодсистемуРаботы.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьПредоплатуВЧекахККМ",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьПредоплатуВЧекахККМ.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьРезервированиеДенежныхСредств",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьРезервированиеДенежныхСредств.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиЗакупки",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиЗакупки.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьСборкуЗаказов",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьСборкуЗаказов.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьСверкиВзаиморасчетов",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьСверкиВзаиморасчетов.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьСервисРасчетПотребностей",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьСервисРасчетПотребностей.Имя);
	КонстантыНаФорме.Вставить("УчетПотребностиПоСкладам",
		Метаданные.Константы.УчетПотребностиПоСкладам.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьСовместительство",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьСовместительство.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьСтатьиДвиженияДенежныхСредств",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьСтатьиДвиженияДенежныхСредств.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьТехоперации",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьТехоперации.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьХарактеристики",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьХарактеристики.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьЧастичноеПогашениеСертификатов",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьЧастичноеПогашениеСертификатов.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьЭтапыПроизводства",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьЭтапыПроизводства.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов",
		Метаданные.Константы.ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияКонтрольДоговоров",
		Метаданные.Константы.ФункциональнаяОпцияКонтрольДоговоров.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияКредитыИЗаймы",
		Метаданные.Константы.ФункциональнаяОпцияКредитыИЗаймы.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияПередачаЗапасовНаОтветХранение",
		Метаданные.Константы.ФункциональнаяОпцияПередачаЗапасовНаОтветХранение.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияПередачаСырьяВПереработку",
		Метаданные.Константы.ФункциональнаяОпцияПередачаСырьяВПереработку.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияПередачаТоваровНаКомиссию",
		Метаданные.Константы.ФункциональнаяОпцияПередачаТоваровНаКомиссию.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияПереработкаДавальческогоСырья",
		Метаданные.Константы.ФункциональнаяОпцияПереработкаДавальческогоСырья.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятия",
		Метаданные.Константы.ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятия.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятияЖурналЗаписи",
		Метаданные.Константы.ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятияЖурналЗаписи.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятияРаботы",
		Метаданные.Константы.ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятияРаботы.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияПлатежныйКалендарь",
		Метаданные.Константы.ФункциональнаяОпцияПлатежныйКалендарь.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияПриемЗапасовНаОтветХранение",
		Метаданные.Константы.ФункциональнаяОпцияПриемЗапасовНаОтветХранение.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияПриемТоваровНаКомиссию",
		Метаданные.Константы.ФункциональнаяОпцияПриемТоваровНаКомиссию.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияРазрешитьСкладыВТабличныхЧастях",
		Метаданные.Константы.ФункциональнаяОпцияРазрешитьСкладыВТабличныхЧастях.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияРезервированиеЗапасов",
		Метаданные.Константы.ФункциональнаяОпцияРезервированиеЗапасов.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияУчетВнеоборотныхАктивов",
		Метаданные.Константы.ФункциональнаяОпцияУчетВнеоборотныхАктивов.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияУчетВРазличныхЕдиницахИзмерения",
		Метаданные.Константы.ФункциональнаяОпцияУчетВРазличныхЕдиницахИзмерения.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияУчетГТД",
		Метаданные.Константы.ФункциональнаяОпцияУчетГТД.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияУчетНоменклатурыПоставщиков",
		Метаданные.Константы.ФункциональнаяОпцияУчетНоменклатурыПоставщиков.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияУчетПоНесколькимНаправлениямДеятельности",
		Метаданные.Константы.ФункциональнаяОпцияУчетПоНесколькимНаправлениямДеятельности.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияУчетПоНесколькимПодразделениям",
		Метаданные.Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияУчетПоНесколькимСкладам",
		Метаданные.Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияУчетПоПроектам",
		Метаданные.Константы.ФункциональнаяОпцияУчетПоПроектам.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияУчетПоЯчейкам",
		Метаданные.Константы.ФункциональнаяОпцияУчетПоЯчейкам.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияУчетРозничныхПродаж",
		Метаданные.Константы.ФункциональнаяОпцияУчетРозничныхПродаж.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияУчетЦенКонтрагентов",
		Метаданные.Константы.ФункциональнаяОпцияУчетЦенКонтрагентов.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяУчетВалютныхОпераций",
		Метаданные.Константы.ФункциональнаяУчетВалютныхОпераций.Имя);
	КонстантыНаФорме.Вставить("ЧастотаРасчетаКурсовыхРазниц",
		Метаданные.Константы.ЧастотаРасчетаКурсовыхРазниц.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьАгентскиеПлатежиИРазделениеВыручки",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьАгентскиеПлатежиИРазделениеВыручки.Имя);
	КонстантыНаФорме.Вставить("ВестиУчетПрослеживаемыхТоваров",
		Метаданные.Константы.ВестиУчетПрослеживаемыхТоваров.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьМинимальныеЦены",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьМинимальныеЦены.Имя);
	КонстантыНаФорме.Вставить("ФункциональнаяОпцияИспользоватьОписьСдаваемыхДенег",
		Метаданные.Константы.ФункциональнаяОпцияИспользоватьОписьСдаваемыхДенег.Имя);
	
КонецПроцедуры

// Вызывается для получения значений настроек, не хранящихся в константах.
//
&НаСервере
Процедура ПриПолученииЗначенийНастроек()
	
	УстановитьПривилегированныйРежим(Истина);
	АвтоПодборНомеровГТД = (Константы.АвтоПодборНомеровГТД.Получить() = Перечисления.ДаНет.Да);
	РегистрацияВзаимодействия = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	ИспользоватьЧатботов = Константы.ИспользоватьЧатботов.Получить();
	КонтрагентДляПредоплаты = Константы.КонтрагентДляПодарочныхСертификатов.Получить();
	ОтправкаЭлектронныхЧековПослеПробитияЧека = Число(Не Константы.ОтправкаЭлектронныхЧековПослеПробитияЧека.Получить());
	РегЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.РассылкаЭлектронныхЧеков);
	АвтоматическаяОтправкаЭлектронныхЧековПоРасписанию = ?(РегЗадание = Неопределено, Неопределено, РегЗадание.Использование);
	
КонецПроцедуры

// Подходит для проверки возможности включения/выключения конкретной настройки.
// Ошибка - изменение значения настройки запрещено.
// В случае ошибки будет показано сообщение пользователю и изменение настройки будет отклонено.
//
// Параметры:
//  РеквизитПутьКДанным - Строка - Путь к реквизиту форму.
//  НовоеЗначение - Произвольный - Новое значение настройки.
//  ТекстОшибки - Строка - Возвращаемое значение. Текст ошибки в случае невозможности изменения настройки.
//
&НаСервере
Процедура ПриПроверкеКорректностиНастройкиПередИзменением(РеквизитПутьКДанным, НовоеЗначение, ТекстОшибки)
	
	Если РеквизитПутьКДанным = "ИспользоватьНесколькоОрганизаций" Тогда
		
		Если Не НовоеЗначение Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьИспользоватьНесколькоОрганизаций();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "УчетПоКомпании" Тогда
		
		Если НовоеЗначение Тогда
			Если Константы.ПередачаТоваровМеждуОрганизациями.Получить() Тогда
				ТекстОшибки = НСтр("ru='Включена настройка передачи товаров между организациями (интеркампани). Для включения опции необходимо отключить передачу.'");
			ИначеЕсли НастройкиУНФ.ЕстьДвиженияПоДругимОрганизациям(Справочники.Организации.ОсновнаяОрганизация) Тогда
				ТекстОшибки = НСтр("ru='В базе есть движения по организации, отличной от основной. Для включения опции необходимо очистить данные по прочим организациям.'");
			КонецЕсли;
		Иначе
			ТекстОшибки = НастройкиУНФ.ОтказСнятьУчетПоКомпании();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "Компания" Тогда
		
		Если Не ЗначениеЗаполнено(НовоеЗначение) И Константы.УчетПоКомпании.Получить() Тогда
			ТекстОшибки = НСтр("ru='Не заполнена организация-компания для ведения учета по компании'");
		ИначеЕсли НовоеЗначение <> Константы.Компания.Получить() Тогда
			Если НастройкиУНФ.ЕстьДвиженияПоДругимОрганизациям(НовоеЗначение) Тогда
				ТекстОшибки = НСтр("ru='В базе есть движения по организации, отличной от выбранной. Для включения опции необходимо очистить данные по прочим организациям.'");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ПередачаТоваровМеждуОрганизациями" Тогда
		
		Если НовоеЗначение Тогда
			Если УчетПоКомпании Тогда
				ТекстОшибки = НСтр("ru='Включена настройка учета по компании. Для включения опции необходимо отключить учет по компании.'");
			КонецЕсли;
		Иначе
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияПередачаТоваровМеждуОрганизациями(); 
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияУчетПоНесколькимПодразделениям" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить()
			И Справочники.СтруктурныеЕдиницы.КоличествоСтруктурныхЕдиниц(Перечисления.ТипыСтруктурныхЕдиниц.Подразделение, Ложь) > 0 Тогда
			
			ТекстОшибки = НСтр("ru='В базе имеются подразделения, отличные от основного. Снятие опции запрещено.'");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияУчетПоНесколькимНаправлениямДеятельности" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетПоНесколькимНаправлениямДеятельности.Получить()
			И Справочники.НаправленияДеятельности.КоличествоНаправленийДеятельности(Ложь, Ложь) > 0 Тогда
			
			ТекстОшибки = НСтр("ru='В базе имеются направления деятельности, отличные от основного. Снятие опции запрещено.'");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов" Тогда
		
		Если НовоеЗначение И Не Константы.ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов.Получить()
			И Не ПолучитьФункциональнуюОпцию("РазноситьОплатуОтЭквайрераПоЭквайринговымОперациям")
			И РегистрыНакопления.РасчетыПоЭквайрингу.ЕстьДвиженияПоЭквайрингу() Тогда
			
			ТекстОшибки = НСтр("ru = 'Регистр накопления ""Расчеты по эквайрингу"" содержит информацию об эквайринговых операциях. Установка опции запрещена.
				|Выполнить анализ можно в отчете ""Расчеты по эквайрингу (сводно)"" с детализацией до регистратора. Отчет вызывается из раздела ""Деньги"".'");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияУчетВнеоборотныхАктивов" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетВнеоборотныхАктивов.Получить()
			И Справочники.ВнеоборотныеАктивы.ЕстьДвиженияПоВнеоборотнымАктивам() Тогда
			
			ТекстОшибки = НСтр("ru='В базе присутствуют движения по внеоборотным активам. Снятие опции запрещено.'");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ИспользоватьНесколькоВариантовКП" Тогда
		
		Если Не НовоеЗначение Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияНесколькоВариантовКП();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "КонтрольДоговоровКонтрагентов" Тогда
		
		Если УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов() 
			И НовоеЗначение = 1 Тогда
			ТекстОшибки = НСтр("ru = 'Настроена синхронизация с ""1C: Бухгалтерия предприятия, контролировать договора необходимо обязательно.'");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияИспользоватьСкидкиНаценки();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьДисконтныеКарты" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьДисконтныеКарты.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияИспользоватьДисконтныеКарты();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодарочныеСертификаты" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьПодарочныеСертификаты.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияИспользоватьПодарочныеСертификаты();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "КонтрагентДляПредоплаты" Тогда
		
		ТекстОшибки = НастройкиУНФ.ОтказИзменитьКонтрагентДляПредоплаты();
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияПередачаТоваровНаКомиссию" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияПередачаТоваровНаКомиссию.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияПередачаТоваровНаКомиссию();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияПриемТоваровНаКомиссию" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияПриемТоваровНаКомиссию.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияПриемТоваровНаКомиссию();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ИспользоватьРемонты" Тогда
		
		Если Не НовоеЗначение И Константы.ИспользоватьРемонты.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияИспользоватьРемонты();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьНаборы" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьНаборы.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияИспользоватьНаборы();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ИспользоватьВидыЗаказовПокупателей" Тогда
		
		Если Не НовоеЗначение Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияИспользоватьВидыЗаказовПокупателей();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияУчетРозничныхПродаж" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетРозничныхПродаж.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияУчетРозничныхПродаж();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "КонтролироватьОстаткиПриПробитииЧековККМ" Тогда
		
		// От значения константы зависит работа РМК.
		ТекстОшибки = НастройкиУНФ.ОтказСнятиеФункциональнаяОпцияКонтролироватьОстаткиПриПробитииЧековККМ();
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговлеДляНастроек" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговлеДляНастроек.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговле();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ИспользоватьБиллинг" Тогда
		
		Если НЕ НовоеЗначение И Справочники.ДоговорыКонтрагентов.ЕстьДоговорыОбслуживания() Тогда
			ТекстОшибки = НСтр("ru='В базе имеются договоры обслуживания. Снятие опции запрещено.'");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "БиллингВестиУчетРасходовПоДоговорамОбслуживания" Тогда
		
		Если НЕ НовоеЗначение И Справочники.ДоговорыКонтрагентов.ЕстьДоговорыОбслуживанияСУникальнымиНаправлениямиДеятельности() Тогда
			ТекстОшибки = НСтр("ru='В базе имеются договоры обслуживания с выбранными направлениями деятельности. Снятие опции запрещено.'");
		КонецЕсли;
		Если НЕ НовоеЗначение И Справочники.ТарифныеПланыДоговоровОбслуживания.ЕстьТарифныеПланыСУчетомЗатрат() Тогда
			ТекстОшибки = НСтр("ru='В базе имеются тарифные планы с заданными правилами выставления затрат. Снятие опции запрещено.'");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияУчетПоНесколькимСкладам" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятиеУчетПоНесколькимСкладам();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияРазрешитьСкладыВТабличныхЧастях" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияРазрешитьСкладыВТабличныхЧастях.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятиеРазрешитьСкладыВТабличныхЧастях();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияУчетВРазличныхЕдиницахИзмерения" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетВРазличныхЕдиницахИзмерения.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияУчетВРазличныхЕдиницахИзмерения();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьХарактеристики" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьХарактеристики.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияИспользоватьХарактеристики();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПартии" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьПартии.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияИспользоватьПартии();
		КонецЕсли;
			
	ИначеЕсли РеквизитПутьКДанным = "ИспользоватьНеуникальныеШтрихКоды" Тогда
		
		Если Не НовоеЗначение И Константы.ИспользоватьНеуникальныеШтрихКоды.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьКонстантуИспользоватьНеуникальныеШтрихКоды();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ИспользоватьСерииНоменклатуры" Тогда
		
		Если Не НовоеЗначение И Константы.ИспользоватьСерииНоменклатуры.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияИспользоватьСерииНоменклатуры();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "КонтрольОстатковСерийНоменклатуры" Тогда
		
		Если НовоеЗначение = Ложь И Константы.КонтрольОстатковСерийНоменклатуры.Получить() = Истина Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияИспользоватьСерииНоменклатуры();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "УчетПотребностиПоСкладам" Тогда
		
		Если НЕ НовоеЗначение И Константы.УчетПотребностиПоСкладам.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказИзменитьНастройкуУчетПотребностиПоСкладам();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияУчетГТД" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетГТД.Получить()
			И РегистрыНакопления.ЗапасыВРазрезеГТД.ЕстьОстаткиПоЗапасамВРазрезеГТД() Тогда
			ТекстОшибки = НСтр("ru='В базе есть остатки по запасам в разрезе ГТД. Снятие флага запрещено.'");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "КонтролироватьОстаткиПоНомерамГТД" Тогда
		
		ТекстОшибки = ГрузовыеТаможенныеДекларацииСервер.ОтказИзменитьНастройкуКонтролироватьОстаткиПоНомерамГТД();
		
	ИначеЕсли РеквизитПутьКДанным = "ВестиУчетПрослеживаемыхТоваров" Тогда
		
		Если Не НовоеЗначение И Константы.ВестиУчетПрослеживаемыхТоваров.Получить()
			И ПрослеживаемостьУНФ.ЕстьОстаткиПрослеживаемости() Тогда
			ТекстОшибки = ПрослеживаемостьУНФ.ОтказОтключитьУчетПрослеживаемыхТоваров();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиЗакупки" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиЗакупки.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиЗакупки();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияУчетЦенКонтрагентов" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетЦенКонтрагентов.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияУчетЦенКонтрагентов();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияУчетНоменклатурыПоставщиков" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетЦенКонтрагентов.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияУчетЦенКонтрагентов();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияРезервированиеЗапасов" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияРезервированиеЗапасов();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияПриемЗапасовНаОтветХранение" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияПриемЗапасовНаОтветХранение.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияПриемЗапасовНаОтветХранение();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияПередачаСырьяВПереработку" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияПередачаСырьяВПереработку.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияПередачаСырьяВПереработку();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияПередачаЗапасовНаОтветХранение" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияПередачаЗапасовНаОтветХранение.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияПередачаЗапасовНаОтветХранение();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьОрдерныйСклад" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьОрдерныйСклад.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияИспользоватьОрдерныйСклад();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияУчетПоЯчейкам" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетПоЯчейкам.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияУчетПоЯчейкам();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуРаботы" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьПодсистемуРаботы.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуРаботы();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ИспользоватьВидыЗаказНарядов" Тогда
		
		Если Не НовоеЗначение Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияИспользоватьВидыЗаказНарядов();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ИспользоватьРемонты2" Тогда
		
		Если Не НовоеЗначение И Константы.ИспользоватьРемонты.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияИспользоватьРемонты();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуПроизводство" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуПроизводство();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьЭтапыПроизводства" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьЭтапыПроизводства.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятиеФункциональнаяОпцияИспользоватьЭтапыПроизводства();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияВыполнениеЭтаповРазнымиПодразделениями" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияВыполнениеЭтаповРазнымиПодразделениями.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятиеФункциональнаяОпцияВыполнениеЭтаповРазнымиПодразделениями();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПараметрическиеСпецификации" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьПараметрическиеСпецификации.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятиеФункциональнаяОпцияИспользоватьПараметрическиеСпецификации();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьТехоперации" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьТехоперации.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияИспользоватьТехоперации();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияПереработкаДавальческогоСырья" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияПереработкаДавальческогоСырья.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияПереработкаДавальческогоСырья();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяУчетВалютныхОпераций" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяУчетВалютныхОпераций.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяУчетВалютныхОпераций();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ВалютаУчета" Тогда
		
		ТекстОшибки = НастройкиУНФ.ОтказИзменитьВалютаУчета();
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияПлатежныйКалендарь" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьРезервированиеДенежныхСредств.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияИспользоватьРезервированиеДенежныхСредств();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьРезервированиеДенежныхСредств" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьРезервированиеДенежныхСредств.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияИспользоватьРезервированиеДенежныхСредств();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьСтатьиДвиженияДенежныхСредств" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьСтатьиДвиженияДенежныхСредств.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяИспользоватьСтатьиДвиженияДенежныхСредств();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияКредитыИЗаймы" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияКредитыИЗаймы.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияКредитыИЗаймы();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуЗарплата" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуЗарплата();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьСовместительство" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьСовместительство.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияИспользоватьСовместительство();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияВестиУчетНалогаНаДоходыИВзносов" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияВестиУчетНалогаНаДоходыИВзносов.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияВестиУчетНалогаНаДоходыИВзносов();
		КонецЕсли;
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияВыполнятьРасчетНДФЛПоПрогрессивнойШкале" Тогда 	
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияВыполнятьРасчетНДФЛПоПрогрессивнойШкале.Получить() Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияВыполнятьРасчетНДФЛПоПрогрессивнойШкале();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "МаксимальныйРазмерФайла" Тогда
		
		ТекстОшибки = ?(НовоеЗначение = 0, НСтр("ru='Поле ""Максимальный размер файла"" не заполнено.'"),"");
		
	ИначеЕсли РеквизитПутьКДанным = "МаксимальныйРазмерФайлаОбластиДанных" Тогда
		
		ТекстОшибки = ?(НовоеЗначение = 0, НСтр("ru='Поле ""Максимальный размер файла"" не заполнено.'"),"");
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьАгентскиеПлатежиИРазделениеВыручки" Тогда
		
		Если Не НовоеЗначение Тогда
			ТекстОшибки = НастройкиУНФ.ОтказСнятьИспользоватьАгентскиеПлатежиИРазделениеВыручки();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьМинимальныеЦены" Тогда
		
		Если Не НовоеЗначение 
			И Константы.ФункциональнаяОпцияИспользоватьМинимальныеЦены.Получить() Тогда 
			
			ТекстОшибки = НастройкиУНФ.ОтказСнятьФункциональнаяОпцияИспользоватьМинимальныеЦены();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при сохранении значения настройки. Можно переопределить алгоритм сохранения.
//
&НаСервере
Процедура ПриСохраненииЗначенияНастройки(РеквизитПутьКДанным, НовоеЗначение, СтандартнаяОбработка)
	
	Если РеквизитПутьКДанным = "ИспользоватьНесколькоОрганизаций" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ИспользоватьНесколькоОрганизаций.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ИспользоватьНесколькоОрганизаций");
		Если Не НовоеЗначение Тогда
			Константы.УчетПоКомпании.Установить(Ложь);
			Константы.Компания.Установить(Справочники.Организации.ПустаяСсылка());
			ИзмененныеКонстантыУНФ.Добавить("УчетПоКомпании");
			ИзмененныеКонстантыУНФ.Добавить("Компания");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "УчетПоКомпании" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.УчетПоКомпании.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("УчетПоКомпании");
		Если НовоеЗначение И Не ЗначениеЗаполнено(Константы.Компания.Получить()) Тогда
			Константы.Компания.Установить(Справочники.Организации.ОсновнаяОрганизация);
			ИзмененныеКонстантыУНФ.Добавить("Компания");
		ИначеЕсли Не НовоеЗначение Тогда
			Константы.Компания.Установить(Справочники.Организации.ПустаяСсылка());
			ИзмененныеКонстантыУНФ.Добавить("Компания");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьОтчетность" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияИспользоватьОтчетность.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьОтчетность");
		Если НовоеЗначение Тогда
			Константы.ВестиРасчетыПоДокументам.Установить(Истина);
			ИзмененныеКонстантыУНФ.Добавить("ВестиРасчетыПоДокументам");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов");
		Если НовоеЗначение Тогда
			Константы.ФункциональнаяОпцияРазноситьОплатуОтЭквайрераПоЭквайринговымОперациям.Установить(Истина);
			Константы.ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером.Установить(Истина);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияРазноситьОплатуОтЭквайрераПоЭквайринговымОперациям");
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ИспользоватьЧатботов" Тогда
		
		СтандартнаяОбработка = Ложь;
		ЧатботСервер.ПереключитьИспользованиеЧатботов(НовоеЗначение);
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятияЖурналЗаписи" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятияЖурналЗаписи.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятияЖурналЗаписи");
		Если НовоеЗначение Тогда
			Документы.Событие.СоздатьПоставляемыеШаблоныСообщенийПоУслугам();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ИспользоватьЧатбот" Тогда
		
		СтандартнаяОбработка = Ложь;
		ЧатботСервер.ПереключитьИспользованиеЧатботов(НовоеЗначение);
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьДисконтныеКарты" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияИспользоватьДисконтныеКарты.Установить(НовоеЗначение);
		Если НовоеЗначение И Не Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи.Получить() Тогда
			Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи.Установить(Истина);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи");
		КонецЕсли;
		Если НовоеЗначение И Не Константы.ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки.Получить() Тогда
			Константы.ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки.Установить(Истина);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки");
			ДисконтныеКартыУНФСервер.ПроверитьИСоздатьУсловиеПоДисконтнойКарте();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьБонусныеПрограммы" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияИспользоватьБонусныеПрограммы.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьБонусныеПрограммы");
		Если НовоеЗначение И Не Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи.Получить() Тогда
			Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи.Установить(Истина);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи");
		КонецЕсли;
		Если НовоеЗначение И Не Константы.ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки.Получить() Тогда
			Константы.ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки.Установить(Истина);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки");
		КонецЕсли;
		Если НовоеЗначение И Не Константы.ФункциональнаяОпцияИспользоватьДисконтныеКарты.Получить() Тогда
			Константы.ФункциональнаяОпцияИспользоватьДисконтныеКарты.Установить(Истина);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьДисконтныеКарты");
		КонецЕсли;
		Если НовоеЗначение Тогда
			РаботаСБонусами.СоздатьШаблоныСообщенийПоУмолчанию();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодарочныеСертификаты" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияИспользоватьПодарочныеСертификаты.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьПодарочныеСертификаты");
		Если НовоеЗначение Тогда
			РаботаСПодарочнымиСертификатами.СоздатьСлужебногоКонтрагента();
			ИзмененныеКонстантыУНФ.Добавить("КонтрагентДляПредоплаты");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "КонтрагентДляПредоплаты" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.КонтрагентДляПодарочныхСертификатов.Установить(НовоеЗначение);
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьЧастичноеПогашениеСертификатов" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияИспользоватьЧастичноеПогашениеСертификатов.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьЧастичноеПогашениеСертификатов");
		Если НовоеЗначение Тогда
			Константы.ИспользоватьСерииНоменклатуры.Установить(Истина);
			ИзмененныеКонстантыУНФ.Добавить("ИспользоватьСерииНоменклатуры");
			Константы.КонтрольОстатковСерийНоменклатуры.Установить(Истина);
			ИзмененныеКонстантыУНФ.Добавить("КонтрольОстатковСерийНоменклатуры");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияУчетРозничныхПродаж" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияУчетРозничныхПродаж.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияУчетРозничныхПродаж");
		// Если установили опцию, то установим и служебную опцию "ФункциональнаяОпцияИспользоватьОплатуКартами".
		Если НовоеЗначение Тогда
			Константы.ФункциональнаяОпцияИспользоватьОплатуКартами.Установить(Истина);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьОплатуКартами");
			// Если нет движений оплаты платежными картами и
			// все 3 опции сброшены, то сбросим и служебную опцию "ФункциональнаяОпцияИспользоватьОплатуКартами".
		ИначеЕсли НЕ РегистрыНакопления.ОплатаПлатежнымиКартами.ЕстьДвиженияПоОплате()
			И НЕ Константы.ФункциональнаяОпцияИспользоватьОплатуКартамиВОптовойТорговле.Получить()
			И НЕ Константы.ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером.Получить() Тогда
			Константы.ФункциональнаяОпцияИспользоватьОплатуКартами.Установить(Ложь);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьОплатуКартами");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговлеДляНастроек" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговлеДляНастроек.Установить(НовоеЗначение);
		Константы.ФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговле.Установить(НовоеЗначение И Константы.ФункциональнаяОпцияУчетРозничныхПродаж.Получить());
		
	ИначеЕсли РеквизитПутьКДанным = "ВариантВозвратаПоЗакрытойСмене" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ВариантВозвратаПоЗакрытойСмене.Установить(НовоеЗначение);
		
	ИначеЕсли РеквизитПутьКДанным = "ОтправкаЭлектронныхЧековПослеПробитияЧека" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОтправкаЭлектронныхЧековПослеПробития = Не Булево(НовоеЗначение);
		Константы.ОтправкаЭлектронныхЧековПослеПробитияЧека.Установить(ОтправкаЭлектронныхЧековПослеПробития);
		Если ОтправкаЭлектронныхЧековПослеПробития Тогда
			РегЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.РассылкаЭлектронныхЧеков);
			РегЗадание.Использование = НовоеЗначение;
			РегЗадание.Записать();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "АвтоматическаяОтправкаЭлектронныхЧековПоРасписанию" Тогда
		
		СтандартнаяОбработка = Ложь;
		РегЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.РассылкаЭлектронныхЧеков);
		РегЗадание.Использование = НовоеЗначение;
		РегЗадание.Записать();
		
	ИначеЕсли РеквизитПутьКДанным = "ИспользоватьБиллинг" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ИспользоватьБиллинг.Установить(НовоеЗначение);
		Если НовоеЗначение = Ложь Тогда
			Константы.БиллингВестиУчетРасходовПоДоговорамОбслуживания.Установить(Ложь);
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "БиллингВестиУчетРасходовПоДоговорамОбслуживания" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.БиллингВестиУчетРасходовПоДоговорамОбслуживания.Установить(НовоеЗначение);
		Если НовоеЗначение И НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимНаправлениямДеятельности.Получить() Тогда
			Константы.ФункциональнаяОпцияУчетПоНесколькимНаправлениямДеятельности.Установить(НовоеЗначение);
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "БиллингГоловноеНаправлениеДеятельности" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.БиллингГоловноеНаправлениеДеятельности.Установить(НовоеЗначение);
		Справочники.НаправленияДеятельности.СгруппироватьНаправленияДеятельностиДоговоровОбслуживания();
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияУчетПоЯчейкам" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если НовоеЗначение = Истина И НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
			Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Установить(Истина);
		КонецЕсли;
		Константы.ФункциональнаяОпцияУчетПоЯчейкам.Установить(НовоеЗначение);
		
	ИначеЕсли РеквизитПутьКДанным = "ИспользоватьРемонты2" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ИспользоватьРемонты.Установить(НовоеЗначение);
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятияРаботы" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятияРаботы.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятияРаботы");
		Если НовоеЗначение Тогда
			Документы.ЗаказПокупателя.СоздатьПоставляемыеШаблоныСообщенийПоУслугам();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуПроизводство" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьПодсистемуПроизводство");
		Если НовоеЗначение = Ложь Тогда
			Константы.ФункциональнаяОпцияПереработкаДавальческогоСырья.Установить(Ложь);
			Константы.ФункциональнаяОпцияИспользоватьТехоперации.Установить(Ложь);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияПереработкаДавальческогоСырья");
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьТехоперации");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером");
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияРазноситьОплатуОтЭквайрераПоЭквайринговымОперациям.Получить() = Истина Тогда
			Константы.ФункциональнаяОпцияРазноситьОплатуОтЭквайрераПоЭквайринговымОперациям.Установить(Ложь);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияРазноситьОплатуОтЭквайрераПоЭквайринговымОперациям");
		КонецЕсли;
		
		// Если установили опцию, то установим и служебную опцию "ФункциональнаяОпцияИспользоватьОплатуКартами".
		Если НовоеЗначение Тогда
			Константы.ФункциональнаяОпцияИспользоватьОплатуКартами.Установить(Истина);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьОплатуКартами");
			// Если нет движений оплаты платежными картами и
			// все 4 опции сброшены, то сбросим и служебную опцию "ФункциональнаяОпцияИспользоватьОплатуКартами".
		ИначеЕсли НЕ РегистрыНакопления.ОплатаПлатежнымиКартами.ЕстьДвиженияПоОплате()
			И НЕ Константы.ФункциональнаяОпцияУчетРозничныхПродаж.Получить()
			И НЕ Константы.ФункциональнаяОпцияИспользоватьОплатуКартамиВОптовойТорговле.Получить()
			И НЕ Константы.ФункциональнаяОпцияИспользоватьОплатуКредитом.Получить() Тогда
			Константы.ФункциональнаяОпцияИспользоватьОплатуКартами.Установить(Ложь);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьОплатуКартами");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьОплатуКартамиВОптовойТорговле" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияИспользоватьОплатуКартамиВОптовойТорговле.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьОплатуКартамиВОптовойТорговле");
		// Если установили опцию, то установим и служебную опцию "ФункциональнаяОпцияИспользоватьОплатуКартами".
		Если НовоеЗначение И Не Константы.ФункциональнаяОпцияИспользоватьОплатуКартами.Получить() Тогда
			Константы.ФункциональнаяОпцияИспользоватьОплатуКартами.Установить(Истина);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьОплатуКартами");
			// Если нет движений оплаты платежными картами и
			// все 4 опции сброшены, то сбросим и служебную опцию "ФункциональнаяОпцияИспользоватьОплатуКартами".
		ИначеЕсли НЕ РегистрыНакопления.ОплатаПлатежнымиКартами.ЕстьДвиженияПоОплате()
			И НЕ Константы.ФункциональнаяОпцияУчетРозничныхПродаж.Получить()
			И НЕ Константы.ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером.Получить()
			И НЕ Константы.ФункциональнаяОпцияИспользоватьОплатуКредитом.Получить() Тогда
			Константы.ФункциональнаяОпцияИспользоватьОплатуКартами.Установить(Ложь);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьОплатуКартами");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьОплатуКредитом" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияИспользоватьОплатуКредитом.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьОплатуКредитом");
		Если НовоеЗначение И Не Константы.ФункциональнаяОпцияИспользоватьОплатуКартами.Получить() Тогда
			Константы.ФункциональнаяОпцияИспользоватьОплатуКартами.Установить(Истина);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьОплатуКартами");
			// Если нет движений оплаты платежными картами и
			// все 4 опции сброшены, то сбросим и служебную опцию "ФункциональнаяОпцияИспользоватьОплатуКартами".
		ИначеЕсли НЕ РегистрыНакопления.ОплатаПлатежнымиКартами.ЕстьДвиженияПоОплате()
			И НЕ Константы.ФункциональнаяОпцияУчетРозничныхПродаж.Получить()
			И НЕ Константы.ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером.Получить()
			И НЕ Константы.ФункциональнаяОпцияИспользоватьОплатуКартамиВОптовойТорговле.Получить() Тогда
			Константы.ФункциональнаяОпцияИспользоватьОплатуКартами.Установить(Ложь);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьОплатуКартами");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуЗарплата" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьПодсистемуЗарплата");
		Если НовоеЗначение = Ложь Тогда
			Константы.ФункциональнаяОпцияИспользоватьСовместительство.Установить(Ложь);
			Константы.ФункциональнаяОпцияВестиШтатноеРасписание.Установить(Ложь);
			Константы.ФункциональнаяОпцияВестиУчетНалогаНаДоходыИВзносов.Установить(Ложь);
			Константы.ФункциональнаяОпцияВыполнятьРасчетНДФЛПоПрогрессивнойШкале.Установить(Ложь);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьСовместительство");
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияВестиШтатноеРасписание");
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияВестиУчетНалогаНаДоходыИВзносов");
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияВыполнятьРасчетНДФЛПоПрогрессивнойШкале");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Подходит для установи доступности взаимосвязанных настроек.
//
// Параметры:
//  РеквизитПутьКДанным - Строка - Пустая при первом открытии формы.
//                                 Заполнена при изменении одной из настроек формы.
//
&НаСервере
Процедура ПриУстановкеДоступностиНастроек(РеквизитПутьКДанным = "")
	
	Если РеквизитПутьКДанным = "ИспользоватьНесколькоОрганизаций"
		Или РеквизитПутьКДанным = "" Тогда
		Элементы.УчетПоКомпании.Доступность = ИспользоватьНесколькоОрганизаций;
		Элементы.ГруппаПередачаТоваров.Доступность = ИспользоватьНесколькоОрганизаций;
		Элементы.ГруппаНастройкаПередачиТоваров.Доступность = ИспользоватьНесколькоОрганизаций;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "ИспользоватьНесколькоОрганизаций"
		Или РеквизитПутьКДанным = "УчетПоКомпании"
		Или РеквизитПутьКДанным = "" Тогда
		Элементы.Компания.Доступность = ИспользоватьНесколькоОрганизаций И УчетПоКомпании;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки" Или РеквизитПутьКДанным = "" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбработкаВидыСкидокНаценокРучныеИАвтоматическиеОткрытьОкругления", "Доступность", ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки);
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодарочныеСертификаты" Или РеквизитПутьКДанным = "" Тогда
		Элементы.КонтрагентДляПредоплаты.Доступность = ФункциональнаяОпцияИспользоватьПодарочныеСертификаты;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодарочныеСертификаты" Или РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияИспользоватьЧастичноеПогашениеСертификатов.Доступность = ФункциональнаяОпцияИспользоватьПодарочныеСертификаты;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПартии" Или РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияПриемТоваровНаКомиссию.Доступность = ФункциональнаяОпцияИспользоватьПартии;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияУчетРозничныхПродаж"
		Или РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПредоплатуВЧекахККМ"
		Или РеквизитПутьКДанным = "" Тогда
		Элементы.АрхивироватьЧекиККМПриЗакрытииКассовойСмены.Доступность = ФункциональнаяОпцияУчетРозничныхПродаж И НЕ ФункциональнаяОпцияИспользоватьПредоплатуВЧекахККМ;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияУчетРозничныхПродаж" Или РеквизитПутьКДанным = "" Тогда
		Элементы.УдалятьНепробитыеЧекиПриЗакрытииКассовойСмены.Доступность = ФункциональнаяОпцияУчетРозничныхПродаж;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияУчетРозничныхПродаж" Или РеквизитПутьКДанным = "" Тогда
		Элементы.КонтролироватьОстаткиПриПробитииЧековККМ.Доступность = ФункциональнаяОпцияУчетРозничныхПродаж;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияУчетРозничныхПродаж" Или РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговлеДляНастроек.Доступность = ФункциональнаяОпцияУчетРозничныхПродаж;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияУчетРозничныхПродаж"
		Или РеквизитПутьКДанным = "АрхивироватьЧекиККМПриЗакрытииКассовойСмены"
		Или РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияИспользоватьПредоплатуВЧекахККМ.Доступность = ФункциональнаяОпцияУчетРозничныхПродаж И Не АрхивироватьЧекиККМПриЗакрытииКассовойСмены;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияУчетРозничныхПродаж" Или РеквизитПутьКДанным = "" Тогда
		Элементы.ВариантВозвратаПоЗакрытойСмене.Доступность = ФункциональнаяОпцияУчетРозничныхПродаж;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияУчетРозничныхПродаж" Или РеквизитПутьКДанным = "" Тогда
		Элементы.ОтправкаЭлектронныхЧековПослеПробитияЧека.Доступность = ФункциональнаяОпцияУчетРозничныхПродаж;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияУчетРозничныхПродаж"
		Или РеквизитПутьКДанным = "ОтправкаЭлектронныхЧековПослеПробитияЧека"
		Или РеквизитПутьКДанным = "" Тогда
		Элементы.АвтоматическаяОтправкаЭлектронныхЧековПоРасписанию.Доступность = ФункциональнаяОпцияУчетРозничныхПродаж И ОтправкаЭлектронныхЧековПослеПробитияЧека = 1;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияУчетРозничныхПродаж"
		Или РеквизитПутьКДанным = "ОтправкаЭлектронныхЧековПослеПробитияЧека"
		Или РеквизитПутьКДанным = "АвтоматическаяОтправкаЭлектронныхЧековПоРасписанию"
		Или РеквизитПутьКДанным = "" Тогда
		Элементы.РассылкаЭлектронныхЧековРасписание.Доступность = ФункциональнаяОпцияУчетРозничныхПродаж
			И ОтправкаЭлектронныхЧековПослеПробитияЧека = 1
			И АвтоматическаяОтправкаЭлектронныхЧековПоРасписанию;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияУчетРозничныхПродаж" Или РеквизитПутьКДанным = "" Тогда
		Элементы.ОткрытьОчередьЭлектронныхЧеков.Доступность = ФункциональнаяОпцияУчетРозничныхПродаж;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ИспользоватьБиллинг" Или РеквизитПутьКДанным = "" Тогда
		Элементы.БиллингВестиУчетРасходовПоДоговорамОбслуживания.Доступность = ИспользоватьБиллинг;
	КонецЕсли;
	Если РеквизитПутьКДанным = "БиллингВестиУчетРасходовПоДоговорамОбслуживания" Или РеквизитПутьКДанным = "" Тогда
		Элементы.БиллингГоловноеНаправлениеДеятельности.Доступность = БиллингВестиУчетРасходовПоДоговорамОбслуживания;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияУчетПоНесколькимСкладам" Или РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияРазрешитьСкладыВТабличныхЧастях.Доступность = ФункциональнаяОпцияУчетПоНесколькимСкладам;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ИспользоватьСерииНоменклатуры" Или РеквизитПутьКДанным = "" Тогда
		Элементы.КонтрольОстатковСерийНоменклатуры.Доступность = ИспользоватьСерииНоменклатуры;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьСервисРасчетПотребностей" Или РеквизитПутьКДанным = "" Тогда
		Элементы.УчетПотребностиПоСкладам.Доступность = ФункциональнаяОпцияИспользоватьСервисРасчетПотребностей;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияУчетГТД" Или РеквизитПутьКДанным = "" Тогда
		
		Элементы.КонтролироватьОстаткиПоНомерамГТД.Доступность = ФункциональнаяОпцияУчетГТД;
		Элементы.ТребоватьЗаполнениеГТДИмпортногоТовара.Доступность = ФункциональнаяОпцияУчетГТД;
		Элементы.АвтоПодборНомеровГТД.Доступность = ФункциональнаяОпцияУчетГТД;
		Элементы.ВестиУчетПрослеживаемыхТоваров.Доступность = ФункциональнаяОпцияУчетГТД;
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПартии" Или РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияПриемЗапасовНаОтветХранение.Доступность = ФункциональнаяОпцияИспользоватьПартии;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуРаботы" Или РеквизитПутьКДанным = "" Тогда
		Элементы.ИспользоватьВидыЗаказНарядов.Доступность = ФункциональнаяОпцияИспользоватьПодсистемуРаботы;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуРаботы" Или РеквизитПутьКДанным = "" Тогда
		Элементы.ИспользоватьРемонты.Доступность = ФункциональнаяОпцияИспользоватьПодсистемуРаботы;
		Элементы.ИспользоватьРемонты2.Доступность = ФункциональнаяОпцияИспользоватьПодсистемуРаботы;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуРаботы" Или РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятияРаботы.Доступность = ФункциональнаяОпцияИспользоватьПодсистемуРаботы;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуПроизводство"
		Или РеквизитПутьКДанным = "ФункциональнаяОпцияРезервированиеЗапасов"
		Или РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияИспользоватьЭтапыПроизводства.Доступность = ФункциональнаяОпцияИспользоватьПодсистемуПроизводство
			И ФункциональнаяОпцияРезервированиеЗапасов;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьЭтапыПроизводства"
		Или РеквизитПутьКДанным = "ФункциональнаяОпцияУчетПоНесколькимПодразделениям"
		Или РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияВыполнениеЭтаповРазнымиПодразделениями.Доступность = ФункциональнаяОпцияИспользоватьЭтапыПроизводства
			И ФункциональнаяОпцияУчетПоНесколькимПодразделениям;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуПроизводство" Или РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияИспользоватьТехоперации.Доступность = ФункциональнаяОпцияИспользоватьПодсистемуПроизводство;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьТехоперации" Или РеквизитПутьКДанным = "" Тогда
		Элементы.АвтоматическиПланироватьОперацийЗаказомНаПроизводство.Доступность = ФункциональнаяОпцияИспользоватьТехоперации;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуПроизводство"
		Или РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПартии"
		Или РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияПереработкаДавальческогоСырья.Доступность = ФункциональнаяОпцияИспользоватьПодсистемуПроизводство
			И ФункциональнаяОпцияИспользоватьПартии;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуПроизводство" Или РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятия.Доступность = ФункциональнаяОпцияИспользоватьПодсистемуПроизводство;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяУчетВалютныхОпераций" Или РеквизитПутьКДанным = "" Тогда
		Элементы.НациональнаяВалюта.Доступность = ФункциональнаяУчетВалютныхОпераций;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяУчетВалютныхОпераций" Или РеквизитПутьКДанным = "" Тогда
		Элементы.ВалютаУчета.Доступность = ФункциональнаяУчетВалютныхОпераций;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияПлатежныйКалендарь" Или РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияИспользоватьРезервированиеДенежныхСредств.Доступность = ФункциональнаяОпцияПлатежныйКалендарь;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяУчетВалютныхОпераций" Или РеквизитПутьКДанным = "" Тогда
		Элементы.ЧастотаРасчетаКурсовыхРазниц.Доступность = ФункциональнаяУчетВалютныхОпераций;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуЗарплата" Или РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияВестиШтатноеРасписание.Доступность = ФункциональнаяОпцияИспользоватьПодсистемуЗарплата;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуЗарплата" Или РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияИспользоватьСовместительство.Доступность = ФункциональнаяОпцияИспользоватьПодсистемуЗарплата;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуЗарплата" Или РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияВестиУчетНалогаНаДоходыИВзносов.Доступность = ФункциональнаяОпцияИспользоватьПодсистемуЗарплата;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуЗарплата" Или РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияВыполнятьРасчетНДФЛПоПрогрессивнойШкале.Доступность = ФункциональнаяОпцияИспользоватьПодсистемуЗарплата;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ПередачаТоваровМеждуОрганизациями" 
		Или РеквизитПутьКДанным = "" Тогда
		Элементы.НастройкаПередачиТоваровМеждуОрганизациями.Доступность = ПередачаТоваровМеждуОрганизациями;
	КонецЕсли;
	Если РеквизитПутьКДанным = "РегистрацияВзаимодействия"
		Или РеквизитПутьКДанным = "" Тогда
		Элементы.ИнтеграцияСМессенджерами.Доступность = РегистрацияВзаимодействия
			И ОбсужденияУНФИнтеграцияСМессенджерами.ИнтеграцииДоступны();
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьАгентскиеУслуги"
		Или РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияИспользоватьАгентскиеПлатежиИРазделениеВыручки.Доступность = ФункциональнаяОпцияИспользоватьАгентскиеУслуги;
	КонецЕсли;	
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьМинимальныеЦены" 
		ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияМинимальныеЦеныОтступ.Видимость = ФункциональнаяОпцияИспользоватьМинимальныеЦены;
	КонецЕсли;
	
КонецПроцедуры

// Подходит для установки видимости настроек в зависимости от режима работы приложения.
//
&НаСервере
Процедура ПриУстановкеВидимостиНастроекПриСозданииНаСервере()
	
	Элементы.ОтправкаЭлектронныхЧековПослеПробитияЧека.Видимость = Не РежимРаботы.МодельСервиса;
	Элементы.АвтоматическаяОтправкаЭлектронныхЧековПоРасписанию.Видимость = Не РежимРаботы.МодельСервиса;
	Элементы.РассылкаЭлектронныхЧековРасписание.Видимость = Не РежимРаботы.МодельСервиса;
	
	Если Не ОбсужденияУНФИнтеграцияСМессенджерами.ИнтеграцииДоступны() Тогда
		Элементы.ИнтеграцияСМессенджерами.Подсказка = НСтр("ru='Получать и отправлять сообщения в мессенджеры.
			|Например, Telegram, VK.
			|
			|Интеграция доступна начиная с версии платформы 8.3.17'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПоказатьПодключениеОбсуждений()
	
	ОбсужденияКлиент.ПоказатьПодключение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияОбсуждений(Результат, ДополнительныеПараметры) Экспорт
	
	ПослеПодключенияОбсужденийСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПослеПодключенияОбсужденийСервер()
	
	РегистрацияВзаимодействия = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	ПрочитатьЗначенияВсехНастроек();
	ПриУстановкеДоступностиНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтключениеОбсуждений()
	
	ОбсужденияКлиент.ПоказатьОтключение();
	
КонецПроцедуры

&НаСервере
Процедура АвтоПодборНомеровГТДПриИзмененииНаСервере()
	
	НовоеЗначение = ?(АвтоПодборНомеровГТД = Истина, Перечисления.ДаНет.Да, Перечисления.ДаНет.Нет);
	
	Константы.АвтоПодборНомеровГТД.Установить(НовоеЗначение);
	
КонецПроцедуры

#КонецОбласти
