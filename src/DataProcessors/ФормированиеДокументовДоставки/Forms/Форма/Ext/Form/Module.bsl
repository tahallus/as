
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПредставленияДокументов = Новый ФиксированноеСоответствие(Новый Соответствие);
	
	Параметры.Свойство("СлужбаДоставки", ФильтрСлужбаДоставки);
	Параметры.Свойство("Курьер", ФильтрКурьер);
	Параметры.Свойство("МаршрутныйЛист", ФильтрМаршрутныйЛист);
	
	ФормаПараметры = Новый Структура;
	ФормаПараметры.Вставить("НесколькоОрганизаций", ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций")
		И Не ЗначениеЗаполнено(Справочники.Организации.ОрганизацияКомпания()));
	ФормаПараметры.Вставить("НесколькоСкладов", ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам"));
	ФормаПараметры.Вставить("НесколькоВидовЗаказов", ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей"));
	ФормаПараметры.Вставить("НеПредупреждатьПередФормированием", ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(
		"ФормированиеДокументовДоставки", "НеПредупреждатьПередФормированием", Ложь));
	ФормаПараметры.Вставить("ПравоВводаКассовыхДокументов", ПравоДоступа("Добавление",
		Метаданные.Документы.ПоступлениеВКассу) Или ПравоДоступа("Добавление", Метаданные.Документы.РасходИзКассы));
	ФормаПараметры.Вставить("ПравоВводаБанковскихДокументов", ПравоДоступа("Добавление",
		Метаданные.Документы.ПлатежноеПоручение));
	ФормаПараметры.Вставить("ПравоВводаРасходныхДокументов", Пользователи.ЭтоПолноправныйПользователь()
		Или УправлениеДоступомУНФ.ДоступноСозданиеДокументовРазделаПродажи());
	
	УстановитьУсловноеОформление();
	УправлениеФормой(ЭтаФорма);
	ЗаполнитьИУстановитьВидимостьНастройкиСостоянийЗаказов();
	
	ЗаполнитьДеревоЗаказов();
	
	// ГрупповоеИзменениеСтрок
	ЗаполнитьСписокДействий(ИмяТЧПланДоставки());
	
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧПланДоставки()), ЭтотОбъект.ПланДоставкиИзменениеСтрокДействие);
	
	ПланДоставкиИзменениеСтрокДействиеПриОткрытии = ПланДоставкиИзменениеСтрокДействие;
	УстановитьПометку(ИмяТЧПланДоставки(), Истина);
	// Конец ГрупповоеИзменениеСтрок
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НаборКонстант" Тогда
		ЗаполнитьИУстановитьВидимостьНастройкиСостоянийЗаказов();
	ИначеЕсли ИмяСобытия = "Запись_ЗаказПокупателя"
		ИЛИ ИмяСобытия = "Запись_РасходнаяНакладная"
		ИЛИ ИмяСобытия = "ОповещениеОбОплатеЗаказа" Тогда
		ПроверитьМодифицированностьИОбновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ ТолькоПросмотр Тогда
		
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		Текст = НСтр("ru='Сохранить внесенные изменения?'");
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СформироватьДокументыКлиент();
		Модифицированность = Ложь;
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		// ГрупповоеИзменениеСтрок
		СохранитьТекущееДействиеИзмененияСтрок();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДекорацияСостояниеЗаказовПриДоставкеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Заголовок", НСтр("ru = 'Состояние доставленных заказов'"));
	СтруктураОткрытия.Вставить("Подсказка", НСтр("ru = 'Укажите состояние, в которое будет переведен заказ покупателя после установки признака доставки'"));
	СтруктураОткрытия.Вставить("ИмяРеквизита", "СостояниеДоставлен");
	ОткрытьФорму("ОбщаяФорма.ФормаНастройкиФиксированныхСостоянийЗаказов", СтруктураОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ФильтрКурьер) И ФильтрСлужбаДоставки<>ПредопределенноеЗначение("Справочник.СлужбыДоставки.ДоставкаСобственнымиСилами") Тогда
		ФильтрСлужбаДоставки = ПредопределенноеЗначение("Справочник.СлужбыДоставки.ДоставкаСобственнымиСилами");
	ИначеЕсли НЕ ЗначениеЗаполнено(ФильтрКурьер) И ФильтрСлужбаДоставки=ПредопределенноеЗначение("Справочник.СлужбыДоставки.ДоставкаСобственнымиСилами") Тогда
		ФильтрСлужбаДоставки = ПредопределенноеЗначение("Справочник.СлужбыДоставки.ПустаяСсылка");
	КонецЕсли; 
	УправлениеФормой(ЭтаФорма);
	
	ПроверитьМодифицированностьИОбновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ Поле = Элементы.ПланДоставкиПредставлениеГруппировки
		И НЕ Поле = Элементы.ПланДоставкиЗаказПредставление
		И НЕ Поле = Элементы.ПланДоставкиРасходнаяНакладнаяПредставление
		И НЕ Поле = Элементы.ПланДоставкиПредставлениеСостояниеОтгрузки
		И НЕ Поле = Элементы.ПланДоставкиПредставлениеСостояниеОплаты Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;	
	СтрокаТабличнойЧасти = Элементы.ПланДоставки.ТекущиеДанные;
	СтруктураОповещения = Новый Структура;
	СтруктураОповещения.Вставить("Поле", Поле);
	СтруктураОповещения.Вставить("СтрокаТабличнойЧасти", СтрокаТабличнойЧасти);
	СписокДокументов = Новый СписокЗначений;
	Если Поле = Элементы.ПланДоставкиПредставлениеГруппировки Тогда
		СписокДокументов.Добавить(СтрокаТабличнойЧасти.Заказ, СтрокаТабличнойЧасти.ЗаказПредставление);
		СписокДокументов.Добавить(СтрокаТабличнойЧасти.РасходнаяНакладная, СтрокаТабличнойЧасти.РасходнаяНакладнаяПредставление);
		Для каждого ЭлементСписка Из СтрокаТабличнойЧасти.Возвраты Цикл
			СписокДокументов.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла; 
		Для каждого ЭлементСписка Из СтрокаТабличнойЧасти.Оплаты Цикл
			СписокДокументов.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла; 
	ИначеЕсли Поле = Элементы.ПланДоставкиЗаказПредставление Тогда
		ПоказатьЗначение(, СтрокаТабличнойЧасти.Заказ);
		Возврат;
	ИначеЕсли Поле = Элементы.ПланДоставкиРасходнаяНакладнаяПредставление Тогда
		ПоказатьЗначение(, СтрокаТабличнойЧасти.РасходнаяНакладная);
		Возврат;
	ИначеЕсли Поле = Элементы.ПланДоставкиПредставлениеСостояниеОтгрузки Тогда
		СписокДокументов.Добавить(СтрокаТабличнойЧасти.РасходнаяНакладная, СтрокаТабличнойЧасти.РасходнаяНакладнаяПредставление);
		Для каждого ЭлементСписка Из СтрокаТабличнойЧасти.Возвраты Цикл
			СписокДокументов.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла; 
	ИначеЕсли Поле = Элементы.ПланДоставкиПредставлениеСостояниеОплаты Тогда
		Для каждого ЭлементСписка Из СтрокаТабличнойЧасти.Оплаты Цикл
			СписокДокументов.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла; 
	КонецЕсли;
	Если СписокДокументов.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли СписокДокументов.Количество() = 1 Тогда
		ПоказатьЗначение(, СписокДокументов[0].Значение);
		Возврат;
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ПланДоставкиВыборЗавершение", ЭтотОбъект);
	ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиВыборЗавершение(Значение, ДополнительныеДанные) Экспорт
	
	Если Значение <> Неопределено Тогда
		ПоказатьЗначение(, Значение.Значение);
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиСостояниеОтгрузкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СостоянияДоставкиЗаказа.Отгружен");
	КонецЕсли; 
	
	ТекущаяСтрока = Элементы.ПланДоставки.ТекущиеДанные;
	ТекущаяСтрока.СостояниеОтгрузкиИзменено = (ТекущаяСтрока.СостояниеОтгрузки<>ВыбранноеЗначение ИЛИ ТекущаяСтрока.СостояниеОтгрузкиИзменено);
	
	Если ТекущаяСтрока.СостояниеОтгрузкиИзменено Тогда
		СтрокаРодитель = ТекущаяСтрока.ПолучитьРодителя();
		Если СтрокаРодитель<>Неопределено Тогда
			СтрокаРодитель.СостояниеОтгрузкиИзменено = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиСостояниеОтгрузкиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	ТекущаяСтрока = Элементы.ПланДоставки.ТекущиеДанные;
	ПланДоставкиСостояниеОтгрузкиПриИзмененииФрагмент(ТекущаяСтрока);
	
	РассчитатьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиСостояниеОтгрузкиПриИзмененииФрагмент(ТекущаяСтрока)
	
	Если ТекущаяСтрока.СостояниеОтгрузки = ПредопределенноеЗначение("Перечисление.СостоянияДоставкиЗаказа.ДоставленЧастично") Тогда
		РазвернутьНоменклатуру(ТекущаяСтрока.ПолучитьИдентификатор());
		ПоНоменклатуре = Истина;
		УстановитьВидимостьЭлементов(ЭтотОбъект);
		Элементы.ПланДоставки.Развернуть(ТекущаяСтрока.ПолучитьИдентификатор());
	ИначеЕсли ТекущаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
		Для каждого ПодСтрока Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
			ПодСтрока.СостояниеОтгрузки = ТекущаяСтрока.СостояниеОтгрузки;
		КонецЦикла; 
	КонецЕсли; 
	ОбновитьСуммыСтрокиДерева(ТекущаяСтрока);
	Если ТекущаяСтрока.ПолучитьЭлементы().Количество() > 0 
		И ТекущаяСтрока.СостояниеОтгрузки <> ПредопределенноеЗначение("Перечисление.СостоянияДоставкиЗаказа.ДоставленЧастично") Тогда
		ТекущаяСтрока.ПолучитьЭлементы().Очистить();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиСостояниеОплатыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СостоянияОплатыЗаказа.НеОплачен");
	КонецЕсли; 
	
	ТекущаяСтрока = Элементы.ПланДоставки.ТекущиеДанные;
	ТекущаяСтрока.СостояниеОплатыИзменено = (ТекущаяСтрока.СостояниеОплаты<>ВыбранноеЗначение ИЛИ ТекущаяСтрока.СостояниеОплатыИзменено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиСостояниеОплатыПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	ТекущаяСтрока = Элементы.ПланДоставки.ТекущиеДанные;
	
	ПланДоставкиСостояниеОплатыПриИзмененииФрагмент(ТекущаяСтрока);
	
	РассчитатьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиСостояниеОплатыПриИзмененииФрагмент(ТекущаяСтрока)
	
	Если ТекущаяСтрока.СостояниеОплаты<>ПредопределенноеЗначение("Перечисление.СостоянияОплатыЗаказа.НеОплачен")
		И (ТекущаяСтрока.СостояниеОтгрузки=ПредопределенноеЗначение("Перечисление.СостоянияДоставкиЗаказа.Отгружен")
		ИЛИ ТекущаяСтрока.СостояниеОтгрузки=ПредопределенноеЗначение("Перечисление.СостоянияДоставкиЗаказа.НеДоставлен")) Тогда
		Состояние(
		НСтр("ru = 'Заказ еще не доставлен. Невозможно определить сумму оплаты.'"), , ,
		БиблиотекаКартинок.ВниманиеВВидеТреугольника_32);
	КонецЕсли; 
	
	ОбновитьСуммыСтрокиДерева(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиСостояниеОтгрузкиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиСостояниеОплатыОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиСостояниеОтгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ПланДоставки.ТекущиеДанные;
	Если СтрокаТабличнойЧасти=Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СостояниеОтгрузкиДанныеВыбораТекущейСтроки(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Функция СостояниеОтгрузкиДанныеВыбораТекущейСтроки(СтрокаТабличнойЧасти)
	
	ДанныеВыбора = Новый СписокЗначений;
	Если ТипЗнч(СтрокаТабличнойЧасти.СостояниеОтгрузки)=Тип("ПеречислениеСсылка.СостоянияДоставкиЗаказа") 
		ИЛИ СтрокаТабличнойЧасти.СостояниеОтгрузки=Неопределено Тогда
		Если ТипЗнч(СтрокаТабличнойЧасти.Группировка)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДоставкиЗаказа.Отгружен"));
		КонецЕсли; 
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДоставкиЗаказа.Доставлен"));
		Если ТипЗнч(СтрокаТабличнойЧасти.Группировка)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДоставкиЗаказа.ДоставленЧастично"));
		КонецЕсли; 
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДоставкиЗаказа.НеДоставлен"));
	Иначе
		ДанныеВыбора.Добавить(СтрокаТабличнойЧасти.СостояниеОтгрузки);
	КонецЕсли;
	
	Возврат ДанныеВыбора;
	
КонецФункции

&НаКлиенте
Функция СостояниеОплатыДанныеВыбораТекущейСтроки(СтрокаТабличнойЧасти)
	
	ДанныеВыбора = Новый СписокЗначений;
	Если ТипЗнч(СтрокаТабличнойЧасти.СостояниеОплаты)=Тип("ПеречислениеСсылка.СостоянияОплатыЗаказа") 
		ИЛИ СтрокаТабличнойЧасти.СостояниеОплаты=Неопределено Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияОплатыЗаказа.НеОплачен"));
		Если ФормаПараметры.ПравоВводаКассовыхДокументов Тогда
			ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияОплатыЗаказа.ОплаченНаличными"));
		КонецЕсли;
		Если ФормаПараметры.ПравоВводаБанковскихДокументов Тогда
			ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияОплатыЗаказа.ОплаченКартой"));
		КонецЕсли; 
	Иначе
		ДанныеВыбора.Добавить(СтрокаТабличнойЧасти.СостояниеОплаты);
	КонецЕсли;
	
	Возврат ДанныеВыбора;
	
КонецФункции

&НаКлиенте
Процедура ПланДоставкиСостояниеОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ПланДоставки.ТекущиеДанные;
	Если СтрокаТабличнойЧасти=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СостояниеОплатыДанныеВыбораТекущейСтроки(СтрокаТабличнойЧасти);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ПроверитьМодифицированностьИОбновить();
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	// Если открыта панель группового изменения строк, то нужно ее закрыть, чтобы пользователь не смог отменить изменения
	// после того как сформирует документы.
	Если Элементы.ГруппаПланДоставкиИзменениеСтрок.Видимость Тогда
		ПланДоставкиИзменитьСтроки(Неопределено);
	КонецЕсли;
	
	СформироватьДокументыКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументыКлиент()
	
	Если НЕ ФормаПараметры.НесколькоВидовЗаказов И НЕ ЗначениеЗаполнено(СостояниеЗаказовПриДоставке) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		НСтр("ru = 'Укажите состояние заказа, устанавливаемое при доставке'"), , 
		"СостояниеЗаказовПриДоставке");
		Возврат;
	КонецЕсли;
	
	ПараметрыСовета = Новый Структура;
	ПараметрыСовета.Вставить("Заголовок", НСтр("ru = 'Формирование документов доставки'"));
	ПараметрыСовета.Вставить("ТекстСообщения", НСтр("ru = 'Все внесенные изменения будут сохранены. Для доставленных заказов будет изменено состояние, для частично доставленных - изменена расходная накладная, для недоставленных - сформирован возврат от покупателя. 
	|Для измененных состояний оплаты будут сформированы поступления в кассу либо операции по платежным картам'"));
	ПараметрыСовета.Вставить("ВидимостьБольшеНеПоказывать", Истина);
	ПараметрыСовета.Вставить("ЗаголовокКнопкиОк", НСтр("ru = 'Продолжить'"));
	Если ФормаПараметры.НеПредупреждатьПередФормированием Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("БольшеНеПоказывать", ФормаПараметры.НеПредупреждатьПередФормированием);
		СтруктураВозврата.Вставить("КодВозврата", КодВозвратаДиалога.ОК);
		СформироватьДокументыКлиентПродолжение(СтруктураВозврата, ПараметрыСовета);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьДокументыКлиентПродолжение", ЭтотОбъект, ПараметрыСовета);
		ОткрытьФорму("ОбщаяФорма.ФормаПредупреждения", ПараметрыСовета, ЭтаФорма, Истина, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументыКлиентПродолжение(Результат, ПараметрыСовета) Экспорт
	
	Если ТипЗнч(Результат)<>Тип("Структура") ИЛИ НЕ Результат.Свойство("КодВозврата") ИЛИ Результат.КодВозврата<>КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьФоновоеЗадание();
	
	Если Результат.БольшеНеПоказывать<>ФормаПараметры.НеПредупреждатьПередФормированием Тогда
		СохранитьНастройкуНеПредупреждатьПередФормированием(Результат.БольшеНеПоказывать);
	КонецЕсли; 
	
КонецПроцедуры
 
&НаСервере
Процедура СохранитьНастройкуНеПредупреждатьПередФормированием(БольшеНеПоказывать)
	
	ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить("ФормированиеДокументовДоставки", "НеПредупреждатьПередФормированием", БольшеНеПоказывать);
	
КонецПроцедуры
 
&НаКлиенте
Процедура НастроитьСостояниеЗаказов(Команда)
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Заголовок", НСтр("ru = 'Состояния доставленных заказов'"));
	СтруктураОткрытия.Вставить("Подсказка", НСтр("ru = 'Укажите состояния, в которые будет переведен заказ покупателя после установки признака доставки'"));
	СтруктураОткрытия.Вставить("ИмяРеквизита", "СостояниеДоставлен");
	ОткрытьФорму("ОбщаяФорма.ФормаНастройкиФиксированныхСостоянийЗаказов", СтруктураОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	ФормаПараметры = Форма.ФормаПараметры;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФильтрОрганизация", "Видимость", ФормаПараметры.НесколькоОрганизаций);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФильтрСлужбаДоставки", "ТолькоПросмотр", ЗначениеЗаполнено(Форма.ФильтрКурьер));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФильтрСклад", "Видимость", ФормаПараметры.НесколькоСкладов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФильтрВидЗаказа", "Видимость", ФормаПараметры.НесколькоВидовЗаказов);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПланДоставкиГруппаСостояниеОплаты", "Видимость", ФормаПараметры.ПравоВводаКассовыхДокументов ИЛИ ФормаПараметры.ПравоВводаБанковскихДокументов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИтогОплачено", "Видимость", ФормаПараметры.ПравоВводаКассовыхДокументов ИЛИ ФормаПараметры.ПравоВводаБанковскихДокументов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОплатаРасшифровка", "Видимость", ФормаПараметры.ПравоВводаКассовыхДокументов ИЛИ ФормаПараметры.ПравоВводаБанковскихДокументов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПланДоставкиГруппаСостояниеОтгрузки", "Видимость", ФормаПараметры.ПравоВводаРасходныхДокументов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИУстановитьВидимостьНастройкиСостоянийЗаказов()
	
	Если НЕ ФормаПараметры.НесколькоВидовЗаказов Тогда
		СостояниеЗаказовПриДоставке = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.ВидыЗаказовПокупателей.Основной, "СостояниеДоставлен");
		Элементы.ДекорацияСостояниеЗаказовПриДоставке.Видимость = ЗначениеЗаполнено(СостояниеЗаказовПриДоставке);
		Элементы.ГруппаСостояниеЗаказов.ЦветФона = ?(ЗначениеЗаполнено(СостояниеЗаказовПриДоставке), ЦветаСтиля.ЦветФонаФормы, Новый Цвет);
		Элементы.СостояниеЗаказовПриДоставке.Видимость = Не Элементы.ДекорацияСостояниеЗаказовПриДоставке.Видимость;
		Элементы.НастроитьСостояниеЗаказов.Видимость = Ложь;
		Элементы.ДекорацияСостояниеЗаказовПриДоставке.Заголовок = Новый ФорматированнаяСтрока(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Состояние заказов при доставке изменится на «%1». Настраивается '"), СостояниеЗаказовПриДоставке),
			Новый ФорматированнаяСтрока(НСтр("ru = 'здесь'"),,,,"Переход"));
	Иначе
		Элементы.ДекорацияСостояниеЗаказовПриДоставке.Видимость = Ложь;
		Элементы.ГруппаСостояниеЗаказов.ЦветФона = Новый Цвет;
		Элементы.СостояниеЗаказовПриДоставке.Видимость = Ложь;
		Элементы.НастроитьСостояниеЗаказов.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Доступность к изменению
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПланДоставки.МожноМенятьСостояниеОплаты", Ложь);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, "ПланДоставкиСостояниеОплаты");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПланДоставки.МожноМенятьСостояниеОтгрузки", Ложь);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, "ПланДоставкиСостояниеОтгрузки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПланДоставки.СостояниеОтгрузки", Перечисления.СостоянияДоставкиЗаказа.ПустаяСсылка());
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, "ПланДоставкиСостояниеОтгрузки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Не сформирован документ отгрузки>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	// Видимость колонок
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПланДоставки.Заказ", Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, "ПланДоставкиЗаказПредставление");
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, "ПланДоставкиРасходнаяНакладнаяПредставление");
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, "ПланДоставкиПредставлениеГруппировки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПланДоставки.Заказ", Неопределено, ВидСравненияКомпоновкиДанных.Заполнено);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, "ПланДоставкиПредставлениеНоменклатуры");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПланДоставки.ПредставлениеСостояниеОтгрузки", Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, "ПланДоставкиПредставлениеСостояниеОтгрузки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПланДоставки.ПредставлениеСостояниеОтгрузки", Неопределено, ВидСравненияКомпоновкиДанных.Заполнено);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, "ПланДоставкиСостояниеОтгрузки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПланДоставки.ПредставлениеСостояниеОплаты", Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, "ПланДоставкиПредставлениеСостояниеОплаты");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПланДоставки.ПредставлениеСостояниеОплаты", Неопределено, ВидСравненияКомпоновкиДанных.Заполнено);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, "ПланДоставкиСостояниеОплаты");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
	// Измененные данные
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПланДоставки.СостояниеОтгрузкиИзменено", Истина);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, "ПланДоставкиСостояниеОтгрузки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Шрифт", Новый Шрифт(Элементы.ПланДоставкиСостояниеОтгрузки.Шрифт, , , Истина));
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПланДоставки.СостояниеОплатыИзменено", Истина);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, "ПланДоставкиСостояниеОплаты");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Шрифт", Новый Шрифт(Элементы.ПланДоставкиСостояниеОплаты.Шрифт, , , Истина));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФильтров()
	
	ЗаголовокГруппы = "";
	Если ЗначениеЗаполнено(ФильтрСлужбаДоставки) Тогда
		ЗаголовокГруппы = ЗаголовокГруппы+?(ПустаяСтрока(ЗаголовокГруппы), "", ", ")+Строка(ФильтрСлужбаДоставки);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ФильтрСпособОтгрузки) Тогда
		ЗаголовокГруппы = ЗаголовокГруппы+?(ПустаяСтрока(ЗаголовокГруппы), "", ", ")+Строка(ФильтрСпособОтгрузки);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ФильтрСпособДоставки) Тогда
		ЗаголовокГруппы = ЗаголовокГруппы+?(ПустаяСтрока(ЗаголовокГруппы), "", ", ")+Строка(ФильтрСпособДоставки);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ФильтрЗонаТариф) Тогда
		ЗаголовокГруппы = ЗаголовокГруппы+?(ПустаяСтрока(ЗаголовокГруппы), "", ", ")+Строка(ФильтрЗонаТариф);
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрДатаДоставки) Тогда
		ЗаголовокГруппы = ЗаголовокГруппы+?(ПустаяСтрока(ЗаголовокГруппы), "", ", ")+НСтр("ru = 'доставка '")+Формат(ФильтрДатаДоставки, "ДЛФ=D");
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрОрганизация) Тогда
		ЗаголовокГруппы = ЗаголовокГруппы+?(ПустаяСтрока(ЗаголовокГруппы), "", ", ")+Строка(ФильтрОрганизация);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ФильтрСклад) Тогда
		ЗаголовокГруппы = ЗаголовокГруппы+?(ПустаяСтрока(ЗаголовокГруппы), "", ", ")+Строка(ФильтрСклад);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ФильтрВидЗаказа) И ФормаПараметры.НесколькоВидовЗаказов Тогда
		ЗаголовокГруппы = ЗаголовокГруппы+?(ПустаяСтрока(ЗаголовокГруппы), "", ", ")+Строка(ФильтрВидЗаказа);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ФильтрКурьер) Тогда
		ЗаголовокГруппы = ЗаголовокГруппы+?(ПустаяСтрока(ЗаголовокГруппы), "", ", ")+Строка(ФильтрКурьер);
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрМаршрутныйЛист) Тогда
		ЗаголовокГруппы = ЗаголовокГруппы+?(ПустаяСтрока(ЗаголовокГруппы), "", ", ")+Строка(ФильтрМаршрутныйЛист);
	КонецЕсли;
	Если ФильтрТолькоНедоставленные Тогда
		ЗаголовокГруппы = ЗаголовокГруппы+?(ПустаяСтрока(ЗаголовокГруппы), "", ", ")+НСтр("ru = 'недоставленные'");
	КонецЕсли; 
	Если ФильтрТолькоНеоплаченные Тогда
		ЗаголовокГруппы = ЗаголовокГруппы+?(ПустаяСтрока(ЗаголовокГруппы), "", ", ")+НСтр("ru = 'неоплаченные'");
	КонецЕсли; 
	Если ПустаяСтрока(ЗаголовокГруппы) Тогда
		Элементы.ГруппаФильтры.Заголовок = НСтр("ru = 'Фильтры'");
	Иначе
		Элементы.ГруппаФильтры.Заголовок = НСтр("ru = 'Фильтры: '")+ЗаголовокГруппы;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМодифицированностьИОбновить()
	
	Если НЕ Модифицированность Тогда
		ЗаполнитьДеревоЗаказов();
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПроверитьМодифицированностьИОбновитьЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
	Оповещение, 
	НСтр("ru = 'При обновлении списка внесенные изменения будут отменены. Все равно продолжить?'"), 
	РежимДиалогаВопрос.ОКОтмена, 
	, 
	КодВозвратаДиалога.Отмена, 
	НСтр("ru = 'Обновление списка заказов'")); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМодифицированностьИОбновитьЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если НЕ Ответ=КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли; 	
	
	ЗаполнитьДеревоЗаказов();
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаДеревоЗаказов()
	
	Возврат 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателя.Ссылка КАК Заказ,
	|	МаршрутныйЛистЗаказы.РасходнаяНакладная КАК РасходнаяНакладная,
	|	МаршрутныйЛистЗаказы.Ссылка КАК МаршрутныйЛист,
	|	ЗаказПокупателя.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЗаказПокупателя.ВидЗаказа КАК ВидЗаказа,
	|	ВЫБОР
	|		КОГДА (ЗаказПокупателя.ВидЗаказа, ЗаказПокупателя.СостояниеЗаказа) В
	|			(ВЫБРАТЬ
	|				ВидыЗаказовПокупателей.Ссылка,
	|				ВидыЗаказовПокупателей.СостояниеДоставлен
	|			ИЗ
	|				Справочник.ВидыЗаказовПокупателей КАК ВидыЗаказовПокупателей
	|			ГДЕ
	|				НЕ ВидыЗаказовПокупателей.ПометкаУдаления
	|				И НЕ ВидыЗаказовПокупателей.НеИспользоватьДоставку)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаказДоставлен,
	|	МаршрутныйЛистЗаказы.Доставлен КАК НакладнаяДоставлена,
	|	МаршрутныйЛист.СлужбаДоставки КАК СлужбаДоставки,
	|	ЗаказПокупателя.СуммаДокумента КАК СуммаЗаказа,
	|	МаршрутныйЛистЗаказы.РасходнаяНакладная.СуммаДокумента КАК СуммаНакладной
	|ПОМЕСТИТЬ Заказы
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.Заказы КАК МаршрутныйЛистЗаказы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист КАК МаршрутныйЛист
	|			ПО МаршрутныйЛистЗаказы.Ссылка = МаршрутныйЛист.Ссылка
	|		ПО (МаршрутныйЛистЗаказы.Заказ = ЗаказПокупателя.Ссылка)
	|		И (МаршрутныйЛистЗаказы.Ссылка.Проведен)
	|ГДЕ
	|	ЗаказПокупателя.Проведен
	|	И МаршрутныйЛистЗаказы.РасходнаяНакладная <> ЗНАЧЕНИЕ(Документ.РасходнаяНакладная.ПустаяСсылка)
	|	И МаршрутныйЛистЗаказы.РасходнаяНакладная.Проведен
	|	И ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу)
	|	И (ЗаказПокупателя.СостояниеЗаказа <> ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.Завершен)
	|	ИЛИ ЗаказПокупателя.ВидЗаказа.СостояниеДоставлен = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.Завершен))
	|	И НЕ МаршрутныйЛистЗаказы.Ссылка ЕСТЬ NULL
	|	И (&МаршрутныйЛист = ЗНАЧЕНИЕ(Документ.МаршрутныйЛист.ПустаяСсылка)
	|	ИЛИ МаршрутныйЛистЗаказы.Ссылка = &МаршрутныйЛист)
	|	И (НЕ &ТолькоНедоставленные
	|	ИЛИ НЕ (ЗаказПокупателя.ВидЗаказа, ЗаказПокупателя.СостояниеЗаказа) В
	|		(ВЫБРАТЬ
	|			ВидыЗаказовПокупателей.Ссылка,
	|			ВидыЗаказовПокупателей.СостояниеДоставлен
	|		ИЗ
	|			Справочник.ВидыЗаказовПокупателей КАК ВидыЗаказовПокупателей
	|		ГДЕ
	|			НЕ ВидыЗаказовПокупателей.ПометкаУдаления
	|			И НЕ ВидыЗаказовПокупателей.НеИспользоватьДоставку))
	|	И (&ВидЗаказа = ЗНАЧЕНИЕ(Справочник.ВидыЗаказовПокупателей.ПустаяСсылка)
	|	ИЛИ ЗаказПокупателя.ВидЗаказа = &ВидЗаказа)
	|	И (&СлужбаДоставки = ЗНАЧЕНИЕ(Справочник.СлужбыДоставки.ПустаяСсылка)
	|	ИЛИ МаршрутныйЛист.СлужбаДоставки = &СлужбаДоставки)
	|	И (&Курьер = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	ИЛИ МаршрутныйЛист.Курьер = &Курьер)
	|	И (&СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПустаяСсылка)
	|	ИЛИ МаршрутныйЛист.СпособДоставки = &СпособДоставки)
	|	И (&СпособОтгрузки = ЗНАЧЕНИЕ(Перечисление.СпособыОтгрузки.ПустаяСсылка)
	|	ИЛИ МаршрутныйЛист.СпособОтгрузки = &СпособОтгрузки)
	|	И (&Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	ИЛИ МаршрутныйЛист.Организация = &Организация)
	|	И (&Склад = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	ИЛИ ВЫБОР
	|		КОГДА МаршрутныйЛист.Склад = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателя.СтруктурнаяЕдиницаРезерв
	|		ИНАЧЕ МаршрутныйЛист.Склад
	|	КОНЕЦ = &Склад)
	|	И (&ЗонаТариф = ЗНАЧЕНИЕ(Справочник.ЗоныТарифыДоставки.ПустаяСсылка)
	|	ИЛИ ВЫБОР
	|		КОГДА МаршрутныйЛист.ЗонаТариф = ЗНАЧЕНИЕ(Справочник.ЗоныТарифыДоставки.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателя.ЗонаТариф
	|		ИНАЧЕ МаршрутныйЛист.ЗонаТариф
	|	КОНЕЦ = &ЗонаТариф)
	|	И (&ДатаДоставки = ДАТАВРЕМЯ(1, 1, 1)
	|	ИЛИ ЗаказПокупателя.ОжидаемаяДатаВручения = &ДатаДоставки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПокупателямиОбороты.Регистратор КАК Регистратор,
	|	РасчетыСПокупателямиОбороты.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОбороты.Документ КАК Документ,
	|	РасчетыСПокупателямиОбороты.ТипРасчетов КАК ТипРасчетов,
	|	РасчетыСПокупателямиОбороты.СуммаПриход КАК СуммаПриход,
	|	РасчетыСПокупателямиОбороты.СуммаРасход КАК СуммаРасход
	|ПОМЕСТИТЬ РасчетыПоЗаказам
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями.Обороты(,, Авто, Заказ В
	|		(ВЫБРАТЬ
	|			Заказы.Заказ
	|		ИЗ
	|			Заказы)) КАК РасчетыСПокупателямиОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Отгрузка.Заказ КАК Заказ,
	|	Отгрузка.ДокументОтгрузки КАК ДокументОтгрузки,
	|	Отгрузка.ДокументВозврата КАК ДокументВозврата,
	|	СУММА(Отгрузка.Заказано) КАК Заказано,
	|	СУММА(Отгрузка.Отгружено) КАК Отгружено,
	|	СУММА(Отгрузка.Возвращено) КАК Возвращено
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыПокупателейОбороты.ЗаказПокупателя КАК Заказ,
	|		ВЫБОР
	|			КОГДА ЗаказыПокупателейОбороты.Регистратор ССЫЛКА Документ.РасходнаяНакладная
	|				ТОГДА ЗаказыПокупателейОбороты.Регистратор
	|			КОГДА ЗаказыПокупателейОбороты.Регистратор ССЫЛКА Документ.ПриходнаяНакладная
	|				ТОГДА ВЫРАЗИТЬ(ЗаказыПокупателейОбороты.Регистратор КАК Документ.ПриходнаяНакладная).ДокументОснование
	|			ИНАЧЕ NULL
	|		КОНЕЦ КАК ДокументОтгрузки,
	|		ВЫБОР
	|			КОГДА ЗаказыПокупателейОбороты.Регистратор ССЫЛКА Документ.ПриходнаяНакладная
	|				ТОГДА ЗаказыПокупателейОбороты.Регистратор
	|			ИНАЧЕ NULL
	|		КОНЕЦ КАК ДокументВозврата,
	|		СУММА(ЗаказыПокупателейОбороты.КоличествоПриход) КАК Заказано,
	|		СУММА(ВЫБОР
	|			КОГДА ЗаказыПокупателейОбороты.Регистратор ССЫЛКА Документ.РасходнаяНакладная
	|				ТОГДА ЗаказыПокупателейОбороты.КоличествоРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Отгружено,
	|		СУММА(ВЫБОР
	|			КОГДА ЗаказыПокупателейОбороты.Регистратор ССЫЛКА Документ.ПриходнаяНакладная
	|				ТОГДА -ЗаказыПокупателейОбороты.КоличествоРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Возвращено
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Обороты(,, Авто, ЗаказПокупателя В
	|			(ВЫБРАТЬ
	|				Заказы.Заказ
	|			ИЗ
	|				Заказы)) КАК ЗаказыПокупателейОбороты
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказыПокупателейОбороты.ЗаказПокупателя,
	|		ВЫБОР
	|			КОГДА ЗаказыПокупателейОбороты.Регистратор ССЫЛКА Документ.РасходнаяНакладная
	|				ТОГДА ЗаказыПокупателейОбороты.Регистратор
	|			КОГДА ЗаказыПокупателейОбороты.Регистратор ССЫЛКА Документ.ПриходнаяНакладная
	|				ТОГДА ВЫРАЗИТЬ(ЗаказыПокупателейОбороты.Регистратор КАК Документ.ПриходнаяНакладная).ДокументОснование
	|			ИНАЧЕ NULL
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ЗаказыПокупателейОбороты.Регистратор ССЫЛКА Документ.ПриходнаяНакладная
	|				ТОГДА ЗаказыПокупателейОбороты.Регистратор
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК Отгрузка
	|СГРУППИРОВАТЬ ПО
	|	Отгрузка.Заказ,
	|	Отгрузка.ДокументОтгрузки,
	|	Отгрузка.ДокументВозврата
	|ИТОГИ
	|	СУММА(Заказано),
	|	СУММА(Отгружено),
	|	СУММА(Возвращено)
	|ПО
	|	Заказ,
	|	ДокументОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Заказ КАК Заказ,
	|	ВложенныйЗапрос.РасходнаяНакладная КАК РасходнаяНакладная,
	|	ВложенныйЗапрос.ДокументОплаты КАК ДокументОплаты,
	|	СУММА(ВложенныйЗапрос.СуммаОплаты) КАК СуммаОплаты,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ВложенныйЗапрос.ДокументОплаты ССЫЛКА Документ.ПоступлениеНаСчет
	|		ИЛИ ВложенныйЗапрос.ДокументОплаты ССЫЛКА Документ.ОперацияПоПлатежнымКартам
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ) КАК БезналичнаяОплата,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ВложенныйЗапрос.ДокументОплаты ССЫЛКА Документ.ПоступлениеВКассу
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ) КАК НаличнаяОплата
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыПоЗаказам.Заказ КАК Заказ,
	|		РасчетыПоЗаказам.Документ КАК РасходнаяНакладная,
	|		РасчетыПоЗаказам.Регистратор КАК ДокументОплаты,
	|		РасчетыПоЗаказам.СуммаРасход КАК СуммаОплаты
	|	ИЗ
	|		РасчетыПоЗаказам КАК РасчетыПоЗаказам
	|	ГДЕ
	|		РасчетыПоЗаказам.Документ ССЫЛКА Документ.РасходнаяНакладная
	|		И НЕ РасчетыПоЗаказам.Регистратор ССЫЛКА Документ.РасходнаяНакладная
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РасчетыПоЗаказам.Заказ,
	|		РасчетыПоЗаказам.Регистратор,
	|		РасчетыПоЗаказам.Документ,
	|		РасчетыПоЗаказам.СуммаПриход
	|	ИЗ
	|		РасчетыПоЗаказам КАК РасчетыПоЗаказам
	|	ГДЕ
	|		РасчетыПоЗаказам.Регистратор ССЫЛКА Документ.РасходнаяНакладная
	|		И НЕ РасчетыПоЗаказам.Документ ССЫЛКА Документ.РасходнаяНакладная
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.Заказ,
	|		ЗНАЧЕНИЕ(Документ.РасходнаяНакладная.ПустаяСсылка),
	|		РасчетыСПокупателямиОстатки.Документ,
	|		-РасчетыСПокупателямиОстатки.СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями.Остатки(, ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|		И Заказ В
	|			(ВЫБРАТЬ
	|				Заказы.Заказ
	|			ИЗ
	|				Заказы)) КАК РасчетыСПокупателямиОстатки) КАК ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Заказ,
	|	ВложенныйЗапрос.РасходнаяНакладная,
	|	ВложенныйЗапрос.ДокументОплаты
	|ИТОГИ
	|	СУММА(СуммаОплаты),
	|	МАКСИМУМ(БезналичнаяОплата),
	|	МАКСИМУМ(НаличнаяОплата)
	|ПО
	|	Заказ,
	|	РасходнаяНакладная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПродажиОбороты.ЗаказПокупателя КАК Заказ,
	|	ПродажиОбороты.Документ КАК РасходнаяНакладная,
	|	ПродажиОбороты.Номенклатура КАК Номенклатура,
	|	ПродажиОбороты.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ПродажиОбороты.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоУслуга,
	|	СУММА(ВЫБОР
	|		КОГДА ПродажиОбороты.Регистратор ССЫЛКА Документ.РасходнаяНакладная
	|			ТОГДА ПродажиОбороты.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК Сумма,
	|	СУММА(ПродажиОбороты.СуммаОборот) КАК СуммаСВозвратом,
	|	СУММА(ВЫБОР
	|		КОГДА ПродажиОбороты.Регистратор ССЫЛКА Документ.РасходнаяНакладная
	|			ТОГДА ПродажиОбороты.КоличествоОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК Заказано,
	|	СУММА(ПродажиОбороты.КоличествоОборот) КАК Отгружено
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(,, Авто, ЗаказПокупателя В
	|		(ВЫБРАТЬ
	|			Заказы.Заказ
	|		ИЗ
	|			Заказы)) КАК ПродажиОбороты
	|СГРУППИРОВАТЬ ПО
	|	ПродажиОбороты.ЗаказПокупателя,
	|	ПродажиОбороты.Документ,
	|	ПродажиОбороты.Номенклатура,
	|	ПродажиОбороты.Характеристика,
	|	ВЫБОР
	|		КОГДА ПродажиОбороты.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|УПОРЯДОЧИТЬ ПО
	|	Заказ,
	|	РасходнаяНакладная,
	|	Номенклатура
	|АВТОУПОРЯДОЧИВАНИЕ
	|ИТОГИ
	|	СУММА(СуммаСВозвратом)
	|ПО
	|	Заказ,
	|	РасходнаяНакладная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заказы.Заказ КАК Группировка,
	|	Заказы.МаршрутныйЛист КАК МаршрутныйЛист,
	|	Заказы.Заказ КАК Заказ,
	|	Заказы.РасходнаяНакладная КАК РасходнаяНакладная,
	|	Заказы.СлужбаДоставки КАК СлужбаДоставки,
	|	ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК КОплате,
	|	ЛОЖЬ КАК СостояниеОтгрузкиИзменено,
	|	ЛОЖЬ КАК СостояниеОплатыИзменено,
	|	НЕ Заказы.ЗаказДоставлен КАК МожноМенятьСостояниеОтгрузки,
	|	ВЫБОР
	|		КОГДА Заказы.СлужбаДоставки <> ЗНАЧЕНИЕ(Справочник.СлужбыДоставки.ДоставкаСобственнымиСилами)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК МожноМенятьСостояниеОплаты,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыЗаказа.НеОплачен) КАК СостояниеОплаты,
	|	Заказы.СостояниеЗаказа КАК СостояниеЗаказа,
	|	Заказы.НакладнаяДоставлена КАК НакладнаяДоставлена
	|ИЗ
	|	Заказы КАК Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПокупателями.Остатки(, (Заказ, Документ) В
	|			(ВЫБРАТЬ
	|				Заказы.Заказ,
	|				Заказы.РасходнаяНакладная
	|			ИЗ
	|				Заказы)) КАК РасчетыСПокупателямиОстатки
	|		ПО Заказы.Заказ = РасчетыСПокупателямиОстатки.Заказ
	|		И Заказы.РасходнаяНакладная = РасчетыСПокупателямиОстатки.Документ
	|УПОРЯДОЧИТЬ ПО
	|	Заказ,
	|	РасходнаяНакладная
	|АВТОУПОРЯДОЧИВАНИЕ";
	
КонецФункции

&НаСервере
Функция СтрокаДерева(Заказ, РасходнаяНакладная)
	
	Для каждого СтрокаДерева Из ПланДоставки.ПолучитьЭлементы() Цикл
		Если СтрокаДерева.Заказ = Заказ И СтрокаДерева.РасходнаяНакладная = РасходнаяНакладная Тогда
			Возврат СтрокаДерева;
		КонецЕсли; 
	КонецЦикла; 
	Возврат Неопределено; 
	
КонецФункции

&НаСервере
Функция СтрокиПоЗаказу(Заказ)
	
	НайденныеСтроки = Новый Массив;
	Для каждого СтрокаДерева Из ПланДоставки.ПолучитьЭлементы() Цикл
		Если СтрокаДерева.Заказ = Заказ Тогда
			НайденныеСтроки.Добавить(СтрокаДерева);
		КонецЕсли; 
	КонецЦикла; 
	Возврат НайденныеСтроки; 
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоЗаказов()
	
	ОбновитьЗаголовокФильтров();
	Если НЕ СостоянияЗаказовЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	Модифицированность = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СлужбаДоставки", ФильтрСлужбаДоставки);
	Запрос.УстановитьПараметр("Курьер", ФильтрКурьер);
	Запрос.УстановитьПараметр("СпособДоставки", ФильтрСпособДоставки);
	Запрос.УстановитьПараметр("СпособОтгрузки", ФильтрСпособОтгрузки);
	Запрос.УстановитьПараметр("МаршрутныйЛист", ФильтрМаршрутныйЛист);
	Запрос.УстановитьПараметр("ВидЗаказа", ФильтрВидЗаказа);
	Запрос.УстановитьПараметр("ТолькоНедоставленные", ФильтрТолькоНедоставленные);
	Запрос.УстановитьПараметр("Организация", ФильтрОрганизация);
	Запрос.УстановитьПараметр("ЗонаТариф", ФильтрЗонаТариф);
	Запрос.УстановитьПараметр("Склад", ФильтрСклад);
	Запрос.УстановитьПараметр("ДатаДоставки", ФильтрДатаДоставки);
	Запрос.Текст = ТекстЗапросаДеревоЗаказов();
	Результат = Запрос.ВыполнитьПакет();
	
	ПланДоставки.ПолучитьЭлементы().Очистить();
	ПоНоменклатуре = Ложь;
	
	ВыборкаОтгрузки = Результат.Получить(2).Выбрать();
	ВыборкаОплаты = Результат.Получить(3).Выбрать();
	ВыборкаРасшифровка = Результат.Получить(4).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаКорень = Результат.Получить(5).Выбрать();
	
	ДокументыДляПолученияПредставлений = Новый Массив;
	Пока ВыборкаКорень.Следующий() Цикл
	    Если ЗначениеЗаполнено(ВыборкаКорень.Заказ) И ПредставленияДокументов.Получить(ВыборкаКорень.Заказ)=Неопределено Тогда
			ДокументыДляПолученияПредставлений.Добавить(ВыборкаКорень.Заказ);
		КонецЕсли; 
	    Если ЗначениеЗаполнено(ВыборкаКорень.РасходнаяНакладная) И ПредставленияДокументов.Получить(ВыборкаКорень.РасходнаяНакладная) = Неопределено Тогда
			ДокументыДляПолученияПредставлений.Добавить(ВыборкаКорень.РасходнаяНакладная);
		КонецЕсли; 
	КонецЦикла;
	Пока ВыборкаОтгрузки.Следующий() Цикл
	    Если ЗначениеЗаполнено(ВыборкаОтгрузки.ДокументВозврата) И ПредставленияДокументов.Получить(ВыборкаОтгрузки.ДокументВозврата) = Неопределено Тогда
			ДокументыДляПолученияПредставлений.Добавить(ВыборкаОтгрузки.ДокументВозврата);
		КонецЕсли; 
	КонецЦикла; 
	Пока ВыборкаОплаты.Следующий() Цикл
	    Если ЗначениеЗаполнено(ВыборкаОплаты.ДокументОплаты) И ПредставленияДокументов.Получить(ВыборкаОплаты.ДокументОплаты) = Неопределено Тогда
			ДокументыДляПолученияПредставлений.Добавить(ВыборкаОплаты.ДокументОплаты);
		КонецЕсли; 
	КонецЦикла; 
	Если ДокументыДляПолученияПредставлений.Количество() > 0 Тогда
		ДополнитьПредставления(ДокументыДляПолученияПредставлений);
	КонецЕсли; 
	
	ВыборкаКорень.Сбросить();
	ВыборкаОтгрузки = Результат.Получить(2).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОплаты = Результат.Получить(3).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКорень.Следующий() Цикл
		СтрокаДерева = ПланДоставки.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, ВыборкаКорень);
		СтрокаДерева.ЗаказПредставление = ПредставленияДокументов.Получить(СтрокаДерева.Заказ);
		Если ЗначениеЗаполнено(СтрокаДерева.РасходнаяНакладная) Тогда
			СтрокаДерева.РасходнаяНакладнаяПредставление = ПредставленияДокументов.Получить(СтрокаДерева.РасходнаяНакладная);
		КонецЕсли; 
		СтрокаДерева.ПредставлениеГруппировки = "";
		СтрокаДерева.Возвраты = Новый СписокЗначений;
		СтрокаДерева.Оплаты = Новый СписокЗначений;
	КонецЦикла;
	
	КУдалению = Новый Массив;
	
	// Отгрузка и доставка
	Пока ВыборкаОтгрузки.Следующий() Цикл
		ВыборкаОтгрузкиРасходные = ВыборкаОтгрузки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОтгрузкиРасходные.Следующий() Цикл
			СтрокаДерева = СтрокаДерева(ВыборкаОтгрузкиРасходные.Заказ, ВыборкаОтгрузкиРасходные.ДокументОтгрузки);
			Если СтрокаДерева = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			ШаблонПредставления = НСтр("ru = '%1, %2'");
			Если ВыборкаОтгрузки.Отгружено - ВыборкаОтгрузки.Возвращено <= 0 Тогда
				СтатусОтгрузки = НСтр("ru = 'не отгружен'");
			ИначеЕсли ВыборкаОтгрузки.Отгружено - ВыборкаОтгрузки.Возвращено >= ВыборкаОтгрузки.Заказано Тогда
				СтатусОтгрузки = НСтр("ru = 'отгружен полностью'");
			Иначе
				СтатусОтгрузки = НСтр("ru = 'отгружен частично'");
			КонецЕсли;
			ПредставлениеГруппировки = СтрШаблон(ШаблонПредставления, СтрокаДерева.ПредставлениеГруппировки, СтатусОтгрузки);
			СтрокаДерева.ПредставлениеГруппировки = ПредставлениеГруппировки;
			Если НЕ СтрокаДерева.МожноМенятьСостояниеОтгрузки И (ВыборкаОтгрузки.Отгружено - ВыборкаОтгрузки.Возвращено) > 0 Тогда
				// Заказ доставлен
				Если ВыборкаОтгрузки.Отгружено - ВыборкаОтгрузки.Возвращено >= ВыборкаОтгрузки.Заказано Тогда
					СтатусДоставки = НСтр("ru = 'доставлен полностью'");
				Иначе
					СтатусДоставки = НСтр("ru = 'доставлен частично'");
				КонецЕсли;
				ПредставлениеГруппировки = СтрШаблон(ШаблонПредставления, СтрокаДерева.ПредставлениеГруппировки, СтатусДоставки);
				СтрокаДерева.ПредставлениеГруппировки = ПредставлениеГруппировки;
				ОбновитьПредставлениеДоставки(СтрокаДерева);
			КонецЕсли;
			Если ВыборкаОтгрузкиРасходные.Отгружено = 0 И ВыборкаОтгрузкиРасходные.Возвращено = 0 Тогда
				СтрокаДерева.СостояниеОтгрузки = Перечисления.СостоянияДоставкиЗаказа.ПустаяСсылка();
			ИначеЕсли НЕ СтрокаДерева.НакладнаяДоставлена Тогда 
				СтрокаДерева.СостояниеОтгрузки = Перечисления.СостоянияДоставкиЗаказа.Отгружен;
			ИначеЕсли ВыборкаОтгрузкиРасходные.Отгружено = ВыборкаОтгрузкиРасходные.Возвращено Тогда
				СтрокаДерева.СостояниеОтгрузки = Перечисления.СостоянияДоставкиЗаказа.НеДоставлен;
			ИначеЕсли ВыборкаОтгрузкиРасходные.Возвращено = 0 Тогда
				СтрокаДерева.СостояниеОтгрузки = Перечисления.СостоянияДоставкиЗаказа.Доставлен;
			Иначе
				СтрокаДерева.СостояниеОтгрузки = Перечисления.СостоянияДоставкиЗаказа.ДоставленЧастично;
			КонецЕсли; 
			ВыборкаДетали = ВыборкаОтгрузкиРасходные.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(ВыборкаДетали.ДокументВозврата) Тогда
					Продолжить;
				КонецЕсли; 	
				Если СтрокаДерева.Возвраты.НайтиПоЗначению(ВыборкаДетали.ДокументВозврата) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СтрокаДерева.Возвраты.Добавить(ВыборкаДетали.ДокументВозврата, ПредставленияДокументов.Получить(ВыборкаДетали.ДокументВозврата));
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
	// Оплата
	Пока ВыборкаОплаты.Следующий() Цикл
		ВыборкаОплатыРасходные = ВыборкаОплаты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ОбщиеОплаты = Новый Соответствие;
		Пока ВыборкаОплатыРасходные.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаОплатыРасходные.РасходнаяНакладная) Тогда
				ВыборкаДетали = ВыборкаОплатыРасходные.Выбрать();
				Пока ВыборкаДетали.Следующий() Цикл
					ОбщиеОплаты.Вставить(ВыборкаДетали.ДокументОплаты, ВыборкаДетали.СуммаОплаты);	
				КонецЦикла; 
				Продолжить;
			КонецЕсли; 
			СтрокаДерева = СтрокаДерева(ВыборкаОплатыРасходные.Заказ, ВыборкаОплатыРасходные.РасходнаяНакладная);
			Если СтрокаДерева = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			ВыборкаДетали = ВыборкаОплатыРасходные.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(ВыборкаДетали.ДокументОплаты) Тогда
					Продолжить;
				КонецЕсли;
				Если ВыборкаДетали.СуммаОплаты <= 0 Тогда
					Продолжить;
				КонецЕсли; 
				Если СтрокаДерева.Оплаты.НайтиПоЗначению(ВыборкаДетали.ДокументОплаты) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СтрокаДерева.Оплаты.Добавить(ВыборкаДетали.ДокументОплаты, ПредставленияДокументов.Получить(ВыборкаДетали.ДокументОплаты));
			КонецЦикла;
		КонецЦикла;
		// Обновление данных в строках по заказу
		СтрокиДерева = СтрокиПоЗаказу(ВыборкаОплаты.Заказ);
		Для каждого СтрокаДерева Из СтрокиДерева Цикл
			ОсталосьОплатить = СтрокаДерева.КОплате;
			Если ОсталосьОплатить > 0 Тогда
				Для каждого КлючИЗначение Из ОбщиеОплаты Цикл
					Если КлючИЗначение.Значение <= 0 Тогда
						Продолжить;
					КонецЕсли; 
					СуммаЗачета = Мин(ОсталосьОплатить, КлючИЗначение.Значение);
					Если СтрокаДерева.Оплаты.НайтиПоЗначению(КлючИЗначение.Ключ) = Неопределено Тогда
						СтрокаДерева.Оплаты.Добавить(КлючИЗначение.Ключ, ПредставленияДокументов.Получить(КлючИЗначение.Ключ));
					КонецЕсли;
					ОсталосьОплатить = ОсталосьОплатить - СуммаЗачета;
					ОбщиеОплаты[КлючИЗначение.Ключ] = КлючИЗначение.Значение - СуммаЗачета;
					Если ОсталосьОплатить <= 0 Тогда
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли;
			СтрокаДерева.КОплате = ОсталосьОплатить;
			СтрокаДерева.СостояниеОплаты = Перечисления.СостоянияОплатыЗаказа.НеОплачен;
			Если СтрокаДерева.КОплате <= 0 Тогда
				ОбновитьПредставлениеОплат(СтрокаДерева); 
				Если ВыборкаОплаты.БезналичнаяОплата И ВыборкаОплаты.НаличнаяОплата Тогда
					СтрокаДерева.СостояниеОплаты = Перечисления.СостоянияОплатыЗаказа.КомбинированнаяОплата;
				ИначеЕсли ВыборкаОплаты.БезналичнаяОплата Тогда 
					СтрокаДерева.СостояниеОплаты = Перечисления.СостоянияОплатыЗаказа.ОплаченКартой;
				ИначеЕсли ВыборкаОплаты.НаличнаяОплата Тогда 
					СтрокаДерева.СостояниеОплаты = Перечисления.СостоянияОплатыЗаказа.ОплаченНаличными;
				КонецЕсли;
				Если ФильтрТолькоНеоплаченные
					ИЛИ СтрокаДерева.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен Тогда
					КУдалению.Добавить(СтрокаДерева);
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла;
	
	Для каждого СтрокаДерева Из КУдалению Цикл
		ПланДоставки.ПолучитьЭлементы().Удалить(СтрокаДерева);
	КонецЦикла; 
	
	// Расшифровка до номенклатуры
	Пока ВыборкаРасшифровка.Следующий() Цикл
		ВыборкаРасшифровкаРасходные = ВыборкаРасшифровка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаРасшифровкаРасходные.Следующий() Цикл
			СтрокаДерева = СтрокаДерева(ВыборкаРасшифровкаРасходные.Заказ, ВыборкаРасшифровкаРасходные.РасходнаяНакладная);
	        Если СтрокаДерева = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаДерева.Сумма = ВыборкаРасшифровкаРасходные.СуммаСВозвратом;
			СтрокаДерева.Аванс = СтрокаДерева.Сумма - СтрокаДерева.КОплате;
			Если СтрокаДерева.СостояниеОтгрузки <> Перечисления.СостоянияДоставкиЗаказа.ДоставленЧастично Тогда
				Продолжить;
			КонецЕсли; 
			ВыборкаДетали = ВыборкаРасшифровкаРасходные.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
				СтрокаНоменклатура = СтрокаДерева.ПолучитьЭлементы().Добавить();
				СтрокаНоменклатура.Группировка = ВыборкаДетали.Номенклатура;
				СтрокаНоменклатура.Характеристика = ВыборкаДетали.Характеристика;
				Если ВыборкаДетали.Отгружено = 0 Тогда
					СтрокаНоменклатура.СостояниеОтгрузки = Перечисления.СостоянияДоставкиЗаказа.НеДоставлен;
				ИначеЕсли ВыборкаДетали.Заказано <> ВыборкаДетали.Отгружено Тогда
					СтрокаНоменклатура.СостояниеОтгрузки = Перечисления.СостоянияДоставкиЗаказа.ДоставленЧастично;
				ИначеЕсли ВыборкаДетали.Заказано = ВыборкаДетали.Отгружено Тогда
					СтрокаНоменклатура.СостояниеОтгрузки = Перечисления.СостоянияДоставкиЗаказа.Доставлен;
				КонецЕсли; 
				СтрокаНоменклатура.МожноМенятьСостояниеОтгрузки = (ТипЗнч(ВыборкаДетали.Номенклатура) = Тип("СправочникСсылка.Номенклатура") И НЕ ВыборкаДетали.ЭтоУслуга);
				СтрокаНоменклатура.МожноМенятьСостояниеОплаты = Ложь;
				СтрокаНоменклатура.Сумма = ВыборкаДетали.Сумма;
				ЗаполнитьПредставлениеНоменклатуры(СтрокаНоменклатура);
			КонецЦикла;
			Если НЕ ПоНоменклатуре И СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
				ПоНоменклатуре = Истина;
			КонецЕсли;
			ОбновитьСуммыСтрокиДерева(СтрокаДерева);
		КонецЦикла; 
	КонецЦикла;
	
	Для каждого СтрокаДерева Из ПланДоставки.ПолучитьЭлементы() Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаДерева.РасходнаяНакладная) Тогда
			СтрокаДерева.МожноМенятьСостояниеОтгрузки = Ложь;
		КонецЕсли;
		Если Лев(СтрокаДерева.ПредставлениеГруппировки, 2) = ", " Тогда
			СтрокаДерева.ПредставлениеГруппировки = Сред(СтрокаДерева.ПредставлениеГруппировки, 3);
		КонецЕсли; 
		ОбновитьСуммыСтрокиДерева(СтрокаДерева);
	КонецЦикла; 
	
	УстановитьВидимостьЭлементов(ЭтотОбъект);
	РассчитатьИтоги(ЭтаФорма);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементов(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.ПоНоменклатуре Тогда
		Элементы.ПланДоставкиГруппаГруппировка.Заголовок = НСтр("ru = 'Заказ и документ отгрузки / Номенклатура'");
		Элементы.ПланДоставки.Отображение = ОтображениеТаблицы.Дерево;
	Иначе
		Элементы.ПланДоставкиГруппаГруппировка.Заголовок = НСтр("ru = 'Заказ и документ отгрузки'");
		Элементы.ПланДоставки.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоги(Форма)
	
	Элементы = Форма.Элементы;
	
	Дерево = Форма.ПланДоставки;
	Форма.ИтогКОплате = 0;
	Форма.ИтогОплачено = 0;
	Форма.ИтогОплаченоНаличными = 0;
	Форма.ИтогОплаченоКартой = 0;
	Для каждого СтрокаДерева Из Дерево.ПолучитьЭлементы() Цикл
		Форма.ИтогКОплате = Форма.ИтогКОплате+СтрокаДерева.КОплате;
		Форма.ИтогОплачено = Форма.ИтогОплачено+СтрокаДерева.Оплачено;
		Если ЗаказОплаченНаличными(СтрокаДерева) Тогда
			Форма.ИтогОплаченоНаличными = Форма.ИтогОплаченоНаличными+СтрокаДерева.КОплате;
		ИначеЕсли ЗаказОплаченКартой(СтрокаДерева) Тогда
			Форма.ИтогОплаченоКартой = Форма.ИтогОплаченоКартой+СтрокаДерева.КОплате;
		КонецЕсли; 
	КонецЦикла;
	
	Если Форма.ИтогОплаченоНаличными=0 ИЛИ Форма.ИтогОплаченоКартой=0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИтогОплаченоНаличными", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИтогОплаченоКартой", "Видимость", Ложь);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИтогОплаченоНаличными", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИтогОплаченоКартой", "Видимость", Истина);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСформировать", "Доступность", Форма.Модифицированность);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПредставления(ДокументыДляПолученияПредставлений)
	
	Соответствие = Новый Соответствие(ПредставленияДокументов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", ДокументыДляПолученияПредставлений);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ЗаказПокупателя.Номер КАК Номер,
	|	ЗаказПокупателя.Дата КАК Дата,
	|	ЗаказПокупателя.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&Ссылки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходнаяНакладная.Ссылка,
	|	РасходнаяНакладная.Номер,
	|	РасходнаяНакладная.Дата,
	|	РасходнаяНакладная.СуммаДокумента
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|ГДЕ
	|	РасходнаяНакладная.Ссылка В(&Ссылки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходнаяНакладная.Ссылка,
	|	ПриходнаяНакладная.Номер,
	|	ПриходнаяНакладная.Дата,
	|	ПриходнаяНакладная.СуммаДокумента
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|ГДЕ
	|	ПриходнаяНакладная.Ссылка В(&Ссылки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеВКассу.Ссылка,
	|	ПоступлениеВКассу.Номер,
	|	ПоступлениеВКассу.Дата,
	|	ПоступлениеВКассу.СуммаДокумента
	|ИЗ
	|	Документ.ПоступлениеВКассу КАК ПоступлениеВКассу
	|ГДЕ
	|	ПоступлениеВКассу.Ссылка В(&Ссылки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеНаСчет.Ссылка,
	|	ПоступлениеНаСчет.Номер,
	|	ПоступлениеНаСчет.Дата,
	|	ПоступлениеНаСчет.СуммаДокумента
	|ИЗ
	|	Документ.ПоступлениеНаСчет КАК ПоступлениеНаСчет
	|ГДЕ
	|	ПоступлениеНаСчет.Ссылка В(&Ссылки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОперацияПоПлатежнымКартам.Ссылка,
	|	ОперацияПоПлатежнымКартам.Номер,
	|	ОперацияПоПлатежнымКартам.Дата,
	|	ОперацияПоПлатежнымКартам.СуммаДокумента
	|ИЗ
	|	Документ.ОперацияПоПлатежнымКартам КАК ОперацияПоПлатежнымКартам
	|ГДЕ
	|	ОперацияПоПлатежнымКартам.Ссылка В(&Ссылки)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ПоступлениеВКассу") Тогда
			Префикс = НСтр("ru = 'В кассу'");
			Суффикс = СтрШаблон("(%1)", Формат(Выборка.СуммаДокумента, "ЧДЦ=2"));
		ИначеЕсли ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
			Префикс = НСтр("ru = 'На счет'");
			Суффикс = СтрШаблон("(%1)", Формат(Выборка.СуммаДокумента, "ЧДЦ=2"));
		ИначеЕсли ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам") Тогда
			Префикс = НСтр("ru = 'Оплата картой'");
			Суффикс = СтрШаблон("(%1)", Формат(Выборка.СуммаДокумента, "ЧДЦ=2"));
		ИначеЕсли ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			Префикс = НСтр("ru = 'Заказ'");
			Суффикс = "";
		ИначеЕсли ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
			Префикс = НСтр("ru = 'РН'");
			Суффикс = "";
		ИначеЕсли ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
			Префикс = НСтр("ru = 'Возврат'");
			Суффикс = "";
		Иначе
			Префикс = "";
			Суффикс = "";
		КонецЕсли; 
		Представление = СокрЛП(СтрШаблон(
		НСтр("ru = '%1 %2 от %3 %4'"),
		Префикс,
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина),
		Формат(Выборка.Дата, "ДЛФ=D"),
		Суффикс));
		Соответствие.Вставить(Выборка.Ссылка, Представление);
	КонецЦикла; 
	
	ПредставленияДокументов = Новый ФиксированноеСоответствие(Соответствие);
	
КонецПроцедуры

&НаСервере
Процедура РазвернутьНоменклатуру(Идентификатор)
		
	СтрокаДерева = ПланДоставки.НайтиПоИдентификатору(Идентификатор);
	СтрокаДерева.ПолучитьЭлементы().Очистить();
	
	Если ТипЗнч(СтрокаДерева.Группировка)<>Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РасходнаяНакладная", СтрокаДерева.РасходнаяНакладная);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Заказ КАК ЗаказПокупателя,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
	|	СУММА(ВложенныйЗапрос.Заказано) КАК Заказано,
	|	СУММА(ВложенныйЗапрос.Отгружено) КАК Отгружено,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоУслуга
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасходнаяНакладнаяЗапасы.Заказ КАК Заказ,
	|		РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|		РасходнаяНакладнаяЗапасы.Характеристика КАК Характеристика,
	|		РасходнаяНакладнаяЗапасы.Всего КАК Сумма,
	|		РасходнаяНакладнаяЗапасы.Количество КАК Заказано,
	|		РасходнаяНакладнаяЗапасы.Количество КАК Отгружено
	|	ИЗ
	|		Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|	ГДЕ
	|		РасходнаяНакладнаяЗапасы.Ссылка.Проведен
	|		И РасходнаяНакладнаяЗапасы.Ссылка = &РасходнаяНакладная
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РасходнаяНакладная.Заказ,
	|		РасходнаяНакладная.НоменклатураДоставки,
	|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|		РасходнаяНакладная.СтоимостьДоставки,
	|		1,
	|		1
	|	ИЗ
	|		Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|	ГДЕ
	|		РасходнаяНакладная.Проведен
	|		И РасходнаяНакладная.СтоимостьДоставки > 0
	|		И РасходнаяНакладная.Ссылка = &РасходнаяНакладная
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ПриходнаяНакладнаяЗапасы.Заказ,
	|		ПриходнаяНакладнаяЗапасы.Номенклатура,
	|		ПриходнаяНакладнаяЗапасы.Характеристика,
	|		0,
	|		0,
	|		-ПриходнаяНакладнаяЗапасы.Количество
	|	ИЗ
	|		Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
	|	ГДЕ
	|		ПриходнаяНакладнаяЗапасы.Ссылка.Проведен
	|		И
	|			ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|		И ПриходнаяНакладнаяЗапасы.Ссылка.ДокументОснование = &РасходнаяНакладная) КАК ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Заказ,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаНоменклатура = СтрокаДерева.ПолучитьЭлементы().Добавить();
		СтрокаНоменклатура.Группировка = Выборка.Номенклатура;
		СтрокаНоменклатура.Характеристика = Выборка.Характеристика;
		СтрокаНоменклатура.СостояниеОтгрузки = ?(Выборка.Отгружено = 0, Перечисления.СостоянияДоставкиЗаказа.НеДоставлен, Перечисления.СостоянияДоставкиЗаказа.Доставлен);
		СтрокаНоменклатура.МожноМенятьСостояниеОплаты = Ложь;
		СтрокаНоменклатура.МожноМенятьСостояниеОтгрузки = ТипЗнч(Выборка.Номенклатура) = Тип("СправочникСсылка.Номенклатура") И НЕ Выборка.ЭтоУслуга;
		СтрокаНоменклатура.Сумма = Выборка.Сумма;
		ЗаполнитьПредставлениеНоменклатуры(СтрокаНоменклатура);
	КонецЦикла;
	
	ОбновитьСуммыСтрокиДерева(СтрокаДерева);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСуммыСтрокиДерева(СтрокаДерева)
	
	СтрокаРодителя = СтрокаДерева.ПолучитьРодителя();
	Если СтрокаРодителя <> Неопределено Тогда
		// Строка с товаром
		Если ЗаказДоставлен(СтрокаДерева) Тогда
			СтрокаДерева.КОплате = СтрокаДерева.Сумма;
		Иначе
			СтрокаДерева.КОплате = 0;
		КонецЕсли;
		СтрокаРодителя.КОплате = 0;
		Для каждого ПодСтрока Из СтрокаРодителя.ПолучитьЭлементы() Цикл
			СтрокаРодителя.КОплате = СтрокаРодителя.КОплате + ПодСтрока.КОплате;
		КонецЦикла;
		Если ЗаказДоставлен(СтрокаРодителя) Тогда
			СтрокаРодителя.КОплате = СтрокаРодителя.КОплате - СтрокаРодителя.Аванс;
		КонецЕсли; 
		ОбновитьДоступностьСостоянияОплаты(СтрокаРодителя);
		Если ЗаказОплачен(СтрокаРодителя) И СтрокаРодителя.МожноМенятьСостояниеОплаты Тогда
			СтрокаРодителя.Оплачено = СтрокаРодителя.КОплате;
		Иначе
			СтрокаРодителя.Оплачено = 0;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.ПолучитьЭлементы().Количество() = 0 Тогда
		// Строка заказа без разворота до товаров
		Если ЗаказДоставлен(СтрокаДерева)  Тогда
			СтрокаДерева.КОплате = СтрокаДерева.Сумма - СтрокаДерева.Аванс;
		Иначе
			СтрокаДерева.КОплате = 0;
		КонецЕсли;
		ОбновитьДоступностьСостоянияОплаты(СтрокаДерева);
		Если ЗаказОплачен(СтрокаДерева) И СтрокаДерева.МожноМенятьСостояниеОплаты Тогда
			СтрокаДерева.Оплачено = СтрокаДерева.КОплате;
		Иначе
			СтрокаДерева.Оплачено = 0;
		КонецЕсли;
	Иначе
		// Строка заказа с разворотом до товаров
		СтрокаДерева.Сумма = 0;
		Для каждого ПодСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
			Если ЗаказДоставлен(ПодСтрока) Тогда
				СтрокаДерева.Сумма = СтрокаДерева.Сумма + ПодСтрока.Сумма;
				ПодСтрока.КОплате = ПодСтрока.Сумма;
			Иначе
				ПодСтрока.КОплате = 0;
			КонецЕсли;
		КонецЦикла;
		Если ЗаказДоставлен(СтрокаДерева) Тогда
			СтрокаДерева.КОплате =  СтрокаДерева.Сумма - СтрокаДерева.Аванс;
		КонецЕсли; 
		ОбновитьДоступностьСостоянияОплаты(СтрокаДерева);
		Если ЗаказОплачен(СтрокаДерева) И СтрокаДерева.МожноМенятьСостояниеОплаты Тогда
			СтрокаДерева.Оплачено = СтрокаДерева.КОплате;
		Иначе
			СтрокаДерева.Оплачено = 0;
		КонецЕсли;
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьСостоянияОплаты(СтрокаДерева)
	
	Если НЕ СтрокаДерева.МожноМенятьСостояниеОплаты Тогда
		Возврат;
	КонецЕсли; 
	Если СтрокаДерева.КОплате > 0 
		И НЕ ПустаяСтрока(СтрокаДерева.ПредставлениеСостояниеОплаты) Тогда
		СтрокаДерева.ПредставлениеСостояниеОплаты = "";
		СтрокаДерева.СостояниеОплаты = ПредопределенноеЗначение("Перечисление.СостоянияОплатыЗаказа.НеОплачен");
	ИначеЕсли СтрокаДерева.КОплате <= 0 
		И ПустаяСтрока(СтрокаДерева.ПредставлениеСостояниеОплаты)
		И СтрокаДерева.Оплаты.Количество() > 0 Тогда 
		ОбновитьПредставлениеОплат(СтрокаДерева);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеОплат(СтрокаДерева)
	
	СтрокаДерева.ПредставлениеСостояниеОплаты = "";
	Если СтрокаДерева.Оплаты.Количество() = 1 Тогда
		СтрокаДерева.ПредставлениеСостояниеОплаты = СтрокаДерева.Оплаты[0].Представление;
	ИначеЕсли СтрокаДерева.Оплаты.Количество() > 1 Тогда
		СтрокаДерева.ПредставлениеСостояниеОплаты = СтрШаблон(НСтр("ru = 'Несколько документов (%1)'"), СтрокаДерева.Оплаты.Количество());
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеДоставки(СтрокаДерева)
	
	СтрокаДерева.ПредставлениеСостояниеОтгрузки = "";
	Если СтрокаДерева.МожноМенятьСостояниеОтгрузки Тогда
		Возврат;
	КонецЕсли; 
	Если СтрокаДерева.Возвраты.Количество() = 0 Тогда
		СтрокаДерева.ПредставлениеСостояниеОтгрузки = СтрокаДерева.РасходнаяНакладнаяПредставление;
	Иначе
		СтрокаДерева.ПредставлениеСостояниеОтгрузки = СтрШаблон(НСтр("ru = 'Несколько документов (%1)'"), СтрокаДерева.Возвраты.Количество() + 1);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция СостоянияЗаказовЗаполнены()
	
	СохранитьСостояниеДоставлен();
	
	МассивЗаказов = Новый Массив;
	Для каждого СтрокаТабличнойЧасти Из ПланДоставки.ПолучитьЭлементы() Цикл
		Если СтрокаТабличнойЧасти.СостояниеОтгрузкиИзменено Тогда
			МассивЗаказов.Добавить(СтрокаТабличнойЧасти.Группировка);
		КонецЕсли; 
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказы", МассивЗаказов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателя.ВидЗаказа
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&Заказы)
	|	И ЗаказПокупателя.ВидЗаказа.СостояниеДоставлен = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателя.ВидЗаказа";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество()=0 Тогда
		Возврат Истина;
	КонецЕсли; 
	Пока Выборка.Следующий() Цикл
		Если ФормаПараметры.НесколькоВидовЗаказов Тогда
			ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Не задано состояние доставленных заказов для вида %1'"),
			Выборка.ВидЗаказа),
			Выборка.ВидЗаказа,
			"СостояниеДоставлен",,);
		Иначе
			ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не задано состояние доставленных заказов'"),
			Выборка.ВидЗаказа,
			"СостояниеДоставлен",,);
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура СохранитьСостояниеДоставлен()
	
	Если НЕ ФормаПараметры.НесколькоВидовЗаказов 
		И Элементы.СостояниеЗаказовПриДоставке.Видимость 
		И ЗначениеЗаполнено(СостояниеЗаказовПриДоставке)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.ВидыЗаказовПокупателей.Основной, "СостояниеДоставлен")<>СостояниеЗаказовПриДоставке Тогда
		ВидЗаказаОбъект = Справочники.ВидыЗаказовПокупателей.Основной.ПолучитьОбъект();
		ВидЗаказаОбъект.СостояниеДоставлен = СостояниеЗаказовПриДоставке;
		ВидЗаказаОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаказДоставлен(СтрокаДерева)
	
	Возврат СтрокаДерева.СостояниеОтгрузки=ПредопределенноеЗначение("Перечисление.СостоянияДоставкиЗаказа.Доставлен")
		ИЛИ СтрокаДерева.СостояниеОтгрузки=ПредопределенноеЗначение("Перечисление.СостоянияДоставкиЗаказа.ДоставленЧастично");	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаказОплачен(СтрокаДерева)
	
	Возврат СтрокаДерева.СостояниеОплаты=ПредопределенноеЗначение("Перечисление.СостоянияОплатыЗаказа.ОплаченНаличными")
		ИЛИ СтрокаДерева.СостояниеОплаты=ПредопределенноеЗначение("Перечисление.СостоянияОплатыЗаказа.ОплаченКартой");	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаказОплаченНаличными(СтрокаДерева)
	
	Возврат СтрокаДерева.СостояниеОплаты=ПредопределенноеЗначение("Перечисление.СостоянияОплатыЗаказа.ОплаченНаличными");	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаказОплаченКартой(СтрокаДерева)
	
	Возврат СтрокаДерева.СостояниеОплаты=ПредопределенноеЗначение("Перечисление.СостоянияОплатыЗаказа.ОплаченКартой");	
	
КонецФункции

#Область ГрупповоеИзменениеСтрок

&НаКлиенте
Процедура ПланДоставкиСнятьФлажки(Команда)
	УстановитьПометку(ИмяТЧПланДоставки(), Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиУстановитьФлажки(Команда)
	УстановитьПометку(ИмяТЧПланДоставки(), Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиИзменитьСтроки(Команда)
	ПоказатьСкрытьПанельРедактирования(ИмяТЧПланДоставки(), Истина);
	Если Элементы.ГруппаПланДоставкиИзменениеСтрок.Видимость И Не ЗначениеЗаполнено(ПланДоставкиИзменениеСтрокДействие) Тогда
		ПланДоставкиИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСостояниеДоставки");
		ПланДоставкиИзменениеСтрокДействиеПриИзменении(Элементы.ПланДоставкиИзменениеСтрокДействие);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиВыполнитьДействие(Команда)
	
	ОбработатьТаблицу(ИмяТЧПланДоставки());
	НастроитьОформлениеПанелиРедактирования(ИмяТЧПланДоставки(), 4);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиОтменитьИзменения(Команда)
	ПоказатьСкрытьПанельРедактирования(ИмяТЧПланДоставки());
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиИзменениеСтрокДействиеПриИзменении(Элемент)
	
	ОпределитьОбъектИзменений(ИмяТЧПланДоставки());
	НастроитьОформлениеПанелиРедактирования(ИмяТЧПланДоставки(), 2);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиИзменениеСтрокЗначениеПриИзменении(Элемент)
	НастроитьОформлениеПанелиРедактирования(ИмяТЧПланДоставки(), 3);
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиИзменениеСтрокЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеВыбора = Новый СписокЗначений;
	Если ПланДоставкиИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСостояниеОплаты") Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияОплатыЗаказа.НеОплачен"));
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияОплатыЗаказа.ОплаченНаличными"));
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияОплатыЗаказа.ОплаченКартой"));
	Иначе
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДоставкиЗаказа.Отгружен"));
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДоставкиЗаказа.Доставлен"));
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДоставкиЗаказа.ДоставленЧастично"));
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДоставкиЗаказа.НеДоставлен"));
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиИзменениеСтрокЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПланДоставкиИзменениеСтрокЗначение = ВыбранноеЗначение;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометку(ИмяТЧ, Пометка)
	
	НаборЭлементов = НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ);
	НаборЭлементов.КнопкаСнятьФлажки.Видимость = НЕ НаборЭлементов.КнопкаСнятьФлажки.Видимость;
	НаборЭлементов.КнопкаУстановитьФлажки.Видимость = НЕ НаборЭлементов.КнопкаУстановитьФлажки.Видимость;
	
	СтрокиДерева = ЭтотОбъект[НаборЭлементов.ИмяТЧ].ПолучитьЭлементы();
	Для каждого Строка Из СтрокиДерева Цикл
		Строка.Пометка = Пометка;
		СтрокиСтроки = Строка.ПолучитьЭлементы();
		Для каждого СтрокаСтроки Из СтрокиСтроки Цикл
			СтрокаСтроки.Пометка = Пометка;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьПанельРедактирования(ИмяТЧ, ИзменяетДанные = Неопределено)
	
	Перем СостояниеПерехода;
	ГрупповоеИзменениеСтрокСервер.ПоказатьСкрытьПанельРедактирования(ЭтотОбъект, НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ),
		СостояниеПерехода,
		ИзменяетДанные
	);
	
	УправлениеРезервнымиКопиямиТаблицы(ИмяТЧ, СостояниеПерехода, ИзменяетДанные);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеРезервнымиКопиямиТаблицы(ИмяТЧ, СостояниеПерехода, ИзменяетДанные)
	
	РеквизитРезервнаяКопияТаблицыАдрес = "ПланДоставкиРезервнаяКопияТаблицыАдрес";
	
	УправлениеРезервнымиКопиямиДерева(ЭтотОбъект, ИмяТЧ,
		ЭтотОбъект[РеквизитРезервнаяКопияТаблицыАдрес], СостояниеПерехода, ИзменяетДанные);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УправлениеРезервнымиКопиямиДерева(Форма, ИмяРеквизитаДерево, РезервнаяКопияТаблицыАдрес, СостояниеПерехода, ИзменяетДанные)
	
	ИзменяетДанные = ?(ИзменяетДанные = Неопределено, Ложь, ИзменяетДанные);
	Если СостояниеПерехода = 1 Тогда
		
		Дерево = Форма.РеквизитФормыВЗначение(ИмяРеквизитаДерево);
		СделатьРезервнуюКопиюДерева(Форма, Дерево, РезервнаяКопияТаблицыАдрес);
		
		// При открытии устанавливаем пометки
		Для каждого стр Из Форма[ИмяРеквизитаДерево].ПолучитьЭлементы() Цикл
			стр.Пометка = Истина;
			
			СтрокиСтроки = стр.ПолучитьЭлементы();
			Для каждого стрСтроки Из СтрокиСтроки Цикл
				стрСтроки.Пометка = Истина;
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли СостояниеПерехода = 0 И НЕ ИзменяетДанные Тогда
		Дерево = ПолучитьИзВременногоХранилища(РезервнаяКопияТаблицыАдрес);
		Если ЗначениеЗаполнено(Дерево) Тогда
			Форма.ЗначениеВРеквизитФормы(Дерево, ИмяРеквизитаДерево);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Помещает таблицу во временное хранилище.
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения - Форма, в которой происходит групповое изменение строк ТЧ.
//  Таблица  - ДанныеФормыКоллекция - ТЧ, которую требуется поместить во временное хранилище.
//  РезервнаяКопияТаблицыАдрес - Строка - Вернет адрес таблицы во временном хранилище.
//
&НаСервереБезКонтекста
Процедура СделатьРезервнуюКопиюДерева(ЭтаФорма, Дерево, РезервнаяКопияТаблицыАдрес)
	
	РезервнаяКопияТаблицыАдрес = ПоместитьВоВременноеХранилище(Дерево, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОформлениеПанелиРедактирования(ИмяТЧ, Состояние, СохранитьИзменения = Неопределено)
	
	РеквизитЗначение = "ПланДоставкиИзменениеСтрокЗначение";
	
	Результат = ГрупповоеИзменениеСтрокКлиент.НастроитьОформлениеПанелиРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокКлиент(ИмяТЧ),
		Состояние,
		ЭтотОбъект[РеквизитЗначение]
	);
	
	Если Результат.Свойство("УстановитьСвязиПараметровВыбора") И Результат.УстановитьСвязиПараметровВыбора Тогда
		УстановитьСвязиПараметровВыбораДляЗначения(ИмяТЧ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбораДляЗначения(ИмяТЧ)
	
	ГрупповоеИзменениеСтрокСервер.УстановитьСвязиПараметровВыбора(
		НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущееДействиеИзмененияСтрок()
	
	СохраняемыеНастройки = "";
	
	Если ПланДоставкиИзменениеСтрокДействие <> ПланДоставкиИзменениеСтрокДействиеПриОткрытии Тогда
		СохраняемыеНастройки = ИмяТЧПланДоставки();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СохраняемыеНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьТекущееДействиеИзмененияСтрокСервер(СохраняемыеНастройки);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущееДействиеИзмененияСтрокСервер(СохраняемыеНастройки)
	
	ИменаТЧ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СохраняемыеНастройки);
	Для каждого ИмяТЧ Из ИменаТЧ Цикл
		ГрупповоеИзменениеСтрокСервер.СохранитьНастройки(НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТаблицу(ИмяТЧ)
	
	Если Не ЗначениеЗаполнено(ПланДоставкиИзменениеСтрокЗначение) Тогда
		ТекстСообщения = НСтр("ru = 'Не задано значение.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	НеВыбраноНиОднойСтроки = Истина;
	СтрокиДерева = ПланДоставки.ПолучитьЭлементы();
	Для Каждого ТекущаяСтрока Из СтрокиДерева Цикл
		Если ТекущаяСтрока.Пометка Тогда
			НеВыбраноНиОднойСтроки = Ложь;
			ОбработатьСтрокуТаблицы(ТекущаяСтрока);
		КонецЕсли;
		
		СтрокиСтроки = ТекущаяСтрока.ПолучитьЭлементы();
		Для Каждого ТекущаяСтрокаСтроки Из СтрокиСтроки Цикл
			Если ТекущаяСтрокаСтроки.Пометка Тогда
				НеВыбраноНиОднойСтроки = Ложь;
			Иначе
				Продолжить;
			КонецЕсли;
			
			ОбработатьСтрокуТаблицы(ТекущаяСтрокаСтроки);
		КонецЦикла;
	КонецЦикла;
	
	РассчитатьИтоги(ЭтотОбъект);
	
	Если НеВыбраноНиОднойСтроки Тогда
		ТекстСообщения = НСтр("ru='Не выбрана ни одна строка.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСтрокуТаблицы(ТекущаяСтрока)
	
	Если ПланДоставкиИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСостояниеДоставки") Тогда
		
		// Установим состояние отгрузки, если оно имеет смысл для текущей строки.
		ДанныеВыбораСписок = СостояниеОтгрузкиДанныеВыбораТекущейСтроки(ТекущаяСтрока);
		Если Не ТекущаяСтрока.МожноМенятьСостояниеОтгрузки Тогда
			Возврат;
		КонецЕсли;
		Если ДанныеВыбораСписок.НайтиПоЗначению(ПланДоставкиИзменениеСтрокЗначение) = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяСтрока.ПредставлениеСостояниеОтгрузки) Тогда
			Возврат;
		КонецЕсли;
		
		// ОбработкаВыбора
		ТекущаяСтрока.СостояниеОтгрузкиИзменено = (ТекущаяСтрока.СостояниеОтгрузки<>ПланДоставкиИзменениеСтрокЗначение ИЛИ ТекущаяСтрока.СостояниеОтгрузкиИзменено);
		Если ТекущаяСтрока.СостояниеОтгрузкиИзменено Тогда
			СтрокаРодитель = ТекущаяСтрока.ПолучитьРодителя();
			Если СтрокаРодитель<>Неопределено Тогда
				СтрокаРодитель.СостояниеОтгрузкиИзменено = Истина;
			КонецЕсли; 
		КонецЕсли; 
		
		// ПриИзменении
		ТекущаяСтрока.СостояниеОтгрузки = ПланДоставкиИзменениеСтрокЗначение;
		ПланДоставкиСостояниеОтгрузкиПриИзмененииФрагмент(ТекущаяСтрока);
		
	ИначеЕсли ПланДоставкиИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСостояниеОплаты") Тогда
		
		// Установим состояние оплаты, если оно имеет смысл для текущей строки.
		ДанныеВыбораСписок = СостояниеОплатыДанныеВыбораТекущейСтроки(ТекущаяСтрока);
		Если Не ТекущаяСтрока.МожноМенятьСостояниеОплаты Тогда
			Возврат;
		КонецЕсли;
		Если ДанныеВыбораСписок.НайтиПоЗначению(ПланДоставкиИзменениеСтрокЗначение) = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяСтрока.ПредставлениеСостояниеОплаты) Тогда
			Возврат;
		КонецЕсли;
		
		// ОбработкаВыбора
		ТекущаяСтрока.СостояниеОплатыИзменено = (ТекущаяСтрока.СостояниеОплаты<>ПланДоставкиИзменениеСтрокЗначение ИЛИ ТекущаяСтрока.СостояниеОплатыИзменено);
		
		// ПриИзменении
		ТекущаяСтрока.СостояниеОплаты = ПланДоставкиИзменениеСтрокЗначение;
		ПланДоставкиСостояниеОплатыПриИзмененииФрагмент(ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьОбъектИзменений(ИмяТЧ)
	
	Если ПланДоставкиИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСостояниеДоставки") Тогда
		
		ПланДоставкиИзменениеСтрокОбъектИзмененийРеквизит = "СостояниеОтгрузки";
		ПланДоставкиИзменениеСтрокОбъектИзмененийЭлемент = "ПланДоставкиСостояниеОтгрузки";
		
	ИначеЕсли ПланДоставкиИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСостояниеОплаты") Тогда
		
		ПланДоставкиИзменениеСтрокОбъектИзмененийРеквизит = "СостояниеОплаты";
		ПланДоставкиИзменениеСтрокОбъектИзмененийЭлемент = "ПланДоставкиСостояниеОплаты";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НаборЭлементовГрупповогоИзмененияСтрокКлиент(ИмяТЧ)
	
	НаборЭлементов = Новый Структура();
	НаборЭлементов.Вставить("ИмяТЧ", ИмяТЧПланДоставки());
	НаборЭлементов.Вставить("ДокументСсылка",          УникальныйИдентификатор);
	НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаПланДоставкиИзменениеСтрок);
	НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ПланДоставкиУстановитьФлажки);
	НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ПланДоставкиСнятьФлажки);
	НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ПланДоставкиВыполнитьДействие);
	НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ПланДоставкиПометка);
	НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ПланДоставкиИзменениеСтрокДействие);
	НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ПланДоставкиИзменениеСтрокДействие);
	НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ПланДоставкиИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ПланДоставкиИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ОбъектИзменений",         ПланДоставкиИзменениеСтрокОбъектИзмененийЭлемент);
	НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ПланДоставкиИзменениеСтрокОбъектИзмененийЭлемент), 
		                                                     Элементы[ПланДоставкиИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Функция НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ)
	
	НаборЭлементов = Новый Структура();
	НаборЭлементов.Вставить("ИмяТЧ", ИмяТЧПланДоставки());
	НаборЭлементов.Вставить("ДокументСсылка",          УникальныйИдентификатор);
	НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаПланДоставкиИзменениеСтрок);
	НаборЭлементов.Вставить("КнопкаИзменитьСтроки",    Элементы.ПланДоставкиИзменитьСтроки);
	НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ПланДоставкиУстановитьФлажки);
	НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ПланДоставкиСнятьФлажки);
	НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ПланДоставкиВыполнитьДействие);
	НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ПланДоставкиПометка);
	НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ПланДоставкиИзменениеСтрокДействие);
	НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ПланДоставкиИзменениеСтрокДействие);
	НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ПланДоставкиИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ПланДоставкиИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ОбъектИзменений",         ПланДоставкиИзменениеСтрокОбъектИзмененийЭлемент);
	НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ПланДоставкиИзменениеСтрокОбъектИзмененийЭлемент), 
		                                                     Элементы[ПланДоставкиИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));

	
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокДействий(ИмяТЧ)
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСостояниеДоставки);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСостояниеОплаты);
	
	Элементы.ПланДоставкиИзменениеСтрокДействие.СписокВыбора.Очистить();
	Для каждого Действие Из Действия Цикл
		ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
		Элементы.ПланДоставкиИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
	КонецЦикла;
	
	Если ПланДоставкиИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЗаказПоставщикуЗаказПокупателя
		И Действия.Найти(ПланДоставкиИзменениеСтрокДействие) = Неопределено Тогда
		
		ПланДоставкиИзменениеСтрокДействие = Неопределено;
		ГрупповоеИзменениеСтрокСервер.НастроитьИсходнуюПанельРедактирования(ПланДоставкиИзменениеСтрокЗначение, НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиПометкаПриИзменении(Элемент)
	
	ЭлементУстановитьПометки = Элементы.ПланДоставкиУстановитьФлажки;
	ЭлементСнятьПометки = Элементы.ПланДоставкиСнятьФлажки;
	
	ЕстьСтрокиСПометкой = Ложь;
	СтрокиДерева = ПланДоставки.ПолучитьЭлементы();
	Для Каждого Строка Из СтрокиДерева Цикл
		Если Строка.Пометка Тогда
			ЕстьСтрокиСПометкой = Истина;
			Прервать;
		КонецЕсли;
		СтрокиСтроки = Строка.ПолучитьЭлементы();
		Для Каждого СтрокаСтроки Из СтрокиСтроки Цикл
			Если СтрокаСтроки.Пометка Тогда
				ЕстьСтрокиСПометкой = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ЕстьСтрокиСПометкой Тогда
		ЭлементУстановитьПометки.Видимость = Ложь;
		ЭлементСнятьПометки.Видимость = Истина;
	Иначе
		ЭлементУстановитьПометки.Видимость = Истина;
		ЭлементСнятьПометки.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьПредставлениеНоменклатуры(СтрокаНоменклатура)
	
	Если ЗначениеЗаполнено(СтрокаНоменклатура.Характеристика) Тогда
		ШаблонПредставления = НСтр("ru = '%1, %2'");
		СтрокаНоменклатура.ПредставлениеГруппировки = СтрШаблон(ШаблонПредставления, 
			Строка(СтрокаНоменклатура.Группировка), Строка(СтрокаНоменклатура.Характеристика));
	Иначе
		СтрокаНоменклатура.ПредставлениеГруппировки = Строка(СтрокаНоменклатура.Группировка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФоновоеЗаданиеПолучениеДанных

&НаКлиенте
Процедура ЗапуститьФоновоеЗадание()
	
	УстановитьДоступностьФормы(Ложь);
	
	Задание = ЗаданиеФормированиеДокументовДоставки();
	Если Задание=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПрогрессФормированияДокументов", ЭтотОбъект); 
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
	Задание,
	Новый ОписаниеОповещения("ОбработатьФормированиеДокументов", ЭтотОбъект),
	ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрогрессФормированияДокументов(Прогресс, ДополнительныеПараметры) Экспорт
	
	Если Прогресс = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Прогресс.Статус <> "Выполняется" ИЛИ Прогресс.Прогресс=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИндикаторВыполнения = Прогресс.Прогресс.Процент;
	ДлительнаяОперацияДокумент = Прогресс.Прогресс.Текст;
	ОбновляемыеРеквизиты = Прогресс.Прогресс.ДополнительныеПараметры;
	Если ТипЗнч(ОбновляемыеРеквизиты)=Тип("Соответствие") Тогда
		Для каждого Стр Из ПланДоставки.ПолучитьЭлементы() Цикл
			СтруктураРеквизитов = ОбновляемыеРеквизиты.Получить(Стр.Группировка);
			Если СтруктураРеквизитов<>Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Стр, СтруктураРеквизитов);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьФормированиеДокументов(Результат, Параметры) Экспорт
	
	УстановитьДоступностьФормы(Истина);
	
	Если Результат.Статус <> "Выполнено" Тогда
		Если Результат.Свойство("КраткоеПредставлениеОшибки") Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
			Результат.КраткоеПредставлениеОшибки);
		КонецЕсли; 
		Элементы.СтраницыСтатусФоновогоЗадания.ТекущаяСтраница = Элементы.ЗаданиеЗавершеноСОшибкой;
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	Если ТипЗнч(РезультатВыполнения)=Тип("Структура") И РезультатВыполнения.Свойство("Ошибки") И ТипЗнч(РезультатВыполнения.Ошибки)=Тип("СписокЗначений") И РезультатВыполнения.Ошибки.Количество()>0 Тогда
		Для каждого Ошибка Из РезультатВыполнения.Ошибки Цикл
			ОбщегоНазначенияКлиент.СообщитьПользователю(
			Ошибка.Представление,
			Ошибка.Значение);
		КонецЦикла;
		Элементы.СтраницыСтатусФоновогоЗадания.ТекущаяСтраница = Элементы.ЗаданиеЗавершеноСОшибкой;
		Возврат;
	КонецЕсли;
	
	ОбработатьФормированиеДокументовСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьФормированиеДокументовСервер()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницыСтатусФоновогоЗадания", "Видимость", Ложь);
	ЗаполнитьДеревоЗаказов();
	
КонецПроцедуры
 
&НаСервере
Функция ЗаданиеФормированиеДокументовДоставки()
	
	Если НЕ СостоянияЗаказовЗаполнены() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницыСтатусФоновогоЗадания", "Видимость", Истина);
	Элементы.СтраницыСтатусФоновогоЗадания.ТекущаяСтраница = Элементы.ЗаданиеВыполняется;
	ДлительнаяОперацияДокумент = "";
	ИндикаторВыполнения = 0;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	ДеревоПлан = РеквизитФормыВЗначение("ПланДоставки");
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ПланДоставки", ДеревоПлан);
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
	"Обработки.ФормированиеДокументовДоставки.СформироватьДокументы",
	ПараметрыЗадания,
	ПараметрыВыполнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьФормы(Доступность)
	
	ТолькоПросмотр = НЕ Доступность;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПланДоставки", "ТолькоПросмотр", НЕ Доступность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаФильтры", "ТолькоПросмотр", НЕ Доступность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСостояниеЗаказов", "ТолькоПросмотр", НЕ Доступность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбновить", "Доступность", Доступность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаФормаКоманднаяПанельЛево", "Доступность", Доступность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаФормаКоманднаяПанельПраво", "Доступность", Доступность);
	
КонецПроцедуры

#КонецОбласти

#Область Константы

&НаКлиентеНаСервереБезКонтекста
Функция ИмяТЧПланДоставки()
	
	Возврат "ПланДоставки"; // Не локализуется
	
КонецФункции

#КонецОбласти
