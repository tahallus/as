#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Вызывается из длительной операции по подготовке данных для формы проверки и подбора маркируемой продукции.
// 
// Параметры:
//	Параметры - Структура - содержит следующие значения:
// 	* ПроверкаНеПоДокументу            - Булево - признак получения данных не по ссылке на документ
// 	* ПроверяемыйДокумент              - ДокументСсылка - ссылка на документ, из формы которого открыта форма проверки и подбора
// 	* НачальныйСтатусПроверки          - ПеречислениеСсылка.СтатусыПроверкиНаличияПродукцииИС - статус наличия продукции, используемый при подготовке данных
// 	* ДетализацияСтруктурыХранения     - ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС - значение детализации из формы проверки
// 	* РедактированиеФормыНедоступно    - Булево - признак запрета редактирования формы подбора
// 	* РежимПодбораСуществующихУпаковок - Булево - признак работы со штрихкодами упаковок, имеющимися в информационной базе
// 	* ПараметрыСканирования            - Структура - параметры обработки кодов маркировки, сформированные в форме проверки и подбора
// 	* ПараметрыПроверкиКодовМаркировки - Структура - параметры проверки кодов маркировки по статусу и владельцу, сформированные в форме проверки и подбора
// 	* КонтролироватьСканируемуюПродукциюПоДокументуОснованию - Булево - признак необходимости контроля наличия маркируемой продукции по основанию проверяемого документа
//	АдресРезультата - Строка - адрес временного хранилища, в которое будут помещены результаты выполнения
Процедура ЗагрузитьДанныеДокументаДлительнаяОперация(Параметры, АдресРезультата) Экспорт
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Обработка.РезультатыСверкиКодовМаркировкиТОРГ2.МодульМенеджера.ЗагрузитьДанныеДокументаДлительнаяОперация");
	
	ДанныеДокумента = Новый Структура();
	ДанныеДокумента.Вставить("ДеревоМаркированнойПродукции",          ДеревоМаркированнойПродукции());
	ДанныеДокумента.Вставить("НачальныйСтатусПроверки",               Параметры.НачальныйСтатусПроверки);
	ДанныеДокумента.Вставить("ПроверкаЭлектронногоДокумента",         Параметры.ПроверкаЭлектронногоДокумента);
	ДанныеДокумента.Вставить("ДетализацияСтруктурыХранения",          Параметры.ДетализацияСтруктурыХранения);
	
	ДанныеДокумента.Вставить("СодержимоеУпаковокНедоступно", Ложь);
	ДанныеДокумента.Вставить("СтрокаПродукцияБезУпаковки",   Неопределено);
	ДанныеДокумента.Вставить("СтрокаПачкиБезБлока",          Неопределено);
	ДанныеДокумента.Вставить("СтрокаБлокиБезКоробки",        Неопределено);

	ДанныеДокумента.Вставить("Организация",                  Параметры.ПараметрыСканирования.Организация);
	ДанныеДокумента.Вставить("ПроверяемыйДокумент",          Параметры.ПроверяемыйДокумент);
	ДанныеДокумента.Вставить("ТаблицаРасхожденийКодовМаркировки", СверкаКодовМаркировкиИСМП.ИнициализацияТаблицыШтрихкодыУпаковокПринятоИзлишекНедостача());
	ДанныеДокумента.Вставить("ДоступноСогласованиеРасхождений",   Параметры.ДоступноСогласованиеРасхождений);
	ДанныеДокумента.Вставить("ТаблицаРасхожденийПоДокументу",     СверкаКодовМаркировкиИСМП.ИнициализацияТаблицыШтрихкодыУпаковок(Истина));
	ДанныеДокумента.Вставить("ЭтоПродукцияМОТП", Ложь);
	ДанныеДокумента.Вставить("СверкаПоДаннымКорректировки",   Параметры.СверкаПоДаннымКорректировки);
	
	Если Параметры.Свойство("ДанныеКлючаСессииИСМП") Тогда
		ПараметрыСеанса.ДанныеКлючаСессииИСМП = Параметры.ДанныеКлючаСессииИСМП;
	КонецЕсли;
	
	ДокументОснование = СверкаКодовМаркировкиИСМП.ОпределитьДокументОснованиеСверкиКодов(Параметры.ПроверяемыйДокумент); 
	Если ДокументОснование = Неопределено Тогда
		ВызватьИсключение "Не удалось определить документ-основание для сравнения кодов маркировки";
	КонецЕсли;
	
	ПараметрыСканирования                              = Параметры.ПараметрыСканирования;
	ПараметрыСканирования.СсылкаНаОбъект               = ДокументОснование;
	ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП = Ложь;
	
	Если ДанныеДокумента.СверкаПоДаннымКорректировки Тогда
		ТаблицаМаркируемойПродукцииДокументаОснования= СверкаКодовМаркировкиИСМП.ИнициализироватьТаблицуТоваровЗначенийШтрихкодов();
		СверкаКодовМаркировкиИСМП.ЗаполнитьТаблицуЗначенияШтрихкодовПродукцииПоДокументу(ДокументОснование, ТаблицаМаркируемойПродукцииДокументаОснования);
	Иначе
		ТаблицаМаркируемойПродукцииДокументаОснования = СверкаКодовМаркировкиИСМП.ТаблицаМаркируемойПродукцииДокумента(ДокументОснование);
		ТаблицаМаркируемойПродукцииДокументаОснования.Индексы.Добавить("ВидПродукции");
	КонецЕсли;
	
	ДеревоУпаковокДокументаОснования = ДеревоМаркированнойПродукции();
	ЭтоПродукцияМОТП = Ложь;
	
	Если ТаблицаМаркируемойПродукцииДокументаОснования.Количество() Тогда
		
		ВидыПродукцииДокументаОснования = ТаблицаМаркируемойПродукцииДокументаОснования.ВыгрузитьКолонку("ВидПродукции");
		ВидыПродукцииДокументаОснования = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыПродукцииДокументаОснования);
	
		Если ШтрихкодированиеИС.ПрисутствуетТабачнаяПродукция(ВидыПродукцииДокументаОснования) Тогда
			
			ЭтоПродукцияМОТП = Истина;
			СохраненнаяДетализацияСтруктурыХранения            = СохраненнаяДетализацияСтруктурыХранения(ЭтоПродукцияМОТП, Истина);
			ПараметрыСканирования.ДетализацияСтруктурыХранения = СохраненнаяДетализацияСтруктурыХранения;
			
		Иначе
			
			ЭтоПродукцияМОТП = Ложь;
			СохраненнаяДетализацияСтруктурыХранения = СохраненнаяДетализацияСтруктурыХранения(ЭтоПродукцияМОТП, Истина);
			Если СохраненнаяДетализацияСтруктурыХранения <> Неопределено Тогда 
				ПараметрыСканирования.ДетализацияСтруктурыХранения = СохраненнаяДетализацияСтруктурыХранения;
				ДанныеДокумента.ДетализацияСтруктурыХранения = СохраненнаяДетализацияСтруктурыХранения;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеДокумента.СверкаПоДаннымКорректировки Тогда // сверка корректировки и ТОРГ2
			
			ДанныеШтрихкодовСписок            = Новый Массив;
			ШтрихкодыДокументаПоВидуПродукции = Новый Соответствие;
			
			ПараметрыСканирования.СсылкаНаОбъект                                = ДокументОснование;
			ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП                  = Истина;
			ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева = Ложь;
				
			Для Каждого ВидПродукции из ВидыПродукцииДокументаОснования Цикл
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ВидПродукции", ВидПродукции);
				
				ТаблицаТоваровЗначенийШтрихкодовПоВидуПродукции = ТаблицаМаркируемойПродукцииДокументаОснования.Скопировать(ПараметрыОтбора);
				
				Для Каждого СтрокаШтрихкода Из ТаблицаТоваровЗначенийШтрихкодовПоВидуПродукции Цикл
					ШтрихкодыДокументаПоВидуПродукции.Вставить(СтрокаШтрихкода.ЗначениеШтрихкода);
				КонецЦикла;
				
				Для Каждого СтрокаШтрихкода Из ШтрихкодыДокументаПоВидуПродукции Цикл
					ДанныеШтрихкодовСписок.Добавить(Новый Структура("Штрихкод, Количество", СтрокаШтрихкода.Ключ, 1));
				КонецЦикла;
				
				ПараметрыСканирования.ДопустимыеВидыПродукции.Очистить();
				ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ВидПродукции);
				
				Если ЭтоПродукцияМОТП Тогда
					
					ПринудительноУстановитьДетализацию = ПроверкаИПодборПродукцииМОТП.ДетализацияНаОснованииСтатистикиПоШтрихкодам(
						ШтрихкодыДокументаПоВидуПродукции, ПараметрыСканирования, ДокументОснование, ВидПродукции);
					ПараметрыСканирования.ДетализацияСтруктурыХранения = ПринудительноУстановитьДетализацию;
					ДанныеДокумента.ДетализацияСтруктурыХранения       = СохраненнаяДетализацияСтруктурыХранения;
					
					ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП = Истина;
					РезультатПолученияДанных = ШтрихкодированиеМОТП.ВложенныеШтрихкоды(
						ДанныеШтрихкодовСписок, ПараметрыСканирования);
				Иначе
					РезультатПолученияДанных = ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкодыПоДаннымИСМП(
						ДанныеШтрихкодовСписок, ПараметрыСканирования);
				КонецЕсли;
				
				Если РезультатПолученияДанных.ЕстьОшибки Тогда
					ВызватьИсключение РезультатПолученияДанных.ТекстОшибки;
				ИначеЕсли РезультатПолученияДанных = Неопределено Тогда
					ВызватьИсключение НСтр("ru = 'Не удалось получить данные штрихкодов в сервисе ИСМП'");
				КонецЕсли;
				
				Если РезультатПолученияДанных.ВложенныеШтрихкоды <> Неопределено 
					И РезультатПолученияДанных.ВложенныеШтрихкоды.Свойство("ДеревоУпаковок") Тогда
					ДополнитьДеревоМаркированнойПродукции(
						РезультатПолученияДанных.ВложенныеШтрихкоды.ДеревоУпаковок,
						ДеревоУпаковокДокументаОснования);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			Если ЭтоПродукцияМОТП Тогда
				
				ШтрихкодыУпаковокПоДокументу = ШтрихкодированиеМОТП.ШтрихкодыУпаковокИзДокумента(
					ДокументОснование, ПараметрыСканирования);
				ПринудительноУстановитьДетализацию = ПроверкаИПодборПродукцииМОТП.ДетализацияНаОснованииСтатистикиПоШтрихкодам(
					ШтрихкодыУпаковокПоДокументу, ПараметрыСканирования, ДокументОснование, ВидыПродукцииДокументаОснования[0]);
				
				СохраненнаяДетализацияСтруктурыХранения            = ПринудительноУстановитьДетализацию;
				ПараметрыСканирования.ДетализацияСтруктурыХранения = СохраненнаяДетализацияСтруктурыХранения;
				ДанныеДокумента.ДетализацияСтруктурыХранения       = СохраненнаяДетализацияСтруктурыХранения;
				
				ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева = Ложь; // Для нормализации вложенных штрихкодов
				
				РезультатПолученияДанных = ШтрихкодированиеМОТП.ВложенныеШтрихкодыУпаковокПоДокументу(
					ДокументОснование, ПараметрыСканирования.ДетализацияСтруктурыХранения, ПараметрыСканирования);
				
			Иначе
				
				РезультатПолученияДанных = ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкодыУпаковокПоДокументу(
					ДокументОснование, ПараметрыСканирования.ДетализацияСтруктурыХранения, ПараметрыСканирования);
				
			КонецЕсли;
			
			Если РезультатПолученияДанных.ЕстьОшибки Тогда
				ВызватьИсключение РезультатПолученияДанных.ТекстОшибки;
			ИначеЕсли РезультатПолученияДанных = Неопределено Тогда
				ВызватьИсключение НСтр("ru = 'Не удалось получить данные штрихкодов по документу'");
			КонецЕсли;
			
			Если РезультатПолученияДанных.ВложенныеШтрихкоды <> Неопределено 
				И РезультатПолученияДанных.ВложенныеШтрихкоды.Свойство("ДеревоУпаковок") Тогда
				
				ДеревоУпаковокДокументаОснования = РезультатПолученияДанных.ВложенныеШтрихкоды.ДеревоУпаковок;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыСканирования.СсылкаНаОбъект                                = Параметры.ПроверяемыйДокумент;
	ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП                  = Истина;
	ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева = Ложь;
	
	Если Параметры.ПроверкаЭлектронногоДокумента И Параметры.ДоступноСогласованиеРасхождений Тогда
		ТипЭД = "ТОРГ2";
	ИначеЕсли СверкаКодовМаркировкиИСМП.ЭтоДокументКорректировкаПриобретенияПоСогласованиюСторон(Параметры.ПроверяемыйДокумент) Тогда
		ТипЭД = "УКД";
	Иначе // исправительный УПД
		ТипЭД = "УПД"
	КонецЕсли;
	
	ДанныеНоменклатурыПоДаннымЭДО = ШтрихкодированиеИСМПСлужебный.ДанныеМаркируемойНоменклатурыКодовМаркировкиПоДаннымЭДО(
		Параметры.ПроверяемыйДокумент,
		ТипЭД);
	
	НедопустимыеШтрихкоды = Новый Соответствие;
	
	ТоварыПринятыеБезРасхождений = Новый ТаблицаЗначений;
	ТоварыПринятыеБезРасхождений.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	
	ТаблицаМаркируемойПродукции = Параметры.ТаблицаМаркируемойПродукции;
	ВидыПродукцииДокумента = ТаблицаМаркируемойПродукции.ВыгрузитьКолонку("ВидПродукции");
	ВидыПродукцииДокумента = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыПродукцииДокумента);
	
	Если ТипЭД = "ТОРГ2" Тогда
		МассивНоменклатурыПоДаннымЭДО = ДанныеНоменклатурыПоДаннымЭДО.ВыгрузитьКолонку("Номенклатура");
		
		ТоварыПринятыеБезРасхождений = СверкаКодовМаркировкиИСМП.СформироватьТаблицуПродукцииПринятойБезРасхождений(
			ДокументОснование,
			МассивНоменклатурыПоДаннымЭДО,
			ВидыПродукцииДокумента);
		ТоварыПринятыеБезРасхождений.Индексы.Добавить("Номенклатура");
	КонецЕсли;
	
	ДеревоУпаковокПроверяемогоДокумента = ДеревоМаркированнойПродукции();
	
	Для Каждого ВидПродукции из ВидыПродукцииДокумента Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ВидПродукции", ВидПродукции);
		
		ТаблицаМаркируемойПродукцииПоВидуПродукции = ТаблицаМаркируемойПродукции.Скопировать(ПараметрыОтбора);
		
		ПараметрыСканирования.ДопустимыеВидыПродукции.Очистить();
		ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ВидПродукции);
		
		ДанныеШтрихкодовСписок = Новый Массив;
		
		Если Параметры.ПроверкаЭлектронногоДокумента Тогда
			Если ЭтоПродукцияМОТП И ТипЭД = "ТОРГ2" Тогда
				ПараметрыНормализацииТабакЛогистическаяУпаковка = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
				ПараметрыНормализацииТабакЛогистическаяУпаковка.ИмяСвойстваКодМаркировки = "Штрихкод";
				ПараметрыНормализацииТабакЛогистическаяУпаковка.НачинаетсяСоСкобки       = Ложь;
				
				ПараметрыНормализацииТабакМаркируемыйТовар = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
				ПараметрыНормализацииТабакМаркируемыйТовар.ИмяСвойстваКодМаркировки = "Штрихкод";
				ПараметрыНормализацииТабакМаркируемыйТовар.НачинаетсяСоСкобки       = Ложь;
				ПараметрыНормализацииТабакМаркируемыйТовар.ВключатьМРЦ              = Ложь;
			КонецЕсли;
			
			ШтрихкодыДокументаПоВидуПродукции = Новый Соответствие;
			
			Для Каждого СтрокаТоваровЭлектронногоДокумента Из ДанныеНоменклатурыПоДаннымЭДО Цикл
				Штрихкод = СтрокаТоваровЭлектронногоДокумента.ЗначениеШтрихкода;
				Если ТаблицаМаркируемойПродукцииПоВидуПродукции.Найти(СтрокаТоваровЭлектронногоДокумента.Номенклатура, "Номенклатура") = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТипЭД = "ТОРГ2" И СтрокаТоваровЭлектронногоДокумента.Брак Тогда
					ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(Штрихкод, ВидПродукции);
					Если ДанныеРазбора = Неопределено Тогда
						НедопустимыеШтрихкоды.Вставить(Штрихкод, Штрихкод);
					Иначе
						Если ЭтоПродукцияМОТП Тогда
							РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
								Штрихкод, ВидПродукции, Ложь);
							Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
								НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
									РезультатРазбора, ВидПродукции, ПараметрыНормализацииТабакЛогистическаяУпаковка);
							Иначе
								НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
									РезультатРазбора, ВидПродукции, ПараметрыНормализацииТабакМаркируемыйТовар);
							КонецЕсли;
							НедопустимыеШтрихкоды.Вставить(НормализованныйКодМаркировки, Штрихкод);
						Иначе
							НедопустимыеШтрихкоды.Вставить(ДанныеРазбора.НормализованныйКодМаркировки, Штрихкод);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ТипЭД = "ТОРГ2" И СтрокаТоваровЭлектронногоДокумента.Недостача Тогда
					Продолжить;
				Иначе
					ШтрихкодыДокументаПоВидуПродукции.Вставить(Штрихкод);
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого Штрихкод Из ШтрихкодыДокументаПоВидуПродукции Цикл
				ДанныеШтрихкодовСписок.Добавить(Новый Структура("Штрихкод, Количество", Штрихкод.Ключ, 1));
			КонецЦикла;
			
		Иначе
			
			ШтрихкодыУпаковокДокумента = Новый Массив;
			ШтрихкодированиеИСПереопределяемый.ЗаполнитьШтрихкодыУпаковокДокумента(Параметры.ПроверяемыйДокумент, ШтрихкодыУпаковокДокумента);
			
			Для Каждого Штрихкод Из ШтрихкодыУпаковокДокумента Цикл
				ДанныеШтрихкодовСписок.Добавить(Новый Структура("Штрихкод, Количество", Штрихкод, 1));
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЭтоПродукцияМОТП Тогда
			ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП = Истина;
			РезультатПолученияДанныхИСМП = ШтрихкодированиеМОТП.ВложенныеШтрихкоды(
				ДанныеШтрихкодовСписок, ПараметрыСканирования);
		Иначе
			РезультатПолученияДанныхИСМП = ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкодыПоДаннымИСМП(
				ДанныеШтрихкодовСписок, ПараметрыСканирования);
		КонецЕсли;
		
		Если РезультатПолученияДанныхИСМП.ЕстьОшибки Тогда
			ВызватьИсключение РезультатПолученияДанныхИСМП.ТекстОшибки;
		ИначеЕсли РезультатПолученияДанныхИСМП = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось получить данные штрихкодов в сервисе ИСМП'");
		КонецЕсли;
		
		Если РезультатПолученияДанныхИСМП.ВложенныеШтрихкоды <> Неопределено 
			И РезультатПолученияДанныхИСМП.ВложенныеШтрихкоды.Свойство("ДеревоУпаковок") Тогда
			ДополнитьДеревоМаркированнойПродукции(
				РезультатПолученияДанныхИСМП.ВложенныеШтрихкоды.ДеревоУпаковок,
				ДеревоУпаковокПроверяемогоДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеДокумента.СверкаПоДаннымКорректировки Тогда 
		// для корректировки основное дерево УПД(и)/УКД, фактически принятые коды- данные акта (документ-основание)
		ДеревоУпаковокПлан  = ДеревоУпаковокПроверяемогоДокумента;
		ДеревоУпаковокФакт = ДеревоУпаковокДокументаОснования;
	Иначе // для реализации основное дерево УПД (документ-основание), фактически принятые коды - данные акта
		ДеревоУпаковокПлан = ДеревоУпаковокДокументаОснования;
		ДеревоУпаковокФакт  = ДеревоУпаковокПроверяемогоДокумента;
	КонецЕсли;

	ПараметрыСверки = СверкаКодовМаркировкиИСМП.ИнициализироватьПараметрыСверки();
	ПараметрыСверки.ЭтоПродукцияМОТП = ЭтоПродукцияМОТП;
	ПараметрыСверки.ТоварыПринятыеБезРасхождений = ТоварыПринятыеБезРасхождений;
	Если ЭтоПродукцияМОТП Тогда
		ПараметрыСверки.СохраненнаяДетализацияСтруктурыХранения = СохраненнаяДетализацияСтруктурыХранения;
		НормализоватьЛогистическиеУпаковки(ДеревоУпаковокПлан);
		НормализоватьЛогистическиеУпаковки(ДеревоУпаковокФакт);
	КонецЕсли;
	
	СтруктураТаблицыПланФакт = СверкаКодовМаркировкиИСМП.ТаблицыРасхожденийПоДаннымЭДО(
		ДеревоУпаковокФакт,
		ДеревоУпаковокПлан,
		НедопустимыеШтрихкоды,
		ПараметрыСверки);
	
	ДанныеДокумента.ТаблицаРасхожденийКодовМаркировки = СверкаКодовМаркировкиИСМП.ТаблицаРасхожденийШтриховыхКодовПолная(СтруктураТаблицыПланФакт);
	ДанныеДокумента.ЭтоПродукцияМОТП = ЭтоПродукцияМОТП;
	
	Если Параметры.ДоступноСогласованиеРасхождений Тогда
		ТаблицаРасхожденийПоДокументу = Параметры.ПроверяемыйДокумент.ШтрихкодыУпаковокРасхождения.Выгрузить();
		ТаблицаРасхожденийПоДокументу.Индексы.Добавить("ЗначениеШтрихкода");
		
		ДанныеДокумента.ТаблицаРасхожденийПоДокументу = ТаблицаРасхожденийПоДокументу;
	КонецЕсли;
	
	ЗаполнитьДеревоМаркированнойПродукции(ДеревоУпаковокПлан, ДанныеДокумента);
	
	КоличествоДанных = ИнтеграцияИС.КоличествоСтрокДереваЗначений(ДанныеДокумента.ДеревоМаркированнойПродукции);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
	
	ПоместитьВоВременноеХранилище(ДанныеДокумента, АдресРезультата);
	
КонецПроцедуры

Функция ДеревоМаркированнойПродукции() Экспорт
	
	ДеревоМаркированнойПродукции = Новый ДеревоЗначений();
	ДеревоМаркированнойПродукции.Колонки.Добавить("СтатусПроверки",                      Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПроверкиНаличияПродукцииИС"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеПроверкиПодчиненных",    Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТипУпаковки",                         Новый ОписаниеТипов("ПеречислениеСсылка.ПрочиеЗоныПересчетаПродукцииИСМП, ПеречислениеСсылка.ТипыУпаковок"));
	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхУпаковок",       Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхВНаличии",       Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхОтсутствует",    Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхНеЧислилось",    Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненнойПродукции",      Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхБлоков",         Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхВсего",          Новый ОписаниеТипов("Число"));
	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПачек",                     Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоБлоков",                    Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоВложенныхЕдиниц",           Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("Коэффициент",                         Новый ОписаниеТипов("Число"));
	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Штрихкод",                            Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВсяУпаковкаПроверена",                Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИндексКартинкиТипУпаковки",           Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИндексКартинкиСтатусПроверки",        Новый ОписаниеТипов("Число"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("Представление",                       Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеСодержимоеУпаковки");
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеСодержитсяВДанныхДокумента",        Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеСоответствуетОтбору",               Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ХешСумма",                            Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("Номенклатура",                        Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Характеристика",                      Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Серия",                               Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдентификаторСтроки",                 Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеСерии",                Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазнаяНоменклатура",         Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеХарактеристики",       Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИННВладельца",                        Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("СтатусКодаМаркировки",                Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("GTIN",                                Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныйGTIN",                 Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеПроверкиКодаМаркировки", Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("НедопустимыйКодМаркировки",           Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("СодержимоеНедоступно",                Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ДействиеПоРасхождениям",              Метаданные.ОпределяемыеТипы.ВариантДействийПоРасхождениямКодовМаркировкиИСМП.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВидПродукции",                        Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВидУпаковки",                         Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ХэшСуммаНормализации",                Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("НормализованныйШтрихкод",             Новый ОписаниеТипов("Строка"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеПересчитыватьКоличествоПачек",      Новый ОписаниеТипов("Булево"));
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТипШтрихкода",                        Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	
	Возврат ДеревоМаркированнойПродукции;
	
КонецФункции

// Возвращает сохраненную в хранилище настроек данных форм детализацию отображения структуры упаковок в форме проверки и подбора табачной продукции.
// 
// Параметры:
//  ЭтоПродукцияМОТП - Булево - истина, если для продукции используются групповые упаковки (ТГ Табак).
//  РежимПодбораСуществующихУпаковок - Булево - признак работы со штрихкодами упаковок, имеющимися в информационной базе.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС - сохраненная детализация отображения структуры упаковок.
//
Функция СохраненнаяДетализацияСтруктурыХранения(ЭтоПродукцияМОТП, РежимПодбораСуществующихУпаковок) Экспорт
	
	СохраненнаяДетализация = Неопределено;
	Если ЭтоПродукцияМОТП Тогда
		СохраненныеНастройки   = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ПроверкаИПодбор", "");
		
		Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
			Если РежимПодбораСуществующихУпаковок
				И СохраненныеНастройки.Свойство("ДетализацияСтруктурыХранения") Тогда
				СохраненнаяДетализация = СохраненныеНастройки.ДетализацияСтруктурыХранения;
			ИначеЕсли Не РежимПодбораСуществующихУпаковок
				И СохраненныеНастройки.Свойство("ДетализацияСтруктурыХраненияПриобретение") Тогда
				СохраненнаяДетализация = СохраненныеНастройки.ДетализацияСтруктурыХраненияПриобретение;
			ИначеЕсли СохраненныеНастройки.Свойство("ДетализацияСтруктурыХранения") Тогда
				СохраненнаяДетализация = СохраненныеНастройки.ДетализацияСтруктурыХранения;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		СохраненныеНастройки   = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ПроверкаИПодбор", "");
		
		Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
			Если РежимПодбораСуществующихУпаковок
				И СохраненныеНастройки.Свойство("ДетализацияСтруктурыХранения") Тогда
				СохраненнаяДетализация = СохраненныеНастройки.ДетализацияСтруктурыХранения;
			ИначеЕсли НЕ РежимПодбораСуществующихУпаковок
				И СохраненныеНастройки.Свойство("ДетализацияСтруктурыХраненияПриобретение") Тогда
				СохраненнаяДетализация = СохраненныеНастройки.ДетализацияСтруктурыХраненияПриобретение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СохраненнаяДетализация;
	
КонецФункции

Процедура ДополнитьДеревоМаркированнойПродукции(ДеревоИсточник, ДеревоПриемник)
	
	КоллекцияСтрокПриемника = ДеревоПриемник.Строки;
	
	Для Каждого СтрокаДереваУпаковок Из ДеревоИсточник.Строки Цикл
		
		ДобавитьСтрокуДереваМаркированнойПродукцииПриДополненииДерева(СтрокаДереваУпаковок, КоллекцияСтрокПриемника);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтрокуДереваМаркированнойПродукцииПриДополненииДерева(СтрокаИсточника, КоллекцияСтрокПриемника)
	
	НоваяСтрока = КоллекцияСтрокПриемника.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
	
	КоллекцияСтрокНовойСтроки = НоваяСтрока.Строки;
	
	Для Каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		ДобавитьСтрокуДереваМаркированнойПродукцииПриДополненииДерева(ПодчиненнаяСтрокаИсточника, КоллекцияСтрокНовойСтроки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоМаркированнойПродукции(ДеревоУпаковокДокумента, ДанныеДокумента)
	
	КоллекцияСтрокПриемника = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки;
	
	Если ДанныеДокумента.ЭтоПродукцияМОТП Тогда
		
		Для Каждого СтрокаДереваУпаковок Из ДеревоУпаковокДокумента.Строки Цикл
			ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузкеМОТП(СтрокаДереваУпаковок, КоллекцияСтрокПриемника, ДанныеДокумента);
		КонецЦикла;
		
		Если ДанныеДокумента.СтрокаПачкиБезБлока = Неопределено
			И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки Тогда
			ДобавленнаяСтрокаПачкиБезБлока(ДанныеДокумента);
		КонецЕсли;
		
		Если ДанныеДокумента.СтрокаБлокиБезКоробки = Неопределено
			И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки
			И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими Тогда
			ДобавленнаяСтрокаБлокиБезКоробки(ДанныеДокумента);
		КонецЕсли;
		
	Иначе
		
		Для Каждого СтрокаДереваУпаковок Из ДеревоУпаковокДокумента.Строки Цикл
			ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаДереваУпаковок, КоллекцияСтрокПриемника, ДанныеДокумента);
		КонецЦикла;
		
		Если ДанныеДокумента.СтрокаПродукцияБезУпаковки = Неопределено
			И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки Тогда
			ДобавленнаяСтрокаПродукцияБезУпаковки(ДанныеДокумента);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаИсточника, КоллекцияСтрокПриемника, ДанныеДокумента)
	
	Если ДанныеДокумента.ДоступноСогласованиеРасхождений Тогда
		ТаблицаРасхожденийПоДокументу = ДанныеДокумента.ТаблицаРасхожденийПоДокументу;
	КонецЕсли;
	
	ИнвертироватьСтатусыПроверки = ДанныеДокумента.СверкаПоДаннымКорректировки;
	
	Если СтрокаИсточника.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ПродукцияБезУпаковки Тогда
		
		Если ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки Тогда
			
			НоваяСтрока = ДанныеДокумента.СтрокаПродукцияБезУпаковки;
			
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ДобавленнаяСтрокаПродукцияБезУпаковки(ДанныеДокумента);
			КонецЕсли;
			
		Иначе
			
			Для Каждого СтрокаПродукции Из СтрокаИсточника.Строки Цикл
				ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаПродукции, КоллекцияСтрокПриемника, ДанныеДокумента);
			КонецЦикла;
			
			Возврат;
			
		КонецЕсли;
	
	ИначеЕсли СтрокаИсточника.Родитель = Неопределено
		И СтрокаИсточника.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки Тогда
		
		СтрокаПродукцияБезУпаковки = ДанныеДокумента.СтрокаПродукцияБезУпаковки;
		
		Если СтрокаПродукцияБезУпаковки = Неопределено Тогда
			СтрокаПродукцияБезУпаковки = ДобавленнаяСтрокаПродукцияБезУпаковки(ДанныеДокумента);
		КонецЕсли;
		
		НоваяСтрока = СтрокаПродукцияБезУпаковки.Строки.Добавить();
		Если СтрокаИсточника.Излишек Тогда
			НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась;
		ИначеЕсли СтрокаИсточника.Принята Тогда
			НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
		Иначе
			НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		КонецЕсли;
	Иначе
		
		НоваяСтрока = КоллекцияСтрокПриемника.Добавить();
		Если СтрокаИсточника.Излишек Тогда
			НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась;
			
		ИначеЕсли СтрокаИсточника.Принята Тогда
			НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
			Если СтрокаИсточника.Родитель <> Неопределено Тогда
				СтрокаИсточника.Родитель.ЕстьПринятыеТовары = Истина;
			КонецЕсли;
		Иначе //недостача
			НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
			Если СтрокаИсточника.Родитель <> Неопределено Тогда
				СтрокаИсточника.Родитель.ЕстьНедостачиТовары = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИнвертироватьСтатусыПроверки Тогда
		Если НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась Тогда
			НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует;
		ИначеЕсли НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует Тогда
			НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась;
		КонецЕсли;
	КонецЕсли;
	
	ИсключаяСвойства = "";
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаИсточника, "СтатусПроверки") Тогда
		ИсключаяСвойства = "СтатусПроверки";
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника, , ИсключаяСвойства);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаИсточника, "Статус") Тогда
		НоваяСтрока.СтатусКодаМаркировки = СтрокаИсточника.Статус;
	КонецЕсли;
	Если НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.ПустаяСсылка() Тогда
		НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	ИначеЕсли НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
			НоваяСтрока.ПредставлениеСодержимоеУпаковки = СтрокаИсточника.ПредставлениеНоменклатуры;
		КонецЕсли;
		Если ДанныеДокумента.ДоступноСогласованиеРасхождений Тогда
			
			ВариантыДействийПоРасхождениямКодовМаркировкиИСМППризнать = ИнтеграцияИСМПКлиентСервер.ВариантДействийПоРасхождениямКодовМаркировкиИСМППризнать();
			ВариантыДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать = ИнтеграцияИСМПКлиентСервер.ВариантДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать();
			
			Если НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась
				Или НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует Тогда
				ДействиеПоРасхождениям = ВариантыДействийПоРасхождениямКодовМаркировкиИСМППризнать;
				
				СтрокаРасхожденийДокумента = ТаблицаРасхожденийПоДокументу.Найти(НоваяСтрока.Штрихкод, "ЗначениеШтрихкода");
				Если СтрокаРасхожденийДокумента <> Неопределено Тогда
					Если СтрокаРасхожденийДокумента.Признан = ВариантыДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать Тогда
						ДействиеПоРасхождениям = ВариантыДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать;
					КонецЕсли;
				КонецЕсли;
				НоваяСтрока.ДействиеПоРасхождениям = ДействиеПоРасхождениям;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока);
	
	Если НоваяСтрока.СодержимоеНедоступно Тогда
		ДанныеДокумента.СодержимоеУпаковокНедоступно = Истина;
	КонецЕсли;
	
	КоллекцияСтрокНовойСтроки = НоваяСтрока.Строки;
	
	Для Каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(ПодчиненнаяСтрокаИсточника, КоллекцияСтрокНовойСтроки, ДанныеДокумента);
		Если СтрокаИсточника.Родитель = Неопределено
			И Не ИнвертироватьСтатусыПроверки
			И СтрокаИсточника.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар
			И (СтрокаИсточника.ЕстьПринятыеТовары И СтрокаИсточника.ЕстьНедостачиТовары) Тогда
			НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавленнаяСтрокаПродукцияБезУпаковки(ДанныеДокумента)
	
	НоваяСтрока = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки.Вставить(0);
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ЗаполнитьСтрокуПродукцияБезУпаковки(НоваяСтрока);
	
	ДанныеДокумента.СтрокаПродукцияБезУпаковки = НоваяСтрока;
	
	Возврат НоваяСтрока;
	
КонецФункции

#Область ЗаполнениеСГрупповымиУпаковкамиМОТП

Процедура ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузкеМОТП(СтрокаИсточника, КоллекцияСтрокПриемника, ДанныеДокумента)
	
	Если ДанныеДокумента.ДоступноСогласованиеРасхождений Тогда
		ТаблицаРасхожденийПоДокументу = ДанныеДокумента.ТаблицаРасхожденийПоДокументу;
	КонецЕсли;
	
	ИнвертироватьСтатусыПроверки = ДанныеДокумента.СверкаПоДаннымКорректировки;
	
	Если СтрокаИсточника.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ПачкиБезБлока Тогда
		
		Если ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки Тогда
			
			НоваяСтрока = ДанныеДокумента.СтрокаПачкиБезБлока;
			
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ДобавленнаяСтрокаПачкиБезБлока(ДанныеДокумента);
			КонецЕсли;
			
		Иначе
			
			Для Каждого СтрокаИсточникаПачка Из СтрокаИсточника.Строки Цикл
				ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузкеМОТП(СтрокаИсточникаПачка, КоллекцияСтрокПриемника, ДанныеДокумента);
			КонецЦикла;
			
			Возврат;
			
		КонецЕсли;
	
	ИначеЕсли СтрокаИсточника.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.БлокиБезКоробки Тогда
		
		Если ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки
			И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими Тогда
			
			НоваяСтрока = ДанныеДокумента.СтрокаБлокиБезКоробки;
			
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ДобавленнаяСтрокаБлокиБезКоробки(ДанныеДокумента);
			КонецЕсли;
			
		Иначе
		
			Для Каждого СтрокаИсточникаБлок Из СтрокаИсточника.Строки Цикл
				Если ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими Тогда
					ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузкеМОТП(СтрокаИсточникаБлок, КоллекцияСтрокПриемника, ДанныеДокумента);
				Иначе
					Для Каждого СтрокаИсточникаПачка Из СтрокаИсточникаБлок.Строки Цикл
						ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузкеМОТП(СтрокаИсточникаПачка, КоллекцияСтрокПриемника, ДанныеДокумента);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Возврат;
		
		КонецЕсли;
		
	ИначеЕсли СтрокаИсточника.Родитель = Неопределено
		И СтрокаИсточника.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки Тогда
			
		СтрокаПачкиБезБлока = ДанныеДокумента.СтрокаПачкиБезБлока;
		
		Если СтрокаПачкиБезБлока = Неопределено Тогда
			СтрокаПачкиБезБлока = ДобавленнаяСтрокаПачкиБезБлока(ДанныеДокумента);
		КонецЕсли;
		
		НоваяСтрока = СтрокаПачкиБезБлока.Строки.Добавить();
		Если СтрокаИсточника.Излишек Тогда
			НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась;
		ИначеЕсли СтрокаИсточника.Принята Тогда
			НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
		Иначе
			НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		КонецЕсли;
		
	ИначеЕсли СтрокаИсточника.Родитель = Неопределено
		И ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(СтрокаИсточника)
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими Тогда
			
		СтрокаБлокиБезКоробки = ДанныеДокумента.СтрокаБлокиБезКоробки;
		
		Если СтрокаБлокиБезКоробки = Неопределено Тогда
			СтрокаБлокиБезКоробки = ДобавленнаяСтрокаБлокиБезКоробки(ДанныеДокумента);
		КонецЕсли;
		
		НоваяСтрока = СтрокаБлокиБезКоробки.Строки.Добавить();
		Если СтрокаИсточника.Излишек Тогда
			НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась;
		ИначеЕсли СтрокаИсточника.Принята Тогда
			НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
		Иначе
			НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		КонецЕсли;
		
	ИначеЕсли СтрокаИсточника.Родитель <> Неопределено
		И ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(СтрокаИсточника.Родитель)
		И СтрокаИсточника.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками Тогда
		
		Возврат;
		
	Иначе
		
		НоваяСтрока = КоллекцияСтрокПриемника.Добавить();
		Если СтрокаИсточника.Излишек Тогда
			НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась;
			
		ИначеЕсли СтрокаИсточника.Принята Тогда
			НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
			Если СтрокаИсточника.Родитель <> Неопределено Тогда
				СтрокаИсточника.Родитель.ЕстьПринятыеТовары = Истина;
			КонецЕсли;
		Иначе //недостача
			НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
			Если СтрокаИсточника.Родитель <> Неопределено Тогда
				СтрокаИсточника.Родитель.ЕстьНедостачиТовары = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИнвертироватьСтатусыПроверки Тогда
		Если НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась Тогда
			НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует;
		ИначеЕсли НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует Тогда
			НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась;
		КонецЕсли;
	КонецЕсли;
	
	ИсключаяСвойства = "";
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаИсточника, "СтатусПроверки") Тогда
		ИсключаяСвойства = "СтатусПроверки";
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника, , ИсключаяСвойства);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаИсточника, "Статус") Тогда
		НоваяСтрока.СтатусКодаМаркировки = СтрокаИсточника.Статус;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаИсточника, "Статус") Тогда
		НоваяСтрока.СтатусКодаМаркировки = СтрокаИсточника.Статус;
	КонецЕсли;
	
	Если НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.ПустаяСсылка() Тогда
		НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	ИначеЕсли НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
			НоваяСтрока.ПредставлениеСодержимоеУпаковки = СтрокаИсточника.ПредставлениеНоменклатуры;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаИсточника.Строки.Количество() = 0 И ДанныеДокумента.ДоступноСогласованиеРасхождений Тогда
		
		Если НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась
			Или НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует Тогда
			ВариантыДействийПоРасхождениямКодовМаркировкиИСМППризнать = ИнтеграцияИСМПКлиентСервер.ВариантДействийПоРасхождениямКодовМаркировкиИСМППризнать();
			ВариантыДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать = ИнтеграцияИСМПКлиентСервер.ВариантДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать();
		
			ДействиеПоРасхождениям = ВариантыДействийПоРасхождениямКодовМаркировкиИСМППризнать;
			
			СтрокаРасхожденийДокумента = ТаблицаРасхожденийПоДокументу.Найти(НоваяСтрока.Штрихкод, "ЗначениеШтрихкода");
			Если СтрокаРасхожденийДокумента <> Неопределено Тогда
				Если СтрокаРасхожденийДокумента.Признан = ВариантыДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать Тогда
					ДействиеПоРасхождениям = ВариантыДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока.ДействиеПоРасхождениям = ДействиеПоРасхождениям;
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяСтрока.КоличествоПодчиненнойПродукции = СтрокаИсточника.КоличествоПачек;
	
	Если НоваяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
		И СтрокаИсточника.Строки.Количество() = 0 Тогда
		НоваяСтрока.НеПересчитыватьКоличествоПачек = Истина;
		
	КонецЕсли;
	
	Если НоваяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
		И ЗначениеЗаполнено(НоваяСтрока.GTIN)
		И СтрокаИсточника.Строки.Количество() = 0 Тогда
		НоваяСтрока.НеПересчитыватьКоличествоПачек = Истина;
		
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока);
	
	Если НоваяСтрока.СодержимоеНедоступно Тогда
		ДанныеДокумента.СодержимоеУпаковокНедоступно = Истина;
	КонецЕсли;
	
	КоллекцияСтрокНовойСтроки = НоваяСтрока.Строки;
	
	Для Каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузкеМОТП(ПодчиненнаяСтрокаИсточника, КоллекцияСтрокНовойСтроки, ДанныеДокумента);
		Если СтрокаИсточника.Родитель = Неопределено
			И Не ИнвертироватьСтатусыПроверки
			И СтрокаИсточника.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар
			И (СтрокаИсточника.ЕстьПринятыеТовары И СтрокаИсточника.ЕстьНедостачиТовары
				Или СтрокаИсточника.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				И НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует) Тогда
				НоваяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавленнаяСтрокаПачкиБезБлока(ДанныеДокумента)
	
	НоваяСтрока = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки.Вставить(0);
	
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ЗаполнитьСтрокуПачкиБезБлока(НоваяСтрока);
	
	ДанныеДокумента.СтрокаПачкиБезБлока = НоваяСтрока;
	
	Возврат НоваяСтрока;
	
КонецФункции

Функция ДобавленнаяСтрокаБлокиБезКоробки(ДанныеДокумента)
	
	СтрокиДерева = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки;
	
	Если СтрокиДерева.Количество() = 0 Тогда
		НоваяСтрока = СтрокиДерева.Вставить(0);
	ИначеЕсли СтрокиДерева[0].ТипУпаковки <> Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ПачкиБезБлока Тогда
		НоваяСтрока = СтрокиДерева.Вставить(0);
	Иначе
		НоваяСтрока = СтрокиДерева.Вставить(1);
	КонецЕсли;
	
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ЗаполнитьСтрокуБлокиБезКоробки(НоваяСтрока);
	
	ДанныеДокумента.СтрокаБлокиБезКоробки = НоваяСтрока;
	
	Возврат НоваяСтрока;
	
КонецФункции

Процедура НормализоватьЛогистическиеУпаковки(ДеревоУпаковок)
	ПараметрыНормализацииТабакЛогистическаяУпаковка = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииТабакЛогистическаяУпаковка.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииТабакЛогистическаяУпаковка.НачинаетсяСоСкобки       = Ложь;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			
			РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
				СтрокаДерева.Штрихкод, СтрокаДерева.ВидПродукции, Ложь);
			НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
				РезультатРазбора, СтрокаДерева.ВидПродукции, ПараметрыНормализацииТабакЛогистическаяУпаковка);
			СтрокаДерева.НормализованныйШтрихкод = НормализованныйКодМаркировки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеРезультатов

Процедура ОбработатьНепринятыеСтрокиДерева(ДеревоМаркированнойПродукции, ТаблицаРасхожденийКодовМаркировки,
											МассивСтрокКУдалению = Неопределено, ЭтоПродукцияМОТП)
	
	Если МассивСтрокКУдалению = Неопределено Тогда
		МассивСтрокКУдалению = Новый Массив;
		МассивСтрокКРазбору = Новый Массив;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.Строки цикл
		Если СтрокаДерева.НеСоответствуетОтборуВсе Тогда
			МассивСтрокКУдалению.Добавить(СтрокаДерева);
			Продолжить;
		КонецЕсли;
		ОбработатьПодчиненныеСтрокиДерева(СтрокаДерева,
			ТаблицаРасхожденийКодовМаркировки,
			МассивСтрокКУдалению,
			МассивСтрокКРазбору);
	КонецЦикла;
	
	Для Каждого СтрокаДереваУдалить Из МассивСтрокКУдалению Цикл
		ТекущийРодитель = СтрокаДереваУдалить.Родитель;
		Если ТекущийРодитель = Неопределено Тогда
			РодительУдаляемойУпаковки = ДеревоМаркированнойПродукции;
		Иначе
			РодительУдаляемойУпаковки = ТекущийРодитель;
		КонецЕсли;
		РодительУдаляемойУпаковки.Строки.Удалить(СтрокаДереваУдалить);
	КонецЦикла;
	
	Для Каждого УпаковкаРазобрать Из МассивСтрокКРазбору Цикл
		ТекущийРодитель = УпаковкаРазобрать.Родитель;
		Если ТекущийРодитель = Неопределено Тогда
			РодительУдаляемойУпаковки = ДеревоМаркированнойПродукции;
		Иначе
			РодительУдаляемойУпаковки = ТекущийРодитель;
		КонецЕсли;
		ПереместитьВложенныеУпаковкиПриРазборкеУпаковки(УпаковкаРазобрать.Строки, ДеревоМаркированнойПродукции);
		РодительУдаляемойУпаковки.Строки.Удалить(УпаковкаРазобрать);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереместитьВложенныеУпаковкиПриРазборкеУпаковки(СтрокиДерева, ДеревоМаркированнойПродукции, НовыйРодитель = Неопределено)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если НовыйРодитель <> Неопределено Тогда
			РодительДобавляемойСтроки = НовыйРодитель;
		Иначе
			РодительДобавляемойСтроки = ДеревоМаркированнойПродукции;
		КонецЕсли;
				
		Если РодительДобавляемойСтроки <> Неопределено Тогда
			НоваяСтрока = РодительДобавляемойСтроки.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		Иначе
			НоваяСтрока = Неопределено;
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ПереместитьВложенныеУпаковкиПриРазборкеУпаковки(СтрокаДерева.Строки, ДеревоМаркированнойПродукции, НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьПодчиненныеСтрокиДерева(СтрокаДерева, ТаблицаРасхожденийКодовМаркировки,
											МассивСтрокКУдалению, МассивСтрокКРазбору)
	
	ПодчиненныеСтроки = СтрокаДерева.Строки;
	
	Если Не СтрокаДерева.НеПересчитыватьКоличествоПачек Тогда
		СтрокаДерева.КоличествоПодчиненнойПродукции = 0;
	КонецЕсли;
	
	СтрокаДерева.КоличествоПодчиненныхБлоков        = 0;
	СтрокаДерева.КоличествоПодчиненныхУпаковок      = 0;
	СтрокаДерева.КоличествоПодчиненныхВсего         = 0;
	
	СтрокаДерева.КоличествоПодчиненныхВНаличии      = 0;
	СтрокаДерева.КоличествоПодчиненныхОтсутствует   = 0;
	СтрокаДерева.КоличествоПодчиненныхНеЧислилось   = 0;
	
	ВариантыДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать = ИнтеграцияИСМПКлиентСервер.ВариантДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать();
	
	Если СтрокаДерева.НеПересчитыватьКоличествоПачек Тогда
		
		СтрокаДерева.КоличествоПодчиненныхБлоков   = 0;
		СтрокаДерева.КоличествоПодчиненныхУпаковок = 0;
		
		Если СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхВНаличии = СтрокаДерева.КоличествоПодчиненнойПродукции;
			
		ИначеЕсли СтрокаДерева.НедопустимыйКодМаркировки
			Или СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
			
			Если СтрокаДерева.ДействиеПоРасхождениям = ВариантыДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать Тогда
				ОбработатьСтрокуОтсутствуетНеПризнать(СтрокаДерева, ТаблицаРасхожденийКодовМаркировки);
				СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
				СтрокаДерева.КоличествоПодчиненныхВНаличии = СтрокаДерева.КоличествоПодчиненнойПродукции;
			Иначе
				ОбработатьСтрокуОтсутствуетПризнать(СтрокаДерева, ТаблицаРасхожденийКодовМаркировки, МассивСтрокКУдалению);
				СтрокаДерева.КоличествоПодчиненныхОтсутствует = СтрокаДерева.КоличествоПодчиненнойПродукции;
			КонецЕсли;
			
		ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
			
			Если СтрокаДерева.ДействиеПоРасхождениям = ВариантыДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать Тогда
				ОбработатьСтрокуНеЧислиласьНеПризнать(СтрокаДерева, ТаблицаРасхожденийКодовМаркировки, МассивСтрокКУдалению);
			Иначе
				ОбработатьСтрокуНеЧислиласьПризнать(СтрокаДерева, ТаблицаРасхожденийКодовМаркировки);
				СтрокаДерева.КоличествоПодчиненныхВНаличии = СтрокаДерева.КоличествоПодчиненнойПродукции;
				СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
			Если ПодчиненнаяСтрока.НеСоответствуетОтборуВсе Тогда
				МассивСтрокКУдалению.Добавить(ПодчиненнаяСтрока);
				Продолжить;
			КонецЕсли;
			
			Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии") Тогда
				
				СтрокаДерева.КоличествоПодчиненныхВНаличии = СтрокаДерева.КоличествоПодчиненныхВНаличии + 1;
				
			ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
				Если ПодчиненнаяСтрока.ДействиеПоРасхождениям = ВариантыДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать Тогда
					ОбработатьСтрокуОтсутствуетНеПризнать(ПодчиненнаяСтрока, ТаблицаРасхожденийКодовМаркировки);
					ПодчиненнаяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
					СтрокаДерева.КоличествоПодчиненныхВНаличии = СтрокаДерева.КоличествоПодчиненныхВНаличии + 1;
				Иначе
					ОбработатьСтрокуОтсутствуетПризнать(ПодчиненнаяСтрока, ТаблицаРасхожденийКодовМаркировки, МассивСтрокКУдалению);
					СтрокаДерева.КоличествоПодчиненныхОтсутствует = СтрокаДерева.КоличествоПодчиненныхОтсутствует + 1;
				КонецЕсли;
				
			ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
				
				Если ПодчиненнаяСтрока.ДействиеПоРасхождениям = ВариантыДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать Тогда
					ОбработатьСтрокуНеЧислиласьНеПризнать(ПодчиненнаяСтрока, ТаблицаРасхожденийКодовМаркировки, МассивСтрокКУдалению);
				Иначе
					ОбработатьСтрокуНеЧислиласьПризнать(ПодчиненнаяСтрока, ТаблицаРасхожденийКодовМаркировки);
					СтрокаДерева.КоличествоПодчиненныхВНаличии = СтрокаДерева.КоличествоПодчиненныхВНаличии + 1;
					ПодчиненнаяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПодчиненнаяСтрока.Строки.Количество() Тогда
				ОбработатьПодчиненныеСтрокиДерева(ПодчиненнаяСтрока, ТаблицаРасхожденийКодовМаркировки, МассивСтрокКУдалению, МассивСтрокКРазбору);
			КонецЕсли;
			
			Если ПодчиненнаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
				
				СтрокаДерева.КоличествоПодчиненнойПродукции = СтрокаДерева.КоличествоПодчиненнойПродукции + 1;
				
			ИначеЕсли ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(ПодчиненнаяСтрока) Тогда
				
				СтрокаДерева.КоличествоПодчиненныхБлоков = СтрокаДерева.КоличествоПодчиненныхБлоков + 1;
				
			ИначеЕсли ПодчиненнаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
				
				СтрокаДерева.КоличествоПодчиненныхУпаковок = СтрокаДерева.КоличествоПодчиненныхУпаковок + 1;
				
			КонецЕсли;
			
			СтрокаДерева.КоличествоПодчиненнойПродукции     = СтрокаДерева.КоличествоПодчиненнойПродукции     + ПодчиненнаяСтрока.КоличествоПодчиненнойПродукции;
			СтрокаДерева.КоличествоПодчиненныхУпаковок      = СтрокаДерева.КоличествоПодчиненныхУпаковок      + ПодчиненнаяСтрока.КоличествоПодчиненныхУпаковок;
			СтрокаДерева.КоличествоПодчиненныхБлоков        = СтрокаДерева.КоличествоПодчиненныхБлоков        + ПодчиненнаяСтрока.КоличествоПодчиненныхБлоков;
			
			СтрокаДерева.КоличествоПодчиненныхВНаличии      = СтрокаДерева.КоличествоПодчиненныхВНаличии      + ПодчиненнаяСтрока.КоличествоПодчиненныхВНаличии;
			СтрокаДерева.КоличествоПодчиненныхОтсутствует   = СтрокаДерева.КоличествоПодчиненныхОтсутствует   + ПодчиненнаяСтрока.КоличествоПодчиненныхОтсутствует;
			СтрокаДерева.КоличествоПодчиненныхНеЧислилось   = СтрокаДерева.КоличествоПодчиненныхНеЧислилось   + ПодчиненнаяСтрока.КоличествоПодчиненныхНеЧислилось;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтрокаДерева.КоличествоПодчиненныхВсего = СтрокаДерева.КоличествоПодчиненныхУпаковок 
		+ СтрокаДерева.КоличествоПодчиненныхБлоков
		+ СтрокаДерева.КоличествоПодчиненнойПродукции;
	
	Если СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар")
		И СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПродукцияБезУпаковки")
		И СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПачкиБезБлока")
		И СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.БлокиБезКоробки") Тогда
		
		СтрокаДерева.ВсяУпаковкаПроверена = (СтрокаДерева.КоличествоПодчиненныхВсего = СтрокаДерева.КоличествоПодчиненныхВНаличии);
		Если СтрокаДерева.КоличествоПодчиненныхВНаличии = 0
			Или СтрокаДерева.КоличествоПодчиненныхВНаличии > 0
			    И СтрокаДерева.КоличествоПодчиненныхОтсутствует > 0 Тогда
			
			МассивСтрокКРазбору.Добавить(СтрокаДерева);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСтрокуОтсутствуетНеПризнать(СтрокаДерева, ТаблицаРасхожденийКодовМаркировки)
	
	Если СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар")
		Или СтрокаДерева.Строки.Количество() = 0 Тогда
		СтрокаРасхождений = ТаблицаРасхожденийКодовМаркировки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРасхождений, СтрокаДерева);
		СтрокаРасхождений.Количество = Макс(СтрокаДерева.КоличествоПодчиненнойПродукции, 1);
		СтрокаРасхождений.ТипРасхождения = ИнтеграцияИСМП.ТипРасхожденияИСМПНедостача();
		СтрокаРасхождений.Признан = ИнтеграцияИСМПКлиентСервер.ВариантДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать();
		СтрокаРасхождений.ЗначениеШтрихкода = СтрокаДерева.Штрихкод;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСтрокуОтсутствуетПризнать(СтрокаДерева, ТаблицаРасхожденийКодовМаркировки, МассивСтрокКУдалению)
	
	Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар")
		Или СтрокаДерева.Строки.Количество() = 0 Тогда
		СтрокаРасхождений = ТаблицаРасхожденийКодовМаркировки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРасхождений, СтрокаДерева);
		СтрокаРасхождений.Количество = Макс(СтрокаДерева.КоличествоПодчиненнойПродукции, 1);
		СтрокаРасхождений.ТипРасхождения = ИнтеграцияИСМП.ТипРасхожденияИСМПНедостача();
		СтрокаРасхождений.Признан = ИнтеграцияИСМПКлиентСервер.ВариантДействийПоРасхождениямКодовМаркировкиИСМППризнать();
		СтрокаРасхождений.ЗначениеШтрихкода = СтрокаДерева.Штрихкод;
		МассивСтрокКУдалению.Добавить(СтрокаДерева);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСтрокуНеЧислиласьНеПризнать(СтрокаДерева, ТаблицаРасхожденийКодовМаркировки, МассивСтрокКУдалению)
	
	Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар")
		Или СтрокаДерева.Строки.Количество() = 0 Тогда
		СтрокаРасхождений = ТаблицаРасхожденийКодовМаркировки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРасхождений, СтрокаДерева);
		СтрокаРасхождений.Количество = Макс(СтрокаДерева.КоличествоПодчиненнойПродукции, 1);
		СтрокаРасхождений.ТипРасхождения = ИнтеграцияИСМП.ТипРасхожденияИСМПИзлишек();
		СтрокаРасхождений.Признан = ИнтеграцияИСМПКлиентСервер.ВариантДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать();
		СтрокаРасхождений.ЗначениеШтрихкода = СтрокаДерева.Штрихкод;
		СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует;
		МассивСтрокКУдалению.Добавить(СтрокаДерева);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСтрокуНеЧислиласьПризнать(СтрокаДерева, ТаблицаРасхожденийКодовМаркировки)
	
	Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар")
		Или СтрокаДерева.Строки.Количество() = 0 Тогда
		СтрокаРасхождений = ТаблицаРасхожденийКодовМаркировки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРасхождений, СтрокаДерева);
		СтрокаРасхождений.Количество = Макс(СтрокаДерева.КоличествоПодчиненнойПродукции, 1);
		СтрокаРасхождений.ТипРасхождения = ИнтеграцияИСМП.ТипРасхожденияИСМПИзлишек();
		СтрокаРасхождений.Признан = ИнтеграцияИСМПКлиентСервер.ВариантДействийПоРасхождениямКодовМаркировкиИСМППризнать();
		СтрокаРасхождений.ЗначениеШтрихкода = СтрокаДерева.Штрихкод;
	КонецЕсли;

КонецПроцедуры

// Фоновая операция по фиксации результатов проверки и подбора в документе, 
// 
// Параметры:
// 	Параметры - Структура - содержит следующие значения:
// 	   * СоздаватьАктОРасхождениях    - Булево - признак необходимости создания акта о расхождениях.
// 	   * ПроверяемыйДокумент          - ДокументСсылка - документ, для которого выполнялась проверка и подбор.
// 	   * ДеревоМаркированнойПродукции - ДеревоЗначений - содержит результаты проверки и подбора с иерархией упаковок.
// 	   * ДанныеПроверкиИПодбора       - Структура      - содержит слепок состояния проверки и подбора, если предусмотрено его хранение по окончании результатов проверки.
// 	   * ПроверкаНеПоДокументу        - Булево - признак того, что проверка и подбор была вызвана из произвольной формы.
// 	   * ПодобраннаяМаркируемаяПродукция - ТаблицаЗначений - содержит информацию о подобранной продукции сгруппированную до 
// 	       номенклатуры, характеристики, серии.
// 	АдресРезультата - Строка - адрес временного хранилища, в которое будут помещены результаты выполнения
Процедура ЗафиксироватьРезультатПроверкиИПодбора(Параметры, АдресРезультата) Экспорт
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Обработка.РезультатыСверкиКодовМаркировкиТОРГ2.МодульМенеджера.ЗафиксироватьРезультатПроверкиИПодбора");
		
	ДеревоМаркированнойПродукции  = Параметры.ДеревоМаркированнойПродукции;
	ЭтоПродукцияМОТП = Параметры.ЭтоПродукцияМОТП;
	
	ТаблицаРасхожденийКодовМаркировки = СверкаКодовМаркировкиИСМП.ИнициализацияТаблицыШтрихкодыУпаковок(Истина);
	ОбработатьНепринятыеСтрокиДерева(ДеревоМаркированнойПродукции, ТаблицаРасхожденийКодовМаркировки,,ЭтоПродукцияМОТП);
	НачатьТранзакцию();
	
	Попытка
		
		ПараметрыОкончанияПроверки = СверкаКодовМаркировкиИСМП.ПараметрыОкончанияПроверки();
		ПараметрыОкончанияПроверки.ПроверяемыйДокумент       = Параметры.ПроверяемыйДокумент;
		
		ДеревоМаркированнойПродукции = Параметры.ДеревоМаркированнойПродукции;
		ДеревоМаркированнойПродукции.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
		
		ТаблицаШтрихкодовВерхнегоУровня        = ПроверкаИПодборПродукцииИСМП.ПустаяТаблицаШтрихкодовВерхнегоУровня();
		
		Справочники.ШтрихкодыУпаковокТоваров.РезультатСозданияШтрихкодовУпаковокПоДеревуМаркируемойПродукции(
			ДеревоМаркированнойПродукции, ТаблицаШтрихкодовВерхнегоУровня,
			Неопределено, Неопределено,
			Неопределено);
		
		ПараметрыОкончанияПроверки.ТаблицаШтрихкодовВерхнегоУровня = ТаблицаШтрихкодовВерхнегоУровня;
		ПараметрыОкончанияПроверки.ТаблицаРасхожденийКодовМаркировки = ТаблицаРасхожденийКодовМаркировки; 
			
		СверкаКодовМаркировкиИСМП.ЗафиксироватьРезультатСверки(ПараметрыОкончанияПроверки);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Произошла ошибка при сохранении результатов сверки: %1'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
	КоличествоДанных = ИнтеграцияИС.КоличествоСтрокДереваЗначений(ДеревоМаркированнойПродукции);
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
	
	РезультатПроверки = Новый Структура();
	
	РезультатПроверки.Вставить("ТаблицаШтрихкодовВерхнегоУровня", ТаблицаШтрихкодовВерхнегоУровня);
	РезультатПроверки.Вставить("ТаблицаПодобраннойПровереннойПродукции", ТаблицаРасхожденийКодовМаркировки);
	
	ПоместитьВоВременноеХранилище(РезультатПроверки, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли