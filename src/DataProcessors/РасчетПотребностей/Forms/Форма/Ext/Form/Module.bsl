
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновитьПараметрыФормы();
	
	Элементы.ДатаНачалаПланирования.МинимальноеЗначение = НачалоДня(ТекущаяДатаСеанса());
	Элементы.ДатаПоставки.МинимальноеЗначение = НачалоДня(ТекущаяДатаСеанса());
	
	ДоступныЗакупки = УправлениеДоступомУНФ.ДоступноСозданиеДокументовРазделаЗакупки();
	ДоступнаПереработка = ПолучитьФункциональнуюОпцию("ПередачаСырьяВПереработку") 
		И ПравоДоступа("ИнтерактивноеПроведение", Метаданные.Документы.ОтчетПереработчика);
	ДоступноПроизводство = ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство") 
		И УправлениеДоступомУНФ.ДоступноСозданиеДокументовРазделаПроизводство();
	ДоступноПеремещение = ПолучитьФункциональнуюОпцию("УчетПотребностиПоСкладам") 
		И УправлениеДоступомУНФ.ДоступноСозданиеДокументовРазделаСклад();
		
	// Способ пополнения по умолчанию
	Если Параметры.Свойство("СпособПополнения") Тогда
		Если Параметры.СпособПополнения = "Закупки" Тогда
			Если ДоступнаПереработка Тогда
				ОтборСпособПополнения = СпособПополненияЗакупкаПереработка();
			Иначе
				ОтборСпособПополнения = СпособПополненияЗакупка();
			КонецЕсли;
		ИначеЕсли Параметры.СпособПополнения = "Производство" Тогда
			ОтборСпособПополнения = СпособПополненияПроизводство();
		ИначеЕсли Параметры.СпособПополнения = "Перемещение" Тогда
			Если ПолучитьФункциональнуюОпцию("УчетПотребностиПоСкладам") Тогда
				ОтборСпособПополнения = СпособПополненияПеремещение();
			Иначе
				ОтборСпособПополнения = СпособПополненияВсе();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Обработка = РеквизитФормыВЗначение("Объект");
	СхемаКомпоновкиДанных = Обработка.ПолучитьМакет("СхемаКомпоновкиДанных");
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ВосстановитьНастройкиОтборов();
	ЗаполнитьОписанияПараметров();
	ЗаполнитьОписанияФильтров();
	ЗаполнитьФильтрыИзПараметровФормы();
	ОбновитьПоляОтборов();
	ОбновитьМеткиФильтров();
	
	УправлениеФормой();
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНадписьНетДанных;
	
	// ГрупповоеИзменениеСтрок
	ЗаполнитьСписокДействий();
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер(), ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
	ЗапасыИзменениеСтрокДействиеПриОткрытии = ЗапасыИзменениеСтрокДействие;
	// Конец ГрупповоеИзменениеСтрок
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПредставлениеПериодаПродаж = СформироватьПредставлениеПериода(ПериодПродаж);
	
	// ГрупповоеИзменениеСтрок
	ОпределитьОбъектИзменений();
	// Конец ГрупповоеИзменениеСтрок
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		СохранитьНастройкиОтборов();
		// ГрупповоеИзменениеСтрок
		СохранитьТекущееДействиеИзмененияСтрок();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РежимПриИзменении(Элемент)
	
	Если Режим = 2 И Заказы.Количество() = 0 Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Нет заказов для отображения'"), , 
			НСтр("ru = 'Сначала следует сформировать заказы на этапе планирование'"), 
			БиблиотекаКартинок.Предупреждение32, СтатусОповещенияПользователя.Информация);
		Режим = 1;
	КонецЕсли;
	
	Если Режим = 1 Тогда
		ДатаПоставки = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
		ОтметитьЗаказываемыеРекурсивно(Запасы.ПолучитьЭлементы());
		ТекущаяСтрока = Элементы.Запасы.ТекущиеДанные;
		Если ТекущаяСтрока = Неопределено ИЛИ НЕ ТекущаяСтрока.Показывать Тогда
			ТекущаяСтрока = НайтиСтрокуДереваРекурсивно(Запасы.ПолучитьЭлементы(), "Показывать", Истина);
			Если ТекущаяСтрока <> Неопределено Тогда
				Элементы.Запасы.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ Режим = 1 И ВидимостьПанелиИзменениеСтрок Тогда
		ПоказатьСкрытьПанельРедактирования(Истина);
	КонецЕсли;
	
	УправлениеФормой(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПланированияПриИзменении(Элемент)
	
	Если ДатаНачалаПланирования < Элементы.ДатаНачалаПланирования.МинимальноеЗначение Тогда
		ДатаНачалаПланирования = Элементы.ДатаНачалаПланирования.МинимальноеЗначение;
	КонецЕсли;
	ПериодПланирования = ПериодПоДатеНачалаИДлительности(ДатаНачалаПланирования, КоличествоДнейПланирования);	
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоДнейПланированияПриИзменении(Элемент)
	
	ПериодПланирования = ПериодПоДатеНачалаИДлительности(ДатаНачалаПланирования, КоличествоДнейПланирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаПродажНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период = ПериодПродаж;
	
	Диалог.Показать(Новый ОписаниеОповещения("ПредставлениеПериодаПродажНажатиеЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаПродажНажатиеЗавершение(НовыйПериод, Параметры) Экспорт
	
	Если НовыйПериод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПериодПродаж = НовыйПериод;
	Если НЕ ЗначениеЗаполнено(ПериодПродаж) Тогда
		ПериодПродаж = ПериодПродажПоУмолчаниюНаКлиенте();
	КонецЕсли; 
	ПредставлениеПериодаПродаж = СформироватьПредставлениеПериода(ПериодПродаж);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьПриИзменении(Элемент)

	УправлениеФормой(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПриИзменении(Элемент)
	
	ГруппировкаПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ГруппировкаПриИзмененииСервер()
	
	УправлениеФормой(Элементы.Группировать.Имя);
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоЗаказамПриИзменении(Элемент)
	
	УправлениеФормой(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСпособПополненияПриИзменении(Элемент)
	
	УправлениеФормой(Элемент.Имя);
	
	// ГрупповоеИзменениеСтрок
	ЗаполнитьСписокДействий();
	// Конец ГрупповоеИзменениеСтрок
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставкаОднойДатойПриИзменении(Элемент)
	
 	ЗаказыПоставщикуРазнымиДатами = Ложь;
	УправлениеФормой(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПоставкиПриИзменении(Элемент)
	
	Если ДатаПоставки < Элементы.ДатаПоставки.МинимальноеЗначение Тогда
		ДатаПоставки = Элементы.ДатаПоставки.МинимальноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФильтрПриИзменении(Элемент)
	
	ОписаниеФильтра = ОписаниеФильтра(Фильтры, "ИмяЭлемента", Элемент.Имя);
	Если ОписаниеФильтра=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПриИзмененииФильтра(ОписаниеФильтра, ОписаниеФильтра.ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФильтрОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) ИЛИ ТипЗнч(ВыбранноеЗначение)=Тип("Тип") Тогда
		Возврат;
	КонецЕсли; 
	СтандартнаяОбработка = Ложь;
	ОписаниеФильтра = ОписаниеФильтра(Фильтры, "ИмяЭлемента", Элемент.Имя);
	Если ОписаниеФильтра=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПриИзмененииФильтра(ОписаниеФильтра, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииФильтра(ОписаниеФильтра, Значение)
	
	Если Значение=Неопределено И ОписаниеФильтра.ВыборСписка Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Значение) <> Тип("Массив") Тогда 
		МассивЗначений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Значение);
	Иначе
		МассивЗначений = Значение;
	КонецЕсли;
	
	Для каждого ВыбранноеЗначение Из МассивЗначений Цикл
		
		Если ОписаниеФильтра.ЭтоПараметр Тогда
			ОписаниеФильтра.Значение = ВыбранноеЗначение;
			УстановитьПараметр(ОписаниеФильтра.Имя, ОписаниеФильтра.Значение);
		ИначеЕсли НЕ ОписаниеФильтра.ВыборСписка Тогда
			ОписаниеФильтра.Значение = ?(ЗначениеЗаполнено(ВыбранноеЗначение), ВыбранноеЗначение, Неопределено);
			УстановитьФильтр(ОписаниеФильтра.Имя, ОписаниеФильтра.Значение, ОписаниеФильтра.Пользовательский);
		Иначе
			Если ОписаниеТиповСостоитИзТипа(ОписаниеФильтра.Тип, Тип("Булево")) Тогда
				ОписаниеФильтра.Значение = ОписаниеФильтра.ВыбранноеЗначениеБулево;
			Иначе
				Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
					Продолжить;
				КонецЕсли;
				Если ТипЗнч(ОписаниеФильтра.Значение) <> Тип("СписокЗначений") И ОписаниеФильтра.Значение = ВыбранноеЗначение Тогда
					Продолжить;
				КонецЕсли;
				Если ТипЗнч(ОписаниеФильтра.Значение) <> Тип("СписокЗначений") Тогда
					Список = Новый СписокЗначений;
					Если ЗначениеЗаполнено(ОписаниеФильтра.Значение) Тогда
						Список.Добавить(ОписаниеФильтра.Значение);
					КонецЕсли; 
					Список.Добавить(ВыбранноеЗначение);
					ОписаниеФильтра.Значение = Список;
				ИначеЕсли ОписаниеФильтра.Значение.НайтиПоЗначению(ВыбранноеЗначение)=Неопределено Тогда
					ОписаниеФильтра.Значение.Добавить(ВыбранноеЗначение);	
				КонецЕсли;
				Если ЗначениеЗаполнено(ОписаниеФильтра.ВыбранноеЗначение) Тогда
					ОписаниеФильтра.ВыбранноеЗначение = Неопределено;
				КонецЕсли; 
			КонецЕсли;
			УстановитьМеткуИОтбор(ОписаниеФильтра.Имя, ВыбранноеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеДействияПриИзмененииФильтра(ЭтотОбъект, ОписаниеФильтра);
	
КонецПроцедуры

//@skip-warning подключаемая процедура
&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_") + 1);
	УдалитьМеткуОтбора(МеткаИД, Элемент.Имя);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИерархияФильтраНажатие(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяЭлемента = СтрЗаменить(Элемент.Имя, "_Иерархия", "");
	ОписаниеФильтра = ОписаниеФильтра(Фильтры, "ИмяЭлемента", ИмяЭлемента);
	Если ОписаниеФильтра=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭлементПоле = Элементы[ИмяЭлемента];
	Если ЭлементПоле.ВыборГруппИЭлементов=ГруппыИЭлементы.Элементы Тогда
		ЭлементПоле.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		ЭлементПоле.ПодсказкаВвода = ОписаниеФильтра.Заголовок + НСтр("ru = ' (группа)'");
		Элемент.Подсказка = НСтр("ru = 'Используется выбор групп. Нажмите для выбора элементов.'");
		Элемент.Картинка = БиблиотекаКартинок.РежимВыбораГрупп;
	Иначе
		ЭлементПоле.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
		ЭлементПоле.ПодсказкаВвода = ОписаниеФильтра.Заголовок;
		Элемент.Подсказка = НСтр("ru = 'Используется выбор элементов. Нажмите для выбора групп.'");
		Элемент.Картинка = БиблиотекаКартинок.РежимВыбораЭлементов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьПравуюПанельНажатие(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
		
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьПравуюПанельНажатие(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

&НаКлиенте
Процедура ЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	Если Поле = Элементы.ЗапасыИконкаПредупреждение Тогда
		Если ТипЗнч(ТекущаяСтрока.Сообщения) <> Тип("ФиксированныйМассив") ИЛИ ТекущаяСтрока.Сообщения.Количество() = 0 Тогда
			Возврат;
		КонецЕсли; 
		Для каждого Сообщение Из ТекущаяСтрока.Сообщения Цикл
			ОбщегоНазначенияКлиент.СообщитьПользователю(Сообщение);
		КонецЦикла; 
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекСтр = Элементы.Запасы.ТекущиеДанные;
	Если ТекСтр=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЕдиницаИзмеренияПриИзмененииСервер(ТекСтр.ПолучитьИдентификатор(), ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ЕдиницаИзмеренияПриИзмененииСервер(Идентификатор, НоваяЕдиница)
	
	ТекСтр = Запасы.НайтиПоИдентификатору(Идентификатор);
	СтарыйКоэффициент = ?(ТипЗнч(ТекСтр.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения"), ТекСтр.ЕдиницаИзмерения.Коэффициент, 1);
	Если НЕ ЗначениеЗаполнено(СтарыйКоэффициент) Тогда
		СтарыйКоэффициент = 1;
	КонецЕсли; 
	НовыйКоэффициент = ?(ТипЗнч(НоваяЕдиница)=Тип("СправочникСсылка.ЕдиницыИзмерения"), НоваяЕдиница.Коэффициент, 1);
	Если НЕ ЗначениеЗаполнено(НовыйКоэффициент) Тогда
		НовыйКоэффициент = 1;
	КонецЕсли;
	
	КоэффициентПересчета = СтарыйКоэффициент / НовыйКоэффициент;
	СтарыеЗначения = Новый Структура;
	СтарыеЗначения.Вставить("Заказать", ТекСтр.Заказать);
	СтарыеЗначения.Вставить("Дефицит", ТекСтр.Дефицит);
	Если Группировать = ГруппировкаНоменклатура() Тогда
		ТекущийПериод = ПериодПланирования.ДатаНачала;
		Пока ТекущийПериод < ПериодПланирования.ДатаОкончания Цикл
			ИмяКолонки = ИмяКолонкиПериод(ТекущийПериод);
			СтарыеЗначения.Вставить(ИмяКолонки, ТекСтр[ИмяКолонки]);	
			ТекущийПериод = ТекущийПериод + 86400;
		КонецЦикла; 
		СтарыеЗначения.Вставить("Пополнение", ТекСтр.Пополнение);
	Иначе
		СтарыеЗначения.Вставить("НачальныйОстаток", ТекСтр.НачальныйОстаток);
		СтарыеЗначения.Вставить("Потребность", ТекСтр.Потребность);
		СтарыеЗначения.Вставить("Поступление", ТекСтр.Поступление);
		СтарыеЗначения.Вставить("КонечныйОстаток", ТекСтр.КонечныйОстаток);
	КонецЕсли; 
	ПересчитатьПоКоэффициентуРекурсивно(ТекСтр, КоэффициентПересчета);
	Если ТекСтр.ПолучитьРодителя() <> Неопределено Тогда
		Для каждого КлючИЗначение Из СтарыеЗначения Цикл
			ПересчитатьИтогиРекурсивно(ТекСтр, КлючИЗначение.Ключ, ТекСтр[КлючИЗначение.Ключ] - СтарыеЗначения[КлючИЗначение.Ключ]);
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьПоКоэффициентуРекурсивно(Строка, КоэффициентПересчета)
	
	Строка.Дефицит = Строка.Дефицит * КоэффициентПересчета;
	Строка.Заказать = Строка.Заказать * КоэффициентПересчета;
	Если Строка.ИмяГруппировки <> ИмяГруппировкиНоменклатура() Тогда
		Если Строка.Заказать <> 0 Тогда
			Строка.Цена = Строка.Сумма / Строка.Заказать;
		Иначе
			Строка.Цена = Окр(Строка.Цена / КоэффициентПересчета, 2);
		КонецЕсли; 
	КонецЕсли; 
	Если Группировать = ГруппировкаНоменклатура() Тогда
		Строка.Просрочено = Строка.Просрочено * КоэффициентПересчета;
		ТекущийПериод = ПериодПланирования.ДатаНачала;
		Пока ТекущийПериод < ПериодПланирования.ДатаОкончания Цикл
			ИмяКолонки = ИмяКолонкиПериод(ТекущийПериод);
			Строка[ИмяКолонки] = Строка[ИмяКолонки] * КоэффициентПересчета; 
			ТекущийПериод = ТекущийПериод + 86400;
		КонецЦикла; 
		Строка.Пополнение = Строка.Пополнение * КоэффициентПересчета;
	Иначе
		Строка.НачальныйОстаток = Строка.НачальныйОстаток * КоэффициентПересчета;
		Строка.Потребность = Строка.Потребность * КоэффициентПересчета;
		Строка.Поступление = Строка.Поступление * КоэффициентПересчета;
		Строка.КонечныйОстаток = Строка.КонечныйОстаток * КоэффициентПересчета;
		Строка.МинимальныйЗапас = Строка.МинимальныйЗапас * КоэффициентПересчета;
		Строка.МаксимальныйЗапас = Строка.МаксимальныйЗапас * КоэффициентПересчета;
	КонецЕсли;
	
	Для каждого ПодСтрока Из Строка.ПолучитьЭлементы() Цикл
		ПересчитатьПоКоэффициентуРекурсивно(ПодСтрока, КоэффициентПересчета);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыбранПриИзменении(Элемент)
	
	ТекСтр = Элементы.Запасы.ТекущиеДанные;
	Если ТекСтр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекСтр.Выбран Тогда
		Разница = ТекСтр.Дефицит - ТекСтр.Заказать;
		ТекСтр.Заказать = ТекСтр.Дефицит;
		Если НЕ ТекСтр.Весовой И ТекСтр.Заказать <> Цел(ТекСтр.Заказать) И Рассчитывать = РассчитыватьПоПродажам() Тогда
			Разница = Разница + (1 - ТекСтр.Заказать + Цел(ТекСтр.Заказать));
			ТекСтр.Заказать = Цел(ТекСтр.Заказать) + 1;
		КонецЕсли;
	Иначе
		Разница = - ТекСтр.Заказать;
		ТекСтр.Заказать = 0;
	КонецЕсли;
	ОбработатьИзменениеКоличестваЗаказа(ТекСтр, Разница);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЗаказатьОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекСтр = Элементы.Запасы.ТекущиеДанные;
	Если ТекСтр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НовоеЗначение = Число(Текст);
	Разница = НовоеЗначение - ТекСтр.Заказать;
	ТекСтр.Заказать = НовоеЗначение;
	ТекСтр.Выбран = (ТекСтр.Заказать > 0);
	ОбработатьИзменениеКоличестваЗаказа(ТекСтр, Разница);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	ТекСтр = Элементы.Запасы.ТекущиеДанные;
	Если ТекСтр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтараяСуммаУчета = ТекСтр.СуммаУчета;
	ПересчитатьСумму(ТекСтр);
	РазницаСумма = ТекСтр.СуммаУчета - СтараяСуммаУчета;
	ПриСменеКоличестваОбработатьРодителейРекурсивно(ТекСтр, 0, РазницаСумма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	ТекСтр = Элементы.Запасы.ТекущиеДанные;
	Если ТекСтр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекСтр.Заказать=0 Тогда
		ТекСтр.Сумма = 0;
	Иначе
		ТекСтр.Цена = ТекСтр.Сумма / ТекСтр.Заказать;
	КонецЕсли; 
	СтараяСуммаУчета = ТекСтр.СуммаУчета;
	ПересчитатьСуммуРегл(ТекСтр, ПараметрыФормы, ИтогоСумма);
	РазницаСумма = ТекСтр.СуммаУчета - СтараяСуммаУчета;
	Модифицированность = Истина;
	ПриСменеКоличестваОбработатьРодителейРекурсивно(ТекСтр, 0, РазницаСумма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПометкаПриИзменении(Элемент)
	
	ТекСтр = Элементы.Запасы.ТекущиеДанные;
	УстановитьПометкуРекурсивно(ТекСтр);
	УчестьИзменениеПометкиДляРодителя(ТекСтр);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаказы

&НаКлиенте
Процедура ЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(Неопределено, Элемент.ДанныеСтроки(ВыбраннаяСтрока).Заказ);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Рассчитать(Команда)
	
	Отказ = Ложь;
	
	Если Рассчитывать = РассчитыватьПоПродажам() И Не ЗначениеЗаполнено(ПериодПродаж) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран период продаж'"), , 
			"ПредставлениеПериодаПродаж", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Группировать) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран вариант группировки'"), , 
			"Группировать", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОтборСпособПополнения) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран способ пополнения'"), , 
			"ОтборСпособПополнения", , Отказ);
	КонецЕсли;
	
	Если ОтборСпособПополнения = СпособПополненияПеремещение() И Не ЗначениеЗаполнено(Склад) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран склад'"), , "Склад", , Отказ);
	КонецЕсли;
	
	Для каждого СтрокаФильтр Из Фильтры Цикл
		Если НЕ СтрокаФильтр.Обязательный ИЛИ ЗначениеЗаполнено(СтрокаФильтр.Значение) Тогда
			Продолжить;
		КонецЕсли;
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнен обязательный фильтр ""%1""'"), СтрокаФильтр.Заголовок);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , СтрокаФильтр.ИмяЭлемента, , Отказ);
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если Модифицированность Тогда
		СтрВопроса = НСтр("ru = 'Данные изменены. Рассчитать потребности повторно?'");
		Оповещение = Новый ОписаниеОповещения("РассчитатьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, СтрВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе
		РассчитатьЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;
	ИтогоСумма = 0;
	ОчиститьСообщения();
	ЗапуститьФоновоеЗадание();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДефициту(Команда)
	
	ЗаполнитьПоДефицитуРекурсивно(Запасы.ПолучитьЭлементы(), Истина);
	ОбновитьСуммыРекурсивно(Запасы.ПолучитьЭлементы(), "Сумма");
	ИтогоСумма = ОбновитьСуммыРекурсивно(Запасы.ПолучитьЭлементы(), "СуммаУчета");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВсе(Команда)
	
	ЗаполнитьПоДефицитуРекурсивно(Запасы.ПолучитьЭлементы(), Ложь);
	ОбновитьСуммыРекурсивно(Запасы.ПолучитьЭлементы(), "Сумма");
	ИтогоСумма = ОбновитьСуммыРекурсивно(Запасы.ПолучитьЭлементы(), "СуммаУчета");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОткрытьОбъект(Команда)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ИмяГруппировки = ИмяГруппировкиНоменклатура()
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		ПоказатьЗначение(, СтрокаТабличнойЧасти.Номенклатура);
	ИначеЕсли (СтрокаТабличнойЧасти.ИмяГруппировки = ИмяГруппировкиЗаказ() 
		ИЛИ СтрокаТабличнойЧасти.ИмяГруппировки = ИмяГруппировкиЗаказРекомендации())
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Заказ) Тогда
		Если ТипЗнч(СтрокаТабличнойЧасти.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя")
			ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Заказ) = Тип("ДокументСсылка.ЗаказНаПроизводство") 
			ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Заказ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			ПоказатьЗначение(, СтрокаТабличнойЧасти.Заказ);
		КонецЕсли;	
	ИначеЕсли СтрокаТабличнойЧасти.ИмяГруппировки = ИмяГруппировкиИсточник() 
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Источник) Тогда
		ПоказатьЗначение(, СтрокаТабличнойЧасти.Источник);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФильтр(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьФильтрЗавершение", ЭтотОбъект);
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Режим", "ПоляОтбора");
	СтруктураПараметров.Вставить("СуществующийПоля", СписокДобавленныхФильтров());
	СтруктураПараметров.Вставить("АдресСхемы", АдресСхемыКомпоновкиДанных);
	ОбновитьНастройкиВХранилище();
	СтруктураПараметров.Вставить("АдресНастроек", АдресНастроек);
	ОткрытьФорму("ОбщаяФорма.ФормаСпискаПолей", СтруктураПараметров, ЭтотОбъект, , , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтандартныеНастройки(Команда)
	
	УстановитьСтандартныеНастройкиСервер();
	ПредставлениеПериодаПродаж = СформироватьПредставлениеПериода(ПериодПродаж);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтандартныеНастройкиСервер()
	
	ПериодПланирования = Новый СтандартныйПериод(НачалоДня(ТекущаяДатаСеанса()), КонецДня(ТекущаяДатаСеанса() + 7 * 86400));
	Группировать = ГруппировкаНоменклатура();
	ПоЗаказам = Ложь;
	ТолькоДефицит = Истина;
	Склад = Неопределено;
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	МассивУдаляемыхЭлементов = Новый Массив;
	ЗаполнитьЭлементыРекурсивно(Элементы.ГруппаФильтрЭлементы, МассивУдаляемыхЭлементов);
	Для каждого Элемент Из МассивУдаляемыхЭлементов Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	Фильтры.Очистить();
	ДанныеМеток.Очистить();
	
	ЗаполнитьОписанияПараметров();
	ЗаполнитьОписанияФильтров();
	ОбновитьПоляОтборов();
	ОбновитьМеткиФильтров();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСортироватьПоВозрастанию(Команда)
	
	СортироватьНаСервере("ВОЗР");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСортироватьПоУбыванию(Команда)
	
	СортироватьНаСервере("УБЫВ");
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	Для Каждого СтрокаПервыйУровень Из Запасы.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки = СтрокаПервыйУровень.ПолучитьИдентификатор();
		Элементы.Запасы.Свернуть(ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	Для Каждого СтрокаПервыйУровень Из Запасы.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки = СтрокаПервыйУровень.ПолучитьИдентификатор();
		Элементы.Запасы.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаказы(Команда)
	
	Ошибки = Неопределено;
	ПроверитьЗаполнениеПараметровПополненияРекурсивно(Запасы.ПолучитьЭлементы(), Ошибки);
	Если Ошибки <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		Возврат;
	КонецЕсли; 
	
	ПроверитьЗаполнениеПередФормированием(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПередФормированием()
	
	Оповещение = Новый ОписаниеОповещения("СформироватьЗаказыЗавершение", ЭтотОбъект);
	
	НезаполненныеПоля = Новый Массив;
	Если НЕ ЗаполненИсточник(ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Закупка"))
		ИЛИ НЕ ЗаполненИсточник(ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Переработка")) Тогда
		НезаполненныеПоля.Добавить(НСтр("ru = 'поставщиками'"));
	КонецЕсли;  
	Если НЕ ЗаполненИсточник(ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Производство")) Тогда
		НезаполненныеПоля.Добавить(НСтр("ru = 'изготовителями'"));
	КонецЕсли;
	Если НезаполненныеПоля.Количество()>0 Тогда
		ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Для позиций с незаполненными %1 будет сформирован отдельный заказ. Продолжить?'"),
			СтрСоединить(НезаполненныеПоля, ", "));
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.ОК); 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаказыЗавершение(Результат, ДополнительныеДанные) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли; 
	
	СформироватьЗаказыНаСервере();
	
	Если Заказы.Количество() > 0 Тогда
		Режим = 2;
		УправлениеФормой(Элементы.Режим.Имя);
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаказ(Команда)
	
	ТекСтр = Элементы.Заказы.ТекущиеДанные;
	Если ТекСтр = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ПоказатьЗначение(Неопределено, ТекСтр.Заказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПровести(Команда)
	
	МассивЗаказов = Новый Массив;
	
	Для каждого ВыделеннаяСтрока Из Элементы.Заказы.ВыделенныеСтроки Цикл
		
		МассивЗаказов.Добавить(Новый Структура("Индекс, Ссылка", ВыделеннаяСтрока, Заказы.Получить(ВыделеннаяСтрока).Заказ));
		
	КонецЦикла;
	
	РезультатыПроведения = ЗаказыПровестиСервер(МассивЗаказов);
	
	Для каждого РезультатПроведения Из РезультатыПроведения Цикл
		
		Заказы.Получить(РезультатПроведения).СтандартнаяКартинка = 1;
		
	КонецЦикла;
	
	ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказПоставщику"));
	ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказНаПроизводство"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаказыПровестиСервер(ЗаказыДляПроведения)
	
	РезультатыПроведения = Новый Массив;
	
	Для каждого ЗаказДляПроведения Из ЗаказыДляПроведения Цикл
	
		ЗаказОбъект = ЗаказДляПроведения.Ссылка.ПолучитьОбъект();
		
		Если НЕ ЗаказОбъект.ПометкаУдаления Тогда
			
			Если ЗаказОбъект.ПроверитьЗаполнение() Тогда
			
				Попытка
					
					ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
					РезультатыПроведения.Добавить(ЗаказДляПроведения.Индекс);
					
				Исключение
					
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Расчет потребностей: проведение заказов'"),
						УровеньЖурналаРегистрации.Ошибка, ЗаказОбъект.Метаданные(), ЗаказОбъект.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатыПроведения;
	
КонецФункции

&НаКлиенте
Процедура ЗаказыОтменаПроведения(Команда)
	
	МассивЗаказов = Новый Массив;
	
	Для каждого ВыделеннаяСтрока Из Элементы.Заказы.ВыделенныеСтроки Цикл
		
		МассивЗаказов.Добавить(Новый Структура("Индекс, Ссылка", ВыделеннаяСтрока, Заказы.Получить(ВыделеннаяСтрока).Заказ));
		
	КонецЦикла;
	
	РезультатыОтменыПроведения = ЗаказыОтменаПроведенияСервер(МассивЗаказов);
	
	Для каждого РезультатОтменыПроведения Из РезультатыОтменыПроведения Цикл
		
		Заказы.Получить(РезультатОтменыПроведения).СтандартнаяКартинка = 0;
		
	КонецЦикла;
	
	ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказПоставщику"));
	ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказНаПроизводство"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаказыОтменаПроведенияСервер(ЗаказыДляОтменыПроведения)
	
	РезультатыОтменыПроведения = Новый Массив;
	
	Для каждого ЗаказДляОтменыПроведения Из ЗаказыДляОтменыПроведения Цикл
	
		ЗаказОбъект = ЗаказДляОтменыПроведения.Ссылка.ПолучитьОбъект();
		
		Если НЕ ЗаказОбъект.ПометкаУдаления Тогда
			
			Попытка
				
				ЗаказОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				РезультатыОтменыПроведения.Добавить(ЗаказДляОтменыПроведения.Индекс);
				
			Исключение
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Расчет потребностей: отмена проведения заказов'"),
					УровеньЖурналаРегистрации.Ошибка, ЗаказОбъект.Метаданные(), ЗаказОбъект.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатыОтменыПроведения;
	
КонецФункции

&НаКлиенте
Процедура ЗаказыПометитьНаУдаление(Команда)
	
	МассивЗаказов = Новый Массив;
	
	Для каждого ВыделеннаяСтрока Из Элементы.Заказы.ВыделенныеСтроки Цикл
		
		МассивЗаказов.Добавить(Новый Структура("Индекс, Ссылка", ВыделеннаяСтрока, Заказы.Получить(ВыделеннаяСтрока).Заказ));
		
	КонецЦикла;
	
	РезультатыПометкиНаУдаление = ЗаказыПометитьНаУдалениеСервер(МассивЗаказов);
	
	Для каждого РезультатПометкиНаУдаление Из РезультатыПометкиНаУдаление Цикл
		
		Если Заказы.Получить(РезультатПометкиНаУдаление).СтандартнаяКартинка = 3 Тогда
			
			Заказы.Получить(РезультатПометкиНаУдаление).СтандартнаяКартинка = 0;
			
		Иначе
			
			Заказы.Получить(РезультатПометкиНаУдаление).СтандартнаяКартинка = 3;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказПоставщику"));
	ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказНаПроизводство"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаказыПометитьНаУдалениеСервер(ЗаказыДляПометкиНаУдаление)
	
	РезультатыПометкиНаУдаление = Новый Массив;
	
	Для каждого ЗаказДляПометкиНаУдаление Из ЗаказыДляПометкиНаУдаление Цикл
	
		ЗаказОбъект = ЗаказДляПометкиНаУдаление.Ссылка.ПолучитьОбъект();
		
		Попытка
			
			ЗаказОбъект.УстановитьПометкуУдаления(НЕ ЗаказОбъект.ПометкаУдаления);
			РезультатыПометкиНаУдаление.Добавить(ЗаказДляПометкиНаУдаление.Индекс);
			
		Исключение
			
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Расчет потребностей: пометка на удаление заказов'"),
					УровеньЖурналаРегистрации.Ошибка, ЗаказОбъект.Метаданные(), ЗаказОбъект.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		КонецПопытки;
			
	КонецЦикла;
	
	Возврат РезультатыПометкиНаУдаление;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьЗаказы(Команда)
	
	ОбновитьЗаказыСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаказыСервер()
	
	МассивЗаказов = Новый Массив;
	Для каждого СтрокаЗаказ Из Заказы Цикл
		МассивЗаказов.Добавить(СтрокаЗаказ.Заказ);
	КонецЦикла;
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЗаказов, "Проведен, ПометкаУдаления");
	
	Для каждого СтрокаЗаказ Из Заказы Цикл
		ТекущийЗаказ = СтрокаЗаказ.Заказ;
		Значения = ЗначенияРеквизитов.Получить(ТекущийЗаказ);
		Если Значения=Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Если Значения.Проведен Тогда
			СтрокаЗаказ.СтандартнаяКартинка = 1;
		ИначеЕсли Значения.ПометкаУдаления Тогда
			СтрокаЗаказ.СтандартнаяКартинка = 3;
		Иначе
			СтрокаЗаказ.СтандартнаяКартинка = 0;
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Процедура Заказать(Команда)
	
	ТекСтр = Элементы.Запасы.ТекущиеДанные;
	Если ТекСтр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекСтр.Дефицит <= 0 И НЕ ТекСтр.Выбран Тогда
		Возврат;
	КонецЕсли; 
	СписокГруппировок = Новый СписокЗначений;
	СписокГруппировок.Добавить(ИмяГруппировкиРекомендовано());
	Если Группировать = ГруппировкаНоменклатура() Тогда
		СписокГруппировок.Добавить(ИмяГруппировкиЗаказРекомендации());
	Иначе 
		СписокГруппировок.Добавить(ИмяГруппировкиЗаказ());
	КонецЕсли;
	Если Группировать = ГруппировкаДеньНоменклатура() Тогда
		СписокГруппировок.Добавить(ИмяГруппировкиПериод());
	КонецЕсли; 
	СписокГруппировок.Добавить(ИмяГруппировкиНоменклатура());
	Если СписокГруппировок.НайтиПоЗначению(ТекСтр.ИмяГруппировки)=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекСтр.Выбран = НЕ ТекСтр.Выбран;
	Если ТекСтр.Выбран Тогда
		Разница = ТекСтр.Дефицит - ТекСтр.Заказать;
		ТекСтр.Заказать = ТекСтр.Дефицит;
		Если НЕ ТекСтр.Весовой И ТекСтр.Заказать <> Цел(ТекСтр.Заказать) И Рассчитывать = РассчитыватьПоПродажам() Тогда
			ТекСтр.Заказать = Цел(ТекСтр.Заказать) + 1;
		КонецЕсли;
	Иначе
		Разница = - ТекСтр.Заказать;
		ТекСтр.Заказать = 0;
	КонецЕсли;
	ОбработатьИзменениеКоличестваЗаказа(ТекСтр, Разница);
	
КонецПроцедуры

#КонецОбласти 

#Область УправлениеВнешнимВидомФормы

&НаСервере
Процедура УправлениеФормой(Знач ИмяРеквизита = "")
	
	Если ПустаяСтрока(ИмяРеквизита) Тогда
		// Организация
		ОписаниеФильтра = ОписаниеФильтра(Фильтры, "Имя", "Организация");
		Если ОписаниеФильтра <> Неопределено Тогда
			Элементы[ОписаниеФильтра.ИмяЭлемента].Видимость = (ПараметрыФормы.ИспользоватьНесколькоОрганизаций 
				И НЕ ЗначениеЗаполнено(ПараметрыФормы.Компания));
			Если НЕ ПараметрыФормы.ИспользоватьНесколькоОрганизаций Тогда
				ОписаниеФильтра.Значение = ПредопределенноеЗначение("Справочник.Организации.ОсновнаяОрганизация");
				ОписаниеФильтра.ВыбранноеЗначение = ОписаниеФильтра.Значение;
				УстановитьФильтр(ОписаниеФильтра.Имя, ОписаниеФильтра.Значение);
			ИначеЕсли ЗначениеЗаполнено(ПараметрыФормы.Компания) Тогда
				ОписаниеФильтра.Значение = ПараметрыФормы.Компания;
				ОписаниеФильтра.ВыбранноеЗначение = ПараметрыФормы.Компания;
				УстановитьФильтр(ОписаниеФильтра.Имя, ПараметрыФормы.Компания);
			КонецЕсли; 
		КонецЕсли;
		// Склад
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Склад", "Видимость", 
			ПараметрыФормы.УчетПотребностиПоСкладам);
		ОписаниеФильтра = ОписаниеФильтра(Фильтры, "Имя", "Склад");
		Если ОписаниеФильтра <> Неопределено Тогда
			Элементы[ОписаниеФильтра.ИмяЭлемента].Родитель.Видимость = (ПараметрыФормы.УчетПоНесколькимСкладам);
		КонецЕсли;
		// Виды заказов
		ОписаниеФильтра = ОписаниеФильтра(Фильтры, "Имя", "ВидЗаказа");
		Если ОписаниеФильтра <> Неопределено И НЕ ПараметрыФормы.ИспользоватьПодсистемуРаботы Тогда
			ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ВидыЗаказовПокупателей");
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ОписаниеФильтра.ИмяЭлемента, 
				"ОграничениеТипа", ОписаниеТипов);
		КонецЕсли;
		Если НЕ ПараметрыФормы.ИспользоватьВидыЗаказовПокупателей И НЕ ПараметрыФормы.ИспользоватьВидыЗаказНарядов Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ОписаниеФильтра.ИмяЭлемента, 
				"Видимость", Ложь);
		КонецЕсли; 
		// Мобильный клиент
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыВыбран", "Видимость", 
			НЕ ПараметрыФормы.ЭтоМобильныйКлиент);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыКонтекстноеМенюЗаказать", 
			"Видимость", ПараметрыФормы.ЭтоМобильныйКлиент);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыГруппаЗаказ", "Видимость", 
			НЕ ПараметрыФормы.ТолькоПросмотр);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Режим", "Видимость", 
			НЕ ПараметрыФормы.ТолькоПросмотр);
	КонецЕсли; 
	
	Если ПустаяСтрока(ИмяРеквизита) ИЛИ ИмяРеквизита = Элементы.Режим.Имя Тогда
		Элементы.Страницы.ТекущаяСтраница = ?(Режим = 2, Элементы.СтраницаЗаказы, Элементы.СтраницаЗапасы);
		// Командная панель
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Обновить", "Видимость", Режим = 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКомандыЗаполнения", "Видимость", 
			Режим = 0 И НЕ ПараметрыФормы.ТолькоПросмотр);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СформироватьЗаказы", "Видимость", 
			Режим = 1);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКнопкиЗаказы", "Видимость", 
			Режим = 2);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КнопкиСортировать", "Видимость", 
			Режим = 0 ИЛИ Режим = 1);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КнопкиСвернутьРазвернуть", "Видимость", 
			Режим = 0 ИЛИ Режим = 1);
		// Запасы
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыПросрочено", "Видимость", 
			Режим = 0 И Группировать = ГруппировкаНоменклатура());
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыГруппаДополнительныеКолонки", 
			"Видимость", Режим = 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыГруппаПараметрыЗакупки", "Видимость", 
			Режим = 1);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Запасы", "Подвал", Режим = 1);
		// Панель
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаФильтры", "Видимость", Режим = 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Склад", "Доступность", Режим = 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоЗаказам", "Доступность", Режим = 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Группировать", "Доступность", Режим = 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаНачалаПланирования", "Доступность", 
			Режим = 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КоличествоДнейПланирования", "Доступность", 
			Режим = 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Рассчитывать", "Доступность", 
			Режим = 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "МетодПрогноза", "Доступность", 
			Режим = 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПредставлениеПериодаПродаж", "Доступность", 
			Режим = 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаФормировать", "Видимость", Режим = 1);
		// ГрупповоеИзменениеСтрок
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСоставИзменениеСтрок", "Видимость", 
			Режим = 1 И ВидимостьПанелиИзменениеСтрок);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыИзменитьСтроки", "Видимость", Режим = 1);
		ИзменитьФиксациюКолонок();
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяРеквизита) ИЛИ ИмяРеквизита = Элементы.Рассчитывать.Имя Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаМетодРасчетаПоПродажам", "Видимость", 
			Рассчитывать = РассчитыватьПоПродажам());
	КонецЕсли; 	
	
	Если ПустаяСтрока(ИмяРеквизита) ИЛИ ИмяРеквизита = Элементы.ОтборСпособПополнения.Имя Тогда
		// Контрагент
		ОписаниеФильтра = ОписаниеФильтра(Фильтры, "Имя", "Контрагент");
		Если ОписаниеФильтра <> Неопределено Тогда
			ВидимостьПоля = (ОтборСпособПополнения <> СпособПополненияПроизводство());
			Элементы[ОписаниеФильтра.ИмяЭлемента].Видимость = ВидимостьПоля;
			Если НЕ ВидимостьПоля Тогда
				ПустойКонтрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
				ОписаниеФильтра.Значение = ПустойКонтрагент;
				ОписаниеФильтра.ВыбранноеЗначение = ПустойКонтрагент;
				УстановитьПараметр("Контрагент", ПустойКонтрагент);
			КонецЕсли; 
		КонецЕсли;
		// Склад
		Элементы.Склад.АвтоОтметкаНезаполненного = (ОтборСпособПополнения = СпособПополненияПеремещение());
		Если НЕ Элементы.Склад.АвтоОтметкаНезаполненного Тогда
			Элементы.Склад.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		// Параметры формирования
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РезервироватьЗаказомНаПеремещение", 
			"Видимость", ОтборСпособПополнения = СпособПополненияПеремещение() 
			ИЛИ ОтборСпособПополнения = СпособПополненияВсе());
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаказыПоставщикуРазнымиДатами", 
			"Видимость", ОтборСпособПополнения = СпособПополненияЗакупка() 
			ИЛИ ОтборСпособПополнения = СпособПополненияВсе());
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтдельныеДокументыПоЗаказамПокупателя", 
			"Видимость", ОтборСпособПополнения = СпособПополненияЗакупка() 
			ИЛИ ОтборСпособПополнения = СпособПополненияПроизводство() 
			ИЛИ ОтборСпособПополнения = СпособПополненияВсе());
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяРеквизита) ИЛИ ИмяРеквизита = Элементы.Группировать.Имя Тогда
		Элементы.ПоЗаказам.Видимость = (Группировать <> ГруппировкаЗаказНоменклатура() И ПараметрыФормы.РезервированиеЗапасов);
		Если НЕ Элементы.ПоЗаказам.Видимость Тогда
			ПоЗаказам = Ложь;
		КонецЕсли; 
	КонецЕсли; 	
	
	Если ПустаяСтрока(ИмяРеквизита) ИЛИ ИмяРеквизита = Элементы.ПоЗаказам.Имя Тогда
		Элементы.ОтдельныеДокументыПоЗаказамПокупателя.Доступность = (ПоЗаказам ИЛИ Группировать = ГруппировкаЗаказНоменклатура());
		Если ОтдельныеДокументыПоЗаказамПокупателя И НЕ Элементы.ОтдельныеДокументыПоЗаказамПокупателя.Доступность Тогда
			ОтдельныеДокументыПоЗаказамПокупателя = Ложь;
		КонецЕсли; 
	КонецЕсли; 	
	
	Если ПустаяСтрока(ИмяРеквизита) ИЛИ ИмяРеквизита = Элементы.ПоставкаОднойДатой.Имя 
		ИЛИ ИмяРеквизита = Элементы.ОтборСпособПополнения.Имя Тогда
		Элементы.ЗаказыПоставщикуРазнымиДатами.Видимость = Элементы.ЗаказыПоставщикуРазнымиДатами.Видимость И НЕ ПоставкаОднойДатой;
		Элементы.ДатаПоставки.Видимость = ПоставкаОднойДатой;
	КонецЕсли; 	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СписокГруппировок = Новый СписокЗначений;
	СписокГруппировок.ЗагрузитьЗначения(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("НачальныйОстаток,Поступление,Потребность,МинимальныйЗапас,МаксимальныйЗапас,КонечныйОстаток,Рекомендовано"));
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ВложенныеЭлементы = ПодчиненныеЭлементыРекурсивно(Элементы.Запасы);
	Для каждого Элемент Из ВложенныеЭлементы Цикл
		Если Элемент.Имя = "ЗапасыЗаказать" 
			ИЛИ Элемент.Имя = "ЗапасыВыбран" Тогда
			Продолжить;
		КонецЕсли;
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, Элемент.Имя);
	КонецЦикла; 
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.ИмяГруппировки", СписокГруппировок, ВидСравненияКомпоновкиДанных.ВСписке);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ТекстВторостепеннойНадписи);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	Для каждого Элемент Из ВложенныеЭлементы Цикл
		Если Элемент.Имя = "ЗапасыЗаказать" 
			ИЛИ Элемент.Имя = "ЗапасыВыбран" Тогда
			Продолжить;
		КонецЕсли;
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, Элемент.Имя);
	КонецЦикла; 
	СписокГруппировок = Новый СписокЗначений;
	СписокГруппировок.Добавить(ИмяГруппировкиЗаказ());
	СписокГруппировок.Добавить(ИмяГруппировкиЗаказРекомендации());
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.ИмяГруппировки", СписокГруппировок, ВидСравненияКомпоновкиДанных.ВСписке);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПоЗаказам", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ТекстВторостепеннойНадписи);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	Для каждого Элемент Из ВложенныеЭлементы Цикл
		Если Элемент.Имя = "ЗапасыЗаказать" 
			ИЛИ Элемент.Имя = "ЗапасыВыбран" 
			ИЛИ Элемент.Имя = "ЗапасыЦена" 
			ИЛИ Элемент.Имя = "ЗапасыСумма" Тогда
			Продолжить;
		КонецЕсли;
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, Элемент.Имя);
	КонецЦикла; 
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.ИмяГруппировки", ИмяГруппировкиИсточник(), ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ТекстВторостепеннойНадписи);
	
	Если Группировать = ГруппировкаНоменклатура() Тогда
		
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыПросрочено");
		СписокГруппировок = Новый СписокЗначений;
		СписокГруппировок.Добавить(ИмяГруппировкиРекомендовано());
		СписокГруппировок.Добавить(ИмяГруппировкиНоменклатура());
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.ИмяГруппировки", СписокГруппировок, ВидСравненияКомпоновкиДанных.ВСписке);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
		
	КонецЕсли;
	
	// Выбран
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыВыбран");
	СписокГруппировок = Новый СписокЗначений;
	СписокГруппировок.Добавить(ИмяГруппировкиРекомендовано());
	СписокГруппировок.Добавить(ИмяГруппировкиИсточник());
	Если Группировать = ГруппировкаНоменклатура() Тогда
		СписокГруппировок.Добавить(ИмяГруппировкиЗаказРекомендации());
	Иначе 
		СписокГруппировок.Добавить(ИмяГруппировкиЗаказ());
	КонецЕсли;
	Если Группировать = ГруппировкаДеньНоменклатура()
		ИЛИ Группировать = ГруппировкаНоменклатураДень() Тогда
		СписокГруппировок.Добавить(ИмяГруппировкиПериод());
	КонецЕсли; 
	СписокГруппировок.Добавить(ИмяГруппировкиНоменклатура());
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.ИмяГруппировки", СписокГруппировок, ВидСравненияКомпоновкиДанных.ВСписке);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.Дефицит", 0, ВидСравненияКомпоновкиДанных.Больше);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветФона", ЦветаСтиля.ЦветФонаПотенциальныхВозможностей);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыВыбран");
	ГруппаОтборов = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Запасы.ИмяГруппировки", СписокГруппировок, ВидСравненияКомпоновкиДанных.НеВСписке);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Запасы.Дефицит", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.Выбран", Ложь);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	
	// Заказать
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЗаказать");
	СписокГруппировок = Новый СписокЗначений;
	СписокГруппировок.Добавить(ИмяГруппировкиРекомендовано());
	СписокГруппировок.Добавить(ИмяГруппировкиИсточник());
	Если Группировать = ГруппировкаНоменклатура() Тогда
		СписокГруппировок.Добавить(ИмяГруппировкиЗаказРекомендации());
	ИначеЕсли Группировать <> ГруппировкаЗаказНоменклатура() Тогда 
		СписокГруппировок.Добавить(ИмяГруппировкиЗаказ());
	КонецЕсли; 
	Если Группировать = ГруппировкаДеньНоменклатура()
		ИЛИ Группировать = ГруппировкаНоменклатураДень() Тогда
		СписокГруппировок.Добавить(ИмяГруппировкиПериод());
	КонецЕсли; 
	СписокГруппировок.Добавить(ИмяГруппировкиНоменклатура());
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.ИмяГруппировки", СписокГруппировок, ВидСравненияКомпоновкиДанных.ВСписке);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветФона", ЦветаСтиля.ЦветФонаПотенциальныхВозможностей);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЗаказать");
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.ИмяГруппировки", СписокГруппировок, ВидСравненияКомпоновкиДанных.НеВСписке);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	
	// Характеристика
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыХарактеристика");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЕдиницаИзмерения");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыАртикул");
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.ИмяГруппировки", ИмяГруппировкиНоменклатура(), ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыХарактеристика");
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
	// Единица измерения
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЕдиницаИзмерения");
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.ИмяГруппировки", ИмяГруппировкиНоменклатура());
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.НесколькоЕдиницИзмерения", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветФона", ЦветаСтиля.ЦветФонаПотенциальныхВозможностей);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЕдиницаИзмерения");
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.НесколькоЕдиницИзмерения", Ложь);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	
	// Скрытие строк в режиме планирования
	ВложенныеЭлементы = ПодчиненныеЭлементыРекурсивно(Элементы.Запасы);
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	Для каждого Элемент Из ВложенныеЭлементы Цикл
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, Элемент.Имя);
	КонецЦикла; 
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.Показывать", Ложь);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Режим", 1);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
	// Источники отображаются только в режиме планирования
	ВложенныеЭлементы = ПодчиненныеЭлементыРекурсивно(Элементы.Запасы);
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	Для каждого Элемент Из ВложенныеЭлементы Цикл
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, Элемент.Имя);
	КонецЦикла; 
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.ИмяГруппировки", 
		ИмяГруппировкиИсточник());
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Режим", 0);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
	// Цена и валюта
	ИменаЭлементов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ЗапасыЦена,ЗапасыСумма");
	СписокГруппировок = Новый СписокЗначений;
	СписокГруппировок.Добавить(ИмяГруппировкиНоменклатура());
	СписокГруппировок.Добавить(ИмяГруппировкиИсточник());
	СписокСпособовПополнения = Новый СписокЗначений;
	СписокСпособовПополнения.Добавить(Перечисления.СпособыПополненияЗапасов.Закупка);
	СписокСпособовПополнения.Добавить(Перечисления.СпособыПополненияЗапасов.Переработка);
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	Для каждого ИмяЭлемента Из ИменаЭлементов Цикл
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяЭлемента);
	КонецЦикла; 
	ГруппаОтборов = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Запасы.ИмяГруппировки", СписокГруппировок, ВидСравненияКомпоновкиДанных.НеВСписке);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Запасы.СпособПополнения", СписокСпособовПополнения, ВидСравненияКомпоновкиДанных.НеВСписке);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Запасы.Выбран", Ложь);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	Для каждого ИмяЭлемента Из ИменаЭлементов Цикл
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяЭлемента);
	КонецЦикла; 
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.ИмяГруппировки", СписокГруппировок, ВидСравненияКомпоновкиДанных.ВСписке);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.СпособПополнения", СписокСпособовПополнения, ВидСравненияКомпоновкиДанных.ВСписке);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.Выбран", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветФона", ЦветаСтиля.ЦветФонаПотенциальныхВозможностей);
	
	// Особый цвет текста при предупреждениях
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыНоменклатура");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыХарактеристика");
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.ИмяГруппировки", ИмяГруппировкиНоменклатура());
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.НевозможноОбеспечить", 0, ВидСравненияКомпоновкиДанных.Больше);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	// ГрупповоеИзменениеСтрок
	ВложенныеЭлементы = ПодчиненныеЭлементыРекурсивно(Элементы.Запасы);
	СписокГруппировок = Новый СписокЗначений;
	СписокГруппировок.Добавить(ИмяГруппировкиНоменклатура());
	СписокГруппировок.Добавить(ИмяГруппировкиИсточник());
	Если Группировка = ГруппировкаЗаказНоменклатура() Тогда
		СписокГруппировок.Добавить(ИмяГруппировкиЗаказ());
	ИначеЕсли Группировка = ГруппировкаДеньНоменклатура() Тогда
		СписокГруппировок.Добавить(ИмяГруппировкиПериод());
	КонецЕсли; 
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	Для каждого Элемент Из ВложенныеЭлементы Цикл
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, Элемент.Имя);
	КонецЦикла; 
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Режим", 1);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ВидимостьПанелиИзменениеСтрок", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.ИмяГруппировки", СписокГруппировок, ВидСравненияКомпоновкиДанных.НеВСписке);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыПометка");
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Режим", 1);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ВидимостьПанелиИзменениеСтрок", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.ИмяГруппировки", ИмяГруппировкиИсточник());
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.Выбран", Ложь);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	
	// Превышение лимита перемещения
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЛимит");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЗаказать");
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Режим", 1);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.ИмяГруппировки", 
		ИмяГруппировкиИсточник());
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.СпособПополнения", 
		Перечисления.СпособыПополненияЗапасов.Перемещение);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Запасы.Лимит", 
		Новый ПолеКомпоновкиДанных("Запасы.Заказать"), "Меньше");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", 
		ЦветаСтиля.ЦветОсобогоТекста);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКолонки(ДатаНачала, ДатаОкончания)
	
	// Удаление ранее добавленных элементов.
	КоличествоЭлементов = Элементы.ЗапасыГруппаДополнительныеКолонки.ПодчиненныеЭлементы.Количество();
	Для ии = 1 По КоличествоЭлементов Цикл
		ДобавленныйЭлемент = Элементы.ЗапасыГруппаДополнительныеКолонки.ПодчиненныеЭлементы[0];
		Элементы.Удалить(ДобавленныйЭлемент);
	КонецЦикла; 
	
	МассивДобавляемыеРеквизиты = Новый Массив;
	
	Если Группировать <> ГруппировкаНоменклатура() Тогда
		
		НовыйРеквизит = Новый РеквизитФормы("НачальныйОстаток", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)), "Запасы", НСтр("ru = 'Начальный остаток'"));
		МассивДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
		НовыйРеквизит = Новый РеквизитФормы("Потребность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)), "Запасы", НСтр("ru = 'Потребность'"));
		МассивДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
		НовыйРеквизит = Новый РеквизитФормы("Поступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)), "Запасы", НСтр("ru = 'Поступление'"));
		МассивДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
		НовыйРеквизит = Новый РеквизитФормы("КонечныйОстаток", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)), "Запасы", НСтр("ru = 'Конечный остаток'"));
		МассивДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
	Иначе
		
		// Реквизиты "Период".
		ТекущийПериод = ДатаНачала;
		
		Пока НачалоДня(ТекущийПериод) <= НачалоДня(ДатаОкончания) Цикл
			
			НовыйРеквизит = Новый РеквизитФормы("Период" + Формат(ТекущийПериод, "ДФ=yyyyMMdd"), Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)), "Запасы", Формат(ТекущийПериод, "ДЛФ=D"));
			МассивДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
			
			ТекущийПериод = ТекущийПериод + 86400;
			
		КонецЦикла;
		
		НовыйРеквизит = Новый РеквизитФормы("Пополнение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)), "Запасы", НСтр("ru = 'Пополнение запасов'"));
		МассивДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
	КонецЕсли; 
	
	// Удаление ранее добавленных реквизитов и добавление новых реквизитов.
	ИзменитьРеквизиты(МассивДобавляемыеРеквизиты, ДобавленныеРеквизиты.ВыгрузитьЗначения());
	
	// Обновление добавленных реквизитов и элементов.
	ДобавленныеРеквизиты.Очистить();
	
	Для каждого Реквизит Из МассивДобавляемыеРеквизиты Цикл
		
		ДобавленныеРеквизиты.Добавить(Реквизит.Путь + "." + Реквизит.Имя, Реквизит.Заголовок);
		
		Если ПустаяСтрока(Реквизит.Заголовок) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Элемент = Элементы.Добавить(Реквизит.Путь + Реквизит.Имя, Тип("ПолеФормы"), Элементы.ЗапасыГруппаДополнительныеКолонки);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = Реквизит.Путь + "." + Реквизит.Имя;
		Элемент.Заголовок = Реквизит.Заголовок;
		Элемент.ТолькоПросмотр = Истина;
		Элемент.Ширина = 8;
		Элемент.ЦветФонаЗаголовка = ЦветаСтиля.ЦветФонаФормы;
		Элемент.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветРамки;
		
	КонецЦикла;
	
	ЭлементЗапасыНачальныйОстаток = Элементы.Найти("ЗапасыНачальныйОстаток");
	Если Группировать <> ГруппировкаНоменклатура() Тогда
		
		Если ЭлементЗапасыНачальныйОстаток=Неопределено Тогда
			Элемент = Элементы.Добавить("ЗапасыМинимальныйЗапас", Тип("ПолеФормы"), Элементы.ЗапасыГруппаДополнительныеКолонки);
		Иначе
			Элемент = Элементы.Вставить("ЗапасыМинимальныйЗапас", Тип("ПолеФормы"), Элементы.ЗапасыГруппаДополнительныеКолонки, ЭлементЗапасыНачальныйОстаток);
		КонецЕсли; 
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = "Запасы.МинимальныйЗапас";
		Элемент.Заголовок = НСтр("ru = 'Мин. запас'");
		Элемент.ТолькоПросмотр = Истина;
		Элемент.Ширина = 8;
		Элемент.ЦветФонаЗаголовка = ЦветаСтиля.ЦветФонаФормы;
		Элемент.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветРамки;
		
		Если ЭлементЗапасыНачальныйОстаток=Неопределено Тогда
			Элемент = Элементы.Добавить("ЗапасыМаксимальныйЗапас", Тип("ПолеФормы"), Элементы.ЗапасыГруппаДополнительныеКолонки);
		Иначе
			Элемент = Элементы.Вставить("ЗапасыМаксимальныйЗапас", Тип("ПолеФормы"), Элементы.ЗапасыГруппаДополнительныеКолонки, ЭлементЗапасыНачальныйОстаток);
		КонецЕсли; 
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = "Запасы.МаксимальныйЗапас";
		Элемент.Заголовок = НСтр("ru = 'Макс. запас'");
		Элемент.ТолькоПросмотр = Истина;
		Элемент.Ширина = 8;
		Элемент.ЦветФонаЗаголовка = ЦветаСтиля.ЦветФонаФормы;
		Элемент.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветРамки;
		
		Элементы.ЗапасыПросрочено.Видимость = Ложь;
		
	Иначе
		
		Элементы.ЗапасыПросрочено.Видимость = Истина;
		
	КонецЕсли; 
	
	ИзменитьФиксациюКолонок();
	
	// Установка условного оформления.
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьФиксациюКолонок()
	
	Если Группировать = ГруппировкаНоменклатура() И Режим = 0 Тогда
		
		Элементы.ЗапасыГруппаНоменклатура.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
		Элементы.ЗапасыПометка.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
		Элементы.ЗапасыНоменклатура.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
		Элементы.ЗапасыХарактеристика.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
		Элементы.ЗапасыАртикул.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
		Элементы.ЗапасыЕдиницаИзмерения.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
		
	Иначе
		
		Элементы.ЗапасыГруппаНоменклатура.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
		Элементы.ЗапасыПометка.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
		Элементы.ЗапасыНоменклатура.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
		Элементы.ЗапасыХарактеристика.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
		Элементы.ЗапасыАртикул.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
		Элементы.ЗапасыЕдиницаИзмерения.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область ПараметрыФормы

&НаСервере
Процедура ЗаполнитьФильтрыИзПараметровФормы()
	
	// Организация
	Если Параметры.Свойство("Организация") Тогда
		ОписаниеФильтра = ОписаниеФильтра(Фильтры, "Имя", "Организация");
		Если ОписаниеФильтра <> Неопределено Тогда
			ОписаниеФильтра.Значение = Параметры.Организация;
			ОписаниеФильтра.ВыбранноеЗначение = Параметры.Организация;
			УстановитьФильтр(ОписаниеФильтра.Имя, Параметры.Организация);
		КонецЕсли;
	КонецЕсли;
	
	// Склад
	Если Параметры.Свойство("Склад") Тогда
		Склад = Параметры.Склад;
	КонецЕсли;
	
	// Номенклатура
	Если Параметры.Свойство("Номенклатура") Тогда
		ОписаниеФильтра = ОписаниеФильтра(Фильтры, "Имя", "Номенклатура");
		ОписаниеФильтра.ВыборСписка = Истина;
		ОписаниеФильтра.ПоказатьСписокЗначенийОднимОтбором = Истина;
		Если ОписаниеФильтра <> Неопределено Тогда
			ОписаниеФильтра.Значение = Параметры.Номенклатура;
			УстановитьФильтр(ОписаниеФильтра.Имя, ОписаниеФильтра.Значение, ОписаниеФильтра.Пользовательский);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыФормы()
	
	НужноСохранитьНастройкиОтборов = Истина;
	Если Параметры.Свойство("Номенклатура") Тогда
		Параметры.Свойство("ЗаголовокПодборкиСпискаНоменклатуры", ЗаголовокПодборкиСпискаНоменклатуры);
		НужноСохранитьНастройкиОтборов = Ложь;
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РезервированиеЗапасов", ПолучитьФункциональнуюОпцию("РезервированиеЗапасов"));
	ПараметрыФормы.Вставить("ИспользоватьНесколькоОрганизаций", ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций"));
	ПараметрыФормы.Вставить("УчетПоНесколькимСкладам", ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам"));
	ПараметрыФормы.Вставить("ИспользоватьПодсистемуРаботы", ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы"));
	ПараметрыФормы.Вставить("УчетЦенКонтрагентов", ПолучитьФункциональнуюОпцию("УчетЦенКонтрагентов"));
	ПараметрыФормы.Вставить("ИспользоватьВидыЗаказовПокупателей", ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей"));
	ПараметрыФормы.Вставить("ИспользоватьВидыЗаказНарядов", ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказНарядов"));
	ПараметрыФормы.Вставить("УчетПотребностиПоСкладам", ПолучитьФункциональнуюОпцию("УчетПотребностиПоСкладам"));
	Если Параметры.Свойство("Организация") Тогда
		ПараметрыФормы.Вставить("Компания", Параметры.Организация);
	Иначе
		ПараметрыФормы.Вставить("Компания", Константы.Компания.Получить());
	КонецЕсли;
	ПараметрыФормы.Вставить("ВалютаУчета", Константы.ВалютаУчета.Получить());
	ПараметрыФормы.Вставить("ЭтоМобильныйКлиент", ОбщегоНазначения.ЭтоМобильныйКлиент());
	ПараметрыФормы.Вставить("ТолькоПросмотр", НЕ ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПоставщику) И НЕ ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаПроизводство));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКурсыВалют()
	
	ПараметрыФормы.Вставить("КурсыВалют", Новый Соответствие);
	ТаблицаКурсов = РегистрыСведений.КурсыВалют.СрезПоследних(ПериодПланирования.ДатаНачала);
	Для каждого СтрокаКурса Из ТаблицаКурсов Цикл
		ПараметрыФормы.КурсыВалют.Вставить(СтрокаКурса.Валюта, СтрокаКурса.Курс / ?(СтрокаКурса.Кратность=0, 1, СтрокаКурса.Кратность));
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область ПанельНастроекИФильтров

&НаСервереБезКонтекста
Функция ПериодПродажПоУмолчанию()
	
	ДатаСеанса = ТекущаяДатаСеанса();
	Возврат Новый СтандартныйПериод(НачалоДня(ДатаСеанса - 28 * 24 * 60 * 60), НачалоДня(ДатаСеанса) - 1);
	
КонецФункции

&НаКлиенте
Функция ПериодПродажПоУмолчаниюНаКлиенте()
	
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	Результат = Новый СтандартныйПериод(НачалоДня(ДатаСеанса - 28 * 24 * 60 * 60), НачалоДня(ДатаСеанса) - 1);
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СохранитьНастройкиОтборов(ИмяТЧДанныеМеток = "ДанныеМеток")
	
	Если Не НужноСохранитьНастройкиОтборов Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ОтборСпособПополнения) Тогда
		Возврат;
	КонецЕсли; 
	ИмяКлючаОбъекта = СтрЗаменить(ЭтаФорма.ИмяФормы, ".", "");
	КлючВарианта = ОтборСпособПополнения;
	
	СмещениеДатыПланирования = (НачалоДня(ДатаНачалаПланирования) - НачалоДня(ТекущаяДатаСеанса())) / 86400;
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, КлючВарианта + "_СмещениеДатыПланирования",
		СмещениеДатыПланирования);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, КлючВарианта + "_КоличествоДнейПланирования", 
		КоличествоДнейПланирования);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, КлючВарианта + "_ПериодПродаж", ПериодПродаж);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, КлючВарианта + "_Рассчитывать", Рассчитывать);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, КлючВарианта + "_МетодПрогноза", МетодПрогноза);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, КлючВарианта + "_Группировать", Группировать);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, КлючВарианта + "_Склад", Склад);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, КлючВарианта + "_ПоЗаказам", ПоЗаказам);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, КлючВарианта + "_ТолькоДефицит", ТолькоДефицит);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, КлючВарианта + "_Настройки", 
		КомпоновщикНастроек.Настройки);
		
	// Параметры формирования
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, КлючВарианта + "_ПоставкаОднойДатой", ПоставкаОднойДатой);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, КлючВарианта + "_ЗаказыПоставщикуРазнымиДатами", 
		ЗаказыПоставщикуРазнымиДатами);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, КлючВарианта + "_ОтдельныеДокументыПоЗаказамПокупателя", 
		ОтдельныеДокументыПоЗаказамПокупателя);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, КлючВарианта + "_РезервироватьЗаказомНаПеремещение", 
		РезервироватьЗаказомНаПеремещение);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиОтборов()
	
	// Инициализация по умолчанию
	ОбновитьСписокВыбораСпособПополнения();
	ОбновитьСписокВыбораГруппировать();
	
	Если ПустаяСтрока(ОтборСпособПополнения) Тогда
		Возврат;
	КонецЕсли;
	
	// Восстановление настроек
	ИмяКлючаОбъекта = СтрЗаменить(ЭтаФорма.ИмяФормы, ".", "");
	КлючВарианта = ОтборСпособПополнения;
	
	СмещениеДатыПланирования = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, КлючВарианта 
		+ "_СмещениеДатыПланирования", 0);
	ДатаНачалаПланирования = ДобавитьДень(НачалоДня(ТекущаяДатаСеанса()), СмещениеДатыПланирования);
	КоличествоДнейПланирования = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, КлючВарианта 
		+ "_КоличествоДнейПланирования", 14);
	ПериодПланирования = ПериодПоДатеНачалаИДлительности(ДатаНачалаПланирования, КоличествоДнейПланирования);
	Рассчитывать = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, КлючВарианта + "_Рассчитывать", 
		РассчитыватьПоЗаказам());
	МетодПрогноза = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, КлючВарианта + "_МетодПрогноза", 
		МетодПрогнозаСреднедневныеПродажи());
	ПериодПродаж = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, КлючВарианта + "_ПериодПродаж", 
		ПериодПродажПоУмолчанию());
	Группировать = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, КлючВарианта + "_Группировать", 
		ГруппировкаНоменклатура());
	Если ПараметрыФормы.УчетПотребностиПоСкладам Тогда
		Склад = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, КлючВарианта + "_Склад");
	КонецЕсли;
	Если ПараметрыФормы.РезервированиеЗапасов Тогда
		ПоЗаказам = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, КлючВарианта + "_ПоЗаказам");
	КонецЕсли;
	ТолькоДефицит = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, КлючВарианта + "_ТолькоДефицит", 
		Истина);
	
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, КлючВарианта + "_Настройки");
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
		Для каждого Параметр Из СохраненноеЗначение.ПараметрыДанных.Элементы Цикл
			Если НЕ Параметр.Использование Тогда
				Продолжить;
			КонецЕсли; 
			Если КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Параметр.Параметр) = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Параметр.Параметр, Параметр.Значение); 
		КонецЦикла;
		СкопироватьОтборыРекурсивно(СохраненноеЗначение.Отбор.Элементы, КомпоновщикНастроек.Настройки.Отбор.Элементы);
		
	КонецЕсли;
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное); 
	
	// Параметры формирования
	ПоставкаОднойДатой = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, КлючВарианта 
		+ "_ПоставкаОднойДатой", Ложь);
	ЗаказыПоставщикуРазнымиДатами = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, КлючВарианта 
		+ "_ЗаказыПоставщикуРазнымиДатами", Ложь);
	ОтдельныеДокументыПоЗаказамПокупателя = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, КлючВарианта 
		+ "_ОтдельныеДокументыПоЗаказамПокупателя", Ложь);
	РезервироватьЗаказомНаПеремещение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, КлючВарианта 
		+ "_РезервироватьЗаказомНаПеремещение", Ложь);

	
КонецПроцедуры

&НаСервере
Процедура СкопироватьОтборыРекурсивно(ЭлементыИсточник, ЭлементыПриемник)
	
	ЭлементыПриемник.Очистить();
	
	Для каждого ЭлементОтбора Из ЭлементыИсточник Цикл
		НовыйЭлемент = ЭлементыПриемник.Добавить(Тип(ЭлементОтбора));
		НовыйЭлемент.Использование = ЭлементОтбора.Использование;
		Если ТипЗнч(НовыйЭлемент)=Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НовыйЭлемент.ТипГруппы = ЭлементОтбора.ТипГруппы;
			СкопироватьОтборыРекурсивно(ЭлементОтбора.Элементы, НовыйЭлемент.Элементы);
		Иначе
			НовыйЭлемент.ЛевоеЗначение = ЭлементОтбора.ЛевоеЗначение;
			НовыйЭлемент.ВидСравнения = ЭлементОтбора.ВидСравнения;
			НовыйЭлемент.ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораГруппировать()
	
	Элементы.Группировать.СписокВыбора.Очистить();
	Элементы.Группировать.СписокВыбора.Добавить(ГруппировкаНоменклатура(), НСтр("ru = 'Номенклатуре'"));
	Элементы.Группировать.СписокВыбора.Добавить(ГруппировкаНоменклатураДень(), НСтр("ru = 'Номенклатуре и дням'"));	
	Элементы.Группировать.СписокВыбора.Добавить(ГруппировкаДеньНоменклатура(), НСтр("ru = 'Дням и номенклатуре'"));	
	Если ПараметрыФормы.РезервированиеЗапасов Тогда
		Элементы.Группировать.СписокВыбора.Добавить(ГруппировкаЗаказНоменклатура(), НСтр("ru = 'Заказам и номенклатуре'"));
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораСпособПополнения()
	
	Элементы.ОтборСпособПополнения.СписокВыбора.Очистить();
	
	Если ДоступныЗакупки Тогда
		
		Если ПолучитьФункциональнуюОпцию("ПередачаСырьяВПереработку") 
			И ПравоДоступа("ИнтерактивноеПроведение", Метаданные.Документы.ОтчетПереработчика) Тогда
				
			Элементы.ОтборСпособПополнения.СписокВыбора.Добавить(СпособПополненияЗакупкаПереработка(), 
				НСтр("ru = 'Закупка и переработка'"));
		Иначе
			Элементы.ОтборСпособПополнения.СписокВыбора.Добавить(СпособПополненияЗакупка(), НСтр("ru = 'Закупка'"));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДоступноПроизводство Тогда
		Элементы.ОтборСпособПополнения.СписокВыбора.Добавить(СпособПополненияПроизводство(), НСтр("ru = 'Производство'"));
	КонецЕсли;
	
	Если ДоступноПеремещение Тогда
		Элементы.ОтборСпособПополнения.СписокВыбора.Добавить(СпособПополненияПеремещение(), НСтр("ru = 'Перемещение'"));
	КонецЕсли;
	
	Если 0 + ДоступныЗакупки + ДоступноПроизводство + ДоступноПеремещение > 1 Тогда
		Элементы.ОтборСпособПополнения.СписокВыбора.Добавить(СпособПополненияВсе(), НСтр("ru = 'Все'"));
	КонецЕсли;
	
	Элементы.ОтборСпособПополнения.Видимость = ДоступныЗакупки И ДоступноПроизводство;
	ТолькоЗакупки = ДоступныЗакупки И НЕ ДоступноПроизводство И НЕ ДоступноПеремещение;
	
	ОбновитьСпособПополнения();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСпособПополнения()
	
	Если Элементы.ОтборСпособПополнения.СписокВыбора.НайтиПоЗначению(ОтборСпособПополнения) = Неопределено Тогда
		
		Если ТолькоЗакупки Тогда
			Если ДоступнаПереработка Тогда
				ОтборСпособПополнения = СпособПополненияЗакупкаПереработка();
			Иначе
				ОтборСпособПополнения = СпособПополненияЗакупка();
			КонецЕсли;
		Иначе
			ОтборСпособПополнения = СпособПополненияПроизводство();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьПредставлениеПериода(Период)
	
	ДатаКалендаряНачало = НачалоДня(Период.ДатаНачала);
	ДатаКалендаряОкончание = КонецДня(Период.ДатаОкончания);
	
	Если Месяц(ДатаКалендаряНачало) = Месяц(ДатаКалендаряОкончание) 
		И Год(ДатаКалендаряНачало) = Год(ДатаКалендаряОкончание) Тогда
		
		ДеньРасписанияНачало = Формат(ДатаКалендаряНачало, "ДФ=дд");
		ДеньНеделиРасписанияНачало = ПредставлениеДняНедели(ДатаКалендаряНачало);
		ДеньРасписанияОкончание = Формат(ДатаКалендаряОкончание, "ДФ=дд");
		ДеньНеделиРасписанияОкончание = ПредставлениеДняНедели(ДатаКалендаряОкончание);
		
		МесяцРасписания = Формат(ДатаКалендаряНачало, "ДФ=МММ");
		ГодРасписания = Формат(Год(ДатаКалендаряНачало), "ЧГ=0");
		
		Представление = СтрШаблон(НСтр("ru = '%1 %2 - %3 %4 %5, %6'"), ДеньНеделиРасписанияНачало, ДеньРасписанияНачало, 
			ДеньНеделиРасписанияОкончание, ДеньРасписанияОкончание, МесяцРасписания, ГодРасписания);
		
	Иначе
		
		ДеньРасписанияНачало = Формат(ДатаКалендаряНачало, "ДФ=дд");
		ДеньНеделиРасписанияНачало = ПредставлениеДняНедели(ДатаКалендаряНачало);
		МесяцРасписанияНачало = Формат(ДатаКалендаряНачало, "ДФ=МММ");
		ДеньРасписанияОкончание = Формат(ДатаКалендаряОкончание, "ДФ=дд");
		ДеньНеделиРасписанияОкончание = ПредставлениеДняНедели(ДатаКалендаряОкончание);
		МесяцРасписанияОкончание = Формат(ДатаКалендаряОкончание, "ДФ=МММ");
		
		Если Год(ДатаКалендаряНачало) = Год(ДатаКалендаряОкончание) Тогда
			ГодРасписания = Формат(Год(ДатаКалендаряНачало), "ЧГ=0");
			Представление = СтрШаблон(НСтр("ru = '%1 %2 %3 - %4 %5 %6, %7'"), ДеньНеделиРасписанияНачало, 
				ДеньРасписанияНачало, МесяцРасписанияНачало, ДеньНеделиРасписанияОкончание, ДеньРасписанияОкончание, 
				МесяцРасписанияОкончание, ГодРасписания);
		Иначе
			ГодРасписанияНачало = Формат(Год(ДатаКалендаряНачало), "ЧГ=0");
			ГодРасписанияОкончание = Формат(Год(ДатаКалендаряОкончание), "ЧГ=0");
			Представление = СтрШаблон(НСтр("ru = '%1 %2 %3 %4 - %5 %6 %7 %8'"), ДеньНеделиРасписанияНачало, 
				ДеньРасписанияНачало, МесяцРасписанияНачало, ГодРасписанияНачало, ДеньНеделиРасписанияОкончание, 
				ДеньРасписанияОкончание, МесяцРасписанияОкончание, ГодРасписанияОкончание);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаСервере
Процедура ОбновитьНастройкиВХранилище()
	
	Если ЭтоАдресВременногоХранилища(АдресНастроек) Тогда
		АдресНастроек = ПоместитьВоВременноеХранилище(КомпоновщикНастроек.Настройки, АдресНастроек);
	Иначе
		АдресНастроек = ПоместитьВоВременноеХранилище(КомпоновщикНастроек.Настройки, УникальныйИдентификатор);
	КонецЕсли; 
		
КонецПроцедуры

#КонецОбласти 

#Область ДеревоЗапасов

&НаСервере
Процедура ОбновитьНаСервере(АдресРезультата)
	
	СтруктураРезультат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если ТипЗнч(СтруктураРезультат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьКурсыВалют();
	Запасы.ПолучитьЭлементы().Очистить();
	ОбновитьКолонки(ПериодПланирования.ДатаНачала, ПериодПланирования.ДатаОкончания);
	ЗаполненностьКолонок = Новый Структура;
	ЗаполненностьКолонок.Вставить("Артикул", Ложь);
	Если Группировать <> ИмяГруппировкиНоменклатура() Тогда
		ЗаполненностьКолонок.Вставить("МинимальныйЗапас", Ложь);
		ЗаполненностьКолонок.Вставить("МаксимальныйЗапас", Ложь);
	КонецЕсли; 
	ЗаполнитьДеревоНаФормеРекурсивно(СтруктураРезультат.Дерево.Строки, Запасы.ПолучитьЭлементы(), ЗаполненностьКолонок);
	Для каждого КлючИЗначение Из ЗаполненностьКолонок Цикл
		ИмяЭлемента = СтрШаблон("Запасы%1", КлючИЗначение.Ключ);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "Видимость", КлючИЗначение.Значение);
	КонецЦикла;  
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗапасы;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДеревоНаФормеРекурсивно(Строки, ЭлементыДерева, ЗаполненностьКолонок)
	
	Для каждого Строка Из Строки Цикл
		Группировка = Строка.ИмяГруппировки;
		НоваяСтрока = ЭлементыДерева.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Если ТипЗнч(Строка.Сообщения) = Тип("ФиксированныйМассив") И Строка.Сообщения.Количество() > 0 Тогда
			НоваяСтрока.ИконкаПредупреждение = 0;
		Иначе
			НоваяСтрока.ИконкаПредупреждение = 1;
		КонецЕсли; 
		Если НЕ ПустаяСтрока(Строка.Представление) Тогда
			НоваяСтрока.Номенклатура = Строка.Представление;
		ИначеЕсли НЕ ПустаяСтрока(Группировка) Тогда
			НоваяСтрока.Номенклатура = Строка[Группировка];
		Иначе
			НоваяСтрока.Номенклатура = "";
		КонецЕсли;
		Для каждого КлючИЗначение Из ЗаполненностьКолонок Цикл
			Если КлючИЗначение.Значение Тогда
				Продолжить;
			КонецЕсли; 
			Если ЗначениеЗаполнено(Строка[КлючИЗначение.Ключ]) Тогда
				ЗаполненностьКолонок[КлючИЗначение.Ключ] = Истина;
			КонецЕсли; 
		КонецЦикла; 
		Если Строка.Строки.Количество()>0 Тогда
			ЗаполнитьДеревоНаФормеРекурсивно(Строка.Строки, НоваяСтрока.ПолучитьЭлементы(), ЗаполненностьКолонок);
		КонецЕсли;
	КонецЦикла; 		
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеКоличестваЗаказа(ТекСтр, Разница)
	
	Если ЗначениеЗаполнено(ТекСтр.Цена) Тогда
		ТекСтр.Сумма = ТекСтр.Заказать * ТекСтр.Цена;
		СтараяСуммаУчета = ТекСтр.СуммаУчета;
		ПересчитатьСуммуРегл(ТекСтр, ПараметрыФормы, ИтогоСумма);
		РазницаСумма = ТекСтр.СуммаУчета - СтараяСуммаУчета;
	Иначе
		РазницаСумма = 0;
	КонецЕсли;
	
	ПриСменеКоличестваРаспределить(ТекСтр);
	
	НеПересчитыватьГруппировки = ТекСтр.ИмяГруппировки;
	Если ТекСтр.ИмяГруппировки = ИмяГруппировкиЗаказ() И Группировать = ГруппировкаНоменклатураДень() Тогда
		НеПересчитыватьГруппировки = НеПересчитыватьГруппировки + ", " + ИмяГруппировкиПериод();
	ИначеЕсли ТекСтр.ИмяГруппировки = ИмяГруппировкиЗаказРекомендации() Тогда
		НеПересчитыватьГруппировки = НеПересчитыватьГруппировки + ", " + ИмяГруппировкиРекомендовано();
	КонецЕсли; 
	ПриСменеКоличестваОбработатьРодителейРекурсивно(ТекСтр, Разница, РазницаСумма, НеПересчитыватьГруппировки);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриСменеКоличестваОбработатьРодителейРекурсивно(ТекСтр, Разница, РазницаСумма, НеПересчитыватьГруппировки = "")
	
	СтрокаРодитель = ТекСтр.ПолучитьРодителя();
	Если СтрокаРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаРодитель.Заказать = СтрокаРодитель.Заказать + Разница;
	ЗаполнитьВыбранПоказыватьПоСтроке(СтрокаРодитель);
	Если ЗначениеЗаполнено(СтрокаРодитель.Цена) Тогда
		СтрокаРодитель.Сумма = СтрокаРодитель.Заказать * СтрокаРодитель.Цена;
		СтараяСуммаУчета = СтрокаРодитель.СуммаУчета;
		ПересчитатьСуммуРегл(СтрокаРодитель, ПараметрыФормы);
		РазницаСумма = СтрокаРодитель.СуммаУчета - СтараяСуммаУчета;
	Иначе
		СтрокаРодитель.Сумма = СтрокаРодитель.Сумма + РазницаСумма;
		СтрокаРодитель.СуммаУчета = СтрокаРодитель.СуммаУчета + РазницаСумма;
	КонецЕсли;
	Если СтрокаРодитель.ИмяГруппировки = ИмяГруппировкиНоменклатура() И Разница <> 0 Тогда
		// Перераспределяем все вложенные, группировка по номенклатуре дополнительно содержит источники
		ПриСменеКоличестваРаспределить(СтрокаРодитель, НеПересчитыватьГруппировки);
	КонецЕсли; 
	ПриСменеКоличестваОбработатьРодителейРекурсивно(СтрокаРодитель, Разница, РазницаСумма, НеПересчитыватьГруппировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриСменеКоличестваРаспределить(ТекСтр, НеПересчитыватьГруппировки = "")
	
	Если ТекСтр.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ПоследняяСтрока = ТекСтр.ПолучитьЭлементы().Получить(ТекСтр.ПолучитьЭлементы().Количество() - 1);
	ПерваяСтрока = ТекСтр.ПолучитьЭлементы().Получить(0);
	Если ПерваяСтрока.ИмяГруппировки = ИмяГруппировкиИсточник() И СтрНайти(НеПересчитыватьГруппировки, ИмяГруппировкиИсточник()) = 0 Тогда
		РаспределитьПоИсточникам(ТекСтр, НеПересчитыватьГруппировки);
	КонецЕсли;
	ИмяГруппировкиЗаказ = ?(Группировать = ГруппировкаНоменклатура(), ИмяГруппировкиЗаказРекомендации(), ИмяГруппировкиЗаказ());
	Если ПоследняяСтрока.ИмяГруппировки = ИмяГруппировкиЗаказ И СтрНайти(НеПересчитыватьГруппировки, ИмяГруппировкиЗаказ) = 0  Тогда
		РаспределитьПоЗаказам(ТекСтр, НеПересчитыватьГруппировки);
	ИначеЕсли ПоследняяСтрока.ИмяГруппировки = ИмяГруппировкиПериод() И СтрНайти(НеПересчитыватьГруппировки, ИмяГруппировкиПериод()) = 0 Тогда 
		РаспределитьПоПериодам(ТекСтр, НеПересчитыватьГруппировки);
	Иначе
		РаспределитьПоДефициту(ТекСтр, НеПересчитыватьГруппировки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоИсточникам(ТекСтр, НеПересчитыватьГруппировки)
	
	ТекСтр.Сумма = 0;
	Распределить = ТекСтр.Заказать;
	ВыбраннаяСтрока = Неопределено;
	Для каждого СтрокаИсточник Из ТекСтр.ПолучитьЭлементы() Цикл
		Если СтрокаИсточник.ИмяГруппировки <> ИмяГруппировкиИсточник() Тогда
			Продолжить;
		КонецЕсли;
	    Если СтрокаИсточник.Выбран Тогда
			ВыбраннаяСтрока = СтрокаИсточник;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	Для каждого СтрокаИсточник Из ТекСтр.ПолучитьЭлементы() Цикл
		Если СтрокаИсточник.ИмяГруппировки <> ИмяГруппировкиИсточник() Тогда
			Продолжить;
		КонецЕсли;
		Изменено = (СтрокаИсточник.Заказать <> Распределить);
		Если ВыбраннаяСтрока = Неопределено ИЛИ ВыбраннаяСтрока = СтрокаИсточник Тогда
			СтрокаИсточник.Заказать = Распределить;
			Распределить = 0;
		Иначе
			СтрокаИсточник.Заказать = 0;
		КонецЕсли; 
		ЗаполнитьВыбранПоказыватьПоСтроке(СтрокаИсточник);
		СтрокаИсточник.Сумма = СтрокаИсточник.Заказать * СтрокаИсточник.Цена;
		ПересчитатьСуммуРегл(СтрокаИсточник, ПараметрыФормы, ИтогоСумма);
		ТекСтр.Сумма = ТекСтр.Сумма + СтрокаИсточник.СуммаУчета;
		Если СтрокаИсточник.ПолучитьЭлементы().Количество() > 0 И Изменено Тогда
			ПриСменеКоличестваРаспределить(СтрокаИсточник, НеПересчитыватьГруппировки);
		КонецЕсли; 
	КонецЦикла;
	Разница = ТекСтр.Сумма - ТекСтр.СуммаУчета;
	ТекСтр.СуммаУчета = ТекСтр.Сумма;
	Если Группировать = ГруппировкаДеньНоменклатура()
		ИЛИ Группировать = ГруппировкаЗаказНоменклатура() Тогда
		// Требуется обновить суммы на верхнем уровне
		ПересчитатьИтогиРекурсивно(ТекСтр, "Сумма", Разница);
		ПересчитатьИтогиРекурсивно(ТекСтр, "СуммаУчета", Разница);
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоЗаказам(ТекСтр, НеПересчитыватьГруппировки)
	
	Распределить = ТекСтр.Заказать;
	СтрокаСПустымЗаказом = Неопределено;
	Для каждого ВложеннаяСтрока Из ТекСтр.ПолучитьЭлементы() Цикл
		Если ВложеннаяСтрока.ИмяГруппировки = ИмяГруппировкиИсточник() Тогда
			Продолжить;
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(ВложеннаяСтрока.Заказ) Тогда
			СтрокаСПустымЗаказом = ВложеннаяСтрока;
		КонецЕсли; 
		Заказать = Мин(ВложеннаяСтрока.Дефицит, Распределить);
		Распределить = Распределить - Заказать;
		Изменено = (ВложеннаяСтрока.Заказать <> Заказать);
		ВложеннаяСтрока.Заказать = Заказать;
		ЗаполнитьВыбранПоказыватьПоСтроке(ВложеннаяСтрока);
		Если ВложеннаяСтрока.ПолучитьЭлементы().Количество() > 0 И Изменено Тогда
			ПриСменеКоличестваРаспределить(ВложеннаяСтрока, НеПересчитыватьГруппировки);
		КонецЕсли; 
	КонецЦикла;
	
	Если Распределить > 0 Тогда
		Если СтрокаСПустымЗаказом = Неопределено Тогда
			СтрокаСПустымЗаказом = ТекСтр.ПолучитьЭлементы().Добавить();
			СтрокаСПустымЗаказом.ИмяГруппировки = ?(Группировать=ГруппировкаНоменклатура(), ИмяГруппировкиЗаказРекомендации(), ИмяГруппировкиЗаказ());
			СтрокаСПустымЗаказом.Номенклатура = НСтр("ru = '<Не указан>'");
			СтрокаСПустымЗаказом.ИконкаПредупреждение = 1;
		КонецЕсли; 
		СтрокаСПустымЗаказом.Заказать = СтрокаСПустымЗаказом.Заказать + Распределить;
		ЗаполнитьВыбранПоказыватьПоСтроке(СтрокаСПустымЗаказом); 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоПериодам(ТекСтр, НеПересчитыватьГруппировки)
	
	ПоследняяСтрока = ТекСтр.ПолучитьЭлементы().Получить(ТекСтр.ПолучитьЭлементы().Количество() - 1);
	Распределить = ТекСтр.Заказать;
	Для каждого ВложеннаяСтрока Из ТекСтр.ПолучитьЭлементы() Цикл
		Если ВложеннаяСтрока.ИмяГруппировки <> ИмяГруппировкиПериод() Тогда
			Продолжить;
		КонецЕсли; 
		Заказать = Мин(Распределить, ВложеннаяСтрока.Дефицит); 
		Изменено = (ВложеннаяСтрока.Заказать <> Заказать);
		ВложеннаяСтрока.Заказать = Заказать;
		ЗаполнитьВыбранПоказыватьПоСтроке(ВложеннаяСтрока);
		Распределить = Распределить - Заказать;
		Если ВложеннаяСтрока.ПолучитьЭлементы().Количество() > 0 И Изменено Тогда
			ПриСменеКоличестваРаспределить(ВложеннаяСтрока, НеПересчитыватьГруппировки);
		КонецЕсли; 
	КонецЦикла;
	Если Распределить > 0 Тогда
		Если НЕ ПоследняяСтрока.ЭтоПополнениеЗапасов Тогда
			ПоследняяСтрока = ТекСтр.ПолучитьЭлементы().Добавить();
			ПоследняяСтрока.ИмяГруппировки = ИмяГруппировкиПериод();
			ПоследняяСтрока.Номенклатура = НСтр("ru = 'Пополнение запасов'");
			ПоследняяСтрока.ИконкаПредупреждение = 1;
			ПоследняяСтрока.ЭтоПополнениеЗапасов = Истина;
		КонецЕсли; 
		ПоследняяСтрока.Заказать = ПоследняяСтрока.Заказать + Распределить;
		ЗаполнитьВыбранПоказыватьПоСтроке(ПоследняяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоДефициту(ТекСтр, НеПересчитыватьГруппировки)
	
	ПропускаемыеГруппировки = Новый Массив;
	ПропускаемыеГруппировки.Добавить(ИмяГруппировкиЗаказ());
	ПропускаемыеГруппировки.Добавить(ИмяГруппировкиЗаказРекомендации());
	ПропускаемыеГруппировки.Добавить(ИмяГруппировкиИсточник());
	ПропускаемыеГруппировки.Добавить(ИмяГруппировкиПериод());
	ПропускаемыеГруппировки.Добавить(ИмяГруппировкиНачальныйОстаток());
	ПропускаемыеГруппировки.Добавить(ИмяГруппировкиПотребность());
	ПропускаемыеГруппировки.Добавить(ИмяГруппировкиПоступление());
	ПропускаемыеГруппировки.Добавить(ИмяГруппировкиКонечныйОстаток());
	ПропускаемыеГруппировки.Добавить(ИмяГруппировкиМинимальныйЗапас());
	ПропускаемыеГруппировки.Добавить(ИмяГруппировкиМаксимальныйЗапас());
	
	Распределить = ТекСтр.Заказать;
	Для каждого ВложеннаяСтрока Из ТекСтр.ПолучитьЭлементы() Цикл
		Если ВложеннаяСтрока.Дефицит <= 0 Тогда
			Продолжить;
		КонецЕсли;
		Если СтрНайти(НеПересчитыватьГруппировки, ВложеннаяСтрока.ИмяГруппировки) > 0 Тогда
			Продолжить;
		КонецЕсли;
		Если ПропускаемыеГруппировки.Найти(ВложеннаяСтрока.ИмяГруппировки) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ВложеннаяСтрока.ИмяГруппировки = ИмяГруппировкиРекомендовано() Тогда
			// Заказ может превышать дефицит
			Заказать = Распределить;
		Иначе
			Заказать = Мин(Распределить, ВложеннаяСтрока.Дефицит);
		КонецЕсли; 
		Изменено = (ВложеннаяСтрока.Заказать <> Заказать);
		ВложеннаяСтрока.Заказать = Заказать;
		ЗаполнитьВыбранПоказыватьПоСтроке(ВложеннаяСтрока);
		Распределить = Распределить - Заказать;
		Если ВложеннаяСтрока.ПолучитьЭлементы().Количество() > 0 И Изменено Тогда
			ПриСменеКоличестваРаспределить(ВложеннаяСтрока, НеПересчитыватьГруппировки);
		КонецЕсли; 
	КонецЦикла;
	
	Если Распределить > 0 И ВложеннаяСтрока.ИмяГруппировки = ИмяГруппировкиРекомендовано() 
		И ВложеннаяСтрока.Дефицит = 0 Тогда
		// Для запасов без дефицита
		Изменено = (ВложеннаяСтрока.Заказать <> Распределить);
		ВложеннаяСтрока.Заказать = Распределить;
		Если ПоЗаказам И ВложеннаяСтрока.ПолучитьЭлементы().Количество() = 0 Тогда
			РаспределитьПоЗаказам(ВложеннаяСтрока, НеПересчитыватьГруппировки);
			ЗаполнитьВыбранПоказыватьПоСтроке(ВложеннаяСтрока);
		ИначеЕсли ВложеннаяСтрока.ПолучитьЭлементы().Количество() > 0 И Изменено Тогда
			ЗаполнитьВыбранПоказыватьПоСтроке(ВложеннаяСтрока);
			ПриСменеКоличестваРаспределить(ВложеннаяСтрока, НеПересчитыватьГруппировки);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьИтогиРекурсивно(Строка, ИмяКолонки, Разница)
	
	Если Разница = 0 Тогда
		Возврат;
	КонецЕсли; 
	СтрокаРодитель = Строка.ПолучитьРодителя();
	Если СтрокаРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если (СтрокаРодитель.ИмяГруппировки = ИмяГруппировкиПериод() ИЛИ СтрокаРодитель.ИмяГруппировки = ИмяГруппировкиЗаказ())
		И (ИмяКолонки = "НачальныйОстаток" ИЛИ ИмяКолонки = "Потребность" ИЛИ ИмяКолонки = "Поступление" ИЛИ ИмяКолонки = "КонечныйОстаток")
		И СтрокаРодитель.ПолучитьРодителя() = Неопределено Тогда
		// По заказу и периоду на верхнем уровне итоги не рассчитываются
		Возврат;
	КонецЕсли; 
	СтрокаРодитель[ИмяКолонки] = СтрокаРодитель[ИмяКолонки] + Разница;
	Если ИмяКолонки = "Заказать" Тогда
		СтрокаРодитель.Выбран = СтрокаРодитель[ИмяКолонки] > 0;
	ИначеЕсли ИмяКолонки = "СуммаУчета" И СтрокаРодитель.ИмяГруппировки = ИмяГруппировкиНоменклатура() Тогда
		СтрокаРодитель.Сумма = СтрокаРодитель.СуммаУчета;
	КонецЕсли;
	ПересчитатьИтогиРекурсивно(СтрокаРодитель, ИмяКолонки, Разница);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьВыбранПоказыватьПоСтроке(Строка)
		
	Строка.Выбран = (Строка.Заказать>0);
	Если Строка.Выбран Тогда
		Строка.Показывать = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДефицитуРекурсивно(Строки, Значение)
	
	Для каждого Строка Из Строки Цикл
		Если Строка.ИмяГруппировки = ИмяГруппировкиНачальныйОстаток() 
			ИЛИ Строка.ИмяГруппировки = ИмяГруппировкиПоступление() 
			ИЛИ Строка.ИмяГруппировки = ИмяГруппировкиПотребность() 
			ИЛИ Строка.ИмяГруппировки = ИмяГруппировкиМинимальныйЗапас() 
			ИЛИ Строка.ИмяГруппировки = ИмяГруппировкиМаксимальныйЗапас() 
			ИЛИ Строка.ИмяГруппировки = ИмяГруппировкиКонечныйОстаток()
			ИЛИ Строка.ИмяГруппировки = ИмяГруппировкиКонечныйОстаток()
			ИЛИ Строка.ИмяГруппировки = ИмяГруппировкиИсточник() Тогда
			Продолжить;
		КонецЕсли; 
		Строка.Заказать = ?(Значение, Строка.Дефицит, 0);
		Если НЕ Строка.Весовой И Строка.Заказать <> Цел(Строка.Заказать) И Рассчитывать = РассчитыватьПоПродажам() Тогда
			Строка.Заказать = Цел(Строка.Заказать) + 1;
		КонецЕсли;
		Строка.Выбран = (Строка.Заказать > 0);
		Строка.Сумма = Строка.Заказать * Строка.Цена;
		ПересчитатьСуммуРегл(Строка, ПараметрыФормы);
		Если Строка.ИмяГруппировки = ИмяГруппировкиНоменклатура() Тогда
			РаспределитьПоИсточникам(Строка, "");
		КонецЕсли; 
		Если Строка.ПолучитьЭлементы().Количество() > 0 Тогда
			ЗаполнитьПоДефицитуРекурсивно(Строка.ПолучитьЭлементы(), Значение);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ОбновитьСуммыРекурсивно(Строки, ИмяКолонки)
	
	Если Строки.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	ГруппировкаНоменклатура = (Строки[0].ИмяГруппировки=ИмяГруппировкиНоменклатура());
	Итог = 0;
	Для каждого Строка Из Строки Цикл
		Если НЕ ГруппировкаНоменклатура Тогда
			Строка[ИмяКолонки] = ОбновитьСуммыРекурсивно(Строка.ПолучитьЭлементы(), ИмяКолонки);
		КонецЕсли; 
		Итог = Итог + Строка[ИмяКолонки];
	КонецЦикла;
	Возврат Итог;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьСумму(ТекСтр)
	
	ТекСтр.Сумма = ТекСтр.Заказать * ТекСтр.Цена;
	ПересчитатьСуммуРегл(ТекСтр, ПараметрыФормы, ИтогоСумма);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСуммуРегл(ТекСтр, ПараметрыФормы, ИтогоСумма = Неопределено)
	
	КурсЦены = ПараметрыФормы.КурсыВалют.Получить(ТекСтр.Валюта);
	Если КурсЦены = Неопределено ИЛИ КурсЦены = 0 Тогда
		КурсЦены = 1;
	КонецЕсли; 
	КурсУчета = ПараметрыФормы.КурсыВалют.Получить(ПараметрыФормы.ВалютаУчета);
	Если КурсУчета = Неопределено ИЛИ КурсУчета = 0 Тогда
		КурсУчета = 1;
	КонецЕсли; 
	СуммаУчета = ТекСтр.Сумма * КурсЦены / КурсУчета;
	Разница = СуммаУчета - ТекСтр.СуммаУчета;
	Если ИтогоСумма <> Неопределено Тогда
		ИтогоСумма = ИтогоСумма + Разница;
	КонецЕсли; 
	ТекСтр.СуммаУчета = СуммаУчета;
	
КонецПроцедуры

&НаСервере
Процедура СортироватьНаСервере(Направление)
	
	ЗапасыДерево = РеквизитФормыВЗначение("Запасы", Тип("ДеревоЗначений"));
	
	Если Элементы.Запасы.ТекущийЭлемент = Элементы.ЗапасыДефицит Тогда
		СтрокаСортировки = "Дефицит " + Направление + ", Номенклатура " + Направление + ", Характеристика " + Направление;
	ИначеЕсли Элементы.Запасы.ТекущийЭлемент = Элементы.ЗапасыЗаказать Тогда
		СтрокаСортировки = "Заказать " + Направление + ", Номенклатура " + Направление + ", Характеристика " + Направление;
	ИначеЕсли Элементы.Запасы.ТекущийЭлемент = Элементы.ЗапасыСумма Тогда
		СтрокаСортировки = "СуммаУчета " + Направление + ", Номенклатура " + Направление + ", Характеристика " + Направление;
	ИначеЕсли Элементы.Найти("ЗапасыПотребность") <> Неопределено И Элементы.Запасы.ТекущийЭлемент = Элементы.ЗапасыПотребность Тогда
		СтрокаСортировки = "Потребность " + Направление + ", Номенклатура " + Направление + ", Характеристика " + Направление;
	ИначеЕсли Элементы.Найти("ЗапасыПоступление") <> Неопределено И Элементы.Запасы.ТекущийЭлемент = Элементы.ЗапасыПоступление Тогда
		СтрокаСортировки = "Поступление " + Направление + ", Номенклатура " + Направление + ", Характеристика " + Направление;
	Иначе
		СтрокаСортировки = "Номенклатура " + Направление + ", Характеристика " + Направление;
	КонецЕсли;
	
	Если Группировать = ГруппировкаНоменклатура() ИЛИ Группировать = ГруппировкаНоменклатураДень() Тогда
		ЗапасыДерево.Строки.Сортировать(СтрокаСортировки, Ложь);
	ИначеЕсли Группировать = ГруппировкаДеньНоменклатура() ИЛИ Группировать = ГруппировкаЗаказНоменклатура() Тогда
		Для каждого СтрокаВерхнегоУровня Из ЗапасыДерево.Строки Цикл
			СтрокаВерхнегоУровня.Строки.Сортировать(СтрокаСортировки, Ложь);
		КонецЦикла; 
	КонецЕсли; 
	
	ЗначениеВРеквизитФормы(ЗапасыДерево, "Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьЗаказываемыеРекурсивно(ЭлементыДерева)
	
	Для каждого Элемент Из ЭлементыДерева Цикл
		Если Элемент.ИмяГруппировки = ИмяГруппировкиНоменклатура() 
			И НЕ Элемент.Выбран
			И Элементы.Запасы.Развернут(Элемент.ПолучитьИдентификатор()) Тогда
			Элементы.Запасы.Свернуть(Элемент.ПолучитьИдентификатор());
		КонецЕсли;
		Если Элемент.ИмяГруппировки = ИмяГруппировкиНоменклатура() И ЗначениеЗаполнено(Элемент.СрокПополнения) Тогда
			МинимальнаяДатаЗаказа = ДобавитьДень(НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()), Элемент.СрокПополнения);
			ДатаПоставки = Макс(МинимальнаяДатаЗаказа, ДатаПоставки);
		КонецЕсли;
		Если Элемент.ИмяГруппировки = ИмяГруппировкиИсточник() Тогда
			СтрокаРодитель = Элемент.ПолучитьРодителя();
			Элемент.Показывать = (СтрокаРодитель.Заказать > 0);
		Иначе
			Элемент.Показывать = (Элемент.Заказать > 0);
		КонецЕсли; 
		ОтметитьЗаказываемыеРекурсивно(Элемент.ПолучитьЭлементы())
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НайтиСтрокуДереваРекурсивно(ЭлементыДерева, Колонка, Значение)
	
	Для каждого Элемент Из ЭлементыДерева Цикл
		Если Элемент[Колонка] = Значение Тогда
			Возврат Элемент;
		КонецЕсли; 
		ТекСтр = НайтиСтрокуДереваРекурсивно(Элемент.ПолучитьЭлементы(), Колонка, Значение);
		Если ТекСтр <> Неопределено Тогда
			Возврат ТекСтр;
		КонецЕсли; 
	КонецЦикла; 
	
КонецФункции

#КонецОбласти 

#Область ФоновоеЗадание

&НаКлиенте
Процедура ЗапуститьФоновоеЗадание()

	РезультатФоновогоЗадания = ЗапуститьФоновоеЗаданиеНаСервере();
	
	Если РезультатФоновогоЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если РезультатФоновогоЗадания.Статус = "Выполняется" Тогда
		Обработчик = Новый ОписаниеОповещения("ФоновоеЗаданиеВыполнено", ЭтотОбъект, Истина);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатФоновогоЗадания, Обработчик, ПараметрыОжидания);
		ИзменитьДоступностьЭлементовПриФормировании(Ложь);
	ИначеЕсли РезультатФоновогоЗадания.Статус <> "Ошибка" Тогда 
		ОперацииПослеФормирования();
		ИзменитьДоступностьЭлементовПриФормировании(Истина);
	КонецЕсли;
	
	СохранитьНастройкиОтборов();
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьФоновоеЗаданиеНаСервере()
	
	Если МонопольныйРежим() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ФоновоеЗаданиеЗапущено Тогда
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор);
	КонецЕсли;
	
	// Параметры обернем в структуру для их передачи через механизм ДлительныеОперации.
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Период", ПериодПланирования);
	ПараметрыПроцедуры.Вставить("Рассчитывать", Рассчитывать);
	ПараметрыПроцедуры.Вставить("МетодПрогноза", МетодПрогноза);
	ПараметрыПроцедуры.Вставить("ПериодПродаж", ПериодПродаж);
	ПараметрыПроцедуры.Вставить("Группировать", Группировать);
	ПараметрыПроцедуры.Вставить("Склад", Склад);
	ПараметрыПроцедуры.Вставить("ПоЗаказам", ПоЗаказам);
	ПараметрыПроцедуры.Вставить("СпособПополнения", ОтборСпособПополнения);
	ПараметрыПроцедуры.Вставить("ТолькоДефицит", ТолькоДефицит);
	ПараметрыПроцедуры.Вставить("Настройки", КомпоновщикНастроек.Настройки);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.РасчетПотребностей.ПолучитьДанные",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
		
	ФоновоеЗаданиеАдресРезультата = РезультатФоновогоЗадания.АдресРезультата;
	ФоновоеЗаданиеИдентификатор   = РезультатФоновогоЗадания.ИдентификаторЗадания;
	
	// Если фоновое задание завершилось за время вызова, то данные уже получены
	Если РезультатФоновогоЗадания.Статус = "Ошибка" Тогда
		ПоказатьОшибкиВыполнения(РезультатФоновогоЗадания.КраткоеПредставлениеОшибки);
	ИначеЕсли РезультатФоновогоЗадания.Статус <> "Выполняется" Тогда
		ОбновитьНаСервере(РезультатФоновогоЗадания.АдресРезультата);
	Иначе
		// иначе начнем ожидания завершения фонового задания
		ФоновоеЗаданиеЗапущено = Истина;
	КонецЕсли;
	
	Возврат РезультатФоновогоЗадания;
	
КонецФункции

&НаКлиенте
Процедура ФоновоеЗаданиеВыполнено(Результат, ЗагрузитьРезультат) Экспорт
	
	ФоновоеЗаданиеЗапущено = Ложь;
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	Если Результат.Статус = "Выполнено" Тогда 
		ОбновитьНаСервере(Результат.АдресРезультата);
		ОперацииПослеФормирования();
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьОшибкиВыполнения(Результат.КраткоеПредставлениеОшибки);
	КонецЕсли;
	ИзменитьДоступностьЭлементовПриФормировании(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьЭлементовПриФормировании(Доступны)
	
	Элементы.Страницы.ТекущаяСтраница = ?(Доступны, Элементы.СтраницаЗапасы, Элементы.СтраницаОжидание);
	Элементы.Режим.Доступность = Доступны;
	Элементы.ГруппаКомандыЗаполнения.Доступность = Доступны;
	Элементы.КнопкиСортировать.Доступность = Доступны;
	Элементы.КнопкиСвернутьРазвернуть.Доступность = Доступны;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПослеФормирования()
	
	Для каждого Строка Из Запасы.ПолучитьЭлементы() Цикл
		Элементы.Запасы.Свернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор)
	
	Если ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор) Тогда
		Возврат;
	КонецЕсли; 
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиВыполнения(ИнформацияОбОшибке)
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеПредставлениеОшибки = НСтр("ru = 'Ошибка при выполнении:'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОписаниеОшибки = ПодробноеПредставлениеОшибки;
			ПодробноеПредставлениеОшибки = "";
		КонецЕсли;
	Иначе
		ОписаниеОшибки = ИнформацияОбОшибке;
		ПодробноеПредставлениеОшибки = "";
	КонецЕсли;
	ТекстСообщения = ОписаниеОшибки + ?(ПустаяСтрока(ПодробноеПредставлениеОшибки), "", ": " + ПодробноеПредставлениеОшибки);
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти 

#Область Фильтры

&НаСервере
Функция СписокДобавленныхФильтров()
	
	СписокПолей = Новый СписокЗначений;
	
	Для каждого СтрФильтр Из Фильтры Цикл
		Если СтрФильтр.ЭтоПараметр Тогда
			Продолжить;
		КонецЕсли; 
		СписокПолей.Добавить(СтрФильтр.Имя);
	КонецЦикла;
	
	Возврат СписокПолей;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьФильтрЗавершение(Путь, ДополнительныеДанные) Экспорт
	
	Если ЗначениеЗаполнено(Путь) Тогда
		ДобавитьФильтрСервер(Путь);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФильтрСервер(Путь)
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	ПолеКД = Новый ПолеКомпоновкиДанных(Путь);
	ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеКД);
	Если ДоступноеПоле=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ЭлементСКД = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементСКД.ЛевоеЗначение = ПолеКД;
	Если ОписаниеТиповСостоитИзПростогоТипа(ДоступноеПоле.Тип) Тогда
		ЭлементСКД.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		ЭлементСКД.ПравоеЗначение = ДоступноеПоле.Тип.ПривестиЗначение(Неопределено);
	Иначе
		ЭлементСКД.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
		ЭлементСКД.ПравоеЗначение = Новый СписокЗначений;
	КонецЕсли;
	ЭлементСКД.Использование = Ложь;
	ПолеСхемы = ОтчетыУНФ.ПолеСхемы(СхемаКомпоновкиДанных, ПолеКД);
	ДобавитьОписаниеФильтра(ЭлементСКД, ПолеСхемы, ДоступноеПоле, Ложь, Ложь, Истина);
	ОбновитьПоляОтборов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписанияПараметров()
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	Настройки = КомпоновщикНастроек.Настройки;
	Для каждого Параметр Из Настройки.ПараметрыДанных.Элементы Цикл
		Если НЕ ЗначениеЗаполнено(Параметр.ИдентификаторПользовательскойНастройки) 
			ИЛИ Параметр.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Продолжить;
		КонецЕсли;
		ИмяПараметра = Строка(Параметр.Параметр);
		Параметр.Использование = Истина;
		Если НРег(ИмяПараметра) = НРег("Период") 
			ИЛИ НРег(ИмяПараметра) = НРег("ДатаНачала") 
			ИЛИ НРег(ИмяПараметра) = НРег("ДатаОкончания") 
			ИЛИ НРег(ИмяПараметра) = НРег("ДатаОстатки") 
			ИЛИ НРег(ИмяПараметра) = НРег("СпособПополнения") 
			ИЛИ НРег(ИмяПараметра) = НРег("ВидыЦенКонтрагентов") Тогда
			Продолжить;
		КонецЕсли;
		ПолеСхемы = СхемаКомпоновкиДанных.Параметры.Найти(Параметр.Параметр);
		ДоступныйПараметр = Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(Параметр.Параметр);
		ДобавитьОписаниеФильтра(Параметр, ПолеСхемы, ДоступныйПараметр, Истина);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписанияФильтров()
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	Настройки = КомпоновщикНастроек.Настройки;
	Для каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ТипЗнч(ЭлементОтбора)=Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли; 
		Если НЕ ТипЗнч(ЭлементОтбора.ЛевоеЗначение)=Тип("ПолеКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		ПолеСхемы = ОтчетыУНФ.ПолеСхемы(СхемаКомпоновкиДанных, ЭлементОтбора.ЛевоеЗначение);
		ДоступноеПоле = Настройки.ДоступныеПоляОтбора.НайтиПоле(ЭлементОтбора.ЛевоеЗначение);
		ДобавитьОписаниеФильтра(ЭлементОтбора, ПолеСхемы, ДоступноеПоле, Ложь, Ложь);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОписаниеФильтра(ЭлементСКД, ПолеСхемы, ДоступноеПоле, ЭтоПараметр, УказыватьПутьВЗаголовке = Истина, Пользовательский = Ложь)
	
	ИмяПоля = ?(ЭтоПараметр, Строка(ЭлементСКД.Параметр), Строка(ЭлементСКД.ЛевоеЗначение));
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ЭтоПараметр", ЭтоПараметр);
	СтруктураОтбора.Вставить("Имя", ИмяПоля);
	НайденныеФильтры = Фильтры.НайтиСтроки(СтруктураОтбора);
	Если НайденныеФильтры.Количество()>0 Тогда
		// Только обновление значения
		НайденныйФильтр = НайденныеФильтры[0];
		Если ЭтоПараметр Тогда
			Если ЭлементСКД.Использование Тогда
				НайденныйФильтр.Значение = ЭлементСКД.Значение;
			КонецЕсли; 
		Иначе
			Если НЕ ЭлементСКД.Использование И НайденныйФильтр.ВыборСписка Тогда
				НайденныйФильтр.Значение = Новый СписокЗначений;
			ИначеЕсли НЕ ЭлементСКД.Использование И НЕ НайденныйФильтр.ВыборСписка Тогда
				НайденныйФильтр.Значение = Неопределено;
			Иначе
				НайденныйФильтр.Значение = ЭлементСКД.ПравоеЗначение;
			КонецЕсли; 
		КонецЕсли;
		Если НЕ НайденныйФильтр.ВыборСписка Тогда
			НайденныйФильтр.ВыбранноеЗначение = НайденныйФильтр.Значение;
		КонецЕсли; 
		Если ОписаниеТиповСостоитИзТипа(НайденныйФильтр.Тип, Тип("Булево")) Тогда
			НайденныйФильтр.ВыбранноеЗначениеБулево = НайденныйФильтр.Значение;
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	Если ДоступноеПоле=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	НоваяСтрока = Фильтры.Добавить();
	НоваяСтрока.Имя = ИмяПоля;
	НоваяСтрока.ЭтоПараметр = ЭтоПараметр;
	НоваяСтрока.Пользовательский = Пользовательский;
	Если ЭтоПараметр Тогда
		Если ЭлементСКД.Использование Тогда
			НоваяСтрока.Значение = ЭлементСКД.Значение;
		КонецЕсли; 
		НоваяСтрока.Обязательный = ДоступноеПоле.ЗапрещатьНезаполненныеЗначения;
	Иначе
		НоваяСтрока.ВыборСписка = (ЭлементСКД.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
		Если НЕ ЭлементСКД.Использование И НоваяСтрока.ВыборСписка Тогда
			НоваяСтрока.Значение = Новый СписокЗначений;
		ИначеЕсли НЕ ЭлементСКД.Использование И НЕ НоваяСтрока.ВыборСписка Тогда
			НоваяСтрока.Значение = Неопределено;
		Иначе
			НоваяСтрока.Значение = ЭлементСКД.ПравоеЗначение;
		КонецЕсли; 
	КонецЕсли;
	Если НЕ НоваяСтрока.ВыборСписка Тогда
		НоваяСтрока.ВыбранноеЗначение = НоваяСтрока.Значение;
	КонецЕсли; 
	НоваяСтрока.Тип = ДоступноеПоле.ТипЗначения;
	Если ОписаниеТиповСостоитИзТипа(НоваяСтрока.Тип, Тип("Булево")) Тогда
		НоваяСтрока.ВыбранноеЗначениеБулево = НоваяСтрока.Значение;
	КонецЕсли; 
	НоваяСтрока.ИмяЭлемента = ИмяЭлементаОтбора(ИмяПоля);
	Если УказыватьПутьВЗаголовке Тогда
		ЗаголовокФильтра = ДоступноеПоле.Заголовок;
	Иначе
		ЗаголовокФильтра = Сред(ДоступноеПоле.Заголовок, СтрНайти(ДоступноеПоле.Заголовок, ".", НаправлениеПоиска.СКонца) + 1);
	КонецЕсли; 
	НоваяСтрока.Заголовок = ЗаголовокФильтра;
	Если ПолеСхемы <> Неопределено Тогда
		ЗначениеПараметра = ПолеСхемы.ПараметрыРедактирования.Элементы.Найти(Новый ПараметрКомпоновкиДанных("ПараметрыВыбора"));
		Если ЗначениеПараметра <> Неопределено И ЗначениеПараметра.Использование И ЗначениеПараметра.Значение.Количество() > 0 Тогда
			НоваяСтрока.ПараметрыВыбора = ЗначениеПараметра.Значение;
		КонецЕсли;  
		ЗначениеПараметра = ПолеСхемы.ПараметрыРедактирования.Элементы.Найти(Новый ПараметрКомпоновкиДанных("ВыборГруппИЭлементов"));
		Если ЗначениеПараметра <> Неопределено И ЗначениеПараметра.Использование Тогда
			НоваяСтрока.ВыборГруппИЭлементов = ГруппыИЭлементыПоИспользованию(ЗначениеПараметра.Значение);
		КонецЕсли; 
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НоваяСтрока.ВыборГруппИЭлементов) Тогда
		НоваяСтрока.ВыборГруппИЭлементов = ГруппыИЭлементы.Авто;
	КонецЕсли; 
	Если ДоступноеПоле.ДоступныеЗначения <> Неопределено И ДоступноеПоле.ДоступныеЗначения.Количество() > 0 Тогда
		НоваяСтрока.ДоступныеЗначения = ОбщегоНазначения.СкопироватьРекурсивно(ДоступноеПоле.ДоступныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьМеткиФильтров()
	
	ДанныеМеток.Очистить();
	Для каждого СтрокаТаблицы Из Фильтры Цикл
		Если НЕ СтрокаТаблицы.ВыборСписка Тогда
			Продолжить;
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Значение) ИЛИ ТипЗнч(СтрокаТаблицы.Значение) <> Тип("СписокЗначений") Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаТаблицы.ПоказатьСписокЗначенийОднимОтбором Тогда
			НоваяМетка = ДанныеМеток.Добавить();
			НоваяМетка.Метка = СтрокаТаблицы.Значение;
			НоваяМетка.ИмяПоляОтбора = СтрокаТаблицы.Имя;
			НоваяМетка.ИмяГруппыРодителя = ИмяГруппыРодителяОтбора(СтрокаТаблицы.Имя);
			НоваяМетка.ПредставлениеМетки = СтрШаблон(НСтр("ru='%1 элементов'"), СтрокаТаблицы.Значение.Количество());
		Иначе
			Для каждого Значение Из СтрокаТаблицы.Значение Цикл
				НоваяМетка = ДанныеМеток.Добавить();
				НоваяМетка.Метка = Значение.Значение;
				НоваяМетка.ИмяПоляОтбора = СтрокаТаблицы.Имя;
				НоваяМетка.ИмяГруппыРодителя = ИмяГруппыРодителяОтбора(СтрокаТаблицы.Имя);
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОписаниеМетки Из ДанныеМеток Цикл
		НавигационнаяСсылкаФС = РаботаСОтборами.ПолучитьНачалоИмениМетки("ДанныеМеток")
			+ ОписаниеМетки.ПолучитьИдентификатор();
		Если ТипЗнч(ОписаниеМетки.Метка) = Тип("СписокЗначений") И ЗначениеЗаполнено(ЗаголовокПодборкиСпискаНоменклатуры) Тогда
			ПредставлениеМетки = ЗаголовокПодборкиСпискаНоменклатуры;
		Иначе
			ПредставлениеМетки = ФорматированнаяСтрокаПредставленияМетки(Лев(Строка(ОписаниеМетки.Метка), 21),
				НавигационнаяСсылкаФС);
		КонецЕсли;
		ОписаниеМетки.ПредставлениеМетки = ПредставлениеМетки;
		ОписаниеМетки.ИмяГруппыРодителя = ИмяГруппыРодителяОтбора(ОписаниеМетки.ИмяПоляОтбора);
	КонецЦикла;
	
	РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппыРодителяОтбора(ИмяОтбора)
	
	Возврат "ГруппаОтбор" + ИмяЭлементаОтбора(ИмяОтбора);	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяЭлементаОтбора(ИмяОтбора)
	
	ЗаменяемыеСимволы = ".()[] ";
	ИмяЭлемента = ИмяОтбора;
	Для ии = 1 По СтрДлина(ЗаменяемыеСимволы) Цикл
		Символ = Сред(ЗаменяемыеСимволы, ии, 1);
		ИмяЭлемента = СтрЗаменить(ИмяЭлемента, Символ, "_");
	КонецЦикла; 
	Возврат ИмяЭлемента;	
	
КонецФункции 

&НаСервере
Функция ФорматированнаяСтрокаПредставленияМетки(НаименованиеМетки, НавигационнаяСсылкаФС)
	
	Цвет = ЦветаСтиля.ТекстВторостепеннойНадписи;
	Шрифт = ШрифтыСтиля.ШрифтПравойПанелиОтборов;
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НаименованиеМетки + " ", Шрифт, Цвет));
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.ОчиститьЗначение12х12, , , , НавигационнаяСсылкаФС));
	
	Возврат Новый ФорматированнаяСтрока(КомпонентыФС);	// АПК:1356 Используется локализованное имя метки + картинка
	
КонецФункции

&НаСервере
Функция СвойствоПоНаименованию(ИмяОбъекта, Наименование)
	
	Если ПустаяСтрока(Наименование) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	МассивНаборов = Новый Массив;
	Если ИмяОбъекта = "Номенклатура" Тогда
		МассивНаборов.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура);
	ИначеЕсли ИмяОбъекта = "Характеристика" Тогда
		МассивНаборов.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры);
	ИначеЕсли ИмяОбъекта = "ЗаказПокупателя" Тогда
		МассивНаборов.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказПокупателя);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяСвойства = Наименование;
	ИмяСвойства = ?(Лев(ИмяСвойства, 1)="[", Сред(ИмяСвойства, 2), ИмяСвойства);
	ИмяСвойства = ?(Прав(ИмяСвойства, 1)="]", Лев(ИмяСвойства, СтрДлина(ИмяСвойства) - 1), ИмяСвойства);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наборы", МассивНаборов);
	Запрос.УстановитьПараметр("Наименование", ИмяСвойства);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.НаборСвойств В ИЕРАРХИИ (&Наборы)
	|	И ДополнительныеРеквизитыИСведения.Наименование = &Наименование";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

&НаСервере
Процедура ОбновитьПоляОтборов()
	
	Для каждого СтрокаТаблицы Из Фильтры Цикл
		Индекс = Фильтры.Индекс(СтрокаТаблицы);
		ИмяГруппы = ИмяГруппыРодителяОтбора(СтрокаТаблицы.Имя);
		Элемент = Элементы.Найти(ИмяГруппы);
		Если Элемент <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ГруппаПолеОтбора = Элементы.Добавить(ИмяГруппы + "_Горизонтально", Тип("ГруппаФормы"), Элементы.ГруппаФильтрЭлементы);
		ГруппаПолеОтбора.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаПолеОтбора.ОтображатьЗаголовок = Ложь;
		ГруппаПолеОтбора.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаПолеОтбора.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаОтбора = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ГруппаФильтрЭлементы);
		ГруппаОтбора.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаОтбора.ОтображатьЗаголовок = Ложь;
		ГруппаОтбора.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаОтбора.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ЭлементОтбора = Элементы.Добавить(СтрокаТаблицы.ИмяЭлемента, Тип("ПолеФормы"), ГруппаПолеОтбора);
		Если ОписаниеТиповСостоитИзТипа(СтрокаТаблицы.Тип, Тип("Булево")) Тогда
			ЭлементОтбора.Вид = ВидПоляФормы.ПолеФлажка;
			ЭлементОтбора.ПутьКДанным = "Фильтры[" + Индекс + "].ВыбранноеЗначениеБулево";
			ЭлементОтбора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		Иначе
			ЭлементОтбора.Вид = ВидПоляФормы.ПолеВвода;
			ЭлементОтбора.ПутьКДанным = "Фильтры[" + Индекс + "].ВыбранноеЗначение";
			ЭлементОтбора.ОграничениеТипа = СтрокаТаблицы.Тип;
			ЭлементОтбора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ЭлементОтбора.ПодсказкаВвода = СтрокаТаблицы.Заголовок;
			ЭлементОтбора.КнопкаОткрытия = Ложь;
			ЭлементОтбора.КнопкаОчистки = НЕ СтрокаТаблицы.ВыборСписка И НЕ СтрокаТаблицы.Обязательный;
			ЭлементОтбора.АвтоОтметкаНезаполненного = СтрокаТаблицы.Обязательный;
			Если ТипЗнч(СтрокаТаблицы.ПараметрыВыбора) = Тип("ПараметрыВыбораКомпоновкиДанных") Тогда
				МассивПараметров = Новый Массив;
				Для каждого ПараметрВыбораКомпоновки Из СтрокаТаблицы.ПараметрыВыбора Цикл
					ПараметрВыбора = Новый ПараметрВыбора(ПараметрВыбораКомпоновки.Имя, ПараметрВыбораКомпоновки.Значение);
					МассивПараметров.Добавить(ПараметрВыбора);
				КонецЦикла; 
				ЭлементОтбора.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
			КонецЕсли;
			Если ЭлементОтбора.ОграничениеТипа.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда
				ЭлементыНаименования = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаТаблицы.Имя, ".");
				Если ЭлементыНаименования.Количество() = 2 Тогда
					ОтборПоСвойству = СвойствоПоНаименованию(ЭлементыНаименования[0], ЭлементыНаименования[1]);
					Если ОтборПоСвойству <> Неопределено Тогда
						МассивПараметров = ?(ТипЗнч(ЭлементОтбора.ПараметрыВыбора) = Тип("ФиксированныйМассив"), Новый Массив(ЭлементОтбора.ПараметрыВыбора), Новый Массив);
						МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", ОтборПоСвойству));
						ЭлементОтбора.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
			Если СтрокаТаблицы.ДоступныеЗначения.Количество() > 0 Тогда
				ЭлементОтбора.РежимВыбораИзСписка = Истина;
				Для каждого СтрокаСписка Из СтрокаТаблицы.ДоступныеЗначения Цикл
					ЭлементОтбора.СписокВыбора.Добавить(СтрокаСписка.Значение, СтрокаСписка.Представление);
				КонецЦикла; 
			КонецЕсли;
			Если ОтчетыУНФ.ОписаниеТиповСодержитИерархическийТип(СтрокаТаблицы.Тип) 
				И (СтрокаТаблицы.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы
				ИЛИ СтрокаТаблицы.ВыборГруппИЭлементов = ГруппыИЭлементы.Авто)Тогда
				ЭлементОтбора.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
				Кнопка = Элементы.Добавить(СтрокаТаблицы.ИмяЭлемента+"_Иерархия", Тип("ДекорацияФормы"), ГруппаПолеОтбора);
				Кнопка.Вид = ВидДекорацииФормы.Картинка;
				Кнопка.Гиперссылка = Истина;
				Кнопка.Ширина = 2;
				Кнопка.Высота = 1;
				Кнопка.РастягиватьПоГоризонтали = Ложь;
				Кнопка.РастягиватьПоВертикали = Ложь;
				Кнопка.Картинка = БиблиотекаКартинок.РежимВыбораЭлементов;
				Кнопка.Подсказка = НСтр("ru = 'Используется выбор элементов'");
				Кнопка.УстановитьДействие("Нажатие", "Подключаемый_ИерархияФильтраНажатие");
			Иначе
				ЭлементОтбора.ВыборГруппИЭлементов = СтрокаТаблицы.ВыборГруппИЭлементов;
			КонецЕсли; 
			Если СтрокаТаблицы.ВыборСписка Тогда
				МассивПараметров = ?(ТипЗнч(ЭлементОтбора.ПараметрыВыбора)=Тип("ФиксированныйМассив"), Новый Массив(ЭлементОтбора.ПараметрыВыбора), Новый Массив);
				МассивПараметров.Добавить(Новый ПараметрВыбора("МножественныйВыбор", Истина));
				ЭлементОтбора.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
				ЭлементОтбора.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ФильтрОбработкаВыбора");
			КонецЕсли; 
		КонецЕсли;
		ЭлементОтбора.Заголовок = СтрокаТаблицы.Заголовок;
		ЭлементОтбора.УстановитьДействие("ПриИзменении", "Подключаемый_ФильтрПриИзменении");
	КонецЦикла; 	
	
	Для каждого СтрокаТаблицы Из Фильтры Цикл
		ДополнительныеДействияПриИзмененииФильтра(ЭтотОбъект, СтрокаТаблицы);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция ГруппыИЭлементыПоИспользованию(Использование)
	
	Если Использование = ИспользованиеГруппИЭлементов.Группы Тогда
		Возврат ГруппыИЭлементы.Группы;
	ИначеЕсли Использование = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
		Возврат ГруппыИЭлементы.ГруппыИЭлементы;
	ИначеЕсли Использование = ИспользованиеГруппИЭлементов.Элементы Тогда
		Возврат ГруппыИЭлементы.Элементы;
	Иначе
		Возврат ГруппыИЭлементы.Авто;
	КонецЕсли; 
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЭлементыРекурсивно(Группа, МассивЭлементов)
	
	Для каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ЗаполнитьЭлементыРекурсивно(Элемент, МассивЭлементов);
		КонецЕсли;
		МассивЭлементов.Добавить(Элемент);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеФильтра(Фильтры, КритерийПоиска, Значение)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить(КритерийПоиска, Значение);
	СтрокиФильтры = Фильтры.НайтиСтроки(СтруктураОтбора);
	Если СтрокиФильтры.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	Возврат СтрокиФильтры[0];
	
КонецФункции 

&НаСервере
Процедура УстановитьМеткуИОтбор(ИмяФильтра, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	ОписаниеФильтра = ОписаниеФильтра(Фильтры, "Имя", ИмяФильтра);
	Если ОписаниеФильтра = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если ПредставлениеЗначения = "" Тогда
		ПредставлениеЗначения = Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Булево") Тогда
		РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ОписаниеФильтра.Имя, ИмяГруппыРодителяОтбора(ОписаниеФильтра.Имя), 
			ВыбранноеЗначение, ПредставлениеЗначения, , , , , , ИмяФильтра);
	КонецЕсли; 
	УстановитьФильтр(ОписаниеФильтра.Имя, ОписаниеФильтра.Значение, ОписаниеФильтра.Пользовательский);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД, Знач ИмяЭлемента)
	
	СтрокаМеток = ДанныеМеток[Число(МеткаИД)];
	ОписаниеФильтра = ОписаниеФильтра(Фильтры, "Имя", СтрокаМеток.ИмяПоляОтбора);
	Если ОписаниеФильтра = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если СтрокаМеток.Метка = ОписаниеФильтра.Значение
		Или ТипЗнч(СтрокаМеток.Метка) = Тип("СписокЗначений")
		И ТипЗнч(ОписаниеФильтра.Значение) = Тип("СписокЗначений")
		И ОбщегоНазначения.КоллекцииИдентичны(СтрокаМеток.Метка, ОписаниеФильтра.Значение) Тогда
		ОписаниеФильтра.Значение = Неопределено;
		УстановитьФильтр(СтрокаМеток.ИмяПоляОтбора, , ОписаниеФильтра.Пользовательский);
	ИначеЕсли ТипЗнч(ОписаниеФильтра.Значение) = Тип("СписокЗначений") Тогда 
		ЭлементСписка = ОписаниеФильтра.Значение.НайтиПоЗначению(СтрокаМеток.Метка);
		Если ЭлементСписка <> Неопределено Тогда
			ОписаниеФильтра.Значение.Удалить(ЭлементСписка);
		КонецЕсли;
		Если ОписаниеФильтра.Значение.Количество() > 0 Тогда
			УстановитьФильтр(СтрокаМеток.ИмяПоляОтбора, ОписаниеФильтра.Значение, ОписаниеФильтра.Пользовательский);
		Иначе
			ОписаниеФильтра.Значение = Неопределено;
			УстановитьФильтр(СтрокаМеток.ИмяПоляОтбора, , ОписаниеФильтра.Пользовательский);
		КонецЕсли; 
	КонецЕсли; 
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Неопределено, МеткаИД, , , Ложь); 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметр(ИмяФильтра, Знач Значение)
	
	ПараметрКомпоновки = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяФильтра));
	ПараметрКомпоновки.Значение = Значение;
	ПараметрКомпоновки.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФильтр(Поле, Знач Значение = Неопределено, Пользовательский = Ложь)
	
	НайденныеЭлементы = Новый Массив;
	ПолеКД = Новый ПолеКомпоновкиДанных(Поле);
	ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеКД);
	Если ДоступноеПоле = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Для каждого ЭлементОтбор Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если НЕ ТипЗнч(ЭлементОтбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли; 
		Если ТипЗнч(ЭлементОтбор.ПравоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЭлементОтбор.ЛевоеЗначение = ПолеКД Тогда
			Продолжить;
		КонецЕсли;
		НайденныеЭлементы.Добавить(ЭлементОтбор);
	КонецЦикла;
	
	Если Значение = Неопределено Тогда
		Для каждого ЭлементОтбор Из НайденныеЭлементы Цикл
			Если Пользовательский Тогда
				КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбор);
			Иначе
				ЭлементОтбор.Использование = Ложь;
				Если ТипЗнч(ЭлементОтбор.ПравоеЗначение) = Тип("СписокЗначений") Тогда
					ЭлементОтбор.ПравоеЗначение = Новый СписокЗначений;
				Иначе
					ЭлементОтбор.ПравоеЗначение = Неопределено;
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла;
	Иначе
		КоличествоЭлементов = НайденныеЭлементы.Количество();
		НовыйВидСравнения = ?(ТипЗнч(Значение) = Тип("СписокЗначений"), ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, 
			ВидСравненияКомпоновкиДанных.ВИерархии);
		Если КоличествоЭлементов=0 Тогда
			НайденныйЭлемент = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Иначе
			// Оставим только первый элемент
			Для ии = 1 По КоличествоЭлементов - 1 Цикл
				КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(НайденныеЭлементы[ии]);
			КонецЦикла;
			НайденныйЭлемент = НайденныеЭлементы[0];
		КонецЕсли;
		НайденныйЭлемент.ЛевоеЗначение = ПолеКД;
		НайденныйЭлемент.ВидСравнения = НовыйВидСравнения;
		НайденныйЭлемент.ПравоеЗначение = Значение;
		НайденныйЭлемент.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СостоянияПоВидуЗаказа(Знач ВидЗаказа)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидЗаказа", ВидЗаказа);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыЗаказовПокупателейПорядокСостояний.Состояние КАК Состояние,
	|	ВидыЗаказовПокупателейПорядокСостояний.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Справочник.ВидыЗаказовПокупателей.ПорядокСостояний КАК ВидыЗаказовПокупателейПорядокСостояний
	|ГДЕ
	|	ВидыЗаказовПокупателейПорядокСостояний.Ссылка = &ВидЗаказа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыЗаказНарядовПорядокСостояний.Состояние,
	|	ВидыЗаказНарядовПорядокСостояний.НомерСтроки
	|ИЗ
	|	Справочник.ВидыЗаказНарядов.ПорядокСостояний КАК ВидыЗаказНарядовПорядокСостояний
	|ГДЕ
	|	ВидыЗаказНарядовПорядокСостояний.Ссылка = &ВидЗаказа
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат.ВыгрузитьКолонку("Состояние");
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнительныеДействияПриИзмененииФильтра(Форма, ОписаниеФильтра)
	
	// Частные случаи
	Если ОписаниеФильтра.Имя="ВидЗаказа" Тогда
		// Ограничения списка состояний при выборе вида заказа
		ОписаниеФильтраСостояния = ОписаниеФильтра(Форма.Фильтры, "Имя", "СостояниеЗаказа");
		Если ОписаниеФильтраСостояния <> Неопределено Тогда
			ЭлементСостояния = Форма.Элементы[ОписаниеФильтраСостояния.ИмяЭлемента];
			Если ЗначениеЗаполнено(ОписаниеФильтра.Значение) Тогда
				ЭлементСостояния.РежимВыбораИзСписка = Истина;
				ЭлементСостояния.КнопкаВыбора = Ложь;
				ЭлементСостояния.СписокВыбора.ЗагрузитьЗначения(СостоянияПоВидуЗаказа(ОписаниеФильтра.Значение));
			Иначе
				ЭлементСостояния.РежимВыбораИзСписка = Ложь;
				ЭлементСостояния.КнопкаВыбора = Неопределено;
				ЭлементСостояния.СписокВыбора.Очистить();
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область ФормированиеЗаказов

&НаКлиенте
Процедура ПроверитьЗаполнениеПараметровПополненияРекурсивно(ЭлементыДерева, Ошибки, Знач ПутьКОшибке = "")
	
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		Индекс = ЭлементыДерева.Индекс(ЭлементДерева);
		Если ЭлементДерева.ИмяГруппировки <> ИмяГруппировкиИсточник() Тогда
			ПроверитьЗаполнениеПараметровПополненияРекурсивно(ЭлементДерева.ПолучитьЭлементы(), Ошибки, ПутьКОшибке + СтрШаблон("[%1]", Формат(Индекс, "ЧГ=0")));
			Продолжить;
		КонецЕсли;
		Если НЕ ЭлементДерева.Выбран Тогда
			Продолжить;
		КонецЕсли;
		ПозицияОшибки = СтрШаблон("%1%2", ПутьКОшибке, "[%1]");
		Если НЕ ЗначениеЗаполнено(ЭлементДерева.СпособПополнения) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не указан способ пополнения номенклатуры %1'"), ЭлементДерева.Номенклатура);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки,
			СтрШаблон("Запасы%1.СпособПополнения", ПозицияОшибки),
			ТекстСообщения,
			"СпособПополнения",
			Индекс,
			ТекстСообщения,
			Индекс);
		ИначеЕсли ЭлементДерева.СпособПополнения=ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Закупка")
			ИЛИ ЭлементДерева.СпособПополнения=ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Переработка") Тогда 
			Если НЕ ЗначениеЗаполнено(ЭлементДерева.Валюта) И ЗначениеЗаполнено(ЭлементДерева.Цена) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не указана валюта для номенклатуры %1'"), ЭлементДерева.Номенклатура);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				СтрШаблон("Запасы%1.Валюта", ПозицияОшибки),
				ТекстСообщения,
				"Валюта",
				Индекс,
				ТекстСообщения,
				Индекс);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция НоваяТаблицаПотребностей()
	
	ТаблицаПотребностей = Новый ТаблицаЗначений;
	ТаблицаПотребностей.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПотребностей.Колонки.Добавить("Характеристика", Новый ОписаниеТипов(
		"СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаПотребностей.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов(
		"СправочникСсылка.КлассификаторЕдиницИзмерения, СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаПотребностей.Колонки.Добавить("СпособПополнения", Новый ОписаниеТипов(
		"ПеречислениеСсылка.СпособыПополненияЗапасов"));
	ТаблицаПотребностей.Колонки.Добавить("Источник", Новый ОписаниеТипов(
		"СправочникСсылка.Контрагенты, СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаПотребностей.Колонки.Добавить("ВидЦен", Новый ОписаниеТипов("СправочникСсылка.ВидыЦенКонтрагентов"));
	ТаблицаПотребностей.Колонки.Добавить("ДатаПоступления", Новый ОписаниеТипов("Дата"));
	ТаблицаПотребностей.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаПотребностей.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	ТаблицаПотребностей.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ТаблицаПотребностей.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаПотребностей.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	ТаблицаПотребностей.Колонки.Добавить("СформированныйЗаказ", Новый ОписаниеТипов(
		"ДокументОбъект.ЗаказНаПроизводство, ДокументОбъект.ЗаказПоставщику, ДокументОбъект.ЗаказНаПеремещение"));
	Возврат ТаблицаПотребностей;
	
КонецФункции

&НаСервере
Процедура СобратьПотребностиРекурсивно(ЭлементыДерева, ТаблицаПотребностей, Знач ЭлементНоменклатура, Знач ЭлементЗаказ, Знач ЭлементПериод, Знач Источники)
	
	КолонкиДерева = "Номенклатура, Характеристика, ЕдиницаИзмерения";
	КолонкиИсточника = "СпособПополнения, Источник, ВидЦен, Цена, Сумма, Валюта";
	
	ИмяГруппировкиЗаказ = ?(Группировать = ГруппировкаНоменклатура(), ИмяГруппировкиЗаказРекомендации(), ИмяГруппировкиЗаказ());
	Если ПоЗаказам Тогда
		ГруппировкаДобавленияСтрок = ИмяГруппировкиЗаказ;
	ИначеЕсли Группировать = ГруппировкаНоменклатураДень() Тогда 
		ГруппировкаДобавленияСтрок = ИмяГруппировкиПериод();
	Иначе
		ГруппировкаДобавленияСтрок = ИмяГруппировкиНоменклатура();
	КонецЕсли;
	ПоДнямИНоменклатуре = (Группировать = ГруппировкаДеньНоменклатура());
	ПоНоменклатуреИДням = (Группировать = ГруппировкаНоменклатураДень());
	ПоНоменклатуре = (Группировать = ГруппировкаНоменклатура());
	Для каждого Элемент Из ЭлементыДерева Цикл
		ГруппировкаПериод = (Элемент.ИмяГруппировки = ИмяГруппировкиПериод());
		ГруппировкаНоменклатура = (Элемент.ИмяГруппировки = ИмяГруппировкиНоменклатура());
		ГруппировкаЗаказ = (Элемент.ИмяГруппировки = ИмяГруппировкиЗаказ);
		Если ГруппировкаНоменклатура Тогда
			ЭлементНоменклатура = Элемент;
			Источники = Новый Массив;
			Для каждого СтрокаИсточник Из Элемент.ПолучитьЭлементы() Цикл
				Если СтрокаИсточник.ИмяГруппировки <> ИмяГруппировкиИсточник() Тогда
					Продолжить;
				КонецЕсли;
				Если СтрокаИсточник.Заказать <= 0 Тогда
					Продолжить;
				КонецЕсли; 
				ОписаниеИсточника = Новый Структура(КолонкиИсточника);
				ОписаниеИсточника.Вставить("Заказать");
				ЗаполнитьЗначенияСвойств(ОписаниеИсточника, СтрокаИсточник);
				Источники.Добавить(ОписаниеИсточника);
			КонецЦикла; 
		КонецЕсли; 
		Если ГруппировкаЗаказ Тогда
			ЭлементЗаказ = Элемент;
		КонецЕсли; 
		Если ГруппировкаПериод Тогда
			ЭлементПериод = Элемент;
		КонецЕсли;
		// Добавление строки
		Если ПоДнямИНоменклатуре И ГруппировкаНоменклатура Тогда
			ЕстьВложенные = Ложь;
			Для каждого ВложенныйЭлемент Из Элемент.ПолучитьЭлементы() Цикл
				Если ВложенныйЭлемент.ИмяГруппировки = ИмяГруппировкиИсточник() Тогда
					Продолжить;
				КонецЕсли; 
				ЕстьВложенные = Истина;
				Прервать;
			КонецЦикла; 
		КонецЕсли; 
		ЭтоПополнениеЗапасов = ((ПоНоменклатуреИДням И ГруппировкаПериод И Элемент.ПолучитьЭлементы().Количество() = 0)
			ИЛИ (ПоДнямИНоменклатуре И ГруппировкаНоменклатура И НЕ ЕстьВложенные));
		Если Элемент.ИмяГруппировки = ГруппировкаДобавленияСтрок ИЛИ ЭтоПополнениеЗапасов Тогда
			Если Элемент.Заказать <= 0 Тогда
				Продолжить;
			КонецЕсли;
			Если ЭтоПополнениеЗапасов Тогда 
				Заказать = Элемент.Заказать;
			ИначеЕсли ГруппировкаДобавленияСтрок = ИмяГруппировкиНоменклатура() И ЭлементНоменклатура <> Неопределено Тогда
				Заказать = ЭлементНоменклатура.Заказать;
			ИначеЕсли ГруппировкаДобавленияСтрок = ИмяГруппировкиЗаказ И ЭлементЗаказ <> Неопределено Тогда
				Заказать = ЭлементЗаказ.Заказать;
			ИначеЕсли ГруппировкаДобавленияСтрок = ИмяГруппировкиПериод() И ЭлементПериод <> Неопределено Тогда
				Заказать = ЭлементПериод.Заказать;
			Иначе
				Продолжить;
			КонецЕсли; 
			Если ЭлементНоменклатура <> Неопределено Тогда
				ДобавленныеСтроки = Новый Массив;
				Для каждого ОписаниеИсточника Из Источники Цикл
					Количество = Мин(Заказать, ОписаниеИсточника.Заказать);
					Если Количество <= 0 Тогда
						Продолжить;
					КонецЕсли; 
					СтрокаТаблицы = ТаблицаПотребностей.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЭлементНоменклатура, КолонкиДерева);
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ОписаниеИсточника, КолонкиИсточника);
					МинимальнаяДатаПоставки = ПериодПланирования.ДатаНачала + ЭлементНоменклатура.СрокПополнения * 86400;
					Если ЭлементЗаказ <> Неопределено И ТипЗнч(ЭлементЗаказ.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
						СтрокаТаблицы.Заказ = ЭлементЗаказ.Заказ;
					КонецЕсли;
					СтрокаТаблицы.Количество = Количество;
					ОписаниеИсточника.Заказать = ОписаниеИсточника.Заказать - Количество;
					Заказать = Заказать - Количество;
					СтрокаТаблицы.Сумма = СтрокаТаблицы.Количество * СтрокаТаблицы.Цена;
					Если ПоставкаОднойДатой Тогда
						// Фиксированная дата поступления
						СтрокаТаблицы.ДатаПоступления = ДатаПоставки;
						Продолжить;
					ИначеЕсли ЭлементНоменклатура <> Неопределено И ПоНоменклатуре Тогда
						ДобавленныеСтроки.Добавить(СтрокаТаблицы);
						Продолжить;
					ИначеЕсли ЭлементПериод <> Неопределено 
						И ЗначениеЗаполнено(ЭлементПериод.ДатаПоступления) Тогда
						СтрокаТаблицы.ДатаПоступления = Макс(МинимальнаяДатаПоставки, ЭлементПериод.ДатаПоступления);
					ИначеЕсли ЭлементНоменклатура <> Неопределено 
						И ЗначениеЗаполнено(ЭлементНоменклатура.ДатаПоступления) 
						И ТипЗнч(ЭлементНоменклатура.ДатаПоступления) = Тип("Дата") Тогда
						СтрокаТаблицы.ДатаПоступления = Макс(МинимальнаяДатаПоставки, ЭлементНоменклатура.ДатаПоступления);
					ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаПоступления) Тогда 
						СтрокаТаблицы.ДатаПоступления = МинимальнаяДатаПоставки;
					КонецЕсли;
					ДобавленныеСтроки.Добавить(СтрокаТаблицы);
				КонецЦикла; 
				Если ДобавленныеСтроки.Количество() > 0 И ПоНоменклатуре Тогда
					// При группировке по номенклатуре даты поступления определяются по заполненности колонок
					РазбитьСтрокуПоПериодам(ТаблицаПотребностей, ДобавленныеСтроки, ЭлементНоменклатура, Элемент);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		СобратьПотребностиРекурсивно(Элемент.ПолучитьЭлементы(), ТаблицаПотребностей, ЭлементНоменклатура, ЭлементЗаказ, ЭлементПериод, Источники);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РазбитьСтрокуПоПериодам(ТаблицаПотребностей, ДобавленныеСтроки, ЭлементНоменклатура, Элемент)
	
	МинимальнаяДатаПоставки = ПериодПланирования.ДатаНачала + ЭлементНоменклатура.СрокПополнения * 86400;
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("ДатаПоступления");
	ТаблицаПериодов.Колонки.Добавить("Количество");
	Если Элемент.Просрочено > 0 Тогда
		НоваяСтрока = ТаблицаПериодов.Добавить();
		НоваяСтрока.ДатаПоступления = МинимальнаяДатаПоставки;
		НоваяСтрока.Количество = Элемент.Просрочено;
	КонецЕсли;
	ТекущийПериод = ПериодПланирования.ДатаНачала;
	Пока ТекущийПериод < ПериодПланирования.ДатаОкончания Цикл
		ИмяКолонки = ИмяКолонкиПериод(ТекущийПериод);
		Если Элемент[ИмяКолонки] > 0 Тогда
			НоваяСтрока = ТаблицаПериодов.Добавить();
			НоваяСтрока.ДатаПоступления = Макс(МинимальнаяДатаПоставки, ТекущийПериод);
			НоваяСтрока.Количество = Элемент[ИмяКолонки];
		КонецЕсли; 
		ТекущийПериод = ТекущийПериод + 86400;
	КонецЦикла;
	Если Элемент.Пополнение > 0 Тогда
		// Пополнение запасов планируем минимальной датой поставки
		НоваяСтрока = ТаблицаПериодов.Добавить();
		НоваяСтрока.ДатаПоступления = МинимальнаяДатаПоставки;
		НоваяСтрока.Количество = Элемент.Пополнение;
	КонецЕсли;
	Если Элемент.Заказать > ТаблицаПериодов.Итог("Количество") Тогда
		// Превышение заказа планируем минимальной датой поставки
		НоваяСтрока = ТаблицаПериодов.Добавить();
		НоваяСтрока.ДатаПоступления = МинимальнаяДатаПоставки;
		НоваяСтрока.Количество = Элемент.Заказать - ТаблицаПериодов.Итог("Количество");
	КонецЕсли; 
	ТаблицаПериодов.Свернуть("ДатаПоступления", "Количество");
	ТаблицаПериодов.Сортировать("ДатаПоступления");
	Для каждого СтрокаТаблицы Из ДобавленныеСтроки Цикл
		Если Рассчитывать = РассчитыватьПоПродажам() Тогда
			// При расчете по продажам - все поставки минимальной датой
			СтрокаТаблицы.ДатаПоступления = МинимальнаяДатаПоставки;
			Продолжить;
		КонецЕсли;
		ОсталосьРаспределить = СтрокаТаблицы.Количество;
		Для каждого СтрокаПериода Из ТаблицаПериодов Цикл
			Распределить = Мин(ОсталосьРаспределить, СтрокаПериода.Количество);
			Если ОсталосьРаспределить <= СтрокаПериода.Количество Тогда
				СтрокаТаблицы.ДатаПоступления = СтрокаПериода.ДатаПоступления;
			Иначе
				НоваяСтрокаТаблицы = ТаблицаПотребностей.Вставить(ТаблицаПотребностей.Индекс(СтрокаТаблицы));
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтрокаТаблицы);
				НоваяСтрокаТаблицы.Количество = Распределить;
				НоваяСтрокаТаблицы.Сумма = НоваяСтрокаТаблицы.Количество * НоваяСтрокаТаблицы.Цена;
				НоваяСтрокаТаблицы.ДатаПоступления = СтрокаПериода.ДатаПоступления;
				СтрокаТаблицы.Количество = СтрокаТаблицы.Количество - Распределить;
				СтрокаТаблицы.Сумма = СтрокаТаблицы.Количество * СтрокаТаблицы.Цена;
			КонецЕсли;
			СтрокаПериода.Количество = СтрокаПериода.Количество - Распределить;
			ОсталосьРаспределить = ОсталосьРаспределить - Распределить;
			Если ОсталосьРаспределить <= 0 Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		// Заказ больше разбивки по периодам добавляем в пополнение запаса
		Если ОсталосьРаспределить >= 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаПоступления) Тогда
			СтрокаТаблицы.ДатаПоступления = МинимальнаяДатаПоставки;
		КонецЕсли; 
	КонецЦикла;
				
КонецПроцедуры

&НаКлиенте
Функция ЗаполненИсточник(СпособПополнения, Знач ЭлементыДерева = Неопределено)
	
	Если ЭлементыДерева = Неопределено Тогда
		ЭлементыДерева = Запасы.ПолучитьЭлементы(); 
	КонецЕсли; 
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева.ИмяГруппировки = ИмяГруппировкиИсточник() Тогда
			Если ЭлементДерева.Заказать <= 0 Тогда
				Продолжить;
			КонецЕсли;
			Если ЭлементДерева.СпособПополнения <> СпособПополнения Тогда
				Продолжить;
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(ЭлементДерева.Номенклатура) Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Результат = ЗаполненИсточник(СпособПополнения, ЭлементДерева.ПолучитьЭлементы());
			Если НЕ Результат Тогда
				Возврат Ложь;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СформироватьЗаказыНаСервере()
	
	СохранитьНастройкиОтборов();
	Организация = ОрганизацияИзОтборов(ЭтотОбъект);
	
	ТаблицаПотребностей = НоваяТаблицаПотребностей();
	СобратьПотребностиРекурсивно(Запасы.ПолучитьЭлементы(), ТаблицаПотребностей, Неопределено, Неопределено, Неопределено, Неопределено);
	
	ВалютаДокументаПоУмолчанию = Константы.НациональнаяВалюта.Получить();
	ДанныеВалюта = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокументаПоУмолчанию, ТекущаяДатаСеанса());
	КурсДокументаПоУмолчанию = ДанныеВалюта.Курс;
	КратностьДокументаПоУмолчанию = ДанныеВалюта.Кратность;
	
	ТаблицаПотребностей.Индексы.Добавить("СпособПополнения, Источник, Валюта, СформированныйЗаказ" + ?(ЗаказыПоставщикуРазнымиДатами, ",ДатаПоступления", "") + ?(ОтдельныеДокументыПоЗаказамПокупателя, ",Заказ", ""));
	ТаблицаПотребностей.Индексы.Добавить("СпособПополнения, ДатаПоступления, СформированныйЗаказ" + ?(ОтдельныеДокументыПоЗаказамПокупателя, ",Заказ", ""));
	
	Для Каждого СтрокаПотребностей Из ТаблицаПотребностей Цикл
		
		Если СтрокаПотребностей.СформированныйЗаказ <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		// Сформируем заказы поставщикам.
		Если СтрокаПотребностей.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Закупка
			ИЛИ СтрокаПотребностей.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Переработка Тогда
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("СпособПополнения", СтрокаПотребностей.СпособПополнения);
			СтруктураПоиска.Вставить("Источник", СтрокаПотребностей.Источник);
			СтруктураПоиска.Вставить("Валюта", СтрокаПотребностей.Валюта);
			СтруктураПоиска.Вставить("СформированныйЗаказ", Неопределено);
			
			Если ЗаказыПоставщикуРазнымиДатами Тогда
				СтруктураПоиска.Вставить("ДатаПоступления", СтрокаПотребностей.ДатаПоступления);
			КонецЕсли;
			Если ОтдельныеДокументыПоЗаказамПокупателя Тогда
				СтруктураПоиска.Вставить("Заказ", СтрокаПотребностей.Заказ);
			КонецЕсли;
			
			РезультатПоиска = ТаблицаПотребностей.НайтиСтроки(СтруктураПоиска);
			
			Если РезультатПоиска.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущийЗаказ = Документы.ЗаказПоставщику.СоздатьДокумент();
			ТекущийЗаказ.Дата = ТекущаяДатаСеанса();
			
			ТекущийЗаказ.Заполнить(Неопределено);
			
			Если СтрокаПотребностей.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Закупка Тогда
				ТекущийЗаказ.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.ЗаказНаЗакупку;
			Иначе
				ТекущийЗаказ.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.ЗаказНаПереработку;
			КонецЕсли;
			
			ТекущийЗаказ.Организация = Организация;
			ТекущийЗаказ.ВалютаДокумента = ВалютаДокументаПоУмолчанию;
			ТекущийЗаказ.Курс = КурсДокументаПоУмолчанию;
			ТекущийЗаказ.Кратность = КратностьДокументаПоУмолчанию;
			
			ТекущийЗаказ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
			ТекущийЗаказ.СуммаВключаетНДС = Истина;
			
			ТекущийЗаказ.Контрагент = СтрокаПотребностей.Источник;
			СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(ТекущийЗаказ.Ссылка, ТекущийЗаказ.ВидОперации);
			ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(
			ТекущийЗаказ.Контрагент, 
			Организация, 
			СписокВидовДоговоров, 
			СтрокаПотребностей.Валюта);
			
			Если ЗначениеЗаполнено(ДоговорПоУмолчанию) Тогда
				
				ТекущийЗаказ.Договор = ДоговорПоУмолчанию;
				
			Иначе
				
				ТекущийЗаказ.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
					
			КонецЕсли;
			
			ТекущийЗаказ.ВалютаДокумента = СтрокаПотребностей.Валюта;
			ДанныеВалюта = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ТекущийЗаказ.ВалютаДокумента, ТекущийЗаказ.Дата);
			ТекущийЗаказ.Курс = ДанныеВалюта.Курс;
			ТекущийЗаказ.Кратность = ДанныеВалюта.Кратность;
			Если ЗначениеЗаполнено(ТекущийЗаказ.Договор.ВидЦенКонтрагента) Тогда
				ТекущийЗаказ.ВидЦенКонтрагента = ТекущийЗаказ.Договор.ВидЦенКонтрагента;
			Иначе
				ТекущийЗаказ.ВидЦенКонтрагента = СтрокаПотребностей.ВидЦен;
			КонецЕсли; 
			
			Если ЗаказыПоставщикуРазнымиДатами Тогда
				ТекущийЗаказ.ДатаПоступления = СтрокаПотребностей.ДатаПоступления;
			КонецЕсли;
			Если ОтдельныеДокументыПоЗаказамПокупателя Тогда
				ТекущийЗаказ.ЗаказПокупателя = СтрокаПотребностей.Заказ;
			КонецЕсли;
			
			Для каждого СтрокаРезультат Из РезультатПоиска Цикл
				
				НоваяСтрока = ТекущийЗаказ.Запасы.Добавить();
				НоваяСтрока.Номенклатура = СтрокаРезультат.Номенклатура;
				НоваяСтрока.Характеристика = СтрокаРезультат.Характеристика;
				НоваяСтрока.Количество = СтрокаРезультат.Количество;
				НоваяСтрока.ЕдиницаИзмерения = СтрокаРезультат.ЕдиницаИзмерения;
				НоваяСтрока.ДатаПоступления = СтрокаРезультат.ДатаПоступления;
				НоваяСтрока.ЗаказПокупателя = СтрокаРезультат.Заказ;
				
				Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура.ВидСтавкиНДС) Тогда
					НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(НоваяСтрока.Номенклатура.ВидСтавкиНДС);
				Иначе
					НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Организация.ВидСтавкиНДСПоУмолчанию);
				КонецЕсли;
				
				СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
				НоваяСтрока.Цена = СтрокаРезультат.Цена;
				
				Если ЗначениеЗаполнено(СтрокаПотребностей.ВидЦен) И НЕ СтрокаРезультат.ВидЦен.ЦенаВключаетНДС Тогда
					НоваяСтрока.Цена = (НоваяСтрока.Цена * (100 + СтавкаНДС)) / 100;
				КонецЕсли;
				
				НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;
				НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100);
				НоваяСтрока.Всего = НоваяСтрока.Сумма;
				
				СтрокаРезультат.СформированныйЗаказ = ТекущийЗаказ;
				
			КонецЦикла;

			Если НесколькоЗначений(ТекущийЗаказ.Запасы, "ЗаказПокупателя") Тогда
				ТекущийЗаказ.ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
			ИначеЕсли ТекущийЗаказ.Запасы.Количество()>0 Тогда 
				ТекущийЗаказ.ЗаказПокупателя = ТекущийЗаказ.Запасы[0].ЗаказПокупателя;
			КонецЕсли; 
			Если НесколькоЗначений(ТекущийЗаказ.Запасы, "ДатаПоступления") Тогда
				ТекущийЗаказ.ПоложениеДатыПоступления = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
			ИначеЕсли ТекущийЗаказ.Запасы.Количество()>0 Тогда 
				ТекущийЗаказ.ДатаПоступления = ТекущийЗаказ.Запасы[0].ДатаПоступления;
			КонецЕсли; 
			
		// Сформируем заказы на производство.
		ИначеЕсли СтрокаПотребностей.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Производство Тогда 
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("СпособПополнения", СтрокаПотребностей.СпособПополнения);
			СтруктураПоиска.Вставить("ДатаПоступления", СтрокаПотребностей.ДатаПоступления);
			СтруктураПоиска.Вставить("Источник", СтрокаПотребностей.Источник);
			СтруктураПоиска.Вставить("СформированныйЗаказ", Неопределено);
			Если ОтдельныеДокументыПоЗаказамПокупателя Тогда
				СтруктураПоиска.Вставить("Заказ", СтрокаПотребностей.Заказ);
			КонецЕсли;
			
			РезультатПоиска = ТаблицаПотребностей.НайтиСтроки(СтруктураПоиска);
			
			Если РезультатПоиска.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущийЗаказ = Документы.ЗаказНаПроизводство.СоздатьДокумент();
			ТекущийЗаказ.Дата = ТекущаяДатаСеанса();
			
			ТекущийЗаказ.Заполнить(Неопределено);
			
			ТекущийЗаказ.ВидОперации = Перечисления.ВидыОперацийЗаказНаПроизводство.Сборка;
			
			ТекущийЗаказ.Организация = Организация;
			ТекущийЗаказ.Старт = СтрокаПотребностей.ДатаПоступления - 86400 * СтрокаПотребностей.Номенклатура.СрокПополнения;
			Для каждого СтрокаРезультат Из РезультатПоиска Цикл
				ТекущийЗаказ.Старт = Мин(ТекущийЗаказ.Старт, СтрокаПотребностей.ДатаПоступления - 86400 * СтрокаРезультат.Номенклатура.СрокПополнения);
			КонецЦикла; 
			ТекущийЗаказ.Финиш = СтрокаПотребностей.ДатаПоступления;
			ТекущийЗаказ.СтруктурнаяЕдиница = СтрокаПотребностей.Источник;
			Если ЗначениеЗаполнено(ТекущийЗаказ.СтруктурнаяЕдиница) И ЗначениеЗаполнено(ТекущийЗаказ.СтруктурнаяЕдиница.ИсточникПеремещения) Тогда
				ТекущийЗаказ.СтруктурнаяЕдиницаРезерв = ТекущийЗаказ.СтруктурнаяЕдиница.ИсточникПеремещения;
			Иначе
				ТекущийЗаказ.СтруктурнаяЕдиницаРезерв = ТекущийЗаказ.СтруктурнаяЕдиница;
			КонецЕсли; 
			Если ОтдельныеДокументыПоЗаказамПокупателя Тогда
				ТекущийЗаказ.ЗаказПокупателя = СтрокаПотребностей.Заказ;
			КонецЕсли;
			
			Для каждого СтрокаРезультат Из РезультатПоиска Цикл
				
				НоваяСтрока = ТекущийЗаказ.Продукция.Добавить();
				НоваяСтрока.Номенклатура = СтрокаРезультат.Номенклатура;
				НоваяСтрока.Характеристика = СтрокаРезультат.Характеристика;
				НоваяСтрока.Количество = СтрокаРезультат.Количество;
				НоваяСтрока.ЕдиницаИзмерения = СтрокаРезультат.ЕдиницаИзмерения;
				НоваяСтрока.Спецификация = Справочники.Спецификации.СпецификацияПоУмолчанию(
					НоваяСтрока.Номенклатура, 
					НоваяСтрока.Характеристика, 
					Истина);
				НоваяСтрока.ЗаказПокупателя = СтрокаРезультат.Заказ;
				
				СтрокаРезультат.СформированныйЗаказ = ТекущийЗаказ;
				
			КонецЦикла;
			
			Если НесколькоЗначений(ТекущийЗаказ.Продукция, "ЗаказПокупателя") Тогда
				ТекущийЗаказ.ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
			ИначеЕсли ТекущийЗаказ.Продукция.Количество() > 0 Тогда 
				ТекущийЗаказ.ЗаказПокупателя = ТекущийЗаказ.Продукция[0].ЗаказПокупателя;
			КонецЕсли;
			
			ДанныеЗаполнения = Новый Структура("РасчетПотребностей", Истина);
			ТекущийЗаказ.Заполнить(ДанныеЗаполнения);
			
		// Сформируем заказы на перемещение.
		ИначеЕсли СтрокаПотребностей.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Перемещение Тогда 
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("СпособПополнения", СтрокаПотребностей.СпособПополнения);
			СтруктураПоиска.Вставить("Источник", СтрокаПотребностей.Источник);
			СтруктураПоиска.Вставить("СформированныйЗаказ", Неопределено);
			
			Если ОтдельныеДокументыПоЗаказамПокупателя Тогда
				СтруктураПоиска.Вставить("Заказ", СтрокаПотребностей.Заказ);
			КонецЕсли;
			
			РезультатПоиска = ТаблицаПотребностей.НайтиСтроки(СтруктураПоиска);
			
			Если РезультатПоиска.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущийЗаказ = Документы.ЗаказНаПеремещение.СоздатьДокумент();
			ТекущийЗаказ.Дата = ТекущаяДатаСеанса();
			
			ТекущийЗаказ.Заполнить(Неопределено);
			
			ТекущийЗаказ.Организация = Организация;
			ТекущийЗаказ.ДатаПеремещения = СтрокаПотребностей.ДатаПоступления;
			ТекущийЗаказ.СтруктурнаяЕдиницаПолучатель = Склад;
			ТекущийЗаказ.СтруктурнаяЕдиницаРезерв = СтрокаПотребностей.Источник;
			Если ОтдельныеДокументыПоЗаказамПокупателя Тогда
				ТекущийЗаказ.ЗаказПокупателя = СтрокаПотребностей.Заказ;
			КонецЕсли;
			
			Для каждого СтрокаРезультат Из РезультатПоиска Цикл
				
				НоваяСтрока = ТекущийЗаказ.Запасы.Добавить();
				НоваяСтрока.Номенклатура = СтрокаРезультат.Номенклатура;
				НоваяСтрока.Характеристика = СтрокаРезультат.Характеристика;
				НоваяСтрока.Количество = СтрокаРезультат.Количество;
				НоваяСтрока.ЕдиницаИзмерения = СтрокаРезультат.ЕдиницаИзмерения;
				НоваяСтрока.ЗаказПокупателя = СтрокаРезультат.Заказ;
				СтрокаРезультат.СформированныйЗаказ = ТекущийЗаказ;
				
			КонецЦикла;

			Если НесколькоЗначений(ТекущийЗаказ.Запасы, "ЗаказПокупателя") Тогда
				ТекущийЗаказ.ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
			ИначеЕсли ТекущийЗаказ.Запасы.Количество() > 0 Тогда 
				ТекущийЗаказ.ЗаказПокупателя = ТекущийЗаказ.Запасы[0].ЗаказПокупателя;
			КонецЕсли;
			
			Если РезервироватьЗаказомНаПеремещение Тогда
				ТекущийЗаказ.ЗаполнитьКолонкуРезервПоОстаткам();	
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущийЗаказ.Комментарий = НСтр("ru = 'Сформирован автоматически сервисом ""Расчет потребностей в запасах"".'");
		
		ТекущийЗаказ.Записать();
		СформированныйЗаказ = Заказы.Добавить();
		СформированныйЗаказ.Заказ = ТекущийЗаказ.Ссылка;
		СформированныйЗаказ.СтандартнаяКартинка = 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НесколькоЗначений(ТабличнаяЧасть, ИмяКолонки)
	
	Если ТипЗнч(ТабличнаяЧасть)=Тип("ТаблицаЗначений") Тогда
		Таблица = ТабличнаяЧасть.Скопировать(, ИмяКолонки);
	Иначе
		Таблица = ТабличнаяЧасть.Выгрузить(, ИмяКолонки);
	КонецЕсли; 
	Таблица.Свернуть(ИмяКолонки);
	Возврат Таблица.Количество()>1;
	
КонецФункции

#КонецОбласти 

#Область ГрупповоеИзменениеСтрок

&НаКлиенте
Процедура ЗапасыСнятьФлажки(Команда)
	
	УстановитьПометку(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыУстановитьФлажки(Команда)
	
	УстановитьПометку(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменитьСтроки(Команда)
	
	ПоказатьСкрытьПанельРедактирования(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыполнитьДействие(Команда)
	
	ОбработатьТаблицу();
	НастроитьОформлениеПанелиРедактирования(4);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОтменитьИзменения(Команда)
	
	ПоказатьСкрытьПанельРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменениеСтрокДействиеПриИзменении(Элемент)
	
	ОпределитьОбъектИзменений();
	НастроитьОформлениеПанелиРедактирования(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменениеСтрокЗначениеПриИзменении(Элемент)
	
	НастроитьОформлениеПанелиРедактирования(3);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометку(Пометка)
	
	Элементы.ЗапасыСнятьФлажки.Видимость = Пометка;
	Элементы.ЗапасыУстановитьФлажки.Видимость = НЕ Пометка;
	Для каждого СтрокаДерева Из Запасы.ПолучитьЭлементы() Цикл
		СтрокаДерева.Пометка = Пометка И СтрокаДерева.Выбран;
		УстановитьПометкуРекурсивно(СтрокаДерева, СтрокаДерева.ИмяГруппировки = ИмяГруппировкиНоменклатура());
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьПанельРедактирования(ИзменяетДанные = Неопределено)
	
	Перем СостояниеПерехода;
	ГрупповоеИзменениеСтрокСервер.ПоказатьСкрытьПанельРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокСервер(),
		СостояниеПерехода,
		ИзменяетДанные
	);
	ВидимостьПанелиИзменениеСтрок = Элементы.ГруппаЗапасыИзменениеСтрок.Видимость;
	Если ВидимостьПанелиИзменениеСтрок Тогда
		Элементы.ЗапасыВыбран.ТолькоПросмотр = Истина;
		Элементы.ЗапасыЗаказать.ТолькоПросмотр = Истина;
		Элементы.КнопкиСортировать.Доступность = Ложь;
		Элементы.КнопкиСвернутьРазвернуть.Доступность = Ложь;
	Иначе
		Элементы.ЗапасыВыбран.ТолькоПросмотр = Ложь;
		Элементы.ЗапасыЗаказать.ТолькоПросмотр = Ложь;
		Элементы.КнопкиСортировать.Доступность = Истина;
		Элементы.КнопкиСвернутьРазвернуть.Доступность = Истина;
	КонецЕсли; 
	
	УправлениеРезервнымиКопиямиТаблицы(СостояниеПерехода, ИзменяетДанные);
	
	Если СостояниеПерехода = 1 Тогда
		УстановитьПометку(Истина);
	КонецЕсли;
	Элементы.ЗапасыПометка.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
	Элементы.ЗапасыОтступ.Видимость = Элементы.ЗапасыПометка.Видимость;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеРезервнымиКопиямиТаблицы(СостояниеПерехода, ИзменяетДанные)
	
	Если ИзменяетДанные = Неопределено Тогда
		ИзменяетДанные = Ложь;
	КонецЕсли; 
	Если СостояниеПерехода = 1 Тогда
		ДеревоКопия = РеквизитФормыВЗначение("Запасы");
		ЗапасыРезервнаяКопияТаблицыАдрес = ПоместитьВоВременноеХранилище(ДеревоКопия, УникальныйИдентификатор);
	ИначеЕсли СостояниеПерехода = 0 И НЕ ИзменяетДанные Тогда
		ЗначениеВРеквизитФормы(ПолучитьИзВременногоХранилища(ЗапасыРезервнаяКопияТаблицыАдрес), "Запасы");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОформлениеПанелиРедактирования(Состояние, СохранитьИзменения = Неопределено)
	
	Результат = ГрупповоеИзменениеСтрокКлиент.НастроитьОформлениеПанелиРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокКлиент(),
		Состояние,
		ЗапасыИзменениеСтрокЗначение
	);
	
	Если Результат.Свойство("УстановитьСвязиПараметровВыбора") И Результат.УстановитьСвязиПараметровВыбора Тогда
		УстановитьСвязиПараметровВыбораДляЗначения();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбораДляЗначения()
	
	ГрупповоеИзменениеСтрокСервер.УстановитьСвязиПараметровВыбора(
		НаборЭлементовГрупповогоИзмененияСтрокСервер()
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущееДействиеИзмененияСтрок()
	
	Если ЗапасыИзменениеСтрокДействие = ЗапасыИзменениеСтрокДействиеПриОткрытии Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьТекущееДействиеИзмененияСтрокСервер();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущееДействиеИзмененияСтрокСервер()
	
	ГрупповоеИзменениеСтрокСервер.СохранитьНастройки(НаборЭлементовГрупповогоИзмененияСтрокСервер());
	
КонецПроцедуры

&НаСервере
Функция ИзменяемыеСтроки(Знач ЭлементыДерева = Неопределено)
	
	ИзменяемыеСтроки = Новый Массив;
	Если ЭлементыДерева = Неопределено Тогда
		ЭлементыДерева = Запасы.ПолучитьЭлементы();
	КонецЕсли; 
	Для каждого Строка Из ЭлементыДерева Цикл
		Если НЕ Строка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		УстановкаИсточника = (ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьИзготовителя"));
		Если УстановкаИсточника И Строка.ИмяГруппировки = ИмяГруппировкиИсточник() Тогда
			ИзменяемыеСтроки.Добавить(Строка);
		ИначеЕсли НЕ УстановкаИсточника И Строка.ИмяГруппировки = ИмяГруппировкиНоменклатура() Тогда
			ИзменяемыеСтроки.Добавить(Строка);
		КонецЕсли;
		ВложенныеСтроки = ИзменяемыеСтроки(Строка.ПолучитьЭлементы());
		Для каждого ВложеннаяСтрока Из ВложенныеСтроки Цикл
			ИзменяемыеСтроки.Добавить(ВложеннаяСтрока);
		КонецЦикла; 
	КонецЦикла;
	Возврат ИзменяемыеСтроки;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьТаблицу()
	
	ОбработатьТаблицуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьТаблицуНаСервере()
	
	Организация = ОрганизацияИзОтборов(ЭтотОбъект);
	ИзменяемыеСтроки = ИзменяемыеСтроки();
	
	Для каждого Строка Из ИзменяемыеСтроки Цикл
		
		Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент")	Тогда
			
			Если Строка.СпособПополнения <> Перечисления.СпособыПополненияЗапасов.Закупка
				И Строка.СпособПополнения <> Перечисления.СпособыПополненияЗапасов.Переработка Тогда
				Продолжить;
			КонецЕсли; 
			Строка.Цена = Строка.Цена * (100 + ЗапасыИзменениеСтрокЗначение) / 100;
			Строка.Сумма = Строка.Заказать * Строка.Цена;
			СтароеЗначение = Строка.СуммаУчета;
			ПересчитатьСуммуРегл(Строка, ПараметрыФормы, ИтогоСумма);
			ПересчитатьИтогиРекурсивно(Строка, "СуммаУчета", Строка.СуммаУчета - СтароеЗначение);
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены") Тогда
			
			Если Строка.СпособПополнения <> Перечисления.СпособыПополненияЗапасов.Закупка
				И Строка.СпособПополнения <> Перечисления.СпособыПополненияЗапасов.Переработка Тогда
				Продолжить;
			КонецЕсли; 
			Строка.Цена = ЦенообразованиеСервер.ОкруглитьЦену(Строка.Цена, ЗапасыИзменениеСтрокЗначение, Ложь);
			Строка.Сумма = Строка.Заказать * Строка.Цена;
			СтароеЗначение = Строка.СуммаУчета;
			ПересчитатьСуммуРегл(Строка, ПараметрыФормы, ИтогоСумма);
			ПересчитатьИтогиРекурсивно(Строка, "СуммаУчета", Строка.СуммаУчета - СтароеЗначение);
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы") Тогда
			
			Если Строка.СпособПополнения <> Перечисления.СпособыПополненияЗапасов.Закупка
				И Строка.СпособПополнения <> Перечисления.СпособыПополненияЗапасов.Переработка Тогда
				Продолжить;
			КонецЕсли;
			Строка.Сумма = ЦенообразованиеСервер.ОкруглитьЦену(Строка.Сумма, ЗапасыИзменениеСтрокЗначение, Ложь);
			Если Строка.Заказать <> 0 Тогда
				Строка.Цена = Строка.Сумма / Строка.Заказать;
			КонецЕсли;
			СтароеЗначение = Строка.СуммаУчета;
			ПересчитатьСуммуРегл(Строка, ПараметрыФормы, ИтогоСумма);
			ПересчитатьИтогиРекурсивно(Строка, "СуммаУчета", Строка.СуммаУчета - СтароеЗначение);
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПоставщика") Тогда
			
			Если Строка.ИмяГруппировки <> ИмяГруппировкиНоменклатура() Тогда
				Продолжить;
			КонецЕсли;
			Заказать = 0;
			НайденнаяСтрока = Неопределено;
			Для каждого СтрокаИсточник Из Строка.ПолучитьЭлементы() Цикл
				Если СтрокаИсточник.ИмяГруппировки <> ИмяГруппировкиИсточник() Тогда
					Продолжить;
				КонецЕсли; 
				Если СтрокаИсточник.СпособПополнения <> Перечисления.СпособыПополненияЗапасов.Закупка
					И СтрокаИсточник.СпособПополнения <> Перечисления.СпособыПополненияЗапасов.Переработка Тогда
					Продолжить;
				КонецЕсли;
				Заказать = Заказать + СтрокаИсточник.Заказать;
				Если СтрокаИсточник.Источник = ЗапасыИзменениеСтрокЗначение И НайденнаяСтрока = Неопределено Тогда
					НайденнаяСтрока = СтрокаИсточник;
					Продолжить;
				КонецЕсли;
				Если НЕ СтрокаИсточник.Выбран И СтрокаИсточник.Заказать = 0 Тогда
					Продолжить;
				КонецЕсли;
				СтрокаИсточник.Выбран = Ложь;
				СтрокаИсточник.Пометка = Ложь;
				СтрокаИсточник.Заказать = 0;
				ПриСменеПоставщика(СтрокаИсточник);
			КонецЦикла;
			Если НайденнаяСтрока = Неопределено Тогда
				НайденнаяСтрока = Строка.ПолучитьЭлементы().Вставить(0);
				НайденнаяСтрока.Источник = ЗапасыИзменениеСтрокЗначение;
				НайденнаяСтрока.Номенклатура = ЗапасыИзменениеСтрокЗначение;
				СпособПополнения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Номенклатура, "СпособПополнения", Истина);
				Если СпособПополнения = Перечисления.СпособыПополненияЗапасов.Переработка Тогда
					НайденнаяСтрока.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Переработка;
				Иначе
					НайденнаяСтрока.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Закупка;
				КонецЕсли;
				СтруктураДанных = Новый Структура;
				СтруктураДанных.Вставить("Организация", Организация);
				СтруктураДанных.Вставить("Контрагент", ЗапасыИзменениеСтрокЗначение);
				ДополнитьДанныеПоставщика(СтруктураДанных);
				ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтруктураДанных, "Договор, ВидЦен, Валюта");
				НайденнаяСтрока.ИмяГруппировки = ИмяГруппировкиИсточник();
				НайденнаяСтрока.Показывать = Истина;
				НайденнаяСтрока.ИконкаПредупреждение = 1;
			КонецЕсли; 
			НайденнаяСтрока.Выбран = Истина;
			НайденнаяСтрока.Пометка = Истина;
			НайденнаяСтрока.Заказать = Заказать;
			ПриСменеПоставщика(НайденнаяСтрока);
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьИзготовителя") Тогда
			
			Если Строка.СпособПополнения <> Перечисления.СпособыПополненияЗапасов.Производство Тогда
				Продолжить;
			КонецЕсли; 
			Если Строка.ИмяГруппировки <> ИмяГруппировкиИсточник() Тогда
				Продолжить;
			КонецЕсли; 
			Строка.Источник = ЗапасыИзменениеСтрокЗначение;
			Строка.Номенклатура = ЗапасыИзменениеСтрокЗначение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьДанныеПоставщика(СтруктураДанных)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураДанных.Организация);
	Запрос.УстановитьПараметр("Контрагент", СтруктураДанных.Контрагент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеДоговорыКонтрагента.Договор КАК Договор,
	|	ОсновныеДоговорыКонтрагента.Договор.ВидЦенКонтрагента КАК ВидЦен,
	|	ОсновныеДоговорыКонтрагента.Договор.ВидЦенКонтрагента.ВалютаЦены КАК Валюта
	|ИЗ
	|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|ГДЕ
	|	ОсновныеДоговорыКонтрагента.Контрагент = &Контрагент
	|	И ОсновныеДоговорыКонтрагента.Организация = &Организация
	|	И ОсновныеДоговорыКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.СПоставщиком)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураДанных.Вставить("Договор", Выборка.Договор);
		СтруктураДанных.Вставить("ВидЦен", Выборка.ВидЦен);
		СтруктураДанных.Вставить("Валюта", Выборка.Валюта);
	Иначе
		СтруктураДанных.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		СтруктураДанных.Вставить("ВидЦен", Справочники.ВидыЦенКонтрагентов.ПустаяСсылка());
		СтруктураДанных.Вставить("Валюта", Справочники.Валюты.ПустаяСсылка());
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриСменеПоставщика(Строка)
	
	Строка.Сумма = Строка.Заказать * Строка.Цена;
	СтараяСумма = Строка.СуммаУчета;
	ПересчитатьСуммуРегл(Строка, ПараметрыФормы, ИтогоСумма);
	ПересчитатьИтогиРекурсивно(Строка, "СуммаУчета", Строка.СуммаУчета - СтараяСумма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьОбъектИзменений()
	
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НаборЭлементовГрупповогоИзмененияСтрокКлиент()
	
	НаборЭлементов = Новый Структура();
	НаборЭлементов.Вставить("ИмяТЧ", "Запасы");
	НаборЭлементов.Вставить("ДокументСсылка", Неопределено);
	НаборЭлементов.Вставить("ПанельРедактирования", Элементы.ГруппаЗапасыИзменениеСтрок);
	НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
	НаборЭлементов.Вставить("КолонкаПометка", Элементы.ЗапасыПометка);
	НаборЭлементов.Вставить("Действие", ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("ДействиеЭлемент", Элементы.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("Значение", ЭтотОбъект.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ЗначениеЭлемент", Элементы.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ОбъектИзменений", ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
	НаборЭлементов.Вставить("КолонкаОбъектИзменений", ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент), Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Функция НаборЭлементовГрупповогоИзмененияСтрокСервер()
	
	НаборЭлементов = Новый Структура();
	НаборЭлементов.Вставить("ИмяТЧ", "Запасы");
	НаборЭлементов.Вставить("ДокументСсылка", Обработки.РасчетПотребностей);
	НаборЭлементов.Вставить("ПанельРедактирования", Элементы.ГруппаЗапасыИзменениеСтрок);
	НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
	НаборЭлементов.Вставить("КнопкаИзменитьСтроки", Элементы.ЗапасыИзменитьСтроки);
	НаборЭлементов.Вставить("КолонкаПометка", Элементы.ЗапасыПометка);
	НаборЭлементов.Вставить("Действие", ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("ДействиеЭлемент", Элементы.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("Значение", ЭтотОбъект.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ЗначениеЭлемент", Элементы.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ОбъектИзменений", ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
	НаборЭлементов.Вставить("КолонкаОбъектИзменений", ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент), Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокДействий()
	
	Действия = Новый Массив;
	Если ОтборСпособПополнения <> СпособПополненияПроизводство() Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьПоставщика);
	КонецЕсли; 
	Если ОтборСпособПополнения <> СпособПополненияЗакупка()
		И ОтборСпособПополнения <> СпособПополненияЗакупкаПереработка() Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьИзготовителя);
	КонецЕсли; 
	
	Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Очистить();
	Для каждого Действие Из Действия Цикл
		ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
		Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
	КонецЦикла;
	
	Если Действия.Найти(ЗапасыИзменениеСтрокДействие) = Неопределено Тогда
		ЗапасыИзменениеСтрокДействие = Неопределено;
		ГрупповоеИзменениеСтрокСервер.НастроитьИсходнуюПанельРедактирования(ЗапасыИзменениеСтрокЗначение, НаборЭлементовГрупповогоИзмененияСтрокСервер());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПометкуРекурсивно(ТекСтр, ТолькоИсточники = Ложь)
	
	Для каждого ВложеннаяСтрока Из ТекСтр.ПолучитьЭлементы() Цикл
		Если ТолькоИсточники И ВложеннаяСтрока.ИмяГруппировки <> ИмяГруппировкиИсточник() Тогда
			ВложеннаяСтрока.Пометка = Ложь;
		Иначе
			ВложеннаяСтрока.Пометка = ВложеннаяСтрока.Выбран И ТекСтр.Пометка;
		КонецЕсли; 
		УстановитьПометкуРекурсивно(ВложеннаяСтрока, ВложеннаяСтрока.ИмяГруппировки = ИмяГруппировкиНоменклатура());
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УчестьИзменениеПометкиДляРодителя(ТекСтр)
	
	Родитель = ТекСтр.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекСтр.Пометка Тогда
		Родитель.Пометка = Истина;
		Возврат;
	КонецЕсли; 
	Родитель.Пометка = Ложь;
	Для каждого СтрокаДерева Из Родитель.ПолучитьЭлементы() Цикл
		Если СтрокаДерева.Пометка Тогда
			Родитель.Пометка = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбщийПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОрганизацияИзОтборов(Форма)
	
	ПараметрыФормы = Форма.ПараметрыФормы;
	Если НЕ ПараметрыФормы.ИспользоватьНесколькоОрганизаций Тогда
		Значение = ПредопределенноеЗначение("Справочник.Организации.ОсновнаяОрганизация");
	ИначеЕсли ЗначениеЗаполнено(ПараметрыФормы.Компания) Тогда 
		Значение = ПараметрыФормы.Компания;
	Иначе
		ОписаниеФильтра = ОписаниеФильтра(Форма.Фильтры, "Имя", "Организация");
		Если ОписаниеФильтра <> Неопределено Тогда
			Значение = ОписаниеФильтра.Значение;
		Иначе
			Параметр = Форма.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Организация"));
			Если Параметр <> Неопределено Тогда
				Значение = Параметр.Значение;
			Иначе
				Значение = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	Возврат Значение;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеДняНедели(ДеньНеделиКалендаря)
	
	НомерДняНедели = ДеньНедели(ДеньНеделиКалендаря);
	Если НомерДняНедели = 1 Тогда
		
		Возврат НСтр("ru = 'Пн'");
		
	ИначеЕсли НомерДняНедели = 2 Тогда
		
		Возврат НСтр("ru = 'Вт'");
		
	ИначеЕсли НомерДняНедели = 3 Тогда
		
		Возврат НСтр("ru = 'Ср'");
		
	ИначеЕсли НомерДняНедели = 4 Тогда
		
		Возврат НСтр("ru = 'Чт'");
		
	ИначеЕсли НомерДняНедели = 5 Тогда
		
		Возврат НСтр("ru = 'Пт'");
		
	ИначеЕсли НомерДняНедели = 6 Тогда
		
		Возврат НСтр("ru = 'Сб'");
		
	Иначе
		
		Возврат НСтр("ru = 'Вс'");
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПодчиненныеЭлементыРекурсивно(Элемент)
	
	Результат = Новый Массив;
	Для каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПодчиненныйЭлемент)=Тип("ПолеФормы") Тогда
			Результат.Добавить(ПодчиненныйЭлемент);
		ИначеЕсли ТипЗнч(ПодчиненныйЭлемент)=Тип("ГруппаФормы") Тогда
			ВложенныеЭлементы = ПодчиненныеЭлементыРекурсивно(ПодчиненныйЭлемент);
			Для каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл
				Результат.Добавить(ВложенныйЭлемент);
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	Возврат Результат;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКолонкиПериод(Дата)
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Возврат "Просрочено";
	КонецЕсли; 
	Возврат "Период" + Формат(Дата, "ДФ=yyyyMMdd");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТиповСостоитИзТипа(ОписаниеТипов, Тип)
	
	Возврат ОписаниеТипов.Типы().Количество()=1 И ОписаниеТипов.Типы().Получить(0)=Тип;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТиповСостоитИзПростогоТипа(ОписаниеТипов)
	
	Возврат ОписаниеТиповСостоитИзТипа(ОписаниеТипов, Тип("Булево"))
	ИЛИ ОписаниеТиповСостоитИзТипа(ОписаниеТипов, Тип("Число"))
	ИЛИ ОписаниеТиповСостоитИзТипа(ОписаниеТипов, Тип("Строка"))
	ИЛИ ОписаниеТиповСостоитИзТипа(ОписаниеТипов, Тип("Дата"));
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьДень(Дата, КоличествоДней = 1)
	
	Возврат Дата + КоличествоДней * 86400;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПериодПоДатеНачалаИДлительности(ДатаНачала, КоличествоДней)
	
	Возврат Новый СтандартныйПериод(НачалоДня(ДатаНачала), ДобавитьДень(КонецДня(ДатаНачала), КоличествоДней - 1));
	
КонецФункции

#КонецОбласти 

#Область ФиксированныеСтроки

&НаКлиентеНаСервереБезКонтекста
Функция РассчитыватьПоПродажам()
	
	Возврат "ПоПродажам";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция РассчитыватьПоЗаказам()
	
	Возврат "ПоЗаказам";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция МетодПрогнозаСреднедневныеПродажи()
	
	Возврат "СреднедневныеПродажи";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция СпособПополненияЗакупкаПереработка()
	
	Возврат "ЗакупкаПереработка";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция СпособПополненияЗакупка()
	
	Возврат "Закупка";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция СпособПополненияПроизводство()
	
	Возврат "Производство";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция СпособПополненияПеремещение()
	
	Возврат "Перемещение";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция СпособПополненияВсе()
	
	Возврат "Все";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ГруппировкаНоменклатура()
	
	Возврат "Номенклатура";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ГруппировкаНоменклатураДень()
	
	Возврат "НоменклатураДень";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ГруппировкаДеньНоменклатура()
	
	Возврат "ДеньНоменклатура";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ГруппировкаЗаказНоменклатура()
	
	Возврат "ЗаказНоменклатура";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппировкиНоменклатура()
	
	Возврат "Номенклатура";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппировкиЗаказ()
	
	Возврат "Заказ";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппировкиЗаказРекомендации()
	
	Возврат "ЗаказРекомендации";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппировкиПериод()
	
	Возврат "Период";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппировкиНачальныйОстаток()
	
	Возврат "НачальныйОстаток";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппировкиКонечныйОстаток()
	
	Возврат "КонечныйОстаток";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппировкиПоступление()
	
	Возврат "Поступление";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппировкиПотребность()
	
	Возврат "Потребность";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппировкиМинимальныйЗапас()
	
	Возврат "МинимальныйЗапас";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппировкиМаксимальныйЗапас()
	
	Возврат "МаксимальныйЗапас";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппировкиРекомендовано()
	
	Возврат "Рекомендовано";	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппировкиИсточник()
	
	Возврат "Источник";	
	
КонецФункции 

#КонецОбласти 

#КонецОбласти

