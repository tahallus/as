
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДатаПроизводства = ТекущаяДата();
	ДатаПроизводстваДоИзменения = ДатаПроизводства;
	ДатаПланирования = ДатаПроизводства;
	ДатаПланированияДоИзменения = ДатаПланирования;
	Исполнитель = Справочники.Сотрудники.ПустаяСсылка();
		
	ВосстановитьНастройкиОтборов();
	
	ИспользоватьПодсистемуРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы");
	ИспользоватьТехоперации = ПолучитьФункциональнуюОпцию("ИспользоватьТехоперации");
	ИспользоватьСтруктурныеЕдиницы = ПолучитьФункциональнуюОпцию("УчетПоНесколькимПодразделениям");
	ИспользоватьСклады = ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам");
	ИспользоватьВидыЗаказНарядов = ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказНарядов") И ИспользоватьПодсистемуРаботы;
	ИспользоватьВидыЗаказовПокупателей = ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей");
	ВыполнениеЭтаповРазнымиПодразделениями = ПолучитьФункциональнуюОпцию("ВыполнениеЭтаповРазнымиПодразделениями");
	
	Элементы.ЗаказыСтруктурнаяЕдиница.Видимость = ИспользоватьСтруктурныеЕдиницы;
	Если НЕ ИспользоватьТехоперации Тогда
		Элементы.ДатаПроизводства.Заголовок = НСтр("ru = 'Документы производства на дату'");
	КонецЕсли;
	
	ПоказатьОписание = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("ВыполнениеЭтапов",
		"ПоказатьОписаниеПриОткрытии", Истина);
	Если ПоказатьОписание Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ПанельОписание;
		Элементы.ВыполнитьЭтапы.Доступность = Ложь;
		Элементы.ГруппаСвернутьРазвернуть.Доступность = Ложь;
		ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить("ВыполнениеЭтапов", "ПоказатьОписаниеПриОткрытии", Ложь);
	КонецЕсли; 
	
	ЗаполнитьДеревоЗаказов();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьЗаголовок();
	Если НЕ ПоказатьОписание Тогда
		РазвернутьДеревоЗаказов(); 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
		
	Если НЕ ЗавершениеРаботы Тогда
		//УНФ.ОтборыСписка
		СохранитьНастройкиОтборов();
		//Конец УНФ.ОтборыСписка
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура Подключаемый_ЭтапПометкаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	НомерЭтапа = СтрЗаменить(Элемент.Имя, "ЗаказыЭтапПометка", "");
	
	ТекущаяСтрока = Элементы.Заказы.ТекущиеДанные;
	ПриИзмененииПометкиЭтапа(ТекущаяСтрока, НомерЭтапа);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСтруктурнаяЕдиницаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание=0 Тогда
		
		ТекущаяСтрока = Элементы.Заказы.ТекущиеДанные;
		ДанныеВыбора = ПодразделенияПоЭтапу(ПредопределенноеЗначение("Справочник.ЭтапыПроизводства.ЗавершениеПроизводства"));
		СтандартнаяОбработка = (ДанныеВыбора.Количество()=0);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭтапСтруктурнаяЕдиницаАвтоподбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание=0 Тогда
		
		НомерЭтапа = СтрЗаменить(Элемент.Имя, "ЗаказыЭтапСтруктурнаяЕдиница", "");
		ТекущаяСтрока = Элементы.Заказы.ТекущиеДанные;
		ДанныеВыбора = ПодразделенияПоЭтапу(ТекущаяСтрока["Этап" + НомерЭтапа]);
		СтандартнаяОбработка = (ДанныеВыбора.Количество()=0);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСтруктурнаяЕдиницаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Заказы.ТекущиеДанные;
	ПриИзмененииСтруктурнойЕдиницы(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСтруктурнойЕдиницы(ТекущаяСтрока)
	
	Если ТекущаяСтрока.Уровень=1 Тогда
		Если НЕ ВыполнениеЭтаповРазнымиПодразделениями Тогда
			Для ии = 1 По КоличествоЭтапов Цикл
				ТекущаяСтрока["СтруктурнаяЕдиница" + ии] = ТекущаяСтрока.СтруктурнаяЕдиница;
			КонецЦикла; 
		КонецЕсли; 
		Для каждого ПодСтрока Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
			Если ПодСтрока.ЕстьНедоступныеЭтапы ИЛИ ПодСтрока.ЕстьСохраненныеДокументы Тогда
				Продолжить;
			КонецЕсли; 
			ПодСтрока.СтруктурнаяЕдиница = ТекущаяСтрока.СтруктурнаяЕдиница;
			Если НЕ ВыполнениеЭтаповРазнымиПодразделениями Тогда
				Для ии = 1 По КоличествоЭтапов Цикл
					ПодСтрока["СтруктурнаяЕдиница" + ии] = ПодСтрока.СтруктурнаяЕдиница;
				КонецЦикла; 
			КонецЕсли; 
		КонецЦикла;
		ТекущаяСтрока.СтруктурнаяЕдиница = ОдинаковоеЗначение(ТекущаяСтрока, "СтруктурнаяЕдиница");
	ИначеЕсли ТекущаяСтрока.Уровень=2 Тогда
		СтрокаРодитель = ТекущаяСтрока.ПолучитьРодителя();
		СтрокаРодитель.СтруктурнаяЕдиница = ОдинаковоеЗначение(СтрокаРодитель, "СтруктурнаяЕдиница");
		Если НЕ ВыполнениеЭтаповРазнымиПодразделениями Тогда
			Для ии = 1 По КоличествоЭтапов Цикл
				ТекущаяСтрока["СтруктурнаяЕдиница" + ии] = ТекущаяСтрока.СтруктурнаяЕдиница;
				СтрокаРодитель["СтруктурнаяЕдиница" + ии] = ОдинаковоеЗначение(СтрокаРодитель, "СтруктурнаяЕдиница", ии);
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭтапСтруктурнаяЕдиницаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	НомерЭтапа = СтрЗаменить(Элемент.Имя, "ЗаказыЭтапСтруктурнаяЕдиница", "");
	ТекущаяСтрока = Элементы.Заказы.ТекущиеДанные;
	ПриИзмененииСтруктурнойЕдиницыЭтапа(ТекущаяСтрока, НомерЭтапа);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСтруктурнойЕдиницыЭтапа(ТекущаяСтрока, НомерЭтапа)
	
	Если ТекущаяСтрока.Уровень=1 Тогда
		Для каждого ПодСтрока Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
			Если ПодСтрока["ЭтапНедоступен" + НомерЭтапа] ИЛИ ПодСтрока["ЭтапСкрыт" + НомерЭтапа] Тогда
				Продолжить;
			КонецЕсли; 
			ПодСтрока["СтруктурнаяЕдиница" + НомерЭтапа] = ТекущаяСтрока["СтруктурнаяЕдиница" + НомерЭтапа];
		КонецЦикла;
	ИначеЕсли ТекущаяСтрока.Уровень=2 Тогда
		СтрокаРодитель = ТекущаяСтрока.ПолучитьРодителя();
		СтрокаРодитель["СтруктурнаяЕдиница" + НомерЭтапа] = ОдинаковоеЗначение(СтрокаРодитель, "СтруктурнаяЕдиница", НомерЭтапа);
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭтапИсполнительПриИзменении(Элемент)
	
	Модифицированность = Истина;
	НомерЭтапа = СтрЗаменить(Элемент.Имя, "ЗаказыЭтапИсполнитель", "");
	ТекущаяСтрока = Элементы.Заказы.ТекущиеДанные;
	ПриИзмененииИсполнителяЭтапа(ТекущаяСтрока, НомерЭтапа);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииИсполнителяЭтапа(ТекущаяСтрока, НомерЭтапа)
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока["Исполнитель" + НомерЭтапа]) Тогда
		ТекущаяСтрока["Исполнитель" + НомерЭтапа] = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	КонецЕсли; 
	Если ТекущаяСтрока.Уровень=1 Тогда
		Для каждого ПодСтрока Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
			Если ПодСтрока["ЭтапНедоступен" + НомерЭтапа] 
				ИЛИ ПодСтрока["ЭтапСкрыт" + НомерЭтапа]
				ИЛИ ПодСтрока["ИсполнительСкрыт" + НомерЭтапа]
				ИЛИ НЕ ПодСтрока["ВыбиратьИсполнителя" + НомерЭтапа]
				Тогда
				Продолжить;
			КонецЕсли; 
			ПодСтрока["Исполнитель" + НомерЭтапа] = ТекущаяСтрока["Исполнитель" + НомерЭтапа];
		КонецЦикла;
	ИначеЕсли ТекущаяСтрока.Уровень=2 Тогда
		СтрокаРодитель = ТекущаяСтрока.ПолучитьРодителя();
		СтрокаРодитель["Исполнитель" + НомерЭтапа] = ОдинаковоеЗначение(СтрокаРодитель, "Исполнитель", НомерЭтапа);
		Если НЕ ЗначениеЗаполнено(СтрокаРодитель["Исполнитель" + НомерЭтапа]) Тогда
			СтрокаРодитель["Исполнитель" + НомерЭтапа] = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
		КонецЕсли; 
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭтапИсполнительОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.Заказы.ТекущиеДанные;
	НомерЭтапа = СтрЗаменить(Элемент.Имя, "ЗаказыЭтапИсполнитель", "");
	ИмяПоля = СтрШаблон("Исполнитель%1", НомерЭтапа);
	ТекущаяСтрока[ИмяПоля] = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Заказы.ТекущиеДанные;
	Если ТекущаяСтрока.Уровень=2 Тогда
		СтрокаЗаказ = ТекущаяСтрока.ПолучитьРодителя();
	Иначе
		СтрокаЗаказ = ТекущаяСтрока;
	КонецЕсли; 
	
	Если Найти(Поле.Имя, "ЗаказыЭтапЗаголовок")>0 Тогда
		
		Модифицированность = Истина;
		
		НомерЭтапа = СтрЗаменить(Поле.Имя, "ЗаказыЭтапЗаголовок", "");
		
		Если ТекущаяСтрока["ЭтапНедоступен" + НомерЭтапа] Тогда
			Возврат;
		КонецЕсли; 
		
		ТекущаяСтрока["ЭтапПометка" + НомерЭтапа] = НЕ ТекущаяСтрока["ЭтапПометка" + НомерЭтапа];
		ПриИзмененииПометкиЭтапа(ТекущаяСтрока, НомерЭтапа);
		
	ИначеЕсли Найти(Поле.Имя, "ЗаказыЭтапСборкаЗапасовПредставление")>0 Тогда 
		
		НомерЭтапа = СтрЗаменить(Поле.Имя, "ЗаказыЭтапСборкаЗапасовПредставление", "");
		Если ЗначениеЗаполнено(ТекущаяСтрока["СборкаЗапасов" + НомерЭтапа]) Тогда
			ПоказатьЗначение(, ТекущаяСтрока["СборкаЗапасов" + НомерЭтапа]);
		ИначеЕсли НЕ ПустаяСтрока(ТекущаяСтрока["СборкаЗапасовПредставление" + НомерЭтапа]) Тогда
			СписокДокументов = ДокументыПоЭтапу(
			ТекущаяСтрока.Номенклатура,
			ТекущаяСтрока.Характеристика,
			ТекущаяСтрока.Партия,
			ТекущаяСтрока.Спецификация,
			?(ЗначениеЗаполнено(СтрокаЗаказ.ЗаказПокупателя), СтрокаЗаказ.ЗаказПокупателя, СтрокаЗаказ.ЗаказНаПроизводство),
			ТекущаяСтрока["Этап" + НомерЭтапа],
			"СборкаЗапасов");
			Оповещение = Новый ОписаниеОповещения("ЗаказыВыборЗавершение", ЭтотОбъект);
			ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент);
		КонецЕсли; 
		
	ИначеЕсли Найти(Поле.Имя, "ЗаказыЭтапСдельныйНарядПредставление")>0 Тогда 
		
		НомерЭтапа = СтрЗаменить(Поле.Имя, "ЗаказыЭтапСдельныйНарядПредставление", "");
		Если ЗначениеЗаполнено(ТекущаяСтрока["СдельныйНаряд" + НомерЭтапа]) Тогда
			ПоказатьЗначение(, ТекущаяСтрока["СдельныйНаряд" + НомерЭтапа]);
		ИначеЕсли НЕ ПустаяСтрока(ТекущаяСтрока["СдельныйНарядПредставление" + НомерЭтапа]) Тогда 
			СписокДокументов = ДокументыПоЭтапу(
			ТекущаяСтрока.Номенклатура,
			ТекущаяСтрока.Характеристика,
			ТекущаяСтрока.Партия,
			ТекущаяСтрока.Спецификация,
			?(ЗначениеЗаполнено(СтрокаЗаказ.ЗаказПокупателя), СтрокаЗаказ.ЗаказПокупателя, СтрокаЗаказ.ЗаказНаПроизводство),
			ТекущаяСтрока["Этап" + НомерЭтапа],
			"СдельныйНаряд");
			Оповещение = Новый ОписаниеОповещения("ЗаказыВыборЗавершение", ЭтотОбъект);
			ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент);
		КонецЕсли;
		
	ИначеЕсли Поле.Имя="ЗаказыПредставление" И ТекущаяСтрока.Уровень=1 Тогда
		
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ТекущаяСтрока.ЗаказНаПроизводство) Тогда
			ПоказатьЗначение(, ТекущаяСтрока.ЗаказНаПроизводство);
		Иначе
			ПоказатьЗначение(, ТекущаяСтрока.ЗаказПокупателя);
		КонецЕсли; 
		
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыВыборЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение)<>Тип("ЭлементСпискаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ВыбранноеЗначение.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПометкиЭтапа(ТекущаяСтрока, НомерЭтапа)
	
	ОтметитьПредыдущиеЭтапы(ТекущаяСтрока, НомерЭтапа);
	ОтменитьСледующиеЭтапы(ТекущаяСтрока, НомерЭтапа);
	Если ТекущаяСтрока.Уровень=1 Тогда
		Для каждого ПодСтрока Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
			ПодСтрока["ЭтапПометка" + НомерЭтапа] = ТекущаяСтрока["ЭтапПометка" + НомерЭтапа];
			ОтметитьПредыдущиеЭтапы(ПодСтрока, НомерЭтапа);
			ОтменитьСледующиеЭтапы(ПодСтрока, НомерЭтапа);
			УстановитьСтруктурнуюЕдиницуПоУмолчанию(ПодСтрока, НомерЭтапа);
		КонецЦикла;
	ИначеЕсли ТекущаяСтрока.Уровень=2 Тогда
		ОбновитьРодителя(ТекущаяСтрока, НомерЭтапа);
		УстановитьСтруктурнуюЕдиницуПоУмолчанию(ТекущаяСтрока, НомерЭтапа);
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРодителя(ТекущаяСтрока, НомерЭтапа)
	
	Если ТекущаяСтрока.Уровень<>2 Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТекущаяСтрока["ЭтапНедоступен" + НомерЭтапа] ИЛИ ТекущаяСтрока["ЭтапСкрыт" + НомерЭтапа] Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЗаказ = ТекущаяСтрока.ПолучитьРодителя();
	
	Если СтрокаЗаказ["ЭтапНедоступен" + НомерЭтапа] ИЛИ СтрокаЗаказ["ЭтапСкрыт" + НомерЭтапа] Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ТекущаяСтрока["ЭтапПометка" + НомерЭтапа] И СтрокаЗаказ["ЭтапПометка" + НомерЭтапа] Тогда
		СтрокаЗаказ["ЭтапПометка" + НомерЭтапа] = Ложь;
	ИначеЕсли ТекущаяСтрока["ЭтапПометка" + НомерЭтапа] И НЕ СтрокаЗаказ["ЭтапПометка" + НомерЭтапа] Тогда 
		СтрокаЗаказ["ЭтапПометка" + НомерЭтапа] = ОдинаковоеЗначение(СтрокаЗаказ, "ЭтапПометка", НомерЭтапа);
	КонецЕсли;
	ОбновитьОтметкуВыполненных(СтрокаЗаказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьПредыдущиеЭтапы(ТекущаяСтрока, НомерЭтапа)
	
	Если НЕ ТекущаяСтрока["ЭтапПометка" + НомерЭтапа] Тогда
		Возврат;
	КонецЕсли; 
	
	Для ии = 1 По Число(НомерЭтапа) - 1 Цикл
		Если ТекущаяСтрока["ЭтапНедоступен" + ии] ИЛИ ТекущаяСтрока["ЭтапСкрыт" + ии] Тогда
			Продолжить;
		КонецЕсли;
		ТекущаяСтрока["ЭтапПометка" + ии] = ТекущаяСтрока["ЭтапПометка" + НомерЭтапа];
		УстановитьСтруктурнуюЕдиницуПоУмолчанию(ТекущаяСтрока, ии);
		ОбновитьРодителя(ТекущаяСтрока, ии);
	КонецЦикла;
	
	ОбновитьОтметкуВыполненных(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСледующиеЭтапы(ТекущаяСтрока, НомерЭтапа)
	
	Если ТекущаяСтрока["ЭтапПометка" + НомерЭтапа] Тогда
		Возврат;
	КонецЕсли; 
	
	Для ии = Число(НомерЭтапа) + 1 По КоличествоЭтапов Цикл
		Если ТекущаяСтрока["ЭтапНедоступен" + ии] ИЛИ ТекущаяСтрока["ЭтапСкрыт" + ии] Тогда
			Продолжить;
		КонецЕсли;
		ТекущаяСтрока["ЭтапПометка" + ии] = ТекущаяСтрока["ЭтапПометка" + НомерЭтапа];
		ОбновитьРодителя(ТекущаяСтрока, ии);
	КонецЦикла; 
	
	ОбновитьОтметкуВыполненных(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтметкуВыполненных(ТекущаяСтрока)
	
	ТекущаяСтрока.ЕстьВыполненныеЭтапы = Ложь;
	ТекущаяСтрока.ЕстьСохраненныеДокументы = Ложь;
	ТекущаяСтрока.ЕстьНедоступныеЭтапы = Ложь;
	Для ии = 1 По КоличествоЭтапов Цикл
		Если ТекущаяСтрока["ЭтапПометка" + ии] Тогда
			ТекущаяСтрока.ЕстьВыполненныеЭтапы = Истина;
		КонецЕсли; 
		Если ТекущаяСтрока["ЭтапСтараяПометка" + ии] Тогда
			ТекущаяСтрока.ЕстьСохраненныеДокументы = Истина;
		КонецЕсли; 
		Если ТекущаяСтрока["ЭтапНедоступен" + ии] Тогда
			ТекущаяСтрока.ЕстьНедоступныеЭтапы = Истина;
		КонецЕсли; 
	КонецЦикла; 	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтруктурнуюЕдиницуПоУмолчанию(ТекущаяСтрока, НомерЭтапа)
	
	Если НЕ ВыполнениеЭтаповРазнымиПодразделениями Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТекущаяСтрока.Уровень<>2 Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТекущаяСтрока["ЭтапПометка" + НомерЭтапа] И НЕ ЗначениеЗаполнено(ТекущаяСтрока["СтруктурнаяЕдиница" + НомерЭтапа]) Тогда
		СписокПодразделений = ПодразделенияПоЭтапу(ТекущаяСтрока["Этап" + НомерЭтапа]);
		ОсновнаяСтруктурнаяЕдиница = Неопределено;
		Для каждого ЭлементСписка Из СписокПодразделений Цикл
			Если ЭлементСписка.Пометка Тогда
				ОсновнаяСтруктурнаяЕдиница = ЭлементСписка.Значение;
			КонецЕсли; 
		КонецЦикла;
		ТекущаяСтрока["СтруктурнаяЕдиница" + НомерЭтапа] = ОсновнаяСтруктурнаяЕдиница;
		Если ТекущаяСтрока.Уровень=2 Тогда
			СтрокаРодитель = ТекущаяСтрока.ПолучитьРодителя();
			СтрокаРодитель["СтруктурнаяЕдиница" + НомерЭтапа] = ОдинаковоеЗначение(СтрокаРодитель, "СтруктурнаяЕдиница", НомерЭтапа);
		КонецЕсли; 
	КонецЕсли;
	
	Если ТекущаяСтрока.ЕстьВыполненныеЭтапы И НЕ ТекущаяСтрока.ЕстьНедоступныеЭтапы И НЕ ЗначениеЗаполнено(ТекущаяСтрока.СтруктурнаяЕдиница) Тогда
		СписокПодразделений = ПодразделенияПоЭтапу(ПредопределенноеЗначение("Справочник.ЭтапыПроизводства.ЗавершениеПроизводства"));
		ОсновнаяСтруктурнаяЕдиница = Неопределено;
		Для каждого ЭлементСписка Из СписокПодразделений Цикл
			Если ЭлементСписка.Пометка Тогда
				ОсновнаяСтруктурнаяЕдиница = ЭлементСписка.Значение;
			КонецЕсли; 
		КонецЦикла;
		ТекущаяСтрока.СтруктурнаяЕдиница = ОсновнаяСтруктурнаяЕдиница;
		Если ТекущаяСтрока.Уровень=2 Тогда
			СтрокаРодитель = ТекущаяСтрока.ПолучитьРодителя();
			СтрокаРодитель.СтруктурнаяЕдиница = ОдинаковоеЗначение(СтрокаРодитель, "СтруктурнаяЕдиница");
		КонецЕсли; 
	КонецЕсли;
	
	Если ТекущаяСтрока["Этап" + НомерЭтапа]=ПредопределенноеЗначение("Справочник.ЭтапыПроизводства.ЗавершениеПроизводства")
		И ЗначениеЗаполнено(ТекущаяСтрока.СтруктурнаяЕдиница) Тогда
		ТекущаяСтрока["СтруктурнаяЕдиница" + НомерЭтапа] = ТекущаяСтрока.СтруктурнаяЕдиница;
		Если ТекущаяСтрока.Уровень=2 Тогда
			СтрокаРодитель = ТекущаяСтрока.ПолучитьРодителя();
			СтрокаРодитель["СтруктурнаяЕдиница" + НомерЭтапа] = ОдинаковоеЗначение(СтрокаРодитель, "СтруктурнаяЕдиница", НомерЭтапа);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ДанныеСобытия)<>Тип("ФиксированнаяСтруктура") ИЛИ НЕ ДанныеСобытия.Свойство("Href") Тогда
		Возврат;
	КонецЕсли; 
	
	Если Найти(ДанныеСобытия.Href, "Обновить")>0 Тогда
		ПоказатьОписание = Ложь;
		ЗаполнитьДеревоЗаказовКлиент();
		УправлениеФормой(ЭтотОбъект);
	ИначеЕсли Найти(ДанныеСобытия.Href, "СписокПодразделений")>0 Тогда
		СтруктураОтбора = Новый Структура("ТипСтруктурнойЕдиницы", ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение"));
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", "Подразделения");
		ОткрытьФорму("Справочник.СтруктурныеЕдиницы.ФормаСписка", ПараметрыФормы);
	ИначеЕсли Найти(ДанныеСобытия.Href, "НастройкиАвтоперемещения")>0 Тогда
		СтруктураПараметров = СтруктураОткрытияНастроекАвтоперемещения();
		Оповещение = Новый ОписаниеОповещения("НастройкиАвтоперемещенияЗавершение", ЭтотОбъект);
		ОткрытьФорму("Справочник.СтруктурныеЕдиницы.Форма.ФормаАвтоперемещенияЗапасов", СтруктураПараметров,,,,,Оповещение);
	ИначеЕсли Найти(ДанныеСобытия.Href, "ВидыПроизводства")>0 Тогда
		ОткрытьФорму("Справочник.ВидыПроизводства.ФормаСписка");
	ИначеЕсли Найти(ДанныеСобытия.Href, "Спецификации")>0 Тогда
		ОткрытьФорму("Справочник.Спецификации.ФормаСписка");
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураОткрытияНастроекАвтоперемещения()
	
	СтруктураПараметров = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение,
		"ИсточникПеремещения,ПолучательПеремещения,ПолучательОтходов,ИсточникСписанияНаРасходы,ПолучательСписанияНаРасходы,ИсточникПередачиВЭксплуатацию,"
		+"ПолучательПередачиВЭксплуатацию,ИсточникВозвратаИзЭксплуатации,ПолучательВозвратаИзЭксплуатации,ЯчейкаИсточникаПеремещения,ЯчейкаПолучателяПеремещения,"
		+"ЯчейкаПолучателяОтходов,ЯчейкаИсточникаСписанияНаРасходы,ЯчейкаПолучателяСписанияНаРасходы,ЯчейкаИсточникаПередачиВЭксплуатацию,"
		+"ЯчейкаПолучателяПередачиВЭксплуатацию,ЯчейкаИсточникаВозвратаИзЭксплуатации,ЯчейкаПолучателяВозвратаИзЭксплуатации,ТипСтруктурнойЕдиницы");
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура НастройкиАвтоперемещенияЗавершение(ПараметрыЗаполнения, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ПараметрыЗаполнения) = Тип("Структура") Тогда
		СохранитьНастройкиАвтоперемещения(ПараметрыЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиАвтоперемещения(ПараметрыЗаполнения)
	
	СправочникОбъект = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(СправочникОбъект, ПараметрыЗаполнения);
	СправочникОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураДанных = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ОбновитьЗавершение", ЭтотОбъект, СтруктураДанных);
	ПроверитьМодифицированностьИПродолжить(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗавершение(Результат, ДополнительныеДанные) Экспорт
	
	Если Результат<>КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьДеревоЗаказовКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	Если НЕ ОбязательныеРеквизитыЗаполнены() Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапуститьФоновоеЗадание();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзготовителя(Команда)
	
	Для каждого СтрокаЗаказ Из Заказы.ПолучитьЭлементы() Цикл
		Для каждого СтрокаПродукция Из СтрокаЗаказ.ПолучитьЭлементы() Цикл
			Если ВыполнениеЭтаповРазнымиПодразделениями Тогда
				Для ии = 1 По КоличествоЭтапов Цикл
					Если СтрокаПродукция["ЭтапНедоступен" + ии] Тогда
						Продолжить;
					КонецЕсли;
					Если НЕ СтрокаПродукция.ЕстьСохраненныеДокументы 
						И НЕ СтрокаПродукция.ЕстьНедоступныеЭтапы 
						И НЕ ЗначениеЗаполнено(СтрокаПродукция.ЗаказНаПроизводство)
						И СтрокаПродукция.ЕстьВыполненныеЭтапы Тогда
						СтрокаПродукция.СтруктурнаяЕдиница = Изготовитель;
					КонецЕсли; 
					Если СтрокаПродукция["ЭтапПометка" + ии] И НЕ СтрокаПродукция["ЭтапСтараяПометка" + ии] Тогда
						СтрокаПродукция["СтруктурнаяЕдиница" + ии] = Изготовитель;
						ПриИзмененииСтруктурнойЕдиницыЭтапа(СтрокаПродукция, ии);
					КонецЕсли; 
				КонецЦикла;
			ИначеЕсли СтрокаПродукция.ЕстьВыполненныеЭтапы 
				И НЕ СтрокаПродукция.ЕстьСохраненныеДокументы 
				И НЕ ЗначениеЗаполнено(СтрокаПродукция.ЗаказНаПроизводство) Тогда 
				СтрокаПродукция.СтруктурнаяЕдиница = Изготовитель;
				ПриИзмененииСтруктурнойЕдиницы(СтрокаПродукция);
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	Изготовитель = Неопределено;
	УправлениеФормой(ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителя(Команда)
	
	Для каждого СтрокаЗаказ Из Заказы.ПолучитьЭлементы() Цикл
		Для каждого СтрокаПродукция Из СтрокаЗаказ.ПолучитьЭлементы() Цикл
			Для ии = 1 По КоличествоЭтапов Цикл
				Если СтрокаПродукция["ЭтапНедоступен" + ии] ИЛИ НЕ СтрокаПродукция["ВыбиратьИсполнителя" + ии] Тогда
					Продолжить;
				КонецЕсли;
				Если СтрокаПродукция["ЭтапПометка" + ии] И НЕ СтрокаПродукция["ЭтапСтараяПометка" + ии] Тогда
					СтрокаПродукция["Исполнитель" + ии] = Исполнитель;
					Если НЕ ЗначениеЗаполнено(СтрокаПродукция["Исполнитель" + ии]) Тогда
						СтрокаПродукция["Исполнитель" + ии] = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
					КонецЕсли; 
					ПриИзмененииИсполнителяЭтапа(СтрокаПродукция, ии);
				КонецЕсли; 
			КонецЦикла;
		КонецЦикла; 
	КонецЦикла;
	Исполнитель = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	УправлениеФормой(ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЭтап(Команда)
	
	Если НЕ ЗначениеЗаполнено(ОтметитьЭтап) Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого СтрокаЗаказ Из Заказы.ПолучитьЭлементы() Цикл
		Для каждого СтрокаПродукция Из СтрокаЗаказ.ПолучитьЭлементы() Цикл
			Для ии = 1 По КоличествоЭтапов Цикл
				Если СтрокаПродукция["ЭтапНедоступен" + ии] 
					ИЛИ СтрокаПродукция["ЭтапСкрыт" + ии] 
					ИЛИ СтрокаПродукция["Этап" + ии]<>ОтметитьЭтап Тогда
					Продолжить;
				КонецЕсли;
				СтрокаПродукция["ЭтапПометка" + ии] = Истина;
				ПриИзмененииПометкиЭтапа(СтрокаПродукция, ии);
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	ОтметитьЭтап = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	РазвернутьДеревоЗаказов();	
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	СвернутьДеревоЗаказов();	
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнитьДеревоЗаказовКлиент()
	
	ЗаполнитьДеревоЗаказов();
	РазвернутьДеревоЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоЗаказов()
	
	Для каждого Стр Из Заказы.ПолучитьЭлементы() Цикл
		Элементы.Заказы.Развернуть(Стр.ПолучитьИдентификатор());
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДеревоЗаказов()
	
	Для каждого Стр Из Заказы.ПолучитьЭлементы() Цикл
		Элементы.Заказы.Свернуть(Стр.ПолучитьИдентификатор());
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоЗаказов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыПроизводства.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыПроизводства КАК ВидыПроизводства";
	ЕстьВидыПроизводства = НЕ Запрос.Выполнить().Пустой();
	
	Элементы.ОтметитьЭтап.СписокВыбора.Очистить();
	
	СхемаКомпоновкиДанных = Обработки.ВыполнениеЭтапов.ПолучитьМакет("СхемаЗаполнения");
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	НастройкиКомпоновщика = КомпоновщикНастроек.Настройки;
	
	ПараметрыНастройки = НастройкиКомпоновщика.ПараметрыДанных;

	Параметр = ПараметрыНастройки.Элементы.Найти("ДатаПланирования");
	Параметр.Использование = Истина;
	Параметр.Значение = ДатаПланирования;

	Параметр = ПараметрыНастройки.Элементы.Найти("ДатаПроизводства");
	Параметр.Использование = Истина;
	Параметр.Значение = ДатаПроизводства;

	Параметр = ПараметрыНастройки.Элементы.Найти("ТолькоЗапланированные");
	Параметр.Использование = Истина;
	Параметр.Значение = ТолькоЗапланированные;
	
	// Фильтры из боковой панели
	Для каждого СтрокаМетки Из ДанныеМеток Цикл
		Поле = Новый ПолеКомпоновкиДанных(СтрокаМетки.ИмяПоляОтбора);
		НайденныйЭлемент = Неопределено;
		Для каждого ЭлементОтбора Из НастройкиКомпоновщика.Отбор.Элементы Цикл
			Если ЭлементОтбора.ЛевоеЗначение=Поле 
				И ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке Тогда
				НайденныйЭлемент = ЭлементОтбора;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		Если НайденныйЭлемент=Неопределено Тогда
			НайденныйЭлемент = НастройкиКомпоновщика.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НайденныйЭлемент.ЛевоеЗначение = Поле;
			НайденныйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			НайденныйЭлемент.ПравоеЗначение = Новый СписокЗначений;
		КонецЕсли; 
		НайденныйЭлемент.ПравоеЗначение.Добавить(СтрокаМетки.Метка);
	КонецЦикла; 

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновщика, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ДеревоЗаказов = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоЗаказов);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Заказы.ПолучитьЭлементы().Очистить();
	
	НовоеКоличествоЭтапов = 0;
	Для каждого СтрокаЗаказ Из ДеревоЗаказов.Строки Цикл
		Для каждого СтрокаПродукция Из СтрокаЗаказ.Строки Цикл
			НовоеКоличествоЭтапов = Макс(НовоеКоличествоЭтапов, СтрокаПродукция.КоличествоЭтапов);
		КонецЦикла; 
	КонецЦикла;  
	
	ОбновитьРеквизитыДереваЗаказов(НовоеКоличествоЭтапов);
	ОбновитьЭлементыФормы(НовоеКоличествоЭтапов);
	
	Если НовоеКоличествоЭтапов<>КоличествоЭтапов Тогда
		КоличествоЭтапов = НовоеКоличествоЭтапов;
		ОбновитьУсловноеОформление();
	КонецЕсли; 
	
	БезПрефиксаИнформационнойБазы = Константы.ПредставлениеНомераДокументаБезПрефиксаИнформационнойБазы.Получить();
	БезПрефиксаПользователя = Константы.ПредставлениеНомераДокументаБезПрефиксаПользователя.Получить();
		
	// Заполнение дерева заказов и продукции
	Для каждого СтрокаЗаказ Из ДеревоЗаказов.Строки Цикл
		
		НоваяСтрокаЗаказ = Заказы.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗаказ, СтрокаЗаказ, "Организация, ЗаказПокупателя, ЗаказНаПроизводство, Контрагент");
		НоваяСтрокаЗаказ.Уровень = 1;
		НоваяСтрокаЗаказ.Представление = ПредставлениеЗаказов(НоваяСтрокаЗаказ);
		Для ии = СтрокаЗаказ.КоличествоЭтапов + 1 По КоличествоЭтапов Цикл
			НоваяСтрокаЗаказ["ЭтапСкрыт" + ии] = Истина;
		КонецЦикла; 
		Для каждого СтрокаПродукция Из СтрокаЗаказ.Строки Цикл
			Если ТолькоПоэтапное И СтрокаПродукция.КоличествоЭтапов<=1 Тогда
				Продолжить;
			КонецЕсли; 
			НоваяСтрокаПродукция = НоваяСтрокаЗаказ.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПродукция, СтрокаПродукция);
			НоваяСтрокаПродукция.Уровень = 2;
			НоваяСтрокаПродукция.Представление = ПредставлениеНоменклатуры(НоваяСтрокаПродукция);
			Если НЕ ИспользоватьСтруктурныеЕдиницы Тогда
				НоваяСтрокаПродукция.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
			ИначеЕсли НЕ ВыполнениеЭтаповРазнымиПодразделениями И НЕ ЗначениеЗаполнено(НоваяСтрокаПродукция.СтруктурнаяЕдиница) Тогда
				НоваяСтрокаПродукция.СтруктурнаяЕдиница = СтрокаПродукция.ЗаказНаПроизводствоСтруктурнаяЕдиница;
			КонецЕсли; 
			Для ии = СтрокаПродукция.КоличествоЭтапов + 1 По КоличествоЭтапов Цикл
				НоваяСтрокаПродукция["ЭтапСкрыт" + ии] = Истина;
			КонецЦикла; 
			НомерЭтапа = 1;
			Для каждого СтрокаЭтап Из СтрокаПродукция.Строки Цикл
				НоваяСтрокаПродукция["ИсполнительПредставление" + НомерЭтапа] = Строка(СтрокаЭтап.ИсполнительПоУмолчанию);
				НоваяСтрокаПродукция["Этап" + НомерЭтапа] = СтрокаЭтап.Этап;
				Если ЗначениеЗаполнено(СтрокаЭтап.Этап) И Элементы.ОтметитьЭтап.СписокВыбора.НайтиПоЗначению(СтрокаЭтап.Этап)=Неопределено Тогда
					Элементы.ОтметитьЭтап.СписокВыбора.Добавить(СтрокаЭтап.Этап, Строка(СтрокаЭтап.Этап));
				КонецЕсли; 
				НоваяСтрокаПродукция["СборкаЗапасов" + НомерЭтапа] = СтрокаЭтап.СборкаЗапасов;
				Если ЗначениеЗаполнено(СтрокаЭтап.СборкаЗапасов) Тогда
					НоваяСтрокаПродукция["СборкаЗапасовПредставление" + НомерЭтапа] = 
					СтрШаблон(НСтр("ru = '№%1 от %2'"), 
					ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаЭтап.СборкаЗапасовНомер, БезПрефиксаИнформационнойБазы, БезПрефиксаПользователя),
					Формат(СтрокаЭтап.СборкаЗапасовДата, "ДЛФ=D"));
				ИначеЕсли СтрокаЭтап.КоличествоСборокЗапасов>1 Тогда
					НоваяСтрокаПродукция["СборкаЗапасовПредставление" + НомерЭтапа] = 
					СтрШаблон(НСтр("ru = 'Производство (%1)'"), 
					СтрокаЭтап.КоличествоСборокЗапасов);
					НоваяСтрокаПродукция["ЭтапНедоступен" + НомерЭтапа] = Истина;
				КонецЕсли; 
				НоваяСтрокаПродукция["СдельныйНаряд" + НомерЭтапа] = СтрокаЭтап.СдельныйНаряд;
				Если ЗначениеЗаполнено(СтрокаЭтап.СдельныйНаряд) Тогда
					НоваяСтрокаПродукция["СдельныйНарядПредставление" + НомерЭтапа] = 
					СтрШаблон(НСтр("ru = '№%1 от %2'"), 
					ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаЭтап.СдельныйНарядНомер, БезПрефиксаИнформационнойБазы, БезПрефиксаПользователя),
					Формат(СтрокаЭтап.СдельныйНарядДата, "ДЛФ=D"));
				ИначеЕсли СтрокаЭтап.КоличествоСдельныхНарядов>1 Тогда
					НоваяСтрокаПродукция["СдельныйНарядПредставление" + НомерЭтапа] = 
					СтрШаблон(НСтр("ru = 'Сдельный наряд (%1)'"), 
					СтрокаЭтап.КоличествоСдельныхНарядов);
					НоваяСтрокаПродукция["ЭтапНедоступен" + НомерЭтапа] = Истина;
				КонецЕсли;
				Если ВыполнениеЭтаповРазнымиПодразделениями Тогда
					НоваяСтрокаПродукция["СтруктурнаяЕдиница" + НомерЭтапа] = СтрокаЭтап.СборкаЗапасовИсполнитель;
				Иначе
					НоваяСтрокаПродукция["СтруктурнаяЕдиница" + НомерЭтапа] = НоваяСтрокаПродукция.СтруктурнаяЕдиница;
				КонецЕсли; 
				НоваяСтрокаПродукция["Исполнитель" + НомерЭтапа] = СтрокаЭтап.СдельныйНарядИсполнитель;
				Если НЕ ЗначениеЗаполнено(НоваяСтрокаПродукция["Исполнитель" + НомерЭтапа]) Тогда
					НоваяСтрокаПродукция["Исполнитель" + НомерЭтапа] = Справочники.Сотрудники.ПустаяСсылка();
				КонецЕсли; 
				НоваяСтрокаПродукция["ИсполнительСкрыт" + НомерЭтапа] = СтрокаЭтап.ИсполнительСкрыт;
				НоваяСтрокаПродукция["ВыбиратьИсполнителя" + НомерЭтапа] = СтрокаЭтап.ВыбиратьИсполнителя;
				Если СтрокаЭтап.Выполнено И НЕ СтрокаЭтап.ВЭтотДень Тогда
					НоваяСтрокаПродукция["ЭтапНедоступен" + НомерЭтапа] = Истина;
				КонецЕсли;
				НоваяСтрокаПродукция["ЭтапПометка" + НомерЭтапа] = СтрокаЭтап.Выполнено;
				НоваяСтрокаПродукция["ЭтапСтараяПометка" + НомерЭтапа] = СтрокаЭтап.Выполнено;
				НоваяСтрокаПродукция.ЕстьВыполненныеЭтапы = (НоваяСтрокаПродукция.ЕстьВыполненныеЭтапы ИЛИ СтрокаЭтап.Выполнено);
				НоваяСтрокаПродукция.ЕстьСохраненныеДокументы = (НоваяСтрокаПродукция.ЕстьСохраненныеДокументы ИЛИ СтрокаЭтап.Выполнено);
				НоваяСтрокаПродукция.ЕстьНедоступныеЭтапы = (НоваяСтрокаПродукция.ЕстьНедоступныеЭтапы ИЛИ НоваяСтрокаПродукция["ЭтапНедоступен" + НомерЭтапа]);
				НомерЭтапа = НомерЭтапа + 1;
				Если НомерЭтапа>КоличествоЭтапов Тогда
					Прервать;
				КонецЕсли; 
			КонецЦикла;
			НоваяСтрокаЗаказ.ЕстьВыполненныеЭтапы = ОдинаковоеЗначение(НоваяСтрокаЗаказ, "ЕстьВыполненныеЭтапы");
			НоваяСтрокаЗаказ.ЕстьСохраненныеДокументы = ОдинаковоеЗначение(НоваяСтрокаЗаказ, "ЕстьСохраненныеДокументы");
		КонецЦикла;
		
		Если НоваяСтрокаЗаказ.ПолучитьЭлементы().Количество()=0 Тогда
			Заказы.ПолучитьЭлементы().Удалить(НоваяСтрокаЗаказ);
			Продолжить;
		КонецЕсли; 
		
		// Настройка отображения строки заказа
		// 1. Проверка что в колонках располагаются одинаковые этапы
		ПредыдущаяСтрока = Неопределено;
		Если НоваяСтрокаЗаказ.ПолучитьЭлементы().Количество()<=1 Тогда
			Для ии = 1 По КоличествоЭтапов Цикл
				НоваяСтрокаЗаказ["ЭтапСкрыт" + ии] = Истина;
			КонецЦикла;
			НоваяСтрокаЗаказ.ЕстьНедоступныеЭтапы = Истина;
		Иначе
			Для каждого СтрокаПродукция Из НоваяСтрокаЗаказ.ПолучитьЭлементы() Цикл
				Если ПредыдущаяСтрока=Неопределено Тогда
					ПредыдущаяСтрока = СтрокаПродукция;
					Продолжить;
				КонецЕсли; 
				Для ии = 1 По КоличествоЭтапов Цикл
					Скрыт = Ложь;
					Если ПредыдущаяСтрока["Этап" + ии]<>СтрокаПродукция["Этап" + ии] 
						ИЛИ НЕ ЗначениеЗаполнено(ПредыдущаяСтрока["Этап" + ии]) 
						ИЛИ НЕ ЗначениеЗаполнено(СтрокаПродукция["Этап" + ии]) Тогда
						Скрыт = Истина;
					КонецЕсли; 
					Если Скрыт И НЕ НоваяСтрокаЗаказ["ЭтапСкрыт" + ии] Тогда
						НоваяСтрокаЗаказ["ЭтапСкрыт" + ии] = Истина;
					КонецЕсли;
				КонецЦикла;
				ПредыдущаяСтрока = СтрокаПродукция;
			КонецЦикла;
			Если ПредыдущаяСтрока<>Неопределено Тогда
				Для ии = 1 По КоличествоЭтапов Цикл
					Если НЕ НоваяСтрокаЗаказ["ЭтапНедоступен" + ии] Тогда
						НоваяСтрокаЗаказ["Этап" + ии] = ПредыдущаяСтрока["Этап" + ии];
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли; 
		// 2. Отметка выполненных этапов для заказов
		Для ии = 1 По КоличествоЭтапов Цикл
			НоваяСтрокаЗаказ["ЭтапПометка" + ии] = ЗначениеЗаполнено(НоваяСтрокаЗаказ["Этап" + ии]);
		КонецЦикла; 
		Для каждого СтрокаПродукция Из НоваяСтрокаЗаказ.ПолучитьЭлементы() Цикл
			Для ии = 1 По КоличествоЭтапов Цикл
				Если НоваяСтрокаЗаказ["ЭтапПометка" + ии] И НЕ СтрокаПродукция["ЭтапПометка" + ии] Тогда
					НоваяСтрокаЗаказ["ЭтапПометка" + ии] = Ложь;
				КонецЕсли; 
			    Если НоваяСтрокаЗаказ["ЭтапНедоступен" + ии] ИЛИ НоваяСтрокаЗаказ["ЭтапСкрыт" + ии] Тогда
					Продолжить;
				КонецЕсли;
				Если СтрокаПродукция["ЭтапНедоступен" + ии] Тогда
					 НоваяСтрокаЗаказ["ЭтапНедоступен" + ии] = Истина;
				КонецЕсли; 
			КонецЦикла;
		КонецЦикла;
		Для ии = 1 По КоличествоЭтапов Цикл
			НоваяСтрокаЗаказ["ЭтапСтараяПометка" + ии] = НоваяСтрокаЗаказ["ЭтапПометка" + ии];
		КонецЦикла;
		// 3. Доступность операций для этапов
		Для ии = 1 По КоличествоЭтапов Цикл
			НоваяСтрокаЗаказ["ИсполнительСкрыт" + ии] = Истина;
			НоваяСтрокаЗаказ["ВыбиратьИсполнителя" + ии] = Ложь;
		КонецЦикла; 
		Для каждого СтрокаПродукция Из НоваяСтрокаЗаказ.ПолучитьЭлементы() Цикл
			Для ии = 1 По КоличествоЭтапов Цикл
				Если НЕ НоваяСтрокаЗаказ["ЭтапНедоступен" + ии] 
					И НоваяСтрокаЗаказ["ИсполнительСкрыт" + ии] 
					И НЕ СтрокаПродукция["ИсполнительСкрыт" + ии] Тогда
					НоваяСтрокаЗаказ["ИсполнительСкрыт" + ии] = Ложь;
				КонецЕсли;
				Если НЕ НоваяСтрокаЗаказ["ЭтапНедоступен" + ии] 
					И НЕ НоваяСтрокаЗаказ["ВыбиратьИсполнителя" + ии] 
					И СтрокаПродукция["ВыбиратьИсполнителя" + ии] Тогда
					НоваяСтрокаЗаказ["ВыбиратьИсполнителя" + ии] = Истина;
				КонецЕсли;
				Если НЕ ПустаяСтрока(СтрокаПродукция["ИсполнительПредставление" + ии]) 
					И Найти(НоваяСтрокаЗаказ["ИсполнительПредставление" + ии], СтрокаПродукция["ИсполнительПредставление" + ии])=0 Тогда
					НоваяСтрокаЗаказ["ИсполнительПредставление" + ии] = НоваяСтрокаЗаказ["ИсполнительПредставление" + ии] + ?(ПустаяСтрока(НоваяСтрокаЗаказ["ИсполнительПредставление" + ии]), "", ", ") + СтрокаПродукция["ИсполнительПредставление" + ии];
				КонецЕсли; 
			КонецЦикла;
		КонецЦикла;
		// 4. Поля расшифровки
		Для ии = 1 По КоличествоЭтапов Цикл
			НоваяСтрокаЗаказ["СборкаЗапасов" + ии] = ОдинаковоеЗначение(НоваяСтрокаЗаказ, "СборкаЗапасов", ии);
			Если ЗначениеЗаполнено(НоваяСтрокаЗаказ["СборкаЗапасов" + ии]) 
				И НоваяСтрокаЗаказ.ПолучитьЭлементы().Количество()>=1 Тогда
				НоваяСтрокаЗаказ["СборкаЗапасовПредставление" + ии] = НоваяСтрокаЗаказ.ПолучитьЭлементы().Получить(0)["СборкаЗапасовПредставление" + ии];
			КонецЕсли; 
			НоваяСтрокаЗаказ["СдельныйНаряд" + ии] = ОдинаковоеЗначение(НоваяСтрокаЗаказ, "СдельныйНаряд", ии);
			Если ЗначениеЗаполнено(НоваяСтрокаЗаказ["СдельныйНаряд" + ии]) 
				И НоваяСтрокаЗаказ.ПолучитьЭлементы().Количество()>=1 Тогда
				НоваяСтрокаЗаказ["СдельныйНарядПредставление" + ии] = НоваяСтрокаЗаказ.ПолучитьЭлементы().Получить(0)["СдельныйНарядПредставление" + ии];
			КонецЕсли; 
			НоваяСтрокаЗаказ["СтруктурнаяЕдиница" + ии] = ОдинаковоеЗначение(НоваяСтрокаЗаказ, "СтруктурнаяЕдиница", ии);
			НоваяСтрокаЗаказ["Исполнитель" + ии] = ОдинаковоеЗначение(НоваяСтрокаЗаказ, "Исполнитель", ии);
			Если НЕ ЗначениеЗаполнено(НоваяСтрокаЗаказ["Исполнитель" + ии]) Тогда
				НоваяСтрокаЗаказ["Исполнитель" + ии] = Справочники.Сотрудники.ПустаяСсылка();
			КонецЕсли; 
		КонецЦикла;
		// 5. Структурная единица завершающего этапа
		НоваяСтрокаЗаказ.СтруктурнаяЕдиница = ОдинаковоеЗначение(НоваяСтрокаЗаказ, "СтруктурнаяЕдиница");
		
	КонецЦикла;
	
	// Заголовки колонок
	ПеренестиВШапку = Истина;
	Для ии = 1 По КоличествоЭтапов Цикл
		ПерваяСтрока = Неопределено;
		Для каждого СтрокаЗаказ Из Заказы.ПолучитьЭлементы() Цикл
			Для каждого СтрокаПродукция Из СтрокаЗаказ.ПолучитьЭлементы() Цикл
				Если СтрокаПродукция["ЭтапСкрыт" + ии] Тогда
					ПеренестиВШапку = Ложь;
					Прервать;
				КонецЕсли; 
				Если ПерваяСтрока=Неопределено Тогда
					ПерваяСтрока = СтрокаПродукция;
					Продолжить;
				КонецЕсли; 
				Если ПерваяСтрока["Этап" + ии]<>СтрокаПродукция["Этап" + ии] Тогда
					ПеренестиВШапку = Ложь;
					Прервать;
				КонецЕсли; 
			КонецЦикла;
			Если НЕ ПеренестиВШапку Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		Если ПерваяСтрока<>Неопределено Тогда
			Элементы["ЗаказыГруппаЭтапВертикально" + ии].Заголовок = Строка(ПерваяСтрока["Этап" + ии]);
		КонецЕсли; 
	КонецЦикла;
	Для ии = 1 По КоличествоЭтапов Цикл
		Элементы["ЗаказыЭтапЗаголовок" + ии].Видимость = НЕ ПеренестиВШапку;
		Элементы["ЗаказыГруппаЭтапВертикально" + ии].ОтображатьВШапке = ПеренестиВШапку;
	КонецЦикла;
	
	Модифицированность = Ложь;
	
	Если НЕ ЕстьВидыПроизводства ИЛИ ПоказатьОписание Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ПанельОписание;
		Элементы.ВыполнитьЭтапы.Доступность = Ложь;
		Элементы.ГруппаСвернутьРазвернуть.Доступность = Ложь;
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы.ОсновнаяПанель;
		Элементы.ВыполнитьЭтапы.Доступность = Истина;
		Элементы.ГруппаСвернутьРазвернуть.Доступность = Истина;
	КонецЕсли;
	
	ОбновитьОписание();
	Элементы.ОтметитьЭтап.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыДереваЗаказов(НовоеКоличествоЭтапов)
	
	// Обновление реквизитов формы
	МассивУдаляемыхРеквизитов = Новый Массив;
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	Если НовоеКоличествоЭтапов>КоличествоЭтапов Тогда
		
		Для ии = КоличествоЭтапов + 1 По НовоеКоличествоЭтапов Цикл
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Этап" + ии, Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"), "Заказы"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтапПометка" + ии, Новый ОписаниеТипов("Булево"), "Заказы"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтапСтараяПометка" + ии, Новый ОписаниеТипов("Булево"), "Заказы"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтапНедоступен" + ии, Новый ОписаниеТипов("Булево"), "Заказы"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтапСкрыт" + ии, Новый ОписаниеТипов("Булево"), "Заказы"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СтруктурнаяЕдиница" + ии, Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"), "Заказы"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИсполнительСкрыт" + ии, Новый ОписаниеТипов("Булево"), "Заказы"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ВыбиратьИсполнителя" + ии, Новый ОписаниеТипов("Булево"), "Заказы"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Исполнитель" + ии, Новый ОписаниеТипов("СправочникСсылка.Сотрудники, СправочникСсылка.Бригады"), "Заказы"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИсполнительПредставление" + ии, Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)), "Заказы"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СборкаЗапасов" + ии, Новый ОписаниеТипов("ДокументСсылка.СборкаЗапасов"), "Заказы"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СборкаЗапасовПредставление" + ии, Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)), "Заказы"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СдельныйНаряд" + ии, Новый ОписаниеТипов("ДокументСсылка.СдельныйНаряд"), "Заказы"));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СдельныйНарядПредставление" + ии, Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)), "Заказы"));
		КонецЦикла; 
		
	ИначеЕсли НовоеКоличествоЭтапов<КоличествоЭтапов Тогда
		
		Для ии = НовоеКоличествоЭтапов + 1 По КоличествоЭтапов Цикл
			МассивУдаляемыхРеквизитов.Добавить("Заказы.Этап" + ии);
			МассивУдаляемыхРеквизитов.Добавить("Заказы.ЭтапПометка" + ии);
			МассивУдаляемыхРеквизитов.Добавить("Заказы.ЭтапСтараяПометка" + ии);
			МассивУдаляемыхРеквизитов.Добавить("Заказы.ЭтапНедоступен" + ии);
			МассивУдаляемыхРеквизитов.Добавить("Заказы.ЭтапСкрыт" + ии);
			МассивУдаляемыхРеквизитов.Добавить("Заказы.СтруктурнаяЕдиница" + ии);
			МассивУдаляемыхРеквизитов.Добавить("Заказы.ИсполнительСкрыт" + ии);
			МассивУдаляемыхРеквизитов.Добавить("Заказы.ВыбиратьИсполнителя" + ии);
			МассивУдаляемыхРеквизитов.Добавить("Заказы.Исполнитель" + ии);
			МассивУдаляемыхРеквизитов.Добавить("Заказы.ИсполнительПредставление" + ии);
			МассивУдаляемыхРеквизитов.Добавить("Заказы.СборкаЗапасов" + ии);
			МассивУдаляемыхРеквизитов.Добавить("Заказы.СборкаЗапасовПредставление" + ии);
			МассивУдаляемыхРеквизитов.Добавить("Заказы.СдельныйНаряд" + ии);
			МассивУдаляемыхРеквизитов.Добавить("Заказы.СдельныйНарядПредставление" + ии);
		КонецЦикла; 
		
	КонецЕсли;
	
	Если МассивДобавляемыхРеквизитов.Количество()>0 ИЛИ МассивУдаляемыхРеквизитов.Количество()>0 Тогда
		
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыФормы(НовоеКоличествоЭтапов)
	
	Если НовоеКоличествоЭтапов>КоличествоЭтапов Тогда
		
		Для ии = КоличествоЭтапов + 1 По НовоеКоличествоЭтапов Цикл
			
			ГруппаВертикально = Элементы.Добавить("ЗаказыГруппаЭтапВертикально" + ии, Тип("ГруппаФормы"), Элементы.Заказы);
			ГруппаВертикально.Вид = ВидГруппыФормы.ГруппаКолонок;
			ГруппаВертикально.Группировка = ГруппировкаКолонок.Вертикальная;
			ГруппаВертикально.ОтображатьВШапке = Ложь;
			ГруппаВертикально.РастягиватьПоГоризонтали = Ложь;
			ГруппаВертикально.Ширина = 20;
			
			Группа = Элементы.Добавить("ЗаказыГруппаЭтап" + ии, Тип("ГруппаФормы"), ГруппаВертикально);
			Группа.Вид = ВидГруппыФормы.ГруппаКолонок;
			Группа.Группировка = ГруппировкаКолонок.ВЯчейке;
			Группа.ОтображатьВШапке = Ложь;
			Группа.РастягиватьПоГоризонтали = Ложь;
			Группа.Ширина = 20;
			
			ЭлементПометка = Элементы.Добавить("ЗаказыЭтапПометка" + ии, Тип("ПолеФормы"), Группа);
			ЭлементПометка.Вид = ВидПоляФормы.ПолеФлажка;
			ЭлементПометка.ПутьКДанным = "Заказы.ЭтапПометка" + ии;
			ЭлементПометка.ОтображатьВШапке = Ложь;
			ЭлементПометка.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
			ЭлементПометка.УстановитьДействие("ПриИзменении", "Подключаемый_ЭтапПометкаПриИзменении");
			
			ЭлементЗаголовок = Элементы.Добавить("ЗаказыЭтапЗаголовок" + ии, Тип("ПолеФормы"), Группа);
			ЭлементЗаголовок.Вид = ВидПоляФормы.ПолеНадписи;
			ЭлементЗаголовок.ПутьКДанным = "Заказы.Этап" + ии;
			ЭлементЗаголовок.ОтображатьВШапке = Ложь;
			ЭлементЗаголовок.Ширина = 20;
			
			ГруппаРасшифровка = Элементы.Добавить("ЗаказыГруппаРасшифровка" + ии, Тип("ГруппаФормы"), ГруппаВертикально);
			ГруппаРасшифровка.Вид = ВидГруппыФормы.ГруппаКолонок;
			ГруппаРасшифровка.Группировка = ГруппировкаКолонок.Вертикальная;
			ГруппаРасшифровка.ОтображатьВШапке = Ложь;
			
			// Реквизиты этапов
			Группа = Элементы.Добавить("ЗаказыГруппаПоля" + ии, Тип("ГруппаФормы"), ГруппаРасшифровка);
			Группа.Вид = ВидГруппыФормы.ГруппаКолонок;
			Группа.Группировка = ГруппировкаКолонок.Горизонтальная;
			Группа.ОтображатьВШапке = Ложь;
			Группа.РастягиватьПоГоризонтали = Ложь;
			Группа.Ширина = 20;
			
			Если ИспользоватьСтруктурныеЕдиницы И ВыполнениеЭтаповРазнымиПодразделениями Тогда
				
				ЭлементПоле = Элементы.Добавить("ЗаказыЭтапСтруктурнаяЕдиница" + ии, Тип("ПолеФормы"), Группа);
				ЭлементПоле.Вид = ВидПоляФормы.ПолеВвода;
				ЭлементПоле.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
				ЭлементПоле.ПутьКДанным = "Заказы.СтруктурнаяЕдиница" + ии;
				ЭлементПоле.ОтображатьВШапке = Ложь;
				ЭлементПоле.Ширина = 10;
				ЭлементПоле.ПодсказкаВвода = НСтр("ru = 'Подразделение этапа'");
				ЭлементПоле.КнопкаОткрытия = Ложь;
				ЭлементПоле.КнопкаСоздания = Ложь;
				Если ВыполнениеЭтаповРазнымиПодразделениями Тогда
					ЭлементПоле.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
				КонецЕсли; 
				ЭлементПоле.УстановитьДействие("Автоподбор", "Подключаемый_ЭтапСтруктурнаяЕдиницаАвтоподбор");
				ЭлементПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ЭтапСтруктурнаяЕдиницаПриИзменении");
				ЭлементПоле.ПараметрыВыбора = Элементы.ЗаказыСтруктурнаяЕдиница.ПараметрыВыбора;
				
			КонецЕсли;
			
			Если ИспользоватьТехоперации Тогда
				
				ГруппаТехОперации = Элементы.Добавить("ЗаказыГруппаТехОперации" + ии, Тип("ГруппаФормы"), Группа);
				ГруппаТехОперации.Вид = ВидГруппыФормы.ГруппаКолонок;
				ГруппаТехОперации.Группировка = ГруппировкаКолонок.Вертикальная;
				ГруппаТехОперации.ОтображатьВШапке = Ложь;
				
				ЭлементПоле = Элементы.Добавить("ЗаказыЭтапИсполнитель" + ии, Тип("ПолеФормы"), ГруппаТехОперации);
				ЭлементПоле.Вид = ВидПоляФормы.ПолеВвода;
				ЭлементПоле.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
				ЭлементПоле.ПутьКДанным = "Заказы.Исполнитель" + ии;
				ЭлементПоле.ОтображатьВШапке = Ложь;
				ЭлементПоле.Ширина = 10;
				ЭлементПоле.КнопкаОткрытия = Ложь;
				ЭлементПоле.КнопкаСоздания = Ложь;
				ЭлементПоле.КнопкаВыпадающегоСписка = Истина;
				ЭлементПоле.ВыбиратьТип = Ложь;
				ЭлементПоле.БыстрыйВыбор = Ложь;
				ЭлементПоле.ПодсказкаВвода = НСтр("ru = 'Исполнитель этапа'");
				ЭлементПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ЭтапИсполнительПриИзменении");
				ЭлементПоле.УстановитьДействие("Очистка", "Подключаемый_ЭтапИсполнительОчистка");
				
				ПараметрыВыбора = Новый Массив;
				ПараметрыВыбора.Добавить(Новый ПараметрВыбора("СотрудникИБригада", Истина));
				ЭлементПоле.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
				
				ЭлементПоле = Элементы.Добавить("ЗаказыЭтапИсполнительПредставление" + ии, Тип("ПолеФормы"), ГруппаТехОперации);
				ЭлементПоле.Вид = ВидПоляФормы.ПолеВвода;
				ЭлементПоле.ПутьКДанным = "Заказы.ИсполнительПредставление" + ии;
				ЭлементПоле.ОтображатьВШапке = Ложь;
				ЭлементПоле.ЦветТекста = ЦветаСтиля.НедоступныеДанныеЦвет;
				ЭлементПоле.Ширина = 10;
				ЭлементПоле.ТолькоПросмотр = Истина;
				
			КонецЕсли; 
			
			// Сформированные документы
			Группа = Элементы.Добавить("ЗаказыГруппаДокументы" + ии, Тип("ГруппаФормы"), ГруппаРасшифровка);
			Группа.Вид = ВидГруппыФормы.ГруппаКолонок;
			Группа.Группировка = ГруппировкаКолонок.Горизонтальная;
			Группа.ОтображатьВШапке = Ложь;
			Группа.РастягиватьПоГоризонтали = Ложь;
			Группа.Ширина = 20;
			
			ЭлементПоле = Элементы.Добавить("ЗаказыЭтапСборкаЗапасовПредставление" + ии, Тип("ПолеФормы"), Группа);
			ЭлементПоле.Вид = ВидПоляФормы.ПолеНадписи;
			ЭлементПоле.ПутьКДанным = "Заказы.СборкаЗапасовПредставление" + ии;
			ЭлементПоле.ОтображатьВШапке = Ложь;
			ЭлементПоле.Гиперссылка = Истина;
			ЭлементПоле.ГиперссылкаЯчейки = Истина;
			ЭлементПоле.Ширина = 10;
			
			Если ИспользоватьТехоперации Тогда
				
				ЭлементПоле = Элементы.Добавить("ЗаказыЭтапСдельныйНарядПредставление" + ии, Тип("ПолеФормы"), Группа);
				ЭлементПоле.Вид = ВидПоляФормы.ПолеНадписи;
				ЭлементПоле.ПутьКДанным = "Заказы.СдельныйНарядПредставление" + ии;
				ЭлементПоле.ОтображатьВШапке = Ложь;
				ЭлементПоле.Гиперссылка = Истина;
				ЭлементПоле.ГиперссылкаЯчейки = Истина;
				ЭлементПоле.Ширина = 10;
				
			КонецЕсли; 
			
		КонецЦикла;
		
	ИначеЕсли НовоеКоличествоЭтапов<КоличествоЭтапов Тогда
		
		Для ии = НовоеКоличествоЭтапов + 1 По КоличествоЭтапов Цикл
			УдалитьЭлементФормы("ЗаказыЭтапПометка" + ии);
			УдалитьЭлементФормы("ЗаказыЭтапЗаголовок" + ии);
			УдалитьЭлементФормы("ЗаказыЭтапСтруктурнаяЕдиница" + ии);
			УдалитьЭлементФормы("ЗаказыЭтапИсполнитель" + ии);
			УдалитьЭлементФормы("ЗаказыЭтапСборкаЗапасовПредставление" + ии);
			УдалитьЭлементФормы("ЗаказыЭтапСдельныйНарядПредставление" + ии);
			УдалитьЭлементФормы("ЗаказыГруппаЭтап" + ии);
			УдалитьЭлементФормы("ЗаказыГруппаДокументы" + ии);
			УдалитьЭлементФормы("ЗаказыГруппаТехОперации" + ии);
			УдалитьЭлементФормы("ЗаказыГруппаПоля" + ии);
			УдалитьЭлементФормы("ЗаказыГруппаРасшифровка" + ии);
			УдалитьЭлементФормы("ЗаказыГруппаЭтапВертикально" + ии);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОписание()
	
	Описание = Обработки.ВыполнениеЭтапов.ПолучитьМакет("Описание").ПолучитьТекст();
	
	Если ИспользоватьСтруктурныеЕдиницы Тогда
		Описание = СтрЗаменить(Описание, "%РазныеПодразделения%", " и на разных подразделениях (при включении опции ""Этапы могут выполняться разными подразделениями"" раздела ""Производство"" в настройках программы)");
	Иначе
		Описание = СтрЗаменить(Описание, "%РазныеПодразделения%", "");
	КонецЕсли; 
	
	Если ИспользоватьСклады И ИспользоватьСтруктурныеЕдиницы Тогда
		Описание = СтрЗаменить(Описание, "%Склады%", "Склады списания материалов и хранения готовой продукции устанавливаются в настройках автоперемещения подразделений (<A href=""СписокПодразделений"">открыть список подразделений</A>)");
	ИначеЕсли ИспользоватьСклады Тогда
		Описание = СтрЗаменить(Описание, "%Склады%", "Склады списания материалов и хранения готовой продукции устанавливаются в настройках автоперемещения (<A href=""НастройкиАвтоперемещения"">изменить настройки</A>)");
	Иначе
		Описание = СтрЗаменить(Описание, "%Склады%", "");
	КонецЕсли; 
	
	Если ИспользоватьТехоперации Тогда
		Описание = СтрЗаменить(Описание, "%Техоперации%", " Для этапов с операциями нужно указать исполнителя. Если выполнение операций запланировано заказом на производство, то исполнитель будет заполнен автоматически. При использовании бригады в качестве исполнителя, в сформированном сдельном наряде будет заполнен состав по умолчанию.");
	Иначе
		Описание = СтрЗаменить(Описание, "%Техоперации%", " Эта информация также может быть указана заранее, в заказах на производство.");
	КонецЕсли; 
	
	Если НЕ ЕстьВидыПроизводства Тогда
		Описание = СтрЗаменить(Описание, "%Переход%", "Для начала работы с АРМ следует выполнить настройку <A href=""ВидыПроизводства"">этапов производства</A> и <A href=""Обновить"">обновить форму</A>");
	ИначеЕсли Заказы.ПолучитьЭлементы().Количество()=0 Тогда
		Описание = СтрЗаменить(Описание, "%Переход%", "В данный момент запланированные к поэтапному производству заказы отсутствуют (<A href=""Обновить"">обновить форму</A>)");
	Иначе
		Описание = СтрЗаменить(Описание, "%Переход%", "<A href=""Обновить"">Показать заказы</A>");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМодифицированностьИПродолжить(Оповещение)
	
	Если Модифицированность Тогда
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Изменены отметки выполнения части этапов. При выполнении операции изменения будут сброшены. Продолжить?'"), РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.Отмена);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.ОК);
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Функция ОбязательныеРеквизитыЗаполнены()
	
	Отказ = Ложь;
	Ошибки = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(ДатаПроизводства) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
		Ошибки,
		,
		НСтр("ru = 'Не указана дата производства'"),
		"ДатаПроизводства",
		,
		);
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(КоличествоЭтапов) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
		Ошибки,
		,
		НСтр("ru = 'Нет данных для производства'"),
		"Заказы",
		,
		);
	КонецЕсли; 
	
	Для каждого СтрокаЗаказ Из Заказы.ПолучитьЭлементы() Цикл
		Для каждого СтрокаПродукция Из СтрокаЗаказ.ПолучитьЭлементы() Цикл
			// Структурная единица завершающего этапа
			Если СтрокаПродукция.ЕстьВыполненныеЭтапы
				И НЕ ЗначениеЗаполнено(СтрокаПродукция.СтруктурнаяЕдиница) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				,
				НСтр("ru = 'Не указан изготовитель'"),
				"Заказы.СтруктурнаяЕдиница",
				,
				СтрШаблон(НСтр("ru = 'Не указан изготовитель номенклатуры ""%1"" (%2)'"), СтрокаПродукция.Представление, СтрокаЗаказ.Представление));
			КонецЕсли;
			// Структурная единица этапа
			Для ии = 1 По КоличествоЭтапов Цикл
		        Если СтрокаПродукция["ЭтапПометка" + ии]=СтрокаПродукция["ЭтапСтараяПометка" + ии] Тогда
					Продолжить;
				КонецЕсли;
		        Если СтрокаПродукция["Этап" + ии]=ПредопределенноеЗначение("Справочник.ЭтапыПроизводства.ЗавершениеПроизводства") Тогда
					Продолжить;
				КонецЕсли;
				Если СтрокаПродукция["ЭтапПометка" + ии]
					И НЕ ЗначениеЗаполнено(СтрокаПродукция["СтруктурнаяЕдиница" + ии]) Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
					Ошибки,
					,
					НСтр("ru = 'Не указана структурная единица этапа'"),
					"Заказы.СтруктурнаяЕдиница" + ии,
					,
					СтрШаблон(НСтр("ru = 'Не указана структурная единица этапа ""%1"" номенклатуры ""%2"" (%3)'"), СтрокаПродукция["Этап" + ии], СтрокаПродукция.Представление, СтрокаЗаказ.Представление));
				КонецЕсли; 
			КонецЦикла;       
			// Исполнитель    
			Для ии = 1 По КоличествоЭтапов Цикл
				Если СтрокаПродукция["ЭтапПометка" + ии] 
					И НЕ СтрокаПродукция["ЭтапСтараяПометка" + ии]
					И СтрокаПродукция["ВыбиратьИсполнителя" + ии]
					И НЕ ЗначениеЗаполнено(СтрокаПродукция["Исполнитель" + ии]) Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
					Ошибки,
					,
					НСтр("ru = 'Не указан исполнитель операций этапа'"),
					"Заказы.Исполнитель" + ии,
					,
					СтрШаблон(НСтр("ru = 'Не указан исполнитель операций этапа ""%1"" номенклатуры ""%2"" (%3)'"), СтрокаПродукция["Этап" + ии], СтрокаПродукция.Представление, СтрокаЗаказ.Представление));
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаСервере
Процедура УдалитьЭлементФормы(ИмяЭлемента)
	
	Элемент = Элементы.Найти(ИмяЭлемента);
	Если Элемент<>Неопределено Тогда
		Элементы.Удалить(Элемент);
	КонецЕсли; 
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеНоменклатуры(СтрокаДерева)
	
	Если НЕ ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
		Возврат НСтр("ru = '<Номенклатура не указана>'");
	КонецЕсли;
	
	Представление = Строка(СтрокаДерева.Номенклатура);
	Если ЗначениеЗаполнено(СтрокаДерева.Характеристика) Тогда
		Представление = Представление + ", " + Строка(СтрокаДерева.Характеристика);
	КонецЕсли; 
	Если ЗначениеЗаполнено(СтрокаДерева.Партия) Тогда
		Представление = Представление + ", " + Строка(СтрокаДерева.Партия);
	КонецЕсли; 
	Если ЗначениеЗаполнено(СтрокаДерева.Спецификация) Тогда
		Представление = Представление + ", " + Строка(СтрокаДерева.Спецификация);
	КонецЕсли; 
	Если ЗначениеЗаполнено(СтрокаДерева.КоличествоПродукции) И ЗначениеЗаполнено(СтрокаДерева.ЕдиницаИзмерения) Тогда
		Представление = Представление + ", " + Строка(СтрокаДерева.КоличествоПродукции) + " " + Строка(СтрокаДерева.ЕдиницаИзмерения);
	КонецЕсли; 
	
	Возврат Представление;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеЗаказов(СтрокаДерева)
	
	Если НЕ ЗначениеЗаполнено(СтрокаДерева.ЗаказПокупателя) И НЕ ЗначениеЗаполнено(СтрокаДерева.ЗаказНаПроизводство) Тогда
		Возврат НСтр("ru = '<Без заказа>'");
	КонецЕсли;
	
	ЗаполненыОбаЗаказа = (ЗначениеЗаполнено(СтрокаДерева.ЗаказПокупателя) И ЗначениеЗаполнено(СтрокаДерева.ЗаказНаПроизводство));
	
	Представление = "";
	Если ЗначениеЗаполнено(СтрокаДерева.ЗаказПокупателя) Тогда
		Представление = Представление + ?(ЗаполненыОбаЗаказа, СтрЗаменить(Строка(СтрокаДерева.ЗаказПокупателя), "Заказ ", ""), Строка(СтрокаДерева.ЗаказПокупателя));
		Если ЗначениеЗаполнено(СтрокаДерева.Контрагент) Тогда
			Представление = Представление + " (" + Строка(СтрокаДерева.Контрагент) + ")";
		КонецЕсли; 
	КонецЕсли; 
	Если ЗначениеЗаполнено(СтрокаДерева.ЗаказНаПроизводство) Тогда
		Представление = Представление + ?(ЗаполненыОбаЗаказа, ", ", "") + ?(ЗаполненыОбаЗаказа, СтрЗаменить(Строка(СтрокаДерева.ЗаказНаПроизводство), "Заказ ", ""), Строка(СтрокаДерева.ЗаказНаПроизводство));
	КонецЕсли; 
	
	Представление = ?(ЗаполненыОбаЗаказа, НСтр("ru = 'Заказы: '"), "") + Представление;
	
	Возврат Представление;
	
КонецФункции 

&НаСервереБезКонтекста
Функция ДокументыПоЭтапу(Номенклатура, Характеристика, Партия, Спецификация, Заказ, Этап, ИмяДокумента = "СборкаЗапасов")
	
	БезПрефиксаИнформационнойБазы = Константы.ПредставлениеНомераДокументаБезПрефиксаИнформационнойБазы.Получить();
	БезПрефиксаПользователя = Константы.ПредставлениеНомераДокументаБезПрефиксаПользователя.Получить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Партия", Партия);
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	Запрос.УстановитьПараметр("Этап", Этап);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭтапыПроизводства.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ЭтапыПроизводства.Регистратор ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ВЫРАЗИТЬ(ЭтапыПроизводства.Регистратор КАК Документ.ЗаказПокупателя).Номер
	|		КОГДА ЭтапыПроизводства.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|			ТОГДА ВЫРАЗИТЬ(ЭтапыПроизводства.Регистратор КАК Документ.ЗаказНаПроизводство).Номер
	|		КОГДА ЭтапыПроизводства.Регистратор ССЫЛКА Документ.СборкаЗапасов
	|			ТОГДА ВЫРАЗИТЬ(ЭтапыПроизводства.Регистратор КАК Документ.СборкаЗапасов).Номер
	|		КОГДА ЭтапыПроизводства.Регистратор ССЫЛКА Документ.СдельныйНаряд
	|			ТОГДА ВЫРАЗИТЬ(ЭтапыПроизводства.Регистратор КАК Документ.СдельныйНаряд).Номер
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР
	|		КОГДА ЭтапыПроизводства.Регистратор ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ВЫРАЗИТЬ(ЭтапыПроизводства.Регистратор КАК Документ.ЗаказПокупателя).Дата
	|		КОГДА ЭтапыПроизводства.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|			ТОГДА ВЫРАЗИТЬ(ЭтапыПроизводства.Регистратор КАК Документ.ЗаказНаПроизводство).Дата
	|		КОГДА ЭтапыПроизводства.Регистратор ССЫЛКА Документ.СборкаЗапасов
	|			ТОГДА ВЫРАЗИТЬ(ЭтапыПроизводства.Регистратор КАК Документ.СборкаЗапасов).Дата
	|		КОГДА ЭтапыПроизводства.Регистратор ССЫЛКА Документ.СдельныйНаряд
	|			ТОГДА ВЫРАЗИТЬ(ЭтапыПроизводства.Регистратор КАК Документ.СдельныйНаряд).Дата
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК Дата
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства КАК ЭтапыПроизводства
	|ГДЕ
	|	ЭтапыПроизводства.Заказ = &Заказ
	|	И ЭтапыПроизводства.Номенклатура = &Номенклатура
	|	И ЭтапыПроизводства.Характеристика = &Характеристика
	|	И ЭтапыПроизводства.Спецификация = &Спецификация
	|	И ЭтапыПроизводства.Партия = &Партия
	|	И ЭтапыПроизводства.Этап = &Этап
	|	И ЭтапыПроизводства.Регистратор ССЫЛКА Документ.СборкаЗапасов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.СборкаЗапасов", "Документ." + ИмяДокумента);
	Выборка = Запрос.Выполнить().Выбрать();
	Результат = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		ПредставлениеДокумента = СтрШаблон(НСтр("ru = '№%1 от %2'"), 
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, БезПрефиксаИнформационнойБазы, БезПрефиксаПользователя),
		Формат(Выборка.Дата, "ДЛФ=D"));
		Результат.Добавить(Выборка.Регистратор, ПредставлениеДокумента);	
	КонецЦикла;
	Возврат Результат;  
	
КонецФункции

&НаКлиенте
Функция ПодразделенияПоЭтапу(Этап)
	
	Если ТипЗнч(КэшПодразделений)<>Тип("ФиксированноеСоответствие")
		ИЛИ КэшПодразделений.Получить(Этап)=Неопределено Тогда
		Возврат ПодразделенияПоЭтапуСервер(Этап);
	Иначе
		Возврат КэшПодразделений.Получить(Этап);
	КонецЕсли; 	
	
КонецФункции

&НаСервере
Функция ПодразделенияПоЭтапуСервер(Этап)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Этап", Этап);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭтапыПроизводстваСтруктурныеЕдиницы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЭтапыПроизводстваСтруктурныеЕдиницы.ПоУмолчанию КАК ПоУмолчанию
	|ИЗ
	|	Справочник.ЭтапыПроизводства.СтруктурныеЕдиницы КАК ЭтапыПроизводстваСтруктурныеЕдиницы
	|ГДЕ
	|	ЭтапыПроизводстваСтруктурныеЕдиницы.Ссылка = &Этап";
	Выборка = Запрос.Выполнить().Выбрать();
	СписокПодразделений = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		СписокПодразделений.Добавить(Выборка.СтруктурнаяЕдиница, , Выборка.ПоУмолчанию);	
	КонецЦикла; 
	
	Если ТипЗнч(КэшПодразделений)=Тип("ФиксированноеСоответствие") Тогда
		Кэш = Новый Соответствие(КэшПодразделений);
	Иначе
		Кэш = Новый Соответствие;
	КонецЕсли; 
	Кэш.Вставить(Этап, СписокПодразделений);
	КэшПодразделений = Новый ФиксированноеСоответствие(Кэш);
	
	Возврат СписокПодразделений;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОдинаковоеЗначение(СтрокаЗаказа, Имя, НомерЭтапа = Неопределено)
	
	Если СтрокаЗаказа.ПолучитьЭлементы().Количество()<=1 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если НомерЭтапа=Неопределено Тогда
		ИмяПоля = Имя;
	Иначе
		ИмяПоля = Имя + НомерЭтапа;
	КонецЕсли; 
	
	Если НомерЭтапа<>Неопределено И (СтрокаЗаказа["ЭтапНедоступен" + НомерЭтапа] ИЛИ СтрокаЗаказа["ЭтапСкрыт" + НомерЭтапа]) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ПервоеЗначение = Неопределено;
	Для каждого ПодСтрока Из СтрокаЗаказа.ПолучитьЭлементы() Цикл
		Если ПервоеЗначение=Неопределено Тогда
			ПервоеЗначение = ПодСтрока[ИмяПоля];
		ИначеЕсли ПервоеЗначение<>ПодСтрока[ИмяПоля] Тогда 
			ПервоеЗначение = Неопределено;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ПервоеЗначение;
	
КонецФункции

#КонецОбласти

#Область МеткиОтборов

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборов(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость, , 31);
	ОбновитьЗаголовок();
		
КонецПроцедуры

&НаКлиенте
Процедура ДатаПроизводстваПриИзменении(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ДатаПроизводстваПриИзмененииЗавершение", ЭтотОбъект);
	ПроверитьМодифицированностьИПродолжить(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПроизводстваПриИзмененииЗавершение(Результат, ДополнительныеДанные) Экспорт
	
	Если Результат<>КодВозвратаДиалога.ОК Тогда
		ДатаПроизводства = ДатаПроизводстваДоИзменения;
		Возврат;
	КонецЕсли;
	
	ДатаПроизводстваДоИзменения = ДатаПроизводства;
	
	Если ЕстьВидыПроизводства И НЕ ПоказатьОписание Тогда
		ЗаполнитьДеревоЗаказовКлиент();
	КонецЕсли; 
	
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоЗапланированныеПриИзменении(Элемент)
	
	Если ТолькоЗапланированные И НЕ ЗначениеЗаполнено(ДатаПланирования) Тогда
		Возврат;
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("ТолькоЗапланированныеПриИзмененииЗавершение", ЭтотОбъект);
	ПроверитьМодифицированностьИПродолжить(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоЗапланированныеПриИзмененииЗавершение(Результат, ДополнительныеДанные) Экспорт
	
	Если Результат<>КодВозвратаДиалога.ОК Тогда
		ТолькоЗапланированные = НЕ ТолькоЗапланированные;
		Возврат;
	КонецЕсли; 
	
	Если ЕстьВидыПроизводства И НЕ ПоказатьОписание Тогда
		ЗаполнитьДеревоЗаказовКлиент();
	КонецЕсли; 
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПланированияПриИзменении(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ДатаПланированияПриИзмененииЗавершение", ЭтотОбъект);
	ПроверитьМодифицированностьИПродолжить(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПланированияПриИзмененииЗавершение(Результат, ДополнительныеДанные) Экспорт
	
	Если Результат<>КодВозвратаДиалога.ОК Тогда
		ДатаПланирования = ДатаПланированияДоИзменения;
		Возврат;
	КонецЕсли;
	ДатаПланированияДоИзменения = ДатаПланирования;
	
	Если ЕстьВидыПроизводства И НЕ ПоказатьОписание Тогда
		ЗаполнитьДеревоЗаказовКлиент();
	КонецЕсли; 
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоПоэтапноеПриИзменении(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ТолькоПоэтапноеПриИзмененииЗавершение", ЭтотОбъект);
	ПроверитьМодифицированностьИПродолжить(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоПоэтапноеПриИзмененииЗавершение(Результат, ДополнительныеДанные) Экспорт
	
	Если Результат<>КодВозвратаДиалога.ОК Тогда
		ТолькоПоэтапное = НЕ ТолькоПоэтапное;
		Возврат;
	КонецЕсли; 
	
	Если ЕстьВидыПроизводства И НЕ ПоказатьОписание Тогда
		ЗаполнитьДеревоЗаказовКлиент();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗаказНаПроизводствоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;

	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
	СтруктураДанных.Вставить("ИмяРодителя", Элемент.Родитель.Имя);
	Оповещение = Новый ОписаниеОповещения("ОтборЗаказНаПроизводствоОбработкаВыбораЗавершение", ЭтотОбъект, СтруктураДанных);
	ПроверитьМодифицированностьИПродолжить(Оповещение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗаказНаПроизводствоОбработкаВыбораЗавершение(Результат, ДополнительныеДанные) Экспорт
	
	Если Результат<>КодВозвратаДиалога.ОК Тогда
		ОтборЗаказНаПроизводство = Неопределено;
		Возврат;
	КонецЕсли; 
	
	ПредставлениеЗначения = СтрЗаменить(Строка(ДополнительныеДанные.ВыбранноеЗначение), НСтр("ru = 'Заказ на производство '"), НСтр("ru = '№'"));
	УстановитьМеткуИОтбор("ЗаказНаПроизводство", ДополнительныеДанные.ИмяРодителя, ДополнительныеДанные.ВыбранноеЗначение, ПредставлениеЗначения);
	РазвернутьДеревоЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;

	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
	СтруктураДанных.Вставить("ИмяРодителя", Элемент.Родитель.Имя);
	Оповещение = Новый ОписаниеОповещения("ОтборКонтрагентОбработкаВыбораЗавершение", ЭтотОбъект, СтруктураДанных);
	ПроверитьМодифицированностьИПродолжить(Оповещение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентОбработкаВыбораЗавершение(Результат, ДополнительныеДанные) Экспорт
	
	Если Результат<>КодВозвратаДиалога.ОК Тогда
		ОтборКонтрагент = Неопределено;
		Возврат;
	КонецЕсли; 
	
	УстановитьМеткуИОтбор("Контрагент", ДополнительныеДанные.ИмяРодителя, ДополнительныеДанные.ВыбранноеЗначение);
	РазвернутьДеревоЗаказов(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗаказПокупателяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
	СтруктураДанных.Вставить("ИмяРодителя", Элемент.Родитель.Имя);
	Оповещение = Новый ОписаниеОповещения("ОтборЗаказПокупателяОбработкаВыбораЗавершение", ЭтотОбъект, СтруктураДанных);
	ПроверитьМодифицированностьИПродолжить(Оповещение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗаказПокупателяОбработкаВыбораЗавершение(Результат, ДополнительныеДанные) Экспорт
	
	Если Результат<>КодВозвратаДиалога.ОК Тогда
		ОтборЗаказПокупателя = Неопределено;
		Возврат;
	КонецЕсли; 
	
	ПредставлениеЗначения = СтрЗаменить(Строка(ДополнительныеДанные.ВыбранноеЗначение), НСтр("ru = 'Заказ покупателя '"), НСтр("ru = '№'"));
	УстановитьМеткуИОтбор("ЗаказПокупателя", ДополнительныеДанные.ИмяРодителя, ДополнительныеДанные.ВыбранноеЗначение, ПредставлениеЗначения);
	РазвернутьДеревоЗаказов(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидПроизводстваОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;

	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
	СтруктураДанных.Вставить("ИмяРодителя", Элемент.Родитель.Имя);
	Оповещение = Новый ОписаниеОповещения("ОтборВидПроизводстваОбработкаВыбораЗавершение", ЭтотОбъект, СтруктураДанных);
	ПроверитьМодифицированностьИПродолжить(Оповещение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидПроизводстваОбработкаВыбораЗавершение(Результат, ДополнительныеДанные) Экспорт
	
	Если Результат<>КодВозвратаДиалога.ОК Тогда
		ОтборНоменклатура = Неопределено;
		Возврат;
	КонецЕсли; 
	
	УстановитьМеткуИОтбор("ВидПроизводства", ДополнительныеДанные.ИмяРодителя, ДополнительныеДанные.ВыбранноеЗначение);
	РазвернутьДеревоЗаказов(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;

	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
	СтруктураДанных.Вставить("ИмяРодителя", Элемент.Родитель.Имя);
	Оповещение = Новый ОписаниеОповещения("ОтборНоменклатураОбработкаВыбораЗавершение", ЭтотОбъект, СтруктураДанных);
	ПроверитьМодифицированностьИПродолжить(Оповещение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНоменклатураОбработкаВыбораЗавершение(Результат, ДополнительныеДанные) Экспорт
	
	Если Результат<>КодВозвратаДиалога.ОК Тогда
		ОтборНоменклатура = Неопределено;
		Возврат;
	КонецЕсли; 
	
	УстановитьМеткуИОтбор("Номенклатура", ДополнительныеДанные.ИмяРодителя, ДополнительныеДанные.ВыбранноеЗначение);
	РазвернутьДеревоЗаказов(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидЗаказаПокупателяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;

	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
	СтруктураДанных.Вставить("ИмяРодителя", Элемент.Родитель.Имя);
	Оповещение = Новый ОписаниеОповещения("ОтборВидЗаказаПокупателяОбработкаВыбораЗавершение", ЭтотОбъект, СтруктураДанных);
	ПроверитьМодифицированностьИПродолжить(Оповещение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидЗаказаПокупателяОбработкаВыбораЗавершение(Результат, ДополнительныеДанные) Экспорт
	
	Если Результат<>КодВозвратаДиалога.ОК Тогда
		ОтборВидЗаказаПокупателя = Неопределено;
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ДополнительныеДанные.ВыбранноеЗначение)=Тип("Тип") Тогда
		Возврат;
	КонецЕсли; 
	
	УстановитьМеткуИОтбор("ЗаказПокупателя.ВидЗаказа", ДополнительныеДанные.ИмяРодителя, ДополнительныеДанные.ВыбранноеЗначение);
	РазвернутьДеревоЗаказов(); 
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяПоляОтбора", "ЗаказПокупателя.ВидЗаказа");
	СтрокиМеток = ДанныеМеток.НайтиСтроки(СтруктураОтбора);
	Если СтрокиМеток.Количество()<>1 Тогда
		Возврат;
	КонецЕсли; 
	ВидЗаказа = СтрокиМеток[0].Метка;
	Если НЕ ЗначениеЗаполнено(ВидЗаказа) Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ВидЗаказа)=Тип("СправочникСсылка.ВидыЗаказовПокупателей") Тогда
		ОтборСостояниеЗаказаПокупателя = ПредопределенноеЗначение("Справочник.СостоянияЗаказовПокупателей.ПустаяСсылка");
	ИначеЕсли ТипЗнч(ВидЗаказа)=Тип("СправочникСсылка.ВидыЗаказНарядов") Тогда
		ОтборСостояниеЗаказаПокупателя = ПредопределенноеЗначение("Справочник.СостоянияЗаказНарядов.ПустаяСсылка");
	Иначе
		ОтборСостояниеЗаказаПокупателя = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеЗаказаПокупателяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяПоляОтбора", "ЗаказПокупателя.ВидЗаказа");
	СтрокиМеток = ДанныеМеток.НайтиСтроки(СтруктураОтбора);
	Если СтрокиМеток.Количество()<>1 Тогда
		Возврат;
	КонецЕсли; 
	ВидЗаказа = СтрокиМеток[0].Метка;
	Если НЕ ЗначениеЗаполнено(ВидЗаказа) Тогда
		Возврат;
	КонецЕсли;
	ВидЗаказаПокупателя = Неопределено;
	ВидЗаказНаряда = Неопределено;
	Если ТипЗнч(ВидЗаказа)=Тип("СправочникСсылка.ВидыЗаказовПокупателей") Тогда
		ВидЗаказаПокупателя = ВидЗаказа;
	ИначеЕсли ТипЗнч(ВидЗаказа)=Тип("СправочникСсылка.ВидыЗаказНарядов") Тогда
		ВидЗаказНаряда = ВидЗаказа;
	Иначе
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ВидЗаказаПокупателя) Тогда
		ПараметрыПолученияДанных.Вставить("ВидЗаказа", ВидЗаказаПокупателя);
		ДанныеВыбораСостояния = ПолучитьДанныеВыбора(Тип("СправочникСсылка.СостоянияЗаказовПокупателей"), ПараметрыПолученияДанных);
		ДанныеВыбора = ДанныеВыбораСостояния;
	ИначеЕсли ЗначениеЗаполнено(ВидЗаказНаряда) Тогда
		ПараметрыПолученияДанных.Вставить("ВидЗаказа", ВидЗаказНаряда);
		ДанныеВыбораСостояния = ПолучитьДанныеВыбора(Тип("СправочникСсылка.СостоянияЗаказНарядов"), ПараметрыПолученияДанных);
		ДанныеВыбора = ДанныеВыбораСостояния;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеЗаказаПокупателяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;

	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
	СтруктураДанных.Вставить("ИмяРодителя", Элемент.Родитель.Имя);
	Оповещение = Новый ОписаниеОповещения("ОтборСостояниеЗаказаПокупателяОбработкаВыбораЗавершение", ЭтотОбъект, СтруктураДанных);
	ПроверитьМодифицированностьИПродолжить(Оповещение);
	Если ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.СостоянияЗаказовПокупателей") Тогда
		ВыбранноеЗначение = ПредопределенноеЗначение("Справочник.СостоянияЗаказовПокупателей.ПустаяСсылка");
	ИначеЕсли ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.СостоянияЗаказНарядов") Тогда
		ВыбранноеЗначение = ПредопределенноеЗначение("Справочник.СостоянияЗаказНарядов.ПустаяСсылка");
	Иначе
		ВыбранноеЗначение = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеЗаказаПокупателяОбработкаВыбораЗавершение(Результат, ДополнительныеДанные) Экспорт
	
	Если Результат<>КодВозвратаДиалога.ОК Тогда
		ОтборСостояниеЗаказаПокупателя = Неопределено;
		Возврат;
	КонецЕсли; 
	Если ТипЗнч(ДополнительныеДанные.ВыбранноеЗначение)=Тип("Тип") Тогда
		Возврат;
	КонецЕсли; 
	
	УстановитьМеткуИОтбор("ЗаказПокупателя.СостояниеЗаказа", ДополнительныеДанные.ИмяРодителя, ДополнительныеДанные.ВыбранноеЗначение);
	РазвернутьДеревоЗаказов(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеЗаказаНаПроизводствоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;

	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
	СтруктураДанных.Вставить("ИмяРодителя", Элемент.Родитель.Имя);
	Оповещение = Новый ОписаниеОповещения("ОтборСостояниеЗаказаНаПроизводствоОбработкаВыбораЗавершение", ЭтотОбъект, СтруктураДанных);
	ПроверитьМодифицированностьИПродолжить(Оповещение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеЗаказаНаПроизводствоОбработкаВыбораЗавершение(Результат, ДополнительныеДанные) Экспорт
	
	Если Результат<>КодВозвратаДиалога.ОК Тогда
		ОтборСостояниеЗаказаНаПроизводство = Неопределено;
		Возврат;
	КонецЕсли; 
	
	УстановитьМеткуИОтбор("ЗаказНаПроизводство.СостояниеЗаказа", ДополнительныеДанные.ИмяРодителя, ДополнительныеДанные.ВыбранноеЗначение);
	РазвернутьДеревоЗаказов(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзготовительПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	Если Исполнитель = Неопределено Тогда
		Исполнитель = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	КонецЕсли; 
	УправлениеФормой(ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Исполнитель = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьЭтапПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("МеткаИД", МеткаИД);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_МеткаОбработкаНавигационнойСсылкиЗавершение", ЭтотОбъект, СтруктураДанных);
	ПроверитьМодифицированностьИПродолжить(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылкиЗавершение(Результат, ДополнительныеДанные) Экспорт
	
	Если Результат<>КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли; 
	
	УдалитьМеткуОтбора(ДополнительныеДанные.МеткаИД);
	РазвернутьДеревоЗаказов(); 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьМеткуИОтбор(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	
	Если НЕ ЕстьВидыПроизводства ИЛИ ПоказатьОписание Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьДеревоЗаказов();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	СтрокаМеток = ДанныеМеток[Число(МеткаИД)];
	ИмяПоляОтбора = СтрокаМеток.ИмяПоляОтбора;

	СписокГруппФормыДляУдаленияДобавленныхЭлементов = РаботаСОтборами.ПолучитьСписокИмяГруппыРодителя(ДанныеМеток);
	ДанныеМеток.Удалить(СтрокаМеток);
	РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект, СписокГруппФормыДляУдаленияДобавленныхЭлементов);
	РаботаСОтборами.УстановитьЗаголовокПравойПанелиМобильныйКлиент(ЭтотОбъект);
	ЗаполнитьДеревоЗаказов();

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	ИмяКлючаОбъекта = СтрЗаменить(ИмяФормы,".","");
	
	РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект, , , , Ложь);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ТолькоЗапланированные", ТолькоЗапланированные);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ТолькоПоэтапное", ТолькоПоэтапное);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиОтборов()
	
	СхемаКомпоновкиДанных = Обработки.ВыполнениеЭтапов.ПолучитьМакет("СхемаЗаполнения");
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	НастройкиКомпоновщика = КомпоновщикНастроек.Настройки;
	
	ИмяКлючаОбъекта = СтрЗаменить(ИмяФормы,".","");
	
	// Отбор по полям правой панели
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ДанныеМеток");
	ЕстьОтборТекущегоСписка = Ложь;
	
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
		
		// Проверить сохраненные отборы, удалить строки, которых нет ДоступныхПоляхКомпоновкиДанных
		Если СохраненноеЗначение.Колонки.Найти("ИмяПараметраЗапроса")=Неопределено Тогда
			МассивДоступныхПолейКомпоновкиДанных = Новый Массив;
			Для каждого ПолеОтбора Из НастройкиКомпоновщика.ДоступныеПоляОтбора.Элементы Цикл
				МассивДоступныхПолейКомпоновкиДанных.Добавить(Строка(ПолеОтбора.Поле));
			КонецЦикла;
			МассивУдалитьОтборы = Новый Массив;
			Для каждого СохраненноеПолеОтбора Из СохраненноеЗначение Цикл
				Если СтрНайти(СохраненноеПолеОтбора.ИмяПоляОтбора,".")<>0 Тогда
					// Для полей табличной части, которые представлены через точку
					МассивПолей = СтрРазделить(СохраненноеПолеОтбора.ИмяПоляОтбора, ".");
					Если МассивПолей.Количество()>0 Тогда
						СохраненноеПолеОтбораИмя = МассивПолей[0];
					КонецЕсли;
				Иначе
					СохраненноеПолеОтбораИмя = СохраненноеПолеОтбора.ИмяПоляОтбора;
				КонецЕсли;
				Если МассивДоступныхПолейКомпоновкиДанных.Найти(СохраненноеПолеОтбораИмя)=Неопределено Тогда
					МассивУдалитьОтборы.Добавить(СохраненноеПолеОтбора);
				КонецЕсли;
			КонецЦикла;
			Для каждого строкаУдалить Из МассивУдалитьОтборы Цикл
				СохраненноеЗначение.Удалить(строкаУдалить);
			КонецЦикла;
		КонецЕсли; 
		
		ДанныеМеток.Загрузить(СохраненноеЗначение);
		
		РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект);
		
	КонецЕсли;
	
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ТолькоЗапланированные");
	Если СохраненноеЗначение=Истина Тогда
		ТолькоЗапланированные = СохраненноеЗначение;
		ЕстьОтборТекущегоСписка = Истина;
	КонецЕсли;
	
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ТолькоПоэтапное");
	Если СохраненноеЗначение=Истина Тогда
		ТолькоПоэтапное = СохраненноеЗначение;
		ЕстьОтборТекущегоСписка = Истина;
	КонецЕсли;
	
	// Видимость панели отборов
	Если Не ЕстьОтборТекущегоСписка Тогда
		СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ВидимостьПанелиОтборов", Истина);
		Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
			РаботаСОтборами.СвернутьРазвернутьОтборыНаСервере(ЭтотОбъект, СохраненноеЗначение, , 31);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область УправлениеВнешнимВидомФормы

&НаСервере
Процедура ОбновитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	Для ии = 1 По КоличествоЭтапов Цикл
		
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапПометка" + ии);
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.ЭтапНедоступен" + ии, Истина);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
		
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапЗаголовок" + ии);
		ОтборЭлемента = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Заказы.ЭтапПометка" + ии);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Заказы.ЭтапСтараяПометка" + ии);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Шрифт", Новый Шрифт(Новый Шрифт, , , Истина));
		
		// Структурная единица
		Если ИспользоватьСтруктурныеЕдиницы И ВыполнениеЭтаповРазнымиПодразделениями Тогда
			
			НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
			РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапСтруктурнаяЕдиница" + ии);
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.Этап" + ии, Справочники.ЭтапыПроизводства.ЗавершениеПроизводства);
			РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
			
			НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
			РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапСтруктурнаяЕдиница" + ии);
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.СтруктурнаяЕдиница" + ии, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.Уровень", 2);
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.ЭтапПометка" + ии, Истина);
			РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
			
			НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
			РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапСтруктурнаяЕдиница" + ии);
			ГруппаУсловий = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.СборкаЗапасов" + ии, Неопределено, ВидСравненияКомпоновкиДанных.Заполнено);
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ЭтапСтараяПометка" + ии, Истина);
			РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
			
			НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
			РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапСтруктурнаяЕдиница" + ии);
			ГруппаУсловий = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ЭтапНедоступен" + ии, Истина);
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ЭтапПометка" + ии, Ложь);
			РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
			РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
			
		КонецЕсли; 
		
		// Исполнитель
		Если ИспользоватьТехоперации Тогда
			
			НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
			РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапИсполнитель" + ии);
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.Исполнитель" + ии, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.ЭтапПометка" + ии, Истина);
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.ВыбиратьИсполнителя" + ии, Истина);
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.Уровень", 2);
			РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
			
			НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
			РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапИсполнитель" + ии);
			ГруппаУсловий = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ЭтапПометка" + ии, Ложь);
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ЭтапНедоступен" + ии, Истина);
			РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
			РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
			
			НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
			РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапИсполнитель" + ии);
			ГруппаУсловий = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ЭтапНедоступен" + ии, Истина);
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ИсполнительСкрыт" + ии, Истина);
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ВыбиратьИсполнителя" + ии, Ложь);
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.СдельныйНаряд" + ии, Неопределено, ВидСравненияКомпоновкиДанных.Заполнено);
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ЭтапСтараяПометка" + ии, Истина);
			РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
			
			НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
			РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапИсполнительПредставление" + ии);
			ГруппаУсловий = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ЭтапНедоступен" + ии, Истина);
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ИсполнительСкрыт" + ии, Истина);
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ВыбиратьИсполнителя" + ии, Истина);
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.СдельныйНаряд" + ии, Неопределено, ВидСравненияКомпоновкиДанных.Заполнено);
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ЭтапСтараяПометка" + ии, Истина);
			РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
			
		КонецЕсли; 
		
		// Производство
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапСборкаЗапасовПредставление" + ии);
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.СборкаЗапасовПредставление" + ии, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		// Для скрытых этапов элемент используется как разделитель
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.ЭтапСкрыт" + ии, Ложь);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
		
		// Сдельный наряд
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапСдельныйНарядПредставление" + ии);
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.СдельныйНарядПредставление" + ии, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		ГруппаУсловий = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ЭтапНедоступен" + ии, Ложь);
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ИсполнительСкрыт" + ии, Истина);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
		
		// Скрытые этапы
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапПометка" + ии);
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапЗаголовок" + ии);
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапСтруктурнаяЕдиница" + ии);
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапИсполнитель" + ии);
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыЭтапСдельныйНарядПредставление" + ии);
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.ЭтапСкрыт" + ии, Истина);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
	КонецЦикла; 
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "Заказы");
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.Уровень", 1);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветФона", ЦветаСтиля.ЦветФонаГруппировкиОтчета1);
	
	// Структурная единица завершения производства
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыСтруктурнаяЕдиница");
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.Уровень", 2);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.ЕстьВыполненныеЭтапы", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Заказы.СтруктурнаяЕдиница", Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗаказыСтруктурнаяЕдиница");
	ГруппаУсловий = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ЕстьНедоступныеЭтапы", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ЕстьСохраненныеДокументы", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаУсловий, "Заказы.ЗаказНаПроизводство", Документы.ЗаказНаПроизводство.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	      
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовок()
	
	Заголовок = НСтр("ru = 'Выполнение этапов'") 
	+ ?(НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость, ": " + Формат(ДатаПроизводства, НСтр("ru = 'ДФ=''dd.MM.yyyy (дддд)'''")), "") 	
	+ ?(НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость И ДанныеМеток.Количество()>0, НСтр("ru = ', установлены отборы'"), "") ;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаПланирования", "ТолькоПросмотр", НЕ Форма.ТолькоЗапланированные);	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьИзготовителя", "Доступность", ЗначениеЗаполнено(Форма.Изготовитель) И НЕ Форма.ПоказатьОписание);	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьИсполнителя", "Доступность", ЗначениеЗаполнено(Форма.Исполнитель) И НЕ Форма.ПоказатьОписание);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыполнитьЭтап", "Доступность", ЗначениеЗаполнено(Форма.ОтметитьЭтап) И НЕ Форма.ПоказатьОписание);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОтборВидЗаказаПокупателя", "Видимость", Форма.ИспользоватьВидыЗаказНарядов ИЛИ Форма.ИспользоватьВидыЗаказовПокупателей);
	Если НЕ Форма.ИспользоватьПодсистемуРаботы ИЛИ (Форма.ИспользоватьВидыЗаказовПокупателей И НЕ Форма.ИспользоватьВидыЗаказНарядов) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтборВидЗаказаПокупателя", "ОграничениеТипа", Новый ОписаниеТипов("СправочникСсылка.ВидыЗаказовПокупателей"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтборСостояниеЗаказаПокупателя", "ОграничениеТипа", Новый ОписаниеТипов("СправочникСсылка.СостоянияЗаказовПокупателей"));
	ИначеЕсли НЕ Форма.ИспользоватьВидыЗаказовПокупателей И Форма.ИспользоватьВидыЗаказНарядов Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтборВидЗаказаПокупателя", "ОграничениеТипа", Новый ОписаниеТипов("СправочникСсылка.ВидыЗаказНарядов"));
	КонецЕсли;
	
	Если Форма.ВыполнениеЭтаповРазнымиПодразделениями Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаказыСтруктурнаяЕдиница", "ИсторияВыбораПриВводе", ИсторияВыбораПриВводе.НеИспользовать);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область ФоновоеЗадание

&НаКлиенте
Процедура ЗапуститьФоновоеЗадание()
	
	УстановитьДоступностьФормы(Ложь);
	ОчиститьСообщения();
	
	Задание = ЗаданиеФормированиеДокументовПроизводства();
	Если Задание=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПрогрессФормированияДокументов", ЭтотОбъект); 
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
	Задание,
	Новый ОписаниеОповещения("ОбработатьФормированиеДокументов", ЭтотОбъект),
	ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрогрессФормированияДокументов(Прогресс, ДополнительныеПараметры) Экспорт
	
	Если Прогресс = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Прогресс.Статус <> "Выполняется" ИЛИ Прогресс.Прогресс=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИндикаторВыполнения = Прогресс.Прогресс.Процент;
	ДлительнаяОперацияЭтап = Прогресс.Прогресс.Текст;
	ДлительнаяОперацияОбъект = Прогресс.Прогресс.ДополнительныеПараметры;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьФормированиеДокументов(Результат, Параметры) Экспорт
	
	УстановитьДоступностьФормы(Истина);
	
	Если Результат.Статус <> "Выполнено" Тогда
		Если Результат.Свойство("КраткоеПредставлениеОшибки") Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
			Результат.КраткоеПредставлениеОшибки);
		КонецЕсли; 
		Элементы.СтраницыСтатусФоновогоЗадания.ТекущаяСтраница = Элементы.ЗаданиеЗавершеноСОшибкой;
		Возврат;
	КонецЕсли;
	
	БезОшибок = ОбработатьФормированиеДокументовСервер(Результат, Параметры);
	Если БезОшибок Тогда
		ЗаполнитьДеревоЗаказовКлиент();
	Иначе
		РазвернутьДеревоЗаказов();
	КонецЕсли; 
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницыСтатусФоновогоЗадания", "Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьФормированиеДокументовСервер(Результат, Параметры)
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	Если НЕ ТипЗнч(РезультатВыполнения)=Тип("Структура") Тогда
		Возврат Истина;
	КонецЕсли; 
	Если РезультатВыполнения.Свойство("Ошибки") И ТипЗнч(РезультатВыполнения.Ошибки)=Тип("СписокЗначений") И РезультатВыполнения.Ошибки.Количество()>0 Тогда
		Для каждого Ошибка Из РезультатВыполнения.Ошибки Цикл
			ОбщегоНазначения.СообщитьПользователю(
			Ошибка.Представление,
			Ошибка.Значение);
		КонецЦикла;
		Элементы.СтраницыСтатусФоновогоЗадания.ТекущаяСтраница = Элементы.ЗаданиеЗавершеноСОшибкой;
		Если РезультатВыполнения.Свойство("Заказы") И ТипЗнч(РезультатВыполнения.Заказы)=Тип("ДеревоЗначений") Тогда
			ЗначениеВРеквизитФормы(РезультатВыполнения.Заказы, "Заказы");
		КонецЕсли; 
		Возврат Ложь;
	ИначеЕсли РезультатВыполнения.Свойство("СозданоДокументов") И РезультатВыполнения.Свойство("ИзмененоДокументов") Тогда
		ТекстСообщения = "";
		Если ЗначениеЗаполнено(РезультатВыполнения.СозданоДокументов) Тогда
			ТекстСообщения = ?(РезультатВыполнения.СозданоДокументов=1, НСтр("ru = 'создан %1 документ'"), ?(РезультатВыполнения.СозданоДокументов<5, НСтр("ru = 'создано %1 документа'"), НСтр("ru = 'создано %1 документов'")));
			ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатВыполнения.СозданоДокументов);
		КонецЕсли; 
		Если ЗначениеЗаполнено(РезультатВыполнения.ИзмененоДокументов) Тогда
			ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", ", ") + ?(РезультатВыполнения.ИзмененоДокументов=1, НСтр("ru = 'изменен %1 документ'"), ?(РезультатВыполнения.ИзмененоДокументов<5, НСтр("ru = 'изменено %1 документа'"), НСтр("ru = 'изменено %1 документов'")));
			ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатВыполнения.ИзмененоДокументов);
		КонецЕсли; 
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Выполнено успешно, '") + ТекстСообщения;
			Сообщение.Сообщить();
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьФормы(Доступность)
	
	ТолькоПросмотр = НЕ Доступность;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Заказы", "ТолькоПросмотр", НЕ Доступность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаВсеФильтры", "Доступность", Доступность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыполнитьЭтапы", "Доступность", Доступность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Обновить", "Доступность", Доступность);
	
КонецПроцедуры

&НаСервере
Функция ЗаданиеФормированиеДокументовПроизводства()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницыСтатусФоновогоЗадания", "Видимость", Истина);
	Элементы.СтраницыСтатусФоновогоЗадания.ТекущаяСтраница = Элементы.ЗаданиеВыполняется;
	ДлительнаяОперацияОбъект = "";
	ИндикаторВыполнения = 0;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	ДеревоПлан = РеквизитФормыВЗначение("Заказы");
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Заказы", ДеревоПлан);
	ПараметрыЗадания.Вставить("КоличествоЭтапов", КоличествоЭтапов);
	ПараметрыЗадания.Вставить("ДатаПроизводства", ДатаПроизводства);
	ПараметрыЗадания.Вставить("Автор", Пользователи.ТекущийПользователь());
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
	"Обработки.ВыполнениеЭтапов.СформироватьДокументы",
	ПараметрыЗадания,
	ПараметрыВыполнения);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
