
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ФоновоеЗадание

Процедура СформироватьДокументы(Параметры, ВременноеХранилищеРезультата) Экспорт
	
	Результат = Новый Структура;
	Ошибки = Новый СписокЗначений;
	
	Если НЕ Параметры.Свойство("Заказы") ИЛИ ТипЗнч(Параметры.Заказы)<>Тип("ДеревоЗначений") Тогда
		Ошибка = НСтр("ru = 'Не заданы заказы для производства'");
		Ошибки.Добавить(, Ошибка);
		Результат.Вставить("Ошибки", Ошибки);
	КонецЕсли;
	
	Если Ошибки.Количество()>0 Тогда
		ПоместитьВоВременноеХранилище(Результат, ВременноеХранилищеРезультата);
		Возврат;
	КонецЕсли; 
	
	Заказы = Параметры.Заказы;
	КоличествоЭтапов = Параметры.КоличествоЭтапов;
	ДатаПроизводства = Параметры.ДатаПроизводства;
	Автор = Параметры.Автор;
	
	ТаблицаИзменений = Неопределено;
	НовыеСборкиЗапасов = Неопределено;
	НовыеСдельныйНаряды = Неопределено;
	СоздатьПустыеТаблицы(ТаблицаИзменений, НовыеСборкиЗапасов, НовыеСдельныйНаряды);
	ИзменяемыеДокументы = Новый Соответствие;
	
	КоличествоСтрок = Заказы.Строки.Количество();
	НомерСтроки = 0;
	ТекстЭтап = НСтр("ru = 'Формирование документов производства'");
	
	Если ДатаПроизводства<НачалоДня(ТекущаяДатаСеанса()) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаПроизводства", ДатаПроизводства);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(СборкаЗапасов.Дата) КАК Дата
		|ИЗ
		|	Документ.СборкаЗапасов КАК СборкаЗапасов
		|ГДЕ
		|	СборкаЗапасов.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаПроизводства, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаПроизводства, ДЕНЬ)
		|	И СборкаЗапасов.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МАКСИМУМ(СдельныйНаряд.Дата)
		|ИЗ
		|	Документ.СдельныйНаряд КАК СдельныйНаряд
		|ГДЕ
		|	СдельныйНаряд.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаПроизводства, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаПроизводства, ДЕНЬ)
		|	И СдельныйНаряд.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество()=0 Тогда
			ВремяФормирования = 0;
		Иначе
			Выборка.Следующий();
			ВремяФормирования = ?(ЗначениеЗаполнено(Выборка.Дата), (Выборка.Дата - ДатаПроизводства), 0);
		КонецЕсли;
	Иначе
		ВремяФормирования = Неопределено;
	КонецЕсли; 
	
	Для каждого СтрокаЗаказ Из Заказы.Строки Цикл
		Для каждого СтрокаПродукция Из СтрокаЗаказ.Строки Цикл
			Для ии = 1 По КоличествоЭтапов Цикл
				Этап = СтрокаПродукция["Этап" + ии];
				Если НЕ ЗначениеЗаполнено(СтрокаПродукция.ВидПроизводства) Тогда
					Этап = Справочники.ЭтапыПроизводства.ПустаяСсылка();
				КонецЕсли; 
				ЗначенияПолей = Новый Структура;
				ЗначенияПолей.Вставить("ДатаПроизводства", ДатаПроизводства);
				ЗначенияПолей.Вставить("Организация", СтрокаЗаказ.Организация);
				ЗначенияПолей.Вставить("Автор", Автор);
				ЗначенияПолей.Вставить("ПодразделениеЗавершающегоЭтапа", СтрокаПродукция.СтруктурнаяЕдиница);
				ЗначенияПолей.Вставить("СтруктурнаяЕдиница", ?(НЕ ЗначениеЗаполнено(Этап) ИЛИ Этап=Справочники.ЭтапыПроизводства.ЗавершениеПроизводства, СтрокаПродукция.СтруктурнаяЕдиница, СтрокаПродукция["СтруктурнаяЕдиница" + ии]));
				ЗначенияПолей.Вставить("Исполнитель", СтрокаПродукция["Исполнитель" + ии]);
				ЗначенияПолей.Вставить("ЗаказПокупателя", СтрокаЗаказ.ЗаказПокупателя);
				ЗначенияПолей.Вставить("ЗаказНаПроизводство", СтрокаЗаказ.ЗаказНаПроизводство);
				ЗначенияПолей.Вставить("Контрагент", СтрокаЗаказ.Контрагент);
				ЗначенияПолей.Вставить("Номенклатура", СтрокаПродукция.Номенклатура);
				ЗначенияПолей.Вставить("Характеристика", СтрокаПродукция.Характеристика);
				ЗначенияПолей.Вставить("Партия", СтрокаПродукция.Партия);
				ЗначенияПолей.Вставить("Спецификация", СтрокаПродукция.Спецификация);
				ЗначенияПолей.Вставить("Этап", Этап);
				ЗначенияПолей.Вставить("КоличествоПродукции", СтрокаПродукция.КоличествоПродукции);
				ЗначенияПолей.Вставить("КоличествоЭтапов", СтрокаПродукция.КоличествоЭтапов);
				ЗначенияПолей.Вставить("ВидПроизводства", СтрокаПродукция.ВидПроизводства);
				ЗначенияПолей.Вставить("ИсполнительСкрыт", СтрокаПродукция["ИсполнительСкрыт" + ии]);
				ЗначенияПолей.Вставить("ВыбиратьИсполнителя", СтрокаПродукция["ВыбиратьИсполнителя" + ии]);
				Если ВремяФормирования<>Неопределено Тогда
					ЗначенияПолей.Вставить("ВремяФормирования", ВремяФормирования);
				КонецЕсли; 
				Если СтрокаПродукция["ЭтапПометка" + ии] И НЕ СтрокаПродукция["ЭтапСтараяПометка" + ии] Тогда
					ВыполнитьЭтап(ЗначенияПолей,
					ТаблицаИзменений,
					ИзменяемыеДокументы,
					НовыеСборкиЗапасов,
					НовыеСдельныйНаряды,
					Ошибки);
				ИначеЕсли НЕ СтрокаПродукция["ЭтапПометка" + ии] И СтрокаПродукция["ЭтапСтараяПометка" + ии] Тогда
					ОтменитьЭтап(ЗначенияПолей,
					ТаблицаИзменений,
					ИзменяемыеДокументы,
					Ошибки);
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла; 
		НомерСтроки = НомерСтроки+1;
		ДлительныеОперации.СообщитьПрогресс(Окр(НомерСтроки/КоличествоСтрок*100), ТекстЭтап, СтрокаЗаказ.Представление);
	КонецЦикла; 	
	
	// Сохранение изменений
	ЗначенияОбщихПолей = Новый Структура;
	ЗначенияОбщихПолей.Вставить("ДатаПроизводства", ДатаПроизводства);
	ЗначенияОбщихПолей.Вставить("КоличествоЭтапов", КоличествоЭтапов);
	ЗначенияОбщихПолей.Вставить("СозданоДокументов", 0);
	ЗначенияОбщихПолей.Вставить("ИзмененоДокументов", 0);
	ПроверитьЗаполнениеДокументов(ТаблицаИзменений, ИзменяемыеДокументы, ЗначенияОбщихПолей, Ошибки);
	ЗначенияОбщихПолей.Вставить("НомерСтроки", 0);
	ЗаписатьСборкиЗапасов(Заказы, ТаблицаИзменений, ИзменяемыеДокументы, ЗначенияОбщихПолей, Ошибки);
	ЗаписатьСдельныеНаряды(Заказы, ТаблицаИзменений, ИзменяемыеДокументы, ЗначенияОбщихПолей, Ошибки);
	
	Результат.Вставить("Заказы", Заказы);
	Результат.Вставить("СозданоДокументов", ЗначенияОбщихПолей.СозданоДокументов);
	Результат.Вставить("ИзмененоДокументов", ЗначенияОбщихПолей.ИзмененоДокументов);
	Если Ошибки.Количество()>0 Тогда
		Результат.Вставить("Ошибки", Ошибки);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, ВременноеХранилищеРезультата);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументов(ТаблицаИзменений, ИзменяемыеДокументы, ЗначенияОбщихПолей, Ошибки)
	
	ОтменяемыеДокументы = Новый Массив;
	Для каждого Элемент Из ИзменяемыеДокументы Цикл
		
		ДокументОбъект = Элемент.Значение;
		СтруктураОтбора = Новый Структура;
		Если ТипЗнч(Элемент.Значение)=Тип("ДокументОбъект.СборкаЗапасов") Тогда
			СтруктураОтбора.Вставить("СборкаЗапасов", Элемент.Ключ);
			Если ДокументОбъект.Продукция.Количество()=0 Тогда
				// Документ будет помечен на удаление, проверять не нужно
				Продолжить;
			КонецЕсли; 
		ИначеЕсли ТипЗнч(Элемент.Значение)=Тип("ДокументОбъект.СдельныйНаряд") Тогда
			СтруктураОтбора.Вставить("СдельныйНаряд", Элемент.Ключ);
			Если ДокументОбъект.Операции.Количество()=0 Тогда
				// Документ будет помечен на удаление, проверять не нужно
				Продолжить;
			КонецЕсли; 
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиТаблицы = ТаблицаИзменений.НайтиСтроки(СтруктураОтбора);
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		СообщенияПользователю = ПолучитьСообщенияПользователю();
		Ошибка = СтрШаблон(НСтр("ru = 'Ошибка заполнения документа %1. Не удалось выполнить этапы:'"), ДокументОбъект.Ссылка);
		Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			Ошибка = Ошибка + Символы.ПС + СтрШаблон(НСтр("ru = '> %1, %2, %3'"), ПредставлениеЗаказов(СтрокаТаблицы), ПредставлениеНоменклатуры(СтрокаТаблицы), СтрокаТаблицы.Этап);
		КонецЦикла;
		Ошибки.Добавить(, Ошибка);
		Ошибка = РекурсивноеОписаниеОшибки(ИнформацияОбОшибке, СообщенияПользователю);
		Ошибки.Добавить(, Ошибка);
		
		Для каждого СтрокаИзменений Из ТаблицаИзменений Цикл
			ОтменитьИзмененияПоЭтапу(СтрокаИзменений, ЗначенияОбщихПолей, ИзменяемыеДокументы, ОтменяемыеДокументы, Ошибки);
		КонецЦикла;
		ОтменяемыеДокументы.Добавить(Элемент.Ключ);
		
	КонецЦикла;
	
	Для каждого Документ Из ОтменяемыеДокументы Цикл
		ИзменяемыеДокументы.Удалить(Документ);
	КонецЦикла;  
	
КонецПроцедуры

Процедура ОтменитьИзмененияПоЭтапу(СтрокаТаблицыИзменений, ЗначенияОбщихПолей, ИзменяемыеДокументы, ОтменяемыеДокументы, Ошибки)
	
	ЗначенияПолей = ЗначенияПолей(
	СтрокаТаблицыИзменений.ЗаказПокупателя,
	СтрокаТаблицыИзменений.ЗаказНаПроизводство,
	СтрокаТаблицыИзменений.Номенклатура,
	СтрокаТаблицыИзменений.Характеристика,
	СтрокаТаблицыИзменений.Партия,
	СтрокаТаблицыИзменений.Спецификация,
	СтрокаТаблицыИзменений.ВидПроизводства,
	СтрокаТаблицыИзменений.Этап,
	СтрокаТаблицыИзменений.КоличествоПродукции,
	СтрокаТаблицыИзменений.ПодразделениеЗавершающегоЭтапа);
	ЗначенияПолей.Вставить("ДатаПроизводства", ЗначенияОбщихПолей.ДатаПроизводства);
	
	Если ЗначениеЗаполнено(СтрокаТаблицыИзменений.СборкаЗапасов) Тогда
		ДокументОбъект = ИзменяемыеДокументы.Получить(СтрокаТаблицыИзменений.СборкаЗапасов);
		Если СтрокаТаблицыИзменений.Отменен Тогда
			ВыполнитьЭтапСборкаЗапасов(ДокументОбъект, ЗначенияПолей, Ошибки);
		Иначе
			ОтменитьЭтапСборкаЗапасов(ДокументОбъект, ЗначенияПолей, Ошибки);
		КонецЕсли; 
		СтрокаТаблицыИзменений.СборкаЗапасов = Неопределено;
	КонецЕсли; 	
	
	Если ЗначениеЗаполнено(СтрокаТаблицыИзменений.СдельныйНаряд) Тогда
		ДокументОбъект = ИзменяемыеДокументы.Получить(СтрокаТаблицыИзменений.СдельныйНаряд);
		Если СтрокаТаблицыИзменений.Отменен Тогда
			ВыполнитьЭтапСдельныйНаряд(ДокументОбъект, ЗначенияПолей, Ошибки);
		Иначе
			ОтменитьЭтапСдельныйНаряд(ДокументОбъект, ЗначенияПолей, Ошибки);
		КонецЕсли; 
		СтрокаТаблицыИзменений.СдельныйНаряд = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьСборкиЗапасов(Заказы, ТаблицаИзменений, ИзменяемыеДокументы, ЗначенияОбщихПолей, Ошибки)
	
	КоличествоСтрок = ИзменяемыеДокументы.Количество();
	ТекстЭтап = НСтр("ru = 'Сохранение изменений'");
	
	Для каждого Элемент Из ИзменяемыеДокументы Цикл
		
		Если ТипЗнч(Элемент.Значение)<>Тип("ДокументОбъект.СборкаЗапасов") Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Элемент.Значение;
		ЗначенияОбщихПолей.НомерСтроки = ЗначенияОбщихПолей.НомерСтроки+1;
		ДлительныеОперации.СообщитьПрогресс(Окр(ЗначенияОбщихПолей.НомерСтроки/КоличествоСтрок*100), ТекстЭтап, Строка(ДокументОбъект));
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("СборкаЗапасов", Элемент.Ключ);
		СтрокиТаблицы = ТаблицаИзменений.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокиТаблицы.Количество()=0 Тогда
			// Все изменения по документу отменены
			Продолжить;
		КонецЕсли; 
		
		Если ДокументОбъект.Продукция.Количество()=0 И ДокументОбъект.ЭтоНовый() Тогда
			Продолжить;
		ИначеЕсли ДокументОбъект.Продукция.Количество()=0 Тогда
			
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				ДокументОбъект.УстановитьПометкуУдаления(Истина);
				ЗначенияОбщихПолей.ИзмененоДокументов = ЗначенияОбщихПолей.ИзмененоДокументов + 1;
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				СообщенияПользователю = ПолучитьСообщенияПользователю();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Производство за смену: отмена этапов'"),
					УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.СборкаЗапасов, ДокументОбъект.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				Ошибка = НСтр("ru = 'Не удалось отменить этапы производства:'");
				Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
					Ошибка = Ошибка + Символы.ПС + СтрШаблон(НСтр("ru = '> %1, %2, %3'"), ПредставлениеЗаказов(СтрокаТаблицы), ПредставлениеНоменклатуры(СтрокаТаблицы), СтрокаТаблицы.Этап);
				КонецЦикла;
				Ошибки.Добавить(, Ошибка);
				Ошибка = РекурсивноеОписаниеОшибки(ИнформацияОбОшибке, СообщенияПользователю);
				Ошибки.Добавить(, Ошибка);
			КонецПопытки;
			
		Иначе
			
			Попытка
				
				ЭтоНовый = ДокументОбъект.ЭтоНовый();
				ДокументОбъект.ЗаполнитьКолонкуРезервПоРезервам();
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
					Для каждого СтрокаЗаказа Из Заказы.Строки Цикл
						Если СтрокаЗаказа.ЗаказПокупателя<>СтрокаТаблицы.ЗаказПокупателя 
							ИЛИ СтрокаЗаказа.ЗаказНаПроизводство<>СтрокаТаблицы.ЗаказНаПроизводство Тогда
							Продолжить;
						КонецЕсли; 
						Для каждого СтрокаПродукции Из СтрокаЗаказа.Строки Цикл
							Если СтрокаПродукции.Номенклатура<>СтрокаТаблицы.Номенклатура 
								ИЛИ СтрокаПродукции.Характеристика<>СтрокаТаблицы.Характеристика 
								ИЛИ СтрокаПродукции.Партия<>СтрокаТаблицы.Партия 
								ИЛИ СтрокаПродукции.Спецификация<>СтрокаТаблицы.Спецификация Тогда
								Продолжить;
							КонецЕсли; 
							Для ии = 1 По ЗначенияОбщихПолей.КоличествоЭтапов Цикл
								Если СтрокаПродукции["Этап" + ии]<>СтрокаТаблицы.Этап Тогда
									Продолжить;
								КонецЕсли;
								СтрокаПродукции["ЭтапСтараяПометка" + ии] = СтрокаПродукции["ЭтапПометка" + ии];
								СтрокаЗаказа["ЭтапСтараяПометка" + ии] = ОдинаковоеЗначение(СтрокаЗаказа, "ЭтапСтараяПометка" + ии);
								СтрокаПродукции["СборкаЗапасов" + ии] = ДокументОбъект.Ссылка;
								СтрокаПродукции["СборкаЗапасовПредставление" + ии] = ПредставлениеДокумента(ДокументОбъект.Номер, ДокументОбъект.Дата);
								СтрокаЗаказа["СборкаЗапасов" + ии] = ОдинаковоеЗначение(СтрокаЗаказа, "СборкаЗапасов" + ии);
								Если ЗначениеЗаполнено(СтрокаЗаказа["СборкаЗапасов" + ии]) Тогда
									СтрокаЗаказа["СборкаЗапасовПредставление" + ии] = СтрокаПродукции["СборкаЗапасовПредставление" + ии]; 
								КонецЕсли; 
							КонецЦикла; 
							СтрокаПродукции.ЕстьСохраненныеДокументы = Истина;
							СтрокаЗаказа.ЕстьСохраненныеДокументы = ОдинаковоеЗначение(СтрокаЗаказа, "ЕстьСохраненныеДокументы");
						КонецЦикла; 
					КонецЦикла; 
				КонецЦикла;
				Если ЭтоНовый Тогда
					ЗначенияОбщихПолей.СозданоДокументов = ЗначенияОбщихПолей.СозданоДокументов + 1;
				Иначе
					ЗначенияОбщихПолей.ИзмененоДокументов = ЗначенияОбщихПолей.ИзмененоДокументов + 1;
				КонецЕсли; 
				
			Исключение
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				СообщенияПользователю = ПолучитьСообщенияПользователю();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Производство за смену: выполнение этапов'"),
					УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.СборкаЗапасов, ?(ДокументОбъект.ЭтоНовый(), Неопределено, ДокументОбъект.Ссылка), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				Ошибка = НСтр("ru = 'Не удалось выполнить этапы производства:'");
				Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
					Ошибка = Ошибка + Символы.ПС + СтрШаблон(НСтр("ru = '> %1, %2, %3'"), ПредставлениеЗаказов(СтрокаТаблицы), ПредставлениеНоменклатуры(СтрокаТаблицы), СтрокаТаблицы.Этап);
				КонецЦикла;
				Ошибки.Добавить(, Ошибка);
				Ошибка = РекурсивноеОписаниеОшибки(ИнформацияОбОшибке, СообщенияПользователю);
				Ошибки.Добавить(, Ошибка);
				
				// Отмена изменений по сдельным нарядам
				Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СдельныйНаряд) Тогда
						Продолжить;
					КонецЕсли;
					
					ЗначенияПолей = ЗначенияПолей(
					СтрокаТаблицы.ЗаказПокупателя,
					СтрокаТаблицы.ЗаказНаПроизводство,
					СтрокаТаблицы.Номенклатура,
					СтрокаТаблицы.Характеристика,
					СтрокаТаблицы.Партия,
					СтрокаТаблицы.Спецификация,
					СтрокаТаблицы.ВидПроизводства,
					СтрокаТаблицы.Этап,
					СтрокаТаблицы.КоличествоПродукции,
					СтрокаТаблицы.ПодразделениеЗавершающегоЭтапа);
					ЗначенияПолей.Вставить("ДатаПроизводства", ЗначенияОбщихПолей.ДатаПроизводства);
					
					ДокументОбъект = ИзменяемыеДокументы.Получить(СтрокаТаблицы.СдельныйНаряд);
					Если СтрокаТаблицы.Отменен Тогда
						ВыполнитьЭтапСдельныйНаряд(ДокументОбъект, ЗначенияПолей, Ошибки);
					Иначе
						ОтменитьЭтапСдельныйНаряд(ДокументОбъект, ЗначенияПолей, Ошибки);
					КонецЕсли; 
					СтрокаТаблицы.СдельныйНаряд = Неопределено;

				КонецЦикла; 
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьСдельныеНаряды(Заказы, ТаблицаИзменений, ИзменяемыеДокументы, ЗначенияОбщихПолей, Ошибки)
	
	КоличествоСтрок = ИзменяемыеДокументы.Количество();
	ТекстЭтап = НСтр("ru = 'Сохранение изменений'");
	
	Для каждого Элемент Из ИзменяемыеДокументы Цикл
		
		Если ТипЗнч(Элемент.Значение)<>Тип("ДокументОбъект.СдельныйНаряд") Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Элемент.Значение;
		ЗначенияОбщихПолей.НомерСтроки = ЗначенияОбщихПолей.НомерСтроки+1;
		ДлительныеОперации.СообщитьПрогресс(Окр(ЗначенияОбщихПолей.НомерСтроки/КоличествоСтрок*100), ТекстЭтап, Строка(ДокументОбъект));
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("СдельныйНаряд", Элемент.Ключ);
		СтрокиТаблицы = ТаблицаИзменений.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокиТаблицы.Количество()=0 Тогда
			// Все изменения по документу отменены
			Продолжить;
		КонецЕсли; 
		
		Если ДокументОбъект.Операции.Количество()=0 И ДокументОбъект.ЭтоНовый() Тогда
			Продолжить;
		ИначеЕсли ДокументОбъект.Операции.Количество()=0 Тогда
			
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				ДокументОбъект.УстановитьПометкуУдаления(Истина);
				ЗначенияОбщихПолей.ИзмененоДокументов = ЗначенияОбщихПолей.ИзмененоДокументов + 1;
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				СообщенияПользователю = ПолучитьСообщенияПользователю();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Сдельный наряд: отмена этапов'"),
					УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.СдельныйНаряд, ДокументОбъект.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				Ошибка = НСтр("ru = 'Не удалось отменить этапы производства:'");
				Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
					Ошибка = Ошибка + Символы.ПС + СтрШаблон(НСтр("ru = '> %1, %2, %3'"), ПредставлениеЗаказов(СтрокаТаблицы), ПредставлениеНоменклатуры(СтрокаТаблицы), СтрокаТаблицы.Этап);
				КонецЦикла;
				Ошибки.Добавить(, Ошибка);
				Ошибка = РекурсивноеОписаниеОшибки(ИнформацияОбОшибке, СообщенияПользователю);
				Ошибки.Добавить(, Ошибка);
			КонецПопытки;
			
		Иначе
			
			Попытка
				
				ЭтоНовый = ДокументОбъект.ЭтоНовый();
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
					Для каждого СтрокаЗаказа Из Заказы.Строки Цикл
						Если СтрокаЗаказа.ЗаказПокупателя<>СтрокаТаблицы.ЗаказПокупателя 
							ИЛИ СтрокаЗаказа.ЗаказНаПроизводство<>СтрокаТаблицы.ЗаказНаПроизводство Тогда
							Продолжить;
						КонецЕсли; 
						Для каждого СтрокаПродукции Из СтрокаЗаказа.Строки Цикл
							Если СтрокаПродукции.Номенклатура<>СтрокаТаблицы.Номенклатура 
								ИЛИ СтрокаПродукции.Характеристика<>СтрокаТаблицы.Характеристика 
								ИЛИ СтрокаПродукции.Партия<>СтрокаТаблицы.Партия 
								ИЛИ СтрокаПродукции.Спецификация<>СтрокаТаблицы.Спецификация Тогда
								Продолжить;
							КонецЕсли; 
							Для ии = 1 По ЗначенияОбщихПолей.КоличествоЭтапов Цикл
								Если СтрокаПродукции["Этап" + ии]<>СтрокаТаблицы.Этап Тогда
									Продолжить;
								КонецЕсли;
								СтрокаПродукции["СдельныйНаряд" + ии] = ДокументОбъект.Ссылка;
								СтрокаПродукции["СдельныйНарядПредставление" + ии] = ПредставлениеДокумента(ДокументОбъект.Номер, ДокументОбъект.Дата);
								СтрокаЗаказа["СдельныйНаряд" + ии] = ОдинаковоеЗначение(СтрокаЗаказа, "СдельныйНаряд" + ии);
								Если ЗначениеЗаполнено(СтрокаЗаказа["СдельныйНаряд" + ии]) Тогда
									СтрокаЗаказа["СдельныйНарядПредставление" + ии] = СтрокаПродукции["СдельныйНарядПредставление" + ии]; 
								КонецЕсли; 
							КонецЦикла; 
							СтрокаПродукции.ЕстьСохраненныеДокументы = Истина;
							СтрокаЗаказа.ЕстьСохраненныеДокументы = ОдинаковоеЗначение(СтрокаЗаказа, "ЕстьСохраненныеДокументы");
						КонецЦикла; 
					КонецЦикла; 
				КонецЦикла;
				Если ЭтоНовый Тогда
					ЗначенияОбщихПолей.СозданоДокументов = ЗначенияОбщихПолей.СозданоДокументов + 1;
				Иначе
					ЗначенияОбщихПолей.ИзмененоДокументов = ЗначенияОбщихПолей.ИзмененоДокументов + 1;
				КонецЕсли; 
				
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				СообщенияПользователю = ПолучитьСообщенияПользователю();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Сдельный наряд: выполнение этапов'"),
					УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.СдельныйНаряд, ?(ДокументОбъект.ЭтоНовый(), Неопределено, ДокументОбъект.Ссылка), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				Ошибка = НСтр("ru = 'Не удалось выполнить этапы производства:'");
				Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
					Ошибка = Ошибка + Символы.ПС + СтрШаблон(НСтр("ru = '> %1, %2, %3'"), ПредставлениеЗаказов(СтрокаТаблицы), ПредставлениеНоменклатуры(СтрокаТаблицы), СтрокаТаблицы.Этап);
				КонецЦикла;
				Ошибки.Добавить(, Ошибка);
				Ошибка = РекурсивноеОписаниеОшибки(ИнформацияОбОшибке, СообщенияПользователю);
				Ошибки.Добавить(, Ошибка);
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьПустыеТаблицы(ТаблицаИзменений, НовыеСборкиЗапасов, НовыеСдельныйНаряды)
	
	ТаблицаИзменений = Новый ТаблицаЗначений;
	ТаблицаИзменений.Колонки.Добавить("ЗаказПокупателя");
	ТаблицаИзменений.Колонки.Добавить("ЗаказНаПроизводство");
	ТаблицаИзменений.Колонки.Добавить("Контрагент");
	ТаблицаИзменений.Колонки.Добавить("Номенклатура");
	ТаблицаИзменений.Колонки.Добавить("Характеристика");
	ТаблицаИзменений.Колонки.Добавить("Партия");
	ТаблицаИзменений.Колонки.Добавить("Спецификация");
	ТаблицаИзменений.Колонки.Добавить("ВидПроизводства");
	ТаблицаИзменений.Колонки.Добавить("Этап");
	ТаблицаИзменений.Колонки.Добавить("СборкаЗапасов");
	ТаблицаИзменений.Колонки.Добавить("СдельныйНаряд");
	ТаблицаИзменений.Колонки.Добавить("Отменен");
	ТаблицаИзменений.Колонки.Добавить("КоличествоПродукции");
	ТаблицаИзменений.Колонки.Добавить("ПодразделениеЗавершающегоЭтапа");
	
	НовыеСборкиЗапасов = Новый ТаблицаЗначений;
	НовыеСборкиЗапасов.Колонки.Добавить("ЗаказНаПроизводство");
	НовыеСборкиЗапасов.Колонки.Добавить("СтруктурнаяЕдиница");
	НовыеСборкиЗапасов.Колонки.Добавить("СборкаЗапасов");
	
	НовыеСдельныйНаряды = Новый ТаблицаЗначений;
	НовыеСдельныйНаряды.Колонки.Добавить("СтруктурнаяЕдиница");
	НовыеСдельныйНаряды.Колонки.Добавить("СдельныйНаряд");
	
КонецПроцедуры

Функция СуществующийДокумент(ЗначенияПолей, ТаблицаИзменений, ИзменяемыеДокументы, ИмяДокумента = "СборкаЗапасов")
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаПроизводства", ЗначенияПолей.ДатаПроизводства);
	Запрос.УстановитьПараметр("Заказ", ?(ЗначениеЗаполнено(ЗначенияПолей.ЗаказПокупателя), ЗначенияПолей.ЗаказПокупателя, ЗначенияПолей.ЗаказНаПроизводство));
	Запрос.УстановитьПараметр("Номенклатура", ЗначенияПолей.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", ЗначенияПолей.Характеристика);
	Запрос.УстановитьПараметр("Партия", ЗначенияПолей.Партия);
	Запрос.УстановитьПараметр("Спецификация", ЗначенияПолей.Спецификация);
	Запрос.УстановитьПараметр("Этап", ЗначенияПолей.Этап);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭтапыПроизводства.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства КАК ЭтапыПроизводства
	|ГДЕ
	|	ЭтапыПроизводства.Период МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаПроизводства, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаПроизводства, ДЕНЬ)
	|	И ЭтапыПроизводства.Заказ = &Заказ
	|	И ЭтапыПроизводства.Номенклатура = &Номенклатура
	|	И ЭтапыПроизводства.Характеристика = &Характеристика
	|	И ЭтапыПроизводства.Спецификация = &Спецификация
	|	И ЭтапыПроизводства.Партия = &Партия
	|	И ЭтапыПроизводства.Этап = &Этап
	|	И ЭтапыПроизводства.Регистратор ССЫЛКА Документ.СборкаЗапасов";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.СборкаЗапасов", "Документ." + ИмяДокумента);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ИзменяемыеДокументы.Получить(Выборка.Регистратор)=Неопределено Тогда
			ИзменяемыеДокументы.Вставить(Выборка.Регистратор, Выборка.Регистратор.ПолучитьОбъект());
		КонецЕсли;
		Если ИмяДокумента="СборкаЗапасов" Тогда
			ДобавитьЗаписьОбИзменении(ТаблицаИзменений, ЗначенияПолей, Выборка.Регистратор, , Истина);
		Иначе
			ДобавитьЗаписьОбИзменении(ТаблицаИзменений, ЗначенияПолей, , Выборка.Регистратор, Истина);
		КонецЕсли;
		Возврат Выборка.Регистратор;
	Иначе
		Возврат Неопределено;
	КонецЕсли;  
	
КонецФункции

Функция НайтиСоздатьДокументСборкаЗапасов(ЗначенияПолей, ТаблицаИзменений, ИзменяемыеДокументы, НовыеСборкиЗапасов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаПроизводства", ЗначенияПолей.ДатаПроизводства);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ЗначенияПолей.СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("Организация", ЗначенияПолей.Организация);
	Запрос.УстановитьПараметр("ЗаказНаПроизводство", ЗначенияПолей.ЗаказНаПроизводство);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭтапыПроизводства.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства КАК ЭтапыПроизводства
	|ГДЕ
	|	ЭтапыПроизводства.Период МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаПроизводства, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаПроизводства, ДЕНЬ)
	|	И ЭтапыПроизводства.КоличествоФакт > 0
	|	И ЭтапыПроизводства.Регистратор ССЫЛКА Документ.СборкаЗапасов
	|	И ЭтапыПроизводства.Регистратор.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И ЭтапыПроизводства.Регистратор.Организация = &Организация
	|	И ЭтапыПроизводства.Регистратор.ЗаказНаПроизводство = &ЗаказНаПроизводство";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если ИзменяемыеДокументы.Получить(Выборка.Регистратор)=Неопределено Тогда
			ИзменяемыеДокументы.Вставить(Выборка.Регистратор, Выборка.Регистратор.ПолучитьОбъект());
		КонецЕсли;
		ДобавитьЗаписьОбИзменении(ТаблицаИзменений, ЗначенияПолей, Выборка.Регистратор);
		Возврат ИзменяемыеДокументы.Получить(Выборка.Регистратор);
		
	Иначе	
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЗаказНаПроизводство", ЗначенияПолей.ЗаказНаПроизводство);
		СтруктураОтбора.Вставить("СтруктурнаяЕдиница", ЗначенияПолей.СтруктурнаяЕдиница);
		СтрокиДокументы = НовыеСборкиЗапасов.НайтиСтроки(СтруктураОтбора);
		Если СтрокиДокументы.Количество()>0 Тогда
			// Уже создан новый документ по такому же заказу на производство и структурной единице
			ДобавитьЗаписьОбИзменении(ТаблицаИзменений, ЗначенияПолей, СтрокиДокументы[0].СборкаЗапасов);
			Возврат ИзменяемыеДокументы.Получить(СтрокиДокументы[0].СборкаЗапасов);
		КонецЕсли; 
		
		Док = Документы.СборкаЗапасов.СоздатьДокумент();
		Если ЗначенияПолей.Свойство("ВремяФормирования") Тогда
			ЗначенияПолей.ВремяФормирования = ЗначенияПолей.ВремяФормирования + 1;
			Если КонецДня('0001-01-01')<('0001-01-01' + ЗначенияПолей.ВремяФормирования) Тогда
				ЗначенияПолей.ВремяФормирования = КонецДня('0001-01-01') - '0001-01-01';
			КонецЕсли; 
			Док.Дата = ЗначенияПолей.ДатаПроизводства + ЗначенияПолей.ВремяФормирования;
		ИначеЕсли ЗначенияПолей.ДатаПроизводства>КонецДня(ТекущаяДатаСеанса()) Тогда
			Док.Дата = ЗначенияПолей.ДатаПроизводства;
		Иначе
			Док.Дата = ЗначенияПолей.ДатаПроизводства + (ТекущаяДатаСеанса() - НачалоДня(ТекущаяДатаСеанса()));
		КонецЕсли; 
		Док.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Сборка;
		Док.Организация = ЗначенияПолей.Организация;
		Док.Автор = ЗначенияПолей.Автор;
		Док.СтруктурнаяЕдиница = ЗначенияПолей.СтруктурнаяЕдиница;
		Если ЗначениеЗаполнено(ЗначенияПолей.ЗаказНаПроизводство) Тогда
			Док.ЗаказНаПроизводство = ЗначенияПолей.ЗаказНаПроизводство;
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗначенияПолей.ЗаказНаПроизводство, "ПоложениеСклада, ПоложениеЗаказаПокупателя");
			Док.ПоложениеСклада = ЗначенияРеквизитов.ПоложениеСклада;
			Док.ПоложениеЗаказаПокупателя = ЗначенияРеквизитов.ПоложениеЗаказаПокупателя;
		Иначе
			Док.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
			Док.ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		КонецЕсли; 
		СтруктураДанные = ПолучитьДанныеСтруктурнаяЕдиница(ЗначенияПолей.СтруктурнаяЕдиница);
		Док.ПодписьКонтролера = СтруктураДанные.ПодписьКонтролера;
		Если НЕ ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам") Тогда
			Док.СтруктурнаяЕдиницаПродукции = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
		ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.СтруктурнаяЕдиницаПродукции) Тогда
			Док.СтруктурнаяЕдиницаПродукции = СтруктураДанные.СтруктурнаяЕдиницаПродукции;
			Док.ЯчейкаПродукции = СтруктураДанные.ЯчейкаПродукции;
		Иначе
			Док.СтруктурнаяЕдиницаПродукции = ЗначенияПолей.СтруктурнаяЕдиница;
		КонецЕсли;
		Если НЕ ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам") Тогда
			Док.СтруктурнаяЕдиницаЗапасов = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
		ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.СтруктурнаяЕдиницаЗапасов) Тогда
			Док.СтруктурнаяЕдиницаЗапасов = СтруктураДанные.СтруктурнаяЕдиницаЗапасов;
			Док.ЯчейкаЗапасов = СтруктураДанные.ЯчейкаЗапасов;
		Иначе
			Док.СтруктурнаяЕдиницаЗапасов = ЗначенияПолей.СтруктурнаяЕдиница;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанные.СтруктурнаяЕдиницаОтходов) Тогда
			Док.СтруктурнаяЕдиницаОтходов = СтруктураДанные.СтруктурнаяЕдиницаОтходов;
			Док.ЯчейкаОтходов = СтруктураДанные.ЯчейкаОтходов;
		Иначе
			Док.СтруктурнаяЕдиницаОтходов = Док.СтруктурнаяЕдиница;
			Док.ЯчейкаОтходов = Док.Ячейка;
		КонецЕсли;
		Док.ПодписьКладовщикаОтправил = СтруктураДанные.СтруктурнаяЕдиницаЗапасовПодписьМОЛ;
		Док.ПодписьКладовщикаПолучил = СтруктураДанные.СтруктурнаяЕдиницаПродукцииПодписьМОЛ;
		
		Док.УстановитьСсылкуНового(Документы.СборкаЗапасов.ПолучитьСсылку(Новый УникальныйИдентификатор));
		ИзменяемыеДокументы.Вставить(Док.ПолучитьСсылкуНового(), Док);
		
		ДобавитьЗаписьОбИзменении(ТаблицаИзменений, ЗначенияПолей, Док.ПолучитьСсылкуНового());
		
		НоваяСтрока = НовыеСборкиЗапасов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияПолей);
		НоваяСтрока.СборкаЗапасов = Док.ПолучитьСсылкуНового();
		
		Возврат Док;
		
	КонецЕсли;  
	
КонецФункции

Функция НайтиСоздатьДокументСдельныйНаряд(ЗначенияПолей, ТаблицаИзменений, ИзменяемыеДокументы, НовыеСдельныйНаряды)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаПроизводства", ЗначенияПолей.ДатаПроизводства);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ЗначенияПолей.СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("Организация", ЗначенияПолей.Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭтапыПроизводства.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства КАК ЭтапыПроизводства
	|ГДЕ
	|	ЭтапыПроизводства.Период МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаПроизводства, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаПроизводства, ДЕНЬ)
	|	И ЭтапыПроизводства.КоличествоФакт > 0
	|	И ЭтапыПроизводства.Регистратор ССЫЛКА Документ.СдельныйНаряд
	|	И ЭтапыПроизводства.Регистратор.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И ЭтапыПроизводства.Регистратор.Организация = &Организация";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если ИзменяемыеДокументы.Получить(Выборка.Регистратор)=Неопределено Тогда
			ИзменяемыеДокументы.Вставить(Выборка.Регистратор, Выборка.Регистратор.ПолучитьОбъект());
		КонецЕсли;
		ДобавитьЗаписьОбИзменении(ТаблицаИзменений, ЗначенияПолей, , Выборка.Регистратор);
		Возврат ИзменяемыеДокументы.Получить(Выборка.Регистратор);
		
	Иначе	
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("СтруктурнаяЕдиница", ЗначенияПолей.СтруктурнаяЕдиница);
		СтрокиДокументы = НовыеСдельныйНаряды.НайтиСтроки(СтруктураОтбора);
		Если СтрокиДокументы.Количество()>0 Тогда
			// Уже создан новый документ по такому же заказу на производство и структурной единице
			ДобавитьЗаписьОбИзменении(ТаблицаИзменений, ЗначенияПолей, , СтрокиДокументы[0].СдельныйНаряд);
			Возврат ИзменяемыеДокументы.Получить(СтрокиДокументы[0].СдельныйНаряд);
		КонецЕсли; 
		
		Док = Документы.СдельныйНаряд.СоздатьДокумент();
		Если ЗначенияПолей.Свойство("ВремяФормирования") Тогда
			ЗначенияПолей.ВремяФормирования = ЗначенияПолей.ВремяФормирования + 1;
			Если КонецДня('0001-01-01')<('0001-01-01' + ЗначенияПолей.ВремяФормирования) Тогда
				ЗначенияПолей.ВремяФормирования = КонецДня('0001-01-01') - '0001-01-01';
			КонецЕсли; 
			Док.Дата = ЗначенияПолей.ДатаПроизводства + ЗначенияПолей.ВремяФормирования;
		ИначеЕсли ЗначенияПолей.ДатаПроизводства>КонецДня(ТекущаяДатаСеанса()) Тогда
			Док.Дата = ЗначенияПолей.ДатаПроизводства;
		Иначе
			Док.Дата = ЗначенияПолей.ДатаПроизводства + (ТекущаяДатаСеанса() - НачалоДня(ТекущаяДатаСеанса()));
		КонецЕсли; 
		Док.ДатаЗакрытия = Док.Дата;
		Док.Организация = ЗначенияПолей.Организация;
		Док.Автор = ЗначенияПолей.Автор;
		Док.СтруктурнаяЕдиница = ЗначенияПолей.СтруктурнаяЕдиница;
		Док.ПоложениеЗаказаНаПроизводство = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		Док.ПоложениеИсполнителя = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
		Док.ПоложениеСтруктурнойЕдиницы = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		Если ЗначениеЗаполнено(ЗначенияПолей.ЗаказНаПроизводство) Тогда
			Док.ЗаказНаПроизводство = ЗначенияПолей.ЗаказНаПроизводство;
		КонецЕсли;
		Док.Закрыт = Истина;
		Док.ВалютаДокумента = Константы.ВалютаУчета.Получить();
		
		Док.УстановитьСсылкуНового(Документы.СдельныйНаряд.ПолучитьСсылку(Новый УникальныйИдентификатор));
		ИзменяемыеДокументы.Вставить(Док.ПолучитьСсылкуНового(), Док);
		
		ДобавитьЗаписьОбИзменении(ТаблицаИзменений, ЗначенияПолей, , Док.ПолучитьСсылкуНового());
		
		НоваяСтрока = НовыеСдельныйНаряды.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияПолей);
		НоваяСтрока.СдельныйНаряд = Док.ПолучитьСсылкуНового();
		
		Возврат Док;
		
	КонецЕсли;  
	
КонецФункции

Процедура ДобавитьЗаписьОбИзменении(ТаблицаИзменений, ЗначенияПолей, СборкаЗапасов = Неопределено, СдельныйНаряд = Неопределено, Отменен = Ложь)

	Если СборкаЗапасов=Неопределено И СдельныйНаряд=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураПоиска = Новый Структура("ЗаказПокупателя, ЗаказНаПроизводство, Контрагент, Номенклатура, Характеристика, Партия, Спецификация, Этап");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ЗначенияПолей);
	СтруктураПоиска.Вставить("Отменен", Отменен);
	Строки = ТаблицаИзменений.НайтиСтроки(СтруктураПоиска);
	ИзмененияВнесены = Ложь;
	Для каждого СтрокаТаблицы Из Строки Цикл
		Если СборкаЗапасов<>Неопределено И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СборкаЗапасов) Тогда
			СтрокаТаблицы.СборкаЗапасов = СборкаЗапасов;
			ИзмененияВнесены = Истина;
			Прервать;
		КонецЕсли; 
		Если СдельныйНаряд<>Неопределено И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СдельныйНаряд) Тогда
			СтрокаТаблицы.СдельныйНаряд = СдельныйНаряд;
			ИзмененияВнесены = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если НЕ ИзмененияВнесены Тогда
		НоваяСтрока = ТаблицаИзменений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияПолей);
		Если СборкаЗапасов<>Неопределено Тогда
			НоваяСтрока.СборкаЗапасов = СборкаЗапасов;
		КонецЕсли; 
		Если СдельныйНаряд<>Неопределено Тогда
			НоваяСтрока.СдельныйНаряд = СдельныйНаряд;
		КонецЕсли;
		НоваяСтрока.Отменен = Отменен;
	КонецЕсли; 
	
КонецПроцедуры 

Процедура ВыполнитьЭтап(ЗначенияПолей, ТаблицаИзменений, ИзменяемыеДокументы, НовыеСборкиЗапасов, НовыеСдельныйНаряды, Ошибки)
	
	ДокументОбъект = НайтиСоздатьДокументСборкаЗапасов(ЗначенияПолей, ТаблицаИзменений, ИзменяемыеДокументы, НовыеСборкиЗапасов);
	Если НЕ ВыполнитьЭтапСборкаЗапасов(ДокументОбъект, ЗначенияПолей, Ошибки) Тогда
		// Не удалось заполнить документ производства, откат изменений
		СсылкаДляПоиска = ?(ДокументОбъект.ЭтоНовый(), ДокументОбъект.ПолучитьСсылкуНового(), ДокументОбъект.Ссылка);
		ТаблицаИзменений.Удалить(ТаблицаИзменений.Количество()-1);
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("СборкаЗапасов", СсылкаДляПоиска);
		Если ТаблицаИзменений.НайтиСтроки(СтруктураПоиска).Количество()=0 Тогда
			ИзменяемыеДокументы.Удалить(СсылкаДляПоиска);
			Если ДокументОбъект.ЭтоНовый() Тогда
				УдаляемыеСтроки = НовыеСборкиЗапасов.НайтиСтроки(СтруктураПоиска);
				Для каждого СтрокаУдаления Из УдаляемыеСтроки Цикл
					НовыеСборкиЗапасов.Удалить(СтрокаУдаления);
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли; 
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьТехоперации") И НЕ ЗначенияПолей.ИсполнительСкрыт Тогда
		
		ДокументОбъект = НайтиСоздатьДокументСдельныйНаряд(ЗначенияПолей, ТаблицаИзменений, ИзменяемыеДокументы, НовыеСдельныйНаряды);
		ВыполнитьЭтапСдельныйНаряд(ДокументОбъект, ЗначенияПолей, Ошибки);

	КонецЕсли; 
	
КонецПроцедуры

Функция ЗначенияПолей(ЗаказПокупателя, ЗаказНаПроизводство, Номенклатура, Характеристика, Партия, Спецификация, ВидПроизводства, Этап, КоличествоПродукции, ПодразделениеЗавершающегоЭтапа)
	
	ЗначенияПолей = Новый Структура;
	ЗначенияПолей.Вставить("ЗаказПокупателя", ЗаказПокупателя);
	ЗначенияПолей.Вставить("ЗаказНаПроизводство", ЗаказНаПроизводство);
	ЗначенияПолей.Вставить("Номенклатура", Номенклатура);
	ЗначенияПолей.Вставить("Характеристика", Характеристика);
	ЗначенияПолей.Вставить("Партия", Партия);
	ЗначенияПолей.Вставить("Спецификация", Спецификация);
	ЗначенияПолей.Вставить("Этап", Этап);
	ЗначенияПолей.Вставить("КоличествоПродукции", КоличествоПродукции);
	ЗначенияПолей.Вставить("ВидПроизводства", ВидПроизводства);
	ЗначенияПолей.Вставить("ПодразделениеЗавершающегоЭтапа", ПодразделениеЗавершающегоЭтапа);
	Возврат ЗначенияПолей;
	
КонецФункции

Функция ВыполнитьЭтапСборкаЗапасов(ДокументОбъект, ЗначенияПолей, Ошибки)
	
	Если ЗначениеЗаполнено(ЗначенияПолей.ЗаказПокупателя) 
		И ДокументОбъект.ПоложениеЗаказаПокупателя<>Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти
		И ДокументОбъект.ЗаказПокупателя<>ЗначенияПолей.ЗаказПокупателя Тогда
		ДокументОбъект.ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	КонецЕсли;
	
	ТаблицаСостава = СоставЭтапа(ЗначенияПолей);
	Если НЕ ПроверитьСостав(ЗначенияПолей, ТаблицаСостава, Ошибки) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	СтруктураПоиска = Новый Структура;
	Если ЗначениеЗаполнено(ЗначенияПолей.ЗаказПокупателя) Тогда
		СтруктураПоиска.Вставить("ЗаказПокупателя", ЗначенияПолей.ЗаказПокупателя);
	КонецЕсли; 
	СтруктураПоиска.Вставить("Номенклатура", ЗначенияПолей.Номенклатура);
	СтруктураПоиска.Вставить("Характеристика", ЗначенияПолей.Характеристика);
	СтруктураПоиска.Вставить("Партия", ЗначенияПолей.Партия);
	СтруктураПоиска.Вставить("Спецификация", ЗначенияПолей.Спецификация);
	
	// Продукция
	СтрокиПродукция = ДокументОбъект.Продукция.НайтиСтроки(СтруктураПоиска);
	Если СтрокиПродукция.Количество()=0 Тогда
		НоваяСтрокаПродукция = ДокументОбъект.Продукция.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПродукция, ЗначенияПолей, "ЗаказПокупателя, Номенклатура, Характеристика, Партия, Спецификация");
		Если ЗначениеЗаполнено(ЗначенияПолей.ВидПроизводства) Тогда
			НоваяСтрокаПродукция.ПодразделениеЗавершающегоЭтапа = ЗначенияПолей.ПодразделениеЗавершающегоЭтапа;
		КонецЕсли; 
		НоваяСтрокаПродукция.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначенияПолей.Номенклатура, "ЕдиницаИзмерения");
		НоваяСтрокаПродукция.Количество = ЗначенияПолей.КоличествоПродукции;
		ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(ДокументОбъект.Продукция, НоваяСтрокаПродукция, "КлючСвязи");
	Иначе
		НоваяСтрокаПродукция = СтрокиПродукция[0];
	КонецЕсли;
	
	// Выполненные этапы
	Если ЗначениеЗаполнено(ЗначенияПолей.ВидПроизводства) Тогда
		СтруктураПоискаКлючСвязи = Новый Структура;
		СтруктураПоискаКлючСвязи.Вставить("КлючСвязи", НоваяСтрокаПродукция.КлючСвязи);
		СтруктураПоискаКлючСвязи.Вставить("Этап", ЗначенияПолей.Этап);
		СтрокиВыполненныеЭтапы = ДокументОбъект.ВыполненныеЭтапы.НайтиСтроки(СтруктураПоискаКлючСвязи);
		Если СтрокиВыполненныеЭтапы.Количество()=0 Тогда
			НоваяСтрокаВыполненныйЭтап = ДокументОбъект.ВыполненныеЭтапы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаВыполненныйЭтап, СтруктураПоискаКлючСвязи);
		КонецЕсли; 
	КонецЕсли; 
	
	// Распределение материалов
	Для каждого СтрокаТаблицы Из ТаблицаСостава Цикл
		НоваяСтрока = ДокументОбъект.РаспределениеЗапасов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.КлючСвязиПродукция = НоваяСтрокаПродукция.КлючСвязи;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтруктурнаяЕдиница) Тогда
			НоваяСтрока.СтруктурнаяЕдиница = ДокументОбъект.СтруктурнаяЕдиницаЗапасов;
		КонецЕсли; 
		Если НоваяСтрока.СтруктурнаяЕдиница<>ДокументОбъект.СтруктурнаяЕдиницаЗапасов
			И ДокументОбъект.ПоложениеСклада<>Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			ДокументОбъект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
		КонецЕсли; 
	КонецЦикла; 
	
	ПроизводствоСервер.ЗаполнитьПоРаспределению(ДокументОбъект.Запасы, ДокументОбъект.РаспределениеЗапасов);
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьСостав(ЗначенияПолей, ТаблицаСостава, Ошибки)
	
	КонтрольСерийНоменклатуры = ПолучитьФункциональнуюОпцию("КонтрольОстатковСерийНоменклатуры");
	КонтрольГТД = Константы.КонтролироватьОстаткиПоНомерамГТД.Получить();
	Если НЕ КонтрольСерийНоменклатуры И НЕ КонтрольГТД Тогда
		Возврат Истина;
	КонецЕсли; 
	
	СписокСерииНоменклатуры = Новый СписокЗначений;
	СписокНомераГТД = Новый СписокЗначений;
	Для каждого СтрокаТабличнойЧасти Из ТаблицаСостава Цикл
		Если КонтрольСерийНоменклатуры 
			И СтрокаТабличнойЧасти.ИспользоватьСерииНоменклатуры 
			И СписокСерииНоменклатуры.НайтиПоЗначению(СтрокаТабличнойЧасти.Номенклатура)=Неопределено Тогда
			СписокСерииНоменклатуры.Добавить(СтрокаТабличнойЧасти.Номенклатура);
		КонецЕсли;
		Если КонтрольГТД 
			И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения)
			И СтрокаТабличнойЧасти.СтранаПроисхождения<>Справочники.СтраныМира.Россия
			И СписокНомераГТД.НайтиПоЗначению(СтрокаТабличнойЧасти.Номенклатура)=Неопределено Тогда
			СписокНомераГТД.Добавить(СтрокаТабличнойЧасти.Номенклатура);
		КонецЕсли; 
	КонецЦикла; 
	
	Если СписокСерииНоменклатуры.Количество()>0 ИЛИ СписокНомераГТД.Количество()>0 Тогда
		Ошибка = НСтр("ru = 'Не удалось выполнить этап производства:'");
		Ошибка = Ошибка + Символы.ПС + СтрШаблон(НСтр("ru = '> %1, %2, %3'"), ПредставлениеЗаказов(ЗначенияПолей), ПредставлениеНоменклатуры(ЗначенияПолей), ЗначенияПолей.Этап);
		Ошибки.Добавить(, Ошибка);
	КонецЕсли; 
	Если СписокСерииНоменклатуры.Количество()>0 Тогда
		Ошибка = СтрШаблон(НСтр("ru = 'Автоматическое формирование документов производства невозможно при использовании материалов с учетом по серийным номерам (%1)'"), Строка(СписокСерииНоменклатуры));
		Ошибки.Добавить(, Ошибка);
	КонецЕсли; 
	Если СписокНомераГТД.Количество()>0 Тогда
		Ошибка = СтрШаблон(НСтр("ru = 'Автоматическое формирование документов производства невозможно при использовании материалов, требующих указания номера ГТД (%1)'"), Строка(СписокНомераГТД));
		Ошибки.Добавить(, Ошибка);
	КонецЕсли; 
	
	Возврат (СписокСерииНоменклатуры.Количество()=0 И СписокНомераГТД.Количество()=0);
	
КонецФункции
 
Функция ВыполнитьЭтапСдельныйНаряд(ДокументОбъект, ЗначенияПолей, Ошибки)
	
	Если ЗначениеЗаполнено(ЗначенияПолей.ЗаказНаПроизводство) 
		И ДокументОбъект.ПоложениеЗаказаНаПроизводство <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти
		И ДокументОбъект.ЗаказНаПроизводство <> ЗначенияПолей.ЗаказНаПроизводство Тогда
		ДокументОбъект.ПоложениеЗаказаНаПроизводство = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	КонецЕсли;
	
	ТаблицаОпераций = ОперацииЭтапа(ЗначенияПолей);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЗаказПокупателя", ЗначенияПолей.ЗаказПокупателя);
	СтруктураПоиска.Вставить("ЗаказНаПроизводство", ЗначенияПолей.ЗаказНаПроизводство);
	СтруктураПоиска.Вставить("Номенклатура", ЗначенияПолей.Номенклатура);
	СтруктураПоиска.Вставить("Характеристика", ЗначенияПолей.Характеристика);
	СтруктураПоиска.Вставить("Партия", ЗначенияПолей.Партия);
	СтруктураПоиска.Вставить("Спецификация", ЗначенияПолей.Спецификация);
	СтруктураПоиска.Вставить("Этап", ЗначенияПолей.Этап);

	СтрокиОперации = ДокументОбъект.Операции.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаОперации Из СтрокиОперации Цикл
		ДокументОбъект.Операции.Удалить(СтрокаОперации);
	КонецЦикла;  
	
	Для каждого СтрокаОперации Из ТаблицаОпераций Цикл
		
		НоваяСтрокаОперация = ДокументОбъект.Операции.Добавить();
		ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(ДокументОбъект.Операции, НоваяСтрокаОперация, "КлючСвязи");
		НоваяСтрокаОперация.Период = ЗначенияПолей.ДатаПроизводства;
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОперация, ЗначенияПолей, , "ПодразделениеЗавершающегоЭтапа");
		Если ЗначениеЗаполнено(ЗначенияПолей.ВидПроизводства) Тогда
			НоваяСтрокаОперация.ПодразделениеЗавершающегоЭтапа = ЗначенияПолей.ПодразделениеЗавершающегоЭтапа;
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОперация, СтрокаОперации);
		Если НЕ ЗначениеЗаполнено(НоваяСтрокаОперация.Исполнитель) И ЗначенияПолей.Свойство("Исполнитель") И ЗначениеЗаполнено(ЗначенияПолей.Исполнитель) Тогда
			НоваяСтрокаОперация.Исполнитель = ЗначенияПолей.Исполнитель;
		КонецЕсли; 
		НоваяСтрокаОперация.КоличествоПлан = ЗначенияПолей.КоличествоПродукции * СтрокаОперации.КоличествоОпераций;
		НоваяСтрокаОперация.КоличествоФакт = НоваяСтрокаОперация.КоличествоПлан;
		НоваяСтрокаОперация.Нормочасы = НоваяСтрокаОперация.КоличествоФакт * НоваяСтрокаОперация.НормаВремени;
		НоваяСтрокаОперация.Стоимость = ?(СтрокаОперации.ФиксированнаяСтоимость, НоваяСтрокаОперация.КоличествоФакт, НоваяСтрокаОперация.Нормочасы) * НоваяСтрокаОперация.Расценка;
		Если НоваяСтрокаОперация.ЗаказНаПроизводство <> ДокументОбъект.ЗаказНаПроизводство
			И ДокументОбъект.ПоложениеЗаказаНаПроизводство <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			ДокументОбъект.ПоложениеЗаказаНаПроизводство = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
		КонецЕсли; 
		
		// Состав бригады
		Если ТаблицаОпераций.Колонки.Найти("СоставБригады") <> Неопределено И ЗначениеЗаполнено(СтрокаОперации.СоставБригады) Тогда
			Для каждого СтрокаСостава Из СтрокаОперации.СоставБригады Цикл
				НоваяСтрокаСостава = ДокументОбъект.СоставБригады.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаСостава, СтрокаСостава);
				НоваяСтрокаСостава.КлючСвязи = НоваяСтрокаОперация.КлючСвязи;
			КонецЦикла;
		ИначеЕсли ТипЗнч(НоваяСтрокаОперация.Исполнитель) = Тип("СправочникСсылка.Бригады") Тогда 
			ТаблицаСостава = Справочники.Бригады.СоставБригады(НоваяСтрокаОперация.Исполнитель, ДокументОбъект.Организация, ДокументОбъект.Дата);
			Для каждого СтрокаСостава Из ТаблицаСостава Цикл
				НоваяСтрокаСостава = ДокументОбъект.СоставБригады.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаСостава, СтрокаСостава);
				НоваяСтрокаСостава.КлючСвязи = НоваяСтрокаОперация.КлючСвязи;
			КонецЦикла;
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции
 
Процедура ОтменитьЭтап(ЗначенияПолей, ТаблицаИзменений, ИзменяемыеДокументы, Ошибки)
	
	ДокументПроизводства = СуществующийДокумент(ЗначенияПолей, ТаблицаИзменений, ИзменяемыеДокументы);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьТехоперации") И НЕ ЗначенияПолей.ИсполнительСкрыт Тогда
		ДокументСН = СуществующийДокумент(ЗначенияПолей, ТаблицаИзменений, ИзменяемыеДокументы, "СдельныйНаряд");
	Иначе
		ДокументСН = Неопределено;
	КонецЕсли;
	
	ДокументыНайдены = (ДокументПроизводства<>Неопределено ИЛИ ДокументСН<>Неопределено);
	Если ДокументПроизводства=Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(
		СтрШаблон(НСтр("ru = 'Не найден документ производства %1, %2, %3.'"), ПредставлениеЗаказов(ЗначенияПолей), ПредставлениеНоменклатуры(ЗначенияПолей), ЗначенияПолей.Этап));
	КонецЕсли;
	Если ДокументСН=Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(
		СтрШаблон(НСтр("ru = 'Не найден сдельный наряд %1, %2, %3.'"), ПредставлениеЗаказов(ЗначенияПолей), ПредставлениеНоменклатуры(ЗначенияПолей), ЗначенияПолей.Этап));
	КонецЕсли;
	Если НЕ ДокументыНайдены Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументПроизводства<>Неопределено Тогда
		
		ДокументОбъект = ИзменяемыеДокументы.Получить(ДокументПроизводства);		
		ОтменитьЭтапСборкаЗапасов(ДокументОбъект, ЗначенияПолей, Ошибки);
		
	КонецЕсли; 
	
	Если ДокументСН<>Неопределено Тогда
		
		ДокументОбъект = ИзменяемыеДокументы.Получить(ДокументСН);
		ОтменитьЭтапСдельныйНаряд(ДокументОбъект, ЗначенияПолей, Ошибки);
		
	КонецЕсли; 
	
КонецПроцедуры

Функция ОтменитьЭтапСборкаЗапасов(ДокументОбъект, ЗначенияПолей, Ошибки)
	
	СтруктураПоиска = Новый Структура;
	Если ЗначениеЗаполнено(ЗначенияПолей.ЗаказПокупателя) Тогда
		СтруктураПоиска.Вставить("ЗаказПокупателя", ЗначенияПолей.ЗаказПокупателя);
	КонецЕсли; 
	СтруктураПоиска.Вставить("Номенклатура", ЗначенияПолей.Номенклатура);
	СтруктураПоиска.Вставить("Характеристика", ЗначенияПолей.Характеристика);
	СтруктураПоиска.Вставить("Партия", ЗначенияПолей.Партия);
	СтруктураПоиска.Вставить("Спецификация", ЗначенияПолей.Спецификация);
	
	СтрокиПродукция = ДокументОбъект.Продукция.НайтиСтроки(СтруктураПоиска);
	Если СтрокиПродукция.Количество()=0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаПродукция = СтрокиПродукция[0];
	КлючСвязи = СтрокаПродукция.КлючСвязи;
	
	СтруктураПоискаКлючСвязи = Новый Структура;
	СтруктураПоискаКлючСвязи.Вставить("КлючСвязи", КлючСвязи);
	СтруктураПоискаКлючСвязи.Вставить("Этап", ЗначенияПолей.Этап);
	
	СтрокиВыполненныеЭтапы = ДокументОбъект.ВыполненныеЭтапы.НайтиСтроки(СтруктураПоискаКлючСвязи);
	Для каждого СтрокаВыполненныеЭтапы Из СтрокиВыполненныеЭтапы Цикл
		ДокументОбъект.ВыполненныеЭтапы.Удалить(СтрокаВыполненныеЭтапы);
	КонецЦикла;
	
	СтруктураПоискаКлючСвязи = Новый Структура;
	СтруктураПоискаКлючСвязи.Вставить("КлючСвязиПродукция", КлючСвязи);
	СтруктураПоискаКлючСвязи.Вставить("Этап", ЗначенияПолей.Этап);
	
	СтрокиРаспределение = ДокументОбъект.РаспределениеЗапасов.НайтиСтроки(СтруктураПоискаКлючСвязи);
	Для каждого СтрокаРаспределение Из СтрокиРаспределение Цикл
		ДокументОбъект.РаспределениеЗапасов.Удалить(СтрокаРаспределение);
	КонецЦикла;
	
	СтруктураПоискаКлючСвязи = Новый Структура;
	СтруктураПоискаКлючСвязи.Вставить("КлючСвязи", КлючСвязи);
	
	СтрокиВыполненныеЭтапы = ДокументОбъект.ВыполненныеЭтапы.НайтиСтроки(СтруктураПоискаКлючСвязи);
	Если СтрокиВыполненныеЭтапы.Количество()=0 Тогда
		ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(ДокументОбъект.СерииНоменклатурыПродукция, СтрокаПродукция);
		ДокументОбъект.Продукция.Удалить(СтрокаПродукция);
	КонецЕсли; 
	
	ПроизводствоСервер.ЗаполнитьПоРаспределению(ДокументОбъект.Запасы, ДокументОбъект.РаспределениеЗапасов);
	
	Возврат Истина;
	
КонецФункции

Функция ОтменитьЭтапСдельныйНаряд(ДокументОбъект, ЗначенияПолей, Ошибки)
	
	Если ЗначениеЗаполнено(ЗначенияПолей.ЗаказНаПроизводство) 
		И ДокументОбъект.ПоложениеЗаказаНаПроизводство<>Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти
		И ДокументОбъект.ЗаказНаПроизводство<>ЗначенияПолей.ЗаказНаПроизводство Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЗаказПокупателя", ЗначенияПолей.ЗаказПокупателя);
	СтруктураПоиска.Вставить("ЗаказНаПроизводство", ЗначенияПолей.ЗаказНаПроизводство);
	СтруктураПоиска.Вставить("Номенклатура", ЗначенияПолей.Номенклатура);
	СтруктураПоиска.Вставить("Характеристика", ЗначенияПолей.Характеристика);
	СтруктураПоиска.Вставить("Партия", ЗначенияПолей.Партия);
	СтруктураПоиска.Вставить("Спецификация", ЗначенияПолей.Спецификация);
	СтруктураПоиска.Вставить("Этап", ЗначенияПолей.Этап);

	СтрокиОперации = ДокументОбъект.Операции.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаОперации Из СтрокиОперации Цикл
		ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(ДокументОбъект.СоставБригады, СтрокаОперации);
		ДокументОбъект.Операции.Удалить(СтрокаОперации);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьДанныеСтруктурнаяЕдиница(Подразделение)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить("ЭтоСклад", Подразделение.ПолучательПеремещения.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад);
	СтруктураДанные.Вставить("ЭтоПодразделение", Подразделение.ПолучательПеремещения.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение);
	
	Если СтруктураДанные.ЭтоСклад ИЛИ СтруктураДанные.ЭтоПодразделение Тогда
		
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаПродукции", Подразделение.ПолучательПеремещения);
		СтруктураДанные.Вставить("ЯчейкаПродукции", Подразделение.ЯчейкаПолучателяПеремещения);
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаПродукцииПодписьМОЛ", Подразделение.ПолучательПеремещения.ПодписьМОЛ);
		
	Иначе
		
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаПродукции", Неопределено);
		СтруктураДанные.Вставить("ЯчейкаПродукции", Неопределено);
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаПродукцииПодписьМОЛ", Подразделение.ПодписьМОЛ);
		
	КонецЕсли;
	
	Если Подразделение.ИсточникПеремещения.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад
		ИЛИ Подразделение.ИсточникПеремещения.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
		
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаЗапасов", Подразделение.ИсточникПеремещения);
		СтруктураДанные.Вставить("ЯчейкаЗапасов", Подразделение.ЯчейкаИсточникаПеремещения);
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаЗапасовПодписьМОЛ", Подразделение.ИсточникПеремещения.ПодписьМОЛ);
		
	Иначе
		
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаЗапасов", Неопределено);
		СтруктураДанные.Вставить("ЯчейкаЗапасов", Неопределено);
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаЗапасовПодписьМОЛ", Подразделение.ПодписьМОЛ);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("СтруктурнаяЕдиницаОтходов", Подразделение.ПолучательОтходов);
	СтруктураДанные.Вставить("ЯчейкаОтходов", Подразделение.ЯчейкаПолучателяОтходов);
	
	СтруктураДанные.Вставить("ОрдерныйСклад", Подразделение.ОрдерныйСклад);
	СтруктураДанные.Вставить("ОрдерныйСкладПродукции", Подразделение.ПолучательПеремещения.ОрдерныйСклад);
	СтруктураДанные.Вставить("ОрдерныйСкладОтходов", Подразделение.ПолучательОтходов.ОрдерныйСклад);
	СтруктураДанные.Вставить("ОрдерныйСкладЗапасов", Подразделение.ИсточникПеремещения.ОрдерныйСклад);
	СтруктураДанные.Вставить("ПодписьКонтролера", Подразделение.ПодписьМОЛ);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеСтруктурнаяЕдиницаПриИзменении()

Функция СоставЭтапа(ЗначенияПолей)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Спецификация", ЗначенияПолей.Спецификация);
	Запрос.УстановитьПараметр("Этап", ЗначенияПолей.Этап);
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗначенияПолей.ЗаказПокупателя);
	Запрос.УстановитьПараметр("БезЭтапов", НЕ ЗначениеЗаполнено(ЗначенияПолей.ВидПроизводства));
	
	Если ЗначениеЗаполнено(ЗначенияПолей.ЗаказНаПроизводство) Тогда
		
		Запрос.УстановитьПараметр("ЗаказНаПроизводство", ЗначенияПолей.ЗаказНаПроизводство);
		Запрос.УстановитьПараметр("Номенклатура", ЗначенияПолей.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", ЗначенияПолей.Характеристика);
		Запрос.УстановитьПараметр("Партия", ЗначенияПолей.Партия);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказНаПроизводствоРаспределениеЗапасов.Номенклатура КАК Номенклатура,
		|	ЗаказНаПроизводствоРаспределениеЗапасов.Характеристика КАК Характеристика,
		|	ЗаказНаПроизводствоРаспределениеЗапасов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЗаказНаПроизводствоРаспределениеЗапасов.Спецификация КАК Спецификация,
		|	ЗаказНаПроизводствоРаспределениеЗапасов.Партия КАК Партия,
		|	ВЫБОР
		|		КОГДА ЗаказНаПроизводствоРаспределениеЗапасов.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|			ТОГДА ЗаказНаПроизводствоРаспределениеЗапасов.СтруктурнаяЕдиница
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ЗаказНаПроизводствоРаспределениеЗапасов.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ЗаказНаПроизводствоРаспределениеЗапасов.Этап КАК Этап,
		|	ЗаказНаПроизводствоРаспределениеЗапасов.Количество КАК Количество,
		|	ЗаказНаПроизводствоРаспределениеЗапасов.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ЗаказНаПроизводствоРаспределениеЗапасов.Номенклатура.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры
		|ИЗ
		|	Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.РаспределениеЗапасов КАК ЗаказНаПроизводствоРаспределениеЗапасов
		|		ПО ЗаказНаПроизводствоПродукция.Ссылка = ЗаказНаПроизводствоРаспределениеЗапасов.Ссылка
		|			И ЗаказНаПроизводствоПродукция.КлючСвязи = ЗаказНаПроизводствоРаспределениеЗапасов.КлючСвязиПродукция
		|ГДЕ
		|	ЗаказНаПроизводствоПродукция.Ссылка = &ЗаказНаПроизводство
		|	И ЗаказНаПроизводствоПродукция.Номенклатура = &Номенклатура
		|	И ЗаказНаПроизводствоПродукция.Характеристика = &Характеристика
		|	И ЗаказНаПроизводствоПродукция.Спецификация = &Спецификация
		|	И ЗаказНаПроизводствоПродукция.Партия = &Партия
		|	И (ЗаказНаПроизводствоРаспределениеЗапасов.Этап = &Этап
		|			ИЛИ &БезЭтапов)
		|	И НЕ ЗаказНаПроизводствоРаспределениеЗапасов.Номенклатура ЕСТЬ NULL";
		
	Иначе	
	
		Запрос.УстановитьПараметр("КоличествоПродукции", ЗначенияПолей.КоличествоПродукции);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СпецификацииСостав.Номенклатура КАК Номенклатура,
		|	СпецификацииСостав.Характеристика КАК Характеристика,
		|	СпецификацииСостав.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СпецификацииСостав.Спецификация КАК Спецификация,
		|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК Партия,
		|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка) КАК СтруктурнаяЕдиница,
		|	&ЗаказПокупателя КАК ЗаказПокупателя,
		|	СпецификацииСостав.Этап КАК Этап,
		|	СпецификацииСостав.Количество / СпецификацииСостав.КоличествоПродукции * &КоличествоПродукции КАК Количество,
		|	СпецификацииСостав.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
		|	СпецификацииСостав.Номенклатура.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры
		|ИЗ
		|	Справочник.Спецификации.Состав КАК СпецификацииСостав
		|ГДЕ
		|	СпецификацииСостав.Ссылка = &Спецификация
		|	И (СпецификацииСостав.Этап = &Этап
		|			ИЛИ &БезЭтапов)";
		
	КонецЕсли; 
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ОперацииЭтапа(ЗначенияПолей)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Спецификация", ЗначенияПолей.Спецификация);
	Запрос.УстановитьПараметр("Этап", ЗначенияПолей.Этап);
	Запрос.УстановитьПараметр("ДатаПроизводства", ЗначенияПолей.ДатаПроизводства);
	Запрос.УстановитьПараметр("БезЭтапов", НЕ ЗначениеЗаполнено(ЗначенияПолей.ВидПроизводства));
	
	Если ЗначениеЗаполнено(ЗначенияПолей.ЗаказНаПроизводство) 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначенияПолей.ЗаказНаПроизводство, "ЗапланированыОперации") Тогда
		
		Запрос.УстановитьПараметр("ЗаказНаПроизводство", ЗначенияПолей.ЗаказНаПроизводство);
		Запрос.УстановитьПараметр("ЗаказПокупателя", ЗначенияПолей.ЗаказПокупателя);
		Запрос.УстановитьПараметр("Номенклатура", ЗначенияПолей.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", ЗначенияПолей.Характеристика);
		Запрос.УстановитьПараметр("Партия", ЗначенияПолей.Партия);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказНаПроизводствоПродукция.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЗаказНаПроизводствоОперации.Операция КАК Операция,
		|	ЗаказНаПроизводствоОперации.Операция.ФиксированнаяСтоимость КАК ФиксированнаяСтоимость,
		|	ЗаказНаПроизводствоОперации.НормаВремени КАК НормаВремени,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена * ВЫБОР
		|			КОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
		|				ТОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ 1
		|		КОНЕЦ, 0) КАК Расценка,
		|	ЗаказНаПроизводствоОперации.Исполнитель КАК Исполнитель,
		|	ЗаказНаПроизводствоОперации.КлючСвязи КАК КлючСвязи,
		|	ЗаказНаПроизводствоОперации.Ссылка.ПоложениеИсполнителя КАК ПоложениеИсполнителя,
		|	ЗаказНаПроизводствоОперации.КоличествоПлан / ВЫБОР
		|		КОГДА ЗаказНаПроизводствоПродукция.Количество = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЗаказНаПроизводствоПродукция.Количество * ВЫБОР
		|				КОГДА ЗаказНаПроизводствоПродукция.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
		|					ТОГДА ЗаказНаПроизводствоПродукция.ЕдиницаИзмерения.Коэффициент
		|				ИНАЧЕ 1
		|			КОНЕЦ
		|	КОНЕЦ КАК КоличествоОпераций
		|ПОМЕСТИТЬ Операции
		|ИЗ
		|	Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Операции КАК ЗаказНаПроизводствоОперации
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|					&ДатаПроизводства,
		|					ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.Учетная)
		|						И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныНоменклатурыСрезПоследних
		|			ПО ЗаказНаПроизводствоОперации.Операция = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|		ПО ЗаказНаПроизводствоПродукция.Ссылка = ЗаказНаПроизводствоОперации.Ссылка
		|			И ЗаказНаПроизводствоПродукция.КлючСвязи = ЗаказНаПроизводствоОперации.КлючСвязиПродукция
		|ГДЕ
		|	ЗаказНаПроизводствоПродукция.Ссылка = &ЗаказНаПроизводство
		|	И ЗаказНаПроизводствоПродукция.ЗаказПокупателя = &ЗаказПокупателя
		|	И ЗаказНаПроизводствоПродукция.Номенклатура = &Номенклатура
		|	И ЗаказНаПроизводствоПродукция.Характеристика = &Характеристика
		|	И ЗаказНаПроизводствоПродукция.Спецификация = &Спецификация
		|	И ЗаказНаПроизводствоПродукция.Партия = &Партия
		|	И (ЗаказНаПроизводствоОперации.Этап = &Этап
		|			ИЛИ &БезЭтапов)
		|	И НЕ ЗаказНаПроизводствоОперации.Операция ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Операции.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Операции.Операция КАК Операция,
		|	Операции.ФиксированнаяСтоимость КАК ФиксированнаяСтоимость,
		|	Операции.НормаВремени КАК НормаВремени,
		|	Операции.Расценка КАК Расценка,
		|	Операции.Исполнитель КАК Исполнитель,
		|	Операции.КлючСвязи КАК КлючСвязи,
		|	Операции.ПоложениеИсполнителя КАК ПоложениеИсполнителя,
		|	Операции.КоличествоОпераций КАК КоличествоОпераций
		|ИЗ
		|	Операции КАК Операции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказНаПроизводствоСоставБригады.Сотрудник КАК Сотрудник,
		|	ЗаказНаПроизводствоСоставБригады.КТУ КАК КТУ,
		|	ЗаказНаПроизводствоСоставБригады.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ЗаказНаПроизводствоСоставБригады.КлючСвязи КАК КлючСвязи
		|ИЗ
		|	Документ.ЗаказНаПроизводство.СоставБригады КАК ЗаказНаПроизводствоСоставБригады
		|ГДЕ
		|	ЗаказНаПроизводствоСоставБригады.Ссылка = &ЗаказНаПроизводство
		|	И (ЗаказНаПроизводствоСоставБригады.КлючСвязи В
		|				(ВЫБРАТЬ
		|					Операции.КлючСвязи
		|				ИЗ
		|					Операции
		|				ГДЕ
		|					Операции.Исполнитель ССЫЛКА Справочник.Бригады)
		|			ИЛИ ЗаказНаПроизводствоСоставБригады.КлючСвязи = 0
		|				И ЗаказНаПроизводствоСоставБригады.Ссылка.ПоложениеИсполнителя = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
		|				И ЗаказНаПроизводствоСоставБригады.Ссылка.Исполнитель ССЫЛКА Справочник.Бригады)";
		Результат = Запрос.ВыполнитьПакет();
		Операции = Результат[1].Выгрузить();
		СоставыБригад = Результат[2].Выгрузить();
		Операции.Колонки.Добавить("СоставБригады");
		Для каждого СтрокаОперации Из Операции Цикл
			Если ТипЗнч(СтрокаОперации.Исполнитель) <> Тип("СправочникСсылка.Бригады") Тогда
				СтрокаОперации.СоставБригады = СоставыБригад.СкопироватьКолонки();
				Продолжить;
			КонецЕсли; 
			СтруктураОтбора = Новый Структура;
			Если СтрокаОперации.ПоложениеИсполнителя=Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
				СтруктураОтбора.Вставить("КлючСвязи", 0);
			Иначе
				СтруктураОтбора.Вставить("КлючСвязи", СтрокаОперации.КлючСвязи);
			КонецЕсли;
			СтрокаОперации.СоставБригады = СоставыБригад.Скопировать(СтруктураОтбора);
		КонецЦикла;
		Операции.Колонки.Удалить("КлючСвязи");
		Операции.Колонки.Удалить("ПоложениеИсполнителя");
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СпецификацииСостав.Ссылка.Владелец.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СпецификацииСостав.Операция КАК Операция,
		|	СпецификацииСостав.Операция.ФиксированнаяСтоимость КАК ФиксированнаяСтоимость,
		|	СпецификацииСостав.НормаВремени / СпецификацииСостав.КоличествоПродукции КАК НормаВремени,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена * ВЫБОР
		|			КОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
		|				ТОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ 1
		|		КОНЕЦ, 0) КАК Расценка,
		|	СпецификацииСостав.Количество КАК КоличествоОпераций
		|ИЗ
		|	Справочник.Спецификации.Операции КАК СпецификацииСостав
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&ДатаПроизводства,
		|				ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.Учетная)
		|					И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО СпецификацииСостав.Операция = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|ГДЕ
		|	СпецификацииСостав.Ссылка = &Спецификация
		|	И (СпецификацииСостав.Этап = &Этап
		|			ИЛИ &БезЭтапов)";
		Операции = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли; 
	
	Возврат Операции;
	
КонецФункции

Функция ПредставлениеНоменклатуры(СтрокаДерева)
	
	Если НЕ ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
		Возврат НСтр("ru = '<Номенклатура не указана>'");
	КонецЕсли;
	
	Представление = Строка(СтрокаДерева.Номенклатура);
	Если ЗначениеЗаполнено(СтрокаДерева.Характеристика) Тогда
		Представление = Представление + ", " + Строка(СтрокаДерева.Характеристика);
	КонецЕсли; 
	Если ЗначениеЗаполнено(СтрокаДерева.Партия) Тогда
		Представление = Представление + ", " + Строка(СтрокаДерева.Партия);
	КонецЕсли; 
	Если ЗначениеЗаполнено(СтрокаДерева.Спецификация) Тогда
		Представление = Представление + ", " + Строка(СтрокаДерева.Спецификация);
	КонецЕсли; 
	
	Возврат Представление;
	
КонецФункции 

Функция ПредставлениеЗаказов(СтрокаДерева)
	
	Если НЕ ЗначениеЗаполнено(СтрокаДерева.ЗаказПокупателя) И НЕ ЗначениеЗаполнено(СтрокаДерева.ЗаказНаПроизводство) Тогда
		Возврат НСтр("ru = '<Без заказа>'");
	КонецЕсли;
	
	ЗаполненыОбаЗаказа = (ЗначениеЗаполнено(СтрокаДерева.ЗаказПокупателя) И ЗначениеЗаполнено(СтрокаДерева.ЗаказНаПроизводство));
	
	Представление = "";
	Если ЗначениеЗаполнено(СтрокаДерева.ЗаказПокупателя) Тогда
		Представление = Представление + ?(ЗаполненыОбаЗаказа, СтрЗаменить(Строка(СтрокаДерева.ЗаказПокупателя), "Заказ ", ""), Строка(СтрокаДерева.ЗаказПокупателя));
		Если ЗначениеЗаполнено(СтрокаДерева.Контрагент) Тогда
			Представление = Представление + " (" + Строка(СтрокаДерева.Контрагент) + ")";
		КонецЕсли; 
	КонецЕсли; 
	Если ЗначениеЗаполнено(СтрокаДерева.ЗаказНаПроизводство) Тогда
		Представление = Представление + ?(ЗаполненыОбаЗаказа, ", ", "") + ?(ЗаполненыОбаЗаказа, СтрЗаменить(Строка(СтрокаДерева.ЗаказНаПроизводство), "Заказ ", ""), Строка(СтрокаДерева.ЗаказНаПроизводство));
	КонецЕсли; 
	
	Представление = ?(ЗаполненыОбаЗаказа, НСтр("ru = 'Заказы: '"), "") + Представление;
	
	Возврат Представление;
	
КонецФункции 

Функция ПредставлениеДокумента(Номер, Дата)
	
	БезПрефиксаИнформационнойБазы = Константы.ПредставлениеНомераДокументаБезПрефиксаИнформационнойБазы.Получить();
	БезПрефиксаПользователя = Константы.ПредставлениеНомераДокументаБезПрефиксаПользователя.Получить();
	Возврат СтрШаблон(НСтр("ru = '№%1 от %2'"), 
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, БезПрефиксаИнформационнойБазы, БезПрефиксаПользователя),
		Формат(Дата, "ДЛФ=D"));	
	
КонецФункции

Функция РекурсивноеОписаниеОшибки(Информация, СообщенияПользователю = Неопределено)
	
	Если Информация.Причина=Неопределено Тогда
		Ошибка = КраткоеПредставлениеОшибки(Информация);
	Иначе
		Ошибка = РекурсивноеОписаниеОшибки(Информация.Причина);
	КонецЕсли; 
	Если СообщенияПользователю<>Неопределено Тогда
		Для каждого Сообщение Из СообщенияПользователю Цикл
			Если Найти(Сообщение.Текст, ДлительныеОперации.СообщениеПрогресса()) > 0 Тогда
				Продолжить;
			КонецЕсли;
			Ошибка = Ошибка+Символы.ПС+Сообщение.Текст;
		КонецЦикла; 
	КонецЕсли; 
	Возврат Ошибка	
	
КонецФункции

Функция ОдинаковоеЗначение(СтрокаЗаказа, Имя)
	
	ПервоеЗначение = Неопределено;
	Для каждого ПодСтрока Из СтрокаЗаказа.Строки Цикл
		Если ПервоеЗначение=Неопределено Тогда
			ПервоеЗначение = ПодСтрока[Имя];
		ИначеЕсли ПервоеЗначение<>ПодСтрока[Имя] Тогда 
			ПервоеЗначение = Неопределено;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ПервоеЗначение;
	
КонецФункции

#КонецОбласти 

#КонецЕсли

