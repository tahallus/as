
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда



////////////////////////////////////////////////////////////////////////////////
//
// Данный модуль содержит экспортные процедуры обработчиков событий конвертации 
// и предназначен для отладки правил обмена. 
// После отладки рекомендуется внести соответствующие исправления обработчиков
// в базе «Конвертация данных 2.0» и заново сформировать файл правил.
//
////////////////////////////////////////////////////////////////////////////////
// ИСПОЛЬЗУЕМЫЕ СОКРАЩЕНИЯ ИМЕН ПЕРЕМЕННЫХ (АББРЕВИАТУРЫ)
//
//  ПКО  - правило конвертации объектов
//  ПКС  - правило конвертации свойств объектов
//  ПКГС - правило конвертации группы свойств объектов
//  ПКЗ  - правило конвертации значений объектов
//  ПВД  - правило выгрузки данных
//  ПОД  - правило очистки данных


////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБРАБОТКИ


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПЕРЕМЕННЫЕ МОДУЛЯ ДЛЯ НАПИСАНИЯ АЛГОРИТМОВ (ОБЩИЕ ДЛЯ ВЫГРУЗКИ И ЗАГРУЗКИ)

Перем Параметры;
Перем Правила;
Перем Алгоритмы;
Перем Запросы;
Перем ТаблицаПравилВыгрузки;
Перем ТаблицаНастройкиПараметров;
Перем УзелДляОбмена; // только для on-line обмена
Перем ОбщиеПроцедурыФункции;
Перем ДатаНачала;
Перем ДатаОкончания;
Перем ДатаВыгрузкиДанных; // только для on-line обмена
Перем КомментарийПриВыгрузкеДанных;
Перем КомментарийПриЗагрузкеДанных;


////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБРАБОТОК ОБМЕНА (ОБЩИЕ ДЛЯ ВЫГРУЗКИ И ЗАГРУЗКИ)

Перем одТипСтрока;                // Тип("Строка")
Перем одТипБулево;                // Тип("Булево")
Перем одТипЧисло;                 // Тип("Число")
Перем одТипДата;                  // Тип("Дата")
Перем одТипХранилищеЗначения;     // Тип("ХранилищеЗначения")
Перем одТипДвоичныеДанные;        // Тип("ДвоичныеДанные")
Перем одТипВидДвиженияНакопления; // Тип("ВидДвиженияНакопления")
Перем одТипУдалениеОбъекта;       // Тип("УдалениеОбъекта")
Перем одТипВидСчета;			  // Тип("ВидСчета")
Перем одТипТип;			  		  // Тип("Тип")
Перем одТипСоответствие;		  // Тип("Соответствие")

Перем одТипУзлаXML_КонецЭлемента;
Перем одТипУзлаXML_НачалоЭлемента;
Перем одТипУзлаXML_Текст;

Перем ЗначениеПустаяДата;


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ (ГЛОБАЛЬНЫЕ)

Процедура Конвертация_ПередЗагрузкойОбъекта(ФайлОбмена, Отказ, Нпп, Источник, ИмяПравила, Правило, ГенерироватьНовыйНомерИлиКодЕслиНеУказан, 
                                           ТипОбъектаСтрокой, ТипОбъекта, НеЗамещатьОбъект, РежимЗаписи, 
                                           РежимПроведения) Экспорт

	
	
	// Обработаем загрузку неразделенных данных.
	
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипОбъекта);
	
	Если ОбщегоНазначения.РазделениеВключено()
	
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()
	
		И ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(МетаданныеОбъекта) Тогда
	
		
	
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
	
			МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
	
			ЭтоРазделенныйОбъектМетаданных = МодульРаботаВМоделиСервиса.ЭтоРазделенныйОбъектМетаданных(МетаданныеОбъекта.ПолноеИмя());
	
		Иначе
	
			ЭтоРазделенныйОбъектМетаданных = Ложь;
	
		КонецЕсли;
	
		
	
		Если Не ЭтоРазделенныйОбъектМетаданных Тогда
	
		
	
			Отказ = Истина;
	
			
	
		КонецЕсли;
	
		
	
	КонецЕсли;

КонецПроцедуры

Процедура Конвертация_ПередЗагрузкойДанных(ФайлОбмена, Отказ) Экспорт

	// Заполнение СтавкиНДС по умолчанию
	
	Запрос = Новый Запрос;
	
	
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	
	|	СтавкиНДС.Ссылка КАК СтавкаНДС
	
	|ИЗ
	
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	
	|ГДЕ
	
	|	СтавкиНДС.Ставка = 18
	
	|	И НЕ СтавкиНДС.НеОблагается
	
	|	И НЕ СтавкиНДС.Расчетная";
	
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	
	
	ЗначениеСтавкиНДСПоУмолчанию = ?(Выборка.Следующий(), Выборка.СтавкаНДС, Справочники.СтавкиНДС.ПустаяСсылка());
	
	Параметры.Вставить("СтавкаНДСПоУмолчанию", ЗначениеСтавкиНДСПоУмолчанию);
	
	
	
	// Заполнение Категории по умолчанию
	
	Параметры.Вставить("КатегорияПоУмолчанию", Справочники.КатегорииНоменклатуры.БезКатегории);
	
	
	
	
	
	Параметры.Вставить("ЗагруженыНовыеПользователи",        Ложь);
	
	Параметры.Вставить("ЗагруженыНовыеГруппыПользователей", Ложь);
	
	
	
	Параметры.Вставить("ДокументыДляПроведения",            Новый Массив);
	
	
	
	ЗагруженныеОбъектыПереноса = Новый ТаблицаЗначений;
	
	ЗагруженныеОбъектыПереноса.Колонки.Добавить("ИмяПКО");
	
	ЗагруженныеОбъектыПереноса.Колонки.Добавить("Объект");
	
	ЗагруженныеОбъектыПереноса.Колонки.Добавить("Параметры");
	
	
	
	Параметры.Вставить("ЗагруженныеОбъектыПереноса", ЗагруженныеОбъектыПереноса);

КонецПроцедуры

Процедура Конвертация_ПослеЗагрузкиДанных() Экспорт

	
	
	Если Параметры.ЗагруженыНовыеПользователи Тогда
	
		ПользователиСлужебный.ОбновитьСоставыГруппПользователей(Справочники.ГруппыПользователей.ВсеПользователи);
	
	КонецЕсли;
	
	
	
	Если Параметры.ЗагруженыНовыеГруппыПользователей Тогда
	
		РегистрыСведений.СоставыГруппПользователей.ОбновитьДанныеРегистра();
	
	КонецЕсли;
	
	
	
	ЗагруженныеОбъектыПереноса = Параметры.ЗагруженныеОбъектыПереноса;
	
	ЗагруженныеОбъектыПереноса.Сортировать("ИмяПКО");
	
	
	
	Для Каждого СтрокаТаблицы Из ЗагруженныеОбъектыПереноса Цикл
	
			
	
		ОбъектМодифицирован = Ложь;
	
		
	
		Объект = СтрокаТаблицы.Объект.Ссылка.ПолучитьОбъект();
	
		ПараметрыОбъекта = СтрокаТаблицы.Параметры;
	
		ИмяПКО = СтрокаТаблицы.ИмяПКО;
	
		
	
		Если ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(Объект.МетаДанные()) Тогда
	
				
				
				//============================ {НАЧАЛО АЛГОРИТМА} "ОбработкаОбъектовОтложенная" ============================
				
				
				
				//============================ {КОНЕЦ АЛГОРИТМА} "ОбработкаОбъектовОтложенная" ============================
	
	
		КонецЕсли;
	
		
	
		Если ОбъектМодифицирован Тогда
	
			Объект.ОбменДанными.Загрузка = Истина;
	
			Объект.Записать();
	
		КонецЕсли;
	
		
	
	КонецЦикла;
	
	
	
	
	
	Если Параметры.Этап = "Остатки" Тогда
	
			
			
			//============================ {НАЧАЛО АЛГОРИТМА} "ВыполнитьПроведениеДокументов" ============================
			
			// Удаление повторяющихся элементов массива
			
			ТекущийИндекс = 0; 
			
			ВсегоЭлементов = Параметры.ДокументыДляПроведения.Количество(); 
			
			Пока ТекущийИндекс < ВсегоЭлементов Цикл 
			
			    Индекс2 = ТекущийИндекс + 1; 
			
			    Пока Индекс2 < ВсегоЭлементов Цикл 
			
			        Если Параметры.ДокументыДляПроведения[Индекс2] = Параметры.ДокументыДляПроведения[ТекущийИндекс] Тогда 
			
			            Параметры.ДокументыДляПроведения.Удалить(Индекс2); 
			
			            ВсегоЭлементов = ВсегоЭлементов - 1; 
			
			        Иначе 
			
			            Индекс2 = Индекс2 + 1; 
			
			        КонецЕсли; 
			
			    КонецЦикла; 
			
			    ТекущийИндекс = ТекущийИндекс + 1; 
			
			КонецЦикла; 
			
			
			
			Для Каждого Документ Из Параметры.ДокументыДляПроведения Цикл
			
				Если Не Документ.ЭтоНовый() Тогда
			
					
			
					// Переполучаем объект, т.к. он мог быть изменен
			
					ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
			
					
			
					УстановитьОбменДаннымиЗагрузка(ДокументОбъект, Ложь);
			
					
			
					ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
			
					ДокументОбъект.ДополнительныеСвойства.Вставить("НеПроверятьДатыЗапретаИзмененияДанных");
			
					
			
					ДокументПроведен = Ложь;
			
					Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			
						
			
						Попытка
			
						
			
							// выполняем попытку проведения документа
			
							ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			
							ДокументПроведен = Истина;
			
							
			
						Исключение
			
							
			
							ДокументПроведен = Ложь;
			
							
			
						КонецПопытки;
			
			
			
					КонецЕсли;
			
					
			
					Если НЕ ДокументПроведен Тогда
			
						
			
						ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
						
			
					КонецЕсли;
			
							
			
				КонецЕсли;
			
			КонецЦикла;
			
			//============================ {КОНЕЦ АЛГОРИТМА} "ВыполнитьПроведениеДокументов" ============================
	
	
	КонецЕсли;
	
	
	
	
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	
	|	Номенклатура.Ссылка КАК Ссылка,
	
	|	Номенклатура.ПометкаУдаления КАК ПометкаУдаления
	
	|ИЗ
	
	|	Справочник.Номенклатура КАК Номенклатура
	
	|ГДЕ
	
	|	Номенклатура.ЭтоГруппа";
	
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		
	
		НаборЗаписей = РегистрыСведений.ИерархияНоменклатуры.СоздатьНаборЗаписей();
	
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Ссылка);
	
		
	
		НоваяЗапись = НаборЗаписей.Добавить();
	
		НоваяЗапись.Номенклатура = Выборка.Ссылка;
	
		НоваяЗапись.ПометкаУдаленияГруппы = Выборка.ПометкаУдаления;
	
		НоваяЗапись.КартинкаГруппы = ?(Выборка.ПометкаУдаления, 1, 0);
	
		
	
		НаборЗаписей.Записать(Истина);
	
		
	
	КонецЦикла;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ ОБЪЕКТОВ

Процедура ПКО_ПередЗагрузкой_КонстантыНабор(ФайлОбмена, Отказ, Нпп, Источник, ИмяПравила, Правило, ГенерироватьНовыйНомерИлиКодЕслиНеУказан, 
                                           ТипОбъектаСтрокой, ТипОбъекта, НеЗамещатьОбъект, РежимЗаписи, 
                                           РежимПроведения) Экспорт

	
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
	
		Отказ = Истина; // Модель сервиса.
	
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_Банки(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Попытка
	
		Если Не Объект.ЭтоГруппа Тогда
	
			Если ПараметрыОбъекта <> Неопределено Тогда
	
				СВИФТБИК = ПараметрыОбъекта["СВИФТБИК"];
	
				Если ЗначениеЗаполнено(СВИФТБИК) Тогда
	
					Объект.СВИФТБИК = СВИФТБИК;
	
				КонецЕсли;
	
				Страна = ПараметрыОбъекта["Страна"];
	
				Если ЗначениеЗаполнено(Страна) Тогда
	
					Объект.Страна = Страна;
	
				КонецЕсли;
	
			КонецЕсли;
	
			
	
			Если Не ЗначениеЗаполнено(Объект.Страна) Тогда
	
				Объект.Страна = Справочники.СтраныМира.Россия;	
	
			КонецЕсли;
	
		КонецЕсли;
	
	Исключение
	
	КонецПопытки;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_Организации(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	
	
	Попытка
	
	
	
	Объект.СтавкаНДСПоУмолчанию = Параметры.СтавкаНДСПоУмолчанию;
	
	
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда // контроль затирания ИНН,КПП
	
		Если Не ЗначениеЗаполнено(Объект.ИНН) Тогда
	
			Объект.ИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ИНН");
	
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(Объект.КПП) Тогда
	
			Объект.КПП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "КПП");
	
		КонецЕсли;
	
	КонецЕсли;
	
	
	
	Объект.ЦифровойИндексОбособленногоПодразделения = "";
	
	Если ПараметрыОбъекта <> Неопределено Тогда
	
		Объект.ЦифровойИндексОбособленногоПодразделения = ПараметрыОбъекта["ЦифровойИндексОбособленногоПодразделения"];
	
	КонецЕсли;
	
	
	
		
		
		//============================ {НАЧАЛО АЛГОРИТМА} "ОбработатьТаблицуКонтактнойИнформации" ============================
		
		
		
		МассивНекорректныхСтрок = Новый Массив;
		
		
		
		Для каждого СтрокаТаблицы Из Объект.КонтактнаяИнформация Цикл
		
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Тип)
		
				И Не ЗначениеЗаполнено(СтрокаТаблицы.Вид) Тогда
		
				МассивНекорректныхСтрок.Добавить(СтрокаТаблицы);
		
			КонецЕсли;
		
		КонецЦикла;
		
		
		
		Для каждого СтрокаКУдалению Из МассивНекорректныхСтрок Цикл
		
			Объект.КонтактнаяИнформация.Удалить(СтрокаКУдалению);
		
		КонецЦикла;
		
		
		
		Если ТипЗнч(Объект) = Тип("СправочникОбъект.Контрагенты")
		
			И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
			
		
			Для каждого ТекКИ Из Объект.Ссылка.КонтактнаяИнформация Цикл
		
				
		
				Если ТекКИ.Вид = Справочники.ВидыКонтактнойИнформации.SkypeКонтрагента
		
					ИЛИ ТекКИ.Вид = Справочники.ВидыКонтактнойИнформации.ВебСайтКонтрагента
		
					ИЛИ ТекКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента Тогда
		
					
		
					СтрокаКИ = Объект.КонтактнаяИнформация.Найти(ТекКИ.Вид, "Вид");
		
					Если СтрокаКИ = Неопределено Тогда
		
						
		
						НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
		
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекКИ);
		
						
		
					КонецЕсли;
		
				КонецЕсли;
		
			КонецЦикла;
		
		КонецЕсли;
		
		
		
		Для каждого СтрокаТаблицы Из Объект.КонтактнаяИнформация Цикл
		
			Если СтрокаТаблицы.Тип <> СтрокаТаблицы.Вид.Тип Тогда
		
				СтрокаТаблицы.ЗначенияПолей = "";
		
				Если ЗначениеЗаполнено(СтрокаТаблицы.Вид.Тип) Тогда
		
					СтрокаТаблицы.Тип = СтрокаТаблицы.Вид.Тип;
		
				КонецЕсли;
		
			КонецЕсли;
		
		КонецЦикла;
		
		//============================ {КОНЕЦ АЛГОРИТМА} "ОбработатьТаблицуКонтактнойИнформации" ============================
	
	
	
	
	Исключение
	
	КонецПопытки;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_БанковскиеСчета(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если НЕ ОбъектНайден Тогда
	
		Объект.СчетУчета = ПланыСчетов.Управленческий.Банк;
	
	КонецЕсли;
	
	
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидСчета) Тогда
	
		Объект.ВидСчета = "Расчетный";	
	
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_Контрагенты(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Попытка
	
	
	
	Если НЕ Объект.ЭтоГруппа Тогда
	
	
	
		Если НЕ ОбъектНайден Тогда 
	
			Объект.СчетУчетаАвансовПокупателя = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
	
			Объект.СчетУчетаАвансовПоставщику = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
	
			Объект.СчетУчетаРасчетовСПокупателем = ПланыСчетов.Управленческий.РасчетыСПокупателями;
	
			Объект.СчетУчетаРасчетовСПоставщиком = ПланыСчетов.Управленческий.РасчетыСПоставщиками;
	
			
	
			Объект.ВестиРасчетыПоДоговорам = Истина;
	
			Объект.ВестиРасчетыПоДокументам = Истина;
	
			Объект.ВестиРасчетыПоЗаказам = Истина;
	
			Объект.ВестиУчетОплатыПоСчетам = Истина;
	
			
	
			Объект.Покупатель = Истина;
	
			Объект.Поставщик = Истина;
	
			Объект.ПрочиеОтношения = Истина;
	
		КонецЕсли;
	
		
	
		Если Объект.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо Тогда
	
			Если ЗначениеЗаполнено(Объект.РегистрационныйНомер)
	
				ИЛИ (ЗначениеЗаполнено(Объект.Ссылка) 
	
					И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "РегистрационныйНомер") = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель) Тогда
	
				Объект.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель;	
	
			КонецЕсли;
	
			
	
		КонецЕсли;
	
		
	
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда // контроль затирания ИНН,КПП
	
			Если Не ЗначениеЗаполнено(Объект.ИНН) Тогда
	
				Объект.ИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ИНН");
	
			КонецЕсли;
	
			Если Не ЗначениеЗаполнено(Объект.КПП) Тогда
	
				Объект.КПП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "КПП");
	
			КонецЕсли;
	
		КонецЕсли;
	
		
	
		Объект.ГоловнойКонтрагент = Неопределено;
	
		Если ПараметрыОбъекта <> Неопределено Тогда
	
			ГоловнойКонтрагент = ПараметрыОбъекта["ГоловнойКонтрагент"];
	
			Если ЗначениеЗаполнено(ГоловнойКонтрагент) Тогда
	
				Объект.ГоловнойКонтрагент = ГоловнойКонтрагент;
	
			КонецЕсли;
	
		КонецЕсли;
	
		
	
			
			
			//============================ {НАЧАЛО АЛГОРИТМА} "ОбработатьТаблицуКонтактнойИнформации" ============================
			
			
			
			МассивНекорректныхСтрок = Новый Массив;
			
			
			
			Для каждого СтрокаТаблицы Из Объект.КонтактнаяИнформация Цикл
			
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.Тип)
			
					И Не ЗначениеЗаполнено(СтрокаТаблицы.Вид) Тогда
			
					МассивНекорректныхСтрок.Добавить(СтрокаТаблицы);
			
				КонецЕсли;
			
			КонецЦикла;
			
			
			
			Для каждого СтрокаКУдалению Из МассивНекорректныхСтрок Цикл
			
				Объект.КонтактнаяИнформация.Удалить(СтрокаКУдалению);
			
			КонецЦикла;
			
			
			
			Если ТипЗнч(Объект) = Тип("СправочникОбъект.Контрагенты")
			
				И ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
				
			
				Для каждого ТекКИ Из Объект.Ссылка.КонтактнаяИнформация Цикл
			
					
			
					Если ТекКИ.Вид = Справочники.ВидыКонтактнойИнформации.SkypeКонтрагента
			
						ИЛИ ТекКИ.Вид = Справочники.ВидыКонтактнойИнформации.ВебСайтКонтрагента
			
						ИЛИ ТекКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента Тогда
			
						
			
						СтрокаКИ = Объект.КонтактнаяИнформация.Найти(ТекКИ.Вид, "Вид");
			
						Если СтрокаКИ = Неопределено Тогда
			
							
			
							НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
			
							ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекКИ);
			
							
			
						КонецЕсли;
			
					КонецЕсли;
			
				КонецЦикла;
			
			КонецЕсли;
			
			
			
			Для каждого СтрокаТаблицы Из Объект.КонтактнаяИнформация Цикл
			
				Если СтрокаТаблицы.Тип <> СтрокаТаблицы.Вид.Тип Тогда
			
					СтрокаТаблицы.ЗначенияПолей = "";
			
					Если ЗначениеЗаполнено(СтрокаТаблицы.Вид.Тип) Тогда
			
						СтрокаТаблицы.Тип = СтрокаТаблицы.Вид.Тип;
			
					КонецЕсли;
			
				КонецЕсли;
			
			КонецЦикла;
			
			//============================ {КОНЕЦ АЛГОРИТМА} "ОбработатьТаблицуКонтактнойИнформации" ============================
	
	
	
	
	КонецЕсли;
	
	
	
	Исключение
	
	КонецПопытки;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_Номенклатура(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если НЕ Объект.ЭтоГруппа Тогда
	
	
	
		Если НЕ ОбъектНайден Тогда 
	
			Объект.СчетУчетаЗапасов = ПланыСчетов.Управленческий.СырьеИМатериалы;
	
			Объект.СчетУчетаЗатрат = ПланыСчетов.Управленческий.НезавершенноеПроизводство;	
	
			Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
	
		КонецЕсли;
	
		
	
		Если Не ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) Тогда
	
			Объект.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
	
		КонецЕсли;
	
		
	
		Если Не ЗначениеЗаполнено(Объект.КатегорияНоменклатуры) Тогда
	
			Объект.КатегорияНоменклатуры = Параметры.КатегорияПоУмолчанию;
	
		КонецЕсли;	
	
			
	
			
			
			//============================ {НАЧАЛО АЛГОРИТМА} "ЗаполнитьСтавкуНДСШапки" ============================
			
			
			
			Попытка
			
				
			
				Если ПараметрыОбъекта <> Неопределено Тогда
			
					
			
					ВидСтавкиНДС = ПараметрыОбъекта["ТекстЗапросаСтавкаНДС"];
			
					Если ЗначениеЗаполнено(ВидСтавкиНДС) Тогда
			
						Объект.ВидСтавкиНДС = Вычислить(ВидСтавкиНДС);
			
					КонецЕсли;
			
				КонецЕсли;
			
				
			
			Исключение
			
			КонецПопытки;
			
			//============================ {КОНЕЦ АЛГОРИТМА} "ЗаполнитьСтавкуНДСШапки" ============================
	
	
		
	
			
			
			//============================ {НАЧАЛО АЛГОРИТМА} "ЗагрузитьСведенияОбАлкогольнойПродукции" ============================
			
			
			
			Попытка
			
				
			
				Если Не Объект.ЭтоГруппа Тогда
			
					
			
					Если ПараметрыОбъекта <> Неопределено Тогда
			
						Если ЗначениеЗаполнено(ПараметрыОбъекта["КодВидаАлкогольнойПродукции"]) Тогда
			
							
			
							Запрос = Новый Запрос;
			
							Запрос.Текст = 
			
							"ВЫБРАТЬ
			
							|	ВидыАлкогольнойПродукции.Ссылка
			
							|ИЗ
			
							|	Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
			
							|ГДЕ
			
							|	ВидыАлкогольнойПродукции.Код = &Код";
			
							
			
							Запрос.УстановитьПараметр("Код", ПараметрыОбъекта["КодВидаАлкогольнойПродукции"]);
			
							
			
							Выборка = Запрос.Выполнить().Выбрать();
			
							Если Выборка.Следующий() Тогда
			
								ВидАлкогольнойПродукции = Выборка.Ссылка.ПолучитьОбъект();
			
							Иначе
			
								ВидАлкогольнойПродукции = Справочники.ВидыАлкогольнойПродукции.СоздатьЭлемент();
			
							КонецЕсли;
			
							
			
							ВидАлкогольнойПродукции.Код = СокрЛП(ПараметрыОбъекта["КодВидаАлкогольнойПродукции"]);
			
							ВидАлкогольнойПродукции.Наименование = ПараметрыОбъекта["НаименованиеВидаАлкогольнойПродукции"];
			
							ВидАлкогольнойПродукции.ВидЛицензии = ПараметрыОбъекта["ВидЛицензииАлкогольнойПродукции"];
			
							
			
							Попытка
			
								ВидАлкогольнойПродукции.ОбменДанными.Загрузка = Истина;
			
								ВидАлкогольнойПродукции.УстановитьНовыйКод();
			
								ВидАлкогольнойПродукции.Записать();
			
								
			
								Объект.ВидАлкогольнойПродукции = ВидАлкогольнойПродукции.Ссылка;
			
							Исключение
			
							КонецПопытки;
			
							
			
						Иначе
			
							Объект.ВидАлкогольнойПродукции = Неопределено;
			
						КонецЕсли;
			
						
			
						Производитель = ПараметрыОбъекта["Производитель"];
			
						Если ЗначениеЗаполнено(Производитель) Тогда
			
							Если Не Объект.АлкогольнаяПродукция ИЛИ Объект.ИмпортнаяАлкогольнаяПродукция Тогда
			
								Объект.Производитель = Производитель;
			
							КонецЕсли;
			
						КонецЕсли;
			
					КонецЕсли;
			
				КонецЕсли;
			
				
			
			Исключение
			
			КонецПопытки;
			
			//============================ {КОНЕЦ АЛГОРИТМА} "ЗагрузитьСведенияОбАлкогольнойПродукции" ============================
	
	
		
	
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ФизическиеЛица(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	
	
	Если НЕ Объект.ЭтоГруппа Тогда
	
		
	
			
			
			//============================ {НАЧАЛО АЛГОРИТМА} "ОбработатьТаблицуКонтактнойИнформации" ============================
			
			
			
			МассивНекорректныхСтрок = Новый Массив;
			
			
			
			Для каждого СтрокаТаблицы Из Объект.КонтактнаяИнформация Цикл
			
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.Тип)
			
					И Не ЗначениеЗаполнено(СтрокаТаблицы.Вид) Тогда
			
					МассивНекорректныхСтрок.Добавить(СтрокаТаблицы);
			
				КонецЕсли;
			
			КонецЦикла;
			
			
			
			Для каждого СтрокаКУдалению Из МассивНекорректныхСтрок Цикл
			
				Объект.КонтактнаяИнформация.Удалить(СтрокаКУдалению);
			
			КонецЦикла;
			
			
			
			Если ТипЗнч(Объект) = Тип("СправочникОбъект.Контрагенты")
			
				И ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
				
			
				Для каждого ТекКИ Из Объект.Ссылка.КонтактнаяИнформация Цикл
			
					
			
					Если ТекКИ.Вид = Справочники.ВидыКонтактнойИнформации.SkypeКонтрагента
			
						ИЛИ ТекКИ.Вид = Справочники.ВидыКонтактнойИнформации.ВебСайтКонтрагента
			
						ИЛИ ТекКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента Тогда
			
						
			
						СтрокаКИ = Объект.КонтактнаяИнформация.Найти(ТекКИ.Вид, "Вид");
			
						Если СтрокаКИ = Неопределено Тогда
			
							
			
							НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
			
							ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекКИ);
			
							
			
						КонецЕсли;
			
					КонецЕсли;
			
				КонецЦикла;
			
			КонецЕсли;
			
			
			
			Для каждого СтрокаТаблицы Из Объект.КонтактнаяИнформация Цикл
			
				Если СтрокаТаблицы.Тип <> СтрокаТаблицы.Вид.Тип Тогда
			
					СтрокаТаблицы.ЗначенияПолей = "";
			
					Если ЗначениеЗаполнено(СтрокаТаблицы.Вид.Тип) Тогда
			
						СтрокаТаблицы.Тип = СтрокаТаблицы.Вид.Тип;
			
					КонецЕсли;
			
				КонецЕсли;
			
			КонецЦикла;
			
			//============================ {КОНЕЦ АЛГОРИТМА} "ОбработатьТаблицуКонтактнойИнформации" ============================
	
	
		
	
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПоследовательностьПолейПоиска_ФизическиеЛица(НомерВариантаПоиска, СвойстваПоиска, ПараметрыОбъекта, ПрекратитьПоиск, 
                                           СсылкаНаОбъект, УстанавливатьУОбъектаВсеСвойстваПоиска, 
                                           СтрокаИменСвойствПоиска) Экспорт

	//Т.к. Группы не имеют всех полей поиска, которые имеют элементы, то зададим им свои поля
	
	Если СвойстваПоиска["ЭтоГруппа"] Тогда
	
		СтрокаИменСвойствПоиска = "ЭтоГруппа, Родитель, Наименование";
	
	Иначе
	
		СтрокаИменСвойствПоиска = "ЭтоГруппа, Родитель, Наименование, ИНН, ДатаРождения";
	
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ДоговорыКонтрагентов(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	
	
	Попытка
	
		
	
		Если НЕ Объект.ЭтоГруппа Тогда
	
			
	
			Контрагент = Объект.Владелец;
	
			Если ЗначениеЗаполнено(Контрагент)
	
				И Контрагент.ПолучитьОбъект() <> Неопределено 
	
				И НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
	
				
	
				ОсновнойДоговор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	
				Если ЗначениеЗаполнено(ОсновнойДоговор) Тогда
	
					
	
					ОсновнойДоговорОбъект = ОсновнойДоговор.ПолучитьОбъект();
	
					Объект = ОсновнойДоговорОбъект;
	
					Объект.ОбменДанными.Загрузка = Истина;
	
					Объект.ДополнительныеСвойства.Вставить("РегистрироватьОбъектНаУзлеОтправителе", Ложь);
	
					
	
				КонецЕсли;
	
			КонецЕсли;
	
			
	
		КонецЕсли
	
		
	
	Исключение
	
	КонецПопытки;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_СтруктурныеЕдиницы(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	
	
	Если ОбъектНайден
	
		И Объект.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
	
		
	
		Отказ = Истина; // не загружаем производственные склады, созданные при загрузке в БП по подразделению УНФ
	
		
	
	КонецЕсли;
	
	
	
	Если НЕ ОбъектНайден Тогда
	
		Объект.Организация = Справочники.Организации.ОсновнаяОрганизация;
	
	КонецЕсли;
	
	
	
	Если Не ЗначениеЗаполнено(Объект.ТипСтруктурнойЕдиницы) Тогда
	
		Объект.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад;
	
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_Спецификации(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
	
		
	
		Для каждого ТекСтрока Из Объект.Состав Цикл
	
			
	
			// Заполним единицу измерения
	
				
				
				//============================ {НАЧАЛО АЛГОРИТМА} "ЗаполнитьЕдиницуИзмерения" ============================
				
				Если НЕ ЗначениеЗаполнено(ТекСтрока.ЕдиницаИзмерения) Тогда
				
					
				
					ТекСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрока.Номенклатура, "ЕдиницаИзмерения");
				
					
				
				КонецЕсли;
				
				
				
				Если НЕ ЗначениеЗаполнено(ТекСтрока.ЕдиницаИзмерения) Тогда
				
					
				
					ТекСтрока.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.Шт;
				
					
				
				КонецЕсли;
				
				//============================ {КОНЕЦ АЛГОРИТМА} "ЗаполнитьЕдиницуИзмерения" ============================
	
	
			
	
		КонецЦикла;
	
		
	
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_Подразделения(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	
	
	Попытка
	
		Объект.ЦифровойИндексОбособленногоПодразделения = "";
	
		Если ПараметрыОбъекта <> Неопределено Тогда
	
			Объект.ЦифровойИндексОбособленногоПодразделения = ПараметрыОбъекта["ЦифровойИндексОбособленногоПодразделения"];
	
		КонецЕсли;
	
	Исключение
	
	КонецПопытки;

КонецПроцедуры

Процедура ПКО_ПередЗагрузкой_ВидыКонтактнойИнформации(ФайлОбмена, Отказ, Нпп, Источник, ИмяПравила, Правило, ГенерироватьНовыйНомерИлиКодЕслиНеУказан, 
                                           ТипОбъектаСтрокой, ТипОбъекта, НеЗамещатьОбъект, РежимЗаписи, 
                                           РежимПроведения) Экспорт

	
	
	НеЗамещатьОбъект = Истина;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВидыКонтактнойИнформации(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Попытка
	
		Если ПараметрыОбъекта <> Неопределено Тогда
	
			ТолькоНациональныйАдрес = ПараметрыОбъекта["ТолькоНациональныйАдрес"];
	
			Если ТолькоНациональныйАдрес <> Неопределено Тогда
	
				Если Объект.Метаданные().Реквизиты.Найти("АдресТолькоРоссийский") <> Неопределено Тогда
	
					Объект.АдресТолькоРоссийский = ТолькоНациональныйАдрес;	
	
				Иначе
	
					Объект.ТолькоНациональныйАдрес = ТолькоНациональныйАдрес;	
	
				КонецЕсли;	
	
			КонецЕсли;
	
		КонецЕсли;
	
	Исключение
	
	КонецПопытки;

КонецПроцедуры

Процедура ПКО_ПередЗагрузкой_ЛицензииПоставщиковАлкогольнойПродукции(ФайлОбмена, Отказ, Нпп, Источник, ИмяПравила, Правило, ГенерироватьНовыйНомерИлиКодЕслиНеУказан, 
                                           ТипОбъектаСтрокой, ТипОбъекта, НеЗамещатьОбъект, РежимЗаписи, 
                                           РежимПроведения) Экспорт

	Отказ = Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции");

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_КатегорииНоменклатуры(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипНоменклатурыПоУмолчанию) Тогда
	
		Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Запас;
	
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПриЗагрузке_ВводОстатковДенежныхСредств(ФайлОбмена, ОбъектНайден, Объект, НеЗамещатьОбъект, ОбъектМодифицирован) Экспорт

	Объект.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.ВводНачальныхОстатков;
	
	Объект.РазделУчета = "Денежные средства";

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковДенежныхСредств(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	
	
	// Заполнение автора документа.
	
		
		
		//============================ {НАЧАЛО АЛГОРИТМА} "ЗаполнитьАвтора" ============================
		
		Если НЕ ЗначениеЗаполнено(Объект.Автор) Тогда
		
			Попытка
		
				Объект.Автор = Пользователи.ТекущийПользователь();
		
			Исключение
		
			КонецПопытки;
		
		КонецЕсли;
		
		//============================ {КОНЕЦ АЛГОРИТМА} "ЗаполнитьАвтора" ============================
	
	
	
	
	
	
	Параметры.ДокументыДляПроведения.Добавить(Объект);
	
	
	
	//Занесем данные об объекте в таблицу отложенной обработки 
	
	НоваяСтрока = Параметры.ЗагруженныеОбъектыПереноса.Добавить();
	
	НоваяСтрока.ИмяПКО    = "ВводОстатковДенежныхСредств";
	
	НоваяСтрока.Объект    = Объект;
	
	НоваяСтрока.Параметры = ПараметрыОбъекта;

КонецПроцедуры

Процедура ПКО_ПриЗагрузке_ВводОстатковСПодотчетниками(ФайлОбмена, ОбъектНайден, Объект, НеЗамещатьОбъект, ОбъектМодифицирован) Экспорт

	Объект.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.ВводНачальныхОстатков;
	
	Объект.РазделУчета = "Расчеты с подотчетниками";
	
	Объект.Автоформирование = Истина;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковСПодотчетниками(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	
	
	// Заполнение автора документа.
	
		
		
		//============================ {НАЧАЛО АЛГОРИТМА} "ЗаполнитьАвтора" ============================
		
		Если НЕ ЗначениеЗаполнено(Объект.Автор) Тогда
		
			Попытка
		
				Объект.Автор = Пользователи.ТекущийПользователь();
		
			Исключение
		
			КонецПопытки;
		
		КонецЕсли;
		
		//============================ {КОНЕЦ АЛГОРИТМА} "ЗаполнитьАвтора" ============================
	
	
	
	
	Если ПараметрыОбъекта <> Неопределено Тогда
	
		ФизЛицо = ПараметрыОбъекта["ПодотчетноеЛицо"];
	
		Если ЗначениеЗаполнено(ФизЛицо) Тогда
	
			Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("Физлицо", ФизЛицо);
	
			Для каждого СтрокаТаблицы Из Объект.РасчетыСПодотчетниками Цикл
	
				СтрокаТаблицы.Сотрудник = Сотрудник;
	
			КонецЦикла;
	
		КонецЕсли;
	
			
	
	КонецЕсли;
	
	
	
	
	
	Параметры.ДокументыДляПроведения.Добавить(Объект);
	
	
	
	//Занесем данные об объекте в таблицу отложенной обработки 
	
	НоваяСтрока = Параметры.ЗагруженныеОбъектыПереноса.Добавить();
	
	НоваяСтрока.ИмяПКО    = "ВводОстатковСПодотчетниками";
	
	НоваяСтрока.Объект    = Объект;
	
	НоваяСтрока.Параметры = ПараметрыОбъекта;

КонецПроцедуры

Процедура ПКО_ПриЗагрузке_ВводОстатковТоваров(ФайлОбмена, ОбъектНайден, Объект, НеЗамещатьОбъект, ОбъектМодифицирован) Экспорт

	Объект.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.ВводНачальныхОстатков;
	
	Объект.РазделУчета = "Запасы";

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковТоваров(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	
	
	// Заполнение автора документа.
	
		
		
		//============================ {НАЧАЛО АЛГОРИТМА} "ЗаполнитьАвтора" ============================
		
		Если НЕ ЗначениеЗаполнено(Объект.Автор) Тогда
		
			Попытка
		
				Объект.Автор = Пользователи.ТекущийПользователь();
		
			Исключение
		
			КонецПопытки;
		
		КонецЕсли;
		
		//============================ {КОНЕЦ АЛГОРИТМА} "ЗаполнитьАвтора" ============================
	
	
	
	
	
	
	Параметры.ДокументыДляПроведения.Добавить(Объект);
	
	
	
	//Занесем данные об объекте в таблицу отложенной обработки 
	
	НоваяСтрока = Параметры.ЗагруженныеОбъектыПереноса.Добавить();
	
	НоваяСтрока.ИмяПКО    = "ВводОстатковТоваров";
	
	НоваяСтрока.Объект    = Объект;
	
	НоваяСтрока.Параметры = ПараметрыОбъекта;

КонецПроцедуры

Процедура ПКО_ПриЗагрузке_ВводОстатковТоваровПринятых(ФайлОбмена, ОбъектНайден, Объект, НеЗамещатьОбъект, ОбъектМодифицирован) Экспорт

	Объект.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.ВводНачальныхОстатков;
	
	Объект.РазделУчета = "Запасы";

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковТоваровПринятых(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	
	
	// Заполнение автора документа.
	
		
		
		//============================ {НАЧАЛО АЛГОРИТМА} "ЗаполнитьАвтора" ============================
		
		Если НЕ ЗначениеЗаполнено(Объект.Автор) Тогда
		
			Попытка
		
				Объект.Автор = Пользователи.ТекущийПользователь();
		
			Исключение
		
			КонецПопытки;
		
		КонецЕсли;
		
		//============================ {КОНЕЦ АЛГОРИТМА} "ЗаполнитьАвтора" ============================
	
	
	
	
	
	
	Параметры.ДокументыДляПроведения.Добавить(Объект);
	
	
	
	//Занесем данные об объекте в таблицу отложенной обработки 
	
	НоваяСтрока = Параметры.ЗагруженныеОбъектыПереноса.Добавить();
	
	НоваяСтрока.ИмяПКО    = "ВводОстатковТоваровПринятых";
	
	НоваяСтрока.Объект    = Объект;
	
	НоваяСтрока.Параметры = ПараметрыОбъекта;

КонецПроцедуры

Процедура ПКО_ПриЗагрузке_ВводОстатковТоваровПереданных(ФайлОбмена, ОбъектНайден, Объект, НеЗамещатьОбъект, ОбъектМодифицирован) Экспорт

	Объект.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.ВводНачальныхОстатков;
	
	Объект.РазделУчета = "Запасы";

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковТоваровПереданных(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	
	
	// Заполнение автора документа.
	
		
		
		//============================ {НАЧАЛО АЛГОРИТМА} "ЗаполнитьАвтора" ============================
		
		Если НЕ ЗначениеЗаполнено(Объект.Автор) Тогда
		
			Попытка
		
				Объект.Автор = Пользователи.ТекущийПользователь();
		
			Исключение
		
			КонецПопытки;
		
		КонецЕсли;
		
		//============================ {КОНЕЦ АЛГОРИТМА} "ЗаполнитьАвтора" ============================
	
	
	
	
	
	
	Параметры.ДокументыДляПроведения.Добавить(Объект);
	
	
	
	//Занесем данные об объекте в таблицу отложенной обработки 
	
	НоваяСтрока = Параметры.ЗагруженныеОбъектыПереноса.Добавить();
	
	НоваяСтрока.ИмяПКО    = "ВводОстатковТоваровПереданных";
	
	НоваяСтрока.Объект    = Объект;
	
	НоваяСтрока.Параметры = ПараметрыОбъекта;

КонецПроцедуры

Процедура ПКО_ПриЗагрузке_ВводОстатковВзаиморасчетовСПокупателями(ФайлОбмена, ОбъектНайден, Объект, НеЗамещатьОбъект, ОбъектМодифицирован) Экспорт

	Объект.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.ВводНачальныхОстатков;
	
	Объект.РазделУчета = "Расчеты с поставщиками и покупателями";
	
	Объект.Автоформирование = Истина;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковВзаиморасчетовСПокупателями(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	
	
	// Заполнение автора документа.
	
		
		
		//============================ {НАЧАЛО АЛГОРИТМА} "ЗаполнитьАвтора" ============================
		
		Если НЕ ЗначениеЗаполнено(Объект.Автор) Тогда
		
			Попытка
		
				Объект.Автор = Пользователи.ТекущийПользователь();
		
			Исключение
		
			КонецПопытки;
		
		КонецЕсли;
		
		//============================ {КОНЕЦ АЛГОРИТМА} "ЗаполнитьАвтора" ============================
	
	
	
	
	
	
	Параметры.ДокументыДляПроведения.Добавить(Объект);
	
	
	
	//Занесем данные об объекте в таблицу отложенной обработки 
	
	НоваяСтрока = Параметры.ЗагруженныеОбъектыПереноса.Добавить();
	
	НоваяСтрока.ИмяПКО    = "ВводОстатковВзаиморасчетовСПокупателями";
	
	НоваяСтрока.Объект    = Объект;
	
	НоваяСтрока.Параметры = ПараметрыОбъекта;

КонецПроцедуры

Процедура ПКО_ПриЗагрузке_ВводОстатковВзаиморасчетовСПоставщиками(ФайлОбмена, ОбъектНайден, Объект, НеЗамещатьОбъект, ОбъектМодифицирован) Экспорт

	Объект.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.ВводНачальныхОстатков;
	
	Объект.РазделУчета = "Расчеты с поставщиками и покупателями";
	
	Объект.Автоформирование = Истина;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковВзаиморасчетовСПоставщиками(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	
	
	// Заполнение автора документа.
	
		
		
		//============================ {НАЧАЛО АЛГОРИТМА} "ЗаполнитьАвтора" ============================
		
		Если НЕ ЗначениеЗаполнено(Объект.Автор) Тогда
		
			Попытка
		
				Объект.Автор = Пользователи.ТекущийПользователь();
		
			Исключение
		
			КонецПопытки;
		
		КонецЕсли;
		
		//============================ {КОНЕЦ АЛГОРИТМА} "ЗаполнитьАвтора" ============================
	
	
	
	
	
	
	Параметры.ДокументыДляПроведения.Добавить(Объект);
	
	
	
	//Занесем данные об объекте в таблицу отложенной обработки 
	
	НоваяСтрока = Параметры.ЗагруженныеОбъектыПереноса.Добавить();
	
	НоваяСтрока.ИмяПКО    = "ВводОстатковВзаиморасчетовСПоставщиками";
	
	НоваяСтрока.Объект    = Объект;
	
	НоваяСтрока.Параметры = ПараметрыОбъекта;

КонецПроцедуры

Процедура ПКО_ПриЗагрузке_НачальнаяЗадолженностьПоЗарплате(ФайлОбмена, ОбъектНайден, Объект, НеЗамещатьОбъект, ОбъектМодифицирован) Экспорт

	Объект.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.ВводНачальныхОстатков;
	
	Объект.РазделУчета = "Расчеты с персоналом";;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_НачальнаяЗадолженностьПоЗарплате(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	
	
	// Заполнение автора документа.
	
		
		
		//============================ {НАЧАЛО АЛГОРИТМА} "ЗаполнитьАвтора" ============================
		
		Если НЕ ЗначениеЗаполнено(Объект.Автор) Тогда
		
			Попытка
		
				Объект.Автор = Пользователи.ТекущийПользователь();
		
			Исключение
		
			КонецПопытки;
		
		КонецЕсли;
		
		//============================ {КОНЕЦ АЛГОРИТМА} "ЗаполнитьАвтора" ============================
	
	
	
	
	
	
	Параметры.ДокументыДляПроведения.Добавить(Объект);
	
	
	
	//Занесем данные об объекте в таблицу отложенной обработки 
	
	НоваяСтрока = Параметры.ЗагруженныеОбъектыПереноса.Добавить();
	
	НоваяСтрока.ИмяПКО    = "НачальнаяЗадолженностьПоЗарплате";
	
	НоваяСтрока.Объект    = Объект;
	
	НоваяСтрока.Параметры = ПараметрыОбъекта;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ДополнительныеРеквизитыИСведения(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если ПараметрыОбъекта <> Неопределено Тогда
	
		
	
		МассивНаименованийТиповВСтрокеВнутр = ПараметрыОбъекта.Получить("Тип");
	
		Если МассивНаименованийТиповВСтрокеВнутр <> Неопределено Тогда
	
			
	
			МассивНаименованийТипов = ЗначениеИзСтрокиВнутр(МассивНаименованийТиповВСтрокеВнутр);
	
			
	
			МассивТипов = Новый Массив;
	
			Для каждого НаименованиеТипа Из МассивНаименованийТипов Цикл
	
				МассивТипов.Добавить(Тип(НаименованиеТипа));
	
			КонецЦикла;
	
			
	
			Попытка
	
				Объект.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
	
			Исключение
	
			КонецПопытки;
	
			
	
		КонецЕсли;
	
		
	
	КонецЕсли;
	
	
	
	Объект.Виден = Истина;
	
	Объект.Доступен = Истина;
	
	Объект.ДополнительныеЗначенияИспользуются = Истина;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ СВОЙСТВ И ГРУПП СВОЙСТВ ОБЪЕКТОВ


////////////////////////////////////////////////////////////////////////////////
//                             ВНИМАНИЕ 
//            ИЗМЕНЯТЬ КОД В ЭТОМ БЛОКЕ (НИЖЕ) ЗАПРЕЩЕНО!
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// ВЫЗОВ ОБЩИХ ПРОЦЕДУР И ФУНКЦИЙ


// Производит выгрузку объекта в соответствии с указанным правилом конвертации
//
// Параметры:
//  Источник				 - произвольный источник данных
//  Приемник				 - xml-узел объекта приемника
//  ВходящиеДанные			 - произвольные вспомогательные данные, передаваемые правилу
//                             для выполнения конвертации
//  ИсходящиеДанные			 - произвольные вспомогательные данные, передаваемые правилам
//                             конвертации свойств
//  ИмяПКО					 - имя правила конвертации, согласно которому осуществляется выгрузка
//  УзелСсылки				 - xml-узел ссылки объекта приемника
//  ТолькоПолучитьУзелСсылки - если Истина, то выгрузка объекта не производится, только формируется
//                             xml-узел ссылки
//  ПКО                      - ссылка на правило конвертации
//
// Возвращаемое значение:
//  xml-узел ссылки или значение приемника
//
Функция ВыгрузитьПоПравилу(Источник					= Неопределено,
						   Приемник					= Неопределено,
						   ВходящиеДанные			= Неопределено,
						   ИсходящиеДанные			= Неопределено,
						   ИмяПКО					= "") Экспорт
						   
	Возврат ОбщиеПроцедурыФункции.ВыгрузитьПоПравилу(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО);
	
КонецФункции

// Создает новый xml-узел
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
//
// Параметры: 
//  Имя            - Имя узла
//
// Возвращаемое значение:
//  Объект нового xml-узла
//
Функция СоздатьУзел(Имя) Экспорт

	Возврат ОбщиеПроцедурыФункции.СоздатьУзел(Имя); 

КонецФункции

// Добавляет новый xml-узел к указанному узлу-родителю
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Имя            - имя добавляемого узла
//
// Возвращаемое значение:
//  Новый xml-узел, добавленный к указанному узлу-родителю
//
Функция ДобавитьУзел(УзелРодитель, Имя) Экспорт

	Возврат ОбщиеПроцедурыФункции.ДобавитьУзел(УзелРодитель, Имя); 

КонецФункции

// Копирует указанный xml-узел
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры: 
//  Узел           - копируемый узел
//
// Возвращаемое значение:
//  Новый xml - копия указанного узла
//
Функция КопироватьУзел(Узел) Экспорт

	Возврат ОбщиеПроцедурыФункции.КопироватьУзел(Узел); 
	
КонецФункции 

// Устанавливает значение параметра "Загрузка" для свойства объекта "ОбменДанными".
//
// Параметры:
//  Объект   - объект, для которого устанавливается свойство
//  Значение - значение устанавливаемого свойства "Загрузка"
// 
Процедура УстановитьОбменДаннымиЗагрузка(Объект, Значение = Истина) Экспорт

	ОбщиеПроцедурыФункции.УстановитьОбменДаннымиЗагрузка(Объект, Значение);
	
КонецПроцедуры

// Устанавливает атрибут указанного xml-узла
//
// Параметры: 
//  Узел           - xml-узел
//  Имя            - имя атрибута
//  Значение       - устанавливаемое значение
//
Процедура УстановитьАтрибут(Узел, Имя, Значение) Экспорт
	
	ОбщиеПроцедурыФункции.УстановитьАтрибут(Узел, Имя, Значение);
	
КонецПроцедуры

// Подчиняет xml-узел указанному узлу-родителю
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Узел           - подчиняемый узел 
//
Процедура ДобавитьПодчиненный(УзелРодитель, Узел) Экспорт

	ОбщиеПроцедурыФункции.ДобавитьПодчиненный(УзелРодитель, Узел);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ОБЪЕКТОМ XMLЧтение

// Осуществляет запись элемента и его значения в указанный объект
//
// Параметры:
//  Объект         - объект типа XMLЗапись
//  Имя            - Строка. Имя элемента
//  Значение       - Значение элемента
// 
Процедура одЗаписатьЭлемент(Объект, Имя, Значение="") Экспорт

	ОбщиеПроцедурыФункции.одЗаписатьЭлемент(Объект, Имя, Значение);
	
КонецПроцедуры

// Читает значение атрибута по имени из указанного объекта, приводит значение
// к указанному примитивному типу
//
// Параметры:
//  Объект      - объект типа XMLЧтение, спозиционированный на начале элемента,
//                атрибут которого требуется получить
//  Тип         - Значение типа Тип. Тип атрибута
//  Имя         - Строка. Имя атрибута
//
// Возвращаемое значение:
//  Значение атрибута полученное по имени и приведенное к указанному типу
// 
Функция одАтрибут(Объект, Тип, Имя) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одАтрибут(Объект, Тип, Имя);
		
КонецФункции
 
// Пропускает узлы xml до конца указанного элемента (по умолчанию текущего)
//
// Параметры:
//  Объект   - объект типа XMLЧтение
//  Имя      - имя узла, до конца которого пропускаем элементы
// 
Процедура одПропустить(Объект, Имя = "") Экспорт
	
	ОбщиеПроцедурыФункции.одПропустить(Объект, Имя);
	
КонецПроцедуры

// Читает текст элемента и приводит значение к указанному типу
//
// Параметры:
//  Объект           - объект типа XMLЧтение, из которого осуществляется чтение
//  Тип              - тип получаемого значения
//  ИскатьПоСвойству - для ссылочных типов может быть указано свойство, по которому
//                     следует искать объект: "Код", "Наименование", <ИмяРеквизита>, "Имя" (предопределенного значения)
//
// Возвращаемое значение:
//  Значение xml-элемента, приведенное к соответствующему типу
//
Функция одЗначениеЭлемента(Объект, Тип, ИскатьПоСвойству = "", ОбрезатьСтрокуСправа = Истина) Экспорт

	Возврат ОбщиеПроцедурыФункции.одЗначениеЭлемента(Объект, Тип, ИскатьПоСвойству, ОбрезатьСтрокуСправа);

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ДАННЫМИ

// Возвращает строку - имя переданного значения перечисления.
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//	Значение - значение перечисления
//
// Возвращаемое значение:
//	Строка - имя переданного значения перечисления.
//
Функция одИмяЗначенияПеречисления(Значение) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одИмяЗначенияПеречисления(Значение);
	
КонецФункции

// Определяет заполнено ли переданное значение
//
// Параметры:
//	Значение - значение, заполнение которого надо проверить
//
// Возвращаемое значение:
//	Истина - значение не заполнено, ложь - иначе.
//
Функция одПустое(Значение, ЭтоNULL=Ложь) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одПустое(Значение, ЭтоNULL);
	
КонецФункции

// Возвращает объект ОписаниеТипов, содержащий указанный тип.
//
// Параметры:
//	ЗначениеТипа - строка с именем типа или значение типа Тип.
//
// Возвращаемое значение:
//	ОписаниеТипов
//
Функция одОписаниеТипа(ЗначениеТипа) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одОписаниеТипа(ЗначениеТипа);
	
КонецФункции

// Возвращает пустое (дефолтное) значение указанного типа
//
// Параметры:
//	Тип - строка с именем типа или значение типа Тип.
//
// Возвращаемое значение:
//	Пустое значение указанного типа.
// 
Функция одПолучитьПустоеЗначение(Тип) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одПолучитьПустоеЗначение(Тип);
	
КонецФункции

// Осуществляет простой поиск объекта информационной базы по указанному свойству.
//
// Параметры:
//  Менеджер       - менеджер искомого объекта;
//  Свойство       - свойство, по которому осуществляем поиск: Имя, Код, 
//                   Наименование или Имя индексируемого реквизита;
//  Значение       - значение свойства, по которому ищем объект.
//
// Возвращаемое значение:
//  Найденный объект информационной базы.
//
Функция одНайтиОбъектПоСвойству(Менеджер, Свойство, Значение,
	НайденныйОбъектПоУникальномуИдентификатору = Неопределено,
	ОбщаяСтруктураСвойств = Неопределено, ОбщиеСвойстваПоиска = Неопределено,
	РежимПоискаОсновногоОбъекта = Истина,
	СтрокаЗапросаПоискаПоУникальномуИдентификатору = "") Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одНайтиОбъектПоСвойству(Менеджер, Свойство, Значение,
		НайденныйОбъектПоУникальномуИдентификатору,
		ОбщаяСтруктураСвойств, ОбщиеСвойстваПоиска,
		РежимПоискаОсновногоОбъекта, СтрокаЗапросаПоискаПоУникальномуИдентификатору);
	
КонецФункции

// Осуществляет простой поиск объекта информационной базы по указанному свойству.
//
// Параметры:
//	Стр - Строка - значение свойства, по которому осуществляется поиск объекта;
//	Тип - тип искомого объекта;
//	Свойство - Строка - имя свойства, по-которому ищем объект.
//
// Возвращаемое значение:
//	Найденный объект информационной базы
//
Функция одПолучитьЗначениеПоСтроке(Стр, Тип, Свойство = "") Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одПолучитьЗначениеПоСтроке(Стр, Тип, Свойство);
	
КонецФункции

// Возвращает строковое представление типа значения 
//
// Параметры: 
//  ЗначениеИлиТип - произвольное значение или значение типа тип
//
// Возвращаемое значение:
//  Строка - строковое представление типа значения
//
Функция одТипЗначенияСтрокой(ЗначениеИлиТип) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одТипЗначенияСтрокой(ЗначениеИлиТип);
	
КонецФункции

// Возвращает XML представление объекта ОписаниеТипов
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//  ОписаниеТипов  - объект ОписаниеТипов, XML представление которого требуется получить
//
// Возвращаемое значение:
//  Строка - XML представление переданного объекта ОписаниеТипов
//
Функция одПолучитьXMLПредставлениеОписанияТипов(ОписаниеТипов) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одПолучитьXMLПредставлениеОписанияТипов(ОписаниеТипов);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СТРОКАМИ

// Разбирает строку на две части: до подстроки разделителя и после.
//
// Параметры:
//	Стр          - разбираемая строка;
//	Разделитель  - подстрока-разделитель:
//  Режим        - 0 - разделитель в возвращаемые подстроки не включается;
//                 1 - разделитель включается в левую подстроку;
//                 2 - разделитель включается в правую подстроку.
//
// Возвращаемое значение:
//	Правая часть строки - до символа-разделителя.
// 
Функция ОтделитьРазделителем(Стр, Знач Разделитель, Режим=0) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.ОтделитьРазделителем(Стр, Разделитель, Режим);
	
КонецФункции

// Преобразует значения из строки в массив, используя указанный разделитель
//
// Параметры:
//	Стр            - Разбираемая строка
//	Разделитель    - подстрока разделитель
//
// Возвращаемое значение:
//	Массив значений
// 
Функция МассивИзСтроки(Знач Стр, Разделитель=",") Экспорт

	Возврат ОбщиеПроцедурыФункции.МассивИзСтроки(Стр, Разделитель);

КонецФункции

// Возвращает строку номера без символьных префиксов
// Например:
//	ПолучитьСтроковыйНомерБезПрефиксов("УТ0000001234") = "0000001234"
//
// Параметры:
//	Номер - Строка - номер, из которого необходимо вычислить результат функции
// 
// Возвращаемое значение:
//	Строка номера без символьных префиксов
//
Функция ПолучитьСтроковыйНомерБезПрефиксов(Номер) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.ПолучитьСтроковыйНомерБезПрефиксов(Номер);
	
КонецФункции

// Разбирает строку, выделяя из нее префикс и числовую часть.
//
// Параметры:
//  Стр            - Строка. Разбираемая строка;
//  ЧисловаяЧасть  - Число. Переменная, в которую возвратится числовая часть строки;
//  Режим          - Строка. Если "Число", то возвратит числовую часть, иначе - префикс.
//
// Возвращаемое значение:
//  Префикс строки
//
Функция ПолучитьПрефиксЧислоНомера(Знач Стр, ЧисловаяЧасть = "", Режим = "") Экспорт
	
	Возврат ОбщиеПроцедурыФункции.ПолучитьПрефиксЧислоНомера(Стр, ЧисловаяЧасть, Режим);
	
КонецФункции

// Приводит номер (код) к требуемой длине. При этом выделяется префикс
// и числовая часть номера, остальное пространство между префиксом и
// номером заполняется нулями.
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//  Стр          - преобразовываемая строка;
//  Длина        - требуемая длина строки.
//
// Возвращаемое значение:
//  Строка       - код или номер, приведенная к требуемой длине.
// 
Функция ПривестиНомерКДлине(Знач Стр, Длина, ДобавлятьНулиЕслиДлинаНеМеньшеТекущейДлиныНомера = Истина,
	Префикс = "") Экспорт
	
	Возврат ОбщиеПроцедурыФункции.ПривестиНомерКДлине(Стр, Длина,
		ДобавлятьНулиЕслиДлинаНеМеньшеТекущейДлиныНомера, Префикс);
	
КонецФункции

// Добавляет к префиксу номера или кода подстроку
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//  Стр          - Строка. Номер или код;
//  Добавок      - добавляемая к префиксу подстрока;
//  Длина        - требуемая результирующая длина строки;
//  Режим        - "Слева" - подстрока добавляется слева к префиксу, иначе - справа.
//
// Возвращаемое значение:
//  Строка       - номер или код, к префиксу которого добавлена указанная подстрока.
//
Функция ДобавитьКПрефиксу(Знач Стр, Добавок = "", Длина = "", Режим = "Слева") Экспорт

	Возврат ОбщиеПроцедурыФункции.ДобавитьКПрефиксу(Стр, Добавок, Длина, Режим); 

КонецФункции

// Дополняет строку указанным символом до указанной длины.
//
// Параметры: 
//  Стр          - дополняемая строка;
//  Длина        - требуемая длина результирующей строки;
//  Чем          - символ, которым дополняется строка.
//
// Возвращаемое значение:
//  Строка, дополненная указанным символом до указанной длины.
//
Функция одДополнитьСтроку(Стр, Длина, Чем = " ") Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одДополнитьСтроку(Стр, Длина, Чем);

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФАЙЛОМ ОБМЕНА

// Сохраняет в файл указанный xml-узел
//
// Параметры:
//  Узел           - xml-узел, сохраняемый в файл
//
Процедура ЗаписатьВФайл(Узел) Экспорт

	ОбщиеПроцедурыФункции.ЗаписатьВФайл(Узел);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПРАВИЛАМИ ОБМЕНА

// Осуществляет поиск правила конвертации по имени или в соответствии с типом
// переданного объекта
//
// Параметры:
//  Объект         - Объект-источник, для которого ищем правило конвертации
//  ИмяПравила     - имя правила конвертации
//
// Возвращаемое значение:
//  Ссылка на правило конвертации (строка в таблице правил)
// 
Функция НайтиПравило(Объект, ИмяПравила="") Экспорт

	Возврат ОбщиеПроцедурыФункции.НайтиПравило(Объект, ИмяПравила);

КонецФункции

////////////////////////////////////////////////////////////////////////////////
//

// Выполняет передачу строки данных для загрузки в базе-приемнике
//
// Параметры:
//	ИнформацияДляЗаписиВФайл - Строка (текст XML) - строка с данными
//	СтрокаОшибкиВБазеПриемнике - Строка - содержит описание ошибки при загрузке в базе-приемнике
// 
Процедура ПередатьИнформациюОЗаписиВПриемник(ИнформацияДляЗаписиВФайл, СтрокаОшибкиВБазеПриемнике = "") Экспорт
	
	ОбщиеПроцедурыФункции.ПередатьИнформациюОЗаписиВПриемник(ИнформацияДляЗаписиВФайл, СтрокаОшибкиВБазеПриемнике);
	
КонецПроцедуры

// Выполняет запись имени, типа и значения параметра в файл сообщения обмена для передачи в базу-приемник
//
Процедура ПередатьОдинПараметрВПриемник(Имя, ИсходноеЗначениеПараметра, ПравилоКонвертации = "") Экспорт
	
	ОбщиеПроцедурыФункции.ПередатьОдинПараметрВПриемник(Имя, ИсходноеЗначениеПараметра, ПравилоКонвертации);
	
КонецПроцедуры

// Передает все дополнительные параметры в приемник
//
Процедура ПередатьДополнительныеПараметрыВПриемник() Экспорт
	
	ОбщиеПроцедурыФункции.ПередатьДополнительныеПараметрыВПриемник();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// КОНСТРУКТОР И ДЕСТРУКТОР ОБРАБОТКИ

Процедура Конструктор(Владелец) Экспорт

	ОбщиеПроцедурыФункции      = Владелец;
	Параметры                  = Владелец.Параметры;
	Запросы                    = Владелец.Запросы;
	Правила                    = Владелец.Правила;
	ТаблицаПравилВыгрузки      = Владелец.ТаблицаПравилВыгрузки;
	ТаблицаНастройкиПараметров = Владелец.ТаблицаНастройкиПараметров;
	
	КомментарийПриВыгрузкеДанных = Владелец.КомментарийПриВыгрузкеДанных;
	КомментарийПриЗагрузкеДанных = Владелец.КомментарийПриЗагрузкеДанных;
	
	
	//переменная для универсального обмена
	Попытка
		ДатаНачала = Владелец.ДатаНачала;
	Исключение
	КонецПопытки;
	
	//переменная для универсального обмена
	Попытка
		ДатаОкончания = Владелец.ДатаОкончания;
	Исключение
	КонецПопытки;
	
	//переменная для on-line обмена
	Попытка
		ДатаВыгрузкиДанных = Владелец.ДатаВыгрузкиДанных;
	Исключение
	КонецПопытки;
	
	//переменная для on-line обмена
	Попытка
		УзелДляОбмена = Владелец.УзелДляОбмена;
	Исключение
	КонецПопытки;
	
	// Типы
	одТипСтрока                = Тип("Строка");
	одТипБулево                = Тип("Булево");
	одТипЧисло                 = Тип("Число");
	одТипДата                  = Тип("Дата");
	одТипХранилищеЗначения     = Тип("ХранилищеЗначения");
	одТипДвоичныеДанные        = Тип("ДвоичныеДанные");
	одТипВидДвиженияНакопления = Тип("ВидДвиженияНакопления");
	одТипУдалениеОбъекта       = Тип("УдалениеОбъекта");
	одТипВидСчета			   = Тип("ВидСчета");
	одТипТип                   = Тип("Тип");
	одТипСоответствие          = Тип("Соответствие");
	
	ЗначениеПустаяДата		   = Дата('00010101');
	
	// Типы узлов xml
	одТипУзлаXML_КонецЭлемента  = ТипУзлаXML.КонецЭлемента;
	одТипУзлаXML_НачалоЭлемента = ТипУзлаXML.НачалоЭлемента;
	одТипУзлаXML_Текст          = ТипУзлаXML.Текст;
	
	Алгоритмы = Владелец.Алгоритмы;
	

КонецПроцедуры


Процедура Деструктор() Экспорт
	
	ОбщиеПроцедурыФункции = Неопределено;
	
КонецПроцедуры



// Дополнительно

Функция РежимЗагрузкиДанныхВИнформационнуюБазу() Экспорт
	
	Возврат Истина;
	
КонецФункции

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли