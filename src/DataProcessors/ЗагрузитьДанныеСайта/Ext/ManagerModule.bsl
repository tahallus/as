#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Читает данные с сайта и производит сопоставление
//
// Параметры
//	Параметры - Структура - Структура данных
//	ФоновоеЗаданиеАдресХранилища - Строка - адрес хранилища фонового задания
//	ОжидаетсяЗагрузка - Булево - признак предварительной загрузки
Процедура ПрочитатьДанныеСайта(Параметры, ФоновоеЗаданиеАдресХранилища = "", ОжидаетсяЗагрузка = Ложь) Экспорт
	
	Параметры.Вставить("ШагиЗагрузки", Новый Соответствие);
	Параметры.Вставить("ФоновоеЗаданиеАдресХранилища", ФоновоеЗаданиеАдресХранилища);
	Параметры.Вставить("ОписаниеОшибки", "");
	Параметры.Вставить("СтрокаЛогЗагрузкиССайта", "");
	Параметры.Вставить("РазмерПакета", РазмерПакетаЗагрузки());
	Параметры.Вставить("ПрочитаноПакетов", 0);
	ОписаниеОшибки = "";
	
	Если Параметры.ИспользоватьСопоставлениеПередЗагрузкой Тогда
		Параметры.СопоставлениеКатегорий.Очистить();
		Параметры.СопоставлениеСвойств.Очистить();
		Параметры.СопоставлениеТоваров.Очистить();
	КонецЕсли;;
	
	СтруктураКаталогов = Новый Структура;
	Если Параметры.ТипСайта = Перечисления.ПротоколыОбменаCMS.Битрикс Тогда
		ЗагрузитьXMLССайтаНаСервереБитрикс(Параметры, СтруктураКаталогов, ОписаниеОшибки);
	Иначе
		ЗагрузитьXMLССайтаНаСервереЮМИ(Параметры, СтруктураКаталогов, ОписаниеОшибки);
	КонецЕсли;
	Параметры.Вставить("СтруктураКаталогов", СтруктураКаталогов);
	
	Если ОписаниеОшибки<>"" Тогда
		Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		
		Параметры.Вставить("СопоставлениеКатегорий", ОбщегоНазначения.ТаблицаЗначенийВМассив(Параметры.СопоставлениеКатегорий));
		Параметры.Вставить("СопоставлениеСвойств", ОбщегоНазначения.ТаблицаЗначенийВМассив(Параметры.СопоставлениеСвойств));
		Параметры.Вставить("СопоставлениеТоваров", ОбщегоНазначения.ТаблицаЗначенийВМассив(Параметры.СопоставлениеТоваров)); 
		
		ПоместитьВоВременноеХранилище(Параметры, ФоновоеЗаданиеАдресХранилища);
		
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("СтруктураКаталогов", СтруктураКаталогов);
	Если СтруктураКаталогов.Количество()=0 Тогда
		ЗаписатьОшибку(Параметры, НСтр("ru = 'Не удалось получить данные с сайта'"));
		
		Параметры.Вставить("СопоставлениеКатегорий", ОбщегоНазначения.ТаблицаЗначенийВМассив(Параметры.СопоставлениеКатегорий));
		Параметры.Вставить("СопоставлениеСвойств", ОбщегоНазначения.ТаблицаЗначенийВМассив(Параметры.СопоставлениеСвойств));
		Параметры.Вставить("СопоставлениеТоваров", ОбщегоНазначения.ТаблицаЗначенийВМассив(Параметры.СопоставлениеТоваров)); 
		
		ПоместитьВоВременноеХранилище(Параметры, ФоновоеЗаданиеАдресХранилища);
		
		Возврат;
	КонецЕсли;
	
	СформироватьЛогЗагрузки(Параметры.ШагиЗагрузки, НСтр("ru = 'Прочитано объектов: '") + Параметры.ПрочитаноПакетов);
	
	ТипXDTO = ФабрикаXDTO.Тип("urn:1C.ru:commerceml_208", "CommerceML208");
	Классификатор = "";
	
	Группы		= Новый Соответствие;
	Свойства	= Новый Соответствие;
	Категории	= Новый Соответствие;
	Товары		= Новый Соответствие;
	КартинкиТоваров	= Новый Соответствие;
	КартинкиПредложений	= Новый Соответствие;
	ШтрихкодыТоваров= Новый Соответствие;
	Предложения = Новый Соответствие;
	ТипыЦен		= Новый Соответствие;
	КартинкиТоваровКоличество = 0;
	КартинкиПредложенийКоличество = 0;
	ПредложенияКоличество = 0;
	
	МассивИдентификаторовКатегорий = Новый Массив;
	
	Для каждого КаталогСайта Из СтруктураКаталогов Цикл
		
		СформироватьЛогЗагрузки(Параметры.ШагиЗагрузки, НСтр("ru = 'Загрузка :'") + КаталогСайта.Ключ);
		
		ПакетыДанных = КаталогСайта.Значение.ПакетыДанных;
		Для каждого пакетДанных Из ПакетыДанных Цикл
			
			ТекстПакета = ЗаменитьЗапрещенныеСимволы(пакетДанных.Значение);
			
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(ТекстПакета);
			
			ВесьФайл = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипXDTO);
			ЕстьКлассификатор = НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Классификатор", ВесьФайл);
			ЕстьКаталог = НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Каталог", ВесьФайл);
			
			ЕстьПакетПредложений = Ложь;
			Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("ПакетПредложений", ВесьФайл) Тогда
				Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Предложения", ВесьФайл.ПакетПредложений) Тогда
					Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Предложение", ВесьФайл.ПакетПредложений.Предложения) Тогда
						ЕстьПакетПредложений = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ЕстьКлассификатор Тогда
				Классификатор = ВесьФайл.Классификатор;
				
				ИмяСайта = "";
				Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Владелец", Классификатор) Тогда
					ИмяСайта = Классификатор.Владелец.Наименование;
				КонецЕсли;
				
				//Группы
				Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Группы", Классификатор) Тогда
					спГруппы = Классификатор.Группы;
					ПрочитатьКаталогиРекурсивно(спГруппы, Группы, 1);
				КонецЕсли;
				
				//Категории
				Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("ТипыТовара", Классификатор)
					И НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("ТипТовара", Классификатор.ТипыТовара) Тогда
					МассивКатегорийXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(Классификатор.ТипыТовара.ТипТовара);
					Для каждого КатегорияXDTO Из МассивКатегорийXDTO Цикл
						Категории.Вставить(КатегорияXDTO.Наименование);
						
						Если Параметры.ИспользоватьСопоставлениеПередЗагрузкой Тогда
							СтрокаСопоставлениеКатегорий = Параметры.СопоставлениеКатегорий.Добавить();
							СтрокаСопоставлениеКатегорий.Наименование = КатегорияXDTO.Наименование;
							СтрокаСопоставлениеКатегорий.Ид = КатегорияXDTO.Ид;
							СтрокаСопоставлениеКатегорий.СистемныйИд = КатегорияXDTO.СистемныйИд;
							СтрокаСопоставлениеКатегорий.КлассификаторИд = Классификатор.Ид;
							СтрокаСопоставлениеКатегорий.Загружать = Истина;
							
							МассивИдентификаторовКатегорий.Добавить(КатегорияXDTO.Ид);
							
						КонецЕсли;
						
					КонецЦикла;
				Иначе
					Категории.Вставить(Классификатор.Наименование);
					
					Если Параметры.ИспользоватьСопоставлениеПередЗагрузкой Тогда
						СтрокаСопоставлениеКатегорий = Параметры.СопоставлениеКатегорий.Добавить();
						СтрокаСопоставлениеКатегорий.Наименование = Классификатор.Наименование;
						СтрокаСопоставлениеКатегорий.Ид = Классификатор.Ид;
						Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("СистемныйИд", Классификатор) Тогда
							СтрокаСопоставлениеКатегорий.СистемныйИд = Классификатор.СистемныйИд;
						КонецЕсли;
						СтрокаСопоставлениеКатегорий.КлассификаторИд = Классификатор.Ид;
						СтрокаСопоставлениеКатегорий.Загружать = Истина;
						
						МассивИдентификаторовКатегорий.Добавить(Классификатор.Ид);
						
					КонецЕсли;
				КонецЕсли;
				
				//Свойства
				Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Свойства", Классификатор)
					И НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Свойство", Классификатор.Свойства) Тогда
					спСвойства = Классификатор.Свойства.Свойство;
					МассивСвойствXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(Классификатор.Свойства.Свойство);
					Для каждого СвойствоXDTO Из МассивСвойствXDTO Цикл
						Свойства.Вставить(СвойствоXDTO.Наименование);
						
						СвойствоXDTOТипТовара = ?(НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("ТипТовара", СвойствоXDTO),СвойствоXDTO.ТипТовара,Классификатор.Ид);
						
						Если Параметры.ИспользоватьСопоставлениеПередЗагрузкой И МассивИдентификаторовКатегорий.Найти(СвойствоXDTOТипТовара) <> Неопределено
							И НЕ(НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Общее", СвойствоXDTO)
							И (СвойствоXDTO.Общее = Истина Или НРег(СвойствоXDTO.Общее) = "истина" Или НРег(СвойствоXDTO.Общее) = "true")) Тогда
							СтрокаСопоставлениеСвойств = Параметры.СопоставлениеСвойств.Добавить();
							СтрокаСопоставлениеСвойств.Наименование = СвойствоXDTO.Наименование;
							СтрокаСопоставлениеСвойств.Ид = СвойствоXDTO.Ид;
							
							Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("СистемныйИд", СвойствоXDTO) Тогда
								СтрокаСопоставлениеСвойств.СистемныйИд = СвойствоXDTO.СистемныйИд;
							КонецЕсли;
							
							СтрокаСопоставлениеСвойств.КлассификаторИд = Классификатор.Ид;
							
							Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("ТипТовара", СвойствоXDTO) Тогда
								СтрокаСопоставлениеСвойств.ТипТовара = СвойствоXDTO.ТипТовара;
							Иначе
								СтрокаСопоставлениеСвойств.ТипТовара = Классификатор.Ид;
							КонецЕсли;
							
							СтрокаСопоставлениеСвойств.Загружать = Истина;
							
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли; 
			
			//Товары
			Если ЕстьКаталог И НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Товар", ВесьФайл.Каталог.Товары) Тогда
				
				МассивТоваровXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(ВесьФайл.Каталог.Товары.Товар);
				Для каждого ТоварXDTO Из МассивТоваровXDTO Цикл
					Товары.Вставить(ТоварXDTO.Наименование);
					
					Если Параметры.ИспользоватьСопоставлениеПередЗагрузкой Тогда
						СтрокаСопоставлениеТоваров = Параметры.СопоставлениеТоваров.Добавить();
						СтрокаСопоставлениеТоваров.Наименование = ТоварXDTO.Наименование;
						
						Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Артикул", ТоварXDTO) Тогда
							СтрокаСопоставлениеТоваров.Артикул = ТоварXDTO.Артикул;
						КонецЕсли;
						
						СтрокаСопоставлениеТоваров.Ид = ТоварXDTO.Ид;
						
						Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("СистемныйИд", ТоварXDTO) Тогда
							СтрокаСопоставлениеТоваров.СистемныйИд = ТоварXDTO.СистемныйИд;
						КонецЕсли;
						
						Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("ТипТовара", ТоварXDTO) Тогда
							СтрокаСопоставлениеТоваров.ТипТовара = ТоварXDTO.ТипТовара;
						Иначе
							СтрокаСопоставлениеТоваров.ТипТовара = Классификатор.Ид;
						КонецЕсли;
						
						СтрокаСопоставлениеТоваров.КлассификаторИд = Классификатор.Ид;
						СтрокаСопоставлениеТоваров.Загружать = Истина;
						Если СтрокаСопоставлениеТоваров.Артикул = "ОбъектXDTO" Тогда
							СтрокаСопоставлениеТоваров.Артикул = "";
						КонецЕсли;
					КонецЕсли;
					
					// Картинки товаров
					Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Картинка", ТоварXDTO) 
						И ТипЗнч(ТоварXDTO.Картинка)<>Тип("ОбъектXDTO") Тогда
						
						Если ТипЗнч(ТоварXDTO.Картинка)=Тип("Строка") Тогда
							КартинкиТоваровКоличество = КартинкиТоваровКоличество + 1;
						ИначеЕсли ТипЗнч(ТоварXDTO.Картинка)=Тип("СписокXDTO") Тогда
							КартинкиТоваровКоличество = КартинкиТоваровКоличество + ТоварXDTO.Картинка.Количество();
						КонецЕсли;
						КартинкиТоваров.Вставить(ТоварXDTO.Наименование);
					КонецЕсли;
					
					Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Штрихкод", ТоварXDTO) 
						И ОбменССайтом.СвойствоXDTOЗаполнено(ТоварXDTO.Штрихкод) Тогда
						ШтрихкодыТоваров.Вставить(ТоварXDTO.Штрихкод);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ЕстьПакетПредложений Тогда
				// Товарные предложения
				МассивТоварныхПредложенийXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(ВесьФайл.ПакетПредложений.Предложения.Предложение);
				ПредложенияКоличество = ПредложенияКоличество + МассивТоварныхПредложенийXDTO.Количество();
				Для каждого ТоварноеПредложениеXDTO Из МассивТоварныхПредложенийXDTO Цикл
					Предложения.Вставить(ТоварноеПредложениеXDTO.Наименование);
					// Картинки предложений
					Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Картинка", ТоварноеПредложениеXDTO) 
						И ТипЗнч(ТоварноеПредложениеXDTO.Картинка)<>Тип("ОбъектXDTO") Тогда
						
						Если ТипЗнч(ТоварноеПредложениеXDTO.Картинка)=Тип("Строка") Тогда
							КартинкиПредложенийКоличество = КартинкиПредложенийКоличество + 1;
						ИначеЕсли ТипЗнч(ТоварноеПредложениеXDTO.Картинка)=Тип("СписокXDTO") Тогда
							КартинкиПредложенийКоличество = КартинкиПредложенийКоличество + ТоварноеПредложениеXDTO.Картинка.Количество();
						КонецЕсли;
						КартинкиПредложений.Вставить(ТоварноеПредложениеXDTO.Наименование);
					КонецЕсли;
				КонецЦикла;
				МассивТиповЦенXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(ВесьФайл.ПакетПредложений.ТипыЦен.ТипЦены);
				Для каждого ТипЦенXDTO Из МассивТиповЦенXDTO Цикл
					ТипыЦен.Вставить(ТипЦенXDTO.Наименование);
				КонецЦикла;
			КонецЕсли;
			
			ПрогрессОбработки = Цел((1+ПакетыДанных.Индекс(пакетДанных)) / ПакетыДанных.Количество() * 100);
			СформироватьЛогЗагрузки(Параметры.ШагиЗагрузки, НСтр("ru = 'Обработано объектов: '")+ПрогрессОбработки+"%", ПрогрессОбработки);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Параметры.ШагиЗагрузки.Вставить(3, НСтр("ru = 'Обработано объектов: 100%'"));
	СформироватьЛогЗагрузки(Параметры.ШагиЗагрузки);
	
	ДобавитьСтрокуЛогаПодробно(Параметры, ИмяСайта);
	ДобавитьСтрокуЛогаПодробно(Параметры, "");
	
	ДобавитьСтрокуЛогаПодробно(Параметры, Классификатор.Наименование);
	ДобавитьСтрокуЛогаПодробно(Параметры, НСтр("ru = 'Иерархия товаров: '")+Группы.Количество());
	ДобавитьСтрокуЛогаПодробно(Параметры, НСтр("ru = 'Категории товаров: '")+Категории.Количество());
	ДобавитьСтрокуЛогаПодробно(Параметры, НСтр("ru = 'Товаров: '")+Товары.Количество());
	ДобавитьСтрокуЛогаПодробно(Параметры, НСтр("ru = 'Свойств товаров: '")+Свойства.Количество());
	ДобавитьСтрокуЛогаПодробно(Параметры, НСтр("ru = 'Картинок товаров: '")+КартинкиТоваровКоличество);
	ДобавитьСтрокуЛогаПодробно(Параметры, НСтр("ru = 'Штрихкодов товаров : '")+ШтрихкодыТоваров.Количество());
	ДобавитьСтрокуЛогаПодробно(Параметры, НСтр("ru = 'Типов цен : '")+ТипыЦен.Количество());
	ДобавитьСтрокуЛогаПодробно(Параметры, НСтр("ru = 'Товарных предложений : '")+ПредложенияКоличество);
	ДобавитьСтрокуЛогаПодробно(Параметры, НСтр("ru = 'Картинок предложений: '")+КартинкиПредложенийКоличество);
	
	Параметры.Вставить("СтрокаЛогЗагрузкиССайта", "");
	ДобавитьСтрокуЛога(Параметры, Классификатор.Наименование);
	ДобавитьСтрокуЛога(Параметры, НСтр("ru = 'Товаров: '")+Товары.Количество());
	Если ТипыЦен.Количество()>0 Тогда
		Для каждого ТипЦен Из ТипыЦен Цикл
			ПервыйТипЦен = ТипЦен.Ключ;
		КонецЦикла;
		ДобавитьСтрокуЛога(Параметры, НСтр("ru = 'Тип цен: '")+ПервыйТипЦен);
	КонецЕсли;
	ДобавитьСтрокуЛога(Параметры, НСтр("ru = 'Товарных предложений : '")+ПредложенияКоличество);
	ДобавитьСтрокуЛога(Параметры, НСтр("ru = 'Иерархия товаров: '")+Группы.Количество());
	ДобавитьСтрокуЛога(Параметры, НСтр("ru = 'Категории товаров: '")+Категории.Количество());
	ДобавитьСтрокуЛога(Параметры, НСтр("ru = 'Свойств товаров: '")+Свойства.Количество());
	ВсегоКартинок = КартинкиТоваровКоличество+КартинкиПредложенийКоличество;
	ДобавитьСтрокуЛога(Параметры, НСтр("ru = 'Картинок товаров и предложений: '")+ВсегоКартинок);
	
	СписокГруппУпорядоченный = Новый СписокЗначений;
	Для каждого стрГруппы Из Группы Цикл
		СписокГруппУпорядоченный.Добавить(стрГруппы.Ключ, стрГруппы.Значение);
	КонецЦикла;
	СписокГруппУпорядоченный.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
	ДобавитьБлокЛогов(Параметры, НСтр("ru = 'Иерархия товаров:'"), СписокГруппУпорядоченный, "Значение");	
	ДобавитьБлокЛогов(Параметры, НСтр("ru = 'Категории товаров:'"), Категории);
	ДобавитьБлокЛогов(Параметры, НСтр("ru = 'Товары:'"), Товары);
	ДобавитьБлокЛогов(Параметры, НСтр("ru = 'Картинки товаров:'"), КартинкиТоваров);
	ДобавитьБлокЛогов(Параметры, НСтр("ru = 'Свойства товаров:'"), Свойства);
	ДобавитьБлокЛогов(Параметры, НСтр("ru = 'Типы цен:'"), ТипыЦен);
	ДобавитьБлокЛогов(Параметры, НСтр("ru = 'Товарные предложения:'"), Предложения);
	ДобавитьБлокЛогов(Параметры, НСтр("ru = 'Картинки предложений:'"), КартинкиПредложений);
	
	Если КартинкиТоваров.Количество()>0 ИЛИ КартинкиПредложений.Количество()>0 Тогда
		Параметры.Вставить("ЕстьКартинки", Истина);
	Иначе
		Параметры.Вставить("ЕстьКартинки", Ложь);
	КонецЕсли;
	
	Если ОписаниеОшибки<>"" Тогда
		Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	КонецЕсли; 
	
	Если Параметры.ИспользоватьСопоставлениеПередЗагрузкой Тогда
		
		СопоставитьДанныеСайта(Параметры);
		
	КонецЕсли;
	
	Если НЕ ОжидаетсяЗагрузка Тогда
		Параметры.Вставить("СопоставлениеКатегорий", ОбщегоНазначения.ТаблицаЗначенийВМассив(Параметры.СопоставлениеКатегорий));
		Параметры.Вставить("СопоставлениеСвойств", ОбщегоНазначения.ТаблицаЗначенийВМассив(Параметры.СопоставлениеСвойств));
		Параметры.Вставить("СопоставлениеТоваров", ОбщегоНазначения.ТаблицаЗначенийВМассив(Параметры.СопоставлениеТоваров));
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Параметры, ФоновоеЗаданиеАдресХранилища);
	
КонецПроцедуры

// Читает данные с сайта, производит сопоставление и загружает в базу.
//
// Параметры
//	Параметры - Структура - Структура данных
//	ФоновоеЗаданиеАдресХранилища - Строка - адрес хранилища фонового задания
Процедура ПрочитатьИЗагрузитьДанные(Параметры, ФоновоеЗаданиеАдресХранилища = "") Экспорт
	
	ПрочитатьДанныеСайта(Параметры, ФоновоеЗаданиеАдресХранилища , Истина);
	
	Если Параметры.ОписаниеОшибки="" Тогда
		ЗагрузитьДанные(Параметры, ФоновоеЗаданиеАдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

// Загружает данные с сайта в базу.
//
// Параметры
//	Параметры - Структура - Структура данных
//	ФоновоеЗаданиеАдресХранилища - Строка - адрес хранилища фонового задания
Процедура ЗагрузитьДанные(Параметры, ФоновоеЗаданиеАдресХранилища = "") Экспорт
	
	ОписаниеОшибки = "";
	ПакетыДанныхСписок = Новый СписокЗначений;
	Параметры.Вставить("ШагиЗагрузки", Новый Соответствие);	
	
	СформироватьЛогЗагрузки(Параметры.ШагиЗагрузки, НСтр("ru = 'Настройка программы ...'"));
	
	//Сайт
	ИмяСайта = СтрЗаменить(Параметры.АдресСайта, "Сайт ", "");
	ИмяСайта = СтрЗаменить(ИмяСайта, "https://", "");
	ИмяСайта = СтрЗаменить(ИмяСайта, "http://", "");
	ИмяСайта = СтрЗаменить(ИмяСайта, "/", "");
	ИмяСайта = СтрЗаменить(ИмяСайта, " ", "");
	
	ДопРеквизиты = Новый Структура;
	ДопРеквизиты.Вставить("ПарольСайта", Параметры.Пароль);
	ДопРеквизиты.Вставить("ТипСайта", 4);
	ДопРеквизиты.Вставить("СайтСоздан", Истина);
	Если Параметры.ТипСайта = Перечисления.ПротоколыОбменаCMS.Битрикс Тогда
		ДопРеквизиты.Вставить("URLАдминЗоны", "http://"+ИмяСайта+"/bitrix/admin/index.php");
	ИначеЕсли Параметры.ТипСайта = Перечисления.ПротоколыОбменаCMS.UMI Тогда
		ДопРеквизиты.Вставить("URLАдминЗоны", URLАдминзоны(Параметры, ИмяСайта, ОписаниеОшибки));
	КонецЕсли;
	
	// Установим нужные ФО для работы с сайтом, запишем данные сайта
	СтруктураСайта = Новый Структура("АдресСайта, Организация, ТипСайта", ИмяСайта, Параметры.ОсновнаяОрганизация, 4);
	Об = СоздатьИлиНайтиСуществующий(СтруктураСайта, РегистрыСведений.ДанныеСайта, ДопРеквизиты);
	Константы.ФункциональнаяОпцияИспользоватьОбменССайтами.Установить(Истина);
	Константы.СайтСоздан.Установить(Истина);
	
	// Создаем узел обмена
	УзелОбмена = Неопределено;
	Параметры.Свойство("УзелОбмена", УзелОбмена);
	Если Не ЗначениеЗаполнено(УзелОбмена) Тогда
		УзелОбмена = СоздатьУзелОбмена(Параметры, ИмяСайта, ОписаниеОшибки);
		Параметры.Вставить("УзелОбмена", УзелОбмена);
	КонецЕсли;
	
	Если Параметры.СоздатьКаталогТоваров Тогда
		СтруктураОтбора = Новый Структура("Наименование, ЭтоГруппа", ИмяСайта, Истина);
		СсылкаРодительскийКаталог = СоздатьИлиНайтиСуществующий(СтруктураОтбора, Справочники.Номенклатура);
		Параметры.Вставить("КаталогЗагруженныхТоваров",СсылкаРодительскийКаталог);
	КонецЕсли;
	
	// Соединение для загрузки картинок
	Если Параметры.ЗагружатьКартинки Тогда
		АдресСайтаДляПодключения = Параметры.АдресСайта;
		Если СтрНайти(АдресСайтаДляПодключения, "http")=0 Тогда
			АдресСайтаДляПодключения = "http://"+АдресСайтаДляПодключения;
		КонецЕсли;
		Если Параметры.ТипСайта = Перечисления.ПротоколыОбменаCMS.Битрикс Тогда
			СтрокаСоединения = АдресСайтаДляПодключения+"/bitrix/admin/1c_exchange.php";	
		Иначе
			СтрокаСоединения = АдресСайтаДляПодключения+"/admin/exchange/autoimport/";
		КонецЕсли;
		Параметры.Вставить("АдресСайтаДляПодключения", СтрокаСоединения);
		
		Соединение = УстановитьСоединениеССервером(Параметры);
		
		Если Параметры.ТипСайта = Перечисления.ПротоколыОбменаCMS.Битрикс Тогда
			СтрокаСоединения = Параметры.АдресСайта + "/bitrix/admin/1c_exchange.php?type=get_catalog&mode=checkauth";
			АдресЗапроса = ОбщегоНазначенияКлиентСервер.СтруктураURI(СтрокаСоединения);
			ЗапросHTTP = Новый HTTPЗапрос(АдресЗапроса.ПутьНаСервере);
			ЗапросHTTP.Заголовки["Cache-Control"]	= "no-cache";
			ЗапросHTTP.Заголовки["Content-type"]	= "text/html; charset=UTF-8";
			ОтветHTTP = Соединение.Получить(ЗапросHTTP);
			ДанныеСтрока = ОтветHTTP.ПолучитьТелоКакСтроку();
			
			КукиИмя			= СтрПолучитьСтроку(ДанныеСтрока, 2);
			КукиЗначение	= СтрПолучитьСтроку(ДанныеСтрока, 3);
			ЗаголовокКуки	= КукиИмя + "=" + КукиЗначение;
			
			Параметры.Вставить("ЗаголовокКукиСоединения", ЗаголовокКуки);
		Иначе
			Параметры.Вставить("ЗаголовокКукиСоединения", "");
		КонецЕсли;
		
	Иначе	
		Соединение = Неопределено;
	КонецЕсли;
	
	ПорядковыйНомерКаталога = 1;
	
	Для каждого КаталогСайта Из Параметры.СтруктураКаталогов Цикл
		КаталогСайта.Значение.Вставить("ПорядковыйНомерКаталога", ПорядковыйНомерКаталога);
		КаталогСайта.Значение.Вставить("ГруппыВерхнегоУровня", Новый Соответствие);
		
		ПакетыДанных = КаталогСайта.Значение.ПакетыДанных;
		// Загрузка данных в пакетах
		Для каждого пакетДанных Из ПакетыДанных Цикл
			
			ЗагрузитьПакет(пакетДанных, Соединение, Параметры, КаталогСайта, ОписаниеОшибки);
			
		КонецЦикла;
		
		Параметры.ШагиЗагрузки.Вставить(ПорядковыйНомерКаталога, КаталогСайта.Значение.Наименование + НСтр("ru = ' загружен'"));
		
		ПорядковыйНомерКаталога = ПорядковыйНомерКаталога+1;
	КонецЦикла;
	
	Параметры.ШагиЗагрузки.Вставить(ПорядковыйНомерКаталога, НСтр("ru = 'Загружено: 100%'"));
	СформироватьЛогЗагрузки(Параметры.ШагиЗагрузки, НСтр("ru = 'Загружено: 100%'"));
	
	// Установим вид цен и список каталогов из загруженных данных
	ОбновитьСписокКаталоговДляВыгрузкиИВидовЦенУзлаОбмена(Параметры);
	
	// Если загружены цены в нескольких валютах
	УстановитьУчетВалютныхОпераций();
	
	Если ОписаниеОшибки="" Тогда
		Параметры.Вставить("ДанныеУспешноЗагружены", Истина);
	Иначе
		Параметры.Вставить("ДанныеУспешноЗагружены", Ложь);
		Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	КонецЕсли;
	
	Если Параметры.ИспользоватьСопоставлениеПередЗагрузкой Тогда
		
		СопоставитьДанныеСайта(Параметры);
		
	КонецЕсли;
	
	Параметры.Вставить("СопоставлениеКатегорий", ОбщегоНазначения.ТаблицаЗначенийВМассив(Параметры.СопоставлениеКатегорий));
	Параметры.Вставить("СопоставлениеСвойств", ОбщегоНазначения.ТаблицаЗначенийВМассив(Параметры.СопоставлениеСвойств));
	Параметры.Вставить("СопоставлениеТоваров", ОбщегоНазначения.ТаблицаЗначенийВМассив(Параметры.СопоставлениеТоваров));
	
	ПоместитьВоВременноеХранилище(Параметры, ФоновоеЗаданиеАдресХранилища);
	
КонецПроцедуры

// Создает новый узел обмена или находит уже существующий.
//
// Параметры
//	Параметры - Структура - Структура данных
//	ИмяСайта - Строка -  Имя сайта для обмена
//	ОписаниеОшибки - Строка - Описание ошибок
// Возвращаемое значение:
//	ПланОбменаСсылка.ОбменУправлениеНебольшойФирмойСайт - Ссылка на узел обмена
Функция СоздатьУзелОбмена(Параметры, ИмяСайта, ОписаниеОшибки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОбменУправлениеНебольшойФирмойСайт.Ссылка КАК ПланОбмена
	|ИЗ
	|	ПланОбмена.ОбменУправлениеНебольшойФирмойСайт КАК ОбменУправлениеНебольшойФирмойСайт
	|ГДЕ
	|	ОбменУправлениеНебольшойФирмойСайт.ИмяПользователя = &ИмяПользователя
	|	И ОбменУправлениеНебольшойФирмойСайт.АдресСайта ПОДОБНО &АдресСайта";
	
	Запрос.УстановитьПараметр("ИмяПользователя", Параметры.ИмяПользователя);
	Запрос.УстановитьПараметр("АдресСайта", "%"+ИмяСайта+"%");
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ПланОбменаСайт = ПланыОбмена.ОбменУправлениеНебольшойФирмойСайт.СоздатьУзел();
		ПланОбменаСайт.УстановитьНовыйКод();	
	Иначе
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ПланОбменаСайт = Выборка.ПланОбмена.ПолучитьОбъект();
		КонецЦикла;
	КонецЕсли;
	
	АдресСодержитHTTP = СтрНайти(ИмяСайта, "http")>0;
	Если Прав(ИмяСайта,1) = "/" Тогда
		ИмяСайта = Сред(ИмяСайта, 1, СтрДлина(ИмяСайта)-1);
	КонецЕсли;
	
	Если Параметры.ТипСайта=Перечисления.ПротоколыОбменаCMS.Битрикс Тогда
		ПланОбменаСайт.АдресСайта = ?(АдресСодержитHTTP, "", "https://") + ИмяСайта+"/bitrix/admin/1c_exchange.php";
		ПланОбменаСайт.ПротоколОбменаCMS = Перечисления.ПротоколыОбменаCMS.Битрикс;
	Иначе
		ПланОбменаСайт.АдресСайта = ?(АдресСодержитHTTP, "", "https://") + ИмяСайта+"/admin/exchange/autoimport/";
		ПланОбменаСайт.ПротоколОбменаCMS = Перечисления.ПротоколыОбменаCMS.UMI;
	КонецЕсли;
	
	ПланОбменаСайт.ВыгружатьКартинки			= Истина;
	ПланОбменаСайт.ВыгружатьНаСайт				= Истина;
	ПланОбменаСайт.ВыгружатьОстаткиПоСкладам	= Ложь;
	ПланОбменаСайт.ИмяПользователя				= Параметры.ИмяПользователя;
	ПланОбменаСайт.Наименование					= НСтр("ru = 'Обмен товарами и заказами с '") + ИмяСайта;
	ПланОбменаСайт.ОбменЗаказами				= Истина;
	ПланОбменаСайт.ОбменТоварами				= Истина;
	ПланОбменаСайт.ОрганизацияДляПодстановкиВЗаказы = Параметры.ОсновнаяОрганизация;
	ПланОбменаСайт.СпособИдентификацииКонтрагентов = Перечисления.СпособыИдентификацииКонтрагентов.СоздаватьИскатьПоТелефонуEmail;
	ПланОбменаСайт.ВыполнятьПолнуюВыгрузкуПринудительно = ПланОбменаСайт.ЭтоНовый();
	ПланОбменаСайт.ОтборГруппыКатегорииНоменклатуры = Перечисления.ВидыОтборовНоменклатуры.ГруппыНоменклатуры;
	
	// Виды цен и каталоги выгрузки в узел обмена добавляем после чтения пакетов данных 
	
	Попытка
		
		ПланОбменаСайт.Записать();
		
		Если Параметры.Пароль<>"" Тогда
			УстановитьПривилегированныйРежим(Истина);
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ПланОбменаСайт.Ссылка, Параметры.Пароль);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
		Возврат ПланОбменаСайт.Ссылка;
		
	Исключение
		ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область ПредварительнаяЗагрузка

Процедура ПрочитатьКаталогиРекурсивно(спГруппы, СоответствиеГрупп, НомерПоПорядку)
	
	ГруппаXDTO = спГруппы.Группа;
	
	Если ТипЗнч(ГруппаXDTO) = Тип("ОбъектXDTO") Тогда
		
		СоответствиеГрупп.Вставить(ГруппаXDTO.Наименование, НомерПоПорядку);
		НомерПоПорядку = НомерПоПорядку+1;
		
		// Вложенные группы
		Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Группы", ГруппаXDTO) 
			И НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Группа", ГруппаXDTO.Группы) Тогда
			
			ПрочитатьКаталогиРекурсивно(ГруппаXDTO.Группы, СоответствиеГрупп, НомерПоПорядку);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ГруппаXDTO) = Тип("СписокXDTO") Тогда
		
		Для н=0 По ГруппаXDTO.Количество()-1 Цикл
			
			группаСписка = ГруппаXDTO[н];
			
			СоответствиеГрупп.Вставить(группаСписка.Наименование, НомерПоПорядку);
			НомерПоПорядку = НомерПоПорядку+1;
			
			// Вложенные группы
			Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Группы", ГруппаXDTO) Тогда
				ПрочитатьКаталогиРекурсивно(ГруппаXDTO.Группы, СоответствиеГрупп, НомерПоПорядку);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

Функция ЗаменитьЗапрещенныеСимволы(пакетДанных)
	
	// Https://ru.wikipedia.org/wiki/ASCII
	// Заменяем управляющие символы в пакете обмена. Как выяснилось, у клиентов такие встречаются в полях данных
	Для н=1 По 27 Цикл
		пакетДанных = СтрЗаменить(пакетДанных, Символ(н), "");
	КонецЦикла;
	пакетДанных = СтрЗаменить(пакетДанных, "&nbsp;", " ");
	
	Возврат пакетДанных;
	
КонецФункции

Процедура СопоставитьДанныеСайта(Параметры)
	
	Параметры.СопоставлениеКатегорий.Свернуть("Категория,Наименование,Ид,СистемныйИд,КлассификаторИд,Загружать");
	Параметры.СопоставлениеСвойств.Свернуть("Свойство,Наименование,Ид,СистемныйИд,КлассификаторИд,Загружать,Общее,ТипТовара");
	Параметры.СопоставлениеТоваров.Свернуть("Номенклатура,Наименование,Ид,СистемныйИд,КлассификаторИд,Загружать,ТипТовара,Артикул");
	
	Параметры.СопоставлениеКатегорий.Сортировать("Ид,Наименование");
	Параметры.СопоставлениеСвойств.Сортировать("ТипТовара,Наименование");
	Параметры.СопоставлениеТоваров.Сортировать("ТипТовара,Наименование");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СопоставлениеКатегорий.Наименование КАК Наименование,
	|	СопоставлениеКатегорий.Ид КАК Ид,
	|	СопоставлениеКатегорий.КлассификаторИд КАК КлассификаторИд
	|ПОМЕСТИТЬ ВТ_СопоставлениеКатегорий
	|ИЗ
	|	&СопоставлениеКатегорий КАК СопоставлениеКатегорий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СопоставлениеТоваров.Наименование КАК Наименование,
	|	СопоставлениеТоваров.Артикул КАК Артикул,
	|	СопоставлениеТоваров.Ид КАК Ид,
	|	СопоставлениеТоваров.КлассификаторИд КАК КлассификаторИд
	|ПОМЕСТИТЬ ВТ_СопоставлениеТоваров
	|ИЗ
	|	&СопоставлениеТоваров КАК СопоставлениеТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СопоставлениеСвойств.Наименование КАК Наименование,
	|	СопоставлениеСвойств.Ид КАК Ид,
	|	СопоставлениеСвойств.КлассификаторИд КАК КлассификаторИд,
	|	СопоставлениеСвойств.Общее КАК Общее
	|ПОМЕСТИТЬ ВТ_СопоставлениеСвойств
	|ИЗ
	|	&СопоставлениеСвойств КАК СопоставлениеСвойств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствияОбъектовСайта.УникальныйИдентификаторИнформационнойБазы КАК Ид,
	|	СоответствияОбъектовСайта.СсылкаНаОбъект КАК Ссылка
	|ПОМЕСТИТЬ ВТ_КатегорияСопоставленнаяРаннее
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовСайта КАК СоответствияОбъектовСайта
	|ГДЕ
	|	СоответствияОбъектовСайта.УзелИнформационнойБазы = &УзелОбмена
	|	И СоответствияОбъектовСайта.ТипОбъекта = ""Справочник.КатегорииНоменклатуры""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствияОбъектовСайта.УникальныйИдентификаторИнформационнойБазы КАК Ид,
	|	СоответствияОбъектовСайта.СсылкаНаОбъект КАК Ссылка
	|ПОМЕСТИТЬ ВТ_НоменклатураСопоставленнаяРаннее
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовСайта КАК СоответствияОбъектовСайта
	|ГДЕ
	|	СоответствияОбъектовСайта.УзелИнформационнойБазы = &УзелОбмена
	|	И СоответствияОбъектовСайта.ТипОбъекта = ""Справочник.Номенклатура""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствияОбъектовСайта.УникальныйИдентификаторИнформационнойБазы КАК Ид,
	|	СоответствияОбъектовСайта.СсылкаНаОбъект КАК Ссылка
	|ПОМЕСТИТЬ ВТ_СвойствоСопоставленноеРаннее
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовСайта КАК СоответствияОбъектовСайта
	|ГДЕ
	|	СоответствияОбъектовСайта.УзелИнформационнойБазы = &УзелОбмена
	|	И СоответствияОбъектовСайта.ТипОбъекта = ""ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СопоставлениеТоваров.Наименование КАК Наименование,
	|	ВТ_СопоставлениеТоваров.Артикул КАК Артикул,
	|	ВТ_НоменклатураСопоставленнаяРаннее.Ссылка КАК Ссылка,
	|	0 КАК Сортировка,
	|	ВТ_СопоставлениеТоваров.Ид КАК Ид,
	|	ВТ_СопоставлениеТоваров.КлассификаторИд КАК КлассификаторИд
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	ВТ_СопоставлениеТоваров КАК ВТ_СопоставлениеТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НоменклатураСопоставленнаяРаннее КАК ВТ_НоменклатураСопоставленнаяРаннее
	|		ПО ВТ_СопоставлениеТоваров.Ид = ВТ_НоменклатураСопоставленнаяРаннее.Ид
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_СопоставлениеТоваров.Наименование,
	|	ВТ_СопоставлениеТоваров.Артикул,
	|	Номенклатура.Ссылка,
	|	1,
	|	ВТ_СопоставлениеТоваров.Ид,
	|	ВТ_СопоставлениеТоваров.КлассификаторИд
	|ИЗ
	|	ВТ_СопоставлениеТоваров КАК ВТ_СопоставлениеТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ВТ_СопоставлениеТоваров.Артикул = Номенклатура.Артикул
	|ГДЕ
	|	ВТ_СопоставлениеТоваров.Артикул <> """"
	|	И НЕ Номенклатура.ПометкаУдаления
	|			И НЕ Номенклатура.ЭтоГруппа
	|	И НЕ ВТ_СопоставлениеТоваров.Ид В
	|				(ВЫБРАТЬ
	|					ВТ_НоменклатураСопоставленнаяРаннее.Ид КАК Ид
	|				ИЗ
	|					ВТ_НоменклатураСопоставленнаяРаннее КАК ВТ_НоменклатураСопоставленнаяРаннее)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_СопоставлениеТоваров.Наименование,
	|	ВТ_СопоставлениеТоваров.Артикул,
	|	Номенклатура.Ссылка,
	|	2,
	|	ВТ_СопоставлениеТоваров.Ид,
	|	ВТ_СопоставлениеТоваров.КлассификаторИд
	|ИЗ
	|	ВТ_СопоставлениеТоваров КАК ВТ_СопоставлениеТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ВТ_СопоставлениеТоваров.Наименование = Номенклатура.Наименование
	|ГДЕ
	|	ВТ_СопоставлениеТоваров.Артикул = """"
	|	И ВТ_СопоставлениеТоваров.Наименование <> """"
	|	И НЕ Номенклатура.ПометкаУдаления
	|			И НЕ Номенклатура.ЭтоГруппа
	|	И НЕ ВТ_СопоставлениеТоваров.Ид В
	|				(ВЫБРАТЬ
	|					ВТ_НоменклатураСопоставленнаяРаннее.Ид КАК Ид
	|				ИЗ
	|					ВТ_НоменклатураСопоставленнаяРаннее КАК ВТ_НоменклатураСопоставленнаяРаннее)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СопоставлениеКатегорий.Наименование КАК Наименование,
	|	ВТ_СопоставлениеКатегорий.Ид КАК Ид,
	|	КатегорииНоменклатуры.Ссылка КАК Ссылка,
	|	ВТ_СопоставлениеКатегорий.КлассификаторИд КАК КлассификаторИд
	|ИЗ
	|	ВТ_СопоставлениеКатегорий КАК ВТ_СопоставлениеКатегорий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КатегорииНоменклатуры КАК КатегорииНоменклатуры
	|		ПО ВТ_СопоставлениеКатегорий.Наименование = КатегорииНоменклатуры.Наименование
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ИскатьКатегорииПоРодителю = ИСТИНА
	|				ТОГДА КатегорииНоменклатуры.Родитель = &КаталогЗагруженныхТоваров
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ КатегорииНоменклатуры.ПометкаУдаления
	|	И НЕ ВТ_СопоставлениеКатегорий.Ид В
	|				(ВЫБРАТЬ
	|					ВТ_КатегорияСопоставленнаяРаннее.Ид КАК Ид
	|				ИЗ
	|					ВТ_КатегорияСопоставленнаяРаннее КАК ВТ_КатегорияСопоставленнаяРаннее)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_СопоставлениеКатегорий.Наименование,
	|	ВТ_СопоставлениеКатегорий.Ид,
	|	ВТ_КатегорияСопоставленнаяРаннее.Ссылка,
	|	ВТ_СопоставлениеКатегорий.КлассификаторИд
	|ИЗ
	|	ВТ_СопоставлениеКатегорий КАК ВТ_СопоставлениеКатегорий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КатегорияСопоставленнаяРаннее КАК ВТ_КатегорияСопоставленнаяРаннее
	|		ПО ВТ_СопоставлениеКатегорий.Ид = ВТ_КатегорияСопоставленнаяРаннее.Ид
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Номенклатура.Ссылка КАК Ссылка,
	|	МИНИМУМ(ВТ_Номенклатура.Сортировка) КАК Сортировка,
	|	ВЫРАЗИТЬ(ВТ_Номенклатура.КлассификаторИд + ВТ_Номенклатура.Ид КАК СТРОКА(1000)) КАК КлассификаторИдТоварИд,
	|	ВТ_Номенклатура.Ид КАК Ид,
	|	ВТ_Номенклатура.КлассификаторИд КАК КлассификаторИд
	|ИЗ
	|	ВТ_Номенклатура КАК ВТ_Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Номенклатура.Ссылка,
	|	ВТ_Номенклатура.Ид,
	|	ВЫРАЗИТЬ(ВТ_Номенклатура.КлассификаторИд + ВТ_Номенклатура.Ид КАК СТРОКА(1000)),
	|	ВТ_Номенклатура.КлассификаторИд
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлассификаторИдТоварИд,
	|	Сортировка
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
	|ПО
	|	КлассификаторИдТоварИд
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СопоставлениеСвойств.Наименование КАК Наименование,
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка,
	|	ВТ_СопоставлениеСвойств.Ид КАК Ид,
	|	ВТ_СопоставлениеСвойств.КлассификаторИд КАК КлассификаторИд
	|ИЗ
	|	ВТ_СопоставлениеСвойств КАК ВТ_СопоставлениеСвойств
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО ВТ_СопоставлениеСвойств.Наименование = ДополнительныеРеквизитыИСведения.Наименование
	|ГДЕ
	|	НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления
	|	И НЕ ВТ_СопоставлениеСвойств.Общее
	|	И НЕ ВТ_СопоставлениеСвойств.Ид В
	|				(ВЫБРАТЬ
	|					ВТ_СвойствоСопоставленноеРаннее.Ид КАК Ид
	|				ИЗ
	|					ВТ_СвойствоСопоставленноеРаннее КАК ВТ_СвойствоСопоставленноеРаннее)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_СопоставлениеСвойств.Наименование,
	|	ВТ_СвойствоСопоставленноеРаннее.Ссылка,
	|	ВТ_СопоставлениеСвойств.Ид,
	|	ВТ_СопоставлениеСвойств.КлассификаторИд
	|ИЗ
	|	ВТ_СопоставлениеСвойств КАК ВТ_СопоставлениеСвойств
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СвойствоСопоставленноеРаннее КАК ВТ_СвойствоСопоставленноеРаннее
	|		ПО ВТ_СопоставлениеСвойств.Ид = ВТ_СвойствоСопоставленноеРаннее.Ид
	|ГДЕ
	|	НЕ ВТ_СопоставлениеСвойств.Общее";
	
	Запрос.УстановитьПараметр("СопоставлениеКатегорий" , Параметры.СопоставлениеКатегорий);
	Запрос.УстановитьПараметр("СопоставлениеСвойств" , Параметры.СопоставлениеСвойств);
	Запрос.УстановитьПараметр("СопоставлениеТоваров" , Параметры.СопоставлениеТоваров);
	Запрос.УстановитьПараметр("УзелОбмена" , Параметры.УзелОбмена);
	Запрос.УстановитьПараметр("КаталогЗагруженныхТоваров" , Параметры.КаталогЗагруженныхТоваров);
	Запрос.УстановитьПараметр("ИскатьКатегорииПоРодителю" , ЗначениеЗаполнено(Параметры.КаталогЗагруженныхТоваров));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	МаксимальныйИндексРезультатаЗапроса = РезультатЗапроса.ВГраница();
	
	РезультатЗапросаКаталог = РезультатЗапроса[МаксимальныйИндексРезультатаЗапроса - 2];
	РезультатЗапросаТовары = РезультатЗапроса[МаксимальныйИндексРезультатаЗапроса - 1];
	РезультатЗапросаСвойство = РезультатЗапроса[МаксимальныйИндексРезультатаЗапроса];
	
	Если Не РезультатЗапросаКаталог.Пустой() Тогда
		
		ВыборкаДетальныеЗаписиКатегория = РезультатЗапросаКаталог.Выбрать();
		Пока ВыборкаДетальныеЗаписиКатегория.Следующий() Цикл
			
			Отбор = Новый Структура("КлассификаторИд,Ид" , ВыборкаДетальныеЗаписиКатегория.КлассификаторИд , ВыборкаДетальныеЗаписиКатегория.Ид);
			НайденныеСтроки = Параметры.СопоставлениеКатегорий.НайтиСтроки(Отбор);
			Для Каждого Стр Из НайденныеСтроки Цикл
				Стр.Категория = ВыборкаДетальныеЗаписиКатегория.Ссылка;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если Не РезультатЗапросаТовары.Пустой() Тогда
		
		ВыборкаДетальныеЗаписиКлассификаторИдТоварИд = РезультатЗапросаТовары.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДетальныеЗаписиКлассификаторИдТоварИд.Следующий() Цикл
			
			ВыборкаДетальныеЗаписиТовар = ВыборкаДетальныеЗаписиКлассификаторИдТоварИд.Выбрать();
			ВыборкаДетальныеЗаписиТовар.Следующий();
			
			Отбор = Новый Структура("КлассификаторИд,Ид" , ВыборкаДетальныеЗаписиТовар.КлассификаторИд , ВыборкаДетальныеЗаписиТовар.Ид);
			НайденныеСтроки = Параметры.СопоставлениеТоваров.НайтиСтроки(Отбор);
			Для Каждого Стр Из НайденныеСтроки Цикл
				Стр.Номенклатура = ВыборкаДетальныеЗаписиТовар.Ссылка;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если Не РезультатЗапросаСвойство.Пустой() Тогда
		
		ВыборкаДетальныеЗаписиСвойство = РезультатЗапросаСвойство.Выбрать();
		Пока ВыборкаДетальныеЗаписиСвойство.Следующий() Цикл
			
			Отбор = Новый Структура("КлассификаторИд,Ид" , ВыборкаДетальныеЗаписиСвойство.КлассификаторИд , ВыборкаДетальныеЗаписиСвойство.Ид);
			НайденныеСтроки = Параметры.СопоставлениеСвойств.НайтиСтроки(Отбор);
			Для Каждого Стр Из НайденныеСтроки Цикл
				Стр.Свойство = ВыборкаДетальныеЗаписиСвойство.Ссылка;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаВБазуДанных

Процедура ЗагрузитьПакет(пакетДанных, Соединение=Неопределено, Параметры, КаталогСайта, ОписаниеОшибки)
	
	ПакетыТекущегоКаталогаСписок = КаталогСайта.Значение.ПакетыДанных;
	ГруппыВерхнегоУровня = КаталогСайта.Значение.ГруппыВерхнегоУровня;
	СтрокаXML = пакетДанных.Значение;
	УзелОбмена = Параметры.УзелОбмена;
	
	// Получаем тип XDTO и читаем XML 	
	ТипXDTO = ФабрикаXDTO.Тип("urn:1C.ru:commerceml_208", "CommerceML208");
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	ВесьФайл = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипXDTO);
	ЕстьКлассификатор = НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Классификатор", ВесьФайл);
	ЕстьКаталог = НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Каталог", ВесьФайл);
	ЕстьПакетПредложений = НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("ПакетПредложений", ВесьФайл);
	
	Если ЕстьКлассификатор Тогда
		
		Классификатор = ВесьФайл.Классификатор;
		
		Параметры.Вставить("КлассификаторИд" , Классификатор.Ид);
		
		КаталогСайта.Значение.Вставить("Наименование", Классификатор.Наименование);
		
		Если Параметры.ТипСайта = Перечисления.ПротоколыОбменаCMS.Битрикс Тогда
			ЗагрузитьКатегорию(Классификатор, УзелОбмена, Параметры, ОписаниеОшибки);
		КонецЕсли;
		
		//Категории
		Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("ТипыТовара", Классификатор)
			И НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("ТипТовара", Классификатор.ТипыТовара) Тогда
			
			МассивКатегорийXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(Классификатор.ТипыТовара.ТипТовара);
			Для каждого КатегорияXDTO Из МассивКатегорийXDTO Цикл
				
				ЗагружатьКатегорию = Истина;
				Если Параметры.ИспользоватьСопоставлениеПередЗагрузкой И Параметры.Свойство("СопоставлениеКатегорий") Тогда
					
					СопоставлениеКатегорий = Параметры.СопоставлениеКатегорий;
					Отбор = Новый Структура("КлассификаторИд,Ид" , Классификатор.Ид , КатегорияXDTO.Ид);
					НайденныеСтроки = СопоставлениеКатегорий.НайтиСтроки(Отбор);
					Для Каждого Стр Из НайденныеСтроки Цикл
						ЗагружатьКатегорию = Стр.Загружать;
					КонецЦикла;
					
				КонецЕсли;
				
				Если Не ЗагружатьКатегорию Тогда
					Продолжить;
				КонецЕсли;
				
				ЗагрузитьКатегорию(КатегорияXDTO, УзелОбмена, Параметры, ОписаниеОшибки);
				
			КонецЦикла;
		КонецЕсли;
		
		//Группы
		Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Группы", Классификатор) Тогда
			спГруппы = Классификатор.Группы;
			УровеньВложенности = 0;
			
			ЗагрузитьКаталогиРекурсивно(спГруппы, Параметры.КаталогЗагруженныхТоваров, УзелОбмена, УровеньВложенности, ГруппыВерхнегоУровня);
		КонецЕсли;
		
		//Свойства
		Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Свойство", Классификатор.Свойства) Тогда
			
			спСвойства = Классификатор.Свойства.Свойство;
			МассивСвойствXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(Классификатор.Свойства.Свойство);
			Для каждого СвойствоXDTO Из МассивСвойствXDTO Цикл
				
				ЗагружатьСвойство = Истина;
				Если Параметры.ИспользоватьСопоставлениеПередЗагрузкой И Параметры.Свойство("СопоставлениеСвойств") Тогда
					
					СопоставлениеСвойств = Параметры.СопоставлениеСвойств;
					Отбор = Новый Структура("КлассификаторИд,Ид" , Классификатор.Ид , СвойствоXDTO.Ид);
					НайденныеСтроки = СопоставлениеСвойств.НайтиСтроки(Отбор);
					Для Каждого Стр Из НайденныеСтроки Цикл
						ЗагружатьСвойство = Стр.Загружать;
					КонецЦикла;
					
				КонецЕсли;
				
				Если Не ЗагружатьСвойство Тогда
					Продолжить;
				КонецЕсли;
				
				ЗагрузитьСвойствоНоменклатуры(СвойствоXDTO, УзелОбмена, Параметры);
			КонецЦикла;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если ЕстьКаталог Тогда
		Каталог = ВесьФайл.Каталог;
		
		КаталогСайта.Значение.Вставить("Ид", Каталог.Ид);
		Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("СистемныйИд", Каталог) Тогда
			КаталогСайта.Значение.Вставить("СистемныйИд", Каталог.СистемныйИд);
		КонецЕсли;
		КаталогСайта.Значение.Вставить("Наименование", Каталог.Наименование);
		КаталогСайта.Значение.Вставить("ГруппыВерхнегоУровня", ГруппыВерхнегоУровня);
		
		Параметры.ШагиЗагрузки.Вставить(Параметры.СтруктураКаталогов[КаталогСайта.Ключ].ПорядковыйНомерКаталога, "Загрузка каталога "+Каталог.Наименование);
		
		// Каталог товаров
		ТоварыПараметры = Новый Структура;
		ТоварыПараметры.Вставить("ГруппаДляНовойНоменклатуры", Параметры.КаталогЗагруженныхТоваров);
		ТоварыПараметры.Вставить("ИспользоватьХарактеристики", Ложь);
		ТоварыПараметры.Вставить("ОбменТоварами", Ложь);
		ТоварыПараметры.Вставить("УзелОбмена", УзелОбмена);
		ТоварыПараметры.Вставить("СоответствиеПолейНоменклатуры", Новый Соответствие);
		
		Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Товар", Каталог.Товары) Тогда
			
			МассивТоваровXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(Каталог.Товары.Товар);
			Для каждого ТоварXDTO Из МассивТоваровXDTO Цикл
				
				ЗагружатьКатегорию = Истина;
				Если Параметры.ИспользоватьСопоставлениеПередЗагрузкой И Параметры.Свойство("СопоставлениеКатегорий") Тогда
					
					СопоставлениеКатегорий = Параметры.СопоставлениеКатегорий;
					Отбор = Новый Структура("КлассификаторИд" , ?(Классификатор = Неопределено,Каталог.ИдКлассификатора,Классификатор.Ид));
					
					Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("ТипТовара", ТоварXDTO) Тогда
						Отбор.Вставить("Ид" , ТоварXDTO.ТипТовара);
					Иначе
						Отбор.Вставить("Ид" , ?(Классификатор = Неопределено,Каталог.ИдКлассификатора,Классификатор.Ид));
					КонецЕсли;
					
					НайденныеСтроки = СопоставлениеКатегорий.НайтиСтроки(Отбор);
					Для Каждого Стр Из НайденныеСтроки Цикл
						ЗагружатьКатегорию = Стр.Загружать;
					КонецЦикла;
					
				КонецЕсли;
				
				Если Не ЗагружатьКатегорию Тогда
					Продолжить;
				КонецЕсли;
				
				ЗагружатьТовар = Истина;
				Номенклатура = Неопределено;
				Если Параметры.ИспользоватьСопоставлениеПередЗагрузкой И Параметры.Свойство("СопоставлениеТоваров") Тогда
					
					СопоставлениеТоваров = Параметры.СопоставлениеТоваров;
					Отбор = Новый Структура("КлассификаторИд,Ид" , ?(Классификатор = Неопределено,Каталог.ИдКлассификатора,Классификатор.Ид) , ТоварXDTO.Ид);
					НайденныеСтроки = СопоставлениеТоваров.НайтиСтроки(Отбор);
					Для Каждого Стр Из НайденныеСтроки Цикл
						ЗагружатьТовар = Стр.Загружать;
						Номенклатура = Стр.Номенклатура; 
					КонецЦикла;
					
				КонецЕсли;
				
				Если Не ЗагружатьТовар Тогда
					Продолжить;
				КонецЕсли;
				
				ТипНоменклатурыXDTO = "";
				ВидНоменклатурыXDTO = "";
				Если ОбменССайтом.ОбъектXDTOСодержитСвойство(ТоварXDTO, "ЗначенияРеквизитов")
					И ТоварXDTO.ЗначенияРеквизитов <> Неопределено
					И ОбменССайтом.ОбъектXDTOСодержитСвойство(ТоварXDTO.ЗначенияРеквизитов, "ЗначениеРеквизита") Тогда
					
					ЗначенияРеквизитовXDTO = ТоварXDTO.ЗначенияРеквизитов.ЗначениеРеквизита;
					МассивЗначенийРеквизитовXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(ЗначенияРеквизитовXDTO);
					
					Для каждого ЗначениеРеквизитаXDTO Из МассивЗначенийРеквизитовXDTO Цикл
						
						Если ЗначениеРеквизитаXDTO.Наименование = "ТипНоменклатуры" 
							И ТипЗнч(ЗначениеРеквизитаXDTO.Значение) = Тип("Строка") Тогда
							
							ТипНоменклатурыXDTO = ЗначениеРеквизитаXDTO.Значение;
						КонецЕсли;
						
						Если ЗначениеРеквизитаXDTO.Наименование = "ВидНоменклатуры" 
							И ТипЗнч(ЗначениеРеквизитаXDTO.Значение) = Тип("Строка") Тогда
							
							ВидНоменклатурыXDTO = ЗначениеРеквизитаXDTO.Значение;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				ЭтоУслуга = НРег(ТипНоменклатурыXDTO) = "услуга";
				Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
					Номенклатура = ОбменССайтом.НайтиСоздатьНоменклатуру(ТоварXDTO, ЭтоУслуга, ТоварыПараметры, , ОписаниеОшибки);
				КонецЕсли;
				
				НоменклатураОбъект = Номенклатура.ПолучитьОбъект(); 
				
				Если НоменклатураОбъект.ЭтоГруппа Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаписатьСоответствие(ТоварXDTO, Номенклатура, УзелОбмена);
				
				ХарактеристикаНоменклатуры = ОбменССайтом.НайтиСоздатьХарактеристикуНоменклатуры(
				ТоварXDTO, 
				Ложь, 
				Номенклатура,
				ТоварыПараметры,
				ОписаниеОшибки);
				
				
				Если ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда
					НоменклатураОбъект.ИспользоватьХарактеристики = Истина;
				КонецЕсли;
				// Группа-родитель
				Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Ид", ТоварXDTO.Группы)
					И ОбменССайтом.СвойствоXDTOЗаполнено(ТоварXDTO.Группы.Ид) Тогда
					ГруппаРодитель = СсылкаСоответствиеПоИдСайта(ТоварXDTO.Группы.Ид, "Справочник.Номенклатура", УзелОбмена, Истина);
					Если ГруппаРодитель<>Неопределено Тогда
						НоменклатураОбъект.Родитель = ГруппаРодитель;
					КонецЕсли;
				КонецЕсли;
				
				//Категория
				Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("ТипТовара", ТоварXDTO) 
					И ОбменССайтом.СвойствоXDTOЗаполнено(ТоварXDTO.ТипТовара) Тогда
					Категория = СсылкаСоответствиеПоИдСайта(ТоварXDTO.ТипТовара, "Справочник.КатегорииНоменклатуры", УзелОбмена);
					Если Категория<>Неопределено Тогда
						НоменклатураОбъект.КатегорияНоменклатуры = Категория;
					КонецЕсли;
				ИначеЕсли Параметры.ТипСайта=Перечисления.ПротоколыОбменаCMS.Битрикс Тогда
					НоменклатураОбъект.КатегорияНоменклатуры = Параметры.КатегорияКлассификатор;
				Иначе
					НоменклатураОбъект.КатегорияНоменклатуры = Справочники.КатегорииНоменклатуры.БезКатегории;
				КонецЕсли;
				
				// Полное наименование
				Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("ПолноеНаименование", ТоварXDTO)
					И ОбменССайтом.СвойствоXDTOЗаполнено(ТоварXDTO.ПолноеНаименование) Тогда
					НоменклатураОбъект.НаименованиеПолное = ТоварXDTO.ПолноеНаименование;
				КонецЕсли;
				Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Описание", ТоварXDTO) 
					И ОбменССайтом.СвойствоXDTOЗаполнено(ТоварXDTO.Описание) Тогда
					НоменклатураОбъект.Комментарий = ТоварXDTO.Описание;
				КонецЕсли;
				
				//Штрихкод
				Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Штрихкод", ТоварXDTO)
					И ОбменССайтом.СвойствоXDTOЗаполнено(ТоварXDTO.Штрихкод) Тогда
					
					НаборЗаписейШтрихкоды = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
					НаборЗаписейШтрихкоды.Номенклатура = Номенклатура;
					НаборЗаписейШтрихкоды.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
					НаборЗаписейШтрихкоды.Штрихкод = ТоварXDTO.Штрихкод;
					НаборЗаписейШтрихкоды.Записать(Истина);
					
				КонецЕсли; 
				
				// Значения свойств
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТоварXDTO.ЗначенияСвойств, "ЗначенияСвойства") Тогда
					
					ЗначенияСвойствXDTO = ТоварXDTO.ЗначенияСвойств.ЗначенияСвойства;
					МассивЗначенийСвойствXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(ЗначенияСвойствXDTO);
					Для каждого ЗначениеСвойстваXDTO Из МассивЗначенийСвойствXDTO Цикл
						
						ЗагружатьСвойство = Истина;
						Если Параметры.ИспользоватьСопоставлениеПередЗагрузкой И Параметры.Свойство("СопоставлениеСвойств") Тогда
							
							СопоставлениеСвойств = Параметры.СопоставлениеСвойств;
							Отбор = Новый Структура("КлассификаторИд,Ид" , ?(Классификатор = Неопределено,Каталог.ИдКлассификатора,Классификатор.Ид) , ЗначениеСвойстваXDTO.Ид);
							НайденныеСтроки = СопоставлениеСвойств.НайтиСтроки(Отбор);
							Для Каждого Стр Из НайденныеСтроки Цикл
								ЗагружатьСвойство = Стр.Загружать;
							КонецЦикла;
							
						КонецЕсли;
						
						Если Не ЗагружатьСвойство Тогда
							Продолжить;
						КонецЕсли;
						
						Если ОбменССайтом.СвойствоXDTOЗаполнено(ЗначениеСвойстваXDTO.Значение) Тогда
							
							ВладелецПВХ = СсылкаСоответствиеПоИдСайта(ЗначениеСвойстваXDTO.Ид, "ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения", УзелОбмена);
							Если НЕ ЗначениеЗаполнено(ВладелецПВХ) Тогда
								Продолжить;
							КонецЕсли;
							
							ТипЗначенияСвойства = ТипЗнч(ВладелецПВХ.ТипЗначения.ПривестиЗначение());
							Если ТипЗначенияСвойства = Тип("Строка") Тогда
								ЗначениеСвойства = ЗначениеСвойстваXDTO.Значение;
							ИначеЕсли ТипЗначенияСвойства = Тип("Булево") Тогда
								Если ТипЗнч(ЗначениеСвойстваXDTO.Значение)=Тип("Строка") Тогда
									Если ЗначениеСвойстваXDTO.Значение="1" 
										ИЛИ ЗначениеСвойстваXDTO.Значение=НСтр("да") ИЛИ ЗначениеСвойстваXDTO.Значение=НСтр("true") Тогда
										
										ЗначениеСвойства = Истина;
									ИначеЕсли ЗначениеСвойстваXDTO.Значение="0" 
										ИЛИ ЗначениеСвойстваXDTO.Значение=НСтр("нет") ИЛИ ЗначениеСвойстваXDTO.Значение=НСтр("false") Тогда
										
										ЗначениеСвойства = Ложь;
									КонецЕсли; 
								ИначеЕсли ТипЗнч(ЗначениеСвойстваXDTO.Значение)=Тип("Число") Тогда
									ЗначениеСвойства = ?(ЗначениеСвойстваXDTO.Значение=1, Истина, Ложь);
								КонецЕсли;
							ИначеЕсли ТипЗначенияСвойства = Тип("Дата") Тогда
								ЗначениеСвойства = ПолучитьДатуВремяИзСтроки(ЗначениеСвойстваXDTO.Значение);
							ИначеЕсли ТипЗначенияСвойства = Тип("Число") Тогда
								ЗначениеСвойства = ПреобразоватьВЧисло(ЗначениеСвойстваXDTO.Значение); //В Битриксе можно записать строку в поле с типом "Число"
							Иначе	
								ЗначениеСвойства = СсылкаСоответствиеПоИдСайта(ЗначениеСвойстваXDTO.Значение, "Справочник.ЗначенияСвойствОбъектов", УзелОбмена);
							КонецЕсли;
							
							СтруктураОтбора = Новый Структура("Свойство,Значение", ВладелецПВХ, ЗначениеСвойства);
							СтрокиСвойства = НоменклатураОбъект.ДополнительныеРеквизиты.НайтиСтроки(СтруктураОтбора);
							Если СтрокиСвойства.Количество()=0 Тогда
								НовСтр = НоменклатураОбъект.ДополнительныеРеквизиты.Добавить();
								НовСтр.Свойство = ВладелецПВХ;
								НовСтр.Значение = ЗначениеСвойства;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли; 
				
				// Картинка товара
				Если Параметры.ЕстьКартинки И Параметры.ЗагружатьКартинки И Соединение<>Неопределено Тогда
					Если ТипЗнч(ТоварXDTO.Картинка)=Тип("Строка") Тогда
						РезультатЗагрузки = ЗагрузитьКартинкуНаСервере(Соединение, Номенклатура, ТоварXDTO.Картинка, Параметры.ЗаголовокКукиСоединения);
						Если РезультатЗагрузки<>"" Тогда
							ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, РезультатЗагрузки);
						КонецЕсли;
					ИначеЕсли ТипЗнч(ТоварXDTO.Картинка)=Тип("СписокXDTO") Тогда
						МассивКартинокТоварXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(ТоварXDTO.Картинка);
						Для каждого КартинкаТоварXDTO Из МассивКартинокТоварXDTO Цикл
							Если ТипЗнч(КартинкаТоварXDTO)=Тип("Строка") Тогда
								РезультатЗагрузки = ЗагрузитьКартинкуНаСервере(Соединение, Номенклатура, КартинкаТоварXDTO, Параметры.ЗаголовокКукиСоединения);
								Если РезультатЗагрузки<>"" Тогда
									ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, РезультатЗагрузки);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				Попытка
					
					НоменклатураОбъект.Записать();
					
				Исключение
					Параметры.Вставить("Ошибка", ОписаниеОшибки());
				КонецПопытки;
				
				ПрогрессПоПакетам = (ПакетыТекущегоКаталогаСписок.Индекс(пакетДанных)) / ПакетыТекущегоКаталогаСписок.Количество() * 100;
				ПроцентТекущегоТовара = (1+МассивТоваровXDTO.Найти(ТоварXDTO)) / МассивТоваровXDTO.Количество() * 100 / ПакетыТекущегоКаталогаСписок.Количество();
				
				ПрогрессЗагрузки = Цел(ПрогрессПоПакетам + ПроцентТекущегоТовара *0.8);
				СформироватьЛогЗагрузки(Параметры.ШагиЗагрузки, "Загружено объектов: "+ПрогрессЗагрузки+"%");
				
			КонецЦикла;
			
		КонецЕсли; 
	КонецЕсли; 
	
	Если ЕстьПакетПредложений Тогда
		
		// Типы цен
		МассивТипыЦенXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(ВесьФайл.ПакетПредложений.ТипыЦен.ТипЦены);
		ВидыЦенСайта = Новый Соответствие;
		Для каждого ТипЦенXDTO Из МассивТипыЦенXDTO Цикл
			
			Если Параметры.ТипСайта = Перечисления.ПротоколыОбменаCMS.UMI Тогда
				Если Параметры.ЗагрузитьВидЦенССайта Тогда
					СсылкаВидЦен = ЗагрузитьТипЦен(ТипЦенXDTO, УзелОбмена);
					ВидыЦенСайта.Вставить(СсылкаВидЦен);
				Иначе
					ЗаписатьСоответствие(ТипЦенXDTO, Параметры.ВидЦен, УзелОбмена);
				КонецЕсли;
				// Для ЮМИ загружаем только первый вид цен
				Прервать;
			Иначе
				// Для Битрикс загружаем все виды цен
				СсылкаВидЦен = ЗагрузитьТипЦен(ТипЦенXDTO, УзелОбмена);
				ВидыЦенСайта.Вставить(СсылкаВидЦен);
			КонецЕсли;
		КонецЦикла;
		Параметры.Вставить("ВидыЦен", ВидыЦенСайта);
		
		ПрогрессТоваровЭтогоПакета = 100/ПакетыТекущегоКаталогаСписок.Количество()*0.8;
		
		КонстантаИспользоватьХарактеристикиВключена = Константы.ФункциональнаяОпцияИспользоватьХарактеристики.Получить();
		
		//Цены
		Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Предложение", ВесьФайл.ПакетПредложений.Предложения) Тогда
			
			РазрешенныеСимволыИмениРеквизита = Новый Соответствие;
			// АПК:1036-выкл - алфавит
			СтрСимволы = "йцукенгшщзхъфывапролджэячсмитьбю_qwertyuiopasdfghjklzxcvbnm01234567890";
			// АПК:1036-вкл
			Для н=1 По СтрДлина(СтрСимволы) Цикл
				РазрешенныеСимволыИмениРеквизита.Вставить(Сред(СтрСимволы, н, 1), Истина);
			КонецЦикла;	
			Параметры.Вставить("РазрешенныеСимволыИмениРеквизита", РазрешенныеСимволыИмениРеквизита);			
			
			МассивПредложенийXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(ВесьФайл.ПакетПредложений.Предложения.Предложение);
			Для каждого ПредложениеXDTO Из МассивПредложенийXDTO Цикл
				
				// Получим коды товара и характеристики отдельно
				ИспользуетсяРазделитель = (СтрНайти(ПредложениеXDTO.Ид,"#")<>0);
				Если ИспользуетсяРазделитель Тогда
					
					Если НЕ КонстантаИспользоватьХарактеристикиВключена Тогда
						Константы.ФункциональнаяОпцияИспользоватьХарактеристики.Установить(Истина);
					КонецЕсли;
					
					ЧастиИдТовара = СтрРазделить(ПредложениеXDTO.Ид, "#");
					Если ЧастиИдТовара.Количество()>0 Тогда
						ИдТовара = ЧастиИдТовара[0];
						ИдХарактеристики = ЧастиИдТовара[1];
					Иначе
						ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, "Не указан код товара в товарном предложении "+ПредложениеXDTO.Ид);
						Продолжить;
					КонецЕсли;
				Иначе	
					ИдТовара = ПредложениеXDTO.Ид;
					ИдХарактеристики = "";
				КонецЕсли; 

				ЗагружатьКатегорию = Истина;
				ЗагружатьТовар = Истина;
				ЗагрузитьПакетПроверкаСопоставления(ЗагружатьКатегорию, ЗагружатьТовар, ИдТовара, Классификатор, Параметры);
				
				Если Не ЗагружатьТовар Или Не ЗагружатьКатегорию Тогда
					Продолжить;
				КонецЕсли;
				
				Номенклатура = СсылкаСоответствиеПоИдСайта(ИдТовара, "Справочник.Номенклатура", УзелОбмена, Ложь);
				Если Номенклатура=Неопределено Тогда
					ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, "Не найден товар "+ПредложениеXDTO.Наименование+" по коду "+ПредложениеXDTO.Ид+" в товарном предложении, предложение не загружено!");
					Продолжить;
				КонецЕсли;
				
				Если ИспользуетсяРазделитель И НЕ Номенклатура.ИспользоватьХарактеристики Тогда
					об = Номенклатура.ПолучитьОбъект();
					Об.ИспользоватьХарактеристики = Истина;
					Попытка
						Об.Записать();
					Исключение
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;
				
				Если ИспользуетсяРазделитель ИЛИ Номенклатура.ИспользоватьХарактеристики Тогда
					
					//Характеристика
					НаборыСвойствХарактеристики = Новый Соответствие;
					СсылкаХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();	
					Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("ХарактеристикиТовара", ПредложениеXDTO)
						И НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("ХарактеристикаТовара", ПредложениеXDTO.ХарактеристикиТовара) Тогда
						
						МассивСвойствХарактеристикиXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(ПредложениеXDTO.ХарактеристикиТовара.ХарактеристикаТовара);
						Для каждого СвойствоХарактеристикиXDTO Из МассивСвойствХарактеристикиXDTO Цикл
							Если ОбменССайтом.СвойствоXDTOЗаполнено(СвойствоХарактеристикиXDTO.Наименование) И ОбменССайтом.СвойствоXDTOЗаполнено(СвойствоХарактеристикиXDTO.Значение) Тогда
								
								ЗагруженноеСвойство = ЗагрузитьСвойствоХарактеристикиИЗначение(СвойствоХарактеристикиXDTO, Параметры);
								НаборыСвойствХарактеристики.Вставить(ЗагруженноеСвойство.ИмяСвойства, ЗагруженноеСвойство.ЗначениеСвойства);
								
							КонецЕсли;
						КонецЦикла;
						
						Если ИдХарактеристики <> "" Тогда
							СсылкаХарактеристика = СсылкаСоответствиеПоИдСайта(ИдХарактеристики, "Справочник.ХарактеристикиНоменклатуры", УзелОбмена);
						КонецЕсли;
						Если ЗначениеЗаполнено(СсылкаХарактеристика) Тогда
							ОбъектХарактеристика = СсылкаХарактеристика.ПолучитьОбъект();
							ЗаписатьСвойстваХарактеристики(ОбъектХарактеристика, НаборыСвойствХарактеристики);
						Иначе
							СсылкаХарактеристика = НайтиСоздатьХарактеристикуПоНаборуСвойств(Номенклатура, НаборыСвойствХарактеристики);
							ЗаписатьСоответствие(Новый Структура("Ид",ИдХарактеристики), СсылкаХарактеристика, УзелОбмена);
						КонецЕсли;
						
					КонецЕсли;
					
					// Картинки характеристики
					Если ЗначениеЗаполнено(СсылкаХарактеристика) 
						И Параметры.ЕстьКартинки 
						И Параметры.ЗагружатьКартинки 
						И Соединение<>Неопределено Тогда
						
						Если ТипЗнч(ПредложениеXDTO.Картинка)=Тип("Строка") И ЗначениеЗаполнено(ПредложениеXDTO.Картинка) Тогда
							РезультатЗагрузки = ЗагрузитьКартинкуНаСервере(Соединение, СсылкаХарактеристика, ПредложениеXDTO.Картинка, Параметры.ЗаголовокКукиСоединения);
							Если РезультатЗагрузки<>"" Тогда
								ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, РезультатЗагрузки);
							КонецЕсли;
						ИначеЕсли ТипЗнч(ПредложениеXDTO.Картинка)=Тип("СписокXDTO") Тогда
							
							МассивКартинокХарактеристикиXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(ПредложениеXDTO.Картинка);
							Для каждого КартинкаХарактеристикиXDTO Из МассивКартинокХарактеристикиXDTO Цикл
								Если ТипЗнч(КартинкаХарактеристикиXDTO)=Тип("Строка") И ЗначениеЗаполнено(ПредложениеXDTO.Картинка) Тогда
									РезультатЗагрузки = ЗагрузитьКартинкуНаСервере(Соединение, СсылкаХарактеристика, КартинкаХарактеристикиXDTO, Параметры.ЗаголовокКукиСоединения);
									Если РезультатЗагрузки<>"" Тогда
										ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, РезультатЗагрузки);
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли; 
				
				//Цены
				ЗагрузитьЦены(ПредложениеXDTO, Номенклатура, СсылкаХарактеристика, Параметры);
				
				ПрогрессПоПакетам = (ПакетыТекущегоКаталогаСписок.Индекс(пакетДанных)) / ПакетыТекущегоКаталогаСписок.Количество() * 100;
				ПроцентТекущегоТовара = (1+МассивПредложенийXDTO.Найти(ПредложениеXDTO)) / МассивПредложенийXDTO.Количество() * 100 / ПакетыТекущегоКаталогаСписок.Количество();
				
				ПрогрессЗагрузки = Цел(ПрогрессПоПакетам + ПрогрессТоваровЭтогоПакета + ПроцентТекущегоТовара *0.2);
				СформироватьЛогЗагрузки(Параметры.ШагиЗагрузки, "Загружено объектов: "+ПрогрессЗагрузки+"%");
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗагрузитьПакетПроверкаСопоставления(ЗагружатьКатегорию, ЗагружатьТовар, ИдТовара, Классификатор, Параметры)
	
	Если Параметры.ИспользоватьСопоставлениеПередЗагрузкой И Параметры.Свойство("СопоставлениеТоваров") Тогда
		
		СопоставлениеТоваров = Параметры.СопоставлениеТоваров;
		Отбор = Новый Структура("КлассификаторИд,Ид" , Классификатор.Ид , ИдТовара);
		НайденныеСтроки = СопоставлениеТоваров.НайтиСтроки(Отбор);
		Для Каждого Стр Из НайденныеСтроки Цикл
			ЗагружатьТовар = Стр.Загружать; 
			
			Если Параметры.ИспользоватьСопоставлениеПередЗагрузкой И Параметры.Свойство("СопоставлениеКатегорий") Тогда
				
				СопоставлениеКатегорий = Параметры.СопоставлениеКатегорий;
				Отбор = Новый Структура("КлассификаторИд,Ид" , Классификатор.Ид , Стр.ТипТовара);
				НайденныеСтроки = СопоставлениеКатегорий.НайтиСтроки(Отбор);
				Для Каждого Стр Из НайденныеСтроки Цикл
					ЗагружатьКатегорию = Стр.Загружать;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры	

Процедура ОбновитьСписокКаталоговДляВыгрузкиИВидовЦенУзлаОбмена(Параметры)
	
	ТаблицаКаталогов = Новый ТаблицаЗначений;
	ТаблицаКаталогов.Колонки.Добавить("Каталог", Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ТаблицаКаталогов.Колонки.Добавить("Группы",  Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаКаталогов.Колонки.Добавить("ИдентификаторКаталога", Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ТаблицаКаталогов.Колонки.Добавить("ХранилищеНастроекКомпоновки", Новый ОписаниеТипов("ХранилищеЗначения"));
	
	// Каталоги должны идти в порядке загрузки с сайта, первым идет ОСНОВНОЙ каталог, это важно
	Для каждого строкаКаталога Из Параметры.СтруктураКаталогов Цикл
		
		ИмяКаталога = строкаКаталога.Значение.Наименование;
		Если строкаКаталога.Значение.Свойство("ГруппыВерхнегоУровня") Тогда
			
			СписокГрупп = Новый СписокЗначений;
			Для каждого элГруппа Из строкаКаталога.Значение.ГруппыВерхнегоУровня Цикл
				СписокГрупп.Добавить(элГруппа.Ключ);
			КонецЦикла;
			
			Если СписокГрупп.Количество()=0 Тогда
				// Пустой каталог
				Продолжить;
			КонецЕсли; 
			
		КонецЕсли; 
		
		НовСтр = ТаблицаКаталогов.Добавить();
		НовСтр.Каталог = ИмяКаталога;
		НовСтр.ИдентификаторКаталога = строкаКаталога.Значение.Ид;
		
		НовСтр.Группы = СписокГрупп;
		
	КонецЦикла; 
	
	ПланОбменаСайт = Параметры.УзелОбмена.ПолучитьОбъект();
	// Список каталогов
	ПланОбменаСайт.СохраненнаяТаблицаКаталогов = Новый ХранилищеЗначения(ТаблицаКаталогов);
	// Виды цен
	ПланОбменаСайт.ВидыЦен.Очистить();
	Если Параметры.Свойство("ВидыЦен") Тогда
		Для каждого стр Из Параметры.ВидыЦен Цикл
			НовыйВидЦен = ПланОбменаСайт.ВидыЦен.Добавить();
			НовыйВидЦен.ВидЦен = стр.Ключ;
		КонецЦикла;
	КонецЕсли; 
	
	Попытка
		
		ПланОбменаСайт.Записать();
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Функция URLАдминзоны(Параметры, ИмяСайта, ОписаниеОшибки)
	
	РеквизитыАвторизации = Обработки.СоздатьСайт.ДанныеДляАвторизации();
	СтрокаСоединения = "https://gate.umi.ru/partnerapi?partner=%1&code=%2&host=%3&password=%4&action=get_autologin_url";
	СтрокаСоединения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСоединения,
	РеквизитыАвторизации.Получить("partner"),
	РеквизитыАвторизации.Получить("code"),
	ИмяСайта,
	Параметры.Пароль
	);
	СтруктураПодключения = Новый Структура;
	СтруктураПодключения.Вставить("ИмяПользователя", Параметры.ИмяПользователя);
	СтруктураПодключения.Вставить("Пароль", Параметры.Пароль);
	СтруктураПодключения.Вставить("АдресЗапроса", СтрокаСоединения);
	СтруктураПодключения.Вставить("АдресСайта", РеквизитыАвторизации.Получить("АдресЗапроса"));
	
	СтруктураПодключения.Вставить("ПутьНаСервере", ОбщегоНазначенияКлиентСервер.СтруктураURI(СтрокаСоединения).ПутьНаСервере);
	
	ОбменССайтом.ПолучитьНастройкиПодключения(СтруктураПодключения, ОписаниеОшибки);
	
	Соединение = ОбменССайтом.УстановитьСоединениеССервером(СтруктураПодключения, ОписаниеОшибки);
	Если Соединение = Неопределено Тогда
		ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Авторизация не выполнена.'"));
		Возврат "";
	КонецЕсли;
	
	ЗапросHTTP = Новый HTTPЗапрос(СтруктураПодключения.ПутьНаСервере);
	ЗапросHTTP.Заголовки["Cache-Control"]= "no-cache";
	ЗапросHTTP.Заголовки["Content-type"]= "application/json;charset=utf-8";
	
	Попытка
		ОтветHTTP = Соединение.Получить(ЗапросHTTP);
	Исключение
		ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, ОписаниеОшибки());
		Возврат "";
	КонецПопытки;
	
	Если ОтветHTTP.КодСостояния<>200 Тогда
		ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Ошибка! Ответ HTTP: '")+ОтветHTTP.КодСостояния);
		Возврат "";
	КонецЕсли;
	
	ОтветКакСтрока = ОтветHTTP.ПолучитьТелоКакСтроку();
	
	ОтветРезультат = ПрочитатьРеквизитJSON(ОтветКакСтрока, "result");
	Если ОтветРезультат = Ложь Тогда
		Возврат Параметры.АдресСайта+"/adminzone";
	Иначе
		Возврат ОтветРезультат;
	КонецЕсли;
	
КонецФункции

Функция ПрочитатьРеквизитJSON(ДанныеСтрока, ИмяРеквизита)
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтрока) Тогда
		Возврат 0;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ДанныеСтрока);
	Результат = ПрочитатьJSON(ЧтениеJSON, Истина);
	РеквизитЗначение = Результат.Получить(ИмяРеквизита);
	
	Возврат РеквизитЗначение;
	
КонецФункции

Процедура ЗагрузитьЦены(ПредложениеXDTO, Номенклатура, Характеристика, Параметры)
	
	Если НЕ НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Цены", ПредложениеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура,"ЕдиницаИзмерения");
	
	МассивЦенXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(ПредложениеXDTO.Цены.Цена);
	Для каждого ЦенаXDTO Из МассивЦенXDTO Цикл
		Если Число(ЦенаXDTO.ЦенаЗаЕдиницу)=0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВалютаПредложения = ВалютаПоКлассификатору(ЦенаXDTO.Валюта);
		
		ВидЦен = ОбменССайтом.СсылкаСоответствиеПоИд(ЦенаXDTO.ИдТипаЦены, "Справочник.ВидыЦен", Параметры.УзелОбмена);
		Если ЗначениеЗаполнено(ВидЦен) Тогда			
			// Валюту вида цен установим, как у первой записи с этим видом цен
			РанееУстановленнаяВалютаВидаЦен = Параметры.ВидыЦен.Получить(ВидЦен);
			Если НЕ ЗначениеЗаполнено(РанееУстановленнаяВалютаВидаЦен) И ЭтоПерваяЦена(ВидЦен) Тогда
				
				Если ВидЦен.ВалютаЦены <> ВалютаПредложения Тогда
					обВидЦен = ВидЦен.ПолучитьОбъект();
					обВидЦен.ВалютаЦены = ВалютаПредложения;
					Попытка
						обВидЦен.Записать();
					Исключение
					КонецПопытки; 
				КонецЕсли;
				Параметры.ВидыЦен.Вставить(ВидЦен,ВидЦен.ВалютаЦены);
			КонецЕсли;
			
		Иначе
			ВидЦен = Параметры.ВидЦен;
		КонецЕсли;
		
		Если ВидЦен.ВалютаЦены <> ВалютаПредложения Тогда
			// Не загружаем цены в валюте, которая отличается от валюты вида цен
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("ВидЦен,Номенклатура,Цена", ВидЦен,Номенклатура,ЦенаXDTO.ЦенаЗаЕдиницу);
		Если ЗначениеЗаполнено(Характеристика) Тогда
			СтруктураОтбора.Вставить("Характеристика", Характеристика);
		КонецЕсли; 
		ДопРеквизиты = Новый Структура;
		ДопРеквизиты.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		ДопРеквизиты.Вставить("Период", НачалоДня(ТекущаяДата()));
		ДопРеквизиты.Вставить("Автор", Пользователи.АвторизованныйПользователь());
		ДопРеквизиты.Вставить("Актуальность", Истина);
		
		СсылкаЗаписьЦена = СоздатьИлиНайтиСуществующий(СтруктураОтбора, РегистрыСведений.ЦеныНоменклатуры, ДопРеквизиты);
		
	КонецЦикла;
	
КонецПроцедуры	

Функция ЗагрузитьТипЦен(ТипЦенXDTO, УзелОбмена)
	
	СтруктураОтбора = Новый Структура("Наименование", ТипЦенXDTO.Наименование);	
	Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Валюта", ТипЦенXDTO)
		И ТипЗнч(ТипЦенXDTO.Валюта)=Тип("Строка") И ЗначениеЗаполнено(ТипЦенXDTO.Валюта) Тогда
		
		КлассификаторXML = Обработки.ЗагрузкаКурсовВалют.ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст();
		КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
		
		ВалютаЦен = ВалютаПоКлассификатору(ТипЦенXDTO.Валюта);
		СтруктураОтбора.Вставить("ВалютаЦены", ВалютаЦен);
		
	Иначе
		СтруктураОтбора.Вставить("ВалютаЦены", Константы.ВалютаУчета.Получить());
	КонецЕсли;
	
	ДопРеквизиты = Новый Структура;
	Если ОбменССайтом.ОбъектXDTOСодержитСвойство(ТипЦенXDTO, "Налог")
		И ТипЦенXDTO.Налог.Наименование="НДС" 
		И ОбменССайтом.ОбъектXDTOСодержитСвойство(ТипЦенXDTO.Налог, "УчтеноВСумме") Тогда
		
		Если ТипЦенXDTO.Налог.УчтеноВСумме = "false" Тогда
			ДопРеквизиты.Вставить("ЦенаВключаетНДС", Ложь);
		Иначе
			ДопРеквизиты.Вставить("ЦенаВключаетНДС", Истина);
		КонецЕсли; 
	Иначе
		ДопРеквизиты.Вставить("ЦенаВключаетНДС", Истина);
	КонецЕсли;
	ДопРеквизиты.Вставить("ПорядокОкругления", 1);
	ДопРеквизиты.Вставить("ФорматЦены", "ЧЦ=15; ЧДЦ=2");
	ДопРеквизиты.Вставить("ТипВидаЦен",Перечисления.ТипыВидовЦен.Статический);
	ДопРеквизиты.Вставить("ИдентификаторФормул", ТипЦенXDTO.Наименование);
	ДопРеквизиты.Вставить("ЦеныАктуальны", Истина);
	ДопРеквизиты.Вставить("Комментарий", НСтр("ru = 'Загружено с сайта'"));
	
	СсылкаВидЦен = СоздатьИлиНайтиСуществующий(СтруктураОтбора, Справочники.ВидыЦен, ДопРеквизиты);
	
	ЗаписатьСоответствие(ТипЦенXDTO, СсылкаВидЦен, УзелОбмена);
	
	Возврат СсылкаВидЦен;
	
КонецФункции	

Процедура ЗагрузитьКатегорию(КатегорияXDTO, УзелОбмена, Параметры, ОписаниеОшибки="")
	
	// Создание/поиск НаборыДополнительныхРеквизитовИСведений (Набор свойств для Категории)
	Если Параметры.ТипСайта=Перечисления.ПротоколыОбменаCMS.Битрикс
		И Параметры.Свойство("КатегорияКлассификатор") Тогда
		
		КатегорияНаименование = Параметры.КатегорияКлассификатор.Наименование;
	Иначе
		КатегорияНаименование = КатегорияXDTO.Наименование;
	КонецЕсли;
	
	НаборСвойствРодитель = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура;
	
	СсылкаКатегория = Неопределено;
	Если Параметры.ИспользоватьСопоставлениеПередЗагрузкой И Параметры.Свойство("СопоставлениеКатегорий") Тогда
		
		СопоставлениеКатегорий = Параметры.СопоставлениеКатегорий;
		Отбор = Новый Структура("КлассификаторИд,Ид" , Параметры.КлассификаторИд , КатегорияXDTO.Ид);
		НайденныеСтроки = СопоставлениеКатегорий.НайтиСтроки(Отбор);
		Для Каждого Стр Из НайденныеСтроки Цикл
			СсылкаКатегория = Стр.Категория;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаКатегория) Тогда
		
		ЗаписатьСоответствие(КатегорияXDTO, СсылкаКатегория.НаборСвойств, УзелОбмена);
		ЗаписатьСоответствие(КатегорияXDTO, СсылкаКатегория, УзелОбмена);
		
	Иначе
		
		СтруктураОтбора = Новый Структура("Наименование", КатегорияНаименование);
		СтруктураОтбора.Вставить("Родитель", НаборСвойствРодитель);
		ДопРеквизиты = Новый Структура;
		ДопРеквизиты.Вставить("Используется", Истина);
		СсылкаНаборСвойств = СоздатьИлиНайтиСуществующий(СтруктураОтбора, Справочники.НаборыДополнительныхРеквизитовИСведений, ДопРеквизиты);
		
		ЗаписатьСоответствие(КатегорияXDTO, СсылкаНаборСвойств, УзелОбмена);
		
		//Создание/поиск Категории
		СтруктураОтбора = Новый Структура("Наименование", КатегорияНаименование);
		СтруктураОтбора.Вставить("НаборСвойств", СсылкаНаборСвойств);
		ДопРеквизиты = Новый Структура;
		ДопРеквизиты.Вставить("ТипНоменклатурыПоУмолчанию", Перечисления.ТипыНоменклатуры.Запас);
		ДопРеквизиты.Вставить("ЕдиницаИзмерения", Справочники.КлассификаторЕдиницИзмерения.шт);
		СсылкаКатегория = СоздатьИлиНайтиСуществующий(СтруктураОтбора, Справочники.КатегорииНоменклатуры, ДопРеквизиты);
		
		ЗаписатьСоответствие(КатегорияXDTO, СсылкаКатегория, УзелОбмена);
		
	КонецЕсли;
	
	Если Параметры.ТипСайта=Перечисления.ПротоколыОбменаCMS.Битрикс Тогда
		Параметры.Вставить("КатегорияКлассификатор", СсылкаКатегория);
	КонецЕсли;
	
КонецПроцедуры	

Функция СсылкаСоответствиеПоИдСайта(ИдОбъекта, ТипОбъекта, УзелОбмена, ЭтоГруппа=Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СоответствияОбъектовСайта.СсылкаНаОбъект КАК Ссылка
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовСайта КАК СоответствияОбъектовСайта
	|ГДЕ
	|	СоответствияОбъектовСайта.УникальныйИдентификаторИнформационнойБазы = &УникальныйИдентификаторИнформационнойБазы
	|	И СоответствияОбъектовСайта.ТипОбъекта = &ТипОбъекта
	|	И СоответствияОбъектовСайта.УзелИнформационнойБазы = &УзелОбмена
	|	И НЕ СоответствияОбъектовСайта.СсылкаНаОбъект = НЕОПРЕДЕЛЕНО";
	
	Если ЭтоГруппа<>Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст + "	И ВЫРАЗИТЬ(СоответствияОбъектовСайта.СсылкаНаОбъект КАК Справочник.Номенклатура).ЭтоГруппа = &ЭтоГруппа";
		Запрос.УстановитьПараметр("ЭтоГруппа", ЭтоГруппа);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("УникальныйИдентификаторИнформационнойБазы", ИдОбъекта);
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
КонецФункции

Процедура ЗагрузитьКаталогиРекурсивно(спГруппы, Родитель=Неопределено, УзелОбмена, УровеньВложенности, ГруппыВерхнегоУровня)
	
	МассивТоваровXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(спГруппы.Группа);
	Для каждого ГруппаXDTO Из МассивТоваровXDTO Цикл
		СтруктураОтбора = Новый Структура("Наименование, ЭтоГруппа", ГруппаXDTO.Наименование, Истина);
		Если ЗначениеЗаполнено(Родитель) Тогда
			СтруктураОтбора.Вставить("Родитель", Родитель);
		КонецЕсли;
		
		СсылкаГруппа = СоздатьИлиНайтиСуществующий(СтруктураОтбора, Справочники.Номенклатура);
		ЗаписатьСоответствие(ГруппаXDTO, СсылкаГруппа, УзелОбмена);
		
		Если УровеньВложенности=0 Тогда
			ГруппыВерхнегоУровня.Вставить(СсылкаГруппа);
		КонецЕсли;
		
		// Вложенные группы
		Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Группы", ГруппаXDTO) 
			И НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Группа", ГруппаXDTO.Группы) Тогда
			ЗагрузитьКаталогиРекурсивно(ГруппаXDTO.Группы, СсылкаГруппа, УзелОбмена, 1, ГруппыВерхнегоУровня);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьСоответствие(ОбъектXDTO, СсылкаИБ, УзелОбмена)
	
	Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Ид", ОбъектXDTO) Тогда
		ИдСайта = ОбъектXDTO.Ид;
	ИначеЕсли НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("ИдЗначения", ОбъектXDTO) Тогда
		ИдСайта = ОбъектXDTO.ИдЗначения;
	Иначе
		Возврат;
	КонецЕсли;
	Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("СистемныйИд", ОбъектXDTO) Тогда
		СистемныйИд = ОбъектXDTO.СистемныйИд;
	Иначе	
		СистемныйИд = ИдСайта;
	КонецЕсли;
	
	РегМенеджер = РегистрыСведений.СоответствияОбъектовСайта.СоздатьМенеджерЗаписи();
	РегМенеджер.УникальныйИдентификаторСайта = СистемныйИд;
	РегМенеджер.УникальныйИдентификаторИнформационнойБазы = ИдСайта;
	РегМенеджер.УзелИнформационнойБазы = УзелОбмена;
	РегМенеджер.СсылкаНаОбъект = СсылкаИБ;
	РегМенеджер.ТипОбъекта = СсылкаИБ.Метаданные().ПолноеИмя();
	
	Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Внешний", ОбъектXDTO) Тогда
		СтруктураДополнительныеПараметры = Новый Структура("Внешний", ОбъектXDTO.Внешний);
		РегМенеджер.ДополнительныеПараметры = ЗаписатьСтруктуруВСтрокуJSON(СтруктураДополнительныеПараметры);
	КонецЕсли;
	
	РегМенеджер.Записать();
	
КонецПроцедуры

Функция СоздатьИлиНайтиСуществующий(СтруктураОтбора, МенеджерОбъекта, ДопРеквизиты=Неопределено)
	
	Если ДопРеквизиты = Неопределено Тогда
		ДопРеквизиты = Новый Структура;
	КонецЕсли;
	
	ИмяСтрокой = Строка(МенеджерОбъекта);
	ИмяОбъектаСтрокой = СтрЗаменить(ИмяСтрокой, "Менеджер","");
	
	Если Найти(ИмяСтрокой, "РегистрСведений") Тогда
		НЗ = МенеджерОбъекта.СоздатьМенеджерЗаписи();
		Для каждого стр Из СтруктураОтбора Цикл
			НЗ[стр.Ключ] = стр.Значение;
		КонецЦикла;
		НЗ.Прочитать();
		ЗаполнитьЗначенияСвойств(НЗ, СтруктураОтбора);
		ЗаполнитьЗначенияСвойств(НЗ, ДопРеквизиты);
		НЗ.Записать();
	ИначеЕсли Найти(ИмяСтрокой, "Справочник") ИЛИ Найти(ИмяСтрокой, "ПланВидовХарактеристик") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИмяСпр.Ссылка
		|ИЗ
		|	"+ИмяОбъектаСтрокой+" КАК ИмяСпр
		|ГДЕ
		|";
		ЧислоОтборов = 0;
		Для каждого стр Из СтруктураОтбора Цикл
			
			ВариантСравнения = ?(ОбменССайтомПовтИсп.ПроверитьНеограниченнаяСтрока(ИмяОбъектаСтрокой, стр.Ключ), " Подобно ", " = ");
			
			Запрос.Текст = Запрос.Текст+"ИмяСпр."+стр.Ключ+ВариантСравнения+"&"+стр.Ключ;
			Запрос.УстановитьПараметр(стр.Ключ, стр.Значение);
			
			ЧислоОтборов = ЧислоОтборов+1;
			Если ЧислоОтборов < СтруктураОтбора.Количество() Тогда
				Запрос.Текст = Запрос.Текст+" И "; 
			КонецЕсли;
			
		КонецЦикла;
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Если СтруктураОтбора.Свойство("ЭтоГруппа") Тогда
				Об = МенеджерОбъекта.СоздатьГруппу();
			Иначе
				Об = МенеджерОбъекта.СоздатьЭлемент();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Об, СтруктураОтбора);
			ЗаполнитьЗначенияСвойств(Об, ДопРеквизиты); 
			
			Если Не СтруктураОтбора.Свойство("ЭтоГруппа") И СтрНайти(НРег(ИмяСтрокой), НРег("ВидыЦен")) <> 0 Тогда
				Если ЗначениеЗаполнено(Об.ИдентификаторФормул) Тогда
					НовыйИдентификаторФормул = Об.ИдентификаторФормул;
					ЦенообразованиеФормулыСервер.СформироватьНовыйИдентификаторВидаЦен(НовыйИдентификаторФормул, Об.Наименование);
					Об.ИдентификаторФормул = НовыйИдентификаторФормул;
				Иначе 
					НовыйИдентификаторФормул = Об.Наименование;
					ЦенообразованиеФормулыСервер.СформироватьНовыйИдентификаторВидаЦен(НовыйИдентификаторФормул, Об.Наименование);
					Об.ИдентификаторФормул = НовыйИдентификаторФормул;
				КонецЕсли;
			КонецЕсли;
			
			Попытка
				Об.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			Возврат Об.Ссылка;
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецФункции

Функция ЗагрузитьКартинкуНаСервере(Соединение, ВладелецКартинки, АдресКартинки, ЗаголовокКуки)
	
	Если НЕ ПроверитьРазрешенныеТипыКартинок(АдресКартинки) Тогда
		Возврат "Ошибка загрузки картинки! Картинка не содержит расширения или имеет неправильный тип: "+АдресКартинки;
	КонецЕсли;
	
	АдресКартинкиБезИмениСайта = СтрЗаменить(АдресКартинки, "http://","");
	АдресКартинкиБезИмениСайта = СтрЗаменить(АдресКартинкиБезИмениСайта, "https://","");
	ПервыйСлеш = СтрНайти(АдресКартинкиБезИмениСайта, "/");
	Если ПервыйСлеш<>0 Тогда
		АдресКартинкиБезИмениСайта = Сред(АдресКартинкиБезИмениСайта, ПервыйСлеш);
	КонецЕсли;
	
	// выделяем расширение из имени файла.
	ЧастиИмениФайла = СтрРазделить(АдресКартинкиБезИмениСайта, ".", Ложь);
	Если ЧастиИмениФайла.Количество() > 1 Тогда
		РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество()-1];
		ЧастиКаталогов = СтрРазделить(ЧастиИмениФайла[0], "/", Ложь);
		ИмяБезРасширения = ЧастиКаталогов[ЧастиКаталогов.Количество()-1];
	КонецЕсли;
	
	АдресКартинкиСПортом = ?(Соединение.Защищенное=Истина, "https://","http://")
	+Соединение.Сервер
	+?(ЗначениеЗаполнено(Соединение.Порт),":"+Формат(Соединение.Порт,"ЧГ=0"),"")
	+АдресКартинкиБезИмениСайта;
	
	АдресЗапроса = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресКартинкиСПортом);
	
	ЗапросHTTP = Новый HTTPЗапрос(АдресЗапроса.ПутьНаСервере);
	ЗапросHTTP.Заголовки["Cache-Control"]	= "no-cache";
	ЗапросHTTP.Заголовки["Content-type"]	= "application/json;charset=utf-8";
	ЗапросHTTP.Заголовки["Cookie"]	= ЗаголовокКуки;
	
	ОтветHTTP = Соединение.Получить(ЗапросHTTP);
	
	Если ОтветHTTP.КодСостояния<>200 Тогда
		Возврат "Ошибка получения картинки! Ответ HTTP: "+ОтветHTTP.КодСостояния;
	КонецЕсли;
	
	ДвоичныеДанныеКартинки = ОтветHTTP.ПолучитьТелоКакДвоичныеДанные();
	ХешЗагруженного = ХешФайла(ДвоичныеДанныеКартинки);
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	ПараметрыФайла.Вставить("ВладелецФайлов", ВладелецКартинки);
	ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеБезТочки);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяУниверсальнаяДата());
	
	// ищем сначала по имени картинки
	Если ТипЗнч(ВладелецКартинки) = Тип("СправочникСсылка.Номенклатура") Тогда
		СохраненнаяКартинка = Справочники.НоменклатураПрисоединенныеФайлы.НайтиПоНаименованию(ИмяБезРасширения, Истина, , ВладелецКартинки);
	ИначеЕсли ТипЗнч(ВладелецКартинки) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		СохраненнаяКартинка = Справочники.ХарактеристикиНоменклатурыПрисоединенныеФайлы.НайтиПоНаименованию(ИмяБезРасширения, Истина, , ВладелецКартинки);
	КонецЕсли;
	
	// затем по значению
	Если ЗначениеЗаполнено(СохраненнаяКартинка) Тогда
		ДвоичныеДанныеСохраненногоФайла = РаботаСФайлами.ДвоичныеДанныеФайла(СохраненнаяКартинка);
		ХешСохраненного = ХешФайла(ДвоичныеДанныеСохраненногоФайла);
		
		Если НЕ ХешСохраненного = ХешЗагруженного Тогда
			АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки);
			ПараметрыФайла.Вставить("АдресФайлаВоВременномХранилище", АдресФайлаВоВременномХранилище);
			ПараметрыФайла.Вставить("АдресВременногоХранилищаТекста", Неопределено);
			
			РаботаСФайлами.ОбновитьФайл(СохраненнаяКартинка, ПараметрыФайла);
		КонецЕсли;
	Иначе
		
		СохраненнаяКартинка = НайтиКартинкуПоДвоичнымДанным(ХешЗагруженного, ВладелецКартинки);
		Если СохраненнаяКартинка = Неопределено Тогда
			АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки);
			РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайлаВоВременномХранилище);
		Иначе
			АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки);
			ПараметрыФайла.Вставить("АдресФайлаВоВременномХранилище", АдресФайлаВоВременномХранилище);
			ПараметрыФайла.Вставить("АдресВременногоХранилищаТекста", Неопределено);
			
			РаботаСФайлами.ОбновитьФайл(СохраненнаяКартинка, ПараметрыФайла);
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция НайтиКартинкуПоДвоичнымДанным(ХешЗагруженного, ВладелецКартинки)
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ВладелецКартинки) = Тип("СправочникСсылка.Номенклатура") Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	НоменклатураПрисоединенныеФайлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
		|ГДЕ
		|	НоменклатураПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла";
	ИначеЕсли ТипЗнч(ВладелецКартинки) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	ХарактеристикиНоменклатурыПрисоединенныеФайлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатурыПрисоединенныеФайлы КАК ХарактеристикиНоменклатурыПрисоединенныеФайлы
		|ГДЕ
		|	ХарактеристикиНоменклатурыПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла";
	КонецЕсли;
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецКартинки);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДвоичныеДанныеСохраненногоФайла = РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.Ссылка);
		ХешСохраненного = ХешФайла(ДвоичныеДанныеСохраненногоФайла);
		Если ХешСохраненного = ХешЗагруженного Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ХешФайла(ДвоичныеДанныеФайла)
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанных.Добавить(ДвоичныеДанныеФайла);
	Возврат ХешированиеДанных.ХешСумма;
	
КонецФункции

Функция ПроверитьРазрешенныеТипыКартинок(АдресКартинки)
	
	РазрешенныеТипыКартинок = Новый Массив;
	РазрешенныеТипыКартинок.Добавить("jpg");
	РазрешенныеТипыКартинок.Добавить("jpeg");
	РазрешенныеТипыКартинок.Добавить("png");
	РазрешенныеТипыКартинок.Добавить("gif");
	
	Для каждого ТипКартинки Из РазрешенныеТипыКартинок Цикл
		Если СтрНайти(НРег(АдресКартинки), ТипКартинки, НаправлениеПоиска.СКонца)<>0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ЛогированиеЗагрузки

Функция СформироватьЛогЗагрузки(ШагиЗагрузки, ТекущееДействие="", ПроцентВыполнения=Неопределено)
	
	СтрокаЛогЗагрузкиССайта = "";
	Для каждого шаг Из ШагиЗагрузки Цикл
		СтрокаЛогЗагрузкиССайта = СтрокаЛогЗагрузкиССайта + шаг.Значение + Символы.ПС;
	КонецЦикла;
	
	СтрокаЛогЗагрузкиССайта = СтрокаЛогЗагрузкиССайта + ТекущееДействие;
	
	ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, СтрокаЛогЗагрузкиССайта);
	
КонецФункции

Процедура ДобавитьБлокЛогов(Параметры, ТекстЗаголовок, соотвЭлементы, ИмяПоля="Ключ")
	
	ДобавитьСтрокуЛогаПодробно(Параметры, "");
	Если соотвЭлементы.Количество()>0 Тогда
		ДобавитьСтрокуЛогаПодробно(Параметры, ТекстЗаголовок);
		Для каждого стр Из соотвЭлементы Цикл
			ДобавитьСтрокуЛогаПодробно(Параметры, "- "+стр[ИмяПоля]);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуЛогаПодробно(Параметры, НоваяСтрока)
	
	Параметры.СтрокаЛогЗагрузкиССайтаПодробно = Параметры.СтрокаЛогЗагрузкиССайтаПодробно + НоваяСтрока + Символы.ПС;
	
КонецПроцедуры

Процедура ДобавитьСтрокуЛога(Параметры, НоваяСтрока)
	
	Параметры.СтрокаЛогЗагрузкиССайта = Параметры.СтрокаЛогЗагрузкиССайта + НоваяСтрока + Символы.ПС;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьОшибку(Параметры, ОписаниеОшибки)
	
	ОбменССайтом.ДобавитьОписаниеОшибки(Параметры.ОписаниеОшибки, ОписаниеОшибки);
	Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	ПоместитьВоВременноеХранилище(Параметры, Параметры.ФоновоеЗаданиеАдресХранилища);
	
КонецПроцедуры

Функция РазмерПакетаЗагрузки()
	
	Возврат 20;
	
КонецФункции

Функция УстановитьСоединениеССервером(Параметры, ОписаниеОшибки="")
	
	Соединение = Неопределено;
	ОтветСервера = "";
	
	СтруктураПодключения = Новый Структура;
	СтруктураПодключения.Вставить("АдресСайта", Параметры.АдресСайтаДляПодключения);
	СтруктураПодключения.Вставить("ИмяПользователя", Параметры.ИмяПользователя);
	СтруктураПодключения.Вставить("Пароль", Параметры.Пароль);
	
	ЕстьСоединение = УстановитьСоединение(СтруктураПодключения, Соединение, ОтветСервера, ОписаниеОшибки);
	Если НЕ ЕстьСоединение Тогда
		Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаЛогЗагрузкиССайтаПодробно = НСтр("ru = 'Соединение установлено.'") + Символы.ПС;
	
	КукиИмя				= СтрПолучитьСтроку(ОтветСервера, 2);
	КукиЗначение		= СтрПолучитьСтроку(ОтветСервера, 3);
	ЗаголовкиЗапросов	= "Cookie: " + КукиИмя + "=" + КукиЗначение;
	
	Возврат Соединение;
	
КонецФункции

Функция УстановитьСоединение(НастройкиПодключения, Соединение, ОтветСервера, ТекстСообщения)
	
	НастройкиПодключения.Вставить("ЗащищенноеСоединение", Ложь);
	ОписаниеОшибки = "";
	
	Если НЕ ОбменССайтом.ПолучитьНастройкиПодключения(НастройкиПодключения, ОписаниеОшибки) Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка при получении параметров подключения к сайту.'") + Символы.ПС + ОписаниеОшибки;
		Возврат Ложь;
		
	КонецЕсли;
	
	Успешно = ОбменССайтом.ВыполнитьАвторизациюДляСоединения(Соединение, НастройкиПодключения, ОтветСервера, ОписаниеОшибки);
	Если НЕ Успешно Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось установить соединение.'") + Символы.ПС + ОписаниеОшибки;
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

Функция ПолучитьДатуВремяИзСтроки(ДатаСтрока, ВремяСтрока = "")
	
	ДатаВремя = Дата(1,1,1);
	
	Попытка
		
		Если ТипЗнч(ДатаСтрока) = Тип("Дата")
			И ТипЗнч(ВремяСтрока) = Тип("Дата") Тогда
			
			ДатаВремя = Дата(Формат(ДатаСтрока, "ДФ=dd.MM.yyyy") + " " + Формат(ВремяСтрока, "ДЛФ=T"));
		КонецЕсли;
		
		Если ДатаВремя = Дата(1,1,1) Тогда
			
			Если ЗначениеЗаполнено(ВремяСтрока) Тогда
				Время = СтрЗаменить(ВремяСтрока, ":", "");
				ДатаВремя = Дата(СтрЗаменить(ДатаСтрока, "-", "") + Время);
			Иначе
				ДатаВремя = Дата(СтрЗаменить(ДатаСтрока, "-", "") + "000000");
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
	Возврат ДатаВремя;
	
КонецФункции

Функция ПреобразоватьВЧисло(ЗначениеСвойства)
	
	ЗначениеЧисло = Неопределено;
	Попытка
		ЗначениеЧисло = Число(ЗначениеСвойства);
	Исключение
	КонецПопытки; 
	
	Если ЗначениеЧисло <> Неопределено Тогда
		Возврат ЗначениеЧисло;
	КонецЕсли;
	
	Попытка
		ЗначениеЧисло = Число(УбратьЗапрещенныеСимволы(ЗначениеСвойства));	
	Исключение
		ЗначениеЧисло = 0;
	КонецПопытки;
	
	Возврат ЗначениеЧисло;
	
КонецФункции

Функция УбратьЗапрещенныеСимволы(Текст)
	
	Разрешенные =  "0123456789.";
	ПозицияПервойТочки = 0;
	
	Результат = Текст;
	Для Сч = 1 По СтрДлина(Текст) Цикл
		ТекСимвол = Сред(Текст, Сч, 1);
		// Преобразовываем в число до второй точки в тексте
		Если ТекСимвол="." Тогда
			Если ПозицияПервойТочки = 0 Тогда
				ПозицияПервойТочки = Сч;
			Иначе
				Возврат Лев(Результат, СтрДлина(Результат)-1);
			КонецЕсли;
		КонецЕсли;
		
		Если СтрНайти(Разрешенные, НРег(ТекСимвол))=0 Тогда
			Результат = СтрЗаменить(Результат, ТекСимвол,"");
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗагрузитьXMLССайтаНаСервереЮМИ(Параметры, СтруктураКаталогов, ОписаниеОшибки)
	
	ПакетыДанныхСписок = Новый СписокЗначений;
	ОтветСервера="";
	СтрокаЛогЗагрузкиССайтаПодробно = "";
	
	СформироватьЛогЗагрузки(Параметры.ШагиЗагрузки, "Подключение к сайту ...");
	
	АдресСайтаДляПодключения = Параметры.АдресСайта;
	АдресСайтаДляПодключения = АдресСайтаДляПодключения+"/admin/exchange/autoimport/";
	
	Параметры.Вставить("АдресСайтаДляПодключения", АдресСайтаДляПодключения);
	Параметры.Вставить("СтрокаЛогЗагрузкиССайтаПодробно", СтрокаЛогЗагрузкиССайтаПодробно);
	
	Соединение = УстановитьСоединениеССервером(Параметры, ОписаниеОшибки);
	Если Соединение=Неопределено Тогда
		ЗаписатьОшибку(Параметры, НСтр("ru = 'Не удалось установить соединение'"));
		Возврат;
	КонецЕсли;
	
	Параметры.ШагиЗагрузки.Вставить(1, "Подключение установлено.");
	СформироватьЛогЗагрузки(Параметры.ШагиЗагрузки);
	
	//////////////////////////////////////////
	
	НомерКаталога = 0;
	НомерПакета = 0;
	ПрочитаноПакетов = 0;
	КонецПередачи = Ложь;
	
	Пока НЕ КонецПередачи Цикл
		
		Пока Истина Цикл
			
			// Catalog - номер каталога, по-умолчанию в Основной каталог сайта - загружается первый по порядку каталог
			ПараметрыСоединения = "/admin/exchange/autoexport/?mode=catalog&package_size="+РазмерПакетаЗагрузки()+"&package="+НомерПакета+"&catalog="+НомерКаталога;
			СтрокаСоединения = "https://" + Соединение.Сервер + ПараметрыСоединения;
			
			АдресЗапроса = ОбщегоНазначенияКлиентСервер.СтруктураURI(СтрокаСоединения);
			
			ЗапросHTTP = Новый HTTPЗапрос(АдресЗапроса.ПутьНаСервере);
			ЗапросHTTP.Заголовки["Cache-Control"]	= "no-cache";
			ЗапросHTTP.Заголовки["Content-type"]	= "application/json;charset=utf-8";
			
			ОтветHTTP = Соединение.Получить(ЗапросHTTP);
			
			Если ОтветHTTP.КодСостояния<>200 Тогда
				ЗаписатьОшибку(Параметры, НСтр("ru = 'Ошибка! Ответ HTTP: '")+ОтветHTTP.КодСостояния);
				Возврат;
			КонецЕсли;
			
			ДанныеСтрока = ОтветHTTP.ПолучитьТелоКакСтроку();
			
			Если ДанныеСтрока = Неопределено Тогда 
				ЗаписатьОшибку(Параметры, НСтр("ru = 'Загрузка не выполнена.'"));
				Возврат;
			КонецЕсли;
			
			Если НРег(ДанныеСтрока) = "complete" Тогда 
				
				// Переход на другой каталог
				НомерПакета = 0;
				НомерКаталога = НомерКаталога+1;
				ПакетыДанныхСписок = Новый СписокЗначений;
				
				КонецПередачи = Истина;
				
			ИначеЕсли СтрНайти(НРег(ДанныеСтрока), "not find catalog page")<>0 Тогда
				
				// Конец передачи, выход из процедуры
				КонецПередачи = Истина;
				Прервать;
				
			Иначе
				
				НомерПакета = НомерПакета+1;
				ПрочитаноПакетов = ПрочитаноПакетов + 1;
				Параметры.Вставить("ПрочитаноПакетов", ПрочитаноПакетов);
				
				СтрокаXML = "";
				Если Лев(ДанныеСтрока, 2) = "PK" Тогда
					СтрокаXML = ОбменССайтом.РаспаковатьZIPАрхив(ОтветСервера, ОписаниеОшибки);
				Иначе
					Если Лев(ДанныеСтрока, 5) = "<?xml" Тогда
						СтрокаXML = ДанныеСтрока;
					КонецЕсли;
				КонецЕсли;
				
				Если ПустаяСтрока(СтрокаXML) Тогда
					ЗаписатьОшибку(Параметры, НСтр("ru = 'Не удалось прочитать данные, загруженные с сервера.'"));
					Возврат;
				КонецЕсли;
				
				//****************************
				ПакетыДанныхСписок.Добавить(СтрокаXML, "Пакет"+НомерКаталога+НомерПакета);
				
				СтруктураКаталогов.Вставить("Каталог"+НомерКаталога, Новый Структура("ПакетыДанных", ПакетыДанныхСписок));
				//****************************
				
				СформироватьЛогЗагрузки(Параметры.ШагиЗагрузки, "Прочитано объектов: "+РазмерПакетаЗагрузки()*ПрочитаноПакетов);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Параметры.ШагиЗагрузки.Вставить(2, "Прочитано объектов: "+РазмерПакетаЗагрузки()*ПрочитаноПакетов);
		СформироватьЛогЗагрузки(Параметры.ШагиЗагрузки);
		
	КонецЦикла; 
	
	Параметры.Вставить("ПрочитаноПакетов", ПрочитаноПакетов);
	
КонецПроцедуры

Процедура ЗагрузитьXMLССайтаНаСервереБитрикс(Параметры, СтруктураКаталогов, ТекстОшибки)
	
	ПакетыДанныхСписок = Новый СписокЗначений;
	ОтветСервера="";
	СтрокаЛогЗагрузкиССайтаПодробно = "";
	
	СформироватьЛогЗагрузки(Параметры.ШагиЗагрузки, "Подключение к сайту ...");
	
	АдресСайтаДляПодключения = Параметры.АдресСайта;
	Если Прав(АдресСайтаДляПодключения,1)="/" Тогда
		АдресСайтаДляПодключения = Сред(АдресСайтаДляПодключения, 1, СтрДлина(АдресСайтаДляПодключения)-1);
	КонецЕсли;
	Если СтрНайти(АдресСайтаДляПодключения, "http")=0 Тогда
		АдресСайтаДляПодключения = "https://"+АдресСайтаДляПодключения;
	КонецЕсли;
	АдресСайтаДляПодключения = АдресСайтаДляПодключения+"/bitrix/admin/1c_exchange.php";
	
	Параметры.Вставить("АдресСайтаДляПодключения", АдресСайтаДляПодключения);
	Параметры.Вставить("СтрокаЛогЗагрузкиССайтаПодробно", СтрокаЛогЗагрузкиССайтаПодробно);
	
	Соединение = УстановитьСоединениеССервером(Параметры, ТекстОшибки);
	Если Соединение=Неопределено Тогда
		ЗаписатьОшибку(Параметры, НСтр("ru = 'Не удалось установить соединение'"));
		Возврат;
	КонецЕсли;
	
	Параметры.ШагиЗагрузки.Вставить(1, "Подключение установлено.");
	СформироватьЛогЗагрузки(Параметры.ШагиЗагрузки);
	
	//////////////////////////////////////////
	СтрокаСоединения = Параметры.АдресСайта + "/bitrix/admin/1c_exchange.php?type=get_catalog&mode=checkauth";
	АдресЗапроса = ОбщегоНазначенияКлиентСервер.СтруктураURI(СтрокаСоединения);
	ЗапросHTTP = Новый HTTPЗапрос(АдресЗапроса.ПутьНаСервере);
	ЗапросHTTP.Заголовки["Cache-Control"]	= "no-cache";
	ЗапросHTTP.Заголовки["Content-type"]	= "text/html; charset=UTF-8";
	ОтветHTTP = Соединение.Получить(ЗапросHTTP);
	ДанныеСтрока = ОтветHTTP.ПолучитьТелоКакСтроку();
	
	КукиИмя			= СтрПолучитьСтроку(ДанныеСтрока, 2);
	КукиЗначение	= СтрПолучитьСтроку(ДанныеСтрока, 3);
	ЗаголовокКуки	= КукиИмя + "=" + КукиЗначение;
	
	СтрокаСоединения = Параметры.АдресСайта + "/bitrix/admin/1c_exchange.php?type=get_catalog&mode=init&outputType=package&moduleVersion=2";	
	АдресЗапроса = ОбщегоНазначенияКлиентСервер.СтруктураURI(СтрокаСоединения);
	ЗапросHTTP = Новый HTTPЗапрос(АдресЗапроса.ПутьНаСервере);
	ЗапросHTTP.Заголовки["Cache-Control"]	= "no-cache";
	ЗапросHTTP.Заголовки["Content-type"]	= "text/html; charset=UTF-8";
	ЗапросHTTP.Заголовки["Cookie"]	= ЗаголовокКуки;
	ОтветHTTP = Соединение.Получить(ЗапросHTTP);
	ДанныеСтрока = ОтветHTTP.ПолучитьТелоКакСтроку();
	
	НомерКаталога = 0;
	НомерПакета = 0;
	ПрочитаноПакетов = 0;
	КонецПередачи = Ложь;
	
	Пока НЕ КонецПередачи Цикл
		
		Пока Истина Цикл
			
			// Catalog - номер каталога, по-умолчанию в Основной каталог сайта - загружается первый по порядку каталог
			ПараметрыСоединения = "/bitrix/admin/1c_exchange.php?type=get_catalog&mode=query&package="+НомерПакета;
			СтрокаСоединения = ?(Соединение.Защищенное=Истина, "https://", "http://") + Соединение.Сервер + ПараметрыСоединения;
			
			АдресЗапроса = ОбщегоНазначенияКлиентСервер.СтруктураURI(СтрокаСоединения);
			
			ЗапросHTTP = Новый HTTPЗапрос(АдресЗапроса.ПутьНаСервере);
			ЗапросHTTP.Заголовки["Cache-Control"]	= "no-cache";
			ЗапросHTTP.Заголовки["Content-type"]	= "application/json;charset=utf-8";
			ЗапросHTTP.Заголовки["Cookie"]	= ЗаголовокКуки;
			
			ОтветHTTP = Соединение.Получить(ЗапросHTTP);
			
			Если ОтветHTTP.КодСостояния<>200 Тогда
				ЗаписатьОшибку(Параметры, НСтр("ru = 'Ошибка! Ответ HTTP: '")+ОтветHTTP.КодСостояния);
				Возврат;
			КонецЕсли;
			
			ДанныеСтрока = ОтветHTTP.ПолучитьТелоКакСтроку();
			
			Если ДанныеСтрока = Неопределено Тогда 
				ЗаписатьОшибку(Параметры, НСтр("ru = 'Загрузка не выполнена.'"));
				Возврат;
			ИначеЕсли СтрНайти(ДанныеСтрока,"failure"+Символы.ПС+"Ошибка инициализации экспорта.")>0 Тогда
				ОписаниеОшибки = НСтр("ru = 'Проверьте настройку CMS - перейдите в раздел Администрирование - Магазин - Настройки - Интеграция с 1С 
				|Выберите каталог, который нужно выгрузить в 1С
				|Установите ''Количество элементов выгружаемых за один шаг (0 - выполнять выгрузку за один шаг)'': 20'");
				ТекстОшибки = ДанныеСтрока + Символы.ПС + ОписаниеОшибки;
				ЗаписатьОшибку(Параметры, ТекстОшибки);
				Возврат;
			ИначеЕсли СтрНайти(ДанныеСтрока,"При выполнении скрипта возникла ошибка.")>0 Тогда
				ТекстОшибки = ДанныеСтрока + Символы.ПС+"При выполнении скрипта возникла ошибка. Включить расширенный вывод ошибок можно в файле настроек <a href='https://dev.1c-bitrix.ru/learning/course/index.php?COURSE_ID=43&LESSON_ID=2795'>.settings.php</a>";
				ЗаписатьОшибку(Параметры, ТекстОшибки);
				Возврат;
			ИначеЕсли СтрНайти(ДанныеСтрока,"failure")>0 Тогда
				ЗаписатьОшибку(Параметры, ДанныеСтрока);
			КонецЕсли;
			
			Если НРег(СокрЛП(ДанныеСтрока)) = "finished=yes" Тогда 
				// Переход на другой каталог
				КонецПередачи = Истина;
				Прервать;
				
			ИначеЕсли СтрНайти(НРег(ДанныеСтрока), "not find catalog page")<>0 Тогда
				
				// Конец передачи, выход из процедуры
				КонецПередачи = Истина;
				Прервать;
				
			Иначе
				
				Если ПрочитаноПакетов = 100 Тогда КонецПередачи = Истина; Прервать; КонецЕсли; 
				ПрочитаноПакетов = ПрочитаноПакетов + 1;
				Параметры.Вставить("ПрочитаноПакетов", ПрочитаноПакетов);
				
				СтрокаXML = "";
				Если Лев(ДанныеСтрока, 2) = "PK" Тогда
					СтрокаXML = ОбменССайтом.РаспаковатьZIPАрхив(ОтветСервера, ТекстОшибки);
				Иначе
					НачалоXML = СтрНайти(ДанныеСтрока, "<?xml");
					Если НачалоXML <> 0 Тогда
						СтрокаXML = Сред(ДанныеСтрока, НачалоXML);
					КонецЕсли;
				КонецЕсли;
				
				Если ПустаяСтрока(СтрокаXML) Тогда
					ЗаписатьОшибку(Параметры, НСтр("ru = 'Не удалось прочитать данные, загруженные с сервера.'"));
					Возврат;
				КонецЕсли;
				
				НачалоКоммерческаяИнформация = СтрНайти(СтрокаXML, "<КоммерческаяИнформация");
				Если НачалоКоммерческаяИнформация<>0 Тогда
					КонецКоммерческаяИнформация = СтрНайти(Сред(СтрокаXML, НачалоКоммерческаяИнформация), ">");
					ТекстКоммерческаяИнформация = Сред(СтрокаXML, НачалоКоммерческаяИнформация, КонецКоммерческаяИнформация);
					
					Чтение = Новый ЧтениеXML;
					Чтение.УстановитьСтроку(ТекстКоммерческаяИнформация);
					Чтение.Прочитать();
					НомерПакета = Чтение.ПолучитьАтрибут("ПараметрПакета");
					Если НомерПакета=Неопределено Тогда
						ТекстОшибки = НСтр("ru = 'Не удалось прочитать данные, загруженные с сервера. Не найден параметр НомерПакета'")
						+ Символы.ПС + НСтр("ru = 'Возможно, требуется обновление модулей сайта (см. справку)'");
						ЗаписатьОшибку(Параметры, ТекстОшибки);
						Возврат;
					КонецЕсли;
				Иначе
					ЗаписатьОшибку(Параметры, НСтр("ru = 'Не удалось прочитать данные, загруженные с сервера. Не найден раздел КоммерческаяИнформация'"));
					Возврат;
				КонецЕсли;
				
				//****************************
				ПакетыДанныхСписок.Добавить(СтрокаXML, "Пакет"+НомерКаталога+ПрочитаноПакетов);
				СтруктураКаталогов.Вставить("Каталог"+НомерКаталога, Новый Структура("ПакетыДанных", ПакетыДанныхСписок));
				//****************************
				
				СформироватьЛогЗагрузки(Параметры.ШагиЗагрузки, НСтр("ru = 'Прочитано объектов: '")+РазмерПакетаЗагрузки()*ПрочитаноПакетов);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Параметры.ШагиЗагрузки.Вставить(2, НСтр("ru = 'Прочитано объектов: '")+РазмерПакетаЗагрузки()*ПрочитаноПакетов);
		СформироватьЛогЗагрузки(Параметры.ШагиЗагрузки);
		
	КонецЦикла; 
	
	Параметры.Вставить("ПрочитаноПакетов", ПрочитаноПакетов);
	
КонецПроцедуры

Функция ЗаписатьСтруктуруВСтрокуJSON(СтруктураДополнительныеПараметры)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураДополнительныеПараметры);
	СтрJSON = ЗаписьJSON.Закрыть();
	
	Возврат СтрJSON;
	
КонецФункции

Функция НайтиСоздатьХарактеристикуПоНаборуСвойств(Номенклатура, НаборыСвойствХарактеристики)
	
	Запрос = Новый Запрос;
	ЧислоОтборов = 1;
	НаименованиеХарактеристики = ""; ТекстСоединений=""; ТекстУсловий="";
	Для каждого стр Из НаборыСвойствХарактеристики Цикл
		
		Если ЧислоОтборов>1 Тогда
			ТекстСоединений = ТекстСоединений+" ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК Характеристики"+ЧислоОтборов
			+ " ПО Характеристики1.Ссылка = Характеристики"+ЧислоОтборов+".Ссылка";
		КонецЕсли;
		ТекстУсловий = ТекстУсловий + 
		" И Характеристики"+ЧислоОтборов+".Свойство = &Свойство"+ЧислоОтборов+
		" И Характеристики"+ЧислоОтборов+".Значение = &Значение"+ЧислоОтборов;
		
		Запрос.УстановитьПараметр("Свойство"+ЧислоОтборов, стр.Ключ);
		Запрос.УстановитьПараметр("Значение"+ЧислоОтборов, стр.Значение);
		
		ЧислоОтборов = ЧислоОтборов+1;
		НаименованиеХарактеристики = НаименованиеХарактеристики + стр.Значение+" "
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Характеристики1.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК Характеристики1
	|"+ТекстСоединений+"
	|ГДЕ
	|	Характеристики1.Ссылка.Владелец = &Владелец
	|"+ТекстУсловий;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		ОбъектХарактеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
		ОбъектХарактеристика.Наименование = СокрЛП(НаименованиеХарактеристики);
		ОбъектХарактеристика.НаименованиеДляПечати = НаименованиеХарактеристики;
		ОбъектХарактеристика.Владелец = Номенклатура;
		
		ЗаписатьСвойстваХарактеристики(ОбъектХарактеристика, НаборыСвойствХарактеристики);
		
		Возврат ОбъектХарактеристика.Ссылка;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьСвойстваХарактеристики(ОбъектХарактеристика, НаборыСвойствХарактеристики);
	
	ОбъектХарактеристика.ДополнительныеРеквизиты.Очистить();
	Для каждого стр Из НаборыСвойствХарактеристики Цикл
		
		НовСтр = ОбъектХарактеристика.ДополнительныеРеквизиты.Добавить();
		НовСтр.Свойство = стр.Ключ;
		НовСтр.Значение = стр.Значение;
	КонецЦикла;
	
	Попытка
		ОбъектХарактеристика.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗагрузитьСвойствоНоменклатуры(СвойствоXDTO, УзелОбмена, Параметры)
	
	ДопРеквизиты = Новый Структура;
	СтруктураОтбора = Новый Структура("Наименование", СвойствоXDTO.Наименование);
	
	ПротоколОбменаCMS = УзелОбмена.ПротоколОбменаCMS;
	
	Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Множественное", СвойствоXDTO)
		И (НРег(СвойствоXDTO.Множественное)="true" ИЛИ НРег(СвойствоXDTO.Множественное)="истина") Тогда
		Возврат;
	КонецЕсли;
	
	// Создать/найти Набор свойств
	Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Общее", СвойствоXDTO) Тогда
		Если (СвойствоXDTO.Общее = Истина ИЛИ СвойствоXDTO.Общее = НРег("true")
			ИЛИ СвойствоXDTO.Общее = НРег("истина")) Тогда
			СсылкаНаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие;
			// Общее свойство технического характера, которое загружать не нужно
			Возврат;
		Иначе
			СсылкаНаборСвойств = ОбменССайтом.СсылкаСоответствиеПоИд(СвойствоXDTO.ТипТовара, "Справочник.НаборыДополнительныхРеквизитовИСведений", УзелОбмена);
			Если СсылкаНаборСвойств=Неопределено Тогда
				// Общее свойство технического характера, которое загружать не нужно
				Возврат;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("ТипТовара", СвойствоXDTO) Тогда
		// Если это общий набор свойств, он не будет найден по коду
		// Если это набор свойств категории, он будет найден, так как был создан при загрузке категории ранее
		СсылкаНаборСвойств = ОбменССайтом.СсылкаСоответствиеПоИд(СвойствоXDTO.ТипТовара, "Справочник.НаборыДополнительныхРеквизитовИСведений", УзелОбмена);
		Если СсылкаНаборСвойств=Неопределено Тогда
			// Общее свойство технического характера, которое загружать не нужно
			Возврат;
		КонецЕсли;
	ИначеЕсли Параметры.ТипСайта=Перечисления.ПротоколыОбменаCMS.Битрикс Тогда
		// Все свойства загружаются в один общий набор свойств, одноименный с Категорией, загруженной ранее
		// Свойства товаров - в Категория.НаборСвойств,  Свойства характеристик - в Категория.НаборСвойствХарактеристики
		Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("ДляТоваров", СвойствоXDTO)
			И (СвойствоXDTO.ДляТоваров = НРег("true") ИЛИ СвойствоXDTO.ДляТоваров = НРег("истина")) Тогда
			
			СсылкаНаборСвойств = Параметры.КатегорияКлассификатор.НаборСвойств;
		ИначеЕсли НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("ДляПредложений", СвойствоXDTO)
			И (СвойствоXDTO.ДляПредложений = НРег("true") ИЛИ СвойствоXDTO.ДляПредложений = НРег("истина")) Тогда
			
			СсылкаНаборСвойств = Параметры.КатегорияКлассификатор.НаборСвойствХарактеристики;
		Иначе
			СсылкаНаборСвойств = Параметры.КатегорияКлассификатор.НаборСвойств;
		КонецЕсли;
	Иначе
		// Все свойства загружаются в общий набор свойств для всех товаров
		СсылкаНаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие;
	КонецЕсли;
	
	
	// Создать/найти План видов характеристик
	Если ПротоколОбменаCMS = Перечисления.ПротоколыОбменаCMS.UMI Тогда
		СсылкаПВХ = СсылкаСоответствиеПоИдСайта(СвойствоXDTO.СистемныйИд, "ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения", УзелОбмена);
	ИначеЕсли ПротоколОбменаCMS = Перечисления.ПротоколыОбменаCMS.Битрикс Тогда
		СсылкаПВХ = СсылкаСоответствиеПоИдСайта(СвойствоXDTO.Ид, "ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения", УзелОбмена);
	Иначе
		Возврат;
	КонецЕсли;
	Если СсылкаПВХ=Неопределено Тогда
		СтруктураОтбора.Вставить("НаборСвойств", СсылкаНаборСвойств);
		
		СсылкаПВХ = Неопределено;
		Если Параметры.ИспользоватьСопоставлениеПередЗагрузкой И Параметры.Свойство("СопоставлениеСвойств") Тогда
			
			СопоставлениеСвойств = Параметры.СопоставлениеСвойств;
			Отбор = Новый Структура("КлассификаторИд,Ид" , Параметры.КлассификаторИд , СвойствоXDTO.Ид);
			НайденныеСтроки = СопоставлениеСвойств.НайтиСтроки(Отбор);
			Для Каждого Стр Из НайденныеСтроки Цикл
				СсылкаПВХ = Стр.Свойство;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СсылкаПВХ) Тогда
			ДопРеквизиты.Вставить("Заголовок", СвойствоXDTO.Наименование);
			ДопРеквизиты.Вставить("Представление", СвойствоXDTO.Наименование);
			Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("ТипЗначений", СвойствоXDTO) Тогда
				Если СвойствоXDTO.ТипЗначений = "Булево" Тогда
					ДопРеквизиты.Вставить("ТипЗначения", Новый ОписаниеТипов("Булево"));
				ИначеЕсли СвойствоXDTO.ТипЗначений = "Строка" Тогда
					ДопРеквизиты.Вставить("ТипЗначения", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(1000, ДопустимаяДлина.Переменная)));
				ИначеЕсли СвойствоXDTO.ТипЗначений = "Число" Тогда
					ДопРеквизиты.Вставить("ТипЗначения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 5, ДопустимыйЗнак.Любой)));
				ИначеЕсли СвойствоXDTO.ТипЗначений = "Справочник" Тогда
					ДопРеквизиты.Вставить("ТипЗначения", Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
				КонецЕсли;
			Иначе
				ДопРеквизиты.Вставить("ТипЗначения", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
			КонецЕсли;
			
			ДопРеквизиты.Вставить("Доступен", Истина);
			ДопРеквизиты.Вставить("Виден", Истина);
			ДопРеквизиты.Вставить("Имя", СвойствоXDTO.Ид);
			ДопРеквизиты.Вставить("ДополнительныеЗначенияИспользуются", Истина);
			СсылкаПВХ = СоздатьИлиНайтиСуществующий(СтруктураОтбора, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения, ДопРеквизиты);
		КонецЕсли;
		
		ЗаписатьСоответствие(СвойствоXDTO, СсылкаПВХ, УзелОбмена);
		
	КонецЕсли;
	
	// Заполнить ПВХ в наборе свойств
	обНаборСвойств = СсылкаНаборСвойств.ПолучитьОбъект();
	НайденнаяСтрока = обНаборСвойств.ДополнительныеРеквизиты.Найти(СсылкаПВХ,"Свойство");
	Если НайденнаяСтрока = Неопределено Тогда
		НовСтр = обНаборСвойств.ДополнительныеРеквизиты.Добавить();
		НовСтр.Свойство = СсылкаПВХ;
		
		Попытка
			обНаборСвойств.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	
	// Создать/найти значения свойства
	Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("ВариантыЗначений", СвойствоXDTO) Тогда
		
		Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Справочник", СвойствоXDTO.ВариантыЗначений) Тогда
			МассивЗначенийСвойствXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(СвойствоXDTO.ВариантыЗначений.Справочник);
		ИначеЕсли НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Вариант", СвойствоXDTO.ВариантыЗначений) Тогда
			МассивЗначенийСвойствXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(СвойствоXDTO.ВариантыЗначений.Вариант);
		Иначе	
			МассивЗначенийСвойствXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(СвойствоXDTO.ВариантыЗначений);
		КонецЕсли;
		
		Для каждого ЗначениеСвойстваXDTO Из МассивЗначенийСвойствXDTO Цикл
			Если НЕ НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Значение", ЗначениеСвойстваXDTO)
				ИЛИ ЗначениеСвойстваXDTO.Значение=Неопределено
				ИЛИ ЗначениеСвойстваXDTO.Значение=""
				Тогда
				
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура("Наименование, Владелец", ЗначениеСвойстваXDTO.Значение, СсылкаПВХ);
			ДопРеквизиты = Новый Структура;
			СсылкаЗначениеСвойства = СоздатьИлиНайтиСуществующий(СтруктураОтбора, Справочники.ЗначенияСвойствОбъектов, ДопРеквизиты);
			
			Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("СистемныйИд", ЗначениеСвойстваXDTO)
				И ОбменССайтом.СвойствоXDTOЗаполнено(ЗначениеСвойстваXDTO.СистемныйИд) Тогда
				
				ЗаписатьСоответствие(ЗначениеСвойстваXDTO, СсылкаЗначениеСвойства, УзелОбмена);
			ИначеЕсли НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Вариант", ЗначениеСвойстваXDTO) Тогда
				ЗаписатьСоответствие(ЗначениеСвойстваXDTO.Вариант, СсылкаЗначениеСвойства, УзелОбмена);
			ИначеЕсли НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Ид", ЗначениеСвойстваXDTO) Тогда
				ЗаписатьСоответствие(ЗначениеСвойстваXDTO, СсылкаЗначениеСвойства, УзелОбмена);
			ИначеЕсли НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("ИдЗначения", ЗначениеСвойстваXDTO) Тогда
				ЗаписатьСоответствие(ЗначениеСвойстваXDTO, СсылкаЗначениеСвойства, УзелОбмена);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СсылкаНаборСвойств) И ЗначениеЗаполнено(СсылкаПВХ) И ЗначениеЗаполнено(СсылкаЗначениеСвойства) Тогда
				КатегорииНоменклатурыСервер.ДобавитьСвойствоВРегистр(СсылкаПВХ, СсылкаЗначениеСвойства, СсылкаНаборСвойств);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗагрузитьСвойствоХарактеристикиИЗначение(СвойствоXDTO, Параметры)
	
	// Создать/найти Набор свойств
	Если Параметры.ТипСайта=Перечисления.ПротоколыОбменаCMS.Битрикс Тогда
		СтруктураОтбора = Новый Структура("Наименование", Параметры.КатегорияКлассификатор.НаборСвойствХарактеристики.Наименование);
		СтруктураОтбора.Вставить("Родитель", Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры);
		ДопРеквизиты = Новый Структура;
		ДопРеквизиты.Вставить("Используется", Истина);
		СсылкаНаборСвойств = СоздатьИлиНайтиСуществующий(СтруктураОтбора, Справочники.НаборыДополнительныхРеквизитовИСведений, ДопРеквизиты);
	Иначе
		СсылкаНаборСвойств = Справочники.КатегорииНоменклатуры.БезКатегории.НаборСвойствХарактеристики;
	КонецЕсли;
	
	// Создать/найти План видов характеристик
	ДопРеквизиты = Новый Структура;
	СтруктураОтбора = Новый Структура("Наименование", СвойствоXDTO.Наименование);
	СтруктураОтбора.Вставить("НаборСвойств", СсылкаНаборСвойств);
	
	ДопРеквизиты.Вставить("Заголовок", СвойствоXDTO.Наименование);
	ДопРеквизиты.Вставить("Представление", СвойствоXDTO.Наименование);
	ДопРеквизиты.Вставить("ТипЗначения", Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	
	УИД = Новый УникальныйИдентификатор();
	СтрокаУИД = СтрЗаменить(Строка(УИД), "-", "");
	
	ИмяРеквизита = "";
	номерСимвола = 1;
	
	Пока номерСимвола <= СтрДлина(СвойствоXDTO.Наименование) Цикл
		ПроверяемыйСимвол = Сред(СвойствоXDTO.Наименование, номерСимвола, 1);
		Если Параметры.РазрешенныеСимволыИмениРеквизита.Получить(НРег(ПроверяемыйСимвол)) <> Неопределено Тогда
			ИмяРеквизита = ИмяРеквизита + ПроверяемыйСимвол;
		КонецЕсли;
		номерСимвола = номерСимвола + 1;
	КонецЦикла;
	ДопРеквизиты.Вставить("Имя", ИмяРеквизита + СтрокаУИД);
	
	ДопРеквизиты.Вставить("Доступен", Истина);
	ДопРеквизиты.Вставить("Виден", Истина);
	ДопРеквизиты.Вставить("ДополнительныеЗначенияИспользуются", Истина);
	СсылкаПВХ = СоздатьИлиНайтиСуществующий(СтруктураОтбора, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения, ДопРеквизиты);
	
	// Заполнить ПВХ в наборе свойств
	обНаборСвойств = СсылкаНаборСвойств.ПолучитьОбъект();
	НайденнаяСтрока = обНаборСвойств.ДополнительныеРеквизиты.Найти(СсылкаПВХ,"Свойство");
	Если НайденнаяСтрока = Неопределено Тогда
		НовСтр = обНаборСвойств.ДополнительныеРеквизиты.Добавить();
		НовСтр.Свойство = СсылкаПВХ;
		
		Попытка
			обНаборСвойств.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	//Значения Свойства
	Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("Значение", СвойствоXDTO) 
		И ОбменССайтом.СвойствоXDTOЗаполнено(СвойствоXDTO.Значение) Тогда
		
		СсылкаЗначениеСвойства = СсылкаСоответствиеПоИдСайта(СвойствоXDTO.Значение, "Справочник.ЗначенияСвойствОбъектов", Параметры.УзелОбмена);
		Если СсылкаЗначениеСвойства = Неопределено Тогда
			СтруктураОтбора = Новый Структура("Наименование, Владелец", СвойствоXDTO.Значение, СсылкаПВХ);
			ДопРеквизиты = Новый Структура;
			СсылкаЗначениеСвойства = СоздатьИлиНайтиСуществующий(СтруктураОтбора, Справочники.ЗначенияСвойствОбъектов, ДопРеквизиты);
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Новый Структура("ИмяСвойства, ЗначениеСвойства", СсылкаПВХ, СсылкаЗначениеСвойства);
	
КонецФункции

Функция ЭтоПерваяЦена(ВидЦен)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныНоменклатуры.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|ГДЕ
	|	ЦеныНоменклатуры.ВидЦен = &ВидЦен";
	
	Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции

Процедура УстановитьУчетВалютныхОпераций()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Валюты.Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты,
	|	Константа.ФункциональнаяУчетВалютныхОпераций КАК ФункциональнаяУчетВалютныхОпераций
	|ГДЕ
	|	НЕ Валюты.ПометкаУдаления
	|	И ФункциональнаяУчетВалютныхОпераций.Значение";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() > 1 Тогда
		Константы.ФункциональнаяУчетВалютныхОпераций.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ВалютаПоКлассификатору(ВалютаСтрокой)
	
	КлассификаторXML = Обработки.ЗагрузкаКурсовВалют.ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст();
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	Если ВалютаСтрокой="RUR" ИЛИ ВалютаСтрокой="RUB" Тогда
		ОтборПоКодуВалюты = Новый Структура("CodeSymbol", "RUB");
	Иначе
		ОтборПоКодуВалюты = Новый Структура("CodeSymbol", ВалютаСтрокой);
	КонецЕсли;
	
	СтрокиВалют = КлассификаторТаблица.НайтиСтроки(ОтборПоКодуВалюты);
	Для каждого стрВалюта Из СтрокиВалют Цикл
		МассивКодыВалют = Новый Массив;
		МассивКодыВалют.Добавить(стрВалюта.Code);
	КонецЦикла;
	МассивВалют = РаботаСКурсамиВалют.ДобавитьВалютыПоКоду(МассивКодыВалют);
	
	Возврат МассивВалют[0];
	
КонецФункции

#КонецОбласти

#КонецЕсли