
#Область ОписаниеПеременных

&НаКлиенте
Перем ИзмененПризнакВРаботе;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастройкиSMSВыполнены = ОтправкаSMS.НастройкаОтправкиSMSВыполнена();
	ДоступноПравоНастройкиSMS = Пользователи.ЭтоПолноправныйПользователь();
	
	РазрешеноИзменятьЗадачи      = Обработки.АссистентУправления.РазрешеноИзменятьЗадачи();
	ИспользоватьПодсистемуРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы");
	ИспользоватьЖурналЗаписи     = ПолучитьФункциональнуюОпцию("ПланироватьЗагрузкуРесурсовПредприятияЖурналЗаписи");
	ПланироватьЗагрузкуРесурсов  = ПолучитьФункциональнуюОпцию("ПланироватьЗагрузкуРесурсовПредприятияРаботы");
	ИспользоватьВидыЗаказНаряда  = ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказНарядов");
	
	Элементы.ЗадачиАссистента.ТолькоПросмотр = НЕ РазрешеноИзменятьЗадачи;
	ЭтотОбъект.ТолькоПросмотр                = НЕ РазрешеноИзменятьЗадачи;
		
	ОбновитьБлокиНастроекАссистента();
	ОбновитьЭлементыДействийАссистента();
	ЗаполнитьСписокВыбораЭлементовФормы();
		
	УстановитьПривилегированныйРежим(Истина);
	ПричинаОтменыЗаказа = Константы.ПричинаАвтоматическойОтменыЗаказаИзПисьма.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	КонецЕсли;
	
	УправлениеФормой();
	
	ИнформационнаяБазаЗарегистрирована = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	КлючСохраненияПоложенияОкна = Новый УникальныйИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ИзмененПризнакВРаботе = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РазрешеноИзменятьЗадачи Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьЗадачиВРаботе = ВРаботе_НапоминаниеОЗаписи ИЛИ ВРаботе_ОповещениеОбОтмене ИЛИ ВРаботе_ПодтверждениеЗаписи ИЛИ ВРаботе_СборОтзывов;
	
	Если НЕ ЕстьЗадачиВРаботе Тогда
		СоздатьИзменитьЗадачиАссистента();
		ЗакрытьФормуЗадач();
		Возврат;
	КонецЕсли;

	Если Не ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	СоздатьИзменитьЗадачиАссистента();
	ЗакрытьФормуЗадач();

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
		
	ЕстьОшибки = Ложь;
	ЕстьОшибки = ЕстьОшибкиЗадачиПодтверждения() ИЛИ ЕстьОшибкиЗадачиНапоминания() ИЛИ ЕстьОшибкиЗадачиОтмены()
		ИЛИ ЕстьОшибкиЗадачиОтзыва();
		
	
	Если ЗначениеЗаполнено(ВремяНачалаОповещения) И НЕ ЗначениеЗаполнено(ВремяОкончанияОповещения) Тогда
		
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(
			ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", 
			"Отправляй оповещения до"),,
			ВремяНачалаОповещения,,
			Отказ);
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВремяОкончанияОповещения) И НЕ ЗначениеЗаполнено(ВремяНачалаОповещения) Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(
			ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", 
			"Отправляй оповещения с"),,
			ВремяОкончанияОповещения,,
			Отказ);
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнены обязательные данные'"));
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПодтверждениеВидКИ_0ПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадачПодтверждения.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеШаблон_0ПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадачПодтверждения.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеПредмет_0ПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадачПодтверждения.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеВидЗаказа_0ПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадачПодтверждения.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НапоминаниеВидКИ_0ПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадачНапоминания.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура НапоминаниеШаблон_0ПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадачНапоминания.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура НапоминаниеВремя_0ПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадачНапоминания.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура НапоминаниеПредмет_0ПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадачНапоминания.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура НапоминаниеВидЗаказа_0ПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадачНапоминания.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОтменаВидКИ_0ПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадачОтмены.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаШаблон_0ПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадачОтмены.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОтменаПредмет_0ПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадачОтмены.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаВидЗаказа_0ПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадачОтмены.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОтзывВидКИ_0ПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадачОтзывы.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтзывШаблон_0ПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадачОтзывы.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОтзывВремя_0ПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадачОтзывы.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОтзывПредмет_0ПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадачОтзывы.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтзывВидЗаказа_0ПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадачОтзывы.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьПриИзменении(Элемент)
	
	УстановитьМодифицированностьЗадач(НастройкиЗадачПодтверждения);
	УстановитьМодифицированностьЗадач(НастройкиЗадачНапоминания);
	УстановитьМодифицированностьЗадач(НастройкиЗадачОтзывы);
	УстановитьМодифицированностьЗадач(НастройкиЗадачОтмены);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаСтатьюШаг1Нажатие(Элемент)
	ОткрытьФорму("Обработка.АссистентУправления.Форма.ФормаПодсказкиШаблоны");
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеШаблон_0НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачалоВыбораШаблонаСообщений(Элемент, НастройкиЗадачПодтверждения);
	
КонецПроцедуры

&НаКлиенте
Процедура НапоминаниеШаблон_0НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачалоВыбораШаблонаСообщений(Элемент, НастройкиЗадачНапоминания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаШаблон_0НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачалоВыбораШаблонаСообщений(Элемент, НастройкиЗадачОтмены);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтзывШаблон_0НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачалоВыбораШаблонаСообщений(Элемент, НастройкиЗадачОтзывы);
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация25Нажатие(Элемент)
	ОткрытьФорму("Обработка.АссистентУправления.Форма.ФормаПодсказкиГуглФормы");
КонецПроцедуры

&НаКлиенте
Процедура ПричинаОтменыЗаказаПриИзменении(Элемент)
	УстановитьМодифицированностьЗадач(НастройкиЗадачПодтверждения);
	УстановитьМодифицированностьЗадач(НастройкиЗадачНапоминания);
	УстановитьМодифицированностьЗадач(НастройкиЗадачОтмены);
	УстановитьМодифицированностьЗадач(НастройкиЗадачОтзывы);
КонецПроцедуры

&НаКлиенте
Процедура ВРаботе_ПодтверждениеЗаписиПриИзменении(Элемент)
	
	ИзмененПризнакВРаботе = Истина;
	УстановитьМодифицированностьЗадач(НастройкиЗадачПодтверждения);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВРаботе_НапоминаниеОЗаписиПриИзменении(Элемент)
	
	ИзмененПризнакВРаботе = Истина;
	УстановитьМодифицированностьЗадач(НастройкиЗадачНапоминания);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВРаботе_ОповещайОбОтменеПриИзменении(Элемент)
	
	ИзмененПризнакВРаботе = Истина;
	УстановитьМодифицированностьЗадач(НастройкиЗадачОтмены);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВРаботе_СобирайОтзывыПриИзменении(Элемент)
	
	ИзмененПризнакВРаботе = Истина;
	УстановитьМодифицированностьЗадач(НастройкиЗадачОтзывы);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалаОповещенияПриИзменении(Элемент)
	
	УстановитьМодифицированностьЗадач(НастройкиЗадачПодтверждения);
	УстановитьМодифицированностьЗадач(НастройкиЗадачНапоминания);
	УстановитьМодифицированностьЗадач(НастройкиЗадачОтмены);
	УстановитьМодифицированностьЗадач(НастройкиЗадачОтзывы);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончанияОповещенияПриИзменении(Элемент)
	
	УстановитьМодифицированностьЗадач(НастройкиЗадачПодтверждения);
	УстановитьМодифицированностьЗадач(НастройкиЗадачНапоминания);
	УстановитьМодифицированностьЗадач(НастройкиЗадачОтмены);
	УстановитьМодифицированностьЗадач(НастройкиЗадачОтзывы);
	УправлениеФормой();

КонецПроцедуры

&НаКлиенте
Процедура ТекстОшибкиОбсуждениеНажатие(Элемент)
	НачатьПодключениеОбсуждений();
КонецПроцедуры

&НаКлиенте
Процедура ТекстОшибкиSMSНажатие(Элемент)
	ОткрытьФорму("ОбщаяФорма.НастройкаОтправкиSMS",,ЭтаФорма,,,,Новый ОписаниеОповещения("ОтправкаSMSПроверкаНастроек", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПодтверждениеУдалитьНажатие(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадачПодтверждения.Получить(Индекс);
	СтрокаНастроек.Удалена = Истина;
	СтрокаНастроек.Модифицированность = Истина;
	
	ОбновитьЭлементыДействийИЗаполнитьСписокВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНапоминаниеУдалитьНажатие(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадачНапоминания.Получить(Индекс);
	СтрокаНастроек.Удалена = Истина;
	СтрокаНастроек.Модифицированность = Истина;
	
	ОбновитьЭлементыДействийИЗаполнитьСписокВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтменаУдалитьНажатие(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадачОтмены.Получить(Индекс);
	СтрокаНастроек.Удалена = Истина;
	СтрокаНастроек.Модифицированность = Истина;
	
	ОбновитьЭлементыДействийИЗаполнитьСписокВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтзывУдалитьНажатие(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадачОтзывы.Получить(Индекс);
	СтрокаНастроек.Удалена = Истина;
	СтрокаНастроек.Модифицированность = Истина;
	
	ОбновитьЭлементыДействийИЗаполнитьСписокВыбора();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьЗадачуНапоминания(Команда)
	ДобавитьЗадачуНапоминанияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗадачуОповещенияОбОтмене(Команда)
	ДобавитьЗадачуОповещенияОбОтменеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗадачуСборОтзыва(Команда)
	ДобавитьЗадачуСборОтзываНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗадачуПодтверждения(Команда)
	ДобавитьЗадачуПодтвержденияНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОтправкаSMSПроверкаНастроек(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПослеВыбораШаблона(ДанныеСообщения, ДополнительныеПараметры) Экспорт
	
	Если ДанныеСообщения = Неопределено ИЛИ ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиЗадач = ДополнительныеПараметры.ТаблицаЗадач;
	СтрокаНастроек = НастройкиЗадач.Получить(ДополнительныеПараметры.Индекс);
	СтрокаНастроек.ШаблонСообщения = ДанныеСообщения;
	СтрокаНастроек.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДействийИЗаполнитьСписокВыбора()
	ОбновитьЭлементыДействийАссистента();
	ЗаполнитьСписокВыбораЭлементовФормы();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексБлока(ЭлементИмя)
	
	Возврат Прав(ЭлементИмя, СтрДлина(ЭлементИмя) - СтрНайти(ЭлементИмя, "_"));
	
КонецФункции

&НаКлиенте
Процедура НачатьПодключениеОбсуждений()
	
	Продолжение = Новый ОписаниеОповещения("ЗавершитьПодключениеОбсуждений", ЭтотОбъект);
	ОбсужденияКлиент.ПоказатьПодключение(Продолжение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПодключениеОбсуждений(Результат, ДополнительныеПараметры) Экспорт
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМодифицированностьЗадач(НастройкиЗадач)
	
	Для Каждого СтрокаНастроек Из НастройкиЗадач Цикл
		СтрокаНастроек.Модифицированность = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура СогласоватьТипКИШаблонСообщения(Задача)
	
	Если НЕ ЗначениеЗаполнено(Задача.ШаблонСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСообщения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача.ШаблонСообщения, 
		"ПредназначенДляSMS, ПолноеИмяТипаПараметраВводаНаОсновании"); 

	ЗадачаСМС   = Задача.СпособОповещения = Перечисления.ВидыКаналовСвязи.SMS И ДанныеСообщения.ПредназначенДляSMS;
	ЗадачаЕмейл = Задача.СпособОповещения = Перечисления.ВидыКаналовСвязи.Email И НЕ ДанныеСообщения.ПредназначенДляSMS;
	СогласованныеДанныеКИ = ЗадачаСМС ИЛИ ЗадачаЕмейл;
	
	Если НЕ СогласованныеДанныеКИ Тогда
		Задача.ШаблонСообщения = Неопределено;
	КонецЕсли;
	
	ЗадачаПоЗаказу  = Задача.Предмет = "ЗаказНаряд" И ДанныеСообщения.ПолноеИмяТипаПараметраВводаНаОсновании = "Документ.ЗаказПокупателя";
	ЗадачаПоСобытию = Задача.Предмет = "Событие" И ДанныеСообщения.ПолноеИмяТипаПараметраВводаНаОсновании = "Документ.Событие";
	
	СогласованныеДанныеПредмет = ЗадачаПоЗаказу ИЛИ ЗадачаПоСобытию;
		
	Если НЕ СогласованныеДанныеПредмет Тогда
		Задача.ШаблонСообщения = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораШаблонаСообщений(Элемент, НастройкиЗадач)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Индекс", Индекс);
	ДополнительныеПараметры.Вставить("ТаблицаЗадач", НастройкиЗадач);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоШаблонуПослеВыбораШаблона", ЭтотОбъект, ДополнительныеПараметры);
	
	Если СтрокаНастроек.СпособОповещения = ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.SMS") Тогда
		ТипШаблона = "СообщениеSMS";
	Иначе
		ТипШаблона = "Письмо";
	КонецЕсли;
	
	Если СтрокаНастроек.Предмет = "ЗаказНаряд" Тогда
		ПредметСообщения = "Документ.ЗаказПокупателя";
	Иначе
		ПредметСообщения = "Документ.Событие";
	КонецЕсли;
	
	ШаблоныСообщенийКлиент.ВыбратьШаблон(ОписаниеОповещения, ТипШаблона, ПредметСообщения);

КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой

&НаСервере
Процедура ЗаполнитьСписокВыбораЭлементовФормы()
	
	Для Итератор = 0 По НастройкиЗадачПодтверждения.Количество() - 1 Цикл
		
		Если НастройкиЗадачПодтверждения[Итератор].Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы["ПодтверждениеВидКИ_" + Итератор].СписокВыбора.Очистить();
		Элементы["ПодтверждениеВидКИ_" + Итератор].СписокВыбора.Добавить(Перечисления.ВидыКаналовСвязи.Email, "E-mail");
		Элементы["ПодтверждениеВидКИ_" + Итератор].СписокВыбора.Добавить(Перечисления.ВидыКаналовСвязи.SMS, "SMS");
		
		Элементы["ПодтверждениеПредмет_" + Итератор].СписокВыбора.Очистить();
		Элементы["ПодтверждениеПредмет_" + Итератор].СписокВыбора.Добавить("ЗаказНаряд", НСтр("ru='заказ-наряда'"));
		Элементы["ПодтверждениеПредмет_" + Итератор].СписокВыбора.Добавить("Событие", НСтр("ru='событие: запись'"));
		
	КонецЦикла;
	
	Для Итератор = 0 По НастройкиЗадачНапоминания.Количество() - 1 Цикл
		
		Если НастройкиЗадачНапоминания[Итератор].Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы["НапоминаниеВидКИ_" + Итератор].СписокВыбора.Очистить();
		Элементы["НапоминаниеВидКИ_" + Итератор].СписокВыбора.Добавить(Перечисления.ВидыКаналовСвязи.Email, "E-mail");
		Элементы["НапоминаниеВидКИ_" + Итератор].СписокВыбора.Добавить(Перечисления.ВидыКаналовСвязи.SMS, "SMS");
		
		Элементы["НапоминаниеПредмет_" + Итератор].СписокВыбора.Очистить();
		Элементы["НапоминаниеПредмет_" + Итератор].СписокВыбора.Добавить("ЗаказНаряд", НСтр("ru='заказ-наряда'"));
		Элементы["НапоминаниеПредмет_" + Итератор].СписокВыбора.Добавить("Событие", НСтр("ru='событие: запись'"));
		
		Элементы["НапоминаниеВремя_" + Итератор].СписокВыбора.Очистить();
		Элементы["НапоминаниеВремя_" + Итератор].СписокВыбора.Добавить(2, НСтр("ru='2-4 часа'"));
		Элементы["НапоминаниеВремя_" + Итератор].СписокВыбора.Добавить(4, НСтр("ru='4-8 часов'"));
		Элементы["НапоминаниеВремя_" + Итератор].СписокВыбора.Добавить(8, НСтр("ru='8-12 часов'"));
		Элементы["НапоминаниеВремя_" + Итератор].СписокВыбора.Добавить(24, НСтр("ru='1 день'"));
		Элементы["НапоминаниеВремя_" + Итератор].СписокВыбора.Добавить(48, НСтр("ru='2 дня'"));
		
	КонецЦикла;

	Для Итератор = 0 По НастройкиЗадачОтмены.Количество() - 1 Цикл
		
		Если НастройкиЗадачОтмены[Итератор].Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы["ОтменаВидКИ_" + Итератор].СписокВыбора.Очистить();
		Элементы["ОтменаВидКИ_" + Итератор].СписокВыбора.Добавить(Перечисления.ВидыКаналовСвязи.Email, "E-mail");
		Элементы["ОтменаВидКИ_" + Итератор].СписокВыбора.Добавить(Перечисления.ВидыКаналовСвязи.SMS, "SMS");
		
		Элементы["ОтменаПредмет_" + Итератор].СписокВыбора.Очистить();
		Элементы["ОтменаПредмет_" + Итератор].СписокВыбора.Добавить("ЗаказНаряд", НСтр("ru='заказ-наряда'"));
		Элементы["ОтменаПредмет_" + Итератор].СписокВыбора.Добавить("Событие", НСтр("ru='событие: запись'"));
		
	КонецЦикла;
	
	Для Итератор = 0 По НастройкиЗадачОтзывы.Количество() - 1 Цикл
		
		Если НастройкиЗадачОтзывы[Итератор].Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы["ОтзывВидКИ_" + Итератор].СписокВыбора.Очистить();
		Элементы["ОтзывВидКИ_" + Итератор].СписокВыбора.Добавить(Перечисления.ВидыКаналовСвязи.Email, "E-mail");
		Элементы["ОтзывВидКИ_" + Итератор].СписокВыбора.Добавить(Перечисления.ВидыКаналовСвязи.SMS, "SMS");
		
		Элементы["ОтзывПредмет_" + Итератор].СписокВыбора.Очистить();
		Элементы["ОтзывПредмет_" + Итератор].СписокВыбора.Добавить("ЗаказНаряд", НСтр("ru='заказ-наряда'"));
		Элементы["ОтзывПредмет_" + Итератор].СписокВыбора.Добавить("Событие", НСтр("ru='событие: запись'"));
		
		Элементы["ОтзывВремя_" + Итератор].СписокВыбора.Очистить();
		Элементы["ОтзывВремя_" + Итератор].СписокВыбора.Добавить(2, НСтр("ru='2-4 часа'"));
		Элементы["ОтзывВремя_" + Итератор].СписокВыбора.Добавить(4, НСтр("ru='4-8 часов'"));
		Элементы["ОтзывВремя_" + Итератор].СписокВыбора.Добавить(8, НСтр("ru='8-12 часов'"));
		Элементы["ОтзывВремя_" + Итератор].СписокВыбора.Добавить(24, НСтр("ru='1 день'"));
		Элементы["ОтзывВремя_" + Итератор].СписокВыбора.Добавить(48, НСтр("ru='2 дня'"));
		
	КонецЦикла;


КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДействийАссистента()
	
	ОбновитьБлокиЭлементовЗадачиПодтверждения();
	ОбновитьБлокиЭлементовЗадачиНапоминания();
	ОбновитьБлокиЭлементовЗадачиОтмены();
	ОбновитьБлокиЭлементовЗадачиОтзыв();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	ИспользоватьСобытияИЗаказы = ИспользоватьЖурналЗаписи И ПланироватьЗагрузкуРесурсов;
	ИспользоватьРаботыИВиды    = ИспользоватьВидыЗаказНаряда И ПланироватьЗагрузкуРесурсов;
	ИнформационнаяБазаЗарегистрирована = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	НастройкиSMSВыполнены = ОтправкаSMS.НастройкаОтправкиSMSВыполнена();
		
	Для Каждого ЗадачаПодтверждения Из НастройкиЗадачПодтверждения Цикл
		Если ЗадачаПодтверждения.Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексЗадачи = НастройкиЗадачПодтверждения.Индекс(ЗадачаПодтверждения);
		Элементы["Подтверждение_"+ИндексЗадачи+"_Строка_1"].Видимость = ИспользоватьСобытияИЗаказы ИЛИ ИспользоватьРаботыИВиды;
		Элементы["ПодтверждениеВидЗаказа_"+ИндексЗадачи].Видимость    = ИспользоватьРаботыИВиды И ЗадачаПодтверждения.Предмет = "ЗаказНаряд";
		Элементы["ПодтверждениеНадпись_"+ИндексЗадачи].Видимость      = НЕ ИспользоватьСобытияИЗаказы И ИспользоватьРаботыИВиды;
		Элементы["ПодтверждениеПредмет_"+ИндексЗадачи].Видимость      = ИспользоватьСобытияИЗаказы;
		
		Если ИспользоватьРаботыИВиды И НЕ ИспользоватьСобытияИЗаказы Тогда
			Элементы["ПодтверждениеВидЗаказа_"+ИндексЗадачи].МаксимальнаяШирина = 41;
		КонецЕсли;
		
		Если ЗадачаПодтверждения.Предмет = "ЗаказНаряд" И НЕ ЗначениеЗаполнено(ЗадачаПодтверждения.ДляВидаЗаказНаряда) Тогда
			ЗадачаПодтверждения.ДляВидаЗаказНаряда = Справочники.ВидыЗаказНарядов.Основной;
		КонецЕсли;
		
		СогласоватьТипКИШаблонСообщения(ЗадачаПодтверждения);
		
	КонецЦикла;
	
	Для Каждого ЗадачаНапоминания Из НастройкиЗадачНапоминания Цикл
		Если ЗадачаНапоминания.Удалена Тогда
			Продолжить;
		КонецЕсли;

		ИндексЗадачи = НастройкиЗадачНапоминания.Индекс(ЗадачаНапоминания);
		Элементы["НапоминаниеНадпись_"+ИндексЗадачи].Видимость    = НЕ ИспользоватьСобытияИЗаказы И ИспользоватьРаботыИВиды;
		
		Если ИспользоватьРаботыИВиды Тогда
			Элементы["НапоминаниеНадпись_"+ИндексЗадачи].Заголовок = НСтр("ru = 'до начала заказ-наряда'");
			Элементы["НапоминаниеВидЗаказа_"+ИндексЗадачи].МаксимальнаяШирина = 24;
		КонецЕсли;
		
		Элементы["НапоминаниеПредмет_"+ИндексЗадачи].Видимость    = ИспользоватьСобытияИЗаказы;
		Элементы["НапоминаниеВидЗаказа_"+ИндексЗадачи].Видимость  = ИспользоватьРаботыИВиды И ЗадачаНапоминания.Предмет = "ЗаказНаряд";
		
		Если ЗадачаНапоминания.Предмет = "ЗаказНаряд" И НЕ ЗначениеЗаполнено(ЗадачаНапоминания.ДляВидаЗаказНаряда) Тогда
			ЗадачаНапоминания.ДляВидаЗаказНаряда = Справочники.ВидыЗаказНарядов.Основной;
		КонецЕсли;

		СогласоватьТипКИШаблонСообщения(ЗадачаНапоминания);
		
	КонецЦикла;
	
	Для Каждого ЗадачаОтмены Из НастройкиЗадачОтмены Цикл
		Если ЗадачаОтмены.Удалена Тогда
			Продолжить;
		КонецЕсли;

		ИндексЗадачи = НастройкиЗадачОтмены.Индекс(ЗадачаОтмены);
		Элементы["ОтменаНадпись_"+ИндексЗадачи].Видимость    = НЕ ИспользоватьСобытияИЗаказы И ИспользоватьРаботыИВиды;
		Элементы["ОтменаПредмет_"+ИндексЗадачи].Видимость    = ИспользоватьСобытияИЗаказы;
		Элементы["ОтменаВидЗаказа_"+ИндексЗадачи].Видимость  = ИспользоватьРаботыИВиды И ЗадачаОтмены.Предмет = "ЗаказНаряд";
		Если ИспользоватьРаботыИВиды Тогда
			Элементы["ОтменаНадпись_"+ИндексЗадачи].Заголовок      = НСтр("ru = 'для подтверждения отмены заказ-наряда'");
			Элементы["ОтменаВидЗаказа_"+ИндексЗадачи].МаксимальнаяШирина = 36;
		КонецЕсли;
		
		Если ЗадачаОтмены.Предмет = "ЗаказНаряд" И НЕ ЗначениеЗаполнено(ЗадачаОтмены.ДляВидаЗаказНаряда) Тогда
			ЗадачаОтмены.ДляВидаЗаказНаряда = Справочники.ВидыЗаказНарядов.Основной;
		КонецЕсли;
		
		СогласоватьТипКИШаблонСообщения(ЗадачаОтмены);
		
	КонецЦикла;
	
	Для Каждого ЗадачаОтзыв Из НастройкиЗадачОтзывы Цикл
		Если ЗадачаОтзыв.Удалена Тогда
			Продолжить;
		КонецЕсли;

		ИндексЗадачи = НастройкиЗадачОтзывы.Индекс(ЗадачаОтзыв);
		Элементы["ОтзывНадпись_"+ИндексЗадачи].Видимость    = НЕ ИспользоватьСобытияИЗаказы И ИспользоватьРаботыИВиды;
		Элементы["ОтзывПредмет_"+ИндексЗадачи].Видимость    = ИспользоватьСобытияИЗаказы;
		Элементы["ОтзывВидЗаказа_"+ИндексЗадачи].Видимость  = ИспользоватьРаботыИВиды И ЗадачаОтзыв.Предмет = "ЗаказНаряд";;
		
		Если ИспользоватьРаботыИВиды Тогда
			Элементы["ОтзывНадпись_"+ИндексЗадачи].Заголовок      = НСтр("ru = 'после завершения заказ-наряда'");
			Элементы["ОтзывВидЗаказа_"+ИндексЗадачи].МаксимальнаяШирина = 15;
		КонецЕсли;
		
		Если ЗадачаОтзыв.Предмет = "ЗаказНаряд" И НЕ ЗначениеЗаполнено(ЗадачаОтзыв.ДляВидаЗаказНаряда) Тогда
			ЗадачаОтзыв.ДляВидаЗаказНаряда = Справочники.ВидыЗаказНарядов.Основной;
		КонецЕсли;

		СогласоватьТипКИШаблонСообщения(ЗадачаОтзыв);
	КонецЦикла;
	
	Элементы.ВремяНачалаОповещения.АвтоОтметкаНезаполненного = ЗначениеЗаполнено(ВремяОкончанияОповещения);
	Элементы.ВремяОкончанияОповещения.АвтоОтметкаНезаполненного = ЗначениеЗаполнено(ВремяНачалаОповещения);
		
	ПроверитьНастройки();
	
КонецПроцедуры

#КонецОбласти 

#Область ЗадачиАссистента

&НаСервере
Функция ЕстьОшибкиЗадачиПодтверждения()
	
	Если НЕ ВРаботе_ПодтверждениеЗаписи Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Задача Из НастройкиЗадачПодтверждения Цикл
		
		Если НЕ ЗначениеЗаполнено(Задача.СпособОповещения) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Задача.ШаблонСообщения) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Задача.Предмет) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если Задача.Предмет = "ЗаказНаряд" И НЕ ЗначениеЗаполнено(Задача.ДляВидаЗаказНаряда) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если Задача.СпособОповещения = Перечисления.ВидыКаналовСвязи.Email И НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПричинаОтменыЗаказа) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЕстьОшибкиЗадачиНапоминания()
	
	Если НЕ ВРаботе_НапоминаниеОЗаписи Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Задача Из НастройкиЗадачНапоминания Цикл
		
		Если НЕ ЗначениеЗаполнено(Задача.СпособОповещения) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Задача.ШаблонСообщения) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Задача.Предмет) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Задача.ЧасовДоСобытия) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если Задача.Предмет = "ЗаказНаряд" И НЕ ЗначениеЗаполнено(Задача.ДляВидаЗаказНаряда) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если Задача.СпособОповещения = Перечисления.ВидыКаналовСвязи.Email И НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПричинаОтменыЗаказа) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЕстьОшибкиЗадачиОтмены()
	
	Если НЕ ВРаботе_ОповещениеОбОтмене Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Задача Из НастройкиЗадачОтмены Цикл
		
		Если НЕ ЗначениеЗаполнено(Задача.СпособОповещения) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Задача.ШаблонСообщения) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Задача.Предмет) Тогда
			Возврат Истина;
		КонецЕсли;
				
		Если Задача.Предмет = "ЗаказНаряд" И НЕ ЗначениеЗаполнено(Задача.ДляВидаЗаказНаряда) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если Задача.СпособОповещения = Перечисления.ВидыКаналовСвязи.Email И НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
			Возврат Истина;
		КонецЕсли;

	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЕстьОшибкиЗадачиОтзыва()
	
	Если НЕ ВРаботе_СборОтзывов Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Задача Из НастройкиЗадачОтзывы Цикл
		
		Если НЕ ЗначениеЗаполнено(Задача.СпособОповещения) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Задача.ШаблонСообщения) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Задача.Предмет) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Задача.ЧасовДоСобытия) Тогда
			Возврат Истина;
		КонецЕсли;

		Если Задача.Предмет = "ЗаказНаряд" И НЕ ЗначениеЗаполнено(Задача.ДляВидаЗаказНаряда) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если Задача.СпособОповещения = Перечисления.ВидыКаналовСвязи.Email И НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
			Возврат Истина;
		КонецЕсли;

	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ОбновитьБлокиНастроекАссистента()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачиАссистентаПоНапоминаниямОЗаписи.Ссылка КАК Ссылка,
	|	ЗадачиАссистентаПоНапоминаниямОЗаписи.ДляВидаЗаказНаряда КАК ДляВидаЗаказНаряда,
	|	ЗадачиАссистентаПоНапоминаниямОЗаписи.ДляДокументаСобытие КАК ДляДокументаСобытие,
	|	ЗадачиАссистентаПоНапоминаниямОЗаписи.Идентификатор КАК Идентификатор,
	|	ЗадачиАссистентаПоНапоминаниямОЗаписи.Используется КАК Используется,
	|	ЗадачиАссистентаПоНапоминаниямОЗаписи.НеОтправлятьСообщенияПосле КАК НеОтправлятьСообщенияПосле,
	|	ЗадачиАссистентаПоНапоминаниямОЗаписи.ОповеститьСразу КАК ОповеститьСразу,
	|	ЗадачиАссистентаПоНапоминаниямОЗаписи.ОповещатьДоСобытия КАК ОповещатьДоСобытия,
	|	ЗадачиАссистентаПоНапоминаниямОЗаписи.ОтборСостояниеПредмета КАК ОтборСостояниеПредмета,
	|	ЗадачиАссистентаПоНапоминаниямОЗаписи.ОтменятьОснованиеЗапись КАК ОтменятьОснованиеЗапись,
	|	ЗадачиАссистентаПоНапоминаниямОЗаписи.ОтправлятьСообщенияС КАК ОтправлятьСообщенияС,
	|	ЗадачиАссистентаПоНапоминаниямОЗаписи.СпособОповещения КАК СпособОповещения,
	|	ЗадачиАссистентаПоНапоминаниямОЗаписи.УчетнаяЗапись КАК УчетнаяЗапись,
	|	ЗадачиАссистентаПоНапоминаниямОЗаписи.ЧасовДоСобытия КАК ЧасовДоСобытия,
	|	ЗадачиАссистентаПоНапоминаниямОЗаписи.ШаблонСообщения КАК ШаблонСообщения,
	|	ЗадачиАссистентаПоНапоминаниямОЗаписи.Предопределенный КАК Предопределенный
	|ИЗ
	|	Справочник.ЗадачиАссистентаПоНапоминаниямОЗаписи КАК ЗадачиАссистентаПоНапоминаниямОЗаписи
	|ГДЕ
	|	ЗадачиАссистентаПоНапоминаниямОЗаписи.ПометкаУдаления = ЛОЖЬ";
	
	
	Результат = Запрос.Выполнить();
	ТаблицаЗадач = Результат.Выгрузить();
	
	ОбновитьБлокиНастроекЗадачПодтверждений(ТаблицаЗадач);
	ОбновитьБлокиНастроекЗадачНапоминаний(ТаблицаЗадач);
	ОбновитьБлокиНастроекЗадачОтмены(ТаблицаЗадач);
	ОбновитьБлокиНастроекЗадачОтзывы(ТаблицаЗадач);
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьПустыеНастройкиЗадачиПодтверждения()
	
	НоваяНастройка = НастройкиЗадачПодтверждения.Добавить();
	НоваяНастройка.СпособОповещения   = Перечисления.ВидыКаналовСвязи.Email;
	НоваяНастройка.ШаблонСообщения    = ШаблонСообщенияДляПодтвержденияЗаписи();
	НоваяНастройка.Предмет            = "ЗаказНаряд";
	НоваяНастройка.ДляВидаЗаказНаряда = Справочники.ВидыЗаказНарядов.Основной;
	НоваяНастройка.Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ДобавитьПустыеНастройкиЗадачиНапоминания()
	
	НоваяНастройка = НастройкиЗадачНапоминания.Добавить();
	НоваяНастройка.СпособОповещения   = Перечисления.ВидыКаналовСвязи.Email;
	НоваяНастройка.ШаблонСообщения    = ШаблонСообщенияДляНапоминанияОЗаписи();
	НоваяНастройка.Предмет            = "ЗаказНаряд";
	НоваяНастройка.ДляВидаЗаказНаряда = Справочники.ВидыЗаказНарядов.Основной;
	НоваяНастройка.ЧасовДоСобытия = 2;
	НоваяНастройка.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПустыеНастройкиЗадачиОтмены()
	
	НоваяНастройка = НастройкиЗадачОтмены.Добавить();
	НоваяНастройка.СпособОповещения   = Перечисления.ВидыКаналовСвязи.Email;
	НоваяНастройка.ШаблонСообщения    = ШаблонСообщенияДляПодтвержденияОтмены();
	НоваяНастройка.Предмет            = "ЗаказНаряд";
	НоваяНастройка.ДляВидаЗаказНаряда = Справочники.ВидыЗаказНарядов.Основной;
	НоваяНастройка.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПустыеНастройкиЗадачиОтзыва()
	
	НоваяНастройка = НастройкиЗадачОтзывы.Добавить();
	НоваяНастройка.СпособОповещения   = Перечисления.ВидыКаналовСвязи.Email;
	НоваяНастройка.ШаблонСообщения    = ШаблонСообщенияДляСбораОтзыва();
	НоваяНастройка.Предмет            = "ЗаказНаряд";
	НоваяНастройка.ДляВидаЗаказНаряда = Справочники.ВидыЗаказНарядов.Основной;
	НоваяНастройка.ЧасовДоСобытия = 2;
	НоваяНастройка.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьИзменитьЗадачиНапоминания()

	НачатьТранзакцию();
	
	Попытка
		
		Для каждого СтрокаНастроек Из НастройкиЗадачНапоминания Цикл
						
			ЗадачаИзменена = СтрокаНастроек.Модифицированность;
			
			Если НЕ ЗадачаИзменена Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаНастроек.Задача) Тогда
				ЗадачаОбъект = СтрокаНастроек.Задача.ПолучитьОбъект();
			Иначе
				ЗадачаОбъект = Справочники.ЗадачиАссистентаПоНапоминаниямОЗаписи.СоздатьЭлемент();
				АвторИзменений = Пользователи.АвторизованныйПользователь();
				ЕстьЗадачиПользователя = АссистентУправления.ЕстьЗадачиПользователя(АвторИзменений);
			КонецЕсли;
			
			ЗадачаОбъект.Заблокировать();
			
			Если СтрокаНастроек.Удалена И ЗначениеЗаполнено(ЗадачаОбъект.Ссылка) Тогда
				ЗадачаОбъект.Удалить();
			КонецЕсли;
			
			Если СтрокаНастроек.Удалена Тогда
				СтрокаНастроек.Модифицированность = Ложь;
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ЗадачаОбъект, СтрокаНастроек);
			
			ЗадачаОбъект.Наименование = НСтр("ru = 'Напоминание о записи'");
			ЗадачаОбъект.Используется = ВРаботе_НапоминаниеОЗаписи;
			ЗадачаОбъект.ДляДокументаСобытие = СтрокаНастроек.Предмет = "Событие";
			Если ЗадачаОбъект.ДляДокументаСобытие Тогда
				ЗадачаОбъект.ДляВидаЗаказНаряда = Справочники.СостоянияЗаказНарядов.ПустаяСсылка();
			КонецЕсли;
			
			ЗадачаОбъект.УчетнаяЗапись = УчетнаяЗапись;
			ЗадачаОбъект.Идентификатор = Справочники.ЗадачиАссистентаПоНапоминаниямОЗаписи.ИдентификаторЗадачаНапоминаниеОЗаписи();
			ЗадачаОбъект.НеОтправлятьСообщенияПосле = ВремяОкончанияОповещения;
			ЗадачаОбъект.ОтправлятьСообщенияС       = ВремяНачалаОповещения;
			ЗадачаОбъект.ОповещатьДоСобытия         = Истина;
			
			ЗадачаОбъект.Записать();
			ЗадачаОбъект.Разблокировать();

			СтрокаНастроек.Модифицированность = Ложь;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
//	
КонецПроцедуры

&НаСервере
Процедура СоздатьИзменитьЗадачиПодтверждения()
	
	НачатьТранзакцию();
	
	Попытка
		
		Для каждого СтрокаНастроек Из НастройкиЗадачПодтверждения Цикл
						
			ЗадачаИзменена = СтрокаНастроек.Модифицированность;
			
			Если НЕ ЗадачаИзменена Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаНастроек.Задача) Тогда
				ЗадачаОбъект = СтрокаНастроек.Задача.ПолучитьОбъект();
			Иначе
				ЗадачаОбъект = Справочники.ЗадачиАссистентаПоНапоминаниямОЗаписи.СоздатьЭлемент();
				АвторИзменений = Пользователи.АвторизованныйПользователь();
				ЕстьЗадачиПользователя = Справочники.ЗадачиАссистентаУправления.ЕстьЗадачиПользователя(АвторИзменений);
			КонецЕсли;
			
			ЗадачаОбъект.Заблокировать();
			
			Если СтрокаНастроек.Удалена И ЗначениеЗаполнено(ЗадачаОбъект.Ссылка) Тогда
				ЗадачаОбъект.Удалить();
			КонецЕсли;
			
			Если СтрокаНастроек.Удалена Тогда
				СтрокаНастроек.Модифицированность = Ложь;
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ЗадачаОбъект, СтрокаНастроек);
			
			ЗадачаОбъект.Наименование = НСтр("ru = 'Подтверждение записи'");
			ЗадачаОбъект.Используется = ВРаботе_ПодтверждениеЗаписи;
			ЗадачаОбъект.ДляДокументаСобытие = СтрокаНастроек.Предмет = "Событие";
			Если ЗадачаОбъект.ДляДокументаСобытие Тогда
				ЗадачаОбъект.ДляВидаЗаказНаряда = Справочники.СостоянияЗаказНарядов.ПустаяСсылка();
				СтрокаНастроек.ДляВидаЗаказНаряда = Справочники.СостоянияЗаказНарядов.ПустаяСсылка();
			КонецЕсли;

			ЗадачаОбъект.УчетнаяЗапись = УчетнаяЗапись;
			ЗадачаОбъект.Идентификатор = Справочники.ЗадачиАссистентаПоНапоминаниямОЗаписи.ИдентификаторЗадачаПодтверждениеЗаписи();
			ЗадачаОбъект.НеОтправлятьСообщенияПосле = ВремяОкончанияОповещения;
			ЗадачаОбъект.ОтправлятьСообщенияС       = ВремяНачалаОповещения;
			ЗадачаОбъект.ОповеститьСразу            = Истина;
			
			ЗадачаОбъект.Записать();
			ЗадачаОбъект.Разблокировать();
			
			СтрокаНастроек.Модифицированность = Ложь;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
//	
КонецПроцедуры

&НаСервере
Процедура СоздатьИзменитьЗадачиОтмены()
	
	НачатьТранзакцию();
	
	Попытка
		
		Для каждого СтрокаНастроек Из НастройкиЗадачОтмены Цикл
						
			ЗадачаИзменена = СтрокаНастроек.Модифицированность;
			
			Если НЕ ЗадачаИзменена Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаНастроек.Задача) Тогда
				ЗадачаОбъект = СтрокаНастроек.Задача.ПолучитьОбъект();
			Иначе
				ЗадачаОбъект = Справочники.ЗадачиАссистентаПоНапоминаниямОЗаписи.СоздатьЭлемент();
				АвторИзменений = Пользователи.АвторизованныйПользователь();
				ЕстьЗадачиПользователя = Справочники.ЗадачиАссистентаУправления.ЕстьЗадачиПользователя(АвторИзменений);
			КонецЕсли;
			
			ЗадачаОбъект.Заблокировать();
			
			Если СтрокаНастроек.Удалена И ЗначениеЗаполнено(ЗадачаОбъект.Ссылка) Тогда
				ЗадачаОбъект.Удалить();
			КонецЕсли;
			
			Если СтрокаНастроек.Удалена Тогда
				СтрокаНастроек.Модифицированность = Ложь;
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ЗадачаОбъект, СтрокаНастроек);
			
			ЗадачаОбъект.Наименование = НСтр("ru = 'Подтверждение отмены записи'");
			ЗадачаОбъект.Используется = ВРаботе_ОповещениеОбОтмене;
			ЗадачаОбъект.ДляДокументаСобытие = СтрокаНастроек.Предмет = "Событие";
			Если ЗадачаОбъект.ДляДокументаСобытие Тогда
				ЗадачаОбъект.ДляВидаЗаказНаряда = Справочники.СостоянияЗаказНарядов.ПустаяСсылка();
				СтрокаНастроек.ДляВидаЗаказНаряда = Справочники.СостоянияЗаказНарядов.ПустаяСсылка();
			КонецЕсли;

			ЗадачаОбъект.УчетнаяЗапись = УчетнаяЗапись;
			ЗадачаОбъект.Идентификатор = Справочники.ЗадачиАссистентаПоНапоминаниямОЗаписи.ИдентификаторЗадачаПодтверждениеОтменыЗаписи();
			ЗадачаОбъект.НеОтправлятьСообщенияПосле = ВремяОкончанияОповещения;
			ЗадачаОбъект.ОтправлятьСообщенияС       = ВремяНачалаОповещения;
			ЗадачаОбъект.ОповеститьСразу            = Истина;
			
			Если СтрокаНастроек.Предмет = "ЗаказНаряд" Тогда
				ЗадачаОбъект.ОтборСостояниеПредмета = Справочники.СостоянияЗаказНарядов.Завершен;
			Иначе
				ЗадачаОбъект.ОтборСостояниеПредмета = Справочники.СостоянияСобытий.Отменено;
			КонецЕсли;
			
			ЗадачаОбъект.Записать();
			ЗадачаОбъект.Разблокировать();
			
			СтрокаНастроек.Модифицированность = Ложь;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
//	
КонецПроцедуры

&НаСервере
Процедура СоздатьИзменитьЗадачиОтзыва()
	
	НачатьТранзакцию();
	
	Попытка
		
		Для каждого СтрокаНастроек Из НастройкиЗадачОтзывы Цикл
						
			ЗадачаИзменена = СтрокаНастроек.Модифицированность;
			
			Если НЕ ЗадачаИзменена Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаНастроек.Задача) Тогда
				ЗадачаОбъект = СтрокаНастроек.Задача.ПолучитьОбъект();
			Иначе
				ЗадачаОбъект = Справочники.ЗадачиАссистентаПоНапоминаниямОЗаписи.СоздатьЭлемент();
				АвторИзменений = Пользователи.АвторизованныйПользователь();
				ЕстьЗадачиПользователя = Справочники.ЗадачиАссистентаУправления.ЕстьЗадачиПользователя(АвторИзменений);
			КонецЕсли;
			
			ЗадачаОбъект.Заблокировать();
			
			Если СтрокаНастроек.Удалена И ЗначениеЗаполнено(ЗадачаОбъект.Ссылка) Тогда
				ЗадачаОбъект.Удалить();
			КонецЕсли;
			
			Если СтрокаНастроек.Удалена Тогда
				СтрокаНастроек.Модифицированность = Ложь;
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ЗадачаОбъект, СтрокаНастроек);
			
			ЗадачаОбъект.Наименование = НСтр("ru = 'Запрос на сбор отзыва'");
			ЗадачаОбъект.Используется = ВРаботе_СборОтзывов;
			ЗадачаОбъект.ДляДокументаСобытие = СтрокаНастроек.Предмет = "Событие";
			
			Если ЗадачаОбъект.ДляДокументаСобытие Тогда
				ЗадачаОбъект.ДляВидаЗаказНаряда = Справочники.СостоянияЗаказНарядов.ПустаяСсылка();
				СтрокаНастроек.ДляВидаЗаказНаряда = Справочники.СостоянияЗаказНарядов.ПустаяСсылка();
			КонецЕсли;

			ЗадачаОбъект.УчетнаяЗапись = УчетнаяЗапись;
			ЗадачаОбъект.Идентификатор = Справочники.ЗадачиАссистентаПоНапоминаниямОЗаписи.ИдентификаторЗадачаПроведениеОпросаПослеЗаписи();
			ЗадачаОбъект.НеОтправлятьСообщенияПосле = ВремяОкончанияОповещения;
			ЗадачаОбъект.ОтправлятьСообщенияС       = ВремяНачалаОповещения;
			ЗадачаОбъект.ОповещатьДоСобытия         = Ложь;
		
			ЗадачаОбъект.Записать();
			ЗадачаОбъект.Разблокировать();
			
			СтрокаНастроек.Модифицированность = Ложь;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
//	
КонецПроцедуры

&НаСервере
Процедура ОбновитьБлокиНастроекЗадачПодтверждений(ТаблицаЗадач)
	
	ЗадачиПодтверждения = ТаблицаЗадач.НайтиСтроки(Новый Структура("Идентификатор", 
		Справочники.ЗадачиАссистентаПоНапоминаниямОЗаписи.ИдентификаторЗадачаПодтверждениеЗаписи()));
	
	Для Каждого ЗадачаПодтверждения Из ЗадачиПодтверждения Цикл
		
		НоваяЗадача = НастройкиЗадачПодтверждения.Добавить();
		НоваяЗадача.Задача = ЗадачаПодтверждения.Ссылка;
		ЗаполнитьЗначенияСвойств(НоваяЗадача, ЗадачаПодтверждения);
		
		Если ЗадачаПодтверждения.ДляДокументаСобытие Тогда
			НоваяЗадача.Предмет = "Событие";
		Иначе
			НоваяЗадача.Предмет = "ЗаказНаряд";
		КонецЕсли;
		
		ВРаботе_ПодтверждениеЗаписи = ЗадачаПодтверждения.Используется;
		УчетнаяЗапись            = ЗадачаПодтверждения.УчетнаяЗапись;
		ВремяНачалаОповещения    = ЗадачаПодтверждения.ОтправлятьСообщенияС;
		ВремяОкончанияОповещения = ЗадачаПодтверждения.НеОтправлятьСообщенияПосле;

	КонецЦикла;
	
	Если НастройкиЗадачПодтверждения.Количество() = 0 Тогда
		ДобавитьПустыеНастройкиЗадачиПодтверждения();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьБлокиНастроекЗадачНапоминаний(ТаблицаЗадач)
	
	ЗадачиНапоминания = ТаблицаЗадач.НайтиСтроки(Новый Структура("Идентификатор", 
		Справочники.ЗадачиАссистентаПоНапоминаниямОЗаписи.ИдентификаторЗадачаНапоминаниеОЗаписи()));
	
	Для Каждого ЗадачаНапоминания Из ЗадачиНапоминания Цикл
		
		НоваяЗадача = НастройкиЗадачНапоминания.Добавить();
		НоваяЗадача.Задача = ЗадачаНапоминания.Ссылка;
		ЗаполнитьЗначенияСвойств(НоваяЗадача, ЗадачаНапоминания);
		
		Если ЗадачаНапоминания.ДляДокументаСобытие Тогда
			НоваяЗадача.Предмет = "Событие";
		Иначе
			НоваяЗадача.Предмет = "ЗаказНаряд";
		КонецЕсли;
		
		ВРаботе_НапоминаниеОЗаписи = ЗадачаНапоминания.Используется;
		УчетнаяЗапись = ЗадачаНапоминания.УчетнаяЗапись;
		
		ВремяНачалаОповещения    = ЗадачаНапоминания.ОтправлятьСообщенияС;
		ВремяОкончанияОповещения = ЗадачаНапоминания.НеОтправлятьСообщенияПосле;
		
	КонецЦикла;
	
	Если НастройкиЗадачНапоминания.Количество() = 0 Тогда
		ДобавитьПустыеНастройкиЗадачиНапоминания();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьБлокиНастроекЗадачОтмены(ТаблицаЗадач)
	
	ЗадачиОтмены = ТаблицаЗадач.НайтиСтроки(Новый Структура("Идентификатор", 
		Справочники.ЗадачиАссистентаПоНапоминаниямОЗаписи.ИдентификаторЗадачаПодтверждениеОтменыЗаписи()));
	
	Для Каждого ЗадачаОтмены Из ЗадачиОтмены Цикл
		
		НоваяЗадача        = НастройкиЗадачОтмены.Добавить();
		НоваяЗадача.Задача = ЗадачаОтмены.Ссылка;
		ЗаполнитьЗначенияСвойств(НоваяЗадача, ЗадачаОтмены);
		
		Если ЗадачаОтмены.ДляДокументаСобытие Тогда
			НоваяЗадача.Предмет = "Событие";
		Иначе
			НоваяЗадача.Предмет = "ЗаказНаряд";
		КонецЕсли;
		
		ВРаботе_ОповещениеОбОтмене = ЗадачаОтмены.Используется;
		УчетнаяЗапись = ЗадачаОтмены.УчетнаяЗапись;
		
		ВремяНачалаОповещения    = ЗадачаОтмены.ОтправлятьСообщенияС;
		ВремяОкончанияОповещения = ЗадачаОтмены.НеОтправлятьСообщенияПосле;
	КонецЦикла;
	
	Если НастройкиЗадачОтмены.Количество() = 0 Тогда
		ДобавитьПустыеНастройкиЗадачиОтмены();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьБлокиНастроекЗадачОтзывы(ТаблицаЗадач)
	
	ЗадачиОтзывы = ТаблицаЗадач.НайтиСтроки(Новый Структура("Идентификатор", 
		Справочники.ЗадачиАссистентаПоНапоминаниямОЗаписи.ИдентификаторЗадачаПроведениеОпросаПослеЗаписи()));
	
	Для Каждого ЗадачаОтзыв Из ЗадачиОтзывы Цикл
		
		НоваяЗадача        = НастройкиЗадачОтзывы.Добавить();
		НоваяЗадача.Задача = ЗадачаОтзыв.Ссылка;
		ЗаполнитьЗначенияСвойств(НоваяЗадача, ЗадачаОтзыв);
		
		Если ЗадачаОтзыв.ДляДокументаСобытие Тогда
			НоваяЗадача.Предмет = "Событие";
		Иначе
			НоваяЗадача.Предмет = "ЗаказНаряд";
		КонецЕсли;
		
		ВРаботе_СборОтзывов = ЗадачаОтзыв.Используется;
		УчетнаяЗапись = ЗадачаОтзыв.УчетнаяЗапись;
		
		ВремяНачалаОповещения    = ЗадачаОтзыв.ОтправлятьСообщенияС;
		ВремяОкончанияОповещения = ЗадачаОтзыв.НеОтправлятьСообщенияПосле;
	КонецЦикла;

	Если НастройкиЗадачОтзывы.Количество() = 0 Тогда
		ДобавитьПустыеНастройкиЗадачиОтзыва();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СоздатьИзменитьЗадачиАссистента()
	
	СоздатьИзменитьЗадачиПодтверждения();
	СоздатьИзменитьЗадачиНапоминания();
	СоздатьИзменитьЗадачиОтмены();
	СоздатьИзменитьЗадачиОтзыва();
	
	Константы.ПричинаАвтоматическойОтменыЗаказаИзПисьма.Установить(ПричинаОтменыЗаказа);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗадачуПодтвержденияНаСервере()
	
	ДобавитьПустыеНастройкиЗадачиПодтверждения();
	ОбновитьБлокиЭлементовЗадачиПодтверждения();
	УправлениеФормой();
	ЗаполнитьСписокВыбораЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеПоля(ДобавляемыйЭлемент, ЭлементФормы)
	
	ДобавляемыйЭлемент.Вид = ЭлементФормы.Вид;
	ДобавляемыйЭлемент.ПоложениеЗаголовка = ЭлементФормы.ПоложениеЗаголовка;
	ДобавляемыйЭлемент.Заголовок = ЭлементФормы.Заголовок;
	ДобавляемыйЭлемент.АвтоМаксимальнаяШирина = ЭлементФормы.АвтоМаксимальнаяШирина;
	ДобавляемыйЭлемент.МаксимальнаяШирина = ЭлементФормы.МаксимальнаяШирина;
	ДобавляемыйЭлемент.РежимВыбораИзСписка = ЭлементФормы.РежимВыбораИзСписка;
	ДобавляемыйЭлемент.КнопкаВыпадающегоСписка = ЭлементФормы.КнопкаВыпадающегоСписка;
	ДобавляемыйЭлемент.КнопкаОткрытия = ЭлементФормы.КнопкаОткрытия;
	ДобавляемыйЭлемент.КнопкаВыбора = ЭлементФормы.КнопкаВыбора;
	ДобавляемыйЭлемент.АвтоОтметкаНезаполненного = ЭлементФормы.АвтоОтметкаНезаполненного;
	ДобавляемыйЭлемент.ОтображениеПодсказки = ЭлементФормы.ОтображениеПодсказки;
	ДобавляемыйЭлемент.Подсказка = ЭлементФормы.Подсказка;
	ДобавляемыйЭлемент.ИсторияВыбораПриВводе = ЭлементФормы.ИсторияВыбораПриВводе;
	ДобавляемыйЭлемент.БыстрыйВыбор = ЭлементФормы.БыстрыйВыбор;
	ДобавляемыйЭлемент.КнопкаСоздания = ЭлементФормы.КнопкаСоздания;
	ДобавляемыйЭлемент.КнопкаОткрытия = ЭлементФормы.КнопкаОткрытия;
	ДобавляемыйЭлемент.ПодсказкаВвода = ЭлементФормы.ПодсказкаВвода;

КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеГруппы(ДобавляемаяГруппа, ГруппаФормы)
	
	ДобавляемаяГруппа.Вид = ГруппаФормы.Вид;
	ДобавляемаяГруппа.Отображение = ГруппаФормы.Отображение;
	ДобавляемаяГруппа.Группировка = ГруппаФормы.Группировка;
	ДобавляемаяГруппа.ОтображатьЗаголовок = ГруппаФормы.ОтображатьЗаголовок;
	ДобавляемаяГруппа.ЦветФона = ГруппаФормы.ЦветФона;
	ДобавляемаяГруппа.СквозноеВыравнивание = ГруппаФормы.СквозноеВыравнивание;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьБлокиЭлементовЗадачиПодтверждения()
	
	Элементы.Переместить(Элементы.ГруппаКомандаПодтверждения, Элементы.ЗадачиПодтвержденияЗаписи);
	УдаляемыеЭлементы = Новый Массив;
	Для ИндексГруппы = 1 По Элементы.ГруппаЗадачПодтверждения.ПодчиненныеЭлементы.Количество()-1 Цикл
		УдаляемыеЭлементы.Добавить(Элементы.ГруппаЗадачПодтверждения.ПодчиненныеЭлементы[ИндексГруппы]);
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;

	Для Каждого СтрокаНастроек Из НастройкиЗадачПодтверждения Цикл
		
		ИндексНастройки = НастройкиЗадачПодтверждения.Индекс(СтрокаНастроек);
		Если НастройкиЗадачПодтверждения[ИндексНастройки].Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИндексНастройки > 0 Тогда
			
			ГруппаДействия = Элементы.Добавить("ГруппаПодтверждение_" + ИндексНастройки, Тип("ГруппаФормы"), Элементы.ГруппаЗадачПодтверждения);
			УстановитьОформлениеГруппы(ГруппаДействия, Элементы.ГруппаПодтверждение_0);
			
			ОбщаяГруппаДействия = Элементы.Добавить("Подтверждение_" + ИндексНастройки, Тип("ГруппаФормы"), ГруппаДействия);
			УстановитьОформлениеГруппы(ОбщаяГруппаДействия, Элементы.Подтверждение_0);
									
			ГруппаПервойСтрокиДействия = Элементы.Добавить("Подтверждение_" + ИндексНастройки + "_Строка_0", Тип("ГруппаФормы"), ОбщаяГруппаДействия);
			УстановитьОформлениеГруппы(ГруппаПервойСтрокиДействия, Элементы.Подтверждение_0_Строка_0);
				
			ПолеВидКИ = Элементы.Добавить("ПодтверждениеВидКИ_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеВидКИ.ПутьКДанным = "НастройкиЗадачПодтверждения[" + ИндексНастройки + "].СпособОповещения";
			УстановитьОформлениеПоля(ПолеВидКИ, Элементы.ПодтверждениеВидКИ_0);
			ПолеВидКИ.УстановитьДействие("ПриИзменении","ПодтверждениеВидКИ_0ПриИзменении");
						
			ПолеШаблонСообщения = Элементы.Добавить("ПодтверждениеШаблон_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеШаблонСообщения.ПутьКДанным = "НастройкиЗадачПодтверждения[" + ИндексНастройки + "].ШаблонСообщения";
			УстановитьОформлениеПоля(ПолеШаблонСообщения, Элементы.ПодтверждениеШаблон_0);
			ПолеШаблонСообщения.УстановитьДействие("ПриИзменении","ПодтверждениеШаблон_0ПриИзменении");
			ПолеШаблонСообщения.УстановитьДействие("НачалоВыбора", "ПодтверждениеШаблон_0НачалоВыбора");
			
			ГруппаВторойСтрокиДействия = Элементы.Добавить("Подтверждение_" + ИндексНастройки + "_Строка_1", Тип("ГруппаФормы"), ОбщаяГруппаДействия);
			УстановитьОформлениеГруппы(ГруппаВторойСтрокиДействия, Элементы.Подтверждение_0_Строка_1);
			
			ПолеПредмет = Элементы.Добавить("ПодтверждениеПредмет_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаВторойСтрокиДействия);
			ПолеПредмет.ПутьКДанным = "НастройкиЗадачПодтверждения[" + ИндексНастройки + "].Предмет";
			УстановитьОформлениеПоля(ПолеПредмет, Элементы.ПодтверждениеПредмет_0);
			ПолеПредмет.УстановитьДействие("ПриИзменении","ПодтверждениеПредмет_0ПриИзменении");
			
			ДекорацияНадпись = Элементы.Добавить("ПодтверждениеНадпись_" + ИндексНастройки, Тип("ДекорацияФормы"), ГруппаВторойСтрокиДействия);
			ДекорацияНадпись.Вид = Элементы.ПодтверждениеНадпись_0.Вид;
			ДекорацияНадпись.Заголовок = Элементы.ПодтверждениеНадпись_0.Заголовок;
			ДекорацияНадпись.Ширина = Элементы.ПодтверждениеНадпись_0.Ширина;
			ДекорацияНадпись.Высота = Элементы.ПодтверждениеНадпись_0.Высота;

			ПолеВидЗаказа = Элементы.Добавить("ПодтверждениеВидЗаказа_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаВторойСтрокиДействия);
			ПолеВидЗаказа.ПутьКДанным = "НастройкиЗадачПодтверждения[" + ИндексНастройки + "].ДляВидаЗаказНаряда";
			УстановитьОформлениеПоля(ПолеВидЗаказа, Элементы.ПодтверждениеВидЗаказа_0);
			ПолеВидЗаказа.УстановитьДействие("ПриИзменении","ПодтверждениеВидЗаказа_0ПриИзменении");
			
			ДекорацияУдалить = Элементы.Добавить("ДекорацияПодтверждениеУдалить_" + ИндексНастройки, Тип("ДекорацияФормы"), ГруппаДействия);
			ДекорацияУдалить.Вид = Элементы.ДекорацияПодтверждениеУдалить_0.Вид;
			ДекорацияУдалить.Заголовок = Элементы.ДекорацияПодтверждениеУдалить_0.Заголовок;
			ДекорацияУдалить.Ширина = Элементы.ДекорацияПодтверждениеУдалить_0.Ширина;
			ДекорацияУдалить.Высота = Элементы.ДекорацияПодтверждениеУдалить_0.Высота;
			ДекорацияУдалить.Картинка = Элементы.ДекорацияПодтверждениеУдалить_0.Картинка;
			ДекорацияУдалить.РазмерКартинки = Элементы.ДекорацияПодтверждениеУдалить_0.РазмерКартинки;
			ДекорацияУдалить.Гиперссылка = Элементы.ДекорацияПодтверждениеУдалить_0.Гиперссылка;
			ДекорацияУдалить.УстановитьДействие("Нажатие", "ДекорацияПодтверждениеУдалитьНажатие");
												
		КонецЕсли;
	КонецЦикла;
	
	Элементы.Переместить(Элементы.ГруппаКомандаПодтверждения, Элементы["ГруппаЗадачПодтверждения"]);	
КонецПроцедуры

&НаСервере
Процедура ОбновитьБлокиЭлементовЗадачиНапоминания()
	
	Элементы.Переместить(Элементы.ГруппаКомандНапоминания, Элементы.ЗадачиНапоминания);
	УдаляемыеЭлементы = Новый Массив;
	Для ИндексГруппы = 1 По Элементы.ГруппаЗадачНапоминания.ПодчиненныеЭлементы.Количество()-1 Цикл
		УдаляемыеЭлементы.Добавить(Элементы.ГруппаЗадачНапоминания.ПодчиненныеЭлементы[ИндексГруппы]);
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;

	Для Каждого СтрокаНастроек Из НастройкиЗадачНапоминания Цикл
		
		ИндексНастройки = НастройкиЗадачНапоминания.Индекс(СтрокаНастроек);
		Если НастройкиЗадачНапоминания[ИндексНастройки].Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИндексНастройки > 0 Тогда
			
			ГруппаДействия = Элементы.Добавить("ГруппаНапоминание_" + ИндексНастройки, Тип("ГруппаФормы"), Элементы.ГруппаЗадачНапоминания);
			УстановитьОформлениеГруппы(ГруппаДействия, Элементы.ГруппаНапоминание_0);
			
			ОбщаяГруппаДействия = Элементы.Добавить("Напоминание_" + ИндексНастройки, Тип("ГруппаФормы"), ГруппаДействия);
			УстановитьОформлениеГруппы(ОбщаяГруппаДействия, Элементы.Напоминание_0);
									
			ГруппаПервойСтрокиДействия = Элементы.Добавить("Напоминание_" + ИндексНастройки + "_Строка_0", Тип("ГруппаФормы"), ОбщаяГруппаДействия);
			УстановитьОформлениеГруппы(ГруппаПервойСтрокиДействия, Элементы.Напоминание_0_Строка_1);
				
			ПолеВидКИ = Элементы.Добавить("НапоминаниеВидКИ_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеВидКИ.ПутьКДанным = "НастройкиЗадачНапоминания[" + ИндексНастройки + "].СпособОповещения";
			УстановитьОформлениеПоля(ПолеВидКИ, Элементы.НапоминаниеВидКИ_0);
			ПолеВидКИ.УстановитьДействие("ПриИзменении","НапоминаниеВидКИ_0ПриИзменении");
						
			ПолеШаблонСообщения = Элементы.Добавить("НапоминаниеШаблон_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеШаблонСообщения.ПутьКДанным = "НастройкиЗадачНапоминания[" + ИндексНастройки + "].ШаблонСообщения";
			УстановитьОформлениеПоля(ПолеШаблонСообщения, Элементы.НапоминаниеШаблон_0);
			ПолеШаблонСообщения.УстановитьДействие("ПриИзменении","НапоминаниеШаблон_0ПриИзменении");
			ПолеШаблонСообщения.УстановитьДействие("НачалоВыбора", "НапоминаниеШаблон_0НачалоВыбора");

			ГруппаВторойСтрокиДействия = Элементы.Добавить("Напоминание_" + ИндексНастройки + "_Строка_1", Тип("ГруппаФормы"), ОбщаяГруппаДействия);
			УстановитьОформлениеГруппы(ГруппаВторойСтрокиДействия, Элементы.Напоминание_0_Строка_1);
			
			ПолеВремя = Элементы.Добавить("НапоминаниеВремя_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаВторойСтрокиДействия);
			ПолеВремя.ПутьКДанным = "НастройкиЗадачНапоминания[" + ИндексНастройки + "].ЧасовДоСобытия";
			УстановитьОформлениеПоля(ПолеВремя, Элементы.НапоминаниеВремя_0);
			ПолеВремя.УстановитьДействие("ПриИзменении","НапоминаниеВремя_0ПриИзменении");

			ПолеПредмет = Элементы.Добавить("НапоминаниеПредмет_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаВторойСтрокиДействия);
			ПолеПредмет.ПутьКДанным = "НастройкиЗадачНапоминания[" + ИндексНастройки + "].Предмет";
			УстановитьОформлениеПоля(ПолеПредмет, Элементы.НапоминаниеПредмет_0);
			ПолеПредмет.УстановитьДействие("ПриИзменении","НапоминаниеПредмет_0ПриИзменении");
			
			ДекорацияНадпись = Элементы.Добавить("НапоминаниеНадпись_" + ИндексНастройки, Тип("ДекорацияФормы"), ГруппаВторойСтрокиДействия);
			ДекорацияНадпись.Вид = Элементы.НапоминаниеНадпись_0.Вид;
			ДекорацияНадпись.Заголовок = Элементы.НапоминаниеНадпись_0.Заголовок;
			ДекорацияНадпись.Ширина = Элементы.НапоминаниеНадпись_0.Ширина;
			ДекорацияНадпись.Высота = Элементы.НапоминаниеНадпись_0.Высота;

			ПолеВидЗаказа = Элементы.Добавить("НапоминаниеВидЗаказа_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаВторойСтрокиДействия);
			ПолеВидЗаказа.ПутьКДанным = "НастройкиЗадачНапоминания[" + ИндексНастройки + "].ДляВидаЗаказНаряда";
			УстановитьОформлениеПоля(ПолеВидЗаказа, Элементы.НапоминаниеВидЗаказа_0);
			ПолеВидЗаказа.УстановитьДействие("ПриИзменении","НапоминаниеВидЗаказа_0ПриИзменении");
			
			ДекорацияУдалить = Элементы.Добавить("ДекорацияНапоминаниеУдалить_" + ИндексНастройки, Тип("ДекорацияФормы"), ГруппаДействия);
			ДекорацияУдалить.Вид = Элементы.ДекорацияНапоминаниеУдалить_0.Вид;
			ДекорацияУдалить.Заголовок = Элементы.ДекорацияНапоминаниеУдалить_0.Заголовок;
			ДекорацияУдалить.Ширина = Элементы.ДекорацияНапоминаниеУдалить_0.Ширина;
			ДекорацияУдалить.Высота = Элементы.ДекорацияНапоминаниеУдалить_0.Высота;
			ДекорацияУдалить.Картинка = Элементы.ДекорацияНапоминаниеУдалить_0.Картинка;
			ДекорацияУдалить.РазмерКартинки = Элементы.ДекорацияНапоминаниеУдалить_0.РазмерКартинки;
			ДекорацияУдалить.Гиперссылка = Элементы.ДекорацияНапоминаниеУдалить_0.Гиперссылка;
			ДекорацияУдалить.УстановитьДействие("Нажатие", "ДекорацияНапоминаниеУдалитьНажатие");
												
		КонецЕсли;
	КонецЦикла;
	
	Элементы.Переместить(Элементы.ГруппаКомандНапоминания, Элементы["ГруппаЗадачНапоминания"]);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьБлокиЭлементовЗадачиОтмены()
	
	Элементы.Переместить(Элементы.ГруппаКомандОтмены, Элементы.ЗадачиОтмены);
	УдаляемыеЭлементы = Новый Массив;
	Для ИндексГруппы = 1 По Элементы.ГруппаЗадачОтмены.ПодчиненныеЭлементы.Количество()-1 Цикл
		УдаляемыеЭлементы.Добавить(Элементы.ГруппаЗадачОтмены.ПодчиненныеЭлементы[ИндексГруппы]);
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;

	Для Каждого СтрокаНастроек Из НастройкиЗадачОтмены Цикл
		
		ИндексНастройки = НастройкиЗадачОтмены.Индекс(СтрокаНастроек);
		Если НастройкиЗадачОтмены[ИндексНастройки].Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИндексНастройки > 0 Тогда
			
			ГруппаДействия = Элементы.Добавить("ГруппаОтмена_" + ИндексНастройки, Тип("ГруппаФормы"), Элементы.ГруппаЗадачОтмены);
			УстановитьОформлениеГруппы(ГруппаДействия, Элементы.ГруппаОтмена_0);
			
			ОбщаяГруппаДействия = Элементы.Добавить("Отмена_" + ИндексНастройки, Тип("ГруппаФормы"), ГруппаДействия);
			УстановитьОформлениеГруппы(ОбщаяГруппаДействия, Элементы.Отмена_0);
									
			ГруппаПервойСтрокиДействия = Элементы.Добавить("Отмена_" + ИндексНастройки + "_Строка_0", Тип("ГруппаФормы"), ОбщаяГруппаДействия);
			УстановитьОформлениеГруппы(ГруппаПервойСтрокиДействия, Элементы.Отмена_0_Строка_1);
				
			ПолеВидКИ = Элементы.Добавить("ОтменаВидКИ_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеВидКИ.ПутьКДанным = "НастройкиЗадачОтмены[" + ИндексНастройки + "].СпособОповещения";
			УстановитьОформлениеПоля(ПолеВидКИ, Элементы.ОтменаВидКИ_0);
			ПолеВидКИ.УстановитьДействие("ПриИзменении","ОтменаВидКИ_0ПриИзменении");
						
			ПолеШаблонСообщения = Элементы.Добавить("ОтменаШаблон_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеШаблонСообщения.ПутьКДанным = "НастройкиЗадачОтмены[" + ИндексНастройки + "].ШаблонСообщения";
			УстановитьОформлениеПоля(ПолеШаблонСообщения, Элементы.ОтменаШаблон_0);
			ПолеШаблонСообщения.УстановитьДействие("ПриИзменении","ОтменаШаблон_0ПриИзменении");
			ПолеШаблонСообщения.УстановитьДействие("НачалоВыбора", "ОтменаШаблон_0НачалоВыбора");
			
			ГруппаВторойСтрокиДействия = Элементы.Добавить("Отмена_" + ИндексНастройки + "_Строка_1", Тип("ГруппаФормы"), ОбщаяГруппаДействия);
			УстановитьОформлениеГруппы(ГруппаВторойСтрокиДействия, Элементы.Отмена_0_Строка_1);
			
			ПолеПредмет = Элементы.Добавить("ОтменаПредмет_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаВторойСтрокиДействия);
			ПолеПредмет.ПутьКДанным = "НастройкиЗадачОтмены[" + ИндексНастройки + "].Предмет";
			УстановитьОформлениеПоля(ПолеПредмет, Элементы.ОтменаПредмет_0);
			ПолеПредмет.УстановитьДействие("ПриИзменении","ОтменаПредмет_0ПриИзменении");
			
			ДекорацияНадпись = Элементы.Добавить("ОтменаНадпись_" + ИндексНастройки, Тип("ДекорацияФормы"), ГруппаВторойСтрокиДействия);
			ДекорацияНадпись.Вид = Элементы.ОтменаНадпись_0.Вид;
			ДекорацияНадпись.Заголовок = Элементы.ОтменаНадпись_0.Заголовок;
			ДекорацияНадпись.Ширина = Элементы.ОтменаНадпись_0.Ширина;
			ДекорацияНадпись.Высота = Элементы.ОтменаНадпись_0.Высота;

			ПолеВидЗаказа = Элементы.Добавить("ОтменаВидЗаказа_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаВторойСтрокиДействия);
			ПолеВидЗаказа.ПутьКДанным = "НастройкиЗадачОтмены[" + ИндексНастройки + "].ДляВидаЗаказНаряда";
			УстановитьОформлениеПоля(ПолеВидЗаказа, Элементы.ОтменаВидЗаказа_0);
			ПолеВидЗаказа.УстановитьДействие("ПриИзменении","ОтменаВидЗаказа_0ПриИзменении");
			
			ДекорацияУдалить = Элементы.Добавить("ДекорацияОтменаУдалить_" + ИндексНастройки, Тип("ДекорацияФормы"), ГруппаДействия);
			ДекорацияУдалить.Вид = Элементы.ДекорацияОтменаУдалить_0.Вид;
			ДекорацияУдалить.Заголовок = Элементы.ДекорацияОтменаУдалить_0.Заголовок;
			ДекорацияУдалить.Ширина = Элементы.ДекорацияОтменаУдалить_0.Ширина;
			ДекорацияУдалить.Высота = Элементы.ДекорацияОтменаУдалить_0.Высота;
			ДекорацияУдалить.Картинка = Элементы.ДекорацияОтменаУдалить_0.Картинка;
			ДекорацияУдалить.РазмерКартинки = Элементы.ДекорацияОтменаУдалить_0.РазмерКартинки;
			ДекорацияУдалить.Гиперссылка = Элементы.ДекорацияОтменаУдалить_0.Гиперссылка;
			ДекорацияУдалить.УстановитьДействие("Нажатие", "ДекорацияОтменаУдалитьНажатие");
												
		КонецЕсли;
	КонецЦикла;
	
	Элементы.Переместить(Элементы.ГруппаКомандОтмены, Элементы["ГруппаЗадачОтмены"]);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьБлокиЭлементовЗадачиОтзыв()
	
	Элементы.Переместить(Элементы.ГруппаКомандОтзыв, Элементы.ЗадачиСборОтзыва);
	УдаляемыеЭлементы = Новый Массив;
	Для ИндексГруппы = 1 По Элементы.ГруппаЗадачОтзыв.ПодчиненныеЭлементы.Количество()-1 Цикл
		УдаляемыеЭлементы.Добавить(Элементы.ГруппаЗадачОтзыв.ПодчиненныеЭлементы[ИндексГруппы]);
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;

	Для Каждого СтрокаНастроек Из НастройкиЗадачОтзывы Цикл
		
		ИндексНастройки = НастройкиЗадачОтзывы.Индекс(СтрокаНастроек);
		Если НастройкиЗадачОтзывы[ИндексНастройки].Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИндексНастройки > 0 Тогда
			
			ГруппаДействия = Элементы.Добавить("ГруппаОтзыв_" + ИндексНастройки, Тип("ГруппаФормы"), Элементы.ГруппаЗадачОтзыв);
			УстановитьОформлениеГруппы(ГруппаДействия, Элементы.ГруппаОтзыв_0);
			
			ОбщаяГруппаДействия = Элементы.Добавить("Отзыв_" + ИндексНастройки, Тип("ГруппаФормы"), ГруппаДействия);
			УстановитьОформлениеГруппы(ОбщаяГруппаДействия, Элементы.Отзыв_0);
									
			ГруппаПервойСтрокиДействия = Элементы.Добавить("Отзыв_" + ИндексНастройки + "_Строка_0", Тип("ГруппаФормы"), ОбщаяГруппаДействия);
			УстановитьОформлениеГруппы(ГруппаПервойСтрокиДействия, Элементы.Отзыв_0_Строка_1);
				
			ПолеВидКИ = Элементы.Добавить("ОтзывВидКИ_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеВидКИ.ПутьКДанным = "НастройкиЗадачОтзывы[" + ИндексНастройки + "].СпособОповещения";
			УстановитьОформлениеПоля(ПолеВидКИ, Элементы.ОтзывВидКИ_0);
			ПолеВидКИ.УстановитьДействие("ПриИзменении","ОтзывВидКИ_0ПриИзменении");
						
			ПолеШаблонСообщения = Элементы.Добавить("ОтзывШаблон_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеШаблонСообщения.ПутьКДанным = "НастройкиЗадачОтзывы[" + ИндексНастройки + "].ШаблонСообщения";
			УстановитьОформлениеПоля(ПолеШаблонСообщения, Элементы.ОтзывШаблон_0);
			ПолеШаблонСообщения.УстановитьДействие("ПриИзменении","ОтзывШаблон_0ПриИзменении");
			ПолеШаблонСообщения.УстановитьДействие("НачалоВыбора","ОтзывШаблон_0НачалоВыбора");
			
			ГруппаВторойСтрокиДействия = Элементы.Добавить("Отзыв_" + ИндексНастройки + "_Строка_1", Тип("ГруппаФормы"), ОбщаяГруппаДействия);
			УстановитьОформлениеГруппы(ГруппаВторойСтрокиДействия, Элементы.Отмена_0_Строка_1);
			
			ПолеВремя = Элементы.Добавить("ОтзывВремя_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаВторойСтрокиДействия);
			ПолеВремя.ПутьКДанным = "НастройкиЗадачОтзывы[" + ИндексНастройки + "].ЧасовДоСобытия";
			УстановитьОформлениеПоля(ПолеВремя, Элементы.ОтзывВремя_0);
			ПолеВремя.УстановитьДействие("ПриИзменении","ОтзывВремя_0ПриИзменении");

			ПолеПредмет = Элементы.Добавить("ОтзывПредмет_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаВторойСтрокиДействия);
			ПолеПредмет.ПутьКДанным = "НастройкиЗадачОтзывы[" + ИндексНастройки + "].Предмет";
			УстановитьОформлениеПоля(ПолеПредмет, Элементы.ОтзывПредмет_0);
			ПолеПредмет.УстановитьДействие("ПриИзменении","ОтзывПредмет_0ПриИзменении");
			
			ДекорацияНадпись = Элементы.Добавить("ОтзывНадпись_" + ИндексНастройки, Тип("ДекорацияФормы"), ГруппаВторойСтрокиДействия);
			ДекорацияНадпись.Вид = Элементы.ОтзывНадпись_0.Вид;
			ДекорацияНадпись.Заголовок = Элементы.ОтзывНадпись_0.Заголовок;
			ДекорацияНадпись.Ширина = Элементы.ОтзывНадпись_0.Ширина;
			ДекорацияНадпись.Высота = Элементы.ОтзывНадпись_0.Высота;

			ПолеВидЗаказа = Элементы.Добавить("ОтзывВидЗаказа_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаВторойСтрокиДействия);
			ПолеВидЗаказа.ПутьКДанным = "НастройкиЗадачОтзывы[" + ИндексНастройки + "].ДляВидаЗаказНаряда";
			УстановитьОформлениеПоля(ПолеВидЗаказа, Элементы.ОтзывВидЗаказа_0);
			ПолеВидЗаказа.УстановитьДействие("ПриИзменении","ОтзывВидЗаказа_0ПриИзменении");
			
			ДекорацияУдалить = Элементы.Добавить("ДекорацияОтзывУдалить_" + ИндексНастройки, Тип("ДекорацияФормы"), ГруппаДействия);
			ДекорацияУдалить.Вид = Элементы.ДекорацияОтзывУдалить_0.Вид;
			ДекорацияУдалить.Заголовок = Элементы.ДекорацияОтзывУдалить_0.Заголовок;
			ДекорацияУдалить.Ширина = Элементы.ДекорацияОтзывУдалить_0.Ширина;
			ДекорацияУдалить.Высота = Элементы.ДекорацияОтзывУдалить_0.Высота;
			ДекорацияУдалить.Картинка = Элементы.ДекорацияОтзывУдалить_0.Картинка;
			ДекорацияУдалить.РазмерКартинки = Элементы.ДекорацияОтзывУдалить_0.РазмерКартинки;
			ДекорацияУдалить.Гиперссылка = Элементы.ДекорацияОтзывУдалить_0.Гиперссылка;
			ДекорацияУдалить.УстановитьДействие("Нажатие", "ДекорацияОтзывУдалитьНажатие");
												
		КонецЕсли;
	КонецЦикла;
	
	Элементы.Переместить(Элементы.ГруппаКомандОтмены, Элементы["ГруппаЗадачОтмены"]);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗадачуНапоминанияНаСервере()
	ДобавитьПустыеНастройкиЗадачиНапоминания();
	ОбновитьБлокиЭлементовЗадачиНапоминания();
	УправлениеФормой();
	ЗаполнитьСписокВыбораЭлементовФормы();
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗадачуОповещенияОбОтменеНаСервере()
	ДобавитьПустыеНастройкиЗадачиОтмены();
	ОбновитьБлокиЭлементовЗадачиОтмены();
	УправлениеФормой();
	ЗаполнитьСписокВыбораЭлементовФормы();
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗадачуСборОтзываНаСервере()
	ДобавитьПустыеНастройкиЗадачиОтзыва();
	ОбновитьБлокиЭлементовЗадачиОтзыв();
	УправлениеФормой();
	ЗаполнитьСписокВыбораЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуЗадач()
	
	Результат = Новый Структура();
	
	Результат.Вставить("ИзмененПризнакВРаботе", ИзмененПризнакВРаботе);
	Результат.Вставить("АвторИзменений", АвторИзменений);
	Результат.Вставить("НужноДобавитьВОбсуждение", НЕ ЕстьЗадачиПользователя);
	Результат.Вставить("ГруппаЗадач", "ОповестиКлиентаОЗаписи");
	
	Закрыть(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНастройки()
	
	ЕстьОшибкиПодключенияБазы  = НЕ ИнформационнаяБазаЗарегистрирована;
	
	Отбор = Новый Структура;
	Отбор.Вставить("СпособОповещения", ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.SMS"));
	Отбор.Вставить("Удалена", Ложь);
	
	ЗадачиОтправкиSMSПодтверждения = НастройкиЗадачПодтверждения.НайтиСтроки(Отбор);
	ЕстьЗадачиSMSПодтверждения     = ЗадачиОтправкиSMSПодтверждения.Количество() <> 0;
	ЕстьОшибкиSMSПодтверждения     = ЕстьЗадачиSMSПодтверждения И НЕ НастройкиSMSВыполнены И ВРаботе_ПодтверждениеЗаписи;
	
	ЗадачиОтправкиSMSНапоминания = НастройкиЗадачНапоминания.НайтиСтроки(Отбор);
	ЕстьЗадачиSMSНапоминания     = ЗадачиОтправкиSMSНапоминания.Количество() <> 0;
	ЕстьОшибкиSMSНапоминания     = ЕстьЗадачиSMSНапоминания И НЕ НастройкиSMSВыполнены И ВРаботе_НапоминаниеОЗаписи;
	
	ЗадачиОтправкиSMSОтмены = НастройкиЗадачОтмены.НайтиСтроки(Отбор);
	ЕстьЗадачиSMSОтмены     = ЗадачиОтправкиSMSОтмены.Количество() <> 0;
	ЕстьОшибкиSMSОтмены     = ЕстьЗадачиSMSОтмены И НЕ НастройкиSMSВыполнены И ВРаботе_ОповещениеОбОтмене;
	
	ЗадачиОтправкиSMSОтзыв = НастройкиЗадачОтзывы.НайтиСтроки(Отбор);
	ЕстьЗадачиSMSОтзыв     = ЗадачиОтправкиSMSОтзыв.Количество() <> 0;
	ЕстьОшибкиSMSОтзыв     = ЕстьЗадачиSMSОтзыв И НЕ НастройкиSMSВыполнены И ВРаботе_СборОтзывов;
	
	
	Если ВРаботе_ПодтверждениеЗаписи Тогда
		ВРаботе_ПодтверждениеЗаписи = НЕ ЕстьОшибкиSMSПодтверждения И НЕ ЕстьОшибкиПодключенияБазы;
	КонецЕсли;
	
	Если ВРаботе_НапоминаниеОЗаписи Тогда
		ВРаботе_НапоминаниеОЗаписи = НЕ ЕстьОшибкиSMSНапоминания И НЕ ЕстьОшибкиПодключенияБазы;
	КонецЕсли;
	
	Если ВРаботе_ОповещениеОбОтмене Тогда
		ВРаботе_ОповещениеОбОтмене = НЕ ЕстьОшибкиSMSОтмены И НЕ ЕстьОшибкиПодключенияБазы;
	КонецЕсли;
	
	Если ВРаботе_СборОтзывов Тогда
		ВРаботе_СборОтзывов = НЕ ЕстьОшибкиSMSОтзыв И НЕ ЕстьОшибкиПодключенияБазы;
	КонецЕсли;

	ЕстьОшибкиSMS = ЕстьОшибкиSMSПодтверждения ИЛИ ЕстьОшибкиSMSОтзыв ИЛИ ЕстьОшибкиSMSОтмены ИЛИ ЕстьОшибкиSMSНапоминания;
	
	Элементы.ПанельОшибки.Видимость                 = ЕстьОшибкиSMS ИЛИ ЕстьОшибкиПодключенияБазы;	
	Элементы.ОшибкаНеПодключенПровайдер.Видимость   = ЕстьОшибкиSMS;
	Элементы.ОшибкаНеПодключеныОбсуждения.Видимость = ЕстьОшибкиПодключенияБазы;
	
КонецПроцедуры

&НаСервере
Функция ШаблонСообщенияДляПодтвержденияЗаписи()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШаблоныСообщений.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
	|ГДЕ
	|	ШаблоныСообщений.Наименование = &Шаблон
	|	И ШаблоныСообщений.ПолноеИмяТипаПараметраВводаНаОсновании = ""Документ.ЗаказПокупателя""";
	
	Запрос.УстановитьПараметр("Шаблон", Документы.ЗаказПокупателя.НаименованиеШаблонаПодтверждениеЗаписи());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Справочники.ШаблоныСообщений.ПустаяСсылка();
	
КонецФункции

&НаСервере
Функция ШаблонСообщенияДляНапоминанияОЗаписи()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШаблоныСообщений.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
	|ГДЕ
	|	ШаблоныСообщений.Наименование = &Шаблон
	|	И ШаблоныСообщений.ПолноеИмяТипаПараметраВводаНаОсновании = ""Документ.ЗаказПокупателя""" ;
	
	Запрос.УстановитьПараметр("Шаблон", Документы.ЗаказПокупателя.НаименованиеШаблонаНапоминаниеОЗаписи());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Справочники.ШаблоныСообщений.ПустаяСсылка();
	
КонецФункции

&НаСервере
Функция ШаблонСообщенияДляПодтвержденияОтмены()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШаблоныСообщений.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
	|ГДЕ
	|	ШаблоныСообщений.Наименование = &Шаблон
	|	И ШаблоныСообщений.ПолноеИмяТипаПараметраВводаНаОсновании = ""Документ.ЗаказПокупателя""" ;
	
	Запрос.УстановитьПараметр("Шаблон", Документы.ЗаказПокупателя.НаименованиеШаблонаПодтверждениеОтменыЗаписи());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Справочники.ШаблоныСообщений.ПустаяСсылка();
	
КонецФункции

&НаСервере
Функция ШаблонСообщенияДляСбораОтзыва()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШаблоныСообщений.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
	|ГДЕ
	|	ШаблоныСообщений.Наименование = &Шаблон
	|	И ШаблоныСообщений.ПолноеИмяТипаПараметраВводаНаОсновании = ""Документ.ЗаказПокупателя""" ;
	
	Запрос.УстановитьПараметр("Шаблон", Документы.ЗаказПокупателя.НаименованиеШаблонаЗапросНаСборОтзыва());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Справочники.ШаблоныСообщений.ПустаяСсылка();
	
КонецФункции

#КонецОбласти