
#Область ОписаниеПеременных

&НаКлиенте
Перем ИзмененПризнакВРаботе;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	НастройкиSMSВыполнены = ОтправкаSMS.НастройкаОтправкиSMSВыполнена();
	ДоступноПравоНастройкиSMS = Пользователи.ЭтоПолноправныйПользователь();
	
	ЭтотОбъект.ИспользоватьВидыЗаказовПокупателей = ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей");
	ЭтотОбъект.ИспользоватьВидыЗаказНарядов       = ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказНарядов");
	ЭтотОбъект.ИспользоватьПодсистемуРаботы       = ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы");
	НадписьЗаказПокупателя = НСтр("ru = 'когда он станет ответственным за заказ покупателя'");
	
	ТипПредмета = "ЗаказПокупателя";
	
	ИдентификаторГруппы = "ОповещениеПользователяОбИзмененииОтветственногоЗаказПокупателя";
	РазрешеноИзменятьЗадачи = Обработки.АссистентУправления.РазрешеноИзменятьЗадачи();
	
	Элементы.ДобавитьДействие.Видимость = РазрешеноИзменятьЗадачи;
	Элементы.ДействияАссистента.ТолькоПросмотр = НЕ РазрешеноИзменятьЗадачи;
	Элементы.ВРаботе.ТолькоПросмотр = НЕ РазрешеноИзменятьЗадачи;
	Элементы.ГруппаДопФункция_0.Видимость = РазрешеноИзменятьЗадачи;
	ЭтотОбъект.ТолькоПросмотр = НЕ РазрешеноИзменятьЗадачи;
	
	ОбновитьБлокиНастроекАссистента();
	ОбновитьЭлементыДействийАссистента();
	ЗаполнитьСписокВыбораЭлементовФормы();
	
	ИнформационнаяБазаЗарегистрирована = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	КлючСохраненияПоложенияОкна = Новый УникальныйИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ИзмененПризнакВРаботе = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененныеЗадачи = НастройкиЗадач.НайтиСтроки(Новый Структура("Модифицированность", Истина));
	ЗадачиИзменены = ИзмененныеЗадачи.Количество() <> 0;
	
	Если НЕ ЗадачиИзменены Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РазрешеноИзменятьЗадачи Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.ВРаботе Тогда
		
		СоздатьИзменитьЗадачиАссистента();
		ЗакрытьФормуЗадач();
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТипОповещения", "SMS");
	Отбор.Вставить("Удалена", Ложь);
	
	ЗадачиОтправкиSMS = НастройкиЗадач.НайтиСтроки(Отбор);
	ЕстьЗадачиSMS = ЗадачиОтправкиSMS.Количество() <> 0;
		
	Если ВРаботе И НЕ НастройкиSMSВыполнены И ЕстьЗадачиSMS Тогда
		ВРаботе = Ложь;
		Элементы.ПанельОшибки.Видимость = Истина;
		Элементы.ОшибкаНеПодключенПровайдер.Видимость = Истина;
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СоздатьИзменитьЗадачиАссистента();
	ЗакрытьФормуЗадач();

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ЕстьОшибки = Ложь;
	Для каждого СтрокаНастроек Из НастройкиЗадач Цикл
	
		Если СтрокаНастроек.Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.ТипОповещения) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если СтрокаНастроек.ТипОповещения = "Обсуждение" 
			И НЕ ЗначениеЗаполнено(СтрокаНастроек.ТипОбсуждения) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
				
		Если СтрокаНастроек.ТипОповещения <> "Обсуждение" 
			И НЕ ЗначениеЗаполнено(СтрокаНастроек.ШаблонСообщения) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.ВидОперации) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если СтрокаНастроек.ТипОповещения = "Email" 
			И НЕ ЗначениеЗаполнено(СтрокаНастроек.УчетнаяЗапись) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнены обязательные данные'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияУдалитьНажатие(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
	СтрокаНастроек.Удалена = Истина;
	
	ОбновитьЭлементыДействийИЗаполнитьСписокВыбора();

КонецПроцедуры

&НаКлиенте
Процедура ВРаботеПриИзменении(Элемент)
	
	ИзмененПризнакВРаботе = Истина;
	УстановитьМодифицированностьЗадач();
	
	Если НЕ ВРаботе Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонСообщенияПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонСообщенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоШаблонуПослеВыбораШаблона", ЭтотОбъект, Новый Структура("Индекс", Индекс));
	
	Если СтрокаНастроек.ТипОповещения = "SMS" Тогда
		ТипШаблона = "СообщениеSMS";
	Иначе
		ТипШаблона = "Письмо";
	КонецЕсли;
	
	ШаблоныСообщенийКлиент.ВыбратьШаблон(ОписаниеОповещения, ТипШаблона, "Документ.ЗаказПокупателя");

КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьПриИзменении(Элемент)
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТекстОшибкиSMSНажатие(Элемент)
	ОткрытьФорму("ОбщаяФорма.НастройкаОтправкиSMS",,ЭтаФорма,,,,Новый ОписаниеОповещения("ОтправкаSMSПроверкаНастроек", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ТекстОшибкиОбсуждениеНажатие(Элемент)
	НачатьПодключениеОбсуждений();
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	
	Если СтрокаНастроек.ВидОперации = "ЗаказПокупателя" Тогда 
		
		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.ВидЗаказа) ИЛИ ТипЗнч(СтрокаНастроек.ВидЗаказа) = Тип("СправочникСсылка.ВидыЗаказНарядов") Тогда
			СтрокаНастроек.ВидЗаказа = ПредопределенноеЗначение("Справочник.ВидыЗаказовПокупателей.Основной");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.СостояниеЗаказа) ИЛИ ТипЗнч(СтрокаНастроек.СостояниеЗаказа) = Тип("СправочникСсылка.СостоянияЗаказНарядов") Тогда
			СтрокаНастроек.СостояниеЗаказа = ПредопределенноеЗначение("Справочник.СостоянияЗаказовПокупателей.Завершен");
		КонецЕсли;
		
	ИначеЕсли СтрокаНастроек.ВидОперации = "ЗаказНаряд" Тогда
	
		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.ВидЗаказа) ИЛИ ТипЗнч(СтрокаНастроек.ВидЗаказа) = Тип("СправочникСсылка.ВидыЗаказовПокупателей") Тогда
			СтрокаНастроек.ВидЗаказа = ПредопределенноеЗначение("Справочник.ВидыЗаказНарядов.Основной");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.СостояниеЗаказа) ИЛИ ТипЗнч(СтрокаНастроек.СостояниеЗаказа) = Тип("СправочникСсылка.СостоянияЗаказовПокупателей") Тогда
			СтрокаНастроек.СостояниеЗаказа = ПредопределенноеЗначение("Справочник.СостоянияЗаказНарядов.Завершен");
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаНастроек.Модифицированность = Истина;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОповещенияПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
	Если СтрокаНастроек.ТипОповещения = "SMS" ИЛИ СтрокаНастроек.ТипОповещения = "Email" Тогда
		СогласоватьТипКИШаблонСообщения(Индекс);
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбсужденияПриИзменении(Элемент)
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
	УправлениеФормой();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьДействие(Команда)
	
	ДобавитьДействиеСервер();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере 
Процедура СогласоватьТипКИШаблонСообщения(Индекс)
	
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	
	Элементы["УчетнаяЗапись_"+Строка(Индекс)].Видимость = 
		СтрокаНастроек.ТипОповещения = "Email";
		
	Если НЕ ЗначениеЗаполнено(СтрокаНастроек.УчетнаяЗапись) И Элементы["УчетнаяЗапись_"+Строка(Индекс)].Видимость Тогда
		СтрокаНастроек.УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	КонецЕсли;
	
	ПараметрТипШаблона = Новый ПараметрВыбора("Отбор.ПолноеИмяТипаПараметраВводаНаОсновании", "Документ.ЗаказПокупателя");
	ПараметрДляСМС = Новый ПараметрВыбора("Отбор.ПредназначенДляSMS", СтрокаНастроек.ТипОповещения = "SMS");
	ПараметрДляЭП = Новый ПараметрВыбора("Отбор.ПредназначенДляЭлектронныхПисем", СтрокаНастроек.ТипОповещения = "Email");

	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(ПараметрТипШаблона);
	НовыйМассив.Добавить(ПараметрДляСМС);
	НовыйМассив.Добавить(ПараметрДляЭП);
		
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы["ШаблонСообщения_"+Строка(Индекс)].ПараметрыВыбора = НовыеПараметры;

	Если НЕ ЗначениеЗаполнено(СтрокаНастроек.ШаблонСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонПредназначенДляSMS = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаНастроек.ШаблонСообщения, "ПредназначенДляSMS");
	СогласованныеДанные = (СтрокаНастроек.ТипОповещения = "SMS" И ШаблонПредназначенДляSMS)
		ИЛИ (СтрокаНастроек.ТипОповещения = "Email" И НЕ ШаблонПредназначенДляSMS);
				
	Если СогласованныеДанные Тогда
		Возврат;
	КонецЕсли;
		
	СтрокаНастроек.ШаблонСообщения = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДействийИЗаполнитьСписокВыбора()
	ОбновитьЭлементыДействийАссистента();
	ЗаполнитьСписокВыбораЭлементовФормы();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексБлока(ЭлементИмя)
	
	Возврат Прав(ЭлементИмя, СтрДлина(ЭлементИмя) - СтрНайти(ЭлементИмя, "_"));
	
КонецФункции

&НаСервере
Процедура ДобавитьДействиеСервер()
	
	ДобавитьНовыеНастройкиЗадачи();
	ОбновитьЭлементыДействийАссистента();
	ЗаполнитьСписокВыбораЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНовыеНастройкиЗадачи()
		
	ОбщиеНастройки = Новый Структура;
	ОбщиеНастройки.Вставить("ТипОбсуждения", "Заказ");
	ОбщиеНастройки.Вставить("ТипОповещения", "Обсуждение");
	ОбщиеНастройки.Вставить("ВидОперации", "ЗаказПокупателя");
	ОбщиеНастройки.Вставить("Модифицированность", Истина);
		
	НоваяНастройка = НастройкиЗадач.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяНастройка, ОбщиеНастройки);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодключениеОбсуждений()
	
	Продолжение = Новый ОписаниеОповещения("ЗавершитьПодключениеОбсуждений", ЭтотОбъект);
	ОбсужденияКлиент.ПоказатьПодключение(Продолжение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПодключениеОбсуждений(Результат, ДополнительныеПараметры) Экспорт
	
	УправлениеФормой();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьМодифицированностьЗадач()
	
	Для Каждого СтрокаНастроек Из НастройкиЗадач Цикл
		СтрокаНастроек.Модифицированность = Истина;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПослеВыбораШаблона(ДанныеСообщения, ДополнительныеПараметры) Экспорт
	
	Если ДанныеСообщения = Неопределено ИЛИ ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНастроек = НастройкиЗадач.Получить(ДополнительныеПараметры.Индекс);
	СтрокаНастроек.ШаблонСообщения = ДанныеСообщения;
	СтрокаНастроек.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаSMSПроверкаНастроек(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой

&НаСервере
Процедура ЗаполнитьСписокВыбораЭлементовФормы()
	
	
	Для Итератор = 0 По НастройкиЗадач.Количество() - 1 Цикл
		
		Если НастройкиЗадач[Итератор].Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы["ТипОповещения_" + Итератор].СписокВыбора.Очистить();
		Элементы["ТипОповещения_" + Итератор].СписокВыбора.Добавить("Обсуждение", НСтр("ru='В обсуждение'"));
		Элементы["ТипОповещения_" + Итератор].СписокВыбора.Добавить("Email", НСтр("ru='на почту'"));
		Элементы["ТипОповещения_" + Итератор].СписокВыбора.Добавить("SMS", НСтр("ru='sms'"));
		
		Элементы["ТипОбсуждения_" + Итератор].СписокВыбора.Очистить();
		Элементы["ТипОбсуждения_" + Итератор].СписокВыбора.Добавить("Заказ", НСтр("ru='привязанное к заказу'"));
		Элементы["ТипОбсуждения_" + Итератор].СписокВыбора.Добавить("Личное", НСтр("ru='лично пользователю'"));
						
		Элементы["ВидОперации_" + Итератор].СписокВыбора.Очистить();
		Элементы["ВидОперации_" + Итератор].СписокВыбора.Добавить("ЗаказПокупателя", НСтр("ru='заказ покупателя'"));
		Элементы["ВидОперации_" + Итератор].СписокВыбора.Добавить("ЗаказНаряд", НСтр("ru='заказ-наряд'"));

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДействийАссистента()
	
	Элементы.Переместить(Элементы.ДобавитьДействие, Элементы.Действие_0);
	УдаляемыеЭлементы = Новый Массив;
	// Группа первой задачи создана в конфигураторе
	Для ИндексГруппы = 1 По Элементы.ДействияАссистента.ПодчиненныеЭлементы.Количество()-1 Цикл
		УдаляемыеЭлементы.Добавить(Элементы.ДействияАссистента.ПодчиненныеЭлементы[ИндексГруппы]);
	КонецЦикла;

	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	Для Каждого СтрокаНастроек Из НастройкиЗадач Цикл
		
		ИндексНастройки = НастройкиЗадач.Индекс(СтрокаНастроек);
		
		Если НастройкиЗадач[ИндексНастройки].Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИндексНастройки > 0 Тогда
			
			ОбщаяГруппаДействия = Элементы.Добавить("ГруппаДействие_" + ИндексНастройки, Тип("ГруппаФормы"), Элементы.ДействияАссистента);
			УстановитьОформлениеГруппы(ОбщаяГруппаДействия, Элементы.ГруппаДействие_0);
			
			ГруппаДействия = Элементы.Добавить("Действие_" + ИндексНастройки, Тип("ГруппаФормы"), ОбщаяГруппаДействия);
			УстановитьОформлениеГруппы(ГруппаДействия, Элементы.Действие_0);
			
			ГруппаСтроки = Элементы.Добавить("Строки_" + ИндексНастройки, Тип("ГруппаФормы"), ГруппаДействия);
			УстановитьОформлениеГруппы(ГруппаСтроки, Элементы.Строки_0);
			
			ГруппаПервойСтрокиДействия = Элементы.Добавить("ГруппаДействие_" + ИндексНастройки + "_Строка_1", Тип("ГруппаФормы"), ГруппаСтроки);
			УстановитьОформлениеГруппы(ГруппаПервойСтрокиДействия, Элементы.ГруппаДействие_0_Строка_1);		
			
			ПолеТипОповещения = Элементы.Добавить("ТипОповещения_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеТипОповещения.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].ТипОповещения";
			УстановитьОформлениеПоля(ПолеТипОповещения, Элементы.ТипОповещения_0);
			ПолеТипОповещения.УстановитьДействие("ПриИзменении","ТипОповещенияПриИзменении");
			
			ПолеТипОбсуждения = Элементы.Добавить("ТипОбсуждения_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеТипОбсуждения.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].ТипОбсуждения";
			УстановитьОформлениеПоля(ПолеТипОбсуждения, Элементы.ТипОбсуждения_0);
			ПолеТипОбсуждения.УстановитьДействие("ПриИзменении","ТипОбсужденияПриИзменении");
							
			ПолеШаблонСообщения = Элементы.Добавить("ШаблонСообщения_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеШаблонСообщения.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].ШаблонСообщения";
			УстановитьОформлениеПоля(ПолеШаблонСообщения, Элементы.ШаблонСообщения_0);
			ПолеШаблонСообщения.УстановитьДействие("НачалоВыбора","ШаблонСообщенияНачалоВыбора");
			ПолеШаблонСообщения.УстановитьДействие("ПриИзменении","ШаблонСообщенияПриИзменении");
			
			ПараметрТипШаблона = Новый ПараметрВыбора("Отбор.ПолноеИмяТипаПараметраВводаНаОсновании", "Документ.ЗаказПокупателя");
			ПараметрДляСМС = Новый ПараметрВыбора("Отбор.ПредназначенДляSMS", НастройкиЗадач[ИндексНастройки].ТипОповещения = "SMS");
			ПараметрДляЭП = Новый ПараметрВыбора("Отбор.ПредназначенДляЭлектронныхПисем", НастройкиЗадач[ИндексНастройки].ТипОповещения = "Email");
			
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(ПараметрТипШаблона);
			НовыйМассив.Добавить(ПараметрДляСМС);
			НовыйМассив.Добавить(ПараметрДляЭП);

			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			ПолеШаблонСообщения.ПараметрыВыбора = НовыеПараметры;
			
			ПолеУчетнаяЗапись = Элементы.Добавить("УчетнаяЗапись_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеУчетнаяЗапись.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].УчетнаяЗапись";
			УстановитьОформлениеПоля(ПолеУчетнаяЗапись, Элементы.УчетнаяЗапись_0);
			ПолеУчетнаяЗапись.УстановитьДействие("ПриИзменении", "УчетнаяЗаписьПриИзменении");
			
			ДекорацияУдалить = Элементы.Добавить("ДекорацияУдалить_" + ИндексНастройки, Тип("ДекорацияФормы"), ОбщаяГруппаДействия);
			ДекорацияУдалить.Вид = Элементы.ДекорацияУдалить_0.Вид;
			ДекорацияУдалить.Заголовок = Элементы.ДекорацияУдалить_0.Заголовок;
			ДекорацияУдалить.Ширина = Элементы.ДекорацияУдалить_0.Ширина;
			ДекорацияУдалить.Высота = Элементы.ДекорацияУдалить_0.Высота;
			ДекорацияУдалить.Картинка = Элементы.ДекорацияУдалить_0.Картинка;
			ДекорацияУдалить.РазмерКартинки = Элементы.ДекорацияУдалить_0.РазмерКартинки;
			ДекорацияУдалить.Гиперссылка = Элементы.ДекорацияУдалить_0.Гиперссылка;
			ДекорацияУдалить.УстановитьДействие("Нажатие", "ДекорацияУдалитьНажатие");
			
			ГруппаВторойСтрокиДействия = Элементы.Добавить("ГруппаДействие_" + ИндексНастройки + "_Строка_2", Тип("ГруппаФормы"), ГруппаСтроки);
			УстановитьОформлениеГруппы(ГруппаВторойСтрокиДействия, Элементы.ГруппаДействие_0_Строка_2);
			
			ПолеВидОперации = Элементы.Добавить("ВидОперации_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаВторойСтрокиДействия);
			ПолеВидОперации.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].ВидОперации";
			УстановитьОформлениеПоля(ПолеВидОперации, Элементы.ВидОперации_0);
			ПолеВидОперации.УстановитьДействие("ПриИзменении","ВидОперацииПриИзменении");
			
			ДекорацияНадпись = Элементы.Добавить("НадписьЗаказПокупателя_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаВторойСтрокиДействия);
			ДекорацияНадпись.ПутьКДанным = Элементы.НадписьЗаказПокупателя_0.ПутьКДанным;
			ДекорацияНадпись.Вид = Элементы.НадписьЗаказПокупателя_0.Вид;
			ДекорацияНадпись.Заголовок = Элементы.НадписьЗаказПокупателя_0.Заголовок;
			ДекорацияНадпись.ПоложениеЗаголовка = Элементы.НадписьЗаказПокупателя_0.ПоложениеЗаголовка;
			ДекорацияНадпись.Ширина = Элементы.НадписьЗаказПокупателя_0.Ширина;
			ДекорацияНадпись.Видимость = Элементы.НадписьЗаказПокупателя_0.Видимость;
			ДекорацияНадпись.РастягиватьПоГоризонтали = Элементы.НадписьЗаказПокупателя_0.РастягиватьПоГоризонтали;
			
			Элементы.Переместить(Элементы.ДобавитьДействие, Элементы["Действие_" + ИндексНастройки]);
			
		КонецЕсли;
		
	КонецЦикла;
		
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	ИнформационнаяБазаЗарегистрирована = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	НастройкиSMSВыполнены = ОтправкаSMS.НастройкаОтправкиSMSВыполнена();
		
	Отбор = Новый Структура;
	Отбор.Вставить("Удалена", Ложь);
	Отбор.Вставить("ТипОповещения", "SMS");
	
	ЗадачиОтправкиSMS = НастройкиЗадач.НайтиСтроки(Отбор);
	ЕстьЗадачиSMS     = ЗадачиОтправкиSMS.Количество() <> 0;
		
	ЕстьОшибкиSMS = ЕстьЗадачиSMS И НЕ НастройкиSMSВыполнены;
	ЕстьОшибкиПодключенияБазы = НЕ ИнформационнаяБазаЗарегистрирована;
		
	Элементы.ПанельОшибки.Видимость = (ЕстьОшибкиSMS ИЛИ ЕстьОшибкиПодключенияБазы) И ВРаботе;
	
	Элементы.ОшибкаНеПодключенПровайдер.Видимость = ЕстьОшибкиSMS И ВРаботе;
	Элементы.ОшибкаНеПодключеныОбсуждения.Видимость = ЕстьОшибкиПодключенияБазы И ВРаботе;
	
	ВРаботе = НЕ ЕстьОшибкиSMS И НЕ ЕстьОшибкиПодключенияБазы И ЭтотОбъект.ВРаботе;
		
	Для Каждого СтрокаНастроек Из НастройкиЗадач Цикл
		
		ИндексНастройки = НастройкиЗадач.Индекс(СтрокаНастроек);
		Если СтрокаНастроек.Удалена Тогда 
			Продолжить;
		КонецЕсли;
		
		ПолеУчетнаяЗапись             = Элементы["УчетнаяЗапись_"+ИндексНастройки];
		ПолеТипОповещения             = Элементы["ТипОповещения_"+ИндексНастройки];
		ПолеТипОбсуждения             = Элементы["ТипОбсуждения_"+ИндексНастройки];
		ПолеШаблонСообщения           = Элементы["ШаблонСообщения_"+ИндексНастройки];
		ПолеВидОперации               = Элементы["ВидОперации_"+ИндексНастройки];
		ЭлементНадписьЗаказПокупателя = Элементы["НадписьЗаказПокупателя_"+ИндексНастройки];
		
		Если СтрокаНастроек.ТипОповещения = "Обсуждение" ИЛИ СтрокаНастроек.ТипОповещения = "SMS" Тогда
			Элементы.Переместить(ПолеВидОперации, Элементы["ГруппаДействие_"+ИндексНастройки+"_Строка_1"]);
			Элементы.Переместить(ЭлементНадписьЗаказПокупателя, Элементы["ГруппаДействие_"+ИндексНастройки+"_Строка_1"]);
		Иначе
			Элементы.Переместить(ЭлементНадписьЗаказПокупателя, Элементы["ГруппаДействие_"+ИндексНастройки+"_Строка_2"]);
			Элементы.Переместить(ПолеВидОперации, Элементы["ГруппаДействие_"+ИндексНастройки+"_Строка_2"], ЭлементНадписьЗаказПокупателя);
		КонецЕсли;
		
		Если СтрокаНастроек.ТипОповещения = "SMS" Тогда
			ПолеШаблонСообщения.Ширина = 10;
			ПолеШаблонСообщения.АвтоМаксимальнаяШирина = 25;
		Иначе
			ПолеШаблонСообщения.Ширина = 12;
			ПолеШаблонСообщения.АвтоМаксимальнаяШирина = 35;
		КонецЕсли;
		
		ПолеТипОбсуждения.Видимость = СтрокаНастроек.ТипОповещения = "Обсуждение";
		ПолеУчетнаяЗапись.Видимость    = СтрокаНастроек.ТипОповещения = "Email";
		ПолеШаблонСообщения.Видимость    = СтрокаНастроек.ТипОповещения = "Email" ИЛИ СтрокаНастроек.ТипОповещения = "SMS";
		ПолеВидОперации.Видимость   = ИспользоватьПодсистемуРаботы;
		ЭлементНадписьЗаказПокупателя.Видимость = НЕ ИспользоватьПодсистемуРаботы;
				
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗадачиАссистента

&НаСервере
Процедура УдалитьОдинаковыеДействияИзНастроек()
	
	Для Каждого СтрокаНастроек Из НастройкиЗадач Цикл
			
		ОтборПоУсловиям = Новый Структура;
		ОтборПоУсловиям.Вставить("Удалена", Ложь);
		ОтборПоУсловиям.Вставить("ТипОповещения", СтрокаНастроек.ТипОповещения);
		ОтборПоУсловиям.Вставить("ВидОперации", СтрокаНастроек.ВидОперации);
		
		Если СтрокаНастроек.ТипОповещения = "Обсуждение" Тогда
			ОтборПоУсловиям.Вставить("ТипОбсуждения", СтрокаНастроек.ТипОбсуждения);
		ИначеЕсли СтрокаНастроек.ТипОповещения = "Email" Тогда
			ОтборПоУсловиям.Вставить("ШаблонСообщения", СтрокаНастроек.СпособОповещения);
			ОтборПоУсловиям.Вставить("УчетнаяЗапись", СтрокаНастроек.ВидОперации);
		Иначе
			ОтборПоУсловиям.Вставить("ШаблонСообщения", СтрокаНастроек.СпособОповещения);
		КонецЕсли;
		
		ЕстьЗадачиСОдинаковымиУсловиями = НастройкиЗадач.НайтиСтроки(ОтборПоУсловиям).Количество() > 1;
		
		Если ЕстьЗадачиСОдинаковымиУсловиями Тогда
			СтрокаНастроек.Удалена = Истина;
			СтрокаНастроек.Модифицированность = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьБлокиНастроекАссистента()
		
	ГруппаЗадач = Справочники.ЗадачиАссистентаУправления.СсылкаНаГруппуЗадач(ИдентификаторГруппы);
	
	Если НЕ ЗначениеЗаполнено(ГруппаЗадач) Тогда
		ДобавитьПустыеНастройкиЗадачи();
		Возврат;
	КонецЕсли;
	
	ОтобранныеЗадачи = Справочники.ЗадачиАссистентаУправления.ПолучитьЗадачиПоГруппе(ГруппаЗадач);
	НастройкиЗадач.Очистить();
	
	Для каждого Задача Из ОтобранныеЗадачи Цикл
		
		ДанныеЗадачи       = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, 
			"Используется,ДействиеИдентификатор");
		ЗначенияЗаполнения = Справочники.ЗадачиАссистентаУправления.ЗначенияЗаполнения(Задача);
				
		СтрокаНастроек = НастройкиЗадач.Добавить();
		
		Если СтрНайти(ДанныеЗадачи.ДействиеИдентификатор,"ЗаказПокупателя") Тогда
			СтрокаНастроек.ВидОперации = "ЗаказПокупателя";
		Иначе
			СтрокаНастроек.ВидОперации = "ЗаказНаряд";
		КонецЕсли;

		СтрокаНастроек.Задача             = Задача;
		ЗначенияЗадачиПоДействию(СтрокаНастроек, ДанныеЗадачи, ЗначенияЗаполнения);
		СтрокаНастроек.Удалена            = Ложь;
		СтрокаНастроек.Модифицированность = Ложь;

		ЭтотОбъект.ВРаботе = ДанныеЗадачи.Используется;

	КонецЦикла;
	
	Если НастройкиЗадач.Количество() = 0 Тогда
		ДобавитьПустыеНастройкиЗадачи();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПустыеНастройкиЗадачи()
	
	ОбщиеНастройки = Новый Структура;
	ОбщиеНастройки.Вставить("Модифицированность", Истина);
	
	ОбщиеНастройки.Вставить("ВидОперации",       "ЗаказПокупателя");
	ОбщиеНастройки.Вставить("ТипОповещения",     "Обсуждение");
	ОбщиеНастройки.Вставить("ТипОбсуждения",     "Заказ");
	ОбщиеНастройки.Вставить("УчетнаяЗапись",     Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты);
	
	// 1.
	НоваяНастройка = НастройкиЗадач.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяНастройка, ОбщиеНастройки);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьИзменитьЗадачиАссистента()
	
	УдалитьОдинаковыеДействияИзНастроек();
	
	НачатьТранзакцию();
	
	Попытка
		
		ГруппаЗадач = Справочники.ЗадачиАссистентаУправления.СсылкаНаГруппуЗадач(ИдентификаторГруппы);
		
		Если НЕ ЗначениеЗаполнено(ГруппаЗадач) Тогда
			ГруппаЗадач = Справочники.ЗадачиАссистентаУправления.СоздатьГруппу();
			ГруппаЗадач.Наименование = НСтр("ru = 'Оповестить пользователя о назначении ответственным'");
			ГруппаЗадач.ИдентификаторГруппы = ИдентификаторГруппы;
			ГруппаЗадач.Записать();
		КонецЕсли;
		
		Для каждого СтрокаНастроек Из НастройкиЗадач Цикл
			
			ЗадачаИзменена = СтрокаНастроек.Модифицированность;
			
			Если НЕ ЗадачаИзменена Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаНастроек.Задача) Тогда
				ЗадачаОбъект = СтрокаНастроек.Задача.ПолучитьОбъект();
			Иначе
				ЗадачаОбъект = Справочники.ЗадачиАссистентаУправления.СоздатьЭлемент();
				
				АвторИзменений = Пользователи.АвторизованныйПользователь();
				ЕстьЗадачиПользователя = Справочники.ЗадачиАссистентаУправления.ЕстьЗадачиПользователя(АвторИзменений);
			КонецЕсли;
			
			Если СтрокаНастроек.Удалена И ЗначениеЗаполнено(ЗадачаОбъект.Ссылка) Тогда
				ЗадачаОбъект.Удалить();
			КонецЕсли;
			
			Если СтрокаНастроек.Удалена Тогда
				СтрокаНастроек.Модифицированность = Ложь;
				Продолжить;
			КонецЕсли;
			
			ЗадачаОбъект.ДействиеИдентификатор = ДействиеПоТипуОповещения(СтрокаНастроек.ТипОповещения, СтрокаНастроек.ВидОперации);
			ЗадачаОбъект.МодульМенеджера = "АссистентУправленияРаботаСЗаказами";
			ЗадачаОбъект.ТипПредмета = СтрокаНастроек.ВидОперации;
			
			ЗадачаОбъект.События.Очистить();
			НовоеСобытие = ЗадачаОбъект.События.Добавить();
			НовоеСобытие.СобытиеИдентификатор = СобытиеПоТипуПредмета(СтрокаНастроек.ВидОперации);
			
			ЗадачаОбъект.Используется     = ЭтотОбъект.ВРаботе;
			ЗадачаОбъект.Родитель         = ГруппаЗадач.Ссылка;
			
			ЗаполнитьЗначенияЗаполненияПоДействию(ЗадачаОбъект, СтрокаНастроек);
		
			ЗадачаОбъект.Наименование = НаименованиеПоТипуОповещения(СтрокаНастроек.ТипОповещения);
			ЗадачаОбъект.Записать();
			
			СтрокаНастроек.Модифицированность = Ложь;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияЗаполненияПоДействию(ЗадачаОбъект, СтрокаНастроек)
	
	ЗначенияЗаполнения = ЗадачаОбъект.ЗначенияЗаполнения;
	ЗначенияЗаполнения.Очистить();
	
	Если СтрНайти(ЗадачаОбъект.ДействиеИдентификатор, "Обсуждении") Тогда
		
		Если СтрокаНастроек.ТипОбсуждения = "Заказ" Тогда
			СпособОповещения = Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияОтветственному;
		Иначе
			СпособОповещения = Перечисления.СпособОповещенияАссистентаУправления.СообщениеЛичногоОбсужденияОтветственному;
		КонецЕсли;
		
		ДобавитьПараметрЗадачи(ЗначенияЗаполнения, "СпособОповещения", СпособОповещения);
	КонецЕсли;
	
	Если СтрНайти(ЗадачаОбъект.ДействиеИдентификатор, "Email") Тогда
		ДобавитьПараметрЗадачи(ЗначенияЗаполнения, "ШаблонСообщения", СтрокаНастроек.ШаблонСообщения);
		ДобавитьПараметрЗадачи(ЗначенияЗаполнения, "УчетнаяЗапись", СтрокаНастроек.УчетнаяЗапись);
	КонецЕсли;
	
	Если СтрНайти(ЗадачаОбъект.ДействиеИдентификатор, "SMS") Тогда
		ДобавитьПараметрЗадачи(ЗначенияЗаполнения, "ШаблонСообщения", СтрокаНастроек.ШаблонСообщения);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьПараметрЗадачи(Таблица, Параметр, Значение)
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Параметр = Параметр;
	НоваяСтрока.Значение = Новый ХранилищеЗначения(Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуЗадач()
	
	Результат = Новый Структура();
	
	Результат.Вставить("ИзмененПризнакВРаботе", ИзмененПризнакВРаботе);
	Результат.Вставить("АвторИзменений", АвторИзменений);
	Результат.Вставить("ГруппаЗадач", ИдентификаторГруппы);
	Результат.Вставить("НужноДобавитьВОбсуждение", НЕ ЕстьЗадачиПользователя);
	
	Закрыть(Результат);
	
КонецПроцедуры

&НаСервере
Функция ДействиеПоТипуОповещения(ТипОповещения, ВидОперации)
	
	Если ТипОповещения = "Обсуждение" И ВидОперации = "ЗаказПокупателя" Тогда
		Возврат "ОповеститьСотрудникаОбОтветственностиЗаЗаказПокупателяВОбсуждении";
	КонецЕсли;
	
	Если ТипОповещения = "Обсуждение" И ВидОперации = "ЗаказНаряд" Тогда
		Возврат "ОповеститьСотрудникаОбОтветственностиЗаЗаказНарядВОбсуждении";
	КонецЕсли;

	Если ТипОповещения = "Email" И ВидОперации = "ЗаказПокупателя" Тогда
		Возврат "ОповеститьСотрудникаОбОтветственностиЗаЗаказПокупателяПоEmail";
	КонецЕсли;
	
	Если ТипОповещения = "Email" И ВидОперации = "ЗаказНаряд" Тогда
		Возврат "ОповеститьСотрудникаОбОтветственностиЗаЗаказНарядПоEmail";
	КонецЕсли;
	
	Если ТипОповещения = "SMS" И ВидОперации = "ЗаказПокупателя" Тогда
		Возврат "ОповеститьСотрудникаОбОтветственностиЗаЗаказПокупателяПоSMS";
	КонецЕсли;
	
	Если ТипОповещения = "SMS" И ВидОперации = "ЗаказНаряд" Тогда
		Возврат "ОповеститьСотрудникаОбОтветственностиЗаЗаказНарядПоSMS";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗначенияЗадачиПоДействию(СтрокаНастроек, ДанныеЗадачи, ЗначенияЗаполнения)
	
	Если СтрНайти(ДанныеЗадачи.ДействиеИдентификатор, "Обсуждении") Тогда
		
		СтрокаНастроек.ТипОповещения = "Обсуждение";
		
		Если ЗначенияЗаполнения.СпособОповещения = Перечисления.СпособОповещенияАссистентаУправления.СообщениеЛичногоОбсужденияОтветственному Тогда
			СтрокаНастроек.ТипОбсуждения = "Личное";
		Иначе
			СтрокаНастроек.ТипОбсуждения = "Заказ";
		КонецЕсли;
		
	КонецЕсли;
			
	Если СтрНайти(ДанныеЗадачи.ДействиеИдентификатор, "Email") Тогда
		СтрокаНастроек.ТипОповещения = "Email";
		СтрокаНастроек.ШаблонСообщения = ЗначенияЗаполнения.ШаблонСообщения;
		СтрокаНастроек.УчетнаяЗапись = ЗначенияЗаполнения.УчетнаяЗапись;
	КонецЕсли;
	
	Если СтрНайти(ДанныеЗадачи.ДействиеИдентификатор, "SMS") Тогда
		СтрокаНастроек.ТипОповещения = "SMS";
		СтрокаНастроек.ШаблонСообщения = ЗначенияЗаполнения.ШаблонСообщения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СобытиеПоТипуПредмета(ВидОперации)
	
	Если ВидОперации = "ЗаказПокупателя" Тогда
		Возврат "ПриИзмененииОтветственногоЗаказаПокупателя";
	КонецЕсли;
	
	Если ВидОперации = "ЗаказНаряд" Тогда
		Возврат "ПриИзмененииОтветственногоЗаказНаряд";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НаименованиеПоТипуОповещения(ТипОповещения)
	
	Если ТипОповещения = "Обсуждение" Тогда
		Возврат НСтр("ru = 'Оповещение пользователя в обсуждение об изменении ответственного'");
	КонецЕсли;
	
	Если ТипОповещения = "Email" Тогда
		Возврат НСтр("ru = 'Оповещение пользователя по почте об изменении ответственного'");
	КонецЕсли;
	
	Если ТипОповещения = "SMS" Тогда
		Возврат НСтр("ru = 'Оповещение пользователя по смс об изменении ответственного'");
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьОформлениеПоля(ДобавляемыйЭлемент, ЭлементФормы)
	
	ДобавляемыйЭлемент.Вид = ЭлементФормы.Вид;
	ДобавляемыйЭлемент.ПоложениеЗаголовка = ЭлементФормы.ПоложениеЗаголовка;
	ДобавляемыйЭлемент.Заголовок = ЭлементФормы.Заголовок;
	ДобавляемыйЭлемент.АвтоМаксимальнаяШирина = ЭлементФормы.АвтоМаксимальнаяШирина;
	ДобавляемыйЭлемент.МаксимальнаяШирина = ЭлементФормы.МаксимальнаяШирина;
	ДобавляемыйЭлемент.РежимВыбораИзСписка = ЭлементФормы.РежимВыбораИзСписка;
	ДобавляемыйЭлемент.КнопкаВыпадающегоСписка = ЭлементФормы.КнопкаВыпадающегоСписка;
	ДобавляемыйЭлемент.КнопкаОткрытия = ЭлементФормы.КнопкаОткрытия;
	ДобавляемыйЭлемент.КнопкаВыбора = ЭлементФормы.КнопкаВыбора;
	ДобавляемыйЭлемент.АвтоОтметкаНезаполненного = ЭлементФормы.АвтоОтметкаНезаполненного;
	ДобавляемыйЭлемент.ОтображениеПодсказки = ЭлементФормы.ОтображениеПодсказки;
	ДобавляемыйЭлемент.Подсказка = ЭлементФормы.Подсказка;
	ДобавляемыйЭлемент.ИсторияВыбораПриВводе = ЭлементФормы.ИсторияВыбораПриВводе;
	ДобавляемыйЭлемент.БыстрыйВыбор = ЭлементФормы.БыстрыйВыбор;
	ДобавляемыйЭлемент.КнопкаСоздания = ЭлементФормы.КнопкаСоздания;
	ДобавляемыйЭлемент.КнопкаОткрытия = ЭлементФормы.КнопкаОткрытия;
	ДобавляемыйЭлемент.ПодсказкаВвода = ЭлементФормы.ПодсказкаВвода;

КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеГруппы(ДобавляемаяГруппа, ГруппаФормы)
	
	ДобавляемаяГруппа.Вид = ГруппаФормы.Вид;
	ДобавляемаяГруппа.Отображение = ГруппаФормы.Отображение;
	ДобавляемаяГруппа.Группировка = ГруппаФормы.Группировка;
	ДобавляемаяГруппа.ОтображатьЗаголовок = ГруппаФормы.ОтображатьЗаголовок;
	ДобавляемаяГруппа.ЦветФона = ГруппаФормы.ЦветФона;
	ДобавляемаяГруппа.СквозноеВыравнивание = ГруппаФормы.СквозноеВыравнивание;
	
КонецПроцедуры

#КонецОбласти
