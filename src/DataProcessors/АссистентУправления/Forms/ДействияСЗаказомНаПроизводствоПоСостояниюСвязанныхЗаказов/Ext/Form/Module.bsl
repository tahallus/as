
#Область ОписаниеПеременных

#Область ПеременныеФормы

&НаКлиенте
Перем ИзмененПризнакВРаботе;

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ИдентификаторГруппы", ИдентификаторГруппы);
	РазрешеноИзменятьЗадачи = Обработки.АссистентУправления.РазрешеноИзменятьЗадачи();
	
	ЭтотОбъект.ИспользоватьВидыЗаказовПокупателей = ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей");
	ЭтотОбъект.ИспользоватьВидыЗаказНарядов = ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказНарядов");
	ЭтотОбъект.ИспользоватьПодсистемуРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы");
	НадписьЗаказПокупателя = НСтр("ru = 'когда заказы покупателей'");
	
	ЗаполнитьОписаниеЗадачи();
	ЗаполнитьСпособыОповещения();
	ОбновитьБлокиНастроекАссистента();
	ОбновитьЭлементыДействийАссистента();
	ЗаполнитьСписокВыбораЭлементовФормы();
	
	ИнформационнаяБазаЗарегистрирована = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	
	КлючСохраненияПоложенияОкна = Новый УникальныйИдентификатор();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИзмененПризнакВРаботе = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РазрешеноИзменятьЗадачи Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененныеЗадачи = НастройкиЗадач.НайтиСтроки(Новый Структура("Модифицированность", Истина));
	ЗадачиИзменены = ИзмененныеЗадачи.Количество() <> 0;
	
	Если НЕ ЗадачиИзменены Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.ВРаботе Тогда
		
		СоздатьИзменитьЗадачиАссистента();
		ЗакрытьФормуЗадач();
		Возврат;
		
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗадачиЗаполненыКорректно() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СоздатьИзменитьЗадачиАссистента();
	ЗакрытьФормуЗадач();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ЕстьОшибки = Ложь;
	
	Для каждого СтрокаНастроек Из НастройкиЗадач Цикл
		
		ЗаказПокупателяЗавершен = СтрокаНастроек.СостояниеЗаказа = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СостоянияЗаказовПокупателей.Завершен");
		ЗаказНарядЗавершен = СтрокаНастроек.СостояниеЗаказа = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СостоянияЗаказНарядов.Завершен");
		ЗаказНаПроизводствоЗавершен = СтрокаНастроек.СостояниеЗаказаНаПроизводство = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СостоянияЗаказовНаПроизводство.Завершен");

		Если СтрокаНастроек.Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		Индекс = НастройкиЗадач.Индекс(СтрокаНастроек);
		
		Если Не ЗначениеЗаполнено(СтрокаНастроек.ТипПредмета) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаНастроек.ВидЗаказа) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаНастроек.СостояниеЗаказа) И ЭтоЗадачаИзменениеПоЗаказамПокупателей() Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаНастроек.СостояниеЗаказаНаПроизводство) И ЭтоЗадачаИзменениеПоЗаказамПокупателей() Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.ВариантЗавершенияЗаказПокупателя) 
			И ЭтоЗадачаИзменениеПоЗаказамПокупателей() И (ЗаказПокупателяЗавершен ИЛИ ЗаказНарядЗавершен) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.ВариантЗавершенияЗаказНаПроизводство) И ЗаказНаПроизводствоЗавершен И ЭтоЗадачаИзменениеПоЗаказамПокупателей() Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаНастроек.СпособОповещения) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;

	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнены обязательные данные'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СостояниеЗаказаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(ИндексБлока(Элемент.Имя));
	СтрокаНастроек.Модифицированность = Истина;
	ПараметрыПолученияДанных.Вставить("ВидЗаказа", СтрокаНастроек.ВидЗаказа); 
	
	Если СтрокаНастроек.ТипПредмета = "ЗаказПокупателя" Тогда
		ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.СостоянияЗаказовПокупателей"), ПараметрыПолученияДанных);
	ИначеЕсли СтрокаНастроек.ТипПредмета = "ЗаказНаряд" Тогда
		ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.СостоянияЗаказНарядов"), ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаказаНаПроизводствоПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаказаПриИзменении(Элемент)
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура СпособОповещенияПриИзменении(Элемент)
	
	СтрокаНастроек = НастройкиЗадач.Получить(ИндексБлока(Элемент.Имя));
	СтрокаНастроек.Модифицированность = Истина;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВРаботеПриИзменении(Элемент)
	
	ИзмененПризнакВРаботе = Истина;
	
	УстановитьМодифицированностьЗадач();
	
	Если НЕ ВРаботе Тогда
		Возврат;
	КонецЕсли;
	
	Если ИнформационнаяБазаЗарегистрирована Тогда
		Возврат;
	КонецЕсли;
	
	ВРаботе = Ложь;
	Элементы.ПанельОшибки.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПредметаПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	
	Если СтрокаНастроек.ТипПредмета = "ЗаказПокупателя" Тогда 
		
		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.ВидЗаказа) ИЛИ ТипЗнч(СтрокаНастроек.ВидЗаказа) = Тип("СправочникСсылка.ВидыЗаказНарядов") Тогда
			СтрокаНастроек.ВидЗаказа = ПредопределенноеЗначение("Справочник.ВидыЗаказовПокупателей.Основной");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.СостояниеЗаказа) ИЛИ ТипЗнч(СтрокаНастроек.СостояниеЗаказа) = Тип("СправочникСсылка.СостоянияЗаказНарядов") Тогда
			СтрокаНастроек.СостояниеЗаказа = ПредопределенноеЗначение("Справочник.СостоянияЗаказовПокупателей.Завершен");
		КонецЕсли;
		
	ИначеЕсли СтрокаНастроек.ТипПредмета = "ЗаказНаряд" Тогда
	
		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.ВидЗаказа) ИЛИ ТипЗнч(СтрокаНастроек.ВидЗаказа) = Тип("СправочникСсылка.ВидыЗаказовПокупателей") Тогда
			СтрокаНастроек.ВидЗаказа = ПредопределенноеЗначение("Справочник.ВидыЗаказНарядов.Основной");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.СостояниеЗаказа) ИЛИ ТипЗнч(СтрокаНастроек.СостояниеЗаказа) = Тип("СправочникСсылка.СостоянияЗаказовПокупателей") Тогда
			СтрокаНастроек.СостояниеЗаказа = ПредопределенноеЗначение("Справочник.СостоянияЗаказНарядов.Завершен");
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой();
	СтрокаНастроек.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаказаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(ИндексБлока(Элемент.Имя));
	СтрокаНастроек.Модифицированность = Истина;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ВидЗаказа", СтрокаНастроек.ВидЗаказа);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьСостояниеПослеВыбора",ЭтотОбъект,Новый Структура("Индекс", Индекс));
	
	Если СтрокаНастроек.ТипПредмета = "ЗаказНаряд" Тогда
		ОткрытьФорму("Справочник.СостоянияЗаказНарядов.ФормаВыбора", ПараметрыФормы, Элемент,,,,ОповещениеОЗакрытии);
	ИначеЕсли СтрокаНастроек.ТипПредмета = "ЗаказПокупателя" Тогда
		ОткрытьФорму("Справочник.СостоянияЗаказовПокупателей.ФормаВыбора", ПараметрыФормы, Элемент,,,,ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗаказаПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СогласоватьВидИСостояние(Индекс);
	
	СтрокаНастроек.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУдалитьНажатие(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СтрокаНастроек.Удалена = Истина;
	СтрокаНастроек.Модифицированность = Истина;
	
	ОбновитьЭлементыДействийИЗаполнитьСписокВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОповещенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
		
		Элементы["СпособОповещения_" + Индекс].ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
		НастройкиЗадач[Число(Индекс)].СпособОповещения = ВыбранноеЗначение;
		НастройкиЗадач[Число(Индекс)].ПользовательДляОповещения = ВыбранноеЗначение;
		
		Возврат;
		
	КонецЕсли;
	
	ЗначениеСпособаОповещения = СпособыОповещения.НайтиСтроки(Новый Структура("Представление", ВыбранноеЗначение));
	
	Если ЗначениеСпособаОповещения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеСпособаОповещения[0].Значение <> ПредопределенноеЗначение("Перечисление.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияПользователю") Тогда
		
		Элементы["СпособОповещения_" + Индекс].ОграничениеТипа = Новый ОписаниеТипов("Строка");
		НастройкиЗадач[Число(Индекс)].СпособОповещения = ВыбранноеЗначение;
		НастройкиЗадач[Число(Индекс)].ПользовательДляОповещения = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Индекс", Индекс);
	
	Оповещение = Новый ОписаниеОповещения("ВыборПользователя", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора",ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОповещенияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Индекс = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрНайти(Элемент.Имя, "_"));
	ЗаполнитьДанныеВыбора(ДанныеВыбора, Индекс);
КонецПроцедуры

&НаКлиенте
Процедура СпособОповещенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Индекс = ИндексБлока(Элемент.Имя);
	ЗаполнитьДанныеВыбора(ДанныеВыбора, Индекс);
КонецПроцедуры

&НаКлиенте
Процедура ТекстОшибкиНажатие(Элемент)
	НачатьПодключениеОбсуждений();
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗавершенияЗаказНаПроизводствоПриИзменении(Элемент)
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(ИндексБлока(Элемент.Имя));
	СтрокаНастроек.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗавершенияЗаказПокупателяПриИзменении(Элемент)
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(ИндексБлока(Элемент.Имя));
	СтрокаНастроек.Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьДействие(Команда)
	
	ДобавитьДействиеСервер();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДобавитьДействиеСервер()
	
	ДобавитьПустыеНастройкиЗадачи();
	ОбновитьЭлементыДействийАссистента();
	ЗаполнитьСписокВыбораЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДействийИЗаполнитьСписокВыбора()
	ОбновитьЭлементыДействийАссистента();
	ЗаполнитьСписокВыбораЭлементовФормы();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексБлока(ЭлементИмя)
	
	Возврат Прав(ЭлементИмя, СтрДлина(ЭлементИмя) - СтрНайти(ЭлементИмя, "_"));
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСостояниеПослеВыбора(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено ИЛИ ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНастроек = НастройкиЗадач.Получить(ДополнительныеПараметры.Индекс);
	СтрокаНастроек.СостояниеЗаказа = ВыбранноеЗначение;
	СтрокаНастроек.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеВыбора(ДанныеВыбора,Индекс)
	
	Если ДанныеВыбора = Неопределено Тогда
		ДанныеВыбора = Новый СписокЗначений;
	КонецЕсли;
	
	СпособНикогоНеОповещать = СпособыОповещения.НайтиСтроки(Новый Структура("Значение", Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияБезОповещения));
	Если СпособНикогоНеОповещать.Количество() > 0 Тогда
		ДанныеВыбора.Добавить(СпособНикогоНеОповещать[0].Представление,
		,,БиблиотекаКартинок.СпособОповещенияНикогоНеОповещать);
	КонецЕсли;
	
	СпособОповестиОтветственного = СпособыОповещения.НайтиСтроки(Новый Структура("Значение", Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияОтветственному));
	Если СпособОповестиОтветственного.Количество() > 0 Тогда
		ДанныеВыбора.Добавить(СпособОповестиОтветственного[0].Представление,
		,,БиблиотекаКартинок.СпособОповещенияОповеститьВыбранного);
	КонецЕсли;
	
	ДанныеВыбора.Добавить(Пользователи.АвторизованныйПользователь(), ,,БиблиотекаКартинок.СпособОповещенияОповеститьВыбранного);
		
	СпособОповестиПользователя = СпособыОповещения.НайтиСтроки(Новый Структура("Значение", Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияПользователю));
	Если СпособОповестиПользователя.Количество() > 0 Тогда
		ДанныеВыбора.Добавить(СпособОповестиПользователя[0].Представление,
		,,БиблиотекаКартинок.СпособОповещенияОповеститьВыбранного);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыборПользователя(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = ДополнительныеПараметры.Индекс;
	Элементы["СпособОповещения_"+Индекс].ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	НастройкиЗадач[Число(Индекс)].СпособОповещения = Результат;
	НастройкиЗадач[Число(Индекс)].ПользовательДляОповещения = Результат;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодключениеОбсуждений()
	
	Продолжение = Новый ОписаниеОповещения("ЗавершитьПодключениеОбсуждений", ЭтотОбъект);
	ОбсужденияКлиент.ПоказатьПодключение(Продолжение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПодключениеОбсуждений(Результат, ДополнительныеПараметры) Экспорт
	
	ИнформационнаяБазаЗарегистрирована = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	Элементы.ПанельОшибки.Видимость = НЕ ИнформационнаяБазаЗарегистрирована;
	ВРаботе = ИнформационнаяБазаЗарегистрирована;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМодифицированностьЗадач()
	
	Для Каждого СтрокаНастроек Из НастройкиЗадач Цикл
		СтрокаНастроек.Модифицированность = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЗадачиЗаполненыКорректно()
	
	ЕстьОшибкиСостояний = Ложь;
	ЕстьОшибкиУсловий = Ложь;
	
	ОдинаковыеСостояния = Новый Массив;
	
	Для каждого СтрокаНастроек Из НастройкиЗадач Цикл
		
		ОтборСостояние = Новый Структура;
		ОтборСостояние.Вставить("Удалена",Ложь);
		
		Если ЭтоЗадачаИзменениеПоЗаказамПокупателей() Тогда
			ОтборСостояние.Вставить("СостояниеЗаказаНаПроизводство", СтрокаНастроек.СостояниеЗаказаНаПроизводство);
			ОтборСостояние.Вставить("ВариантЗавершенияЗаказНаПроизводство", СтрокаНастроек.ВариантЗавершенияЗаказНаПроизводство);
		Иначе
			ОтборСостояние.Вставить("ВидЗаказа",СтрокаНастроек.ВидЗаказа);
			ОтборСостояние.Вставить("СостояниеЗаказа",СтрокаНастроек.СостояниеЗаказа);
			ОтборСостояние.Вставить("ВариантЗавершенияЗаказПокупателя",СтрокаНастроек.ВариантЗавершенияЗаказПокупателя);
		КонецЕсли;
	
		ОтборСостояние.Вставить("СпособОповещения", СтрокаНастроек.СпособОповещения);
		ОтборСостояние.Вставить("ПользовательДляОповещения", СтрокаНастроек.ПользовательДляОповещения);
		
		ЗадачиСОдинаковымиСостояниями = НастройкиЗадач.НайтиСтроки(ОтборСостояние);
		Если ЗадачиСОдинаковымиСостояниями.Количество() > 1 Тогда
			
			ЕстьОшибкиСостояний = Истина;
			Состояние = ОдинаковыеСостояния.Найти(СтрокаНастроек.СостояниеЗаказа);
			
			Если Состояние = Неопределено Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Состояние %1 используется в нескольких действиях'"),СтрокаНастроек.СостояниеЗаказа));
				ОдинаковыеСостояния.Добавить(СтрокаНастроек.СостояниеЗаказа);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьОшибкиУсловий Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборУсловия = Новый Структура;
		ОтборУсловия.Вставить("Удалена",Ложь);
		ОтборУсловия.Вставить("ВидЗаказа",СтрокаНастроек.ВидЗаказа);
		ОтборУсловия.Вставить("СостояниеЗаказа",СтрокаНастроек.СостояниеЗаказа);
		ОтборУсловия.Вставить("ВариантЗавершенияЗаказПокупателя",СтрокаНастроек.ВариантЗавершенияЗаказПокупателя);
		ОтборУсловия.Вставить("СпособОповещения", СтрокаНастроек.СпособОповещения);
		ОтборУсловия.Вставить("ПользовательДляОповещения", СтрокаНастроек.ПользовательДляОповещения);
		
		ЗадачиСОдинаковымиУсловиями = НастройкиЗадач.НайтиСтроки(ОтборУсловия);
		
		Если ЗадачиСОдинаковымиУсловиями.Количество() > 1 Тогда
			
			ЕстьОшибкиУсловий = Истина;
			ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Настроено несколько действий с одинаковыми условиями'"));
					
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьОшибки = ЕстьОшибкиСостояний ИЛИ ЕстьОшибкиУсловий;
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСпособыОповещения()
	
	СпособыОповещения.Очистить();
	
	СпособНикогоНеОповещать = СпособыОповещения.Добавить();
	СпособНикогоНеОповещать.Значение = Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияБезОповещения;
	СпособНикогоНеОповещать.Представление = НСтр("ru = 'Никого не оповещать'");
	
	СпособОповестиОтветственного = СпособыОповещения.Добавить();
	СпособОповестиОтветственного.Значение = Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияОтветственному;
	СпособОповестиОтветственного.Представление = НСтр("ru = 'Ответственного за заказ'");
	
	СпособОповестиПользователя = СпособыОповещения.Добавить();
	СпособОповестиПользователя.Значение = Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияПользователю;
	СпособОповестиПользователя.Представление = НСтр("ru = 'Другого пользователя'");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпособОповещенияПоЗначению(СтрокаНастроек, ПользовательДляОповещения, СпособОповещения)
	
	Если НЕ ЗначениеЗаполнено(ПользовательДляОповещения) Тогда
		
		ПредставлениеСпособаОповещения = СпособыОповещения.НайтиСтроки(Новый Структура("Значение", СпособОповещения));
		
		Если ПредставлениеСпособаОповещения.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаНастроек.СпособОповещения = ПредставлениеСпособаОповещения[0].Представление;
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаНастроек.СпособОповещения = ПользовательДляОповещения;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпособОповещенияПоПредставлению(СтрокаНастроек, ЗадачаОбъект)
		
	ЗначениеСпособаОповещения = СпособыОповещения.НайтиСтроки(Новый Структура("Представление", СтрокаНастроек.СпособОповещения));
	
	Если ЗначениеСпособаОповещения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачаОбъект.СпособОповещения = ЗначениеСпособаОповещения[0].Значение;
			
КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой
	
&НаСервере
Процедура ЗаполнитьСписокВыбораЭлементовФормы()
	
	Для Итератор = 0 По НастройкиЗадач.Количество() - 1 Цикл
		
		Если НастройкиЗадач[Итератор].Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы["ТипПредмета_" + Итератор].СписокВыбора.Очистить();
		Элементы["ТипПредмета_" + Итератор].СписокВыбора.Добавить("ЗаказПокупателя", НСтр("ru='Заказы покупателей'"));
		Элементы["ТипПредмета_" + Итератор].СписокВыбора.Добавить("ЗаказНаряд", НСтр("ru='Заказ-наряды'"));
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДействийАссистента()
	
	Элементы.Переместить(Элементы.ДобавитьДействие, Элементы.Действие_0);
	УдаляемыеЭлементы = Новый Массив;
	// Группа первой задачи создана в конфигураторе
	Для ИндексГруппы = 1 По Элементы.ДействияАссистента.ПодчиненныеЭлементы.Количество()-1 Цикл
		УдаляемыеЭлементы.Добавить(Элементы.ДействияАссистента.ПодчиненныеЭлементы[ИндексГруппы]);
	КонецЦикла;

	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
		
	Для Каждого СтрокаНастроек Из НастройкиЗадач Цикл
		
		ИндексНастройки = НастройкиЗадач.Индекс(СтрокаНастроек);
		
		Если НастройкиЗадач[ИндексНастройки].Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИндексНастройки > 0 Тогда
			
			ОбщаяГруппаДействия = Элементы.Добавить("ГруппаДействие_" + ИндексНастройки, Тип("ГруппаФормы"), Элементы.ДействияАссистента);
			ОбщаяГруппаДействия.Вид = Элементы.ГруппаДействие_0.Вид;
			ОбщаяГруппаДействия.Отображение = Элементы.ГруппаДействие_0.Отображение;
			ОбщаяГруппаДействия.Группировка = Элементы.ГруппаДействие_0.Группировка;
			ОбщаяГруппаДействия.ОтображатьЗаголовок = Элементы.ГруппаДействие_0.ОтображатьЗаголовок;
			ОбщаяГруппаДействия.ЦветФона = Элементы.ГруппаДействие_0.ЦветФона;
			
			ГруппаДействия = Элементы.Добавить("Действие_" + ИндексНастройки, Тип("ГруппаФормы"), ОбщаяГруппаДействия);
			ГруппаДействия.Вид = Элементы.Действие_0.Вид;
			ГруппаДействия.Отображение = Элементы.Действие_0.Отображение;
			ГруппаДействия.Группировка = Элементы.Действие_0.Группировка;
			ГруппаДействия.ОтображатьЗаголовок = Элементы.Действие_0.ОтображатьЗаголовок;
			ГруппаДействия.ЦветФона = Элементы.Действие_0.ЦветФона;
			
			ГруппаСтроки = Элементы.Добавить("Строки_" + ИндексНастройки, Тип("ГруппаФормы"), ГруппаДействия);
			ГруппаСтроки.Вид = Элементы.Строки_0.Вид;
			ГруппаСтроки.Отображение = Элементы.Строки_0.Отображение;
			ГруппаСтроки.Группировка = Элементы.Строки_0.Группировка;
			ГруппаСтроки.ОтображатьЗаголовок = Элементы.Строки_0.ОтображатьЗаголовок;
			ГруппаСтроки.ЦветФона = Элементы.Строки_0.ЦветФона;
			
			ГруппаПервойСтрокиДействия = Элементы.Добавить("ГруппаДействие_" + ИндексНастройки + "_Строка_1", Тип("ГруппаФормы"), ГруппаСтроки);
			ГруппаПервойСтрокиДействия.Вид = Элементы.ГруппаДействие_0_Строка_1.Вид;
			ГруппаПервойСтрокиДействия.Отображение = Элементы.ГруппаДействие_0_Строка_1.Отображение;
			ГруппаПервойСтрокиДействия.Группировка = Элементы.ГруппаДействие_0_Строка_1.Группировка;
			ГруппаПервойСтрокиДействия.ОтображатьЗаголовок = Элементы.ГруппаДействие_0_Строка_1.ОтображатьЗаголовок;
			ГруппаПервойСтрокиДействия.СквозноеВыравнивание = Элементы.ГруппаДействие_0_Строка_1.СквозноеВыравнивание;
			
			ПолеСостояниеЗаказаНаПроизводство = Элементы.Добавить("СостояниеЗаказаНаПроизводство_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеСостояниеЗаказаНаПроизводство.Вид = Элементы.СостояниеЗаказаНаПроизводство_0.Вид;
			ПолеСостояниеЗаказаНаПроизводство.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].СостояниеЗаказаНаПроизводство";
			ПолеСостояниеЗаказаНаПроизводство.ПоложениеЗаголовка = Элементы.СостояниеЗаказаНаПроизводство_0.ПоложениеЗаголовка;
			ПолеСостояниеЗаказаНаПроизводство.Заголовок = Элементы.СостояниеЗаказаНаПроизводство_0.Заголовок;
			ПолеСостояниеЗаказаНаПроизводство.АвтоМаксимальнаяШирина = Элементы.СостояниеЗаказаНаПроизводство_0.АвтоМаксимальнаяШирина;
			ПолеСостояниеЗаказаНаПроизводство.МаксимальнаяШирина = Элементы.СостояниеЗаказаНаПроизводство_0.МаксимальнаяШирина;
			ПолеСостояниеЗаказаНаПроизводство.ОтображениеПодсказки = Элементы.СостояниеЗаказаНаПроизводство_0.ОтображениеПодсказки;
			ПолеСостояниеЗаказаНаПроизводство.Подсказка = Элементы.СостояниеЗаказаНаПроизводство_0.Подсказка;
			ПолеСостояниеЗаказаНаПроизводство.КнопкаОткрытия = Элементы.СостояниеЗаказаНаПроизводство_0.КнопкаОткрытия;
			ПолеСостояниеЗаказаНаПроизводство.АвтоОтметкаНезаполненного = Элементы.СостояниеЗаказаНаПроизводство_0.АвтоОтметкаНезаполненного;
			ПолеСостояниеЗаказаНаПроизводство.УстановитьДействие("ПриИзменении","СостояниеЗаказаНаПроизводствоПриИзменении");
			
			ПолеВариантЗавершенияЗаказНаПроизводство = Элементы.Добавить("ВариантЗавершенияЗаказНаПроизводство_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеВариантЗавершенияЗаказНаПроизводство.Вид = Элементы.ВариантЗавершенияЗаказНаПроизводство_0.Вид;
			ПолеВариантЗавершенияЗаказНаПроизводство.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].ВариантЗавершенияЗаказНаПроизводство";
			ПолеВариантЗавершенияЗаказНаПроизводство.ПоложениеЗаголовка = Элементы.ВариантЗавершенияЗаказНаПроизводство_0.ПоложениеЗаголовка;
			ПолеВариантЗавершенияЗаказНаПроизводство.Заголовок = Элементы.ВариантЗавершенияЗаказНаПроизводство_0.Заголовок;
			ПолеВариантЗавершенияЗаказНаПроизводство.АвтоМаксимальнаяШирина = Элементы.ВариантЗавершенияЗаказНаПроизводство_0.АвтоМаксимальнаяШирина;
			ПолеВариантЗавершенияЗаказНаПроизводство.МаксимальнаяШирина = Элементы.ВариантЗавершенияЗаказНаПроизводство_0.МаксимальнаяШирина;
			ПолеВариантЗавершенияЗаказНаПроизводство.ОтображениеПодсказки = Элементы.ВариантЗавершенияЗаказНаПроизводство_0.ОтображениеПодсказки;
			ПолеВариантЗавершенияЗаказНаПроизводство.Подсказка = Элементы.ВариантЗавершенияЗаказНаПроизводство_0.Подсказка;
			ПолеВариантЗавершенияЗаказНаПроизводство.КнопкаОткрытия = Элементы.ВариантЗавершенияЗаказНаПроизводство_0.КнопкаОткрытия;
			ПолеВариантЗавершенияЗаказНаПроизводство.АвтоОтметкаНезаполненного = Элементы.ВариантЗавершенияЗаказНаПроизводство_0.АвтоОтметкаНезаполненного;
			ПолеВариантЗавершенияЗаказНаПроизводство.УстановитьДействие("ПриИзменении","ВариантЗавершенияЗаказНаПроизводствоПриИзменении");

			ГруппаВторойСтрокиДействия = Элементы.Добавить("ГруппаДействие_" + ИндексНастройки + "_Строка_2", Тип("ГруппаФормы"), ГруппаСтроки);
			ГруппаВторойСтрокиДействия.Вид = Элементы.ГруппаДействие_0_Строка_2.Вид;
			ГруппаВторойСтрокиДействия.Отображение = Элементы.ГруппаДействие_0_Строка_2.Отображение;
			ГруппаВторойСтрокиДействия.Группировка = Элементы.ГруппаДействие_0_Строка_2.Группировка;
			ГруппаВторойСтрокиДействия.ОтображатьЗаголовок = Элементы.ГруппаДействие_0_Строка_2.ОтображатьЗаголовок;
			ГруппаВторойСтрокиДействия.СквозноеВыравнивание = Элементы.ГруппаДействие_0_Строка_2.СквозноеВыравнивание;
			
			ПолеТипПредмета = Элементы.Добавить("ТипПредмета_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаВторойСтрокиДействия);
			ПолеТипПредмета.Вид = Элементы.ТипПредмета_0.Вид;
			ПолеТипПредмета.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].ТипПредмета";
			ПолеТипПредмета.ПоложениеЗаголовка = Элементы.ТипПредмета_0.ПоложениеЗаголовка;
			ПолеТипПредмета.Заголовок = Элементы.ТипПредмета_0.Заголовок;
			ПолеТипПредмета.АвтоМаксимальнаяШирина = Элементы.ТипПредмета_0.АвтоМаксимальнаяШирина;
			ПолеТипПредмета.МаксимальнаяШирина = Элементы.ТипПредмета_0.МаксимальнаяШирина;
			ПолеТипПредмета.РежимВыбораИзСписка = Элементы.ТипПредмета_0.РежимВыбораИзСписка;
			ПолеТипПредмета.КнопкаВыпадающегоСписка = Элементы.ТипПредмета_0.КнопкаВыпадающегоСписка;
			ПолеТипПредмета.АвтоОтметкаНезаполненного = Элементы.ТипПредмета_0.АвтоОтметкаНезаполненного;
			ПолеТипПредмета.УстановитьДействие("ПриИзменении","ТипПредметаПриИзменении");
			
			ДекорацияНадпись = Элементы.Добавить("НадписьЗаказПокупателя_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаВторойСтрокиДействия);
			ДекорацияНадпись.ПутьКДанным = Элементы.НадписьЗаказПокупателя_0.ПутьКДанным;
			ДекорацияНадпись.Вид = Элементы.НадписьЗаказПокупателя_0.Вид;
			ДекорацияНадпись.Заголовок = Элементы.НадписьЗаказПокупателя_0.Заголовок;
			ДекорацияНадпись.ПоложениеЗаголовка = Элементы.НадписьЗаказПокупателя_0.ПоложениеЗаголовка;
			ДекорацияНадпись.Ширина = Элементы.НадписьЗаказПокупателя_0.Ширина;
			ДекорацияНадпись.Видимость = Элементы.НадписьЗаказПокупателя_0.Видимость;
			ДекорацияНадпись.РастягиватьПоГоризонтали = Элементы.НадписьЗаказПокупателя_0.РастягиватьПоГоризонтали;
			
			ПолеВидЗаказа = Элементы.Добавить("ВидЗаказа_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаВторойСтрокиДействия);
			ПолеВидЗаказа.Вид = Элементы.ВидЗаказа_0.Вид;
			ПолеВидЗаказа.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].ВидЗаказа";
			ПолеВидЗаказа.ПоложениеЗаголовка = Элементы.ВидЗаказа_0.ПоложениеЗаголовка;
			ПолеВидЗаказа.Заголовок = Элементы.ВидЗаказа_0.Заголовок;
			ПолеВидЗаказа.АвтоМаксимальнаяШирина = Элементы.ВидЗаказа_0.АвтоМаксимальнаяШирина;
			ПолеВидЗаказа.МаксимальнаяШирина = Элементы.ВидЗаказа_0.МаксимальнаяШирина;
			ПолеВидЗаказа.КнопкаВыбора = Элементы.ВидЗаказа_0.КнопкаВыбора;
			ПолеВидЗаказа.КнопкаОткрытия = Элементы.ВидЗаказа_0.КнопкаОткрытия;
			ПолеВидЗаказа.УстановитьДействие("ПриИзменении","ВидЗаказаПриИзменении");
			ПолеВидЗаказа.АвтоОтметкаНезаполненного = Элементы.ВидЗаказа_0.АвтоОтметкаНезаполненного;
			
			ПолеСостояниеЗаказа = Элементы.Добавить("СостояниеЗаказа_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаВторойСтрокиДействия);
			ПолеСостояниеЗаказа.Вид = Элементы.СостояниеЗаказа_0.Вид;
			ПолеСостояниеЗаказа.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].СостояниеЗаказа";
			ПолеСостояниеЗаказа.ПоложениеЗаголовка = Элементы.СостояниеЗаказа_0.ПоложениеЗаголовка;
			ПолеСостояниеЗаказа.Заголовок = Элементы.СостояниеЗаказа_0.Заголовок;
			ПолеСостояниеЗаказа.АвтоМаксимальнаяШирина = Элементы.СостояниеЗаказа_0.АвтоМаксимальнаяШирина;
			ПолеСостояниеЗаказа.МаксимальнаяШирина = Элементы.СостояниеЗаказа_0.МаксимальнаяШирина;
			ПолеСостояниеЗаказа.ОтображениеПодсказки = Элементы.СостояниеЗаказа_0.ОтображениеПодсказки;
			ПолеСостояниеЗаказа.Подсказка = Элементы.СостояниеЗаказа_0.Подсказка;
			ПолеСостояниеЗаказа.КнопкаОткрытия = Элементы.СостояниеЗаказа_0.КнопкаОткрытия;
			ПолеСостояниеЗаказа.УстановитьДействие("ПриИзменении","СостояниеЗаказаПриИзменении");
			ПолеСостояниеЗаказа.УстановитьДействие("АвтоПодбор","СостояниеЗаказаАвтоПодбор");
			ПолеСостояниеЗаказа.УстановитьДействие("НачалоВыбора","СостояниеЗаказаНачалоВыбора");
			ПолеСостояниеЗаказа.АвтоОтметкаНезаполненного = Элементы.СостояниеЗаказа_0.АвтоОтметкаНезаполненного;
			
			ПолеВариантЗавершенияЗаказПокупателя = Элементы.Добавить("ВариантЗавершенияЗаказПокупателя_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаВторойСтрокиДействия);
			ПолеВариантЗавершенияЗаказПокупателя.Вид = Элементы.ВариантЗавершенияЗаказПокупателя_0.Вид;
			ПолеВариантЗавершенияЗаказПокупателя.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].ВариантЗавершенияЗаказПокупателя";
			ПолеВариантЗавершенияЗаказПокупателя.ПоложениеЗаголовка = Элементы.ВариантЗавершенияЗаказПокупателя_0.ПоложениеЗаголовка;
			ПолеВариантЗавершенияЗаказПокупателя.Заголовок = Элементы.ВариантЗавершенияЗаказПокупателя_0.Заголовок;
			ПолеВариантЗавершенияЗаказПокупателя.АвтоМаксимальнаяШирина = Элементы.ВариантЗавершенияЗаказПокупателя_0.АвтоМаксимальнаяШирина;
			ПолеВариантЗавершенияЗаказПокупателя.МаксимальнаяШирина = Элементы.ВариантЗавершенияЗаказПокупателя_0.МаксимальнаяШирина;
			ПолеВариантЗавершенияЗаказПокупателя.ОтображениеПодсказки = Элементы.ВариантЗавершенияЗаказПокупателя_0.ОтображениеПодсказки;
			ПолеВариантЗавершенияЗаказПокупателя.Подсказка = Элементы.ВариантЗавершенияЗаказПокупателя_0.Подсказка;
			ПолеВариантЗавершенияЗаказПокупателя.КнопкаОткрытия = Элементы.ВариантЗавершенияЗаказПокупателя_0.КнопкаОткрытия;
			ПолеВариантЗавершенияЗаказПокупателя.АвтоОтметкаНезаполненного = Элементы.ВариантЗавершенияЗаказПокупателя_0.АвтоОтметкаНезаполненного;
			ПолеВариантЗавершенияЗаказПокупателя.УстановитьДействие("ПриИзменении","ВариантЗавершенияЗаказПокупателяПриИзменении");
			
			ДекорацияУдалить = Элементы.Добавить("ДекорацияУдалить_" + ИндексНастройки, Тип("ДекорацияФормы"), ОбщаяГруппаДействия);
			ДекорацияУдалить.Вид = Элементы.ДекорацияУдалить_0.Вид;
			ДекорацияУдалить.Заголовок = Элементы.ДекорацияУдалить_0.Заголовок;
			ДекорацияУдалить.Ширина = Элементы.ДекорацияУдалить_0.Ширина;
			ДекорацияУдалить.Высота = Элементы.ДекорацияУдалить_0.Высота;
			ДекорацияУдалить.Картинка = Элементы.ДекорацияУдалить_0.Картинка;
			ДекорацияУдалить.РазмерКартинки = Элементы.ДекорацияУдалить_0.РазмерКартинки;
			ДекорацияУдалить.Гиперссылка = Элементы.ДекорацияУдалить_0.Гиперссылка;
			ДекорацияУдалить.УстановитьДействие("Нажатие", "ДекорацияУдалитьНажатие");

			ГруппаТретьейСтрокиДействия = Элементы.Добавить("ГруппаДействие_" + ИндексНастройки + "_Строка_3", Тип("ГруппаФормы"), ГруппаСтроки);
			ГруппаТретьейСтрокиДействия.Вид = Элементы.ГруппаДействие_0_Строка_3.Вид;
			ГруппаТретьейСтрокиДействия.Отображение = Элементы.ГруппаДействие_0_Строка_3.Отображение;
			ГруппаТретьейСтрокиДействия.Группировка = Элементы.ГруппаДействие_0_Строка_3.Группировка;
			ГруппаТретьейСтрокиДействия.ОтображатьЗаголовок = Элементы.ГруппаДействие_0_Строка_3.ОтображатьЗаголовок;
			ГруппаТретьейСтрокиДействия.СквозноеВыравнивание = Элементы.ГруппаДействие_0_Строка_3.СквозноеВыравнивание;
									
			ДекорацияТекстОбсуждение = Элементы.Добавить("ТекстОбсуждение_" + ИндексНастройки, Тип("ДекорацияФормы"), ГруппаТретьейСтрокиДействия);
			ДекорацияТекстОбсуждение.Вид = Элементы.ТекстОбсуждение_0.Вид;
			ДекорацияТекстОбсуждение.Заголовок = Элементы.ТекстОбсуждение_0.Заголовок;
			ДекорацияТекстОбсуждение.Ширина = Элементы.ТекстОбсуждение_0.Ширина;
			ДекорацияТекстОбсуждение.Видимость = Элементы.ТекстОбсуждение_0.Видимость;
			
			ПолеСпособОповещения = Элементы.Добавить("СпособОповещения_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаТретьейСтрокиДействия);
			ПолеСпособОповещения.Вид = Элементы.СпособОповещения_0.Вид;
			ПолеСпособОповещения.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].СпособОповещения";
			ПолеСпособОповещения.ПоложениеЗаголовка = Элементы.СпособОповещения_0.ПоложениеЗаголовка;
			ПолеСпособОповещения.Заголовок = Элементы.СпособОповещения_0.Заголовок;
			ПолеСпособОповещения.АвтоМаксимальнаяШирина = Элементы.СпособОповещения_0.АвтоМаксимальнаяШирина;
			ПолеСпособОповещения.МаксимальнаяШирина = Элементы.СпособОповещения_0.МаксимальнаяШирина;
			ПолеСпособОповещения.Ширина = Элементы.СпособОповещения_0.Ширина;
			ПолеСпособОповещения.РежимВыбораИзСписка = Элементы.СпособОповещения_0.РежимВыбораИзСписка;
			ПолеСпособОповещения.КнопкаВыпадающегоСписка = Элементы.СпособОповещения_0.КнопкаВыпадающегоСписка;
			ПолеСпособОповещения.ИсторияВыбораПриВводе = Элементы.СпособОповещения_0.ИсторияВыбораПриВводе;
			ПолеСпособОповещения.КнопкаСоздания = Элементы.СпособОповещения_0.КнопкаСоздания;
			ПолеСпособОповещения.КнопкаОткрытия = Элементы.СпособОповещения_0.КнопкаОткрытия;
			ПолеСпособОповещения.КнопкаВыбора = Элементы.СпособОповещения_0.КнопкаВыбора;
			ПолеСпособОповещения.АвтоОтметкаНезаполненного = Элементы.СпособОповещения_0.АвтоОтметкаНезаполненного;
			ПолеСпособОповещения.УстановитьДействие("ПриИзменении", "СпособОповещенияПриИзменении");
			ПолеСпособОповещения.УстановитьДействие("АвтоПодбор", "СпособОповещенияАвтоПодбор");
			ПолеСпособОповещения.УстановитьДействие("НачалоВыбора", "СпособОповещенияНачалоВыбора");
			ПолеСпособОповещения.УстановитьДействие("ОбработкаВыбора", "СпособОповещенияОбработкаВыбора");
			
			Элементы.Переместить(Элементы.ДобавитьДействие, Элементы["Действие_" + ИндексНастройки]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
		
	Элементы.ДобавитьДействие.Видимость = РазрешеноИзменятьЗадачи;
	Элементы.ДействияАссистента.ТолькоПросмотр = НЕ РазрешеноИзменятьЗадачи;
	Элементы.ВРаботе.ТолькоПросмотр = НЕ РазрешеноИзменятьЗадачи;
	ЭтотОбъект.ТолькоПросмотр = НЕ РазрешеноИзменятьЗадачи;
	
	Для Каждого СтрокаНастроек Из НастройкиЗадач Цикл
		
		ИндексНастройки = НастройкиЗадач.Индекс(СтрокаНастроек);
		
		Если СтрокаНастроек.Удалена Тогда 
			Продолжить;
		КонецЕсли;
		
		ПолеВидЗаказа = Элементы["ВидЗаказа_"+ИндексНастройки];
		ПолеСостояниеЗаказа = Элементы["СостояниеЗаказа_"+ИндексНастройки];
		ПолеТипПредмета = Элементы["ТипПредмета_"+ИндексНастройки];
		ПолеСпособОповещения = Элементы["СпособОповещения_"+ИндексНастройки];
		ДекорацияТекстОбсуждение = Элементы["ТекстОбсуждение_"+ИндексНастройки];
		ДекорацияУдалить = Элементы["ДекорацияУдалить_"+ИндексНастройки];
		ЭлементНадписьЗаказПокупателя = Элементы["НадписьЗаказПокупателя_"+ИндексНастройки];
		ПолеСостояниеЗаказаНаПроизводство = Элементы["СостояниеЗаказаНаПроизводство_"+ИндексНастройки];
		ПолеВариантЗавершенияЗаказПокупателя = Элементы["ВариантЗавершенияЗаказПокупателя_"+ИндексНастройки];
		ПолеВариантЗавершенияЗаказНаПроизводство = Элементы["ВариантЗавершенияЗаказНаПроизводство_"+ИндексНастройки];
		
		ЗаказПокупателяЗавершен     = СтрокаНастроек.СостояниеЗаказа = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СостоянияЗаказовПокупателей.Завершен");
		ЗаказНарядЗавершен          = СтрокаНастроек.СостояниеЗаказа = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СостоянияЗаказНарядов.Завершен");
		ЗаказНаПроизводствоЗавершен = СтрокаНастроек.СостояниеЗаказаНаПроизводство = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СостоянияЗаказовНаПроизводство.Завершен");
		
		Если СтрокаНастроек.ТипПредмета = "ЗаказНаряд" Тогда
			
			ПолеВидЗаказа.ОграничениеТипа       = Новый ОписаниеТипов("СправочникСсылка.ВидыЗаказНарядов");
			ПолеСостояниеЗаказа.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СостоянияЗаказНарядов");
			ПолеВидЗаказа.Видимость             = ИспользоватьВидыЗаказНарядов;
			
		ИначеЕсли СтрокаНастроек.ТипПредмета = "ЗаказПокупателя" Тогда
			
			ПолеВидЗаказа.ОграничениеТипа       = Новый ОписаниеТипов("СправочникСсылка.ВидыЗаказовПокупателей");
			ПолеСостояниеЗаказа.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СостоянияЗаказовПокупателей");
			ПолеВидЗаказа.Видимость             = ИспользоватьВидыЗаказовПокупателей;
			
		КонецЕсли;
		
		Элементы["ГруппаДействие_" + ИндексНастройки+ "_Строка_1"].Видимость = ЭтоЗадачаИзменениеПоЗаказамПокупателей();

		ПолеСостояниеЗаказа.АвтоМаксимальнаяШирина = НЕ ПолеВидЗаказа.Видимость;
		ПолеВидЗаказа.АвтоМаксимальнаяШирина       = НЕ ПолеВидЗаказа.Видимость;
		
		ПолеВариантЗавершенияЗаказПокупателя.Видимость     = ЗаказПокупателяЗавершен ИЛИ ЗаказНарядЗавершен;
		ПолеВариантЗавершенияЗаказНаПроизводство.Видимость = ЗаказНаПроизводствоЗавершен;
		
		Если НЕ ЗаказНарядЗавершен И НЕ ЗаказПокупателяЗавершен Тогда
			СтрокаНастроек.ВариантЗавершенияЗаказПокупателя = Перечисления.ВариантыЗавершенияЗаказа.ПустаяСсылка();
		КонецЕсли;
		
		Если НЕ ЗаказНаПроизводствоЗавершен Тогда
			СтрокаНастроек.ВариантЗавершенияЗаказНаПроизводство = Перечисления.ВариантыЗавершенияЗаказа.ПустаяСсылка();
		КонецЕсли;

		ОпределитьЗаголовкиПолей(ПолеТипПредмета, ДекорацияТекстОбсуждение);
			
		Если ПолеВидЗаказа.Видимость Тогда
			ПолеСостояниеЗаказа.МаксимальнаяШирина = 30;
			ПолеВидЗаказа.МаксимальнаяШирина       = 30;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаНастроек.СпособОповещения) = Тип("Строка") Тогда
			ПолеСпособОповещения.ОграничениеТипа = Новый ОписаниеТипов("Строка");
		ИначеЕсли ТипЗнч(СтрокаНастроек.СпособОповещения) = Тип("СправочникСсылка.Пользователи") Тогда
			ПолеСпособОповещения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
		КонецЕсли;
		
		ДекорацияУдалить.Доступность = РазрешеноИзменятьЗадачи И ИндексНастройки <> 0;
		
		ПолеТипПредмета.Видимость = ИспользоватьПодсистемуРаботы;
		ЭлементНадписьЗаказПокупателя.Видимость = НЕ ИспользоватьПодсистемуРаботы;
		
		Если ИспользоватьПодсистемуРаботы Тогда
			Продолжить;
		КонецЕсли;

		Если СтрокаНастроек.ТипПредмета = "ЗаказПокупателя" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНастроек.ТипПредмета = "ЗаказПокупателя";
		СтрокаНастроек.Модифицированность = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СогласоватьВидИСостояние(Индекс)
	
	СтрокаНастройки = НастройкиЗадач.Получить(Индекс);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыЗаказов.Ссылка КАК Ссылка,
	|	ВидыЗаказов.ПорядокСостояний.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Состояние КАК Состояние
	|	) КАК ПорядокСостояний
	|ИЗ
	|	&ТаблицаСправочника КАК ВидыЗаказов 
	|ГДЕ
	|	ВидыЗаказов.Ссылка = &ВидЗаказа";
	
	ИмяСправочника = СтрокаНастройки.ВидЗаказа.Метаданные().Имя;
	Запрос.Текст = СтрЗаменить(Запрос.Текст , "&ТаблицаСправочника", "Справочник." + ИмяСправочника);
	
	Запрос.УстановитьПараметр("ВидЗаказа", СтрокаНастройки.ВидЗаказа);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СостоянияВида = Выборка.ПорядокСостояний.Выгрузить();
		
		Отбор = Новый Структура;
		Отбор.Вставить("Состояние",СтрокаНастройки.СостояниеЗаказа);
		НайденныеСтроки = СостоянияВида.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаНастройки.СостояниеЗаказа = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗадачиАссистента

&НаСервере
Процедура УдалитьОдинаковыеДействияИзНастроек()
	
	Для Каждого СтрокаНастроек Из НастройкиЗадач Цикл
					
		ОтборПоУсловиям = Новый Структура;
		ОтборПоУсловиям.Вставить("Удалена", Ложь);
		ОтборПоУсловиям.Вставить("ТипПредмета", СтрокаНастроек.ТипПредмета);
		ОтборПоУсловиям.Вставить("ВидЗаказа", СтрокаНастроек.ВидЗаказа);
		ОтборПоУсловиям.Вставить("СостояниеЗаказа", СтрокаНастроек.СостояниеЗаказа);
		ОтборПоУсловиям.Вставить("ВариантЗавершенияЗаказПокупателя", СтрокаНастроек.ВариантЗавершенияЗаказПокупателя);
		ОтборПоУсловиям.Вставить("СпособОповещения", СтрокаНастроек.СпособОповещения);
		ОтборПоУсловиям.Вставить("ПользовательДляОповещения", СтрокаНастроек.ПользовательДляОповещения);
		
		Если ЭтоЗадачаИзменениеПоЗаказамПокупателей() Тогда
			ОтборПоУсловиям.Вставить("СостояниеЗаказаНаПроизводство", СтрокаНастроек.СостояниеЗаказаНаПроизводство);
			ОтборПоУсловиям.Вставить("ВариантЗавершенияЗаказНаПроизводство", СтрокаНастроек.ВариантЗавершенияЗаказНаПроизводство);
		КонецЕсли;
		
		ЕстьЗадачиСОдинаковымиУсловиями = НастройкиЗадач.НайтиСтроки(ОтборПоУсловиям).Количество() > 1;
		
		Если ЕстьЗадачиСОдинаковымиУсловиями Тогда
			СтрокаНастроек.Удалена = Истина;
			СтрокаНастроек.Модифицированность = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьБлокиНастроекАссистента()
	
	ГруппаЗадач = Справочники.ЗадачиАссистентаУправления.СсылкаНаГруппуЗадач(ИдентификаторГруппы);
	
	Если НЕ ЗначениеЗаполнено(ГруппаЗадач) Тогда
		ДобавитьПустыеНастройкиЗадачи();
		Возврат;
	КонецЕсли;

	ОтобранныеЗадачи = Справочники.ЗадачиАссистентаУправления.ПолучитьЗадачиПоГруппе(ГруппаЗадач);
	
	НастройкиЗадач.Очистить();
	Для каждого Задача Из ОтобранныеЗадачи Цикл
				
		ДанныеЗадачи    = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "СпособОповещения,Используется,ПользовательДляОповещения");
		ЗначенияЗаполнения = Справочники.ЗадачиАссистентаУправления.ЗначенияЗаполнения(Задача);
		ПараметрыУсловия = Справочники.ЗадачиАссистентаУправления.ПредставленияПараметровУсловия(Задача);
		
		СтрокаНастроек = НастройкиЗадач.Добавить();
		СтрокаНастроек.Задача             = Задача;
		СтрокаНастроек.СостояниеЗаказа    = ЗначенияЗаполнения.СостояниеЗаказаПокупателя;
		СтрокаНастроек.Удалена            = Ложь;
		СтрокаНастроек.Модифицированность = Ложь;
		
		СтрокаНастроек.ВидЗаказа                        = ЗначенияЗаполнения.ВидЗаказаПокупателя;
		СтрокаНастроек.ВариантЗавершенияЗаказПокупателя = ЗначенияЗаполнения.ВариантЗавершенияЗаказаПокупателя;
		СтрокаНастроек.ПользовательДляОповещения        = ДанныеЗадачи.ПользовательДляОповещения;
		
		Если ЭтоЗадачаИзменениеПоЗаказамПокупателей() Тогда
			СтрокаНастроек.СостояниеЗаказаНаПроизводство        = ЗначенияЗаполнения.СостояниеЗаказаНаПроизводство;
			СтрокаНастроек.ВариантЗавершенияЗаказНаПроизводство = ЗначенияЗаполнения.ВариантЗавершенияЗаказаНаПроизводство;
		КонецЕсли;
		
		Если ТипЗнч(ЗначенияЗаполнения.ВидЗаказаПокупателя) = Тип("СправочникСсылка.ВидыЗаказовПокупателей") Тогда
			СтрокаНастроек.ТипПредмета = "ЗаказПокупателя";
		Иначе
			СтрокаНастроек.ТипПредмета = "ЗаказНаряд";
		КонецЕсли;

		ЗаполнитьСпособОповещенияПоЗначению(СтрокаНастроек, ДанныеЗадачи.ПользовательДляОповещения, ДанныеЗадачи.СпособОповещения);
		
		ЭтотОбъект.ВРаботе = ДанныеЗадачи.Используется;
		
	КонецЦикла;
	
	Если НастройкиЗадач.Количество() = 0 Тогда
		ДобавитьПустыеНастройкиЗадачи();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура СоздатьИзменитьЗадачиАссистента()
	
	ДействиеИдентификатор = "СинхронизироватьСтатусПодчиненныхЗаказовЗаказаПокупателя";
	УдалитьОдинаковыеДействияИзНастроек();
	
	НачатьТранзакцию();
	
	Попытка
		
		ГруппаЗадач = Справочники.ЗадачиАссистентаУправления.СсылкаНаГруппуЗадач(ИдентификаторГруппы);
		
		Если НЕ ЗначениеЗаполнено(ГруппаЗадач) Тогда
			ГруппаЗадач = Справочники.ЗадачиАссистентаУправления.СоздатьГруппу();
			ГруппаЗадач.Наименование = ЭтотОбъект.Заголовок;
			ГруппаЗадач.ИдентификаторГруппы = ИдентификаторГруппы;
			ГруппаЗадач.Записать();
		КонецЕсли;
		
		Для каждого СтрокаНастроек Из НастройкиЗадач Цикл
			
			Если ЗначениеЗаполнено(СтрокаНастроек.Задача) Тогда
				ЗадачаОбъект = СтрокаНастроек.Задача.ПолучитьОбъект();
			Иначе
				ЗадачаОбъект = Справочники.ЗадачиАссистентаУправления.СоздатьЭлемент();
				АвторИзменений = Пользователи.АвторизованныйПользователь();
				ЕстьЗадачиПользователя = Справочники.ЗадачиАссистентаУправления.ЕстьЗадачиПользователя(АвторИзменений);
			КонецЕсли;
			
			Если СтрокаНастроек.Удалена И ЗначениеЗаполнено(ЗадачаОбъект.Ссылка) Тогда
				УдалитьОсновнуюЗадачу(ЗадачаОбъект);
			КонецЕсли;
			
			Если СтрокаНастроек.Удалена Тогда
				СтрокаНастроек.Модифицированность = Ложь;
				Продолжить;
			КонецЕсли;
			
			ЗадачаОбъект.ДействиеИдентификатор = ДействиеИдентификатор;
			
			ЗадачаОбъект.События.Очистить();
			НовоеСобытие = ЗадачаОбъект.События.Добавить();
			НовоеСобытие.СобытиеИдентификатор = "ИзменениеСостоянияЗаказа";
			
			ЗадачаОбъект.ТипПредмета               = "ЗаказПоставщикуЗаказНаПроизводство";
			ЗадачаОбъект.ПользовательДляОповещения = СтрокаНастроек.ПользовательДляОповещения;
			ЗадачаОбъект.Используется              = ЭтотОбъект.ВРаботе;
			ЗадачаОбъект.Родитель                  = ГруппаЗадач.Ссылка;
						
			Если ЗначениеЗаполнено(СтрокаНастроек.ПользовательДляОповещения) Тогда
				ЗадачаОбъект.СпособОповещения = Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияПользователю;
			Иначе
				ЗаполнитьСпособОповещенияПоПредставлению(СтрокаНастроек, ЗадачаОбъект);
			КонецЕсли;
			
			ЗадачаОбъект.ЗначенияЗаполнения.Очистить();
			ЗадачаОбъект.ПараметрыУсловия.Очистить();
			
			ВидОперации = "";
			
			Если СтрокаНастроек.ТипПредмета = "ЗаказНаряд" Тогда
				ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд;
			ИначеЕсли СтрокаНастроек.ТипПредмета = "ЗаказПокупателя" Тогда
				ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
			КонецЕсли;
			
			Если ЭтоЗадачаИзменениеПоЗаказамПокупателей() Тогда
				ДобавитьПараметрЗадачи(ЗадачаОбъект.ЗначенияЗаполнения, "СостояниеЗаказаНаПроизводство",		 СтрокаНастроек.СостояниеЗаказаНаПроизводство);
				ДобавитьПараметрЗадачи(ЗадачаОбъект.ЗначенияЗаполнения, "ВариантЗавершенияЗаказаНаПроизводство", СтрокаНастроек.ВариантЗавершенияЗаказНаПроизводство);
			КонецЕсли;
			
			ДобавитьПараметрЗадачи(ЗадачаОбъект.ЗначенияЗаполнения, "СостояниеЗаказаПокупателя", СтрокаНастроек.СостояниеЗаказа);
			ДобавитьПараметрЗадачи(ЗадачаОбъект.ЗначенияЗаполнения, "ВидЗаказаПокупателя", 		 СтрокаНастроек.ВидЗаказа);
			ДобавитьПараметрЗадачи(ЗадачаОбъект.ЗначенияЗаполнения, "ВидОперации", 				 ВидОперации);
			ДобавитьПараметрЗадачи(ЗадачаОбъект.ЗначенияЗаполнения, "ТолькоОповестить", 		 ЭтоЗадачаСообщенияПоЗаказамПокупателей());
			ДобавитьПараметрЗадачи(ЗадачаОбъект.ЗначенияЗаполнения, "ВариантЗавершенияЗаказаПокупателя", СтрокаНастроек.ВариантЗавершенияЗаказПокупателя);
			
			ЗадачаОбъект.Наименование = ЭтотОбъект.Заголовок;
			ЗадачаОбъект.Записать();
			
			СтрокаНастроек.Модифицированность = Ложь;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПараметрЗадачи(Таблица, Параметр, Значение)
		
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Параметр = Параметр;
	НоваяСтрока.Значение = Новый ХранилищеЗначения(Значение);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПустыеНастройкиЗадачи()
	
	НовыеНастройки = НастройкиЗадач.Добавить();
	НовыеНастройки.ТипПредмета = "ЗаказПокупателя";
	НовыеНастройки.ВидЗаказа                     = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыЗаказовПокупателей.Основной");
	НовыеНастройки.СостояниеЗаказа               = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СостоянияЗаказовПокупателей.Завершен");
	НовыеНастройки.СостояниеЗаказаНаПроизводство = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СостоянияЗаказовНаПроизводство.Завершен");
	
	НовыеНастройки.ВариантЗавершенияЗаказНаПроизводство = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ВариантыЗавершенияЗаказа.Отменен");
	НовыеНастройки.ВариантЗавершенияЗаказПокупателя     = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ВариантыЗавершенияЗаказа.Отменен");
	
	НовыеНастройки.Модифицированность = Истина;
	
	ЗаполнитьСпособОповещенияПоЗначению(
		НовыеНастройки,
		НовыеНастройки.ПользовательДляОповещения,
		Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияБезОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуЗадач()
	
	Результат = Новый Структура();
	
	Результат.Вставить("ИзмененПризнакВРаботе", ИзмененПризнакВРаботе);
	Результат.Вставить("АвторИзменений", АвторИзменений);
	Результат.Вставить("ГруппаЗадач", ИдентификаторГруппы);
	Результат.Вставить("НужноДобавитьВОбсуждение", НЕ ЕстьЗадачиПользователя);
	
	Закрыть(Результат);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОсновнуюЗадачу(ЗадачаОбъект)
	
	Отбор = Справочники.ЗадачиАссистентаУправления.НовыйОтборЗадач();
	Отбор.ОсновнаяЗадача = ЗадачаОбъект.Ссылка;
	ОтобранныеЗадачи = Справочники.ЗадачиАссистентаУправления.ПолучитьЗадачи(Отбор);
	ЗадачаОбъект.Удалить();
	
КонецПроцедуры

&НаСервере
Функция ЭтоЗадачаИзменениеПоЗаказамПокупателей()	
	
	Возврат ИдентификаторГруппы = "ИзменениеСостоянияЗаказаНаПроизводствоПоСостояниюЗаказовПокупателей";
	
КонецФункции

&НаСервере
Функция ЭтоЗадачаСообщенияПоЗаказамПокупателей()
	
	Возврат ИдентификаторГруппы = "ОповещениеЗаказаНаПроизводствоПоСостояниюЗаказовПокупателей";
	
КонецФункции

&НаСервере
Функция ЗаполнитьОписаниеЗадачиИзмененияПоЗаказамПокупателей()
	
	Элементы.ОсновноеОписание.Заголовок = НСтр("ru = 'Когда изменится состояние заказов покупателей, Даша изменит состояние связанного с ними заказа на производство, а также сообщит, если: '");
	Элементы.ДопФункция_0.Заголовок = НСтр("ru = 'Заказы покупателей вернулись в более раннее состояние'");
	Элементы.ДопФункция_1.Заголовок = НСтр("ru = 'Заказ на производство перешел в указанное для него состояние раньше, чем заказы покупателей прошли состояние, указанное для них'");
	
	Элементы.КартинкаЗадачи.Картинка = БиблиотекаКартинок.АссистентУправленияИзменитьСостояниеПродажи;
	ЭтотОбъект.Заголовок = НСтр("ru = 'Изменение состояния заказа на производство по состоянию заказов покупателей'");
	
КонецФункции

&НаСервере
Функция ЗаполнитьОписаниеЗадачиСообщенияПоЗаказамПокупателей()
	
	Элементы.ОсновноеОписание.Заголовок = НСтр("ru = 'Когда изменится состояние заказов покупателей, Даша сообщит связанному с ними заказу на производство, а также сообщит, если: '");
	Элементы.ДопФункция_0.Заголовок = НСтр("ru = 'Заказы покупателей вернулись в более раннее состояние '");
		
	Элементы.КартинкаЗадачи.Картинка = БиблиотекаКартинок.АссистентУправленияСообщениеПродажи;
	ЭтотОбъект.Заголовок = НСтр("ru = 'Сообщение заказу на производство по состоянию заказов покупателей'");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОписаниеЗадачи()
	
	Если ЭтоЗадачаИзменениеПоЗаказамПокупателей() Тогда
		ЗаполнитьОписаниеЗадачиИзмененияПоЗаказамПокупателей();
		Возврат;
	КонецЕсли;
		
	Если ЭтоЗадачаСообщенияПоЗаказамПокупателей() Тогда
		ЗаполнитьОписаниеЗадачиСообщенияПоЗаказамПокупателей();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьЗаголовкиПолей(ПолеТипПредмета, ДекорацияТекстОбсуждение)
	
	Если НЕ ЭтоЗадачаСообщенияПоЗаказамПокупателей() Тогда
		Возврат;
	КонецЕсли;
	
	ДекорацияТекстОбсуждение.Заголовок = НСтр("ru = 'напиши в обсуждение связанного с ними заказа на производство и '");
	НадписьЗаказПокупателя = НСтр("ru = 'Когда заказы покупателей'");
	ПолеТипПредмета.Заголовок = НСтр("ru = 'Когда'");
	
КонецПроцедуры

#КонецОбласти
