
#Область ОписаниеПеременных

#Область ПеременныеФормы

&НаКлиенте
Перем ИзмененПризнакВРаботе;

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ИдентификаторГруппы", ИдентификаторГруппы);
	РазрешеноИзменятьЗадачи = Обработки.АссистентУправления.РазрешеноИзменятьЗадачи();
	
	ЗаполнитьОписаниеЗадачи();
	ЗаполнитьСпособыОповещения();
	ОбновитьБлокиНастроекАссистента();
	ОбновитьЭлементыДействийАссистента();
	ЗаполнитьСписокВыбораЭлементовФормы();
	
	ИнформационнаяБазаЗарегистрирована = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	КлючСохраненияПоложенияОкна = Новый УникальныйИдентификатор();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИзмененПризнакВРаботе = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РазрешеноИзменятьЗадачи Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененныеЗадачи = НастройкиЗадач.НайтиСтроки(Новый Структура("Модифицированность", Истина));
	ЗадачиИзменены = ИзмененныеЗадачи.Количество() <> 0;
	
	Если НЕ ЗадачиИзменены Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.ВРаботе Тогда
		
		СоздатьИзменитьЗадачиАссистента();
		ЗакрытьФормуЗадач();
		Возврат;
		
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗадачиЗаполненыКорректно() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СоздатьИзменитьЗадачиАссистента();
	ЗакрытьФормуЗадач();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ЕстьОшибки = Ложь;
	
	Для каждого СтрокаНастроек Из НастройкиЗадач Цикл
		
		Если СтрокаНастроек.Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		Индекс = НастройкиЗадач.Индекс(СтрокаНастроек);
		
		Если Не ЗначениеЗаполнено(СтрокаНастроек.СостояниеЗаказа) И НЕ ТолькоОповестить() Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаНастроек.ПроцентОплаты) И ВидимостьПроцентаОплаты() Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаНастроек.СтатусПоставки) И ВидимостьСтатусаПоставки() Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(СтрокаНастроек.СпособОповещения) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнены обязательные данные'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПроцентОплатыПриИзменении(Элемент)
	
	СтрокаНастроек = НастройкиЗадач.Получить(ИндексБлока(Элемент.Имя));
	
	Если СтрокаНастроек.ПроцентОплаты = 100 Тогда
		СтрокаНастроек.СтатусОплаты = ПредопределенноеЗначение("Перечисление.СтатусОплаты.Полная");
	Иначе
		СтрокаНастроек.СтатусОплаты = ПредопределенноеЗначение("Перечисление.СтатусОплаты.Частичная");
	КонецЕсли;
	
	СтрокаНастроек.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОповещенияПриИзменении(Элемент)
	
	СтрокаНастроек = НастройкиЗадач.Получить(ИндексБлока(Элемент.Имя));
	СтрокаНастроек.Модифицированность = Истина;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВРаботеПриИзменении(Элемент)
	
	ИзмененПризнакВРаботе = Истина;
	
	УстановитьМодифицированностьЗадач();
	
	Если НЕ ВРаботе Тогда
		Возврат;
	КонецЕсли;
	
	Если ИнформационнаяБазаЗарегистрирована Тогда
		Возврат;
	КонецЕсли;
	
	ВРаботе = Ложь;
	Элементы.ПанельОшибки.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУдалитьНажатие(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СтрокаНастроек.Удалена = Истина;
	СтрокаНастроек.Модифицированность = Истина;
	
	ОбновитьЭлементыДействийИЗаполнитьСписокВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОповещенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
		
		Элементы["СпособОповещения_" + Индекс].ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
		НастройкиЗадач[Число(Индекс)].СпособОповещения = ВыбранноеЗначение;
		НастройкиЗадач[Число(Индекс)].ПользовательДляОповещения = ВыбранноеЗначение;
		
		Возврат;
		
	КонецЕсли;
	
	ЗначениеСпособаОповещения = СпособыОповещения.НайтиСтроки(Новый Структура("Представление", ВыбранноеЗначение));
	
	Если ЗначениеСпособаОповещения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеСпособаОповещения[0].Значение <> ПредопределенноеЗначение("Перечисление.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияПользователю") Тогда
		
		Элементы["СпособОповещения_" + Индекс].ОграничениеТипа = Новый ОписаниеТипов("Строка");
		НастройкиЗадач[Число(Индекс)].СпособОповещения = ВыбранноеЗначение;
		НастройкиЗадач[Число(Индекс)].ПользовательДляОповещения = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Индекс", Индекс);
	
	Оповещение = Новый ОписаниеОповещения("ВыборПользователя", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора",ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОповещенияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Индекс = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрНайти(Элемент.Имя, "_"));
	ЗаполнитьДанныеВыбора(ДанныеВыбора, Индекс);
КонецПроцедуры

&НаКлиенте
Процедура СпособОповещенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Индекс = ИндексБлока(Элемент.Имя);
	ЗаполнитьДанныеВыбора(ДанныеВыбора, Индекс);
КонецПроцедуры

&НаКлиенте
Процедура ТекстОшибкиНажатие(Элемент)
	НачатьПодключениеОбсуждений();
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаказаПриИзменении(Элемент)
	СтрокаНастроек = НастройкиЗадач.Получить(ИндексБлока(Элемент.Имя));
	СтрокаНастроек.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СтатусПоставкиПриИзменении(Элемент)
	СтрокаНастроек = НастройкиЗадач.Получить(ИндексБлока(Элемент.Имя));
	СтрокаНастроек.Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьДействие(Команда)
	
	ДобавитьДействиеСервер();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДобавитьДействиеСервер()
	
	ДобавитьПустыеНастройкиЗадачи();
	ОбновитьЭлементыДействийАссистента();
	ЗаполнитьСписокВыбораЭлементовФормы();

КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДействийИЗаполнитьСписокВыбора()
	ОбновитьЭлементыДействийАссистента();
	ЗаполнитьСписокВыбораЭлементовФормы();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексБлока(ЭлементИмя)
	
	Возврат Прав(ЭлементИмя, СтрДлина(ЭлементИмя) - СтрНайти(ЭлементИмя, "_"));
	
КонецФункции

&НаСервере
Процедура ОпределитьНаименованиеЗадачи(Задача, СтрокаНастроек)
	
	Наименование = "";
	СтрокаДействия = "";
	СтрокаОплаты = "";
	СтрокаОтгрузки = "";
	
	Если ТолькоОповестить() Тогда
		СтрокаДействия = НСтр("ru = 'Оповестить пользователя при '");
	Иначе
		СтрокаДействия = НСтр("ru = 'Изменить состояние заказа поставщику при '");
	КонецЕсли;
	
	Если СтрокаНастроек.ПроцентОплаты = 100 Тогда
		СтрокаОплаты = НСтр("ru = 'полной оплате'");
	Иначе
		СтрокаОплаты = НСтр("ru = 'частичной оплате'");
	КонецЕсли;
	
	Если СтрокаНастроек.СтатусПоставки = Перечисления.СтатусОтгрузки.Полная Тогда
		СтрокаОтгрузки = НСтр("ru = 'полной поставке'");
	Иначе
		СтрокаОтгрузки = НСтр("ru = 'частичной поставке'");
	КонецЕсли;
	
	Если ЭтоЗадачаИзменениеСостоянияПриОплатеИПоставке() ИЛИ ЭтоЗадачаСообщенияПриОплатеИПоставке() Тогда
		Наименование = СтрокаДействия + СтрокаОплаты + НСтр("ru = ' и '") + СтрокаОтгрузки;
	ИначеЕсли ЭтоЗадачаИзменениеСостоянияПриОплате() ИЛИ ЭтоЗадачаСообщенияПриОплате() Тогда
		Наименование = СтрокаДействия + СтрокаОплаты;
	Иначе
		Наименование = СтрокаДействия + СтрокаОтгрузки;
	КонецЕсли; 

	Задача.Наименование = Наименование;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеВыбора(ДанныеВыбора,Индекс)
	
	Если ДанныеВыбора = Неопределено Тогда
		ДанныеВыбора = Новый СписокЗначений;
	КонецЕсли;
	
	СпособНикогоНеОповещать = СпособыОповещения.НайтиСтроки(Новый Структура("Значение", Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияБезОповещения));
	Если СпособНикогоНеОповещать.Количество() > 0 Тогда
		ДанныеВыбора.Добавить(СпособНикогоНеОповещать[0].Представление,
		,,БиблиотекаКартинок.СпособОповещенияНикогоНеОповещать);
	КонецЕсли;
	
	СпособОповестиОтветственного = СпособыОповещения.НайтиСтроки(Новый Структура("Значение", Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияОтветственному));
	Если СпособОповестиОтветственного.Количество() > 0 Тогда
		ДанныеВыбора.Добавить(СпособОповестиОтветственного[0].Представление,
		,,БиблиотекаКартинок.СпособОповещенияОповеститьВыбранного);
	КонецЕсли;
	
	ДанныеВыбора.Добавить(Пользователи.АвторизованныйПользователь(), ,,БиблиотекаКартинок.СпособОповещенияОповеститьВыбранного);
		
	СпособОповестиПользователя = СпособыОповещения.НайтиСтроки(Новый Структура("Значение", Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияПользователю));
	Если СпособОповестиПользователя.Количество() > 0 Тогда
		ДанныеВыбора.Добавить(СпособОповестиПользователя[0].Представление,
		,,БиблиотекаКартинок.СпособОповещенияОповеститьВыбранного);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыборПользователя(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = ДополнительныеПараметры.Индекс;
	Элементы["СпособОповещения_"+Индекс].ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	НастройкиЗадач[Число(Индекс)].СпособОповещения = Результат;
	НастройкиЗадач[Число(Индекс)].ПользовательДляОповещения = Результат;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодключениеОбсуждений()
	
	Продолжение = Новый ОписаниеОповещения("ЗавершитьПодключениеОбсуждений", ЭтотОбъект);
	ОбсужденияКлиент.ПоказатьПодключение(Продолжение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПодключениеОбсуждений(Результат, ДополнительныеПараметры) Экспорт
	
	ИнформационнаяБазаЗарегистрирована = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	Элементы.ПанельОшибки.Видимость = НЕ ИнформационнаяБазаЗарегистрирована;
	ВРаботе = ИнформационнаяБазаЗарегистрирована;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМодифицированностьЗадач()
	
	Для Каждого СтрокаНастроек Из НастройкиЗадач Цикл
		СтрокаНастроек.Модифицированность = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЗадачиЗаполненыКорректно()
	
	ЕстьОшибкиСостояний = Ложь;
	ЕстьОшибкиУсловий = Ложь;
	
	ОдинаковыеСостояния = Новый Массив;
	
	Для каждого СтрокаНастроек Из НастройкиЗадач Цикл
		
		Если НЕ ТолькоОповестить() Тогда
			ОтборСостояние = Новый Структура;
			ОтборСостояние.Вставить("Удалена",Ложь);
			ОтборСостояние.Вставить("СостояниеЗаказа",СтрокаНастроек.СостояниеЗаказа);
			ОтборСостояние.Вставить("СпособОповещения", СтрокаНастроек.СпособОповещения);
			ОтборСостояние.Вставить("ПользовательДляОповещения", СтрокаНастроек.ПользовательДляОповещения);
			
			ЗадачиСОдинаковымиСостояниями = НастройкиЗадач.НайтиСтроки(ОтборСостояние);
			Если ЗадачиСОдинаковымиСостояниями.Количество() > 1 Тогда
				
				ЕстьОшибкиСостояний = Истина;
				Состояние = ОдинаковыеСостояния.Найти(СтрокаНастроек.СостояниеЗаказа);
				
				Если Состояние = Неопределено Тогда
					ОбщегоНазначенияКлиент.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Состояние %1 используется в нескольких действиях'"),СтрокаНастроек.СостояниеЗаказа));
					ОдинаковыеСостояния.Добавить(СтрокаНастроек.СостояниеЗаказа);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьОшибкиУсловий Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборУсловия = Новый Структура;
		ОтборУсловия.Вставить("Удалена",Ложь);
		ОтборУсловия.Вставить("СпособОповещения", 		   СтрокаНастроек.СпособОповещения);
		ОтборУсловия.Вставить("ПользовательДляОповещения", СтрокаНастроек.ПользовательДляОповещения);
		
		Если ВидимостьПроцентаОплаты() Тогда
			ОтборУсловия.Вставить("ПроцентОплаты",	СтрокаНастроек.ПроцентОплаты);
		КонецЕсли;
		
		Если ВидимостьСтатусаПоставки() Тогда
			ОтборУсловия.Вставить("СтатусПоставки",	СтрокаНастроек.СтатусПоставки);
		КонецЕсли;

		ЗадачиСОдинаковымиУсловиями = НастройкиЗадач.НайтиСтроки(ОтборУсловия);
		
		Если ЗадачиСОдинаковымиУсловиями.Количество() > 1 Тогда
			
			ЕстьОшибкиУсловий = Истина;
			ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Настроено несколько действий с одинаковыми условиями'"));
					
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьОшибки = ЕстьОшибкиСостояний ИЛИ ЕстьОшибкиУсловий;
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСпособыОповещения()
	
	СпособыОповещения.Очистить();
	
	СпособНикогоНеОповещать = СпособыОповещения.Добавить();
	СпособНикогоНеОповещать.Значение = Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияБезОповещения;
	СпособНикогоНеОповещать.Представление = НСтр("ru = 'Никого не оповещать'");
	
	СпособОповестиОтветственного = СпособыОповещения.Добавить();
	СпособОповестиОтветственного.Значение = Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияОтветственному;
	СпособОповестиОтветственного.Представление = НСтр("ru = 'Ответственного за заказ'");
	
	СпособОповестиПользователя = СпособыОповещения.Добавить();
	СпособОповестиПользователя.Значение = Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияПользователю;
	СпособОповестиПользователя.Представление = НСтр("ru = 'Другого пользователя'");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпособОповещенияПоЗначению(СтрокаНастроек, ПользовательДляОповещения, СпособОповещения)
	
	Если НЕ ЗначениеЗаполнено(ПользовательДляОповещения) Тогда
		
		ПредставлениеСпособаОповещения = СпособыОповещения.НайтиСтроки(Новый Структура("Значение", СпособОповещения));
		
		Если ПредставлениеСпособаОповещения.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаНастроек.СпособОповещения = ПредставлениеСпособаОповещения[0].Представление;
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаНастроек.СпособОповещения = ПользовательДляОповещения;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпособОповещенияПоПредставлению(СтрокаНастроек, ЗадачаОбъект)
		
	ЗначениеСпособаОповещения = СпособыОповещения.НайтиСтроки(Новый Структура("Представление", СтрокаНастроек.СпособОповещения));
	
	Если ЗначениеСпособаОповещения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачаОбъект.СпособОповещения = ЗначениеСпособаОповещения[0].Значение;
			
КонецПроцедуры

&НаСервере
Процедура ОпределитьСобытияЗадачи(ТаблицаСобытий, СтрокаНастроек)
	
	НовоеСобытиеИзменения = ТаблицаСобытий.Добавить();
	НовоеСобытиеИзменения.СобытиеИдентификатор = "ИзменениеСостоянияЗаказаПоставщику";
	
	Если ВидимостьПроцентаОплаты() Тогда
		НовоеСобытиеОплаты = ТаблицаСобытий.Добавить();
		НовоеСобытиеОплаты.СобытиеИдентификатор = "ИзменениеПоступленияОплаты";
	КонецЕсли;
	
	Если ВидимостьСтатусаПоставки() Тогда
		НовоеСобытиеОтгрузки = ТаблицаСобытий.Добавить();
		НовоеСобытиеОтгрузки.СобытиеИдентификатор = "ИзменениеПоступленияЗапасов";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой
	
&НаСервере
Процедура ЗаполнитьСписокВыбораЭлементовФормы()
	
	Для Итератор = 0 По НастройкиЗадач.Количество() - 1 Цикл
		
		Если НастройкиЗадач[Итератор].Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы["СтатусПоставки_" + Итератор].СписокВыбора.Очистить();
		Элементы["СтатусПоставки_" + Итератор].СписокВыбора.Добавить(Перечисления.СтатусОтгрузки.Полная, НСтр("ru='Полностью'"));
		Элементы["СтатусПоставки_" + Итератор].СписокВыбора.Добавить(Перечисления.СтатусОтгрузки.Частичная, НСтр("ru='Частично'"));
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДействийАссистента()
	
	Элементы.Переместить(Элементы.ДобавитьДействие, Элементы.Действие_0);
	УдалитьЭлементыЗадач(Элементы);
		
	Для Каждого СтрокаНастроек Из НастройкиЗадач Цикл
		
		ИндексНастройки = НастройкиЗадач.Индекс(СтрокаНастроек);
		
		Если НастройкиЗадач[ИндексНастройки].Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИндексНастройки > 0 Тогда
			
			ОбщаяГруппаДействия = Элементы.Добавить("ГруппаДействие_" + ИндексНастройки, Тип("ГруппаФормы"), Элементы.ДействияАссистента);
			УстановитьОформлениеГруппы(ОбщаяГруппаДействия, Элементы.ГруппаДействие_0);
			
			ГруппаДействия = Элементы.Добавить("Действие_" + ИндексНастройки, Тип("ГруппаФормы"), ОбщаяГруппаДействия);
			УстановитьОформлениеГруппы(ГруппаДействия, Элементы.Действие_0);
			
			ГруппаСтроки = Элементы.Добавить("Строки_" + ИндексНастройки, Тип("ГруппаФормы"), ГруппаДействия);
			УстановитьОформлениеГруппы(ГруппаСтроки, Элементы.Строки_0);
			
			ГруппаПервойСтрокиДействия = Элементы.Добавить("ГруппаДействие_" + ИндексНастройки + "_Строка_1", Тип("ГруппаФормы"), ГруппаСтроки);
			УстановитьОформлениеГруппы(ГруппаПервойСтрокиДействия, Элементы.ГруппаДействие_0_Строка_1);
			
			ДекорацияНадпись = Элементы.Добавить("НадписьЗаказПоставщику_" + ИндексНастройки, Тип("ДекорацияФормы"), ГруппаПервойСтрокиДействия);
			ДекорацияНадпись.Вид = Элементы.НадписьЗаказПоставщику_0.Вид;
			ДекорацияНадпись.Заголовок = Элементы.НадписьЗаказПоставщику_0.Заголовок;
			ДекорацияНадпись.Ширина = Элементы.НадписьЗаказПоставщику_0.Ширина;
			ДекорацияНадпись.Видимость = Элементы.НадписьЗаказПоставщику_0.Видимость;
			ДекорацияНадпись.РастягиватьПоГоризонтали = Элементы.НадписьЗаказПоставщику_0.РастягиватьПоГоризонтали;
			
			ПолеСостояниеЗаказа = Элементы.Добавить("СостояниеЗаказа_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеСостояниеЗаказа.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].СостояниеЗаказа";
			УстановитьОформлениеПоля(ПолеСостояниеЗаказа, Элементы.СостояниеЗаказа_0);
			ПолеСостояниеЗаказа.УстановитьДействие("ПриИзменении","СостояниеЗаказаПриИзменении");
			
			ПолеПроцентОплаты = Элементы.Добавить("ПроцентОплаты_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеПроцентОплаты.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].ПроцентОплаты";
			УстановитьОформлениеПоля(ПолеПроцентОплаты, Элементы.ПроцентОплаты_0);
			ПолеПроцентОплаты.УстановитьДействие("ПриИзменении", "ПроцентОплатыПриИзменении");
			
			ПолеСтатусПоставки = Элементы.Добавить("СтатусПоставки_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеСтатусПоставки.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].СтатусПоставки";
			УстановитьОформлениеПоля(ПолеСтатусПоставки, Элементы.СтатусПоставки_0);
			ПолеСтатусПоставки.УстановитьДействие("ПриИзменении", "СтатусПоставкиПриИзменении");
			
			ДекорацияУдалить = Элементы.Добавить("ДекорацияУдалить_" + ИндексНастройки, Тип("ДекорацияФормы"), ОбщаяГруппаДействия);
			ДекорацияУдалить.Вид = Элементы.ДекорацияУдалить_0.Вид;
			ДекорацияУдалить.Заголовок = Элементы.ДекорацияУдалить_0.Заголовок;
			ДекорацияУдалить.Ширина = Элементы.ДекорацияУдалить_0.Ширина;
			ДекорацияУдалить.Высота = Элементы.ДекорацияУдалить_0.Высота;
			ДекорацияУдалить.Картинка = Элементы.ДекорацияУдалить_0.Картинка;
			ДекорацияУдалить.РазмерКартинки = Элементы.ДекорацияУдалить_0.РазмерКартинки;
			ДекорацияУдалить.Гиперссылка = Элементы.ДекорацияУдалить_0.Гиперссылка;
			ДекорацияУдалить.УстановитьДействие("Нажатие", "ДекорацияУдалитьНажатие");
			
			ГруппаВторойСтрокиДействия = Элементы.Добавить("ГруппаДействие_" + ИндексНастройки + "_Строка_2", Тип("ГруппаФормы"), ГруппаСтроки);
			УстановитьОформлениеГруппы(ГруппаВторойСтрокиДействия, Элементы.ГруппаДействие_0);
						
			ДекорацияТекстОбсуждение = Элементы.Добавить("ТекстОбсуждение_" + ИндексНастройки, Тип("ДекорацияФормы"), ГруппаВторойСтрокиДействия);
			ДекорацияТекстОбсуждение.Вид = Элементы.ТекстОбсуждение_0.Вид;
			ДекорацияТекстОбсуждение.Заголовок = Элементы.ТекстОбсуждение_0.Заголовок;
			ДекорацияТекстОбсуждение.Ширина = Элементы.ТекстОбсуждение_0.Ширина;
			ДекорацияТекстОбсуждение.Видимость = Элементы.ТекстОбсуждение_0.Видимость;
			
			ПолеСпособОповещения = Элементы.Добавить("СпособОповещения_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаВторойСтрокиДействия);
			ПолеСпособОповещения.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].СпособОповещения";
			УстановитьОформлениеПоля(ПолеСпособОповещения, Элементы.СпособОповещения_0);
			ПолеСпособОповещения.УстановитьДействие("ПриИзменении", "СпособОповещенияПриИзменении");
			ПолеСпособОповещения.УстановитьДействие("АвтоПодбор", "СпособОповещенияАвтоПодбор");
			ПолеСпособОповещения.УстановитьДействие("НачалоВыбора", "СпособОповещенияНачалоВыбора");
			ПолеСпособОповещения.УстановитьДействие("ОбработкаВыбора", "СпособОповещенияОбработкаВыбора");
			
			Элементы.Переместить(Элементы.ДобавитьДействие, Элементы["Действие_" + ИндексНастройки]);
		КонецЕсли;
		
	КонецЦикла;
	
	УправлениеФормой();
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
		
	Элементы.ДобавитьДействие.Видимость = РазрешеноИзменятьЗадачи;
	Элементы.ДействияАссистента.ТолькоПросмотр = НЕ РазрешеноИзменятьЗадачи;
	Элементы.ВРаботе.ТолькоПросмотр = НЕ РазрешеноИзменятьЗадачи;
	ЭтотОбъект.ТолькоПросмотр = НЕ РазрешеноИзменятьЗадачи;
	
	Для Каждого СтрокаНастроек Из НастройкиЗадач Цикл
		
		ИндексНастройки = НастройкиЗадач.Индекс(СтрокаНастроек);
		
		Если СтрокаНастроек.Удалена Тогда 
			Продолжить;
		КонецЕсли;
		
		ПолеСостояниеЗаказа      = Элементы["СостояниеЗаказа_"+ИндексНастройки];
		ПолеСпособОповещения     = Элементы["СпособОповещения_"+ИндексНастройки];
		ДекорацияЗаказПоставщику = Элементы["НадписьЗаказПоставщику_"+ИндексНастройки];
		ДекорацияТекстОбсуждение = Элементы["ТекстОбсуждение_"+ИндексНастройки];
		ПолеПроцентОплаты        = Элементы["ПроцентОплаты_"+ИндексНастройки];
		ПолеСтатусПоставки       = Элементы["СтатусПоставки_"+ИндексНастройки];
		ДекорацияУдалить         = Элементы["ДекорацияУдалить_"+ИндексНастройки];

		Если ТипЗнч(СтрокаНастроек.СпособОповещения) = Тип("Строка") Тогда
			ПолеСпособОповещения.ОграничениеТипа = Новый ОписаниеТипов("Строка");
		ИначеЕсли ТипЗнч(СтрокаНастроек.СпособОповещения) = Тип("СправочникСсылка.Пользователи") Тогда
			ПолеСпособОповещения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
		КонецЕсли;
		
		ПолеПроцентОплаты.Видимость = ВидимостьПроцентаОплаты();
		ПолеСтатусПоставки.Видимость = ВидимостьСтатусаПоставки();
		
		ДекорацияЗаказПоставщику.Видимость = НЕ ТолькоОповестить();
		ПолеСостояниеЗаказа.Видимость = ДекорацияЗаказПоставщику.Видимость;
		ДекорацияУдалить.Доступность = РазрешеноИзменятьЗадачи И ИндексНастройки <> 0;
		
		Если ЭтоЗадачаСообщенияПриОплате() Тогда
			Элементы.Переместить(ДекорацияТекстОбсуждение,Элементы["ГруппаДействие_" + ИндексНастройки + "_Строка_1"]);
			Элементы.Переместить(ПолеСпособОповещения,Элементы["ГруппаДействие_" + ИндексНастройки + "_Строка_1"]);
		КонецЕсли;
		
		Если ЭтоЗадачаСообщенияПриПоставке() Тогда
			Элементы.Переместить(ДекорацияТекстОбсуждение,Элементы["ГруппаДействие_" + ИндексНастройки + "_Строка_1"]);
			Элементы.Переместить(ПолеСпособОповещения,Элементы["ГруппаДействие_" + ИндексНастройки + "_Строка_1"]);
		КонецЕсли;
		
		Если ЭтоЗадачаСообщенияПриОплатеИПоставке() Тогда
			ПолеСтатусПоставки.МаксимальнаяШирина = 21;
		КонецЕсли;
		
		ОпределитьЗаголовкиПолей(ПолеСтатусПоставки, ПолеПроцентОплаты, ДекорацияТекстОбсуждение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВидимостьПроцентаОплаты()
	
	Возврат ЭтоЗадачаИзменениеСостоянияПриОплате() ИЛИ ЭтоЗадачаИзменениеСостоянияПриОплатеИПоставке() 
			ИЛИ ЭтоЗадачаСообщенияПриОплате() ИЛИ ЭтоЗадачаСообщенияПриОплатеИПоставке();
			
КонецФункции

&НаСервере
Функция ВидимостьСтатусаПоставки()
	
	Возврат ЭтоЗадачаИзменениеСостоянияПриПоставке() ИЛИ ЭтоЗадачаИзменениеСостоянияПриОплатеИПоставке() 
			ИЛИ ЭтоЗадачаСообщенияПриПоставке() ИЛИ ЭтоЗадачаСообщенияПриОплатеИПоставке();
	
КонецФункции

&НаСервере
Функция ТолькоОповестить()
	
	Возврат ЭтоЗадачаСообщенияПриОплате() ИЛИ ЭтоЗадачаСообщенияПриОплатеИПоставке()
			ИЛИ ЭтоЗадачаСообщенияПриПоставке();
			
КонецФункции

&НаСервере
Процедура УстановитьОформлениеГруппы(ДобавляемаяГруппа, ГруппаФормы)
	
	ДобавляемаяГруппа.Вид = ГруппаФормы.Вид;
	ДобавляемаяГруппа.Отображение = ГруппаФормы.Отображение;
	ДобавляемаяГруппа.Группировка = ГруппаФормы.Группировка;
	ДобавляемаяГруппа.ОтображатьЗаголовок = ГруппаФормы.ОтображатьЗаголовок;
	ДобавляемаяГруппа.ЦветФона = ГруппаФормы.ЦветФона;
	ДобавляемаяГруппа.СквозноеВыравнивание = ГруппаФормы.СквозноеВыравнивание;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыЗадач(Элементы)
	
	УдаляемыеЭлементы = Новый Массив;
	Для ИндексГруппы = 1 По Элементы.ДействияАссистента.ПодчиненныеЭлементы.Количество()-1 Цикл
		УдаляемыеЭлементы.Добавить(Элементы.ДействияАссистента.ПодчиненныеЭлементы[ИндексГруппы]);
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеПоля(ДобавляемыйЭлемент, ЭлементФормы)
	
	ДобавляемыйЭлемент.Вид = ЭлементФормы.Вид;
	ДобавляемыйЭлемент.ПоложениеЗаголовка = ЭлементФормы.ПоложениеЗаголовка;
	ДобавляемыйЭлемент.Заголовок = ЭлементФормы.Заголовок;
	ДобавляемыйЭлемент.АвтоМаксимальнаяШирина = ЭлементФормы.АвтоМаксимальнаяШирина;
	ДобавляемыйЭлемент.МаксимальнаяШирина = ЭлементФормы.МаксимальнаяШирина;
	ДобавляемыйЭлемент.РежимВыбораИзСписка = ЭлементФормы.РежимВыбораИзСписка;
	ДобавляемыйЭлемент.КнопкаВыпадающегоСписка = ЭлементФормы.КнопкаВыпадающегоСписка;
	ДобавляемыйЭлемент.КнопкаОткрытия = ЭлементФормы.КнопкаОткрытия;
	ДобавляемыйЭлемент.КнопкаВыбора = ЭлементФормы.КнопкаВыбора;
	ДобавляемыйЭлемент.АвтоОтметкаНезаполненного = ЭлементФормы.АвтоОтметкаНезаполненного;
	ДобавляемыйЭлемент.ОтображениеПодсказки = ЭлементФормы.ОтображениеПодсказки;
	ДобавляемыйЭлемент.Подсказка = ЭлементФормы.Подсказка;
	ДобавляемыйЭлемент.ИсторияВыбораПриВводе = ЭлементФормы.ИсторияВыбораПриВводе;
	ДобавляемыйЭлемент.КнопкаСоздания = ЭлементФормы.КнопкаСоздания;
	ДобавляемыйЭлемент.КнопкаОткрытия = ЭлементФормы.КнопкаОткрытия;

КонецПроцедуры

#КонецОбласти

#Область ЗадачиАссистента

&НаСервере
Процедура УдалитьОдинаковыеДействияИзНастроек()
	
	Для Каждого СтрокаНастроек Из НастройкиЗадач Цикл
					
		ОтборПоУсловиям = Новый Структура;
		ОтборПоУсловиям.Вставить("Удалена", Ложь);
		ОтборПоУсловиям.Вставить("ПроцентОплаты", СтрокаНастроек.ПроцентОплаты);
		ОтборПоУсловиям.Вставить("СостояниеЗаказа", СтрокаНастроек.СостояниеЗаказа);
		ОтборПоУсловиям.Вставить("СтатусПоставки", СтрокаНастроек.СтатусПоставки);
		ОтборПоУсловиям.Вставить("СпособОповещения", СтрокаНастроек.СпособОповещения);
		ОтборПоУсловиям.Вставить("ПользовательДляОповещения", СтрокаНастроек.ПользовательДляОповещения);
		
		ЕстьЗадачиСОдинаковымиУсловиями = НастройкиЗадач.НайтиСтроки(ОтборПоУсловиям).Количество() > 1;
		
		Если ЕстьЗадачиСОдинаковымиУсловиями Тогда
			СтрокаНастроек.Удалена = Истина;
			СтрокаНастроек.Модифицированность = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьБлокиНастроекАссистента()
	
	ГруппаЗадач = Справочники.ЗадачиАссистентаУправления.СсылкаНаГруппуЗадач(ИдентификаторГруппы);
	
	Если НЕ ЗначениеЗаполнено(ГруппаЗадач) Тогда
		ДобавитьПустыеНастройкиЗадачи();
		Возврат;
	КонецЕсли;

	ОтобранныеЗадачи = Справочники.ЗадачиАссистентаУправления.ПолучитьЗадачиПоГруппе(ГруппаЗадач);
	
	НастройкиЗадач.Очистить();
	Для каждого Задача Из ОтобранныеЗадачи Цикл
				
		ДанныеЗадачи    = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "СпособОповещения,Используется,ПользовательДляОповещения");
		ЗначенияЗаполнения = Справочники.ЗадачиАссистентаУправления.ЗначенияЗаполнения(Задача);
		
		СтрокаНастроек = НастройкиЗадач.Добавить();
		СтрокаНастроек.Задача             = Задача;
		
		Если НЕ ТолькоОповестить() Тогда
			СтрокаНастроек.СостояниеЗаказа    = ЗначенияЗаполнения.СостояниеЗаказа;
		КонецЕсли;
		
		Если ВидимостьПроцентаОплаты() Тогда
			СтрокаНастроек.ПроцентОплаты      = ЗначенияЗаполнения.ПроцентОплаты;
		КонецЕсли;
		
		Если ВидимостьСтатусаПоставки() Тогда
			СтрокаНастроек.СтатусПоставки     = ЗначенияЗаполнения.СтатусОтгрузки;
		КонецЕсли;
		
		СтрокаНастроек.Удалена            = Ложь;
		СтрокаНастроек.Модифицированность = Ложь;
		СтрокаНастроек.ПользовательДляОповещения = ДанныеЗадачи.ПользовательДляОповещения;
		
		ЗаполнитьСпособОповещенияПоЗначению(СтрокаНастроек, ДанныеЗадачи.ПользовательДляОповещения, ДанныеЗадачи.СпособОповещения);
		
		Если СтрокаНастроек.ПроцентОплаты = 100 Тогда
			СтрокаНастроек.СтатусОплаты = Перечисления.СтатусОплаты.Полная;
		Иначе
			СтрокаНастроек.СтатусОплаты = Перечисления.СтатусОплаты.Частичная;
		КонецЕсли;

		ЭтотОбъект.ВРаботе = ДанныеЗадачи.Используется;
		
	КонецЦикла;
	
	Если НастройкиЗадач.Количество() = 0 Тогда
		ДобавитьПустыеНастройкиЗадачи();
	КонецЕсли;
	
	НастройкиЗадач.Сортировать("ПроцентОплаты Возр");
	
КонецПроцедуры

&НаСервере
Процедура СоздатьИзменитьЗадачиАссистента()
	
	ДействиеИдентификатор = "СинхронизироватьСостояниеЗаказаСтатусыЗаказа";
	УдалитьОдинаковыеДействияИзНастроек();
	НастройкиЗадач.Сортировать("ПроцентОплаты Возр");
	
	НачатьТранзакцию();
	
	Попытка
		
		ГруппаЗадач = Справочники.ЗадачиАссистентаУправления.СсылкаНаГруппуЗадач(ИдентификаторГруппы);
		
		Если НЕ ЗначениеЗаполнено(ГруппаЗадач) Тогда
			ГруппаЗадач = Справочники.ЗадачиАссистентаУправления.СоздатьГруппу();
			ГруппаЗадач.Наименование = ЭтотОбъект.Заголовок;
			ГруппаЗадач.ИдентификаторГруппы = ИдентификаторГруппы;
			ГруппаЗадач.Записать();
		КонецЕсли;
		
		Для каждого СтрокаНастроек Из НастройкиЗадач Цикл
			
			Если ЗначениеЗаполнено(СтрокаНастроек.Задача) Тогда
				ЗадачаОбъект = СтрокаНастроек.Задача.ПолучитьОбъект();
			Иначе
				ЗадачаОбъект = Справочники.ЗадачиАссистентаУправления.СоздатьЭлемент();
				АвторИзменений = Пользователи.АвторизованныйПользователь();
				ЕстьЗадачиПользователя = Справочники.ЗадачиАссистентаУправления.ЕстьЗадачиПользователя(АвторИзменений);
			КонецЕсли;
			
			Если СтрокаНастроек.Удалена И ЗначениеЗаполнено(ЗадачаОбъект.Ссылка) Тогда
				УдалитьОсновнуюЗадачу(ЗадачаОбъект);
			КонецЕсли;
			
			Если СтрокаНастроек.Удалена Тогда
				СтрокаНастроек.Модифицированность = Ложь;
				Продолжить;
			КонецЕсли;
			
			ЗадачаОбъект.ДействиеИдентификатор = ДействиеИдентификатор;
			
			ЗадачаОбъект.События.Очистить();
			ОпределитьСобытияЗадачи(ЗадачаОбъект.События, СтрокаНастроек);
			 
			ЗадачаОбъект.ТипПредмета               = "ЗаказПоставщику";
			ЗадачаОбъект.ПользовательДляОповещения = СтрокаНастроек.ПользовательДляОповещения;
			ЗадачаОбъект.Используется              = ЭтотОбъект.ВРаботе;
			ЗадачаОбъект.Родитель                  = ГруппаЗадач.Ссылка;
						
			Если ЗначениеЗаполнено(СтрокаНастроек.ПользовательДляОповещения) Тогда
				ЗадачаОбъект.СпособОповещения = Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияПользователю;
			Иначе
				ЗаполнитьСпособОповещенияПоПредставлению(СтрокаНастроек, ЗадачаОбъект);
			КонецЕсли;
			
			ЗадачаОбъект.ЗначенияЗаполнения.Очистить();
			ЗадачаОбъект.ПараметрыУсловия.Очистить();
			
			ДобавитьПараметрЗадачи(ЗадачаОбъект.ЗначенияЗаполнения, "ТолькоОповестить", ТолькоОповестить());
			
			Если НЕ ТолькоОповестить() Тогда
				ДобавитьПараметрЗадачи(ЗадачаОбъект.ЗначенияЗаполнения, "СостояниеЗаказа", СтрокаНастроек.СостояниеЗаказа);
			КонецЕсли;
			
			Если ВидимостьПроцентаОплаты() Тогда
				ДобавитьПараметрЗадачи(ЗадачаОбъект.ЗначенияЗаполнения, "ПроцентОплаты", СтрокаНастроек.ПроцентОплаты);
				ДобавитьПараметрЗадачи(ЗадачаОбъект.ЗначенияЗаполнения, "СтатусОплаты", СтрокаНастроек.СтатусОплаты);
			КонецЕсли;
			
			Если ВидимостьСтатусаПоставки() Тогда
				ДобавитьПараметрЗадачи(ЗадачаОбъект.ЗначенияЗаполнения, "СтатусОтгрузки", СтрокаНастроек.СтатусПоставки);
			КонецЕсли;
			
			ОпределитьНаименованиеЗадачи(ЗадачаОбъект, СтрокаНастроек);
			ЗадачаОбъект.Записать();
			
			СтрокаНастроек.Модифицированность = Ложь;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПараметрЗадачи(Таблица, Параметр, Значение)
		
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Параметр = Параметр;
	НоваяСтрока.Значение = Новый ХранилищеЗначения(Значение);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПустыеНастройкиЗадачи()
	
	НовыеНастройки = НастройкиЗадач.Добавить();
	НовыеНастройки.СостояниеЗаказа = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СостоянияЗаказовПоставщикам.Завершен");
	НовыеНастройки.ПроцентОплаты = 100;		
	НовыеНастройки.СтатусОплаты = Перечисления.СтатусОплаты.Полная;
	НовыеНастройки.СтатусПоставки = Перечисления.СтатусОтгрузки.Полная;
	НовыеНастройки.Модифицированность = Истина;
	
	ЗаполнитьСпособОповещенияПоЗначению(
		НовыеНастройки,
		НовыеНастройки.ПользовательДляОповещения,
		Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияБезОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуЗадач()
	
	Результат = Новый Структура();
	
	Результат.Вставить("ИзмененПризнакВРаботе", ИзмененПризнакВРаботе);
	Результат.Вставить("АвторИзменений", АвторИзменений);
	Результат.Вставить("ГруппаЗадач", ИдентификаторГруппы);
	Результат.Вставить("НужноДобавитьВОбсуждение", НЕ ЕстьЗадачиПользователя);
	
	Закрыть(Результат);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОсновнуюЗадачу(ЗадачаОбъект)
	
	Отбор = Справочники.ЗадачиАссистентаУправления.НовыйОтборЗадач();
	Отбор.ОсновнаяЗадача = ЗадачаОбъект.Ссылка;
	ОтобранныеЗадачи = Справочники.ЗадачиАссистентаУправления.ПолучитьЗадачи(Отбор);
	ЗадачаОбъект.Удалить();
	
КонецПроцедуры

&НаСервере
Функция ЭтоЗадачаИзменениеСостоянияПриОплате()
	
	Возврат ИдентификаторГруппы = "ИзменениеСостоянияЗаказаПоставщикуПриОплате";
	
КонецФункции

&НаСервере
Функция ЭтоЗадачаИзменениеСостоянияПриПоставке()
	
	Возврат ИдентификаторГруппы = "ИзменениеСостоянияЗаказаПоставщикуПриПоставке";
	
КонецФункции

&НаСервере
Функция ЭтоЗадачаИзменениеСостоянияПриОплатеИПоставке()
	
	Возврат ИдентификаторГруппы = "ИзменениеСостоянияЗаказаПоставщикуПриОплатеИПоставке";
	
КонецФункции

&НаСервере
Функция ЭтоЗадачаСообщенияПриОплате()
	
	Возврат ИдентификаторГруппы = "ОповещениеПользователюПриОплатеЗаказаПоставщику";
	
КонецФункции

&НаСервере
Функция ЭтоЗадачаСообщенияПриПоставке()
	
	Возврат ИдентификаторГруппы = "ОповещениеПользователюПриПоставкеЗаказаПоставщику";
	
КонецФункции

&НаСервере
Функция ЭтоЗадачаСообщенияПриОплатеИПоставке()
	
	Возврат ИдентификаторГруппы = "ОповещениеПользователюПриОплатеИПоставкеЗаказаПоставщику";
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОписаниеЗадачи()
	
	Если ЭтоЗадачаИзменениеСостоянияПриОплате() Тогда
		ЗаполнитьОписаниеЗадачиИзменениеСостоянияПриОплате();
		Возврат;
	КонецЕсли;
	
	Если ЭтоЗадачаИзменениеСостоянияПриПоставке() Тогда
		ЗаполнитьОписаниеЗадачиИзменениеСостоянияПриПоставке();
		Возврат;
	КонецЕсли;
	
	Если ЭтоЗадачаИзменениеСостоянияПриОплатеИПоставке() Тогда
		ЗаполнитьОписаниеЗадачиИзменениеСостоянияПриОплатеИПоставке();
		Возврат;
	КонецЕсли;
	
	Если ЭтоЗадачаСообщенияПриОплате() Тогда
		ЗаполнитьОписаниеЗадачиСообщенияПриОплате();
		Возврат;
	КонецЕсли;
	
	Если ЭтоЗадачаСообщенияПриПоставке() Тогда
		ЗаполнитьОписаниеЗадачиСообщенияПриПоставке();
		Возврат;
	КонецЕсли;
	
	Если ЭтоЗадачаСообщенияПриОплатеИПоставке() Тогда
		ЗаполнитьОписаниеЗадачиСообщенияПриОплатеИПоставке();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаполнитьОписаниеЗадачиИзменениеСостоянияПриОплате()
	
	Элементы.ОсновноеОписание.Заголовок = НСтр("ru = 'Когда заказ поставщику будет оплачен, Даша изменит его состояние, а также сообщит, если: '");
	Элементы.ДопФункция_0.Заголовок = НСтр("ru = 'Оплата заказа будет полностью или частично отменена '");
	Элементы.ДопФункция_1.Заголовок = НСтр("ru = 'Менеджер переведет в указанное состояние еще не оплаченный заказ'");
	
	Элементы.КартинкаЗадачи.Картинка = БиблиотекаКартинок.АссистентУправленияИзменитьСостояниеПриОплате;
	ЭтотОбъект.Заголовок = НСтр("ru = 'Изменение состояния заказа поставщику при оплате'");
	
КонецФункции

&НаСервере
Функция ЗаполнитьОписаниеЗадачиИзменениеСостоянияПриПоставке()
	
	Элементы.ОсновноеОписание.Заголовок = НСтр("ru = 'Когда заказ поставщику поступит, Даша изменит его состояние, а также сообщит, если:'");
	Элементы.ДопФункция_0.Заголовок = НСтр("ru = 'Поставка заказа будет полностью или частично отменена'");
	Элементы.ДопФункция_1.Заголовок = НСтр("ru = 'Менеджер переведет в указанное состояние еще непоставленный заказ'");
	
	Элементы.КартинкаЗадачи.Картинка = БиблиотекаКартинок.АссистентУправленияИзменитьСостояниеПриОтгрузке;
	ЭтотОбъект.Заголовок = НСтр("ru = 'Изменение состояния заказа поставщику при поставке'");
	
КонецФункции

&НаСервере
Функция ЗаполнитьОписаниеЗадачиИзменениеСостоянияПриОплатеИПоставке()
	
	Элементы.ОсновноеОписание.Заголовок = НСтр("ru = 'Когда заказ поставщику будет оплачен и поставлен, Даша изменит его состояние, а также сообщит, если:'");
	Элементы.ДопФункция_0.Заголовок = НСтр("ru = 'Поставка/Оплата заказа будет полностью или частично отменена'");
	Элементы.ДопФункция_1.Заголовок = НСтр("ru = 'Менеджер переведет в указанное состояние еще непоставленный/неоплаченный заказ'");
	
	Элементы.КартинкаЗадачи.Картинка = БиблиотекаКартинок.АссистентУправленияИзменитьСостояниеПриОплатеИОтгрузке;
	ЭтотОбъект.Заголовок = НСтр("ru = 'Изменение состояния заказа поставщику при оплате и поставке'");
	
КонецФункции

&НаСервере
Функция ЗаполнитьОписаниеЗадачиСообщенияПриОплате()
	
	Элементы.ОсновноеОписание.Заголовок = НСтр("ru = 'Когда заказ поставщику будет оплачен, Даша сообщит в обсуждение. Также Даша сообщит, если: '");
	Элементы.ДопФункция_0.Заголовок = НСтр("ru = 'Оплата заказа будет частично или полностью отменена'");
		
	Элементы.КартинкаЗадачи.Картинка = БиблиотекаКартинок.АссистентУправленияСообщениеПриОплатеЗаказа;
	ЭтотОбъект.Заголовок = НСтр("ru = 'Сообщение при оплате заказа поставщику'");
	
КонецФункции

&НаСервере
Функция ЗаполнитьОписаниеЗадачиСообщенияПриПоставке()
	
	Элементы.ОсновноеОписание.Заголовок = НСтр("ru = 'Когда заказ поставщику будет поставлен, Даша сообщит в обсуждение. Также Даша сообщит, если: '");
	Элементы.ДопФункция_0.Заголовок = НСтр("ru = 'Поставка заказа будет частично или полностью отменена '");
		
	Элементы.КартинкаЗадачи.Картинка = БиблиотекаКартинок.АссистентУправленияСообщениеПриОтгрузкеЗаказа;
	ЭтотОбъект.Заголовок = НСтр("ru = 'Сообщение при поставке заказа поставщику'");
	
КонецФункции

&НаСервере
Функция ЗаполнитьОписаниеЗадачиСообщенияПриОплатеИПоставке()
	
	Элементы.ОсновноеОписание.Заголовок = НСтр("ru = 'Когда заказ поставщику будет оплачен и поставлен, Даша сообщит в обсуждение. Также Даша сообщит, если:'");
	Элементы.ДопФункция_0.Заголовок = НСтр("ru = 'Поставка/Оплата заказа будет полностью или частично отменена '");
	
	Элементы.КартинкаЗадачи.Картинка = БиблиотекаКартинок.АссистентУправленияСообщениеПриОтгрузкеИОплате;
	ЭтотОбъект.Заголовок = НСтр("ru = 'Сообщение при оплате и поставке заказа поставщику'");
	
КонецФункции

&НаСервере
Процедура ОпределитьЗаголовкиПолей(ПолеСтатусПоставки, ПолеПроцентОплаты, ДекорацияТекстОбсуждение)
	
	Если ЭтоЗадачаИзменениеСостоянияПриПоставке() Тогда
		ПолеСтатусПоставки.Заголовок = НСтр("ru = ' когда заказ будет поставлен'");
	КонецЕсли;
	
	Если ЭтоЗадачаСообщенияПриОплате() Тогда
		ПолеПроцентОплаты.Заголовок = НСтр("ru = 'Когда заказ поставщику будет оплачен на'");
		ДекорацияТекстОбсуждение.Заголовок = НСтр("ru = 'напиши в обсуждение и '");
	КонецЕсли;
	
	Если ЭтоЗадачаСообщенияПриПоставке() Тогда
		ПолеСтатусПоставки.Заголовок = НСтр("ru = 'Когда заказ поставщику будет поставлен'");
		ДекорацияТекстОбсуждение.Заголовок = НСтр("ru = 'напиши в обсуждение и '");
	КонецЕсли;
	
	Если ЭтоЗадачаСообщенияПриОплатеИПоставке() Тогда
		ПолеПроцентОплаты.Заголовок = НСтр("ru = 'Когда заказ поставщику будет оплачен на'");
		ДекорацияТекстОбсуждение.Заголовок = НСтр("ru = 'напиши в обсуждение и '");
	КонецЕсли;

	
КонецПроцедуры

#КонецОбласти
