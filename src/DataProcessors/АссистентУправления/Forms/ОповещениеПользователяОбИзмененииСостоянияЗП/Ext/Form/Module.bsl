
#Область ОписаниеПеременных

&НаКлиенте
Перем ИзмененПризнакВРаботе;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	НастройкиSMSВыполнены = ОтправкаSMS.НастройкаОтправкиSMSВыполнена();
	ДоступноПравоНастройкиSMS = Пользователи.ЭтоПолноправныйПользователь();
	
	ЭтотОбъект.ИспользоватьВидыЗаказовПокупателей = ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей");
	ЭтотОбъект.ИспользоватьВидыЗаказНарядов       = ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказНарядов");
	ЭтотОбъект.ИспользоватьПодсистемуРаботы       = ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы");
	НадписьЗаказПокупателя = НСтр("ru = 'когда заказ покупателя'");
	
	ТипПредмета = "ЗаказПокупателя";
	
	ИдентификаторГруппы = "ОповещениеПользователяОбИзмененииСостоянияЗаказаПокупателя";
	РазрешеноИзменятьЗадачи = Обработки.АссистентУправления.РазрешеноИзменятьЗадачи();
	
	Элементы.ДобавитьДействие.Видимость = РазрешеноИзменятьЗадачи;
	Элементы.ДействияАссистента.ТолькоПросмотр = НЕ РазрешеноИзменятьЗадачи;
	Элементы.ВРаботе.ТолькоПросмотр = НЕ РазрешеноИзменятьЗадачи;
	Элементы.ГруппаДопФункция_0.Видимость = РазрешеноИзменятьЗадачи;
	ЭтотОбъект.ТолькоПросмотр = НЕ РазрешеноИзменятьЗадачи;
	
	ЗаполнитьСпособыОповещенияПоЗаказу();
	ЗаполнитьСпособыОповещения();
	ОбновитьБлокиНастроекАссистента();
	ОбновитьЭлементыДействийАссистента();
	ЗаполнитьСписокВыбораЭлементовФормы();
	
	ИнформационнаяБазаЗарегистрирована = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	КлючСохраненияПоложенияОкна = Новый УникальныйИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ИзмененПризнакВРаботе = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененныеЗадачи = НастройкиЗадач.НайтиСтроки(Новый Структура("Модифицированность", Истина));
	ЗадачиИзменены = ИзмененныеЗадачи.Количество() <> 0;
	
	Если НЕ ЗадачиИзменены Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РазрешеноИзменятьЗадачи Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.ВРаботе Тогда
		
		СоздатьИзменитьЗадачиАссистента();
		ЗакрытьФормуЗадач();
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТипОповещения", "SMS");
	Отбор.Вставить("Удалена", Ложь);
	
	ЗадачиОтправкиSMS = НастройкиЗадач.НайтиСтроки(Отбор);
	ЕстьЗадачиSMS = ЗадачиОтправкиSMS.Количество() <> 0;
		
	Если ВРаботе И НЕ НастройкиSMSВыполнены И ЕстьЗадачиSMS Тогда
		ВРаботе = Ложь;
		Элементы.ПанельОшибки.Видимость = Истина;
		Элементы.ОшибкаНеПодключенПровайдер.Видимость = Истина;
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СоздатьИзменитьЗадачиАссистента();
	ЗакрытьФормуЗадач();

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ЕстьОшибки = Ложь;
	Для каждого СтрокаНастроек Из НастройкиЗадач Цикл
		
		ЗаказПокупателяЗавершен = СтрокаНастроек.СостояниеЗаказа = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СостоянияЗаказовПокупателей.Завершен");
		ЗаказНарядЗавершен = СтрокаНастроек.СостояниеЗаказа = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СостоянияЗаказНарядов.Завершен");

		Если СтрокаНастроек.Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.ТипОповещения) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если СтрокаНастроек.ТипОповещения = "Обсуждение" 
			И НЕ ЗначениеЗаполнено(СтрокаНастроек.ТипОбсуждения) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если СтрокаНастроек.ТипОповещения = "Обсуждение" И СтрокаНастроек.ТипОбсуждения <> "Групповое"
			И НЕ ЗначениеЗаполнено(СтрокаНастроек.СпособОповещения) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если СтрокаНастроек.ТипОповещения <> "Обсуждение" 
			И НЕ ЗначениеЗаполнено(СтрокаНастроек.ПользовательДляПисем) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если СтрокаНастроек.ТипОповещения <> "Обсуждение" 
			И НЕ ЗначениеЗаполнено(СтрокаНастроек.ШаблонСообщения) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если СтрокаНастроек.ТипОповещения = "Обсуждение" И СтрокаНастроек.ТипОбсуждения = "Групповое"
			И НЕ ЗначениеЗаполнено(СтрокаНастроек.Обсуждение) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.ВидОперации) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если СтрокаНастроек.ТипОповещения = "Email" 
			И НЕ ЗначениеЗаполнено(СтрокаНастроек.УчетнаяЗапись) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.ВидЗаказа) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.СостояниеЗаказа) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.ВариантЗавершения) 
			И (ЗаказПокупателяЗавершен ИЛИ ЗаказНарядЗавершен) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнены обязательные данные'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияУдалитьНажатие(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
	СтрокаНастроек.Удалена = Истина;
	
	ОбновитьЭлементыДействийИЗаполнитьСписокВыбора();

КонецПроцедуры

&НаКлиенте
Процедура ВРаботеПриИзменении(Элемент)
	
	ИзмененПризнакВРаботе = Истина;
	УстановитьМодифицированностьЗадач();
	
	Если НЕ ВРаботе Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонСообщенияПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонСообщенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоШаблонуПослеВыбораШаблона", ЭтотОбъект, Новый Структура("Индекс", Индекс));
	
	Если СтрокаНастроек.ТипОповещения = "SMS" Тогда
		ТипШаблона = "СообщениеSMS";
	Иначе
		ТипШаблона = "Письмо";
	КонецЕсли;
	
	ШаблоныСообщенийКлиент.ВыбратьШаблон(ОписаниеОповещения, ТипШаблона, "Документ.ЗаказПокупателя");

КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьПриИзменении(Элемент)
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТекстОшибкиSMSНажатие(Элемент)
	ОткрытьФорму("ОбщаяФорма.НастройкаОтправкиSMS",,ЭтаФорма,,,,Новый ОписаниеОповещения("ОтправкаSMSПроверкаНастроек", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ТекстОшибкиОбсуждениеНажатие(Элемент)
	НачатьПодключениеОбсуждений();
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаказаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(ИндексБлока(Элемент.Имя));
	СтрокаНастроек.Модифицированность = Истина;
	ПараметрыПолученияДанных.Вставить("ВидЗаказа", СтрокаНастроек.ВидЗаказа); 
	
	Если СтрокаНастроек.ВидОперации = "ЗаказПокупателя" Тогда
		ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.СостоянияЗаказовПокупателей"), ПараметрыПолученияДанных);
	ИначеЕсли СтрокаНастроек.ВидОперации = "ЗаказНаряд" Тогда
		ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.СостоянияЗаказНарядов"), ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	
	Если СтрокаНастроек.ВидОперации = "ЗаказПокупателя" Тогда 
		
		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.ВидЗаказа) ИЛИ ТипЗнч(СтрокаНастроек.ВидЗаказа) = Тип("СправочникСсылка.ВидыЗаказНарядов") Тогда
			СтрокаНастроек.ВидЗаказа = ПредопределенноеЗначение("Справочник.ВидыЗаказовПокупателей.Основной");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.СостояниеЗаказа) ИЛИ ТипЗнч(СтрокаНастроек.СостояниеЗаказа) = Тип("СправочникСсылка.СостоянияЗаказНарядов") Тогда
			СтрокаНастроек.СостояниеЗаказа = ПредопределенноеЗначение("Справочник.СостоянияЗаказовПокупателей.Завершен");
		КонецЕсли;
		
	ИначеЕсли СтрокаНастроек.ВидОперации = "ЗаказНаряд" Тогда
	
		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.ВидЗаказа) ИЛИ ТипЗнч(СтрокаНастроек.ВидЗаказа) = Тип("СправочникСсылка.ВидыЗаказовПокупателей") Тогда
			СтрокаНастроек.ВидЗаказа = ПредопределенноеЗначение("Справочник.ВидыЗаказНарядов.Основной");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.СостояниеЗаказа) ИЛИ ТипЗнч(СтрокаНастроек.СостояниеЗаказа) = Тип("СправочникСсылка.СостоянияЗаказовПокупателей") Тогда
			СтрокаНастроек.СостояниеЗаказа = ПредопределенноеЗначение("Справочник.СостоянияЗаказНарядов.Завершен");
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаНастроек.Модифицированность = Истина;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОповещенияПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
	
	ТипОповещенияИзменениеНаСервере(Индекс);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательДляПисемПриИзменении(Элемент)
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТипОбсужденияПриИзменении(Элемент)
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
	ТипОповещенияИзменениеНаСервере(Индекс);
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ВидЗаказаПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СогласоватьВидИСостояние(Индекс);
	
	СтрокаНастроек.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаказаПриИзменении(Элемент)
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаказаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(ИндексБлока(Элемент.Имя));
	СтрокаНастроек.Модифицированность = Истина;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ВидЗаказа", СтрокаНастроек.ВидЗаказа);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьСостояниеПослеВыбора",ЭтотОбъект,Новый Структура("Индекс", Индекс));
	
	Если СтрокаНастроек.ВидОперации = "ЗаказНаряд" Тогда
		ОткрытьФорму("Справочник.СостоянияЗаказНарядов.ФормаВыбора", ПараметрыФормы, Элемент,,,,ОповещениеОЗакрытии);
	ИначеЕсли СтрокаНастроек.ВидОперации = "ЗаказПокупателя" Тогда
		ОткрытьФорму("Справочник.СостоянияЗаказовПокупателей.ФормаВыбора", ПараметрыФормы, Элемент,,,,ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗавершенияПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОповещенияПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбсуждениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Индекс = ИндексБлока(Элемент.Имя);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборОбсуждения", ЭтотОбъект,Индекс);
	ОткрытьФорму("Обработка.АссистентУправления.Форма.ВыборОбсуждения",,,,,,ОповещениеОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура ОбсуждениеПриИзменении(Элемент)
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СпособОповещенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Индекс = ИндексБлока(Элемент.Имя);
	ЗаполнитьДанныеВыбора(ДанныеВыбора, Индекс);
КонецПроцедуры

&НаКлиенте
Процедура СпособОповещенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
		
		Элементы["СпособОповещения_" + Индекс].ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
		НастройкиЗадач[Число(Индекс)].СпособОповещения = ВыбранноеЗначение;
		НастройкиЗадач[Число(Индекс)].ПользовательДляОповещения = ВыбранноеЗначение;
		
		Возврат;
		
	КонецЕсли;
	
	НастройкиЗадач[Число(Индекс)].ПользовательДляОповещения = Неопределено;
	
	Если СтрокаНастроек.ТипОповещения = "Обсуждение" И СтрокаНастроек.ТипОбсуждения = "Заказ" Тогда
		ЗначениеСпособаОповещения = СпособыОповещенияПоЗаказу.НайтиСтроки(Новый Структура("Представление", ВыбранноеЗначение));
	Иначе
		ЗначениеСпособаОповещения = СпособыОповещения.НайтиСтроки(Новый Структура("Представление", ВыбранноеЗначение));
	КонецЕсли;

	Если ЗначениеСпособаОповещения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеСпособаОповещения[0].Значение <> ПредопределенноеЗначение("Перечисление.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияПользователю")
		И ЗначениеСпособаОповещения[0].Значение <> ПредопределенноеЗначение("Перечисление.СпособОповещенияАссистентаУправления.СообщениеЛичногоОбсужденияПользователю") Тогда
	
		Элементы["СпособОповещения_" + Индекс].ОграничениеТипа = Новый ОписаниеТипов("Строка");
		НастройкиЗадач[Число(Индекс)].СпособОповещения = ВыбранноеЗначение;
		НастройкиЗадач[Число(Индекс)].ПользовательДляОповещения = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Индекс", Индекс);
	
	Оповещение = Новый ОписаниеОповещения("ВыборПользователя", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора",ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОповещенияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Индекс = ИндексБлока(Элемент.Имя);
	ЗаполнитьДанныеВыбора(ДанныеВыбора, Индекс);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьДействие(Команда)
	
	ДобавитьДействиеСервер();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ТипОповещенияИзменениеНаСервере(Индекс)
	
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	Если СтрокаНастроек.ТипОповещения <> "Обсуждение" Тогда
		СогласоватьТипКИШаблонСообщения(Индекс);
		СтрокаНастроек.Обсуждение = "";
		СтрокаНастроек.ОбсуждениеИдентификатор = "";
		Возврат;
	КонецЕсли;
	
	БезОповещения = Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияБезОповещения;
	Личное = Перечисления.СпособОповещенияАссистентаУправления.СообщениеЛичногоОбсужденияОтветственному;
	
	Если СтрокаНастроек.ТипОбсуждения = "Заказ" Тогда
		ЗаполнитьСпособОповещенияПоЗначению(СтрокаНастроек,Справочники.Пользователи.ПустаяСсылка(), БезОповещения);
		СтрокаНастроек.Обсуждение = "";
		СтрокаНастроек.ОбсуждениеИдентификатор = "";
	ИначеЕсли СтрокаНастроек.ТипОбсуждения = "Личное" ИЛИ СтрокаНастроек.ТипОбсуждения = "Групповое" Тогда
		ЗаполнитьСпособОповещенияПоЗначению(СтрокаНастроек,Справочники.Пользователи.ПустаяСсылка(), Личное);
		СтрокаНастроек.Обсуждение = "";
		СтрокаНастроек.ОбсуждениеИдентификатор = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура СогласоватьТипКИШаблонСообщения(Индекс)
	
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	
	Элементы["УчетнаяЗапись_"+Строка(Индекс)].Видимость = 
		СтрокаНастроек.ТипОповещения = "Email";
		
	Если НЕ ЗначениеЗаполнено(СтрокаНастроек.УчетнаяЗапись) И Элементы["УчетнаяЗапись_"+Строка(Индекс)].Видимость Тогда
		СтрокаНастроек.УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	КонецЕсли;
	
	ПараметрТипШаблона = Новый ПараметрВыбора("Отбор.ПолноеИмяТипаПараметраВводаНаОсновании", "Документ.ЗаказПокупателя");
	ПараметрДляСМС = Новый ПараметрВыбора("Отбор.ПредназначенДляSMS", СтрокаНастроек.ТипОповещения = "SMS");
	ПараметрДляЭП = Новый ПараметрВыбора("Отбор.ПредназначенДляЭлектронныхПисем", СтрокаНастроек.ТипОповещения = "Email");

	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(ПараметрТипШаблона);
	НовыйМассив.Добавить(ПараметрДляСМС);
	НовыйМассив.Добавить(ПараметрДляЭП);
		
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы["ШаблонСообщения_"+Строка(Индекс)].ПараметрыВыбора = НовыеПараметры;

	Если НЕ ЗначениеЗаполнено(СтрокаНастроек.ШаблонСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонПредназначенДляSMS = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаНастроек.ШаблонСообщения, "ПредназначенДляSMS");
	СогласованныеДанные = (СтрокаНастроек.ТипОповещения = "SMS" И ШаблонПредназначенДляSMS)
		ИЛИ (СтрокаНастроек.ТипОповещения = "Email" И НЕ ШаблонПредназначенДляSMS);
				
	Если СогласованныеДанные Тогда
		Возврат;
	КонецЕсли;
		
	СтрокаНастроек.ШаблонСообщения = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПользователя(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = ДополнительныеПараметры.Индекс;
	Элементы["СпособОповещения_"+Индекс].ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	НастройкиЗадач[Число(Индекс)].СпособОповещения = Результат;
	НастройкиЗадач[Число(Индекс)].ПользовательДляОповещения = Результат;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеВыбора(ДанныеВыбора,Индекс)
	
	Если ДанныеВыбора = Неопределено Тогда
		ДанныеВыбора = Новый СписокЗначений;
	КонецЕсли;

	ОповеститьПользователя = Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияПользователю;
	
	Индекс = Число(Индекс);
	ДобавитьПунктНикогоНеОповещать(Индекс, ДанныеВыбора);
	ДобавитьПунктОповеститьОтветственного(Индекс, ДанныеВыбора);
	ДобавитьПунктОповеститьТекущего(Индекс, ДанныеВыбора, ОповеститьПользователя);
	ДобавитьПунктОповеститьВыбранного(Индекс, ДанныеВыбора);
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьПунктНикогоНеОповещать(Индекс, ДанныеВыбора)
	
	Если НастройкиЗадач[Индекс].ТипОповещения <> "Обсуждение" Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкиЗадач[Индекс].ТипОбсуждения = "Личное" Тогда
		Возврат;
	КонецЕсли;
	
	НикогоНеОповещать = Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияБезОповещения;
	СпособНикогоНеОповещать = СпособыОповещенияПоЗаказу.НайтиСтроки(Новый Структура("Значение", НикогоНеОповещать));
	Если СпособНикогоНеОповещать.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора.Добавить(СпособНикогоНеОповещать[0].Представление,,,БиблиотекаКартинок.СпособОповещенияНикогоНеОповещать);	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПунктОповеститьОтветственного(Индекс, ДанныеВыбора)
	
	Если НастройкиЗадач[Индекс].ТипОповещения <> "Обсуждение" Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкиЗадач[Индекс].ТипОбсуждения = "Заказ" Тогда
		
		ОповеститьОтветственного = Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияОтветственному;
		Отбор = Новый Структура("Значение", ОповеститьОтветственного);
		СпособОповестиОтветственного = СпособыОповещенияПоЗаказу.НайтиСтроки(Отбор);
		
		Если СпособОповестиОтветственного.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ДанныеВыбора.Добавить(СпособОповестиОтветственного[0].Представление,,,БиблиотекаКартинок.СпособОповещенияОповеститьВыбранного);
		Возврат;
		
	КонецЕсли;
	
	ОповеститьОтветственного = Перечисления.СпособОповещенияАссистентаУправления.СообщениеЛичногоОбсужденияОтветственному;
	Отбор = Новый Структура("Значение", ОповеститьОтветственного);
	СпособОповестиОтветственного = СпособыОповещения.НайтиСтроки(Отбор);
	Если НастройкиЗадач[Индекс].ТипОповещения = "Обсуждение" И НастройкиЗадач[Индекс].ТипОбсуждения = "Личное" Тогда
		ДанныеВыбора.Добавить(СпособОповестиОтветственного[0].Представление,,,БиблиотекаКартинок.СпособОповещенияОповеститьВыбранного);	
	Иначе
		ДанныеВыбора.Добавить(СпособОповестиОтветственного[0].Представление);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПунктОповеститьТекущего(Индекс, ДанныеВыбора, ОповеститьПользователя)
	
	Если НастройкиЗадач[Индекс].ТипОповещения = "Обсуждение" Тогда
		ДанныеВыбора.Добавить(Пользователи.АвторизованныйПользователь(),,,БиблиотекаКартинок.СпособОповещенияОповеститьВыбранного);;
	Иначе
		ДанныеВыбора.Добавить(Пользователи.АвторизованныйПользователь(),,,);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПунктОповеститьВыбранного(Индекс, ДанныеВыбора)
	
	Если НастройкиЗадач[Индекс].ТипОповещения = "Обсуждение" И НастройкиЗадач[Индекс].ТипОбсуждения = "Заказ" Тогда
		ОповеститьПользователя = Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияПользователю;
		СпособОповестиПользователя = СпособыОповещенияПоЗаказу.НайтиСтроки(Новый Структура("Значение", ОповеститьПользователя));
		Если СпособОповестиПользователя.Количество() > 0 Тогда
			ДанныеВыбора.Добавить(СпособОповестиПользователя[0].Представление,,,БиблиотекаКартинок.СпособОповещенияОповеститьВыбранного);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если НастройкиЗадач[Индекс].ТипОповещения = "Обсуждение" И НастройкиЗадач[Индекс].ТипОбсуждения = "Личное" Тогда
		ОповеститьПользователя = Перечисления.СпособОповещенияАссистентаУправления.СообщениеЛичногоОбсужденияПользователю;
		СпособОповестиПользователя = СпособыОповещения.НайтиСтроки(Новый Структура("Значение", ОповеститьПользователя));
		Если СпособОповестиПользователя.Количество() > 0 Тогда
			ДанныеВыбора.Добавить(СпособОповестиПользователя[0].Представление,,,БиблиотекаКартинок.СпособОповещенияОповеститьВыбранного);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОповеститьПользователя = Перечисления.СпособОповещенияАссистентаУправления.СообщениеЛичногоОбсужденияПользователю;
	СпособОповестиПользователя = СпособыОповещения.НайтиСтроки(Новый Структура("Значение", ОповеститьПользователя));
	Если СпособОповестиПользователя.Количество() > 0 Тогда
		ДанныеВыбора.Добавить(СпособОповестиПользователя[0].Представление);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДействийИЗаполнитьСписокВыбора()
	ОбновитьЭлементыДействийАссистента();
	ЗаполнитьСписокВыбораЭлементовФормы();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексБлока(ЭлементИмя)
	
	Возврат Прав(ЭлементИмя, СтрДлина(ЭлементИмя) - СтрНайти(ЭлементИмя, "_"));
	
КонецФункции

&НаСервере
Процедура ДобавитьДействиеСервер()
	
	ДобавитьНовыеНастройкиЗадачи();
	ОбновитьЭлементыДействийАссистента();
	ЗаполнитьСписокВыбораЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНовыеНастройкиЗадачи()
		
	ОбщиеНастройки = Новый Структура;
	ОбщиеНастройки.Вставить("ТипОбсуждения", "Заказ");
	ОбщиеНастройки.Вставить("ТипОповещения", "Обсуждение");
	ОбщиеНастройки.Вставить("СпособОповещения", Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияБезОповещения);
	ОбщиеНастройки.Вставить("ВидОперации", "ЗаказПокупателя");
	ОбщиеНастройки.Вставить("Модифицированность", Истина);
	
	ОбщиеНастройки.Вставить("ВидЗаказа",                         ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыЗаказовПокупателей.Основной"));
	ОбщиеНастройки.Вставить("СостояниеЗаказа",                   ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СостоянияЗаказовПокупателей.Завершен"));
	ОбщиеНастройки.Вставить("ВариантЗавершения", ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ВариантыЗавершенияЗаказа.Успешно"));
	
	НоваяНастройка = НастройкиЗадач.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяНастройка, ОбщиеНастройки);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодключениеОбсуждений()
	
	Продолжение = Новый ОписаниеОповещения("ЗавершитьПодключениеОбсуждений", ЭтотОбъект);
	ОбсужденияКлиент.ПоказатьПодключение(Продолжение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПодключениеОбсуждений(Результат, ДополнительныеПараметры) Экспорт
	
	УправлениеФормой();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьМодифицированностьЗадач()
	
	Для Каждого СтрокаНастроек Из НастройкиЗадач Цикл
		СтрокаНастроек.Модифицированность = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СогласоватьВидИСостояние(Индекс)
	
	СтрокаНастройки = НастройкиЗадач.Получить(Индекс);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыЗаказов.Ссылка КАК Ссылка,
	|	ВидыЗаказов.ПорядокСостояний.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Состояние КАК Состояние
	|	) КАК ПорядокСостояний
	|ИЗ
	|	&ТаблицаСправочника КАК ВидыЗаказов 
	|ГДЕ
	|	ВидыЗаказов.Ссылка = &ВидЗаказа";
	
	ИмяСправочника = СтрокаНастройки.ВидЗаказа.Метаданные().Имя;
	Запрос.Текст = СтрЗаменить(Запрос.Текст , "&ТаблицаСправочника", "Справочник." + ИмяСправочника);
	
	Запрос.УстановитьПараметр("ВидЗаказа", СтрокаНастройки.ВидЗаказа);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СостоянияВида = Выборка.ПорядокСостояний.Выгрузить();
		
		Отбор = Новый Структура;
		Отбор.Вставить("Состояние",СтрокаНастройки.СостояниеЗаказа);
		НайденныеСтроки = СостоянияВида.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаНастройки.СостояниеЗаказа = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПослеВыбораШаблона(ДанныеСообщения, ДополнительныеПараметры) Экспорт
	
	Если ДанныеСообщения = Неопределено ИЛИ ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНастроек = НастройкиЗадач.Получить(ДополнительныеПараметры.Индекс);
	СтрокаНастроек.ШаблонСообщения = ДанныеСообщения;
	СтрокаНастроек.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаSMSПроверкаНастроек(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой

&НаСервере
Процедура ЗаполнитьСписокВыбораЭлементовФормы()
	
	
	Для Итератор = 0 По НастройкиЗадач.Количество() - 1 Цикл
		
		Если НастройкиЗадач[Итератор].Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы["ТипОповещения_" + Итератор].СписокВыбора.Очистить();
		Элементы["ТипОповещения_" + Итератор].СписокВыбора.Добавить("Обсуждение", НСтр("ru='В обсуждение'"));
		Элементы["ТипОповещения_" + Итератор].СписокВыбора.Добавить("Email", НСтр("ru='на почту'"));
		Элементы["ТипОповещения_" + Итератор].СписокВыбора.Добавить("SMS", НСтр("ru='sms'"));
		
		Элементы["ТипОбсуждения_" + Итератор].СписокВыбора.Очистить();
		Элементы["ТипОбсуждения_" + Итератор].СписокВыбора.Добавить("Заказ", НСтр("ru='привязанное к заказу'"));
		Элементы["ТипОбсуждения_" + Итератор].СписокВыбора.Добавить("Личное", НСтр("ru='личное с пользователем'"));
		Элементы["ТипОбсуждения_" + Итератор].СписокВыбора.Добавить("Групповое", НСтр("ru='групповое с несколькими пользователями'"));
						
		Элементы["ВидОперации_" + Итератор].СписокВыбора.Очистить();
		Элементы["ВидОперации_" + Итератор].СписокВыбора.Добавить("ЗаказПокупателя", НСтр("ru='заказ покупателя'"));
		Элементы["ВидОперации_" + Итератор].СписокВыбора.Добавить("ЗаказНаряд", НСтр("ru='заказ-наряд'"));

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДействийАссистента()
	
	Элементы.Переместить(Элементы.ДобавитьДействие, Элементы.Действие_0);
	УдаляемыеЭлементы = Новый Массив;
	// Группа первой задачи создана в конфигураторе
	Для ИндексГруппы = 1 По Элементы.ДействияАссистента.ПодчиненныеЭлементы.Количество()-1 Цикл
		УдаляемыеЭлементы.Добавить(Элементы.ДействияАссистента.ПодчиненныеЭлементы[ИндексГруппы]);
	КонецЦикла;

	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	Для Каждого СтрокаНастроек Из НастройкиЗадач Цикл
		
		ИндексНастройки = НастройкиЗадач.Индекс(СтрокаНастроек);
		
		Если НастройкиЗадач[ИндексНастройки].Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИндексНастройки > 0 Тогда
			
			ОбщаяГруппаДействия = Элементы.Добавить("ГруппаДействие_" + ИндексНастройки, Тип("ГруппаФормы"), Элементы.ДействияАссистента);
			УстановитьОформлениеГруппы(ОбщаяГруппаДействия, Элементы.ГруппаДействие_0);
			
			ГруппаДействия = Элементы.Добавить("Действие_" + ИндексНастройки, Тип("ГруппаФормы"), ОбщаяГруппаДействия);
			УстановитьОформлениеГруппы(ГруппаДействия, Элементы.Действие_0);
			
			ГруппаСтроки = Элементы.Добавить("Строки_" + ИндексНастройки, Тип("ГруппаФормы"), ГруппаДействия);
			УстановитьОформлениеГруппы(ГруппаСтроки, Элементы.Строки_0);
			
			ГруппаПервойСтрокиДействия = Элементы.Добавить("ГруппаДействие_" + ИндексНастройки + "_Строка_1", Тип("ГруппаФормы"), ГруппаСтроки);
			УстановитьОформлениеГруппы(ГруппаПервойСтрокиДействия, Элементы.ГруппаДействие_0_Строка_1);		
			
			ПолеТипОповещения = Элементы.Добавить("ТипОповещения_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеТипОповещения.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].ТипОповещения";
			УстановитьОформлениеПоля(ПолеТипОповещения, Элементы.ТипОповещения_0);
			ПолеТипОповещения.УстановитьДействие("ПриИзменении","ТипОповещенияПриИзменении");
			
			ПолеТипОбсуждения = Элементы.Добавить("ТипОбсуждения_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеТипОбсуждения.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].ТипОбсуждения";
			УстановитьОформлениеПоля(ПолеТипОбсуждения, Элементы.ТипОбсуждения_0);
			ПолеТипОбсуждения.УстановитьДействие("ПриИзменении","ТипОбсужденияПриИзменении");
			
			ПолеСпособОповещения = Элементы.Добавить("СпособОповещения_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеСпособОповещения.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].СпособОповещения";
			УстановитьОформлениеПоля(ПолеСпособОповещения, Элементы.СпособОповещения_0);
			ПолеСпособОповещения.УстановитьДействие("ПриИзменении", "СпособОповещенияПриИзменении");
			ПолеСпособОповещения.УстановитьДействие("АвтоПодбор", "СпособОповещенияАвтоПодбор");
			ПолеСпособОповещения.УстановитьДействие("НачалоВыбора", "СпособОповещенияНачалоВыбора");
			ПолеСпособОповещения.УстановитьДействие("ОбработкаВыбора", "СпособОповещенияОбработкаВыбора");
			
			ПолеПользовательДляПисем = Элементы.Добавить("ПользовательДляПисем_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеПользовательДляПисем.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].ПользовательДляПисем";
			УстановитьОформлениеПоля(ПолеПользовательДляПисем, Элементы.ПользовательДляПисем_0);
			ПолеСпособОповещения.УстановитьДействие("ПриИзменении", "ПользовательДляПисемПриИзменении");
			
			ПолеОбсуждение = Элементы.Добавить("Обсуждение_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеОбсуждение.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].Обсуждение";
			УстановитьОформлениеПоля(ПолеОбсуждение, Элементы.Обсуждение_0);
			ПолеОбсуждение.УстановитьДействие("НачалоВыбора","ОбсуждениеНачалоВыбора");
			ПолеОбсуждение.УстановитьДействие("ОбработкаВыбора","ОбсуждениеОбработкаВыбора");
			
			ПолеШаблонСообщения = Элементы.Добавить("ШаблонСообщения_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеШаблонСообщения.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].ШаблонСообщения";
			УстановитьОформлениеПоля(ПолеШаблонСообщения, Элементы.ШаблонСообщения_0);
			ПолеШаблонСообщения.УстановитьДействие("НачалоВыбора","ШаблонСообщенияНачалоВыбора");
			ПолеШаблонСообщения.УстановитьДействие("ПриИзменении","ШаблонСообщенияПриИзменении");
			
			ПараметрТипШаблона = Новый ПараметрВыбора("Отбор.ПолноеИмяТипаПараметраВводаНаОсновании", "Документ.ЗаказПокупателя");
			ПараметрДляСМС = Новый ПараметрВыбора("Отбор.ПредназначенДляSMS", НастройкиЗадач[ИндексНастройки].ТипОповещения = "SMS");
			ПараметрДляЭП = Новый ПараметрВыбора("Отбор.ПредназначенДляЭлектронныхПисем", НастройкиЗадач[ИндексНастройки].ТипОповещения = "Email");
			
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(ПараметрТипШаблона);
			НовыйМассив.Добавить(ПараметрДляСМС);
			НовыйМассив.Добавить(ПараметрДляЭП);

			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			ПолеШаблонСообщения.ПараметрыВыбора = НовыеПараметры;
			
			ПолеУчетнаяЗапись = Элементы.Добавить("УчетнаяЗапись_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеУчетнаяЗапись.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].УчетнаяЗапись";
			УстановитьОформлениеПоля(ПолеУчетнаяЗапись, Элементы.УчетнаяЗапись_0);
			ПолеУчетнаяЗапись.УстановитьДействие("ПриИзменении", "УчетнаяЗаписьПриИзменении");
			
			ДекорацияУдалить = Элементы.Добавить("ДекорацияУдалить_" + ИндексНастройки, Тип("ДекорацияФормы"), ОбщаяГруппаДействия);
			ДекорацияУдалить.Вид = Элементы.ДекорацияУдалить_0.Вид;
			ДекорацияУдалить.Заголовок = Элементы.ДекорацияУдалить_0.Заголовок;
			ДекорацияУдалить.Ширина = Элементы.ДекорацияУдалить_0.Ширина;
			ДекорацияУдалить.Высота = Элементы.ДекорацияУдалить_0.Высота;
			ДекорацияУдалить.Картинка = Элементы.ДекорацияУдалить_0.Картинка;
			ДекорацияУдалить.РазмерКартинки = Элементы.ДекорацияУдалить_0.РазмерКартинки;
			ДекорацияУдалить.Гиперссылка = Элементы.ДекорацияУдалить_0.Гиперссылка;
			ДекорацияУдалить.УстановитьДействие("Нажатие", "ДекорацияУдалитьНажатие");
			
			ГруппаВторойСтрокиДействия = Элементы.Добавить("ГруппаДействие_" + ИндексНастройки + "_Строка_2", Тип("ГруппаФормы"), ГруппаСтроки);
			УстановитьОформлениеГруппы(ГруппаВторойСтрокиДействия, Элементы.ГруппаДействие_0_Строка_2);
			
			ПолеВидОперации = Элементы.Добавить("ВидОперации_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаВторойСтрокиДействия);
			ПолеВидОперации.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].ВидОперации";
			УстановитьОформлениеПоля(ПолеВидОперации, Элементы.ВидОперации_0);
			ПолеВидОперации.УстановитьДействие("ПриИзменении","ВидОперацииПриИзменении");
			
			ДекорацияНадпись = Элементы.Добавить("НадписьЗаказПокупателя_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаВторойСтрокиДействия);
			ДекорацияНадпись.ПутьКДанным = Элементы.НадписьЗаказПокупателя_0.ПутьКДанным;
			ДекорацияНадпись.Вид = Элементы.НадписьЗаказПокупателя_0.Вид;
			ДекорацияНадпись.Заголовок = Элементы.НадписьЗаказПокупателя_0.Заголовок;
			ДекорацияНадпись.ПоложениеЗаголовка = Элементы.НадписьЗаказПокупателя_0.ПоложениеЗаголовка;
			ДекорацияНадпись.Ширина = Элементы.НадписьЗаказПокупателя_0.Ширина;
			ДекорацияНадпись.Видимость = Элементы.НадписьЗаказПокупателя_0.Видимость;
			ДекорацияНадпись.РастягиватьПоГоризонтали = Элементы.НадписьЗаказПокупателя_0.РастягиватьПоГоризонтали;
			
			ПолеВидЗаказа = Элементы.Добавить("ВидЗаказа_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаВторойСтрокиДействия);
			ПолеВидЗаказа.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].ВидЗаказа";
			УстановитьОформлениеПоля(ПолеВидЗаказа, Элементы.ВидЗаказа_0);
			ПолеВидЗаказа.УстановитьДействие("ПриИзменении","ВидЗаказаПриИзменении");
			
			ПолеСостояниеЗаказа = Элементы.Добавить("СостояниеЗаказа_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаВторойСтрокиДействия);
			ПолеСостояниеЗаказа.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].СостояниеЗаказа";
			УстановитьОформлениеПоля(ПолеСостояниеЗаказа, Элементы.СостояниеЗаказа_0);
			ПолеСостояниеЗаказа.УстановитьДействие("АвтоПодбор","СостояниеЗаказаАвтоПодбор");
			ПолеСостояниеЗаказа.УстановитьДействие("НачалоВыбора","СостояниеЗаказаНачалоВыбора");
			ПолеСостояниеЗаказа.УстановитьДействие("ПриИзменении","СостояниеЗаказаПриИзменении");
			
			ПолеВариантЗавершения = Элементы.Добавить("ВариантЗавершения_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаВторойСтрокиДействия);
			ПолеВариантЗавершения.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].ВариантЗавершения";
			УстановитьОформлениеПоля(ПолеВариантЗавершения, Элементы.ВариантЗавершения_0);
			ПолеВариантЗавершения.УстановитьДействие("ПриИзменении","ВариантЗавершенияПриИзменении");
			
			Элементы.Переместить(Элементы.ДобавитьДействие, Элементы["Действие_" + ИндексНастройки]);
			
		КонецЕсли;
		
	КонецЦикла;
		
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	ИнформационнаяБазаЗарегистрирована = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	НастройкиSMSВыполнены = ОтправкаSMS.НастройкаОтправкиSMSВыполнена();
		
	Отбор = Новый Структура;
	Отбор.Вставить("Удалена", Ложь);
	Отбор.Вставить("ТипОповещения", "SMS");
	
	ЗадачиОтправкиSMS = НастройкиЗадач.НайтиСтроки(Отбор);
	ЕстьЗадачиSMS     = ЗадачиОтправкиSMS.Количество() <> 0;
		
	ЕстьОшибкиSMS = ЕстьЗадачиSMS И НЕ НастройкиSMSВыполнены;
	ЕстьОшибкиПодключенияБазы = НЕ ИнформационнаяБазаЗарегистрирована;
		
	Элементы.ПанельОшибки.Видимость = (ЕстьОшибкиSMS ИЛИ ЕстьОшибкиПодключенияБазы) И ВРаботе;
	
	Элементы.ОшибкаНеПодключенПровайдер.Видимость = ЕстьОшибкиSMS И ВРаботе;
	Элементы.ОшибкаНеПодключеныОбсуждения.Видимость = ЕстьОшибкиПодключенияБазы И ВРаботе;
	
	ВРаботе = НЕ ЕстьОшибкиSMS И НЕ ЕстьОшибкиПодключенияБазы И ЭтотОбъект.ВРаботе;
		
	Для Каждого СтрокаНастроек Из НастройкиЗадач Цикл
		
		ИндексНастройки = НастройкиЗадач.Индекс(СтрокаНастроек);
		Если СтрокаНастроек.Удалена Тогда 
			Продолжить;
		КонецЕсли;
		
		ПолеВидЗаказа                 = Элементы["ВидЗаказа_"+ИндексНастройки];
		ПолеУчетнаяЗапись             = Элементы["УчетнаяЗапись_"+ИндексНастройки];
		ПолеТипОповещения             = Элементы["ТипОповещения_"+ИндексНастройки];
		ПолеТипОбсуждения             = Элементы["ТипОбсуждения_"+ИндексНастройки];
		ПолеСпособОповещения          = Элементы["СпособОповещения_"+ИндексНастройки];
		ПолеОбсуждение                = Элементы["Обсуждение_"+ИндексНастройки];
		ПолеШаблонСообщения           = Элементы["ШаблонСообщения_"+ИндексНастройки];
		ПолеСостояниеЗаказа           = Элементы["СостояниеЗаказа_"+ИндексНастройки];
		ПолеВидОперации               = Элементы["ВидОперации_"+ИндексНастройки];
		ЭлементНадписьЗаказПокупателя = Элементы["НадписьЗаказПокупателя_"+ИндексНастройки];
		ПолеВариантЗавершения         = Элементы["ВариантЗавершения_"+ИндексНастройки];
		ПолеПользовательДляПисем      = Элементы["ПользовательДляПисем_"+ИндексНастройки];
		
		ЗаказПокупателяЗавершен = СтрокаНастроек.СостояниеЗаказа = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СостоянияЗаказовПокупателей.Завершен");
		ЗаказНарядЗавершен      = СтрокаНастроек.СостояниеЗаказа = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СостоянияЗаказНарядов.Завершен");

		Если СтрокаНастроек.ВидОперации = "ЗаказНаряд" Тогда	
			ПолеВидЗаказа.ОграничениеТипа       = Новый ОписаниеТипов("СправочникСсылка.ВидыЗаказНарядов");
			ПолеСостояниеЗаказа.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СостоянияЗаказНарядов");
			ПолеВидЗаказа.Видимость             = ИспользоватьВидыЗаказНарядов;
		ИначеЕсли СтрокаНастроек.ВидОперации = "ЗаказПокупателя" Тогда
			ПолеВидЗаказа.ОграничениеТипа       = Новый ОписаниеТипов("СправочникСсылка.ВидыЗаказовПокупателей");
			ПолеСостояниеЗаказа.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СостоянияЗаказовПокупателей");
			ПолеВидЗаказа.Видимость             = ИспользоватьВидыЗаказовПокупателей;
		КонецЕсли;
				
		Если СтрокаНастроек.ТипОповещения = "Обсуждение" Тогда
			Элементы.Переместить(ПолеВидОперации, Элементы["ГруппаДействие_"+ИндексНастройки+"_Строка_1"]);
			Элементы.Переместить(ЭлементНадписьЗаказПокупателя, Элементы["ГруппаДействие_"+ИндексНастройки+"_Строка_1"]);
		Иначе
			Элементы.Переместить(ЭлементНадписьЗаказПокупателя, Элементы["ГруппаДействие_"+ИндексНастройки+"_Строка_2"], ПолеВидЗаказа);
			Элементы.Переместить(ПолеВидОперации, Элементы["ГруппаДействие_"+ИндексНастройки+"_Строка_2"], ЭлементНадписьЗаказПокупателя);
		КонецЕсли;
		
		Если СтрокаНастроек.ТипОповещения = "Обсуждение" Тогда	
			Если СтрокаНастроек.ТипОбсуждения = "Личное" Тогда
				ПолеСпособОповещения.Заголовок = НСтр("ru = '(кому)'");
			Иначе
				ПолеСпособОповещения.Заголовок = НСтр("ru = 'и (кого оповестить)'");
			КонецЕсли;	
		Иначе
			ПолеСпособОповещения.Заголовок = НСтр("ru = '(кому)'");
		КонецЕсли;
		
		ПолеТипОбсуждения.Видимость = СтрокаНастроек.ТипОповещения = "Обсуждение";
		ПолеОбсуждение.Видимость    =  СтрокаНастроек.ТипОповещения = "Обсуждение" И СтрокаНастроек.ТипОбсуждения = "Групповое";
		ПолеСпособОповещения.Видимость = НЕ СтрокаНастроек.ТипОбсуждения = "Групповое" И НЕ (СтрокаНастроек.ТипОповещения = "Email" ИЛИ СтрокаНастроек.ТипОповещения = "SMS");
		ПолеУчетнаяЗапись.Видимость    = СтрокаНастроек.ТипОповещения = "Email";
		ПолеШаблонСообщения.Видимость    = СтрокаНастроек.ТипОповещения = "Email" ИЛИ СтрокаНастроек.ТипОповещения = "SMS";
		ПолеПользовательДляПисем.Видимость = СтрокаНастроек.ТипОповещения = "Email" ИЛИ СтрокаНастроек.ТипОповещения = "SMS";
		ПолеВидОперации.Видимость   = ИспользоватьПодсистемуРаботы;
		ЭлементНадписьЗаказПокупателя.Видимость = НЕ ИспользоватьПодсистемуРаботы;
		ПолеВариантЗавершения.Видимость = ЗаказПокупателяЗавершен ИЛИ ЗаказНарядЗавершен;
				
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСостояниеПослеВыбора(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено ИЛИ ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНастроек = НастройкиЗадач.Получить(ДополнительныеПараметры.Индекс);
	СтрокаНастроек.СостояниеЗаказа = ВыбранноеЗначение;
	СтрокаНастроек.Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ЗадачиАссистента

&НаСервере
Процедура УдалитьОдинаковыеДействияИзНастроек()
	
	Для Каждого СтрокаНастроек Из НастройкиЗадач Цикл
			
		ОтборПоУсловиям = Новый Структура;
		ОтборПоУсловиям.Вставить("Удалена", Ложь);
		ОтборПоУсловиям.Вставить("ТипОповещения", СтрокаНастроек.ТипОповещения);
		ОтборПоУсловиям.Вставить("ВидОперации", СтрокаНастроек.ВидОперации);
		ОтборПоУсловиям.Вставить("ВидЗаказа", СтрокаНастроек.ВидЗаказа);
		ОтборПоУсловиям.Вставить("СостояниеЗаказа", СтрокаНастроек.СостояниеЗаказа);
		ОтборПоУсловиям.Вставить("ВариантЗавершения", СтрокаНастроек.ВариантЗавершения);
		
		Если СтрокаНастроек.ТипОповещения = "Обсуждение" Тогда 
			ОтборПоУсловиям.Вставить("ТипОбсуждения", СтрокаНастроек.ТипОбсуждения);
			ОтборПоУсловиям.Вставить("СпособОповещения", СтрокаНастроек.СпособОповещения);
			ОтборПоУсловиям.Вставить("ПользовательДляОповещения", СтрокаНастроек.ПользовательДляОповещения);
			ОтборПоУсловиям.Вставить("Обсуждение", СтрокаНастроек.Обсуждение);
		ИначеЕсли СтрокаНастроек.ТипОповещения = "Email" Тогда
			ОтборПоУсловиям.Вставить("ПользовательДляПисем", СтрокаНастроек.СпособОповещения);
			ОтборПоУсловиям.Вставить("ШаблонСообщения", СтрокаНастроек.ШаблонСообщения);
			ОтборПоУсловиям.Вставить("УчетнаяЗапись", СтрокаНастроек.УчетнаяЗапись);	
		Иначе
			ОтборПоУсловиям.Вставить("ПользовательДляПисем", СтрокаНастроек.ПользовательДляПисем);
			ОтборПоУсловиям.Вставить("ШаблонСообщения", СтрокаНастроек.ШаблонСообщения);
		КонецЕсли;
				
		ЕстьЗадачиСОдинаковымиУсловиями = НастройкиЗадач.НайтиСтроки(ОтборПоУсловиям).Количество() > 1;
		
		Если ЕстьЗадачиСОдинаковымиУсловиями Тогда
			СтрокаНастроек.Удалена = Истина;
			СтрокаНастроек.Модифицированность = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьБлокиНастроекАссистента()
		
	ГруппаЗадач = Справочники.ЗадачиАссистентаУправления.СсылкаНаГруппуЗадач(ИдентификаторГруппы);
	
	Если НЕ ЗначениеЗаполнено(ГруппаЗадач) Тогда
		ДобавитьПустыеНастройкиЗадачи();
		Возврат;
	КонецЕсли;
	
	ОтобранныеЗадачи = Справочники.ЗадачиАссистентаУправления.ПолучитьЗадачиПоГруппе(ГруппаЗадач);
	НастройкиЗадач.Очистить();
	
	Для каждого Задача Из ОтобранныеЗадачи Цикл
		
		ДанныеЗадачи       = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, 
			"Используется,ДействиеИдентификатор,СпособОповещения, ПользовательДляОповещения");
		ЗначенияЗаполнения = Справочники.ЗадачиАссистентаУправления.ЗначенияЗаполнения(Задача);
		ПараметрыУсловия   = Справочники.ЗадачиАссистентаУправления.ПредставленияПараметровУсловия(Задача);
				
		СтрокаНастроек = НастройкиЗадач.Добавить();
		
		Если ТипЗнч(ЗначенияЗаполнения.ВидЗаказа) = Тип("СправочникСсылка.ВидыЗаказовПокупателей") Тогда
			СтрокаНастроек.ВидОперации = "ЗаказПокупателя";
		Иначе
			СтрокаНастроек.ВидОперации = "ЗаказНаряд";
		КонецЕсли;

		СтрокаНастроек.Задача             = Задача;
		ЗначенияЗадачиПоДействию(СтрокаНастроек, ДанныеЗадачи, ЗначенияЗаполнения);
		ЗаполнитьСпособОповещенияПоЗначению(СтрокаНастроек, ДанныеЗадачи.ПользовательДляОповещения, ДанныеЗадачи.СпособОповещения);
		СтрокаНастроек.Удалена            = Ложь;
		СтрокаНастроек.Модифицированность = Ложь;

		ЭтотОбъект.ВРаботе = ДанныеЗадачи.Используется;

	КонецЦикла;
	
	Если НастройкиЗадач.Количество() = 0 Тогда
		ДобавитьПустыеНастройкиЗадачи();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПустыеНастройкиЗадачи()
	
	ОбщиеНастройки = Новый Структура;
	ОбщиеНастройки.Вставить("Модифицированность", Истина);
	
	ОбщиеНастройки.Вставить("ВидОперации",       "ЗаказПокупателя");
	ОбщиеНастройки.Вставить("ВидЗаказа",         ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыЗаказовПокупателей.Основной"));
	ОбщиеНастройки.Вставить("СостояниеЗаказа",   ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СостоянияЗаказовПокупателей.Завершен"));
	ОбщиеНастройки.Вставить("ВариантЗавершения", ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ВариантыЗавершенияЗаказа.Успешно"));
	ОбщиеНастройки.Вставить("ТипОповещения",     "Обсуждение");
	ОбщиеНастройки.Вставить("ТипОбсуждения",     "Заказ");
	ОбщиеНастройки.Вставить("УчетнаяЗапись",     Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты);
	ОбщиеНастройки.Вставить("ШаблонСообщения",     Справочники.ШаблоныСообщений.НайтиПоНаименованию("Изменение состояния заказа"));
	// 1.
	НоваяНастройка = НастройкиЗадач.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяНастройка, ОбщиеНастройки);
	
	ЗаполнитьСпособОповещенияПоЗначению(
		НоваяНастройка,
		НоваяНастройка.ПользовательДляОповещения,
		Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияБезОповещения);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпособОповещенияПоЗначению(СтрокаНастроек, ПользовательДляОповещения, СпособОповещения)
	
	Если НЕ ЗначениеЗаполнено(ПользовательДляОповещения) И СтрокаНастроек.ТипОбсуждения <> "Групповое" Тогда
		Если СтрокаНастроек.ТипОповещения = "Обсуждение" И СтрокаНастроек.ТипОбсуждения = "Заказ" Тогда
			ПредставлениеСпособаОповещения = СпособыОповещенияПоЗаказу.НайтиСтроки(Новый Структура("Значение", СпособОповещения));
		Иначе
			ПредставлениеСпособаОповещения = СпособыОповещения.НайтиСтроки(Новый Структура("Значение", СпособОповещения));
		КонецЕсли;
	
		Если ПредставлениеСпособаОповещения.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаНастроек.СпособОповещения = ПредставлениеСпособаОповещения[0].Представление;
		СтрокаНастроек.ПользовательДляОповещения = ПользовательДляОповещения;
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаНастроек.СпособОповещения = ПользовательДляОповещения;
	СтрокаНастроек.ПользовательДляОповещения = ПользовательДляОповещения;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпособыОповещенияПоЗаказу()
	
	СпособыОповещенияПоЗаказу.Очистить();
	
	СпособНикогоНеОповещать = СпособыОповещенияПоЗаказу.Добавить();
	СпособНикогоНеОповещать.Значение = Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияБезОповещения;
	СпособНикогоНеОповещать.Представление = НСтр("ru = 'Никого не оповещать'");
	
	СпособОповестиОтветственного = СпособыОповещенияПоЗаказу.Добавить();
	СпособОповестиОтветственного.Значение = Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияОтветственному;
	СпособОповестиОтветственного.Представление = НСтр("ru = 'Ответственного за заказ'");
	
	СпособОповестиПользователя = СпособыОповещенияПоЗаказу.Добавить();
	СпособОповестиПользователя.Значение = Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияПользователю;
	СпособОповестиПользователя.Представление = НСтр("ru = 'Другого пользователя'");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпособыОповещения()
	
	СпособыОповещения.Очистить();
	
	СпособОповестиОтветственного = СпособыОповещения.Добавить();
	СпособОповестиОтветственного.Значение = Перечисления.СпособОповещенияАссистентаУправления.СообщениеЛичногоОбсужденияОтветственному;
	СпособОповестиОтветственного.Представление = НСтр("ru = 'Ответственному за заказ'");
	
	СпособОповестиПользователя = СпособыОповещения.Добавить();
	СпособОповестиПользователя.Значение = Перечисления.СпособОповещенияАссистентаУправления.СообщениеЛичногоОбсужденияПользователю;
	СпособОповестиПользователя.Представление = НСтр("ru = 'Другому пользователю'");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпособОповещенияПоПредставлению(СтрокаНастроек, ЗадачаОбъект)
	
	Если СтрокаНастроек.ТипОбсуждения = "Заказ" Тогда
		Таблица = СпособыОповещенияПоЗаказу;
	Иначе
		Таблица = СпособыОповещения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаНастроек.ПользовательДляОповещения) И СтрокаНастроек.ТипОбсуждения = "Заказ" Тогда
		ЗадачаОбъект.СпособОповещения = Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияПользователю;
	ИначеЕсли ЗначениеЗаполнено(СтрокаНастроек.ПользовательДляОповещения) И СтрокаНастроек.ТипОбсуждения = "Личное" Тогда
		ЗадачаОбъект.СпособОповещения = Перечисления.СпособОповещенияАссистентаУправления.СообщениеЛичногоОбсужденияПользователю;
	ИначеЕсли СтрокаНастроек.ТипОбсуждения = "Групповое" Тогда
		ЗадачаОбъект.СпособОповещения = Перечисления.СпособОповещенияАссистентаУправления.СообщениеОбщегоОбсуждения;
	КонецЕсли;
	
	ЗначениеСпособаОповещения = Таблица.НайтиСтроки(Новый Структура("Представление", СтрокаНастроек.СпособОповещения));
	
	Если ЗначениеСпособаОповещения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачаОбъект.СпособОповещения = ЗначениеСпособаОповещения[0].Значение;
			
КонецПроцедуры

&НаСервере
Процедура СоздатьИзменитьЗадачиАссистента()
	
	УдалитьОдинаковыеДействияИзНастроек();
	
	НачатьТранзакцию();
	
	Попытка
		
		ГруппаЗадач = Справочники.ЗадачиАссистентаУправления.СсылкаНаГруппуЗадач(ИдентификаторГруппы);
		
		Если НЕ ЗначениеЗаполнено(ГруппаЗадач) Тогда
			ГруппаЗадач = Справочники.ЗадачиАссистентаУправления.СоздатьГруппу();
			ГруппаЗадач.Наименование = НСтр("ru = 'Оповестить пользователя об изменении состояния заказа'");
			ГруппаЗадач.ИдентификаторГруппы = ИдентификаторГруппы;
			ГруппаЗадач.Записать();
		КонецЕсли;
		
		Для каждого СтрокаНастроек Из НастройкиЗадач Цикл
			
			ЗадачаИзменена = СтрокаНастроек.Модифицированность;
			
			Если НЕ ЗадачаИзменена Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаНастроек.Задача) Тогда
				ЗадачаОбъект = СтрокаНастроек.Задача.ПолучитьОбъект();
			Иначе
				ЗадачаОбъект = Справочники.ЗадачиАссистентаУправления.СоздатьЭлемент();
				
				АвторИзменений = Пользователи.АвторизованныйПользователь();
				ЕстьЗадачиПользователя = Справочники.ЗадачиАссистентаУправления.ЕстьЗадачиПользователя(АвторИзменений);
			КонецЕсли;
			
			Если СтрокаНастроек.Удалена И ЗначениеЗаполнено(ЗадачаОбъект.Ссылка) Тогда
				ЗадачаОбъект.Удалить();
			КонецЕсли;
			
			Если СтрокаНастроек.Удалена Тогда
				СтрокаНастроек.Модифицированность = Ложь;
				Продолжить;
			КонецЕсли;
			
			ЗадачаОбъект.ДействиеИдентификатор = ДействиеПоТипуОповещения(СтрокаНастроек.ТипОповещения, СтрокаНастроек.ВидОперации);
			ЗадачаОбъект.МодульМенеджера = "АссистентУправленияРаботаСЗаказами";
			ЗадачаОбъект.ТипПредмета = СтрокаНастроек.ВидОперации;
			
			ЗадачаОбъект.События.Очистить();
			НовоеСобытие = ЗадачаОбъект.События.Добавить();
			НовоеСобытие.СобытиеИдентификатор = СобытиеПоТипуПредмета(СтрокаНастроек.ВидОперации);
			
			ЗаполнитьСпособОповещенияПоПредставлению(СтрокаНастроек, ЗадачаОбъект);
			ЗадачаОбъект.Используется     = ЭтотОбъект.ВРаботе;
			ЗадачаОбъект.Родитель         = ГруппаЗадач.Ссылка;
			
			ЗаполнитьЗначенияЗаполненияПоДействию(ЗадачаОбъект, СтрокаНастроек);
		
			ЗадачаОбъект.Наименование = НаименованиеПоТипуОповещения(СтрокаНастроек.ТипОповещения);
			ЗадачаОбъект.Записать();
			
			СтрокаНастроек.Модифицированность = Ложь;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияЗаполненияПоДействию(ЗадачаОбъект, СтрокаНастроек)
	
	ЗначенияЗаполнения = ЗадачаОбъект.ЗначенияЗаполнения;
	ЗначенияЗаполнения.Очистить();
	
	Если СтрНайти(ЗадачаОбъект.ДействиеИдентификатор, "Обсуждении") Тогда
		ЗадачаОбъект.ПользовательДляОповещения = СтрокаНастроек.ПользовательДляОповещения;
		ДобавитьПараметрЗадачи(ЗначенияЗаполнения, "СпособОповещения", ЗадачаОбъект.СпособОповещения);
		ДобавитьПараметрЗадачи(ЗначенияЗаполнения, "ПользовательДляОповещения", СтрокаНастроек.ПользовательДляОповещения);
		ДобавитьПараметрЗадачи(ЗначенияЗаполнения, "ИдентификаторОбщегоОбсуждения", СтрокаНастроек.ОбсуждениеИдентификатор);
		ДобавитьПараметрЗадачи(ЗначенияЗаполнения, "СостояниеЗаказа", СтрокаНастроек.СостояниеЗаказа);
		ДобавитьПараметрЗадачи(ЗначенияЗаполнения, "ВидЗаказа", СтрокаНастроек.ВидЗаказа);
		ДобавитьПараметрЗадачи(ЗначенияЗаполнения, "ВариантЗавершения", СтрокаНастроек.ВариантЗавершения);
	КонецЕсли;
	
	Если СтрНайти(ЗадачаОбъект.ДействиеИдентификатор, "Email") Тогда
		ЗадачаОбъект.ПользовательДляОповещения = СтрокаНастроек.ПользовательДляПисем;
		ДобавитьПараметрЗадачи(ЗначенияЗаполнения, "ПользовательДляОповещения", СтрокаНастроек.ПользовательДляПисем);
		ДобавитьПараметрЗадачи(ЗначенияЗаполнения, "ШаблонСообщения", СтрокаНастроек.ШаблонСообщения);
		ДобавитьПараметрЗадачи(ЗначенияЗаполнения, "УчетнаяЗапись", СтрокаНастроек.УчетнаяЗапись);
		ДобавитьПараметрЗадачи(ЗначенияЗаполнения, "СостояниеЗаказа", СтрокаНастроек.СостояниеЗаказа);
		ДобавитьПараметрЗадачи(ЗначенияЗаполнения, "ВидЗаказа", СтрокаНастроек.ВидЗаказа);
		ДобавитьПараметрЗадачи(ЗначенияЗаполнения, "ВариантЗавершения", СтрокаНастроек.ВариантЗавершения);
	КонецЕсли;
	
	Если СтрНайти(ЗадачаОбъект.ДействиеИдентификатор, "SMS") Тогда
		ЗадачаОбъект.ПользовательДляОповещения = СтрокаНастроек.ПользовательДляПисем;
		ДобавитьПараметрЗадачи(ЗначенияЗаполнения, "ПользовательДляОповещения", СтрокаНастроек.ПользовательДляПисем);
		ДобавитьПараметрЗадачи(ЗначенияЗаполнения, "ШаблонСообщения", СтрокаНастроек.ШаблонСообщения);
		ДобавитьПараметрЗадачи(ЗначенияЗаполнения, "СостояниеЗаказа", СтрокаНастроек.СостояниеЗаказа);
		ДобавитьПараметрЗадачи(ЗначенияЗаполнения, "ВидЗаказа", СтрокаНастроек.ВидЗаказа);
		ДобавитьПараметрЗадачи(ЗначенияЗаполнения, "ВариантЗавершения", СтрокаНастроек.ВариантЗавершения);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьПараметрЗадачи(Таблица, Параметр, Значение)
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Параметр = Параметр;
	НоваяСтрока.Значение = Новый ХранилищеЗначения(Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуЗадач()
	
	Результат = Новый Структура();
	
	Результат.Вставить("ИзмененПризнакВРаботе", ИзмененПризнакВРаботе);
	Результат.Вставить("АвторИзменений", АвторИзменений);
	Результат.Вставить("ГруппаЗадач", ИдентификаторГруппы);
	Результат.Вставить("НужноДобавитьВОбсуждение", НЕ ЕстьЗадачиПользователя);
	
	Закрыть(Результат);
	
КонецПроцедуры

&НаСервере
Функция ДействиеПоТипуОповещения(ТипОповещения, ВидОперации)
	
	Если ТипОповещения = "Обсуждение" И ВидОперации = "ЗаказПокупателя" Тогда
		Возврат "ОповеститьСотрудникаОбИзмененииСостоянияЗаказаПокупателяВОбсуждении";
	КонецЕсли;
	
	Если ТипОповещения = "Обсуждение" И ВидОперации = "ЗаказНаряд" Тогда
		Возврат "ОповеститьСотрудникаОбИзмененииСостоянияЗаказНарядаВОбсуждении";
	КонецЕсли;

	Если ТипОповещения = "Email" И ВидОперации = "ЗаказПокупателя" Тогда
		Возврат "ОповеститьСотрудникаОбИзмененииСостоянияЗаказаПокупателяПоEmail";
	КонецЕсли;
	
	Если ТипОповещения = "Email" И ВидОперации = "ЗаказНаряд" Тогда
		Возврат "ОповеститьСотрудникаОбИзмененииСостоянияЗаказНарядаПоEmail";
	КонецЕсли;
	
	Если ТипОповещения = "SMS" И ВидОперации = "ЗаказПокупателя" Тогда
		Возврат "ОповеститьСотрудникаОбИзмененииСостоянияЗаказаПокупателяПоSMS";
	КонецЕсли;
	
	Если ТипОповещения = "SMS" И ВидОперации = "ЗаказНаряд" Тогда
		Возврат "ОповеститьСотрудникаОбИзмененииСостоянияЗаказНарядаПоSMS";
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ЗначенияЗадачиПоДействию(СтрокаНастроек, ДанныеЗадачи, ЗначенияЗаполнения)
	
	Если СтрНайти(ДанныеЗадачи.ДействиеИдентификатор, "Обсуждении") Тогда
		
		СтрокаНастроек.ТипОповещения = "Обсуждение";
		СообщениеОтветственному = Перечисления.СпособОповещенияАссистентаУправления.СообщениеЛичногоОбсужденияОтветственному;
		СообщениеПользователю = Перечисления.СпособОповещенияАссистентаУправления.СообщениеЛичногоОбсужденияПользователю;
		ОбщееСообщение = Перечисления.СпособОповещенияАссистентаУправления.СообщениеОбщегоОбсуждения;
		
		Если ДанныеЗадачи.СпособОповещения = ОбщееСообщение Тогда
			СтрокаНастроек.ТипОбсуждения = "Групповое";
		ИначеЕсли ДанныеЗадачи.СпособОповещения = СообщениеОтветственному ИЛИ ДанныеЗадачи.СпособОповещения = СообщениеПользователю Тогда
			СтрокаНастроек.ТипОбсуждения = "Личное";
		Иначе
			СтрокаНастроек.ТипОбсуждения = "Заказ";
		КонецЕсли;
		
		СтрокаНастроек.ОбсуждениеИдентификатор = ЗначенияЗаполнения.ИдентификаторОбщегоОбсуждения;
		
		Если ЗначениеЗаполнено(СтрокаНастроек.ОбсуждениеИдентификатор) Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			ОбщееОбсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(Новый ИдентификаторОбсужденияСистемыВзаимодействия(СтрокаНастроек.ОбсуждениеИдентификатор));
			УстановитьПривилегированныйРежим(Ложь);
			
			Если ОбщееОбсуждение <> Неопределено И ТекущийПользовательУчаствуетВОбсуждении(ОбщееОбсуждение) Тогда
				СтрокаНастроек.Обсуждение = ОбщееОбсуждение.Заголовок;
			Иначе
				СтрокаНастроек.Обсуждение = НСтр("ru='<Объект не найден>'");
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
			
	Если СтрНайти(ДанныеЗадачи.ДействиеИдентификатор, "Email") Тогда
		СтрокаНастроек.ТипОповещения = "Email";
		СтрокаНастроек.ШаблонСообщения = ЗначенияЗаполнения.ШаблонСообщения;
		СтрокаНастроек.УчетнаяЗапись = ЗначенияЗаполнения.УчетнаяЗапись;
		СтрокаНастроек.ПользовательДляПисем = ЗначенияЗаполнения.ПользовательДляОповещения;
	КонецЕсли;
	
	Если СтрНайти(ДанныеЗадачи.ДействиеИдентификатор, "SMS") Тогда
		СтрокаНастроек.ТипОповещения = "SMS";
		СтрокаНастроек.ШаблонСообщения = ЗначенияЗаполнения.ШаблонСообщения;
		СтрокаНастроек.ПользовательДляПисем = ЗначенияЗаполнения.ПользовательДляОповещения;
	КонецЕсли;
	
	СтрокаНастроек.СостояниеЗаказа = ЗначенияЗаполнения.СостояниеЗаказа;
	СтрокаНастроек.ВидЗаказа = ЗначенияЗаполнения.ВидЗаказа;
	СтрокаНастроек.ВариантЗавершения = ЗначенияЗаполнения.ВариантЗавершения;
КонецПроцедуры

&НаСервере
Функция СобытиеПоТипуПредмета(ВидОперации)
	
	Если ВидОперации = "ЗаказПокупателя" Тогда
		Возврат "ПриИзмененииСостоянияЗаказаПокупателя";
	КонецЕсли;
	
	Если ВидОперации = "ЗаказНаряд" Тогда
		Возврат "ПриИзмененииСостоянияЗаказНаряда";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ТекущийПользовательУчаствуетВОбсуждении(Обсуждение)
	ИдентификаторТекущегоПользователя = СистемаВзаимодействия.ИдентификаторТекущегоПользователя();
	Возврат Обсуждение.Участники.Содержит(ИдентификаторТекущегоПользователя);
КонецФункции

&НаСервере
Функция НаименованиеПоТипуОповещения(ТипОповещения)
	
	Если ТипОповещения = "Обсуждение" Тогда
		Возврат НСтр("ru = 'Оповещение пользователя в обсуждение об изменении состояния заказа'");
	КонецЕсли;
	
	Если ТипОповещения = "Email" Тогда
		Возврат НСтр("ru = 'Оповещение пользователя по почте об изменении состояния заказа'");
	КонецЕсли;
	
	Если ТипОповещения = "SMS" Тогда
		Возврат НСтр("ru = 'Оповещение пользователя по смс об изменении состояния заказа'");
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьОформлениеПоля(ДобавляемыйЭлемент, ЭлементФормы)
	
	ДобавляемыйЭлемент.Вид = ЭлементФормы.Вид;
	ДобавляемыйЭлемент.ПоложениеЗаголовка = ЭлементФормы.ПоложениеЗаголовка;
	ДобавляемыйЭлемент.Заголовок = ЭлементФормы.Заголовок;
	ДобавляемыйЭлемент.АвтоМаксимальнаяШирина = ЭлементФормы.АвтоМаксимальнаяШирина;
	ДобавляемыйЭлемент.МаксимальнаяШирина = ЭлементФормы.МаксимальнаяШирина;
	ДобавляемыйЭлемент.РежимВыбораИзСписка = ЭлементФормы.РежимВыбораИзСписка;
	ДобавляемыйЭлемент.КнопкаВыпадающегоСписка = ЭлементФормы.КнопкаВыпадающегоСписка;
	ДобавляемыйЭлемент.КнопкаОткрытия = ЭлементФормы.КнопкаОткрытия;
	ДобавляемыйЭлемент.КнопкаВыбора = ЭлементФормы.КнопкаВыбора;
	ДобавляемыйЭлемент.АвтоОтметкаНезаполненного = ЭлементФормы.АвтоОтметкаНезаполненного;
	ДобавляемыйЭлемент.ОтображениеПодсказки = ЭлементФормы.ОтображениеПодсказки;
	ДобавляемыйЭлемент.Подсказка = ЭлементФормы.Подсказка;
	ДобавляемыйЭлемент.ИсторияВыбораПриВводе = ЭлементФормы.ИсторияВыбораПриВводе;
	ДобавляемыйЭлемент.БыстрыйВыбор = ЭлементФормы.БыстрыйВыбор;
	ДобавляемыйЭлемент.КнопкаСоздания = ЭлементФормы.КнопкаСоздания;
	ДобавляемыйЭлемент.КнопкаОткрытия = ЭлементФормы.КнопкаОткрытия;
	ДобавляемыйЭлемент.ПодсказкаВвода = ЭлементФормы.ПодсказкаВвода;
	ДобавляемыйЭлемент.Доступность = ЭлементФормы.Доступность;

КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеГруппы(ДобавляемаяГруппа, ГруппаФормы)
	
	ДобавляемаяГруппа.Вид = ГруппаФормы.Вид;
	ДобавляемаяГруппа.Отображение = ГруппаФормы.Отображение;
	ДобавляемаяГруппа.Группировка = ГруппаФормы.Группировка;
	ДобавляемаяГруппа.ОтображатьЗаголовок = ГруппаФормы.ОтображатьЗаголовок;
	ДобавляемаяГруппа.ЦветФона = ГруппаФормы.ЦветФона;
	ДобавляемаяГруппа.СквозноеВыравнивание = ГруппаФормы.СквозноеВыравнивание;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбсуждения(Команда)
	ОткрытьФорму("Обработка.АссистентУправления.Форма.ВыборОбсуждения");
КонецПроцедуры

&НаКлиенте
Процедура ВыборОбсуждения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ ТипЗнч(Результат)<> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ВыборОбсужденияНаСервере(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ВыборОбсужденияНаСервере(Результат, ДополнительныеПараметры)
	
	Индекс = Число(ДополнительныеПараметры);
	НастройкиЗадач[Индекс].Обсуждение = Результат.Тема;
	НастройкиЗадач[Индекс].ОбсуждениеИдентификатор = Результат.Идентификатор;
	НастройкиЗадач[Индекс].Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти
