
#Область ОписаниеПеременных

#Область ПеременныеФормы

&НаКлиенте
Перем ИзмененПризнакВРаботе;

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИдентификаторГруппы = "ИзменениеСостоянияЗаказаПриОплате";
	РазрешеноИзменятьЗадачи = Обработки.АссистентУправления.РазрешеноИзменятьЗадачи();
	
	ЭтотОбъект.ИспользоватьВидыЗаказовПокупателей = ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей");
	ЭтотОбъект.ИспользоватьВидыЗаказНарядов = ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказНарядов");
	ЭтотОбъект.ИспользоватьПодсистемуРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы");
	НадписьЗаказПокупателя = НСтр("ru = 'Переведи заказ покупателя'");
	
	ЗаполнитьСпособыОповещения();
	ОбновитьБлокиНастроекАссистента();
	ОбновитьЭлементыДействийАссистента();
	ЗаполнитьСписокВыбораЭлементовФормы();
	
	ИнформационнаяБазаЗарегистрирована = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	
	КлючСохраненияПоложенияОкна = Новый УникальныйИдентификатор();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИзмененПризнакВРаботе = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РазрешеноИзменятьЗадачи Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененныеЗадачи = НастройкиЗадач.НайтиСтроки(Новый Структура("Модифицированность", Истина));
	ЗадачиИзменены = ИзмененныеЗадачи.Количество() <> 0;
	
	Если НЕ ЗадачиИзменены Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.ВРаботе Тогда
		
		СоздатьИзменитьЗадачиАссистента();
		ЗакрытьФормуЗадач();
		Возврат;
		
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗадачиЗаполненыКорректно() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СоздатьИзменитьЗадачиАссистента();
	ЗакрытьФормуЗадач();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ЕстьОшибки = Ложь;
	
	Для каждого СтрокаНастроек Из НастройкиЗадач Цикл
		
		Если СтрокаНастроек.Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		Индекс = НастройкиЗадач.Индекс(СтрокаНастроек);
		
		Если Не ЗначениеЗаполнено(СтрокаНастроек.ТипПредмета) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаНастроек.ВидЗаказа) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаНастроек.СостояниеЗаказа) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаНастроек.ПроцентОплаты) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаНастроек.СпособОповещения) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнены обязательные данные'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПроцентОплатыПриИзменении(Элемент)
	
	СтрокаНастроек = НастройкиЗадач.Получить(ИндексБлока(Элемент.Имя));
	
	Если СтрокаНастроек.ПроцентОплаты = 100 Тогда
		СтрокаНастроек.СтатусОплаты = ПредопределенноеЗначение("Перечисление.СтатусОплаты.Полная");
	Иначе
		СтрокаНастроек.СтатусОплаты = ПредопределенноеЗначение("Перечисление.СтатусОплаты.Частичная");
	КонецЕсли;
	
	СтрокаНастроек.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаказаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(ИндексБлока(Элемент.Имя));
	СтрокаНастроек.Модифицированность = Истина;
	ПараметрыПолученияДанных.Вставить("ВидЗаказа", СтрокаНастроек.ВидЗаказа); 
	
	Если СтрокаНастроек.ТипПредмета = "ЗаказПокупателя" Тогда
		ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.СостоянияЗаказовПокупателей"), ПараметрыПолученияДанных);
	ИначеЕсли СтрокаНастроек.ТипПредмета = "ЗаказНаряд" Тогда
		ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.СостоянияЗаказНарядов"), ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОповещенияПриИзменении(Элемент)
	
	СтрокаНастроек = НастройкиЗадач.Получить(ИндексБлока(Элемент.Имя));
	СтрокаНастроек.Модифицированность = Истина;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВРаботеПриИзменении(Элемент)
	
	ИзмененПризнакВРаботе = Истина;
	
	УстановитьМодифицированностьЗадач();
	
	Если НЕ ВРаботе Тогда
		Возврат;
	КонецЕсли;
	
	Если ИнформационнаяБазаЗарегистрирована Тогда
		Возврат;
	КонецЕсли;
	
	ВРаботе = Ложь;
	Элементы.ПанельОшибки.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПредметаПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	УправлениеФормой();
	
	Если СтрокаНастроек.ТипПредмета = "ЗаказПокупателя" Тогда 
		
		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.ВидЗаказа) ИЛИ ТипЗнч(СтрокаНастроек.ВидЗаказа) = Тип("СправочникСсылка.ВидыЗаказНарядов") Тогда
			СтрокаНастроек.ВидЗаказа = ПредопределенноеЗначение("Справочник.ВидыЗаказовПокупателей.Основной");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.СостояниеЗаказа) ИЛИ ТипЗнч(СтрокаНастроек.СостояниеЗаказа) = Тип("СправочникСсылка.СостоянияЗаказНарядов") Тогда
			СтрокаНастроек.СостояниеЗаказа = ПредопределенноеЗначение("Справочник.СостоянияЗаказовПокупателей.Завершен");
		КонецЕсли;
		
	ИначеЕсли СтрокаНастроек.ТипПредмета = "ЗаказНаряд" Тогда
	
		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.ВидЗаказа) ИЛИ ТипЗнч(СтрокаНастроек.ВидЗаказа) = Тип("СправочникСсылка.ВидыЗаказовПокупателей") Тогда
			СтрокаНастроек.ВидЗаказа = ПредопределенноеЗначение("Справочник.ВидыЗаказНарядов.Основной");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.СостояниеЗаказа) ИЛИ ТипЗнч(СтрокаНастроек.СостояниеЗаказа) = Тип("СправочникСсылка.СостоянияЗаказовПокупателей") Тогда
			СтрокаНастроек.СостояниеЗаказа = ПредопределенноеЗначение("Справочник.СостоянияЗаказНарядов.Завершен");
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаНастроек.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаказаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(ИндексБлока(Элемент.Имя));
	СтрокаНастроек.Модифицированность = Истина;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ВидЗаказа", СтрокаНастроек.ВидЗаказа);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьСостояниеПослеВыбора",ЭтотОбъект,Новый Структура("Индекс", Индекс));
	
	Если СтрокаНастроек.ТипПредмета = "ЗаказНаряд" Тогда
		ОткрытьФорму("Справочник.СостоянияЗаказНарядов.ФормаВыбора", ПараметрыФормы, Элемент,,,,ОповещениеОЗакрытии);
	ИначеЕсли СтрокаНастроек.ТипПредмета = "ЗаказПокупателя" Тогда
		ОткрытьФорму("Справочник.СостоянияЗаказовПокупателей.ФормаВыбора", ПараметрыФормы, Элемент,,,,ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗаказаПриИзменении(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СогласоватьВидИСостояние(Индекс);
	
	СтрокаНастроек.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУдалитьНажатие(Элемент)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СтрокаНастроек.Удалена = Истина;
	СтрокаНастроек.Модифицированность = Истина;
	
	ОбновитьЭлементыДействийИЗаполнитьСписокВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОповещенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Индекс = ИндексБлока(Элемент.Имя);
	СтрокаНастроек = НастройкиЗадач.Получить(Индекс);
	СтрокаНастроек.Модифицированность = Истина;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
		
		Элементы["СпособОповещения_" + Индекс].ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
		НастройкиЗадач[Число(Индекс)].СпособОповещения = ВыбранноеЗначение;
		НастройкиЗадач[Число(Индекс)].ПользовательДляОповещения = ВыбранноеЗначение;
		
		Возврат;
		
	КонецЕсли;
	
	ЗначениеСпособаОповещения = СпособыОповещения.НайтиСтроки(Новый Структура("Представление", ВыбранноеЗначение));
	
	Если ЗначениеСпособаОповещения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеСпособаОповещения[0].Значение <> ПредопределенноеЗначение("Перечисление.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияПользователю") Тогда
		
		Элементы["СпособОповещения_" + Индекс].ОграничениеТипа = Новый ОписаниеТипов("Строка");
		НастройкиЗадач[Число(Индекс)].СпособОповещения = ВыбранноеЗначение;
		НастройкиЗадач[Число(Индекс)].ПользовательДляОповещения = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Индекс", Индекс);
	
	Оповещение = Новый ОписаниеОповещения("ВыборПользователя", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора",ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОповещенияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Индекс = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрНайти(Элемент.Имя, "_"));
	ЗаполнитьДанныеВыбора(ДанныеВыбора, Индекс);
КонецПроцедуры

&НаКлиенте
Процедура СпособОповещенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Индекс = ИндексБлока(Элемент.Имя);
	ЗаполнитьДанныеВыбора(ДанныеВыбора, Индекс);
КонецПроцедуры

&НаКлиенте
Процедура ТекстОшибкиНажатие(Элемент)
	НачатьПодключениеОбсуждений();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьДействие(Команда)
	
	ДобавитьДействиеСервер();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДобавитьДействиеСервер()
	
	ДобавитьПустыеНастройкиЗадачи();
	ОбновитьЭлементыДействийАссистента();
	ЗаполнитьСписокВыбораЭлементовФормы();

КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДействийИЗаполнитьСписокВыбора()
	ОбновитьЭлементыДействийАссистента();
	ЗаполнитьСписокВыбораЭлементовФормы();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексБлока(ЭлементИмя)
	
	Возврат Прав(ЭлементИмя, СтрДлина(ЭлементИмя) - СтрНайти(ЭлементИмя, "_"));
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСостояниеПослеВыбора(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено ИЛИ ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНастроек = НастройкиЗадач.Получить(ДополнительныеПараметры.Индекс);
	СтрокаНастроек.СостояниеЗаказа = ВыбранноеЗначение;
	СтрокаНастроек.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНаименованиеЗадачи(Задача, СтрокаНастроек)
	
	Наименование = "";
	Если СтрокаНастроек.ПроцентОплаты = 100 Тогда
		Наименование = НСтр("ru='Изменить состояние при полной оплате заказа'");
	Иначе
		Наименование = НСтр("ru='Изменить состояние при частичной оплате заказа'");
	КонецЕсли;
	
	Задача.Наименование = Наименование;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеВыбора(ДанныеВыбора,Индекс)
	
	Если ДанныеВыбора = Неопределено Тогда
		ДанныеВыбора = Новый СписокЗначений;
	КонецЕсли;
	
	СпособНикогоНеОповещать = СпособыОповещения.НайтиСтроки(Новый Структура("Значение", Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияБезОповещения));
	Если СпособНикогоНеОповещать.Количество() > 0 Тогда
		ДанныеВыбора.Добавить(СпособНикогоНеОповещать[0].Представление,
		,,БиблиотекаКартинок.СпособОповещенияНикогоНеОповещать);
	КонецЕсли;
	
	СпособОповестиОтветственного = СпособыОповещения.НайтиСтроки(Новый Структура("Значение", Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияОтветственному));
	Если СпособОповестиОтветственного.Количество() > 0 Тогда
		ДанныеВыбора.Добавить(СпособОповестиОтветственного[0].Представление,
		,,БиблиотекаКартинок.СпособОповещенияОповеститьВыбранного);
	КонецЕсли;
	
	ДанныеВыбора.Добавить(Пользователи.АвторизованныйПользователь(), ,,БиблиотекаКартинок.СпособОповещенияОповеститьВыбранного);
		
	СпособОповестиПользователя = СпособыОповещения.НайтиСтроки(Новый Структура("Значение", Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияПользователю));
	Если СпособОповестиПользователя.Количество() > 0 Тогда
		ДанныеВыбора.Добавить(СпособОповестиПользователя[0].Представление,
		,,БиблиотекаКартинок.СпособОповещенияОповеститьВыбранного);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыборПользователя(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = ДополнительныеПараметры.Индекс;
	Элементы["СпособОповещения_"+Индекс].ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	НастройкиЗадач[Число(Индекс)].СпособОповещения = Результат;
	НастройкиЗадач[Число(Индекс)].ПользовательДляОповещения = Результат;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодключениеОбсуждений()
	
	Продолжение = Новый ОписаниеОповещения("ЗавершитьПодключениеОбсуждений", ЭтотОбъект);
	ОбсужденияКлиент.ПоказатьПодключение(Продолжение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПодключениеОбсуждений(Результат, ДополнительныеПараметры) Экспорт
	
	ИнформационнаяБазаЗарегистрирована = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	Элементы.ПанельОшибки.Видимость = НЕ ИнформационнаяБазаЗарегистрирована;
	ВРаботе = ИнформационнаяБазаЗарегистрирована;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМодифицированностьЗадач()
	
	Для Каждого СтрокаНастроек Из НастройкиЗадач Цикл
		СтрокаНастроек.Модифицированность = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЗадачиЗаполненыКорректно()
	
	ЕстьОшибкиСостояний = Ложь;
	ЕстьОшибкиУсловий = Ложь;
	
	ОдинаковыеСостояния = Новый Массив;
	
	Для каждого СтрокаНастроек Из НастройкиЗадач Цикл
		
		ОтборСостояние = Новый Структура;
		ОтборСостояние.Вставить("Удалена",Ложь);
		ОтборСостояние.Вставить("СостояниеЗаказа",СтрокаНастроек.СостояниеЗаказа);
		ОтборСостояние.Вставить("ВидЗаказа",СтрокаНастроек.ВидЗаказа);
		ОтборСостояние.Вставить("СпособОповещения", СтрокаНастроек.СпособОповещения);
		ОтборСостояние.Вставить("ПользовательДляОповещения", СтрокаНастроек.ПользовательДляОповещения);
		
		ЗадачиСОдинаковымиСостояниями = НастройкиЗадач.НайтиСтроки(ОтборСостояние);
		Если ЗадачиСОдинаковымиСостояниями.Количество() > 1 Тогда
			
			ЕстьОшибкиСостояний = Истина;
			Состояние = ОдинаковыеСостояния.Найти(СтрокаНастроек.СостояниеЗаказа);
			
			Если Состояние = Неопределено Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Состояние %1 используется в нескольких действиях'"),СтрокаНастроек.СостояниеЗаказа));
				ОдинаковыеСостояния.Добавить(СтрокаНастроек.СостояниеЗаказа);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьОшибкиУсловий Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборУсловия = Новый Структура;
		ОтборУсловия.Вставить("Удалена",Ложь);
		ОтборУсловия.Вставить("ВидЗаказа",СтрокаНастроек.ВидЗаказа);
		ОтборУсловия.Вставить("ТипПредмета",СтрокаНастроек.ТипПредмета);
		ОтборУсловия.Вставить("ПроцентОплаты",СтрокаНастроек.ПроцентОплаты);
		ОтборУсловия.Вставить("СпособОповещения", СтрокаНастроек.СпособОповещения);
		ОтборУсловия.Вставить("ПользовательДляОповещения", СтрокаНастроек.ПользовательДляОповещения);
		
		ЗадачиСОдинаковымиУсловиями = НастройкиЗадач.НайтиСтроки(ОтборУсловия);
		
		Если ЗадачиСОдинаковымиУсловиями.Количество() > 1 Тогда
			
			ЕстьОшибкиУсловий = Истина;
			ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Настроено несколько действий с одинаковыми условиями'"));
					
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьОшибки = ЕстьОшибкиСостояний ИЛИ ЕстьОшибкиУсловий;
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСпособыОповещения()
	
	СпособыОповещения.Очистить();
	
	СпособНикогоНеОповещать = СпособыОповещения.Добавить();
	СпособНикогоНеОповещать.Значение = Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияБезОповещения;
	СпособНикогоНеОповещать.Представление = НСтр("ru = 'Никого не оповещать'");
	
	СпособОповестиОтветственного = СпособыОповещения.Добавить();
	СпособОповестиОтветственного.Значение = Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияОтветственному;
	СпособОповестиОтветственного.Представление = НСтр("ru = 'Ответственного за заказ'");
	
	СпособОповестиПользователя = СпособыОповещения.Добавить();
	СпособОповестиПользователя.Значение = Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияПользователю;
	СпособОповестиПользователя.Представление = НСтр("ru = 'Другого пользователя'");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпособОповещенияПоЗначению(СтрокаНастроек, ПользовательДляОповещения, СпособОповещения)
	
	Если НЕ ЗначениеЗаполнено(ПользовательДляОповещения) Тогда
		
		ПредставлениеСпособаОповещения = СпособыОповещения.НайтиСтроки(Новый Структура("Значение", СпособОповещения));
		
		Если ПредставлениеСпособаОповещения.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаНастроек.СпособОповещения = ПредставлениеСпособаОповещения[0].Представление;
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаНастроек.СпособОповещения = ПользовательДляОповещения;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпособОповещенияПоПредставлению(СтрокаНастроек, ЗадачаОбъект)
		
	ЗначениеСпособаОповещения = СпособыОповещения.НайтиСтроки(Новый Структура("Представление", СтрокаНастроек.СпособОповещения));
	
	Если ЗначениеСпособаОповещения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачаОбъект.СпособОповещения = ЗначениеСпособаОповещения[0].Значение;
			
КонецПроцедуры

&НаСервере
Процедура ОпределитьСобытияЗадачи(ТаблицаСобытий, СтрокаНастроек, СобытиеПолнаяОплата, СобытиеЧастичнаяОплата)
	
	Если СтрокаНастроек.СтатусОплаты = Перечисления.СтатусОплаты.Полная Тогда
		НовоеСобытие = ТаблицаСобытий.Добавить();
		НовоеСобытие.СобытиеИдентификатор = СобытиеПолнаяОплата;
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТипПредмета", СтрокаНастроек.ТипПредмета);
	Отбор.Вставить("ВидЗаказа", СтрокаНастроек.ВидЗаказа);
	Отбор.Вставить("СтатусОплаты", Перечисления.СтатусОплаты.Полная);
	
	ЗадачиПолнойОплаты = НастройкиЗадач.НайтиСтроки(Отбор);
	ЕстьЗадачиПолнойОплаты = ЗадачиПолнойОплаты.Количество() > 0;
	
	Если ЕстьЗадачиПолнойОплаты Тогда
		НовоеСобытие = ТаблицаСобытий.Добавить();
		НовоеСобытие.СобытиеИдентификатор = СобытиеЧастичнаяОплата;
	Иначе 
		НовоеСобытиеЧастичнаяОплата = ТаблицаСобытий.Добавить();
		НовоеСобытиеЧастичнаяОплата.СобытиеИдентификатор = СобытиеЧастичнаяОплата;
		
		НовоеСобытиеПолнаяОплата = ТаблицаСобытий.Добавить();
		НовоеСобытиеПолнаяОплата.СобытиеИдентификатор = СобытиеПолнаяОплата;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьПараметрыУсловияОплаты(СтрокаНастроек, ТаблицаУсловий)
	
	Если СтрокаНастроек.ПроцентОплаты = 100 Тогда
		ДобавитьПараметрУсловия(ТаблицаУсловий, "ПроцентОплаты", Перечисления.ВидСравненияЗначений.Равно, СтрокаНастроек.ПроцентОплаты, СтрокаНастроек.ПроцентОплаты);
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТипПредмета", СтрокаНастроек.ТипПредмета);
	Отбор.Вставить("ВидЗаказа", СтрокаНастроек.ВидЗаказа);
	
	ЗадачиОдногоТипа = НастройкиЗадач.НайтиСтроки(Отбор);
	
	Если ЗадачиОдногоТипа.Количество() = 1 Тогда
		Интервал = Новый Массив;
		Интервал.Добавить(СтрокаНастроек.ПроцентОплаты);
		Интервал.Добавить(100);
		ИнтервалЗначений = Новый ФиксированныйМассив(Интервал);
		ДобавитьПараметрУсловия(ТаблицаУсловий, "ПроцентОплаты", Перечисления.ВидСравненияЗначений.ВИнтервалеВключая, ИнтервалЗначений, СтрокаНастроек.ПроцентОплаты);
		Возврат;
	КонецЕсли;
	
	ЕстьЗадачиСБольшимПроцентом = Ложь;
	Для Каждого Задача Из ЗадачиОдногоТипа Цикл
		
		Если НастройкиЗадач.Индекс(Задача) = НастройкиЗадач.Индекс(СтрокаНастроек) Тогда
			Продолжить;
		КонецЕсли;
		
		Если (Задача.ПроцентОплаты <  СтрокаНастроек.ПроцентОплаты) ИЛИ (Задача.ПроцентОплаты = СтрокаНастроек.ПроцентОплаты) Тогда
			Продолжить;
		КонецЕсли;
		
		Интервал = Новый Массив;
		Интервал.Добавить(СтрокаНастроек.ПроцентОплаты);
		Интервал.Добавить(Задача.ПроцентОплаты);
		ИнтервалЗначений = Новый ФиксированныйМассив(Интервал);
		ДобавитьПараметрУсловия(ТаблицаУсловий, "ПроцентОплаты", Перечисления.ВидСравненияЗначений.ВИнтервалеВключаяЛево, ИнтервалЗначений, СтрокаНастроек.ПроцентОплаты);
		
		ЕстьЗадачиСБольшимПроцентом = Истина;
		Прервать;
		
	КонецЦикла;
	
	Если ЕстьЗадачиСБольшимПроцентом Тогда
		Возврат;
	КонецЕсли;
	
	Интервал = Новый Массив;
	Интервал.Добавить(СтрокаНастроек.ПроцентОплаты);
	Интервал.Добавить(100);
	ИнтервалЗначений = Новый ФиксированныйМассив(Интервал);
	ДобавитьПараметрУсловия(ТаблицаУсловий, "ПроцентОплаты", Перечисления.ВидСравненияЗначений.ВИнтервалеВключая, ИнтервалЗначений, СтрокаНастроек.ПроцентОплаты);
		
КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой
	
&НаСервере
Процедура ЗаполнитьСписокВыбораЭлементовФормы()
	
	Для Итератор = 0 По НастройкиЗадач.Количество() - 1 Цикл
		
		Если НастройкиЗадач[Итератор].Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы["ТипПредмета_" + Итератор].СписокВыбора.Очистить();
		Элементы["ТипПредмета_" + Итератор].СписокВыбора.Добавить("ЗаказПокупателя", НСтр("ru='Заказ покупателя'"));
		Элементы["ТипПредмета_" + Итератор].СписокВыбора.Добавить("ЗаказНаряд", НСтр("ru='Заказ-наряд'"));
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДействийАссистента()
	
	Элементы.Переместить(Элементы.ДобавитьДействие, Элементы.Действие_0);
	УдаляемыеЭлементы = Новый Массив;
	// Группа первой задачи создана в конфигураторе
	Для ИндексГруппы = 1 По Элементы.ДействияАссистента.ПодчиненныеЭлементы.Количество()-1 Цикл
		УдаляемыеЭлементы.Добавить(Элементы.ДействияАссистента.ПодчиненныеЭлементы[ИндексГруппы]);
	КонецЦикла;

	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
		
	Для Каждого СтрокаНастроек Из НастройкиЗадач Цикл
		
		ИндексНастройки = НастройкиЗадач.Индекс(СтрокаНастроек);
		
		Если НастройкиЗадач[ИндексНастройки].Удалена Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИндексНастройки > 0 Тогда
			
			ОбщаяГруппаДействия = Элементы.Добавить("ГруппаДействие_" + ИндексНастройки, Тип("ГруппаФормы"), Элементы.ДействияАссистента);
			ОбщаяГруппаДействия.Вид = Элементы.ГруппаДействие_0.Вид;
			ОбщаяГруппаДействия.Отображение = Элементы.ГруппаДействие_0.Отображение;
			ОбщаяГруппаДействия.Группировка = Элементы.ГруппаДействие_0.Группировка;
			ОбщаяГруппаДействия.ОтображатьЗаголовок = Элементы.ГруппаДействие_0.ОтображатьЗаголовок;
			ОбщаяГруппаДействия.ЦветФона = Элементы.ГруппаДействие_0.ЦветФона;
			
			ГруппаДействия = Элементы.Добавить("Действие_" + ИндексНастройки, Тип("ГруппаФормы"), ОбщаяГруппаДействия);
			ГруппаДействия.Вид = Элементы.Действие_0.Вид;
			ГруппаДействия.Отображение = Элементы.Действие_0.Отображение;
			ГруппаДействия.Группировка = Элементы.Действие_0.Группировка;
			ГруппаДействия.ОтображатьЗаголовок = Элементы.Действие_0.ОтображатьЗаголовок;
			ГруппаДействия.ЦветФона = Элементы.Действие_0.ЦветФона;
			
			ГруппаСтроки = Элементы.Добавить("Строки_" + ИндексНастройки, Тип("ГруппаФормы"), ГруппаДействия);
			ГруппаСтроки.Вид = Элементы.Строки_0.Вид;
			ГруппаСтроки.Отображение = Элементы.Строки_0.Отображение;
			ГруппаСтроки.Группировка = Элементы.Строки_0.Группировка;
			ГруппаСтроки.ОтображатьЗаголовок = Элементы.Строки_0.ОтображатьЗаголовок;
			ГруппаСтроки.ЦветФона = Элементы.Строки_0.ЦветФона;
			
			ГруппаПервойСтрокиДействия = Элементы.Добавить("ГруппаДействие_" + ИндексНастройки + "_Строка_1", Тип("ГруппаФормы"), ГруппаСтроки);
			ГруппаПервойСтрокиДействия.Вид = Элементы.ГруппаДействие_0_Строка_1.Вид;
			ГруппаПервойСтрокиДействия.Отображение = Элементы.ГруппаДействие_0_Строка_1.Отображение;
			ГруппаПервойСтрокиДействия.Группировка = Элементы.ГруппаДействие_0_Строка_1.Группировка;
			ГруппаПервойСтрокиДействия.ОтображатьЗаголовок = Элементы.ГруппаДействие_0_Строка_1.ОтображатьЗаголовок;
			ГруппаПервойСтрокиДействия.СквозноеВыравнивание = Элементы.ГруппаДействие_0_Строка_1.СквозноеВыравнивание;
		
			ПолеТипПредмета = Элементы.Добавить("ТипПредмета_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеТипПредмета.Вид = Элементы.ТипПредмета_0.Вид;
			ПолеТипПредмета.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].ТипПредмета";
			ПолеТипПредмета.ПоложениеЗаголовка = Элементы.ТипПредмета_0.ПоложениеЗаголовка;
			ПолеТипПредмета.Заголовок = Элементы.ТипПредмета_0.Заголовок;
			ПолеТипПредмета.АвтоМаксимальнаяШирина = Элементы.ТипПредмета_0.АвтоМаксимальнаяШирина;
			ПолеТипПредмета.МаксимальнаяШирина = Элементы.ТипПредмета_0.МаксимальнаяШирина;
			ПолеТипПредмета.РежимВыбораИзСписка = Элементы.ТипПредмета_0.РежимВыбораИзСписка;
			ПолеТипПредмета.КнопкаВыпадающегоСписка = Элементы.ТипПредмета_0.КнопкаВыпадающегоСписка;
			ПолеТипПредмета.АвтоОтметкаНезаполненного = Элементы.ТипПредмета_0.АвтоОтметкаНезаполненного;
			ПолеТипПредмета.УстановитьДействие("ПриИзменении","ТипПредметаПриИзменении");
			
			ДекорацияНадпись = Элементы.Добавить("НадписьЗаказПокупателя_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ДекорацияНадпись.ПутьКДанным = Элементы.НадписьЗаказПокупателя_0.ПутьКДанным;
			ДекорацияНадпись.Вид = Элементы.НадписьЗаказПокупателя_0.Вид;
			ДекорацияНадпись.Заголовок = Элементы.НадписьЗаказПокупателя_0.Заголовок;
			ДекорацияНадпись.ПоложениеЗаголовка = Элементы.НадписьЗаказПокупателя_0.ПоложениеЗаголовка;
			ДекорацияНадпись.Ширина = Элементы.НадписьЗаказПокупателя_0.Ширина;
			ДекорацияНадпись.Видимость = Элементы.НадписьЗаказПокупателя_0.Видимость;
			ДекорацияНадпись.РастягиватьПоГоризонтали = Элементы.НадписьЗаказПокупателя_0.РастягиватьПоГоризонтали;
			
			ПолеВидЗаказа = Элементы.Добавить("ВидЗаказа_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеВидЗаказа.Вид = Элементы.ВидЗаказа_0.Вид;
			ПолеВидЗаказа.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].ВидЗаказа";
			ПолеВидЗаказа.ПоложениеЗаголовка = Элементы.ВидЗаказа_0.ПоложениеЗаголовка;
			ПолеВидЗаказа.Заголовок = Элементы.ВидЗаказа_0.Заголовок;
			ПолеВидЗаказа.АвтоМаксимальнаяШирина = Элементы.ВидЗаказа_0.АвтоМаксимальнаяШирина;
			ПолеВидЗаказа.МаксимальнаяШирина = Элементы.ВидЗаказа_0.МаксимальнаяШирина;
			ПолеВидЗаказа.КнопкаВыбора = Элементы.ВидЗаказа_0.КнопкаВыбора;
			ПолеВидЗаказа.КнопкаОткрытия = Элементы.ВидЗаказа_0.КнопкаОткрытия;
			ПолеВидЗаказа.УстановитьДействие("ПриИзменении","ВидЗаказаПриИзменении");
			ПолеВидЗаказа.АвтоОтметкаНезаполненного = Элементы.ВидЗаказа_0.АвтоОтметкаНезаполненного;
			
			ПолеСостояниеЗаказа = Элементы.Добавить("СостояниеЗаказа_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаПервойСтрокиДействия);
			ПолеСостояниеЗаказа.Вид = Элементы.СостояниеЗаказа_0.Вид;
			ПолеСостояниеЗаказа.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].СостояниеЗаказа";
			ПолеСостояниеЗаказа.ПоложениеЗаголовка = Элементы.СостояниеЗаказа_0.ПоложениеЗаголовка;
			ПолеСостояниеЗаказа.Заголовок = Элементы.СостояниеЗаказа_0.Заголовок;
			ПолеСостояниеЗаказа.АвтоМаксимальнаяШирина = Элементы.СостояниеЗаказа_0.АвтоМаксимальнаяШирина;
			ПолеСостояниеЗаказа.МаксимальнаяШирина = Элементы.СостояниеЗаказа_0.МаксимальнаяШирина;
			ПолеСостояниеЗаказа.ОтображениеПодсказки = Элементы.СостояниеЗаказа_0.ОтображениеПодсказки;
			ПолеСостояниеЗаказа.Подсказка = Элементы.СостояниеЗаказа_0.Подсказка;
			ПолеСостояниеЗаказа.КнопкаОткрытия = Элементы.СостояниеЗаказа_0.КнопкаОткрытия;
			ПолеСостояниеЗаказа.УстановитьДействие("АвтоПодбор","СостояниеЗаказаАвтоПодбор");
			ПолеСостояниеЗаказа.УстановитьДействие("НачалоВыбора","СостояниеЗаказаНачалоВыбора");
			ПолеСостояниеЗаказа.АвтоОтметкаНезаполненного = Элементы.СостояниеЗаказа_0.АвтоОтметкаНезаполненного;
			
			ДекорацияУдалить = Элементы.Добавить("ДекорацияУдалить_" + ИндексНастройки, Тип("ДекорацияФормы"), ОбщаяГруппаДействия);
			ДекорацияУдалить.Вид = Элементы.ДекорацияУдалить_0.Вид;
			ДекорацияУдалить.Заголовок = Элементы.ДекорацияУдалить_0.Заголовок;
			ДекорацияУдалить.Ширина = Элементы.ДекорацияУдалить_0.Ширина;
			ДекорацияУдалить.Высота = Элементы.ДекорацияУдалить_0.Высота;
			ДекорацияУдалить.Картинка = Элементы.ДекорацияУдалить_0.Картинка;
			ДекорацияУдалить.РазмерКартинки = Элементы.ДекорацияУдалить_0.РазмерКартинки;
			ДекорацияУдалить.Гиперссылка = Элементы.ДекорацияУдалить_0.Гиперссылка;
			ДекорацияУдалить.УстановитьДействие("Нажатие", "ДекорацияУдалитьНажатие");
			
			ГруппаВторойСтрокиДействия = Элементы.Добавить("ГруппаДействие_" + ИндексНастройки + "_Строка_2", Тип("ГруппаФормы"), ГруппаСтроки);
			ГруппаВторойСтрокиДействия.Вид = Элементы.ГруппаДействие_0.Вид;
			ГруппаВторойСтрокиДействия.Отображение = Элементы.ГруппаДействие_0_Строка_2.Отображение;
			ГруппаВторойСтрокиДействия.Группировка = Элементы.ГруппаДействие_0_Строка_2.Группировка;
			ГруппаВторойСтрокиДействия.ОтображатьЗаголовок = Элементы.ГруппаДействие_0_Строка_2.ОтображатьЗаголовок;
			
			ПолеПроцентОплаты = Элементы.Добавить("ПроцентОплаты_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаВторойСтрокиДействия);
			ПолеПроцентОплаты.Вид = Элементы.ПроцентОплаты_0.Вид;
			ПолеПроцентОплаты.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].ПроцентОплаты";
			ПолеПроцентОплаты.ПоложениеЗаголовка = Элементы.ПроцентОплаты_0.ПоложениеЗаголовка;
			ПолеПроцентОплаты.Заголовок = Элементы.ПроцентОплаты_0.Заголовок;
			ПолеПроцентОплаты.АвтоМаксимальнаяШирина = Элементы.ПроцентОплаты_0.АвтоМаксимальнаяШирина;
			ПолеПроцентОплаты.МаксимальнаяШирина = Элементы.ПроцентОплаты_0.МаксимальнаяШирина;
			ПолеПроцентОплаты.ОтображениеПодсказки = Элементы.ПроцентОплаты_0.ОтображениеПодсказки;
			ПолеПроцентОплаты.Подсказка = Элементы.ПроцентОплаты_0.Подсказка;
			ПолеПроцентОплаты.УстановитьДействие("ПриИзменении", "ПроцентОплатыПриИзменении");
			ПолеПроцентОплаты.АвтоОтметкаНезаполненного = Элементы.ПроцентОплаты_0.АвтоОтметкаНезаполненного;
			ПолеПроцентОплаты.МинимальноеЗначение = Элементы.ПроцентОплаты_0.МинимальноеЗначение;
			ПолеПроцентОплаты.МаксимальноеЗначение = Элементы.ПроцентОплаты_0.МаксимальноеЗначение;
			
			ДекорацияТекстОбсуждение = Элементы.Добавить("ТекстОбсуждение_" + ИндексНастройки, Тип("ДекорацияФормы"), ГруппаВторойСтрокиДействия);
			ДекорацияТекстОбсуждение.Вид = Элементы.ТекстОбсуждение_0.Вид;
			ДекорацияТекстОбсуждение.Заголовок = Элементы.ТекстОбсуждение_0.Заголовок;
			ДекорацияТекстОбсуждение.Ширина = Элементы.ТекстОбсуждение_0.Ширина;
			ДекорацияТекстОбсуждение.Видимость = Элементы.ТекстОбсуждение_0.Видимость;
			
			ПолеСпособОповещения = Элементы.Добавить("СпособОповещения_" + ИндексНастройки, Тип("ПолеФормы"), ГруппаВторойСтрокиДействия);
			ПолеСпособОповещения.Вид = Элементы.СпособОповещения_0.Вид;
			ПолеСпособОповещения.ПутьКДанным = "НастройкиЗадач[" + ИндексНастройки + "].СпособОповещения";
			ПолеСпособОповещения.ПоложениеЗаголовка = Элементы.СпособОповещения_0.ПоложениеЗаголовка;
			ПолеСпособОповещения.Заголовок = Элементы.СпособОповещения_0.Заголовок;
			ПолеСпособОповещения.АвтоМаксимальнаяШирина = Элементы.СпособОповещения_0.АвтоМаксимальнаяШирина;
			ПолеСпособОповещения.МаксимальнаяШирина = Элементы.СпособОповещения_0.МаксимальнаяШирина;
			ПолеСпособОповещения.Ширина = Элементы.СпособОповещения_0.Ширина;
			ПолеСпособОповещения.РежимВыбораИзСписка = Элементы.СпособОповещения_0.РежимВыбораИзСписка;
			ПолеСпособОповещения.КнопкаВыпадающегоСписка = Элементы.СпособОповещения_0.КнопкаВыпадающегоСписка;
			ПолеСпособОповещения.ИсторияВыбораПриВводе = Элементы.СпособОповещения_0.ИсторияВыбораПриВводе;
			ПолеСпособОповещения.КнопкаСоздания = Элементы.СпособОповещения_0.КнопкаСоздания;
			ПолеСпособОповещения.КнопкаОткрытия = Элементы.СпособОповещения_0.КнопкаОткрытия;
			ПолеСпособОповещения.КнопкаВыбора = Элементы.СпособОповещения_0.КнопкаВыбора;
			ПолеСпособОповещения.АвтоОтметкаНезаполненного = Элементы.СпособОповещения_0.АвтоОтметкаНезаполненного;
			ПолеСпособОповещения.УстановитьДействие("ПриИзменении", "СпособОповещенияПриИзменении");
			ПолеСпособОповещения.УстановитьДействие("АвтоПодбор", "СпособОповещенияАвтоПодбор");
			ПолеСпособОповещения.УстановитьДействие("НачалоВыбора", "СпособОповещенияНачалоВыбора");
			ПолеСпособОповещения.УстановитьДействие("ОбработкаВыбора", "СпособОповещенияОбработкаВыбора");
			
			Элементы.Переместить(Элементы.ДобавитьДействие, Элементы["Действие_" + ИндексНастройки]);
		КонецЕсли;
		
	КонецЦикла;
	
	УправлениеФормой();
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
		
	Элементы.ДобавитьДействие.Видимость = РазрешеноИзменятьЗадачи;
	Элементы.ДействияАссистента.ТолькоПросмотр = НЕ РазрешеноИзменятьЗадачи;
	Элементы.ВРаботе.ТолькоПросмотр = НЕ РазрешеноИзменятьЗадачи;
	ЭтотОбъект.ТолькоПросмотр = НЕ РазрешеноИзменятьЗадачи;
	
	Для Каждого СтрокаНастроек Из НастройкиЗадач Цикл
		
		ИндексНастройки = НастройкиЗадач.Индекс(СтрокаНастроек);
		
		Если СтрокаНастроек.Удалена Тогда 
			Продолжить;
		КонецЕсли;
		
		ПолеВидЗаказа = Элементы["ВидЗаказа_"+ИндексНастройки];
		ПолеСостояниеЗаказа = Элементы["СостояниеЗаказа_"+ИндексНастройки];
		ПолеТипПредмета = Элементы["ТипПредмета_"+ИндексНастройки];
		ПолеСпособОповещения = Элементы["СпособОповещения_"+ИндексНастройки];
		ДекорацияТекстОбсуждение = Элементы["ТекстОбсуждение_"+ИндексНастройки];
		ПолеПроцентОплаты = Элементы["ПроцентОплаты_"+ИндексНастройки];
		ДекорацияУдалить = Элементы["ДекорацияУдалить_"+ИндексНастройки];
		ЭлементНадписьЗаказПокупателя = Элементы["НадписьЗаказПокупателя_"+ИндексНастройки];
		
		Если СтрокаНастроек.ТипПредмета = "ЗаказНаряд" Тогда
			
			ПолеВидЗаказа.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ВидыЗаказНарядов");
			ПолеСостояниеЗаказа.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СостоянияЗаказНарядов");
			ПолеВидЗаказа.Видимость = ИспользоватьВидыЗаказНарядов;
			
		ИначеЕсли СтрокаНастроек.ТипПредмета = "ЗаказПокупателя" Тогда
			
			ПолеВидЗаказа.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ВидыЗаказовПокупателей");
			ПолеСостояниеЗаказа.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СостоянияЗаказовПокупателей");
			ПолеВидЗаказа.Видимость = ИспользоватьВидыЗаказовПокупателей;
			
		КонецЕсли;
		
		ПолеСостояниеЗаказа.АвтоМаксимальнаяШирина = НЕ ПолеВидЗаказа.Видимость;
		ПолеВидЗаказа.АвтоМаксимальнаяШирина = НЕ ПолеВидЗаказа.Видимость;
		
		Если ПолеВидЗаказа.Видимость Тогда
			ПолеСостояниеЗаказа.МаксимальнаяШирина = 30;
			ПолеВидЗаказа.МаксимальнаяШирина = 30;
			Элементы.Переместить(ПолеПроцентОплаты,Элементы["ГруппаДействие_" + ИндексНастройки + "_Строка_2"],ДекорацияТекстОбсуждение);
		Иначе
			Элементы.Переместить(ПолеПроцентОплаты,Элементы["ГруппаДействие_" + ИндексНастройки + "_Строка_1"]);
		КонецЕсли;
		
		Если ТипЗнч(СтрокаНастроек.СпособОповещения) = Тип("Строка") Тогда
			ПолеСпособОповещения.ОграничениеТипа = Новый ОписаниеТипов("Строка");
		ИначеЕсли ТипЗнч(СтрокаНастроек.СпособОповещения) = Тип("СправочникСсылка.Пользователи") Тогда
			ПолеСпособОповещения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
		КонецЕсли;
		
		ДекорацияУдалить.Доступность = РазрешеноИзменятьЗадачи И ИндексНастройки <> 0;
		
		ПолеТипПредмета.Видимость = ИспользоватьПодсистемуРаботы;
		ЭлементНадписьЗаказПокупателя.Видимость = НЕ ИспользоватьПодсистемуРаботы;
		Если ИспользоватьПодсистемуРаботы Тогда
			Продолжить;
		КонецЕсли;

		Если СтрокаНастроек.ТипПредмета = "ЗаказПокупателя" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНастроек.ТипПредмета = "ЗаказПокупателя";
		СтрокаНастроек.Модифицированность = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СогласоватьВидИСостояние(Индекс)
	
	СтрокаНастройки = НастройкиЗадач.Получить(Индекс);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыЗаказов.Ссылка КАК Ссылка,
	|	ВидыЗаказов.ПорядокСостояний.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Состояние КАК Состояние
	|	) КАК ПорядокСостояний
	|ИЗ
	|	&ТаблицаСправочника КАК ВидыЗаказов 
	|ГДЕ
	|	ВидыЗаказов.Ссылка = &ВидЗаказа";
	
	ИмяСправочника = СтрокаНастройки.ВидЗаказа.Метаданные().Имя;
	Запрос.Текст = СтрЗаменить(Запрос.Текст , "&ТаблицаСправочника", "Справочник." + ИмяСправочника);
	
	Запрос.УстановитьПараметр("ВидЗаказа", СтрокаНастройки.ВидЗаказа);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СостоянияВида = Выборка.ПорядокСостояний.Выгрузить();
		
		Отбор = Новый Структура;
		Отбор.Вставить("Состояние",СтрокаНастройки.СостояниеЗаказа);
		НайденныеСтроки = СостоянияВида.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаНастройки.СостояниеЗаказа = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗадачиАссистента

&НаСервере
Процедура УдалитьОдинаковыеДействияИзНастроек()
	
	Для Каждого СтрокаНастроек Из НастройкиЗадач Цикл
					
		ОтборПоУсловиям = Новый Структура;
		ОтборПоУсловиям.Вставить("Удалена", Ложь);
		ОтборПоУсловиям.Вставить("ТипПредмета", СтрокаНастроек.ТипПредмета);
		ОтборПоУсловиям.Вставить("ВидЗаказа", СтрокаНастроек.ВидЗаказа);
		ОтборПоУсловиям.Вставить("ПроцентОплаты", СтрокаНастроек.ПроцентОплаты);
		ОтборПоУсловиям.Вставить("СостояниеЗаказа", СтрокаНастроек.СостояниеЗаказа);
		ОтборПоУсловиям.Вставить("СпособОповещения", СтрокаНастроек.СпособОповещения);
		ОтборПоУсловиям.Вставить("ПользовательДляОповещения", СтрокаНастроек.ПользовательДляОповещения);
		
		ЕстьЗадачиСОдинаковымиУсловиями = НастройкиЗадач.НайтиСтроки(ОтборПоУсловиям).Количество() > 1;
		
		Если ЕстьЗадачиСОдинаковымиУсловиями Тогда
			СтрокаНастроек.Удалена = Истина;
			СтрокаНастроек.Модифицированность = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьБлокиНастроекАссистента()
	
	ГруппаЗадач = Справочники.ЗадачиАссистентаУправления.СсылкаНаГруппуЗадач(ИдентификаторГруппы);
	
	Если НЕ ЗначениеЗаполнено(ГруппаЗадач) Тогда
		ДобавитьПустыеНастройкиЗадачи();
		Возврат;
	КонецЕсли;

	ОтобранныеЗадачи = Справочники.ЗадачиАссистентаУправления.ПолучитьЗадачиПоГруппе(ГруппаЗадач);
	
	НастройкиЗадач.Очистить();
	Для каждого Задача Из ОтобранныеЗадачи Цикл
				
		ДанныеЗадачи    = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "ТипПредмета,СпособОповещения,Используется,ПользовательДляОповещения");
		ЗначенияЗаполнения = Справочники.ЗадачиАссистентаУправления.ЗначенияЗаполнения(Задача);
		ПараметрыУсловия = Справочники.ЗадачиАссистентаУправления.ПредставленияПараметровУсловия(Задача);
		
		СтрокаНастроек = НастройкиЗадач.Добавить();
		СтрокаНастроек.Задача             = Задача;
		СтрокаНастроек.ТипПредмета        = ДанныеЗадачи.ТипПредмета;
		СтрокаНастроек.ВидЗаказа          = ПараметрыУсловия.ВидЗаказа;
		СтрокаНастроек.ПроцентОплаты      = ПараметрыУсловия.ПроцентОплаты;
		СтрокаНастроек.СостояниеЗаказа    = ЗначенияЗаполнения.СостояниеЗаказа;
		СтрокаНастроек.Удалена            = Ложь;
		СтрокаНастроек.Модифицированность = Ложь;
		СтрокаНастроек.ПользовательДляОповещения = ДанныеЗадачи.ПользовательДляОповещения;
		
		ЗаполнитьСпособОповещенияПоЗначению(СтрокаНастроек, ДанныеЗадачи.ПользовательДляОповещения, ДанныеЗадачи.СпособОповещения);
		
		Если СтрокаНастроек.ПроцентОплаты = 100 Тогда
			СтрокаНастроек.СтатусОплаты = Перечисления.СтатусОплаты.Полная;
		Иначе
			СтрокаНастроек.СтатусОплаты = Перечисления.СтатусОплаты.Частичная;
		КонецЕсли;

		ЭтотОбъект.ВРаботе = ДанныеЗадачи.Используется;
		
	КонецЦикла;
	
	Если НастройкиЗадач.Количество() = 0 Тогда
		ДобавитьПустыеНастройкиЗадачи();
	КонецЕсли;
	
	НастройкиЗадач.Сортировать("ТипПредмета Возр, ВидЗаказа Возр, ПроцентОплаты Возр");
	
КонецПроцедуры

&НаСервере
Процедура СоздатьИзменитьЗадачиАссистента()
	
	ДействиеИдентификатор = "ИзменитьСостояние";
	УдалитьОдинаковыеДействияИзНастроек();
	НастройкиЗадач.Сортировать("ТипПредмета Возр, ВидЗаказа Возр, ПроцентОплаты Возр");
	
	НачатьТранзакцию();
	
	Попытка
		
		ГруппаЗадач = Справочники.ЗадачиАссистентаУправления.СсылкаНаГруппуЗадач(ИдентификаторГруппы);
		
		Если НЕ ЗначениеЗаполнено(ГруппаЗадач) Тогда
			ГруппаЗадач = Справочники.ЗадачиАссистентаУправления.СоздатьГруппу();
			ГруппаЗадач.Наименование = НСтр("ru = 'Изменить состояние заказа при оплате'");
			ГруппаЗадач.ИдентификаторГруппы = ИдентификаторГруппы;
			ГруппаЗадач.Записать();
		КонецЕсли;
		
		Для каждого СтрокаНастроек Из НастройкиЗадач Цикл
			
			Если ЗначениеЗаполнено(СтрокаНастроек.Задача) Тогда
				ЗадачаОбъект = СтрокаНастроек.Задача.ПолучитьОбъект();
			Иначе
				ЗадачаОбъект = Справочники.ЗадачиАссистентаУправления.СоздатьЭлемент();
				АвторИзменений = Пользователи.АвторизованныйПользователь();
				ЕстьЗадачиПользователя = Справочники.ЗадачиАссистентаУправления.ЕстьЗадачиПользователя(АвторИзменений);
			КонецЕсли;
			
			Если СтрокаНастроек.Удалена И ЗначениеЗаполнено(ЗадачаОбъект.Ссылка) Тогда
				УдалитьОсновнуюИВспомогательныеЗадачи(ЗадачаОбъект);
			КонецЕсли;
			
			Если СтрокаНастроек.Удалена Тогда
				СтрокаНастроек.Модифицированность = Ложь;
				Продолжить;
			КонецЕсли;
			
			ЗадачаОбъект.ДействиеИдентификатор = ДействиеИдентификатор;
			
			ЗадачаОбъект.События.Очистить();
			ОпределитьСобытияЗадачи(ЗадачаОбъект.События, СтрокаНастроек,"ПолнаяОплатаПоступила","ЧастичнаяОплатаПоступила");
			 
			ЗадачаОбъект.ТипПредмета               = СтрокаНастроек.ТипПредмета;
			ЗадачаОбъект.ПользовательДляОповещения = СтрокаНастроек.ПользовательДляОповещения;
			ЗадачаОбъект.Используется              = ЭтотОбъект.ВРаботе;
			ЗадачаОбъект.Родитель                  = ГруппаЗадач.Ссылка;
						
			Если ЗначениеЗаполнено(СтрокаНастроек.ПользовательДляОповещения) Тогда
				ЗадачаОбъект.СпособОповещения = Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияПользователю;
			Иначе
				ЗаполнитьСпособОповещенияПоПредставлению(СтрокаНастроек, ЗадачаОбъект);
			КонецЕсли;
			
			ЗадачаОбъект.ЗначенияЗаполнения.Очистить();
			ЗадачаОбъект.ПараметрыУсловия.Очистить();
			
			ВидОперации = "";
			
			Если СтрокаНастроек.ТипПредмета = "ЗаказНаряд" Тогда
				ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд;
			ИначеЕсли СтрокаНастроек.ТипПредмета = "ЗаказПокупателя" Тогда
				ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
			КонецЕсли;
			
			ОпределитьПараметрыУсловияОплаты(СтрокаНастроек, ЗадачаОбъект.ПараметрыУсловия);
			
			ДобавитьПараметрЗадачи(ЗадачаОбъект.ЗначенияЗаполнения, "СостояниеЗаказа", СтрокаНастроек.СостояниеЗаказа);
			ДобавитьПараметрУсловия(ЗадачаОбъект.ПараметрыУсловия, "ВидЗаказа", Перечисления.ВидСравненияЗначений.Равно, СтрокаНастроек.ВидЗаказа, СтрокаНастроек.ВидЗаказа);
			ДобавитьПараметрУсловия(ЗадачаОбъект.ПараметрыУсловия, "ВидОперации", Перечисления.ВидСравненияЗначений.Равно, ВидОперации, ВидОперации);
			
			ОпределитьНаименованиеЗадачи(ЗадачаОбъект, СтрокаНастроек);
			ЗадачаОбъект.Записать();
			
			СтрокаНастроек.Модифицированность = Ложь;
			
			СоздатьВспомогательныеЗадачи(ЗадачаОбъект, СтрокаНастроек);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВспомогательныеЗадачи(ЗадачаОбъект, СтрокаНастроек)
	
	Наименование = "";
	СобытиеИдентификатор = "";
	
	// 1. При отмене оплаты проконтролировать и предложить вернуть предыдущее состояние заказа покупателя.

	ДействиеИдентификатор = "ОповеститьОтсутствиеОтгрузкиОплаты";
		
	МассивСобытий = Новый Массив;
	МассивСобытий.Добавить("ЧастичнаяОплатаОтмена");
	МассивСобытий.Добавить("ПолнаяОплатаОтмена");
	
	Отбор = Справочники.ЗадачиАссистентаУправления.НовыйОтборЗадач();
	Отбор.ОсновнаяЗадача = ЗадачаОбъект.Ссылка;
	Отбор.СобытиеИдентификатор.Добавить(МассивСобытий);
	Отбор.ДействиеИдентификатор.Добавить(ДействиеИдентификатор);
	ОтобранныеЗадачи = Справочники.ЗадачиАссистентаУправления.ПолучитьЗадачи(Отбор);
	
	Если ОтобранныеЗадачи.Количество() = 0 Тогда
		ВспомогательнаяЗадача = Справочники.ЗадачиАссистентаУправления.СоздатьЭлемент();
	Иначе
		ВспомогательнаяЗадача = ОтобранныеЗадачи[0].ПолучитьОбъект();
	КонецЕсли;
	
	Если СтрокаНастроек.ПроцентОплаты < 100 Тогда
		Наименование= НСтр("ru='Проверить свойства заказа при отмене частичной оплаты'");
	Иначе
		Наименование= НСтр("ru='Проверить свойства заказа при отмене полной оплаты'");
	КонецЕсли;
	
	ДанныеОсновнойЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаОбъект.Ссылка, "Родитель");
	
	ВспомогательнаяЗадача.Наименование              = Наименование;
	ВспомогательнаяЗадача.ОсновнаяЗадача            = ЗадачаОбъект.Ссылка;
	ВспомогательнаяЗадача.ДействиеИдентификатор     = ДействиеИдентификатор;
	ВспомогательнаяЗадача.Используется              = ЭтотОбъект.ВРаботе;
	ВспомогательнаяЗадача.Родитель                  = ДанныеОсновнойЗадачи.Родитель;
	ВспомогательнаяЗадача.ТипПредмета               = СтрокаНастроек.ТипПредмета;
	ВспомогательнаяЗадача.ПользовательДляОповещения = СтрокаНастроек.ПользовательДляОповещения;
	
	Если ЗначениеЗаполнено(СтрокаНастроек.ПользовательДляОповещения) Тогда
		ВспомогательнаяЗадача.СпособОповещения = Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияПользователю;
	Иначе
		ЗаполнитьСпособОповещенияПоПредставлению(СтрокаНастроек, ВспомогательнаяЗадача);
	КонецЕсли;
	
	ВспомогательнаяЗадача.ЗначенияЗаполнения.Очистить();
	ВспомогательнаяЗадача.ПараметрыУсловия.Очистить();
	ВспомогательнаяЗадача.События.Очистить();
	ОпределитьСобытияЗадачи(ВспомогательнаяЗадача.События, СтрокаНастроек,"ПолнаяОплатаОтмена","ЧастичнаяОплатаОтмена");
	
	ВидОперации = "";
	
	Если СтрокаНастроек.ТипПредмета = "ЗаказНаряд" Тогда
		ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд;
	ИначеЕсли СтрокаНастроек.ТипПредмета = "ЗаказПокупателя" Тогда
		ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
	КонецЕсли;
	
	ДобавитьПараметрЗадачи(ВспомогательнаяЗадача.ЗначенияЗаполнения, "СтатусОплаты", СтрокаНастроек.СтатусОплаты);
	ДобавитьПараметрЗадачи(ВспомогательнаяЗадача.ЗначенияЗаполнения, "СостояниеЗаказа", СтрокаНастроек.СостояниеЗаказа);
	ДобавитьПараметрУсловия(ВспомогательнаяЗадача.ПараметрыУсловия, "ВидЗаказа", Перечисления.ВидСравненияЗначений.Равно, СтрокаНастроек.ВидЗаказа, СтрокаНастроек.ВидЗаказа);
	ДобавитьПараметрУсловия(ВспомогательнаяЗадача.ПараметрыУсловия, "СостояниеЗаказа", Перечисления.ВидСравненияЗначений.МеньшеИлиРавно, СтрокаНастроек.СостояниеЗаказа, СтрокаНастроек.СостояниеЗаказа);
	ДобавитьПараметрУсловия(ВспомогательнаяЗадача.ПараметрыУсловия, "ВидОперации", Перечисления.ВидСравненияЗначений.Равно, ВидОперации, ВидОперации);
	
	ВспомогательнаяЗадача.Записать();
	
	// 2. При изменении состояния заказа проконтролировать и оповестить  о статусе оплаты в новом состоянии заказа.
	СобытиеИдентификатор = "ИзменениеСостоянияЗаказаПокупателя";
	ДействиеИдентификатор = "ОповеститьОтсутствиеОтгрузкиОплаты";
	
	Отбор = Справочники.ЗадачиАссистентаУправления.НовыйОтборЗадач();
	Отбор.ОсновнаяЗадача = ЗадачаОбъект.Ссылка;
	Отбор.СобытиеИдентификатор.Добавить(СобытиеИдентификатор);
	Отбор.ДействиеИдентификатор.Добавить(ДействиеИдентификатор);
	ОтобранныеЗадачи = Справочники.ЗадачиАссистентаУправления.ПолучитьЗадачи(Отбор);
	
	Если ОтобранныеЗадачи.Количество() = 0 Тогда
		ВспомогательнаяЗадача = Справочники.ЗадачиАссистентаУправления.СоздатьЭлемент();
	Иначе
		ВспомогательнаяЗадача = ОтобранныеЗадачи[0].ПолучитьОбъект();
	КонецЕсли;
	
	ВспомогательнаяЗадача.Наименование              = НСтр("ru='Проверить свойства заказа при изменении состояния'");
	ВспомогательнаяЗадача.ОсновнаяЗадача            = ЗадачаОбъект.Ссылка;
	ВспомогательнаяЗадача.ДействиеИдентификатор     = ДействиеИдентификатор;
	ВспомогательнаяЗадача.Используется              = ЭтотОбъект.ВРаботе;
	ВспомогательнаяЗадача.Родитель                  = ДанныеОсновнойЗадачи.Родитель;
	ВспомогательнаяЗадача.ТипПредмета               = СтрокаНастроек.ТипПредмета;
	ВспомогательнаяЗадача.ПользовательДляОповещения = СтрокаНастроек.ПользовательДляОповещения;
	
	Если ЗначениеЗаполнено(СтрокаНастроек.ПользовательДляОповещения) Тогда
		ВспомогательнаяЗадача.СпособОповещения = Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияПользователю;
	Иначе
		ЗаполнитьСпособОповещенияПоПредставлению(СтрокаНастроек, ВспомогательнаяЗадача);
	КонецЕсли;

	ВспомогательнаяЗадача.ЗначенияЗаполнения.Очистить();
	ВспомогательнаяЗадача.ПараметрыУсловия.Очистить();
	ВспомогательнаяЗадача.События.Очистить();
	
	НовоеСобытие = ВспомогательнаяЗадача.События.Добавить();
	НовоеСобытие.СобытиеИдентификатор = СобытиеИдентификатор;
	
	ДобавитьПараметрЗадачи(ВспомогательнаяЗадача.ЗначенияЗаполнения, "СтатусОплаты", СтрокаНастроек.СтатусОплаты);
	ДобавитьПараметрЗадачи(ВспомогательнаяЗадача.ЗначенияЗаполнения, "СостояниеЗаказа", СтрокаНастроек.СостояниеЗаказа);
	ДобавитьПараметрУсловия(ВспомогательнаяЗадача.ПараметрыУсловия, "ВидЗаказа", Перечисления.ВидСравненияЗначений.Равно, СтрокаНастроек.ВидЗаказа, СтрокаНастроек.ВидЗаказа);
	ДобавитьПараметрУсловия(ВспомогательнаяЗадача.ПараметрыУсловия, "СостояниеЗаказа", Перечисления.ВидСравненияЗначений.МеньшеИлиРавно, СтрокаНастроек.СостояниеЗаказа, СтрокаНастроек.СостояниеЗаказа);
	ДобавитьПараметрУсловия(ВспомогательнаяЗадача.ПараметрыУсловия, "ВидОперации", Перечисления.ВидСравненияЗначений.Равно, ВидОперации, ВидОперации);
	
	ВспомогательнаяЗадача.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПараметрЗадачи(Таблица, Параметр, Значение)
		
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Параметр = Параметр;
	НоваяСтрока.Значение = Новый ХранилищеЗначения(Значение);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПараметрУсловия(Таблица, Параметр,ВидСравнения, Значение, ЗначениеПредставление)
		
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Параметр = Параметр;
	НоваяСтрока.Значение = Новый ХранилищеЗначения(Значение);
	НоваяСтрока.ВидСравнения = ВидСравнения;
	НоваяСтрока.ЗначениеПредставление = Новый ХранилищеЗначения(ЗначениеПредставление);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПустыеНастройкиЗадачи()
	
	НовыеНастройки = НастройкиЗадач.Добавить();
	НовыеНастройки.ТипПредмета = "ЗаказПокупателя";
	НовыеНастройки.ВидЗаказа = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыЗаказовПокупателей.Основной");
	НовыеНастройки.СостояниеЗаказа = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СостоянияЗаказовПокупателей.Завершен");
	НовыеНастройки.ПроцентОплаты = 100;		
	НовыеНастройки.СтатусОплаты = Перечисления.СтатусОплаты.Полная;
	НовыеНастройки.Модифицированность = Истина;
	
	ЗаполнитьСпособОповещенияПоЗначению(
		НовыеНастройки,
		НовыеНастройки.ПользовательДляОповещения,
		Перечисления.СпособОповещенияАссистентаУправления.СообщениеКонтекстногоОбсужденияБезОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуЗадач()
	
	Результат = Новый Структура();
	
	Результат.Вставить("ИзмененПризнакВРаботе", ИзмененПризнакВРаботе);
	Результат.Вставить("АвторИзменений", АвторИзменений);
	Результат.Вставить("ГруппаЗадач", ИдентификаторГруппы);
	Результат.Вставить("НужноДобавитьВОбсуждение", НЕ ЕстьЗадачиПользователя);
	
	Закрыть(Результат);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОсновнуюИВспомогательныеЗадачи(ЗадачаОбъект)
	
	Отбор = Справочники.ЗадачиАссистентаУправления.НовыйОтборЗадач();
	Отбор.ОсновнаяЗадача = ЗадачаОбъект.Ссылка;
	ОтобранныеЗадачи = Справочники.ЗадачиАссистентаУправления.ПолучитьЗадачи(Отбор);
	ЗадачаОбъект.Удалить();

	Если ОтобранныеЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВспомогательнаяЗадача Из ОтобранныеЗадачи Цикл
		Если НЕ ЗначениеЗаполнено(ВспомогательнаяЗадача.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		ВспомогательнаяЗадачаОбъект = ВспомогательнаяЗадача.ПолучитьОбъект();
		ВспомогательнаяЗадачаОбъект.Удалить();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
