#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Перем СведенияОДокументе;
	
	Обработки.ПодборПоступление.ПроверитьЗаполнениеПараметров(Параметры, Отказ);
	
	ЗаполнитьДанныеОбъекта();
	ЗаполнитьСведенияОДокументе(СведенияОДокументе);
	
	ПодключитьПолнотекстовыйПоискПриОткрытииПодбора();
	УстановитьПараметрыДинамическихСписков();
	
	КешНастройкиПодбора = Новый Структура;
	КешНастройкиПодбора.Вставить("ВыводитьСоветВернутьсяКНоменклатуре", УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ВыводитьСоветВернутьсяКНоменклатуре"));
	КешНастройкиПодбора.Вставить("ВыводитьСоветИспользоватьПредыдущийПодбор", УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ВыводитьСоветИспользоватьПредыдущийПодбор"));
	КешНастройкиПодбора.Вставить("ВыводитьСоветУслугиВПриходныхДокументах", УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ВыводитьСоветУслугиВПриходныхДокументах"));
	КешНастройкиПодбора.Вставить("ЗапрашиватьКоличество", УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ЗапрашиватьКоличество"));
	КешНастройкиПодбора.Вставить("ЗапрашиватьЦену", УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ЗапрашиватьЦену"));
	КешНастройкиПодбора.Вставить("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
	КешНастройкиПодбора.Вставить("ВидЦенЦенаВключаетНДС", ?(ЗначениеЗаполнено(Объект.ВидЦенКонтрагента), Объект.ВидЦенКонтрагента.ЦенаВключаетНДС, Объект.СуммаВключаетНДС));
	КешНастройкиПодбора.Вставить("СведенияОДокументе", СведенияОДокументе);
	КешНастройкиПодбора.Вставить("ПоискВыполненПриОкончанииРедактирования", Ложь);
	КешНастройкиПодбора.Вставить("СтруктурнаяЕдиницаПоУмолчанию", СведенияОДокументе.СтруктурнаяЕдиница);
	КешНастройкиПодбора.Вставить("ОтборПоСтруктурнойЕдинице", Неопределено);
	
	ВзаимноИсключаемыеНастройкиПП = Новый Структура;
	ВзаимноИсключаемыеНастройкиПП.Вставить("ФормаПолнотекстовыйПоискЛюбыеОкончания",	"ФормаПолнотекстовыйПоискОпечатки");
	ВзаимноИсключаемыеНастройкиПП.Вставить("ФормаПолнотекстовыйПоискОпечатки", 		"ФормаПолнотекстовыйПоискЛюбыеОкончания");
	КешНастройкиПодбора.Вставить("ВзаимноИсключаемыеНастройкиПП", ВзаимноИсключаемыеНастройкиПП);
	
	ОтборИерархия = КатегорииНоменклатурыСервер.ПолучитьНастройкуВидОтбораНоменклатуры();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПолнотекстовыйПоискЛюбыеОкончания", "Пометка", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтменитьОтборПоСтруктурнойЕдинице", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокИерархияНоменклатуры", "Видимость", ОтборИерархия = Перечисления.ВидыОтборовНоменклатуры.ГруппыНоменклатуры);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокИерархияНоменклатурныхГрупп", "Видимость", ОтборИерархия = Перечисления.ВидыОтборовНоменклатуры.КатегорииНоменклатуры);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПолнотекстовыйПоиск", "Видимость", ИспользоватьПолнотекстовыйПоиск);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаАвтоСбросОтбораСписков", "Пометка", Истина);
	
	КешНастройкиПодбора.Вставить("РазрешеноИзменятьЦену", УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов());
		
	ЭтоВозврат = Параметры.Свойство("ЭтоВозврат") 
		И Параметры.ЭтоВозврат;
	
	ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = ИнтеграцияЕГАИСУНФВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС();
	
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события ПриСозданииНаСервере
//
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ВыводитьСоветИспользоватьПредыдущийПодбор", 1.5, Истина); // Из-за особенности поведения платформы делаем через обработчик
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
// Процедура - обработчик команды отмены отбора по структурной единице.
//
Процедура ДекорацияОтменитьОтборПоСтруктурнойЕдиницеНажатие(Элемент)
	
	КешНастройкиПодбора.ОтборПоСтруктурнойЕдинице = Неопределено;
	
	УстановитьЗначениеПараметраСтруктурнойЕдиницыНаСервере(Неопределено);
	
	ЗаголовокДекорации = Неопределено;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтменитьОтборПоСтруктурнойЕдинице", "Заголовок", ЗаголовокДекорации);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСкладскиеОстатки", "Видимость", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтменитьОтборПоСтруктурнойЕдинице", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИзменитьВидимостьСкладскихОстатков", "Доступность", Истина);
	
КонецПроцедуры // ДекорацияОтменитьОтборПоСтруктурнойЕдиницеНажатие()

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита ТекстПоиска
//
Процедура ТекстПоискаПриИзменении(Элемент)
	
	Если ПустаяСтрока(ТекстПоиска) Тогда
		
		СброситьОтборПоДинамическомуСписку();
		
	Иначе
		
		ВыполнитьПоискИУстановитьОтбор();
		КешНастройкиПодбора.ПоискВыполненПриОкончанииРедактирования = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ТекстПоискаПриИзменении()

&НаКлиенте
// Процедура - обработчик события Очистка реквизита ТекстПоиска
//
Процедура ТекстПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СброситьОтборПоДинамическомуСписку()
	
КонецПроцедуры // ТекстПоискаОчистка()

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита НоменклатураИмеетсяВНаличии
//
Процедура НоменклатураИмеетсяВНаличииПриИзменении(Элемент)
	
	ВключитьВыключитьОтборНоменклатурыВНаличии();
	
КонецПроцедуры // НоменклатураИмеетсяВНаличииПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКорзинаЦенаОстатокРезервХарактеристика

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита Номенклатура табличного поля Корзина
//
Процедура КорзинаЦенаОстатокРезервХарактеристикаНоменклатураПриИзменении(Элемент)
	
	СтрокаКорзины = Элементы.КорзинаЦенаОстатокРезервХарактеристика.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", 		Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", 		СтрокаКорзины.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 		СтрокаКорзины.Характеристика);
	СтруктураДанные.Вставить("НалогообложениеНДС",	Объект.НалогообложениеНДС);
	
	Если ЗначениеЗаполнено(Объект.ВидЦенКонтрагента) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки",	Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС",Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦенКонтрагента",Объект.ВидЦенКонтрагента);
		СтруктураДанные.Вставить("Коэффициент",		1);
		
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаКорзины.Количество 		= 1;
	СтрокаКорзины.ЕдиницаИзмерения	= СтруктураДанные.ЕдиницаИзмерения;
	СтрокаКорзины.Цена				= СтруктураДанные.Цена;
	СтрокаКорзины.СтавкаНДС 		= ПолучитьСтавкуНДС(СтруктураДанные.НоменклатураСтавкаНДС);
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаКорзины);
	
КонецПроцедуры // КорзинаНоменклатураПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита Характеристика табличного поля Корзина
//
Процедура КорзинаЦенаОстатокРезервХарактеристикаХарактеристикаПриИзменении(Элемент)
	
	СтрокаКорзины = Элементы.КорзинаЦенаОстатокРезервХарактеристика.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", 		Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", 		СтрокаКорзины.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 		СтрокаКорзины.Характеристика);
	СтруктураДанные.Вставить("НалогообложениеНДС",	Объект.НалогообложениеНДС);
	
	Если ЗначениеЗаполнено(Объект.ВидЦенКонтрагента) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки",	Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС",Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦенКонтрагента",Объект.ВидЦенКонтрагента);
		СтруктураДанные.Вставить("Коэффициент",		1);
		
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаКорзины.Количество 		= 1;
	СтрокаКорзины.ЕдиницаИзмерения	= СтруктураДанные.ЕдиницаИзмерения;
	СтрокаКорзины.Цена				= СтруктураДанные.Цена;
	СтрокаКорзины.СтавкаНДС 		= ПолучитьСтавкуНДС(СтруктураДанные.НоменклатураСтавкаНДС);
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаКорзины);
	
КонецПроцедуры // КорзинаХарактеристикаПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита Количество табличного поля Корзина
//
Процедура КорзинаЦенаОстатокРезервХарактеристикаКоличествоПриИзменении(Элемент)
	
	СтрокаКорзины = Элементы.КорзинаЦенаОстатокРезервХарактеристика.ТекущиеДанные;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаКорзины);
	
КонецПроцедуры // КорзинаКоличествоПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита Количество табличного поля Корзина
//
Процедура КорзинаЦенаОстатокРезервХарактеристикаРезервПриИзменении(Элемент)
	
	СтрокаКорзины = Элементы.КорзинаЦенаОстатокРезервХарактеристика.ТекущиеДанные;
	
	Если СтрокаКорзины.Резерв > СтрокаКорзины.Количество Тогда
		
		СтрокаКорзины.Количество = СтрокаКорзины.Резерв;
		
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаКорзины);
	
КонецПроцедуры // КорзинаРезервПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита Цена табличного поля Корзина
//
Процедура КорзинаЦенаОстатокРезервХарактеристикаЦенаПриИзменении(Элемент)
	
	СтрокаКорзины = Элементы.КорзинаЦенаОстатокРезервХарактеристика.ТекущиеДанные;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаКорзины);
	
КонецПроцедуры // КорзинаЦенаПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита Сумма табличного поля Корзина
//
Процедура КорзинаЦенаОстатокРезервХарактеристикаСуммаПриИзменении(Элемент)
	
	СтрокаКорзины = Элементы.КорзинаЦенаОстатокРезервХарактеристика.ТекущиеДанные;
	
	ПараметрыРасчета = Новый Структура("РассчитатьЦену", Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаКорзины, ПараметрыРасчета);
	
КонецПроцедуры // КорзинаСуммаПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита СтавкаНДС табличного поля Корзина
//
Процедура КорзинаЦенаОстатокРезервХарактеристикаСтавкаНДСПриИзменении(Элемент)
	
	СтрокаКорзины = Элементы.КорзинаЦенаОстатокРезервХарактеристика.ТекущиеДанные;
	
	РассчитатьСуммуНДС(СтрокаКорзины);
	
	СтрокаКорзины.Всего = СтрокаКорзины.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаКорзины.СуммаНДС);
	
КонецПроцедуры // КорзинаСтавкаНДСПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита СтавкаНДС табличного поля Корзина
//
Процедура КорзинаЦенаОстатокРезервХарактеристикаСуммаНДСПриИзменении(Элемент)
	
	СтрокаКорзины = Элементы.КорзинаЦенаОстатокРезервХарактеристика.ТекущиеДанные;
	
	СтрокаКорзины.Всего = СтрокаКорзины.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаКорзины.СуммаНДС);
	
КонецПроцедуры // КорзинаСуммаНДСПриИзменении()

&НаКлиенте
// Процедура - обработчик события ОбработкаВыбора поля ввода ЕдиницаИзмерения табличного поля Корзина
//
Процедура КорзинаЦенаОстатокРезервХарактеристикаЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаКорзины = Элементы.КорзинаЦенаОстатокРезервХарактеристика.ТекущиеДанные;
	
	Если СтрокаКорзины.ЕдиницаИзмерения = ВыбранноеЗначение 
		ИЛИ СтрокаКорзины.Цена = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаКорзины.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		
		ТекущийКоэффициент = 1;
		
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		
		Коэффициент = 1;
		
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаКорзины.ЕдиницаИзмерения, ВыбранноеЗначение);
		
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаКорзины.ЕдиницаИзмерения);
		
	ИначеЕсли Коэффициент = 0 Тогда
		
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
		
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
		
	КонецЕсли;
	
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		
		СтрокаКорзины.Цена = СтрокаКорзины.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаКорзины);
	
КонецПроцедуры // КорзинаЦенаОстатокРезервХарактеристикаЕдиницаИзмеренияОбработкаВыбора()

&НаКлиенте
Процедура КорзинаЦенаОстатокРезервХарактеристикаПроцентСкидкиНаценкиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.КорзинаЦенаОстатокРезервХарактеристика.ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки", Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
КонецПроцедуры

&НаКлиенте
Процедура КорзинаЦенаОстатокРезервХарактеристикаСуммаСкидкиНаценкиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.КорзинаЦенаОстатокРезервХарактеристика.ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьПроцентСкидки", Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоставНабора

&НаКлиенте
// Процедура - обработчик события Выбор реквизита СоставНабора
//
Процедура СоставНабораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьНоменклатуруВКорзину();
	
КонецПроцедуры // СоставНабораВыбор()

&НаКлиенте
// Процедура - обработчик события ОкончаниеПеретаскивания реквизита СписокХарактеристик
//
Процедура СоставНабораОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьНоменклатуруВКорзину();
	
КонецПроцедуры // СоставНабораОкончаниеПеретаскивания()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокЗапасы

&НаКлиенте
// Процедура - обработчик события Выбор реквизита СписокЗапасы
//
Процедура СписокЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеТекущейСтроки = Элементы.СписокЗапасы.ТекущиеДанные;
	Если НЕ ДанныеТекущейСтроки.ЭтоУслуга 
		И ДанныеТекущейСтроки.ИспользоватьХарактеристики Тогда
		
		ПерейтиКСпискуХарактеристикНоменклатуры(ДанныеТекущейСтроки.НоменклатураСсылка);
		
	Иначе
		
		ДобавитьНоменклатуруВКорзину();
		Если ДанныеТекущейСтроки.ИспользоватьХарактеристики Тогда
			
			ВыводитьСоветУслугиВПриходныхДокументах(); // Актуально только в приходных документах
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СписокЗапасыВыбор()

&НаКлиенте
// Процедура - обработчик события ПриАктивизацииСтроки реквизита СписокЗапасы
//
Процедура СписокЗапасыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("УправлениеДоступностьюНавигацииСписковНоменклатураХарактеристика", 0.2, Истина);
	
КонецПроцедуры // СписокЗапасыПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события ОкончаниеПеретаскивания реквизита СписокЗапасы
//
Процедура СписокЗапасыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьНоменклатуруВКорзину();
	
КонецПроцедуры // СписокЗапасыОкончаниеПеретаскивания()

&НаСервереБезКонтекста
Процедура СписокЗапасыПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	СоответствиеСтавокНДС = Настройки.ДополнительныеСвойства.СоответствиеСтавокНДС;
	Для Каждого КлючИЗначение Из Строки Цикл
		
		// Заполняем ставки НДС
		СтрокаСписка =  КлючИЗначение.Значение.Данные;
		СтрокаСписка.СтавкаНДС = СоответствиеСтавокНДС.Получить(СтрокаСписка.ВидСтавкиНДС);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокИерархияНоменклатурныхГрупп

&НаКлиенте
// Процедура - обработчик события ПриАктивизацииСтроки реквизита СписокИерархияНоменклатуры
//
Процедура СписокИерархияНоменклатурныхГруппПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьОтборПоГруппеДинамическихСписков", 0.2, Истина);
	
КонецПроцедуры // СписокИерархияНоменклатурныхГруппПриАктивизацииСтроки()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокИерархияНоменклатуры

&НаКлиенте
// Процедура - обработчик события ПриАктивизацииСтроки реквизита СписокИерархияНоменклатуры
//
Процедура СписокИерархияНоменклатурыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьОтборПоГруппеДинамическихСписков", 0.2, Истина);
	
КонецПроцедуры // СписокИерархияНоменклатурыПриАктивизацииСтроки()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокСкладскиеОстатки

&НаКлиенте
// Процедура - обработчик события ПриАктивизацииСтроки реквизита СписокСкладскиеОстатки
//
Процедура СписокСкладскиеОстаткиПриАктивизацииСтроки(Элемент)
	
	ДанныеТекущейСтроки = Элементы.СписокСкладскиеОстатки.ТекущиеДанные;
	Если ДанныеТекущейСтроки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеТекущейСтроки.СтруктурнаяЕдиница) Тогда
		
		КешНастройкиПодбора.ОтборПоСтруктурнойЕдинице = ДанныеТекущейСтроки.СтруктурнаяЕдиница;
		
		УстановитьЗначениеПараметраСтруктурнойЕдиницыНаСервере(ДанныеТекущейСтроки.СтруктурнаяЕдиница);
		
		ЗаголовокДекорации = СтрШаблон(НСтр("ru ='Удалить отбор по складу: %1'"), Строка(ДанныеТекущейСтроки.СтруктурнаяЕдиница));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтменитьОтборПоСтруктурнойЕдинице", "Заголовок", ЗаголовокДекорации);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСкладскиеОстатки", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтменитьОтборПоСтруктурнойЕдинице", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИзменитьВидимостьСкладскихОстатков", "Доступность", Ложь);
		
		ИзменитьЗаголовокГруппыОтборов(Истина);

	КонецЕсли;
	
КонецПроцедуры // СписокСкладскиеОстаткиПриАктивизацииСтроки()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокХарактеристик

&НаКлиенте
// Процедура - обработчик события Выбор реквизита СписокХарактеристик
//
Процедура СписокХарактеристикВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьНоменклатуруВКорзину();
	
КонецПроцедуры // СписокХарактеристикВыбор()

&НаКлиенте
// Процедура - обработчик события ОкончаниеПеретаскивания реквизита СписокХарактеристик
//
Процедура СписокХарактеристикОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьНоменклатуруВКорзину();
	
КонецПроцедуры // СписокХарактеристикОкончаниеПеретаскивания()

&НаСервереБезКонтекста
Процедура СписокХарактеристикПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	СоответствиеСтавокНДС = Настройки.ДополнительныеСвойства.СоответствиеСтавокНДС;
	Для Каждого КлючИЗначение Из Строки Цикл
		
		// Заполняем ставки НДС
		СтрокаСписка =  КлючИЗначение.Значение.Данные;
		СтрокаСписка.СтавкаНДС = СоответствиеСтавокНДС.Получить(СтрокаСписка.ВидСтавкиНДС);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриАктивизацииСтроки реквизита СписокХарактеристик
//
Процедура СписокХарактеристикПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("УправлениеДоступностьюНавигацииСписковНоменклатураХарактеристика", 0.2, Истина);
	
КонецПроцедуры // СписокХарактеристикПриАктивизацииСтроки()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура - обработчик команды ВыполнитьПоиск
//
Процедура ВыполнитьПоиск(Команда)
	
	Если НЕ КешНастройкиПодбора.ПоискВыполненПриОкончанииРедактирования Тогда
		
		ВыполнитьПоискИУстановитьОтбор();
		
	Иначе
		
		КешНастройкиПодбора.ПоискВыполненПриОкончанииРедактирования = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьПоиск()

&НаКлиенте
// Процедура - обработчик команды ИзменитьНастройки
//
Процедура ИзменитьНастройки(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьНастройкиПодбора", ЭтотОбъект);
	ОткрытьФорму("Обработка.ПодборПоступление.Форма.Настройка", , ЭтаФорма, Истина, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ИзменитьНастройки()

&НаКлиенте
// Процедура - обработчик команды ПеренестиВДокумент
//
Процедура ПеренестиВДокумент(Команда)
	
	Закрыть(ЗаписатьПодборВХранилище());
	
КонецПроцедуры // ПеренестиВДокумент()

// Процедура - обработчик команды Выбрать
//
&НаКлиенте
Процедура ДобавитьВКорзину(Команда)
	
	ДобавитьНоменклатуруВКорзину();
	
КонецПроцедуры // Выбрать()

&НаКлиенте
// Процедура - обработчик команды ПерейтиКРодителю (контекст. меню списка номенклатуры)
//
Процедура ПерейтиКРодителю(Команда)
	
	ДанныеТекущейСтроки = ПолучитьДанныеТекущейСтрокиСписка();
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		Элементы.СписокИерархияНоменклатуры.ТекущаяСтрока = ДанныеТекущейСтроки.Родитель;
		
	КонецЕсли;
	
КонецПроцедуры // ПерейтиКРодителю()

&НаКлиенте
// Процедура - обработчик команды ПоказатьНоменклатуру (контекст. меню списка характеристик)
//
Процедура ПоказатьНоменклатуру(Команда)
	
	ПерейтиКСпискуНоменклатуры();
	
КонецПроцедуры // ПоказатьНоменклатуру()

&НаКлиенте
// Процедура - обработчик команды ИзменитьВидимостьСкладскихОстатков (меню формы)
//
Процедура ИзменитьВидимостьСкладскихОстатков(Команда)
	
	Элементы.ФормаИзменитьВидимостьСкладскихОстатков.Пометка = НЕ Элементы.ФормаИзменитьВидимостьСкладскихОстатков.Пометка;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСкладскиеОстатки", "Видимость", Элементы.ФормаИзменитьВидимостьСкладскихОстатков.Пометка);
	
КонецПроцедуры // ИзменитьВидимостьСкладскихОстатков()

&НаКлиенте
// Процедура - обработчик команды ИзменитьВидимостьКорзины (меню формы)
//
Процедура ИзменитьВидимостьКорзины(Команда)
	
	Элементы.ФормаИзменитьВидимостьКорзины.Пометка = НЕ Элементы.ФормаИзменитьВидимостьКорзины.Пометка;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КорзинаЦенаОстатокРезервХарактеристика", "Видимость", Элементы.ФормаИзменитьВидимостьКорзины.Пометка);
	
КонецПроцедуры // ИзменитьВидимостьКорзины()

&НаКлиенте
// Процедура - обработчик команды ПереходПолнотекстовыйПоиск
Процедура ПереходПолнотекстовыйПоиск(Команда)
	
	УстановитьТекущийЭлементыФормы(Элементы.ТекстПоиска);
	
КонецПроцедуры // ПереходПолнотекстовыйПоиск()

&НаКлиенте
// Процедура - обработчик команды ПереходИерархия
Процедура ПереходИерархия(Команда)
	
	ИмяЭлемента = ?(ОтборИерархия = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.ГруппыНоменклатуры"), "СписокИерархияНоменклатуры", "СписокИерархияНоменклатурныхГрупп");
	УстановитьТекущийЭлементыФормы(Элементы[ИмяЭлемента]);
	
КонецПроцедуры // ПереходИерархия()

&НаКлиенте
// Процедура - обработчик команды ПереходНоменклатураХарактеристики
//
Процедура ПереходНоменклатураХарактеристики(Команда)
	
	ЭтоНоменклатура = (Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница = Элементы.СтраницаНоменклатура);
	
	УстановитьТекущийЭлементыФормы(?(ЭтоНоменклатура, Элементы.СписокЗапасы, Элементы.СписокХарактеристик));
	
КонецПроцедуры // ПереходНоменклатураХарактеристики()

&НаКлиенте
// Процедура - обработчик команды ПереходКорзина
Процедура ПереходКорзина(Команда)
	
	УстановитьТекущийЭлементыФормы(Элементы.КорзинаЦенаОстатокРезервХарактеристика);
	
КонецПроцедуры // ПереходКорзина()

&НаКлиенте
// Процедура - обработчик команды ОбновлятьЗаголовки
//
Процедура ОбновлятьЗаголовки(Команда)
	
	Элементы.ФормаОбновлятьЗаголовки.Пометка = НЕ Элементы.ФормаОбновлятьЗаголовки.Пометка;
	
	// Если выключили обновление заголовок, вернем заголовки к типовому состоянию...
	Если НЕ Элементы.ФормаОбновлятьЗаголовки.Пометка Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокХарактеристикХарактеристикаСсылка", "Заголовок", НСтр("ru = 'Характеристика'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСкладскиеОстаткиСтруктурнаяЕдиница", "Заголовок", НСтр("ru = 'Склад'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПереходНоменклатураХарактеристики", "Заголовок", НСтр("ru = 'Номенклатура/Характеристики'"));
		
	КонецЕсли;
	
КонецПроцедуры // ОбновлятьЗаголовки()

&НаКлиенте
// Процедура - обработчик команды АвтоСбросТекстаПоиска
//
Процедура АвтоСбросОтбораСписков(Команда)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаАвтоСбросОтбораСписков", "Пометка", НЕ Элементы.ФормаАвтоСбросОтбораСписков.Пометка);
	
КонецПроцедуры // АвтоСбросТекстаПоиска()

&НаКлиенте
// Процедура - обработчик команды РасшифроватьРезерв
//
Процедура РасшифроватьРезерв(Команда)
	
	ДанныеТекущейСтроки = ПолучитьДанныеТекущейСтрокиСписка();
	Если ДанныеТекущейСтроки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыРасшифровки = Новый Структура;
	ПараметрыРасшифровки.Вставить("Организация", 	Объект.Организация);
	ПараметрыРасшифровки.Вставить("Номенклатура",	ДанныеТекущейСтроки.НоменклатураСсылка);
	ПараметрыРасшифровки.Вставить("Характеристика", ДанныеТекущейСтроки.ХарактеристикаСсылка);
	
	
	ОписаниеОповещенияПриЗакрытииПодбора = Новый ОписаниеОповещения("ПослеОткрытияРасшифровкиРезерва", ЭтотОбъект, ПараметрыРасшифровки);
	ОткрытьФорму("Обработка.ПодборПоступление.Форма.РасшифроватьРезерв", ПараметрыРасшифровки, ЭтаФорма, Истина, , ,ОписаниеОповещенияПриЗакрытииПодбора , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // РасшифроватьРезерв()

&НаКлиенте
// Процедура - обработчик команды АналогиНоменклатуры
//
Процедура АналогиНоменклатуры(Команда)
	Перем ТекстСообщения;
	
	Если Элементы.СписокЗапасыКонтекстноеМенюАналогиНоменклатуры.Пометка Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокЗапасы, "НоменклатураСсылка");
		Элементы.СписокЗапасыКонтекстноеМенюАналогиНоменклатуры.Пометка = Ложь;
		
		Если Элементы.ФормаОбновлятьЗаголовки.Пометка Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыНаименование", "Заголовок", НСтр("ru = 'Номенклатура'"));
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеТекущейСтроки = Элементы.СписокЗапасы.ТекущиеДанные;
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		ОтборПоАналогамНоменклатуры(ДанныеТекущейСтроки.НоменклатураСсылка, ТекстСообщения);
		
		Если ПустаяСтрока(ТекстСообщения) Тогда
			
			Элементы.СписокЗапасыКонтекстноеМенюАналогиНоменклатуры.Пометка = Истина;
			
			Если Элементы.ФормаОбновлятьЗаголовки.Пометка Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыНаименование", "Заголовок", НСтр("ru = 'Номенклатура (вкл. Аналоги)'"));
				
			КонецЕсли
			
		Иначе
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "СписокЗапасыНаименование", , );
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // АналогиНоменклатуры()

&НаКлиенте
// Процедура - обработчик команды СведенияОДокументе
//
Процедура СведенияОДокументе(Команда)
	
	ОписаниеОповещенияПриЗакрытииПодбора = Новый ОписаниеОповещения("ПослеЗакрытияФормыСведенияОДокументе", ЭтотОбъект);
	ОткрытьФорму("Обработка.ПодборПоступление.Форма.СведенияОДокументе", КешНастройкиПодбора.СведенияОДокументе, ЭтаФорма, Истина, , ,ОписаниеОповещенияПриЗакрытииПодбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // СведенияОДокументе()

&НаКлиенте
// Процедура - обработчик команды СоставНабора
//
Процедура ПоказатьСоставНабора(Команда)
	
	ДанныеТекущейСтроки = ПолучитьДанныеТекущейСтрокиСписка();
	Если ДанныеТекущейСтроки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ДанныеТекущейСтроки.ЭтоНабор Тогда
		
		ПоказатьПредупреждение(, НСтр("ru ='Данная позиция не является набором.'"), 10);
		Возврат;
		
	КонецЕсли;
	
	ПоказатьСоставНабораНоменклатуры(ДанныеТекущейСтроки);
	
КонецПроцедуры // ПоказатьСоставНабора()

&НаКлиенте
// Процедура - обработчик команды НоменклатураСЦеной
//
Процедура НоменклатураСЦеной(Команда)
	
	Если Элементы.ФормаНоменклатураСЦеной.Пометка Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокЗапасы, "Цена");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокХарактеристик, "Цена");
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаНоменклатураСЦеной", "Пометка", Ложь);
		
	Иначе
		
		МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокЗапасы.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "Цена");
		Если МассивЭлементов.Количество() = 0 Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СписокЗапасы.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "Цена", ВидСравненияКомпоновкиДанных.Заполнено, 0);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(СписокЗапасы.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "Цена", , 0, ВидСравненияКомпоновкиДанных.Заполнено);
			
		КонецЕсли;
		
		МассивЭлементовХарактеристик = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокХарактеристик.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "Цена");
		Если МассивЭлементовХарактеристик.Количество() = 0 Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СписокХарактеристик.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "Цена", ВидСравненияКомпоновкиДанных.Заполнено, 0);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(СписокХарактеристик.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "Цена", , 0, ВидСравненияКомпоновкиДанных.Заполнено);
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаНоменклатураСЦеной", "Пометка", Истина);
		
	КонецЕсли;
	
КонецПроцедуры // НоменклатураСЦеной()

&НаКлиенте
// Процедура - обработчик команды НоменклатураИмеетсяВНаличии
//
Процедура НоменклатураИмеетсяВНаличии(Команда)
	
	НоменклатураИмеетсяВНаличии = НЕ НоменклатураИмеетсяВНаличии;
	
	ВключитьВыключитьОтборНоменклатурыВНаличии();
	
КонецПроцедуры // НоменклатураИмеетсяВНаличии()

&НаКлиенте
// Процедура - обработчик команды ПолнотекстовыйПоискЛюбыеОкончания
//
Процедура ПолнотекстовыйПоискЛюбыеОкончания(Команда)
	
	ИмяНастройки = "ФормаПолнотекстовыйПоискЛюбыеОкончания";
	УправлениеНастройкамиПолнотекстовогоПоискаНаКлиенте(ИмяНастройки);
	
КонецПроцедуры // ПолнотекстовыйПоискЛюбыеОкончания()

&НаКлиенте
// Процедура - обработчик команды ПолнотекстовыйПоискОпечатки
//
Процедура ПолнотекстовыйПоискОпечатки(Команда)
	
	ИмяНастройки = "ФормаПолнотекстовыйПоискОпечатки";
	УправлениеНастройкамиПолнотекстовогоПоискаНаКлиенте(ИмяНастройки);
	
КонецПроцедуры // ПолнотекстовыйПоискОпечатки()

&НаКлиенте
// Процедура - обработчик команды НавигацияСписковНоменклатураХарактеристики
//
Процедура НавигацияСписковНоменклатураХарактеристики(Команда)
	
	Если Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница = Элементы.СтраницаНоменклатура Тогда
		
		ДанныеТекущейСтроки = Элементы.СписокЗапасы.ТекущиеДанные;
		Если ДанныеТекущейСтроки.ИспользоватьХарактеристики Тогда
			
			ПерейтиКСпискуХарактеристикНоменклатуры(ДанныеТекущейСтроки.НоменклатураСсылка);
			
		КонецЕсли;
		
	Иначе
		
		ПерейтиКСпискуНоменклатуры();
		
	КонецЕсли;
	
КонецПроцедуры // НавигацияСписковНоменклатураХарактеристики()

&НаКлиенте
Процедура ОтборИерархияПриИзменении(Элемент)
	
	ЭтоИерархияНоменклатуры = (ОтборИерархия = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.ГруппыНоменклатуры"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокИерархияНоменклатуры", "Видимость", ЭтоИерархияНоменклатуры);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокИерархияНоменклатурныхГрупп", "Видимость", НЕ ЭтоИерархияНоменклатуры);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолнотекстовыйПоиск

&НаСервереБезКонтекста
// Функция заполняет массив ссылок результата поиска или возвращает описание ошибки
//
//
Функция ПолнотекстовыйПоискНаСервереБезКонтекста(СтрокаПоиска, РезультатПоиска)
	
	ОписаниеОшибки = "";
	РезультатПоиска = ПодборНоменклатурыВДокументахПереопределяемый.ПоискТоваров(СтрокаПоиска, ОписаниеОшибки);
	
	Возврат ОписаниеОшибки;
	
КонецФункции // ПолнотекстовыйПоискНаСервереБезКонтекста()

&НаКлиенте
// Функция добавляет в строку ПП поиска служебные символы в зависимости от включенных опций
//
Функция СформироватьУниверсальнуюСтрокуПоиска(ТекстПоиска)
	
	Возврат ?(Элементы.ФормаПолнотекстовыйПоискОпечатки.Пометка, "#", "") + ТекстПоиска + ?(Элементы.ФормаПолнотекстовыйПоискЛюбыеОкончания.Пометка, "*", "");
	
КонецФункции // СформироватьУниверсальнуюСтрокуПоиска()

&НаКлиенте
// Процедура устанавливает отбор по ссылкам полученными полнотекстовым поиском
//
Процедура ПолнотекстовыйПоискНаКлиенте()
	
	Если НЕ ПустаяСтрока(ТекстПоиска) Тогда
		
		РезультатПоиска = Неопределено;
		
		УниверсальнаяСтрокаПоиска = СформироватьУниверсальнуюСтрокуПоиска(ТекстПоиска);
		ОписаниеОшибки = ПолнотекстовыйПоискНаСервереБезКонтекста(УниверсальнаяСтрокаПоиска, РезультатПоиска);
		
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			
			Если Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница = Элементы.СтраницаНоменклатура Тогда
				
				Использование = РезультатПоиска.Номенклатура.Количество() > 0;
				МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокЗапасы.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "НоменклатураСсылка");
				Если МассивЭлементов.Количество() = 0 Тогда
					
					ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СписокЗапасы.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "НоменклатураСсылка", ВидСравненияКомпоновкиДанных.ВСписке, РезультатПоиска.Номенклатура, , Использование);
					
				Иначе
					
					ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(СписокЗапасы.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "НоменклатураСсылка", , РезультатПоиска.Номенклатура, ВидСравненияКомпоновкиДанных.ВСписке, Использование);
					
				КонецЕсли;
				
				ЭтаФорма.ТекущийЭлемент = Элементы.СписокЗапасы;
				
			Иначе
				
				Использование = РезультатПоиска.ХарактеристикиНоменклатуры.Количество() > 0;
				МассивЭлементовХарактеристик = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокХарактеристик.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "ХарактеристикаСсылка");
				Если МассивЭлементовХарактеристик.Количество() = 0 Тогда
					
					ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СписокХарактеристик.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "ХарактеристикаСсылка", ВидСравненияКомпоновкиДанных.ВСписке, РезультатПоиска.ХарактеристикиНоменклатуры, , Использование);
					
				Иначе
					
					ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(СписокХарактеристик.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "ХарактеристикаСсылка", , РезультатПоиска.ХарактеристикиНоменклатуры, ВидСравненияКомпоновкиДанных.ВСписке, Использование);
					
				КонецЕсли;
				
				ЭтаФорма.ТекущийЭлемент = Элементы.СписокХарактеристик;
				
			КонецЕсли;
			
		Иначе
			
			ПоказатьПредупреждение(Неопределено, ОписаниеОшибки, 5, "Поиск...");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПолнотекстовыйПоискНаКлиенте()

&НаКлиенте
// Процедура устанавливает отбор по ссылкам полученными контекстным поиском
//
Процедура КонтекстныйПоискНаКлиенте()
	
	ПредставлениеГруппыПолей = "Контекстный поиск";
	
	Если ПустаяСтрока(ТекстПоиска) Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокЗапасы, "НоменклатураСсылка", ПредставлениеГруппыПолей);
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокХарактеристик, "ХарактеристикаСсылка", ПредставлениеГруппыПолей);
		
	Иначе
		
		СтруктураМассивов = ПодборНоменклатурыВДокументахВызовСервера.МассивыОтборовНоменклатурыИХарактеристик(ТекстПоиска);
		
		Если Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница = Элементы.СтраницаНоменклатура Тогда
			
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокХарактеристик, "ХарактеристикаСсылка", ПредставлениеГруппыПолей);
			
			МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокЗапасы.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, , ПредставлениеГруппыПолей);
			Если МассивЭлементов.Количество() = 0 Тогда
				
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СписокЗапасы.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "НоменклатураСсылка", ВидСравненияКомпоновкиДанных.ВСписке, СтруктураМассивов.Номенклатура, ПредставлениеГруппыПолей, Истина);
				
			Иначе
				
				ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(СписокЗапасы.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "НоменклатураСсылка", ПредставлениеГруппыПолей, СтруктураМассивов.Номенклатура, ВидСравненияКомпоновкиДанных.ВСписке, Истина);
				
			КонецЕсли;
			
			ЭтаФорма.ТекущийЭлемент = Элементы.СписокЗапасы;
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокЗапасы, "НоменклатураСсылка", ПредставлениеГруппыПолей);
			
			МассивЭлементовХарактеристик = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокХарактеристик.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "ХарактеристикаСсылка");
			Если МассивЭлементовХарактеристик.Количество() = 0 Тогда
				
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СписокХарактеристик.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "ХарактеристикаСсылка", ВидСравненияКомпоновкиДанных.ВСписке, СтруктураМассивов.ХарактеристикиНоменклатуры, ПредставлениеГруппыПолей, Истина);
				
			Иначе
				
				ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(СписокХарактеристик.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "ХарактеристикаСсылка", ПредставлениеГруппыПолей, СтруктураМассивов.ХарактеристикиНоменклатуры, ВидСравненияКомпоновкиДанных.ВСписке, Истина);
				
			КонецЕсли;
			
			ЭтаФорма.ТекущийЭлемент = Элементы.СписокХарактеристик;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // КонтекстныйПоискНаКлиенте()

&НаКлиенте
// Процедура инициализирует выполнение полнотекстового поиска и установку отбора
// 
Процедура ВыполнитьПоискИУстановитьОтбор()
	
	Если ИспользоватьПолнотекстовыйПоиск Тогда
		
		ПолнотекстовыйПоискНаКлиенте();
		
	Иначе
		
		КонтекстныйПоискНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьПоискИУстановитьОтбор()

&НаКлиенте
// Процедура сбрасывает отбор динамических списков
//
Процедура СброситьОтборПоДинамическомуСписку()
	
	ТекстПоиска = "";
	Если ИспользоватьПолнотекстовыйПоиск Тогда
		
		УправлениеНебольшойФирмойКлиент.УдалитьЭлементОтбораСписка(СписокЗапасы, "НоменклатураСсылка");
		УправлениеНебольшойФирмойКлиент.УдалитьЭлементОтбораСписка(СписокХарактеристик, "ХарактеристикаСсылка");
		
	Иначе
		
		КонтекстныйПоискНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры //СброситьОтборПоДинамическомуСписку()

&НаКлиенте
// Процедура управляет переключением опций ПП и их зависимостью
//
Процедура УправлениеНастройкамиПолнотекстовогоПоискаНаКлиенте(ИмяНастройки)
	
	Элементы[ИмяНастройки].Пометка = НЕ Элементы[ИмяНастройки].Пометка;
	
	Если Элементы[ИмяНастройки].Пометка Тогда
		
		ВзаимноИсключаемыеНастройкиПП = КешНастройкиПодбора.ВзаимноИсключаемыеНастройкиПП;
		Элементы[ВзаимноИсключаемыеНастройкиПП[ИмяНастройки]].Пометка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ПереключитьВариантПолнотекстовогоПоискаНаКлиенте()

&НаСервере
// Процедура устанавливает подсказку ввода для элемента формы ПоискТекста
//
Процедура УстановитьПодсказкуВводаСтрокиПоискаНаСервере()
	
	ПолнотекстовыйПоискНастроенЧастично = (ИспользоватьПолнотекстовыйПоиск И НЕ АктуальностьИндексаППД);
	ПодсказкаВвода = ?(ПолнотекстовыйПоискНастроенЧастично, НСтр("ru = 'Необходимо обновить индекс полнотекстового поиска...'"), НСтр("ru = '(ALT+F3) Введите текст поиска...'"));
	Элементы.ТекстПоиска.ПодсказкаВвода = ПодсказкаВвода;
	
КонецПроцедуры // УстановитьПодсказкуВводаСтрокиПоискаНаСервере()

&НаСервере
// Процедура подключает полнотекстовый поиск и устанавливает свойства реквизитов формы
//
Процедура ПодключитьПолнотекстовыйПоискПриОткрытииПодбора()
	
	ИспользоватьПолнотекстовыйПоиск = ПолучитьФункциональнуюОпцию("ИспользоватьПолнотекстовыйПоиск") И НЕ РаботаВМоделиСервиса.РазделениеВключено();
	Если ИспользоватьПолнотекстовыйПоиск Тогда
		
		АктуальностьИндексаППД = ПолнотекстовыйПоиск.ИндексАктуален();
		
		Если НЕ АктуальностьИндексаППД Тогда
			
			Если ОбщегоНазначения.РазделениеВключено()
				И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
				
				// в разделенной ИБ считаем актуальным индекс в пределах 2 дней
				АктуальностьИндексаППД = ПолнотекстовыйПоиск.ДатаАктуальности() >= (ТекущаяДатаСеанса()-(2*24*60*60));
				
			Иначе
				
				// в неразделенной ИБ считаем актуальным индекс в пределах дня
				АктуальностьИндексаППД = ПолнотекстовыйПоиск.ДатаАктуальности() >= (ТекущаяДатаСеанса() - (1*24*60*60));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПодсказкуВводаСтрокиПоискаНаСервере();
	
КонецПроцедуры // ПодключитьПолнотекстовыйПоискПриОткрытииПодбора()

#КонецОбласти

#Область ДобавлениеТовараВКорзину

&НаКлиенте
// Функция возвращает Ставку НДС в зависимости от значения параметра НалогообложениеНДС
//
Функция ПолучитьСтавкуНДС(СтавкаНДС)
	
	Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
		
		Если ЗначениеЗаполнено(СтавкаНДС) Тогда
			
			Возврат СтавкаНДС;
			
		Иначе
			
			Возврат ПодборНоменклатурыВДокументахВызовСервераПовтИсп.ПолучитьСтавкуНДСОрганизации(Объект.Организация, Объект.ПериодЦен);
		
		КонецЕсли;
		
	Иначе
		
		Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
			
			Возврат УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			
		Иначе
			
			Возврат УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПолучитьСтавкуНДС()

&НаКлиенте
// Функция редактирует цену для корзины подбора в зависимости от значений СуммаВключаетНДС документа и вида цен
//
//
Функция ВычислитьЦенуНоменклатуры(СтавкаНДС, Цена)
	
	ВидЦенЦенаВключаетНДС = КешНастройкиПодбора.ВидЦенЦенаВключаетНДС;
	
	Если Объект.СуммаВключаетНДС = ВидЦенЦенаВключаетНДС Тогда
		
		Возврат Цена;
		
	ИначеЕсли Объект.СуммаВключаетНДС > ВидЦенЦенаВключаетНДС Тогда
		
		ЗначениеСтавкиНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДС);
		Возврат Цена * (100 + ЗначениеСтавкиНДС) / 100;
		
	Иначе
		
		ЗначениеСтавкиНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДС);
		Возврат Цена * 100 / (100 + ЗначениеСтавкиНДС);
		
	КонецЕсли;
	
КонецФункции // ВычислитьЦенуНоменклатуры()

&НаКлиенте
// Рассчитывается сумма НДС в строке табличной части.
//
Процедура РассчитатьСуммуНДС(СтрокаКорзины)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаКорзины.СтавкаНДС);
	
	СтрокаКорзины.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									СтрокаКорзины.Сумма - (СтрокаКорзины.Сумма) / ((СтавкаНДС + 100) / 100),
									СтрокаКорзины.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // РассчитатьСуммуНДС()

&НаКлиенте
// Процедура рассчитывает сумму в строке табличной части.
//
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаКорзины, ПараметрыРасчета = Неопределено)
	
	Если ПараметрыРасчета=Неопределено Тогда
		ПараметрыРасчета = Новый Структура();
	КонецЕсли;	
	ПараметрыРасчета.Вставить("СуммаВключаетНДС",Объект.СуммаВключаетНДС);
	ТабличныеЧастиУНФКлиент.РассчитатьСуммыВСтрокеТЧ(СтрокаКорзины, ПараметрыРасчета);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

&НаКлиенте
// Функция возвращает текущие данные строки элемента формы табличное поле
//
Функция ПолучитьДанныеТекущейСтрокиСписка(СкладскиеОстатки = Ложь)
	
	Если Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница = Элементы.СтраницаНоменклатура Тогда
		
		ДанныеТекущейСтроки = Элементы.СписокЗапасы.ТекущиеДанные
		
	ИначеЕсли Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница = Элементы.СтраницаХарактеристики Тогда
		
		ДанныеТекущейСтроки = Элементы.СписокХарактеристик.ТекущиеДанные;
		
	ИначеЕсли Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница = Элементы.СтраницаСоставНабора Тогда
		
		Если СкладскиеОстатки = Истина Тогда
			
			ДанныеТекущейСтроки = Новый Структура;
			ДанныеТекущейСтроки.Вставить("НоменклатураСсылка", Элементы.СоставНабора.ТекущиеДанные.ЭлементНабораНоменклатура);
			ДанныеТекущейСтроки.Вставить("ХарактеристикаСсылка", Элементы.СоставНабора.ТекущиеДанные.ЭлементНабораХарактеристика);
			
		Иначе
			
			ДанныеТекущейСтроки = Элементы.СоставНабора.ТекущиеДанные;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеТекущейСтроки;
	
КонецФункции // ПолучитьДанныеТекущейСтрокиСписка()

&НаКлиенте
// Функция ищет строки в корзине подбора с казанной номенклатурой
// 	используется перед добавление номенклатуры в корзину.
//
// Возвращает:
//		- Неопределено, если номенклатура не найдена;
//		- Строку корзины, если номенклатура найдена;
//
Функция НайтиНоменклатуруВКорзине(ДанныеТекущейСтроки, СтруктурнаяЕдиницаКорзинки)
	
	СтруктураОтбора = Новый Структура("Номенклатура, Характеристика", ДанныеТекущейСтроки.НоменклатураСсылка, ДанныеТекущейСтроки.ХарактеристикаСсылка);
	
	Если КешНастройкиПодбора.СведенияОДокументе.СтруктурнаяЕдиницаВТабличнойЧасти = Истина Тогда
		
		СтруктураОтбора.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиницаКорзинки);
		
	КонецЕсли;
	
	НайденныеСтроки = Объект.КорзинаЦенаОстатокРезервХарактеристика.НайтиСтроки(СтруктураОтбора);
	
	Возврат ?(НайденныеСтроки.Количество() = 0, Неопределено, НайденныеСтроки[0]);
	
КонецФункции // НайтиНоменклатуруВКорзине()

&НаКлиенте
// Процедура добавления номенклатуры в корзину подбора
//
Процедура ДобавитьНоменклатуруВКорзину(СтратегияЗаполненияСтруктурнойЕдиницы = "Общая")
	
	ДанныеТекущейСтроки = ПолучитьДанныеТекущейСтрокиСписка();
	Если ДанныеТекущейСтроки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеСтрокиКорзины = Новый Структура;
	
	СтруктурнаяЕдиницаКорзинки = ПодобратьСтруктурнуюЕдиницуНоменклатуры(ДанныеТекущейСтроки, СтратегияЗаполненияСтруктурнойЕдиницы);
	
	НайденнаяСтрока = НайтиНоменклатуруВКорзине(ДанныеТекущейСтроки, СтруктурнаяЕдиницаКорзинки);
	ДанныеСтрокиКорзины.Вставить("СтрокаКорзины", ?(НайденнаяСтрока <> Неопределено, НайденнаяСтрока.ПолучитьИдентификатор(), НайденнаяСтрока));
	ДанныеСтрокиКорзины.Вставить("Номенклатура", ДанныеТекущейСтроки.НоменклатураСсылка);
	ДанныеСтрокиКорзины.Вставить("Характеристика", ДанныеТекущейСтроки.ХарактеристикаСсылка);
	ДанныеСтрокиКорзины.Вставить("ЭтоНабор", ДанныеТекущейСтроки.ЭтоНабор);
	ДанныеСтрокиКорзины.Вставить("ЕдиницаИзмерения", ДанныеТекущейСтроки.ЕдиницаИзмерения);
	ДанныеСтрокиКорзины.Вставить("СтавкаНДС", ПолучитьСтавкуНДС(ДанныеТекущейСтроки.СтавкаНДС));
	ДанныеСтрокиКорзины.Вставить("Свободно", ДанныеТекущейСтроки.Свободно);
	ДанныеСтрокиКорзины.Вставить("СтранаПроисхождения", ДанныеТекущейСтроки.СтранаПроисхождения);
	ДанныеСтрокиКорзины.Вставить("Маркируемый", ?(ИспользуетсяРегистрацияРозничныхПродажВЕГАИС, ДанныеТекущейСтроки.Маркируемый, Ложь));
	ДанныеСтрокиКорзины.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиницаКорзинки);
	
	Если НайденнаяСтрока <> Неопределено 
		И ЗначениеЗаполнено(НайденнаяСтрока.Цена) Тогда
		
		ДанныеСтрокиКорзины.Вставить("Цена", НайденнаяСтрока.Цена);
		
	Иначе
		
		ДанныеСтрокиКорзины.Вставить("Цена", ДанныеТекущейСтроки.Цена);
		
	КонецЕсли;
	
	Если КешНастройкиПодбора.ЗапрашиватьКоличество
		ИЛИ КешНастройкиПодбора.ЗапрашиватьЦену Тогда
		
		ДанныеСтрокиКорзины.Вставить("КешНастройкиПодбора",	КешНастройкиПодбора);
		ДанныеСтрокиКорзины.Вставить("Количество",			1);
		ДанныеСтрокиКорзины.Вставить("ЕдиницаИзмерения", 	ДанныеСтрокиКорзины.ЕдиницаИзмерения);
		ДанныеСтрокиКорзины.Вставить("Цена",				ДанныеСтрокиКорзины.Цена);
		
		ОписаниеОповещенияПриЗакрытииПодбора = Новый ОписаниеОповещения("ПослеВыбораКоличестваИЦены", ЭтотОбъект, ДанныеСтрокиКорзины);
		ОткрытьФорму("Обработка.ПодборПоступление.Форма.КоличествоИЦена", ДанныеСтрокиКорзины, ЭтаФорма, Истина, , ,ОписаниеОповещенияПриЗакрытииПодбора , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		Если ДанныеСтрокиКорзины.СтрокаКорзины = Неопределено Тогда
			
			СтрокаКорзины = Объект.КорзинаЦенаОстатокРезервХарактеристика.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКорзины, ДанныеСтрокиКорзины);
			СтрокаКорзины.Цена = ВычислитьЦенуНоменклатуры(СтрокаКорзины.СтавкаНДС, ДанныеСтрокиКорзины.Цена);
			
		Иначе
			
			СтрокаКорзины = НайденнаяСтрока;
			
		КонецЕсли;
		
		СтрокаКорзины.Количество = СтрокаКорзины.Количество + 1;
		СтрокаКорзины.Резерв	 = 0;
		
		СтрокаКорзины.НеобходимостьВводаАкцизнойМарки = ДанныеСтрокиКорзины.Маркируемый;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаКорзины);
		
		ОткрытьВводАкцизнойМарки(СтрокаКорзины);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьНоменклатуруВКорзину()

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаАкцизнойМарки(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если РезультатОткрытияФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТЧ = Объект.КорзинаЦенаОстатокРезервХарактеристика.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	
	СтрокаТЧ.КодАкцизнойМарки = РезультатОткрытияФормы.Штрихкод;
	
	Если НЕ РезультатОткрытияФормы = Неопределено 
		И ТипЗнч(РезультатОткрытияФормы) = Тип("Строка") Тогда
		
		Если СтрокаТЧ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаТЧ.Количество = 1;
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТЧ);
		
	Иначе
		Если НЕ СтрокаТЧ = Неопределено Тогда
			Объект.КорзинаЦенаОстатокРезервХарактеристика.Удалить(СтрокаТЧ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиАкцизнуюМарку(ИдентификаторСтроки, Номенклатура)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Номенклатура"         , Номенклатура);
	ПараметрыФормы.Вставить("КонтрольАкцизныхМарок", Истина);
	
	ПараметрыФормы.Вставить("ПредставлениеНоменклатуры", Строка(Номенклатура));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаАкцизнойМарки", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.РаботаСАкцизнымиМаркамиЕГАИС.Форма.ФормаВводаАкцизнойМарки", ПараметрыФормы, ЭтаФорма, ,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Функция ОткрытьВводАкцизнойМарки(СтрокаТЧ)

	Если Не ИспользуетсяРегистрацияРозничныхПродажВЕГАИС Тогда
		Возврат Ложь;
	ИначеЕсли Не ЭтоВозврат Тогда
		Возврат Ложь;
	ИначеЕсли СтрокаТЧ = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
		Возврат Ложь;
	ИначеЕсли НЕ СтрокаТЧ.НеобходимостьВводаАкцизнойМарки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИдентификаторСтроки = СтрокаТЧ.ПолучитьИдентификатор();
	
	ВвестиАкцизнуюМарку(ИдентификаторСтроки, СтрокаТЧ.Номенклатура);
	
КонецФункции

&НаКлиенте
Функция ПодобратьСтруктурнуюЕдиницуНоменклатуры(ДанныеТекущейСтроки, СтратегияЗаполненияСтруктурнойЕдиницы)
	
	СтруктурнаяЕдиница = КешНастройкиПодбора.СтруктурнаяЕдиницаПоУмолчанию;
	
	Если НЕ КешНастройкиПодбора.СведенияОДокументе.СтруктурнаяЕдиницаВТабличнойЧасти = Истина Тогда
		
		Возврат СтруктурнаяЕдиница;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КешНастройкиПодбора.ОтборПоСтруктурнойЕдинице) Тогда
		
		СтруктурнаяЕдиница = КешНастройкиПодбора.ОтборПоСтруктурнойЕдинице;
		
	ИначеЕсли СтратегияЗаполненияСтруктурнойЕдиницы = "Общая" Тогда
		
		Если ДанныеТекущейСтроки.Свойство("Склад")
			И ЗначениеЗаполнено(ДанныеТекущейСтроки.Склад) Тогда
			
			СтруктурнаяЕдиница = ДанныеТекущейСтроки.Склад;
			
		ИначеЕсли ЗначениеЗаполнено(КешНастройкиПодбора.СтруктурнаяЕдиницаПоУмолчанию) Тогда
			
			СтруктурнаяЕдиница = КешНастройкиПодбора.СтруктурнаяЕдиницаПоУмолчанию;
			
		КонецЕсли;
		
	ИначеЕсли СтратегияЗаполненияСтруктурнойЕдиницы = "Складская" Тогда
		
		ДанныеТекущейСтрокиСкладскиеЗапасы = Элементы.СписокСкладскиеОстатки.ТекущиеДанные;
		Если ДанныеТекущейСтрокиСкладскиеЗапасы <> Неопределено Тогда
			
			СтруктурнаяЕдиница = ДанныеТекущейСтрокиСкладскиеЗапасы.СтруктурнаяЕдиница;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктурнаяЕдиница;
	
КонецФункции

#КонецОбласти

#Область УправлениеСписками

&НаКлиенте
// Процедура устанавливает отбор в списке запасов по массиву аналогов номенклатуры
//
Процедура ОтборПоАналогамНоменклатуры(Номенклатура, ТекстСообщения)
	
	СписокАналоговНоменклатуры = Новый СписокЗначений;
	ПолучитьАналогиНоменклатуры(Номенклатура, СписокАналоговНоменклатуры);
	
	Если СписокАналоговНоменклатуры.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Для номенклатуры не заведены аналоги.'");
		
	Иначе
		
		МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокЗапасы.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "НоменклатураСсылка");
		Если МассивЭлементов.Количество() = 0 Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СписокЗапасы.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "НоменклатураСсылка", ВидСравненияКомпоновкиДанных.ВСписке, СписокАналоговНоменклатуры);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(СписокЗапасы.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "НоменклатураСсылка", , СписокАналоговНоменклатуры, ВидСравненияКомпоновкиДанных.ВСписке);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОтборПоАналогамНоменклатуры()

&НаКлиенте
// Процедура устанавливает отбор в списке запасов по составу набора номенклатуры
//
Процедура ПоказатьСоставНабораНоменклатуры(ДанныеТекущейСтроки)
	
	СоставНабора.Очистить();
	
	ЗаполнитьСоставНабора(ДанныеТекущейСтроки);
	Если СоставНабора.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'В наборе не указан состав.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	Иначе
		
		Элементы.НавигацияСписковНоменклатураХарактеристики.Заголовок = НСтр("ru ='Номенклатура'");
		Элементы.НавигацияСписковНоменклатураХарактеристики.Доступность = Истина;
		Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница = Элементы.СтраницаСоставНабора;
		
	КонецЕсли;
	
КонецПроцедуры // ОтборПоСоставуНабораНоменклатуры()

&НаКлиенте
// Процедура обновляет динамические списки Запасы
//
Процедура ОбновитьОтборПоГруппеДинамическихСписков()
	
	Если ОтборИерархия = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.ГруппыНоменклатуры") Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокЗапасы, "КатегорияНоменклатуры");
		ИмяДинамическогоСписка = "СписокИерархияНоменклатуры";
		ИмяОтбора = "Родитель";
		
	ИначеЕсли ОтборИерархия = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.КатегорииНоменклатуры") Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокЗапасы, "Родитель");
		ИмяДинамическогоСписка = "СписокИерархияНоменклатурныхГрупп";
		ИмяОтбора = "КатегорияНоменклатуры";
		
	КонецЕсли;
	
	ДанныеТекущейСтроки = Элементы[ИмяДинамическогоСписка].ТекущиеДанные;
	Если ДанныеТекущейСтроки = Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокЗапасы, ИмяОтбора);
		
		ИзменитьЗаголовокГруппыОтборов(Ложь);
		
	Иначе
		
		МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокЗапасы.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, ИмяОтбора);
		Если МассивЭлементов.Количество() = 0 Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СписокЗапасы.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, ИмяОтбора, ВидСравненияКомпоновкиДанных.ВИерархии, ДанныеТекущейСтроки.Ссылка);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(СписокЗапасы.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, ИмяОтбора, , ДанныеТекущейСтроки.Ссылка, ВидСравненияКомпоновкиДанных.ВИерархии);
			
		КонецЕсли;
		
		ИзменитьЗаголовокГруппыОтборов(Истина);
		
	КонецЕсли;
	
КонецПроцедуры //ОбновитьОтборПоГруппеДинамическихСписков()

&НаКлиенте
// Открыть список характеристик и установить отбор по номенклатуре
//
Процедура ПоказатьСписокХарактеристик()
	
	ТекущиеДанныеСпискаНоменклатуры = Элементы.СписокЗапасы.ТекущиеДанные;
	
	МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокХарактеристик.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "НоменклатураСсылка");
	Если МассивЭлементов.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СписокХарактеристик.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "НоменклатураСсылка", ВидСравненияКомпоновкиДанных.Равно, ТекущиеДанныеСпискаНоменклатуры.НоменклатураСсылка);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(СписокХарактеристик.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "НоменклатураСсылка", , ТекущиеДанныеСпискаНоменклатуры.НоменклатураСсылка, ВидСравненияКомпоновкиДанных.Равно);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокИерархияНоменклатуры", "Доступность", Ложь);
	Элементы.СписокИерархияНоменклатуры.ЦветТекста = Новый Цвет(150, 150, 150);
	Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница = Элементы.СтраницаХарактеристики;
	
КонецПроцедуры // ПоказатьСписокХарактеристик()

&НаСервере
// Процедура устанавливает значения параметров динамических списков 
//
// Значения считываются из реквизитов обработки
//
Процедура УстановитьПараметрыДинамическихСписков()
	
	// Параметры, заполняемые особым образом, например, Организация
	ПараметрОрганизация = Новый ПараметрКомпоновкиДанных("Организация");
	ПараметрСтруктурнаяЕдиница = Новый ПараметрКомпоновкиДанных("СтруктурнаяЕдиница");
	
	МассивСписков = Новый Массив;
	МассивСписков.Добавить(СписокИерархияНоменклатуры);
	МассивСписков.Добавить(СписокЗапасы);
	МассивСписков.Добавить(СписокХарактеристик);
	МассивСписков.Добавить(СписокСкладскиеОстатки);
	
	Для каждого ДинамическийСписок Из МассивСписков Цикл
		ДинамическийСписок.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("СоответствиеСтавокНДС",
			УправлениеНебольшойФирмойПовтИсп.СоответствиеСтавокНДС(?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса())));
	
		Для Каждого ПараметрСписка Из ДинамическийСписок.Параметры.Элементы Цикл
			
			ЗначениеРеквизитаОбъекта = Неопределено;
			Если ПараметрСписка.Параметр = ПараметрОрганизация Тогда
				
				ДинамическийСписок.Параметры.УстановитьЗначениеПараметра(ПараметрСписка.Параметр, Константы.УчетПоКомпании.Компания(Объект.Организация));
				
			ИначеЕсли ПараметрСписка.Параметр = ПараметрСтруктурнаяЕдиница Тогда
				
				УстановитьЗначениеПараметраСтруктурнойЕдиницыНаСервере(Неопределено);
				
			ИначеЕсли Объект.Свойство(ПараметрСписка.Параметр, ЗначениеРеквизитаОбъекта) Тогда
				
				Если ПодборНоменклатурыВДокументах.ЭтоСписокЗначений(ЗначениеРеквизитаОбъекта) Тогда
					
					ЗначениеРеквизитаОбъекта = ПодборНоменклатурыВДокументах.СписокЗначенийВМассив(ЗначениеРеквизитаОбъекта);
					
				КонецЕсли;
				
				ДинамическийСписок.Параметры.УстановитьЗначениеПараметра(ПараметрСписка.Параметр, ЗначениеРеквизитаОбъекта);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	КурсыВалют = ЦенообразованиеСервер.ПолучитьКурсыВалют(Объект.ВалютаВидаЦен, Объект.ВалютаДокумента, Объект.Дата);
	
	СписокЗапасы.Параметры.УстановитьЗначениеПараметра("ВалютаВидаЦенКурс",			КурсыВалют.КурсНач);
	СписокЗапасы.Параметры.УстановитьЗначениеПараметра("ВалютаВидаЦенКратность",	КурсыВалют.КратностьНач);
	СписокЗапасы.Параметры.УстановитьЗначениеПараметра("ВалютаДокументаКурс",		КурсыВалют.Курс);
	СписокЗапасы.Параметры.УстановитьЗначениеПараметра("ВалютаДокументаКратность",	КурсыВалют.Кратность);
	
	СписокХарактеристик.Параметры.УстановитьЗначениеПараметра("ВалютаВидаЦенКурс",		КурсыВалют.КурсНач);
	СписокХарактеристик.Параметры.УстановитьЗначениеПараметра("ВалютаВидаЦенКратность",	КурсыВалют.КратностьНач);
	СписокХарактеристик.Параметры.УстановитьЗначениеПараметра("ВалютаДокументаКурс",	КурсыВалют.Курс);
	СписокХарактеристик.Параметры.УстановитьЗначениеПараметра("ВалютаДокументаКратность",КурсыВалют.Кратность);
	
КонецПроцедуры // УстановитьПараметрыДинамическихСписков()

&НаКлиенте
// Процедура устанавливает заголовки динамических списков
//
Процедура УстановитьЗаголовкиСписков()
	
	Если Элементы.ФормаОбновлятьЗаголовки.Пометка Тогда
	
		Если Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница = Элементы.СтраницаХарактеристики Тогда
			
			ДанныеТекущейСтроки = ПолучитьДанныеТекущейСтрокиСписка();
			ДанныеТекущейСтрокиЗаполнены = (ДанныеТекущейСтроки <> Неопределено);
			
			ПредставлениеНоменклатуры = ?(ДанныеТекущейСтрокиЗаполнены, Строка(ДанныеТекущейСтроки.НоменклатураСсылка), "<...>");
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"СписокХарактеристикХарактеристикаСсылка", "Заголовок", СтрШаблон(НСтр("ru = 'Характеристики: %1'"),
				ПредставлениеНоменклатуры));
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"СписокСкладскиеОстаткиСтруктурнаяЕдиница", "Заголовок", СтрШаблон(НСтр("ru = 'Склад. остатки: %1'"),
				ПредставлениеНоменклатуры));
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ФормаПереходНоменклатураХарактеристики", "Заголовок", НСтр("ru = 'Характеристики'"));
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокХарактеристикХарактеристикаСсылка", "Заголовок", НСтр("ru = 'Характеристика'"));
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСкладскиеОстаткиСтруктурнаяЕдиница", "Заголовок", НСтр("ru = 'Склад'"));
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПереходНоменклатураХарактеристики", "Заголовок", НСтр("ru = 'Номенклатура'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗаголовкиСписков()

&НаКлиенте
// Процедура отвечает за переход к списку характеристик номенклатуры
//
Процедура ПерейтиКСпискуХарактеристикНоменклатуры(НоменклатураСсылка)
	
	Если Элементы.ФормаОбновлятьЗаголовки.Пометка Тогда
		
		ВладелецХарактеристики = НоменклатураСсылка;
		
	КонецЕсли;
	
	ПоказатьСписокХарактеристик();
	ПодключитьОбработчикОжидания("УстановитьЗаголовкиСписков", 0.1, Истина);
	ВыводитьСоветВернутьсяКНоменклатуре();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НавигацияСписковНоменклатураХарактеристики", "Заголовок", НСтр("ru ='Номенклатура'"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НавигацияСписковНоменклатураХарактеристики", "Картинка", БиблиотекаКартинок.Назад);
	
	Если НЕ ПустаяСтрока(ТекстПоиска) Тогда
		
		ТекстПоиска = "";
		
		Если Элементы.ФормаАвтоСбросОтбораСписков.Пометка Тогда
			
			ПодключитьОбработчикОжидания("СброситьОтборПоДинамическомуСписку", 0.1, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПерейтиКСпискуХарактеристикНоменклатуры()

&НаКлиенте
// Процедура отвечает за возврат к списку номенклатуры из списка характеристик
//
Процедура ПерейтиКСпискуНоменклатуры()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокИерархияНоменклатуры", "Доступность", Истина);
	
	Если ЗначениеЗаполнено(ВладелецХарактеристики) Тогда
		
		Элементы.СписокЗапасы.ТекущаяСтрока = ВладелецХарактеристики;
		ВладелецХарактеристики = Неопределено;
		
	КонецЕсли;
	
	Элементы.СписокИерархияНоменклатуры.ЦветТекста = Новый Цвет();
	
	Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница = Элементы.СтраницаНоменклатура;
	
	ПодключитьОбработчикОжидания("УстановитьЗаголовкиСписков", 0.1, Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НавигацияСписковНоменклатураХарактеристики", "Заголовок", НСтр("ru ='Характеристики'"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НавигацияСписковНоменклатураХарактеристики", "Картинка", БиблиотекаКартинок.Вперед);
	
	Если НЕ ПустаяСтрока(ТекстПоиска) Тогда
		
		ТекстПоиска = "";
		
		Если Элементы.ФормаАвтоСбросОтбораСписков.Пометка Тогда
			
			ПодключитьОбработчикОжидания("СброситьОтборПоДинамическомуСписку", 0.1, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПерейтиКСпискуНоменклатуры()

&НаКлиенте
// Процедура отвечает за доступность кнопки перейти к характеристикам/номенклатуре
//
Процедура УправлениеДоступностьюНавигацииСписковНоменклатураХарактеристика()
	
	ДанныеТекущейСтроки = Элементы.СписокЗапасы.ТекущиеДанные;
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НавигацияСписковНоменклатураХарактеристики", "Доступность", ДанныеТекущейСтроки.ИспользоватьХарактеристики);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыКонтекстноеМенюПоказатьСоставНабора", "Доступность", ДанныеТекущейСтроки.ЭтоНабор);
		
	ИначеЕсли Элементы.НавигацияСписковНоменклатураХарактеристики.Доступность = Ложь
		И Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница <> Элементы.СтраницаНоменклатура Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НавигацияСписковНоменклатураХарактеристики", "Доступность", Истина);
		
	ИначеЕсли ДанныеТекущейСтроки = Неопределено
		И Элементы.СтраницыНоменклатураХарактеристики.ТекущаяСтраница = Элементы.СтраницаНоменклатура Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НавигацияСписковНоменклатураХарактеристики", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыКонтекстноеМенюПоказатьСоставНабора", "Доступность", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры // УправлениеДоступностьюНавигацииСписковНоменклатураХарактеристика()

&НаКлиенте
// Процедура отвечает за установку, снятие отбора по наличию остатков
//
Процедура ВключитьВыключитьОтборНоменклатурыВНаличии()
	
	Если НоменклатураИмеетсяВНаличии Тогда
		
		МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокЗапасы.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "Остаток");
		Если МассивЭлементов.Количество() = 0 Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СписокЗапасы.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "Остаток", ВидСравненияКомпоновкиДанных.Заполнено, 0);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(СписокЗапасы.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "Остаток", , 0, ВидСравненияКомпоновкиДанных.Заполнено);
			
		КонецЕсли;
		
		МассивЭлементовХарактеристик = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокХарактеристик.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "Остаток");
		Если МассивЭлементовХарактеристик.Количество() = 0 Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СписокХарактеристик.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "Остаток", ВидСравненияКомпоновкиДанных.Заполнено, 0);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(СписокХарактеристик.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "Остаток", , 0, ВидСравненияКомпоновкиДанных.Заполнено);
			
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокЗапасы, "Остаток");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокХарактеристик, "Остаток");
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаНоменклатураИмеетсяВНаличии", "Пометка", НоменклатураИмеетсяВНаличии);
	
КонецПроцедуры // ВключитьВыключитьОтборНоменклатурыВНаличии()

&НаСервере
// Устанавливает значение и использование параметра отбора структурной единицы
//
Процедура УстановитьЗначениеПараметраСтруктурнойЕдиницыНаСервере(СтруктурнаяЕдиница)
	
	МассивСписков = Новый Массив;
	МассивСписков.Добавить(СписокЗапасы);
	МассивСписков.Добавить(СписокХарактеристик);
	
	Для каждого ДинамическийСписок Из МассивСписков Цикл
		
		ПараметрДинамическогоСписка = ДинамическийСписок.Параметры.Элементы.Найти("СтруктурнаяЕдиница");
		Если ПараметрДинамическогоСписка <> Неопределено Тогда
			
			ПараметрДинамическогоСписка.Значение = СтруктурнаяЕдиница;
			ПараметрДинамическогоСписка.Использование = ЗначениеЗаполнено(СтруктурнаяЕдиница);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьЗначениеПараметраСтруктурнойЕдиницыНаСервере()

#КонецОбласти

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("НоменклатураСтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Номенклатура.ВидСтавкиНДС));
	
	Если СтруктураДанные.Свойство("ВидЦенКонтрагента") Тогда
		
		СтруктураЦенаИЕдиницаИзмерения = ПодборНоменклатурыВДокументах.ПолучитьЦенуИЕдиницуИзмеренияНоменклатурыПоВидуЦенКонтрагента(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", СтруктураЦенаИЕдиницаИзмерения.Цена);
		
		ЕдиницаИзмерения = ?(ЗначениеЗаполнено(СтруктураЦенаИЕдиницаИзмерения.ЕдиницаИзмерения), СтруктураЦенаИЕдиницаИзмерения.ЕдиницаИзмерения, СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
		
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
// Процедура заполняет список аналогов по переданной номенклатуре
//
Процедура ПолучитьАналогиНоменклатуры(Номенклатура, СписокАналоговНоменклатуры)
	
	СписокАналоговНоменклатуры.Очистить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ РегистрСведений.АналогиНоменклатуры КАК Аналоги ГДЕ Номенклатура = &Номенклатура УПОРЯДОЧИТЬ ПО Приоритет");
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СписокАналоговНоменклатуры.Добавить(Выборка.Аналог);
		
	КонецЦикла;
	
	СписокАналоговНоменклатуры.Вставить(0, Номенклатура);
	
КонецПроцедуры // ПолучитьАналогиНоменклатуры()

&НаСервере
// Процедура заполняет список аналогов по переданной номенклатуре
//
Процедура ЗаполнитьСоставНабора(ДанныеТекущейСтроки)
	
	СтруктураДанные = Новый Структура("Номенклатура, Характеристика, Цена", ДанныеТекущейСтроки.НоменклатураСсылка, ДанныеТекущейСтроки.ХарактеристикаСсылка, ДанныеТекущейСтроки.Цена);
	НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(СтруктураДанные);
	
	Для каждого ЭлементМассива Из СтруктураДанные.СоставНабора Цикл
		
		НоваяСтрока = СоставНабора.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеТекущейСтроки);
		
		НоваяСтрока.ЭлементНабораНоменклатура = ЭлементМассива.Номенклатура;
		НоваяСтрока.ЭлементНабораХарактеристика = ЭлементМассива.Характеристика;
		НоваяСтрока.ЭлементНабораКоличество = ЭлементМассива.Количество;
		НоваяСтрока.ЭлементНабораДоляСтоимости = ЭлементМассива.ДоляСтоимости;
		НоваяСтрока.ЭлементНабораЕдиницаИзмерения = ЭлементМассива.ЕдиницаИзмерения;
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьСоставНабора()

&НаСервере
// Процедура заполняет данные объекта по переданным параметрам
// вызывается событием ПриЗаписиОбъекта, 
//
Процедура ЗаполнитьДанныеОбъекта()
	
	ЗаполнитьЗначенияСвойств(Объект, Параметры);
	Объект.ВалютаВидаЦен = Объект.ВидЦенКонтрагента.ВалютаЦены;
	
КонецПроцедуры // ЗаполнитьДанныеОбъекта()

&НаСервере
// Процедура заполняет сведения о документе вызвавшем подбор
// вызывается событием ПриЗаписиОбъекта, 
//
Процедура ЗаполнитьСведенияОДокументе(СведенияОДокументе)
	
	Обработки.ПодборПоступление.СтруктураСведенийОДокументе(СведенияОДокументе);
	ЗаполнитьЗначенияСвойств(СведенияОДокументе, Объект);
	
КонецПроцедуры // ЗаполнитьСведенияОДокументе()

&НаСервере
// Функция помещает результаты подбора в хранилище
//
// Возвращает структуру:
//	Структура
//		- Адрес в хранилище, куда помещена выбранная номенклатура (корзина);
//		- Уникальный идентификатор формы владельца, необходим для идентификации при обработке результатов подбора;
//
Функция ЗаписатьПодборВХранилище() 
	
	КатегорииНоменклатурыСервер.УстановитьНастройкуВидОтбораНоменклатуры(ОтборИерархия);
	
	АдресКорзиныВХранилище = ПоместитьВоВременноеХранилище(Объект.КорзинаЦенаОстатокРезервХарактеристика.Выгрузить(), Объект.УникальныйИдентификаторФормыВладельца);
	Возврат Новый Структура("АдресКорзиныВХранилище, УникальныйИдентификаторФормыВладельца", АдресКорзиныВХранилище, Объект.УникальныйИдентификаторФормыВладельца);
	
КонецФункции // ЗаписатьПодборВХранилище()

&НаСервере
// Процедура устанавливает свойства элементов формы
//
Процедура УстановитьСвойстваЭлементовФормы()
	
	ПодборНоменклатурыВДокументах.УстановитьПараметрыВыбораНоменклатуры(Элементы.КорзинаЦенаОстатокРезервХарактеристикаНоменклатура, Объект.ТипНоменклатуры);
	ПодборНоменклатурыВДокументах.УстановитьПараметрыВыбораПартий(Элементы.КорзинаЦенаОстатокРезервХарактеристикаПартия, Объект.ВидОперации);
	
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(СписокЗапасы);
	ПодборНоменклатурыВДокументах.ВидимостьНаборовКомплектов(ТабличныеЧасти, КешНастройкиПодбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыЕдиницаИзмерения", "Видимость", ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокХарактеристикЕдиницаИзмерения", "Видимость", ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КорзинаЦенаОстатокРезервХарактеристикаЕдиницаИзмерения", "Видимость", ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИзменитьВидимостьСкладскихОстатков", "Пометка", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИзменитьВидимостьКорзины", "Пометка", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбновлятьЗаголовки", "Пометка", Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПереходНоменклатураХарактеристики", "Заголовок", НСтр("ru = 'Номенклатура'"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокНоменклатурыКонтекстноеМенюИзменитьЦену", "Доступность", ЗначениеЗаполнено(Объект.ВидЦенКонтрагента));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокХарактеристикКонтекстноеМенюЦенаУстановитьНовую", "Доступность", ЗначениеЗаполнено(Объект.ВидЦенКонтрагента));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КорзинаЦенаОстатокРезервХарактеристикаЦена", "Доступность", КешНастройкиПодбора.РазрешеноИзменятьЦену);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КорзинаЦенаОстатокРезервХарактеристикаСумма", "Доступность", КешНастройкиПодбора.РазрешеноИзменятьЦену);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КорзинаЦенаОстатокРезервХарактеристикаСуммаНДС", "Доступность", КешНастройкиПодбора.РазрешеноИзменятьЦену);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КорзинаЦенаОстатокРезервХарактеристикаВсего", "Доступность", КешНастройкиПодбора.РазрешеноИзменятьЦену);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокНоменклатурыКонтекстноеМенюИзменитьЦену", "Доступность", КешНастройкиПодбора.РазрешеноИзменятьЦену);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокХарактеристикКонтекстноеМенюЦенаУстановитьНовую", "Доступность", КешНастройкиПодбора.РазрешеноИзменятьЦену);
	
	ВключеноРезервирование = ПолучитьФункциональнуюОпцию("РезервированиеЗапасов");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыРезерв", "Видимость", ВключеноРезервирование);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КорзинаЦенаОстатокРезервХарактеристикаРезерв", "Видимость", Ложь);
	
КонецПроцедуры // УстановитьСвойстваЭлементовФормы()

&НаКлиенте
// Процедура устанавливает переданный элемент формы текущим
//
Процедура УстановитьТекущийЭлементыФормы(Элемент)
	
	ЭтаФорма.ТекущийЭлемент = Элемент;
	
КонецПроцедуры // УстановитьТекущийЭлементыФормы()

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры КорзинаЦенаОстатокРезервХарактеристикаЕдиницаИзмеренияОбработкаВыбора.
//
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
		
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

&НаКлиенте
// Процедура вызывает форму, которая содержит совет пользователю
//
Процедура ПоказатьСоветПользователю(ЗаголовокФормы, ТекстСообщения, ВидимостьБольшеНеПоказывать, ИмяПользовательскойНастройки)
	
	ПараметрыСовета = Новый Структура;
	ПараметрыСовета.Вставить("Заголовок", ЗаголовокФормы);
	ПараметрыСовета.Вставить("ТекстСообщения", ТекстСообщения);
	ПараметрыСовета.Вставить("ВидимостьБольшеНеПоказывать", ВидимостьБольшеНеПоказывать);
	ПараметрыСовета.Вставить("ИмяПользовательскойНастройки", ИмяПользовательскойНастройки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыводаСовета", ЭтотОбъект, ПараметрыСовета);
	ОткрытьФорму("ОбщаяФорма.ФормаСообщения", ПараметрыСовета, ЭтаФорма, Истина, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ПоказатьСоветПользователю()

&НаКлиенте
// Процедура обработчик ожидания. Выводить совет пользователю поверх окна подбора
//
Процедура ВыводитьСоветИспользоватьПредыдущийПодбор()
	
	Если КешНастройкиПодбора.ВыводитьСоветИспользоватьПредыдущийПодбор Тогда
		
		ЗаголовокФормы = НСтр("ru = 'Совет'");
		ТекстСообщения = НСтр("ru = 'Выключить/включить использование новой формы подбора можно в настройках пользователя.'");
		
		ПоказатьСоветПользователю(ЗаголовокФормы, ТекстСообщения, Истина, "ВыводитьСоветИспользоватьПредыдущийПодбор");
		
	КонецЕсли;
	
КонецПроцедуры // ВывестиСоветОПодборе()

&НаКлиенте
// Процедура обработчик ожидания. Выводить совет пользователю поверх окна подбора
//
Процедура ВыводитьСоветУслугиВПриходныхДокументах()
	
	Если КешНастройкиПодбора.ВыводитьСоветУслугиВПриходныхДокументах Тогда
		
		ЗаголовокФормы = НСтр("ru = 'Совет'");
		ТекстСообщения = НСтр("ru = 'Услуги в приходных документах отражают расходы компании, поэтому выбор характеристик ограничен.'");
		
		ПоказатьСоветПользователю(ЗаголовокФормы, ТекстСообщения, Истина, "ВыводитьСоветУслугиВПриходныхДокументах");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура вывода совета пользователю о возврате к списку номенклатуры
//
Процедура ВыводитьСоветВернутьсяКНоменклатуре()
	
	Если КешНастройкиПодбора.ВыводитьСоветВернутьсяКНоменклатуре Тогда
		
		ЗаголовокФормы = НСтр("ru = 'Совет'");
		ТекстСообщения = НСтр("ru = 'Вернуться к списку номенклатуры можно при помощи контекстного меню или клавиши BackSpace.'");
		
		ПоказатьСоветПользователю(ЗаголовокФормы, ТекстСообщения, Истина, "ВыводитьСоветВернутьсяКНоменклатуре");
		
	КонецЕсли;
	
КонецПроцедуры // ВыводитьСоветВернутьсяКНоменклатуре()

&НаКлиенте
// Процедура управления заголовком группы отборов
//
Процедура ИзменитьЗаголовокГруппыОтборов(ОтборУстановлен)
	
	ЗаголовокДекорации = ?(ОтборУстановлен = Истина, НСтр("ru ='Отборы (установлены)'"), НСтр("ru ='Отборы'"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОтборы", "Заголовок", ЗаголовокДекорации);
	
КонецПроцедуры // ИзменитьЗаголовокГруппыОтборов()

&НаКлиенте
// Процедура обрабатывает результаты открытия дополнительной формы "Настройки"
//
Процедура ОбновитьНастройкиПодбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		Для Каждого ЭлементНастройки Из РезультатЗакрытия Цикл
			
			Если ЭлементНастройки.Значение <> КешНастройкиПодбора[ЭлементНастройки.Ключ] Тогда
				
				КешНастройкиПодбора[ЭлементНастройки.Ключ] = ЭлементНастройки.Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьНастройкиПодбора()

&НаКлиенте
// Процедура обрабатывает результаты открытия дополнительной формы "Количества и цена"
//
//
Процедура ПослеВыбораКоличестваИЦены(РезультатЗакрытия, ДанныеСтрокиКорзины) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		Если ДанныеСтрокиКорзины.СтрокаКорзины = Неопределено Тогда
			
			СтрокаКорзины = Объект.КорзинаЦенаОстатокРезервХарактеристика.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКорзины, ДанныеСтрокиКорзины);
			СтрокаКорзины.Количество = РезультатЗакрытия.Количество;
			СтрокаКорзины.Цена		 = ВычислитьЦенуНоменклатуры(СтрокаКорзины.СтавкаНДС, РезультатЗакрытия.Цена);
			
		Иначе
			
			СтрокаКорзины = Объект.КорзинаЦенаОстатокРезервХарактеристика.НайтиПоИдентификатору(ДанныеСтрокиКорзины.СтрокаКорзины);
			СтрокаКорзины.Количество = СтрокаКорзины.Количество + РезультатЗакрытия.Количество;
			СтрокаКорзины.Цена		 = РезультатЗакрытия.Цена;
			
		КонецЕсли;
		
		СтрокаКорзины.Резерв	 = 0;
		
		СтрокаКорзины.НеобходимостьВводаАкцизнойМарки = ДанныеСтрокиКорзины.Маркируемый;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаКорзины);
		
		ОткрытьВводАкцизнойМарки(СтрокаКорзины);
		
	КонецЕсли;
	
КонецПроцедуры // ПослеВыбораКоличестваИЦены()

&НаКлиенте
// Процедура обрабатывает результаты открытия дополнительной формы "Сведения о документе"
//
Процедура ПослеЗакрытияФормыСведенияОДокументе(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ПараметрыОсновнойФормыПодбора = ДополнительныеПараметры;
	
КонецПроцедуры // ПослеЗакрытияФормыСведенияОДокументе()

&НаКлиенте
// Процедура обрабатывает результаты открытия дополнительной формы "Расшифровка резерва"
//
Процедура ПослеОткрытияРасшифровкиРезерва(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ПараметрыОсновнойФормыПодбора = ДополнительныеПараметры;
	
КонецПроцедуры // ПослеОткрытияРасшифровкиРезерва()

&НаКлиенте
// Процедура обрабатывает результаты открытия формы совета пользователю
//
Процедура ПослеВыводаСовета(РезультатЗакрытия, ПараметрыСовета) Экспорт
	
	Если ПараметрыСовета.ВидимостьБольшеНеПоказывать 
		И ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		КешНастройкиПодбора.Вставить(ПараметрыСовета.ИмяПользовательскойНастройки, РезультатЗакрытия.ЗначениеПользовательскойНастройки);
		ПерсональныеНастройкиВызовСервера.Установить(РезультатЗакрытия.ЗначениеПользовательскойНастройки,
			ПараметрыСовета.ИмяПользовательскойНастройки);
		
	КонецЕсли;
	
КонецПроцедуры // ПослеВыводаСовета()

#КонецОбласти
