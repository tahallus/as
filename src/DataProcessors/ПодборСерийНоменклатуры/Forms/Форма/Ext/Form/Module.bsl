
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ЭтоОприходование") Тогда
		ЭтоОприходование = Параметры.ЭтоОприходование;
	Иначе
		ЭтоОприходование = Ложь;
	КонецЕсли;

	Если Параметры.Свойство("ДокСсылка") Тогда
		ПоказыватьПроданныеПриПодборе = ЗначениеЗаполнено(Параметры.ДокСсылка) И ТипЗнч(Параметры.ДокСсылка) = Тип("ДокументСсылка.ОтчетКомитенту");
	КонецЕсли;
	
	Если Параметры.Свойство("ИспользоватьУникальныеСерии") Тогда
		ИспользоватьУникальныеСерии = Параметры.ИспользоватьУникальныеСерии;
	КонецЕсли;
	
	Если Параметры.Свойство("ДокСсылка") 
		И ТипЗнч(Параметры.ДокСсылка) = Тип("ДокументСсылка.СборкаЗапасов")
		И ЗначениеЗаполнено(Параметры.ДокСсылка) Тогда
		ДатаПроизводстваПриГенерацииСерий = Параметры.ДокСсылка.Дата;
	КонецЕсли;
	
	Если Параметры.Свойство("ЭтоПриходныйОрдер") Тогда
		СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("ЭтоПриходныйОрдер", Истина);
	Иначе
		СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("ЭтоПриходныйОрдер", Ложь);
	КонецЕсли;
	
	Если Параметры.Свойство("ЭтоРасходныйОрдер") Тогда
		СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("ЭтоРасходныйОрдер", Истина);
	Иначе
		СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("ЭтоРасходныйОрдер", Ложь);
	КонецЕсли;
	
	ТекстСообщения = "";
	Если НЕ Параметры.Свойство("Запасы") ИЛИ НЕ ЗначениеЗаполнено(Параметры.Запасы.Номенклатура) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена номенклатура'");
	ИначеЕсли НЕ Параметры.Запасы.Номенклатура.ИспользоватьСерииНоменклатуры Тогда
		ТекстСообщения = НСтр("ru = 'Для номенклатуры не ведется учет по сериям'");
	ИначеЕсли Параметры.Свойство("СтатусыСерийНоменклатуры") И Параметры.СтатусыСерийНоменклатуры = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Для данного документа и склада редактирование серий не требуется (см. Политику учета серий).'");
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		Возврат;
	КонецЕсли;
	УникальныйИдентификаторФормыВладельца = Параметры.УникальныйИдентификаторФормыВладельца;
	
	Если Параметры.Свойство("РежимПодбора") Тогда
		РежимПодбора = Параметры.РежимПодбора;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.АдресВоВременномХранилище) Тогда
		СохраненноеЗначениеСерийНоменклатуры = ПолучитьИзВременногоХранилища(Параметры.АдресВоВременномХранилище);
		Если ТипЗнч(СохраненноеЗначениеСерийНоменклатуры) = Тип("СправочникСсылка.СерииНоменклатуры") Тогда
			Если ЗначениеЗаполнено(СохраненноеЗначениеСерийНоменклатуры) Тогда
				
				НовСтр = Объект.СерииНоменклатуры.Добавить();
				НовСтр.Серия = СохраненноеЗначениеСерийНоменклатуры;
				НовСтр.НовыйНомер = Строка(СохраненноеЗначениеСерийНоменклатуры);
				
				Если НовСтр.Количество = 0 И Не ИспользоватьУникальныеСерии Тогда
					НовСтр.Количество = 1
				КонецЕсли;
				
			КонецЕсли; 
		Иначе
			
			// Если работает документ МаркировкаТоваровГИСМ, то у него особый порядок загрузки серий
			ЗагружатьСерииОтдельно = (СохраненноеЗначениеСерийНоменклатуры.Колонки.Найти("Серия")<>Неопределено);
			
			Для Каждого ЗагружаемаяСтрока Из СохраненноеЗначениеСерийНоменклатуры Цикл
				СтрокаСерийНоменклатуры = Объект.СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСерийНоменклатуры, ЗагружаемаяСтрока);
				
				Если ЗагружатьСерииОтдельно Тогда
					СтрокаСерийНоменклатуры.Серия = ЗагружаемаяСтрока.Серия;
				КонецЕсли;
				
				Если СтрокаСерийНоменклатуры.Количество = 0 И Не ИспользоватьУникальныеСерии Тогда
					 СтрокаСерийНоменклатуры.Количество = 1
				 КонецЕсли;
				 
			КонецЦикла;
			
			Для Каждого СтрокаСерий Из Объект.СерииНоменклатуры Цикл
				
				ДанныеСерииНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаСерий.Серия,"Наименование,НомерКИЗГИСМ,RFIDTID,RFIDUser,RFIDEPC,EPCGTIN,НомерГИСМ,ГоденДо,ДатаПроизводства" );
				ЗаполнитьЗначенияСвойств(СтрокаСерий, ДанныеСерииНоменклатуры);
				СтрокаСерий.ЗаполненRFIDTID = ЗначениеЗаполнено("RFIDTID");
				СтрокаСерий.НовыйНомер = ДанныеСерииНоменклатуры.Наименование;
				
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;
	
	ЗаполнитьЗапасы(Параметры.Запасы);
	СписокВыбранных.ЗагрузитьЗначения(Объект.СерииНоменклатуры.Выгрузить().ВыгрузитьКолонку("Серия"));
	
	СтруктурнаяЕдиница = ?(Параметры.Свойство("СтруктурнаяЕдиница"), Параметры.СтруктурнаяЕдиница, Неопределено);
	КонтрольОстатковСерийНоменклатуры = КонтролироватьОстатки(СтруктурнаяЕдиница, Параметры.Организация);
	
	Если Не ИспользоватьУникальныеСерии Тогда
		СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("СписокВыбранных", Новый Массив);
	КонецЕсли;
	
	Если КонтрольОстатковСерийНоменклатуры Тогда
		
		СерииНоменклатурыОстатки.ТекстЗапроса = ТекстЗапросаСерииОстатки();
			
		СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("Номенклатура",Номенклатура);
		СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("Организация", Параметры.Организация);
		СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("Характеристика",Параметры.Запасы.Характеристика);
		СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("Партия",Параметры.Запасы.Партия);
		
		Если Параметры.Свойство("СтруктурнаяЕдиница") Тогда
			СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("СтруктурнаяЕдиница",Параметры.СтруктурнаяЕдиница);
			СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("ВсеСклады", Ложь);
			
			Если ЗначениеЗаполнено(Параметры.СтруктурнаяЕдиница) Тогда
				
				Если ИспользоватьУникальныеСерии Тогда
					Элементы.СерииОстаткиСерия.Заголовок = СтрШаблон(НСтр("ru = 'В наличии на %1'"), Строка(Параметры.СтруктурнаяЕдиница));
				Иначе
					Элементы.СерииОстаткиСерия.Заголовок = Лев(СтрШаблон(НСтр("ru = 'В наличии на %1'"), Строка(Параметры.СтруктурнаяЕдиница)), 40);
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("СтруктурнаяЕдиница", Неопределено);
			СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("ВсеСклады", Истина);
		КонецЕсли;
		Если Параметры.Свойство("Ячейка") Тогда
			СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("Ячейка",Параметры.Ячейка);
			СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("ВсеЯчейки", Ложь);
			
			Если ЗначениеЗаполнено(Параметры.Ячейка) Тогда
				Элементы.СерииОстаткиСерия.Заголовок = Элементы.СерииОстаткиСерия.Заголовок + ", " + Параметры.Ячейка;
			КонецЕсли;
		Иначе
			СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("Ячейка", Неопределено);
			СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("ВсеЯчейки", Истина);
		КонецЕсли;
		
		Если ИспользоватьУникальныеСерии Тогда
			СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("СписокВыбранных",СписокВыбранных.ВыгрузитьЗначения());
		КонецЕсли;
		СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("ЭтотДокумент", Параметры.ДокСсылка);
		
		Элементы.ПоказатьПроданные.Видимость = Ложь;
		Элементы.СерииОстаткиПродан.Видимость = ПоказатьПроданные;
		
	Иначе //без остатков
		
		СерииНоменклатурыОстатки.ТекстЗапроса = ТекстЗапросаСерииНоменклатуры();
		СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("Номенклатура",Номенклатура);
		
		Элементы.СерииОстаткиСерия.Заголовок = НСтр("ru = 'Серия'");
		
		Если ИспользоватьУникальныеСерии Тогда
			СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("СписокВыбранных",СписокВыбранных.ВыгрузитьЗначения());
		КонецЕсли;
		
		СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("ПоказатьПроданные", ПоказатьПроданные);
		СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("ЭтотДокумент", Параметры.ДокСсылка);
		
	КонецЕсли;
	
	// Шаблон СН
	ВосстановитьНастройки();
	
	Элементы.ГруппаЗаполнить.Видимость = Ложь;
	Если НЕ ЗначениеЗаполнено(Характеристика) Тогда
		Элементы.Характеристика.Видимость = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Партия) Тогда
		Элементы.Партия.Видимость = Ложь;
	КонецЕсли;
	
	Если РежимПодбора Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ВыборОстатков;
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы.ВводНовых;
	КонецЕсли;
	
	Если ИспользоватьУникальныеСерии Тогда
		Элементы.СерииНоменклатурыВыбранныеКоличество.Видимость = Ложь;
		Элементы.СерииНоменклатурыНовыеКоличество.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.СгенерироватьСерии.Видимость = ИспользоватьУникальныеСерии;
	
	Элементы.СерииОстаткиКоличество.Видимость = Не КонтрольОстатковСерийНоменклатуры Или Не ИспользоватьУникальныеСерии;
	
	Элементы.СерииНоменклатурыНовыеДатаПроизводства.Видимость = Номенклатура.ИспользоватьДатуПроизводстваСерии;
	Элементы.СерииНоменклатурыНовыеГоденДо.Видимость = Номенклатура.ИспользоватьСрокГодностиСерии;
	
	ТочностьУказанияСрокаГодностиСерии = Номенклатура.ТочностьУказанияСрокаГодностиСерии;
	
	Если ЗначениеЗаполнено(ТочностьУказанияСрокаГодностиСерии) Тогда
		Если ТочностьУказанияСрокаГодностиСерии = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоДней Тогда
			Элементы.СерииНоменклатурыНовыеДатаПроизводства.Формат = "ДФ=дд.ММ.гггг";
			Элементы.СерииНоменклатурыНовыеГоденДо.Формат = "ДФ=дд.ММ.гггг";
			Элементы.СерииНоменклатурыНовыеДатаПроизводства.ФорматРедактирования = "ДФ=дд.ММ.гггг";
			Элементы.СерииНоменклатурыНовыеГоденДо.ФорматРедактирования = "ДФ=дд.ММ.гггг";
		Иначе
			Элементы.СерииНоменклатурыНовыеДатаПроизводства.Формат = "ДФ='дд.ММ.гггг ЧЧ:00'";
			Элементы.СерииНоменклатурыНовыеГоденДо.Формат = "ДФ='дд.ММ.гггг ЧЧ:00'";
			Элементы.СерииНоменклатурыНовыеДатаПроизводства.ФорматРедактирования = "ДФ='дд.ММ.гггг ЧЧ:00'";
			Элементы.СерииНоменклатурыНовыеГоденДо.ФорматРедактирования = "ДФ='дд.ММ.гггг ЧЧ:00'";
		КонецЕсли;
	Иначе
			Элементы.СерииНоменклатурыНовыеДатаПроизводства.Формат = "ДФ=дд.ММ.гггг";
			Элементы.СерииНоменклатурыНовыеГоденДо.Формат = "ДФ=дд.ММ.гггг";
			Элементы.СерииНоменклатурыНовыеДатаПроизводства.ФорматРедактирования = "ДФ=дд.ММ.гггг";
			Элементы.СерииНоменклатурыНовыеГоденДо.ФорматРедактирования = "ДФ=дд.ММ.гггг";
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	Элементы.СерииНоменклатурыИзменениеСтрокДействие.СписокВыбора.Добавить("Сгенерировать номера в порядке очереди");
	Элементы.СерииНоменклатурыИзменениеСтрокДействие.СписокВыбора.Добавить("Заполнить номерами из диапазона");
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	// Конец ПодключаемоеОборудование
	
	//+ ГИСМ
	
	Если Параметры.Свойство("ЭтоМаркировкаГИСМ") Тогда
		ЭтоМаркировкаТоваровГИСМ = Параметры.ЭтоМаркировкаГИСМ;
	Иначе
		ЭтоМаркировкаТоваровГИСМ = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("GTIN") Тогда
		GTIN = Параметры.GTIN;
	КонецЕсли;
	
	Если Параметры.Свойство("НастройкиИспользованияСерий") Тогда
		НастройкиИспользованияСерий = Новый ФиксированнаяСтруктура(Параметры.НастройкиИспользованияСерий);
	Иначе
		НастройкиИспользованияСерий = Новый ФиксированнаяСтруктура(Новый Структура);
	КонецЕсли;
	
	Если ЭтоМаркировкаТоваровГИСМ Тогда
		
		GTINИзКиЗ = ИнтеграцияГИСМУНФ.GTINКиЗ(Параметры.НоменклатураКиЗ, Параметры.ХарактеристикаКиЗ);
		
		ЭтоМаркировкаПерсонифицированнымиКиЗ = ЗначениеЗаполнено(GTINИзКиЗ);
		
		Если ЭтоМаркировкаПерсонифицированнымиКиЗ
			И GTINИзКиЗ <> GTIN Тогда
			
			ТекстСообщения = НСтр("ru = 'Выбранный КиЗ предназначен для маркировки товаров с GTIN %GTINИзКиЗ%, его нельзя использовать для маркировки товара с GTIN %GTIN%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%GTINИзКиЗ%", GTINИзКиЗ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%GTIN%", GTIN);
			
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		ЭтоМаркировкаОстатковГИСМ = Параметры.ЭтоМаркировкаОстатков;
	КонецЕсли;
	
	РежимГИСМ = ИнтеграцияГИСМУНФ.ЭтоГИСМНоменклатура(Номенклатура);
	НастроитьРежимГИСМ();
	//- ГИСМ
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		
		Элементы.ВыборОстатков.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.ГруппаСтрелки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		Элементы.ГруппаСтрелки.Ширина = 0;
		
		Элементы.ВыбратьНомер.Заголовок = НСтр("ru = 'Выбрать'");
		Элементы.ВыбратьНомер.Ширина = 0;
		Элементы.ВыбратьНомер.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Элементы.ВыбратьНомер.Картинка = БиблиотекаКартинок.ПереместитьВниз;
		
		Элементы.УбратьНомер.Заголовок = НСтр("ru = 'Отменить'");
		Элементы.УбратьНомер.Ширина = 0;
		Элементы.УбратьНомер.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Элементы.УбратьНомер.Картинка = БиблиотекаКартинок.ПереместитьВверх;
		
		Элементы.ГруппаКнопкиНовые.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
		Элементы.ГруппаКнопки.Видимость = Ложь;
		Элементы.ВыбратьМобильный.Видимость = Истина;
	КонецЕсли;
	
	ЕдиницаИзмеренияСрокаГодности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмеренияСрокаГодности");
	СрокГодности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "СрокГодности");
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаСерииОстатки()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапросПереопределяемый.Серия.Продан КАК Продан,
	|	ВложенныйЗапросПереопределяемый.Серия КАК Серия,
	|	СУММА(ВложенныйЗапросПереопределяемый.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		СерииНоменклатурыОстатки.Серия КАК Серия,
	|		СерииНоменклатурыОстатки.КоличествоОстаток КАК Количество,
	|		1 КАК Поле1
	|	ИЗ
	|		РегистрНакопления.СерииНоменклатуры.Остатки(
	|				,
	|				Организация = &Организация
	|					И Номенклатура = &Номенклатура
	|					И Характеристика = &Характеристика
	|					И Партия = &Партия
	|					И (&ВсеСклады
	|						ИЛИ СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|					И (&ВсеЯчейки
	|						ИЛИ Ячейка = &Ячейка)
	|					И НЕ Серия В (&СписокВыбранных)) КАК СерииНоменклатурыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СерииНоменклатуры.Серия,
	|		СерииНоменклатуры.Количество,
	|		2
	|	ИЗ
	|		РегистрНакопления.СерииНоменклатуры КАК СерииНоменклатуры
	|	ГДЕ
	|		СерииНоменклатуры.Регистратор = &ЭтотДокумент
	|		И НЕ СерииНоменклатуры.Серия В (&СписокВыбранных)
	|		И СерииНоменклатуры.Серия.Владелец = &Номенклатура
	|		И СерииНоменклатуры.Организация = &Организация
	|		И СерииНоменклатуры.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СерииНоменклатурыКПоступлениюОстатки.Серия,
	|		СерииНоменклатурыКПоступлениюОстатки.КоличествоОстаток,
	|		3
	|	ИЗ
	|		РегистрНакопления.СерииНоменклатурыКПоступлению.Остатки(
	|				,
	|				Организация = &Организация
	|					И Номенклатура = &Номенклатура
	|					И Характеристика = &Характеристика
	|					И Партия = &Партия
	|					И (&ВсеСклады
	|						ИЛИ СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|					И НЕ Серия В (&СписокВыбранных)
	|					И &ЭтоПриходныйОрдер) КАК СерииНоменклатурыКПоступлениюОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СерииНоменклатурыКПоступлению.Серия,
	|		-СерииНоменклатурыКПоступлению.Количество,
	|		4
	|	ИЗ
	|		РегистрНакопления.СерииНоменклатурыКПоступлению КАК СерииНоменклатурыКПоступлению
	|	ГДЕ
	|		СерииНоменклатурыКПоступлению.Регистратор = &ЭтотДокумент
	|		И НЕ СерииНоменклатурыКПоступлению.Серия В (&СписокВыбранных)
	|		И СерииНоменклатурыКПоступлению.Серия.Владелец = &Номенклатура
	|		И &ЭтоПриходныйОрдер
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СерииНоменклатурыКРасходуОстатки.Серия,
	|		СерииНоменклатурыКРасходуОстатки.КоличествоОстаток,
	|		5
	|	ИЗ
	|		РегистрНакопления.СерииНоменклатурыКРасходу.Остатки(
	|				,
	|				Организация = &Организация
	|					И Номенклатура = &Номенклатура
	|					И Характеристика = &Характеристика
	|					И Партия = &Партия
	|					И (&ВсеСклады
	|						ИЛИ СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|					И НЕ Серия В (&СписокВыбранных)
	|					И &ЭтоРасходныйОрдер) КАК СерииНоменклатурыКРасходуОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СерииНоменклатурыКРасходу.Серия,
	|		СерииНоменклатурыКРасходу.Количество,
	|		6
	|	ИЗ
	|		РегистрНакопления.СерииНоменклатурыКРасходу КАК СерииНоменклатурыКРасходу
	|	ГДЕ
	|		СерииНоменклатурыКРасходу.Регистратор = &ЭтотДокумент
	|		И НЕ СерииНоменклатурыКРасходу.Серия В (&СписокВыбранных)
	|		И СерииНоменклатурыКРасходу.Серия.Владелец = &Номенклатура
	|		И &ЭтоРасходныйОрдер) КАК ВложенныйЗапросПереопределяемый
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапросПереопределяемый.Серия,
	|	ВложенныйЗапросПереопределяемый.Серия.Продан";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаСерииНоменклатуры()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Серия КАК Серия,
	|	ВложенныйЗапрос.Продан КАК Продан,
	|	1 КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		СправочникСерииНоменклатуры.Ссылка КАК Серия,
	|		СправочникСерииНоменклатуры.Продан КАК Продан
	|	ИЗ
	|		Справочник.СерииНоменклатуры КАК СправочникСерииНоменклатуры
	|	ГДЕ
	|		СправочникСерииНоменклатуры.Владелец = &Номенклатура
	|		И НЕ СправочникСерииНоменклатуры.Ссылка В (&СписокВыбранных)
	|		И ВЫБОР
	|				КОГДА &ПоказатьПроданные
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ НЕ СправочникСерииНоменклатуры.Продан
	|			КОНЕЦ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СерииНоменклатуры.Серия,
	|		СерииНоменклатуры.Серия.Продан
	|	ИЗ
	|		РегистрНакопления.СерииНоменклатуры КАК СерииНоменклатуры
	|	ГДЕ
	|		СерииНоменклатуры.Регистратор = &ЭтотДокумент
	|		И НЕ СерииНоменклатуры.Серия В (&СписокВыбранных)
	|		И СерииНоменклатуры.Серия.Владелец = &Номенклатура) КАК ВложенныйЗапрос";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СерииСерия.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СерииНоменклатуры.Серия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Истина, Ложь, Ложь, Ложь, ));
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Новый'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СерииСерия.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СерииНоменклатуры.Серия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Зарегистрированный'"));
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.СерииНоменклатуры.Серия", Справочники.СерииНоменклатуры.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "СерииНоменклатурыНовыеДатаПроизводства,СерииНоменклатурыНовыеГоденДо");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);

КонецПроцедуры

&НаСервере
Функция СохранитьВводСерийСервер()
	
	ТЗСерийНоменклатуры = Объект.СерииНоменклатуры.Выгрузить();
	Объект.СерииНоменклатуры.Загрузить(ТЗСерийНоменклатуры);
	
	Для Каждого СтрокаТаблицы Из Объект.СерииНоменклатуры Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Серия) Тогда
			
			СправочникОбъект                = Справочники.СерииНоменклатуры.СоздатьЭлемент();
			СправочникОбъект.Владелец		= Номенклатура;
			СправочникОбъект.Наименование	= СтрокаТаблицы.НовыйНомер;
			СправочникОбъект.ГоденДо = СтрокаТаблицы.ГоденДо;
			СправочникОбъект.ДатаПроизводства = СтрокаТаблицы.ДатаПроизводства;
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.НомерКИЗГИСМ) Тогда
				СправочникОбъект.Наименование = СтрокаТаблицы.НомерКИЗГИСМ;
				СправочникОбъект.НомерКиЗГИСМ = СтрокаТаблицы.НомерКИЗГИСМ;
				ЗаполнитьЗначенияСвойств(СправочникОбъект, СтрокаТаблицы);
			КонецЕсли;
			
			Попытка
				СправочникОбъект.Записать();	
			Исключение
				Сообщить(ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
			
			СтрокаТаблицы.Серия = СправочникОбъект.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Объект.СерииНоменклатуры.Выгрузить(), ЭтаФорма.УникальныйИдентификаторФормыВладельца);
	Модифицированность = Ложь;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура ЗаполнитьЗапасы(Запасы)
	
	Номенклатура = Запасы.Номенклатура;
	Характеристика = Запасы.Характеристика;
	Если Запасы.Свойство("Партия") Тогда
		Партия = Запасы.Партия;
	КонецЕсли;
	Если Запасы.Свойство("ЕдиницаИзмерения") Тогда
		ЕдиницаИзмерения = Запасы.ЕдиницаИзмерения;
		КоличествоВДокументе = Запасы.Количество * Запасы.Коэффициент;
	Иначе
		КоличествоВДокументе = Запасы.Количество;
	КонецЕсли;
	
	Если Запасы.Свойство("КлючСвязи") Тогда
		КлючСвязи = Запасы.КлючСвязи;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
	
	Если НЕ ПроверитьМеткиНаНеобходимостьЗаписать() Тогда
		Возврат;
	КонецЕсли;
	
	СохраненоУспешно = СохранитьВводСерийСервер();
	Если СохраненоУспешно Тогда
	
		СтруктураВозврата = Новый Структура("КлючСтроки, АдресВоВременномХранилище, ЭтоОприходование", КлючСвязи, АдресВоВременномХранилище, ЭтоОприходование);
		Оповестить("ПодборСерий", СтруктураВозврата, 
			?(УникальныйИдентификаторФормыВладельца = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"), Неопределено, УникальныйИдентификаторФормыВладельца)
			);
		Закрыть();
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ РежимПодбора И НЕ ЗавершениеРаботы Тогда
		СохранитьНастройки();
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()

	ХранилищеСистемныхНастроек.Сохранить(ЭтотОбъект.ИмяФормы, ЭтотОбъект.ИмяФормы + "_ШаблонСерииНоменклатуры",
		ЭтотОбъект.ШаблонСерииНоменклатуры);

КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()

	ЭтотОбъект.ШаблонСерииНоменклатуры = ХранилищеСистемныхНастроек.Загрузить(ЭтотОбъект.ИмяФормы, ЭтотОбъект.ИмяФормы
		+ "_ШаблонСерииНоменклатуры");

	Элементы.СерииНомер.Маска = СерииНоменклатурыУНФКлиентСервер.СтрокаМаскиПоШаблону(ШаблонСерииНоменклатуры);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//+ГИСМ
	ИдетЗаписьМетки = Ложь;
	
	Если ПодключатьСчитывательRFID Тогда
		ПоддерживаемыеТипыОборудования = "СчитывательRFID";
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект,
			ПоддерживаемыеТипыОборудования);
	КонецЕсли;
	
	//-ГИСМ
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СерииОстаткиПриАктивизацииСтроки(Элемент)
	
	КоличествоВыделено = Элементы.СерииОстатки.ВыделенныеСтроки.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура СерииНоменклатурыНовыеДатаПроизводстваПриИзменении(Элемент)
	
	Если Элементы.СерииНоменклатурыНовыеГоденДо.Видимость И СрокГодности > 0 Тогда
		ТекущиеДанные = Элементы.СерииНоменклатурыНовые.ТекущиеДанные;
		ТекущиеДанные.ГоденДо = СерииНоменклатурыУНФКлиентСервер.ГоденДоПоДатеПроизводства(ТекущиеДанные.ДатаПроизводства, СрокГодности, ЕдиницаИзмеренияСрокаГодности)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СерииНоменклатурыНовыеГоденДоПриИзменении(Элемент)
	
	Если Элементы.СерииНоменклатурыНовыеДатаПроизводства.Видимость И СрокГодности > 0 Тогда
		ТекущиеДанные = Элементы.СерииНоменклатурыНовые.ТекущиеДанные;
		ТекущиеДанные.ДатаПроизводства = СерииНоменклатурыУНФКлиентСервер.ДатаПроизводстваПоГоденДо(ТекущиеДанные.ГоденДо, СрокГодности, ЕдиницаИзмеренияСрокаГодности)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВычислитьМаксимальныйНомерИКоличество()
	
	МаксимальныйНомерИзСправочника = Справочники.СерииНоменклатуры.ВычислитьМаксимальныйНомерСерии(Номенклатура, ШаблонСерииНоменклатуры);
	МаксимальныйНомерВДокументе = 0;
	Для каждого стр Из Объект.СерииНоменклатуры Цикл
		
		Если НЕ ЗначениеЗаполнено(стр.Серия) И стр.СерияЧисло=0 И ЗначениеЗаполнено(стр.НовыйНомер) Тогда
			ШаблонСерииНоменклатурыСтрокой = ?(ЗначениеЗаполнено(ШаблонСерииНоменклатуры),ШаблонСерииНоменклатуры,"########");
			
			стр.СерияЧисло = Справочники.СерииНоменклатуры.СерияЧислоПоШаблону(стр.НовыйНомер, ШаблонСерииНоменклатурыСтрокой);
		
		КонецЕсли;
		
		МаксимальныйНомерВДокументе = Макс(МаксимальныйНомерВДокументе, стр.СерияЧисло);
	КонецЦикла;
	
	Номер = Макс(МаксимальныйНомерВДокументе,МаксимальныйНомерИзСправочника);
	
	Возврат Номер;
	
КонецФункции

&НаСервере
Процедура СгенерироватьСерииНоменклатурыСервер(КоличествоСгенерировать, НачальныйНомер = Неопределено)
	
	Если НачальныйНомер = Неопределено Тогда
		СледующийПоПорядкуНомер = ВычислитьМаксимальныйНомерИКоличество()+1;
	Иначе
		СледующийПоПорядкуНомер = НачальныйНомер;
	КонецЕсли;
	
	Для нСтроки=1 По КоличествоСгенерировать Цикл
	   	НовыйНомерСтруктура = ДобавитьСерияПоШаблону(СледующийПоПорядкуНомер);
		
		ТекущаяСтрока = Объект.СерииНоменклатуры.Добавить();
		ТекущаяСтрока.НовыйНомер = НовыйНомерСтруктура.НовыйНомер;
		ТекущаяСтрока.СерияЧисло = НовыйНомерСтруктура.НовыйНомерЧисло;
		
		Если Элементы.СерииНоменклатурыНовыеДатаПроизводства.Видимость И ЗначениеЗаполнено(ДатаПроизводстваПриГенерацииСерий) Тогда
			Если ТочностьУказанияСрокаГодностиСерии = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоДней Тогда
				ТекущаяСтрока.ДатаПроизводства = НачалоДня(ДатаПроизводстваПриГенерацииСерий);
			Иначе
				ТекущаяСтрока.ДатаПроизводства = НачалоЧаса(ДатаПроизводстваПриГенерацииСерий);
			КонецЕсли;
		КонецЕсли;
		
		СледующийПоПорядкуНомер = СледующийПоПорядкуНомер+1;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция ДобавитьСерияСервер()

	СледующийПоПорядкуНомер = ВычислитьМаксимальныйНомерИКоличество()+1;
	Возврат ДобавитьСерияПоШаблону(СледующийПоПорядкуНомер);
	
КонецФункции

&НаСервере
Функция ДобавитьСерияПоШаблону(ТекущийМаксимальныйНомер)
		
	НомерЧисло = ТекущийМаксимальныйНомер;
	
	Если ЗначениеЗаполнено(ШаблонСерииНоменклатуры) Тогда
		// Длина цифровой части номера - не более 13 символов
		ЦифрВШаблоне = СтрЧислоВхождений(ШаблонСерииНоменклатуры, СерииНоменклатурыУНФКлиентСервер.СимволЧисла());
		НомерСНулями = Формат(НомерЧисло, "ЧЦ="+ЦифрВШаблоне+"; ЧВН=; ЧГ=");
		
		НовыйНомерПоШаблону = "";
		НомерСимволаСН = 1;
		// Заполняем шаблон
		Для н=1 По СтрДлина(ШаблонСерииНоменклатуры) Цикл
			Символ = Сред(ШаблонСерииНоменклатуры,н,1);
			Если Символ=СерииНоменклатурыУНФКлиентСервер.СимволЧисла() Тогда
				НовыйНомерПоШаблону = НовыйНомерПоШаблону+Сред(НомерСНулями,НомерСимволаСН,1);
				НомерСимволаСН = НомерСимволаСН+1;
			Иначе
				НовыйНомерПоШаблону = НовыйНомерПоШаблону+Символ;
			КонецЕсли;
		КонецЦикла;
		НовыйНомер = НовыйНомерПоШаблону;
	Иначе
		НовыйНомер = Формат(НомерЧисло, "ЧЦ=8; ЧВН=; ЧГ=");
	КонецЕсли;
	
	Возврат Новый Структура("НовыйНомер, НовыйНомерЧисло", НовыйНомер, НомерЧисло);
	
КонецФункции

&НаКлиенте
Процедура ДобавитьСерия(Команда)
	
	НовыйНомерСтруктура = ДобавитьСерияСервер();
	
	Элементы.СерииНоменклатурыНовые.ДобавитьСтроку();
	ТекущиеДанные = Элементы.СерииНоменклатурыНовые.ТекущиеДанные;
	ТекущиеДанные.НовыйНомер = НовыйНомерСтруктура.НовыйНомер;
	ТекущиеДанные.СерияЧисло = НовыйНомерСтруктура.НовыйНомерЧисло;
	ТекущиеДанные.Количество = 1;
	
	Если Элементы.СерииНоменклатурыНовыеДатаПроизводства.Видимость И ЗначениеЗаполнено(ДатаПроизводстваПриГенерацииСерий) Тогда
		Если ТочностьУказанияСрокаГодностиСерии = ПредопределенноеЗначение("Перечисление.ТочностиУказанияСрокаГодности.СТочностьюДоДней") Тогда
			ТекущиеДанные.ДатаПроизводства = НачалоДня(ДатаПроизводстваПриГенерацииСерий);
			ТекущиеДанные.ГоденДо = СерииНоменклатурыУНФКлиентСервер.ГоденДоПоДатеПроизводства(ТекущиеДанные.ДатаПроизводства, СрокГодности, ЕдиницаИзмеренияСрокаГодности)
		Иначе
			ТекущиеДанные.ДатаПроизводства = НачалоЧаса(ДатаПроизводстваПриГенерацииСерий);
			ТекущиеДанные.ГоденДо = СерииНоменклатурыУНФКлиентСервер.ГоденДоПоДатеПроизводства(ТекущиеДанные.ДатаПроизводства, СрокГодности, ЕдиницаИзмеренияСрокаГодности)
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СерииНоменклатурыНовые.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура НайтиЗарегистрированныеСерии()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СерииНоменклатуры.Серия КАК Серия,
	|	СерииНоменклатуры.НовыйНомер КАК НовыйНомер,
	|	ВЫБОР
	|		КОГДА СерииНоменклатуры.Серия = """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НомерНеУказан,
	|	СерииНоменклатуры.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ НовыеСерииНоменклатуры
	|ИЗ
	|	&СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка КАК Серия,
	|	НовыеСерииНоменклатуры.НомерСтроки,
	|	СерииНоменклатуры.Наименование КАК НовыйНомер
	|ИЗ
	|	НовыеСерииНоменклатуры КАК НовыеСерииНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО НовыеСерииНоменклатуры.НовыйНомер = СерииНоменклатуры.Наименование
	|ГДЕ
	|	СерииНоменклатуры.Владелец = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("СерииНоменклатуры",Объект.СерииНоменклатуры.Выгрузить());

	Выборка = Запрос.Выполнить().Выбрать();
			
	Пока Выборка.Следующий() Цикл
		
		СтрокаСерии = Объект.СерииНоменклатуры[Выборка.НомерСтроки-1];
		СтрокаСерии.Серия = Выборка.Серия;
		
		СтрокаСерии.НовыйНомер = СтрокаСерии.Серия.Наименование;
		СтрокаСерии.ГоденДо = СтрокаСерии.Серия.ГоденДо;
		СтрокаСерии.ДатаПроизводства = СтрокаСерии.Серия.ДатаПроизводства;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СерииНомерПриИзменении(Элемент)
	
	ТекСтрока = Объект.СерииНоменклатуры.НайтиПоИдентификатору(Элементы.СерииНоменклатурыНовые.ТекущаяСтрока);
	Если ТекСтрока<>Неопределено Тогда
		ТекСтрока.Серия = Неопределено;
	КонецЕсли;
	НайтиЗарегистрированныеСерии();
	
КонецПроцедуры

&НаКлиенте
Процедура СерииНомерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьСериюОповещение = Новый ОписаниеОповещения("ВыбратьСериюЗавершение", ЭтотОбъект);
	
	СтруктураОтбора = Новый Структура("Отбор", Новый Структура("Владелец", ЭтотОбъект.Номенклатура));
	Если ЗначениеЗаполнено(Элементы.СерииНоменклатурыНовые.ТекущиеДанные.Серия) Тогда
		СтруктураОтбора.Вставить("ТекущаяСтрока", Элементы.СерииНоменклатурыНовые.ТекущиеДанные.Серия);
	КонецЕсли;
	ОткрытьФорму("Справочник.СерииНоменклатуры.ФормаВыбора", СтруктураОтбора, ЭтотОбъект,,,,ВыбратьСериюОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСериюЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия<>Неопределено Тогда
		ТекСтрока = Объект.СерииНоменклатуры.НайтиПоИдентификатору(Элементы.СерииНоменклатурыНовые.ТекущаяСтрока);
		ТекСтрока.Серия = РезультатЗакрытия;
		
		СтруктураДанных = СтруктураДанныхСерии(РезультатЗакрытия);
		
		ТекСтрока.НовыйНомер = СтруктураДанных.Номер;
		ТекСтрока.ГоденДо = СтруктураДанных.ГоденДо;
		ТекСтрока.ДатаПроизводства = СтруктураДанных.ДатаПроизводства;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНомер(Команда)
	
	Если Элементы.СерииОстатки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.СерииОстатки.ВыделенныеСтроки.Количество() > 1 Тогда
		ДобавитьСерияВыделенные(Элементы.СерииОстатки.ВыделенныеСтроки);
	Иначе
		ДобавитьСерияВыбранный(Элементы.СерииОстатки.ТекущиеДанные.Серия);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСерияВыделенные(СерииНоменклатуры)
	
	Для Каждого СерияНоменклатуры Из СерииНоменклатуры Цикл
		Серия = Элементы.СерииОстатки.ДанныеСтроки(СерияНоменклатуры).Серия;
		СписокВыбранных.Добавить(Серия);
	КонецЦикла; 
	
	ДобавитьВыделенные(СписокВыбранных);
	
	Если ИспользоватьУникальныеСерии Тогда
		СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("СписокВыбранных",СписокВыбранных.ВыгрузитьЗначения());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыделенные(СписокВыбранных)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка КАК Серия,
	|	СерииНоменклатуры.Наименование КАК НовыйНомер,
	|	1 КАК Количество
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.Ссылка В(&СписокВыбранных)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НовыйНомер";
	
	Запрос.УстановитьПараметр("СписокВыбранных", СписокВыбранных);
	
	Если Не ИспользоватьУникальныеСерии Тогда
		Результат = Запрос.Выполнить().Выбрать();
		ПараметрыПоиска = Новый Структура("Серия");
		Пока Результат.Следующий() Цикл
			
			ПараметрыПоиска.Серия = Результат.Серия;
			НайденныеСтроки = Объект.СерииНоменклатуры.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() Тогда
				НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + 1;
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Объект.СерииНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
			
		КонецЦикла;
		
	Иначе
		Результат = Запрос.Выполнить().Выгрузить();
		Объект.СерииНоменклатуры.Загрузить(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КонтролироватьОстатки(СтруктурнаяЕдиница, Организация)
	
	Если СтруктурнаяЕдиница = Неопределено Тогда
		Если ЗначениеЗаполнено(Номенклатура.ПолитикаУчетаСерий) Тогда
			Возврат ?(Номенклатура.ПолитикаУчетаСерий.ТипПолитики = Перечисления.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий, Истина, Ложь);
		Иначе
			Возврат ПолучитьФункциональнуюОпцию("КонтрольОстатковСерийНоменклатуры");
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЕСТЬNULL(ПолитикиУчетаСерий.ПолитикаУчетаСерий.ТипПолитики, Номенклатура.ПолитикаУчетаСерий.ТипПолитики) КАК ТипПолитики
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО Номенклатура.Ссылка = ПолитикиУчетаСерий.Владелец
	|ГДЕ
	|	ПолитикиУчетаСерий.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И ПолитикиУчетаСерий.Организация = &Организация
	|	И Номенклатура.Ссылка = &Номенклатура";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Не Результат.Количество() Тогда
		Возврат ?(Номенклатура.ПолитикаУчетаСерий.ТипПолитики = Перечисления.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий, Истина, Ложь);
	Иначе
		Возврат ?(Результат[0].ТипПолитики = Перечисления.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий, Истина, Ложь);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьСерияВыбранный(Серия)
	
	СписокВыбранных.Добавить(Серия);
	
	Если ИспользоватьУникальныеСерии Тогда
		
		НоваяСтрока = Объект.СерииНоменклатуры.Добавить();
		НоваяСтрока.Серия = Серия;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.НовыйНомер = Строка(Серия);
		
		СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("СписокВыбранных",СписокВыбранных.ВыгрузитьЗначения());
		
	Иначе
		
		ПараметрыПоиска = Новый Структура("Серия", Серия);
		НайденныеСтроки = Объект.СерииНоменклатуры.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеСтроки.Количество() Тогда
			НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + 1;
		Иначе
			НоваяСтрока = Объект.СерииНоменклатуры.Добавить();
			НоваяСтрока.Серия = Серия;
			НоваяСтрока.Количество = 1;
			НоваяСтрока.НовыйНомер = Строка(Серия);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьНомер(Команда)

	Если Элементы.СерииНоменклатурыВыбранные.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.СерииНоменклатурыВыбранные.ВыделенныеСтроки.Количество() > 1 Тогда
		УбратьСерияВыделенные(Элементы.СерииНоменклатурыВыбранные.ВыделенныеСтроки);
	Иначе
		ВыбранныйСерия = Элементы.СерииНоменклатурыВыбранные.ТекущиеДанные.Серия;
		УбратьСерияВыбранный(ВыбранныйСерия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНомер(Команда)
	
	Если Элементы.СерииНоменклатурыВыбранные.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.СерииНоменклатурыВыбранные.ВыделенныеСтроки.Количество() > 1 Тогда
		УбратьСерияВыделенные(Элементы.СерииНоменклатурыВыбранные.ВыделенныеСтроки, Истина);
	Иначе
		ВыбранныйСерия = Элементы.СерииНоменклатурыВыбранные.ТекущиеДанные.Серия;
		УбратьСерияВыбранный(ВыбранныйСерия, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьСерияВыделенные(СерииНоменклатуры, УдалитьСтроку = Ложь)
	
	МассивВыделенные = Новый Массив;
	Для каждого элСерия Из СерииНоменклатуры Цикл
		МассивВыделенные.Добавить(Элементы.СерииНоменклатурыВыбранные.ДанныеСтроки(элСерия).Серия);
	КонецЦикла; 
	
	УбратьВыделенные(МассивВыделенные, УдалитьСтроку);
	
КонецПроцедуры

&НаСервере
Процедура УбратьВыделенные(МассивВыделенные, УдалитьСтроку = Ложь)
	
	Если Не ИспользоватьУникальныеСерии И Не УдалитьСтроку Тогда
		
		ПараметрыПоиска = Новый Структура("Серия");
		
		СтрокиКУдалению = Новый Массив;
		
		Для Каждого ВыделеннаяСерия Из МассивВыделенные Цикл
			
			ПараметрыПоиска.Серия = ВыделеннаяСерия;
			НайденныеСтроки = Объект.СерииНоменклатуры.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() Тогда
				Если НайденныеСтроки[0].Количество > 1 Тогда 
					НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество - 1;
				Иначе
					Объект.СерииНоменклатуры.Удалить(НайденныеСтроки[0]);
					НайденныйЭлемент = СписокВыбранных.НайтиПоЗначению(ВыделеннаяСерия);
					Если НайденныйЭлемент <> Неопределено Тогда
						СписокВыбранных.Удалить(НайденныйЭлемент);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка КАК Серия,
	|	СерииНоменклатуры.Наименование КАК НовыйНомер
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.Ссылка В(&СписокОставить) И НЕ СерииНоменклатуры.Ссылка В(&СписокУдалить)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НовыйНомер";
	
	Запрос.УстановитьПараметр("СписокУдалить", МассивВыделенные);
	Запрос.УстановитьПараметр("СписокОставить", Объект.СерииНоменклатуры.Выгрузить().ВыгрузитьКолонку("Серия"));
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Объект.СерииНоменклатуры.Загрузить(Результат);
	
	МассивСерийных = Результат.ВыгрузитьКолонку("Серия");
	СписокВыбранных.ЗагрузитьЗначения(МассивСерийных);
	
	Если ИспользоватьУникальныеСерии Тогда
		СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("СписокВыбранных", МассивСерийных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьСерияВыбранный(Серия, УдалитьСтроку = Ложь)

	Если Не ИспользоватьУникальныеСерии И Не УдалитьСтроку Тогда
		
		ПараметрыПоиска = Новый Структура("Серия", Серия);
		НайденныеСтроки = Объект.СерииНоменклатуры.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеСтроки.Количество() Тогда
			Если НайденныеСтроки[0].Количество > 1 Тогда
				НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество - 1;
			Иначе
				
				Объект.СерииНоменклатуры.Удалить(Элементы.СерииНоменклатурыВыбранные.ТекущиеДанные.НомерСтроки - 1);
				НайденныйЭлемент = СписокВыбранных.НайтиПоЗначению(Серия);
				
				
				Если НайденныйЭлемент<>Неопределено Тогда
					СписокВыбранных.Удалить(НайденныйЭлемент);
				КонецЕсли;
				
				Если Элементы.СерииОстатки.ТекущаяСтрока = Неопределено Тогда
					Элементы.СерииОстатки.ТекущаяСтрока = 1;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		Возврат
	КонецЕсли;
	
	Объект.СерииНоменклатуры.Удалить(Элементы.СерииНоменклатурыВыбранные.ТекущиеДанные.НомерСтроки - 1);
	
	НайденныйЭлемент = СписокВыбранных.НайтиПоЗначению(Серия);
	Если НайденныйЭлемент<>Неопределено Тогда
		СписокВыбранных.Удалить(НайденныйЭлемент);
		Если ИспользоватьУникальныеСерии Тогда
			СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("СписокВыбранных", СписокВыбранных.ВыгрузитьЗначения());
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.СерииОстатки.ТекущаяСтрока = Неопределено Тогда
		Элементы.СерииОстатки.ТекущаяСтрока = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонСерииНоменклатурыПриИзменении(Элемент)
	
	Элементы.СерииНомер.Маска = СерииНоменклатурыУНФКлиентСервер.СтрокаМаскиПоШаблону(ШаблонСерииНоменклатуры);

КонецПроцедуры

&НаКлиенте
Процедура СерииОстаткиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбратьНомер(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СерииВыбранныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ИспользоватьУникальныеСерии Тогда
		УбратьНомер(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроданныеПриИзменении(Элемент)
	
	Элементы.СерииОстаткиПродан.Видимость = ПоказатьПроданные;
	СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("ПоказатьПроданные", ПоказатьПроданные);
	
КонецПроцедуры

&НаКлиенте
Процедура СерииВыбранныеНовыйНомерОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.СерииНоменклатуры.ФормаОбъекта", Новый Структура("Ключ",Элементы.СерииНоменклатурыВыбранные.ТекущиеДанные.Серия));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСерия(Команда)
	
	Если Элементы.СерииНоменклатурыВыбранные.ТекущиеДанные <> Неопределено Тогда
	
		ОткрытьФорму("Справочник.СерииНоменклатуры.ФормаОбъекта", Новый Структура("Ключ",Элементы.СерииНоменклатурыВыбранные.ТекущиеДанные.Серия));
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыполнитьНаСервере()

	Если СерииНоменклатурыИзменениеСтрокДействие = Элементы.СерииНоменклатурыИзменениеСтрокДействие.СписокВыбора[0].Значение Тогда
		
		СгенерироватьСерииНоменклатурыСервер(СерииНоменклатурыИзменениеСтрокКоличество);
		
	ИначеЕсли СерииНоменклатурыИзменениеСтрокДействие = Элементы.СерииНоменклатурыИзменениеСтрокДействие.СписокВыбора[1].Значение Тогда
		Элементы.СерииНоменклатурыИзменениеСтрокОт.Видимость = Истина;
		
		Для Серия=СерииНоменклатурыИзменениеСтрокОт По СерииНоменклатурыИзменениеСтрокДо Цикл
		   	НовыйНомерСтруктура = ДобавитьСерияПоШаблону(Серия);
			
			ТекущаяСтрока = Объект.СерииНоменклатуры.Добавить();
			ТекущаяСтрока.НовыйНомер = НовыйНомерСтруктура.НовыйНомер;
			ТекущаяСтрока.СерияЧисло = НовыйНомерСтруктура.НовыйНомерЧисло;
			
			Если Элементы.СерииНоменклатурыНовыеДатаПроизводства.Видимость И ЗначениеЗаполнено(ДатаПроизводстваПриГенерацииСерий) Тогда
				Если ТочностьУказанияСрокаГодностиСерии = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоДней Тогда
					ТекущаяСтрока.ДатаПроизводства = НачалоДня(ДатаПроизводстваПриГенерацииСерий);
				Иначе
					ТекущаяСтрока.ДатаПроизводства = НачалоЧаса(ДатаПроизводстваПриГенерацииСерий);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		НайтиЗарегистрированныеСерии();
	КонецЕсли;
	
	ТЗСерийНоменклатуры = Объект.СерииНоменклатуры.Выгрузить();
	ТЗСерийНоменклатуры.Свернуть("Серия, НовыйНомер");
	Объект.СерииНоменклатуры.Загрузить(ТЗСерийНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВыполнить(Команда)
	
	ДобавитьВыполнитьНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтмена(Команда)
	
	Элементы.ГруппаЗаполнить.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНажатие(Команда)
	
	Элементы.ГруппаЗаполнить.Видимость = НЕ Элементы.ГруппаЗаполнить.Видимость;
	СерииНоменклатурыИзменениеСтрокДействие = Элементы.СерииНоменклатурыИзменениеСтрокДействие.СписокВыбора[0].Значение;
	СерииНоменклатурыИзменениеСтрокКоличество = Макс(КоличествоВДокументе - Объект.СерииНоменклатуры.Количество(), 1);
	
КонецПроцедуры

&НаКлиенте
Процедура СерииНоменклатурыИзменениеСтрокДействиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Элементы.СерииНоменклатурыИзменениеСтрокДействие.СписокВыбора[0].Значение Тогда
		Элементы.СерииНоменклатурыИзменениеСтрокКоличество.Видимость = Истина;
		Элементы.СерииНоменклатурыИзменениеСтрокОт.Видимость = Ложь;
		Элементы.СерииНоменклатурыИзменениеСтрокДо.Видимость = Ложь;
		СерииНоменклатурыИзменениеСтрокКоличество = Макс(КоличествоВДокументе - Объект.СерииНоменклатуры.Количество(), 1);
		
	ИначеЕсли ВыбранноеЗначение = Элементы.СерииНоменклатурыИзменениеСтрокДействие.СписокВыбора[1].Значение Тогда
		Элементы.СерииНоменклатурыИзменениеСтрокКоличество.Видимость = Ложь;
		Элементы.СерииНоменклатурыИзменениеСтрокОт.Видимость = Истина;
		Элементы.СерииНоменклатурыИзменениеСтрокДо.Видимость = Истина;
		
		ТекущийМаксимальныйНомер = ВычислитьМаксимальныйНомерИКоличество();
		СерииНоменклатурыИзменениеСтрокОт = ТекущийМаксимальныйНомер + 1;
		СерииНоменклатурыИзменениеСтрокДо = ТекущийМаксимальныйНомер + 1 + КоличествоВДокументе - Объект.СерииНоменклатуры.Количество();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СерииНомерОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.СерииНоменклатуры.ФормаОбъекта", Новый Структура("Ключ",Элементы.СерииНоменклатурыНовые.ТекущиеДанные.Серия));
	
КонецПроцедуры

&НаКлиенте
Процедура СерииВыбранныеПередНачаломИзменения(Элемент, Отказ)
	
	Если ИспользоватьУникальныеСерии Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СерииВыбранныеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	МассивСерийНоменклатуры = ПараметрыПеретаскивания.Значение;
	Для каждого стр Из МассивСерийНоменклатуры Цикл
		ДанныеСтроки = Элементы.СерииОстатки.ДанныеСтроки(стр);
		Если ДанныеСтроки<>Неопределено Тогда
			ДобавитьСерияВыбранный(ДанныеСтроки.Серия);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СерииНоменклатурыВыбранныеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ВыбранныйСерия = Элементы.СерииНоменклатурыВыбранные.ТекущиеДанные.Серия;
	УбратьСерияВыбранный(ВыбранныйСерия, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СерииНоменклатурыНовыеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.СерииНоменклатурыНовые.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат
		КонецЕсли;
		ТекущиеДанные.Количество = 1;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПоНаличию(Команда)
	
	Если Не ИспользоватьУникальныеСерии Тогда
		НужноВыбрать = КоличествоВДокументе - Объект.СерииНоменклатуры.Итог("Количество");
	Иначе
		НужноВыбрать = КоличествоВДокументе - Объект.СерииНоменклатуры.Количество();
	КонецЕсли;
	
	Если НужноВыбрать>0 Тогда
		ЗаполнитьСерииНоменклатурыПоНаличию(НужноВыбрать);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСерииНоменклатурыПоНаличию(ДобавитьКоличество)

	Запрос = Новый Запрос;
	Запрос.Текст = СерииНоменклатурыОстатки.ТекстЗапроса;
	
	Если ИспользоватьУникальныеСерии Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ ", "ВЫБРАТЬ ПЕРВЫЕ "+Формат(ДобавитьКоличество,"ЧГ=0")+" ");
	КонецЕсли;
	
	Для Каждого ПараметрЭлемент Из СерииНоменклатурыОстатки.Параметры.Элементы Цикл
		Запрос.УстановитьПараметр(Строка(ПараметрЭлемент.Параметр), ПараметрЭлемент.Значение);
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыПоиска = Новый Структура("Серия");
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ИспользоватьУникальныеСерии Тогда
			
			ПараметрыПоиска.Серия = Выборка.Серия;
			НайденныеСтроки = Объект.СерииНоменклатуры.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() Тогда
				
				Если НайденныеСтроки[0].Количество < Выборка.Количество() Тогда
					
					СвободныйОстаток = (Выборка.Количество - НайденныеСтроки[0].Количество);
					
					Если ДобавитьКоличество <= СвободныйОстаток Тогда
						НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + ДобавитьКоличество;
						Прервать;
					Иначе
						НайденныеСтроки[0].Количество = Выборка.Количество;
						ДобавитьКоличество = ДобавитьКоличество - СвободныйОстаток; 
					КонецЕсли;
					
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				
				НовСтр = Объект.СерииНоменклатуры.Добавить();
				НовСтр.Серия = Выборка.Серия;
				НовСтр.НовыйНомер = Строка(Выборка.Серия);
				
				Если Выборка.Количество >=  ДобавитьКоличество Тогда
					НовСтр.Количество = ДобавитьКоличество;
					Прервать;
				Иначе
					НовСтр.Количество = Выборка.Количество;
					ДобавитьКоличество = ДобавитьКоличество - Выборка.Количество;
				КонецЕсли;
				
				СписокВыбранных.Добавить(Выборка.Серия);
				
				Продолжить;
				
			КонецЕсли;
			
		Иначе
			
			НовСтр = Объект.СерииНоменклатуры.Добавить();
			НовСтр.Серия = Выборка.Серия;
			НовСтр.НовыйНомер = Строка(Выборка.Серия);
			НовСтр.Количество = 1;
			
			СписокВыбранных.Добавить(Выборка.Серия);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИспользоватьУникальныеСерии Тогда
		СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("СписокВыбранных",СписокВыбранных.ВыгрузитьЗначения());
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ВыборОстатков Тогда
		СписокВыбранных.Очистить();
		Для Каждого ВыбранныйНомер Из Объект.СерииНоменклатуры Цикл
			Если ЗначениеЗаполнено(ВыбранныйНомер.Серия) Тогда
				СписокВыбранных.Добавить(ВыбранныйНомер.Серия);
			КонецЕсли;
		КонецЦикла;
		
		Если ИспользоватьУникальныеСерии Тогда
			СерииНоменклатурыОстатки.Параметры.УстановитьЗначениеПараметра("СписокВыбранных",СписокВыбранных.ВыгрузитьЗначения());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПолученыСерииНоменклатурыПодбор", ЭтотОбъект);
	
	ПараметрыОтбора = Новый Структура("Владелец, ПометкаУдаления", Номенклатура, Ложь);
	ПараметрыОткрытия = Новый Структура("МножественныйВыбор, Отбор, ПоказатьПроданные", Истина, ПараметрыОтбора, ПоказыватьПроданныеПриПодборе);
	
	ОткрытьФорму("Справочник.СерииНоменклатуры.Форма.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект, , , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыСерииНоменклатурыПодбор(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("Серия");
	
	Если ТипЗнч(Результат) = тип("Массив") Тогда
		Для Каждого СтрокаСерии Из Результат Цикл
			
			ПараметрыПоиска.Серия = СтрокаСерии;
			НайденныеСтроки = Объект.СерииНоменклатуры.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() Тогда
				
				Если ИспользоватьУникальныеСерии Тогда
					НайденныеСтроки[0].Количество = 1;
				Иначе
					НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + 1;
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			СтруктураДанных = СтруктураДанныхСерии(СтрокаСерии);
			
			НоваяСтрока = Объект.СерииНоменклатуры.Добавить();
			
			НоваяСтрока.НовыйНомер = СтруктураДанных.Номер;
			НоваяСтрока.ГоденДо = СтруктураДанных.ГоденДо;
			НоваяСтрока.ДатаПроизводства = СтруктураДанных.ДатаПроизводства;
			НоваяСтрока.Серия = СтрокаСерии;
			НоваяСтрока.Количество = 1;
			
		КонецЦикла;
	Иначе
		
		ПараметрыПоиска.Серия = Результат;
		НайденныеСтроки = Объект.СерииНоменклатуры.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеСтроки.Количество() Тогда
			
			Если ИспользоватьУникальныеСерии Тогда
				НайденныеСтроки[0].Количество = 1;
			Иначе
				НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + 1;
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураДанных = СтруктураДанныхСерии(Результат);
		
		НоваяСтрока = Объект.СерииНоменклатуры.Добавить();
		НоваяСтрока.НовыйНомер = СтруктураДанных.Номер;
		НоваяСтрока.ГоденДо = СтруктураДанных.ГоденДо;
		НоваяСтрока.ДатаПроизводства = СтруктураДанных.ДатаПроизводства;
		НоваяСтрока.Серия = Результат;
		НоваяСтрока.Количество = 1;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураДанныхСерии(СтрокаСерии)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ДатаПроизводства", СтрокаСерии.ДатаПроизводства);
	СтруктураВозврата.Вставить("ГоденДо", СтрокаСерии.ГоденДо);
	СтруктураВозврата.Вставить("Номер", СтрокаСерии.Наименование);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура СерииНоменклатурыНовыеНомерКИЗГИСМПриИзменении(Элемент)
	
	ОчиститьСообщения(); 
	
	ТекущиеДанные = Элементы.СерииНоменклатурыНовые.ТекущиеДанные;
	ТекущиеДанные.Серия = Неопределено;
	ПолучитьИнформациюПоКиЗДобавитьСерию(ТекущиеДанные.НомерКИЗГИСМ, ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

#КонецОбласти

#Область ПоискПоШтрихкоду

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект,
		Новый Структура("ТекШтрихкод", ТекШтрихкод));
	
	#Если МобильныйКлиент Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду", , , , , , ОбработкаЗавершения);
	#Иначе
		ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодамВМассиве(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		МассивДанныхШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если МассивДанныхШтрихкода <> Неопределено
			И МассивДанныхШтрихкода.Количество() <> 0 Тогда
			
			Для Каждого ДанныеШтрихкода Из МассивДанныхШтрихкода Цикл
				
				Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
					ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
				КонецЕсли;
				ДанныеШтрихкода.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
				Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения)
					И ТипЗнч(ДанныеШтрихкода.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
					ДанныеШтрихкода.Вставить("Коэффициент", ДанныеШтрихкода.ЕдиницаИзмерения.Коэффициент);
				Иначе
					ДанныеШтрихкода.Вставить("Коэффициент", 1);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("ОтборТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));

	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение", ЭтотОбъект, Новый Структура("СтруктураДанные", СтруктураДанные));
			
			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам", ПараметрыОткрытия, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
		   
		    ТекШтрихкод.Вставить("Номенклатура", Номенклатура);
			ТекШтрихкод.Вставить("Характеристика", Характеристика);
			ТекШтрихкод.Вставить("Партия", Партия);
			ТекШтрихкод.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
			
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры <> ДанныеШтрихкода[0].ТипНоменклатуры Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры"
			, ТекШтрихкод.Штрихкод, ДанныеШтрихкода[0].Номенклатура, ДанныеШтрихкода[0].ТипНоменклатуры));
		ИначеЕсли НЕ (ДанныеШтрихкода[0].Номенклатура = Номенклатура И ДанныеШтрихкода[0].Характеристика = Характеристика 
			И ДанныеШтрихкода[0].Партия = Партия И ДанныеШтрихкода[0].ЕдиницаИзмерения = ЕдиницаИзмерения) Тогда
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			СтрокаСообщения = НСтр("ru = 'Считанный штрихкод привязан к другой номенклатуре: %1% %2% %3% %4%'");
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ДанныеШтрихкода.Номенклатура);
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ДанныеШтрихкода.Характеристика);
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ДанныеШтрихкода.Партия);
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%4%", ДанныеШтрихкода.ЕдиницаИзмерения);
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
			
		Иначе
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			УжеЕстьТакойЭлемент = Объект.СерииНоменклатуры.НайтиСтроки(Новый Структура("НовыйНомер",ТекШтрихкод.Штрихкод));
			Если УжеЕстьТакойЭлемент.Количество() = 0 Тогда
				НоваяСтрока = Объект.СерииНоменклатуры.Добавить();
				НоваяСтрока.Серия = ДанныеШтрихкода.Серия;
				НоваяСтрока.НовыйНомер = ТекШтрихкод.Штрихкод;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры) Экспорт
	
	Если СтруктураНоменклатуры = Неопределено Тогда Возврат КонецЕсли;
	
	ДанныеШтрихкода = СтруктураНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = СтруктураНоменклатуры.ТекШтрихкод;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	СтруктураДанные = Параметры.СтруктураДанные;
	
	Если СтруктураДанные.ОтборТипНоменклатуры <> ДанныеШтрихкода.ТипНоменклатуры Тогда
		ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.ТипНоменклатуры));
	ИначеЕсли НЕ (ДанныеШтрихкода.Номенклатура = Номенклатура И ДанныеШтрихкода.Характеристика = Характеристика 
		И ДанныеШтрихкода.Партия = Партия И ДанныеШтрихкода.ЕдиницаИзмерения = ЕдиницаИзмерения) Тогда
		
		СтрокаСообщения = НСтр("ru = 'Считанный штрихкод привязан к другой номенклатуре: %1% %2% %3% %4%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ДанныеШтрихкода.Номенклатура);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ДанныеШтрихкода.Характеристика);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ДанныеШтрихкода.Партия);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%4%", ДанныеШтрихкода.ЕдиницаИзмерения);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	Иначе
		
		УжеЕстьТакойЭлемент = Объект.СерииНоменклатуры.НайтиСтроки(Новый Структура("НовыйНомер",ТекШтрихкод.Штрихкод));
		Если УжеЕстьТакойЭлемент.Количество() = 0 Тогда
			НоваяСтрока = Объект.СерииНоменклатуры.Добавить();
			НоваяСтрока.Серия = ДанныеШтрихкода.Серия;
			НоваяСтрока.НовыйНомер = ТекШтрихкод.Штрихкод;
		КонецЕсли;
	КонецЕсли;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов)
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов);
	НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды);
		СтруктураПараметров.Вставить("НоменклатураВладелец", Номенклатура);
		СтруктураПараметров.Вставить("РегистрацияСерии", Истина);
		
		ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",СтруктураПараметров, ЭтотОбъект,,,,Оповещение);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			УжеЕстьТакойЭлемент = МассивШтрихкодов.Найти(ЭлементМассива);
			Если УжеЕстьТакойЭлемент = Неопределено Тогда
				МассивШтрихкодов.Добавить(ЭлементМассива);
			КонецЕсли;
		КонецЦикла;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ТекущиеДанные = Элементы.СерииНоменклатурыНовые.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор(); 	
	Иначе
		ИдентификаторТекущейСтроки = Неопределено;
	КонецЕсли;

	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Данные = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			ПолученыШтрихкоды(Данные);
		КонецЕсли;

		Если ИмяСобытия = "RFID" Тогда
			Если Не ИдетЗаписьМетки И RFIDКлиент.ДляОбработкиRFIDНуженСерверныйВызов(Параметр, ЭтаФорма) Тогда
				РезультатОбработки = ОбработатьСчитываниеRFID(Параметр, ИдентификаторТекущейСтроки);
			КонецЕсли;
		КонецЕсли;

		Если РезультатОбработки <> Неопределено Тогда
			Если РезультатОбработки.ИдентификаторТекущейСтроки <> Неопределено Тогда
				Элементы.СерииНоменклатурыНовые.ТекущаяСтрока = РезультатОбработки.ИдентификаторТекущейСтроки;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ЗаписьRFID_Серии" Тогда
		ДанныеСерии = Параметр;
		ТекущиеДанные.RFIDEPC = ДанныеСерии.RFIDEPC;
		СообщениеОбОшибке = "";
		RFIDКлиентСервер.ЗаполнитьФлагиРаботыСМеткой(ТекущиеДанные, GTIN, Неопределено, НастройкиИспользованияСерий,
			ЭтоМаркировкаПерсонифицированнымиКиЗ, СообщениеОбОшибке);
		Если СообщениеОбОшибке <> "" Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);
		КонецЕсли;
		СохранитьВводСерийСервер();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ГИСМ

&НаСервере
Процедура НастроитьРежимГИСМ()
	
	Если РежимГИСМ Тогда
		Элементы.СерииНомер.Видимость = Ложь;
		Элементы.СерииНоменклатурыНовыеНомерКИЗГИСМ.Видимость = Истина;
		Элементы.RFID.Видимость = Истина;
		
		Элементы.ЗаписатьRFID.Видимость = ЭтоМаркировкаТоваровГИСМ;
		
		// работает для продукции, маркируемой ГИСМ
		Элементы.СерииНоменклатурыНовыеНомерГИСМ.Видимость = ЭтоМаркировкаТоваровГИСМ;
		
		Элементы.СерииНоменклатурыНовыеНужноЗаписатьМетку.Видимость = ЭтоМаркировкаТоваровГИСМ;
		
		Элементы.ВыборОстатков.Видимость = Ложь;
		Элементы.ПоискПоШтрихкодуНовые.Видимость = Ложь;
		Элементы.СгенерироватьСерии.Видимость = Ложь;
		Элементы.ДобавитьНомер.Видимость = Ложь;
		Элементы.ВвестиНомер.Видимость = Ложь;
		Элементы.Подбор.Видимость = Ложь;
		Элементы.ШаблонСерииНоменклатуры.Видимость = Ложь;
		Считыватели = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("СчитывательRFID");
		Если Считыватели.Количество() = 0 Тогда
			ПодключатьСчитывательRFID = Ложь;
		ИначеЕсли Считыватели.Количество() = 1 Тогда
			ПодключатьСчитывательRFID = Истина;
			СчитывательRFID = Считыватели[0].Ссылка;
		Иначе
			ТекстСообщения = НСтр("ru = 'К рабочему месту подключено несколько считывателей RFID. Работа одновременно с несколькими считывателями не поддерживается. Оставьте только один считыватель.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			ПодключатьСчитывательRFID = Ложь;
		КонецЕсли;
		
	Иначе
		Элементы.СерииНомер.Видимость = Истина;
		Элементы.СерииНоменклатурыНовыеНомерГИСМ.Видимость = Ложь;
		Элементы.СерииНоменклатурыНовыеНомерКИЗГИСМ.Видимость = Ложь;
		Элементы.RFID.Видимость = Ложь;
		Элементы.ЗаписатьRFID.Видимость = Ложь;
		Элементы.СерииНоменклатурыНовыеНужноЗаписатьМетку.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьМетку(Команда)
	ОчиститьСообщения();
	RFIDКлиент.ОткрытьСессиюСчитывателяRFID(ЭтаФорма);
	ПодключитьОбработчикОжидания("ОтработатьТаймаутОжиданияСчитыванияМетки", 5, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтработатьТаймаутОжиданияСчитыванияМетки()
	
	Если ОткрытаСессияСчитывателяRFID Тогда
		RFIDКлиент.ОтработатьТаймаутОжиданияСчитыванияМетки(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьСчитываниеRFID(ДанныеМеток, ИдентификаторТекущейСтроки)
	
	ПараметрыОбработки = RFIDСервер.ПараметрыОбработкиСчитанныхRFID();
	ЗаполнитьЗначенияСвойств(ПараметрыОбработки,ЭтаФорма);
	РезультатОбработки = RFIDСервер.ОбработатьСчитываниеRFID(ДанныеМеток, ПараметрыОбработки, Объект.СерииНоменклатуры, ИдентификаторТекущейСтроки);
	
	Если РезультатОбработки.ИдентификаторТекущейСтроки <> Неопределено Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьRFID(Команда)
	
	ИдетЗаписьМетки = Истина;
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ДанныеСерии",Элементы.СерииНоменклатурыНовые.ТекущиеДанные);
	ПараметрыЗаписи.Вставить("Форма", ЭтаФорма);
	RFIDКлиент.ЗаписатьДанныеВRFID(Неопределено, ПараметрыЗаписи);
	
КонецПроцедуры

Процедура ПолучитьИнформациюПоКиЗДобавитьСерию(НомерКиЗ, ИдентификаторТекущейСтроки)

	Если Не ИнтеграцияГИСМВызовСервера.ЭтоНомерКиЗ(НомерКиЗ) Тогда
		ТекстСообщения = НСтр("ru = 'Введенные данные не являются номером КиЗ.'");
		НомерКиЗ = "";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	ИнформацияПоКиЗ = ИнтеграцияГИСМ.ИнформацияОКиЗПоНомеру(НомерКиЗ);
	ИнформацияПоКиЗ.НомерКиЗ = НомерКиЗ;

	ПараметрыОбработки = RFIDСервер.ПараметрыОбработкиСчитанныхRFIDИКиЗ();
	ЗаполнитьЗначенияСвойств(ПараметрыОбработки, ЭтотОбъект);
	RFIDСервер.ДобавитьСериюПоИнформацииПоКиЗ(ИнформацияПоКиЗ, ПараметрыОбработки, Объект.СерииНоменклатуры,
		ИдентификаторТекущейСтроки);

КонецПроцедуры

&НаКлиенте
Функция ПроверитьМеткиНаНеобходимостьЗаписать()
	
	Если ЭтоМаркировкаТоваровГИСМ
		И НЕ ЭтоМаркировкаОстатковГИСМ Тогда
		
		ЕстьНезаписанныеМетки = Ложь;
		
		СтрокиСТребованиемЗаписи = Объект.СерииНоменклатуры.НайтиСтроки(Новый Структура("НужноЗаписатьМетку", Истина));
		
		Для Каждого Строка Из СтрокиСТребованиемЗаписи Цикл
			
			Сообщить(НСтр("ru='Необходимо записать данные в КИЗ с номером '")+Строка.НомерКИЗГИСМ);
			ЕстьНезаписанныеМетки = Истина;
		КонецЦикла;
		
		Возврат НЕ ЕстьНезаписанныеМетки;
		
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти