
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ServiceAPI

Функция КлючПараметровПечати() Экспорт
	
	Возврат "ПАРАМЕТРЫ_ПЕЧАТИ_ПечатьКонвертов";
	
КонецФункции

Функция ПолныйПутьКМакету(ПараметрыПечати) Экспорт
	
	ИмяМакета = "Обработка.ПечатьКонвертов.ПФ_MXL_КонвертC4";
	Если ПараметрыПечати.ФорматКонверта = Перечисления.ФорматыПочтовыхКонвертов.C5 Тогда
		
		ИмяМакета = "Обработка.ПечатьКонвертов.ПФ_MXL_КонвертС5";
		
	ИначеЕсли ПараметрыПечати.ФорматКонверта = Перечисления.ФорматыПочтовыхКонвертов.DL Тогда
		
		ИмяМакета = "Обработка.ПечатьКонвертов.ПФ_MXL_КонвертDL";
		
	КонецЕсли;
	
	Если ПараметрыПечати.ДополнительныеСтрокиВЗаголовках Тогда
		
		ИмяМакета = ИмяМакета + "Плюс";
		
	КонецЕсли;
	
	Возврат ИмяМакета;
	
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, ПараметрыПечати.КомандаПечати);
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = КлючПараметровПечати();
		ПечатнаяФорма.ПолныйПутьКМакету = ПолныйПутьКМакету(ПараметрыПечати);
		ПечатнаяФорма.СинонимМакета = НСтр("ru ='Конверт'");
		
		СформироватьКонверт(ПечатнаяФорма, МассивОбъектов, ОбъектыПечати, ПараметрыПечати);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

Функция ТекстЗапросаПечатьКонвертовКонтрагенты()
	
	Возврат
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка КАК Получатель
	|	,Контрагенты.Ссылка КАК ОбъектПечати
	|	,Выбор КОГДА ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК Строка(1000)) = """"
	|		ТОГДА ВЫРАЗИТЬ(Контрагенты.Наименование КАК Строка(1000))
	|		ИНАЧЕ ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК Строка(1000)) КОНЕЦ КАК ПредставлениеПолучателя
	|ПОМЕСТИТЬ ТаблицаОтобранныхКонтрагентов
	|ИЗ Справочник.Контрагенты КАК Контрагенты
	|ГДЕ Контрагенты.Ссылка В (&ОбъектыПечати)
	|
	|;Выбрать
	|	Контрагенты.ОбъектПечати КАК ОбъектПечати
	|	,Организации.Ссылка КАК Отправитель
	|	,Выбор КОГДА Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|		ТОГДА ФИОФизическихЛиц.Фамилия + "" "" + ФИОФизическихЛиц.Имя + "" "" + ФИОФизическихЛиц.Отчество
	|		ИНАЧЕ Организации.Наименование КОНЕЦ КАК ПредставлениеОтправителя
	|	,Контрагенты.Получатель КАК Получатель
	|	,Контрагенты.ПредставлениеПолучателя КАК ПредставлениеПолучателя
	|ИЗ
	|	ТаблицаОтобранныхКонтрагентов КАК Контрагенты
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО (Организации.Ссылка = &Организация)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних() КАК ФИОФизическихЛиц
	|		ПО Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|			И Организации.ФизическоеЛицо = ФИОФизическихЛиц.ФизЛицо"
	
КонецФункции

Функция ТекстЗапросаПечатьКонвертовДокументы(МетаданныеОбъектаПечати, ПараметрыПечати)
	
	Возврат
	
	СтрЗаменить(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпрОрганизации.Ссылка КАК Организация
	|	,Выбор КОГДА СпрОрганизации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|		ТОГДА ФИОФизическихЛиц.Фамилия + "" "" + ФИОФизическихЛиц.Имя + "" "" + ФИОФизическихЛиц.Отчество
	|		ИНАЧЕ СпрОрганизации.Наименование КОНЕЦ КАК ПредставлениеУказанногоОтправителя
	|ПОМЕСТИТЬ ПредставлениеУказаннойОрганизации
	|ИЗ Справочник.Организации КАК СпрОрганизации
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних() КАК ФИОФизическихЛиц
	|		ПО &ОтправлятьОтЛицаУказаннойОрганизации = ИСТИНА
	|			И СпрОрганизации.ФизическоеЛицо = ФИОФизическихЛиц.ФизЛицо
	|ГДЕ СпрОрганизации.Ссылка = &Организация
	|
	|///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	|;Выбрать
	|	ТаблицыОбъектаПечати.Ссылка КАК ОбъектПечати
	|	,Выбор КОГДА &ОтправлятьОтЛицаУказаннойОрганизации
	|		ТОГДА &Организация
	|		ИНАЧЕ ТаблицыОбъектаПечати.Организация КОНЕЦ КАК Отправитель
	|	,Выбор КОГДА &ОтправлятьОтЛицаУказаннойОрганизации
	|			ТОГДА ПредставлениеУказаннойОрганизации.ПредставлениеУказанногоОтправителя
	|		КОГДА ТаблицыОбъектаПечати.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|			ТОГДА ФИОФизическихЛиц.Фамилия + "" "" + ФИОФизическихЛиц.Имя + "" "" + ФИОФизическихЛиц.Отчество
	|		ИНАЧЕ ТаблицыОбъектаПечати.Организация.Наименование КОНЕЦ КАК ПредставлениеОтправителя
	|	,ТаблицыОбъектаПечати.Контрагент КАК Получатель
	|	,Выбор КОГДА ВЫРАЗИТЬ(ТаблицыОбъектаПечати.Контрагент.НаименованиеПолное КАК Строка(1000)) = """"
	|		ТОГДА ВЫРАЗИТЬ(ТаблицыОбъектаПечати.Контрагент.Наименование КАК Строка(1000))
	|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицыОбъектаПечати.Контрагент.НаименованиеПолное КАК Строка(1000)) КОНЕЦ КАК ПредставлениеПолучателя
	|ИЗ &ПолноеИмяТаблицыОбъекта КАК ТаблицыОбъектаПечати
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних() КАК ФИОФизическихЛиц
	|		ПО &ОтправлятьОтЛицаУказаннойОрганизации <> ИСТИНА
	|			И ТаблицыОбъектаПечати.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|			И ТаблицыОбъектаПечати.Организация.ФизическоеЛицо = ФИОФизическихЛиц.ФизЛицо
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПредставлениеУказаннойОрганизации КАК ПредставлениеУказаннойОрганизации
	|		ПО ИСТИНА
	|ГДЕ ТаблицыОбъектаПечати.Ссылка В (&ОбъектыПечати)"
	
	, "&ПолноеИмяТаблицыОбъекта", МетаданныеОбъектаПечати.ПолноеИмя());
	
КонецФункции

Функция НоваяСтруктураДанныеПечати(ПараметрыПечати)
	
	ИменаПолей = "ОтКого1, Откуда1, Откуда2, Кому1, Кому2, Куда1, Куда2, Куда3";
	
	МассивФорматов = Новый Массив(2);
	МассивФорматов[0] = Перечисления.ФорматыПочтовыхКонвертов.C4;
	МассивФорматов[1] = Перечисления.ФорматыПочтовыхКонвертов.C5;
	
	Если МассивФорматов.Найти(ПараметрыПечати.ФорматКонверта) <> Неопределено Тогда
		
		ИменаПолей = ИменаПолей + ", Откуда3";
		
	КонецЕсли;
	
	Если ПараметрыПечати.ДополнительныеСтрокиВЗаголовках Тогда
		
		ИменаПолей = ИменаПолей + ", ОтКого2, Кому3";
		
	КонецЕсли;
	
	Возврат Новый Структура(ИменаПолей);
	
КонецФункции

Процедура ИзвлечьСведенияОСубъектах(СтрокаТаблицы, СведенияОСубъектах, ПараметрыПечати)
	
	ОписаниеОтправителя = СведенияОСубъектах.ТаблицаАдресовОтправители.Найти(СтрокаТаблицы.Отправитель, "Объект");
	Если ОписаниеОтправителя <> Неопределено Тогда
		
		СведенияОСубъектах.АдресОтправителяСтруктура= РаботаСАдресами.СведенияОбАдресе(ОписаниеОтправителя.ЗначенияПолей);
		СведенияОСубъектах.АдресОтправителяСтрока	= ОписаниеОтправителя.Представление;
		
	КонецЕсли;
	
	ОписаниеПолучателя = СведенияОСубъектах.ТаблицаАдресовПолучатели.Найти(СтрокаТаблицы.Получатель, "Объект");
	Если ОписаниеПолучателя <> Неопределено Тогда
		
		СведенияОСубъектах.АдресПолучателяСтруктура	= РаботаСАдресами.СведенияОбАдресе(ОписаниеПолучателя.ЗначенияПолей);
		СведенияОСубъектах.АдресПолучателяСтрока	= ОписаниеПолучателя.Представление;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПечати(ДанныеПечати, МассивСлов, ПараметрыПечати, ИмяСекции)
	
	ВысотаСекции = 0;
	Для каждого ЭлементСтруктуры Из ДанныеПечати Цикл
		
		Если Найти(ЭлементСтруктуры.Ключ, ИмяСекции) = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ВысотаСекции = ВысотаСекции + 1;
		
	КонецЦикла;
	
	СтруктураДлиныСтрок			= ПараметрыПечати.ДлинаСтрок[ПараметрыПечати.ФорматКонверта];
	ТекущийИндексМассиваСлов	= 0;
	ВГраницаМассиваСлов			= МассивСлов.ВГраница();
	
	Для НомерСекции = 1 По ВысотаСекции Цикл
		
		ИмяСвойстваДлинаСтроки = ?(НомерСекции = 1, "ДлинаПервойСтроки", "ДлинаВторойСтроки") + ИмяСекции;
		ДлинаСекцииВСимволах = СтруктураДлиныСтрок[ИмяСвойстваДлинаСтроки];
		
		СловаВходящиеВСекцию = Новый Массив;
		Пока ТекущийИндексМассиваСлов <= ВГраницаМассиваСлов 
			И СтрДлина(МассивСлов[ТекущийИндексМассиваСлов]) <= ДлинаСекцииВСимволах Цикл
			
			СловаВходящиеВСекцию.Добавить(МассивСлов[ТекущийИндексМассиваСлов]);
			ДлинаСекцииВСимволах = ДлинаСекцииВСимволах -  СтрДлина(МассивСлов[ТекущийИндексМассиваСлов]);
			ТекущийИндексМассиваСлов = ТекущийИндексМассиваСлов + 1;
			
		КонецЦикла;
		
		ПредставлениеСтрокой = СтрСоединить(СловаВходящиеВСекцию, " ");
		ДанныеПечати[ИмяСекции + НомерСекции] = СтрЗаменить(ПредставлениеСтрокой, "  ", " ");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСПроверкойНаДлинуПредставления(ПредставлениеЭлемента, Результат);
	
	Если СтрДлина(ПредставлениеЭлемента) < 35 Тогда
		
		Результат.Добавить(ПредставлениеЭлемента);
		Возврат;
		
	КонецЕсли;
	
	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ПредставлениеЭлемента, " ");
	Если МассивСлов.Количество() < 2 Тогда
		
		Результат.Добавить(ПредставлениеЭлемента);
		Возврат;
		
	КонецЕсли;
	
	ДлинаВсегоПредставления = СтрДлина(ПредставлениеЭлемента);
	
	ВтораяЧастьПредставления = "";
	Пока СтрДлина(ВтораяЧастьПредставления) < (ДлинаВсегоПредставления / 2)
		И МассивСлов.Количество() > 1 Цикл
		
		ИндексПоследнегоСлова = МассивСлов.ВГраница();
		ВтораяЧастьПредставления = МассивСлов[ИндексПоследнегоСлова] + " " + ВтораяЧастьПредставления;
		
		МассивСлов.Удалить(ИндексПоследнегоСлова);
		
	КонецЦикла;
	
	ПерваяЧастьПредставления = СтрСоединить(МассивСлов, " ");
	
	Результат.Добавить(СокрЛП(ПерваяЧастьПредставления));
	Результат.Добавить(СокрЛП(ВтораяЧастьПредставления));
	
КонецПроцедуры

Функция ПредставлениеАдресаИзСтруктуры(Адрес)
	
	Результат = Новый Массив;
	ВыводитьСокращениеРегиона = Истина;
	
	Если Адрес.Свойство("Улица") И ЗначениеЗаполнено(Адрес.Улица)
		И Адрес.Свойство("УлицаСокращение") И ЗначениеЗаполнено(Адрес.УлицаСокращение) Тогда
		Если Адрес.УлицаСокращение = "ул" Тогда
			ПредставлениеУлицы = Адрес.УлицаСокращение + ". " + Адрес.Улица + ", ";
		Иначе
			ПредставлениеУлицы = Адрес.Улица + " " + Адрес.УлицаСокращение + "., ";
		КонецЕсли;
		
		Результат.Добавить(ПредставлениеУлицы);
	КонецЕсли;
	
	Если Адрес.Свойство("ДополнительнаяТерритория") И ЗначениеЗаполнено(Адрес.ДополнительнаяТерритория)
		И Адрес.Свойство("ДополнительнаяТерриторияСокращение") И ЗначениеЗаполнено(Адрес.ДополнительнаяТерриторияСокращение) Тогда
		
		ПредставлениеДопТерритории = Адрес.ДополнительнаяТерриторияСокращение + ". " + Адрес.ДополнительнаяТерритория + ", ";
		Результат.Добавить(ПредставлениеДопТерритории);
		
		Если Адрес.Свойство("ЭлементДополнительнойТерритории") И ЗначениеЗаполнено(Адрес.ЭлементДополнительнойТерритории)
			И Адрес.Свойство("ЭлементДополнительнойТерриторииСокращение") И ЗначениеЗаполнено(Адрес.ЭлементДополнительнойТерриторииСокращение) Тогда
			
			Если Адрес.ЭлементДополнительнойТерриторииСокращение = "ул" Тогда
				ПредставлениеУлицы = Адрес.ЭлементДополнительнойТерриторииСокращение + ". " + Адрес.ЭлементДополнительнойТерритории + ", ";
			Иначе
				ПредставлениеУлицы = Адрес.ЭлементДополнительнойТерритории + " " + Адрес.ЭлементДополнительнойТерриторииСокращение + "., ";
			КонецЕсли;
			
			Результат.Добавить(ПредставлениеУлицы);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Адрес.Свойство("Здание") И ЗначениеЗаполнено(Адрес.Здание.ТипЗдания) И ЗначениеЗаполнено(Адрес.Здание.Номер) Тогда
		ПредставлениеЗдания = НРег(Адрес.Здание.ТипЗдания) + " " + Адрес.Здание.Номер + ", ";
		Результат.Добавить(ПредставлениеЗдания);
	КонецЕсли;
	
	Если Адрес.Свойство("Корпуса") И ЗначениеЗаполнено(Адрес.Корпуса) Тогда
		ПредставлениеКорпуса = "";
		Для Каждого Корпус Из Адрес.Корпуса Цикл
			ПредставлениеКорпуса = ПредставлениеКорпуса + НРег(Корпус.ТипКорпуса) + " " + Корпус.Номер + ", ";
		КонецЦикла;
		Результат.Добавить(ПредставлениеКорпуса);
	КонецЕсли;
	
	Если Адрес.Свойство("Помещения")
		И ЗначениеЗаполнено(Адрес.Помещения) Тогда
		
		МассивПредставленийПомещений = Новый Массив;
		Для Каждого Помещение Из Адрес.Помещения Цикл
			
			Если НРег(Помещение.ТипПомещения) = "а/я"
				ИЛИ НРег(Помещение.ТипПомещения) = "в/ч" Тогда
				
				// Абонентский ящик - первый элемент адреса. Остальные элементы коллекции не имеют значения.
				МассивПредставленийПомещений.Очистить();
				МассивПредставленийПомещений.Добавить(НРег(Помещение.ТипПомещения) + " " + Помещение.Номер + ", ");
				Прервать;
				
			КонецЕсли;
			
			МассивПредставленийПомещений.Добавить(НРег(Помещение.ТипПомещения) + " " + Помещение.Номер + ", ");
			
		КонецЦикла;
		
		Для каждого Представление Из МассивПредставленийПомещений Цикл
			
			Результат.Добавить(Представление);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Адрес.Свойство("Город") И ЗначениеЗаполнено(Адрес.Город)
		И Адрес.Свойство("ГородСокращение") И ЗначениеЗаполнено(Адрес.ГородСокращение) Тогда
		ПредставлениеГорода = НРег(Адрес.ГородСокращение) + ". " + Адрес.Город + ", ";
		Результат.Добавить(ПредставлениеГорода);
		ВыводитьСокращениеРегиона = Ложь;
	КонецЕсли;
	
	Если Адрес.Свойство("ВнутригородскойРайон") И ЗначениеЗаполнено(Адрес.ВнутригородскойРайон)
		И Адрес.Свойство("ВнутригородскойРайонСокращение") И ЗначениеЗаполнено(Адрес.ВнутригородскойРайонСокращение) Тогда
		ПредставлениеВнутригородскогоРайона = НРег(Адрес.ВнутригородскойРайонСокращение) + ". " + Адрес.ВнутригородскойРайон + ", ";
		Результат.Добавить(ПредставлениеВнутригородскогоРайона);
	КонецЕсли;
	
	Если Адрес.Свойство("НаселенныйПункт") И ЗначениеЗаполнено(Адрес.НаселенныйПункт)
		И Адрес.Свойство("НаселенныйПунктСокращение") И ЗначениеЗаполнено(Адрес.НаселенныйПунктСокращение) Тогда
		ПредставлениеНаселенногоПункта = НРег(Адрес.НаселенныйПунктСокращение) + ". " + Адрес.НаселенныйПункт + ", ";
		Результат.Добавить(ПредставлениеНаселенногоПункта);
		ВыводитьСокращениеРегиона = Ложь;
	КонецЕсли;
	
	Если Адрес.Свойство("Район") И ЗначениеЗаполнено(Адрес.Район)
		И Адрес.Свойство("РайонСокращение") И ЗначениеЗаполнено(Адрес.РайонСокращение) Тогда
		ПредставлениеРайона = Адрес.Район + " " + НРег(Адрес.РайонСокращение) + "., ";
		Результат.Добавить(ПредставлениеРайона);
	КонецЕсли;
	
	Если Адрес.Свойство("Округ") И ЗначениеЗаполнено(Адрес.Округ)
		И Адрес.Свойство("ОкругСокращение") И ЗначениеЗаполнено(Адрес.ОкругСокращение) Тогда
		
		ПредставлениеОкруга = Адрес.Округ + " " + НРег(Адрес.ОкругСокращение) + "., ";
		ДобавитьСПроверкойНаДлинуПредставления(ПредставлениеОкруга, Результат);
		
	КонецЕсли;
	
	Если Адрес.Свойство("Регион") И ЗначениеЗаполнено(Адрес.Регион)
		И Адрес.Свойство("РегионСокращение") И ЗначениеЗаполнено(Адрес.РегионСокращение) Тогда
		
		Если Адрес.КодРегиона = "77"           // Москва
			Или Адрес.КодРегиона = "78"        // Санкт-Петербург
			Или Адрес.КодРегиона = "92"        // Севастополь
			Или Адрес.КодРегиона = "99" Тогда  // Байконур
			
			// У города федерального значения префикс "г. " не пишется если речь идет о нас.пункте в составе города федерального значения.
			ПредставлениеРегиона = ?(ВыводитьСокращениеРегиона, "г. ", "") + Адрес.Регион + ", ";
			Результат.Добавить(ПредставлениеРегиона);
			
		Иначе
			
			ПредставлениеРегиона = Адрес.Регион + " " + НРег(Адрес.РегионСокращение) + "., ";
			ДобавитьСПроверкойНаДлинуПредставления(ПредставлениеРегиона, Результат);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Адрес.Свойство("Страна") И ЗначениеЗаполнено(Адрес.Страна) Тогда
		Результат.Добавить(ТРег(Адрес.Страна));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеАдресаИзСтроки(Адрес)
	
	Возврат СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Адрес, " ");
	
КонецФункции

#КонецОбласти

#Область ПечатьКонвертов

Процедура ЗаполнитьДанныеПечатиОтКого(ДанныеПечати, СведенияОСубъектах, ПараметрыПечати)
	
	ПредставлениеОтправителяМассивом = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СведенияОСубъектах.ПредставлениеОтправителя, " ");
	ЗаполнитьДанныеПечати(ДанныеПечати, ПредставлениеОтправителяМассивом, ПараметрыПечати, "ОтКого");
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПечатиОткуда(ДанныеПечати, СведенияОСубъектах, ПараметрыПечати)
	
	ДанныеПечати.Вставить("ИндексОтправителя", Неопределено);
	
	ПредставлениеАдресаОтправителяМассивом = Новый Массив;
	Если ТипЗнч(СведенияОСубъектах.АдресОтправителяСтруктура) = Тип("Структура")
		И СведенияОСубъектах.АдресОтправителяСтруктура.Свойство("Регион")
		И НЕ ПустаяСтрока(СведенияОСубъектах.АдресОтправителяСтруктура.Регион) Тогда
		
		ПредставлениеАдресаОтправителяМассивом = ПредставлениеАдресаИзСтруктуры(СведенияОСубъектах.АдресОтправителяСтруктура);
		СведенияОСубъектах.АдресОтправителяСтруктура.Свойство("Индекс", ДанныеПечати.ИндексОтправителя);
		
	ИначеЕсли ПараметрыПечати.РазрешитьАдресаВПроизвольнойФорме
		И НЕ ПустаяСтрока(СведенияОСубъектах.АдресОтправителяСтрока) Тогда
		
		ПредставлениеАдресаОтправителяМассивом = ПредставлениеАдресаИзСтроки(СведенияОСубъектах.АдресОтправителяСтрока);
		
	КонецЕсли;
	
	Если ПредставлениеАдресаОтправителяМассивом.Количество() > 0 Тогда
		
		ЗаполнитьДанныеПечати(ДанныеПечати, ПредставлениеАдресаОтправителяМассивом, ПараметрыПечати, "Откуда");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПечатиКому(ДанныеПечати, СведенияОСубъектах, ПараметрыПечати)
	
	ПредставлениеПолучателяМассивом = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СведенияОСубъектах.ПредставлениеПолучателя, " ");
	ЗаполнитьДанныеПечати(ДанныеПечати, ПредставлениеПолучателяМассивом, ПараметрыПечати, "Кому");
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПечатиКуда(ДанныеПечати, СведенияОСубъектах, ПараметрыПечати)
	
	ДанныеПечати.Вставить("ИндексПолучателя", Неопределено);
	
	ПредставлениеАдресаПолучателяМассивом = Новый Массив;
	Если ТипЗнч(СведенияОСубъектах.АдресПолучателяСтруктура) = Тип("Структура")
		И СведенияОСубъектах.АдресПолучателяСтруктура.Свойство("Регион")
		И НЕ ПустаяСтрока(СведенияОСубъектах.АдресПолучателяСтруктура.Регион) Тогда
		
		ПредставлениеАдресаПолучателяМассивом = ПредставлениеАдресаИзСтруктуры(СведенияОСубъектах.АдресПолучателяСтруктура);
		СведенияОСубъектах.АдресПолучателяСтруктура.Свойство("Индекс", ДанныеПечати.ИндексПолучателя);
		
	ИначеЕсли ПараметрыПечати.РазрешитьАдресаВПроизвольнойФорме
		И НЕ ПустаяСтрока(СведенияОСубъектах.АдресПолучателяСтрока) Тогда
		
		ПредставлениеАдресаПолучателяМассивом = ПредставлениеАдресаИзСтроки(СведенияОСубъектах.АдресПолучателяСтрока);
		
	КонецЕсли;
	
	Если ПредставлениеАдресаПолучателяМассивом.Количество() > 0 Тогда
		
		ЗаполнитьДанныеПечати(ДанныеПечати, ПредставлениеАдресаПолучателяМассивом, ПараметрыПечати, "Куда");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЛоготипОрганизации(Организация, ОбластьМакетаСЛоготипом)
	
	Если ЗначениеЗаполнено(Организация.ФайлЛоготип) Тогда
		
		ДвоичныеДанныеКартинки = РаботаСФайлами.ДвоичныеДанныеФайла(Организация.ФайлЛоготип);
		Если ЗначениеЗаполнено(ДвоичныеДанныеКартинки) Тогда
			
			Для Каждого Рисунок Из ОбластьМакетаСЛоготипом.Рисунки Цикл
				
				Если Рисунок.Имя = "ЗонаИллюстраций" Тогда
					
					Рисунок.Картинка = Новый Картинка(ДвоичныеДанныеКартинки);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКодовыйШтамп(ИндексСтрокой, ОбластьИндекс)
	
	Если ЗначениеЗаполнено(ИндексСтрокой)
		И СтрДлина(ИндексСтрокой) = 6 Тогда
		
		Для Каждого Рисунок Из ОбластьИндекс.Рисунки Цикл
			Если СтрНачинаетсяС(Рисунок.Имя, "Индекс") Тогда
				ПозицияИндекса = Прав(Рисунок.Имя, 1);
				ЦифраИндекса = Сред(ИндексСтрокой, ПозицияИндекса, 1);
				Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЦифраИндекса) Тогда
					Продолжить;
				КонецЕсли;
				Рисунок.Картинка = БиблиотекаКартинок["ИндексЦифра" + ЦифраИндекса];
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого Рисунок Из ОбластьИндекс.Рисунки Цикл
			
			Если СтрНачинаетсяС(Рисунок.Имя, "Индекс") Тогда
				
				Рисунок.Картинка = БиблиотекаКартинок.ИндексЦифраПустая;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирования печатной формы конверта
//
Процедура СформироватьКонверт(ОписаниеПечатнойФормы, ДанныеОбъектовПечати, ОбъектыПечати, ПараметрыПечати)
	Перем Ошибки, ПервыйДокумент, НомерСтрокиНачало;
	
	ТабличныйДокумент = ОписаниеПечатнойФормы.ТабличныйДокумент;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ОписаниеПечатнойФормы.ПолныйПутьКМакету);
	МетаданныеОбъектаПечати = ДанныеОбъектовПечати[0].Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектыПечати", ДанныеОбъектовПечати);
	Запрос.УстановитьПараметр("Организация", ПараметрыПечати.Организация);
	
	Если МетаданныеОбъектаПечати = Метаданные.Справочники.Контрагенты Тогда
		
		Запрос.УстановитьПараметр("ОтправлятьОтЛицаУказаннойОрганизации", Ложь);
		Запрос.Текст = ТекстЗапросаПечатьКонвертовКонтрагенты();
		
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеОбъектаПечати)
		И ОбщегоНазначения.ЕстьРеквизитОбъекта("Контрагент", МетаданныеОбъектаПечати) Тогда
		
		Запрос.УстановитьПараметр("ОтправлятьОтЛицаУказаннойОрганизации", ЗначениеЗаполнено(ПараметрыПечати.Организация));
		Запрос.Текст = ТекстЗапросаПечатьКонвертовДокументы(МетаданныеОбъектаПечати, ПараметрыПечати);
		
	КонецЕсли;
	
	ДанныеОбъектовПечати = Запрос.Выполнить().Выгрузить();
	ДанныеОбъектовПечати.Индексы.Добавить("ОбъектПечати");
	
	Получатели = ДанныеОбъектовПечати.ВыгрузитьКолонку("Получатель");
	
	Отправители = ДанныеОбъектовПечати.Скопировать(, "Отправитель");
	Отправители.Свернуть("Отправитель");
	Отправители = Отправители.ВыгрузитьКолонку("Отправитель");
	
	ВидКИОтправителей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
	ТаблицаАдресовОтправители = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(Отправители,
		,
		ВидКИОтправителей,
		ТекущаяДатаСеанса());
	ТаблицаАдресовОтправители.Индексы.Добавить("Объект");
	
	ВидКИПолучателей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыПечати.ВидАдресаКонтрагента);
	ТаблицаАдресовПолучатели = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(Получатели,
		,
		ВидКИПолучателей,
		ТекущаяДатаСеанса());
	ТаблицаАдресовПолучатели.Индексы.Добавить("Объект");
	
	СведенияОСубъектах = Новый Структура("ПредставлениеОтправителя, АдресОтправителяСтруктура, АдресОтправителяСтрока, ПредставлениеПолучателя, АдресПолучателяСтруктура, АдресПолучателяСтрока");
	СведенияОСубъектах.Вставить("ТаблицаАдресовПолучатели", ТаблицаАдресовПолучатели);
	СведенияОСубъектах.Вставить("ТаблицаАдресовОтправители", ТаблицаАдресовОтправители);
	
	Для Каждого СтрокаТаблицы Из ДанныеОбъектовПечати Цикл
		
		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабличныйДокумент, ПервыйДокумент, НомерСтрокиНачало);
		
		СведенияОСубъектах.ПредставлениеОтправителя	= СтрокаТаблицы.ПредставлениеОтправителя;
		СведенияОСубъектах.АдресОтправителяСтруктура= Неопределено;
		СведенияОСубъектах.АдресОтправителяСтрока	= Неопределено;
		
		СведенияОСубъектах.ПредставлениеПолучателя	= СтрокаТаблицы.ПредставлениеПолучателя;
		СведенияОСубъектах.АдресПолучателяСтруктура	= Неопределено;
		СведенияОСубъектах.АдресПолучателяСтрока	= Неопределено;
		
		ДанныеПечати = НоваяСтруктураДанныеПечати(ПараметрыПечати);
		ИзвлечьСведенияОСубъектах(СтрокаТаблицы, СведенияОСубъектах, ПараметрыПечати);
		
		ЗаполнитьДанныеПечатиОтКого(ДанныеПечати, СведенияОСубъектах, ПараметрыПечати);
		ЗаполнитьДанныеПечатиОткуда(ДанныеПечати, СведенияОСубъектах, ПараметрыПечати);
		ЗаполнитьДанныеПечатиКому(ДанныеПечати, СведенияОСубъектах, ПараметрыПечати);
		ЗаполнитьДанныеПечатиКуда(ДанныеПечати, СведенияОСубъектах, ПараметрыПечати);
		
		ОбластьМакетаЗаголовок = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "Заголовок", , Ошибки);
		Если НЕ ОбластьМакетаЗаголовок = Неопределено Тогда
			
			Если ПараметрыПечати.ПечататьЛоготип Тогда
				
				ЗаполнитьЛоготипОрганизации(СтрокаТаблицы.Отправитель, ОбластьМакетаЗаголовок);
				
			КонецЕсли;
			
			ОбластьМакетаЗаголовок.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
			
		КонецЕсли;
		
		ОбластьМакетаИндекс = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "Индекс", , Ошибки);
		Если НЕ ОбластьМакетаИндекс = Неопределено Тогда
			
			ЗаполнитьКодовыйШтамп(ДанныеПечати.ИндексПолучателя, ОбластьМакетаИндекс);
			
			ОбластьМакетаИндекс.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьМакетаИндекс);
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, СтрокаТаблицы.ОбъектПечати);
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьКонверт()

#КонецОбласти

#КонецЕсли