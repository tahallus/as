
&НаСервере
Процедура УстановитьЗаголовокПравойПанелиМобильныйКлиент()
	
	РаботаСОтборами.УстановитьЗаголовокПравойПанелиМобильныйКлиент(ЭтотОбъект,,, ПолучитьСтрокуПроверяемыхРеквизитов());
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуПроверяемыхРеквизитов()
	
	Если ОтборНеПоказыватьДокументыПослеТекущего = НСтр("ru = 'Показывать все документы'") Тогда
		СтрокаПроверяемыхРеквизитов = "ОтборАвтор, ОтборОтветственный, ОтборСостояниеЗаказа, ОтборДоговор";
	Иначе
		СтрокаПроверяемыхРеквизитов = "ОтборАвтор, ОтборОтветственный, ОтборСостояниеЗаказа, ОтборДоговор, ОтборНеПоказыватьДокументыПослеТекущего";
	КонецЕсли;
	
	Возврат СтрокаПроверяемыхРеквизитов;
	
КонецФункции

&НаСервере
Процедура НастроитьЭлементыПоВидуКлиента()
	
	Если НЕ ЭтоМобильныйКлиент Тогда
		Элементы.ДеревоРаспределенияСуммыПлатежаКонтекстноеМенюРедактироватьВсеРеквизиты.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.Декорация10.Видимость = Ложь;
	Элементы.Декорация12.Видимость = Ложь;
	Элементы.Декорация11.Видимость = Ложь;
	Элементы.Декорация15.Видимость = Ложь;
	Элементы.Декорация14.Видимость = Ложь;
	Элементы.Декорация13.Видимость = Ложь;
	
	Элементы.ПоказыватьСоставДокумента.Видимость = Ложь;
	
	Элементы.КоманднаяПанель2.Видимость = Ложь;
	Элементы.Справка1.Видимость = Ложь;
	
	РаботаСОтборами.НастроитьПанельОтборовМобильныйКлиент(ЭтотОбъект,,,ПолучитьСтрокуПроверяемыхРеквизитов(),,Истина);
	
	Элементы.ГруппаФильтры.Поведение = ПоведениеОбычнойГруппы.Обычное;
	Элементы.ГруппаФильтры.ОтображатьЗаголовок = Ложь;
	
	Элементы.ГруппаФильтры.РастягиватьПоГоризонтали = Истина;
	Элементы.ПредставлениеПериода.РастягиватьПоГоризонтали = Истина;
	Элементы.ОтборАвтор.РастягиватьПоГоризонтали = Истина;
	Элементы.ОтборОтветственный.РастягиватьПоГоризонтали = Истина;
	Элементы.ОтборСостояниеЗаказа.РастягиватьПоГоризонтали = Истина;
	Элементы.ОтборДоговор.РастягиватьПоГоризонтали = Истина;
	Элементы.ОтборНеПоказыватьДокументыПослеТекущего.РастягиватьПоГоризонтали = Истина;
	
	Элементы.ДеревоРаспределенияСуммыПлатежаЗачитываем.Формат = "ЧН=0,00";
	Элементы.ДеревоРаспределенияСуммыПлатежаОжидаетОплаты.Формат = "ЧН=0,00";
	
	Элементы.ДеревоРаспределенияСуммыПлатежаОтступСправа.Видимость = Ложь;
	Элементы.ДеревоРаспределенияСуммыПлатежаДополнительныеРеквизитыСтрокой.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКурсВТекущейСтрокеРасшифровки(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРаспределенияСуммыПлатежа.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = РасчетыРаботаСФормамиВызовСервера.ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(ДатаДокумента, ТекущиеДанные.Договор);
	ТекущиеДанные.Курс = СтруктураДанных.ДоговорВалютаКурсКратность.Курс;
	ТекущиеДанные.Кратность = СтруктураДанных.ДоговорВалютаКурсКратность.Кратность;
	
	Если ТекущиеДанные.СуммаПлатежа = 0 И ТекущиеДанные.СуммаРасчетов = 0 Тогда
		ИзменитьКурсРекурсивноНаКлиенте(ТекущиеДанные.ПолучитьЭлементы(), ТекущиеДанные.Курс);
		Возврат;
	КонецЕсли;
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, ТекущиеДанные, "Курс", Истина, Ложь);
	ИзменитьКурсРекурсивноНаКлиенте(ТекущиеДанные.ПолучитьЭлементы(), ТекущиеДанные.Курс);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКурсРекурсивноНаСервере(пСтроки, пКурс)
	
	Для Каждого ТекущаяСтрока Из пСтроки Цикл
		Если ТекущаяСтрока.ЭтоСуществующийЗачет Тогда
			// В ранее введённых документах информация о курсе не сохранялась в реквизитах регистра.
			// В этом случае курс получаем делением СуммыРег на СуммуРасчетов.
			// Из-за погрешности округления этот курс может не совпадать с тем, что было в документе.
			// Попробуем скорректировать его по данным в текущем документе.
			Если ТекущаяСтрока.СуммаПлатежа = Окр(ТекущаяСтрока.СуммаРасчетов * пКурс, 2)
				И ТекущаяСтрока.Курс <> пКурс Тогда
				ТекущаяСтрока.Курс = пКурс;
			КонецЕсли;
		Иначе
			ТекущаяСтрока.Курс = пКурс;
			ИзменитьКурсРекурсивноНаСервере(ТекущаяСтрока.Строки, пКурс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКурсРекурсивноНаКлиенте(пСтроки, пКурс)
	
	Для Каждого ТекущаяСтрока Из пСтроки Цикл
		ТекущаяСтрока.Курс = пКурс;
		ПересчитатьОжидаетОплатыНаКлиенте(ТекущаяСтрока);
		ИзменитьКурсРекурсивноНаКлиенте(ТекущаяСтрока.ПолучитьЭлементы(), пКурс);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРаспределенияСуммыПлатежаКурсПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоРаспределенияСуммыПлатежа.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ПересчитатьОжидаетОплатыНаКлиенте(ТекущаяСтрока);
		
		// Изменим курс во всех подчиненных строках
		ИзменитьКурсРекурсивноНаКлиенте(ТекущаяСтрока.ПолучитьЭлементы(), ТекущаяСтрока.Курс);
		ОбновитьСтрокуТаблицыПоСтрокеДереваНаКлиенте(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрокаДерева = Элементы.ДеревоРаспределенияСуммыПлатежа.ТекущиеДанные;
	Если ТекущаяСтрокаДерева = Неопределено ИЛИ ТипЗнч(ТекущаяСтрокаДерева.Объект) = Тип("Строка") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Выберите договор или документ, чтобы при нажатии на ссылку открывалась его форма'"));
	Иначе
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ПолучитьНавигационнуюСсылку(ТекущаяСтрокаДерева.Объект));
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоМобильныйКлиент = ОбщегоНазначения.ЭтоМобильныйКлиент();
	
	// Предопределенные значения
	ЦветТекстаПравойПанели = ЦветаСтиля.ЦветТекстаПравойПанелиОтборов;
	ФункциональнаяОпцияУчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	// Конец
	
	// Заполним параметры
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры.ПараметрыФормыРаспределения);
	СуммаДокументаРавнаНулю = (КРаспределению = 0);
	Если Параметры.Свойство("НазначениеПлатежа") Тогда
		НазначениеПлатежа = Параметры.НазначениеПлатежа;
	Иначе
		Элементы.НазначениеПлатежа.Видимость = Ложь;
	КонецЕсли;
	ЭтоИнтеркампани = (ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтНашейОрганизации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтНашейОрганизации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НашейОрганизации
		ИЛИ ТипЗнч(Параметры.ПараметрыФормыРаспределения.Ссылка) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями"));
	
	Если ЭтоЗачетПредоплаты Тогда
		ВалютаДенежныхСредств = ВалютаРасчетов;
		вТаблицаЗаказыИСумма = ПолучитьИзВременногоХранилища(АдресТаблицаЗаказыИСумма);
		ТаблицаЗаказыИСумма.Очистить();
		Для Каждого ТекущаяСтрока Из вТаблицаЗаказыИСумма Цикл
			НоваяСтрокаТаблицыЗаказов = ТаблицаЗаказыИСумма.Добавить();
			НоваяСтрокаТаблицыЗаказов.Заказ = ТекущаяСтрока.Заказ;
			// При зачете предоплаты распределение выполняем в валюте расчетов по договору.
			Если ВалютаРасчетов <> ВалютаДокумента Тогда
				НоваяСтрокаТаблицыЗаказов.Всего = ТекущаяСтрока.Всего / КурсРасчетов * КратностьРасчетов;
			Иначе
				НоваяСтрокаТаблицыЗаказов.Всего = ТекущаяСтрока.Всего;
			КонецЕсли;
		КонецЦикла;
		Если ВалютаРасчетов <> ВалютаДокумента Тогда
			КРаспределению = КРаспределению / КурсРасчетов * КратностьРасчетов;
		КонецЕсли;
	Иначе
		ВалютаДенежныхСредств = ВалютаДокумента;
	КонецЕсли;
	КРаспределениюИсходноеЗначение = КРаспределению;
	// Конец
	
	// Заполнить реквизиты формы
	ТаблицаРасшифровкаПлатежа = ПолучитьИзВременногоХранилища(АдресРасшифровкаПлатежаВХранилище).Скопировать();
	ЗаполнитьДанныеПоКонтрагенту(ТаблицаРасшифровкаПлатежа);
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Ссылка, Контрагент, Организация, ВидОперации, ВестиРасчетыПоДоговорам);
	Если НЕ ЭтоЗачетПредоплаты Тогда
		СпособЗачетаПоУмолчанию = ДоговорПоУмолчанию.СпособРазнесенияОплатыПоУмолчанию;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОтборНеПоказыватьДокументыПослеТекущего) Тогда
		ОтборНеПоказыватьДокументыПослеТекущего = НСтр("ru = 'Показывать все документы'");
	КонецЕсли;
	// Конец
	
	ЗаполнитьТаблицыПравойПанели();
	ЗаполнитьДеревоРаспределенияСуммыПлатежаПоДаннымОбОстатках();
	ДобавитьЭлементыПравойПанели();
	УстановитьЗаголовкиФормы();
	
	УстановитьЗаголовкиИДополнительныеНадписи();
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоКонтрагенту(ТаблицаРасшифровкаПлатежа)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА Контрагенты.ВестиРасчетыПоДоговорам
		|				ИЛИ Контрагенты.ВестиРасчетыПоДокументам
		|				ИЛИ Контрагенты.ВестиРасчетыПоЗаказам
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВестиРасчетыВЦеломПоКонтрагенту,
		|	Контрагенты.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
		|	Контрагенты.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
		|	Контрагенты.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДоговорыКонтрагентов.Ссылка КАК Договор,
		|	ВЫБОР
		|		КОГДА ДоговорыКонтрагентов.ВалютаРасчетов <> НациональнаяВалюта.Значение
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВалютныйДоговор
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов,
		|	Константа.НациональнаяВалюта КАК НациональнаяВалюта
		|ГДЕ
		|	(&ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.НашейОрганизации), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСоСчета.НашейОрганизации))
		|				И ДоговорыКонтрагентов.Владелец = &Организация
		|			ИЛИ &ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВКассу.ОтНашейОрганизации), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеНаСчет.ОтНашейОрганизации))
		|				И ДоговорыКонтрагентов.Организация = &Организация
		|				И ДоговорыКонтрагентов.ЭтоДоговорПередачиТоваровМеждуОрганизациями
		|			ИЛИ ДоговорыКонтрагентов.Владелец = &Контрагент)
		|	И (НЕ ДоговорыКонтрагентов.ПометкаУдаления
		|			ИЛИ ДоговорыКонтрагентов.Ссылка В (&СписокДоговоровРасшифровки))
		|	И (НЕ &ТребуетсяКонтрольДоговоровКонтрагентов
		|			ИЛИ ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговоров))";
	
	// Для интеркампани принцип поиска договоров зависит от вида операций
	Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ТаблицаРасшифровкаПлатежа", ТаблицаРасшифровкаПлатежа);
	Если ЭтоЗачетПредоплаты Тогда
		Запрос.УстановитьПараметр("ТребуетсяКонтрольДоговоровКонтрагентов", Ложь); // Всегда только один договор, который выбран в документе.
		Запрос.УстановитьПараметр("СписокВидовДоговоров", Новый Массив);
		Запрос.УстановитьПараметр("СписокДоговоровРасшифровки", Договор);
	Иначе
		Запрос.УстановитьПараметр("ТребуетсяКонтрольДоговоровКонтрагентов", УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов());
		Запрос.УстановитьПараметр("СписокВидовДоговоров", Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Ссылка, Ссылка.ВидОперации));
		СписокДоговоровРасшифровки = Новый СписокЗначений;
		Для Каждого ТекущаяСтрока Из ТаблицаРасшифровкаПлатежа Цикл
			СписокДоговоровРасшифровки.Добавить(ТекущаяСтрока.Договор);
		КонецЦикла;
		Запрос.УстановитьПараметр("СписокДоговоровРасшифровки", СписокДоговоровРасшифровки);
	КонецЕсли;
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаКонтрагент = МассивРезультатов[0].Выбрать();
	
	Если ВыборкаКонтрагент.Следующий() Тогда
		
		ВестиРасчетыПоДоговорам = ВыборкаКонтрагент.ВестиРасчетыПоДоговорам;
		ВестиРасчетыПоДокументам = ВыборкаКонтрагент.ВестиРасчетыПоДокументам;
		ВестиРасчетыПоЗаказам = ВыборкаКонтрагент.ВестиРасчетыПоЗаказам;
		ВестиРасчетыВЦеломПоКонтрагенту = ВыборкаКонтрагент.ВестиРасчетыВЦеломПоКонтрагенту;
		ВестиРасчетыТолькоПоДоговорам = ВестиРасчетыПоДоговорам И НЕ (ВестиРасчетыПоДокументам ИЛИ ВестиРасчетыПоЗаказам);
		ВестиРасчетыТолькоПоЗаказам = ВестиРасчетыПоЗаказам И НЕ (ВестиРасчетыПоДоговорам ИЛИ ВестиРасчетыПоДокументам);
		ВестиРасчетыТолькоПоДокументам = ВестиРасчетыПоДокументам И НЕ (ВестиРасчетыПоДоговорам ИЛИ ВестиРасчетыПоЗаказам);
		
	КонецЕсли;
	
	ВыводитьКолонкуСуммаРасчетов = Ложь;
	
	// Определим количество договоров.
	Если ЭтоЗачетПредоплаты Тогда
		КоличествоДоговоров = 1;
	Иначе
		ВыборкаДоговоры = МассивРезультатов[1].Выбрать();
		КоличествоДоговоров = ВыборкаДоговоры.Количество();
		Если КоличествоДоговоров = 1 Тогда
			ВыборкаДоговоры.Следующий();
			Договор = ВыборкаДоговоры.Договор;
			// В этом случае группировку по договору НЕ НУЖНО выводить.
		ИначеЕсли ФункциональнаяОпцияУчетВалютныхОпераций Тогда
			// Определим необходимость вывода колонки "СуммаРасчетов".
			ВыборкаДоговоры.Следующий();
			Если ВыборкаДоговоры.ВалютныйДоговор Тогда
				ВыводитьКолонкуСуммаРасчетов = Истина;
			КонецЕсли;
			Пока ВыборкаДоговоры.Следующий() Цикл
				Если ВыборкаДоговоры.ВалютныйДоговор Тогда
					ВыводитьКолонкуСуммаРасчетов = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Определим необходимость выводить договор в дереве.
	Если ЭтоЗачетПредоплаты Тогда
		ПоОдномуДоговору = Истина;
	ИначеЕсли НЕ ВестиРасчетыПоДоговорам Тогда
		ПоОдномуДоговору = Истина;
	Иначе
		ПоОдномуДоговору = (КоличествоДоговоров = 1);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступность()
	
	Если ЭтоЗачетПредоплаты Тогда
		Элементы.ГруппаОтборОтветственный.Видимость = Ложь;
		Элементы.ПоказыватьСоставДокумента.Видимость = Ложь;
		Элементы.СоставДокумента.Видимость = Ложь;
		Если ВалютаРасчетов = ВалютаДокумента Тогда
			Элементы.ДеревоРаспределенияСуммыПлатежаСуммаПлатежаПредоплаты.Видимость = Ложь;
		Иначе
			Элементы.ДеревоРаспределенияСуммыПлатежаСуммаПлатежаПредоплаты.Видимость = Истина;
		КонецЕсли;
		Элементы.ПодменюРазнести.Видимость = Ложь;
	Иначе
		Элементы.ДеревоРаспределенияСуммыПлатежаСуммаПлатежаПредоплаты.Видимость = Ложь;
		Элементы.СоставДокумента.Видимость = ПоказыватьСоставДокумента;
		Элементы.РазнестиПоОстаткам.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаНеоплаченныеЗаказы.Видимость = НЕ ЭтоЗачетПредоплаты;
	Элементы.ДеревоРаспределенияСуммыПлатежаДополнительныеРеквизитыСтрокой.Видимость = НЕ ЭтоЗачетПредоплаты;
	Элементы.ДеревоРаспределенияСуммыПлатежаСчетНаОплату.Видимость = НЕ ЭтоЗачетПредоплаты;
	
	Элементы.Договор.Видимость = (ЭтоЗачетПредоплаты ИЛИ ПоОдномуДоговору) И ВестиРасчетыПоДоговорам;
	Элементы.ГруппаОтборДоговор.Видимость = НЕ Элементы.Договор.Видимость И ВестиРасчетыПоДоговорам;
	
	Элементы.КурсРасчетов.Видимость = ЭтоЗачетПредоплаты;
	
	Элементы.ДеревоГруппаСуммаРасчетов.Видимость = ВыводитьКолонкуСуммаРасчетов;
	
	Элементы.ДеревоРаспределенияСуммыПлатежаОрганизация.Видимость = Константы.УчетПоКомпании.Получить();
	
	НастроитьЭлементыПоВидуКлиента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		//УНФ.ОтборыСписка
		СохранитьНастройкиОтборов();
		//Конец УНФ.ОтборыСписка
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	ИмяКлючаОбъекта = СтрЗаменить(ИмяФормы,".","");
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ОтборПоПериоду", ОтборПериод);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ВидимостьПанелиОтборов", Элементы.ФильтрыНастройкиИДопИнфо.Видимость);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ПоказыватьСоставДокумента", ПоказыватьСоставДокумента);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ОтборНеПоказыватьДокументыПослеТекущего", ОтборНеПоказыватьДокументыПослеТекущего);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ДанныеМеток", ДанныеМеток.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиОтборов()
	
	УстановленыОтборы = Ложь;
	ИмяКлючаОбъекта = СтрЗаменить(ИмяФормы,".","");
	
	ОтборПериод = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ОтборПоПериоду");
	ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(ОтборПериод);
	Если ОтборПериод.ДатаНачала <> '00010101' ИЛИ ОтборПериод.ДатаОкончания <> '00010101' Тогда
		УстановленыОтборы = Истина;
	КонецЕсли;
	
	// ПоказыватьСоставДокумента
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ПоказыватьСоставДокумента", Ложь);
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
		ПоказыватьСоставДокумента = СохраненноеЗначение;
	КонецЕсли;
	
	// ОтборНеПоказыватьДокументыПослеТекущего
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ОтборНеПоказыватьДокументыПослеТекущего", Ложь);
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
		ОтборНеПоказыватьДокументыПослеТекущего = СохраненноеЗначение;
		Если СокрЛП(ОтборНеПоказыватьДокументыПослеТекущего) <> НСтр("ru = 'Показывать все документы'") Тогда
			УстановленыОтборы = Истина;
		КонецЕсли;
	Иначе
		ОтборНеПоказыватьДокументыПослеТекущего = НСтр("ru = 'Показывать все документы'");
	КонецЕсли;
	
	// ДанныеМеток
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ДанныеМеток");
	ИмяТЧДанныеМеток = "ДанныеМеток";
	Форма = ЭтотОбъект;
	
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
		
		// Проверить сохраненные отборы, удалить строки, которых нет в ДоступныхПоляхКомпоновкиДанных
		Форма[ИмяТЧДанныеМеток].Очистить();
		//Форма[ИмяТЧДанныеМеток].Загрузить(СохраненноеЗначение);
		
		Попытка
			Для Каждого ТекущееЗначение Из СохраненноеЗначение Цикл
				
				Если ТекущееЗначение.ИмяПоляОтбора = "Договор"
					И ((ЭтоЗачетПредоплаты ИЛИ ТекущееЗначение.Метка.Владелец <> Контрагент) ИЛИ ПоОдномуДоговору) Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = Форма[ИмяТЧДанныеМеток].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущееЗначение);
				
				ТаблицаИменПолейОтборов = СохраненноеЗначение.Скопировать();
				Для каждого строкаПолейОтборов Из ТаблицаИменПолейОтборов Цикл //цикл по именам полей отбора
					УстановитьМеткуИОтборСписка(строкаПолейОтборов.ИмяПоляОтбора, строкаПолейОтборов.ИмяГруппыРодителя, строкаПолейОтборов.Метка,, Ложь);
					УстановленыОтборы = Истина;
				КонецЦикла;
				
			КонецЦикла;
		Исключение
			// Не будем восстанавливать отборы, если сохраненное значение нельзя обойти циклом "Для Каждого".
		КонецПопытки;
		
		//ОбновитьЭлементыМеток(Форма,, ИмяТЧДанныеМеток);
		
	КонецЕсли;
	
	// Видимость панели отборов
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ВидимостьПанелиОтборов", Истина);
	Если ЗначениеЗаполнено(СохраненноеЗначение) ИЛИ УстановленыОтборы Тогда
		РаботаСОтборами.СвернутьРазвернутьОтборыНаСервере(ЭтотОбъект, СохраненноеЗначение ИЛИ УстановленыОтборы, Неопределено, 27);
	КонецЕсли;
	
	Если УстановленыОтборы Тогда
		ОбновитьДеревоСУчетомОтборов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРаспределенияСуммыПлатежаВыбранПриИзменении(Элемент)
	
	//ДеревоРаспределенияСуммыПлатежаВыбранПриИзмененииНаСервере();
	ТекущиеДанные = Элементы.ДеревоРаспределенияСуммыПлатежа.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено
		И ТекущиеДанные.Выбран
		И НЕ СуммаДокументаРавнаНулю
		И ОсталосьРаспределить = 0 Тогда
		// Пользователь уже все распределил.
		// Установка флага не приведет к изменению значения в колонке "",
		// а пользователь будет думать, что документ зачтен.
		// Чтобы этого не было, выведем предупреждение.
		Если ЭтоЗачетПредоплаты Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Вся сумма уже распределена. Вы можете установить сумму в колонке ""Зачесть"" вручную.'"));
		Иначе
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Вся сумма уже распределена. Вы можете установить сумму в колонке ""Разнести"" вручную.'"));
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьИзмененияФлагаВыбран(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияФлагаВыбран(ТекущиеДанные)
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если СуммаДокументаРавнаНулю Тогда
			Если ТекущиеДанные.Выбран Тогда
				Если ТекущиеДанные.ЭтоАвто Тогда
					// Сейчас ничего не делаем, а будем менять КРаспределению, когда пользователь изменить значение в колонке "Распределить".
				Иначе
					ТекущиеДанные.СуммаПлатежа = ТекущиеДанные.ОжидаетОплаты;
					КРаспределению = КРаспределению + ТекущиеДанные.СуммаПлатежа;
				КонецЕсли;
				Распределено = Распределено + ТекущиеДанные.СуммаПлатежа;
			Иначе
				Распределено = Распределено - ТекущиеДанные.СуммаПлатежа;
				КРаспределению = КРаспределению - ТекущиеДанные.СуммаПлатежа;
				ТекущиеДанные.СуммаПлатежа = 0;
			КонецЕсли;
		Иначе
			Если ТекущиеДанные.Выбран Тогда
				Если ТекущиеДанные.ЭтоАвто Тогда
					ТекущиеДанные.СуммаПлатежа = ?(ОсталосьРаспределить < 0, 0, ОсталосьРаспределить);
				Иначе
					ТекущиеДанные.СуммаПлатежа = Мин(?(ОсталосьРаспределить < 0, 0, ОсталосьРаспределить), ТекущиеДанные.ОжидаетОплаты);
				КонецЕсли;
				Распределено = Распределено + ТекущиеДанные.СуммаПлатежа;
			Иначе
				Распределено = Распределено - ТекущиеДанные.СуммаПлатежа;
				ТекущиеДанные.СуммаПлатежа = 0;
			КонецЕсли;
			Дельта = (ТекущиеДанные.СуммаПлатежаПредыдущееЗначение - ТекущиеДанные.СуммаПлатежа);
			Если НужноРазноситьПоДоговорам Тогда
				УменьшитьСуммуПоДоговоруНаКлиенте(ТекущиеДанные, Дельта);
			ИначеЕсли ЭтоЗачетПредоплаты И ВестиРасчетыПоЗаказам Тогда
				УменьшитьСуммуПоЗаказуНаКлиенте(ТекущиеДанные, Дельта);
			КонецЕсли;
		КонецЕсли;
		ТекущиеДанные.СуммаПлатежаПредыдущееЗначение = ТекущиеДанные.СуммаПлатежа;
		Если НЕ СуммаДокументаРавнаНулю Тогда
			ОсталосьРаспределить = КРаспределению - Распределено;
		КонецЕсли;
		
		Если ЭтоЗачетПредоплаты Тогда
			ТекущиеДанные.СуммаРасчетов = ТекущиеДанные.СуммаПлатежа;
			ПересчитатьСуммуПлатежаПриЗачетеПредоплатыНаКлиенте(ТекущиеДанные);
		Иначе
			ИзменятьСуммуРасчетовВместоКурса = Истина;
			РасчетыРаботаСФормамиКлиент.РасшифровкаПлатежаСуммаПлатежаПриИзмененииЗавершениеНаКлиенте(ТекущиеДанные,
				ДатаДокумента, ВалютаДенежныхСредств, Курс, Кратность, СтавкаНДСПоУмолчанию, ИзменятьСуммуРасчетовВместоКурса
			);
		КонецЕсли;
		
		ЗаполнитьКолонкуДополнительныеРеквизитыСтрокойНаСервере(Неопределено, ТекущиеДанные.ПолучитьИдентификатор());
		УстановитьЗаголовкиИДополнительныеНадписи();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуПлатежаПриЗачетеПредоплатыНаКлиенте(пТекущиеДанные)
	
	Если пТекущиеДанные.ДокументПозжеТекущего И ЭтотОбъект.ВалютаДокумента = ЭтотОбъект.ВалютаРасчетов Тогда
		пТекущиеДанные.СуммаПлатежаПредоплата = пТекущиеДанные.СуммаПлатежа;
	Иначе
		пТекущиеДанные.СуммаПлатежаПредоплата = пТекущиеДанные.СуммаПлатежа * пТекущиеДанные.Курс * Кратность
			/ (?(пТекущиеДанные.Кратность = 0, 1, пТекущиеДанные.Кратность) * ?(Курс = 0, 1, Курс))
		;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммуПлатежаПриЗачетеПредоплатыНаСервере(пТекущиеДанные)
	
	Если пТекущиеДанные.ДокументПозжеТекущего И ЭтотОбъект.ВалютаДокумента = ЭтотОбъект.ВалютаРасчетов Тогда
		пТекущиеДанные.СуммаПлатежаПредоплата = пТекущиеДанные.СуммаПлатежа;
	Иначе
		пТекущиеДанные.СуммаПлатежаПредоплата = пТекущиеДанные.СуммаПлатежа * пТекущиеДанные.Курс * Кратность
			/ (?(пТекущиеДанные.Кратность = 0, 1, пТекущиеДанные.Кратность) * ?(Курс = 0, 1, Курс))
		;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРаспределенияСуммыПлатежаЗачитываемПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРаспределенияСуммыПлатежа.ТекущиеДанные;
	ПриИзмененииСуммыПлатежа(Неопределено, ТекущиеДанные.ПолучитьИдентификатор(), ЭтоЗачетПредоплаты);
	ОбновитьСтрокуТаблицыПоСтрокеДереваНаКлиенте(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура УменьшитьСуммуПоДоговоруНаСервере(ТекущиеДанные, Дельта)
	
	Если ТекущиеДанные = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'В процедуру ""УменьшитьСуммуПоДоговоруНаСервере"" переданы неверные данные.'");
		Возврат;
	КонецЕсли;
	
	// Максимально в дереве может быть 3 уровня группировок.
	// Нам нужна самая верхняя.
	Если ТипЗнч(ТекущиеДанные) = Тип("СтрокаДереваЗначений") Тогда
		Если ТекущиеДанные.Родитель <> Неопределено И ТекущиеДанные.Родитель.Родитель <> Неопределено Тогда
			СтрокаДоговора = ТекущиеДанные.Родитель.Родитель;
		ИначеЕсли ТекущиеДанные.Родитель <> Неопределено Тогда
			СтрокаДоговора = ТекущиеДанные.Родитель;
		Иначе
			СтрокаДоговора = ТекущиеДанные;
		КонецЕсли;
	Иначе
		Если ТекущиеДанные.ПолучитьРодителя() <> Неопределено И ТекущиеДанные.ПолучитьРодителя().ПолучитьРодителя() <> Неопределено Тогда
			СтрокаДоговора = ТекущиеДанные.ПолучитьРодителя().ПолучитьРодителя();
		ИначеЕсли ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
			СтрокаДоговора = ТекущиеДанные.ПолучитьРодителя();
		Иначе
			СтрокаДоговора = ТекущиеДанные;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаДоговора.ОжидаетОплатыИсходноеЗначение < СтрокаДоговора.ОжидаетОплаты + Дельта Тогда
		СтрокаДоговора.ОжидаетОплаты =  СтрокаДоговора.ОжидаетОплатыИсходноеЗначение;
	Иначе
		СтрокаДоговора.ОжидаетОплаты = СтрокаДоговора.ОжидаетОплаты + Дельта;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьСуммуПоДоговоруНаКлиенте(ТекущиеДанные, Дельта)
	
	Если ТекущиеДанные = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'В процедуру ""УменьшитьСуммуПоДоговоруНаКлиенте"" переданы неверные данные.'");
		Возврат;
	КонецЕсли;
	
	// Максимально в дереве может быть 3 уровня группировок.
	// Нам нужна самая верхняя.
	Если ТипЗнч(ТекущиеДанные) <> Тип("ДанныеФормыЭлементДерева") Тогда
		Если ТекущиеДанные.Родитель <> Неопределено И ТекущиеДанные.Родитель.Родитель <> Неопределено Тогда
			СтрокаДоговора = ТекущиеДанные.Родитель.Родитель;
		ИначеЕсли ТекущиеДанные.Родитель <> Неопределено Тогда
			СтрокаДоговора = ТекущиеДанные.Родитель;
		Иначе
			СтрокаДоговора = ТекущиеДанные;
		КонецЕсли;
	Иначе
		Если ТекущиеДанные.ПолучитьРодителя() <> Неопределено И ТекущиеДанные.ПолучитьРодителя().ПолучитьРодителя() <> Неопределено Тогда
			СтрокаДоговора = ТекущиеДанные.ПолучитьРодителя().ПолучитьРодителя();
		ИначеЕсли ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
			СтрокаДоговора = ТекущиеДанные.ПолучитьРодителя();
		Иначе
			СтрокаДоговора = ТекущиеДанные;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДоговора.ОжидаетОплаты = СтрокаДоговора.ОжидаетОплаты + Дельта;
	
КонецПроцедуры

&НаСервере
Процедура УменьшитьСуммуПоЗаказуНаСервере(ТекущиеДанные, Дельта)
	
	Если ТекущиеДанные = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'В процедуру ""УменьшитьСуммуПоЗаказуНаСервере"" переданы неверные данные.'");
		Возврат;
	КонецЕсли;
	
	// При зачете предоплаты максимально в дереве может быть 2 уровня группировок.
	// Нам нужна самая верхняя.
	Если ТипЗнч(ТекущиеДанные) = Тип("СтрокаДереваЗначений") Тогда
		Если ТекущиеДанные.Родитель <> Неопределено Тогда
			СтрокаЗаказа = ТекущиеДанные.Родитель;
		Иначе
			СтрокаЗаказа = ТекущиеДанные;
		КонецЕсли;
	Иначе
		Если ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
			СтрокаЗаказа = ТекущиеДанные.ПолучитьРодителя();
		Иначе
			СтрокаЗаказа = ТекущиеДанные;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаЗаказа.ОжидаетОплатыИсходноеЗначение < СтрокаЗаказа.ОжидаетОплаты + Дельта Тогда
		СтрокаЗаказа.ОжидаетОплаты =  СтрокаЗаказа.ОжидаетОплатыИсходноеЗначение;
	Иначе
		СтрокаЗаказа.ОжидаетОплаты = СтрокаЗаказа.ОжидаетОплаты + Дельта;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьСуммуПоЗаказуНаКлиенте(ТекущиеДанные, Дельта)
	
	Если ТекущиеДанные = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'В процедуру ""УменьшитьСуммуПоЗаказуНаСервере"" переданы неверные данные.'");
		Возврат;
	КонецЕсли;
	
	// При зачете предоплаты максимально в дереве может быть 2 уровня группировок.
	// Нам нужна самая верхняя.
	Если ТипЗнч(ТекущиеДанные) <> Тип("ДанныеФормыЭлементДерева") Тогда
		Если ТекущиеДанные.Родитель <> Неопределено Тогда
			СтрокаЗаказа = ТекущиеДанные.Родитель;
		Иначе
			СтрокаЗаказа = ТекущиеДанные;
		КонецЕсли;
	Иначе
		Если ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
			СтрокаЗаказа = ТекущиеДанные.ПолучитьРодителя();
		Иначе
			СтрокаЗаказа = ТекущиеДанные;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаЗаказа.ОжидаетОплаты = СтрокаЗаказа.ОжидаетОплаты + Дельта;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСуммыПлатежа(пТекущиеДанные, пИдентификатор = Неопределено, ИзменятьСуммуРасчетовВместоКурса = Ложь, ЭтоЗачетРасшифровкиПлатежа = Ложь)
	
	Если пТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = ДеревоРаспределенияСуммыПлатежа.НайтиПоИдентификатору(пИдентификатор);
	Иначе
		ТекущиеДанные = пТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные.Выбран = НЕ (ТекущиеДанные.СуммаПлатежа = 0);
		
		Дельта = (ТекущиеДанные.СуммаПлатежаПредыдущееЗначение - ТекущиеДанные.СуммаПлатежа);
		Распределено = Распределено - Дельта;
		Если СуммаДокументаРавнаНулю Тогда
			КРаспределению = Распределено; //КРаспределению - ТекущиеДанные.СуммаПлатежаПредыдущееЗначение + Распределено;
		Иначе
			ОсталосьРаспределить = КРаспределению + Распределено;
			Если НужноРазноситьПоДоговорам И НЕ ЭтоЗачетРасшифровкиПлатежа Тогда
				УменьшитьСуммуПоДоговоруНаСервере(ТекущиеДанные, Дельта);
			ИначеЕсли ЭтоЗачетПредоплаты И ВестиРасчетыПоЗаказам Тогда
				УменьшитьСуммуПоЗаказуНаСервере(ТекущиеДанные, Дельта);
			КонецЕсли;
		КонецЕсли;
		ТекущиеДанные.СуммаПлатежаПредыдущееЗначение = ТекущиеДанные.СуммаПлатежа;
		
		Если ЭтоЗачетПредоплаты Тогда
			ТекущиеДанные.СуммаРасчетов = ТекущиеДанные.СуммаПлатежа;
			ПересчитатьСуммуПлатежаПриЗачетеПредоплатыНаСервере(ТекущиеДанные);
		Иначе
			РасчетыРаботаСФормамиВызовСервера.РасшифровкаПлатежаСуммаПлатежаПриИзмененииЗавершениеНаСервере(ТекущиеДанные,
				ДатаДокумента, ВалютаДенежныхСредств, Курс, Кратность, СтавкаНДСПоУмолчанию, ИзменятьСуммуРасчетовВместоКурса
			);
		КонецЕсли;
		
		//ЗаполнитьКолонкуДополнительныеРеквизитыСтрокойНаСервере(Неопределено, ТекущиеДанные.ПолучитьИдентификатор());
		ЗаполнитьКолонкуДополнительныеРеквизитыСтрокойНаСервере(ТекущиеДанные, Неопределено);
		УстановитьЗаголовкиИДополнительныеНадписи();
		
		// Если курс был изменён, то пересчитаем "Ожидает оплаты" по новому курсу.
		ПересчитыватьСуммуПлатежа = Ложь;
		ПересчитатьОжидаетОплатыНаСервере(ТекущиеДанные, ПересчитыватьСуммуПлатежа);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекПравойПанелиПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаНастроекПравойПанели.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		// Перемещаем вверх.
		Если Элементы.ТаблицаНастроекПравойПанели.ТекущийЭлемент = Элементы.ТаблицаНастроекПравойПанелиПереместитьВверх Тогда
			Если ТаблицаГруппировокПравойПанели.Индекс(ТекущиеДанные) > 0 Тогда
				ТаблицаГруппировокПравойПанели.Сдвинуть(ТаблицаГруппировокПравойПанели.Индекс(ТекущиеДанные), -1);
				ЗаполнитьДеревоРаспределенияСуммыПлатежаПоДаннымОбОстатках();
				Элементы.ТаблицаНастроекПравойПанели.ТекущаяСтрока = Неопределено;
			КонецЕсли;
		// Перемещаем вниз.
		ИначеЕсли Элементы.ТаблицаНастроекПравойПанели.ТекущийЭлемент = Элементы.ТаблицаНастроекПравойПанелиПереместитьВниз Тогда
			Если ТаблицаГруппировокПравойПанели.Индекс(ТекущиеДанные) < (ТаблицаГруппировокПравойПанели.Количество()-1) Тогда
				ТаблицаГруппировокПравойПанели.Сдвинуть(ТаблицаГруппировокПравойПанели.Индекс(ТекущиеДанные), 1);
				ЗаполнитьДеревоРаспределенияСуммыПлатежаПоДаннымОбОстатках();
				Элементы.ТаблицаНастроекПравойПанели.ТекущаяСтрока = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиФормы()
	
	Если ЭтоЗачетПредоплаты Тогда
		Заголовок = НСтр("ru = 'Помощник зачета предоплаты: '") + Ссылка;
	Иначе
		Заголовок = НСтр("ru = 'Помощник разнесения предоплаты: '") + Ссылка;
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиДерева

&НаКлиенте
Процедура ДеревоРаспределенияСуммыПлатежаПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиДерева", 0.2, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеВалюты(Валюта)
	
	МассивРеквизитовВалюты = Новый Массив;
	МассивРеквизитовВалюты.Добавить("СимвольноеПредставление");
	МассивРеквизитовВалюты.Добавить("Наименование");
	
	СтруктураРеквизитовВалюты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Валюта, МассивРеквизитовВалюты);
	Возврат ?(ПустаяСтрока(СтруктураРеквизитовВалюты.СимвольноеПредставление),
		СтруктураРеквизитовВалюты.Наименование,
		СтруктураРеквизитовВалюты.СимвольноеПредставление
	);
	
КонецФункции

// Обрабатывает событие активизации строки дерева распределения сумм платежа.
//
&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиДерева()
	
	ТекущиеДанныеДерева = Элементы.ДеревоРаспределенияСуммыПлатежа.ТекущиеДанные;
	
	Если ТекущиеДанныеДерева = Неопределено
		ИЛИ ТипЗнч(ТекущиеДанныеДерева.Объект) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		ИЛИ ТипЗнч(ТекущиеДанныеДерева.Объект) = Тип("Строка") Тогда
		//ПредставлениеДокумента = НСтр("ru = '<Документ не выбран>'");
		СуммаТекущегоДокумента = НСтр("ru = '<документ не выбран>'");
		ОплаченоПоТекущемуДокументу = НСтр("ru = '<документ не выбран>'");
		
		ПредставлениеДокумента = "";
		
		СоставДокумента = "<документ не выбран>";
	Иначе
		СуммаТекущегоДокумента = ""+ТекущиеДанныеДерева.СуммаДокумента+" "+ТекущиеДанныеДерева.ВалютаОбъектаПредставление;
		
		Содержимое = Новый Массив;
		Содержимое.Добавить(Новый ФорматированнаяСтрока(""+ТекущиеДанныеДерева.УжеОплачено+" "+ТекущиеДанныеДерева.ВалютаОбъектаПредставление,, ЦветТекстаПравойПанели,, "РасшифроватьОплачено"));
		
		ОплаченоПоТекущемуДокументу = Новый ФорматированнаяСтрока(Содержимое);
		
		ПредставлениеДокумента = ""+ТекущиеДанныеДерева.Объект;
		
		Если ПоказыватьСоставДокумента Тогда
			ЗаполнитьСоставДокументаНаСервере(ТекущиеДанныеДерева.Объект, ТекущиеДанныеДерева.ВалютаОбъектаПредставление);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьАктивизациюСтрокиСписка()

&НаСервере
Процедура ЗаполнитьСоставДокументаНаСервере(пДокумент, пВалютаОбъектаПредставление)
	
	Если Ложь Тогда пДокумент = Документы.ЗаказПокупателя.ПустаяСсылка() КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателяЗапасы.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	ЗаказПокупателяЗапасы.Характеристика.Наименование КАК ХарактеристикаНаименование,
	|	ЗаказПокупателяЗапасы.Партия.Наименование КАК ПартияНаименование,
	|	ЗаказПокупателяЗапасы.Цена КАК Цена,
	|	ЗаказПокупателяЗапасы.Сумма КАК Сумма,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ЗаказПокупателяЗапасы.Количество КАК Количество
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка = &пДокумент";
	
	Если ТипЗнч(пДокумент) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		// В заказе могут быть варианты.
		// Может быть выбран основной вариант.
		// Если основной вариант не выбран, то движения по документу не формируются и в Помощник данные о нем не попадут.
		Запрос.Текст = Запрос.Текст +
		"
		|	И НЕ ЗаказПокупателяЗапасы.ЭтоРазделитель
		|	И (ЗаказПокупателяЗапасы.Ссылка.КоличествоВариантовКП = 0
		|			ИЛИ ЗаказПокупателяЗапасы.НомерВариантаКП = ЗаказПокупателяЗапасы.Ссылка.ОсновнойВариантКП)";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("пДокумент", пДокумент);
	
	Если пДокумент.Метаданные().ТабличныеЧасти.Найти("Запасы") <> Неопределено Тогда
		ИмяТабличнойЧасти = "Запасы";
	ИначеЕсли пДокумент.Метаданные().ТабличныеЧасти.Найти("РаботыИУслуги") <> Неопределено Тогда
		ИмяТабличнойЧасти = "РаботыИУслуги";
	ИначеЕсли пДокумент.Метаданные().ТабличныеЧасти.Найти("Продукция") <> Неопределено Тогда
		ИмяТабличнойЧасти = "Продукция";
	Иначе
		СоставДокумента = "<Для просмотра состава текущего документа откройте его двойным щелчком мышки.>";
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ЗаказПокупателя.Запасы", "Документ."+пДокумент.Метаданные().Имя+"."+ИмяТабличнойЧасти);
	Если пДокумент.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти("Партия") = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказПокупателяЗапасы.Партия.Наименование КАК ПартияНаименование", """"" КАК ПартияНаименование");
	КонецЕсли;
	Если пДокумент.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти("Характеристика") = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказПокупателяЗапасы.Характеристика.Наименование КАК ХарактеристикаНаименование", """"" КАК ХарактеристикаНаименование");
	КонецЕсли;
	
	Если пДокумент.Метаданные().ТабличныеЧасти.Найти("Расходы") <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	ПриходнаяНакладнаяРасходы.Номенклатура.Наименование КАК НоменклатураНаименование,
		|	"""" КАК ХарактеристикаНаименование,
		|	"""" КАК ПартияНаименование,
		|	ПриходнаяНакладнаяРасходы.Цена КАК Цена,
		|	ПриходнаяНакладнаяРасходы.Сумма КАК Сумма,
		|	ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
		|	ПриходнаяНакладнаяРасходы.Количество КАК Количество
		|ИЗ
		|	Документ.ПриходнаяНакладная.Расходы КАК ПриходнаяНакладнаяРасходы
		|ГДЕ
		|	ПриходнаяНакладнаяРасходы.Ссылка = &пДокумент";
	КонецЕсли;
	
	Если пДокумент.Метаданные().ТабличныеЧасти.Найти("Работы") <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	ЗаказПокупателяРаботы.Номенклатура.Наименование КАК НоменклатураНаименование,
		|	ЗаказПокупателяРаботы.Характеристика.Наименование КАК ХарактеристикаНаименование,
		|	"""" КАК ПартияНаименование,
		|	ЗаказПокупателяРаботы.Цена КАК Цена,
		|	ЗаказПокупателяРаботы.Сумма КАК Сумма,
		|	ЗаказПокупателяРаботы.Номенклатура.ЕдиницаИзмерения.Наименование КАК НоменклатураЕдиницаИзмеренияНаименование,
		|	ЗаказПокупателяРаботы.Количество КАК Количество
		|ИЗ
		|	Документ.ЗаказПокупателя.Работы КАК ЗаказПокупателяРаботы
		|ГДЕ
		|	ЗаказПокупателяРаботы.Ссылка = &пДокумент";
	КонецЕсли;
	
	Если пДокумент.Ссылка.Метаданные().Реквизиты.Найти("НоменклатураДоставки") <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
		
		ТекстЗапросаДоставка =
		"ВЫБРАТЬ
		|	РасходнаяНакладная.НоменклатураДоставки.Наименование КАК НоменклатураДоставкиНаименование,
		|	"""" КАК ХарактеристикаНаименование,
		|	"""" КАК ПартияНаименование,
		|	РасходнаяНакладная.СтоимостьДоставки КАК Цена,
		|	РасходнаяНакладная.СтоимостьДоставки КАК Сумма,
		|	РасходнаяНакладная.НоменклатураДоставки.ЕдиницаИзмерения.Наименование КАК НоменклатураДоставкиЕдиницаИзмеренияНаименование,
		|	1 КАК Количество
		|ИЗ
		|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
		|ГДЕ
		|	РасходнаяНакладная.Ссылка = &пДокумент
		|	И РасходнаяНакладная.СтоимостьДоставки > 0";
		
		ТекстЗапросаДоставка = СтрЗаменить(ТекстЗапросаДоставка, "Документ.РасходнаяНакладная КАК", "Документ."+пДокумент.Метаданные().Имя+" КАК");
		
		Запрос.Текст = Запрос.Текст + ТекстЗапросаДоставка;
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЭтоПерваяСтрока = Истина;
	Пока Выборка.Следующий() Цикл
		Если ЭтоПерваяСтрока Тогда
			ЭтоПерваяСтрока = Ложь;
			СоставДокумента = "";
		Иначе
			СоставДокумента = СоставДокумента+Символы.ПС;
		КонецЕсли;
		
		СоставДокумента = СоставДокумента+Выборка.НоменклатураНаименование
			+Символы.ПС+Символы.Таб
			+РасчетыРаботаСФормамиВызовСервера.ПолучитьОписаниеДляСтрокиТЧЗапасыНаСервере(Выборка, пВалютаОбъектаПредставление)
		;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНадписьКРаспределению(КРаспределению, ВалютаДенежныхСредств)
	
	ТекстСуммаВРазныхВалютах = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 3
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность,
	|	КурсыВалютСрезПоследних.Валюта.СимвольноеПредставление КАК ВалютаСимвольноеПредставление
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(
	|			&Период,
	|			НЕ Валюта.ПометкаУдаления
	|				И Валюта <> &НациональнаяВалюта
	|				И Валюта <> &ВалютаДенежныхСредств) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 3
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаДенежныхСредств) КАК КурсыВалютСрезПоследних";
	
	Запрос.УстановитьПараметр("НациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
	Запрос.УстановитьПараметр("ВалютаДенежныхСредств", ВалютаДенежныхСредств);
	Запрос.УстановитьПараметр("Период", НачалоДня(ТекущаяДатаСеанса()));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ВыборкаВалютаДокумента = МассивРезультатов[1].Выбрать();
	Если НЕ ВыборкаВалютаДокумента.Следующий() Тогда
		ВызватьИсключение НСтр("ru = 'Не указана валюта денежных средств.'");
		Возврат "";
	КонецЕсли;
	
	Выборка = МассивРезультатов[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СуммаВВалюте = КРаспределению * ВыборкаВалютаДокумента.Курс * Выборка.Кратность / (ВыборкаВалютаДокумента.Кратность * Выборка.Курс);
		СуммаВВалюте = Формат(СуммаВВалюте, "ЧДЦ=2");
		
		Если ЗначениеЗаполнено(ТекстСуммаВРазныхВалютах) Тогда
			ТекстСуммаВРазныхВалютах = ТекстСуммаВРазныхВалютах + " / ";
		КонецЕсли;
		ТекстСуммаВРазныхВалютах = ТекстСуммаВРазныхВалютах + 
			СуммаВВалюте + ", " + Выборка.ВалютаСимвольноеПредставление;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстСуммаВРазныхВалютах) Тогда
		НадписьКРаспределению = "(" + НСтр("ru = 'по текущему курсу это %ДанныеВоВсехВалютах%'") + ")";
		НадписьКРаспределению = СтрЗаменить(НадписьКРаспределению, "%ДанныеВоВсехВалютах%", ТекстСуммаВРазныхВалютах);
	Иначе
		НадписьКРаспределению = "";
	КонецЕсли;
	
	Возврат НадписьКРаспределению;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации, ВестиРасчетыПоДоговорам)
	
	Если НЕ ВестиРасчетыПоДоговорам Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтНашейОрганизации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтНашейОрганизации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НашейОрганизации Тогда
		ДоговорПоУмолчанию = ИнтеркампаниСервер.ДоговорПередачиПоУмолчанию(Организация, ВидОперации);
	Иначе
		МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
		СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
		ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	КонецЕсли; 
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовкиИДополнительныеНадписи()
	
	ПредставлениеВалютыДокумента = ПолучитьПредставлениеВалюты(ВалютаДенежныхСредств);
	
	Если ЭтоЗачетПредоплаты Тогда
		
		// Заголовок надписей в шапке
		Элементы.ОсталосьРаспределить.Заголовок = НСтр("ru = 'Осталось зачесть'");
		Элементы.Распределено.Заголовок = НСтр("ru = 'Зачтено'");
		Элементы.СуммаИтогДолгСтрока.Заголовок = НСтр("ru = 'Остаток предоплаты'");
		Элементы.ОплаченоПоТекущемуДокументу.Заголовок = НСтр("ru = 'Разнесено'");
		Элементы.ДеревоРаспределенияСуммыПлатежаСуммаПлатежаПредоплаты.Заголовок = НСтр("ru = 'Сумма, '")+Константы.НациональнаяВалюта.Получить().СимвольноеПредставление;
		
	Иначе
		
		Элементы.ОсталосьРаспределить.Заголовок = НСтр("ru = 'Осталось разнести'");
		Элементы.КРаспределению.Заголовок = НСтр("ru = 'Сумма документа'");
		Элементы.Распределено.Заголовок = НСтр("ru = 'Разнесено'");
		
		Если СуммаДокументаРавнаНулю Тогда
			Элементы.ПодменюРазнести.Заголовок = НСтр("ru = 'Заполнить по остаткам'");
		КонецЕсли;
		
	КонецЕсли;
	
	НадписьКРаспределению = ПолучитьНадписьКРаспределению(КРаспределению, ВалютаДенежныхСредств);
	Элементы.КРаспределению.Подсказка = НадписьКРаспределению;
	
	Если СуммаДокументаРавнаНулю Тогда
		ОсталосьРаспределить = 0;
	Иначе
		ОсталосьРаспределить = КРаспределению - Распределено;
	КонецЕсли;
	Если ОсталосьРаспределить > 0 Тогда
		
		КомпонентыФС = Новый Массив;
		
		Надпись = "("+НСтр("ru = 'остаток '")+ОсталосьРаспределить+" "+ПредставлениеВалютыДокумента;
		КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(Надпись));
		
		Надпись = ")";
		КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(Надпись));
		
		Надпись = Новый ФорматированнаяСтрока(КомпонентыФС, , ЦветаСтиля.ТекстВторостепеннойНадписи);
		
		Элементы.ДекорацияРаспределено.Заголовок = Надпись;
		
		Элементы.Распределено.ЦветТекста = Новый Цвет;
		
	ИначеЕсли ОсталосьРаспределить = 0 Тогда
		
		Элементы.ДекорацияРаспределено.Заголовок = "";
		Элементы.Распределено.ЦветТекста = Новый Цвет;
		
	Иначе
		
		Элементы.ДекорацияРаспределено.Заголовок = "("+НСтр("ru = 'разнесено больше, чем требуется!)'");
		Элементы.Распределено.ЦветТекста = WebЦвета.Красный;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Расчеты

Функция ПолучитьЗапросПоСвязаннымДокументам()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателями.Договор КАК Договор,
	|	РасчетыСПокупателями.Заказ КАК Заказ,
	|	РасчетыСПокупателями.Регистратор КАК Документ,
	|	СУММА(РасчетыСПокупателями.Сумма) КАК Сумма,
	|	СУММА(РасчетыСПокупателями.СуммаВал) КАК СуммаРасчетов,
	|	РасчетыСПокупателями.Кратность КАК Кратность,
	|	СУММА(РасчетыСПокупателями.СуммаРег) КАК СуммаРег,
	|	СУММА(РасчетыСПокупателями.СуммаПлатежа) КАК СуммаПлатежа,
	|	РасчетыСПокупателями.Курс КАК Курс
	|ПОМЕСТИТЬ ВременнаяТаблицаПредоплата
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
	|ГДЕ
	|	НЕ &ЭтоЗачетПредоплаты
	|	И РасчетыСПокупателями.Организация = &Организация
	|	И РасчетыСПокупателями.Контрагент = &Контрагент
	|	И РасчетыСПокупателями.ТипРасчетов = &ТипРасчетовДолг
	|	И РасчетыСПокупателями.Регистратор <> &Ссылка
	|	И РасчетыСПокупателями.ВидДвижения = &ВидДвиженияРасход
	|	И РасчетыСПокупателями.ДокументОплаты = &Ссылка
	|	И (ТИПЗНАЧЕНИЯ(РасчетыСПокупателями.Регистратор) <> ТИП(Документ.ЗаказПокупателя)
	|			ИЛИ РасчетыСПокупателями.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд))
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателями.Договор,
	|	РасчетыСПокупателями.Заказ,
	|	РасчетыСПокупателями.Регистратор,
	|	РасчетыСПокупателями.Кратность,
	|	РасчетыСПокупателями.Курс
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПокупателями.Договор,
	|	РасчетыСПокупателями.Заказ,
	|	РасчетыСПокупателями.Регистратор,
	|	СУММА(РасчетыСПокупателями.Сумма),
	|	СУММА(РасчетыСПокупателями.СуммаВал),
	|	РасчетыСПокупателями.Кратность,
	|	СУММА(РасчетыСПокупателями.СуммаРег),
	|	СУММА(РасчетыСПокупателями.СуммаПлатежа),
	|	РасчетыСПокупателями.Курс
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
	|ГДЕ
	|	НЕ &ЭтоЗачетПредоплаты
	|	И РасчетыСПокупателями.Организация = &Организация
	|	И РасчетыСПокупателями.Контрагент = &Контрагент
	|	И РасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|	И РасчетыСПокупателями.Регистратор <> &Ссылка
	|	И РасчетыСПокупателями.ВидДвижения = &ВидДвиженияПриход
	|	И РасчетыСПокупателями.Документ = &Ссылка
	|	И (ТИПЗНАЧЕНИЯ(РасчетыСПокупателями.Регистратор) <> ТИП(Документ.ЗаказПокупателя)
	|			ИЛИ РасчетыСПокупателями.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд))
	|	И РасчетыСПокупателями.СпособЗачета = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаИРаспределенияПлатежей.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателями.Договор,
	|	РасчетыСПокупателями.Заказ,
	|	РасчетыСПокупателями.Регистратор,
	|	РасчетыСПокупателями.Кратность,
	|	РасчетыСПокупателями.Курс
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПокупателями.Договор,
	|	РасчетыСПокупателями.Заказ,
	|	РасчетыСПокупателями.Регистратор,
	|	СУММА(РасчетыСПокупателями.Сумма),
	|	СУММА(РасчетыСПокупателями.СуммаВал),
	|	РасчетыСПокупателями.Кратность,
	|	СУММА(РасчетыСПокупателями.СуммаРег),
	|	СУММА(РасчетыСПокупателями.СуммаПлатежа),
	|	РасчетыСПокупателями.Курс
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
	|ГДЕ
	|	&ЭтоЗачетПредоплаты
	|	И РасчетыСПокупателями.Организация = &Организация
	|	И РасчетыСПокупателями.Контрагент = &Контрагент
	|	И РасчетыСПокупателями.ТипРасчетов = &ТипРасчетовДолг
	|	И РасчетыСПокупателями.Регистратор <> &Ссылка
	|	И РасчетыСПокупателями.ВидДвижения = &ВидДвиженияРасход
	|	И РасчетыСПокупателями.Документ = &Ссылка
	|	И ТИПЗНАЧЕНИЯ(РасчетыСПокупателями.Регистратор) <> ТИП(Документ.ЗаказПокупателя)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателями.Договор,
	|	РасчетыСПокупателями.Заказ,
	|	РасчетыСПокупателями.Регистратор,
	|	РасчетыСПокупателями.Кратность,
	|	РасчетыСПокупателями.Курс
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПокупателями.Договор,
	|	РасчетыСПокупателями.Заказ,
	|	РасчетыСПокупателями.Регистратор,
	|	СУММА(РасчетыСПокупателями.Сумма),
	|	СУММА(РасчетыСПокупателями.СуммаВал),
	|	РасчетыСПокупателями.Кратность,
	|	СУММА(РасчетыСПокупателями.СуммаРег),
	|	СУММА(РасчетыСПокупателями.СуммаПлатежа),
	|	РасчетыСПокупателями.Курс
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
	|ГДЕ
	|	&ЭтоЗачетПредоплаты
	|	И &ЭтоЗаказ
	|	И РасчетыСПокупателями.Организация = &Организация
	|	И РасчетыСПокупателями.Контрагент = &Контрагент
	|	И РасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|	И РасчетыСПокупателями.ВидДвижения = &ВидДвиженияРасход
	|	И РасчетыСПокупателями.Регистратор <> &Ссылка
	|	И РасчетыСПокупателями.Заказ = &Ссылка
	|	И ТИПЗНАЧЕНИЯ(РасчетыСПокупателями.Регистратор) <> ТИП(Документ.ЗаказПокупателя)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателями.Договор,
	|	РасчетыСПокупателями.Заказ,
	|	РасчетыСПокупателями.Регистратор,
	|	РасчетыСПокупателями.Кратность,
	|	РасчетыСПокупателями.Курс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаПредоплата.Договор КАК Договор,
	|	ВременнаяТаблицаПредоплата.Заказ КАК Заказ,
	|	ВременнаяТаблицаПредоплата.Документ КАК Документ,
	|	ВременнаяТаблицаПредоплата.Сумма КАК Сумма,
	|	ВременнаяТаблицаПредоплата.СуммаРасчетов КАК СуммаРасчетов,
	|	ВременнаяТаблицаПредоплата.Кратность КАК Кратность,
	|	ВременнаяТаблицаПредоплата.СуммаРег КАК СуммаРег,
	|	ВременнаяТаблицаПредоплата.СуммаПлатежа КАК СуммаПлатежа,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВременнаяТаблицаПредоплата.Курс, 0) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ВременнаяТаблицаПредоплата.СуммаРасчетов, 0) = 0
	|						ТОГДА 1
	|					КОГДА ЕСТЬNULL(ВременнаяТаблицаПредоплата.СуммаПлатежа, 0) = 0
	|						ТОГДА ВЫБОР
	|								КОГДА ЕСТЬNULL(ВременнаяТаблицаПредоплата.СуммаРег, 0) = 0
	|									ТОГДА 1
	|								ИНАЧЕ ВременнаяТаблицаПредоплата.СуммаРег / ВременнаяТаблицаПредоплата.СуммаРасчетов
	|							КОНЕЦ
	|					ИНАЧЕ ВременнаяТаблицаПредоплата.СуммаПлатежа / ВременнаяТаблицаПредоплата.СуммаРасчетов
	|				КОНЕЦ
	|		ИНАЧЕ ВременнаяТаблицаПредоплата.Курс
	|	КОНЕЦ КАК Курс
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ВременнаяТаблицаПредоплата";

	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура УчестьДанныеРасшифровкиПлатежаИСвязанныхДокументов()
	
	#Область ПодготовкаТаблицыДанныхИзДокумента
	
	ТаблицаРасшифровкаПлатежа = ПолучитьИзВременногоХранилища(АдресРасшифровкаПлатежаВХранилище).Скопировать();
	ТаблицаРасшифровкаПлатежаИтоги = ТаблицаРасшифровкаПлатежа.Скопировать();
	Если ЭтоЗачетПредоплаты Тогда
		Если ЭтоЗаказ Тогда
			ТаблицаРасшифровкаПлатежаИтоги.Свернуть("", "СуммаПлатежа");
		Иначе
			ТаблицаРасшифровкаПлатежаИтоги.Свернуть("Заказ", "СуммаПлатежа");
		КонецЕсли;
	Иначе
		ТаблицаРасшифровкаПлатежаИтоги.Свернуть("Договор", "СуммаПлатежа");
	КонецЕсли;
	
	Если Ложь Тогда ТаблицаРасшифровкаПлатежа = Новый ТаблицаЗначений КонецЕсли;
	Если ЭтоЗачетПредоплаты Тогда
		Если ТаблицаРасшифровкаПлатежа.Колонки.Найти("Договор") = Неопределено Тогда
			ТаблицаРасшифровкаПлатежа.Колонки.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоЗаказ Тогда
		ТаблицаРасшифровкаПлатежа.Колонки.Добавить("Заказ", 
			?(ЭтоРасчетыСПоставщиком, Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику"), Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя")))
		;
	КонецЕсли;
	
	Если ТаблицаРасшифровкаПлатежа.Колонки.Найти("Порядок") = Неопределено Тогда
		ТаблицаРасшифровкаПлатежа.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	КонецЕсли;
	Для Каждого ТекущаяСтрока Из ТаблицаРасшифровкаПлатежа Цикл
		Если ЭтоЗачетПредоплаты Тогда
			ТекущаяСтрока.Порядок = 1;
			ТекущаяСтрока.Договор = Договор;
			// При зачете предоплаты распределение выполняем в валюте расчетов по договору.
			Если ВалютаРасчетов <> ВалютаДокумента Тогда
				ТекущаяСтрока.СуммаПлатежа = ТекущаяСтрока.СуммаРасчетов;
			КонецЕсли;
		Иначе
			ТекущаяСтрока.Порядок = ?(ТекущаяСтрока.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто, 2, 1);
		КонецЕсли;
		Если ЭтоЗаказ Тогда
			ТекущаяСтрока.Заказ = ?(ЭтоРасчетыСПоставщиком, Документы.ЗаказПоставщику.ПустаяСсылка(), Документы.ЗаказПокупателя.ПустаяСсылка());
		Иначе
			ТекущаяСтрока.Заказ = ?(ЗначениеЗаполнено(ТекущаяСтрока.Заказ), ТекущаяСтрока.Заказ, Неопределено);
		КонецЕсли;
		ТекущаяСтрока.Документ = ?(ЗначениеЗаполнено(ТекущаяСтрока.Документ), ТекущаяСтрока.Документ, Неопределено);
	КонецЦикла;
	ТаблицаРасшифровкаПлатежа.Сортировать("Порядок");
	
	#КонецОбласти
	
	ТаблицаДокументовДляИзменения = ПолучитьИзВременногоХранилища(АдресТаблицаДокументовДляИзмененияВХранилище);
	Для Каждого ТекущаяСтрока Из ТаблицаДокументовДляИзменения Цикл
		ТекущаяСтрока.Заказ = ?(ЗначениеЗаполнено(ТекущаяСтрока.Заказ), ТекущаяСтрока.Заказ, Неопределено);
		ТекущаяСтрока.Документ = ?(ЗначениеЗаполнено(ТекущаяСтрока.Документ), ТекущаяСтрока.Документ, Неопределено);
	КонецЦикла;
	
	ДеревоЗначенийДляПоиска = РеквизитФормыВЗначение("ДеревоРаспределенияСуммыПлатежа");
	КоллекцияСтрокДереваЗначенийДляПоиска = ДеревоЗначенийДляПоиска.Строки;
	
	// Общий порядок.
	// Сначала обрабатываем связанные документы.
	// Если они встречаются в ТаблицаДокументовДляИзменения, то мы их пропускаем, т.к. данные в таблице с изменениями более приоритетны.
	// Если не встречаются - добавляем их в ТаблицаДокументовДляИзменения,
	// чтобы потом скорректировать данные в расшифровке и в дереве.
	
	// 0. Сначала обработаем данные из других документов.
	// 0.1. Нужно скорректировать информацию по тем документам, которые есть в ТаблицаДокументовДляИзменения.
	// 0.2. Во вторую очередь перенесём данные в дерево распределения.
	
	// В документах, которые оформлены до 1.6.14 реквизит движения СпособЗачета не заполнен.
	
	#Область ПодготовкаЗапроса
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьЗапросПоСвязаннымДокументам();
	
	Если ЭтоРасчетыСПоставщиком Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасчетыСПокупателями", "РасчетыСПоставщиками");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация",  Константы.УчетПоКомпании.Компания(Организация));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТипРасчетовАванс", Перечисления.ТипыРасчетов.Аванс);
	Запрос.УстановитьПараметр("ТипРасчетовДолг", Перечисления.ТипыРасчетов.Долг);
	Запрос.УстановитьПараметр("ЭтоЗачетПредоплаты", ЭтоЗачетПредоплаты);
	Запрос.УстановитьПараметр("ЭтоЗаказ", ЭтоЗаказ);
	
	#КонецОбласти
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура("Договор, Заказ, Документ");
		ПараметрыОтбора.Вставить("Договор", Выборка.Договор);
		ПараметрыОтбора.Вставить("Заказ", ?(ЗначениеЗаполнено(Выборка.Заказ), Выборка.Заказ, Неопределено));
		ПараметрыОтбора.Вставить("Документ", ?(ЗначениеЗаполнено(Выборка.Документ), Выборка.Документ, Неопределено));
		НайденныеСтрокиДляИзменения = ТаблицаДокументовДляИзменения.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтрокиДляИзменения.Количество() = 0 Тогда
			НоваяСтрока = ТаблицаДокументовДляИзменения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			Если ВалютаДокумента = ВалютаРасчетов Тогда
				НоваяСтрока.СуммаПлатежа = НоваяСтрока.СуммаРасчетов;
			Иначе
				НоваяСтрока.СуммаПлатежа = НоваяСтрока.СуммаРасчетов * ?(Выборка.Курс = 0, 1, Выборка.Курс) * Кратность / (Курс * ?(Выборка.Кратность = 0, 1, Выборка.Кратность));
			КонецЕсли;
			НоваяСтрока.ЭтоСуществующийЗачет = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// 1. Сначала обработаем таблицу документов для изменения.
	Для Каждого ТекущаяСтрока Из ТаблицаДокументовДляИзменения Цикл
		
		Если ТекущаяСтрока.ВариантИзмененияДанных = ПредопределенноеЗначение("Перечисление.ВариантыИзмененияДанныхВДокументахИзПомощника.Удаление")
			И ТекущаяСтрока.ЭтоСуществующийЗачет Тогда
			ОбработатьСтрокуРасшифровкиПлатежа(ТекущаяСтрока, КоллекцияСтрокДереваЗначенийДляПоиска, Истина, Истина);
			Продолжить;
		КонецЕсли;
		
		// 1.1. Скорректируем расшифровку платежа.
		Если ЭтоЗачетПредоплаты Тогда
			ПараметрыОтбора = Новый Структура("Договор, Заказ, Документ");
			ПараметрыОтбора.Вставить("Договор", ТекущаяСтрока.Договор);
			ПараметрыОтбора.Вставить("Заказ", ?(ЗначениеЗаполнено(ТекущаяСтрока.Заказ), ТекущаяСтрока.Заказ, Неопределено));
			ПараметрыОтбора.Вставить("Документ", ?(ЗначениеЗаполнено(ТекущаяСтрока.Документ), ТекущаяСтрока.Документ, Неопределено));
		Иначе
			ПараметрыОтбора = Новый Структура("Договор, Заказ");
			ПараметрыОтбора.Вставить("Договор", ТекущаяСтрока.Договор);
			ПараметрыОтбора.Вставить("Заказ", ?(ЗначениеЗаполнено(ТекущаяСтрока.Заказ), ТекущаяСтрока.Заказ, Неопределено));
		КонецЕсли;
		НайденныеСтрокиРасшифровки = ТаблицаРасшифровкаПлатежа.НайтиСтроки(ПараметрыОтбора);
		
		// Сначала распределим строки по заказу, если он выбран.
		НужноРаспределить = ТекущаяСтрока.СуммаРасчетов;
		УчестьДанныеСуществующихЗачетов(НайденныеСтрокиРасшифровки, НужноРаспределить);
		
		// Теперь без заказа, т.к. в накладной по заказу можно зачесть предоплату без заказа.
		Если НужноРаспределить > 0
			И ЗначениеЗаполнено(ТекущаяСтрока.Заказ)
			И НЕ ЭтоЗачетПредоплаты Тогда
			ПараметрыОтбора.Вставить("Заказ", Неопределено);
			НайденныеСтрокиРасшифровки = ТаблицаРасшифровкаПлатежа.НайтиСтроки(ПараметрыОтбора);
			УчестьДанныеСуществующихЗачетов(НайденныеСтрокиРасшифровки, НужноРаспределить);
		КонецЕсли;
		
		// 1.2. Перенесём данные в дерево распределения.
		ЭтоСуществующийЗачет = ТекущаяСтрока.ЭтоСуществующийЗачет;
		ОбработатьСтрокуРасшифровкиПлатежа(ТекущаяСтрока, КоллекцияСтрокДереваЗначенийДляПоиска, ЭтоСуществующийЗачет);
		
	КонецЦикла;
	
	// Во 2 очередь зачтем расшифровку платежа.
	Для Каждого ТекущаяСтрока Из ТаблицаРасшифровкаПлатежа Цикл
		
		Если ТекущаяСтрока.СуммаПлатежа = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Ложь И НЕ ЭтоЗачетПредоплаты И ТекущаяСтрока.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто Тогда
			
			//Если КоличествоДоговоров > 1 Тогда
				ПараметрыОтбора = Новый Структура("ЭтоАвто, Договор", Истина, ТекущаяСтрока.Договор);
				НайденныеСтроки = КоллекцияСтрокДереваЗначенийДляПоиска.НайтиСтроки(ПараметрыОтбора, Истина);
				
				Если НайденныеСтроки.Количество() = 1 Тогда
					ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], ТекущаяСтрока,, "СуммаПлатежа, СуммаРасчетов");
					НайденныеСтроки[0].КурсИсходноеЗначение = НайденныеСтроки[0].Курс;
					НайденныеСтроки[0].Выбран = Истина;
					НайденныеСтроки[0].СуммаПлатежа = НайденныеСтроки[0].СуммаПлатежа + ТекущаяСтрока.СуммаПлатежа;
					ПриИзмененииСуммыПлатежа(НайденныеСтроки[0]);
					// Т.к. мы поменяли курс, нужно пересчитать и значение в колонке ОжидаетОплаты.
					НайденныеСтроки[0].ОжидаетОплаты = НайденныеСтроки[0].ОстатокКОплатеВалРасчетов * НайденныеСтроки[0].Курс * Кратность /
						(Курс * НайденныеСтроки[0].Кратность);
					;
				КонецЕсли;
			//КонецЕсли;
			
		Иначе
			
			ОбработатьСтрокуРасшифровкиПлатежа(ТекущаяСтрока, КоллекцияСтрокДереваЗначенийДляПоиска);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если в ТЧ по каждому договору только одна комбинация курс+кратность, то курс для всех строк по договору установим,
	// как в документе. В текущей форме пользователь может поменять курс в форме вручную или через контекстное меню.
	// 1. Определим количество комбинаций курс+кратность для каждого договора.
	ДоговорыИКурсы = ТаблицаРасшифровкаПлатежа.Скопировать(, "Договор, Курс, Кратность");
	ДоговорыИКурсы.Колонки.Добавить("Служебная"); // Для подсчета количества строк.
	
	Для Каждого ТекущаяСтрока Из ДоговорыИКурсы Цикл
		ТекущаяСтрока.Служебная = 1;
	КонецЦикла;
	
	ДоговорыИКурсы.Свернуть("Договор, Курс, Кратность", "Служебная");
	
	// 2. Определим количество строк для каждого договора.
	Договоры = ТаблицаРасшифровкаПлатежа.Скопировать(, "Договор");
	Договоры.Колонки.Добавить("Служебная"); // Для подсчета количества строк.
	
	Для Каждого ТекущаяСтрока Из Договоры Цикл
		ТекущаяСтрока.Служебная = 1;
	КонецЦикла;
	
	Договоры.Свернуть("Договор", "Служебная");
	ДоговорыСоответствие = Новый Соответствие;
	Для Каждого ТекущаяСтрока Из Договоры Цикл
		ДоговорыСоответствие.Вставить(ТекущаяСтрока.Договор, ТекущаяСтрока.Служебная);
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из ДоговорыИКурсы Цикл
		Если ТекущаяСтрока.Служебная = ДоговорыСоответствие.Получить(ТекущаяСтрока.Договор) Тогда
			// Изменим курс у всех строк по договору.
			Если Контрагент.ВестиРасчетыПоДоговорам Тогда
				СтрокиСДоговорами = ДеревоЗначенийДляПоиска.Строки;
				Для Каждого ТекущаяСтрокаДоговора Из СтрокиСДоговорами Цикл
					Если ТекущаяСтрокаДоговора.Договор = ТекущаяСтрока.Договор Тогда
						ТекущаяСтрокаДоговора.Курс = ТекущаяСтрока.Курс;
						// Изменим курс во всех подчиненных строках
						ИзменитьКурсРекурсивноНаСервере(ТекущаяСтрокаДоговора.Строки, ТекущаяСтрока.Курс);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ИзменитьКурсРекурсивноНаСервере(ДеревоЗначенийДляПоиска.Строки, ТекущаяСтрока.Курс);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	#Область ОжидаетОплатыИсходноеЗначение
	
	// Заполним информацию об исходных суммах для распределения.
	// Эта сумма используется, когда пользователь очищает все флаги.
	//
	// При зачёте предоплаты важно распределять по заказам, а
	// при распределении платежа важно распределять по договорам.
	ПараметрыОтбора = Новый Структура;
	Если ЭтоЗачетПредоплаты И ВестиРасчетыПоЗаказам И Не ЭтоЗаказ ИЛИ НЕ ЭтоЗачетПредоплаты И ВестиРасчетыПоДоговорам Тогда
		Для Каждого ТекущаяСтрокаРасшифровки Из ТаблицаРасшифровкаПлатежаИтоги Цикл
			
			Если ЭтоЗачетПредоплаты Тогда
				Если ЭтоЗаказ Тогда
					ПараметрыОтбора.Вставить("Заказ", Документы.ЗаказПокупателя.ПустаяСсылка());
				ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрокаРасшифровки.Заказ) Тогда
					ПараметрыОтбора.Вставить("Заказ", ТекущаяСтрокаРасшифровки.Заказ);
				Иначе
					ПараметрыОтбора.Вставить("Заказ", ?(ЭтоРасчетыСПоставщиком, Документы.ЗаказПоставщику.ПустаяСсылка(), Документы.ЗаказПокупателя.ПустаяСсылка()));
				КонецЕсли;
				ПараметрыОтбора.Вставить("Документ", Неопределено);
			Иначе
				ПараметрыОтбора.Вставить("Договор", ТекущаяСтрокаРасшифровки.Договор);
				ПараметрыОтбора.Вставить("Документ", Неопределено);
				ПараметрыОтбора.Вставить("Заказ", Неопределено);
			КонецЕсли;
			ПараметрыОтбора.Вставить("ОжидаетОплатыИсходноеЗначение", 0);
			
			НайденныеСтроки = КоллекцияСтрокДереваЗначенийДляПоиска.НайтиСтроки(ПараметрыОтбора, Истина);
			Если НайденныеСтроки.Количество() = 1 Тогда
				НайденныеСтроки[0].ОжидаетОплатыИсходноеЗначение = ТекущаяСтрокаРасшифровки.СуммаПлатежа;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	#КонецОбласти
	
	ПересчитатьОжидаетОплатыНаСервереРекурсивно(ДеревоЗначенийДляПоиска.Строки);
	ЗначениеВРеквизитФормы(ДеревоЗначенийДляПоиска, "ДеревоРаспределенияСуммыПлатежа");
	
КонецПроцедуры

Процедура УчестьДанныеСуществующихЗачетов(НайденныеСтрокиРасшифровки, НужноРаспределить)
	
	Если НайденныеСтрокиРасшифровки.Количество() > 0 Тогда
		
		Для Каждого СтрокаРасшифровки Из НайденныеСтрокиРасшифровки Цикл
			
			Если СтрокаРасшифровки.СуммаРасчетов <= НужноРаспределить Тогда
				
				НужноРаспределить = НужноРаспределить - СтрокаРасшифровки.СуммаРасчетов;
				СтрокаРасшифровки.СуммаРасчетов = 0;
				СтрокаРасшифровки.СуммаПлатежа = 0;
				
			Иначе
				
				Коэффициент = ?(СтрокаРасшифровки.СуммаПлатежа = 0, СтрокаРасшифровки.Курс, СтрокаРасшифровки.СуммаРасчетов / СтрокаРасшифровки.СуммаПлатежа);
				СтрокаРасшифровки.СуммаРасчетов = СтрокаРасшифровки.СуммаРасчетов - НужноРаспределить;
				СтрокаРасшифровки.СуммаПлатежа = Окр(СтрокаРасшифровки.СуммаРасчетов * Коэффициент, 2);
				НужноРаспределить = 0;
				
			КонецЕсли;
			
			Если НужноРаспределить = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьОжидаетОплатыНаСервереРекурсивно(пСтроки)

	Для Каждого ТекущаяСтрока Из пСтроки Цикл
		Если ТекущаяСтрока.ЭтоСуществующийЗачет ИЛИ ТекущаяСтрока.КурсИсходноеЗначение <> ТекущаяСтрока.Курс Тогда
			ПересчитатьОжидаетОплатыНаСервере(ТекущаяСтрока);
		КонецЕсли;
		ПересчитатьОжидаетОплатыНаСервереРекурсивно(ТекущаяСтрока.Строки);
	КонецЦикла;

КонецПроцедуры

// Инкапсулируем ту часть, которая может меняться с более высокой вероятностью.
&НаСервере
Процедура ЗаполнитьИсходныеЗначения(СтрокаДерева)
	
	СтрокаДерева.ЭтоСуществующийЗачет = Истина;
	СтрокаДерева.ДокументИсходноеЗначение = СтрокаДерева.Документ;
	СтрокаДерева.ЗаказИсходноеЗначение = СтрокаДерева.Заказ;
	СтрокаДерева.СуммаРасчетовИсходноеЗначение = СтрокаДерева.СуммаРасчетов;
	СтрокаДерева.КурсИсходноеЗначение = СтрокаДерева.Курс;
	СтрокаДерева.СуммаПлатежаИсходноеЗначение = СтрокаДерева.СуммаПлатежа;
	СтрокаДерева.ДокументПозжеТекущегоКартинка = 1;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСтрокуРасшифровкиПлатежа(ТекущаяСтрока, КоллекцияСтрокДереваЗначенийДляПоиска, ЭтоСуществующийЗачет = Ложь, ЭтоУдалениеСуществующегоЗачета = Ложь)
	
	ПараметрыОтбора = Новый Структура("ЭтоАвто, Договор", Ложь, ТекущаяСтрока.Договор);
	
	ЭтоПредоплатаПоДоговору = Ложь;
	
	// Оплата документа по заказу
	Если ЗначениеЗаполнено(ТекущаяСтрока.Документ) И ЗначениеЗаполнено(ТекущаяСтрока.Заказ) Тогда
		ПараметрыОтбора.Вставить("Документ", ТекущаяСтрока.Документ);
		ПараметрыОтбора.Вставить("Заказ", ТекущаяСтрока.Заказ);
	// Оплата документа без заказа
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.Документ) И НЕ ЗначениеЗаполнено(ТекущаяСтрока.Заказ) Тогда
		ПараметрыОтбора.Вставить("Документ", ТекущаяСтрока.Документ);
		ПараметрыОтбора.Вставить("Заказ", Неопределено);
	// Предоплата по заказу
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекущаяСтрока.Документ) И ЗначениеЗаполнено(ТекущаяСтрока.Заказ) Тогда
		ПараметрыОтбора.Вставить("Документ", Неопределено);
		ПараметрыОтбора.Вставить("Заказ", ТекущаяСтрока.Заказ);
	// Предоплата по договору
	Иначе
		ПараметрыОтбора.Вставить("Документ", Неопределено);
		ПараметрыОтбора.Вставить("Заказ", Неопределено);
		ЭтоПредоплатаПоДоговору = ВестиРасчетыПоДокументам ИЛИ ВестиРасчетыПоЗаказам;
	КонецЕсли;
	
	НайденныеСтроки = КоллекцияСтрокДереваЗначенийДляПоиска.НайтиСтроки(ПараметрыОтбора, Истина);
	
	Если НайденныеСтроки.Количество() = 1 Тогда
		
		Если ЭтоСуществующийЗачет Тогда
			ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], ТекущаяСтрока,, "ВалютаРасчетов");
		Иначе
			Если ЭтоПредоплатаПоДоговору И НЕ ВестиРасчетыТолькоПоДоговорам Тогда
				НайденныеСтроки[0].ОжидаетОплаты = ТекущаяСтрока.СуммаПлатежа;
				НайденныеСтроки[0].СпособЗачета = ТекущаяСтрока.СпособЗачета;
			ИначеЕсли ТекущаяСтрока.Владелец().Колонки.Найти("СчетНаОплату") <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], ТекущаяСтрока,, "СчетНаОплату");
				Если ЗначениеЗаполнено(ТекущаяСтрока.СчетНаОплату) Тогда
					НайденныеСтроки[0].СчетНаОплату = ТекущаяСтрока.СчетНаОплату;
				ИначеЕсли ТипЗнч(НайденныеСтроки[0].СчетНаОплату) <> Тип("Строка")
					И ЗначениеЗаполнено(НайденныеСтроки[0].СчетНаОплату) Тогда
					НайденныеСтроки[0].СчетНаОплату = ПолучитьНадписьНайденоСчетов(1);
				КонецЕсли;
			Иначе
				ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], ТекущаяСтрока);
			КонецЕсли;
			
			Если ЭтоЗачетПредоплаты И ВалютаДокумента = ВалютаРасчетов Тогда
				НайденныеСтроки[0].СуммаПлатежа = ТекущаяСтрока.СуммаРасчетов;
			КонецЕсли;
		КонецЕсли;
		НайденныеСтроки[0].Выбран = НЕ ЭтоУдалениеСуществующегоЗачета;
 		Если НЕ ЭтоУдалениеСуществующегоЗачета Тогда
			ПриИзмененииСуммыПлатежа(НайденныеСтроки[0],,, Истина);
		КонецЕсли;
		
		// Если это существующий зачёт, то запомним предыдущие значение, чтобы отслеживать изменения в существующих документах.
		Если ЭтоСуществующийЗачет Тогда
			ЗаполнитьИсходныеЗначения(НайденныеСтроки[0])
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЗапросаДляРаспределенияСуммыПлатежа()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.СуммаОстаток КАК СуммаОстаток,
	|	РасчетыСПокупателямиОстатки.СуммаВалОстаток КАК СуммаВалОстаток,
	|	РасчетыСПокупателямиОстатки.Договор КАК Договор,
	|	1 КАК Порядок,
	|	ИСТИНА КАК ЭтоДолг,
	|	ЛОЖЬ КАК ЭтоОстатокПоЗаказу,
	|	ЛОЖЬ КАК ЭтоЗачет,
	|	0 КАК СуммаОстатокПоЗаказу,
	|	0 КАК СуммаВалОстатокПоЗаказу,
	|	0 КАК СуммаЗачета,
	|	0 КАК СуммаВал,
	|	РасчетыСПокупателямиОстатки.СуммаРегОстаток КАК СуммаРегОстаток,
	|	1 КАК НомерОбъединения
	|ПОМЕСТИТЬ ВременнаяТаблицаДанныеРасчетов
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями.Остатки(
	|			&ПериодОстатков,
	|			НЕ &ЭтоЗачетПредоплаты
	|				И Организация = &Организация
	|				И Контрагент = &Контрагент
	|				И ТипРасчетов = &ТипРасчетовДолг) КАК РасчетыСПокупателямиОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПокупателями.Заказ,
	|	РасчетыСПокупателями.Документ,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА РасчетыСПокупателями.Сумма
	|		ИНАЧЕ -РасчетыСПокупателями.Сумма
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА РасчетыСПокупателями.СуммаВал
	|		ИНАЧЕ -РасчетыСПокупателями.СуммаВал
	|	КОНЕЦ,
	|	РасчетыСПокупателями.Договор,
	|	1,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА РасчетыСПокупателями.СуммаРег
	|		ИНАЧЕ -РасчетыСПокупателями.СуммаРег
	|	КОНЕЦ,
	|	2
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
	|ГДЕ
	|	НЕ &ЭтоЗачетПредоплаты
	|	И РасчетыСПокупателями.Организация = &Организация
	|	И РасчетыСПокупателями.Контрагент = &Контрагент
	|	И РасчетыСПокупателями.ТипРасчетов = &ТипРасчетовДолг
	|	И РасчетыСПокупателями.Регистратор = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	0,
	|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Договор,
	|	2,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ОплатаСчетовИЗаказовОбороты.СуммаОборот - ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот - ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот,
	|	ОплатаСчетовИЗаказовОбороты.СуммаОборот - ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот - ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот,
	|	0,
	|	0,
	|	0,
	|	3
	|ИЗ
	|	РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(
	|			,
	|			,
	|			,
	|			НЕ &ЭтоЗачетПредоплаты
	|				И Организация = &Организация
	|				И СчетНаОплату.Контрагент = &Контрагент
	|				И ТИПЗНАЧЕНИЯ(СчетНаОплату) В (&МассивТиповЗаказов)) КАК ОплатаСчетовИЗаказовОбороты
	|ГДЕ
	|	ОплатаСчетовИЗаказовОбороты.СуммаОборот - ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот - ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОплатаСчетовИЗаказов.СчетНаОплату,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	0,
	|	ОплатаСчетовИЗаказов.СчетНаОплату.Договор,
	|	2,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	-(ОплатаСчетовИЗаказов.Сумма - ОплатаСчетовИЗаказов.СуммаАванса - ОплатаСчетовИЗаказов.СуммаОплаты),
	|	-(ОплатаСчетовИЗаказов.Сумма - ОплатаСчетовИЗаказов.СуммаАванса - ОплатаСчетовИЗаказов.СуммаОплаты),
	|	0,
	|	0,
	|	0,
	|	4
	|ИЗ
	|	РегистрНакопления.ОплатаСчетовИЗаказов КАК ОплатаСчетовИЗаказов
	|ГДЕ
	|	НЕ &ЭтоЗачетПредоплаты
	|	И ОплатаСчетовИЗаказов.Регистратор = &Ссылка
	|	И ТИПЗНАЧЕНИЯ(ОплатаСчетовИЗаказов.СчетНаОплату) В (&МассивТиповЗаказов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПокупателями.Заказ,
	|	РасчетыСПокупателями.Регистратор,
	|	РасчетыСПокупателями.Сумма,
	|	РасчетыСПокупателями.СуммаВал,
	|	РасчетыСПокупателями.Договор,
	|	1,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	0,
	|	0,
	|	РасчетыСПокупателями.Сумма,
	|	РасчетыСПокупателями.СуммаВал,
	|	РасчетыСПокупателями.СуммаРег,
	|	5
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
	|ГДЕ
	|	НЕ &ЭтоЗачетПредоплаты
	|	И РасчетыСПокупателями.Организация = &Организация
	|	И РасчетыСПокупателями.Контрагент = &Контрагент
	|	И РасчетыСПокупателями.ТипРасчетов = &ТипРасчетовДолг
	|	И РасчетыСПокупателями.Регистратор <> &Ссылка
	|	И РасчетыСПокупателями.ВидДвижения = &ВидДвиженияРасход
	|	И РасчетыСПокупателями.ДокументОплаты = &Ссылка
	|	И (ТИПЗНАЧЕНИЯ(РасчетыСПокупателями.Регистратор) <> ТИП(Документ.ЗаказПокупателя)
	|			ИЛИ РасчетыСПокупателями.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПокупателями.Заказ,
	|	РасчетыСПокупателями.Регистратор,
	|	РасчетыСПокупателями.Сумма,
	|	РасчетыСПокупателями.СуммаВал,
	|	РасчетыСПокупателями.Договор,
	|	1,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	0,
	|	0,
	|	РасчетыСПокупателями.Сумма,
	|	РасчетыСПокупателями.СуммаВал,
	|	РасчетыСПокупателями.СуммаРег,
	|	6
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
	|ГДЕ
	|	&ЭтоЗачетПредоплаты
	|	И РасчетыСПокупателями.Организация = &Организация
	|	И РасчетыСПокупателями.Контрагент = &Контрагент
	|	И РасчетыСПокупателями.ТипРасчетов = &ТипРасчетовДолг
	|	И РасчетыСПокупателями.Регистратор <> &Ссылка
	|	И РасчетыСПокупателями.ВидДвижения = &ВидДвиженияРасход
	|	И РасчетыСПокупателями.Документ = &Ссылка
	|	И РасчетыСПокупателями.Заказ В(&МассивЗаказов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.Документ,
	|	-РасчетыСПокупателямиОстатки.СуммаОстаток,
	|	-РасчетыСПокупателямиОстатки.СуммаВалОстаток,
	|	РасчетыСПокупателямиОстатки.Договор,
	|	1,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	0,
	|	0,
	|	0,
	|	0,
	|	-РасчетыСПокупателямиОстатки.СуммаРегОстаток,
	|	7
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями.Остатки(
	|			&ПериодОстатков,
	|			&ЭтоЗачетПредоплаты
	|				И Договор = &Договор
	|				И Организация = &Организация
	|				И Контрагент = &Контрагент
	|				И ТипРасчетов = &ТипРасчетовАванс
	|				И Заказ В (&МассивЗаказов)) КАК РасчетыСПокупателямиОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПокупателями.Заказ,
	|	РасчетыСПокупателями.Документ,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА -РасчетыСПокупателями.Сумма
	|		ИНАЧЕ РасчетыСПокупателями.Сумма
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА -РасчетыСПокупателями.СуммаВал
	|		ИНАЧЕ РасчетыСПокупателями.СуммаВал
	|	КОНЕЦ,
	|	РасчетыСПокупателями.Договор,
	|	1,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА -РасчетыСПокупателями.СуммаРег
	|		ИНАЧЕ РасчетыСПокупателями.СуммаРег
	|	КОНЕЦ,
	|	8
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
	|ГДЕ
	|	&ЭтоЗачетПредоплаты
	|	И РасчетыСПокупателями.Организация = &Организация
	|	И РасчетыСПокупателями.Контрагент = &Контрагент
	|	И РасчетыСПокупателями.ТипРасчетов = &ТипРасчетовАванс
	|	И РасчетыСПокупателями.Регистратор = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаДанныеРасчетов.Договор КАК Договор,
	|	ВременнаяТаблицаДанныеРасчетов.Заказ КАК Заказ,
	|	ВременнаяТаблицаДанныеРасчетов.Документ КАК Документ,
	|	СУММА(ВременнаяТаблицаДанныеРасчетов.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(ВременнаяТаблицаДанныеРасчетов.СуммаВалОстаток) КАК СуммаВалОстаток,
	|	ВременнаяТаблицаДанныеРасчетов.Порядок КАК Порядок,
	|	ВременнаяТаблицаДанныеРасчетов.ЭтоДолг КАК ЭтоДолг,
	|	ВременнаяТаблицаДанныеРасчетов.ЭтоОстатокПоЗаказу КАК ЭтоОстатокПоЗаказу,
	|	СУММА(ВременнаяТаблицаДанныеРасчетов.СуммаОстатокПоЗаказу) КАК СуммаОстатокПоЗаказу,
	|	СУММА(ВременнаяТаблицаДанныеРасчетов.СуммаВалОстатокПоЗаказу) КАК СуммаВалОстатокПоЗаказу,
	|	МАКСИМУМ(ВременнаяТаблицаДанныеРасчетов.ЭтоЗачет) КАК ЭтоЗачет,
	|	СУММА(ВременнаяТаблицаДанныеРасчетов.СуммаЗачета) КАК СуммаЗачета,
	|	СУММА(ВременнаяТаблицаДанныеРасчетов.СуммаРегОстаток) КАК СуммаРегОстаток
	|ПОМЕСТИТЬ ВременнаяТаблицаДанные
	|ИЗ
	|	ВременнаяТаблицаДанныеРасчетов КАК ВременнаяТаблицаДанныеРасчетов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаДанныеРасчетов.Документ,
	|	ВременнаяТаблицаДанныеРасчетов.Договор,
	|	ВременнаяТаблицаДанныеРасчетов.ЭтоДолг,
	|	ВременнаяТаблицаДанныеРасчетов.ЭтоОстатокПоЗаказу,
	|	ВременнаяТаблицаДанныеРасчетов.Заказ,
	|	ВременнаяТаблицаДанныеРасчетов.Порядок
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВременнаяТаблицаДанныеРасчетов.СуммаВалОстаток) > 0
	|		ИЛИ СУММА(ВременнаяТаблицаДанныеРасчетов.СуммаВалОстатокПоЗаказу) > 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаДанные.Заказ КАК Заказ,
	|	ВременнаяТаблицаДанные.Документ КАК Документ,
	|	НЕ ВременнаяТаблицаДанные.Документ.Проведен КАК ДокументНеПроведен,
	|	ВременнаяТаблицаДанные.Договор КАК Договор,
	|	ВременнаяТаблицаДанные.СуммаОстаток КАК СуммаОстаток,
	|	ВременнаяТаблицаДанные.СуммаВалОстаток КАК СуммаВалОстаток,
	|	ВременнаяТаблицаДанные.Порядок КАК Порядок,
	|	ВременнаяТаблицаДанные.ЭтоДолг КАК ЭтоДолг,
	|	ВременнаяТаблицаДанные.ЭтоОстатокПоЗаказу КАК ЭтоОстатокПоЗаказу,
	|	ВременнаяТаблицаДанные.Заказ.Номер КАК ЗаказНомер,
	|	ВременнаяТаблицаДанные.Заказ.Дата КАК ЗаказДата,
	|	ВременнаяТаблицаДанные.Заказ.Кратность КАК ЗаказКратность,
	|	ВременнаяТаблицаДанные.Заказ.Курс КАК ЗаказКурс,
	|	ВременнаяТаблицаДанные.Заказ.ВалютаДокумента КАК ЗаказВалютаДокумента,
	|	ВременнаяТаблицаДанные.Заказ.СуммаДокумента КАК ЗаказСуммаДокумента,
	|	ВременнаяТаблицаДанные.Документ.Номер КАК ДокументНомер,
	|	ВременнаяТаблицаДанные.Документ.Дата КАК ДокументДата,
	|	ВременнаяТаблицаДанные.Документ.СуммаДокумента КАК ДокументСуммаДокумента,
	|	ЕСТЬNULL(ВременнаяТаблицаДанные.Документ.ВалютаДенежныхСредств, ВременнаяТаблицаДанные.Документ.ВалютаДокумента) КАК ДокументВалютаДокумента,
	|	ВременнаяТаблицаДанные.Документ.Курс КАК ДокументКурс,
	|	ВременнаяТаблицаДанные.Документ.Кратность КАК ДокументКратность,
	|	ВременнаяТаблицаДанные.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	КурсыВалютРасчетовСрезПоследних.Курс КАК Курс,
	|	КурсыВалютРасчетовСрезПоследних.Кратность КАК Кратность,
	|	ВременнаяТаблицаДанные.Договор.ВалютаРасчетов.СимвольноеПредставление КАК ВалютаРасчетовПредставление,
	|	ВременнаяТаблицаДанные.СуммаОстатокПоЗаказу КАК СуммаОстатокПоЗаказу,
	|	ВременнаяТаблицаДанные.СуммаВалОстатокПоЗаказу КАК СуммаВалОстатокПоЗаказу,
	|	ФактОплатыДокументов.СуммаАванса + ФактОплатыДокументов.СуммаОплаты КАК УжеОплаченоДокумент,
	|	ФактОплатыЗаказов.СуммаАванса + ФактОплатыЗаказов.СуммаОплаты КАК УжеОплаченоЗаказ,
	|	ЕСТЬNULL(ВременнаяТаблицаДанные.Документ.ВалютаДенежныхСредств.СимвольноеПредставление, ВременнаяТаблицаДанные.Документ.ВалютаДокумента.СимвольноеПредставление) КАК ВалютаДокументаСимвольноеПредставление,
	|	ВременнаяТаблицаДанные.Заказ.ВалютаДокумента.СимвольноеПредставление КАК ВалютаЗаказаСимвольноеПредставление,
	|	(ВременнаяТаблицаДанные.Документ.МоментВремени > &МоментВремениТекущегоДокумента
	|		ИЛИ &ЭтоЗаказ
	|			И ВременнаяТаблицаДанные.Документ.МоментВремени > &МоментВремениТекущегоЗаказа)
	|		И НЕ &ЭтоИнтеркампани КАК ДокументПозжеТекущего,
	|	ВременнаяТаблицаДанные.Заказ.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ВременнаяТаблицаДанные.СуммаЗачета КАК СуммаЗачета,
	|	ВременнаяТаблицаДанные.Документ.Автор КАК ДокументАвтор,
	|	ВременнаяТаблицаДанные.Заказ.Автор КАК ЗаказАвтор,
	|	ВременнаяТаблицаДанные.Документ.Ответственный КАК ДокументОтветственный,
	|	ВременнаяТаблицаДанные.Заказ.Ответственный КАК ЗаказОтветственный,
	|	ВременнаяТаблицаДанные.Документ.НалогообложениеНДС КАК ДокументНалогообложениеНДС,
	|	ВременнаяТаблицаДанные.Заказ.НалогообложениеНДС КАК ЗаказНалогообложениеНДС,
	|	ВременнаяТаблицаДанные.Документ.Организация КАК ДокументОрганизация,
	|	ВременнаяТаблицаДанные.Заказ.Организация КАК ЗаказОрганизация,
	|	ВременнаяТаблицаДанные.Договор.Организация КАК ДоговорОрганизация,
	|	ВременнаяТаблицаДанные.СуммаРегОстаток КАК СуммаРегОстаток,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаДанные.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ ВременнаяТаблицаДанные.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				ИЛИ ВременнаяТаблицаДанные.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПорядокДляЗаказов,
	|	ВременнаяТаблицаДанные.Договор.СпособРазнесенияОплатыПоУмолчанию КАК СпособЗачета
	|ИЗ
	|	ВременнаяТаблицаДанные КАК ВременнаяТаблицаДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ПериодКурсовВалют, ) КАК КурсыВалютРасчетовСрезПоследних
	|		ПО ВременнаяТаблицаДанные.Договор.ВалютаРасчетов = КурсыВалютРасчетовСрезПоследних.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФактОплатыЗаказов КАК ФактОплатыЗаказов
	|		ПО ВременнаяТаблицаДанные.Заказ = ФактОплатыЗаказов.СчетНаОплату
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФактОплатыДокументов КАК ФактОплатыДокументов
	|		ПО ВременнаяТаблицаДанные.Документ = ФактОплатыДокументов.Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Договор,
	|	ПорядокДляЗаказов,
	|	Заказ,
	|	Документ
	|ИТОГИ
	|	СУММА(СуммаОстаток),
	|	СУММА(СуммаВалОстаток),
	|	МАКСИМУМ(Курс),
	|	МАКСИМУМ(Кратность),
	|	СУММА(СуммаОстатокПоЗаказу),
	|	СУММА(СуммаВалОстатокПоЗаказу),
	|	СУММА(УжеОплаченоДокумент),
	|	СУММА(УжеОплаченоЗаказ),
	|	СУММА(СуммаРегОстаток),
	|	МАКСИМУМ(ДокументПозжеТекущего)
	|ПО
	|	ОБЩИЕ,
	|	Договор,
	|	Заказ,
	|	Документ
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВременнаяТаблицаДанные.Договор КАК Договор
	|ИЗ
	|	ВременнаяТаблицаДанные КАК ВременнаяТаблицаДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВременнаяТаблицаДанные.Договор КАК Договор
	|ПОМЕСТИТЬ ВременнаяТаблица_ДоговорыСДанными
	|ИЗ
	|	ВременнаяТаблицаДанные КАК ВременнаяТаблицаДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	КурсыВалютРасчетовСрезПоследних.Курс КАК Курс,
	|	КурсыВалютРасчетовСрезПоследних.Кратность КАК Кратность,
	|	ДоговорыКонтрагентов.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ДоговорыКонтрагентов.ВалютаРасчетов.СимвольноеПредставление КАК ВалютаРасчетовПредставление,
	|	ДоговорыКонтрагентов.СпособРазнесенияОплатыПоУмолчанию КАК СпособЗачета
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица_ДоговорыСДанными КАК ВременнаяТаблица_ДоговорыСДанными
	|		ПО (ВременнаяТаблица_ДоговорыСДанными.Договор = ДоговорыКонтрагентов.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ПериодКурсовВалют, ) КАК КурсыВалютРасчетовСрезПоследних
	|		ПО ДоговорыКонтрагентов.Ссылка.ВалютаРасчетов = КурсыВалютРасчетовСрезПоследних.Валюта
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец В (&Контрагент, &Организация)
	|	И ВременнаяТаблица_ДоговорыСДанными.Договор ЕСТЬ NULL
	|	И (НЕ &ТребуетсяКонтрольДоговоровКонтрагентов
	|			ИЛИ ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговоров))
	|	И (НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|			ИЛИ ДоговорыКонтрагентов.Ссылка В (&СписокДоговоровРасшифровки))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетНаОплату.Ссылка КАК СчетНаОплату,
	|	ВременнаяТаблицаДанные.Заказ КАК Заказ,
	|	НЕОПРЕДЕЛЕНО КАК Документ,
	|	ИСТИНА КАК СвязанСЗаказом,
	|	ЛОЖЬ КАК СвязанСДокументом
	|ПОМЕСТИТЬ ВременнаяТаблицаСчетаНаОплату
	|ИЗ
	|	ВременнаяТаблицаДанные КАК ВременнаяТаблицаДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплату КАК СчетНаОплату
	|		ПО (ВременнаяТаблицаДанные.Заказ = СчетНаОплату.ДокументОснование
	|					И СчетНаОплату.ДокументОснование <> НЕОПРЕДЕЛЕНО
	|				ИЛИ ВременнаяТаблицаДанные.Заказ.ДокументОснование = СчетНаОплату.Ссылка
	|				ИЛИ ВременнаяТаблицаДанные.Заказ.ОснованиеПечатиСсылка = СчетНаОплату.Ссылка
	|					И СчетНаОплату.Ссылка <> ЗНАЧЕНИЕ(Документ.СчетНаОплату.ПустаяСсылка))
	|ГДЕ
	|	СчетНаОплату.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетНаОплату.Ссылка,
	|	ВременнаяТаблицаДанные.Заказ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетНаОплату.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	ВременнаяТаблицаДанные.Документ,
	|	ЛОЖЬ,
	|	ИСТИНА
	|ИЗ
	|	ВременнаяТаблицаДанные КАК ВременнаяТаблицаДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплату КАК СчетНаОплату
	|		ПО (ВременнаяТаблицаДанные.Документ = СчетНаОплату.ДокументОснование
	|					И СчетНаОплату.ДокументОснование <> НЕОПРЕДЕЛЕНО
	|				ИЛИ ВременнаяТаблицаДанные.Документ.ДокументОснование = СчетНаОплату.Ссылка
	|					И СчетНаОплату.Ссылка <> ЗНАЧЕНИЕ(Документ.СчетНаОплату.ПустаяСсылка))
	|ГДЕ
	|	СчетНаОплату.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетНаОплату.Ссылка,
	|	ВременнаяТаблицаДанные.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаСчетаНаОплату.СчетНаОплату КАК СчетНаОплату,
	|	ВременнаяТаблицаСчетаНаОплату.Заказ КАК Заказ,
	|	ВременнаяТаблицаСчетаНаОплату.Документ КАК Документ,
	|	ВременнаяТаблицаСчетаНаОплату.СчетНаОплату.СуммаДокумента КАК СуммаДокумента,
	|	ВременнаяТаблицаСчетаНаОплату.СчетНаОплату.ВалютаДокумента.СимвольноеПредставление КАК ВалютаДокументаСимвольноеПредставление,
	|	ВременнаяТаблицаСчетаНаОплату.СвязанСЗаказом КАК СвязанСЗаказом,
	|	ВременнаяТаблицаСчетаНаОплату.СвязанСДокументом КАК СвязанСДокументом
	|ИЗ
	|	ВременнаяТаблицаСчетаНаОплату КАК ВременнаяТаблицаСчетаНаОплату
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаСчетаНаОплату.СчетНаОплату,
	|	ВременнаяТаблицаСчетаНаОплату.Заказ,
	|	ВременнаяТаблицаСчетаНаОплату.Документ,
	|	ВременнаяТаблицаСчетаНаОплату.СчетНаОплату.СуммаДокумента,
	|	ВременнаяТаблицаСчетаНаОплату.СчетНаОплату.ВалютаДокумента.СимвольноеПредставление,
	|	ВременнаяТаблицаСчетаНаОплату.СвязанСЗаказом,
	|	ВременнаяТаблицаСчетаНаОплату.СвязанСДокументом
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.ВалютаРасчетов.СимвольноеПредставление КАК ВалютаРасчетовПредставление,
	|	ДоговорыКонтрагентов.ВалютаРасчетов КАК ВалютаРасчетов
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &Договор
	|	И &ЭтоЗачетПредоплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.ВалютаРасчетов.СимвольноеПредставление КАК ВалютаРасчетовПредставление,
	|	ДоговорыКонтрагентов.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	ДоговорыКонтрагентов.СпособРазнесенияОплатыПоУмолчанию КАК СпособРазнесенияОплатыПоУмолчанию,
	|	ДоговорыКонтрагентов.СпособЗачетаПредоплатыПоУмолчанию КАК СпособЗачетаПредоплатыПоУмолчанию
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец В (&Контрагент, &Организация)";
	
	Если ЭтоРасчетыСПоставщиком Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РасчетыСПокупателями", "РасчетыСПоставщиками");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.СчетНаОплату КАК СчетНаОплату", "Документ.СчетНаОплатуПоставщика КАК СчетНаОплату");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеДляРаспределенияСуммыПлатежа()
	
	Запрос = Новый Запрос;
	
	//********************************************************************************************************
	Запрос.Текст = ПолучитьТекстЗапросаДляРаспределенияСуммыПлатежа(); // Возврат: Ctrl + '-'
	//********************************************************************************************************
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Константы.УчетПоКомпании.Компания(Организация));
	
	Запрос.УстановитьПараметр("ПериодОстатков", Неопределено); //?(День(ДатаДокумента) = День(ТекущаяДатаСеанса()), Неопределено, КонецДня(ДатаДокумента)));
	Запрос.УстановитьПараметр("ПериодКурсовВалют", ?(День(ДатаДокумента) = День(ТекущаяДатаСеанса()), Неопределено, КонецДня(ДатаДокумента)));
	
	Запрос.УстановитьПараметр("ТипРаспределенияАвто", Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто);
	
	Запрос.УстановитьПараметр("ТипРасчетовДолг", Перечисления.ТипыРасчетов.Долг);
	Запрос.УстановитьПараметр("ТипРасчетовАванс", Перечисления.ТипыРасчетов.Аванс);
	
	Запрос.УстановитьПараметр("ЭтоЗачетПредоплаты", ЭтоЗачетПредоплаты);
	Запрос.УстановитьПараметр("ЭтоИнтеркампани", ЭтоИнтеркампани);
	
	МассивТиповЗаказов = Новый Массив;
	Если ЭтоРасчетыСПоставщиком Тогда
		МассивТиповЗаказов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	Иначе
		МассивТиповЗаказов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
		МассивТиповЗаказов.Добавить(Тип("ДокументСсылка.ПриемИПередачаВРемонт"));
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивТиповЗаказов", МассивТиповЗаказов);
	
	Если ЭтоЗачетПредоплаты Тогда
		
		Запрос.УстановитьПараметр("Договор", Договор);
		
		// Нужно установить отбор по заказам.
		МассивЗаказов = Новый Массив;
		Для Каждого ТекущаяСтрокаЗаказ Из ТаблицаЗаказыИСумма Цикл
			МассивЗаказов.Добавить(ТекущаяСтрокаЗаказ.Заказ);
		КонецЦикла;
		МассивЗаказов.Добавить("Неопределено");
		МассивЗаказов.Добавить(Документы.ЗаказПокупателя.ПустаяСсылка());
		МассивЗаказов.Добавить(Документы.ЗаказПоставщику.ПустаяСсылка());
		Если ЭтоЗаказ Тогда
			МассивЗаказов.Добавить(Ссылка);
		КонецЕсли;
		Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
		
		Запрос.УстановитьПараметр("ТребуетсяКонтрольДоговоровКонтрагентов", Ложь); // Всегда только один договор, который выбран в документе.
		Запрос.УстановитьПараметр("СписокВидовДоговоров", Новый Массив);
		Запрос.УстановитьПараметр("СписокДоговоровРасшифровки", Договор);
		
	Иначе
		
		Запрос.УстановитьПараметр("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		Запрос.УстановитьПараметр("МассивЗаказов", Неопределено);
		
		Запрос.УстановитьПараметр("ТребуетсяКонтрольДоговоровКонтрагентов", УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов());
		Запрос.УстановитьПараметр("СписокВидовДоговоров", Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Ссылка, Ссылка.ВидОперации));
		Запрос.УстановитьПараметр("СписокДоговоровРасшифровки", СписокДоговоровРасшифровки);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	
	Запрос.УстановитьПараметр("ФильтрПоДокументу", ЗначениеЗаполнено(Ссылка));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("МоментВремениТекущегоЗаказа", Новый МоментВремени('00010101'));
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") И Ссылка.ВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд
		ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Запрос.УстановитьПараметр("МоментВремениТекущегоДокумента", Новый МоментВремени('39991231235959'));
		Запрос.УстановитьПараметр("МоментВремениТекущегоЗаказа", Ссылка.МоментВремени());
		Запрос.УстановитьПараметр("ЭтоЗаказ", Истина);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") И Ссылка.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		Запрос.УстановитьПараметр("МоментВремениТекущегоДокумента", Новый МоментВремени(Ссылка.Финиш, Ссылка));
		Запрос.УстановитьПараметр("ЭтоЗаказ", Ложь);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		Запрос.УстановитьПараметр("МоментВремениТекущегоДокумента", Новый МоментВремени('39991231235959'));
		Запрос.УстановитьПараметр("ЭтоЗаказ", Ложь);
	Иначе
		Запрос.УстановитьПараметр("МоментВремениТекущегоДокумента", Ссылка.МоментВремени());
		Запрос.УстановитьПараметр("ЭтоЗаказ", Ложь);
	КонецЕсли;
	
	//Запрос.УстановитьПараметр("ВестиУчетПоКомпании", Константы.УчетПоКомпании.Получить());
	// Конец Установим параметры запроса
	
	// Подготовим группировочные поля итоговых данных
	ПодстрокаПоиска = "ОБЩИЕ,
		|	Договор,
		|	Заказ,
		|	Документ";
		
	НоваяСтрока = "ОБЩИЕ";
	КоличествоГруппировок = 0;
	Группировки = Новый Соответствие;
	
	Для Каждого ТекущаяСтрока Из ТаблицаГруппировокПравойПанели Цикл
		Если ТекущаяСтрока.Выбран Тогда
			КоличествоГруппировок = КоличествоГруппировок + 1;
			ПолеГруппировки = ПолучитьСтрокуДляГруппировкиПравойПанели(ТекущаяСтрока.Группировка);
			Группировки.Вставить(КоличествоГруппировок, ПолеГруппировки);
			НоваяСтрока = НоваяСтрока + ",
				|	"+ПолеГруппировки;
		КонецЕсли;
	КонецЦикла;
	
	// Подготовим поля для сортировки
	ПодстрокаПоискаУпорядочитьПо = "УПОРЯДОЧИТЬ ПО
		|	Договор,
		|	Заказ,
		|	Документ";
		
	НоваяСтрокаУпорядочитьПо = "УПОРЯДОЧИТЬ ПО";
	
	Для Каждого ТекущаяСтрока Из ТаблицаГруппировокПравойПанели Цикл
		Если ТекущаяСтрока.Выбран Тогда
			ПолеГруппировки = ПолучитьСтрокуДляГруппировкиПравойПанели(ТекущаяСтрока.Группировка);
			
			НоваяСтрокаУпорядочитьПо = НоваяСтрокаУпорядочитьПо + ?(НоваяСтрокаУпорядочитьПо = "УПОРЯДОЧИТЬ ПО", " ", ",") + "
				|	"+ПолеГруппировки;
		КонецЕсли;
	КонецЦикла;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ПодстрокаПоискаУпорядочитьПо, НоваяСтрокаУпорядочитьПо);
	
	СтруктураДляВозврата = Новый Структура;
	Если КоличествоГруппировок = 0 Тогда
		СтруктураДляВозврата.Вставить("КоличествоГруппировок", КоличествоГруппировок);
		//СоответствиеЗаказыКоличествоСчетовНаОплату = Новый Соответствие;
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ПодстрокаПоиска, НоваяСтрока);
		// Конец подготовки группировочных полей
		
		МРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		
		СтруктураДляВозврата.Вставить("ЗапросОстаткиВсеДанные", МРезультатов[2]);
		СтруктураДляВозврата.Вставить("КоличествоГруппировок", КоличествоГруппировок);
		СтруктураДляВозврата.Вставить("Группировки", Группировки);
		СтруктураДляВозврата.Вставить("Договоры", МРезультатов[3]);
		СтруктураДляВозврата.Вставить("ДоговорыБезОстатковПоВзаиморасчетам", МРезультатов[5]);
		СтруктураДляВозврата.Вставить("ДанныеОСчетахНаОплату", МРезультатов[7]);
		
	КонецЕсли;
	
	// Получим информацию о валюте расчетов по договору.
	Если ЭтоЗачетПредоплаты Тогда
		Выборка = МРезультатов[8].Выбрать();
		Выборка.Следующий();
		ВалютаРасчетов = Выборка.ВалютаРасчетов;
		ВалютаРасчетовПредставление = Выборка.ВалютаРасчетовПредставление;
	Иначе
		Выборка = МРезультатов[9].Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			ВалютаРасчетов = Выборка.ВалютаРасчетов;
			ВалютаРасчетовПредставление = Выборка.ВалютаРасчетовПредставление;
			ДоговорПоУмолчанию = Выборка.Ссылка;
			СпособЗачетаПоУмолчанию = Выборка.СпособРазнесенияОплатыПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
	ВидимостьКолонкиИРеквизитаРаспределить();
	
	Возврат СтруктураДляВозврата;
	
КонецФункции

&НаСервере
Процедура ВидимостьКолонкиИРеквизитаРаспределить()
	
	Если НЕ ВестиРасчетыПоДоговорам ИЛИ СуммаДокументаРавнаНулю ИЛИ КоличествоДоговоров <= 1 ИЛИ ЭтоЗачетПредоплаты Тогда
		Элементы.ГруппаОсталосьРазнести.Видимость = Истина;
		НужноРазноситьПоДоговорам = Ложь;
	Иначе
		Элементы.ГруппаОсталосьРазнести.Видимость = Ложь;
		НужноРазноситьПоДоговорам = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуДляГруппировкиПравойПанели(Группировка, ДляЗаголовка = Ложь) Экспорт
	
	Если Группировка = Перечисления.ГруппировкиПравойПанелиРаспределенияПлатежей.Договоры Тогда
		Возврат "Договор";
	ИначеЕсли Группировка = Перечисления.ГруппировкиПравойПанелиРаспределенияПлатежей.Заказы Тогда
		Возврат "Заказ";
	ИначеЕсли Группировка = Перечисления.ГруппировкиПравойПанелиРаспределенияПлатежей.Счета Тогда
		Возврат "СчетНаОплату";
	ИначеЕсли Группировка = Перечисления.ГруппировкиПравойПанелиРаспределенияПлатежей.Накладные Тогда
		Возврат "Документ";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовкиКолонокДереваРаспределенияПлатежа()
	
	// Объект
	ЗаголовокКолонкиОбъект = "";
	ЭтоПерваяГруппировка = Истина;
	Для Каждого ТекущаяСтрока Из ТаблицаГруппировокПравойПанели Цикл
		Если ТекущаяСтрока.Выбран Тогда
			Если ЭтоПерваяГруппировка Тогда
				ЭтоПерваяГруппировка = Ложь;
			Иначе
				ЗаголовокКолонкиОбъект = ЗаголовокКолонкиОбъект + " / ";
			КонецЕсли;
			ПолеГруппировки = ПолучитьСтрокуДляГруппировкиПравойПанели(ТекущаяСтрока.Группировка, Истина);
			ЗаголовокКолонкиОбъект = ЗаголовокКолонкиОбъект + ?(ПолеГруппировки = "СчетНаОплату", НСтр("ru = 'Счет на оплату'"), ПолеГруппировки);
		КонецЕсли;
	КонецЦикла;
	Элементы.ДеревоРаспределенияСуммыПлатежаОбъект.Заголовок = ЗаголовокКолонкиОбъект;
	
	// Зачитываемая сумма в валюте документа
	ВалПредставление = ""+УправлениеНебольшойФирмойПовтИсп.ПолучитьСимвольноеПредставлениеВалюты(ВалютаДенежныхСредств);
	
	Если ЭтоЗачетПредоплаты Тогда
		Элементы.ДеревоРаспределенияСуммыПлатежаОжидаетОплаты.Заголовок = НСтр("ru = 'Ожидает зачета'");
		ЗаголовокЗачитываем = НСтр("ru = 'Зачтено, %ВалПредставление%'");
	Иначе
		ЗаголовокЗачитываем = НСтр("ru = 'Разнесено, %ВалПредставление%'");
	КонецЕсли;
	ЗаголовокЗачитываем = СтрЗаменить(ЗаголовокЗачитываем,
		"%ВалПредставление%", ""+ВалПредставление);
	Элементы.ДеревоРаспределенияСуммыПлатежаЗачитываем.Заголовок = ЗаголовокЗачитываем;
	
	// Остаток к оплате в валюте документа
	Если ЭтоЗачетПредоплаты Тогда
		ЗаголовокОстатокКОплате = НСтр("ru = 'Ожидает зачета, %ВалПредставление%'");
	Иначе
		ЗаголовокОстатокКОплате = НСтр("ru = 'Ожидает оплаты, %ВалПредставление%'");
	КонецЕсли;
	
	ЗаголовокОстатокКОплате = СтрЗаменить(ЗаголовокОстатокКОплате,
		"%ВалПредставление%", ВалПредставление);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыПравойПанели()
	
	// Заполним строки (группировки)
	ТаблицаГруппировокПравойПанели.Очистить();
	
	Строка = ТаблицаГруппировокПравойПанели.Добавить();
	ВсеФлагиРасчетовСброшены = НЕ (Контрагент.ВестиРасчетыПоДоговорам ИЛИ Контрагент.ВестиРасчетыПоЗаказам ИЛИ Контрагент.ВестиРасчетыПоДокументам);
	ТолькоПоДоговору = Контрагент.ВестиРасчетыПоДоговорам И НЕ Контрагент.ВестиРасчетыПоЗаказам И НЕ Контрагент.ВестиРасчетыПоДокументам;
	ВыводитьСтрокуПоДоговору = (Контрагент.ВестиРасчетыПоДоговорам И (НЕ ЭтоЗачетПредоплаты И НЕ ПоОдномуДоговору ИЛИ ТолькоПоДоговору))
		ИЛИ ВсеФлагиРасчетовСброшены
	;
	Строка.Выбран = ВыводитьСтрокуПоДоговору;
	Строка.Группировка = Перечисления.ГруппировкиПравойПанелиРаспределенияПлатежей.Договоры;
	
	Строка = ТаблицаГруппировокПравойПанели.Добавить();
	Строка.Выбран = Контрагент.ВестиРасчетыПоЗаказам;
	Строка.Группировка = Перечисления.ГруппировкиПравойПанелиРаспределенияПлатежей.Заказы;
	
	Строка = ТаблицаГруппировокПравойПанели.Добавить();
	Строка.Выбран = Контрагент.ВестиРасчетыПоДокументам;
	Строка.Группировка = Перечисления.ГруппировкиПравойПанелиРаспределенияПлатежей.Накладные;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоРаспределенияСуммыПлатежаПоДаннымОбОстатках(ОбновитьГруппировки = Ложь)
	
	Если ОбновитьГруппировки Тогда
		ДобавитьЭлементыПравойПанели(ОбновитьГруппировки);
	КонецЕсли;
	
	Распределено = 0;
	ОсталосьРаспределить = КРаспределению;
	
	УстановитьЗаголовкиКолонокДереваРаспределенияПлатежа();
	
	// *******************************************************************************************************
	// Получим данные
	ДанныеОбОстатках = ПолучитьДанныеДляРаспределенияСуммыПлатежа();
	// *******************************************************************************************************
	
	// Обработаем данные
	ДеревоРаспределенияСуммыПлатежа.ПолучитьЭлементы().Очистить();
	
	Если ДанныеОбОстатках.КоличествоГруппировок = 0 Тогда
		
		//Элементы.ГруппаСлева.Видимость = Ложь;
		//Элементы.НадписьНиОднаГруппировкаНеВыбрана.Видимость = Истина;
		Элементы.СтраницыСлева.ТекущаяСтраница = Элементы.СтраницаНиОднаГруппировкаНеВыбрана;
		ДанныеОСчетахНаОплату.Очистить();
		ЕстьДанныеОСчетахНаОплату = 0;
		
	Иначе
		
		// Запомним данные о счетах на оплату.
		ДанныеОСчетахНаОплату.Загрузить(ДанныеОбОстатках.ДанныеОСчетахНаОплату.Выгрузить());
		ЕстьДанныеОСчетахНаОплату = ДанныеОСчетахНаОплату.Количество() > 0;
		
		Элементы.ГруппаСлева.Видимость = Истина;
		//Элементы.НадписьНиОднаГруппировкаНеВыбрана.Видимость = Ложь;
		
		РезультатЗапросаОстаткиВсеДанные = ДанныеОбОстатках.ЗапросОстаткиВсеДанные;
		Группировки = ДанныеОбОстатках.Группировки;
		
		Если НЕ РезультатЗапросаОстаткиВсеДанные.Пустой() Тогда
			Элементы.СтраницыРаспределенияСуммыПлатежа.ТекущаяСтраница = Элементы.СтраницаЕстьДанныеДляРаспределения;
			Элементы.СтраницыСлева.ТекущаяСтраница = Элементы.СтраницаДерево;
			
			ТекущаяВыборка = РезультатЗапросаОстаткиВсеДанные.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			ТекущаяВыборка.Следующий();
			
			// Обнулим общую информацию о долгах и заказах.
			// Сумма в валюте документа
			СуммаИтогДолг = 0;
			СуммаИтогЗаказы = 0;
			ИмяПервойГруппировки = "";
			
			Для Каждого СтрокаГруппировок Из ТаблицаГруппировокПравойПанели Цикл
				Если СтрокаГруппировок.Выбран Тогда
					ИмяПервойГруппировки = "" + СтрокаГруппировок.Группировка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			// Заполним дерево.
			ТекущаяВыборка1 = ТекущаяВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			Пока ТекущаяВыборка1.Следующий() Цикл
				
				ТекущаяСтрокаДерева1 = ДобавитьСтрокуДерева(ДеревоРаспределенияСуммыПлатежа, ТекущаяВыборка1, Группировки.Получить(1),
					ДанныеОбОстатках.КоличествоГруппировок = 1 И ДанныеОбОстатках.КоличествоГруппировок > 1
				);
				
				Если ДанныеОбОстатках.КоличествоГруппировок > 1 Тогда
					
					ЕстьДанные2 = Ложь;
					ТекущаяВыборка2 = ТекущаяВыборка1.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
					Пока ТекущаяВыборка2.Следующий() Цикл
						
						Если НЕ ЕстьДанные2 Тогда
							ЕстьДанные2 = ЗначениеЗаполнено(ТекущаяВыборка2[Группировки.Получить(2)]);
						КонецЕсли;
						ТекущаяСтрокаДерева2 = ДобавитьСтрокуДерева(ТекущаяСтрокаДерева1, ТекущаяВыборка2, Группировки.Получить(2), ДанныеОбОстатках.КоличествоГруппировок = 2);
						
						Если ДанныеОбОстатках.КоличествоГруппировок > 2 Тогда
							
							ЕстьДанные3 = Ложь;
							ТекущаяВыборка3 = ТекущаяВыборка2.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
							Пока ТекущаяВыборка3.Следующий() Цикл
								
								Если НЕ ЕстьДанные3 Тогда
									ЕстьДанные3 = ЗначениеЗаполнено(ТекущаяВыборка3[Группировки.Получить(3)]);
								КонецЕсли;
								ТекущаяСтрокаДерева3 = ДобавитьСтрокуДерева(ТекущаяСтрокаДерева2, ТекущаяВыборка3, Группировки.Получить(3), ДанныеОбОстатках.КоличествоГруппировок = 3);
								
								Если ТекущаяСтрокаДерева3 <> Неопределено Тогда
									ТекущаяСтрокаДерева3.СуммаПлатежаКартинка = 10;
								КонецЕсли;
								
							КонецЦикла;
							
							Если Не ЕстьДанные3 И ТекущаяСтрокаДерева2.Объект = "<Не выбран>" Тогда
								ТекущаяСтрокаДерева1.ПолучитьЭлементы().Удалить(ТекущаяСтрокаДерева2);
							КонецЕсли;
							Если ЕстьДанные3 И ТекущаяСтрокаДерева2.ПризнакАванса Тогда
								ТекущаяСтрокаДерева2.СуммаПлатежаКартинка = 0;
							Иначе
								ТекущаяСтрокаДерева2.СуммаПлатежаКартинка = 10;
							КонецЕсли;
							
						ИначеЕсли ТекущаяСтрокаДерева2 <> Неопределено Тогда
							ТекущаяСтрокаДерева2.СуммаПлатежаКартинка = 10;
						КонецЕсли;
						
					КонецЦикла;
					
					Если Не ЕстьДанные2 И ТекущаяСтрокаДерева1.Объект = "<Не выбран>" Тогда
						ДеревоРаспределенияСуммыПлатежа.ПолучитьЭлементы().Удалить(ТекущаяСтрокаДерева1);
					КонецЕсли;
					Если ЕстьДанные2 И ТекущаяСтрокаДерева1.ПризнакАванса Тогда
						ТекущаяСтрокаДерева1.СуммаПлатежаКартинка = 0;
					Иначе
						ТекущаяСтрокаДерева1.СуммаПлатежаКартинка = 10;
					КонецЕсли;
					
				ИначеЕсли ТекущаяСтрокаДерева1 <> Неопределено Тогда
					ТекущаяСтрокаДерева1.СуммаПлатежаКартинка = 10;
				КонецЕсли;
				
				//Если НЕ ЭтоЗачетПредоплаты И Группировки.Получить(1) = "Договор" Тогда
				//	ДобавитьСтрокуАвто(ТекущаяСтрокаДерева1);
				//КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ЭтоЗачетПредоплаты Тогда
			Элементы.СтраницыСлева.ТекущаяСтраница = Элементы.СтраницаНетДанных;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ТаблицаНастроекПравойПанели.ТекущаяСтрока = Неопределено;
	
	Если НЕ ЭтоЗачетПредоплаты И ВестиРасчетыПоДоговорам Тогда
		
		//******************************************************************************
		// Заполним информацию по договорам, по которым остатки расчетов = 0.
		ВыборкаДоговоры = ДанныеОбОстатках.ДоговорыБезОстатковПоВзаиморасчетам.Выбрать();
		
		Если НЕ ЭтоЗачетПредоплаты Тогда
			Пока ВыборкаДоговоры.Следующий() Цикл
				ТекущаяСтрокаДерева = ДеревоРаспределенияСуммыПлатежа.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(ТекущаяСтрокаДерева, ВыборкаДоговоры);
				ТекущаяСтрокаДерева.Объект = ТекущаяСтрокаДерева.Договор;
				ТекущаяСтрокаДерева.ПризнакАванса = Истина;
				ТекущаяСтрокаДерева.ЭтоАвто = Ложь;
				ТекущаяСтрокаДерева.СуммаПлатежаКартинка = 10;
				ТекущаяСтрокаДерева.ДокументПозжеТекущегоКартинка = 9;
				ТекущаяСтрокаДерева.ЭтоДоговор = Истина;
				ТекущаяСтрокаДерева.ПолеГруппировки = "Договор";
				
				ЗаполнитьДополнительныеРеквизитыСтроки(ТекущаяСтрокаДерева, Неопределено, "");
				
				//ДобавитьСтрокуАвто(ТекущаяСтрокаДерева);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли НЕ ЭтоЗачетПредоплаты И НЕ ВестиРасчетыПоДоговорам Тогда
		
		//ДобавитьСтрокуАвто(Неопределено);
		
	КонецЕсли;
	
	УстановитьЗаголовкиИДополнительныеНадписи();
	УчестьДанныеРасшифровкиПлатежаИСвязанныхДокументов();
	ИстинаОчищатьТаблицу = Истина;
	ОбновитьТаблицуРаспределенияПоДереву(ИстинаОчищатьТаблицу);
	ВосстановитьНастройкиОтборов();
	
	// Сформируем надписи с итоговыми данными
	СуммаИтогДолгСтрока = ""+СуммаИтогДолг+" "+ПредставлениеВалютыДокумента;
	СуммаИтогЗаказыСтрока = ""+СуммаИтогЗаказы+" "+ПредставлениеВалютыДокумента;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуАвто(пСтрокаДереваРодитель) Экспорт
	
	// Если расчеты ведутся без учета договоров, то договор всегда основной, а валюте = национальной валюте.
	// Для ведения валютных расчетов, на данный момент, требуется включить учет по договорам.
	Если пСтрокаДереваРодитель = Неопределено Тогда
		ТекущаяСтрокаАвто = ДеревоРаспределенияСуммыПлатежа.ПолучитьЭлементы().Добавить();
		
		ТекущаяСтрокаАвто.Договор = ДоговорПоУмолчанию;
		ТекущаяСтрокаАвто.Курс = 1;
		ТекущаяСтрокаАвто.Кратность = 1;
		ТекущаяСтрокаАвто.ВалютаРасчетов = ДоговорПоУмолчанию.ВалютаРасчетов;
		ТекущаяСтрокаАвто.ВалютаРасчетовПредставление = ДоговорПоУмолчанию.ВалютаРасчетов.СимвольноеПредставление;
	Иначе
		ТекущаяСтрокаАвто = пСтрокаДереваРодитель.ПолучитьЭлементы().Добавить();
		
		ТекущаяСтрокаАвто.Договор = пСтрокаДереваРодитель.Объект;
		ТекущаяСтрокаАвто.Курс = пСтрокаДереваРодитель.Курс;
		ТекущаяСтрокаАвто.Кратность = пСтрокаДереваРодитель.Кратность;
		ТекущаяСтрокаАвто.ВалютаРасчетов = пСтрокаДереваРодитель.ВалютаРасчетов;
		ТекущаяСтрокаАвто.ВалютаРасчетовПредставление = пСтрокаДереваРодитель.ВалютаРасчетовПредставление;
	КонецЕсли;
	
	ТекущаяСтрокаАвто.Объект = НСтр("ru = '<Автоматически>'");
	ТекущаяСтрокаАвто.ЭтоАвто = Истина;
	ТекущаяСтрокаАвто.СуммаПлатежаКартинка = 10;
	ТекущаяСтрокаАвто.ДокументПозжеТекущегоКартинка = 9;
	
	ТекущаяСтрокаАвто.Заказ = Неопределено;
	ТекущаяСтрокаАвто.Документ = Неопределено;
	
	ЗаполнитьДополнительныеРеквизитыСтроки(ТекущаяСтрокаАвто, Неопределено, "");
	
КонецПроцедуры

&НаСервере
Функция ДобавитьСтрокуДерева(СтрокаДереваРодитель, ТекущаяВыборка, ПолеГруппировки, ПоследняяГруппировка) Экспорт
	
	ТекущийОбъект = ТекущаяВыборка[ПолеГруппировки];
	Если НЕ ПоследняяГруппировка ИЛИ ЗначениеЗаполнено(ТекущийОбъект) Тогда
		
		ТекущаяСтрокаДерева = СтрокаДереваРодитель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрокаДерева, ТекущаяВыборка,
			"Договор, Заказ, Документ, ВалютаРасчетовПредставление, ВалютаРасчетов, СостояниеЗаказа"
		);
		Если ЭтоЗачетПредоплаты ИЛИ ПоОдномуДоговору Тогда
			ТекущаяСтрокаДерева.Договор = Договор;
		КонецЕсли;
		
		ТекущаяСтрокаДерева.ДокументПозжеТекущегоКартинка = 9;
		ТекущаяСтрокаДерева.ПолеГруппировки = ПолеГруппировки;
		
		Если ПолеГруппировки = "Договор" Тогда
			
			Если ЗначениеЗаполнено(ТекущийОбъект) Тогда
				ТекущаяСтрокаДерева.Объект = ТекущийОбъект;
				ТекущаяСтрокаДерева.Договор = ТекущийОбъект;
				ТекущаяСтрокаДерева.Организация = ТекущаяВыборка.ДоговорОрганизация;
			Иначе
				ТекущаяСтрокаДерева.Объект = "<Не выбран>";
			КонецЕсли;
			
			Если ИмяПервойГруппировки = "Договоры" Тогда
				Если ЭтоЗачетПредоплаты Тогда
					СуммаИтогДолг = СуммаИтогДолг + ТекущаяВыборка.СуммаВалОстаток;
					СуммаИтогЗаказы = СуммаИтогЗаказы + ТекущаяВыборка.СуммаВалОстатокПоЗаказу;
				Иначе
					СуммаИтогДолг = СуммаИтогДолг + ТекущаяВыборка.СуммаВалОстаток * ТекущаяВыборка.Курс * Кратность / (Курс * ТекущаяВыборка.Кратность);
					СуммаИтогЗаказы = СуммаИтогЗаказы + ТекущаяВыборка.СуммаВалОстатокПоЗаказу * ТекущаяВыборка.Курс * Кратность / (Курс * ТекущаяВыборка.Кратность);
				КонецЕсли;
			КонецЕсли;
			
			ТекущаяСтрокаДерева.ЭтоДоговор = Истина;
			
		ИначеЕсли ПолеГруппировки = "Заказ" Тогда
			
			Если ЗначениеЗаполнено(ТекущийОбъект) Тогда
				ТекущаяСтрокаДерева.Объект = ТекущийОбъект;
				ТекущаяСтрокаДерева.Заказ = ТекущийОбъект;
				ТекущаяСтрокаДерева.СуммаДокумента = ТекущаяВыборка.ЗаказСуммаДокумента;
				ТекущаяСтрокаДерева.ВалютаДокумента = ТекущаяВыборка.ЗаказВалютаДокумента;
				ТекущаяСтрокаДерева.УжеОплачено = ТекущаяВыборка.УжеОплаченоЗаказ;
				ТекущаяСтрокаДерева.ВалютаОбъектаПредставление = ТекущаяВыборка.ВалютаЗаказаСимвольноеПредставление;
				ТекущаяСтрокаДерева.СостояниеЗаказа = ТекущаяВыборка.СостояниеЗаказа;
				ТекущаяСтрокаДерева.Автор = ТекущаяВыборка.ЗаказАвтор;
				ТекущаяСтрокаДерева.Ответственный = ТекущаяВыборка.ЗаказОтветственный;
				ТекущаяСтрокаДерева.Организация = ТекущаяВыборка.ЗаказОрганизация;
				ТекущаяСтрокаДерева.ДатаОбъекта = ТекущаяВыборка.ЗаказДата;
				
				// Заполним данные о счетах на оплату
				Если ЕстьДанныеОСчетахНаОплату Тогда
					ЗаполнитьИнформациюОСчетахНаОплату(ТекущаяСтрокаДерева, ПолеГруппировки);
				КонецЕсли;
				
			Иначе
				
				ТекущаяСтрокаДерева.Объект = "<Не выбран>";
				
			КонецЕсли;
			
			Если ИмяПервойГруппировки = "Заказы" Тогда
				Если ЭтоЗачетПредоплаты Тогда
					СуммаИтогДолг = СуммаИтогДолг + ТекущаяВыборка.СуммаВалОстаток;
					СуммаИтогЗаказы = СуммаИтогЗаказы + ТекущаяВыборка.СуммаВалОстатокПоЗаказу;
				Иначе
					СуммаИтогДолг = СуммаИтогДолг + ТекущаяВыборка.СуммаВалОстаток * ТекущаяВыборка.Курс * Кратность / (Курс * ТекущаяВыборка.Кратность);
					СуммаИтогЗаказы = СуммаИтогЗаказы + ТекущаяВыборка.СуммаВалОстатокПоЗаказу * ТекущаяВыборка.Курс * Кратность / (Курс * ТекущаяВыборка.Кратность);
				КонецЕсли;
			КонецЕсли;
			
			ТекущаяСтрокаДерева.ЭтоЗаказ = Истина;
			
		ИначеЕсли ПолеГруппировки = "Документ" Тогда
			
			Если ЗначениеЗаполнено(ТекущийОбъект) Тогда
				
				ТекущаяСтрокаДерева.Объект = ТекущийОбъект;
				ТекущаяСтрокаДерева.Документ = ТекущийОбъект;
				ТекущаяСтрокаДерева.СуммаДокумента = ТекущаяВыборка.ДокументСуммаДокумента;
				ТекущаяСтрокаДерева.ВалютаДокумента = ТекущаяВыборка.ДокументВалютаДокумента;
				ТекущаяСтрокаДерева.УжеОплачено = ТекущаяВыборка.УжеОплаченоДокумент;
				ТекущаяСтрокаДерева.ВалютаОбъектаПредставление = ТекущаяВыборка.ВалютаДокументаСимвольноеПредставление;
				ТекущаяСтрокаДерева.Автор = ТекущаяВыборка.ДокументАвтор;
				ТекущаяСтрокаДерева.Ответственный = ТекущаяВыборка.ДокументОтветственный;
				ТекущаяСтрокаДерева.Организация = ТекущаяВыборка.ДокументОрганизация;
				ТекущаяСтрокаДерева.ДатаОбъекта = ТекущаяВыборка.ДокументДата;
				
				Если ТекущаяВыборка.ДокументПозжеТекущего Тогда
					ТекущаяСтрокаДерева.ДокументПозжеТекущегоКартинка = 0;
					ТекущаяСтрокаДерева.ДокументПозжеТекущего = Истина;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ТекущаяСтрокаДерева.Заказ) Тогда
					ТекущаяСтрокаДерева.Заказ = Неопределено;
				КонецЕсли;
				
				ТекущаяСтрокаДерева.ДокументНеОбрабатывается = (ТекущаяВыборка.ДокументПозжеТекущего
					И (РасчетыРаботаСФормамиВызовСервера.ВопросДокументНеОбрабатывается(ТекущийОбъект, ЭтоЗачетПредоплаты)
					ИЛИ НЕ РасчетыРаботаСФормамиВызовСервера.ВопросДокументМожноИзменятьИзПомощника(ТекущийОбъект.Ссылка)))
					ИЛИ (ТекущаяВыборка.ДокументНеПроведен И ЭтоЗачетПредоплаты И ТекущаяВыборка.ДокументПозжеТекущего)
				;
				
				// Заполним данные о счетах на оплату
				Если ЕстьДанныеОСчетахНаОплату Тогда
					ЗаполнитьИнформациюОСчетахНаОплату(ТекущаяСтрокаДерева, ПолеГруппировки);
				КонецЕсли;
				
			Иначе
				ТекущаяСтрокаДерева.Объект = "<Не выбран>";
				ТекущаяСтрокаДерева.Документ = Неопределено;
			КонецЕсли;
			
			Если ИмяПервойГруппировки = "Накладные" Тогда
				Если ЭтоЗачетПредоплаты Тогда
					СуммаИтогДолг = СуммаИтогДолг + ТекущаяВыборка.СуммаВалОстаток;
					СуммаИтогЗаказы = СуммаИтогЗаказы + ТекущаяВыборка.СуммаВалОстатокПоЗаказу;
				Иначе
					СуммаИтогДолг = СуммаИтогДолг + ТекущаяВыборка.СуммаВалОстаток * ТекущаяВыборка.Курс * Кратность / (Курс * ТекущаяВыборка.Кратность);
					СуммаИтогЗаказы = СуммаИтогЗаказы + ТекущаяВыборка.СуммаВалОстатокПоЗаказу * ТекущаяВыборка.Курс * Кратность / (Курс * ТекущаяВыборка.Кратность);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Сумма в валюте расчетов
		Если ПолеГруппировки = "Заказ" Тогда
			//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			// НУЖНО СДЕЛАТЬ:
			ТекущаяСтрокаДерева.ОстатокДолгаПоЗаказуВалРасчетов = ТекущаяВыборка.СуммаВалОстаток;
			Если НЕ ЭтоЗачетПредоплаты И ЗначениеЗаполнено(ТекущаяСтрокаДерева.Заказ) Тогда
				ТекущаяСтрокаДерева.ОстатокКОплатеВалРасчетов = ТекущаяВыборка.СуммаВалОстатокПоЗаказу;
			Иначе
				ТекущаяСтрокаДерева.ОстатокКОплатеВалРасчетов = ТекущаяВыборка.СуммаВалОстаток;
			КонецЕсли;
		Иначе
			ТекущаяСтрокаДерева.ОстатокКОплатеВалРасчетов = ТекущаяВыборка.СуммаВалОстаток;
		КонецЕсли;
		ТекущаяСтрокаДерева.СуммаРасчетовИсходноеЗначение = ТекущаяВыборка.СуммаВалОстаток;
		
		// Сумма в валюте документа
		Если ТекущаяВыборка.СуммаРегОстаток <> 0 И (ТекущаяВыборка.СуммаРегОстаток / ТекущаяВыборка.СуммаВалОстаток > 0) Тогда
			ТекущаяСтрокаДерева.Курс = ?(ТекущаяВыборка.СуммаВалОстаток = 0, ТекущаяВыборка.Курс, ТекущаяВыборка.СуммаРегОстаток / ТекущаяВыборка.СуммаВалОстаток);
		ИначеЕсли НациональнаяВалюта = ВалютаУчета И ТекущаяВыборка.СуммаОстаток <> 0 И (ТекущаяВыборка.СуммаОстаток / ТекущаяВыборка.СуммаВалОстаток > 0) Тогда
			ТекущаяСтрокаДерева.Курс = ?(ТекущаяВыборка.СуммаВалОстаток = 0, ТекущаяВыборка.Курс, ТекущаяВыборка.СуммаОстаток / ТекущаяВыборка.СуммаВалОстаток);
		Иначе
			ТекущаяСтрокаДерева.Курс = ТекущаяВыборка.Курс;
		КонецЕсли;
		ТекущаяСтрокаДерева.КурсИсходноеЗначение = ТекущаяСтрокаДерева.Курс;
		ТекущаяСтрокаДерева.Кратность = ТекущаяВыборка.Кратность;
		
		//**************************************************************************
		ПересчитатьОжидаетОплатыНаСервере(ТекущаяСтрокаДерева,, ПолеГруппировки);
		//**************************************************************************
		
		Если ЗначениеЗаполнено(ТекущаяСтрокаДерева.Документ) Тогда
			ТекущаяСтрокаДерева.ПризнакАванса = Ложь;
		ИначеЕсли ЭтоЗачетПредоплаты И ВестиРасчетыТолькоПоДоговорам Тогда
			ТекущаяСтрокаДерева.ПризнакАванса = Ложь;
		Иначе
			ТекущаяСтрокаДерева.ПризнакАванса = Истина;
		КонецЕсли;
		
		ЗаполнитьДополнительныеРеквизитыСтроки(ТекущаяСтрокаДерева, ТекущаяВыборка, ПолеГруппировки);
		
		Возврат ТекущаяСтрокаДерева;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбновитьТаблицуРаспределенияПоДереву(ОчищатьТаблицу = Ложь)
	
	Если ОчищатьТаблицу Тогда
		ТаблицаРаспределенияСуммыПлатежа.Очистить();
	КонецЕсли;
	ОбновитьТаблицуРаспределенияПоДеревуРекурсивно(ОчищатьТаблицу, ДеревоРаспределенияСуммыПлатежа.ПолучитьЭлементы(), 0, 0);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуРаспределенияПоДеревуРекурсивно(ОчищатьТаблицу, ЭлементыДерева, пКлюч, Знач пКлючРодителя)
	
	Для Каждого ТекущийЭлементДерева Из ЭлементыДерева Цикл
		пКлюч = пКлюч + 1;
		ДобавитьОбновитьСтрокуТаблицыПоСтрокеДерева(ОчищатьТаблицу, ТекущийЭлементДерева, пКлюч, пКлючРодителя);
		ОбновитьТаблицуРаспределенияПоДеревуРекурсивно(ОчищатьТаблицу, ТекущийЭлементДерева.ПолучитьЭлементы(), пКлюч, пКлюч);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОбновитьСтрокуТаблицыПоСтрокеДерева(ОчищатьТаблицу, ТекущаяСтрокаДерева, пКлюч, пКлючРодителя)
	
	Если ОчищатьТаблицу Тогда
		НоваяСтрокаТаблицы = ТаблицаРаспределенияСуммыПлатежа.Добавить();
		ТекущаяСтрокаДерева.ИдентификаторСтрокиТаблицы = НоваяСтрокаТаблицы.ПолучитьИдентификатор();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, ТекущаяСтрокаДерева);
		НоваяСтрокаТаблицы.Ключ = пКлюч;
		НоваяСтрокаТаблицы.КлючРодителя = пКлючРодителя;
	Иначе
		ТекущаяСтрокаТаблицы = ТаблицаРаспределенияСуммыПлатежа.НайтиПоИдентификатору(ТекущаяСтрокаДерева.ИдентификаторСтрокиТаблицы);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрокаТаблицы, ТекущаяСтрокаДерева,, "Ключ, КлючРодителя");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокуТаблицыПоСтрокеДереваНаКлиенте(ТекущаяСтрокаДерева)
	
	СтрокаТаблицы = ТаблицаРаспределенияСуммыПлатежа.НайтиПоИдентификатору(ТекущаяСтрокаДерева.ИдентификаторСтрокиТаблицы);
	Если СтрокаТаблицы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ТекущаяСтрокаДерева,, "Ключ, КлючРодителя");
	Иначе
		ВызватьИсключение НСтр("ru = 'Не найдена строка в служебной таблице.'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьОжидаетОплатыНаСервере(ТекущаяСтрока, ПересчитыватьСуммуПлатежа = Истина, ПолеГруппировки = "")
	
	текПолеГруппировки = ТекущаяСтрока.ПолеГруппировки;
	Если текПолеГруппировки = "" Тогда
		текПолеГруппировки = ТекущаяСтрока.ПолеГруппировки;
	КонецЕсли;
	
	Если ЭтоЗачетПредоплаты И текПолеГруппировки = "Заказ"
		И ЗначениеЗаполнено(ТекущаяСтрока.Заказ)
		И НЕ ЭтоЗаказ Тогда
		// Нужно заполнить информацию о сумме, которую нужно распределить по каждому заказу отдельно.
		// Например, частый сценарий, когда в накладной указаны товары по заказу и без заказа, т.е. отгрузка сверх заказа.
		// Еще пример: одна накладная по двум заказам.
		СтруктураПоиска = Новый Структура("Заказ", ТекущаяСтрока.Заказ);
		МассивСтрок = ТаблицаЗаказыИСумма.НайтиСтроки(СтруктураПоиска);
		ТекущаяСтрока.ОжидаетОплаты = 0;
		Для Каждого ТекущаяСтрокаМассива Из МассивСтрок Цикл
			ТекущаяСтрока.ОжидаетОплаты = ТекущаяСтрока.ОжидаетОплаты + ТекущаяСтрокаМассива.Всего;
		КонецЦикла;
		//ТекущаяСтрока.ОжидаетОплаты = Мин(ТекущаяСтрока.ОжидаетОплаты, ТекущаяСтрока.ОстатокКОплатеВалРасчетов);
	ИначеЕсли ЭтоЗачетПредоплаты Тогда
		ТекущаяСтрока.ОжидаетОплаты = ТекущаяСтрока.ОстатокКОплатеВалРасчетов;
		
		Если ПересчитыватьСуммуПлатежа Тогда
			ТекущаяСтрока.СуммаПлатежа = ТекущаяСтрока.СуммаРасчетов;
		КонецЕсли;
	Иначе
		
		Если текПолеГруппировки = "Договор" И НЕ ВестиРасчетыТолькоПоДоговорам Тогда
			Возврат;
		КонецЕсли;
		
		Если ВалютаДенежныхСредств = ТекущаяСтрока.ВалютаРасчетов Тогда
			ТекущаяСтрока.ОжидаетОплаты = ТекущаяСтрока.ОстатокКОплатеВалРасчетов;
		Иначе
			ТекущаяСтрока.ОжидаетОплаты = ТекущаяСтрока.ОстатокКОплатеВалРасчетов * ТекущаяСтрока.Курс * Кратность /
				(Курс * ТекущаяСтрока.Кратность);
			;
		КонецЕсли;
		
		Если ПересчитыватьСуммуПлатежа Тогда
			ТекущаяСтрока.СуммаПлатежа = ТекущаяСтрока.СуммаРасчетов * ТекущаяСтрока.Курс * Кратность /
				(Курс * ТекущаяСтрока.Кратность)
			;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяСтрока.ОжидаетОплатыИсходноеЗначение = ТекущаяСтрока.ОжидаетОплаты;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьОжидаетОплатыНаКлиенте(ТекущаяСтрока, ПересчитыватьСуммуПлатежа = Истина)
	
	ТекущаяСтрока.ОжидаетОплаты = ТекущаяСтрока.ОстатокКОплатеВалРасчетов * ТекущаяСтрока.Курс * Кратность /
		(Курс * ТекущаяСтрока.Кратность);
	;
	
	Если ПересчитыватьСуммуПлатежа Тогда
		ТекущаяСтрока.СуммаПлатежа = ТекущаяСтрока.СуммаРасчетов * ТекущаяСтрока.Курс * Кратность /
			(Курс * ТекущаяСтрока.Кратность)
		;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьИнформациюОСчетахНаОплату(ТекущаяСтрокаДерева, ПолеГруппировки);
	
	// Показываем все счета для заказа или для документа.
	// Нет привязки к комбинации Заказ-Документ, т.к. счёт на оплату может быть связан только с одним из них.
	Если ПолеГруппировки = "Заказ" Тогда
		СтруктураДляОтбора = Новый Структура(ПолеГруппировки, ТекущаяСтрокаДерева.Заказ);
	Иначе
		СтруктураДляОтбора = Новый Структура(ПолеГруппировки, ТекущаяСтрокаДерева.Документ);
	КонецЕсли;
	
		НайденныеСтроки = ДанныеОСчетахНаОплату.НайтиСтроки(СтруктураДляОтбора);
		Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
			Если НайденныеСтроки.Количество() = 1 Тогда
				ТекущаяСтрокаДерева.СчетНаОплату = НайденныеСтроки[0].СчетНаОплату;
				ТекущаяСтрокаДерева.ВыводитьСчетаСерымЦветом = Ложь;
			Иначе
				ТекущаяСтрокаДерева.СчетНаОплату = ПолучитьНадписьНайденоСчетов(НайденныеСтроки.Количество());
				ТекущаяСтрокаДерева.ВыводитьСчетаСерымЦветом = Истина;
			КонецЕсли;
		КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНадписьНайденоСчетов(пКоличествоСчетов)
	
	Возврат НСтр("ru = '<найдено счетов: '") + пКоличествоСчетов + НСтр("ru = '>'");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДополнительныеРеквизитыСтроки(пСтрокаДерева, пВыборка, пПолеГруппировки)
	
	Если НЕ ЭтоЗачетПредоплаты Тогда
		
		СтруктураДанные = РасчетыРаботаСФормамиВызовСервера.ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(
			ДатаДокумента,
			пСтрокаДерева.Договор,
			пСтрокаДерева.ДокументПланирования,
			пСтрокаДерева.СтатьяДДС,
			Ложь
		);
		
		пСтрокаДерева.СтатьяДДС = СтруктураДанные.СтатьяДДСПоУмолчанию;
		Если пПолеГруппировки = "Документ" Тогда
			Если пВыборка.ДокументНалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
				пСтрокаДерева.СтавкаНДС =  УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			ИначеЕсли пВыборка.ДокументНалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НаЭкспорт Тогда
				СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
			КонецЕсли;
		ИначеЕсли пПолеГруппировки = "Заказ" Тогда
			Если пВыборка.ЗаказНалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
				пСтрокаДерева.СтавкаНДС =  УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			ИначеЕсли пВыборка.ЗаказНалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НаЭкспорт Тогда
				СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(пСтрокаДерева.СтавкаНДС) Тогда
			пСтрокаДерева.СтавкаНДС = СтавкаНДСПоУмолчанию;
		КонецЕсли;
		РасчетыРаботаСФормамиВызовСервера.РассчитатьСуммуНДСНаСервере(пСтрокаДерева);
		
	КонецЕсли;
	
	Если НЕ ВестиРасчетыПоДоговорам Тогда
		пСтрокаДерева.Договор = ДоговорПоУмолчанию;
	КонецЕсли;
	
	ЗаполнитьКолонкуДополнительныеРеквизитыСтрокойНаСервере(пСтрокаДерева);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКолонкуДополнительныеРеквизитыСтрокойНаСервере(пСтрокаДерева, пИдентификатор = Неопределено)
	
	Если пСтрокаДерева = Неопределено Тогда
		ТекущаяСтрокаДерева = ДеревоРаспределенияСуммыПлатежа.НайтиПоИдентификатору(пИдентификатор);
		Если ТекущаяСтрокаДерева = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Не найдена строка по идентификатору! Идентификатор = '") + пИдентификатор;
		КонецЕсли;
	Иначе
		ТекущаяСтрокаДерева = пСтрокаДерева;
	КонецЕсли;
	
	вВалютаРасчетовПредставление = ?(ЭтоЗачетПредоплаты, ВалютаРасчетовПредставление, ТекущаяСтрокаДерева.ВалютаРасчетовПредставление);
	
	ТекущаяСтрокаДерева.ДополнительныеРеквизитыСтрокой = ""
	+ ?(ФункциональнаяОпцияУчетВалютныхОпераций И НЕ ВыводитьКолонкуСуммаРасчетов,
		"=" + ТекущаяСтрокаДерева.СуммаРасчетов	+ " " + вВалютаРасчетовПредставление, //+ " (" + ТекущаяСтрокаДерева.Курс + ");",
		""
	);
	Если НЕ ЭтоЗачетПредоплаты Тогда
		ТекущаяСтрокаДерева.ДополнительныеРеквизитыСтрокой = ТекущаяСтрокаДерева.ДополнительныеРеквизитыСтрокой + ?(ТекущаяСтрокаДерева.ДополнительныеРеквизитыСтрокой = "", "", "; ")
			+ ТекущаяСтрокаДерева.СтавкаНДС + " = " + ТекущаяСтрокаДерева.СуммаНДС
			+ ?(ЗначениеЗаполнено(ТекущаяСтрокаДерева.ДокументПланирования), "; " + ТекущаяСтрокаДерева.ДокументПланирования, "")
			+ ?(ЗначениеЗаполнено(ТекущаяСтрокаДерева.СтатьяДДС), "; " + ТекущаяСтрокаДерева.СтатьяДДС, "")
		;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКолонкуДополнительныеРеквизитыСтрокойНаКлиенте(пСтрокаДерева, пИдентификатор = Неопределено)
	
	Если пСтрокаДерева = Неопределено Тогда
		ТекущаяСтрокаДерева = ДеревоРаспределенияСуммыПлатежа.НайтиПоИдентификатору(пИдентификатор);
		Если ТекущаяСтрокаДерева = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Не найдена строка по идентификатору! Идентификатор = '") + пИдентификатор;
		КонецЕсли;
	Иначе
		ТекущаяСтрокаДерева = пСтрокаДерева;
	КонецЕсли;
	
	ТекущаяСтрокаДерева.ДополнительныеРеквизитыСтрокой = ""
	+ ?(ФункциональнаяОпцияУчетВалютныхОпераций, "=" + ТекущаяСтрокаДерева.СуммаРасчетов
	+ " " + ТекущаяСтрокаДерева.ВалютаРасчетовПредставление + " (" + ТекущаяСтрокаДерева.Курс + ");", "")
	+ ТекущаяСтрокаДерева.СтавкаНДС + " = " + ТекущаяСтрокаДерева.СуммаНДС
	+ ?(ЗначениеЗаполнено(ТекущаяСтрокаДерева.ДокументПланирования), "; " + ТекущаяСтрокаДерева.ДокументПланирования, "")
	+ ?(ЗначениеЗаполнено(ТекущаяСтрокаДерева.СтатьяДДС), "; " + ТекущаяСтрокаДерева.СтатьяДДС, "");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСуммуПлатежаПредоплатаРекурсивно(ЭлементРодитель)
	
	Для Каждого ТекущаяСтрока Из ЭлементРодитель.ПолучитьЭлементы() Цикл
		ТекущаяСтрока.СуммаПлатежа = ТекущаяСтрока.СуммаПлатежаПредоплата;
		ТекущаяСтрока.ВалютаРасчетов = ВалютаРасчетов;
		ЗаполнитьСуммуПлатежаПредоплатаРекурсивно(ТекущаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьРаспределениеСуммыПлатежа(Команда)
	
	Если ЭтоЗачетПредоплаты Тогда
		ЗаполнитьСуммуПлатежаПредоплатаРекурсивно(ДеревоРаспределенияСуммыПлатежа);
	КонецЕсли;
	СтруктураДляВозврата = Новый Структура("ДеревоРаспределенияСуммыПлатежа, ДоговорПоУмолчанию, СпособЗачетаПоУмолчанию, ВестиРасчетыВЦеломПоКонтрагенту, ВестиРасчетыТолькоПоДоговорам, СтавкаНДСПоУмолчанию",
		ДеревоРаспределенияСуммыПлатежа, ДоговорПоУмолчанию, СпособЗачетаПоУмолчанию, ВестиРасчетыВЦеломПоКонтрагенту, ВестиРасчетыТолькоПоДоговорам, СтавкаНДСПоУмолчанию
	);
	Закрыть(СтруктураДляВозврата);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтРаспределенияСуммыПлатежа(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоРаспределенияСуммыПлатежа(Команда)
	
	ОписаниеДляВопроса = Новый ОписаниеОповещения("ОбновитьДеревоРаспределенияСуммыПлатежаЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеДляВопроса, НСтр("ru = 'Будет выполнено повторное заполнение таблицы. Все изменения будут отменены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоРаспределенияСуммыПлатежаЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДеревоРаспределенияСуммыПлатежаПоДаннымОбОстатках();
		РазвернутьВсеГруппы(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСЭлементамиПравойПанели

&НаСервере
Процедура УдалитьПодчиненныеЭлементы(ГруппаЭлементов)
	
	Если Ложь Тогда
		ГруппаЭлементов = Элементы.ГруппаСтроки;
	КонецЕсли;
	
	Индекс = ГруппаЭлементов.ПодчиненныеЭлементы.Количество();
	
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		
		Элемент = ГруппаЭлементов.ПодчиненныеЭлементы.Получить(Индекс);
		Если Элемент.Имя = "ТаблицаНастроекПравойПанели" Тогда
			Продолжить;
		Иначе
			Элементы.Удалить(Элемент);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыПравойПанели(Группировки = Истина, Колонки = Истина)
	
	Если Группировки Тогда
		УдалитьПодчиненныеЭлементы(Элементы.ГруппаСтроки);
		
		ТекСч = 0;
		Для Каждого ТекущаяСтрока Из ТаблицаГруппировокПравойПанели Цикл
			ТекСч = ТекСч + 1;
			ДобавитьЭлементГруппировка(ТекущаяСтрока, ТекСч, ТекСч = ТаблицаГруппировокПравойПанели.Количество());
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементГруппировка(Стр, ТекСч, ЭтоПоследняяСтрока)
	
	//СтруктураОтбора = Новый Структура;
	//СтруктураОтбора.Вставить("Тип", "Группировка");
	//Строки = СтрокиДерева(ПоляНастроек, СтруктураОтбора);
	//Если Строки.Количество()>0 И Строки.Найти(Стр)=Строки.Количество()-1 Тогда
	//	ИндексВставки = Неопределено;
	//Иначе
	//	ИндексВставки = ПоляНастроек.ПолучитьЭлементы().Индекс(Строки[Строки.Найти(Стр)+1]);
	//КонецЕсли; 
	
	//Для каждого Реквизит Из Стр.Реквизиты Цикл
		
		ИндексСтр = ТаблицаГруппировокПравойПанели.Индекс(Стр);
		ИмяРеквизита = "Выбран"+ИндексСтр;
		
		//ИмяРеквизита = Реквизит.Ключ;
		//
		//Если ИндексВставки=Неопределено Тогда
			Группа = Элементы.Добавить(ИмяРеквизита+"_Группа", Тип("ГруппаФормы"), Элементы.ГруппаСтроки);
			Группа.Доступность = Ложь;
		//Иначе
		//	ИмяГруппыВставки = ПоляНастроек.ПолучитьЭлементы().Получить(ИндексВставки).ИмяГруппы;
		//	Если НЕ ПустаяСтрока(ИмяГруппыВставки) Тогда
		//		Группа = Элементы.Вставить(ИмяРеквизита+"_Группа", Тип("ГруппаФормы"), Элементы.ГруппаСтрокиЭлементы, Элементы[ИмяГруппыВставки]);
		//	Иначе
		//		Группа = Элементы.Добавить(ИмяРеквизита+"_Группа", Тип("ГруппаФормы"), Элементы.ГруппаСтрокиЭлементы);
		//	КонецЕсли; 
		//КонецЕсли; 
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		
		ПутьКДанным = "ТаблицаГруппировокПравойПанели["+ИндексСтр+"].Выбран";
		
		ДекорацияОтступ = Элементы.Добавить(ИмяРеквизита+"РазделительВначале", Тип("ДекорацияФормы"), Группа); 
		ДекорацияОтступ.Вид = ВидДекорацииФормы.Надпись;
		ДекорацияОтступ.РастягиватьПоГоризонтали = Ложь;
		ДекорацияОтступ.Ширина = 1;
		
		ГруппаГруппировки = Элементы.Добавить(ИмяРеквизита+"_ГруппаГруппировки", Тип("ГруппаФормы"), Группа);
		ГруппаГруппировки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаГруппировки.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаГруппировки.ОтображатьЗаголовок = Ложь;
		ГруппаГруппировки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		//ГруппаГруппировки.Ширина = 8;
		
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), ГруппаГруппировки);
		Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		Элемент.ПутьКДанным = ПутьКДанным;
		Элемент.Заголовок = ""+Стр.Группировка;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ГруппировкаПриИзменении");
		Элемент.ВысотаЗаголовка = 1;
		
		ДекорацияОтступ = Элементы.Добавить(ИмяРеквизита+"Разделитель", Тип("ДекорацияФормы"), Группа); 
		ДекорацияОтступ.Вид = ВидДекорацииФормы.Надпись;
		ДекорацияОтступ.РастягиватьПоГоризонтали = Истина;
		ДекорацияОтступ.Ширина = 1;
		
		// Команды перемещения вверх и вниз.
		ГруппаКоманд = Элементы.Добавить(ИмяРеквизита+"_ГруппаКоманды", Тип("ГруппаФормы"), Группа);
		ГруппаКоманд.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаКоманд.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаКоманд.ОтображатьЗаголовок = Ложь;
		ГруппаКоманд.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		
		// Нарисуем стрелку вверх.
		Если ТекСч > 2 Тогда
			Кнопка = Элементы.Добавить(ИмяРеквизита+"СместитьВверх", Тип("ДекорацияФормы"), ГруппаКоманд);
			Кнопка.Вид = ВидДекорацииФормы.Картинка;
			Кнопка.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
			Кнопка.Гиперссылка = Истина;
			Кнопка.Ширина = 1;
			Кнопка.Высота = 1;
			Кнопка.РастягиватьПоГоризонтали = Ложь;
			Кнопка.РастягиватьПоВертикали = Ложь;
			Кнопка.Картинка = БиблиотекаКартинок.СтрелкаВверхУзкая;
			Кнопка.УстановитьДействие("Нажатие", "Подключаемый_СместитьВверх");
		КонецЕсли;
		
		Если Не ЭтоПоследняяСтрока И ТекСч > 1 Тогда
			Кнопка = Элементы.Добавить(ИмяРеквизита+"СместитьВниз", Тип("ДекорацияФормы"), ГруппаКоманд);
			Кнопка.Вид = ВидДекорацииФормы.Картинка;
			Кнопка.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
			Кнопка.Гиперссылка = Истина;
			Кнопка.Ширина = 1;
			Кнопка.Высота = 1;
			Кнопка.РастягиватьПоГоризонтали = Ложь;
			Кнопка.РастягиватьПоВертикали = Ложь;
			Кнопка.Картинка = БиблиотекаКартинок.СтрелкаВнизУзкая;
			Кнопка.УстановитьДействие("Нажатие", "Подключаемый_СместитьВниз");
		Иначе
			Кнопка = Элементы.Добавить(ИмяРеквизита+"СместитьВниз", Тип("ДекорацияФормы"), ГруппаКоманд);
			Кнопка.Вид = ВидДекорацииФормы.Картинка;
			Кнопка.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
			Кнопка.Гиперссылка = Ложь;
			Кнопка.Ширина = 1;
			Кнопка.Высота = 1;
			Кнопка.РастягиватьПоГоризонтали = Ложь;
			Кнопка.РастягиватьПоВертикали = Ложь;
			//Кнопка.Картинка = БиблиотекаКартинок.СтрелкаВнизУзкая;
		КонецЕсли;
		
	//	ЭтотОбъект[ИмяРеквизита] = Реквизит.Значение;
	//	Стр.Элементы.Вставить(ИмяРеквизита, ИмяРеквизита);
		Стр.ИмяГруппы = Группа.Имя;
	//	
	//	ДобавитьКоманды(Стр, ИмяРеквизита, Элементы.ГруппаСтрокиКоманды);
	//
	//	ГруппаРеквизиты = Элементы.Добавить(ИмяРеквизита+"_Реквизиты", Тип("ГруппаФормы"), Элементы.ГруппаСтрокиЭлементы);
	//	ГруппаРеквизиты.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	//	ГруппаРеквизиты.Отображение = ОтображениеОбычнойГруппы.Нет;
	//	ГруппаРеквизиты.ОтображатьЗаголовок = Ложь;
	//	
	//	ГруппаКомандыРеквизитов = Элементы.Добавить(ИмяРеквизита+"_КомандыРеквизитов", Тип("ГруппаФормы"), Элементы.ГруппаСтрокиКоманды);
	//	ГруппаКомандыРеквизитов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	//	ГруппаКомандыРеквизитов.Отображение = ОтображениеОбычнойГруппы.Нет;
	//	ГруппаКомандыРеквизитов.ОтображатьЗаголовок = Ложь;
		
	//КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СместитьВверх(Элемент)
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "СместитьВверх", "");
	Индекс = Число(Прав(ИмяРеквизита, 1));
	
	Если СместитьГруппировку(Индекс, -1) Тогда
		ЗаполнитьДеревоРаспределенияСуммыПлатежаПоДаннымОбОстатках(Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СместитьВниз(Команда)
	
	ИмяРеквизита = СтрЗаменить(Команда.Имя, "СместитьВниз", "");
	Индекс = Число(Прав(ИмяРеквизита, 1));
	
	Если СместитьГруппировку(Индекс, 1) Тогда
		ЗаполнитьДеревоРаспределенияСуммыПлатежаПоДаннымОбОстатках(Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция СместитьГруппировку(Индекс, Шаг)
	
	Стр = ТаблицаГруппировокПравойПанели.Получить(Индекс);
	
	НовыйИндекс = Индекс + Шаг;
	Если НовыйИндекс < 0 ИЛИ НовыйИндекс >= ТаблицаГруппировокПравойПанели.Количество() Тогда
		Возврат Ложь;
	Иначе
		ТаблицаГруппировокПравойПанели.Сдвинуть(Индекс, Шаг);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаНастроекПравойПанелиВыбранПриИзменении(Элемент)
	ЗаполнитьДеревоРаспределенияСуммыПлатежаПоДаннымОбОстатках();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГруппировкаПриИзменении(Элемент)
	ЗаполнитьДеревоРаспределенияСуммыПлатежаПоДаннымОбОстатках();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Развернем все группы
	РазвернутьВсеГруппы(Неопределено);
	// Конец
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборов(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость,, 27);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ДеревоРаспределенияСуммыПлатежаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ДеревоРаспределенияСуммыПлатежаОбъект" Тогда
		// Откроем карточку объекта расчётов.
		ПредставлениеДокументаНажатие(Элемент, СтандартнаяОбработка);
	ИначеЕсли Поле.Имя = "ДеревоРаспределенияСуммыПлатежаДополнительныеРеквизитыСтрокой" Тогда
		ОткрытьФормуРедактированияДополнительныхРеквизитов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияДополнительныхРеквизитов()
	
	ТекущиеДанные = Элементы.ДеревоРаспределенияСуммыПлатежа.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Выберите строку в дереве'"));
		Возврат;
	КонецЕсли;
	
	Если ЭтоЗачетПредоплаты И ТекущиеДанные.Документ = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Выберите в дереве строку с заполненным документом'"));
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = РасчетыРаботаСФормамиКлиент.ПолучитьСтруктуруСтрокиДополнительно();
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
	ДанныеСтроки.Вставить("КратностьДокумента", Кратность);
	ДанныеСтроки.Вставить("КурсДокумента", Курс);
	ДанныеСтроки.Вставить("ЭтоЗачетПредоплаты", ЭтоЗачетПредоплаты);
	
	вПараметры = Новый Структура("ДанныеСтроки", ДанныеСтроки);
	
	ДопПараметры = Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор());
	ТекущееОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОткрытьФормуРедактированияДополнительныхРеквизитовЗавершение", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму("Обработка.ПомощникиВеденияВзаиморасчетов.Форма.ФормаРедактированияСтрокиПомощника", вПараметры, ЭтотОбъект,,,, ТекущееОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияДополнительныхРеквизитовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ТекущаяСтрока = ДеревоРаспределенияСуммыПлатежа.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		ПредыдущееЗначениеСуммыПлатежа = ТекущаяСтрока.СуммаПлатежа;
		
		Если ТекущаяСтрока = Неопределено Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Строка была удалена. Изменения не будут приняты.'"));
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Результат,, "Договор, Документ, Заказ");
		ЗаполнитьКолонкуДополнительныеРеквизитыСтрокойНаКлиенте(ТекущаяСтрока);
		
		ПересчитатьОжидаетОплатыНаКлиенте(ТекущаяСтрока);
		
		Если ПредыдущееЗначениеСуммыПлатежа <> ТекущаяСтрока.СуммаПлатежа Тогда
			ПриИзмененииСуммыПлатежа(Неопределено, ТекущаяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
		
		ОбновитьСтрокуТаблицыПоСтрокеДереваНаКлиенте(ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплаченоПоТекущемуДокументуНажатие(Элемент, СтандартнаяОбработка)
	
	// Открыть форму для просмотра документов оплаты конкретного заказа, накладной, акта и т.д.
	СтандартнаяОбработка = Ложь;
	ТекущиеДанныеДерева = Элементы.ДеревоРаспределенияСуммыПлатежа.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено ИЛИ ТипЗнч(ТекущиеДанныеДерева.Объект) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		ИЛИ ТипЗнч(ТекущиеДанныеДерева.Объект) = Тип("Строка") Тогда
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Выберите документ, чтобы посмотреть, какие по нему были платежи'"));
		
	Иначе
		
		ПараметрыФормыПросмотраДокументовОплаты = Новый Структура("Документ, ЭтоЗачетПредоплаты", ТекущиеДанныеДерева.Объект, ЭтоЗачетПредоплаты);
		ОткрытьФорму("Обработка.ПомощникиВеденияВзаиморасчетов.Форма.ФормаПросмотраДокументовОплаты", ПараметрыФормыПросмотраДокументовОплаты,, ""+ТекущиеДанныеДерева.Объект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПодчиненности(Команда)
	
	ТекущиеДанныеДерева = Элементы.ДеревоРаспределенияСуммыПлатежа.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено
		ИЛИ ТипЗнч(ТекущиеДанныеДерева.Объект) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		ИЛИ ТипЗнч(ТекущиеДанныеДерева.Объект) = Тип("Строка") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Выберите документ'"));
	Иначе
		ОткрытьФорму("ОбщаяФорма.ФормаСтруктурыПодчиненности",Новый Структура("ДокументСсылка", ТекущиеДанныеДерева.Объект),
				ЭтотОбъект,
				УникальныйИдентификатор,
				);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРаспределенияСуммыПлатежаЗачитываемАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	ТекущиеДанныеДерева = Элементы.ДеревоРаспределенияСуммыПлатежа.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Зачесть = Мин(КРаспределению, ТекущиеДанныеДерева.ОжидаетОплаты);
	
	Если Зачесть > 0 Тогда
		Элемент.СписокВыбора.Добавить(Зачесть, ""+Зачесть+" "+ПредставлениеВалютыДокумента);
	КонецЕсли;
	
	Если ТекущиеДанныеДерева.СуммаПлатежаКартинка = 0 Тогда
		Если ТекущиеДанныеДерева.СуммаПлатежа > 0 Тогда
			Элемент.СписокВыбора.Добавить("РаспределитьСуммаПлатежа", НСтр("ru = 'Разнести '")+ТекущиеДанныеДерева.СуммаПлатежа+" "+ПредставлениеВалютыДокумента+НСтр("ru = ' на строки ниже'"));
		ИначеЕсли Зачесть > 0 Тогда
			Элемент.СписокВыбора.Добавить("РаспределитьЗачесть", НСтр("ru = 'Разнести '")+Зачесть+" "+ПредставлениеВалютыДокумента+НСтр("ru = ' на строки ниже'"));
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеДерева.ОжидаетОплаты > 0 Тогда
		Элемент.СписокВыбора.Добавить(ТекущиеДанныеДерева.ОжидаетОплаты, НСтр("ru = 'Ожидает оплаты: '")+ТекущиеДанныеДерева.ОжидаетОплаты+" "+ПредставлениеВалютыДокумента);
	КонецЕсли;
	
	Если ОсталосьРаспределить > 0 Тогда
		Элемент.СписокВыбора.Добавить("РаспределитьОсталосьРаспределить", НСтр("ru = 'Осталось распределить: '")+ОсталосьРаспределить+" "+ПредставлениеВалютыДокумента);
	КонецЕсли;
	
	Если Элемент.СписокВыбора.Количество() = 0 Тогда
		Элемент.СписокВыбора.Добавить(ТекущиеДанныеДерева.СуммаПлатежа, НСтр("ru = 'Нет данных для заполнения'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьСуммуПлатежаРекурсивно(СтрокаРодитель, СуммаКРаспределению, ОбрабатыватьДолги, ОбнулятьСуммуПодчиненных, ПервыйПроходПриЗачетеПредоплаты = Ложь, НакопленнаяСумма = 0)
	
	Если СтрокаРодитель = Неопределено Тогда
		СтрокиДляРаспределения = ДеревоРаспределенияСуммыПлатежа.ПолучитьЭлементы();
	Иначе
		СтрокиДляРаспределения = СтрокаРодитель.ПолучитьЭлементы();
		Если ОбнулятьСуммуПодчиненных Тогда
			СтрокаРодитель.СуммаПлатежаВПодчиненныхСтроках = 0;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из СтрокиДляРаспределения Цикл
		Если ТекущаяСтрока.ДокументНеОбрабатывается Тогда
			Продолжить;
		КонецЕсли;
		Если ЭтоЗачетПредоплаты
			И ПервыйПроходПриЗачетеПредоплаты
			И ТекущаяСтрока.ЭтоЗаказ
			И НЕ ЗначениеЗаполнено(ТекущаяСтрока.Заказ) Тогда
			Продолжить;
		ИначеЕсли ЭтоЗачетПредоплаты
			И НЕ ПервыйПроходПриЗачетеПредоплаты
			И ТекущаяСтрока.ЭтоЗаказ
			И ЗначениеЗаполнено(ТекущаяСтрока.Заказ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяСтрока.ЭтоДоговор И (ВестиРасчетыПоДокументам ИЛИ ВестиРасчетыПоЗаказам) Тогда
			// Если несколько договоров, то нужно учитывать сумму, которую осталось распределить по конкретному договору.
			Если НужноРазноситьПоДоговорам Тогда
				вСуммаКРаспределению = Мин(ТекущаяСтрока.ОжидаетОплаты, СуммаКРаспределению);
			Иначе
				вСуммаКРаспределению = СуммаКРаспределению;
			КонецЕсли;
			РаспределитьСуммуПлатежаРекурсивно(ТекущаяСтрока, вСуммаКРаспределению, ОбрабатыватьДолги, ОбнулятьСуммуПодчиненных, ПервыйПроходПриЗачетеПредоплаты, НакопленнаяСумма);
			Продолжить;
		ИначеЕсли ЭтоЗачетПредоплаты
			И ТекущаяСтрока.ЭтоЗаказ Тогда
			// Когда Помощник вызывается из накладных сначала обрабатываются строки с заказами (берем МИНИМУМ общего остатка
			// распределения остатка в строке. А на втором проходе выполняем распределение только по строкам, в которых заказ не выбран.
			// При этом анализируем общий остаток, т.к. можно зачесть оплату без заказа под отгрузку по заказу!
			Если ПервыйПроходПриЗачетеПредоплаты Тогда
				вСуммаКРаспределению = Мин(ТекущаяСтрока.ОжидаетОплаты, СуммаКРаспределению);
			Иначе
				вСуммаКРаспределению = СуммаКРаспределению;
			КонецЕсли;
			РаспределитьСуммуПлатежаРекурсивно(ТекущаяСтрока, вСуммаКРаспределению, ОбрабатыватьДолги, ОбнулятьСуммуПодчиненных, ПервыйПроходПриЗачетеПредоплаты, НакопленнаяСумма);
			СуммаКРаспределению = СуммаКРаспределению - НакопленнаяСумма;
			Если ВестиРасчетыПоДокументам Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли ТекущаяСтрока.СуммаПлатежа <> 0 Тогда
			РаспределитьСуммуПлатежаРекурсивно(ТекущаяСтрока, СуммаКРаспределению, ОбрабатыватьДолги, ОбнулятьСуммуПодчиненных, ПервыйПроходПриЗачетеПредоплаты, НакопленнаяСумма);
			Если СтрокаРодитель <> Неопределено Тогда
				СтрокаРодитель.СуммаПлатежаВПодчиненныхСтроках = СтрокаРодитель.СуммаПлатежаВПодчиненныхСтроках
						+ ТекущаяСтрока.СуммаПлатежа
						+ ТекущаяСтрока.СуммаПлатежаВПодчиненныхСтроках
					;
			КонецЕсли;
			Продолжить;
		ИначеЕсли ТекущаяСтрока.ПризнакАванса И ОбрабатыватьДолги Тогда
			РаспределитьСуммуПлатежаРекурсивно(ТекущаяСтрока, СуммаКРаспределению, ОбрабатыватьДолги, ОбнулятьСуммуПодчиненных, ПервыйПроходПриЗачетеПредоплаты, НакопленнаяСумма);
			Продолжить;
		ИначеЕсли НЕ ТекущаяСтрока.ПризнакАванса И НЕ ОбрабатыватьДолги Тогда
			РаспределитьСуммуПлатежаРекурсивно(ТекущаяСтрока, СуммаКРаспределению, ОбрабатыватьДолги, ОбнулятьСуммуПодчиненных, ПервыйПроходПриЗачетеПредоплаты, НакопленнаяСумма);
			Продолжить;
		КонецЕсли;
		
		РаспределитьСуммуПлатежаРекурсивно(ТекущаяСтрока, СуммаКРаспределению, ОбрабатыватьДолги, ОбнулятьСуммуПодчиненных, ПервыйПроходПриЗачетеПредоплаты, НакопленнаяСумма);
		
		ИстинаИзменятьСуммуРасчетовВместоКурса = Истина;
		Если СтрокаРодитель <> Неопределено Тогда
			МожноРаспределить = ТекущаяСтрока.ОжидаетОплаты - ТекущаяСтрока.СуммаПлатежаВПодчиненныхСтроках;
			Если НЕ ЭтоЗачетПредоплаты И СтрокаРодитель.ЭтоЗаказ И ЗначениеЗаполнено(СтрокаРодитель.Заказ) Тогда
				МожноРаспределить = Мин(МожноРаспределить, СтрокаРодитель.ОжидаетОплаты);
			КонецЕсли;
		Иначе
			МожноРаспределить = ТекущаяСтрока.ОжидаетОплаты;
		КонецЕсли;
		Если МожноРаспределить > 0 Тогда
			Если СуммаДокументаРавнаНулю ИЛИ СуммаКРаспределению > МожноРаспределить Тогда
				ТекущаяСтрока.СуммаПлатежа = МожноРаспределить;
				ПриИзмененииСуммыПлатежа(Неопределено, ТекущаяСтрока.ПолучитьИдентификатор(), ИстинаИзменятьСуммуРасчетовВместоКурса);
				
				Если НЕ СуммаДокументаРавнаНулю Тогда
					СуммаКРаспределению = СуммаКРаспределению - МожноРаспределить;
				КонецЕсли;
			ИначеЕсли ТекущаяСтрока.ОжидаетОплаты > 0 Тогда
				ТекущаяСтрока.СуммаПлатежа = СуммаКРаспределению;
				ПриИзмененииСуммыПлатежа(Неопределено, ТекущаяСтрока.ПолучитьИдентификатор(), ИстинаИзменятьСуммуРасчетовВместоКурса);
				
				СуммаКРаспределению = 0;
			Иначе
				ТекущаяСтрока.СуммаПлатежа = 0;
			КонецЕсли;
			
			НакопленнаяСумма = НакопленнаяСумма + ТекущаяСтрока.СуммаПлатежа;
			
			Если СтрокаРодитель <> Неопределено Тогда
				СтрокаРодитель.СуммаПлатежаВПодчиненныхСтроках = СтрокаРодитель.СуммаПлатежаВПодчиненныхСтроках
					+ ТекущаяСтрока.СуммаПлатежа
					+ ТекущаяСтрока.СуммаПлатежаВПодчиненныхСтроках
				;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ СуммаДокументаРавнаНулю И СуммаКРаспределению = 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьСуммуПлатежаОбновитьТаблицу(ТекущиеДанныеДерева, СуммаКРаспределению, ВыбранныйЭлементПодменю)
	
	РаспределитьСуммуПлатежа(ТекущиеДанныеДерева, СуммаКРаспределению, ВыбранныйЭлементПодменю);
	ОбновитьТаблицуРаспределенияПоДереву();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьСуммуПлатежа(ТекущиеДанныеДерева, СуммаКРаспределению, ВыбранныйЭлементПодменю);
	
	Если ВыбранныйЭлементПодменю = "Обнулить" Тогда
		СброситьВсеФлаги(Неопределено);
		Возврат;
	КонецЕсли;
	
	Если ЭтоЗачетПредоплаты Тогда
		// Когда Помощник вызывается из накладных сначала обрабатываются строки с заказами (берем МИНИМУМ общего остатка
		// распределения остатка в строке. А на втором проходе выполняем распределение только по строкам, в которых заказ не выбран.
		// При этом анализируем общий остаток, т.к. можно зачесть оплату без заказа под отгрузку по заказу!
		ИстинаОбрабатыватьДолги = Истина;
		РаспределитьСуммуПлатежаРекурсивно(ТекущиеДанныеДерева, СуммаКРаспределению, ИстинаОбрабатыватьДолги, Истина, Истина);
		Если СуммаКРаспределению > 0 Тогда
			РаспределитьСуммуПлатежаРекурсивно(ТекущиеДанныеДерева, СуммаКРаспределению, ИстинаОбрабатыватьДолги, Истина, Ложь);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлементПодменю = "ДолгиИЗаказы" ИЛИ ВыбранныйЭлементПодменю = "Долги" Тогда
		ИстинаОбрабатыватьДолги = Истина;
		РаспределитьСуммуПлатежаРекурсивно(ТекущиеДанныеДерева, СуммаКРаспределению, ИстинаОбрабатыватьДолги, Истина);
	КонецЕсли;
	
	Если (ВыбранныйЭлементПодменю = "ДолгиИЗаказы" ИЛИ ВыбранныйЭлементПодменю = "Заказы") И (СуммаКРаспределению > 0 ИЛИ СуммаДокументаРавнаНулю) Тогда
		ЛожьОбрабатыватьДолги = Ложь;
		РаспределитьСуммуПлатежаРекурсивно(ТекущиеДанныеДерева, СуммаКРаспределению, ЛожьОбрабатыватьДолги, ВыбранныйЭлементПодменю = "Заказы");
	КонецЕсли;
	
	Если СуммаКРаспределению > 0 И НЕ СуммаДокументаРавнаНулю И НЕ ЭтоЗачетПредоплаты Тогда
		// Оставшуюся сумму отнесем к Авто по основному договору или по 1-му договору, если основной не установлен.
		
		ТекущаяСтрокаАвто = Неопределено;
		СтрокаРодитель = Неопределено;
		
		ЭлементыВерхнегоУровня = ДеревоРаспределенияСуммыПлатежа.ПолучитьЭлементы();
		Если ВестиРасчетыПоДоговорам Тогда
			Для Каждого ТекущийЭлементВерхнегоУровня Из ЭлементыВерхнегоУровня Цикл
				ЭлементыУровня1 = ТекущийЭлементВерхнегоУровня.ПолучитьЭлементы();
				Для Каждого ТекущийЭлементДерева Из ЭлементыУровня1 Цикл
					Если ТекущийЭлементДерева.ЭтоАвто Тогда
						СтрокаРодитель = ТекущийЭлементВерхнегоУровня;
						ТекущаяСтрокаАвто = ТекущийЭлементДерева;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЦикла;
		Иначе
			Для Каждого ТекущийЭлементДерева Из ЭлементыВерхнегоУровня Цикл
				Если ТекущийЭлементДерева.ЭтоАвто Тогда
					ТекущаяСтрокаАвто = ТекущийЭлементДерева;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ТекущаяСтрокаАвто <> Неопределено Тогда
			ТекущаяСтрокаАвто.СуммаПлатежа = СуммаКРаспределению;
			ИстинаИзменятьСуммуРасчетовВместоКурса = Истина;
			ПриИзмененииСуммыПлатежа(Неопределено, ТекущаяСтрокаАвто.ПолучитьИдентификатор(), ИстинаИзменятьСуммуРасчетовВместоКурса);
			СуммаКРаспределению = 0;
			
			Если СтрокаРодитель <> Неопределено Тогда
				СтрокаРодитель.СуммаПлатежаВПодчиненныхСтроках = СтрокаРодитель.СуммаПлатежаВПодчиненныхСтроках
					+ ТекущаяСтрокаАвто.СуммаПлатежа
				;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРаспределенияСуммыПлатежаЗачитываемОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = "РаспределитьСуммаПлатежа"
		Или ВыбранноеЗначение = "РаспределитьЗачесть" Тогда
		
		ТекущиеДанныеДерева = Элементы.ДеревоРаспределенияСуммыПлатежа.ТекущиеДанные;
		Если ТекущиеДанныеДерева = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Зачесть = Мин(КРаспределению, ТекущиеДанныеДерева.ОжидаетОплаты);
		СуммаКРаспределению = ?(ВыбранноеЗначение = "РаспределитьСуммаПлатежа", ТекущиеДанныеДерева.СуммаПлатежа, Зачесть);
		
		РаспределитьСуммуПлатежаОбновитьТаблицу(ТекущиеДанныеДерева, СуммаКРаспределению, "Долги");
		
		ТекущиеДанныеДерева.СуммаПлатежа = СуммаКРаспределению;
		ПриИзмененииСуммыПлатежа(Неопределено, ТекущиеДанныеДерева.ПолучитьИдентификатор());
		
	ИначеЕсли ВыбранноеЗначение = "РаспределитьОсталосьРаспределить" Тогда
		
		ТекущиеДанныеДерева = Элементы.ДеревоРаспределенияСуммыПлатежа.ТекущиеДанные;
		Если ТекущиеДанныеДерева = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанныеДерева.СуммаПлатежа = ОсталосьРаспределить;
		ПриИзмененииСуммыПлатежа(Неопределено, ТекущиеДанныеДерева.ПолучитьИдентификатор());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеГруппы(Команда)
	
	СтрокиВерхнегоУровня = ДеревоРаспределенияСуммыПлатежа.ПолучитьЭлементы();
	
	Для Каждого СтрокаВерхнегоУровня Из СтрокиВерхнегоУровня Цикл
		Элементы.ДеревоРаспределенияСуммыПлатежа.Развернуть(СтрокаВерхнегоУровня.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсеГруппыРекурсивно(СтрокаРодитель)
	
	ПодчиненныеСтроки = СтрокаРодитель.ПолучитьЭлементы();
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		СвернутьВсеГруппыРекурсивно(ПодчиненнаяСтрока);
		Элементы.ДеревоРаспределенияСуммыПлатежа.Свернуть(ПодчиненнаяСтрока.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсеГруппы(Команда)
	
	СвернутьВсеГруппыРекурсивно(ДеревоРаспределенияСуммыПлатежа);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьОстаток(Команда)
	
	Если ЭтоЗачетПредоплаты Тогда
		РаспределитьОстатокЗачестьПредоплату("Долги");
	Иначе
		
		Список = Новый СписокЗначений;
		Список.Добавить("ДолгиИЗаказы", ?(СуммаДокументаРавнаНулю, НСтр("ru = 'по долгам и неоплаченным заказам'"), НСтр("ru = 'на долги и неоплаченные заказы'")));
		Список.Добавить("Долги", ?(СуммаДокументаРавнаНулю, НСтр("ru = 'по долгам'"), НСтр("ru = 'на долги'")));
		Список.Добавить("Заказы", ?(СуммаДокументаРавнаНулю, НСтр("ru = 'по неоплаченным заказам'"), НСтр("ru = 'на неоплаченные заказы'")));
		Список.Добавить("Обнулить", НСтр("ru = 'обнулить распределение во всех строках'"),, БиблиотекаКартинок.СнятьФлажки);
		
		Оповещение = Новый ОписаниеОповещения("РаспределитьОстатокПослеВыбораИзМеню", ЭтотОбъект, Параметры);
		ПоказатьВыборИзМеню(Оповещение, Список, Элементы.РаспределитьОстаток);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьОстатокЗачестьПредоплату(пЭлементПодменю)
	
	Если ОсталосьРаспределить = 0 Тогда
		// Заново все перезачитываем.
		СброситьВсеФлаги(Неопределено);
		СуммаКРаспределению = КРаспределению;
	Иначе
		СуммаКРаспределению = ОсталосьРаспределить;
	КонецЕсли;
	
	РаспределитьСуммуПлатежаОбновитьТаблицу(Неопределено, СуммаКРаспределению, пЭлементПодменю);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьОстатокЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		//
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьОстатокПослеВыбораИзМеню(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		РаспределитьОстатокЗачестьПредоплату(ВыбранныйЭлемент.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазнестиНаКлиенте(ВыбранныйЭлементПодменю)
	
	Если ОсталосьРаспределить = 0 Тогда
		// Заново все перезачитываем.
		СброситьВсеФлаги(Неопределено);
		СуммаКРаспределению = КРаспределению;
	Иначе
		СуммаКРаспределению = ОсталосьРаспределить;
	КонецЕсли;
	
	РаспределитьСуммуПлатежаОбновитьТаблицу(Неопределено, СуммаКРаспределению, ВыбранныйЭлементПодменю);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРаспределенияСуммыПлатежаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Договор", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	РазвернутьВсеГруппы(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеЗаказаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СостояниеЗаказа", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	РазвернутьВсеГруппы(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Ответственный", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	РазвернутьВсеГруппы(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборАвторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Автор", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	РазвернутьВсеГруппы(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ОбновитьДеревоСУчетомОтборов();
	РазвернутьВсеГруппы(Неопределено);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруОтборов()
	
	МассивДоговоров = Новый Массив;
	Для Каждого СтрокаОтбора Из ДанныеМеток Цикл
		Если СтрокаОтбора.ИмяПоляОтбора = "Договор" Тогда
			МассивДоговоров.Добавить(СтрокаОтбора.Метка);
		КонецЕсли;
	КонецЦикла;
	МассивСостоянийЗаказа = Новый Массив;
	Для Каждого СтрокаОтбора Из ДанныеМеток Цикл
		Если СтрокаОтбора.ИмяПоляОтбора = "СостояниеЗаказа" Тогда
			МассивСостоянийЗаказа.Добавить(СтрокаОтбора.Метка);
		КонецЕсли;
	КонецЦикла;
	МассивОтветственных = Новый Массив;
	Для Каждого СтрокаОтбора Из ДанныеМеток Цикл
		Если СтрокаОтбора.ИмяПоляОтбора = "Ответственный" Тогда
			МассивОтветственных.Добавить(СтрокаОтбора.Метка);
		КонецЕсли;
	КонецЦикла;
	МассивАвторов = Новый Массив;
	Для Каждого СтрокаОтбора Из ДанныеМеток Цикл
		Если СтрокаОтбора.ИмяПоляОтбора = "Автор" Тогда
			МассивАвторов.Добавить(СтрокаОтбора.Метка);
		КонецЕсли;
	КонецЦикла;
	ЕстьОтборы = МассивДоговоров.Количество() > 0
		ИЛИ МассивСостоянийЗаказа.Количество() > 0
		ИЛИ МассивОтветственных.Количество() > 0
		ИЛИ МассивАвторов.Количество() > 0
		ИЛИ (НЕ ПустаяСтрока(ОтборНеПоказыватьДокументыПослеТекущего) И СокрЛП(ОтборНеПоказыватьДокументыПослеТекущего) <> НСтр("ru = 'Показывать все документы'"))
		ИЛИ ОтборПериод.ДатаНачала <> '00010101'
		ИЛИ ОтборПериод.ДатаОкончания <> '00010101'
	;
	
	СтруктураОтборов = Новый Структура();
	СтруктураОтборов.Вставить("МассивДоговоров", МассивДоговоров);
	СтруктураОтборов.Вставить("МассивСостоянийЗаказа", МассивСостоянийЗаказа);
	СтруктураОтборов.Вставить("МассивОтветственных", МассивОтветственных);
	СтруктураОтборов.Вставить("МассивАвторов", МассивАвторов);
	СтруктураОтборов.Вставить("ЕстьОтборы", ЕстьОтборы);
	
	Возврат СтруктураОтборов;
	
КонецФункции

&НаСервере
Процедура ОбновитьДеревоСУчетомОтборов()
	
	ИскомоеЗначение = "" + ЭтаФорма.СтрокаПоиска;
	
	СтруктураОтборов = ПолучитьСтруктуруОтборов();
	
	Если ПустаяСтрока(ИскомоеЗначение) И НЕ СтруктураОтборов.ЕстьОтборы Тогда
		//Элементы.ТаблицаРаспределенияСуммыПлатежа.ОтборСтрок = Неопределено;
		ЗаполнитьДеревоПоТаблице(СтруктураОтборов.ЕстьОтборы);
		//РазвернутьВсеГруппы(Неопределено);
	ИначеЕсли ПустаяСтрока(ИскомоеЗначение) И СтруктураОтборов.ЕстьОтборы Тогда
		Для Каждого ДанныеСтроки Из ТаблицаРаспределенияСуммыПлатежа Цикл
			ДанныеСтроки.Отбор = Истина;
			УстановитьОтборВСтроке(ДанныеСтроки, СтруктураОтборов);
		КонецЦикла;
		//Элементы.ТаблицаРаспределенияСуммыПлатежа.ОтборСтрок = Новый ФиксированнаяСтруктура("Отбор", Истина);
		ЗаполнитьДеревоПоТаблице(СтруктураОтборов.ЕстьОтборы);
	Иначе
		МассивПоиска =  ПолучитьМассивПоискаНаСервере(СтрЗаменить(ИскомоеЗначение, ".", ","));
		Если МассивПоиска.Количество() = 0 Тогда
			//Элементы.ТаблицаРаспределенияСуммыПлатежа.ОтборСтрок = Неопределено;
		Иначе
			Для Каждого ДанныеСтроки Из ТаблицаРаспределенияСуммыПлатежа Цикл
				ТекстПоиска = СтрЗаменить(ВРЕГ(""+
				ДанныеСтроки.Объект + " "+
				ДанныеСтроки.Заказ + " " +
				ДанныеСтроки.Документ + " "+
				ДанныеСтроки.СчетНаОплату + " "+
				ДанныеСтроки.Договор + " "+
				ДанныеСтроки.СтатьяДДС + " "+
				ДанныеСтроки.Автор + " "+
				ДанныеСтроки.Ответственный + " "+
				ДанныеСтроки.ДокументПланирования + " "+
				Формат(ДанныеСтроки.СуммаДокумента, "ЧДЦ=2; ЧРД=,; ЧГ=") + " "+
				""), ".", ",");
				
				ДанныеСтроки.Отбор = Истина;
				Для Каждого ПараПоиска Из МассивПоиска Цикл
					Если Найти(ТекстПоиска, ПараПоиска.ИсходноеЗначение) + Найти(ТекстПоиска, ПараПоиска.ИнвертированноеЗначение) = 0 Тогда
						ДанныеСтроки.Отбор = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если СтруктураОтборов.ЕстьОтборы Тогда
					УстановитьОтборВСтроке(ДанныеСтроки, СтруктураОтборов);
				КонецЕсли;
			КонецЦикла;
			//Элементы.ТаблицаРаспределенияСуммыПлатежа.ОтборСтрок = Новый ФиксированнаяСтруктура("Отбор", Истина);
			
			ЗаполнитьДеревоПоРезультатуПоиска();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборВСтроке(ДанныеСтроки, СтруктураОтборов)
	
	Если СтруктураОтборов.МассивДоговоров.Количество() > 0 Тогда
		Если СтруктураОтборов.МассивДоговоров.Найти(ДанныеСтроки.Договор) = Неопределено Тогда
			ДанныеСтроки.Отбор = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если СтруктураОтборов.МассивСостоянийЗаказа.Количество() > 0 Тогда
		Если СтруктураОтборов.МассивСостоянийЗаказа.Найти(ДанныеСтроки.СостояниеЗаказа) = Неопределено Тогда
			ДанныеСтроки.Отбор = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если СтруктураОтборов.МассивОтветственных.Количество() > 0 Тогда
		Если СтруктураОтборов.МассивОтветственных.Найти(ДанныеСтроки.Ответственный) = Неопределено Тогда
			ДанныеСтроки.Отбор = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если СтруктураОтборов.МассивАвторов.Количество() > 0 Тогда
		Если СтруктураОтборов.МассивАвторов.Найти(ДанныеСтроки.Автор) = Неопределено Тогда
			ДанныеСтроки.Отбор = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если (НЕ ПустаяСтрока(ОтборНеПоказыватьДокументыПослеТекущего) И СокрЛП(ОтборНеПоказыватьДокументыПослеТекущего) <> НСтр("ru = 'Показывать все документы'")) Тогда
		
		Если ДанныеСтроки.ДокументПозжеТекущего
			И НЕ ДанныеСтроки.ЭтоСуществующийЗачет
			И СокрЛП(ОтборНеПоказыватьДокументыПослеТекущего) = НСтр("ru = 'Не показывать документы позже текущего'") Тогда
			
			ДанныеСтроки.Отбор = Ложь;
			
		КонецЕсли;
		
		Если НЕ ДанныеСтроки.ЭтоСуществующийЗачет И СокрЛП(ОтборНеПоказыватьДокументыПослеТекущего) = НСтр("ru = 'Показывать только связанные документы'") Тогда
			ДанныеСтроки.Отбор = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	Если ОтборПериод.ДатаНачала <> '00010101' ИЛИ ОтборПериод.ДатаОкончания <> '00010101' Тогда
		ДатаДокументаСоответствуетОтбору = (ОтборПериод.ДатаНачала = '00010101'  ИЛИ  ДанныеСтроки.ДатаОбъекта >= ОтборПериод.ДатаНачала)
							И
							 (ОтборПериод.ДатаОкончания = '00010101' ИЛИ ДанныеСтроки.ДатаОбъекта <= ОтборПериод.ДатаОкончания)
		;
		Если НЕ ДатаДокументаСоответствуетОтбору Тогда
			ДанныеСтроки.Отбор = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСДеревом

&НаСервере
Процедура ЗаполнитьДеревоПоРезультатуПоиска()
	
	// 1. Очистим дерево.
	ЭлементыДерева = ДеревоРаспределенияСуммыПлатежа.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	// 2. Заполним его данным о поиске.
	Для Каждого ТекущаяСтрокаТаблицы Из ТаблицаРаспределенияСуммыПлатежа Цикл
		Если Не ТекущаяСтрокаТаблицы.Отбор Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаДерева = ЭлементыДерева.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, ТекущаяСтрокаТаблицы);
		НоваяСтрокаДерева.ИдентификаторСтрокиТаблицы = ТекущаяСтрокаТаблицы.ПолучитьИдентификатор();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПоТаблице(ЕстьОтборы)
	
	// Сначала очистим дерево.
	ДеревоРаспределенияСуммыПлатежа.ПолучитьЭлементы().Очистить();
	
	ТаблицаДляЗаполненияДерева = ТаблицаРаспределенияСуммыПлатежа.Выгрузить().СкопироватьКолонки();
	ТаблицаДляЗаполненияДерева.Колонки.Добавить("ИдентификаторДляДерева", Новый ОписаниеТипов("Число"));
	
	Если Ложь Тогда
		ТаблицаДляЗаполненияДерева = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрокаТаблицы Из ТаблицаРаспределенияСуммыПлатежа Цикл
		
		НоваяСтрока = ТаблицаДляЗаполненияДерева.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрокаТаблицы);
		НоваяСтрока.ИдентификаторДляДерева = ТекущаяСтрокаТаблицы.ПолучитьИдентификатор();
		
	КонецЦикла;
	
	ТаблицаДляЗаполненияДерева.Индексы.Добавить("Ключ, КлючРодителя");
	ТаблицаДляЗаполненияДерева.Сортировать("КлючРодителя, Ключ");
	//ТаблицаДляЗаполненияДерева.Колонки.Добавить("Обработана", Новый ОписаниеТипов("Булево"));
	
	ЭлементыУровня0 = ДеревоРаспределенияСуммыПлатежа.ПолучитьЭлементы();
	Сч = 0;
	СтрокиУровня0 = ТаблицаДляЗаполненияДерева.НайтиСтроки(Новый Структура("КлючРодителя", 0));
	Для Каждого ТекущаяСтрока Из СтрокиУровня0 Цикл
		Если ЕстьОтборы И НЕ ТекущаяСтрока.Отбор Тогда
			Продолжить;
		КонецЕсли;
		ТекущаяСтрока.Обработана = Истина;
		НоваяСтрокаДерева = ЭлементыУровня0.Добавить();
		ЗаполнитьСтрокуДерева(НоваяСтрокаДерева, ТекущаяСтрока, ТекущаяСтрока.ИдентификаторДляДерева);
		
		ДобавитьПодчиненныеСтрокиДереваРекурсивно(НоваяСтрокаДерева, ТаблицаДляЗаполненияДерева, ЕстьОтборы);
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из ТаблицаДляЗаполненияДерева Цикл
		Если НЕ ТекущаяСтрока.Обработана Тогда
			Если ЕстьОтборы И НЕ ТекущаяСтрока.Отбор Тогда
				Продолжить;
			КонецЕсли;
			
			// Даже если не нашли владельца, данные всё равно нужно отобразить.
			НоваяСтрокаДерева = ЭлементыУровня0.Добавить();
			ЗаполнитьСтрокуДерева(НоваяСтрокаДерева, ТекущаяСтрока, ТекущаяСтрока.ИдентификаторДляДерева);
			
			ДобавитьПодчиненныеСтрокиДереваРекурсивно(НоваяСтрокаДерева, ТаблицаДляЗаполненияДерева, ЕстьОтборы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПодчиненныеСтрокиДереваРекурсивно(СтрокаРодитель, ТаблицаДляЗаполненияДерева, ЕстьОтборы) Экспорт

	Если СтрокаРодитель.Ключ = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПодчиненныеСтроки = ТаблицаДляЗаполненияДерева.НайтиСтроки(Новый Структура("КлючРодителя", СтрокаРодитель.Ключ));
	Если ПодчиненныеСтроки.Количество() > 0 Тогда
		РодительЭлементы = СтрокаРодитель.ПолучитьЭлементы();
		Для Каждого ТекущаяСтрока Из ПодчиненныеСтроки Цикл
			Если ЕстьОтборы И НЕ ТекущаяСтрока.Отбор Тогда
				Продолжить;
			КонецЕсли;
			Если ТекущаяСтрока.Обработана Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяСтрока.Обработана = Истина;
			НоваяСтрокаДерева = РодительЭлементы.Добавить();
			
			ЗаполнитьСтрокуДерева(НоваяСтрокаДерева, ТекущаяСтрока, ТекущаяСтрока.ИдентификаторДляДерева);
			
			ДобавитьПодчиненныеСтрокиДереваРекурсивно(НоваяСтрокаДерева, ТаблицаДляЗаполненияДерева, ЕстьОтборы);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуДерева(НоваяСтрокаДерева, ТекущаяСтрока, ИдентификаторДляДерева = Неопределено)
	
	ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, ТекущаяСтрока);
	Если ИдентификаторДляДерева = Неопределено Тогда
		НоваяСтрокаДерева.ИдентификаторСтрокиТаблицы = ТекущаяСтрока.ПолучитьИдентификатор();
	Иначе
		НоваяСтрокаДерева.ИдентификаторСтрокиТаблицы = ИдентификаторДляДерева;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МеткиОтборов

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="", ОбновитьДерево = Истина)
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	Если ОбновитьДерево Тогда
		ОбновитьДеревоСУчетомОтборов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	УдалитьМеткуОтбора(МеткаИД);
	РазвернутьВсеГруппы(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	УстановитьНовыйОтборЛожь = Ложь;
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Неопределено, МеткаИД,,, УстановитьНовыйОтборЛожь);
	ОбновитьДеревоСУчетомОтборов();

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураИменЭлементов = Новый Структура;
	СтруктураИменЭлементов.Вставить("ПредставлениеПериода", "ПредставлениеПериода");
	СтруктураИменЭлементов.Вставить("ОтборПериод", "ОтборПериод");
	СтруктураИменЭлементов.Вставить("СобытиеОповещения", "ОбработатьВыборПериода_"+УникальныйИдентификатор);
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, "Список", "Дата", СтруктураИменЭлементов, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНеПоказыватьДокументыПослеТекущегоПриИзменении(Элемент)
	
	ОбновитьДеревоСУчетомОтборов();
	РазвернутьВсеГруппы(Неопределено);
	Если ЭтоМобильныйКлиент Тогда
		УстановитьЗаголовокПравойПанелиМобильныйКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбработатьВыборПериода_"+УникальныйИдентификатор Тогда
		ОбновитьДеревоСУчетомОтборов();
		РазвернутьВсеГруппы(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРаспределенияСуммыПлатежаСчетНаОплатуАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	ТекущиеДанныеДерева = Элементы.ДеревоРаспределенияСуммыПлатежа.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанныеДерева.ПолеГруппировки = "Заказ" Тогда
		СтруктураДляОтбора = Новый Структура(ТекущиеДанныеДерева.ПолеГруппировки, ТекущиеДанныеДерева.Заказ);
	Иначе
		СтруктураДляОтбора = Новый Структура(ТекущиеДанныеДерева.ПолеГруппировки, ТекущиеДанныеДерева.Документ);
	КонецЕсли;
	НайденныеСтроки = ДанныеОСчетахНаОплату.НайтиСтроки(СтруктураДляОтбора);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Элемент.СписокВыбора.Добавить(НайденнаяСтрока.СчетНаОплату, "" + НайденнаяСтрока.СчетНаОплату +
			" ("+НайденнаяСтрока.СуммаДокумента+" "+НайденнаяСтрока.ВалютаДокументаСимвольноеПредставление+")"
		);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРаспределенияСуммыПлатежаСчетНаОплатуПриИзменении(Элемент)
	
	ТекущаяСтрокаДерева = Элементы.ДеревоРаспределенияСуммыПлатежа.ТекущиеДанные;
	Если ТекущаяСтрокаДерева <> Неопределено И ЗначениеЗаполнено(ТекущаяСтрокаДерева.СчетНаОплату) Тогда
		ТекущаяСтрокаДерева.ВыводитьСчетаСерымЦветом = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СброситьВсеФлаги(Команда)
	
	Для Каждого ТекущаяСтрока Из ТаблицаРаспределенияСуммыПлатежа Цикл
		
		ТекущаяСтрока.Выбран = Ложь;
		ТекущаяСтрока.СуммаРасчетов = 0;
		ТекущаяСтрока.СуммаПлатежа = 0;
		ТекущаяСтрока.СуммаПлатежаПредыдущееЗначение = 0;
		Если ТекущаяСтрока.ПолеГруппировки = "Заказ" И ЭтоЗачетПредоплаты
			ИЛИ ТекущаяСтрока.ПолеГруппировки = "Договор" И НЕ ЭтоЗачетПредоплаты Тогда
			ТекущаяСтрока.ОжидаетОплаты = ТекущаяСтрока.ОжидаетОплатыИсходноеЗначение;
		КонецЕсли;
		
		Распределено = 0;
		Если СуммаДокументаРавнаНулю Тогда
			ОсталосьРаспределить = 0;
			КРаспределению = 0;
		Иначе
			КРаспределению = КРаспределениюИсходноеЗначение;
			ОсталосьРаспределить = КРаспределению;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураОтборов = ПолучитьСтруктуруОтборов();
	ЗаполнитьДеревоПоТаблице(СтруктураОтборов.ЕстьОтборы);
	РазвернутьВсеГруппы(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВсеФлагиРекурсивно(ЭлементРодитель)
	
	Если ЭлементРодитель.Выбран Тогда
		ЭлементРодитель.Выбран = Ложь;
		ОбработатьИзмененияФлагаВыбран(ЭлементРодитель);
	КонецЕсли;
	ЭлементРодитель.СуммаПлатежаВПодчиненныхСтроках = 0;
	
	Для Каждого ТекущийЭлементДерева Из ЭлементРодитель.ПолучитьЭлементы() Цикл
		СброситьВсеФлагиРекурсивно(ТекущийЭлементДерева);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСоставДокументаПриИзменении(Элемент)
	
	Элементы.СоставДокумента.Видимость = ПоказыватьСоставДокумента;
	ОбработатьАктивизациюСтрокиДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРаспределенияСуммыПлатежаПриИзменении(Элемент)
	
	ТекущаяСтрокаДерева = Элементы.ДеревоРаспределенияСуммыПлатежа.ТекущиеДанные;
	Если ТекущаяСтрокаДерева <> Неопределено Тогда
		ОбновитьСтрокуТаблицыПоСтрокеДереваНаКлиенте(ТекущаяСтрокаДерева);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазнестиПоДолгамИНеоплаченнымЗаказам(Команда)
	
	РазнестиНаКлиенте("ДолгиИЗаказы");
	
КонецПроцедуры

&НаКлиенте
Процедура РазнестиПоДолгам(Команда)
	
	РазнестиНаКлиенте("Долги");
	
КонецПроцедуры

&НаКлиенте
Процедура РазнестиПоЗаказам(Команда)
	
	РазнестиНаКлиенте("Заказы");
	
КонецПроцедуры

#Область ПоискВТаблицеЗначений

&НаКлиенте
Функция ИнвертироватьСтрокуНаКлиенте(Строка) Экспорт
	
	// АПК:1036-выкл проверка орфографии не требуется
	СтрокаКириллица = "йцукенгшщзхъфывапролджэячсмитьбю.ё";
	СтрокаЛатиница = "qwertyuiop[]asdfghjkl;'zxcvbnm,./`";
	// АПК:1036-вкл
	
	Результат = "";
	Строка = НРег(Строка);
	Для Сч = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Сч, 1);
		Позиция = Найти(СтрокаЛатиница, Символ);
		Если Позиция <> 0 Тогда
			Результат = Результат + Сред(СтрокаКириллица, Позиция, 1);
		Иначе
			Позиция = Найти(СтрокаКириллица, Символ);
			Если Позиция <> 0 Тогда
				Результат = Результат + Сред(СтрокаЛатиница, Позиция, 1);
			Иначе
				Результат = Результат + Символ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИнвертироватьСтрокуНаСервере(Строка) Экспорт
	
	// АПК:1036-выкл проверка орфографии не требуется
	СтрокаКириллица = "йцукенгшщзхъфывапролджэячсмитьбю.ё";
	СтрокаЛатиница = "qwertyuiop[]asdfghjkl;'zxcvbnm,./`";
	// АПК:1036-вкл
	Результат = "";
	Строка = НРег(Строка);
	Для Сч = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Сч, 1);
		Позиция = Найти(СтрокаЛатиница, Символ);
		Если Позиция <> 0 Тогда
			Результат = Результат + Сред(СтрокаКириллица, Позиция, 1);
		Иначе
			Позиция = Найти(СтрокаКириллица, Символ);
			Если Позиция <> 0 Тогда
				Результат = Результат + Сред(СтрокаЛатиница, Позиция, 1);
			Иначе
				Результат = Результат + Символ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьМассивПоискаНаКлиенте(Знач ИскомоеЗначение) Экспорт
	
	Результат = Новый Массив;
	
	Если ИскомоеЗначение <> Неопределено Тогда
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"%"," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"["," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"]"," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"_"," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,""""," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"¶"," ");
		ИскомоеЗначение = СокрЛП(ИскомоеЗначение);
		ИскомоеЗначение = ИскомоеЗначение;
		
		ИскомоеЗначение = ИскомоеЗначение + " ";
		Пока Найти(ИскомоеЗначение,"  ") <> 0 Цикл
			ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"  "," ");
		КонецЦикла;
		
		Позиция = Найти(ИскомоеЗначение," ");
		
		Пока Позиция <> 0 Цикл
			
			ИсходноеЗначение = Лев(ИскомоеЗначение,Позиция - 1);
			ИнвертированноеЗначение = ИнвертироватьСтрокуНаКлиенте(ИсходноеЗначение);
			
			Результат.Добавить(Новый Структура("ИсходноеЗначение,ИнвертированноеЗначение", ВРег(ИсходноеЗначение), ВРег(ИнвертированноеЗначение)));
			
			ИскомоеЗначение = Сред(ИскомоеЗначение, Позиция + 1);
			Позиция = Найти(ИскомоеЗначение," ");
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивПоискаНаСервере(Знач ИскомоеЗначение) Экспорт
	
	Результат = Новый Массив;
	
	Если ИскомоеЗначение <> Неопределено Тогда
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"%"," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"["," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"]"," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"_"," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,""""," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"¶"," ");
		ИскомоеЗначение = СокрЛП(ИскомоеЗначение);
		ИскомоеЗначение = ИскомоеЗначение;
		
		ИскомоеЗначение = ИскомоеЗначение + " ";
		Пока Найти(ИскомоеЗначение,"  ") <> 0 Цикл
			ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"  "," ");
		КонецЦикла;
		
		Позиция = Найти(ИскомоеЗначение," ");
		
		Пока Позиция <> 0 Цикл
			
			ИсходноеЗначение = Лев(ИскомоеЗначение,Позиция - 1);
			ИнвертированноеЗначение = ИнвертироватьСтрокуНаСервере(ИсходноеЗначение);
			
			Результат.Добавить(Новый Структура("ИсходноеЗначение,ИнвертированноеЗначение", ВРег(ИсходноеЗначение), ВРег(ИнвертированноеЗначение)));
			
			ИскомоеЗначение = Сред(ИскомоеЗначение, Позиция + 1);
			Позиция = Найти(ИскомоеЗначение," ");
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ДеревоРаспределенияСуммыПлатежаСчетНаОплатуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещенияОВыборе = Новый ОписаниеОповещения("ДеревоРаспределенияСуммыПлатежаСчетНаОплатуНачалоВыбораЗавершение", ЭтотОбъект);
	
	Если ЭтоРасчетыСПоставщиком Тогда
		ПараметрыОтбораСчетаНаОплату = Новый Структура("Контрагент", Контрагент);
		ПараметрыВыбораСчетаНаОплату = Новый Структура("Отбор", ПараметрыОтбораСчетаНаОплату);
		ОткрытьФорму("Документ.СчетНаОплатуПоставщика.ФормаВыбора", ПараметрыВыбораСчетаНаОплату, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещенияОВыборе);
	Иначе
		ПараметрыОтбораСчетаНаОплату = Новый Структура("Контрагент", Контрагент);
		ПараметрыВыбораСчетаНаОплату = Новый Структура("Отбор", ПараметрыОтбораСчетаНаОплату);
		ОткрытьФорму("Документ.СчетНаОплату.ФормаВыбора", ПараметрыВыбораСчетаНаОплату, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещенияОВыборе);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРаспределенияСуммыПлатежаСчетНаОплатуНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекущиеДанные = Элементы.ДеревоРаспределенияСуммыПлатежа.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.СчетНаОплату = ВыбранноеЗначение;
			ОбновитьСтрокуТаблицыПоСтрокеДереваНаКлиенте(ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьВсеРеквизиты(Команда)
	ОткрытьФормуРедактированияДополнительныхРеквизитов();
КонецПроцедуры
