
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область AdditionalMethods

Функция НомерПостановления(СчетФактура)
	
	Если НЕ ЗначениеЗаполнено(СчетФактура) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если ТипЗнч(СчетФактура) <> Тип("ДокументСсылка.СчетФактура")
		И ТипЗнч(СчетФактура) <> Тип("ДокументСсылка.СчетФактураПолученный")
		Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ДатаДокумента			= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетФактура, "Дата");
	Возврат ПечатьДокументовУНФ.ВерсияПостановленияНДС1137(ДатаДокумента);
	
	
КонецФункции

Функция СтрокаКорректноРазмещаетсяНаСтранице(ТабличныйДокумент, ОбластиМакета, СтруктураИтогов, Ошибки) Экспорт
	
	ЕстьВсеОбласти = Истина;
	Для каждого ЭлементСтруктуры Из ОбластиМакета Цикл
		
		Если ЭлементСтруктуры.Значение = Неопределено Тогда
			
			ЕстьВсеОбласти = Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьВсеОбласти Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	МассивОбластей = Новый Массив;
	МассивОбластей.Добавить(ОбластиМакета.ОбластьМакетаСтрока);
	МассивОбластей.Добавить(ОбластиМакета.ОбластьМакетаИтогоПоСтранице);
	
	Если СтруктураИтогов.НПП = СтруктураИтогов.КоличествоСтрок Тогда
		
		МассивОбластей.Добавить(ОбластиМакета.ОбластьМакетаИтоги);
		МассивОбластей.Добавить(ОбластиМакета.ОбластьМакетаПодвал);
		
	КонецЕсли;
	
	Возврат ПечатьДокументовУНФ.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивОбластей, Ошибки);
	
КонецФункции

Процедура ДобавитьНовуюСтраницуДокумента(ТабличныйДокумент, ОбластиМакета, СтруктураИтогов)
	
	Если ОбластиМакета.ОбластьМакетаИтогоПоСтранице <> Неопределено Тогда
		
		ОбластиМакета.ОбластьМакетаИтогоПоСтранице.Параметры.Заполнить(СтруктураИтогов);
		ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаИтогоПоСтранице);
		
	КонецЕсли;
	
	СтруктураИтогов.РазницаБезНДСУвеличениеПоСтранице	= 0;
	СтруктураИтогов.РазницаБезНДСУменьшениеПоСтранице	= 0;
	СтруктураИтогов.РазницаНДСУвеличениеПоСтранице		= 0;
	СтруктураИтогов.РазницаНДСУменьшениеПоСтранице		= 0;
	СтруктураИтогов.РазницаСНДСУвеличениеПоСтранице		= 0;
	СтруктураИтогов.РазницаСНДСУменьшениеПоСтранице		= 0;
	
	СтруктураИтогов.НомерЛиста = СтруктураИтогов.НомерЛиста + 1;
	
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	ОбластиМакета.ОбластьМакетаНумерацияЛистов.Параметры.Заполнить(СтруктураИтогов);
	ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаНумерацияЛистов);
	ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаЗаголовокТаблицы);
	
КонецПроцедуры

Процедура УвеличитьИтогиДокумента(СтруктураИтогов, ДанныеПечати)
	
	Если ДанныеПечати.ЭтоНабор = Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// ::: Стоимость товаров
	Если ТипЗнч(ДанныеПечати.РазницаБезНДСУменьшение) = Тип("Число") Тогда
		
		СтруктураИтогов.РазницаБезНДСУменьшениеПоСтранице = СтруктураИтогов.РазницаБезНДСУменьшениеПоСтранице + ДанныеПечати.РазницаБезНДСУменьшение;
		СтруктураИтогов.РазницаБезНДСУменьшение = СтруктураИтогов.РазницаБезНДСУменьшение + ДанныеПечати.РазницаБезНДСУменьшение;
		
	КонецЕсли;
	
	Если ТипЗнч(ДанныеПечати.РазницаБезНДСУвеличение) = Тип("Число") Тогда
		
		СтруктураИтогов.РазницаБезНДСУвеличениеПоСтранице = СтруктураИтогов.РазницаБезНДСУвеличениеПоСтранице + ДанныеПечати.РазницаБезНДСУвеличение;
		СтруктураИтогов.РазницаБезНДСУвеличение = СтруктураИтогов.РазницаБезНДСУвеличение + ДанныеПечати.РазницаБезНДСУвеличение;
		
	КонецЕсли;
	
	// ::: Сумма НДС
	Если СтруктураИтогов.СчетФактураБезНДС Тогда
		
		СтруктураИтогов.РазницаНДСУменьшениеПоСтранице = НСтр("ru ='без НДС'");
		СтруктураИтогов.РазницаНДСУменьшение = НСтр("ru ='без НДС'");
		
	ИначеЕсли ТипЗнч(ДанныеПечати.РазницаНДСУменьшение) = Тип("Число") Тогда
		
		СтруктураИтогов.РазницаНДСУменьшениеПоСтранице = СтруктураИтогов.РазницаНДСУменьшениеПоСтранице + ДанныеПечати.РазницаНДСУменьшение;
		СтруктураИтогов.РазницаНДСУменьшение = СтруктураИтогов.РазницаНДСУменьшение + ДанныеПечати.РазницаНДСУменьшение;
		
	КонецЕсли;
	
	Если СтруктураИтогов.СчетФактураБезНДС Тогда
		
		СтруктураИтогов.РазницаНДСУвеличениеПоСтранице = НСтр("ru ='без НДС'");
		СтруктураИтогов.РазницаНДСУвеличение = НСтр("ru ='без НДС'");
		
	ИначеЕсли ТипЗнч(ДанныеПечати.РазницаНДСУвеличение) = Тип("Число") Тогда
		
		СтруктураИтогов.РазницаНДСУвеличениеПоСтранице = СтруктураИтогов.РазницаНДСУвеличениеПоСтранице + ДанныеПечати.РазницаНДСУвеличение;
		СтруктураИтогов.РазницаНДСУвеличение = СтруктураИтогов.РазницаНДСУвеличение + ДанныеПечати.РазницаНДСУвеличение;
		
	КонецЕсли;
	
	// ::: Стоимость товаров + Сумма НДС
	Если ТипЗнч(ДанныеПечати.РазницаСНДСУменьшение) = Тип("Число") Тогда
		
		СтруктураИтогов.РазницаСНДСУменьшениеПоСтранице = СтруктураИтогов.РазницаСНДСУменьшениеПоСтранице + ДанныеПечати.РазницаСНДСУменьшение;
		СтруктураИтогов.РазницаСНДСУменьшение = СтруктураИтогов.РазницаСНДСУменьшение + ДанныеПечати.РазницаСНДСУменьшение;
		
	КонецЕсли;
	
	Если ТипЗнч(ДанныеПечати.РазницаСНДСУвеличение) = Тип("Число") Тогда
		
		СтруктураИтогов.РазницаСНДСУвеличениеПоСтранице = СтруктураИтогов.РазницаСНДСУвеличениеПоСтранице + ДанныеПечати.РазницаСНДСУвеличение;
		СтруктураИтогов.РазницаСНДСУвеличение = СтруктураИтогов.РазницаСНДСУвеличение + ДанныеПечати.РазницаСНДСУвеличение;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДанныеКорректировочногоСчетаФактурыНаАванс(СтрокаОписаниеСФ, ИспользоватьФаксимиле, ЭтоУПД, Ошибки)
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(СтрокаОписаниеСФ.СчетФактура);
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СтрокаОписаниеСФ.СчетФактура);
	СтрокаОписаниеСФ.ДанныеДокумента = МенеджерДокумента.ДанныеКорректировочныхАвансовыхДокументовРегУчет(МассивДокументов, ИспользоватьФаксимиле);
	
КонецПроцедуры

Процедура ДозаполнитьСтрокуКорректировочногоСчетаФактуры1137(ДанныеПечати, СтруктураИтогов)

	Если СтруктураИтогов.ЭтоКорректировкаАванса 
		И НЕ ЗначениеЗаполнено(ДанныеПечати.ТоварНаименование) Тогда
		
		ДанныеПечати.ТоварНаименование = НСтр("ru='Предварительная оплата'");
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеПечати.ЕдиницаИзмерения) Тогда
		
		ДанныеПечати.ЕдиницаИзмеренияКод = "--";
		ДанныеПечати.ЕдиницаИзмерения = "--";
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеПечати.КоличествоДоИзменения) Тогда
		
		ДанныеПечати.КоличествоДоИзменения = "--";
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеПечати.КоличествоПослеИзменения) Тогда
		
		ДанныеПечати.КоличествоПослеИзменения = "--";
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеПечати.ЦенаДоИзменения) Тогда
		
		ДанныеПечати.ЦенаДоИзменения = "--";
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеПечати.ЦенаПослеИзменения) Тогда
		
		ДанныеПечати.ЦенаПослеИзменения = "--";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ServiceAPI

Функция ИдентификаторПечатнойФормы() Экспорт
	
	Возврат "КорректировочныйСчетФактура981";
	
КонецФункции

Функция ПредставлениеПФ() Экспорт
	
	Возврат НСтр("ru = 'Корректировочный счет-фактура'");
	
КонецФункции

Функция КлючПараметровПечати() Экспорт
	
	Возврат "ПАРАМЕТРЫ_ПЕЧАТИ_Универсальные_СчетФактураКорректировочный981";
	
КонецФункции

Функция ПолныйПутьКМакету() Экспорт
	
	Возврат "Обработка.ПечатьСчетФактураКорректировочный.ПФ_MXL_СчетФактураКорректировочный981";
	
КонецФункции

Функция СформироватьПФ(ОписаниеПечатнойФормы, ТаблицаОписанияСчетовФактур, ОбъектыПечати, ЭтоУПД) Экспорт
	Перем Ошибки, ПервыйДокумент, НомерСтрокиНачало;
	
	ТабличныйДокумент	= ОписаниеПечатнойФормы.ТабличныйДокумент;
	ДанныеПечати		= Новый Структура;
	Макет				= УправлениеПечатью.МакетПечатнойФормы(ОписаниеПечатнойФормы.ПолныйПутьКМакету);
	
	Для каждого СтрокаОписаниеСФ Из ТаблицаОписанияСчетовФактур Цикл
		
		Если СтрокаОписаниеСФ.ДанныеДокумента = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ОписаниеПечатнойФормы.ТабличныйДокумент, ПервыйДокумент, НомерСтрокиНачало);
		
		ДанныеОбъектовПечати = СтрокаОписаниеСФ.ДанныеДокумента;
		Для каждого ДанныеОбъекта Из ДанныеОбъектовПечати Цикл
			
			ЭтоКорректировкаАванса	= (ДанныеОбъекта.ВидСчетаФактуры = Перечисления.ВидыОперацийСчетФактура.КорректировкаАванса);
			ВерсияПостановления1137 = ПечатьДокументовУНФ.ВерсияПостановленияНДС1137(ДанныеОбъекта.ДатаДокумента);
			
			ОбластиМакета = Новый Структура;
			ОбластиМакета.Вставить("ОбластьМакетаЗаголовок",	ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "ЗаголовокДокумента", "", Ошибки));
			ОбластиМакета.Вставить("ОбластьМакетаШапка", 		ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "Шапка", "", Ошибки));
			ОбластиМакета.Вставить("ОбластьМакетаНумерацияЛистов",ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "НумерацияЛистов", "", Ошибки));
			ОбластиМакета.Вставить("ОбластьМакетаЗаголовокТаблицы", ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "ЗаголовокТаблицы", "", Ошибки));
			ОбластиМакета.Вставить("ОбластьМакетаСтрока", 		ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "Строка", "", Ошибки));
			ОбластиМакета.Вставить("ОбластьМакетаИтогоПоСтранице",ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "ИтогоПоСтранице", "", Ошибки));
			ОбластиМакета.Вставить("ОбластьМакетаИтоги", 		ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "Итого", "", Ошибки));
			ОбластиМакета.Вставить("ОбластьМакетаПодвал", 		ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "Подвал", "", Ошибки));
			
			СведенияОПоставщике = ПечатьДокументовУНФ.СведенияОЮрФизЛице(ДанныеОбъекта.Организация, ДанныеОбъекта.ДатаДокумента,,);
			СведенияОПокупателе = ПечатьДокументовУНФ.СведенияОЮрФизЛице(ДанныеОбъекта.Контрагент, ДанныеОбъекта.ДатаДокумента,,);
			
			//::: Заголовок
			Если ОбластиМакета.ОбластьМакетаЗаголовок <> Неопределено Тогда
				
				ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаЗаголовок);
				
			КонецЕсли;
			
			//::: Шапка
			ДанныеПечати.Вставить("Номер", ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(ДанныеОбъекта.ДатаДокумента, ДанныеОбъекта.Номер, ДанныеОбъекта.Префикс));
			ДанныеПечати.Вставить("Дата", Формат(ДанныеОбъекта.ДатаДокумента, "ДЛФ=ДД; ДП=--"));
			ДанныеПечати.Вставить("НомерИсправленияКорректировочного", ДанныеОбъекта.НомерИсправленияКорректировочного);
			ДанныеПечати.Вставить("НомерИсправленияКорректировочного", Формат(ДанныеОбъекта.ДатаИсправленияКорректировочного, "ДЛФ=ДД; ДП=--"));
			ДанныеПечати.Вставить("ПредставлениеДокумента", СтрШаблон(НСтр("ru ='Корректировочный счет-фактура № %1 от %2'"), ДанныеПечати.Номер, ДанныеПечати.Дата));
			
			Если ЭтоКорректировкаАванса Тогда
				
				ШаблонОписаниеОснования = НСтр("ru ='№ %1 от %2, с учетом исправления № %3 от %4'");
				
				ДанныеПечати.Вставить("РеквизитыОснований", "");
				Для каждого Основание Из ДанныеОбъекта.ТаблицаАвансов Цикл
					
					НомерОснования = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Основание.ДатаКорСчетаФактура, Основание.НомерКорСчетаФактура, ДанныеОбъекта.Префикс);
					ДатаОснования = Формат(Основание.ДатаКорСчетаФактура, "ДЛФ=ДД; ДП=--");
					
					НомерИсправления = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Основание.ДатаИсправляемогоКорректировочногоДокумента, Основание.НомерИсправляемогоКорректировочногоДокумента, ДанныеОбъекта.Префикс);
					Если НЕ ЗначениеЗаполнено(НомерИсправления) Тогда
						
						НомерИсправления = "--";
						
					КонецЕсли;
					ДатаИсправления = Формат(Основание.ДатаИсправляемогоКорректировочногоДокумента, "ДЛФ=ДД; ДП=--");
					
					ДанныеПечати.РеквизитыОснований = ДанныеПечати.РеквизитыОснований + ?(ПустаяСтрока(ДанныеПечати.РеквизитыОснований), "", ", ");
					ДанныеПечати.РеквизитыОснований = ДанныеПечати.РеквизитыОснований + СтрШаблон(ШаблонОписаниеОснования, НомерОснования, ДатаОснования, НомерИсправления, ДатаИсправления);
					
				КонецЦикла;
				
			КонецЕсли;
			
			ИННПоставщика = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь);
			Если ДанныеОбъекта.ОбособленноеПодразделениеПоставщика = ДанныеОбъекта.Организация Тогда
				
				КПППоставщика = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
				
			Иначе
				
				КПППоставщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОбъекта.ОбособленноеПодразделениеПоставщика, "КПП");
				
			КонецЕсли;
			
			ДанныеПечати.Вставить("ПредставлениеПоставщика",ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,"));
			ДанныеПечати.Вставить("АдресПоставщика", 		ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,"));
			ДанныеПечати.Вставить("ИННПоставщика",			ИННПоставщика + ?(ПустаяСтрока(КПППоставщика), "", "/" + КПППоставщика));
			
			ИННПокупателя = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь);
			Если ДанныеОбъекта.ОбособленноеПодразделениеПокупателя = ДанныеОбъекта.Контрагент Тогда
				
				КПППокупателя = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
				
			Иначе
				
				КПППокупателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОбъекта.ОбособленноеПодразделениеПокупателя, "КПП");
				
			КонецЕсли;
			
			ДанныеПечати.Вставить("ПредставлениеПокупателя",ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,"));
			ДанныеПечати.Вставить("АдресПокупателя", 		ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,"));
			ДанныеПечати.Вставить("ИННПокупателя", 			ИННПокупателя + ?(ПустаяСтрока(КПППокупателя), "", "/" + КПППокупателя));
			ДанныеПечати.Вставить("Валюта",					ДанныеОбъекта.ВалютаНаименование);
			ДанныеПечати.Вставить("ИдентификаторГосКонтракта", ДанныеОбъекта.ИдентификаторГосКонтракта);
			
			Если ОбластиМакета.ОбластьМакетаШапка <> Неопределено Тогда
				
				ОбластиМакета.ОбластьМакетаШапка.Параметры.Заполнить(ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаШапка);
				
			КонецЕсли;
			
			// ::: Заголовок таблицы
			Если ОбластиМакета.ОбластьМакетаЗаголовокТаблицы <> Неопределено Тогда
				
				ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаЗаголовокТаблицы);
				
			КонецЕсли;
			
			// ::: Табличная часть
			Если ОбластиМакета.ОбластьМакетаСтрока <> Неопределено Тогда
				
				СтавкаНДСБезНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
				ЕстьНаборы 		= ДанныеОбъекта.ТаблицаАвансов.Колонки.Найти("НоменклатураНабора") <> Неопределено;
				
				СтруктураИтогов = Новый Структура;
				СтруктураИтогов.Вставить("НомерЛиста",							1);
				СтруктураИтогов.Вставить("НПП",									0);
				СтруктураИтогов.Вставить("КоличествоСтрок",						ДанныеОбъекта.ТаблицаАвансов.Количество());
				СтруктураИтогов.Вставить("РазницаБезНДСУвеличениеПоСтранице",	0);
				СтруктураИтогов.Вставить("РазницаБезНДСУменьшениеПоСтранице",	0);
				СтруктураИтогов.Вставить("РазницаНДСУвеличениеПоСтранице",		0);
				СтруктураИтогов.Вставить("РазницаНДСУменьшениеПоСтранице",		0);
				СтруктураИтогов.Вставить("РазницаСНДСУвеличениеПоСтранице",		0);
				СтруктураИтогов.Вставить("РазницаСНДСУменьшениеПоСтранице",		0);
				СтруктураИтогов.Вставить("РазницаБезНДСУвеличение",				0);
				СтруктураИтогов.Вставить("РазницаБезНДСУменьшение",				0);
				СтруктураИтогов.Вставить("РазницаНДСУвеличение",				0);
				СтруктураИтогов.Вставить("РазницаНДСУменьшение",				0);
				СтруктураИтогов.Вставить("РазницаСНДСУвеличение",				0);
				СтруктураИтогов.Вставить("РазницаСНДСУменьшение",				0);
				СтруктураИтогов.Вставить("СчетФактураБезНДС",					Истина);
				СтруктураИтогов.Вставить("ПредставлениеДокумента",				ДанныеПечати.ПредставлениеДокумента);
				СтруктураИтогов.Вставить("ЕстьНаборы",							ЕстьНаборы);
				СтруктураИтогов.Вставить("СтавкаНДСБезНДС",						СтавкаНДСБезНДС);
				СтруктураИтогов.Вставить("ЭтоКорректировкаАванса",				ЭтоКорректировкаАванса);
				
				
				ПараметрыНоменклатуры = Новый Структура;
				Для каждого СтрокаТабличнойЧасти Из ДанныеОбъекта.ТаблицаАвансов Цикл
					
					ДанныеПечати.Очистить();
					ПараметрыНоменклатуры.Очистить();
					
					Если СтруктураИтогов.ЕстьНаборы 
						И СтрокаТабличнойЧасти.ЭтоНабор = Истина Тогда 
						
						ДанныеПечати.Вставить("НомерСтроки", 0);
						
					Иначе
						
						СтруктураИтогов.НПП = СтруктураИтогов.НПП + 1;
						ДанныеПечати.Вставить("НомерСтроки", СтруктураИтогов.НПП);
						
					КонецЕсли;
					
					ПараметрыНоменклатуры.Вставить("Содержание", СтрокаТабличнойЧасти.Содержание);
					ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", СтрокаТабличнойЧасти.ПредставлениеНоменклатуры);
					ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", СтрокаТабличнойЧасти.Характеристика);
					ПараметрыНоменклатуры.Вставить("НеобходимоВыделитьКакСоставНабора", ?(СтруктураИтогов.ЕстьНаборы, СтрокаТабличнойЧасти.НеобходимоВыделитьКакСоставНабора, Ложь));
					
					ДанныеПечати.Вставить("ТоварНаименование",		ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры));
					ДанныеПечати.Вставить("ТоварКодТНВЭДДоИзменения",СтрокаТабличнойЧасти.КодТНВЭДДоИзменения);
					ДанныеПечати.Вставить("ТоварКодТНВЭД",			СтрокаТабличнойЧасти.КодТНВЭД);
					ДанныеПечати.Вставить("ПредставлениеКодаНоменклатуры", ПечатьДокументовУНФ.ПредставлениеКодаНоменклатуры(СтрокаТабличнойЧасти));
					ДанныеПечати.Вставить("ЭтоНабор",				?(СтруктураИтогов.ЕстьНаборы, СтрокаТабличнойЧасти.ЭтоНабор = Истина, Ложь));
					ДанныеПечати.Вставить("ЕдиницаИзмеренияКод",	СтрокаТабличнойЧасти.ЕдиницаИзмеренияПоОКЕИ_Код);
					ДанныеПечати.Вставить("ЕдиницаИзмерения",		СтрокаТабличнойЧасти.ЕдиницаИзмеренияПоОКЕИ_Наименование);
					ДанныеПечати.Вставить("КоличествоДоИзменения",	СтрокаТабличнойЧасти.КоличествоДоИзменения);
					ДанныеПечати.Вставить("КоличествоПослеИзменения",СтрокаТабличнойЧасти.КоличествоПослеИзменения);
					ДанныеПечати.Вставить("ЦенаДоИзменения",		СтрокаТабличнойЧасти.ЦенаДоИзменения);
					ДанныеПечати.Вставить("ЦенаПослеИзменения",		СтрокаТабличнойЧасти.ЦенаПослеИзменения);
					ДанныеПечати.Вставить("СтоимостьБезНДСДоИзменения",СтрокаТабличнойЧасти.СтоимостьБезНДСДоИзменения);
					ДанныеПечати.Вставить("СтоимостьБезНДСПослеИзменения",СтрокаТабличнойЧасти.СтоимостьБезНДСПослеИзменения);
					ДанныеПечати.Вставить("РазницаБезНДСУвеличение",СтрокаТабличнойЧасти.РазницаБезНДСУвеличение);
					ДанныеПечати.Вставить("РазницаБезНДСУменьшение",СтрокаТабличнойЧасти.РазницаБезНДСУменьшение);
					ДанныеПечати.Вставить("СтавкаНДСДоИзменения",	СтрокаТабличнойЧасти.СтавкаНДСДоИзменения);
					ДанныеПечати.Вставить("СтавкаНДСПослеИзменения",СтрокаТабличнойЧасти.СтавкаНДСПослеИзменения);
					ДанныеПечати.Вставить("СуммаНДСДоИзменения",	СтрокаТабличнойЧасти.СуммаНДСДоИзменения);
					ДанныеПечати.Вставить("СуммаНДСПослеИзменения",	СтрокаТабличнойЧасти.СуммаНДСПослеИзменения);
					ДанныеПечати.Вставить("РазницаНДСУвеличение",	СтрокаТабличнойЧасти.РазницаНДСУвеличение);
					ДанныеПечати.Вставить("РазницаНДСУменьшение",	СтрокаТабличнойЧасти.РазницаНДСУменьшение);
					ДанныеПечати.Вставить("СтоимостьСНДСДоИзменения", СтрокаТабличнойЧасти.СтоимостьСНДСДоИзменения);
					ДанныеПечати.Вставить("СтоимостьСНДСПослеИзменения", СтрокаТабличнойЧасти.СтоимостьСНДСПослеИзменения);
					ДанныеПечати.Вставить("РазницаСНДСУвеличение", СтрокаТабличнойЧасти.РазницаСНДСУвеличение);
					ДанныеПечати.Вставить("РазницаСНДСУменьшение", СтрокаТабличнойЧасти.РазницаСНДСУменьшение);
					
					ДозаполнитьСтрокуКорректировочногоСчетаФактуры1137(ДанныеПечати, СтруктураИтогов);
					
					СтруктураИтогов.СчетФактураБезНДС = (СтруктураИтогов.СчетФактураБезНДС) И (СтрокаТабличнойЧасти.СуммаНДСПослеИзменения = 0) И (СтрокаТабличнойЧасти.СтавкаНДСПослеИзменения = СтавкаНДСБезНДС);
					
					Если СтруктураИтогов.НПП > 1
						И СтрокаКорректноРазмещаетсяНаСтранице(ТабличныйДокумент, ОбластиМакета, СтруктураИтогов, Ошибки) = Ложь Тогда
						
						ДобавитьНовуюСтраницуДокумента(ТабличныйДокумент, ОбластиМакета, СтруктураИтогов);
						
					КонецЕсли;
					
					УвеличитьИтогиДокумента(СтруктураИтогов, ДанныеПечати);
					
					ОбластиМакета.ОбластьМакетаСтрока.Параметры.Заполнить(ДанныеПечати);
					ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаСтрока);
					
				КонецЦикла;
				
			КонецЕсли;
			
			//::: Итоги
			Если ОбластиМакета.ОбластьМакетаИтоги <> Неопределено Тогда
				
				Если СтруктураИтогов.НомерЛиста > 1 Тогда
					
					ОбластиМакета.ОбластьМакетаИтогоПоСтранице.Параметры.Заполнить(СтруктураИтогов);
					ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаИтогоПоСтранице);
					
				КонецЕсли;
				
				ОбластиМакета.ОбластьМакетаИтоги.Параметры.Заполнить(СтруктураИтогов);
				ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаИтоги);
				
			КонецЕсли;
			
			//::: Подписи
			Если ОбластиМакета.ОбластьМакетаПодвал <> Неопределено Тогда
				
				ДанныеПечати.Очистить();
				
				ШаблонКоличествоЛистов	= НСтр("ru = 'Документ составлен на %1 %2'");
				ЧислоПрописью			= СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru = ';листе;;листах;листах;листах'"), СтруктураИтогов.НомерЛиста);
				КоличествоЛистов		= СтрШаблон(ШаблонКоличествоЛистов, СтруктураИтогов.НомерЛиста, ЧислоПрописью);
				
				ДанныеПечати.Вставить("КоличествоЛистов", КоличествоЛистов);
				ДанныеПечати.Вставить("ФИОПБОЮЛ", ?(ДанныеОбъекта.ЭтоФизическоеЛицо, ДанныеОбъекта.РасшифровкаПодписиРуководителя, Неопределено));
				ДанныеПечати.Вставить("РасшифровкаПодписиРуководителя", ?(ДанныеОбъекта.ЭтоФизическоеЛицо, Неопределено, ДанныеОбъекта.РасшифровкаПодписиРуководителя));
				ДанныеПечати.Вставить("РасшифровкаПодписиГлавногоБухгалтера", ?(ДанныеОбъекта.ЭтоФизическоеЛицо, Неопределено, ДанныеОбъекта.РасшифровкаПодписиГлавногоБухгалтера));
				ДанныеПечати.Вставить("Свидетельство", ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,"));
				
				ОбластиМакета.ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаПодвал);
				
			КонецЕсли;
			
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, СтрокаОписаниеСФ.СчетФактура);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область PreparingData

Функция РазобратьДокументыНаСчетаФактуры(МассивОбъектов, ЭтоУПД, ЭтоВходящийДокумент = Ложь) Экспорт
	
	ТаблицаОписанияСчетовФактур = Новый ТаблицаЗначений;
	ТаблицаОписанияСчетовФактур.Колонки.Добавить("СчетФактура",			Новый ОписаниеТипов("ДокументСсылка.СчетФактура, ДокументСсылка.СчетФактураПолученный"));
	ТаблицаОписанияСчетовФактур.Колонки.Добавить("ОписаниеДокумента",	Новый ОписаниеТипов("Строка"));
	ТаблицаОписанияСчетовФактур.Колонки.Добавить("ЭтоВходящийДокумент",	Неопределено); // Для УПД без счетов-фактур
	ТаблицаОписанияСчетовФактур.Колонки.Добавить("ОснованиеУПД",		Неопределено); // Для УПД без счетов-фактур
	ТаблицаОписанияСчетовФактур.Колонки.Добавить("ВерсияДокумента", 	Неопределено);
	ТаблицаОписанияСчетовФактур.Колонки.Добавить("ДанныеДокумента",		Неопределено);
	ТаблицаОписанияСчетовФактур.Колонки.Добавить("Постановление",		Неопределено);
	ТаблицаОписанияСчетовФактур.Колонки.Добавить("ПФТолькоВРублях",		Новый ОписаниеТипов("Булево"));
	
	Для каждого ОбъектПечати Из МассивОбъектов Цикл
		
		СтруктураДанных = Неопределено;
		
		Если ТипЗнч(ОбъектПечати) = Тип("ДокументСсылка.СчетФактура")
			ИЛИ ТипЗнч(ОбъектПечати) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Ссылка", ОбъектПечати);
			
		Иначе
			
			СтруктураДанных = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(ОбъектПечати, ЭтоВходящийДокумент);
			
		КонецЕсли;
		
		Если СтруктураДанных = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаОписаниеСФ					= ТаблицаОписанияСчетовФактур.Добавить();
		СтрокаОписаниеСФ.СчетФактура		= СтруктураДанных.Ссылка;
		СтрокаОписаниеСФ.ВерсияДокумента 	= НомерПостановления(СтрокаОписаниеСФ.СчетФактура);
		СтрокаОписаниеСФ.ЭтоВходящийДокумент= ЭтоВходящийДокумент;
		СтрокаОписаниеСФ.ПФТолькоВРублях	= Истина;
		
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОписаниеСФ.СчетФактура, "ВидОперации");
		Если ВидОперации = Перечисления.ВидыОперацийСчетФактура.КорректировкаАванса Тогда
			
			СтрокаОписаниеСФ.ОписаниеДокумента = "ЭтоКорректировкаАванса";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаОписанияСчетовФактур;
	
КонецФункции

Функция ЗаполнитьДанныеДокументов(ТаблицаОписанияСчетовФактур, ОбъектыПечати, ЭтоУПД, ИспользоватьФаксимиле, Ошибки) Экспорт
	
	Для каждого СтрокаОписаниеСФ Из ТаблицаОписанияСчетовФактур Цикл
		
		Если СтрокаОписаниеСФ.ВерсияДокумента <> "981" Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрокаОписаниеСФ.ОписаниеДокумента = "ЭтоКорректировкаАванса" Тогда
			
			ДанныеКорректировочногоСчетаФактурыНаАванс(СтрокаОписаниеСФ, ИспользоватьФаксимиле, ЭтоУПД, Ошибки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

#КонецОбласти

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Перем Ошибки;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "КорректировочныйСчетФактура981");
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = КлючПараметровПечати();
		ПечатнаяФорма.ПолныйПутьКМакету = ПолныйПутьКМакету();
		ПечатнаяФорма.СинонимМакета = ПредставлениеПФ();
		
		ТаблицаОписанияСчетовФактур = РазобратьДокументыНаСчетаФактуры(МассивОбъектов, Ложь);
		ЗаполнитьДанныеДокументов(ТаблицаОписанияСчетовФактур, ОбъектыПечати, Ложь, Ложь, Ошибки);
		
		СформироватьПФ(ПечатнаяФорма, ТаблицаОписанияСчетовФактур, ОбъектыПечати, Ложь);
		
	КонецЕсли;
	
	Если Ошибки <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	ЭлектроннаяПочтаУНФ.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов,
		КоллекцияПечатныхФорм);
	
КонецПроцедуры

#КонецЕсли