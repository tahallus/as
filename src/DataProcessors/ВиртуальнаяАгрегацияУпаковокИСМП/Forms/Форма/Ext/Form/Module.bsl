#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения Экспорт;

&НаКлиенте
Перем Ссылка Экспорт;

&НаКлиенте
Перем ВыполняетсяЗакрытие;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ИспользоватьСерииНоменклатуры          = ИнтеграцияИС.СерииИспользуются();
	ИспользоватьХарактеристикиНоменклатуры = ИнтеграцияИС.ХарактеристикиИспользуются();
	
	ОбработатьИПроверитьПереданныеПараметры(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерий(
		Метаданные.Обработки.ВиртуальнаяАгрегацияУпаковокИСМП, ЭтотОбъект);
	
	ШрифтЗаголовкаГруппы  = Новый Шрифт(Элементы.ГруппаЛевая.ШрифтЗаголовка);
	ЦветГиперссылки       = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ЦветЗаголовкаГруппы   = ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС;
	ЦветНеТребуетВнимания = ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС;
	
	ОбработатьСохраненныеНастройки();
	УправлениеЭлементамиФормыПриСоздании();
	
	СобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВыполняетсяЗакрытие = Ложь;
	
	ПолучитьДанныеЗаполнения();
	
	УстановитьОтборОстатковПродукции();
	СформироватьЗаголовокСохраненныхПараметровГенерацииШтрихкодов();
	СформироватьЗаголовокГиперссылкиОткрытияСпискаУпаковок();
	СформироватьЗаголовокКоличествоУпаковок();
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИспользоватьСерииНоменклатуры Тогда
		СобытияФормИСМПКлиентПереопределяемый.ОбработкаВыбораСерии(ЭтотОбъект,
			ВыбранноеЗначение, ИсточникВыбора, ПараметрыУказанияСерий);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ВыполняетсяЗакрытие И Модифицированность Тогда
		Отказ = Истина;
		
		ТекстВопроса = НСтр("ru = 'Сформированные упаковки, которые не были распечатаны, будут потеряны. Все равно закрыть?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриОтветеНаВопросПередЗакрытиемФормы", ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СвободныеОстаткиПродукцииПриИзменении(Элемент)
	
	УстановитьОтборОстатковПродукции();
	
	СохранитьНастройкиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныйСоставУпаковкиПриИзменении(Элемент)
	
	Если НЕ ПроизвольныйСоставУпаковки Тогда
		ОчиститьСоставУпаковки();
		РассчитатьОстатокПоДокументу();
		СформироватьЗаголовокКоличествоУпаковок();
		
		Если ЗначениеЗаполнено(ИсторическаяУпаковка) Тогда
			ПриИзмененииИсторическойУпаковки();
		КонецЕсли;
	КонецЕсли;

	УправлениеЗависимымиОтИсторииЭлементами(ЭтотОбъект);
	
	СохранитьНастройкиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторическаяУпаковкаПриИзменении(Элемент)
	
	ПриИзмененииИсторическойУпаковки();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоУпаковокПриИзменении(Элемент)
	
	ИзменитьКоличествоУпаковокПриНеобходимости();
	РассчитатьОстатокПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоУпаковокРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ИзменитьКоличествоУпаковокПриНеобходимости();
	РассчитатьОстатокПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСкрытьОткрытьСписокУпаковокОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьСписокУпаковок" Тогда
		Элементы.ГруппаСписокУпаковок.Видимость = Истина;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СкрытьСписокУпаковок" Тогда
		Элементы.ГруппаСписокУпаковок.Видимость = Ложь;
	КонецЕсли;
	
	СформироватьЗаголовокГиперссылкиОткрытияСпискаУпаковок();
	
	СохранитьНастройкиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПараметрыГенерацииШтрихкодовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОчиститьПредыдущиеШтрихкоды" Тогда
		ОчиститьПредыдущиеШтрихкоды();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыОстаткиПродукции

&НаКлиенте
Процедура ОстаткиПродукцииНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ТекущаяСтрока = Элементы.ОстаткиПродукции.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ОстаткиПродукции.НайтиПоИдентификатору(ТекущаяСтрока);

	Если НЕ ПроизвольныйСоставУпаковки Тогда
		Выполнение = Ложь;
	ИначеЕсли ТекущиеДанные.Остаток = 0 Тогда
		Выполнение = Ложь;
	КонецЕсли;
	
	ДанныеСтроки = Новый Структура(
		"Номенклатура,Характеристика,GTIN",
		ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика, ТекущиеДанные.GTIN);
	
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
	ПараметрыПеретаскивания.Значение = ДанныеСтроки;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыСоставУпаковки

&НаКлиенте
Процедура СоставУпаковкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУпаковкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(СоставУпаковки);
		СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииНоменклатуры(ЭтотОбъект,
			СоставУпаковки[СоставУпаковки.Количество()-1], КэшированныеЗначения, ПараметрыУказанияСерий);
	КонецЕсли;
	
	РассчитатьМаксимальноеКоличествоУпаковок();
	РассчитатьОстатокПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУпаковкиПослеУдаления(Элемент)
	
	РассчитатьМаксимальноеКоличествоУпаковок();
	РассчитатьОстатокПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУпаковкиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ДанныеОстатка = Элементы.ОстаткиПродукции.ТекущиеДанные;
	
	Если ДанныеОстатка = Неопределено Тогда
	ИначеЕсли ДанныеОстатка.Остаток = 0 Тогда
	Иначе
		СтрокиСостава = СоставУпаковки.НайтиСтроки(ПараметрыПеретаскивания.Значение);
		
		Если СтрокиСостава.Количество() = 0 Тогда
			СтандартнаяОбработка = Ложь;
		Иначе
			СтрокаСостава = СтрокиСостава[0];
			Если КоличествоУпаковок > 0
			 ИЛИ КоличествоУпаковок = 0 И СтрокаСостава.Количество < ДанныеОстатка.Остаток Тогда
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУпаковкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	СтрокиСостава = СоставУпаковки.НайтиСтроки(ПараметрыПеретаскивания.Значение);
	
	Если СтрокиСостава.Количество() > 0 Тогда
		НоваяСтрока   = Ложь;
		СтрокаСостава = СтрокиСостава[0];
	Иначе
		НоваяСтрока   = Истина;
		СтрокаСостава = СоставУпаковки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСостава, ПараметрыПеретаскивания.Значение, "Номенклатура,Характеристика,GTIN");
	КонецЕсли;
	
	СтрокаСостава.Количество = СтрокаСостава.Количество + 1;
	
	СоставУпаковкиПриОкончанииРедактирования(Элементы.СоставУпаковки, НоваяСтрока, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУпаковкиСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СоставУпаковки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяМодифицированность = Модифицированность;
	
	ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтотОбъект,
		ПараметрыУказанияСерий, Элемент.ТекстРедактирования, СтандартнаяОбработка, ТекущиеДанные);
	
	Модифицированность = ТекущаяМодифицированность;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУпаковкиСерияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СоставУпаковки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСерии(ЭтотОбъект,
		ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУпаковкиКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СоставУпаковки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииКоличества(ЭтотОбъект,
		ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыИтоговоеДеревоУпаковок

&НаКлиенте
Процедура ИтоговоеДеревоУпаковокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИтоговоеДеревоУпаковокПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Отказ         = Истина;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли ПустаяСтрока(ТекущиеДанные.ХешСуммаУпаковки) Тогда
		УдалитьУпаковкуИзИтоговогоДереваУпаковок(ТекущиеДанные);
	Иначе
		ПроверитьВозможностьУдаленияЗаписаннойУпаковки(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИтоговоеДеревоУпаковокПараметрыГенерацииШтрихкодовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ИтоговоеДеревоУпаковок.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуГенерацииШтрихкодов(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьВСоставУпаковки(Команда)
	
	ТекущаяСтрока = Элементы.ОстаткиПродукции.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ОстаткиПродукции.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если НЕ ПроизвольныйСоставУпаковки Тогда
		Возврат;
	ИначеЕсли ТекущиеДанные = Неопределено Тогда	
		Возврат;
	ИначеЕсли ТекущиеДанные.Остаток = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,GTIN");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущиеДанные);
	
	СтрокиСостава = СоставУпаковки.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиСостава.Количество() > 0 Тогда
		НоваяСтрока   = Ложь;
		СтрокаСостава = СтрокиСостава[0];
	Иначе
		НоваяСтрока   = Истина;
		СтрокаСостава = СоставУпаковки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСостава, ТекущиеДанные,, "Количество");
	КонецЕсли;
	
	Если КоличествоУпаковок > 0
	 ИЛИ КоличествоУпаковок = 0 И СтрокаСостава.Количество < ТекущиеДанные.Остаток Тогда
		СтрокаСостава.Количество = СтрокаСостава.Количество + 1;
		СоставУпаковкиПриОкончанииРедактирования(Элементы.СоставУпаковки, НоваяСтрока, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзСоставаУпаковки(Команда)
	
	ТекущаяСтрока = Элементы.СоставУпаковки.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = СоставУпаковки.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если НЕ ПроизвольныйСоставУпаковки Тогда
		Возврат;
	ИначеЕсли ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Количество > 1 Тогда
		ТекущиеДанные.Количество = ТекущиеДанные.Количество - 1;
		СоставУпаковкиПриОкончанииРедактирования(Элементы.СоставУпаковки, Ложь, Ложь);
	Иначе
		СоставУпаковки.Удалить(ТекущиеДанные);
		СоставУпаковкиПослеУдаления(Элементы.СоставУпаковки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьСерии(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверкаИПодборПродукцииИСМПКлиентСервер.ТребуетсяУказаниеСерий(СоставУпаковки, "Количество")
		И Не ПроверкаИПодборПродукцииИСМПКлиентСервер.СериюМожноУказать(СоставУпаковки, "Количество") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Отсутствует продукция, для которой требуется генерация серий.'"));
		Возврат;
	КонецЕсли;
	
	СгенерироватьСерииСоставаУпаковки();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьУпаковки(Команда)
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	
	Если СоставУпаковки.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Не указан состав формируемых упаковок.'");
		ПолеОшибки  = "СоставУпаковки";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, ПолеОшибки,, Отказ);
	ИначеЕсли СоставУпаковки.Итог("Количество") = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Не указано количество составляющих упаковки.'");
		ПолеОшибки  = "СоставУпаковки[0].Количество";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, ПолеОшибки,, Отказ);
	КонецЕсли;
	
	Если КоличествоУпаковок = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Не указано количество формируемых упаковок.'");
		ПолеОшибки  = "КоличествоУпаковок";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, ПолеОшибки,, Отказ);
	КонецЕсли;
	
	Если ИспользоватьСерииНоменклатуры Тогда
		СтатусыСерийСерияНеУказана = ПроверкаИПодборПродукцииИСМПКлиентСервер.СтатусыСерийСерияНеУказана();
		Для Каждого СтрокаСостава Из СоставУпаковки Цикл
			Если СтатусыСерийСерияНеУказана.Найти(СтрокаСостава.СтатусУказанияСерий) <> Неопределено Тогда
				ИндексСтроки = СоставУпаковки.Индекс(СтрокаСостава);
				АдресОшибки  = " " + СтрШаблон(НСтр("ru = 'в строке %1 списка состава упаковки'"), ИндексСтроки + 1);
				ТекстОшибки  = НСтр("ru = 'Не указана серия'");
				ПолеОшибки   = "СоставУпаковки[" + ИндексСтроки + "].Серия";
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки + АдресОшибки,,ПолеОшибки,, Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНовуюУпаковкуВИтоговоеДеревоУпаковок();
	
	Модифицированность = Истина;
	
	Если Не Элементы.ГруппаСписокУпаковок.Видимость Тогда
		ПоказатьОповещениеПользователя(
			СтрШаблон(НСтр("ru = 'Создано упаковок - %1'"), КоличествоУпаковок),
			Новый ОписаниеОповещения("ПриОповещенииОФормированииУпаковок", ЭтотОбъект),
			НСтр("ru = 'Нажмите для просмотра'"),,
			СтатусОповещенияПользователя.Информация, ЭтотОбъект.УникальныйИдентификатор);
	КонецЕсли;
	
	ОчиститьСоставУпаковки();
	
	Если НЕ ПроизвольныйСоставУпаковки Тогда
		ИсторическаяУпаковка = Неопределено;
	КонецЕсли;
	
	УменьшитьКоличествоСвободногоОстатка();
	СформироватьЗаголовокКоличествоУпаковок();
	СформироватьЗаголовокГиперссылкиОткрытияСпискаУпаковок();
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	ОчиститьСообщения();
	
	Если Модифицированность Тогда
		
		Отказ = Ложь;
		
		Для Каждого СтрокаАгрегации Из ИтоговоеДеревоУпаковок.ПолучитьЭлементы() Цикл
			Если ПустаяСтрока(СтрокаАгрегации.ХешСуммаУпаковки)
				И (НЕ ЗначениеЗаполнено(СтрокаАгрегации.ТипШтрихкода)
				ИЛИ ПустаяСтрока(СтрокаАгрегации.КлючНумератора)) Тогда
				ИндексСтроки = ИтоговоеДеревоУпаковок.ПолучитьЭлементы().Индекс(СтрокаАгрегации);
				АдресОшибки  = " " + СтрШаблон(НСтр("ru = 'в строке %1 списка упаковок'"), ИндексСтроки + 1);
				ТекстОшибки  = НСтр("ru = 'Не указаны параметры генерации штрихкодов'");
				ПолеОшибки   = "ИтоговоеДеревоУпаковок[" + ИндексСтроки + "].ПараметрыГенерацииШтрихкодов";
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки + АдресОшибки,,ПолеОшибки,, Отказ);
			КонецЕсли;
		КонецЦикла;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ДлительнаяОперация = НачатьЗаписьУпаковок();
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаписьУпаковокЗавершение", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Запись сформированных упаковок.'");
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	Иначе
		ОткрытьФормуПечати();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
#Область ОстаткиПродукции

	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект,
		"ОстаткиПродукцииХарактеристика",
		"ОстаткиПродукции.ХарактеристикиИспользуются");
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОстаткиПродукцииНоменклатура.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ОстаткиПродукцииНоменклатура.ПутьКДанным);
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра(
		"Текст", Новый ПолеКомпоновкиДанных("ОстаткиПродукции.ПредставлениеНоменклатуры"));
		
#КонецОбласти
	
#Область СоставУпаковки

	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект,
		"СоставУпаковкиХарактеристика",
		"СоставУпаковки.ХарактеристикиИспользуются");
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтотОбъект,
		"СоставУпаковкиСерия",
		"СоставУпаковки.СтатусУказанияСерий",
		"СоставУпаковки.ТипНоменклатуры");
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоставУпаковкиНоменклатура.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.СоставУпаковкиНоменклатура.ПутьКДанным);
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра(
		"Текст", Новый ПолеКомпоновкиДанных("СоставУпаковки.ПредставлениеНоменклатуры"));
	
#КонецОбласти
	
#Область СписокУпаковок
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИтоговоеДеревоУпаковок.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИтоговоеДеревоУпаковок.ХешСуммаУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИтоговоеДеревоУпаковокПараметрыГенерацииШтрихкодов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИтоговоеДеревоУпаковок.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИтоговоеДеревоУпаковокПараметрыГенерацииШтрихкодов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИтоговоеДеревоУпаковок.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИтоговоеДеревоУпаковок.ХешСуммаУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Штрихкоды сгенерированы'"));
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИтоговоеДеревоУпаковокПараметрыГенерацииШтрихкодов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИтоговоеДеревоУпаковок.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИтоговоеДеревоУпаковок.ХешСуммаУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИтоговоеДеревоУпаковок.ПараметрыГенерацииШтрихкодов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИтоговоеДеревоУпаковок.ПредставлениеНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
#КонецОбласти

#Область УпрощеннаяМаркировкаОстатков
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОстаткиПродукцииНоменклатура.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ОстаткиПродукцииНоменклатура.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоставУпаковкиНоменклатура.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.СоставУпаковкиНоменклатура.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
#КонецОбласти

КонецПроцедуры

#Область УправлениеЭлементамиФормы
	
&НаСервере
Процедура УправлениеЭлементамиФормыПриСоздании()
	
	ВидПродукцииРодительный = НРег(ПолучитьСклоненияСтроки(ВидПродукции, "Л=ru_RU", "ПД=Родительный")[0]);

	Заголовок = СтрШаблон(НСтр("ru = 'Виртуальная агрегация %1'"), ВидПродукцииРодительный);
	
	Если НЕ ИспользоватьХарактеристикиНоменклатуры Тогда
		Элементы.ОстаткиПродукцииХарактеристика.Видимость = Ложь;
		Элементы.СоставУпаковкиХарактеристика.Видимость   = Ложь;
	КонецЕсли;
	
	Если НЕ ИспользоватьСерииНоменклатуры Тогда
		Элементы.СоставУпаковкиГруппаСерия.Видимость = Ложь;
		Элементы.СгенерироватьСерии.Видимость        = Ложь;
	Иначе
		Элементы.СгенерироватьСерии.Видимость        = ЕстьПравоДобавлениеСерий();
	КонецЕсли;
	
	Элементы.ОстаткиПродукцииGTIN.Видимость = Ложь;
	Элементы.СоставУпаковкиGTIN.Видимость   = Ложь;
	
	ВидимостьКолонкиШаблон = Не ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции)
		И (ИнтеграцияИСМПКлиентСервер.ШаблоныКодовПоВидуПродукции(ВидПродукции).Количество() > 1);
	
	Элементы.ОстаткиПродукцииШаблон.Видимость = ВидимостьКолонкиШаблон;
	Элементы.СоставУпаковкиШаблон.Видимость   = ВидимостьКолонкиШаблон;
	
	УправлениеЗависимымиОтИсторииЭлементами(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЗависимымиОтИсторииЭлементами(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.ПроизвольныйСоставУпаковки Тогда
		Элементы.ИсторическаяУпаковка.Доступность = Ложь;
		Элементы.ГруппаЦентр.Доступность          = Истина;
	Иначе
		Элементы.ИсторическаяУпаковка.Доступность = Истина;
		Элементы.ГруппаЦентр.Доступность          = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы()
	
	Если КоличествоУпаковок = 0 Тогда
		Элементы.СформироватьУпаковки.Доступность = Ложь;
	Иначе
		Элементы.СформироватьУпаковки.Доступность = Истина;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Элементы.ФормаПечать.КнопкаПоУмолчанию           = Истина;
	Иначе
		Элементы.СформироватьУпаковки.КнопкаПоУмолчанию  = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборОстатковПродукции()
	
	СтруктураОтбора = Новый Структура();
	
	Если СвободныеОстаткиПродукции Тогда
		СтруктураОтбора.Вставить("ЕстьСвободныйОстаток", Истина);
	КонецЕсли;
	
	Элементы.ОстаткиПродукции.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаголовокГиперссылкиОткрытияСпискаУпаковок()
	
	СформированоУпаковок = 0;
	
	Для Каждого СтрокаАгрегации Из ИтоговоеДеревоУпаковок.ПолучитьЭлементы() Цикл
		СформированоУпаковок = СформированоУпаковок + СтрокаАгрегации.КоличествоИтог;
	КонецЦикла;
	
	СтрокиЗаголовка = Новый Массив();
	
	Если Элементы.ГруппаСписокУпаковок.Видимость Тогда
		ТекстГиперссылки = "СкрытьСписокУпаковок";
	Иначе
		ТекстГиперссылки = "ПоказатьСписокУпаковок";
	КонецЕсли;
	
	Если СформированоУпаковок = 0 Тогда
		СтрокиЗаголовка.Добавить(Новый ФорматированнаяСтрока("Нет сформированных упаковок", ШрифтЗаголовкаГруппы, ЦветЗаголовкаГруппы,, ТекстГиперссылки));
	Иначе
		СтрокиЗаголовка.Добавить(Новый ФорматированнаяСтрока("Сформировано упаковок", ШрифтЗаголовкаГруппы, ЦветЗаголовкаГруппы,, ТекстГиперссылки));
		СтрокиЗаголовка.Добавить(Новый ФорматированнаяСтрока(" - ", ШрифтЗаголовкаГруппы, ЦветЗаголовкаГруппы));
		СтрокиЗаголовка.Добавить(Новый ФорматированнаяСтрока(Формат(СформированоУпаковок, "ЧН=0;"), ШрифтЗаголовкаГруппы, ЦветЗаголовкаГруппы));
	КонецЕсли;
	
	Элементы.ДекорацияСкрытьОткрытьСписокУпаковок.Заголовок = Новый ФорматированнаяСтрока(СтрокиЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаголовокКоличествоУпаковок()
	
	МассивПодстрок = Новый Массив();
	МассивПодстрок.Добавить(ПросклонятьУпаковку(КоличествоУпаковок));
	
	Если МаксимальноеКоличествоУпаковок > 0 Тогда
		МассивПодстрок.Добавить(НСтр("ru = 'из'"));
		МассивПодстрок.Добавить(Формат(МаксимальноеКоличествоУпаковок, "ЧДЦ=0;"));
		МассивПодстрок.Добавить(ПросклонятьВозможных(МаксимальноеКоличествоУпаковок));
	КонецЕсли;
	
	Элементы.КоличествоУпаковок.Заголовок = СтрСоединить(МассивПодстрок, " ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОтветеНаВопросПередЗакрытиемФормы(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
	КонецЕсли;

КонецПроцедуры
	
&НаКлиенте
Процедура СохранитьНастройкиФормы()
	
	СохраняемыеНастройки = Новый Структура();
	СохраняемыеНастройки.Вставить("СвободныеОстаткиПродукции",  СвободныеОстаткиПродукции);
	СохраняемыеНастройки.Вставить("ПроизвольныйСоставУпаковки", ПроизвольныйСоставУпаковки);
	СохраняемыеНастройки.Вставить("ВидимостьСпискаУпаковок",    Элементы.ГруппаСписокУпаковок.Видимость);
	
	СохранитьНастройкиФормыНаСервере(СохраняемыеНастройки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормыНаСервере(СохраняемыеНастройки)
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(
		"Обработка.ВиртуальнаяАгрегацияУпаковокИСМП.Форма.Форма",
		"", СохраняемыеНастройки);
	
КонецПроцедуры

#КонецОбласти 

#Область РасчетКоличества

&НаКлиенте
Процедура РассчитатьМаксимальноеКоличествоУпаковок()
	
	МаксимальноеКоличествоУпаковок = 0;
	
	Для Каждого СтрокаСостава Из СоставУпаковки Цикл
		Если СтрокаСостава.Количество > 0 Тогда
			СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,GTIN");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаСостава);
			
			СтрокиОстатка = ОстаткиПродукции.НайтиСтроки(СтруктураПоиска);
			Если СтрокиОстатка.Количество() Тогда
				СтрокаОстатка = СтрокиОстатка[0];
				ТекущееМаксимальноеКоличествоУпаковок = Цел(СтрокаОстатка.Количество / СтрокаСостава.Количество);
			Иначе
				ТекущееМаксимальноеКоличествоУпаковок = 0;
			КонецЕсли;
			
			Если ТекущееМаксимальноеКоличествоУпаковок = 0 Тогда
				МаксимальноеКоличествоУпаковок = 0;
				Прервать;
			ИначеЕсли МаксимальноеКоличествоУпаковок = 0 Тогда
				МаксимальноеКоличествоУпаковок = ТекущееМаксимальноеКоличествоУпаковок;
			ИначеЕсли МаксимальноеКоличествоУпаковок > ТекущееМаксимальноеКоличествоУпаковок Тогда
				МаксимальноеКоличествоУпаковок = ТекущееМаксимальноеКоличествоУпаковок;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ИзменитьКоличествоУпаковокПриНеобходимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКоличествоУпаковокПриНеобходимости()
	
	Если КоличествоУпаковок < 0 Тогда
		КоличествоУпаковок = 0;
	КонецЕсли;
	
	Если КоличествоУпаковок > МаксимальноеКоличествоУпаковок Тогда
		КоличествоУпаковок = МаксимальноеКоличествоУпаковок;
	ИначеЕсли КоличествоУпаковок = 0 И МаксимальноеКоличествоУпаковок > 0 Тогда
		КоличествоУпаковок = 1;
	КонецЕсли;
	
	СформироватьЗаголовокКоличествоУпаковок();
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОстатокПоДокументу()
	
	Для Каждого СтрокаОстатка Из ОстаткиПродукции Цикл
		СтрокаОстатка.Остаток = СтрокаОстатка.Количество;
	КонецЦикла;
	
	Для Каждого СтрокаСостава Из СоставУпаковки Цикл
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,GTIN");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаСостава);
		
		СтрокиОстатка = ОстаткиПродукции.НайтиСтроки(СтруктураПоиска);
		Если СтрокиОстатка.Количество() Тогда
			СтрокаОстатка = СтрокиОстатка[0];
			СтрокаОстатка.Остаток = СтрокаОстатка.Количество - КоличествоУпаковок * СтрокаСостава.Количество;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьКоличествоСвободногоОстатка()
	
	Для Каждого СтрокаОстатка Из ОстаткиПродукции Цикл
		СтрокаОстатка.Количество = СтрокаОстатка.Остаток;
		СтрокаОстатка.ЕстьСвободныйОстаток = СтрокаОстатка.Количество > 0;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьКоличествоОстатка(УдаляемаяАгрегация)
	
	СтрокиСостава = УдаляемаяАгрегация.ПолучитьЭлементы();
	
	Для Каждого СтрокаСостава Из СтрокиСостава Цикл
		УвеличитьКоличествоОстаткаПоПродукции(СтрокаСостава, СтрокаСостава.КоличествоИтог);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьКоличествоОстаткаПоПродукции(СтрокаПродукции, РазупакованноеКоличество = 1)
	
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,GTIN");
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПродукции);
	
	СтрокиОстатка = ОстаткиПродукции.НайтиСтроки(СтруктураПоиска);
	Если СтрокиОстатка.Количество() Тогда
		
		СтрокаОстатка                      = СтрокиОстатка[0];
		СтрокаОстатка.Остаток              = СтрокаОстатка.Остаток              + РазупакованноеКоличество;
		СтрокаОстатка.Количество           = СтрокаОстатка.Количество           + РазупакованноеКоличество;
		СтрокаОстатка.КоличествоВУпаковках = СтрокаОстатка.КоличествоВУпаковках - РазупакованноеКоличество;
		СтрокаОстатка.ЕстьСвободныйОстаток = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСоставУпаковки()
	
	СоставУпаковки.Очистить();
	МаксимальноеКоличествоУпаковок = 0;
	КоличествоУпаковок = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьКоличествоВУпаковках(СтрокаАгрегации)
	
	Если Не ПустаяСтрока(СтрокаАгрегации.ХешСуммаУпаковки) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаСостава Из СтрокаАгрегации.ПолучитьЭлементы() Цикл
		
		УвеличитьКоличествоВУпаковкахПоПродукции(СтрокаСостава, СтрокаСостава.КоличествоИтог);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьКоличествоВУпаковкахПоПродукции(СтрокаПродукции, УпакованноеКоличество = 1)
	
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,GTIN");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПродукции);
	
	СтрокиОстатка = ОстаткиПродукции.НайтиСтроки(СтруктураПоиска);
	Если СтрокиОстатка.Количество() Тогда
		СтрокаОстатка = СтрокиОстатка[0];
		СтрокаОстатка.КоличествоВУпаковках = СтрокаОстатка.КоличествоВУпаковках + УпакованноеКоличество;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ПервоначальноеЗаполнение
	
&НаСервере
Процедура ОбработатьИПроверитьПереданныеПараметры(Отказ)
	
	Если Не ЗначениеЗаполнено(Параметры.Документ) Тогда
		ТекстОшибки = НСтр("ru = 'В форму агрегации не передан документ.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);
		Возврат;
	КонецЕсли;
	
	ЭтоЗаказНаЭмиссию = ТипЗнч(Параметры.Документ) = Тип("ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ");
	ВидПродукции      = Параметры.ВидПродукции;
	
	Если Не ЗначениеЗаполнено(ВидПродукции) И ЭтоЗаказНаЭмиссию Тогда
		ВидПродукции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Документ, "ВидПродукции");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидПродукции) Тогда
		ТекстОшибки = НСтр("ru = 'В форму агрегации не передан вид маркируемой продукции.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПулКодовМаркировки.КодМаркировки
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировки
	|ГДЕ
	|	ПулКодовМаркировки." + ?(ЭтоЗаказНаЭмиссию, "ЗаказНаЭмиссию", "ДокументОснование") + " = &Документ
	|	И ВидПродукции = &ВидПродукции
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Документ", Параметры.Документ);
	Запрос.УстановитьПараметр("ВидПродукции", ВидПродукции);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Если ЭтоЗаказНаЭмиссию Тогда
			Если ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Документ, "СервисПровайдер")) Тогда
				ТекстОшибки = НСтр("ru = 'По заказу ""%1"" для %2 эмиссия кодов осуществляется сервис-провайдером.'");
			Иначе
				ТекстОшибки = НСтр("ru = 'По заказу ""%1"" для %2 эмиссия кодов еще не выполнена.'");
			КонецЕсли;
		Иначе
			ТекстОшибки = НСтр("ru = 'По документу ""%1"" для %2 отсутствуют исполненные заказы на эмиссию кодов маркировки.'");
		КонецЕсли;
		
		ВидПродукцииРодительный = НРег(ПолучитьСклоненияСтроки(ВидПродукции, "Л=ru_RU", "ПД=Родительный")[0]);
		ТекстОшибки = СтрШаблон(ТекстОшибки, Параметры.Документ, ВидПродукцииРодительный);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);
	Иначе
		Документ = Параметры.Документ;
		
		Если ИспользоватьСерииНоменклатуры Тогда
			Если ЭтоЗаказНаЭмиссию Тогда
				ОснованиеЗаказаНаЭмиссию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ДокументОснование");
			Иначе
				ОснованиеЗаказаНаЭмиссию = Документ;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОснованиеЗаказаНаЭмиссию) Тогда
				ИнтеграцияИСМППереопределяемый.ПриОпределенииСкладаДокументаОснования(Склад, ОснованиеЗаказаНаЭмиссию);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСохраненныеНастройки()
	
	СохраненныеНастройки = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("Обработка.ВиртуальнаяАгрегацияУпаковокИСМП.Форма.Форма", "");
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура")
		И СохраненныеНастройки.Свойство("СвободныеОстаткиПродукции") Тогда
		СвободныеОстаткиПродукции = СохраненныеНастройки.СвободныеОстаткиПродукции;
	Иначе
		СвободныеОстаткиПродукции = Истина;
	КонецЕсли;
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура")
		И СохраненныеНастройки.Свойство("ПроизвольныйСоставУпаковки") Тогда
		ПроизвольныйСоставУпаковки = СохраненныеНастройки.ПроизвольныйСоставУпаковки;
	Иначе
		ПроизвольныйСоставУпаковки = Истина;
	КонецЕсли;
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура")
		И СохраненныеНастройки.Свойство("ВидимостьСпискаУпаковок") Тогда
		Элементы.ГруппаСписокУпаковок.Видимость = СохраненныеНастройки.ВидимостьСпискаУпаковок;
	Иначе
		Элементы.ГруппаСписокУпаковок.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеЗаполнения()
	
	ДлительнаяОперация = НачатьПолучениеДанныхЗаполнения();
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучениеДанныхЗаполненияЗавершение", ЭтотОбъект);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Получение данных заполнения.'");
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция НачатьПолучениеДанныхЗаполнения()
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Документ",     Документ);
	ПараметрыПроцедуры.Вставить("ВидПродукции", ВидПродукции);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение данных заполнения формы виртуальной агрегации.'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыПроцедуры, ПараметрыВыполнения);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.ВиртуальнаяАгрегацияУпаковокИСМП.ПолучитьДанныеЗаполнения",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ПолучениеДанныхЗаполненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда  // отменено пользователем
		Закрыть();
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		ПолучениеДанныхЗаполненияЗавершениеНаСервере(Результат.АдресРезультата);
		
		Если Элементы.ИсторическаяУпаковка.СписокВыбора.Количество() > 0 Тогда
			ИсторическаяУпаковка = Элементы.ИсторическаяУпаковка.СписокВыбора[0].Значение;
			
			Если НЕ ПроизвольныйСоставУпаковки И ЗначениеЗаполнено(ИсторическаяУпаковка) Тогда
				ПриИзмененииИсторическойУпаковки();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучениеДанныхЗаполненияЗавершениеНаСервере(АдресРезультата)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		ДанныеЗаполнения = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			Если ДанныеЗаполнения.Свойство("ОстаткиПродукции") Тогда
				ЗначениеВРеквизитФормы(ДанныеЗаполнения.ОстаткиПродукции, "ОстаткиПродукции");
				ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, ОстаткиПродукции);
			КонецЕсли;
			
			Если ДанныеЗаполнения.Свойство("СуществующиеУпаковки") Тогда
				ДобавитьСуществующиеУпаковкиВИтоговоеДеревоУпаковок(ДанныеЗаполнения.СуществующиеУпаковки);
			КонецЕсли;
			
			Если ДанныеЗаполнения.Свойство("СоставИсторическихУпаковок") Тогда
				ЗначениеВРеквизитФормы(ДанныеЗаполнения.СоставИсторическихУпаковок, "СоставИсторическихУпаковок");
			КонецЕсли;
			
			Если ДанныеЗаполнения.Свойство("СписокИсторическихУпаковок") Тогда
				Для Каждого ЭлементСписка Из ДанныеЗаполнения.СписокИсторическихУпаковок Цикл
					Элементы.ИсторическаяУпаковка.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ВидимостьGTIN = Ложь;
		
		Для Каждого СтрокаТаблицы Из ОстаткиПродукции Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.GTIN) Тогда
				ВидимостьGTIN = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Элементы.ОстаткиПродукцииGTIN.Видимость = ВидимостьGTIN;
		Элементы.СоставУпаковкиGTIN.Видимость   = ВидимостьGTIN;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСуществующиеУпаковкиВИтоговоеДеревоУпаковок(СуществующиеУпаковки)
	
	Для Каждого СтрокаУпаковки Из СуществующиеУпаковки.Строки Цикл
		НоваяАгрегация = ИтоговоеДеревоУпаковок.ПолучитьЭлементы().Добавить();
		НоваяАгрегация.Содержимое       = СтрокаУпаковки.Содержимое;
		НоваяАгрегация.КоличествоИтог   = СтрокаУпаковки.Количество;
		НоваяАгрегация.Упаковка         = ПросклонятьЕдиницу(СтрокаУпаковки.Количество, ВидПродукции);
		НоваяАгрегация.ХешСуммаУпаковки = СтрокаУпаковки.ХешСуммаУпаковки;
		
		Для Каждого СтрокаПродукции Из СтрокаУпаковки.Строки Цикл
			НоваяАгрегация.Количество = НоваяАгрегация.Количество + СтрокаПродукции.Количество;

			НоваяПродукция = НоваяАгрегация.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяПродукция, СтрокаПродукции);

			НоваяПродукция.КоличествоИтог   = СтрокаУпаковки.Количество * СтрокаПродукции.Количество;
			НоваяПродукция.Упаковка         = ПросклонятьЕдиницу(НоваяПродукция.КоличествоИтог, ВидПродукции);
			НоваяПродукция.ХешСуммаУпаковки = СтрокаУпаковки.ХешСуммаУпаковки;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ЗаполнениеизИстории

&НаКлиенте
Процедура ПриИзмененииИсторическойУпаковки()
	
	ОчиститьСоставУпаковки();
	
	Если ЗначениеЗаполнено(ИсторическаяУпаковка) Тогда
		Для Каждого СтрокаУпаковки Из СоставИсторическихУпаковок.ПолучитьЭлементы() Цикл
			Если СтрокаУпаковки.ХешСуммаУпаковки = ИсторическаяУпаковка Тогда
				Для Каждого СтрокаПродукции Из СтрокаУпаковки.ПолучитьЭлементы() Цикл
					НоваяПродукция = СоставУпаковки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяПродукция, СтрокаПродукции);
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РассчитатьМаксимальноеКоличествоУпаковок();
	РассчитатьОстатокПоДокументу();
	
	ПриИзмененииИсторическойУпаковкиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииИсторическойУпаковкиНаСервере()
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(СоставУпаковки);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, СоставУпаковки);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
КонецПроцедуры

#КонецОбласти 

#Область ФормированиеУпаковок

&НаКлиенте
Процедура ДобавитьНовуюУпаковкуВИтоговоеДеревоУпаковок()
	
	ЭлементыДерева = ИтоговоеДеревоУпаковок.ПолучитьЭлементы();
	
	СтрокаАгрегации = ЭлементыДерева.Вставить(0);
	СтрокаАгрегации.Количество     = СоставУпаковки.Итог("Количество");
	СтрокаАгрегации.КоличествоИтог = КоличествоУпаковок;
	СтрокаАгрегации.Упаковка       = ПросклонятьУпаковку(КоличествоУпаковок);
	СтрокаАгрегации.ТипШтрихкода   = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC");
	
	СодержимоеУпаковки = Новый Массив;
	
	Для Каждого СтрокаСоставаУпаковки Из СоставУпаковки Цикл
		
		Если СтрокаСоставаУпаковки.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СоставАгрегации = СтрокаАгрегации.ПолучитьЭлементы();
		СтрокаПродукции = Неопределено;
		
		Для Каждого СтрокаСоставаАгрегации Из СоставАгрегации Цикл
			Если СтрокаСоставаАгрегации.Номенклатура = СтрокаСоставаУпаковки.Номенклатура
				И СтрокаСоставаАгрегации.Характеристика = СтрокаСоставаУпаковки.Характеристика
				И СтрокаСоставаАгрегации.Серия = СтрокаСоставаУпаковки.Серия
				И СтрокаСоставаАгрегации.GTIN = СтрокаСоставаУпаковки.GTIN Тогда
				СтрокаПродукции = СтрокаСоставаАгрегации;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаПродукции = Неопределено Тогда
			
			СтрокаПродукции = СоставАгрегации.Добавить();
			
			ЗаполнитьЗначенияСвойств(
				СтрокаПродукции, СтрокаСоставаУпаковки,
				"Номенклатура, Характеристика, Серия, GTIN, Шаблон, ПредставлениеНоменклатуры");
			
			ПредставлениеНоменклатуры = ИнтеграцияИСМПКлиентСервер.ПредставлениеGTINОстаткиПоВидуПродукции(
				СтрокаПродукции.ПредставлениеНоменклатуры, ВидПродукции);
			
			СтрокаПродукции.Содержимое = ПредставлениеНоменклатуры(
				СтрокаПродукции.Номенклатура, СтрокаПродукции.Характеристика, СтрокаПродукции.Серия,
				ПредставлениеНоменклатуры);
			
			Если ЗначениеЗаполнено(СтрокаСоставаУпаковки.Номенклатура) Тогда
				
				ЭлементСодержимого = Новый Структура("Номенклатура, Характеристика, Серия, Количество");
				ЭлементСодержимого.Номенклатура   = СтрокаСоставаУпаковки.Номенклатура;
				ЭлементСодержимого.Характеристика = СтрокаСоставаУпаковки.Характеристика;
				ЭлементСодержимого.Серия          = СтрокаСоставаУпаковки.Серия;
				ЭлементСодержимого.Количество     = СтрокаСоставаУпаковки.Количество;
				
				СодержимоеУпаковки.Добавить(ЭлементСодержимого);
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаПродукции.Содержимое) Тогда
				
				ЭлементСодержимого = Новый Структура("Номенклатура, Характеристика, Серия, Количество");
				ЭлементСодержимого.Номенклатура = СтрокаПродукции.Содержимое;
				ЭлементСодержимого.Количество   = СтрокаСоставаУпаковки.Количество;
				
				СодержимоеУпаковки.Добавить(ЭлементСодержимого);
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаПродукции.Количество     = СтрокаПродукции.Количество + СтрокаСоставаУпаковки.Количество;
		СтрокаПродукции.КоличествоИтог = СтрокаПродукции.КоличествоИтог + СтрокаСоставаУпаковки.Количество * КоличествоУпаковок;
		СтрокаПродукции.Упаковка       = ПросклонятьУпаковку(СтрокаПродукции.КоличествоИтог);
		
	КонецЦикла;
	
	СтрокаАгрегации.Содержимое = ПредставлениеСоставаУпаковки(СодержимоеУпаковки);
	
	УвеличитьКоличествоВУпаковках(СтрокаАгрегации);
	
	Если ПредыдущиеШтрихкоды = Неопределено Тогда
		ОткрытьФормуГенерацииШтрихкодов(СтрокаАгрегации);
	Иначе
		ЗаполнитьПараметрыГенерацииШтрихкодов(СтрокаАгрегации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеНоменклатуры(Номенклатура, Характеристика, Серия, ПоУмолчанию = Неопределено)
	
	Возврат ИнтеграцияИС.ПредставлениеНоменклатуры(Номенклатура, Характеристика,, Серия, ПоУмолчанию);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеСоставаУпаковки(ВходящиеДанные)
	
	СодержимоеУпаковки = ИнтеграцияИС.ИнициализироватьСодержимоеУпаковки();
	
	Для Каждого ЭлементМассива Из ВходящиеДанные Цикл
		
		ЭлементСодержимого = СодержимоеУпаковки.Добавить();
		
		ЭлементСодержимого.Номенклатура = ЭлементМассива.Номенклатура;
		
		Если ЗначениеЗаполнено(ЭлементМассива.Характеристика) Тогда
			ЭлементСодержимого.Характеристика = ЭлементМассива.Характеристика;
		Иначе
			ЭлементСодержимого.Характеристика = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементМассива.Серия) Тогда
			ЭлементСодержимого.Серия = ЭлементМассива.Серия;
		Иначе
			ЭлементСодержимого.Серия = "";
		КонецЕсли;
		
		ЭлементСодержимого.Количество = ЭлементМассива.Количество;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТь
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Серия КАК Серия,
	|	Т.Количество КАК Количество
	|ПОМЕСТИТЬ ВтСодержимоеУпаковки
	|ИЗ
	|	&СодержимоеУпаковки КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Т.Номенклатура) = ТИП(Строка)
	|			ТОГДА Т.Номенклатура
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕССЫЛКИ(Т.Номенклатура)
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Т.Характеристика) = ТИП(Строка)
	|			ТОГДА Т.Характеристика
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕССЫЛКИ(Т.Характеристика)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Т.Серия) = ТИП(Строка)
	|			ТОГДА Т.Серия
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕССЫЛКИ(Т.Серия)
	|	КОНЕЦ КАК Серия,
	|	Т.Количество КАК Количество
	|ИЗ
	|	ВтСодержимоеУпаковки КАК Т
	|УПОРЯДОЧИТЬ ПО
	|	Количество УБЫВ,
	|	Номенклатура ВОЗР,
	|	Характеристика ВОЗР,
	|	Серия ВОЗР");
	
	Запрос.Параметры.Вставить("СодержимоеУпаковки", СодержимоеУпаковки);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат ИнтеграцияИС.ПредставлениеСоставаУпаковки(Таблица);
	
КонецФункции

&НаКлиенте
Процедура ПриОповещенииОФормированииУпаковок(ДополнительныеПараметры) Экспорт
	
	ДекорацияСкрытьОткрытьСписокУпаковокОбработкаНавигационнойСсылки(Элементы.ДекорацияСкрытьОткрытьСписокУпаковок, "ПоказатьСписокУпаковок", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ГенерацияШтрихкодовУпаковок

&НаКлиенте
Процедура ОткрытьФормуГенерацииШтрихкодов(СтрокаАгрегации)

	ДоступныеТипыШтрихкодовСтрокой = ПроверкаИПодборПродукцииИСМПКлиент.ДоступныеТипыШтрихкодовСтрокой();
	
	Если ЗначениеЗаполнено(СтрокаАгрегации.ТипШтрихкода) Тогда
		ТекущийТипШтрихкода = СтрокаАгрегации.ТипШтрихкода;
	Иначе
		ТекущийТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC");
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("РежимУказанияПараметровГенерации", Истина);
	ПараметрыОткрытияФормы.Вставить("АдресПредыдущихШтрихкодов",        АдресПредыдущихШтрихкодов);
	ПараметрыОткрытияФормы.Вставить("КоличествоВложенныхЕдиниц",        СтрокаАгрегации.Количество);
	ПараметрыОткрытияФормы.Вставить("ДоступныеТипыШтрихкодовСтрокой",   ДоступныеТипыШтрихкодовСтрокой);
	ПараметрыОткрытияФормы.Вставить("ТипШтрихкода",                     ТекущийТипШтрихкода);
	
	СоставАгрегации = СтрокаАгрегации.ПолучитьЭлементы();
	
	Если СоставАгрегации.Количество() = 1 Тогда
		ПараметрыОткрытияФормы.Вставить("ТипУпаковки", ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка"));
		ПараметрыОткрытияФормы.Вставить("Номенклатура", СоставАгрегации[0].Номенклатура);
		ПараметрыОткрытияФормы.Вставить("Характеристика", СоставАгрегации[0].Характеристика);
	Иначе
		ПараметрыОткрытияФормы.Вставить("ТипУпаковки", ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка"));
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("СтрокаАгрегации", СтрокаАгрегации);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриГенерацииШтрихкодаУпаковки", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.ГенерацияШтрихкодовУпаковок.Форма.Форма", ПараметрыОткрытияФормы, ЭтотОбъект,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриГенерацииШтрихкодаУпаковки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли ПустаяСтрока(Результат.Штрихкод) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Упаковкам не может быть назначен пустой штрихкод.'"));
		Возврат;
	ИначеЕсли Результат.ТипШтрихкода <> ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Типы штрихкодов, отличные от SSCC, не поддерживаются.'"));
		Возврат;
	ИначеЕсли ТипЗнч(ДополнительныеПараметры) <> Тип("Структура") Тогда
		Возврат;
	ИначеЕсли НЕ ДополнительныеПараметры.Свойство("СтрокаАгрегации") Тогда
		Возврат;
	КонецЕсли;
	
	АдресПредыдущихШтрихкодов = Результат.АдресПредыдущихШтрихкодов;
	
	ПриГенерацииШтрихкодаУпаковкиНаСервере();
	
	ЗаполнитьПараметрыГенерацииШтрихкодов(ДополнительныеПараметры.СтрокаАгрегации);
	
	Если Результат.ЗапомнитьПараметрыГенерации Тогда
		СформироватьЗаголовокСохраненныхПараметровГенерацииШтрихкодов();
	Иначе
		ОчиститьПредыдущиеШтрихкоды();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриГенерацииШтрихкодаУпаковкиНаСервере()
	
	Если ЭтоАдресВременногоХранилища(АдресПредыдущихШтрихкодов) Тогда
		ДанныеПредыдущихШтрихкодов = ПолучитьИзВременногоХранилища(АдресПредыдущихШтрихкодов);
		Если ТипЗнч(ДанныеПредыдущихШтрихкодов) = Тип("Соответствие") Тогда
			ПредыдущиеШтрихкоды = Новый ФиксированноеСоответствие(ДанныеПредыдущихШтрихкодов);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыГенерацииШтрихкодов(СтрокаАгрегации)

	СтрокаАгрегации.ТипШтрихкода   = ПоследнийТипШтрихкода();
	СтрокаАгрегации.КлючНумератора = ПоследнийКлючНумератора(СтрокаАгрегации.ТипШтрихкода);
	
	СформироватьПредставлениеПараметровГенерациШтрихкодов(СтрокаАгрегации);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставлениеПараметровГенерациШтрихкодов(СтрокаАгрегации)
	
	ПредставлениеШтрихкода = "";
	
	Если СтрокаАгрегации.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC") Тогда
		ПредставлениеШтрихкода = СтрокаАгрегации.КлючНумератора;
		Пока СтрДлина(ПредставлениеШтрихкода) < 18 Цикл
			ПредставлениеШтрихкода = ПредставлениеШтрихкода + "x";
		КонецЦикла;
		ПредставлениеШтрихкода = "(00)" + ПредставлениеШтрихкода;
	КонецЕсли;
	
	ПредставленияПараметров = Новый Массив();
	ПредставленияПараметров.Добавить(Строка(СтрокаАгрегации.ТипШтрихкода));
	
	Если НЕ ПустаяСтрока(ПредставлениеШтрихкода) Тогда
		ПредставленияПараметров.Добавить(",");
		ПредставленияПараметров.Добавить(" ");
		ПредставленияПараметров.Добавить(ПредставлениеШтрихкода);
	КонецЕсли;
	
	СтрокаАгрегации.ПараметрыГенерацииШтрихкодов = СтрСоединить(ПредставленияПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПредыдущиеШтрихкоды()
	
	ПредыдущиеШтрихкоды = Неопределено;
	АдресПредыдущихШтрихкодов = "";
	
	СформироватьЗаголовокСохраненныхПараметровГенерацииШтрихкодов();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаголовокСохраненныхПараметровГенерацииШтрихкодов()
	
	СтрокиЗаголовка = Новый Массив();
	
	Если ПредыдущиеШтрихкоды = Неопределено Тогда
		СтрокиЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Параметры генерации штрихкодов не сохранены'"),, ЦветНеТребуетВнимания));
	Иначе
		ТипШтрихкода   = ПоследнийТипШтрихкода();
		КлючНумератора = ПоследнийКлючНумератора(ТипШтрихкода);
		
		СтрокиЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Текущие параметры генерации штрихкодов'"),, ЦветГиперссылки));
		СтрокиЗаголовка.Добавить(": ");
		СтрокиЗаголовка.Добавить(Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru = 'тип %1'"), ТипШтрихкода),, ЦветГиперссылки));
		СтрокиЗаголовка.Добавить(", ");
		
		Если ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC") Тогда
			ЦифраРасширения    = Лев(КлючНумератора, 1);
			ПрефиксКомпанииGS1 = Сред(КлючНумератора, 2);
			
			СтрокиЗаголовка.Добавить(Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru = 'цифра расширения %1'"), ЦифраРасширения),, ЦветГиперссылки));
			СтрокиЗаголовка.Добавить(", ");
			СтрокиЗаголовка.Добавить(Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru = 'префикс компании GS1 %1'"), ПрефиксКомпанииGS1),, ЦветГиперссылки));
		КонецЕсли;
		
		СтрокиЗаголовка.Добавить(". ");
		СтрокиЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Очистить параметры'"),, ЦветГиперссылки,, "ОчиститьПредыдущиеШтрихкоды"));
	КонецЕсли;
	
	Элементы.ДекорацияПараметрыГенерацииШтрихкодов.Заголовок = Новый ФорматированнаяСтрока(СтрокиЗаголовка);
		
КонецПроцедуры

&НаКлиенте
Функция ПоследнийТипШтрихкода()
	
	Возврат ПредыдущиеШтрихкоды["ПоследнийТипШтрихкода"];
	
КонецФункции

&НаКлиенте
Функция ПоследнийКлючНумератора(ТипШтрихкода);
	
	КлючНумератора = "";
	
	Если ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC") Тогда
		КлючНумератора = СтрЗаменить(ПредыдущиеШтрихкоды["ПоследнийКлючНумератора"], "SSCC", "");
	КонецЕсли;
	
	Возврат КлючНумератора;
	
КонецФункции

#КонецОбласти

#Область УдалениеУпаковок

&НаКлиенте
Процедура УдалитьУпаковкуИзИтоговогоДереваУпаковок(УдаляемыеДанные)
	
	УдаляемаяАгрегация = УдаляемыеДанные;
	
	Пока УдаляемаяАгрегация.ПолучитьРодителя() <> Неопределено Цикл
		УдаляемаяАгрегация = УдаляемаяАгрегация.ПолучитьРодителя();
	КонецЦикла;
	
	УвеличитьКоличествоОстатка(УдаляемаяАгрегация);
	
	ЭлементыДерева = ИтоговоеДеревоУпаковок.ПолучитьЭлементы();
	ЭлементыДерева.Удалить(УдаляемаяАгрегация);
	
	Если ЭлементыДерева.Количество() = 0 Тогда
		Модифицированность = Ложь;
	ИначеЕсли НЕ ПустаяСтрока(ЭлементыДерева[0].ХешСуммаУпаковки) Тогда
		Модифицированность = Ложь;
	КонецЕсли;
	
	СформироватьЗаголовокГиперссылкиОткрытияСпискаУпаковок();
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьУдаленияЗаписаннойУпаковки(УдаляемыеДанные)
	
	КодыУпаковкиРаспечатаны = КодыУпаковкиРаспечатаны(Документ, УдаляемыеДанные.ХешСуммаУпаковки);
	
	Если КодыУпаковкиРаспечатаны Тогда
		ТекстПредупреждения = НСтр("ru = 'Нельзя удалять упаковки, для которых уже распечатаны коды маркировки.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	Иначе
		ТекстВопроса = НСтр("ru = 'Текущие упаковки уже записаны в систему. Все равно удалить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриОтветеНаВопросПередУдалениемУпаковок", ЭтотОбъект, УдаляемыеДанные);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КодыУпаковкиРаспечатаны(Документ, ХешСуммаУпаковки)
	
	ЭтоЗаказНаЭмиссию = ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ");
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировки
	|ГДЕ
	|	ПулКодовМаркировки." + ?(ЭтоЗаказНаЭмиссию, "ЗаказНаЭмиссию", "ДокументОснование") + " = &Документ
	|	И ПулКодовМаркировки.ХешСуммаУпаковки = &ХешСуммаУпаковки
	|	И ПулКодовМаркировки.ДатаПечатиУниверсальная <> ДАТАВРЕМЯ(1, 1, 1)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ХешСуммаУпаковки", ХешСуммаУпаковки);
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

&НаКлиенте
Процедура ПриОтветеНаВопросПередУдалениемУпаковок(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДлительнаяОперация = НачатьУдалениеУпаковок(ДополнительныеПараметры.ХешСуммаУпаковки);
		ОповещениеОЗавершении = Новый ОписаниеОповещения("УдалениеУпаковокЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Удаление сформированных упаковок.'");
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НачатьУдалениеУпаковок(ХешСуммаУпаковки)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Документ", Документ);
	ПараметрыПроцедуры.Вставить("ХешСуммаУпаковки", ХешСуммаУпаковки);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Удаление сформированных обувных упаковок.'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыПроцедуры, ПараметрыВыполнения);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.ВиртуальнаяАгрегацияУпаковокИСМП.УдалитьУпаковки",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура УдалениеУпаковокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда  // отменено пользователем
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		УдалитьУпаковкуИзИтоговогоДереваУпаковок(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ЗаписьСформированныхУпаковок

&НаСервере
Функция НачатьЗаписьУпаковок()
	
	ТаблицаАгрегаций = Новый ТаблицаЗначений();
	ТаблицаАгрегаций.Колонки.Добавить("ИдентификаторСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ТаблицаАгрегаций.Колонки.Добавить("КоличествоУпаковок",  ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ТаблицаАгрегаций.Колонки.Добавить("СоставУпаковок",      Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаАгрегаций.Колонки.Добавить("КлючНумератора",      ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаАгрегаций.Колонки.Добавить("ТипШтрихкода",        Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));	
	
	Для Каждого СтрокаАгрегации Из ИтоговоеДеревоУпаковок.ПолучитьЭлементы() Цикл
		Если ПустаяСтрока(СтрокаАгрегации.ХешСуммаУпаковки) Тогда
			НоваяАгрегация = ТаблицаАгрегаций.Добавить();
			НоваяАгрегация.ИдентификаторСтроки = СтрокаАгрегации.ПолучитьИдентификатор();
			НоваяАгрегация.КоличествоУпаковок  = СтрокаАгрегации.КоличествоИтог;
			НоваяАгрегация.КлючНумератора      = СтрокаАгрегации.КлючНумератора;
			НоваяАгрегация.ТипШтрихкода        = СтрокаАгрегации.ТипШтрихкода;
		
			ТаблицаСостава = Обработки.ВиртуальнаяАгрегацияУпаковокИСМП.НоваяСоставУпаковки();
	
			Для Каждого СтрокаСостава Из СтрокаАгрегации.ПолучитьЭлементы() Цикл
				Если СтрокаСостава.Количество > 0 Тогда
					ЗаполнитьЗначенияСвойств(ТаблицаСостава.Добавить(), СтрокаСостава);
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаСостава.Свернуть("Номенклатура,Характеристика,Серия,GTIN,Шаблон", "Количество");
			НоваяАгрегация.СоставУпаковок = ТаблицаСостава;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Документ", Документ);
	ПараметрыПроцедуры.Вставить("ТаблицаАгрегаций", ТаблицаАгрегаций);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Запись сформированных обувных упаковок.'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыПроцедуры, ПараметрыВыполнения);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.ВиртуальнаяАгрегацияУпаковокИСМП.ЗаписатьУпаковки",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ЗаписьУпаковокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда  // отменено пользователем
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
		ЗаписьУпаковокЗавершениеНаСервере(Результат.АдресРезультата);
		
		СформироватьЗаголовокГиперссылкиОткрытияСпискаУпаковок();
		УстановитьДоступностьЭлементовФормы();
		
		ОткрытьФормуПечати();
		Модифицированность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписьУпаковокЗавершениеНаСервере(АдресРезультата)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		ТаблицаАгрегаций = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ТипЗнч(ТаблицаАгрегаций) = Тип("ТаблицаЗначений") Тогда
			Для Каждого СтрокаАгрегации Из ТаблицаАгрегаций Цикл
				УстановитьПризнакУпаковкаЗаписана(СтрокаАгрегации.ИдентификаторСтроки, СтрокаАгрегации.ХешСуммаУпаковки);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакУпаковкаЗаписана(ИдентификаторСтроки, ХешСуммаУпаковки)
	
	СтрокаАгрегации = ИтоговоеДеревоУпаковок.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если СтрокаАгрегации <> Неопределено Тогда
		СтрокаАгрегации.ХешСуммаУпаковки             = ХешСуммаУпаковки;
		СтрокаАгрегации.ПараметрыГенерацииШтрихкодов = "";
		СтрокаАгрегации.КлючНумератора               = "";
		СтрокаАгрегации.ТипШтрихкода                 = Неопределено;

		Для Каждого СтрокаСостава Из СтрокаАгрегации.ПолучитьЭлементы() Цикл
			СтрокаСостава.ХешСуммаУпаковки = ХешСуммаУпаковки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ПечатьУпаковок

&НаКлиенте
Процедура ОткрытьФормуПечати()
	
	ПараметрыФормыПечати = Новый Структура();
	ПараметрыФормыПечати.Вставить("Документ", Документ);
	ПараметрыФормыПечати.Вставить("ТолькоАгрегированныеКоды", Истина);
	
	ОповещениеПриЗакрытии = Новый ОписаниеОповещения("ПриЗакрытииФормыПечати", ЭтотОбъект);
	
	ОткрытьФорму("РегистрСведений.ПулКодовМаркировкиСУЗ.Форма.ФормаПечати",
		ПараметрыФормыПечати, ЭтотОбъект,,,, ОповещениеПриЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыПечати(Результат, ДополнительныеПараметры) Экспорт
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

#КонецОбласти 

#Область Серии

&НаСервереБезКонтекста
Функция ЕстьПравоДобавлениеСерий()
	
	Возврат ПроверкаИПодборПродукцииИСМП.ЕстьПравоДобавлениеСерий();
	
КонецФункции

&НаКлиенте
Процедура СгенерироватьСерииСоставаУпаковки()
	
	ДанныеДляГенерацииСерий = ПроверкаИПодборПродукцииИСМПКлиент.ДанныеДляГенерацииСерийПоПодобраннойПродукции(
		СоставУпаковки, ВидПродукции, "Количество");
	
	СгенерироватьСерииНаСервере(ДанныеДляГенерацииСерий, ВидПродукции);
	
	ПроверкаИПодборПродукцииИСМПКлиент.ЗаполнитьСерииВПодобраннойМаркируемойПродукции(
		ЭтотОбъект, ДанныеДляГенерацииСерий, СоставУпаковки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СгенерироватьСерииНаСервере(ДанныеДляГенерацииСерий, ВидПродукции)
	
	ИнтеграцияИСМП.СгенерироватьСерии(ДанныеДляГенерацииСерий, ВидПродукции);
	
КонецПроцедуры

#КонецОбласти 

&НаКлиентеНаСервереБезКонтекста
Функция ПросклонятьУпаковку(Количество)
	
	СклоненияСлова = НовыйСклоненияСлова();
	СклоненияСлова.ИменительныйЕдЧисло = НСтр("ru = 'упаковка'");
	СклоненияСлова.ИменительныйМнЧисло = НСтр("ru = 'упаковки'");
	СклоненияСлова.РодительныйМнЧисло  = НСтр("ru = 'упаковок'");
	
	Возврат ПросклонятьПоКоличеству(Количество, СклоненияСлова);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПросклонятьЕдиницу(Количество, ВидПродукции)
	
	СклоненияСлова = НовыйСклоненияСлова();
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь") Тогда
		СклоненияСлова.ИменительныйЕдЧисло = НСтр("ru = 'пара'");
		СклоненияСлова.ИменительныйМнЧисло = НСтр("ru = 'пары'");
		СклоненияСлова.РодительныйМнЧисло  = НСтр("ru = 'пар'");
	Иначе
		СклоненияСлова.ИменительныйЕдЧисло = НСтр("ru = 'единица'");
		СклоненияСлова.ИменительныйМнЧисло = НСтр("ru = 'единицы'");
		СклоненияСлова.РодительныйМнЧисло  = НСтр("ru = 'единиц'");
	КонецЕсли;
	
	Возврат ПросклонятьПоКоличеству(Количество, СклоненияСлова);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПросклонятьВозможных(Количество)
	
	СклоненияСлова = НовыйСклоненияСлова();
	СклоненияСлова.ИменительныйЕдЧисло = НСтр("ru = 'возможной'");
	СклоненияСлова.ИменительныйМнЧисло = НСтр("ru = 'возможных'");
	СклоненияСлова.РодительныйМнЧисло  = НСтр("ru = 'возможных'");
	
	Возврат ПросклонятьПоКоличеству(Количество, СклоненияСлова);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НовыйСклоненияСлова()
	
	СклоненияСлова = Новый Структура();
	СклоненияСлова.Вставить("ИменительныйЕдЧисло");
	СклоненияСлова.Вставить("ИменительныйМнЧисло");
	СклоненияСлова.Вставить("РодительныйМнЧисло");
	
	Возврат СклоненияСлова;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПросклонятьПоКоличеству(Количество, СклоненияСлова)
	
	Если Количество = 0 Тогда
		Возврат СклоненияСлова.РодительныйМнЧисло;
	КонецЕсли;
	
	СтрокаКоличество = Формат(Количество, "ЧДЦ=0;");
	
	ПоследнийСимволКоличества     = Прав(СтрокаКоличество, 1);
	ДваПоследнихСимволаКоличества = Прав(СтрокаКоличество, 2);
	
	Если ДваПоследнихСимволаКоличества = "11"
	 Или ДваПоследнихСимволаКоличества = "12"
	 Или ДваПоследнихСимволаКоличества = "13"
	 Или ДваПоследнихСимволаКоличества = "14" Тогда
		Возврат СклоненияСлова.РодительныйМнЧисло;
	ИначеЕсли ПоследнийСимволКоличества = "1" Тогда
		Возврат СклоненияСлова.ИменительныйЕдЧисло;
	ИначеЕсли СтрНайти("234", ПоследнийСимволКоличества) <> 0 Тогда
		Возврат СклоненияСлова.ИменительныйМнЧисло;
	Иначе
		Возврат СклоненияСлова.РодительныйМнЧисло;
	КонецЕсли;
	
КонецФункции

#КонецОбласти 
