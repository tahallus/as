#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область AdditionalMethods

Функция ЕстьЗапасы(ТабличнаяЧастьДокумента)

	Возврат (ТабличнаяЧастьДокумента.Количество() > 0) И (ТабличнаяЧастьДокумента.Найти(
		Перечисления.ТипыНоменклатуры.Запас) <> Неопределено);

КонецФункции

Процедура УчестьРазличияСводногоСФ(ДанныеОбъекта, ДанныеПечати, ЭтоУПД)

	Если Не ДанныеОбъекта.ЭтоСводныйСчетФактура Тогда

		Возврат;

	КонецЕсли;

	ПредставлениеПокупателя = "";
	ЗначениеАдресаПокупателя = "";
	ПредставлениеГрузополучателя = "";
	ИНН_КПП_Покупателя = "";

	Для Каждого Строка Из ДанныеОбъекта.ТаблицаПокупателей Цикл

		ПредставлениеПокупателя = ПредставлениеПокупателя + ?(ПустаяСтрока(ПредставлениеПокупателя), "", "; ")
			+ ПечатьДокументовУНФ.ОписаниеОрганизации(Строка.СведенияОПокупателе, "ПолноеНаименование,");

		КПП = ПечатьДокументовУНФ.ОписаниеОрганизации(Строка.СведенияОПокупателе, "КПП,", Ложь);
		ИНН_КПП_Покупателя = ИНН_КПП_Покупателя + ?(ПустаяСтрока(ИНН_КПП_Покупателя), "", "; ")
						+ ПечатьДокументовУНФ.ОписаниеОрганизации(Строка.СведенияОПокупателе, "ИНН,", Ложь)
						+ ?(ПустаяСтрока(КПП), "", "/" + КПП);

		ЗначениеАдресаПокупателя = ЗначениеАдресаПокупателя + ?(ПустаяСтрока(ЗначениеАдресаПокупателя), "", "; ")
			+ ПечатьДокументовУНФ.ОписаниеОрганизации(Строка.СведенияОПокупателе, "ЮридическийАдрес,");

		ПредставлениеГрузополучателя = ПредставлениеГрузополучателя + ?(ПустаяСтрока(ПредставлениеГрузополучателя), "",
			"; ") + ПечатьДокументовУНФ.ОписаниеОрганизации(Строка.СведенияОГрузополучателе,
			"ПолноеНаименование, ФактическийАдрес,");

	КонецЦикла;

	ДанныеПечати.Вставить("ПредставлениеПокупателя", ПредставлениеПокупателя);
	ДанныеПечати.Вставить("АдресПокупателя", ЗначениеАдресаПокупателя);
	ДанныеПечати.Вставить("ПредставлениеГрузополучателя", ПредставлениеГрузополучателя);
	ДанныеПечати.Вставить("ИННПокупателя", ИНН_КПП_Покупателя);

КонецПроцедуры

Процедура ОбработатьПустыеПоляШапки(ДанныеПечати, ЕстьЗапасы, ЭтоУПД)

	Прочерк = НСтр("ru ='--'");
	ЭтоПродажаЗапасов = ЕстьЗапасы И (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Продажа);

	Если ПустаяСтрока(ДанныеПечати.ПредставлениеГрузоотправителя) Тогда

		ДанныеПечати.ПредставлениеГрузоотправителя = ?(ЭтоПродажаЗапасов, НСтр("ru ='Он же'"), Прочерк);

	КонецЕсли;

	Если ПустаяСтрока(ДанныеПечати.ПредставлениеГрузополучателя) Тогда

		ДанныеПечати.ПредставлениеГрузополучателя = ?(ЭтоПродажаЗапасов, ДанныеПечати.ПредставлениеПокупателя, Прочерк);

	КонецЕсли;

	Если Не ЗначениеЗаполнено(ДанныеПечати.НомерИсправления) Тогда

		ДанныеПечати.НомерИсправления = Прочерк;
		ДанныеПечати.ДатаИсправления = Прочерк;

	КонецЕсли;

	Если ПустаяСтрока(ДанныеПечати.ПоДокументу) Тогда

		МассивВидовОпераций = Новый Массив;
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийСчетФактура.НаАвансКомитента);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийСчетФактура.Аванс);

		ШаблонТекста = НСтр("ru ='№ %1 от %1'");
		ДанныеПечати.ПоДокументу = ДанныеПечати.ПоДокументу + Символы.НПП + СтрШаблон(ШаблонТекста, ?(
			МассивВидовОпераций.Найти(ДанныеПечати.ВидОперации) <> Неопределено, Прочерк, Символы.НПП));

	КонецЕсли;

	Если ДанныеПечати.ВидОперации <> Перечисления.ВидыОперацийСчетФактура.Аванс Тогда

		Если ПустаяСтрока(ДанныеПечати.АдресПокупателя) Тогда

			ДанныеПечати.АдресПокупателя = ДанныеПечати.АдресПокупателя + Прочерк;

		КонецЕсли;

		Если ПустаяСтрока(ДанныеПечати.ПредставлениеГрузоотправителя) Тогда

			ДанныеПечати.ПредставлениеГрузоотправителя = ДанныеПечати.ПредставлениеГрузоотправителя + Прочерк;

		КонецЕсли;

		Если ПустаяСтрока(ДанныеПечати.ПредставлениеГрузополучателя) Тогда

			ДанныеПечати.ПредставлениеГрузополучателя = ДанныеПечати.ПредставлениеГрузополучателя + Прочерк;

		КонецЕсли;

	КонецЕсли;

	Если ПустаяСтрока(ДанныеПечати.Валюта) Тогда

		ДанныеПечати.Валюта = НСтр("ru ='Российский рубль, 643'");

	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьПустыеЗначенияДанныхПечатиСтроки(ДанныеПечати)

	СтандартныеИменаПолей = "ЕдиницаИзмерения,ЕдиницаИзмеренияКод,Количество,Цена,СуммаНДС,СтранаПроисхожденияКод,ПредставлениеСтраны,ПредставлениеГТД";
	
	// Для наборов выводим только расшифровку, числовые значения не нужны.
	//
	Если ДанныеПечати.ЭтоНабор = Истина Тогда

		ДанныеПечати.Вставить("Акциз", Неопределено);
		ДанныеПечати.Вставить("Цена", Неопределено);
		ДанныеПечати.Вставить("Стоимость", Неопределено);
		ДанныеПечати.Вставить("СуммаНДС", Неопределено);
		ДанныеПечати.Вставить("Всего", Неопределено);

		СтандартныеИменаПолей = СтрЗаменить(СтандартныеИменаПолей, "Цена,", "");

	КонецЕсли;

	Если ДанныеПечати.ЭтоАванс = Истина Тогда

		ДанныеПечати.Вставить("Акциз", Неопределено);
		ДанныеПечати.Вставить("ЕдиницаИзмерения", Неопределено);
		ДанныеПечати.Вставить("ЕдиницаИзмеренияКод", Неопределено);
		ДанныеПечати.Вставить("Количество", Неопределено);
		ДанныеПечати.Вставить("ПредставлениеКодаНоменклатуры", Неопределено);
		ДанныеПечати.Вставить("Цена", Неопределено);
		ДанныеПечати.Вставить("Стоимость", Неопределено);
		ДанныеПечати.Вставить("СтранаПроисхожденияКод", Неопределено);
		ДанныеПечати.Вставить("СтранаСсылка", Неопределено);

		СтандартныеИменаПолей = СтандартныеИменаПолей + ",Стоимость,Акциз";

	КонецЕсли;
	
	// Сумма налога, предъявляемая покупателю при ставке ндс 0% должна заполняться как 0,00 (п.5 ст.169 НК РФ)
	//
	Если ДанныеПечати.Свойство("СтавкаНДС")
		 И ДанныеПечати.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль() Тогда

		СтандартныеИменаПолей = СтрЗаменить(СтандартныеИменаПолей, "СуммаНДС,", "");

	КонецЕсли;
	
	// Родная страна происхождения (РОССИЯ) не требует указания в документах (СФ, УПД).
	//
	Если ДанныеПечати.СтранаСсылка = Справочники.СтраныМира.Россия Или ПустаяСтрока(ДанныеПечати.ПредставлениеСтраны) Тогда

		ДанныеПечати.Вставить("СтранаПроисхожденияКод", Неопределено);
		ДанныеПечати.Вставить("ПредставлениеСтраны", Неопределено);

	КонецЕсли;

	Если ДанныеПечати.Свойство("ТоварКодТНВЭД") И Не ЗначениеЗаполнено(ДанныеПечати.ТоварКодТНВЭД) Тогда

		ДанныеПечати.ТоварКодТНВЭД = Неопределено;
		СтандартныеИменаПолей = СтандартныеИменаПолей + ",ТоварКодТНВЭД";

	КонецЕсли;

	ЗаменитьПустыеЗначенияНаПрочерки(ДанныеПечати, СтандартныеИменаПолей);

КонецПроцедуры

Процедура ЗаменитьПустыеЗначенияНаПрочерки(ДанныеПечати, ИменаПолей)

	Если Не ТипЗнч(ДанныеПечати) = Тип("Структура") Тогда

		Возврат;

	КонецЕсли;

	МассивИмен = Неопределено;
	Если Не ПустаяСтрока(ИменаПолей) Тогда

		МассивИмен = СтрРазделить(ИменаПолей, ",");

	КонецЕсли;

	Для Каждого ЭлементСтруктуры Из ДанныеПечати Цикл

		Если ЗначениеЗаполнено(ЭлементСтруктуры.Значение) Тогда

			Продолжить;

		КонецЕсли;

		Если МассивИмен <> Неопределено И МассивИмен.Найти(ЭлементСтруктуры.Ключ) = Неопределено Тогда

			Продолжить;

		КонецЕсли;

		ДанныеПечати[ЭлементСтруктуры.Ключ] = "--";

	КонецЦикла;

КонецПроцедуры

Процедура УвеличитьИтогиДокумента(СтруктураИтогов, ДанныеПечати)

	Если ДанныеПечати.ЭтоНабор = Истина Тогда

		Возврат;

	КонецЕсли;

	Если ТипЗнч(ДанныеПечати.Стоимость) = Тип("Число") Тогда

		СтруктураИтогов.ПоСтраницеСтоимость = СтруктураИтогов.ПоСтраницеСтоимость + ДанныеПечати.Стоимость;
		СтруктураИтогов.Стоимость = СтруктураИтогов.Стоимость + ДанныеПечати.Стоимость;

	КонецЕсли;

	Если ТипЗнч(ДанныеПечати.СуммаНДС) = Тип("Число") Тогда

		СтруктураИтогов.ПоСтраницеСуммаНДС = СтруктураИтогов.ПоСтраницеСуммаНДС + ДанныеПечати.СуммаНДС;
		СтруктураИтогов.СуммаНДС = СтруктураИтогов.СуммаНДС + ДанныеПечати.СуммаНДС;

	КонецЕсли;

	Если ТипЗнч(ДанныеПечати.Всего) = Тип("Число") Тогда

		СтруктураИтогов.ПоСтраницеВсего = СтруктураИтогов.ПоСтраницеВсего + ДанныеПечати.Всего;
		СтруктураИтогов.Всего = СтруктураИтогов.Всего + ДанныеПечати.Всего;

	КонецЕсли;

КонецПроцедуры

Функция ИнформацияОГрузеПрописью(ЗначениеДляПечати, ЭтоВес)

	Если Не ЗначениеЗаполнено(ЗначениеДляПечати) Тогда

		Возврат "";

	КонецЕсли;

	Если ЭтоВес Тогда

		Возврат НРег(ЧислоПрописью(ЗначениеДляПечати, "ДП=Истина",
			"килограмм,килограмма,килограммов,м,грамм,грамма,граммов,м,3"));

	Иначе // Груз

		Возврат Формат(ЗначениеДляПечати, "ЧГ=0") + НСтр("ru = ' м³'");

	КонецЕсли;

КонецФункции

Функция СформироватьПредставлениеОснования(ДанныеПечати)

	Основание = "";
	Если Не ПустаяСтрока(ДанныеПечати.ОснованиеПечати) Тогда

		Основание = ДанныеПечати.ОснованиеПечати;

	КонецЕсли;

	ДанныеОДоверенности = СокрЛП(ДанныеПечати.ДоверенностьНомер) + СокрЛП(ДанныеПечати.ДоверенностьВыдана) + СокрЛП(
		ДанныеПечати.ДоверенностьЛицо);
	Если Не ПустаяСтрока(ДанныеОДоверенности) Или ЗначениеЗаполнено(ДанныеПечати.ДоверенностьДата) Тогда

		Основание = Основание
					+ ?(ПустаяСтрока(Основание), "", ";")
					+ НСтр("ru =' по доверенности №'")
					+ ДанныеПечати.ДоверенностьНомер
					+ НСтр("ru =' от '")
					+ Формат(ДанныеПечати.ДоверенностьДата, "ДЛФ=DD")
					+ НСтр("ru =' выданной '")
					+ ДанныеПечати.ДоверенностьВыдана
					+ Символы.НПП
					+ ДанныеПечати.ДоверенностьЛицо;

	КонецЕсли;

	Возврат Основание;

КонецФункции

Функция УниверсальноеПредставлениеСубъекта(СведенияОСубъекте, ПредставлениеИННиКПП = "")

	ПредставлениеСубъекта = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОСубъекте,
		"ПолноеНаименование,");

	Если Не ПустаяСтрока(ПредставлениеИННиКПП) Тогда

		ПредставлениеСубъекта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'"),
			ПредставлениеСубъекта, ПредставлениеИННиКПП);

	ИначеЕсли Не ПустаяСтрока(СведенияОСубъекте.ИНН) Тогда

		Если ПустаяСтрока(СведенияОСубъекте.КПП) Тогда

			ПредставлениеСубъекта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'"),
				ПредставлениеСубъекта, СведенияОСубъекте.ИНН);

		Иначе

			ПредставлениеСубъекта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = '%1, ИНН/КПП %2/%3'"), ПредставлениеСубъекта, СведенияОСубъекте.ИНН, СведенияОСубъекте.КПП);

		КонецЕсли;

	КонецЕсли;

	Возврат ПредставлениеСубъекта;

КонецФункции

Функция СтрокаКорректноРазмещаетсяНаСтранице(ТабличныйДокумент, ОбластиМакета, СтруктураИтогов, Ошибки) Экспорт

	ЕстьВсеОбласти = Истина;
	Для Каждого ЭлементСтруктуры Из ОбластиМакета Цикл

		Если Не СтруктураИтогов.ЭтоУПД И ЭлементСтруктуры.Ключ = "ОбластьПодвалНакладной" Тогда

			Продолжить;

		ИначеЕсли СтруктураИтогов.ЭтоУПД И ЭлементСтруктуры.Ключ = "ИтогоПоСтранице" Тогда

			Продолжить;

		ИначеЕсли ЭлементСтруктуры.Значение = Неопределено Тогда

			ЕстьВсеОбласти = Ложь;
			Прервать;

		КонецЕсли;

	КонецЦикла;

	Если Не ЕстьВсеОбласти Тогда

		Возврат Неопределено;

	КонецЕсли;

	МассивОбластей = Новый Массив;
	МассивОбластей.Добавить(ОбластиМакета.ОбластьСтроки);
	МассивОбластей.Добавить(ОбластиМакета.ИтогоПоСтранице);

	Если СтруктураИтогов.НПП = СтруктураИтогов.КоличествоСтрок Тогда

		МассивОбластей.Добавить(ОбластиМакета.ОбластьИтого);
		МассивОбластей.Добавить(ОбластиМакета.ОбластьПодвал);

		Если СтруктураИтогов.ЭтоУПД Тогда

			МассивОбластей.Добавить(ОбластиМакета.ОбластьПодвалНакладной);

		КонецЕсли;

	КонецЕсли;
	
	// ТабличныйДокумент.ПроверитьВывод(ВыводимыеОбласти)
	Возврат ПечатьДокументовУНФ.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивОбластей, Ошибки);

КонецФункции

Процедура ДобавитьНовуюСтраницуДокумента(ТабличныйДокумент, ОбластиМакета, СтруктураИтогов)

	Если ОбластиМакета.ИтогоПоСтранице <> Неопределено Тогда

		ОбластиМакета.ИтогоПоСтранице.Параметры.Заполнить(СтруктураИтогов);
		ТабличныйДокумент.Вывести(ОбластиМакета.ИтогоПоСтранице);

	КонецЕсли;

	СтруктураИтогов.ПоСтраницеСтоимость = 0;
	СтруктураИтогов.ПоСтраницеСуммаНДС = 0;
	СтруктураИтогов.ПоСтраницеВсего = 0;

	СтруктураИтогов.НомерЛиста = СтруктураИтогов.НомерЛиста + 1;

	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	ОбластиМакета.ОбластьНумерацияЛистов.Параметры.Заполнить(СтруктураИтогов);
	ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьНумерацияЛистов);
	ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьЗаголовокТаблицы);

КонецПроцедуры

Процедура ЗаполнитьРеквизитПоСчетуФактуре(СтрокаТаблицы, ИмяРеквизита, ЗначениеРеквизита)

	СтрокаТаблицы[ИмяРеквизита] = ЗначениеРеквизита;

КонецПроцедуры

#КонецОбласти

#Область ServiceAPI

Функция ИдентификаторПечатнойФормы(ЭтоУПД = Ложь, ИспользоватьФаксимиле = Ложь) Экспорт

	Если ЭтоУПД Тогда

		Возврат "УниверсальныйПередаточныйДокумент" + ?(ИспользоватьФаксимиле, "Факсимиле", "");

	Иначе

		Возврат "СчетФактура";

	КонецЕсли;

КонецФункции

Функция ПредставлениеПФ(ЭтоУПД = Ложь, ИспользоватьФаксимиле = Ложь) Экспорт

	Если ЭтоУПД Тогда

		Возврат НСтр("ru = 'Универсальный передаточный документ'") + ?(ИспользоватьФаксимиле, НСтр(
			"ru =' (факсимиле)'"), "");

	Иначе

		Возврат НСтр("ru = 'Счет-фактура'");

	КонецЕсли;

КонецФункции

Функция КлючПараметровПечати(ЭтоУПД = Ложь) Экспорт

	Если ЭтоУПД Тогда

		Возврат "ПАРАМЕТРЫ_ПЕЧАТИ_Универсальные_УниверсальныйПередаточныйДокумент";

	Иначе

		Возврат "ПАРАМЕТРЫ_ПЕЧАТИ_Универсальные_СчетФактура";

	КонецЕсли;

КонецФункции

Функция ПолныйПутьКМакету(ДатаДокумента, ЭтоУПД, ЕстьПрослеживаемыеТовары = Ложь) Экспорт

	НачалоИспользованияСФ981 = Константы.НачалоИспользованияСФ981.Получить();
	НачалоИспользованияСФ534 = '20210701';
	Если ДатаДокумента = Неопределено Тогда

		ДатаДокумента = НачалоИспользованияСФ534;

	КонецЕсли;

	Тело = "Обработка.ПечатьСчетФактура.";

	ПолныйПутьКМакету = Тело
		+ ?(ЭтоУПД, "ПФ_MXL_УниверсальныйПередаточныйДокумент534", "ПФ_MXL_СчетФактура534")
		+ ?(ЕстьПрослеживаемыеТовары, "Прослеж", "");
	Если ДатаДокумента < НачалоИспользованияСФ534 Тогда
		
		ПолныйПутьКМакету = Тело + ?(ЭтоУПД, "ПФ_MXL_УниверсальныйПередаточныйДокумент981", "ПФ_MXL_СчетФактура981");
		
	ИначеЕсли ДатаДокумента < НачалоИспользованияСФ981 Тогда

		ПолныйПутьКМакету = Тело + ?(ЭтоУПД, "ПФ_MXL_УниверсальныйПередаточныйДокумент", "ПФ_MXL_СчетФактура1137");

	КонецЕсли;

	Возврат ПолныйПутьКМакету;

КонецФункции

Функция СформироватьПФ(ОписаниеПечатнойФормы, ДанныеОбъектовПечати, ЭтоУПД) Экспорт
	Перем Ошибки;

	ТабличныйДокумент = ОписаниеПечатнойФормы.ТабличныйДокумент;
	ДанныеПечати = Новый Структура;

	ЕстьКолонкаЭтоКорректировка = (ДанныеОбъектовПечати.Колонки.Найти("ЭтоКорректировка") <> Неопределено);

	Для Каждого ДанныеОбъекта Из ДанныеОбъектовПечати Цикл

		ПолныйПутьКМакетуПечатнойФормы = ПолныйПутьКМакету(ДанныеОбъекта.ДатаДокумента, ЭтоУПД, ДанныеОбъекта.ЕстьПрослеживаемыеТовары);
		Если ЗначениеЗаполнено(ОписаниеПечатнойФормы.ПолныйПутьКМакету)
			 И ОписаниеПечатнойФормы.ПолныйПутьКМакету <> ПолныйПутьКМакетуПечатнойФормы Тогда

			ВызватьИсключение НСтр("ru ='Нельзя пакетно формировать счета-фактуры разных постановлений.'");

		ИначеЕсли Не ЗначениеЗаполнено(ОписаниеПечатнойФормы.ПолныйПутьКМакету) Тогда

			ОписаниеПечатнойФормы.ПолныйПутьКМакету = ПолныйПутьКМакетуПечатнойФормы;

		КонецЕсли;

		Макет = УправлениеПечатью.МакетПечатнойФормы(ОписаниеПечатнойФормы.ПолныйПутьКМакету);

		ОбластиМакета = Новый Структура;
		ОбластиМакета.Вставить("ОбластьЗаголовокТаблицы", ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет,
			"ЗаголовокТаблицы", , Ошибки));
		ОбластиМакета.Вставить("ОбластьСтроки", ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "Строка", , Ошибки));
		ОбластиМакета.Вставить("ИтогоПоСтранице", ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет,
			"ИтогоПоСтранице", , Ошибки));
		ОбластиМакета.Вставить("ОбластьИтого", ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "Итого", , Ошибки));
		ОбластиМакета.Вставить("ОбластьНумерацияЛистов", ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет,
			"НумерацияЛистов", , Ошибки));

		ИмяОбласти = ?(ДанныеОбъекта.ИспользоватьФаксимиле = Перечисления.ДаНет.Да, "ПодвалСФаксимиле", "Подвал");
		ОбластиМакета.Вставить("ОбластьПодвал", ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, ИмяОбласти, ,
			Ошибки));

		ИмяОбласти = ?(ДанныеОбъекта.ИспользоватьФаксимиле = Перечисления.ДаНет.Да, "ПодвалНакладнойСФаксимиле",
			"ПодвалНакладной");
		ОбластиМакета.Вставить("ОбластьПодвалНакладной", ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет,
			ИмяОбласти, , Ошибки));

		СтавкаНДС0 = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		ДокументФормируетсяСогласноФЗ56 = ПечатьДокументовУНФ.ДокументФормируетсяСогласноФЗ56(
			ДанныеОбъекта.ДатаДокумента);
		ДокументФормируетсяСогласноСФ981 = (ДанныеОбъекта.ДатаДокумента
											>= Константы.НачалоИспользованияСФ981.Получить());
		ИспользуетсяПостановление1137 = (ДанныеОбъекта.ДатаДокумента >= Константы.НачалоИспользованияСФ1137.Получить());
		НомерПостановления1137 = ПечатьДокументовУНФ.ВерсияПостановленияНДС1137(ДанныеОбъекта.ДатаДокумента);
		НеобходимоВНоменклатуруДобавитьКодыТНВЭД = (ДанныеОбъекта.ДатаДокумента >= Дата(2016, 07, 01));
		
		// Прослеживаемость
		ВыводитьРНПТ = НомерПостановления1137 = "534"
			И ДанныеОбъекта.ТаблицаЗапасы.Колонки.Найти("СведенияОПрослеживаемости") <> Неопределено
			И ЗначениеЗаполнено(Макет.Области.Найти("ОбластьПрослеживаемость"));
		// Конец Прослеживаемость

		ЕстьЗапасы = ЕстьЗапасы(ДанныеОбъекта.ТаблицаЗапасы);
		ЕстьНаборы = ДанныеОбъекта.ТаблицаЗапасы.Колонки.Найти("НоменклатураНабора") <> Неопределено;
		
		// Заголовок
		ИмяОбласти = ?(ДокументФормируетсяСогласноФЗ56, "ЗаголовокПФ625", "ЗаголовокПФ");
		ОбластьМакета = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, ИмяОбласти, , Ошибки);
		Если ОбластьМакета = Неопределено Тогда

			ВызватьИсключение НСтр("ru = 'Изменился типовой макет печатной формы счета-фактуры. Для использования 
								   |новой формы необходимо обновить отредактированный ранее макет. 
								   |Вы можете отредактировать макет самостоятельно в разделе ""Компания - Администрирование - Печатные формы,
								   |отчеты, обработки - Макеты печатных форм"" или обратиться к специалисту обслуживающей организации.'");

		Иначе

			ТабличныйДокумент.Вывести(ОбластьМакета);

		КонецЕсли;
		
		// Шапка
		СведенияОПоставщике = ПечатьДокументовУНФ.СведенияОЮрФизЛице(ДанныеОбъекта.Организация,
			ДанныеОбъекта.ДатаДокумента, , );
		СведенияОПокупателе = ПечатьДокументовУНФ.СведенияОЮрФизЛице(ДанныеОбъекта.Контрагент,
			ДанныеОбъекта.ДатаДокумента, , );

		СведенияОГрузоотправителе = ПечатьДокументовУНФ.СведенияОЮрФизЛице(ДанныеОбъекта.Грузоотправитель,
			ДанныеОбъекта.ДатаДокумента, , );
		СведенияОГрузополучателе = ПечатьДокументовУНФ.СведенияОЮрФизЛице(ДанныеОбъекта.Грузополучатель,
			ДанныеОбъекта.ДатаДокумента, , );

		ДанныеПечати.Вставить("ВидОперации", ДанныеОбъекта.ВидОперации);
		ДанныеПечати.Вставить("Номер", ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(
			ДанныеОбъекта.ДатаДокумента, ДанныеОбъекта.Номер, ДанныеОбъекта.Префикс));

		Если Не ПустаяСтрока(ДанныеОбъекта.ЦифровойИндексОбособленногоПодразделения) Тогда

			ДанныеПечати.Номер = ДанныеПечати.Номер + "/" + СокрЛП(
				ДанныеОбъекта.ЦифровойИндексОбособленногоПодразделения);

		КонецЕсли;

		ДанныеПечати.Вставить("Дата", Формат(ДанныеОбъекта.ДатаДокумента, "ДФ='дд ММММ гггг ""г.""'"));
		ДанныеПечати.Вставить("НомерИсправления", ДанныеОбъекта.НомерИсправления);
		ДанныеПечати.Вставить("ДатаИсправления", ?(ЗначениеЗаполнено(ДанныеОбъекта.ДатаИсправления), Формат(
			ДанныеОбъекта.ДатаИсправления, "ДФ='дд ММММ гггг ""г.""'"), Неопределено));
		ДанныеПечати.Вставить("СтатусУПД", ДанныеОбъекта.СтатусУПД);

		
		Если СтрНайти("" + ДанныеПечати.Дата, " г.") > 0 Тогда
			ТекстШаблона = ?(ЭтоУПД, НСтр("ru ='Универсальный передаточный документ № %1 от %2'"), НСтр(
				"ru ='Счет-фактура № %1 от %2'"));
		Иначе
			ТекстШаблона = ?(ЭтоУПД, НСтр("ru ='Универсальный передаточный документ № %1 от %2 г.'"), НСтр(
				"ru ='Счет-фактура № %1 от %2 г.'"));
		КонецЕсли;
		
		ДанныеПечати.Вставить("ПредставлениеДокумента", СтрШаблон(ТекстШаблона, ДанныеПечати.Номер, ДанныеПечати.Дата));

		ДанныеПечати.Вставить("ПредставлениеПоставщика", ПечатьДокументовУНФ.ОписаниеОрганизации(
			СведенияОПоставщике, "ПолноеНаименование,"));
		ДанныеПечати.Вставить("АдресПоставщика", ПечатьДокументовУНФ.ОписаниеОрганизации(
			СведенияОПоставщике, "ЮридическийАдрес,"));

		ДанныеПечати.Вставить("ПредставлениеПокупателя", ПечатьДокументовУНФ.ОписаниеОрганизации(
			СведенияОПокупателе, "ПолноеНаименование,"));
		ДанныеПечати.Вставить("АдресПокупателя", ПечатьДокументовУНФ.ОписаниеОрганизации(
			СведенияОПокупателе, "ЮридическийАдрес,"));

		ПредставлениеГрузоотправителя = "";
		ПредставлениеГрузополучателя = "";
		Если ЕстьЗапасы Тогда

			Если ДанныеОбъекта.Грузоотправитель = ДанныеОбъекта.Организация Тогда

				ПредставлениеГрузоотправителя = НСтр("ru = 'он же'");

			ИначеЕсли ЗначениеЗаполнено(ДанныеОбъекта.Грузоотправитель) Тогда

				ПредставлениеГрузоотправителя = ПечатьДокументовУНФ.ОписаниеОрганизации(
					СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес,");
				
			КонецЕсли
			;

			АдресДоставки = ДанныеОбъекта.АдресДоставки;
			ПредставлениеГрузополучателя = ?(ПустаяСтрока(АдресДоставки),
				ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОГрузополучателе,
				"ПолноеНаименование, ФактическийАдрес,"), ПечатьДокументовУНФ.ОписаниеОрганизации(
				СведенияОГрузополучателе, "ПолноеНаименование,") + "; " + АдресДоставки);

		КонецЕсли;
		ДанныеПечати.Вставить("ПредставлениеГрузоотправителя", ПредставлениеГрузоотправителя);
		ДанныеПечати.Вставить("ПредставлениеГрузополучателя", ПредставлениеГрузополучателя);

		ИННПоставщика = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь);

		Если ДанныеОбъекта.ОбособленноеПодразделениеПоставщика = ДанныеОбъекта.Организация Тогда

			КПППоставщика = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);

		Иначе

			КПППоставщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ДанныеОбъекта.ОбособленноеПодразделениеПоставщика, "КПП");

		КонецЕсли;

		ИННПоставщика = ИННПоставщика + ?(ПустаяСтрока(КПППоставщика), "", "/" + КПППоставщика);
		ДанныеПечати.Вставить("ИННПоставщика", ИННПоставщика);

		ИННПокупателя = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь);

		Если ДанныеОбъекта.ОбособленноеПодразделениеПокупателя = ДанныеОбъекта.Контрагент Тогда

			КПППокупателя = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);

		Иначе

			КПППокупателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ДанныеОбъекта.ОбособленноеПодразделениеПокупателя, "КПП");

		КонецЕсли;

		ИННПокупателя = ИННПокупателя + ?(ПустаяСтрока(КПППокупателя), "", "/" + КПППокупателя);
		ДанныеПечати.Вставить("ИННПокупателя", ИННПокупателя);
		
		// ПоДокументу
		ПредставлениеПлатежныхДокументов = "";
		Если ТипЗнч(ДанныеОбъекта.ПлатежныеДокументы) = Тип("ТаблицаЗначений") Тогда

			ШаблонПредставления = НСтр("ru ='№ %1 от %2'");
			Для Каждого ПлатежныйДокумент Из ДанныеОбъекта.ПлатежныеДокументы Цикл

				ПредставлениеПлатежныхДокументов = ПредставлениеПлатежныхДокументов + ?(ПустаяСтрока(
					ПредставлениеПлатежныхДокументов), "", ", ") + СтрШаблон(ШаблонПредставления,
					ПлатежныйДокумент.НомерПлатежноРасчетногоДокумента, Формат(
					ПлатежныйДокумент.ДатаПлатежноРасчетногоДокумента, "ДФ=dd.MM.yyyy"));

			КонецЦикла;

		КонецЕсли;
		ДанныеПечати.Вставить("ПоДокументу", ПредставлениеПлатежныхДокументов);
		
		// ДокументыОбОтгрузке
		СворачиватьСтрокиИзРазныхОснований = (НомерПостановления1137 <> "534");
		Если Не СворачиватьСтрокиИзРазныхОснований Тогда
			Если ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Продажа
				ИЛИ ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Поступление Тогда
				ДополнитьДанныеШапкиСведениямиОДокументеОтгрузки(ДанныеПечати, ДанныеОбъекта.ТаблицаЗапасы, ЭтоУПД);
			Иначе
				ДанныеПечати.Вставить("ДокументыОбОтгрузке", "№ п/п  №  от  ");
			КонецЕсли;
		КонецЕсли;
		
		//
		ДанныеПечати.Вставить("Валюта", СокрЛП(ДанныеОбъекта.ВалютаНаименование) + ", " + СокрЛП(
			ДанныеОбъекта.ВалютаКод));
		ДанныеПечати.Вставить("ИдентификаторГосКонтракта", ДанныеОбъекта.ИдентификаторГосКонтракта);

		УчестьРазличияСводногоСФ(ДанныеОбъекта, ДанныеПечати, ЭтоУПД);
		ОбработатьПустыеПоляШапки(ДанныеПечати, ЕстьЗапасы, ЭтоУПД);

		ОбластьШапка = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "Шапка", , Ошибки);
		Если ОбластьШапка <> Неопределено Тогда

			ОбластьШапка.Параметры.Заполнить(ДанныеПечати);
			ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьШапка,
				ДанныеОбъекта.Ссылка);
			ТабличныйДокумент.Вывести(ОбластьШапка);

		КонецЕсли;

		Если ДокументФормируетсяСогласноФЗ56 Тогда

			ОбластьМакета = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "ИдентификаторГосКонтракта", , Ошибки);
			Если ОбластьМакета <> Неопределено Тогда

				ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);

			КонецЕсли;

		КонецЕсли;
		
		// Табличная часть
		Если ОбластиМакета.ОбластьЗаголовокТаблицы <> Неопределено Тогда

			ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьЗаголовокТаблицы);

		КонецЕсли;

		СтруктураИтогов = Новый Структура;
		СтруктураИтогов.Вставить("НомерЛиста", 1);
		СтруктураИтогов.Вставить("НПП", 0);
		СтруктураИтогов.Вставить("КоличествоСтрок", ДанныеОбъекта.ТаблицаЗапасы.Количество());
		СтруктураИтогов.Вставить("ПоСтраницеСтоимость", 0);
		СтруктураИтогов.Вставить("ПоСтраницеСуммаНДС", 0);
		СтруктураИтогов.Вставить("ПоСтраницеВсего", 0);
		СтруктураИтогов.Вставить("Стоимость", 0);
		СтруктураИтогов.Вставить("СуммаНДС", 0);
		СтруктураИтогов.Вставить("Всего", 0);
		СтруктураИтогов.Вставить("ПредставлениеДокумента", ДанныеПечати.ПредставлениеДокумента);
		СтруктураИтогов.Вставить("ЕстьНаборы", ЕстьНаборы);
		СтруктураИтогов.Вставить("ЭтоУПД", ЭтоУПД);
		СтруктураИтогов.Вставить("ЕстьСтавкаНольПроцентов", Ложь);

		Если ОбластиМакета.ОбластьСтроки <> Неопределено Тогда
			
			ПараметрыНоменклатуры = Новый Структура;
			
			КоличествоСтрок = ДанныеОбъекта.ТаблицаЗапасы.Количество();
			Для Каждого СтрокаТабличнойЧасти Из ДанныеОбъекта.ТаблицаЗапасы Цикл
				
				ОбластьМакета = ОбластиМакета.ОбластьСтроки;
				Если НомерПостановления1137 = "534" Тогда
					ОбластьЗапись = ОбластьМакета.Область("ОбластьЗапись");
				КонецЕсли;
				
				ДанныеПечати.Очистить();
				ПараметрыНоменклатуры.Очистить();

				Если СтруктураИтогов.ЕстьНаборы И СтрокаТабличнойЧасти.ЭтоНабор = Истина Тогда
					НомерСтроки = 0;
				Иначе
					СтруктураИтогов.НПП = СтруктураИтогов.НПП + 1;
					НомерСтроки = СтруктураИтогов.НПП;
				КонецЕсли;
				ДанныеПечати.Вставить("НомерСтроки", НомерСтроки);

				ПараметрыНоменклатуры.Вставить("Содержание", СтрокаТабличнойЧасти.Содержание);
				ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры",
					СтрокаТабличнойЧасти.ПредставлениеНоменклатуры);
				ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", СтрокаТабличнойЧасти.Характеристика);
				ПараметрыНоменклатуры.Вставить("НеобходимоВыделитьКакСоставНабора", ?(СтруктураИтогов.ЕстьНаборы,
					СтрокаТабличнойЧасти.НеобходимоВыделитьКакСоставНабора, Ложь));

				Если ДокументФормируетсяСогласноСФ981 Тогда

					ДанныеПечати.Вставить("ТоварКодТНВЭД", Неопределено);
					Если СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДС0 Тогда

						ДанныеПечати.ТоварКодТНВЭД = СокрЛП(СтрокаТабличнойЧасти.КодТНВЭД);

					КонецЕсли;

				ИначеЕсли НеобходимоВНоменклатуруДобавитьКодыТНВЭД Тогда

					ПараметрыНоменклатуры.Вставить("КодТНВЭД", СтрокаТабличнойЧасти.КодТНВЭД);

				КонецЕсли;

				ДанныеПечати.Вставить("ТоварНаименование", ПечатьДокументовУНФ.ПредставлениеНоменклатуры(
					ПараметрыНоменклатуры));
				ДанныеПечати.Вставить("ПредставлениеКодаНоменклатуры",
					ПечатьДокументовУНФ.ПредставлениеКодаНоменклатуры(СтрокаТабличнойЧасти));
				ДанныеПечати.Вставить("ЭтоНабор", ?(СтруктураИтогов.ЕстьНаборы, СтрокаТабличнойЧасти.ЭтоНабор = Истина,
					Ложь));
				ДанныеПечати.Вставить("ЕдиницаИзмеренияКод", СтрокаТабличнойЧасти.ЕдиницаИзмеренияПоОКЕИ_Код);
				ДанныеПечати.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмеренияПоОКЕИ_Наименование);

				Если ТипЗнч(СтрокаТабличнойЧасти.Количество) = Тип("Число") И ТипЗнч(
					СтрокаТабличнойЧасти.КоэффициентЕдиницыИзмерения) = Тип("Число") Тогда

					ДанныеПечати.Вставить("Количество", Окр(СтрокаТабличнойЧасти.Количество
															* СтрокаТабличнойЧасти.КоэффициентЕдиницыИзмерения, 3));

				Иначе

					ДанныеПечати.Вставить("Количество", СтрокаТабличнойЧасти.Количество);

				КонецЕсли;

				ДанныеПечати.Вставить("Акциз", ?(ИспользуетсяПостановление1137, НСтр("ru ='без акциза'"), ""));
				ДанныеПечати.Вставить("СтавкаНДС", СтрокаТабличнойЧасти.СтавкаНДС);

				СтруктураИтогов.ЕстьСтавкаНольПроцентов = (СтруктураИтогов.ЕстьСтавкаНольПроцентов
														   Или ДанныеПечати.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());

				Если ДанныеОбъекта.СуммаВключаетНДС Тогда

					СуммаБезНДС = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНДС;

				Иначе

					СуммаБезНДС = СтрокаТабличнойЧасти.Сумма;

				КонецЕсли;

				Если ТипЗнч(ДанныеПечати.Количество) <> Тип("Число") Тогда

					Цена = Неопределено; //При реализации услуг количество (и цена) могут не указываться

				ИначеЕсли ДанныеОбъекта.СуммаВключаетНДС = Ложь
						  И СтрокаТабличнойЧасти.КоэффициентЕдиницыИзмерения = 1
						  И СтрокаТабличнойЧасти.Владелец().Колонки.Найти("СуммаСкидкиПоСтроке") <> Неопределено
						  И СтрокаТабличнойЧасти.СуммаСкидкиПоСтроке = 0 Тогда

					Цена = СтрокаТабличнойЧасти.Цена;

				Иначе

					Цена = СуммаБезНДС / ?(ДанныеПечати.Количество = 0, 1, ДанныеПечати.Количество);

				КонецЕсли;

				ДанныеПечати.Вставить("Цена", Цена);
				ДанныеПечати.Вставить("Стоимость", СуммаБезНДС);
				ДанныеПечати.Вставить("СуммаНДС", СтрокаТабличнойЧасти.СуммаНДС);
				ДанныеПечати.Вставить("Всего", СтрокаТабличнойЧасти.Всего);

				ДанныеПечати.Вставить("СтранаСсылка", СтрокаТабличнойЧасти.СтранаСсылка);
				ДанныеПечати.Вставить("СтранаПроисхожденияКод", СтрокаТабличнойЧасти.СтранаКод);
				ДанныеПечати.Вставить("ПредставлениеСтраны", СтрокаТабличнойЧасти.СтранаПредставление);
				ДанныеПечати.Вставить("ПредставлениеГТД", СтрокаТабличнойЧасти.ПредставлениеГТД);
				
				ЭтоАванс = (ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Аванс);
				ДанныеПечати.Вставить("ЭтоАванс", ЭтоАванс);

				ОбработатьПустыеЗначенияДанныхПечатиСтроки(ДанныеПечати);
				ОбластиМакета.ОбластьСтроки.Параметры.Заполнить(ДанныеПечати);

				// Прослеживаемость
				Если ВыводитьРНПТ
					И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СведенияОПрослеживаемости) Тогда
					
					ТаблицаРНПТ = СтрокаТабличнойЧасти.СведенияОПрослеживаемости;
					ПерваяСтрока = Истина;
					ОбластьЗапись.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					ОбластьЗапись.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					
					Для ИндексСтроки = 0 По ТаблицаРНПТ.Количество() - 1 Цикл
						
						Если Не ПерваяСтрока Тогда
							// Получаем область для последующих строк для очистки параметров.
							ОбластьМакета = Макет.ПолучитьОбласть("Строка");
							ОбластьЗапись = ОбластьМакета.Область("ОбластьЗапись");
							ОбластьЗапись.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
							ОбластьЗапись.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
						КонецЕсли;
						
						ОбластьМакета.Параметры.ПредставлениеГТД           = ТаблицаРНПТ[ИндексСтроки].РНПТ;
						ОбластьМакета.Параметры.ЕдиницаИзмеренияПрослежКод = СтрокаТабличнойЧасти.КодТНВЭДЕдиницаИзмеренияКод;
						ОбластьМакета.Параметры.ЕдиницаИзмеренияПрослеж    = СтрокаТабличнойЧасти.КодТНВЭДЕдиницаИзмеренияНаименование;
						ОбластьМакета.Параметры.КоличествоПрослеж          = ТаблицаРНПТ[ИндексСтроки].КоличествоПрослеживаемости;
						
						ПоследняяПодстрока = Ложь;
						Если ИндексСтроки = ТаблицаРНПТ.Количество() - 1 Тогда
							ОбластьЗапись.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
							ПоследняяПодстрока = Истина;
						КонецЕсли;
						
						ПоследняяСтрока = (НомерСтроки = КоличествоСтрок) И ПоследняяПодстрока;
						
						Если СтруктураИтогов.НПП > 1 И СтрокаКорректноРазмещаетсяНаСтранице(ТабличныйДокумент, ОбластиМакета,
							СтруктураИтогов, Ошибки) = Ложь Тогда
							
							ДобавитьНовуюСтраницуДокумента(ТабличныйДокумент, ОбластиМакета, СтруктураИтогов);
							
						КонецЕсли;
						
						ТабличныйДокумент.Вывести(ОбластьМакета);
						
						ПерваяСтрока = Ложь;
						
					КонецЦикла;
					
				Иначе
					
					Если НомерПостановления1137 = "534" Тогда
						ОбластьЗапись.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
						ОбластьЗапись.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
						Если ВыводитьРНПТ Тогда
							ОбластиМакета.ОбластьСтроки.Параметры.ЕдиницаИзмеренияПрослежКод = "--";
							ОбластиМакета.ОбластьСтроки.Параметры.ЕдиницаИзмеренияПрослеж    = "--";
							ОбластиМакета.ОбластьСтроки.Параметры.КоличествоПрослеж          = "--"
						КонецЕсли;
					КонецЕсли;
					
					Если СтруктураИтогов.НПП > 1 И СтрокаКорректноРазмещаетсяНаСтранице(ТабличныйДокумент, ОбластиМакета,
						СтруктураИтогов, Ошибки) = Ложь Тогда
						
						ДобавитьНовуюСтраницуДокумента(ТабличныйДокумент, ОбластиМакета, СтруктураИтогов);
						
					КонецЕсли;
					
					ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьСтроки);
					
				КонецЕсли;
				// Конец Прослеживаемость
				
				УвеличитьИтогиДокумента(СтруктураИтогов, ДанныеПечати);
				
				Если СтруктураИтогов.ЕстьНаборы Тогда
					
					НаборыСервер.УчестьОформлениеСтрокиНабора(ТабличныйДокумент, ОбластиМакета.ОбластьСтроки,
						СтрокаТабличнойЧасти);
					
				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

		Если СтруктураИтогов.НомерЛиста > 1 И ОбластиМакета.ИтогоПоСтранице <> Неопределено Тогда

			ОбластиМакета.ИтогоПоСтранице.Параметры.Заполнить(СтруктураИтогов);
			ТабличныйДокумент.Вывести(ОбластиМакета.ИтогоПоСтранице);

		КонецЕсли;

		Если ОбластиМакета.ОбластьИтого <> Неопределено Тогда

			ДанныеПечати.Очистить();
			ДанныеПечати.Вставить("ИтогоСтоимость", СтруктураИтогов.Стоимость);
			ДанныеПечати.Вставить("ИтогоСуммаНДС", СтруктураИтогов.СуммаНДС);
			ДанныеПечати.Вставить("ИтогоВсего", СтруктураИтогов.Всего);

			Если ИспользуетсяПостановление1137 Тогда

				ИменаПолей = "ИтогоСтоимость,ИтогоВсего" + ?(СтруктураИтогов.ЕстьСтавкаНольПроцентов, "",
					",ИтогоСуммаНДС");
				ЗаменитьПустыеЗначенияНаПрочерки(ДанныеПечати, ИменаПолей);

			КонецЕсли;

			ОбластиМакета.ОбластьИтого.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьИтого);

		КонецЕсли;

		Если ОбластиМакета.ОбластьПодвал <> Неопределено Тогда

			ДанныеПечати.Вставить("ФИОПБОЮЛ", ?(ДанныеОбъекта.ЭтоФизическоеЛицо,
				ДанныеОбъекта.РасшифровкаПодписиРуководителя, Неопределено));
			ДанныеПечати.Вставить("ФИОРуководителя", ?(ДанныеОбъекта.ЭтоФизическоеЛицо, Неопределено,
				ДанныеОбъекта.РасшифровкаПодписиРуководителя));
			ДанныеПечати.Вставить("ФИОГлавногоБухгалтера", ?(ДанныеОбъекта.ЭтоФизическоеЛицо, Неопределено,
				ДанныеОбъекта.РасшифровкаПодписиГлавногоБухгалтера));
			ДанныеПечати.Вставить("Свидетельство", ПечатьДокументовУНФ.ОписаниеОрганизации(
				СведенияОПоставщике, "Свидетельство,"));

			КоличествоСтраницПрописью = ПечатьДокументовУНФ.ФормаМножественногоЧисла(НСтр("ru = 'листе'"),
				НСтр("ru = 'листах'"), НСтр("ru = 'листах'"), СтруктураИтогов.НомерЛиста);
			ДанныеПечати.Вставить("КоличествоЛистов", СтрШаблон(НСтр("ru = 'Документ составлен на%1%2 %3'"),
				Символы.ПС, СтруктураИтогов.НомерЛиста, КоличествоСтраницПрописью));

			Если ДанныеОбъекта.ИспользоватьФаксимиле = Перечисления.ДаНет.Да Тогда

				ПодписиИФаксимиле = Новый Соответствие; // Ключ - имя картинки в области, Значение - имя реквизита
				ПодписиИФаксимиле.Вставить("ПодписьПБОЮЛ", ?(ДанныеОбъекта.ЭтоФизическоеЛицо, "ФаксимилеРуководителя",
					"ФаксимилеПустая"));
				ПодписиИФаксимиле.Вставить("ПодписьРуководителя", ?(ДанныеОбъекта.ЭтоФизическоеЛицо, "ФаксимилеПустая",
					"ФаксимилеРуководителя"));
				ПодписиИФаксимиле.Вставить("ПодписьГлавногоБухгалтера", ?(ДанныеОбъекта.ЭтоФизическоеЛицо,
					"ФаксимилеПустая", "ФаксимилеГлавногоБухгалтера"));

				ПодписьДокументовУНФ.ЗаполнитьФаксимилеВОбластиМакета(ОбластиМакета.ОбластьПодвал, ДанныеОбъекта,
					ПодписиИФаксимиле, Ошибки);

			КонецЕсли;

			ОбластиМакета.ОбластьПодвал.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьПодвал);

		КонецЕсли;

		Если ЭтоУПД Тогда

			Если ОбластиМакета.ОбластьПодвалНакладной <> Неопределено Тогда

				ДанныеОТранспортировке = "";
				Если ЗначениеЗаполнено(ДанныеОбъекта.Вес) Тогда

					ДанныеОТранспортировке = НСтр("ru = 'масса брутто: '") + ИнформацияОГрузеПрописью(
						ДанныеОбъекта.Вес, Истина);

				КонецЕсли;

				Если ЗначениеЗаполнено(ДанныеОбъекта.Объем) Тогда

					ДанныеОТранспортировке = ДанныеОТранспортировке
											 + ?(ПустаяСтрока(ДанныеОТранспортировке), "", ", ")
											 + НСтр("ru = 'объем: '")
											 + ИнформацияОГрузеПрописью(ДанныеОбъекта.Объем, Ложь);

				КонецЕсли;
				ДанныеПечати.Вставить("ДанныеОТранспортировке", ДанныеОТранспортировке);

				ОснованиеПечати = "";
				Если Не ПустаяСтрока(ДанныеОбъекта.ПредставлениеОснования) Тогда

					ОснованиеПечати = ДанныеОбъекта.ПредставлениеОснования;

				Иначе
					
					// Для корректировок отдельное правило.
					Если ЕстьКолонкаЭтоКорректировка И ДанныеОбъекта.ЭтоКорректировка И ЗначениеЗаполнено(
						ДанныеОбъекта.ДокументОснование) Тогда

						ИсходныйДокумент = ПечатьДокументовУНФ.ПолучитьИсходныйДокументКорректировки(
							ДанныеОбъекта.ДокументОснование);
						ОснованиеПечати = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсходныйДокумент,
							"ОснованиеПечати").ОснованиеПечати;

					КонецЕсли;

				КонецЕсли;
				ДанныеПечати.Вставить("ОснованиеПечати", ОснованиеПечати);
				ДанныеПечати.Вставить("ДоверенностьНомер", ДанныеОбъекта.ДоверенностьНомер);
				ДанныеПечати.Вставить("ДоверенностьВыдана", ДанныеОбъекта.ДоверенностьВыдана);
				ДанныеПечати.Вставить("ДоверенностьДата", ДанныеОбъекта.ДоверенностьДата);
				ДанныеПечати.Вставить("ДоверенностьЛицо", ДанныеОбъекта.ДоверенностьЛицо);
				ДанныеПечати.Вставить("Основание", СформироватьПредставлениеОснования(ДанныеПечати));
				ДанныеПечати.Вставить("ДатаОтгрузкиПередачи", Формат(ДанныеОбъекта.ДатаДокумента,
					"ДФ='« дд » ММММ гггг ""года""'"));
				ДанныеПечати.Вставить("ПредставлениеОрганизации", УниверсальноеПредставлениеСубъекта(
					СведенияОПоставщике, ИННПоставщика));
				ДанныеПечати.Вставить("ПредставлениеКонтрагента", УниверсальноеПредставлениеСубъекта(
					СведенияОПокупателе, ИННПокупателя));
				ДанныеПечати.Вставить("ДолжностьКладовщика", ДанныеОбъекта.ДолжностьКладовщика);
				ДанныеПечати.Вставить("ФИОКладовщика", ДанныеОбъекта.РасшифровкаПодписиКладовщика);
				ДанныеПечати.Вставить("ДолжностьРуководителя", ДанныеОбъекта.ДолжностьРуководителя);
				ДанныеПечати.Вставить("ФИОРуководителя", ДанныеОбъекта.РасшифровкаПодписиРуководителя);
				ДанныеПечати.Вставить("РасшифровкаПодписиКонтрагента", ДанныеОбъекта.РасшифровкаПодписиКонтрагента);

				Если ДанныеОбъекта.ИспользоватьФаксимиле = Перечисления.ДаНет.Да Тогда

					ПодписиИФаксимиле = Новый Соответствие; // Ключ - имя картинки в области, Значение - имя реквизита
					ПодписиИФаксимиле.Вставить("ПодписьОтветственногоЗаОформление", "ФаксимилеРуководителя");
					ПодписиИФаксимиле.Вставить("ПодписьКладовщика", "ФаксимилеКладовщика");
					ПодписиИФаксимиле.Вставить("ПечатьОрганизации", "ФаксимилеПечати");

					ПодписьДокументовУНФ.ЗаполнитьФаксимилеВОбластиМакета(ОбластиМакета.ОбластьПодвалНакладной,
						ДанныеОбъекта, ПодписиИФаксимиле, Ошибки);

				КонецЕсли;

				ОбластиМакета.ОбластьПодвалНакладной.Параметры.Заполнить(ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьПодвалНакладной);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции

#КонецОбласти

#Область PreparingData

Процедура ОбъединитьСведенияДокументовОснованийСчетовФактур(ДанныеНакопленные, ДанныеДобавляемые)

	Для Каждого СтрокаДанных Из ДанныеНакопленные Цикл

		Для Каждого СтрокаДобавляемыхДанных Из ДанныеДобавляемые Цикл

			Если ТипЗнч(СтрокаДобавляемыхДанных.ТаблицаЗапасы) <> Тип("ТаблицаЗначений") Тогда

				Продолжить;

			КонецЕсли;

			Если ТипЗнч(СтрокаДанных.ТаблицаЗапасы) <> Тип("ТаблицаЗначений") Тогда

				СтрокаДанных.ТаблицаЗапасы = СтрокаДобавляемыхДанных.ТаблицаЗапасы;

			Иначе

				Для Каждого СтрокаЗапаса Из СтрокаДобавляемыхДанных.ТаблицаЗапасы Цикл

					ЗаполнитьЗначенияСвойств(СтрокаДанных.ТаблицаЗапасы.Добавить(), СтрокаЗапаса);

				КонецЦикла;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Процедура УчестьОсобенностиДокументаСчетФактураПолученный(ТаблицаДанных, СчетФактураПолученный, ДополнительныеСвойства)

	Для Каждого ДанныеОбъекта Из ТаблицаДанных Цикл

		ДанныеОбъекта.ДатаДокумента = СчетФактураПолученный.ДатаВходящегоДокумента;
		ДанныеОбъекта.Номер = СчетФактураПолученный.НомерВходящегоДокумента;
 
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеОбъекта.ПлатежныеДокументы = Документы.СчетФактура.СоздатьДокумент().ДатаНомерДокументовОплаты.Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);

		НоваяСтрока = ДанныеОбъекта.ПлатежныеДокументы.Добавить();
		НоваяСтрока.НомерСтроки = 1;
		НоваяСтрока.ДатаПлатежноРасчетногоДокумента = СчетФактураПолученный.ДатаПлатежноРасчетногоДокумента;
		НоваяСтрока.НомерПлатежноРасчетногоДокумента = СчетФактураПолученный.НомерПлатежноРасчетногоДокумента;

	КонецЦикла;

КонецПроцедуры

Процедура УчестьОсобенностиДокументаСчетФактура(ТаблицаДанных, СчетФактура, ДополнительныеСвойства)

	ТаблицаДанных.Колонки.Добавить("ПлатежныеДокументы");
	ТаблицаДанных.Колонки.Добавить("ИдентификаторГосКонтракта", Новый ОписаниеТипов("Строка"));

	ТаблицаДанных[0].ПлатежныеДокументы = СчетФактура.ДатаНомерДокументовОплаты.Выгрузить();
	ТаблицаДанных[0].ИдентификаторГосКонтракта = СчетФактура.ИдентификаторГосКонтракта;

	ЕстьПолеОригинальныйСчетФактура = ТаблицаДанных.Колонки.Найти("ОригинальныйСчетФактура") <> Неопределено;

	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл

		Если СтрокаТаблицы.ЭтоКорректировка Тогда

			Если ЕстьПолеОригинальныйСчетФактура Тогда

				Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицы.ОригинальныйСчетФактура, "Номер,Дата");
				СтрокаТаблицы.Номер = Данные.Номер;
				СтрокаТаблицы.ДатаДокумента = Данные.Дата;

			КонецЕсли;

		ИначеЕсли ЗначениеЗаполнено(СчетФактура) Тогда

			СтрокаТаблицы.Номер = СчетФактура.Номер;
			СтрокаТаблицы.ДатаДокумента = СчетФактура.Дата;

			Если ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактура") Тогда

				ЗначениеГрузоотправителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетФактура, "Грузоотправитель");
				Если ЗначениеЗаполнено(ЗначениеГрузоотправителя) Тогда

					СтрокаТаблицы.Грузоотправитель = ЗначениеГрузоотправителя;

				КонецЕсли;

				ЗначениеГрузополучателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетФактура, "Грузополучатель");
				Если ЗначениеЗаполнено(ЗначениеГрузополучателя) Тогда

					СтрокаТаблицы.Грузополучатель = ЗначениеГрузополучателя;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		ЗаполнитьРеквизитПоСчетуФактуре(СтрокаТаблицы, "ДолжностьРуководителя",
			СчетФактура.ПодписьРуководителя.Должность);
		ЗаполнитьРеквизитПоСчетуФактуре(СтрокаТаблицы, "ДолжностьКладовщика", СчетФактура.ПодписьКладовщика.Должность);

		ЗаполнитьРеквизитПоСчетуФактуре(СтрокаТаблицы, "РасшифровкаПодписиРуководителя",
			СчетФактура.ПодписьРуководителя.РасшифровкаПодписи);
		ЗаполнитьРеквизитПоСчетуФактуре(СтрокаТаблицы, "РасшифровкаПодписиГлавногоБухгалтера",
			СчетФактура.ПодписьГлавногоБухгалтера.РасшифровкаПодписи);
		ЗаполнитьРеквизитПоСчетуФактуре(СтрокаТаблицы, "РасшифровкаПодписиКладовщика",
			СчетФактура.ПодписьКладовщика.РасшифровкаПодписи);

		ЗаполнитьРеквизитПоСчетуФактуре(СтрокаТаблицы, "ФаксимилеРуководителя",
			СчетФактура.ПодписьРуководителя.Факсимиле);
		ЗаполнитьРеквизитПоСчетуФактуре(СтрокаТаблицы, "ФаксимилеГлавногоБухгалтера",
			СчетФактура.ПодписьГлавногоБухгалтера.Факсимиле);
		ЗаполнитьРеквизитПоСчетуФактуре(СтрокаТаблицы, "ФаксимилеКладовщика", СчетФактура.ПодписьКладовщика.Факсимиле);

	КонецЦикла;

	Если СчетФактура.СводныйКомиссионный Тогда

		Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл

			СтрокаТаблицы.ЭтоСводныйСчетФактура = Истина;

			Для Каждого СтрокаПокупателя Из СтрокаТаблицы.ТаблицаПокупателей Цикл

				СтрокаПокупателя.СведенияОПокупателе = ПечатьДокументовУНФ.СведенияОЮрФизЛице(
					СтрокаПокупателя.Покупатель, СтрокаТаблицы.ДатаДокумента, , );
				СтрокаПокупателя.СведенияОГрузополучателе = ПечатьДокументовУНФ.СведенияОЮрФизЛице(
					СтрокаПокупателя.Покупатель, СтрокаТаблицы.ДатаДокумента, , );

			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

	Если ДополнительныеСвойства.Свойство("ЭтоЗаказНаряд") И ДополнительныеСвойства.ЭтоЗаказНаряд Тогда

		Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл

			Для Каждого СтрокаРаботыУслуги Из СтрокаТаблицы.ТаблицаРаботыУслуги Цикл

				ЗаполнитьЗначенияСвойств(СтрокаТаблицы.ТаблицаЗапасы.Добавить(), СтрокаРаботыУслуги);

			КонецЦикла;

		КонецЦикла;

	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ЭтоОтчетКомиссионера") И ДополнительныеСвойства.ЭтоОтчетКомиссионера Тогда

		ПараметрыОтбора = Новый Структура("СчетФактура",СчетФактура);
		ПараметрыОтбораКлючСвязи = Новый Структура("КлючСвязи");
		
		Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл

			ТаблицаЗапасов = СтрокаТаблицы.ТаблицаЗапасы.СкопироватьКолонки();
			НайденныеСтроки = СтрокаТаблицы.ТаблицаПокупателей.НайтиСтроки(ПараметрыОтбора);
			
			Если Не НайденныеСтроки.Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не СтрокаТаблицы.ВыписыватьСчетаФактурыСводно Тогда
				
				СтрокаПокупателяССчетФактурой = НайденныеСтроки[0];
				ПараметрыОтбораКлючСвязи.КлючСвязи = СтрокаПокупателяССчетФактурой.КлючСвязи;
				НайденныеСтрокиЗапасов = СтрокаТаблицы.ТаблицаЗапасы.НайтиСтроки(ПараметрыОтбораКлючСвязи);
				
				Для Каждого НайденнаяСтрокаЗапасы Из НайденныеСтрокиЗапасов Цикл
					НоваяСтрока = ТаблицаЗапасов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрокаЗапасы);
				КонецЦикла;
				
			Иначе
				
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					
					ПараметрыОтбораКлючСвязи.КлючСвязи = НайденнаяСтрока.КлючСвязи;
					НайденныеСтрокиЗапасов = СтрокаТаблицы.ТаблицаЗапасы.НайтиСтроки(ПараметрыОтбораКлючСвязи);
					
					Для Каждого НайденнаяСтрокаЗапасы Из НайденныеСтрокиЗапасов Цикл
						НоваяСтрока = ТаблицаЗапасов.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрокаЗапасы);
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			СтрокаТаблицы.ТаблицаЗапасы.Очистить();
			СтрокаТаблицы.ТаблицаЗапасы = ТаблицаЗапасов.Скопировать();

		КонецЦикла;

	КонецЕсли;


	Если ДополнительныеСвойства.Свойство("ЭтоОтчетОПереработке") И ДополнительныеСвойства.ЭтоОтчетОПереработке Тогда

		ТаблицаДанных.Колонки.ТаблицаПродукция.Имя = "ТаблицаЗапасы";

	КонецЕсли;

КонецПроцедуры

Процедура УчестьОсобенностиДокументаУПД(СтрокаОписаниеСФ, ДополнительныеСвойства)

	Если Не ТипЗнч(СтрокаОписаниеСФ.ДанныеДокумента) = Тип("ТаблицаЗначений") Тогда

		Возврат;

	КонецЕсли;

	Если СтрокаОписаниеСФ.ДанныеДокумента.Колонки.Найти("ИдентификаторГосКонтракта") = Неопределено Тогда

		СтрокаОписаниеСФ.ДанныеДокумента.Колонки.Добавить("ИдентификаторГосКонтракта", Новый ОписаниеТипов("Строка"));

	КонецЕсли;

	Если СтрокаОписаниеСФ.ДанныеДокумента.Колонки.Найти("ПлатежныеДокументы") = Неопределено Тогда

		ТаблицаПД = Документы.СчетФактура.ПолучитьДатаНомерДокументовОплаты(СтрокаОписаниеСФ.ОснованиеУПД);
		СтрокаОписаниеСФ.ДанныеДокумента.Колонки.Добавить("ПлатежныеДокументы");
		Если ТаблицаПД <> Неопределено Тогда
			СтрокаОписаниеСФ.ДанныеДокумента[0].ПлатежныеДокументы = ТаблицаПД;
		КонецЕсли;

	КонецЕсли;

	Если ДополнительныеСвойства.Свойство("ЭтоЗаказНаряд") И ДополнительныеСвойства.ЭтоЗаказНаряд Тогда

		Для Каждого СтрокаТаблицы Из СтрокаОписаниеСФ.ДанныеДокумента Цикл

			Для Каждого СтрокаРаботыУслуги Из СтрокаТаблицы.ТаблицаРаботыУслуги Цикл

				ЗаполнитьЗначенияСвойств(СтрокаТаблицы.ТаблицаЗапасы.Добавить(), СтрокаРаботыУслуги);

			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

	Если ДополнительныеСвойства.Свойство("ЭтоОтчетОПереработке") И ДополнительныеСвойства.ЭтоОтчетОПереработке Тогда

		СтрокаОписаниеСФ.ДанныеДокумента.Колонки.ТаблицаПродукция.Имя = "ТаблицаЗапасы";

	КонецЕсли;

КонецПроцедуры

Функция РазобратьДокументыНаСчетаФактуры(МассивОбъектов, ЭтоУПД, ЭтоВходящийДокумент = Ложь) Экспорт

	ТаблицаОписанияСчетовФактур = Новый ТаблицаЗначений;
	ТаблицаОписанияСчетовФактур.Колонки.Добавить("СчетФактура",
		Новый ОписаниеТипов("ДокументСсылка.СчетФактура, ДокументСсылка.СчетФактураПолученный"));
	ТаблицаОписанияСчетовФактур.Колонки.Добавить("ОписаниеДокумента", Новый ОписаниеТипов("Строка"));
	ТаблицаОписанияСчетовФактур.Колонки.Добавить("ЭтоВходящийДокумент", Неопределено); // Для УПД без счетов-фактур
	ТаблицаОписанияСчетовФактур.Колонки.Добавить("ОснованиеУПД", Неопределено); // Для УПД без счетов-фактур
	ТаблицаОписанияСчетовФактур.Колонки.Добавить("ВерсияДокумента", Неопределено);
	ТаблицаОписанияСчетовФактур.Колонки.Добавить("ДанныеДокумента", Неопределено);
	ТаблицаОписанияСчетовФактур.Колонки.Добавить("Постановление", Неопределено);
	ТаблицаОписанияСчетовФактур.Колонки.Добавить("ПФТолькоВРублях", Новый ОписаниеТипов("Булево"));

	Для Каждого ОбъектПечати Из МассивОбъектов Цикл

		Если ТипЗнч(ОбъектПечати) = Тип("ДокументСсылка.СчетФактура") Или ТипЗнч(ОбъектПечати) = Тип(
			"ДокументСсылка.СчетФактураПолученный") Тогда

			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Ссылка", ОбъектПечати);
			СтруктураДанных.Вставить("Версия", ?(СтруктураДанных.Ссылка.УдалитьЗапасы.Количество() > 0, "1.6.11",
				"1.6.12"));

		Иначе

			СтруктураДанных = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(ОбъектПечати,
				ЭтоВходящийДокумент);

		КонецЕсли;

		ОписаниеСчетФактуры = ТаблицаОписанияСчетовФактур.Добавить();
		ОписаниеСчетФактуры.ЭтоВходящийДокумент = ЭтоВходящийДокумент;
		ОписаниеСчетФактуры.ПФТолькоВРублях = Истина;

		Если СтруктураДанных <> Неопределено Тогда

			ОписаниеСчетФактуры.СчетФактура = СтруктураДанных.Ссылка;
			ОписаниеСчетФактуры.ВерсияДокумента = СтруктураДанных.Версия;

			Если ЗначениеЗаполнено(ОписаниеСчетФактуры.СчетФактура.Договор)
				 И ОписаниеСчетФактуры.СчетФактура.Договор.ВалютаРасчетов <> Константы.НациональнаяВалюта.Получить() Тогда

				ОписаниеСчетФактуры.ПФТолькоВРублях = ОписаниеСчетФактуры.СчетФактура.Договор.РасчетыВУсловныхЕдиницах;

			КонецЕсли;

			Если ЗначениеЗаполнено(ОписаниеСчетФактуры.СчетФактура) Тогда

				Если ОписаниеСчетФактуры.СчетФактура.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Аванс
					 Или ОписаниеСчетФактуры.СчетФактура.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Аванс Тогда

					ОписаниеСчетФактуры.ОписаниеДокумента = "ЭтоАванс";

				ИначеЕсли ОписаниеСчетФактуры.СчетФактура.ВидОперации = Перечисления.ВидыОперацийСчетФактура.СуммовыеРазницы Тогда

					ОписаниеСчетФактуры.ОписаниеДокумента = "ЭтоСуммоваяРазница";

				ИначеЕсли ОписаниеСчетФактуры.СчетФактура.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.СуммовыеРазницы Тогда

					ОписаниеСчетФактуры.ОписаниеДокумента = "НетВозможностиКорректноСформироватьДокумент";

				ИначеЕсли ОписаниеСчетФактуры.СчетФактура.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Корректировка
						  Или ОписаниеСчетФактуры.СчетФактура.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка Тогда

					ОписаниеСчетФактуры.ОписаниеДокумента = "ЭтоКорректировка";

				ИначеЕсли ЭтоВходящийДокумент Тогда

					Для Каждого ОписаниеОснование Из ОписаниеСчетФактуры.СчетФактура.ДокументыОснования Цикл

						Если ТипЗнч(ОписаниеОснование.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда

							ОписаниеСчетФактуры.ОписаниеДокумента = "НетВозможностиКорректноСформироватьДокумент";
							Прервать;

						КонецЕсли;

					КонецЦикла;

				ИначеЕсли ЭтоУПД И Не ЭтоВходящийДокумент И ОписаниеСчетФактуры.СчетФактура.СводныйКомиссионный Тогда

					ОписаниеСчетФактуры.ОписаниеДокумента = "ДокументНеФормируется";

				КонецЕсли;

			КонецЕсли;

		ИначеЕсли ЭтоУПД И ОбъектПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда

			ОписаниеСчетФактуры.ВерсияДокумента = "1.6.12";
			ОписаниеСчетФактуры.ОснованиеУПД = ОбъектПечати;

			Если ЗначениеЗаполнено(ОбъектПечати.Договор)
				 И ОбъектПечати.Договор.ВалютаРасчетов <> Константы.НациональнаяВалюта.Получить() Тогда

				ОписаниеСчетФактуры.ПФТолькоВРублях = ОбъектПечати.Договор.РасчетыВУсловныхЕдиницах;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаОписанияСчетовФактур;

КонецФункции

Функция ТаблицаДанныхВходящегоДокументаФормата1_6_12(СтрокаОписаниеСФ, ИспользоватьФаксимиле, ЭтоУПД, Ошибки)
	ДанныеДокумента = Неопределено;

	Для Каждого СтрокаОснования Из СтрокаОписаниеСФ.СчетФактура.ДокументыОснования Цикл

		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(СтрокаОснования.ДокументОснование);

		Если СтрокаОписаниеСФ.ОписаниеДокумента = "ЭтоАванс" Тогда

			Если Не ЭтоУПД Тогда

				МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СтрокаОписаниеСФ.СчетФактура);
				ТаблицаДанных = МенеджерДокумента.ДанныеПолученныхАвансовыхДокументовРегУчет(
					СтрокаОписаниеСФ.СчетФактура, ИспользоватьФаксимиле);
				Прервать;

			КонецЕсли;

		ИначеЕсли СтрокаОписаниеСФ.ОписаниеДокумента = "ЭтоКорректировка" Тогда

			Если ЭтоУПД Тогда

				ТаблицаДанных = Неопределено;

			Иначе

				ЭтоУниверсальныйКорректировочныйДокумент = Ложь;
				ТекстЗапроса = Документы.СчетФактураПолученный.ТекстЗапросаПечатьКорректировочныхСчетовФактур();
				ТаблицаДанных = Документы.СчетФактура.ПолучитьДанныеДляПечатиКорректировочныхСчетовФактур(
					СтрокаОписаниеСФ.СчетФактура, ТекстЗапроса, ЭтоУниверсальныйКорректировочныйДокумент);

				Если ТаблицаДанных.Количество() < 1 Тогда

					ТаблицаДанных = Неопределено;

				КонецЕсли;

			КонецЕсли;

		Иначе

			МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СтрокаОснования.ДокументОснование);
			ТаблицаДанных = МенеджерДокумента.ДанныеПолученныхДокументовРегУчет(МассивДокументов, Ложь,
				СтрокаОписаниеСФ.ПФТолькоВРублях, Ошибки);

			УчестьОсобенностиДокументаСчетФактураПолученный(ТаблицаДанных, СтрокаОписаниеСФ.СчетФактура, Неопределено);

		КонецЕсли;

		Если ДанныеДокумента = Неопределено Тогда

			ДанныеДокумента = ТаблицаДанных;

		ИначеЕсли ТипЗнч(ТаблицаДанных) = Тип("ТаблицаЗначений") Тогда

			ОбъединитьСведенияДокументовОснованийСчетовФактур(ДанныеДокумента, ТаблицаДанных);

		КонецЕсли;

	КонецЦикла;

	Возврат ДанныеДокумента;

КонецФункции

Функция ТаблицаДанныхИсходящегоДокументаФормата1_6_11(СтрокаОписаниеСФ, ИспользоватьФаксимиле, ЭтоУПД, Ошибки)
	Перем ДанныеДокумента;

	Если СтрокаОписаниеСФ.ОписаниеДокумента = "ЭтоКорректировка" Тогда

		ЭтоУниверсальныйКорректировочныйДокумент = Ложь;
		ТекстЗапроса = Документы.СчетФактура.ТекстЗапросаПечатьКорректировочныхСчетовФактур(
			ЭтоУниверсальныйКорректировочныйДокумент);
		ДанныеДокумента = Документы.СчетФактура.ПолучитьДанныеДляПечатиКорректировочныхСчетовФактур(
			СтрокаОписаниеСФ.СчетФактура, ТекстЗапроса, ЭтоУниверсальныйКорректировочныйДокумент);

		Если ТипЗнч(ДанныеДокумента) = Тип("ТаблицаЗначений") И ДанныеДокумента.Количество() < 1 Тогда

			ДанныеДокумента = Неопределено;

		КонецЕсли;

	Иначе

		МассивСчетФактур = Новый Массив;
		МассивСчетФактур.Добавить(СтрокаОписаниеСФ.СчетФактура);

		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СтрокаОписаниеСФ.СчетФактура);
		ДанныеДокумента = МенеджерДокумента.ДанныеДокументовСчетФактура(МассивСчетФактур, ИспользоватьФаксимиле);

	КонецЕсли;

	Возврат ДанныеДокумента;

КонецФункции

Функция ТаблицаДанныхИсходящегоДокументаФормата1_6_12(СтрокаОписаниеСФ, ИспользоватьФаксимиле, ЭтоУПД, Ошибки)
	Перем ДанныеДокумента;

	Для Каждого СтрокаОснования Из СтрокаОписаниеСФ.СчетФактура.ДокументыОснования Цикл

		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(СтрокаОснования.ДокументОснование);

		Если СтрокаОписаниеСФ.ОписаниеДокумента = "ЭтоАванс" Тогда

			Если Не ЭтоУПД Тогда

				МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СтрокаОписаниеСФ.СчетФактура);
				ДанныеДокумента = МенеджерДокумента.ДанныеАвансовыхДокументовРегУчет(СтрокаОписаниеСФ.СчетФактура,
					ИспользоватьФаксимиле);
				Прервать;

			КонецЕсли;

		ИначеЕсли СтрокаОписаниеСФ.ОписаниеДокумента = "ЭтоСуммоваяРазница" Тогда

			Если Не ЭтоУПД Тогда

				МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СтрокаОписаниеСФ.СчетФактура);
				ТаблицаДанных = МенеджерДокумента.ДанныеДокументовСуммовойРазницыРегУчет(СтрокаОписаниеСФ.СчетФактура,
					ИспользоватьФаксимиле);

			КонецЕсли;

		ИначеЕсли СтрокаОписаниеСФ.ОписаниеДокумента = "ЭтоКорректировка" Тогда

			Если ЭтоУПД Тогда

				ТаблицаДанных = Неопределено;

			Иначе

				ЭтоУниверсальныйКорректировочныйДокумент = Ложь;
				ТекстЗапроса = Документы.СчетФактура.ТекстЗапросаПечатьКорректировочныхСчетовФактур(
					ЭтоУниверсальныйКорректировочныйДокумент);
				ТаблицаДанных = Документы.СчетФактура.ПолучитьДанныеДляПечатиКорректировочныхСчетовФактур(
					СтрокаОписаниеСФ.СчетФактура, ТекстЗапроса, ЭтоУниверсальныйКорректировочныйДокумент);

				Если ТаблицаДанных.Количество() < 1 Тогда

					ТаблицаДанных = Неопределено;

				КонецЕсли;

			КонецЕсли;

		Иначе

			МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СтрокаОснования.ДокументОснование);
			ТаблицаДанных = МенеджерДокумента.ДанныеДокументовРегУчет(МассивДокументов, ИспользоватьФаксимиле,
				СтрокаОписаниеСФ.ПФТолькоВРублях, Ошибки);

			ДополнительныеСвойства = Новый Структура;
			ДополнительныеСвойства.Вставить("ЭтоЗаказНаряд", (ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")));
			ДополнительныеСвойства.Вставить("ЭтоОтчетОПереработке", (ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.ОтчетОПереработке")));
			ДополнительныеСвойства.Вставить("ЭтоОтчетКомиссионера", (ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионера")));

			УчестьОсобенностиДокументаСчетФактура(ТаблицаДанных, СтрокаОписаниеСФ.СчетФактура, ДополнительныеСвойства);

		КонецЕсли;

		Если ДанныеДокумента = Неопределено Тогда

			ДанныеДокумента = ТаблицаДанных;

		ИначеЕсли ТипЗнч(ТаблицаДанных) = Тип("ТаблицаЗначений") Тогда

			ОбъединитьСведенияДокументовОснованийСчетовФактур(ДанныеДокумента, ТаблицаДанных);

		КонецЕсли;

	КонецЦикла;

	Возврат ДанныеДокумента;

КонецФункции

Процедура УточнитьНомерПостановленияПоПолученнымДанным(СтрокаОписаниеСФ)

	Если ТипЗнч(СтрокаОписаниеСФ.ДанныеДокумента) <> Тип("ТаблицаЗначений")
		 Или СтрокаОписаниеСФ.ДанныеДокумента.Количество() < 1 Тогда

		СтрокаОписаниеСФ.Постановление = "1137_625";
		Возврат;

	КонецЕсли;

	ДокументФормируетсяСогласноСФ981 = (СтрокаОписаниеСФ.ДанныеДокумента[0].ДатаДокумента
										>= Константы.НачалоИспользованияСФ981.Получить());
	Если ДокументФормируетсяСогласноСФ981 Тогда

		СтрокаОписаниеСФ.Постановление = "981";

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДанныеДокументов(ТаблицаОписанияСчетовФактур, ОбъектыПечати, ЭтоУПД, ИспользоватьФаксимиле, Ошибки) Экспорт

	Для Каждого СтрокаОписаниеСФ Из ТаблицаОписанияСчетовФактур Цикл

		Если СтрокаОписаниеСФ.ОписаниеДокумента = "НетВозможностиКорректноСформироватьДокумент" Тогда

			ТекстОшибки = НСтр("ru ='Печатная форма для данного документа не формируется.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстОшибки, "");
			Продолжить;

		КонецЕсли;

		Если СтрокаОписаниеСФ.ОписаниеДокумента = "ДокументНеФормируется" Тогда

			ТекстОшибки = НСтр("ru ='Нет оснований для формирования документа.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстОшибки, "");
			Продолжить;

		КонецЕсли;

		Если СтрокаОписаниеСФ.ВерсияДокумента = "1.6.11" Тогда

			Если ЭтоУПД И СтрокаОписаниеСФ.ОписаниеДокумента = "ЭтоКорректировка" Тогда

				ТекстОшибки = НСтр(
					"ru ='Нет оснований для формирования документа. Используйте печатную форму счет-фактура.'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстОшибки, "");
				Продолжить;

			КонецЕсли;

			СтрокаОписаниеСФ.ДанныеДокумента = ТаблицаДанныхИсходящегоДокументаФормата1_6_11(СтрокаОписаниеСФ,
				ИспользоватьФаксимиле, ЭтоУПД, Ошибки);

		ИначеЕсли СтрокаОписаниеСФ.ВерсияДокумента = "1.6.12" Тогда

			Если ЗначениеЗаполнено(СтрокаОписаниеСФ.СчетФактура) Тогда

				Если СтрокаОписаниеСФ.СчетФактура.ДокументыОснования.Количество() < 1 Тогда

					ТекстОшибки = НСтр("ru ='Не указан документ(ы), который является основанием счет-фактуры'");
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстОшибки, "");
					Продолжить;

				КонецЕсли;

				Если СтрокаОписаниеСФ.ЭтоВходящийДокумент Тогда

					СтрокаОписаниеСФ.ДанныеДокумента = ТаблицаДанныхВходящегоДокументаФормата1_6_12(СтрокаОписаниеСФ,
						ИспользоватьФаксимиле, ЭтоУПД, Ошибки);

				Иначе

					СтрокаОписаниеСФ.ДанныеДокумента = ТаблицаДанныхИсходящегоДокументаФормата1_6_12(СтрокаОписаниеСФ,
						ИспользоватьФаксимиле, ЭтоУПД, Ошибки);

				КонецЕсли;

			ИначеЕсли ЭтоУПД И ЗначениеЗаполнено(СтрокаОписаниеСФ.ОснованиеУПД) Тогда

				МассивДокументов = Новый Массив;
				МассивДокументов.Добавить(СтрокаОписаниеСФ.ОснованиеУПД);

				МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СтрокаОписаниеСФ.ОснованиеУПД);
				СтрокаОписаниеСФ.ДанныеДокумента = МенеджерДокумента.ДанныеДокументовРегУчет(МассивДокументов,
					ИспользоватьФаксимиле, СтрокаОписаниеСФ.ПФТолькоВРублях, Ошибки);

				ДополнительныеСвойства = Новый Структура;
				ДополнительныеСвойства.Вставить("ЭтоЗаказНаряд", (ТипЗнч(СтрокаОписаниеСФ.ОснованиеУПД) = Тип(
					"ДокументСсылка.ЗаказПокупателя")));
				ДополнительныеСвойства.Вставить("ЭтоОтчетОПереработке", (ТипЗнч(СтрокаОписаниеСФ.ОснованиеУПД) = Тип(
					"ДокументСсылка.ОтчетОПереработке")));

				УчестьОсобенностиДокументаУПД(СтрокаОписаниеСФ, ДополнительныеСвойства);

			КонецЕсли;

		Иначе

			ТекстОшибки = НСтр(
				"ru ='Нет данных для формирования документа. Возможно отсутствует подчиненный счет-фактура.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстОшибки, "");
			Продолжить;

		КонецЕсли;

		УточнитьНомерПостановленияПоПолученнымДанным(СтрокаОписаниеСФ);

	КонецЦикла;

КонецПроцедуры

Процедура ВывестиТабличныеДокументы(ОписаниеПечатнойФормы, ТаблицаОписанияСчетовФактур, ОбъектыПечати, ЭтоУПД)
	Перем ПервыйДокумент, НомерСтрокиНачало;

	Для Каждого СтрокаОписания Из ТаблицаОписанияСчетовФактур Цикл

		Если СтрокаОписания.ДанныеДокумента = Неопределено Тогда

			Продолжить;

		КонецЕсли;

		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ОписаниеПечатнойФормы.ТабличныйДокумент, ПервыйДокумент,
			НомерСтрокиНачало);

		Если СтрокаОписания.ОписаниеДокумента = "ЭтоКорректировка" Тогда

			Документы.СчетФактура.ВывестиКорректировочныйСчетФактуруВТабличныйДокумент(ОписаниеПечатнойФормы,
				СтрокаОписания.ДанныеДокумента, ЭтоУПД);

		Иначе

			СформироватьПФ(ОписаниеПечатнойФормы, СтрокаОписания.ДанныеДокумента, ЭтоУПД);

		КонецЕсли;

		СсылкаОбластиПечати = ?(Не ЗначениеЗаполнено(СтрокаОписания.СчетФактура) И ЭтоУПД, СтрокаОписания.ОснованиеУПД,
			СтрокаОписания.СчетФактура);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ОписаниеПечатнойФормы.ТабличныйДокумент, НомерСтрокиНачало,
			ОбъектыПечати, СсылкаОбластиПечати);

	КонецЦикла;

КонецПроцедуры

Процедура ДополнитьДанныеШапкиСведениямиОДокументеОтгрузки(ДанныеШапки, ТаблицаДокумента, ЭтоУПД = Ложь)
	
	ПредыдущийДокумент = Неопределено;
	ПерваяСтрокаПоДокументуОтгрузки = 1;
	ПоследняяСтрокаПоДокументуОтгрузки = 1;
	ШаблонПодстрокиДокументаОбОтгрузке = "№ п/п %1 №%2 от %3";
	ДокументыОбОтгрузке = "";
	Если ЭтоУПД Тогда
		ПоследняяСтрокаПоДокументуОтгрузки = ТаблицаДокумента.Количество();
		Если ПерваяСтрокаПоДокументуОтгрузки = ПоследняяСтрокаПоДокументуОтгрузки Тогда
			ДиапазонСтрок = "" + ПерваяСтрокаПоДокументуОтгрузки;
		Иначе
			ДиапазонСтрок = "" + ПерваяСтрокаПоДокументуОтгрузки + "-" + ПоследняяСтрокаПоДокументуОтгрузки;
		КонецЕсли;
		
		НомерНаПечать = ДанныеШапки.Номер;
		
		ДокументОтгрузки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПодстрокиДокументаОбОтгрузке,
				ДиапазонСтрок,
				НомерНаПечать,
				Формат(ДанныеШапки.Дата, "ДЛФ='Д'"));
		ДанныеШапки.Вставить("ДокументыОбОтгрузке", ДокументОтгрузки);
		
		Возврат;
	КонецЕсли;
	Для ИндексСтроки = 0 По ТаблицаДокумента.Количество() - 1 Цикл
		ЭтоПоследняяСтрока = (ИндексСтроки = ТаблицаДокумента.Количество() - 1);
		ТекущийНомерСтроки = ИндексСтроки + 1;
		ПоследняяСтрокаПоДокументуОтгрузки = ТекущийНомерСтроки;
		
		// Для 1-й строки установим предыдущий документ.
		Если Не ЗначениеЗаполнено(ПредыдущийДокумент) Тогда
			// Запоминаем первый документ отгрузки.
			ПредыдущийДокумент = ТаблицаДокумента[ИндексСтроки].Ссылка;
		КонецЕсли;
		
		Если ТаблицаДокумента[ИндексСтроки].Ссылка <> ПредыдущийДокумент Тогда
			// Выводим предыдущий документ.
			ПоследняяСтрокаПоДокументуОтгрузки = ТекущийНомерСтроки - 1;
			
			Если (ПоследняяСтрокаПоДокументуОтгрузки - ПерваяСтрокаПоДокументуОтгрузки) > 0 Тогда
				ДиапазонСтрок = "" + ПерваяСтрокаПоДокументуОтгрузки + "-" + ПоследняяСтрокаПоДокументуОтгрузки;
			Иначе
				ДиапазонСтрок = ПерваяСтрокаПоДокументуОтгрузки;
			КонецЕсли;
			
			НомерНаПечать = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(
				ТаблицаДокумента[ИндексСтроки-1].ДатаОтгрузочногоДокумента,
				Строка(ТаблицаДокумента[ИндексСтроки-1].НомерОтгрузочногоДокумента),
				"");
			
			ДокументОтгрузки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПодстрокиДокументаОбОтгрузке,
				ДиапазонСтрок,
				НомерНаПечать,
				Формат(ТаблицаДокумента[ИндексСтроки-1].ДатаОтгрузочногоДокумента, "ДЛФ='Д'") + " г.");
				
			Если НЕ ЗначениеЗаполнено(ДокументыОбОтгрузке) Тогда
				ДокументыОбОтгрузке = ДокументОтгрузки;
			Иначе
				ДокументыОбОтгрузке = ДокументыОбОтгрузке + ";" + ДокументОтгрузки;
			КонецЕсли;
			
			ПерваяСтрокаПоДокументуОтгрузки = ТекущийНомерСтроки;
			ПоследняяСтрокаПоДокументуОтгрузки    = ТекущийНомерСтроки;
			ПредыдущийДокумент = ТаблицаДокумента[ИндексСтроки].Ссылка;
		КонецЕсли;
		
		Если ЭтоПоследняяСтрока Тогда
			// Выводим последний документ.
			Если (ПоследняяСтрокаПоДокументуОтгрузки - ПерваяСтрокаПоДокументуОтгрузки) > 0 Тогда
				ДиапазонСтрок = "" + ПерваяСтрокаПоДокументуОтгрузки + "-" + ПоследняяСтрокаПоДокументуОтгрузки;
			Иначе
				ДиапазонСтрок = ПерваяСтрокаПоДокументуОтгрузки;
			КонецЕсли;
			
			ПостфиксНомераДокумента = "";
			Если ТипЗнч(ТаблицаДокумента[ИндексСтроки].Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				НомерНаПечать = ТаблицаДокумента[ИндексСтроки].НомерОтгрузочногоДокумента;
			Иначе
				НомерНаПечать = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(
					ТаблицаДокумента[ИндексСтроки].ДатаОтгрузочногоДокумента,
					Строка(ТаблицаДокумента[ИндексСтроки].НомерОтгрузочногоДокумента),
					"");
			КонецЕсли;
			
			ДокументОтгрузки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПодстрокиДокументаОбОтгрузке,
				ДиапазонСтрок,
				НомерНаПечать,
				Формат(ТаблицаДокумента[ИндексСтроки].ДатаОтгрузочногоДокумента, "ДЛФ='Д'") + " г.");
			Если НЕ ЗначениеЗаполнено(ДокументыОбОтгрузке) Тогда
				ДокументыОбОтгрузке = ДокументОтгрузки;
			Иначе
				ДокументыОбОтгрузке = ДокументыОбОтгрузке + ";" + ДокументОтгрузки;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	ДанныеШапки.Вставить("ДокументыОбОтгрузке", ДокументыОбОтгрузке);
	
КонецПроцедуры

#КонецОбласти

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Перем Ошибки;

	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "СчетФактура");
	Если ПечатнаяФорма <> Неопределено Тогда

		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = Обработки.ПечатьСчетФактура.КлючПараметровПечати(Ложь);
		ПечатнаяФорма.ПолныйПутьКМакету = Неопределено;
		ПечатнаяФорма.СинонимМакета = Обработки.ПечатьСчетФактура.ПредставлениеПФ(Ложь, Ложь);

		ТаблицаОписанияСчетовФактур = РазобратьДокументыНаСчетаФактуры(МассивОбъектов, Ложь);
		ЗаполнитьДанныеДокументов(ТаблицаОписанияСчетовФактур, ОбъектыПечати, Ложь, Ложь, Ошибки);

		ВывестиТабличныеДокументы(ПечатнаяФорма, ТаблицаОписанияСчетовФактур, ОбъектыПечати, Ложь);

	КонецЕсли;

	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "УниверсальныйПередаточныйДокумент");
	Если ПечатнаяФорма <> Неопределено Тогда

		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = Обработки.ПечатьСчетФактура.КлючПараметровПечати(Истина);
		ПечатнаяФорма.ПолныйПутьКМакету = Неопределено;
		ПечатнаяФорма.СинонимМакета = Обработки.ПечатьСчетФактура.ПредставлениеПФ(Истина, Ложь);

		ТаблицаОписанияСчетовФактур = РазобратьДокументыНаСчетаФактуры(МассивОбъектов, Истина);
		ЗаполнитьДанныеДокументов(ТаблицаОписанияСчетовФактур, ОбъектыПечати, Истина, Ложь, Ошибки);

		ВывестиТабличныеДокументы(ПечатнаяФорма, ТаблицаОписанияСчетовФактур, ОбъектыПечати, Истина);

	КонецЕсли;

	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм,
		"УниверсальныйПередаточныйДокументФаксимиле");
	Если ПечатнаяФорма <> Неопределено Тогда

		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = Обработки.ПечатьСчетФактура.КлючПараметровПечати(Истина);
		ПечатнаяФорма.ПолныйПутьКМакету = Неопределено;
		ПечатнаяФорма.СинонимМакета = Обработки.ПечатьСчетФактура.ПредставлениеПФ(Истина, Истина);

		ТаблицаОписанияСчетовФактур = РазобратьДокументыНаСчетаФактуры(МассивОбъектов, Истина);
		ЗаполнитьДанныеДокументов(ТаблицаОписанияСчетовФактур, ОбъектыПечати, Истина, Истина, Ошибки);

		ВывестиТабличныеДокументы(ПечатнаяФорма, ТаблицаОписанияСчетовФактур, ОбъектыПечати, Истина);

	КонецЕсли;

	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "СчетФактураПолученный");
	Если ПечатнаяФорма <> Неопределено Тогда

		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = Обработки.ПечатьСчетФактура.КлючПараметровПечати(Ложь);
		ПечатнаяФорма.ПолныйПутьКМакету = Неопределено;
		ПечатнаяФорма.СинонимМакета = Обработки.ПечатьСчетФактура.ПредставлениеПФ(Ложь, Ложь);

		ТаблицаОписанияСчетовФактур = РазобратьДокументыНаСчетаФактуры(МассивОбъектов, Ложь, Истина);
		ЗаполнитьДанныеДокументов(ТаблицаОписанияСчетовФактур, ОбъектыПечати, Ложь, Ложь, Ошибки);

		ВывестиТабличныеДокументы(ПечатнаяФорма, ТаблицаОписанияСчетовФактур, ОбъектыПечати, Ложь);

	КонецЕсли;

	Если Ошибки <> Неопределено Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);

	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	ЭлектроннаяПочтаУНФ.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов,
		КоллекцияПечатныхФорм);

КонецПроцедуры

#КонецЕсли