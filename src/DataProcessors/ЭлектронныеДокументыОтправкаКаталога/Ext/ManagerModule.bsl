#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция НовыеНастройкиПечати() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОбязательныеПоля", Новый Массив);
	Результат.Вставить("ПараметрыДанных", Новый Структура);
	Результат.Вставить("КомпоновщикНастроек", Неопределено); // Отбор
	Результат.Вставить("ИмяМакетаСхемыКомпоновкиДанных", Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Функция подготавливает структуру данных, необходимую для печати этикеток и ценников.
//
// Возвращаемое значение:
//  Структура - данные, необходимые для печати этикеток и ценников.
//
Функция ПодготовитьДанныеДляПечати(СтруктураНастроек) Экспорт
	
	Результат = НовыеДанныеДляПечати();
	
	////////////////////////////////////////////////////////////////////////////////
	// ПОДГОТОВКА СХЕМЫ КОМПОНОВКИ ДАННЫХ И КОМПОНОВЩИКА НАСТРОЕК СКД
	
	// Схема компоновки.
	СхемаКомпоновкиДанных = Обработки.ЭлектронныеДокументыОтправкаКаталога.ПолучитьМакет(СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных);
	
	// Подготовка компоновщика макета компоновки данных.
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Компоновщик.Настройки.Отбор.Элементы.Очистить();
	
	// Отбор компоновщика настроек.
	Если СтруктураНастроек.КомпоновщикНастроек <> Неопределено Тогда
		Обработки.ПечатьЭтикетокИЦенников.СкопироватьЭлементыОтбора(Компоновщик.Настройки.Отбор, СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор);
	КонецЕсли;
	
	УстановитьОтборПоТипуЦен(Компоновщик);
	
	// Выбранные поля компоновщика настроек.
	Для Каждого ОбязательноеПоле Из СтруктураНастроек.ОбязательныеПоля Цикл
		ПолеСКД = НайтиПолеСКДПоПолномуИмени(Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, ОбязательноеПоле);
		Если ПолеСКД <> Неопределено Тогда
			ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = ПолеСКД.Поле;
		КонецЕсли;
	КонецЦикла;
	
	// Компоновка макета компоновки данных.
	КомпоновщикМакета 	  = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	////////////////////////////////////////////////////////////////////////////////
	// ПОДГОТОВКА ВСПОМОГАТЕЛЬНЫХ ДАННЫХ ДЛЯ СОПОСТАВЛЕНИЯ ПОЛЕЙ ШАБЛОНА И СКД
	
	Для Каждого Поле Из МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Поля Цикл
		Результат.СоответствиеПолейСКДКолонкамТаблицыТоваров.Вставить(
			Справочники.ШаблоныЭтикетокИЦенников.ПолучитьИмяПоляВШаблоне(Поле.ПутьКДанным),
			Поле.Имя);
	КонецЦикла;
	
	////////////////////////////////////////////////////////////////////////////////
	// ВЫПОЛНЕНИЕ ЗАПРОСА
	
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос);
	
	// Заполнение параметров с полей отбора компоновщика настроек формы обработки.
	Для Каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	Результат.ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // ПодготовитьСтруктуруДанных()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция НовыйЗапросТовары() Экспорт
	
	Результат = Новый Запрос;
	Результат.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТаблицаТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ Вт_ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	Вт_ТаблицаТоваров.Характеристика КАК Характеристика,
	|	Вт_ТаблицаТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	NULL КАК Упаковка,
	|	"""" КАК УпаковкаКод,
	|	"""" КАК УпаковкаНаименование
	|ПОМЕСТИТЬ Вт_Товары
	|ИЗ
	|	Вт_ТаблицаТоваров КАК Вт_ТаблицаТоваров
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.ЕдиницаИзмерения,
	|	ЕдиницыИзмерения.Ссылка,
	|	ЕдиницыИзмерения.Код,
	|	ЕдиницыИзмерения.Наименование
	|ИЗ
	|	Вт_ТаблицаТоваров КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО ТаблицаТоваров.Номенклатура = ЕдиницыИзмерения.Владелец
	|			И (&ВыгружатьЕдиницыИзмерения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_Товары.Номенклатура.Артикул КАК Артикул,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(Вт_Товары.Номенклатура.НаименованиеПолное, 1, 10) = """"
	|			ТОГДА Вт_Товары.Номенклатура.Наименование
	|		ИНАЧЕ ПОДСТРОКА(Вт_Товары.Номенклатура.НаименованиеПолное, 1, 150)
	|	КОНЕЦ КАК Наименование,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(Вт_Товары.Номенклатура.НаименованиеПолное, 1, 10) = """"
	|			ТОГДА Вт_Товары.Номенклатура.Наименование
	|		ИНАЧЕ ПОДСТРОКА(Вт_Товары.Номенклатура.НаименованиеПолное, 1, 150)
	|	КОНЕЦ КАК НоменклатураНаименование,
	|	Вт_Товары.Номенклатура КАК Номенклатура,
	|	Вт_Товары.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Вт_Товары.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Вт_Товары.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Вт_Товары.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Вт_Товары.ЕдиницаИзмерения.Наименование КАК ЕдиницаХраненияОстатковНаименование,
	|	""1"" КАК ЕдиницаХраненияОстатковКоэффициент,
	|	Вт_Товары.ЕдиницаИзмерения КАК БазоваяЕдиница,
	|	Вт_Товары.Упаковка КАК Упаковка,
	|	Вт_Товары.УпаковкаКод КАК УпаковкаКод,
	|	Вт_Товары.УпаковкаНаименование КАК УпаковкаНаименование,
	|	ЕСТЬNULL(Вт_Товары.Характеристика.Наименование, """") КАК ХарактеристикаНаименование,
	|	Вт_Товары.Характеристика КАК Характеристика,
	|	Вт_Товары.Номенклатура.СтранаПроисхождения.Наименование КАК Страна,
	|	Вт_Товары.Номенклатура.ВидАлкогольнойПродукции.Код КАК КодВидаАлкогольнойПродукции,
	|	Вт_Товары.Номенклатура.ИмпортнаяАлкогольнаяПродукция КАК ИмпортнаяАлкогольнаяПродукция,
	|	Вт_Товары.Номенклатура.ПроизводительИмпортерАлкогольнойПродукции.ИНН КАК ИННПроизводителяИмпортера,
	|	Вт_Товары.Номенклатура.ПроизводительИмпортерАлкогольнойПродукции.КПП КАК КПППроизводителяИмпортера,
	|	Вт_Товары.Номенклатура.ОбъемДАЛ КАК ОбъемДАЛ
	|ИЗ
	|	Вт_Товары КАК Вт_Товары
	|ГДЕ
	|	НЕ Вт_Товары.Номенклатура.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Владелец,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ШтрихкодыНоменклатуры.ЕдиницаИзмерения.Код,
	|	ШтрихкодыНоменклатуры.Штрихкод
	|ИЗ
	|	Вт_Товары КАК Вт_Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО Вт_Товары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И Вт_Товары.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|ИТОГИ ПО
	|	Владелец,
	|	Характеристика";
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыеДанныеДляПечати()
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаТоваров", Неопределено);
	Результат.Вставить("СоответствиеПолейСКДКолонкамТаблицыТоваров", Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции // ПолучитьПустуюСтруктуруРезультата()

// Среди элементов полей СКД найти поле по имени.
//
Функция НайтиПолеСКДПоИмени(Элементы, Имя)
	
	Для Каждого Элемент Из Элементы Цикл
		Если ВРЕГ(Строка(Элемент.Поле)) = ВРЕГ(Имя) Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // НайтиПолеСКДПоИмени()

// Найти поле СКД по полному имени.
//
Функция НайтиПолеСКДПоПолномуИмени(Элементы, ПолноеИмя)

	масЧастейИмен = ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя);
	колЧастей 	  = масЧастейИмен.Количество();
	
	текИмя = масЧастейИмен[0];
	Поле   = НайтиПолеСКДПоИмени(Элементы, текИмя);
	
	Если Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Сч = 2 По колЧастей Цикл
		
		текИмя = текИмя + "." + масЧастейИмен[Сч-1];
		Поле   = НайтиПолеСКДПоИмени(Поле.Элементы, текИмя);
		
		Если Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Поле;

КонецФункции // НайтиПолеСКДПоПолномуИмени()

// Полное имя поля разделить по частям
//
Функция ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя)

	масЧастей = Новый Массив;
	СтрИмя 	  = ПолноеИмя;
	
	Пока НЕ ПустаяСтрока(СтрИмя) Цикл
		
		Если Лев(СтрИмя, 1) = "[" Тогда
			
			Поз = СтрНайти(СтрИмя, "]");
			Если Поз = 0 Тогда
				масЧастей.Добавить(Сред(СтрИмя, 2));
				СтрИмя = "";
			Иначе
				масЧастей.Добавить(Сред(СтрИмя, 1, Поз));
				СтрИмя = Сред(СтрИмя, Поз + 2);
			КонецЕсли;
			
		Иначе
			
			Поз = СтрНайти(СтрИмя, ".");
			Если Поз = 0 Тогда
				масЧастей.Добавить(СтрИмя);
				СтрИмя = "";
			Иначе
				масЧастей.Добавить(Лев(СтрИмя, Поз - 1));
				СтрИмя = Сред(СтрИмя, Поз + 1);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат масЧастей;

КонецФункции // ИзПолногоИмениПоляПолучитьЧасти()

Процедура УстановитьОтборПоТипуЦен(Компоновщик)
	
	ОтборТипЦен = НайтиЭлементОтбораПоИмени(Компоновщик.Настройки.Отбор, "ТипЦен");
	
	Если ОтборТипЦен = Неопределено Тогда
		Возврат; // нет такого отбора в СКД
	КонецЕсли;
	
	Если НЕ ОтборТипЦен.Использование
		ИЛИ ОтборТипЦен.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно Тогда
		
		Если ОтборТипЦен.Использование Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Возможен отбор только по одному типу цен. Информация о ценах номенклатуры не заполнена.'"));
		КонецЕсли;
		
		ОтборТипЦен.Использование  = Истина;
		ОтборТипЦен.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборТипЦен.ПравоеЗначение = Справочники.ВидыЦен.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиЭлементОтбораПоИмени(Отбор, ИмяЭлемента)
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	Результат 	   = Неопределено;
	
	Для Каждого ТекЭлемент Из Отбор.Элементы Цикл
		
		Если ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Результат = НайтиЭлементОтбораПоИмени(ТекЭлемент, ИмяЭлемента);
			Если НЕ Результат = Неопределено Тогда
				Прервать;
			КонецЕсли;
		Иначе
			Если ТекЭлемент.ЛевоеЗначение = ПолеКомпоновки Тогда
				Результат = ТекЭлемент;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли